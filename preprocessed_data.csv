,Method Names,Method Text
0,onPreviewFrame,"    public void onPreviewFrame(byte[] data, Camera camera) {

        Point cameraResolution = configManager.getCameraResolution();

        Handler thePreviewHandler = previewHandler;"
2,doInBackground,"        protected Object doInBackground(Object... objects) {

            try {
"
4,shutdown,"    public void shutdown() {

        cancel();"
5,cancel,"    private synchronized void cancel() {

        AsyncTask<?, ?, ?> task = inactivityTask;
"
6,onResume,"    public synchronized void onResume() {

        if (registered) {
"
7,onPause,"    public synchronized void onPause() {

        cancel();
"
8,onActivity,"    public synchronized void onActivity() {

        cancel();

        inactivityTask = new InactivityAsyncTask();"
9,run,"    public void run() {

        Looper.prepare();

        handler = new DecodeHandler(activity, hints);
"
11,buildLuminanceSource,"    public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data, int width, int height) {

        Rect rect = activity.getCropRect();

        if (rect == null) {"
13,handleMessage,"    public void handleMessage(Message message) {

        if (!running) {
"
14,bundleThumbnail,"    private static void bundleThumbnail(PlanarYUVLuminanceSource source, Bundle bundle) {

        int[] pixels = source.renderThumbnail();

        int width = source.getThumbnailWidth();

        int height = source.getThumbnailHeight();

        Bitmap bitmap = Bitmap.createBitmap(pixels, 0, width, width, height, Bitmap.Config.ARGB_8888);"
17,restartPreviewAndDecode,"    private void restartPreviewAndDecode() {

        if (state == State.SUCCESS) {"
18,quitSynchronously,"    public void quitSynchronously() {

        state = State.DONE;

        cameraManager.stopPreview();

        Message quit = Message.obtain(decodeThread.getHandler(), R.id.quit);

        quit.sendToTarget();"
19,handleMessage,"    public void handleMessage(Message message) {

        if (message.what == R.id.restart_preview) {"
23,requestPreviewFrame,"    public synchronized void requestPreviewFrame(Handler handler, int message) {

        Camera theCamera = camera;
"
24,stopPreview,"    public synchronized void stopPreview() {

        if (autoFocusManager != null) {
"
25,startPreview,"    public synchronized void startPreview() {

        Camera theCamera = camera;
"
26,closeDriver,"    public synchronized void closeDriver() {

        if (camera != null) {"
27,isOpen,"    public synchronized boolean isOpen() {

        return camera != null;"
28,get,"    public static CameraManager get() {

        return cameraManager;"
29,openDriver,"    public synchronized void openDriver(SurfaceHolder holder) throws IOException {

        Camera theCamera = camera;

        if (theCamera == null) {



            if (requestedCameraId >= 0) {"
30,compare,"            public int compare(Camera.Size a, Camera.Size b) {

                int aPixels = a.height * a.width;

                int bPixels = b.height * b.width;

                if (bPixels < aPixels) {"
37,close,"    public synchronized void close() {

        if (mediaPlayer != null) {"
38,onError,"    public synchronized boolean onError(MediaPlayer mp, int what, int extra) {

        if (what == MediaPlayer.MEDIA_ERROR_SERVER_DIED) {
"
40,buildMediaPlayer,"    private MediaPlayer buildMediaPlayer(Context activity) {

        MediaPlayer mediaPlayer = new MediaPlayer();

        mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);

        mediaPlayer.setOnCompletionListener(this);"
41,playBeepSoundAndVibrate,"    public synchronized void playBeepSoundAndVibrate() {

        if (playBeep && mediaPlayer != null) {
"
42,updatePrefs,"    private synchronized void updatePrefs() {

        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(activity);

        playBeep = shouldBeep(prefs, activity);
"
43,shouldBeep,"    private static boolean shouldBeep(SharedPreferences prefs, Context activity) {

        boolean shouldPlayBeep = true;

        if (shouldPlayBeep) {"
44,doInBackground,"        protected Object doInBackground(Object... voids) {

            try {

                Thread.sleep(AUTO_FOCUS_INTERVAL_MS);"
45,stop,"    public synchronized void stop() {

        stopped = true;
"
46,cancelOutstandingTask,"    private synchronized void cancelOutstandingTask() {

        if (outstandingTask != null) {"
47,start,"    public synchronized void start() {

        if (useAutoFocus) {"
48,autoFocusAgainLater,"    private synchronized void autoFocusAgainLater() {

        if (!stopped && outstandingTask == null) {"
49,onAutoFocus,"    public synchronized void onAutoFocus(boolean success, Camera theCamera) {

        focusing = false;
"
50,onItemLongClick,"        boolean onItemLongClick(ZrcListView parent, View view, int position, long id);
"
51,onItemClick,"        void onItemClick(ZrcListView parent, View view, int position, long id);
"
52,onScroll,"        public void onScroll(ZrcAbsListView view, int firstVisibleItem, int visibleItemCount,
"
53,onScrollStateChanged,"        public void onScrollStateChanged(ZrcAbsListView view, int scrollState);
"
60,onFinishInflate,"    protected void onFinishInflate() {

        super.onFinishInflate();

        int count = getChildCount();"
61,onFocusChanged,"    protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect) {

        super.onFocusChanged(gainFocus, direction, previouslyFocusedRect);


"
62,areFooterDividersEnabled,"    public boolean areFooterDividersEnabled() {

        return mFooterDividersEnabled;"
64,areHeaderDividersEnabled,"    public boolean areHeaderDividersEnabled() {

        return mHeaderDividersEnabled;"
70,drawDivider,"    void drawDivider(Canvas canvas, Rect bounds, int childIndex) {

        final Drawable divider = mDivider;

        divider.setBounds(bounds);"
71,drawChild,"    protected boolean drawChild(Canvas canvas, View child, long drawingTime) {

        boolean more = super.drawChild(canvas, child, drawingTime);

        if (mCachingActive) {"
72,dispatchDraw,"    protected void dispatchDraw(Canvas canvas) {

        if (mCachingStarted) {

            mCachingActive = true;

        }"
74,isOpaque,"    public boolean isOpaque() {

        boolean retValue =

                (mCachingActive && mIsCacheColorOpaque && mDividerIsOpaque) || super.isOpaque();"
77,addViewBelow,"    private View addViewBelow(View theView, int position) {

        int belowPosition = position + 1;

        View view = obtainView(belowPosition, mIsScrap);

        int edgeOfNewChild = theView.getBottom() + mDividerHeight;"
78,addViewAbove,"    private View addViewAbove(View theView, int position) {

        int abovePosition = position - 1;

        View view = obtainView(abovePosition, mIsScrap);

        int edgeOfNewChild = theView.getTop() - mDividerHeight;"
79,scrollListItemsBy,"    private void scrollListItemsBy(int amount) {

        offsetChildrenTopAndBottom(amount);



        final int listBottom = getHeight() - mListPadding.bottom - mLastBottomOffset;"
80,canAnimate,"    protected boolean canAnimate() {

        return super.canAnimate() && mItemCount > 0;"
82,makeAndAddView,"    private View makeAndAddView(int position, int y, boolean flow, int childrenLeft,

            boolean selected) {

        View child;

"
83,layoutChildren,"    protected void layoutChildren() {

        final boolean blockLayoutRequests = mBlockLayoutRequests;

        if (blockLayoutRequests) {
"
84,findMotionRow,"    int findMotionRow(int y) {

        int childCount = getChildCount();

        if (childCount > 0) {"
85,measureHeightOfChildren,"    final int measureHeightOfChildren(int widthMeasureSpec, int startPosition, int endPosition,

            final int maxHeight,

            int disallowPartialChildPosition) {

        final ListAdapter adapter = mAdapter;

        if (adapter == null) {

            return mListPadding.top + mListPadding.bottom + mFirstTopOffset + mLastBottomOffset;

        }

"
86,recycleOnMeasure,"    protected boolean recycleOnMeasure() {

        return true;"
87,measureScrapChild,"    private void measureScrapChild(View child, int position, int widthMeasureSpec) {

        LayoutParams p = (LayoutParams) child.getLayoutParams();

        if (p == null) {

            p = (ZrcAbsListView.LayoutParams) generateDefaultLayoutParams();

            child.setLayoutParams(p);

        }"
89,fillFromTop,"    private void fillFromTop(int nextTop) {

        mFirstPosition = Math.min(mFirstPosition, mItemCount - 1);

        if (mFirstPosition < 0) {"
90,fillUp,"    private void fillUp(int pos, int nextBottom, boolean isAnim) {

        int end = 0;

"
91,fillDown,"    private void fillDown(int pos, int nextTop, boolean isAnim) {

        int end = (getBottom() - getTop());
"
92,correctTooHighOrTooLow,"    void correctTooHighOrTooLow() {

        final int count = getCount();

        if (count == 0) {
"
93,fillGap,"    void fillGap(boolean down) {

        final int count = getChildCount();
"
94,requestChildRectangleOnScreen,"    public boolean requestChildRectangleOnScreen(View child, Rect rect, boolean immediate) {

        rect.offset(child.getLeft(), child.getTop());

        rect.offset(-child.getScrollX(), -child.getScrollY());



        final int height = getHeight();

        int listUnfadedTop = getScrollY();

        int listUnfadedBottom = listUnfadedTop + height;
"
95,clearRecycledState,"    private void clearRecycledState(ArrayList<FixedViewInfo> infos) {

        if (infos != null) {"
96,resetList,"    void resetList() {

        clearRecycledState(mHeaderViewInfos);

        clearRecycledState(mFooterViewInfos);
"
99,removeFooterView,"    public boolean removeFooterView(View v) {

        if (mFooterViewInfos.size() > 0) {
"
101,addFooterView,"    public void addFooterView(View v) {

        addFooterView(v, null, true);"
102,addFooterView,"    public void addFooterView(View v, Object data, boolean isSelectable) {

        final FixedViewInfo info = new FixedViewInfo();

        info.view = v;

        info.data = data;
"
103,removeFixedViewInfo,"    private void removeFixedViewInfo(View v, ArrayList<FixedViewInfo> where) {

        int len = where.size();
"
104,removeHeaderView,"    public boolean removeHeaderView(View v) {

        if (mHeaderViewInfos.size() > 0) {
"
106,addHeaderView,"    public void addHeaderView(View v) {

        addHeaderView(v, null, true);"
107,addHeaderView,"    public void addHeaderView(View v, Object data, boolean isSelectable) {

        final FixedViewInfo info = new FixedViewInfo();

        info.view = v;

        info.data = data;
"
108,adjustViewsUp,"    private void adjustViewsUp() {

        final int childCount = getChildCount();

        int delta;"
110,onInvalidated,"        public void onInvalidated() {

            mDataChanged = true;

            mOldItemCount = mItemCount;

            mItemCount = 0;"
111,onChanged,"        public void onChanged() {

            mDataChanged = true;

            mOldItemCount = mItemCount;

            mItemCount = getAdapter().getCount();"
112,isSupportHardwareAccelerated,"    protected boolean isSupportHardwareAccelerated() {

        return APIUtil.isSupport(11) && isHardwareAccelerated();"
114,onDetachedFromWindow,"    protected void onDetachedFromWindow() {

        super.onDetachedFromWindow();"
115,dispatchRestoreInstanceState,"    protected void dispatchRestoreInstanceState(SparseArray<Parcelable> container) {

        dispatchThawSelfOnly(container);"
116,dispatchSaveInstanceState,"    protected void dispatchSaveInstanceState(SparseArray<Parcelable> container) {

        dispatchFreezeSelfOnly(container);"
120,updateEmptyStatus,"    private void updateEmptyStatus(boolean empty) {

        if (empty) {"
121,checkFocus,"    void checkFocus() {

        final T adapter = getAdapter();

        final boolean empty = adapter == null || adapter.getCount() == 0;

        final boolean focusable = !empty;
"
130,removeAllViews,"    public void removeAllViews() {

        throw new UnsupportedOperationException();"
131,removeViewAt,"    public void removeViewAt(int index) {

        throw new UnsupportedOperationException();"
132,removeView,"    public void removeView(View child) {

        throw new UnsupportedOperationException();"
133,addView,"    public void addView(View child, int index, LayoutParams params) {

        throw new UnsupportedOperationException();"
134,addView,"    public void addView(View child, LayoutParams params) {

        throw new UnsupportedOperationException();"
135,addView,"    public void addView(View child, int index) {

        throw new UnsupportedOperationException();"
136,addView,"    public void addView(View child) {

        throw new UnsupportedOperationException();"
137,setAdapter,"    public abstract void setAdapter(T adapter);
"
141,performItemClick,"    public boolean performItemClick(View view, int position, long id) {

        if (mOnItemClickListener != null) {
"
145,reclaimScrapViews,"		void reclaimScrapViews(List<View> views) {
			if (mViewTypeCount == 1) {
				views.addAll(mCurrentScrap);"
146,pruneScrapViews,"		private void pruneScrapViews() {
			final int maxViews = mActiveViews.length;
			final int viewTypeCount = mViewTypeCount;
			final ArrayList<View>[] scrapViews = mScrapViews;
			for (int i = 0; i < viewTypeCount; ++i) {
				final ArrayList<View> scrapPile = scrapViews[i];
				int size = scrapPile.size();"
147,scrapActiveViews,"		void scrapActiveViews() {
			final View[] activeViews = mActiveViews;
			final boolean hasListener = mRecyclerListener != null;
			final boolean multipleScraps = mViewTypeCount > 1;
			ArrayList<View> scrapViews = mCurrentScrap;
			final int count = activeViews.length;
			for (int i = count - 1; i >= 0; i--) {
				final View victim = activeViews[i];
				if (victim != null) {"
148,removeSkippedScrap,"		void removeSkippedScrap() {
			if (mSkippedScrap == null) {
				return;
			}
			final int count = mSkippedScrap.size();
			for (int i = 0; i < count; i++) {"
149,addScrapView,"		void addScrapView(View scrap, int position) {
			final LayoutParams lp = (LayoutParams) scrap.getLayoutParams();
			if (lp == null) {
				return;
			}
			lp.scrappedFromPosition = position;
			final int viewType = lp.viewType;
			if (!shouldRecycleViewType(viewType)) {
				return;"
151,clearTransientStateViews,"		void clearTransientStateViews() {
			if (mTransientStateViews != null) {
				mTransientStateViews.clear();
			}"
154,fillActiveViews,"		void fillActiveViews(int childCount, int firstActivePosition) {
			if (mActiveViews.length < childCount) {
				mActiveViews = new View[childCount];
			}
			mFirstActivePosition = firstActivePosition;
			final View[] activeViews = mActiveViews;"
155,clear,"		void clear() {
			if (mViewTypeCount == 1) {
				final ArrayList<View> scrap = mCurrentScrap;
				final int scrapCount = scrap.size();
				for (int i = 0; i < scrapCount; i++) {"
156,shouldRecycleViewType,"		public boolean shouldRecycleViewType(int viewType) {
			return viewType >= 0;
		}"
157,markChildrenDirty,"		public void markChildrenDirty() {
			if (mViewTypeCount == 1) {
				final ArrayList<View> scrap = mCurrentScrap;
				final int scrapCount = scrap.size();
				for (int i = 0; i < scrapCount; i++) {"
161,run,"		public void run() {
			switch (mTouchMode) {
			default:"
163,endFling,"		void endFling() {
			int oldTouchMode = mTouchMode;
			mTouchMode = TOUCH_MODE_REST;
			removeCallbacks(this);
			reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
			clearScrollingCache();
			mScroller.abortAnimation();

			if (mZrcHeader != null && oldTouchMode == TOUCH_MODE_RESCROLL"
164,startScroll,"		void startScroll(int distance, int duration, boolean linear) {
			if (!mScroller.isFinished()) {
				mScroller.abortAnimation();
			}
			int initialY = distance < 0 ? Integer.MAX_VALUE : 0;
			mLastFlingY = initialY;
			mScroller.startScroll(0, initialY, 0, distance, duration);
			mTouchMode = TOUCH_MODE_FLING;"
165,start,"		void start(int initialVelocity) {
			if (!mScroller.isFinished()) {
				mScroller.abortAnimation();
			}
			int initialY = initialVelocity < 0 ? Integer.MAX_VALUE : 0;
			mLastFlingY = initialY;
			mScroller.fling(0, initialY, 0, initialVelocity, 0,
					Integer.MAX_VALUE, 0, Integer.MAX_VALUE);"
167,run,"		public void run() {
			final int motionPosition = mMotionPosition;
			final View child = getChildAt(motionPosition - mFirstPosition);
			if (child != null) {
				final int longPressPosition = mMotionPosition;"
168,run,"		public void run() {
			if (mTouchMode == TOUCH_MODE_DOWN) {
				mTouchMode = TOUCH_MODE_TAP;"
169,run,"		public void run() {
			if (mDataChanged) {
				return;
			}
			final ListAdapter adapter = mAdapter;
			final int motionPosition = mClickMotionPosition;"
170,sameWindow,"		public boolean sameWindow() {
			return getWindowAttachCount() == mOriginalAttachCount;
		}"
171,rememberWindowAttachCount,"		public void rememberWindowAttachCount() {
			mOriginalAttachCount = getWindowAttachCount();
		}"
172,toString,"		public String toString() {
			return ""AbsListView.SavedState{""
					+ Integer.toHexString(System.identityHashCode(this))"
174,newArray,"			public SavedState[] newArray(int size) {
				return new SavedState[size];
			}"
175,createFromParcel,"			public SavedState createFromParcel(Parcel in) {
				return new SavedState(in);
			}"
177,onRestoreInstanceState,"	public void onRestoreInstanceState(Parcelable state) {
		SavedState ss = (SavedState) state;
		super.onRestoreInstanceState(ss.getSuperState());
		mFirstPosition = ss.mFirstPosition;
		requestLayout();
		if (mFlingRunnable != null) {
			mFlingRunnable.scrollToAdjustViewsUpOrDown();"
178,onSaveInstanceState,"	public Parcelable onSaveInstanceState() {
		Parcelable superState = super.onSaveInstanceState();
		SavedState ss = new SavedState(superState);
		ss.mFirstPosition = mFirstPosition;
		return ss;
	}"
185,run,"				public void run() {
					if (mFlingRunnable != null /*
												 * && mTouchMode !="
187,reset,"	public void reset() {
		if (mZrcHeader != null) {
			mZrcHeader.stateChange(Headable.STATE_REST, """");"
196,run,"			public void run() {
				if (mZrcHeader == null
						|| mZrcHeader.getState() == Headable.STATE_LOADING
						|| onRefreshStart == null"
197,refresh,"	public void refresh() {
		post(new Runnable() {
			@Override"
198,stopLoadMore,"	public void stopLoadMore() {
		isLoadingMore = false;
		isLoadMoreOn = false;
		if (mFlingRunnable != null) {
			mFlingRunnable.scrollToAdjustViewsUpOrDown();"
200,startLoadMore,"	public void startLoadMore() {
		isLoadingMore = false;
		isLoadMoreOn = true;
	}"
201,reclaimViews,"	public void reclaimViews(List<View> views) {
		int childCount = getChildCount();
		RecyclerListener listener = mRecycler.mRecyclerListener;
		for (int i = 0; i < childCount; i++) {
			View child = getChildAt(i);
			LayoutParams lp = (LayoutParams) child.getLayoutParams();
			if (lp != null && mRecycler.shouldRecycleViewType(lp.viewType)) {"
207,checkLayoutParams,"	protected boolean checkLayoutParams(ViewGroup.LayoutParams p) {
		return p instanceof LayoutParams;
	}"
208,generateLayoutParams,"	public LayoutParams generateLayoutParams(AttributeSet attrs) {
		return new LayoutParams(getContext(), attrs);
	}"
209,generateLayoutParams,"	protected ViewGroup.LayoutParams generateLayoutParams(
			ViewGroup.LayoutParams p) {
		return new LayoutParams(p);"
210,generateDefaultLayoutParams,"	protected ViewGroup.LayoutParams generateDefaultLayoutParams() {
		return new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
				ViewGroup.LayoutParams.WRAP_CONTENT, 0);"
212,invalidateViews,"	public void invalidateViews() {
		mDataChanged = true;
		requestLayout();
		invalidate();
	}"
213,findClosestMotionRow,"	int findClosestMotionRow(int y) {
		final int childCount = getChildCount();
		if (childCount == 0) {
			return INVALID_POSITION;
		}
		final int motionRow = findMotionRow(y);"
218,offsetChildrenTopAndBottom,"	public void offsetChildrenTopAndBottom(int offset) {
		final int count = getChildCount();
		for (int i = 0; i < count; i++) {
			final View v = getChildAt(i);"
220,canScrollList,"	public boolean canScrollList(int direction) {
		final int childCount = getChildCount();
		if (childCount == 0) {
			return false;
		}
		final int firstPosition = mFirstPosition;
		final Rect listPadding = mListPadding;"
221,scrollListBy,"	public void scrollListBy(int y) {
		trackMotionScroll(-y, -y);
	}"
222,run,"					public void run() {
						if (mCachingStarted) {
							mCachingStarted = mCachingActive = false;"
223,clearScrollingCache,"	private void clearScrollingCache() {
		if (!isSupportHardwareAccelerated()) {
			if (mClearScrollingCache == null) {"
224,createScrollingCache,"	private void createScrollingCache() {
		if (mScrollingCacheEnabled && !mCachingStarted
				&& !isSupportHardwareAccelerated()) {"
225,smoothScrollBy,"	void smoothScrollBy(int distance, int duration, boolean linear) {
		if (mFlingRunnable == null) {
			mFlingRunnable = new FlingRunnable();
		}
		final int firstPos = mFirstPosition;
		final int childCount = getChildCount();
		final int lastPos = firstPos + childCount;
		final int topLimit = getPaddingTop();
		final int bottomLimit = getHeight() - getPaddingBottom();"
226,smoothScrollBy,"	public void smoothScrollBy(int distance, int duration) {
		smoothScrollBy(distance, duration, false);
	}"
229,scrollToAdjustViewsUpOrDown,"	protected void scrollToAdjustViewsUpOrDown() {
		if (mFlingRunnable != null) {
			mFlingRunnable.scrollToAdjustViewsUpOrDown();"
230,reportScrollStateChange,"	void reportScrollStateChange(int newState) {
		if (newState != mLastScrollState) {
			if (mOnScrollListener != null) {"
231,addTouchables,"	public void addTouchables(ArrayList<View> views) {
		final int count = getChildCount();
		final int firstPosition = mFirstPosition;
		final ListAdapter adapter = mAdapter;
		if (adapter == null) {
			return;
		}"
232,onSecondaryPointerUp,"	private void onSecondaryPointerUp(MotionEvent ev) {
		final int pointerIndex = (ev.getAction() & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
		final int pointerId = ev.getPointerId(pointerIndex);
		if (pointerId == mActivePointerId) {
			final int newPointerIndex = pointerIndex == 0 ? 1 : 0;"
233,onInterceptTouchEvent,"	public boolean onInterceptTouchEvent(MotionEvent ev) {
		int action = ev.getAction();
		if (!mIsAttached) {
			return false;
		}
		switch (action & MotionEvent.ACTION_MASK) {"
234,requestDisallowInterceptTouchEvent,"	public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
		if (disallowIntercept) {
			recycleVelocityTracker();
		}"
235,recycleVelocityTracker,"	private void recycleVelocityTracker() {
		if (mVelocityTracker != null) {
			mVelocityTracker.recycle();"
236,initVelocityTrackerIfNotExists,"	private void initVelocityTrackerIfNotExists() {
		if (mVelocityTracker == null) {
			mVelocityTracker = VelocityTracker.obtain();"
237,initOrResetVelocityTracker,"	private void initOrResetVelocityTracker() {
		if (mVelocityTracker == null) {
			mVelocityTracker = VelocityTracker.obtain();"
242,onTouchCancel,"	private void onTouchCancel() {
		mTouchMode = TOUCH_MODE_REST;
		setPressed(false);
		final View motionView = getChildCount() == 0 ? null : this
				.getChildAt(mMotionPosition - mFirstPosition);
		if (motionView != null) {
			motionView.setPressed(false);
		}
		clearScrollingCache();
		recycleVelocityTracker();
		mSelectorPosition = INVALID_POSITION;
		invalidate();"
243,run,"								public void run() {
									mTouchModeReset = null;
									mTouchMode = TOUCH_MODE_REST;
									child.setPressed(false);
									setPressed(false);
									invalidate();
									if (!mDataChanged && mIsAttached) {
										performClick.run();"
244,onTouchUp,"	private void onTouchUp(MotionEvent ev) {
		switch (mTouchMode) {
		case TOUCH_MODE_DOWN:
		case TOUCH_MODE_TAP:
		case TOUCH_MODE_DONE_WAITING:
			final int motionPosition = mMotionPosition;
			final View child = getChildCount() == 0 ? null"
245,onTouchMove,"	private void onTouchMove(MotionEvent ev) {
		if (mTouchMode == TOUCH_MODE_INVALID) {
			mTouchMode = TOUCH_MODE_SCROLL;
		}
		int pointerIndex = ev.findPointerIndex(mActivePointerId);
		if (pointerIndex == -1) {
			pointerIndex = 0;
			mActivePointerId = ev.getPointerId(pointerIndex);
		}"
246,onTouchDown,"	private void onTouchDown(MotionEvent ev) {
		mActivePointerId = ev.getPointerId(0);
		final int x = (int) ev.getX();
		final int y = (int) ev.getY();
		int motionPosition = pointToPosition(x, y);
		if (!mDataChanged) {
			if (mTouchMode == TOUCH_MODE_FLING
					|| mTouchMode == TOUCH_MODE_RESCROLL) {
				createScrollingCache();
				mFlingRunnable.mScroller.abortAnimation();
				mTouchMode = TOUCH_MODE_SCROLL;"
247,onTouchEvent,"	public boolean onTouchEvent(MotionEvent ev) {
		try {
			if (!isEnabled()) {"
249,scrollIfNeeded,"	private void scrollIfNeeded(int x, int y) {
		final int rawDeltaY = y - mMotionY;
		final int deltaY = rawDeltaY - mMotionCorrection;
		int incrementalDeltaY = mLastY != Integer.MIN_VALUE ? y - mLastY
				: deltaY;
		if (mTouchMode == TOUCH_MODE_SCROLL) {"
250,startScrollIfNeeded,"	private boolean startScrollIfNeeded(int x, int y) {
		final int deltaX = x - mMotionX;
		final int distanceX = Math.abs(deltaX);
		final int deltaY = y - mMotionY;
		final int distanceY = Math.abs(deltaY);
		if (distanceX > mTouchSlop || distanceY > mTouchSlop) {
			if (distanceY > distanceX * 2) {
				createScrollingCache();"
251,pointToRowId,"	public long pointToRowId(int x, int y) {
		int position = pointToPosition(x, y);
		if (position >= 0) {
			return mAdapter.getItemId(position);
		}"
252,pointToPosition,"	public int pointToPosition(int x, int y) {
		Rect frame = mTouchFrame;
		if (frame == null) {
			mTouchFrame = new Rect();
			frame = mTouchFrame;
		}
		final int count = getChildCount();"
253,dispatchSetPressed,"	protected void dispatchSetPressed(boolean pressed) {
	}"
254,performLongPress,"	boolean performLongPress(final View child, final int longPressPosition,
			final long longPressId) {
		boolean handled = false;
		if (mOnItemLongClickListener != null) {
			handled = mOnItemLongClickListener.onItemLongClick(
					(ZrcListView) this, child, longPressPosition, longPressId);"
255,onWindowFocusChanged,"	public void onWindowFocusChanged(boolean hasWindowFocus) {
		super.onWindowFocusChanged(hasWindowFocus);
		final int touchMode = isInTouchMode() ? TOUCH_MODE_ON : TOUCH_MODE_OFF;
		if (!hasWindowFocus) {
			setChildrenDrawingCacheEnabled(false);
		} else {"
256,onDetachedFromWindow,"	protected void onDetachedFromWindow() {
		super.onDetachedFromWindow();
		mRecycler.clear();
		if (mAdapter != null && mDataSetObserver != null) {
			mAdapter.unregisterDataSetObserver(mDataSetObserver);
			mDataSetObserver = null;
		}
		if (mClearScrollingCache != null) {
			removeCallbacks(mClearScrollingCache);"
257,onAttachedToWindow,"	protected void onAttachedToWindow() {
		super.onAttachedToWindow();
		if (mAdapter != null && mDataSetObserver == null) {
			mDataSetObserver = new AdapterDataSetObserver();
			mAdapter.registerDataSetObserver(mDataSetObserver);
			mDataChanged = true;"
258,jumpDrawablesToCurrentState,"	public void jumpDrawablesToCurrentState() {
		super.jumpDrawablesToCurrentState();
		if (APIUtil.isSupport(11) && mSelector != null) {
			mSelector.jumpToCurrentState();"
259,verifyDrawable,"	public boolean verifyDrawable(Drawable dr) {
		return mSelector == dr || super.verifyDrawable(dr);
	}"
260,onCreateDrawableState,"	protected int[] onCreateDrawableState(int extraSpace) {
		if (mIsChildViewEnabled) {
			return super.onCreateDrawableState(extraSpace);
		}
		final int enabledState = ENABLED_STATE_SET[0];
		int[] state = super.onCreateDrawableState(extraSpace + 1);
		int enabledPos = -1;
		for (int i = state.length - 1; i >= 0; i--) {
			if (state[i] == enabledState) {"
261,drawableStateChanged,"	protected void drawableStateChanged() {
		super.drawableStateChanged();
		updateSelectorState();
	}"
262,updateSelectorState,"	void updateSelectorState() {
		if (mSelector != null) {
			if (shouldShowSelector()) {"
268,drawSelector,"	private void drawSelector(Canvas canvas) {
		if (!mSelectorRect.isEmpty()) {
			final Drawable selector = mSelector;"
269,shouldShowSelector,"	boolean shouldShowSelector() {
		return (!isInTouchMode())
				|| (touchModeDrawsInPressedState() && isPressed());"
270,touchModeDrawsInPressedState,"	boolean touchModeDrawsInPressedState() {
		switch (mTouchMode) {
		case TOUCH_MODE_TAP:"
277,positionSelector,"	void positionSelector(int position, View sel) {
		if (position != INVALID_POSITION) {
			mSelectorPosition = position;
		}
		final Rect selectorRect = mSelectorRect;
		invalidate(selectorRect);
		selectorRect.set(sel.getLeft(), sel.getTop(), sel.getRight(),
				sel.getBottom());
		invalidate(selectorRect);"
278,obtainView,"	View obtainView(int position, boolean[] isScrap) {
		isScrap[0] = false;
		View scrapView;
		scrapView = mRecycler.getTransientStateView(position);
		if (scrapView == null) {
			scrapView = mRecycler.getScrapView(position);
		}
		View child;
		if (scrapView != null) {
			child = mAdapter.getView(position, scrapView, this);"
283,updateScrollIndicators,"	void updateScrollIndicators() {
		if (mScrollUp != null) {
			boolean canScrollUp;
			canScrollUp = mFirstPosition > 0;"
285,onLayout,"	protected void onLayout(boolean changed, int l, int t, int r, int b) {
		mInLayout = true;
		if (changed) {
			int childCount = getChildCount();
			for (int i = 0; i < childCount; i++) {
				getChildAt(i).forceLayout();"
286,onMeasure,"	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		if (mSelector == null) {
			useDefaultSelector();
		}
		final Rect listPadding = mListPadding;
		listPadding.left = getPaddingLeft();
		listPadding.top = getPaddingTop();
		listPadding.right = getPaddingRight();"
287,computeVerticalScrollRange,"	protected int computeVerticalScrollRange() {
		int result;
		if (mSmoothScrollbarEnabled) {
			result = Math.max(getHeight() * 10, 0);
		} else {"
288,computeVerticalScrollOffset,"	protected int computeVerticalScrollOffset() {
		final int firstPosition = mFirstPosition;
		final int childCount = getChildCount();
		final int mScrollY = getScrollY();
		if (firstPosition >= 0 && childCount > 0) {
			if (mSmoothScrollbarEnabled) {
				final View view = getChildAt(0);"
289,computeVerticalScrollExtent,"	protected int computeVerticalScrollExtent() {
		final int count = getChildCount();
		if (count > 0) {
			if (mSmoothScrollbarEnabled) {
				final int range = (getHeight() - mFirstTopOffset - mLastBottomOffset) * 10;"
290,resetList,"	void resetList() {
		removeAllViewsInLayout();
		mFirstPosition = 0;
		mFirstTop = mFirstTopOffset + mListPadding.top;
		mDataChanged = false;
		mPositionScrollAfterLayout = null;
		mSelectorPosition = INVALID_POSITION;
		mSelectorRect.setEmpty();
		invalidate();
	}"
291,requestLayout,"	public void requestLayout() {
		if (!mBlockLayoutRequests && !mInLayout) {
			super.requestLayout();"
292,onFocusChanged,"	protected void onFocusChanged(boolean gainFocus, int direction,
			Rect previouslyFocusedRect) {
		super.onFocusChanged(gainFocus, direction, previouslyFocusedRect);
		if (gainFocus && !isInTouchMode()) {"
294,useDefaultSelector,"	private void useDefaultSelector() {
		setSelector(getResources().getDrawable(
				android.R.drawable.list_selector_background));"
297,isScrollingCacheEnabled,"	public boolean isScrollingCacheEnabled() {
		return mScrollingCacheEnabled;
	}"
298,invokeOnItemScrollListener,"	void invokeOnItemScrollListener() {
		if (mOnScrollListener != null) {
			mOnScrollListener.onScroll(this, mFirstPosition, getChildCount(),
					mItemCount);"
301,isSmoothScrollbarEnabled,"	public boolean isSmoothScrollbarEnabled() {
		return mSmoothScrollbarEnabled;
	}"
302,performItemClick,"	public boolean performItemClick(View view, int position, long id) {
		boolean handled = false;
		boolean dispatchItemClick = true;
		if (dispatchItemClick) {
			handled |= super.performItemClick(view, position, id);
		}"
305,retrieveFromScrap,"	static View retrieveFromScrap(ArrayList<View> scrapViews, int position) {
		int size = scrapViews.size();
		if (size > 0) {
			for (int i = 0; i < size; i++) {"
307,run,"		public void run() {
			mZrcHeader.stateChange(Headable.STATE_REST, null);
		}"
309,toastResultInOtherWay,"    public void toastResultInOtherWay(Context context, int state) {

        if (state == Headable.STATE_SUCCESS) {"
310,draw,"    public boolean draw(Canvas canvas, int left, int top, int right, int bottom) {

        boolean more = false;

        final int width = right - left;

        final int height = mHeight;

        final int offset = bottom - top;

        canvas.save();"
312,stateChange,"    public void stateChange(int state, String msg) {

        if (mState != state) {

            mTime = 0;"
317,draw,"    public boolean draw(Canvas canvas, int left, int top, int right, int bottom) {

        final int width = right - left;

        final int height = mHeight;

        final int viewHeight = bottom - top;

        canvas.save();

        canvas.clipRect(left + 5, top + 1, right + 5, bottom - 1);
"
320,unregisterDataSetObserver,"    public void unregisterDataSetObserver(DataSetObserver observer) {
        if (mAdapter != null) {
            mAdapter.unregisterDataSetObserver(observer);"
321,registerDataSetObserver,"    public void registerDataSetObserver(DataSetObserver observer) {
        if (mAdapter != null) {
            mAdapter.registerDataSetObserver(observer);"
325,hasStableIds,"    public boolean hasStableIds() {
        if (mAdapter != null) {
            return mAdapter.hasStableIds();
        }"
329,areAllItemsEnabled,"    public boolean areAllItemsEnabled() {
        if (mAdapter != null) {
            return mAreAllFixedViewsSelectable && mAdapter.areAllItemsEnabled();"
331,removeFooter,"    public boolean removeFooter(View v) {
        for (int i = 0; i < mFooterViewInfos.size(); i++) {
            ZrcListView.FixedViewInfo info = mFooterViewInfos.get(i);
            if (info.view == v) {"
332,removeHeader,"    public boolean removeHeader(View v) {
        for (int i = 0; i < mHeaderViewInfos.size(); i++) {
            ZrcListView.FixedViewInfo info = mHeaderViewInfos.get(i);
            if (info.view == v) {"
333,areAllListInfosSelectable,"    private boolean areAllListInfosSelectable(ArrayList<ZrcListView.FixedViewInfo> infos) {
        if (infos != null) {
            for (ZrcListView.FixedViewInfo info : infos) {
                if (!info.isSelectable) {"
334,isEmpty,"    public boolean isEmpty() {
        return mAdapter == null || mAdapter.isEmpty();
    }"
338,toastResultInOtherWay,"    void toastResultInOtherWay(Context context, int state);
"
339,draw,"    boolean draw(Canvas canvas, int left, int top, int right, int bottom);
"
344,isEnablePlatformVerification,"  public boolean isEnablePlatformVerification() {
    return enablePlatformVerification;
  }"
358,loadFromResourceOrFile,"  public static NodeJsonConfiguration loadFromResourceOrFile(String source) {
    NodeJsonConfiguration config = fromResourceOrFile(source, NodeJsonConfiguration.class);

    if (config.configuration != null) {
      throw new GridConfigurationException(
          ""Deprecated -nodeConfig file encountered. Please update the file to work with Selenium 3. """
359,loadFromJson,"  public static NodeJsonConfiguration loadFromJson(JsonInput source) {
    NodeJsonConfiguration config = fromJson(source, NodeJsonConfiguration.class);

    if (config.configuration != null) {
      throw new GridConfigurationException(
          ""Deprecated -nodeConfig file encountered. Please update the file to work with Selenium 3. """
371,readFileOrResource,"  private static Reader readFileOrResource(String source) {
    Stream<Function<String, InputStream>> suppliers = Stream.of(
        (path) -> {
          try {
            return new FileInputStream(path);"
372,loadJsonFromResourceOrFile,"  private static JsonInput loadJsonFromResourceOrFile(String source) {
    try {
      return new Json().newInput(readFileOrResource(source));"
373,fromJson,"  static <T extends CommonJsonConfiguration> T fromJson(
          JsonInput jsonInput, Class<T> configurationClass)
  {"
374,fromResourceOrFile,"  static <T extends CommonJsonConfiguration> T fromResourceOrFile(
      String resourceOrFilePath, Class<T> configurationClass)
  {"
377,startNextScreen,"    public void startNextScreen() {

        mStartNextScreen = true;
        mShouldSpheresRotate = false;
        invalidate();"
378,translateTheSpheres,"    public void translateTheSpheres(float position, int pageWidth) {

        mPosition = position;
        invalidate();"
380,drawCircle,"    private float[] drawCircle(Canvas canvas, FloatWrapper originalPos, FloatWrapper step, Bitmap bm) {

        float distance = originalPos.floatValue + step.floatValue;
        float positionArray[] = new float[2];
        if (distance < mPathLength) {
            mPathMeasure.getPosTan(distance, mPos, mTan);

            matrix.reset();"
381,moveCircleInOut,"    private boolean moveCircleInOut(FloatWrapper distance, FloatWrapper pathLength, Matrix matrix, PathMeasure pathMeasure, Canvas canvas, Bitmap bm, FloatWrapper scaleCounter) {


        float position[] = new float[2];
        float tangent[] = new float[2];


        if (distance.floatValue >= (pathLength.floatValue / 2)) {"
383,onDraw,"    protected void onDraw(Canvas canvas) {

        canvas.drawPath(mAnimPath, mPaint);

        if (mShouldSpheresRotate || !mAllCirclesDrawn) {

            pos1 = drawCircle(canvas, mSphereOriginalPosArr[0], mSphereStepCountArr[0], mBitmap1);
            pos2 = drawCircle(canvas, mSphereOriginalPosArr[1], mSphereStepCountArr[1], mBitmap2);"
384,initOriginalPos,"    private void initOriginalPos() {

        for (int i = 0; i < 6; i++) {"
385,initLinePaths,"    private void initLinePaths() {

        for (int i = 0; i < 6; i++) {"
387,animateSecondScreenAntiClock,"    public void animateSecondScreenAntiClock(float position) {

        if (mCurrentDirection == Path.Direction.CW) {
            mCurrentDirection = Path.Direction.CCW;
            initNewPath(Path.Direction.CCW);"
389,onDraw,"    protected void onDraw(Canvas canvas) {

        canvas.drawPath(mAnimPath, mPaint);

        if (mDistance < mPathLength) {"
390,initNewPath,"    private void initNewPath(Path.Direction dir) {

        mAnimPath = new Path();
        RectF rectF = new RectF(XCOORD - RADIUS, YCOORD - RADIUS, XCOORD + RADIUS, YCOORD + RADIUS);

        if (dir == Path.Direction.CW) {
            mAnimPath.addArc(rectF, 50, 359);
        } else {
"
393,initThirdScreenViews,"    private void initThirdScreenViews(View rootView, Bundle savedInstanceState) {

        mRoundView = (ThirdScreenView) rootView.findViewById(R.id.round_view);
        mLetsGoButton = (Button) rootView.findViewById(R.id.letsgo);

        mLetsGoButton.setOnClickListener(clickListener);"
396,initializeAlpha,"    private void initializeAlpha() {

        mCamcordImage.setAlpha(0f);
        mClockImage.setAlpha(0f);
        mGraphImage.setAlpha(0f);
        mAudioImage.setAlpha(0f);
        mQuoteImage.setAlpha(0f);
        mMapImage.setAlpha(0f);
        mWordPressImage.setAlpha(0f);"
398,run,"                public void run() {

                    doFadeAnimation();"
399,run,"            public void run() {

                getOriginalXValues(savedInstanceState);"
402,onCreateView,"        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {

            Bundle args = getArguments();
            int position = args.getInt(""position"");
            int layoutId = getLayoutId(position);


            ViewGroup rootView = (ViewGroup) inflater.inflate(layoutId, container, false);
            if (position == 0) {"
403,animateSecondScreen,"    private void animateSecondScreen(float position, int pageWidth, int direction) {

        if (direction == 0) {"
405,transformPage,"        public void transformPage(View page, float position) {

            int pageWidth = page.getWidth();
            if ((mViewPagerScrollingLeft && page.findViewById(R.id.center_box) != null)) {
                animateSecondScreen(position, pageWidth, 0);
            }"
411,animateBookView,"    private void animateBookView() {

        mBookView.fadeInTheLines();"
412,onPageScrollStateChanged,"            public void onPageScrollStateChanged(int state) {

                if (state == ViewPager.SCROLL_STATE_DRAGGING) {
                    mShouldSpheresRotate = false;
                } else if (state == ViewPager.SCROLL_STATE_IDLE) {"
413,onPageSelected,"            public void onPageSelected(int position) {

                if (position == 1) {
                    mSelectedPosition = 1;
                    mSecondPageSelected = true;
                    setViewsInOriginalPosition();"
418,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        setUpViews();"
419,fadeInTheLines,"    public void fadeInTheLines() {

        mFadeInLineArr[0].floatValue = 1f;
        mFadeInLineArr[1].floatValue = 0f;
        mFadeInLineArr[2].floatValue = 0f;
        mFadeInLineArr[3].floatValue = 0f;
"
423,initZygote,"    public void initZygote(IXposedHookZygoteInit.StartupParam startupParam) {
        this.sharedPreferences = new XSharedPreferences(modulePackageName, ""default"");
        XposedBridge.log(modulePackageName+"" initZygote"");
    }"
424,afterHookedMethod,"                protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                    param.setResult(""Hook succeed"");
                    int x=sharedPreferences.getInt(""example"",1);
                }"
425,handleLoadPackage,"    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable {
        if (""xxx.xxx.xxx"".equals(loadPackageParam.packageName)){
            XposedHelpers.findAndHookMethod(""xxx.xxx.xxx.xxxClass"", loadPackageParam.classLoader, ""xxxMethod"", new XC_MethodHook() {"
426,findApkFile,"    private File findApkFile(Context context, String modulePackageName) {
        if (context == null) {
            return null;
        }
        try {"
428,initZygote,"    public void initZygote(IXposedHookZygoteInit.StartupParam startupParam) {
        this.startupparam = startupParam;
    }"
431,addition_isCorrect,"    public void addition_isCorrect() throws Exception {
        assertEquals(4, 2 + 2);
    }"
432,hasAttemptRemaining,"  protected boolean hasAttemptRemaining() {
    return currentRetryCount <= maxNumRetries;
  }"
433,retry,"  public void retry(VolleyError error) throws VolleyError {
    currentRetryCount++;
    currentTimeoutMs += (currentTimeoutMs * backoffMultiplier);
    if (!hasAttemptRemaining()) {
      throw error;"
443,setCookieHandler,"  void setCookieHandler(CookieHandler cookieHandler);
"
444,setSslSocketFactory,"  void setSslSocketFactory(SSLSocketFactory sslSocketFactory);
"
445,setHostnameVerifier,"  void setHostnameVerifier(HostnameVerifier hostnameVerifier);
"
447,log,"  void log() {
    switch (logLevel) {
      case FULL:"
448,toString,"  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(""Wasp Error: "");
    if (errorMessage != null) {
      builder.append(""Message: "")
          .append(errorMessage);
    }"
452,clearAll,"  public synchronized void clearAll() {
    map.clear();
  }"
453,get,"  public V get(K key) {
    if (key == null) {
      throw new NullPointerException(""key may not be null"");
    }"
454,remove,"  public void remove(K key) {
    if (key == null) {
      throw new NullPointerException(""key may not be null"");
    }"
455,put,"  public void put(K key, V value) {
    if (key == null || value == null) {
      throw new NullPointerException(""key == null || value == null"");
    }
    V temp = map.get(key);"
456,build,"    public Wasp build() {
      return new Wasp(this);
    }"
469,enableCookies,"    public Builder enableCookies(CookieStore cookieStore, CookiePolicy cookiePolicy) {
      if (cookiePolicy == null) {
        throw new NullPointerException(""CookiePolicy may not be null"");
      }
      this.cookieHandler = new CookieManager(cookieStore, cookiePolicy);"
470,enableCookies,"    public Builder enableCookies(CookiePolicy cookiePolicy) {
      return enableCookies(null, cookiePolicy);
    }"
471,trustCertificates,"    public Builder trustCertificates(int keyStoreRawResId, String keyStorePassword) {
      if (sslSocketFactory != null) {
        throw new IllegalStateException(""Only one type of trust certificate method can be used!"");
      }
      this.sslSocketFactory = SSLUtils.getPinnedCertSslSocketFactory("
472,trustCertificates,"    public Builder trustCertificates() {
      if (sslSocketFactory != null) {
        throw new IllegalStateException(""Only one type of trust certificate method can be used!"");
      }
      this.sslSocketFactory = SSLUtils.getTrustAllCertSslSocketFactory();
      this.hostnameVerifier = SSLUtils.getEmptyHostnameVerifier();"
476,clearCache,"    public static void clearCache() {
      if (imageHandler == null) {
        return;
      }"
478,from,"    public static ImageCreator.Builder from(String path) {
      if (TextUtils.isEmpty(path)) {
        throw new IllegalArgumentException(""Path cannot be empty or null"");
      }"
479,create,"  public <T> T create(Class<T> service) {
    if (service == null) {
      throw new NullPointerException(""service param may not be null"");
    }
    if (!service.isInterface()) {
      throw new IllegalArgumentException(""Only interface type is supported"");"
482,getBody,"    public byte[] getBody() throws AuthFailureError {
      byte[] body;
      try {
        body = requestBody == null ? null : requestBody.getBytes(PROTOCOL_CHARSET);
      } catch (UnsupportedEncodingException uee) {
        Logger.wtf(""Unsupported Encoding while trying to get the bytes of %s using %s"""
483,getParams,"    protected Map<String, String> getParams() throws AuthFailureError {
      return waspRequest.getFieldParams();
    }"
485,parseNetworkResponse,"    protected com.android.volley.Response parseNetworkResponse(NetworkResponse response) {
      try {
        byte[] data = response.data;"
486,deliverResponse,"    protected void deliverResponse(Response response) {
      response.log();
    }"
487,getHeaders,"    public Map<String, String> getHeaders() throws AuthFailureError {
      return waspRequest.getHeaders();
    }"
488,onErrorResponse,"    public void onErrorResponse(VolleyError error) {
      Response.Builder builder = new Response.Builder().setUrl(url);
      String errorMessage = null;

      if (error != null) {
        builder.setNetworkTime(error.getNetworkTimeMs());"
489,onResponse,"    public void onResponse(Response response) {
      waspCallback.onSuccess(response);
    }"
490,invokeRequest,"  public Object invokeRequest(RequestCreator requestCreator) throws Exception {
    return addToQueueSync(requestCreator);
  }"
491,invokeRequest,"  public void invokeRequest(RequestCreator waspRequest, InternalCallback<Response> waspCallback) {
    addToQueue(waspRequest, waspCallback);
  }"
492,addToQueue,"  private <T> void addToQueue(Request<T> request) {
    getRequestQueue().add(request);
  }"
494,deliverResponse,"      protected void deliverResponse(Response response) {
        super.deliverResponse(response);
        listener.onResponse(response);
      }"
496,deliverResponse,"      protected void deliverResponse(Response response) {
        super.deliverResponse(response);
        future.onResponse(response.getResponseObject());
      }"
499,newInstance,"  static VolleyNetworkStack newInstance(RequestQueue requestQueue) {
    return new VolleyNetworkStack(requestQueue);
  }"
500,newInstance,"  static VolleyNetworkStack newInstance(Context context, WaspHttpStack stack) {
    return new VolleyNetworkStack(context, stack);
  }"
501,apply,"      public boolean apply(Request<?> request) {
        return tag.equals(request.getTag());
      }"
502,cancelRequest,"  public void cancelRequest(final String tag) {
    Logger.w(""CANCEL REQUEST -> url : "" + tag);
    RequestQueue.RequestFilter filter = new RequestQueue.RequestFilter() {
      @Override
      public boolean apply(Request<?> request) {"
503,onErrorResponse,"          public void onErrorResponse(VolleyError error) {
            Response.Builder builder = new Response.Builder().setUrl(url);
            String errorMessage = null;

            if (error != null) {
              builder.setNetworkTime(error.getNetworkTimeMs());"
505,requestImage,"  public void requestImage(final ImageCreator waspImageCreator, final int maxWidth,
                           final int maxHeight,
                           final InternalCallback<InternalImageHandler.Container> waspCallback) {

    final String url = waspImageCreator.getUrl();
    Logger.d(""REQUEST IMAGE -> url : "" + url);
    Request<Bitmap> request = new ImageRequest("
506,checkRx,"  public static void checkRx() {
    if (!hasRxJavaOnClasspath()) {
      throw new NoClassDefFoundError(""RxJava is not on classpath, """
507,hasRxJavaOnClasspath,"  static boolean hasRxJavaOnClasspath() {
    try {
      Class.forName(""rx.Observable"");
      return true;"
508,options,"  public Response options(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
509,delete,"  public Response delete(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
510,head,"  public Response head(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
511,patch,"  public Response patch(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
512,put,"  public Response put(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
513,post,"  public Response post(IHTTPSession session) {
    Map<String, String> files = new HashMap<>();
    try {
      session.parseBody(files);
    } catch (IOException ioe) {"
514,get,"  public Response get(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
515,serve,"  public Response serve(IHTTPSession session) {
    try {
      Thread.sleep(4000);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }"
516,main,"  public static void main(String[] args) {
    ServerRunner.run(TestServer.class);
  }"
518,wrap,"  public static String wrap(String value, String delimiter) {
    return delimiter + value + delimiter;
  }"
519,verify,"      public boolean verify(String hostname, SSLSession session) {
        return true;
      }"
521,getPinnedCertSslSocketFactory,"  public static SSLSocketFactory getPinnedCertSslSocketFactory(Context context,
                                                               int keyStoreRawResId,
                                                               String keyStorePassword) {
    InputStream in = null;"
523,checkServerTrusted,"            public void checkServerTrusted(X509Certificate[] chain, String authType)
                throws CertificateException {"
524,checkClientTrusted,"            public void checkClientTrusted(X509Certificate[] chain, String authType)
                throws CertificateException {"
526,cancelAll,"  public synchronized void cancelAll() {
    for (int i = 0, size = list.size(); i < size; i++) {
      list.get(i).cancel();
    }"
527,addRequest,"  public synchronized void addRequest(WaspRequest request) {
    list.add(request);
  }"
530,onQueryParamsAdded,"  public void onQueryParamsAdded(Map<String, Object> params) {
  }"
531,onHeadersAdded,"  public void onHeadersAdded(Map<String, String> headers) {
  }"
532,toString,"    public String toString() {
      if (lowerBound != null) return ""? super "" + typeToString(lowerBound);
      if (upperBound == Object.class) return ""?"";
      return ""? extends "" + typeToString(upperBound);
    }"
534,equals,"    public boolean equals(Object other) {
      return other instanceof WildcardType && RetroTypes.equals(this, (WildcardType) other);
    }"
537,toString,"    public String toString() {
      return typeToString(componentType) + ""[]"";
    }"
538,hashCode,"    public int hashCode() {
      return componentType.hashCode();
    }"
539,equals,"    public boolean equals(Object o) {
      return o instanceof GenericArrayType
          && RetroTypes.equals(this, (GenericArrayType) o);"
541,toString,"    public String toString() {
      StringBuilder result = new StringBuilder(30 * (typeArguments.length + 1));
      result.append(typeToString(rawType));
      if (typeArguments.length == 0) return result.toString();
      result.append(""<"").append(typeToString(typeArguments[0]));
      for (int i = 1; i < typeArguments.length; i++) {
        result.append("", "").append(typeToString(typeArguments[i]));
      }"
542,hashCode,"    public int hashCode() {
      return Arrays.hashCode(typeArguments) ^ rawType.hashCode() ^ hashCodeOrZero(ownerType);
    }"
543,equals,"    public boolean equals(Object other) {
      return other instanceof ParameterizedType
          && RetroTypes.equals(this, (ParameterizedType) other);"
547,checkNotPrimitive,"  private static void checkNotPrimitive(Type type) {
    if (type instanceof Class<?> && ((Class<?>) type).isPrimitive()) {
      throw new IllegalArgumentException();"
548,declaringClassOf,"  private static Class<?> declaringClassOf(TypeVariable<?> typeVariable) {
    GenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();
    return genericDeclaration instanceof Class ? (Class<?>) genericDeclaration : null;
  }"
552,typeToString,"  public static String typeToString(Type type) {
    return type instanceof Class ? ((Class<?>) type).getName() : type.toString();
  }"
553,hashCodeOrZero,"  private static int hashCodeOrZero(Object o) {
    return o != null ? o.hashCode() : 0;
  }"
554,equal,"  private static boolean equal(Object a, Object b) {
    return a == b || (a != null && a.equals(b));
  }"
555,indexOf,"  private static int indexOf(Object[] array, Object toFind) {
    for (int i = 0; i < array.length; i++) {
      if (toFind.equals(array[i])) return i;
    }"
559,submitResponse,"  void submitResponse() {
    callback.onSuccess(waspResponse, response);
  }"
574,build,"    Response build() {
      return new Response(this);
    }"
588,onQueryParamsAdded,"  void onQueryParamsAdded(Map<String, Object> params);
"
589,onHeadersAdded,"  void onHeadersAdded(Map<String, String> headers);
"
598,addFieldParams,"    private void addFieldParams(String key, String value) {
      Map<String, String> params = this.fieldParams;
      if (params == null) {
        params = new LinkedHashMap<>();
        this.fieldParams = params;"
599,addHeaderParam,"    private void addHeaderParam(String key, String value) {
      Map<String, String> headers = this.headers;
      if (headers == null) {
        headers = new LinkedHashMap<>();
        this.headers = headers;"
600,addQueryParam,"    private void addQueryParam(String key, Object value) {
      if (queryParamBuilder == null) {
        queryParamBuilder = new Uri.Builder();
      }"
601,addPathParam,"    private void addPathParam(String key, String value) {
      try {
        String encodedValue = URLEncoder.encode(String.valueOf(value), ""UTF-8"");"
606,build,"    RequestCreator build() {
      postInit();
      return new RequestCreator(this);
    }"
608,initParams,"    private void initParams() {
      Annotation[] annotations = methodInfo.getMethodAnnotations();
      int count = annotations.length;

      for (int i = 0; i < count; i++) {"
619,createRequestBody,"  private static RequestBody createRequestBody(Request request) throws AuthFailureError {
    byte[] body = request.getBody();
    if (body == null) {
      return null;
    }"
620,parseProtocol,"  private static ProtocolVersion parseProtocol(final Protocol protocol) {
    switch (protocol) {
      case HTTP_1_0:"
621,setConnectionParametersForRequest,"  private static void setConnectionParametersForRequest(
      com.squareup.okhttp.Request.Builder builder, Request<?> request)
      throws IOException, AuthFailureError {"
622,entityFromOkHttpResponse,"  private static HttpEntity entityFromOkHttpResponse(Response response) throws IOException {
    BasicHttpEntity entity = new BasicHttpEntity();
    ResponseBody body = response.body();

    entity.setContent(body.byteStream());
    entity.setContentLength(body.contentLength());
    entity.setContentEncoding(response.header(""Content-Encoding""));

    if (body.contentType() != null) {"
625,logHeaders,"  private static void logHeaders(Headers headers) {
    for (String headerName : headers.names()) {
      for (String headerValue : headers.values(headerName)) {"
627,invokeRequest,"  Object invokeRequest(RequestCreator requestCreator) throws Exception;
}"
628,invokeRequest,"  void invokeRequest(RequestCreator requestCreator, InternalCallback<Response> waspCallback);
"
629,onError,"      public void onError(WaspError error) {
        error.log();
        if (waspRequest.isCancelled()) {
          Logger.i(""Response not delivered because of cancelled request"");
          return;"
630,onSuccess,"      public void onSuccess(Response response) {
        if (waspRequest.isCancelled()) {
          Logger.i(""Response not delivered because of cancelled request"");
          return;"
632,invokeWaspRequest,"  private Object invokeWaspRequest(Object proxy, final Method method, final Object[] args) {
    return invokeCallbackRequest(proxy, method, args);
  }"
633,call,"      public void call(final Subscriber<? super Object> subscriber) {
        try {
          RequestCreator requestCreator = new RequestCreator.Builder(methodInfo, args, endPoint)"
634,invokeObservable,"  private Object invokeObservable(final Method method, final Object[] args) {
    final MethodInfo methodInfo = methodInfoCache.get(method.getName());

    return Observable.create(new Observable.OnSubscribe<Object>() {"
635,invokeSyncRequest,"  private Object invokeSyncRequest(final Method method, final Object[] args) throws Exception {
    final MethodInfo methodInfo = methodInfoCache.get(method.getName());
    RequestCreator requestCreator = new RequestCreator.Builder(methodInfo, args, endPoint)
        .setRequestInterceptor(requestInterceptor)
        .build();
    requestCreator.log();
    if (networkMode == NetworkMode.MOCK && methodInfo.isMocked()) {"
637,fillMethods,"  private void fillMethods(List<Method> methods) {
    for (Method method : methods) {
      MethodInfo methodInfo = MethodInfo.newInstance(context, method);"
641,newInstance,"  public static NetworkHandler newInstance(Class<?> service, Wasp.Builder builder) {
    return new NetworkHandler(service, builder);
  }"
643,run,"      public void run() {
        if (statusCode < 200 || statusCode > 299) {
          waspCallback.onError(new WaspError(waspResponse, ""Mock error message!""));
          return;"
644,invokeRequest,"  public void invokeRequest(RequestCreator waspRequest,
                            final InternalCallback<Response> waspCallback) {
    MockHolder mock = waspRequest.getMock();
    final int statusCode = mock.getStatusCode();

    MethodInfo methodInfo = waspRequest.getMethodInfo();
    Type responseType = methodInfo.getResponseObjectType();

    String responseString;
    Object responseObject;
"
648,createListObject,"  private static List createListObject(ParameterizedType type) {

    Class rawType = (Class) type.getRawType();
    Type[] genericTypes = type.getActualTypeArguments();
    List listObject;

    if (rawType.isInterface()) {
      listObject = new ArrayList(MOCK_LIST_COUNT);"
649,generateValue,"  private static Object generateValue(Class<?> rawType) {

    if (String.class.isAssignableFrom(rawType)) {
      return ""test"";
    } else if (int.class.isAssignableFrom(rawType) || Integer.class.isAssignableFrom(rawType)) {"
651,populateObject,"  private static <T> T populateObject(T object) {
    Class clazz = object.getClass();

    while (clazz != null) {
      String name = clazz.getName();"
652,instantiateObject,"  public static <T> T instantiateObject(Class<T> rawType) {
    try {
      Constructor<?> constructor = rawType.getDeclaredConstructor();
      if (!constructor.isAccessible()) {"
653,createMockObject,"  public static <T> T createMockObject(Type type) {
    Class<T> rawType;

    if (type instanceof ParameterizedType) {
      rawType = (Class<T>) ((ParameterizedType) type).getRawType();
    } else if (type instanceof Class) {"
654,readMockResponse,"  public static String readMockResponse(Context context, String filePath) {

    String responseString;
    try {
      responseString = IOUtils.readFileFromAssets(context, filePath);
    } catch (IOException e) {"
657,isAuthTokenEnabled,"  boolean isAuthTokenEnabled() {
    return isAuthTokenEnabled;
  }"
663,isMocked,"  boolean isMocked() {
    return mock != null;
  }"
668,methodError,"  private RuntimeException methodError(String message, Object... args) {
    if (args.length > 0) {
      message = String.format(message, args);
    }"
671,parseParamAnnotations,"  private void parseParamAnnotations() {
    Annotation[][] annotationArrays = method.getParameterAnnotations();
    methodAnnotations = new Annotation[annotationArrays.length];

    List<String> pathParams = new ArrayList<>();
    List<String> queryParams = new ArrayList<>();
    List<String> headerParams = new ArrayList<>();
    boolean isBodyAdded = false;

    int count = annotationArrays.length;"
672,parseObservableResponseObjectType,"  private void parseObservableResponseObjectType() {
    Type type = method.getGenericReturnType();
    Class rawType = RetroTypes.getRawType(type);
    Type returnType = RetroTypes.getSupertype(type, rawType, Observable.class);
    responseObjectType = getParameterUpperBound((ParameterizedType) returnType);
  }"
674,addHeaders,"  private void addHeaders(String[] values) {
    for (String header : values) {
      String[] strings = header.split("":"");"
675,parseMethodAnnotations,"  private void parseMethodAnnotations() {
    Annotation[] annotations = method.getAnnotations();
    for (Annotation annotation : annotations) {
      Class<? extends Annotation> annotationType = annotation.annotationType();"
676,newInstance,"  static MethodInfo newInstance(Context context, Method method) {
    return new MethodInfo(context, method);
  }"
677,init,"  synchronized void init() {
    parseMethodAnnotations();
    parseReturnType();
    parseParamAnnotations();
  }"
678,logChunk,"  private static void logChunk(int logType, String chunk) {
    switch (logType) {
      case Log.ERROR:"
680,wtf,"  public static void wtf(String message) {
    log(Log.ASSERT, message);
  }"
681,v,"  public static void v(String message) {
    log(Log.VERBOSE, message);
  }"
682,i,"  public static void i(String message) {
    log(Log.INFO, message);
  }"
683,w,"  public static void w(String message) {
    log(Log.WARN, message);
  }"
684,e,"  public static void e(String message) {
    log(Log.ERROR, message);
  }"
685,d,"  public static void d(String message) {
    log(Log.DEBUG, message);
  }"
686,readFileFromAssets,"  public static String readFileFromAssets(Context context, String filePath) throws IOException {
    if (TextUtils.isEmpty(filePath)) {
      return null;
    }

    StringBuilder builder = new StringBuilder();

    InputStream inputStream = context.getAssets().open(filePath);
    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, ""UTF-8""));
    String str;"
687,assetsFileExists,"  public static boolean assetsFileExists(Context context, String filePath) {
    if (TextUtils.isEmpty(filePath)) {
      return false;
    }
    try {"
688,cancel,"  public void cancel() {
    cancelled = true;
  }"
689,isCancelled,"  public boolean isCancelled() {
    return cancelled;
  }"
691,requestImage,"    void requestImage(ImageCreator waspImageCreator, int maxWidth, int maxHeight,
                      InternalCallback<Container> waspCallback);"
693,putBitmap,"    void putBitmap(String url, Bitmap bitmap);
"
696,clearCache,"  public void clearCache() {
    if (imageCache == null) {
      return;
    }"
697,initImageView,"  private void initImageView(ImageCreator waspImageCreator) {
    int defaultImage = waspImageCreator.getDefaultImage();
    ImageView imageView = waspImageCreator.getImageView();
    if (defaultImage != 0) {
      imageView.setImageResource(defaultImage);
      return;"
698,onError,"      public void onError(WaspError error) {
        int errorImage = imageCreator.getErrorImage();
        if (errorImage != 0) {
          imageView.setImageResource(errorImage);
        }"
701,load,"  public void load(ImageCreator imageCreator) {
    checkMain();
    loadImage(imageCreator);
  }"
708,load,"    public void load() {
      new ImageCreator(this).load();
    }"
712,to,"    public Builder to(ImageView imageView) {
      if (imageView == null) {
        throw new NullPointerException(""ImageView cannot be null"");
      }
      this.imageView = imageView;"
713,from,"    Builder from(String url) {
      this.url = url;
      return this;
    }"
715,logError,"  public void logError(String message, long networkTime) {
    switch (logLevel) {
      case FULL:"
716,logSuccess,"  public void logSuccess(Bitmap bitmap) {
    switch (logLevel) {
      case FULL:"
717,logRequest,"  public void logRequest() {
    switch (logLevel) {
      case FULL:"
718,load,"  void load() {
    imageHandler.load(this);
  }"
723,options,"  public NanoHTTPD.Response options(NanoHTTPD.IHTTPSession session);
"
724,delete,"  public NanoHTTPD.Response delete(NanoHTTPD.IHTTPSession session);
"
725,head,"  public NanoHTTPD.Response head(NanoHTTPD.IHTTPSession session);
"
726,patch,"  public NanoHTTPD.Response patch(NanoHTTPD.IHTTPSession session);
"
727,put,"  public NanoHTTPD.Response put(NanoHTTPD.IHTTPSession session);
"
728,post,"  public NanoHTTPD.Response post(NanoHTTPD.IHTTPSession session);
"
729,get,"  public NanoHTTPD.Response get(NanoHTTPD.IHTTPSession session);
"
730,toJson,"  public static String toJson(Map<String, Object> map) {
    StringBuilder builder = new StringBuilder();
    builder.append(""{"");
    Iterator<Map.Entry<String, Object>> iterator = map.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry<String, Object> entry = iterator.next();
      String key = entry.getKey();
      Object value = entry.getValue();"
733,clearCache,"  public void clearCache() {
    clearAll();
  }"
734,putBitmap,"  public void putBitmap(String url, Bitmap bitmap) {
    put(url, bitmap);
  }"
736,isFilterEnabled,"  public boolean isFilterEnabled() {
    return filterEnabled;
  }"
743,onPauseVideoLayout,"    public void onPauseVideoLayout() {
        if (mMediaPlayer != null && mMediaPlayer.isPlaying())
            try {"
744,onResumeVideoLayout,"    public void onResumeVideoLayout() {
        if (mMediaPlayer != null && !mMediaPlayer.isPlaying())
            try {"
745,onDestroyVideoLayout,"    public void onDestroyVideoLayout() {
        if (mMediaPlayer != null) {
            try {"
746,onSurfaceTextureUpdated,"    public void onSurfaceTextureUpdated(SurfaceTexture surface) {
    }"
747,onSurfaceTextureDestroyed,"    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
        return false;
    }"
748,onSurfaceTextureSizeChanged,"    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
    }"
749,onSurfaceTextureAvailable,"    public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
        surfaceAvailableWorkers(surface);
    }"
750,changeVideo,"    private void changeVideo() {
        try {
            onDestroyVideoLayout();"
751,surfaceAvailableWorkers,"    private void surfaceAvailableWorkers(SurfaceTexture surfaceTexture) {
        Surface surface = new Surface(surfaceTexture);

        try {"
752,surfaceSetup,"    private void surfaceSetup() {
        int screenHeight = getResources().getDisplayMetrics().heightPixels;
        int screenWidth = getResources().getDisplayMetrics().widthPixels;

        if (ADJUSTVIEWBOUNDS) {"
753,updateTextureViewSize,"    private void updateTextureViewSize(int viewWidth, int viewHeight) {
        float scaleX = 1.0f;
        float scaleY = 1.0f;

        int pivotPointX = (VIDEO_GRAVITY == 0) ? 0 : (VIDEO_GRAVITY == 1) ? viewWidth : viewWidth / 2;
        int pivotPointY = viewHeight / 2;

        Matrix matrix = new Matrix();

        if (VIDEO_GRAVITY == 4) {"
754,calculateVideoSize,"    private void calculateVideoSize() {
        try {
            MediaMetadataRetriever metaRetriever = new MediaMetadataRetriever();"
756,initViews,"    private void initViews() {
        videoSurface = new TextureView(getContext());
    }"
760,onCreate,"    public void onCreate() {
        super.onCreate();
        InjectorHelper.initializeApplicationComponent(this);

        if (BuildConfig.DEBUG) {"
764,returnMultipleApksPublished,"    public void returnMultipleApksPublished();
"
765,returnUpToDate,"    public void returnUpToDate(String versionDonwloadable);
"
766,foundUpdateAndDontShowIt,"    public void foundUpdateAndDontShowIt(String versionDonwloadable);
"
767,foundUpdateAndShowIt,"    public void foundUpdateAndShowIt(String versionDonwloadable);
"
768,CheckForNotification,"    public static void CheckForNotification(FragmentActivity fragmentActivity, int notificationIconResId) {
        checkForNotification(fragmentActivity, notificationIconResId);
    }"
769,CheckForNotification,"    public static void CheckForNotification(FragmentActivity fragmentActivity) {
        checkForNotification(fragmentActivity);
    }"
770,CheckForDialog,"    public static void CheckForDialog(FragmentActivity fragmentActivity) {
        checkForDialog(fragmentActivity);
    }"
771,checkForNotification,"    public static void checkForNotification(int notificationIconResId, FragmentActivity fragmentActivity, int successfulChecksRequired) {
    }"
772,checkForNotification,"    public static void checkForNotification(int notificationIconResId, FragmentActivity fragmentActivity) {
    }"
773,checkForNotification,"    public static void checkForNotification(FragmentActivity fragmentActivity, int successfulChecksRequired) {
    }"
774,checkForNotification,"    public static void checkForNotification(FragmentActivity fragmentActivity) {
    }"
775,checkForDialog,"    public static void checkForDialog(FragmentActivity fragmentActivity, int successfulChecksRequired) {
    }"
776,checkForDialog,"    public static void checkForDialog(FragmentActivity fragmentActivity) {
    }"
777,showNotification,"    public static void showNotification() {
        Notification.show(mActivity, mStore, mNoticeIconResId);
    }"
778,showDialog,"    public void showDialog(String versionDownloadable) {
        Dialog.show(mActivity, mStore, versionDownloadable, mNoticeIconResId);
    }"
779,saveNumberOfChecksForUpdatedVersion,"    private void saveNumberOfChecksForUpdatedVersion(String versionDownloadable, int mChecksMade) {
        mChecksMade++;
        SharedPreferences prefs = mActivity.getSharedPreferences(PREFS_FILENAME, 0);
        SharedPreferences.Editor editor = prefs.edit();
        editor.putInt(SUCCESSFUL_CHEKS_PREF_KEY + versionDownloadable, mChecksMade);
        editor.commit();
"
781,hasUserTappedToNotShowNoticeAgain,"    private boolean hasUserTappedToNotShowNoticeAgain(String versionDownloadable) {
        SharedPreferences prefs = mActivity.getSharedPreferences(PREFS_FILENAME, 0);
        String prefKey = DONT_SHOW_AGAIN_PREF_KEY + versionDownloadable;
        return prefs.getBoolean(prefKey, false);
    }"
785,returnMultipleApksPublished,"    public void returnMultipleApksPublished() {
"
786,returnUpToDate,"    public void returnUpToDate(String versionDonwloadable) {
"
787,foundUpdateAndDontShowIt,"    public void foundUpdateAndDontShowIt(String versionDownloadable) {
"
788,foundUpdateAndShowIt,"    public void foundUpdateAndShowIt(String versionDownloadable) {
        if (mNotice == Notice.NOTIFICATION) {
            showNotification();"
789,storeError,"    public void storeError() {
        mLibraryResultCallaback.returnStoreError();
    }"
790,appUnpublished,"    public void appUnpublished() {
        mLibraryResultCallaback.returnAppUnpublished();
    }"
791,networkError,"    public void networkError() {
        mLibraryResultCallaback.returnNetworkError();
    }"
792,multipleApksPublished,"    public void multipleApksPublished() {
        mLibraryResultCallaback.returnMultipleApksPublished();
    }"
793,versionDownloadableFound,"    public void versionDownloadableFound(String versionDownloadable) {
        if (Comparator.isVersionDownloadableNewer(mActivity, versionDownloadable)) {
            if (hasToShowNotice(versionDownloadable) && !hasUserTappedToNotShowNoticeAgain(versionDownloadable)) {"
794,start,"    public static void start() {
        ASyncCheck asynctask = new ASyncCheck(mStore, mCheckResultCallback, mActivity);
        asynctask.execute();
    }"
800,isVersionDownloadableNewer,"    public static boolean isVersionDownloadableNewer(Activity mActivity, String versionDownloadable) {
        String versionInstalled = null;
        try {
            versionInstalled = mActivity.getPackageManager().getPackageInfo(mActivity.getPackageName(), 0).versionName;
        } catch (PackageManager.NameNotFoundException ignored) {"
805,versionDownloadableFound,"    public void versionDownloadableFound(String versionDownloadable);
"
806,containsNumber,"    public final boolean containsNumber(String string) {
        return string.matches("".*[0-9].*"");
    }"
807,onPostExecute,"    protected void onPostExecute(Integer result) {
        if (result == VERSION_DOWNLOADABLE_FOUND) {
            mResultInterface.versionDownloadableFound(mVersionDownloadable);"
808,doInBackground,"    protected Integer doInBackground(String... notused) {
        if (Network.isAvailable(mContext)) {
            try {
                HttpParams params = new BasicHttpParams();"
812,convertHashToString,"    private static String convertHashToString(byte[] hashBytes) {
        StringBuilder returnVal = new StringBuilder();
        for (byte hashByte : hashBytes) {
            returnVal.append(Integer.toString((hashByte & 0xff) + 0x100, 16).substring(1));
        }"
814,filterList,"    static List<String> filterList(List<String> list, String start, String end) {
        return Stream.of(list)
                .filter(s -> TextUtils.isEmpty(start) || s.startsWith(start))"
815,filterList,"    static List<String> filterList(List<String> list, Pattern pattern) {
        return Stream.of(list)
                .filter(s -> pattern.matcher(s).find())"
817,deleteFile,"    static boolean deleteFile(String filePath) {
        File file = new File(filePath);
        if (file.isFile() && file.exists()) {
            return file.delete();
        }"
819,shell,"    static void shell(Context context, Command command) {
        try {
            RootTools.closeAllShells();"
820,run,"                public void run() {
                    Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
                }"
821,showToastOnLooper,"    static void showToastOnLooper(final Context context, String message) {
        try {
            Handler handler = new Handler(Looper.getMainLooper());"
822,is64BitImpl,"    static boolean is64BitImpl() {
        try {
            Class<?> clzVMRuntime = Class.forName(""dalvik.system.VMRuntime"");
            if (clzVMRuntime == null) {"
824,writeFileFromSD,"    static void writeFileFromSD(String path, String content) {
        BufferedWriter out = null;
        try {
            File file = new File(path);"
825,readFileFromSD,"    static String readFileFromSD(String path) {
        StringBuilder stringBuilder = new StringBuilder();
        File file = new File(path);
        if (!file.isDirectory()) {
            try {
                InputStream inputStream = new FileInputStream(file);"
826,copyFilesFromSD,"    static void copyFilesFromSD(String oldPath, String newPath) {
        try {
            File newFile = new File(newPath);"
834,PermissionsRequest,"    private static void PermissionsRequest(OnPermissionResultListener b, boolean get) {
        if (b != null)
            b.onResult(get);"
836,onRequestPermissionsResult,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        if (requestCode == REQUEST_CODE_ASK_PERMISSIONS) {
            if (grantResults.length <= 0) {"
837,onActivityResult,"    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK && requestCode == REQUEST_CODE_ASK_PERMISSIONS) {
            PermissionsRequest(back, true);"
840,handleLoadPackage,"    public void handleLoadPackage(final LoadPackageParam lpparam) throws Throwable {
        if (lpparam.packageName.equals(Tools.HOOK_NAME)) {
            HotXposed.hook(HTTPHook.class, lpparam);"
842,error,"                        public void error(int i, String s) {
                            ErrorCode.showError(context, i);
                        }"
843,finish,"                        public void finish(JSONObject jsonObject) throws JSONException {
                            if (update.downloadUrl.length() == 0) {
                                iv_script.setVisibility(View.GONE);"
844,showUpdateDialog,"    private void showUpdateDialog(final String title, final String extra, final Update update) {
        String log = update.log;
        if (extra != null && extra.length() != 0)
            log = log + ""\n\n"" + extra;
        new AlertDialog.Builder(this)"
845,showMessageDialog,"    private void showMessageDialog(final String title, final String message, final boolean finish) {
        new AlertDialog.Builder(this)
                .setCancelable(false)"
846,isVXP,"    private boolean isVXP() {
        return System.getProperty(""vxp"") != null;
    }"
847,isModuleActive,"    private static boolean isModuleActive() {
        return false;
    }"
848,isExpModuleActive,"    private boolean isExpModuleActive() {
        boolean isExp = false;

        try {
            ContentResolver contentResolver = getContentResolver();"
850,checkState,"    private void checkState() {
        String method = null;

        if (isModuleActive()) {
            method = ""Xposed / EdXposed"";"
852,error,"            public void error(int i, String s) {
                ErrorCode.showError(context, i);
            }"
853,finish,"            public void finish(JSONObject jsonObject) throws JSONException {
                scriptUpdate = Update.getUpdate(context, jsonObject);
                if (!scriptUpdate.version.equals(Tools.nowVersion.replace(""-high"", """")))
                    iv_script.setVisibility(View.VISIBLE);"
856,finish,"            public void finish(JSONObject jsonObject) throws JSONException {
                versionUpdate = Update.getUpdate(context, jsonObject);
                if (!versionUpdate.version.equals(BuildConfig.VERSION_NAME))
                    iv_version.setVisibility(View.VISIBLE);"
858,listener,"    private void listener() {
        rg_origin.setOnCheckedChangeListener((radioGroup, i) -> {
            switch (i) {
                case R.id.rb_a:
                    originIndex = 0;
                    break;
                case R.id.rb_b:
                    originIndex = 1;
                    break;
                case R.id.rb_c:
                    originIndex = 2;
                    break;"
861,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        context = this;

        checkState();
        initView();
        listener();"
862,handleMessage,"        public void handleMessage(Message msg) {
            if (msg.what == 0) {
                getPackageManager().setComponentEnabledSetting(new ComponentName(MainActivity.this, ""com.raincat.unblockmusicpro.MainAlias""),"
864,logText,"    private static void logText(String name, Object object) {
        Field[] fields = object.getClass().getDeclaredFields();
        for (Field field : fields) {
            try {"
866,beforeHookedMethod,"                                        protected void beforeHookedMethod(MethodHookParam param) {
                                            if (param.args.length >= 9) {
                                                param.args[8] = proxy;"
867,commandOutput,"                                        public void commandOutput(int id, String line) {
                                            if (showLog)
                                                XposedBridge.log(line);
                                            if (firstToastShow) {"
870,showError,"    public static void showError(Context context, int errorCode) {
            switch (errorCode) {
                case 1:"
872,getJsonBoolean,"    protected static boolean getJsonBoolean(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getBoolean(key);
            }"
873,getJsonLong,"    protected static long getJsonLong(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getLong(key);
            }"
874,getJsonInt,"    protected static int getJsonInt(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getInt(key);
            }"
875,getJsonString,"    static String getJsonString(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getString(key);
            }"
878,isBlock,"    public boolean isBlock() {
        return block;
    }"
879,run,"    public DefaultExecutor run(){
        DefaultExecutor executor = new DefaultExecutor();

        if (REAL_PATH_PARENT.exists()&&REAL_PATH_PARENT.isFile()){
            executor.setWorkingDirectory(REAL_PATH_PARENT.getParentFile());
        }
        if (!setOutfileFlag)"
882,output,"    private void output(String type , String filename){
        setOutfileFlag = true;
        File output = new File(tempdir.concat(""xray/""));
        outfile = new File(output, filename);
        command.add(""--""+type+""-output ""+outfile.getAbsolutePath());
    }"
883,outputHTML,"    public XRay outputHTML(String filename){
        output(""html"",filename);
        return this;
    }"
884,outputTEXT,"    public XRay outputTEXT(String filename){
        output(""text"",filename);
        return this;
    }"
885,outputJSON,"    public XRay outputJSON(String filename){
        output(""json"",filename);
        return this;
    }"
891,isPortUsing,"    public static boolean isPortUsing(String host,int port)  {
        boolean flag = false;
        Socket socket = null;
        try {

            InetAddress Address = InetAddress.getByName(host);"
892,isLocalPortUsing,"    public  boolean isLocalPortUsing(int port){
        boolean flag = false;
        try {
            flag = isPortUsing(""127.0.0.1"", port);
        } catch (Exception e) {"
893,process,"    public void process() {
        result = this;
        command.add(REAL_PATH);
        command.add(""webscan"");

        outputDir = new File(tempdir.concat(""xray/""));
"
895,check,"    public boolean check(Map param) {
        String content = """";
        if (Constant.TRACKRAY_SYSTEMOS == Constant.WINDOWS){
            Shell block = shell().block(true);
            if (REAL_PATH_PARENT.exists()&&REAL_PATH_PARENT.isFile()){
                block.workdir(REAL_PATH_PARENT.getParentFile());"
901,clone,"    public Object clone()  {
        try {
            return super.clone();
        } catch (CloneNotSupportedException e) {"
903,toJSON,"    public JSONObject toJSON(){
        return JSONObject.fromObject(this);
    }"
904,toString,"    public String toString() {
        return toJSON().toString();
    }"
914,WARN,"    public static ResultCode WARN(String obj){
        return getInstance(400,obj);
    }"
915,ERROR,"    public static ResultCode ERROR(String obj){
        return getInstance(500,obj);
    }"
916,SUCCESS,"    public static ResultCode SUCCESS(String obj){
        return getInstance(200,obj);
    }"
920,finalize,"    protected void finalize() throws Throwable {
        if (logind)
        {
            logout();"
921,arr,"    public String[] arr(String command ,String... param){
        return param;
    }"
922,list,"    public List<String> list(String... param){
        return Arrays.asList(param);
    }"
923,format,"    private final String format() {
        return String.format(this.format,host);
    }"
924,unpack,"    public Value unpack(byte[] obj) {
        try {
            return MessagePack.unpack(obj);
        } catch (IOException e) {"
925,pack,"    public byte[] pack(Object obj) {
        try {
            return MessagePack.pack( obj );
        } catch (IOException e) {"
926,sendList,"    public Map sendList(List list){
        try {
            byte[] result= send(pack(list));
            Value unpack = unpack(result);"
927,send,"    public byte[] send(byte[] p){
        byte[] result= Requests.post(format())
                .timeout(callTimeout)
                .headers(header)"
928,readResult,"    public Map readResult(){
        Map map = sendList(list(Command.ConsoleRead, token, String.valueOf(consoleID)));
        return map;
    }"
929,executeCommand,"    public Map executeCommand(List<String> commands){
        StringBuffer buff = new StringBuffer();
        for (String command : commands) {
            buff.append(command).append(""\n"");
        }
        Map map = sendList(list(Command.ConsoleWrite, token, String.valueOf(consoleID), buff.toString()));"
930,execute,"    public String execute(List<String> commands){
        executeCommand(commands);
        Map map = readResult();
        if (map!=null && map.containsKey(""data"") && map.containsKey(""prompt"") && map.containsKey(""busy""))
        {
            String response = StrUtils.unicodeToString(map.get(""data"").toString());"
931,destroyConsole,"    public void destroyConsole(){
        Map map = sendList(list(Command.ConsoleDestroy, token , String.valueOf(consoleID)));
    }"
932,banner,"    public String banner(){
        String banner = execute(Arrays.asList(""""));
        return banner;
    }"
933,createConsole,"    public int createConsole(){
        Map map = sendList(list(Command.ConsoleCreate, token));
        if (map.containsKey(""id"")){
            consoleID = Integer.parseInt( map.get(""id"").toString());
            return consoleID;"
934,logout,"    public void logout(){
        destroyConsole();
        Map map = sendList(list(Command.AuthLogout, token));
    }"
935,close,"    public void close(){
        logout();
    }"
936,login,"    public boolean login(){
        try {
            Map send = sendList(list(Command.AuthLogin, username, password));
            if (send.containsKey(""token"")){"
937,per,"        protected void per(char[] buf, char[] chs, int len , ArrayList<String> strs){
            if(len == -1){
                String tmp="""";
                for(int i=buf.length-1; i>=0; --i)"
938,numbers4,"        public List<String> numbers4(){
            char[] chars = {'0', '1', '2', '3', '4', '5', '6','7','8','9'};
            ArrayList<String> integers = new ArrayList<>();
            per(new char[4],chars,4-1,integers);
            return integers;
        }"
940,decode,"            public String decode (String str){
                return StrUtils.unicodeToString(str);
            }"
941,encode,"            public String encode (String str){
                return StrUtils.stringToUnicode(str);
            }"
942,decode,"            public String decode(String obj,String code) throws UnsupportedEncodingException { return java.net.URLDecoder.decode(obj,code); }
        }
"
944,decode,"            public  byte[] decode(String str) throws Exception {
                byte[] data = str.getBytes(""GBK"");
                int len = data.length;
                ByteArrayOutputStream buf = new ByteArrayOutputStream(len);
                int i = 0;
                int b1, b2, b3, b4;

                while (i < len) {
"
945,encode,"            public  String encode(byte[] data) {
                StringBuffer sb = new StringBuffer();
                int len = data.length;
                int i = 0;
                int b1, b2, b3;

                while (i < len) {
                    b1 = data[i++] & 0xff;"
946,MD5,"            public  String MD5(String source) {
                return byte2HexStr(MD5Bit(source.getBytes()));
            }"
948,SHA1,"            public  String SHA1(String source) {
                return byte2HexStr(SHA1Bit(source.getBytes()));
            }"
949,SHA1Bit,"            public  byte[] SHA1Bit(byte[] source) {
                try {
                    MessageDigest sha1Digest = MessageDigest.getInstance(""SHA-1"");"
958,isMatch,"    public boolean isMatch(){
        if (StringUtils.isNotBlank(match) && StringUtils.isBlank(md5))
            return true;
        return false;"
959,toInt,"    private String toInt(int i) {
        StringBuffer result = new StringBuffer();
        int temp = String.valueOf(i).length();
        String flag = "" "";
        switch (temp){
            case 1:
                result.append(i).append(flag+flag+flag);"
960,jsonPluginCount,"    public int jsonPluginCount(){
        String jsonPath = Constant.RESOURCES_INCLUDE_PATH.concat(""/json/"");

        File file = new File(jsonPath);
        if (file.isDirectory()){
            String[] list = file.list();"
961,crawlerCount,"    public int crawlerCount() {
        return dispatchController.getAppContext().getBeansOfType(CrawlerPlugin.class).size();
    }"
962,pluginCount,"    public int pluginCount() {
        return dispatchController.getAppContext().getBeansOfType(AbstractPlugin.class).size();
    }"
963,pocCount,"    public int pocCount() {
        return dispatchController.getAppContext().getBeansOfType(AbstractPOC.class).size();
    }"
965,count,"    public int count(){
        return auxiliaryCount()+crawlerCount()+pocCount()+jsonPluginCount()+pluginCount();
    }"
967,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Vulndetail) == false) {
            return false;"
968,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(vulnId).append(severity).append(criticality).append(vtId).append(cvss2).append(tags).append(affectsDetail).append(affectsUrl).append(cvss3).append(cvssScore).append(targetId).append(vtName).append(locId).append(source).append(status).append(request).append(additionalProperties).toHashCode();
    }"
971,toString,"    public String toString() {
        return ToStringBuilder.reflectionToString(this);
    }"
1004,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Vulnerabilities) == false) {
            return false;"
1005,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(vulnId).toHashCode();
    }"
1035,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Scan) == false) {
            return false;"
1036,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(nextRun).append(currentSession).append(targetId).append(profileName).append(profileId).append(criticality).append(reportTemplateId).append(scanId).append(additionalProperties).toHashCode();
    }"
1056,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof CurrentSession) == false) {
            return false;"
1057,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(eventLevel).append(progress).append(startDate).append(severityCounts).append(status).append(threat).append(scanSessionId).append(additionalProperties).toHashCode();
    }"
1075,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof SeverityCounts) == false) {
            return false;"
1076,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(high).append(medium).append(info).append(low).append(additionalProperties).toHashCode();
    }"
1088,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Target) == false) {
            return false;"
1089,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(address).append(severityCounts).append(lastScanDate).append(threat).append(criticality).append(manualIntervention).append(lastScanSessionId).append(targetId).append(continuousMode).append(lastScanId).append(lastScanSessionStatus).append(description).append(additionalProperties).toHashCode();
    }"
1117,stopScan,"    public boolean stopScan(String scanid){
        try {
            send(String.format(""/api/v1/scans/%s/abort"", scanid), HttpMethod.POST);
        }catch (Exception e){"
1119,vuln,"    public Vulndetail vuln(String vulnid){
        String url = String.format(""/api/v1/vulnerabilities/%s"", vulnid);
        String resp = send( url, HttpMethod.GET);
        try {
            return toBean(resp,Vulndetail.class);"
1120,vuln,"    public Vulndetail vuln(String scanid,String sessionid ,String vid){
        String resp = send(String.format(""/api/v1/scans/%s/results/%s/vulnerabilities/%s"", scanid, sessionid , vid), HttpMethod.GET);
        try {
            return toBean(resp,Vulndetail.class);"
1121,vulns,"    public List<Vulnerabilities> vulns(String sessionId,String scanId){
        ArrayList<Vulnerabilities> obj = new ArrayList<>();
        JSONObject jsonObject = vulnsJSON(sessionId, scanId);
        if (jsonObject.containsKey(""vulnerabilities"")){
            JSONArray vulnerabilities = jsonObject.getJSONArray(""vulnerabilities"");
            for (int i = 0; i < vulnerabilities.size(); i++) {"
1122,vulnsJSON,"    public JSONObject vulnsJSON(String sessionid , String scanid){
        String resp = send(String.format(""/api/v1/scans/%s/results/%s/vulnerabilities"", scanid, sessionid), HttpMethod.GET);
        JSONObject obj = JSONObject.fromObject(resp);
        return obj;
    }"
1123,createTarget,"    public String createTarget(String url){
        JSONObject json = new JSONObject();
        json.put(""address"",url);
        json.put(""description"",url);
        json.put(""criticality"",""10"");

        String resp = send(""/api/v1/targets"", json.toString(), HttpMethod.POST);
        JSONObject obj = JSONObject.fromObject(resp);
        return obj.getString(""target_id"");"
1124,targets,"    public List<Target> targets(){
        JSONObject obj = targetsJSON();
        List <Target> list = new ArrayList<>();
        if (obj.containsKey(""targets"")){
            JSONArray scans = obj.getJSONArray(""targets"");
            for (int i = 0; i < scans.size(); i++) {"
1125,toBean,"    protected <T> T toBean (String json ,  Class <T> clazz) throws IOException {
        return new ObjectMapper().readValue(json,clazz);
    }"
1126,targetsJSON,"    public JSONObject targetsJSON(){
        String scans = send(""/api/v1/targets"", HttpMethod.GET);
        return JSONObject.fromObject(scans);
    }"
1127,scan,"    public Scan scan(String scanId){
        String scan = send(String.format(""/api/v1/scans/%s"",scanId), HttpMethod.GET);
        try {
            return toBean(scan,Scan.class);"
1128,scans,"    public List<Scan> scans(){
        List <Scan> list = new ArrayList<>();
        JSONObject obj = scansJSON();
        if (obj.containsKey(""scans"")){
            JSONArray scans = obj.getJSONArray(""scans"");
            for (int i = 0; i < scans.size(); i++) {"
1129,scansJSON,"    public JSONObject scansJSON(){
        String scans = send(""/api/v1/scans"", HttpMethod.GET);
        return JSONObject.fromObject(scans);
    }"
1130,send,"    String send(String url , String data , HttpMethod method){
        CrawlerPage page = new CrawlerPage();
        page.getRequest().setUrl(host+url);
        page.getRequest().setHttpHeaders(headers);
        page.getRequest().setParamStr(data);
        page.getRequest().setHttpMethod(method);
        f.run(page);
        return page.getResponse().getStatus().getContentString();
    }"
1131,send,"    String send(String url , HttpMethod method){
        return send(url,"""",method);
    }"
1132,initCheck,"    public void initCheck(){
        headers = new Header[]{
                new BasicHeader(""X-Auth"",apikey),
                new BasicHeader(""content-type"",""application/json""),
        };

        CrawlerPage page = new CrawlerPage();
        page.getRequest().setUrl(host+""/api/v1/scans"");
        page.getRequest().setHttpHeaders(headers);
        page.getRequest().setHttpMethod(HttpMethod.GET);"
1133,filterRGB,"	public abstract int filterRGB(int x, int y, int rgb);
}"
1135,filter,"    public BufferedImage filter( BufferedImage src, BufferedImage dst ) {
        int width = src.getWidth();
        int height = src.getHeight();
		int type = src.getType();
		WritableRaster srcRaster = src.getRaster();

        if ( dst == null )
            dst = createCompatibleDestImage( src, null );
		WritableRaster dstRaster = dst.getRaster();

        setDimensions( width, height);
"
1136,combinePixels,"	public static int combinePixels(int rgb1, int rgb2, int op, int extraAlpha) {
		if (op == REPLACE)
			return rgb1;
		int a1 = (rgb1 >> 24) & 0xff;
		int r1 = (rgb1 >> 16) & 0xff;
		int g1 = (rgb1 >> 8) & 0xff;
		int b1 = rgb1 & 0xff;
		int a2 = (rgb2 >> 24) & 0xff;
		int r2 = (rgb2 >> 16) & 0xff;
		int g2 = (rgb2 >> 8) & 0xff;
		int b2 = rgb2 & 0xff;

		switch (op) {
		case NORMAL:"
1137,combinePixels,"	public static int combinePixels(int rgb1, int rgb2, int op, int extraAlpha, int channelMask) {
		return (rgb2 & ~channelMask) | combinePixels(rgb1 & channelMask, rgb2, op, extraAlpha);
	}"
1138,combinePixels,"	public static int combinePixels(int rgb1, int rgb2, int op) {
		return combinePixels(rgb1, rgb2, op, 0xff);
	}"
1139,nearColors,"	public static boolean nearColors(int rgb1, int rgb2, int tolerance) {
		int r1 = (rgb1 >> 16) & 0xff;
		int g1 = (rgb1 >> 8) & 0xff;
		int b1 = rgb1 & 0xff;
		int r2 = (rgb2 >> 16) & 0xff;
		int g2 = (rgb2 >> 8) & 0xff;
		int b2 = rgb2 & 0xff;
		return Math.abs(r1-r2) <= tolerance && Math.abs(g1-g2) <= tolerance && Math.abs(b1-b2) <= tolerance;
	}"
1140,brightness,"	public static int brightness(int rgb) {
		int r = (rgb >> 16) & 0xff;
		int g = (rgb >> 8) & 0xff;
		int b = rgb & 0xff;
		return (r+g+b)/3;
	}"
1141,interpolate,"	public static int interpolate(int v1, int v2, float f) {
		return clamp((int)(v1+f*(v2-v1)));
	}"
1142,clamp,"	public static int clamp(int c) {
		if (c < 0)
			return 0;
		if (c > 255)
			return 255;"
1143,toString,"	public String toString() {
		return ""Stylize/Add Noise..."";
	}"
1144,filterRGB,"	public int filterRGB(int x, int y, int rgb) {
		if ( randomNumbers.nextFloat() <= density ) {
			int a = rgb & 0xff000000;
			int r = (rgb >> 16) & 0xff;"
1145,random,"	private int random(int x) {
		x += (int)(((distribution == GAUSSIAN ? randomNumbers.nextGaussian() : 2*randomNumbers.nextFloat() - 1)) * amount);
		if (x < 0)
			x = 0;
		else if (x > 0xff)"
1158,createCompatibleDestImage,"    public BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel dstCM) {
        if ( dstCM == null )
            dstCM = src.getColorModel();
        return new BufferedImage(dstCM, dstCM.createCompatibleWritableRaster(src.getWidth(), src.getHeight()), dstCM.isAlphaPremultiplied(), null);"
1169,blur,"    public void blur( int[] in, int[] out, int width, int radius ) {
        int widthMinus1 = width-1;
        int r2 = 2*radius+1;
        int tr = 0, tg = 0, tb = 0;

        for ( int i = -radius; i <= radius; i++ ) {
            int rgb = in[mod(i, width)];"
1170,mod,"	private static int mod(int a, int b) {
		int n = a/b;
		
		a -= n*b;
		if (a < 0)
			return a + b;"
1171,clamp,"	private static int clamp(int c) {
		if (c < 0)
			return 0;
		if (c > 255)
			return 255;"
1172,random,"	private int random(int x) {
		x += (int)(255*(2*randomNumbers.nextFloat() - 1) * amount);
		if (x < 0)
			x = 0;
		else if (x > 0xff)"
1174,clone,"	public Object clone() {
		try {
			return super.clone();"
1181,measureText,"    public static float measureText(TextPaint paint,
                                    TextPaint workPaint,
                                    CharSequence text, int start, int end,"
1182,drawText,"    public static float drawText(Canvas canvas,
                                 CharSequence text, int start, int end,
                                 int direction,
                                 float x, int top, int y, int bottom,"
1183,drawText,"    static float drawText(Canvas canvas,
                          CharSequence text, int start, int end,
                          int dir, boolean runIsRtl,
                          float x, int top, int y, int bottom,"
1185,getTextWidths,"    public static int getTextWidths(TextPaint paint,
                                    TextPaint workPaint,
                                    Spanned text, int start, int end,
                                    float[] widths, Paint.FontMetricsInt fmi) {
        MetricAffectingSpan[] spans =
                text.getSpans(start, end, MetricAffectingSpan.class);

        ReplacementSpan replacement = null;"
1187,toString,"        public String toString() {
            return ""\n"";
        }"
1188,draw,"        void draw(Canvas canvas, float offsetY, Paint paint, LayoutParams params) {
        }"
1189,toString,"        public String toString() {
            return unit;
        }"
1190,draw,"        void draw(Canvas canvas, float offsetY, Paint paint, LayoutParams params) {
            canvas.drawText(unit, x + params.getOffsetX(), y + params.getOffsetY() + offsetY, paint);
        }"
1191,draw,"        abstract void draw(Canvas canvas, float offsetY, Paint paint, LayoutParams params);
    }"
1194,fit,"    private LineAnalysis fit(ListIterator<Unit> iterator, int startIndex, float spaceOffset,
                             float availableWidth) {

        int i = startIndex;
"
1197,isTokenized,"    public boolean isTokenized() {
        return tokens != null;
    }"
1206,onDraw,"    public void onDraw(Canvas canvas, int startTop, int startBottom) {

        int tokenStart = getTokenForVertical(startTop, TokenPosition.START_OF_LINE);
        int tokenEnd = getTokenForVertical(startBottom, TokenPosition.END_OF_LINE);
"
1217,onDraw,"    public void onDraw(Canvas canvas, int scrollTop, int scrollBottom) {

        if (tokens.length < TOKEN_LENGTH) {
            return;
        }

        Spannable textCpy = (Spannable) this.text;
        int startIndex = getTokenForVertical(scrollTop, TokenPosition.START_OF_LINE);
        int endIndex = getTokenForVertical(scrollBottom, TokenPosition.END_OF_LINE);

        boolean defIsReverse = false;
"
1220,tokenize,"    private static LinkedList<Integer> tokenize(CharSequence source,
                                                int start,
                                                int end) {

        LinkedList<Integer> units = new LinkedList<>();

        if (start >= end) {"
1221,ammortizeArray,"    private static int[] ammortizeArray(int[] array, int index) {
        if (index >= array.length) {
            int[] newArray = new int[array.length * 2];
            Arrays.fill(newArray, Integer.MAX_VALUE);"
1224,isAntiAlias,"        public boolean isAntiAlias() {
            return antialias;
        }"
1226,isTextSubPixel,"        public boolean isTextSubPixel() {
            return subpixelText;
        }"
1228,isDebugging,"        public boolean isDebugging() {
            return debugging;
        }"
1238,isTextFakeBold,"        public boolean isTextFakeBold() {
            return textFakeBold;
        }"
1240,isTextStrikeThru,"        public boolean isTextStrikeThru() {
            return textStrikeThru;
        }"
1242,isTextUnderline,"        public boolean isTextUnderline() {
            return textUnderline;
        }"
1243,invalidate,"        public void invalidate() {
            this.changed = true;
            onLayoutParamsChange();
        }"
1244,hasChanged,"        public boolean hasChanged() {
            return this.changed;
        }"
1250,isReverse,"        public boolean isReverse() {
            return reverse;
        }"
1252,isHyphenated,"        public boolean isHyphenated() {
            return hyphenated;
        }"
1281,onLayoutParamsChange,"    public abstract void onLayoutParamsChange();
"
1283,getTokenTextAt,"    public abstract CharSequence getTokenTextAt(int index);
"
1284,getTokenTopAt,"    public abstract float getTokenTopAt(int tokenIndex);
"
1285,getTokenEnd,"    public abstract int getTokenEnd(int tokenIndex);
"
1286,getTokenStart,"    public abstract int getTokenStart(int tokenIndex);
"
1287,getLineForToken,"    public abstract int getLineForToken(int tokenIndex);
"
1288,getTokenForVertical,"    public abstract int getTokenForVertical(float y, TokenPosition position);
"
1289,getTokenDescent,"    public abstract float getTokenDescent(int tokenIndex);
"
1290,getTokenAscent,"    public abstract float getTokenAscent(int tokenIndex);
"
1291,onDraw,"    protected abstract void onDraw(Canvas canvas, int startTop, int startBottom);
"
1292,draw,"    public void draw(Canvas canvas, int startTop, int startBottom) {

        params.loadToPaint(paint);
"
1293,onMeasure,"    protected abstract boolean onMeasure(IProgress<Float> progress, ICancel<Boolean> cancelled);
"
1294,measure,"    public boolean measure(IProgress<Float> progress, ICancel<Boolean> cancelled) {

        if (!params.changed && !textChange) {
            return true;
        }
"
1296,onTextNull,"    protected void onTextNull() {
        params.changed = false;
        measuredHeight = (int) (params.insetPaddingTop + params.insetPaddingBottom);
    }"
1302,showToast,"    protected void showToast(String s) {
        toast.setText(s);
        toast.show();
    }"
1303,onPostExecute,"            protected void onPostExecute(Void aVoid) {
                drawFadeInStartTime = System.currentTimeMillis();
                drawCompleted = true;
                invalidate();
            }"
1304,doInBackground,"            protected Void doInBackground(Void... params) {
                drawRunnable.run();
                return null;
            }"
1305,onPreExecute,"            protected void onPreExecute() {
                super.onPreExecute();
            }"
1306,recycle,"        public void recycle() {
            if (drawTask != null) {
                drawTask.cancel(true);
                drawTask = null;"
1307,isReady,"        public boolean isReady() {
            return drawCompleted;
        }"
1312,drawInBackground,"        public void drawInBackground(Runnable runnable) {
            if (drawTask != null) {
                drawTask.cancel(true);
                drawTask = null;
            }

            drawCompleted = false;"
1314,onCancelled,"        protected void onCancelled() {
            super.onCancelled();
            if (layoutProgressListener != null) {
                layoutProgressListener.onCancelled();"
1315,onPostExecute,"        protected void onPostExecute(Boolean done) {
            if (!done || isCancelled()) {
                if (layoutProgressListener != null) {
                    layoutProgressListener.onCancelled();
                }
                return;
            }"
1316,onPreExecute,"        protected void onPreExecute() {
            if (layoutProgressListener != null) {
                layoutProgressListener.onStart();"
1317,doInBackground,"        protected Boolean doInBackground(Void... params) {
            try {
                return layout.measure(progress, cancelled);"
1318,isCancelled,"                public Boolean isCancelled() {
                    return MeasureTask.this.isCancelled();
                }"
1319,onUpdate,"                public void onUpdate(Float progress) {
                    if (layoutProgressListener != null) {
                        layoutProgressListener.onProgressUpdate(progress);"
1320,get,"        public float get(float t, float b, float c, float d);
    }"
1321,onProgressUpdate,"        public void onProgressUpdate(float progress);
    }"
1328,destroyCache,"    public void destroyCache() {
        if (cacheBitmapTop != null) {
            cacheBitmapTop.recycle();
            cacheBitmapTop = null;"
1329,freeResources,"    protected void freeResources() {
        viewportView.setMinimumHeight(minimumHeight);

        if (measureTask != null) {
            measureTask.cancel(true);"
1331,allocateResources,"    public void allocateResources() {
        if (cacheBitmapTop == null) {
            cacheBitmapTop = new CacheBitmap(getWidth(), eglBitmapHeight, cacheConfig.getConfig());
        }"
1333,run,"                        public void run() {
                            drawLayout(new Canvas(bottom.getBitmap()), startBottom, startBottom + eglBitmapHeight, true);
                        }"
1334,run,"                        public void run() {
                            drawLayout(new Canvas(top.getBitmap()), startTop, startTop + eglBitmapHeight, true);
                        }"
1335,run,"                        public void run() {
                            drawLayout(new Canvas(bottom.getBitmap()), startTop, startTop + eglBitmapHeight, true);
                        }"
1337,onConfigurationChanged,"    protected void onConfigurationChanged(Configuration newConfig) {
        if (orientation != newConfig.orientation) {
            orientation = newConfig.orientation;
            freeResources();"
1338,onProgressUpdate,"            public void onProgressUpdate(float progress) {
                progressBar.setProgress((int) (progress * (float) progressBar.getMax()));
            }"
1339,onStart,"            public void onStart() {
                progressBar.setProgress(0);
            }"
1340,onFinish,"            public void onFinish() {
                progressBar.setProgress(progressBar.getMax());
            }"
1341,onCancelled,"            public void onCancelled() {
                progressBar.setProgress(progressBar.getMax());
            }"
1343,onDetachedFromWindow,"    protected void onDetachedFromWindow() {
        freeResources();
        super.onDetachedFromWindow();
    }"
1344,requestLayout,"    public void requestLayout() {
        measureState = MeasureTaskState.START;
        super.requestLayout();
    }"
1345,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        requestDisallowInterceptTouchEvent(disallowInterceptTouch);
        return super.onTouchEvent(ev);
    }"
1346,onMeasure,"    protected void onMeasure(final int widthMeasureSpec, final int heightMeasureSpec) {
        final int width = MeasureSpec.getSize(widthMeasureSpec);

        switch (measureState) {
            case FINISH_AWAIT:"
1355,onStart,"            public void onStart() {
                progressBar = (ProgressBar) ((Activity) getContext()).getWindow().getDecorView().findViewById(progressBarId);
                progressBar.setProgress(0);
            }"
1356,onFinish,"            public void onFinish() {
                progressBar.setProgress(progressBar.getMax());
                progressBar = null;
            }"
1357,onCancelled,"            public void onCancelled() {
                progressBar.setProgress(progressBar.getMax());
                progressBar = null;
            }"
1360,invalidateCache,"    public void invalidateCache() {
        if (cacheBitmapTop != null) {
            cacheBitmapTop.setStart(-1);
        }"
1361,onTextChange,"                    public void onTextChange() {
                        invalidateCache();
                        requestLayout();
                    }"
1362,onLayoutParamsChange,"                    public void onLayoutParamsChange() {
                        invalidateCache();
                        postInvalidate();
                    }"
1366,onAttachedToWindow,"    protected void onAttachedToWindow() {
        orientation = getResources().getConfiguration().orientation;
        super.onAttachedToWindow();
    }"
1367,initPaint,"    protected void initPaint(Paint paint) {
        paint.setTypeface(Typeface.defaultFromStyle(Typeface.NORMAL));
        paint.setTextSize(34);
        paint.setAntiAlias(true);
    }"
1377,isDisallowInterceptTouch,"    public boolean isDisallowInterceptTouch() {
        return disallowInterceptTouch;
    }"
1379,get,"            public float get(float t, float b, float c, float d) {
                return c * t / d + b;
            }"
1380,log,"    public static <T> void log(T s) {
        android.util.Log.d("""", s == null ? ""null"" : s.toString());
    }"
1381,log,"    public static void log(boolean s) {
        android.util.Log.d("""", s + """");
    }"
1382,log,"    public static void log(float s) {
        android.util.Log.d("""", s + """");
    }"
1383,log,"    public static void log(double s) {
        android.util.Log.d("""", s + """");
    }"
1384,log,"    public static void log(long s) {
        android.util.Log.d("""", s + """");
    }"
1385,log,"    public static void log(int s) {
        android.util.Log.d("""", s + """");
    }"
1386,log,"    public static void log(String s) {
        android.util.Log.d("""", s);
    }"
1387,log,"    public static void log(String tag, boolean s) {
        android.util.Log.d(tag, s + """");
    }"
1388,log,"    public static void log(String tag, float s) {
        android.util.Log.d(tag, s + """");
    }"
1389,log,"    public static void log(String tag, double s) {
        android.util.Log.d(tag, s + """");
    }"
1390,log,"    public static void log(String tag, long s) {
        android.util.Log.d(tag, s + """");
    }"
1391,log,"    public static void log(String tag, int s) {
        android.util.Log.d(tag, s + """");
    }"
1392,log,"    public static void log(String tag, String s) {
        android.util.Log.d(tag, s);
    }"
1393,remove,"        public void remove() {
            itr.remove();
        }"
1394,next,"        public E next() {
            return itr.previous();
        }"
1395,hasNext,"        public boolean hasNext() {
            return itr.hasPrevious();
        }"
1396,set,"        public void set(E e) {
            if (lastReturned == header)
                throw new IllegalStateException();
            lastReturned.element = e;"
1397,remove,"        public void remove() {
            Entry<E> lastNext = lastReturned.next;
            try {
                ConcurrentModifiableLinkedList.this.remove(lastReturned);
            } catch (NoSuchElementException e) {
                throw new IllegalStateException();"
1398,previousIndex,"        public int previousIndex() {
            return nextIndex - 1;
        }"
1399,previous,"        public E previous() {
            if (nextIndex == 0)
                throw new NoSuchElementException();

            lastReturned = next = next.previous;
            nextIndex--;"
1400,nextIndex,"        public int nextIndex() {
            return nextIndex;
        }"
1401,next,"        public E next() {
            if (nextIndex == size)
                throw new NoSuchElementException();

            lastReturned = next;
            next = next.next;
            nextIndex++;"
1402,hasPrevious,"        public boolean hasPrevious() {
            return nextIndex != 0;
        }"
1403,hasNext,"        public boolean hasNext() {
            return nextIndex != size;
        }"
1404,add,"        public void add(E e) {
            lastReturned = header;
            addBefore(e, next);
            nextIndex++;
        }"
1408,descendingIterator,"    public Iterator<E> descendingIterator() {
        return new DescendingIterator();
    }"
1409,remove,"    private E remove(Entry<E> e) {
        if (e == header)
            throw new NoSuchElementException();

        E result = e.element;
        e.previous.next = e.next;
        e.next.previous = e.previous;
        e.next = e.previous = null;
        e.element = null;
        size--;
        modCount++;"
1410,addBefore,"    private Entry<E> addBefore(E e, Entry<E> entry) {
        Entry<E> newEntry = new Entry<E>(e, entry, entry.previous);
        newEntry.previous.next = newEntry;
        newEntry.next.previous = newEntry;
        size++;
        modCount++;
        return newEntry;
    }"
1411,removeLastOccurrence,"    public boolean removeLastOccurrence(Object o) {
        if (o == null) {
            for (Entry<E> e = header.previous; e != header; e = e.previous) {
                if (e.element == null) {"
1412,removeFirstOccurrence,"    public boolean removeFirstOccurrence(Object o) {
        return remove(o);
    }"
1413,pop,"    public E pop() {
        return removeFirst();
    }"
1414,push,"    public void push(E e) {
        addFirst(e);
    }"
1415,pollLast,"    public E pollLast() {
        if (size == 0)
            return null;
        return removeLast();"
1416,pollFirst,"    public E pollFirst() {
        if (size == 0)
            return null;
        return removeFirst();"
1417,peekLast,"    public E peekLast() {
        if (size == 0)
            return null;
        return getLast();"
1418,peekFirst,"    public E peekFirst() {
        if (size == 0)
            return null;
        return getFirst();"
1419,offerLast,"    public boolean offerLast(E e) {
        addLast(e);
        return true;
    }"
1420,offerFirst,"    public boolean offerFirst(E e) {
        addFirst(e);
        return true;
    }"
1421,offer,"    public boolean offer(E e) {
        return add(e);
    }"
1422,remove,"    public E remove() {
        return removeFirst();
    }"
1423,poll,"    public E poll() {
        if (size == 0)
            return null;
        return removeFirst();"
1424,element,"    public E element() {
        return getFirst();
    }"
1425,peek,"    public E peek() {
        if (size == 0)
            return null;
        return getFirst();"
1426,entry,"    private Entry<E> entry(int index) {
        if (index < 0 || index >= size)
            throw new IndexOutOfBoundsException(""Index: "" + index +
                    "", Size: "" + size);
        Entry<E> e = header;
        if (index < (size >> 1)) {"
1427,set,"    public E set(int index, E element) {
        Entry<E> e = entry(index);
        E oldVal = e.element;
        e.element = element;
        return oldVal;
    }"
1428,remove,"    public E remove(int index) {
        return remove(entry(index));
    }"
1429,listIterator,"    public ListIterator<E> listIterator(int index) {
        return new ListItr(index);
    }"
1430,get,"    public E get(int index) {
        return entry(index).element;
    }"
1432,add,"    public void add(int index, E element) {
        addBefore(element, (index == size ? header : entry(index)));
    }"
1433,toArray,"    public <T> T[] toArray(T[] a) {
        if (a.length < size)
            a = (T[]) java.lang.reflect.Array.newInstance(
                    a.getClass().getComponentType(), size);
        int i = 0;
        Object[] result = a;
        for (Entry<E> e = header.next; e != header; e = e.next)
            result[i++] = e.element;"
1434,toArray,"    public Object[] toArray() {
        Object[] result = new Object[size];
        int i = 0;
        for (Entry<E> e = header.next; e != header; e = e.next)
            result[i++] = e.element;
        return result;"
1435,size,"    public int size() {
        return size;
    }"
1436,remove,"    public boolean remove(Object o) {
        if (o == null) {
            for (Entry<E> e = header.next; e != header; e = e.next) {
                if (e.element == null) {"
1437,contains,"    public boolean contains(Object o) {
        return indexOf(o) != -1;
    }"
1438,addAll,"    public boolean addAll(Collection<? extends E> c) {
        return addAll(size, c);
    }"
1439,lastIndexOf,"    public int lastIndexOf(Object o) {
        int index = size;
        if (o == null) {
            for (Entry e = header.previous; e != header; e = e.previous) {
                index--;"
1440,indexOf,"    public int indexOf(Object o) {
        int index = 0;
        if (o == null) {
            for (Entry e = header.next; e != header; e = e.next) {
                if (e.element == null)"
1441,clear,"    public void clear() {
        Entry<E> e = header.next;
        while (e != header) {
            Entry<E> next = e.next;
            e.next = e.previous = null;
            e.element = null;
            e = next;"
1442,add,"    public boolean add(E e) {
        addBefore(e, header);
        return true;
    }"
1443,addLast,"    public void addLast(E e) {
        addBefore(e, header);
    }"
1444,addFirst,"    public void addFirst(E e) {
        addBefore(e, header.next);
    }"
1445,removeLast,"    public E removeLast() {
        return remove(header.previous);
    }"
1446,removeFirst,"    public E removeFirst() {
        return remove(header.next);
    }"
1451,onTagsChanged,"    public void onTagsChanged(Collection<String> tags) {
        Log.d(TAG, ""Tags changed: "");
        Log.d(TAG, Arrays.toString(tags.toArray()));
    }"
1453,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        if (hasFocus) {
            mTagsEditText.showDropDown();"
1458,willChangeBounds,"        public boolean willChangeBounds() {
            return true;
        }"
1459,applyTransformation,"        protected void applyTransformation(float interpolatedTime, Transformation t) {
            mView.getLayoutParams().width = mStartWidth + (int) ((mWidth - mStartWidth) * interpolatedTime);
            mView.requestLayout();
        }"
1460,unSelect,"    public void unSelect(boolean setActiveColor, int animationDuration) {
        super.unSelect(setActiveColor, animationDuration);

        ResizeWidthAnimation anim = new ResizeWidthAnimation(this, mInActiveWidth);
        anim.setDuration(animationDuration);
        this.startAnimation(anim);
"
1461,select,"    public void select(boolean setActiveColor, int animationDuration) {
        super.select(setActiveColor, animationDuration);

        ResizeWidthAnimation anim = new ResizeWidthAnimation(this, mActiveWidth);
        anim.setDuration(animationDuration);
        this.startAnimation(anim);
"
1464,convert,"    protected void convert(BaseViewHolder holder, final CatagoryInfoVo catagoryInfoVo, int position, List payloads) {
        ImageView categroyIcon = holder.getView(R.id.iv_classify);
        TextView categroyName = holder.getView(R.id.tv_classify);
        Glide.with(getContext())
                .load(catagoryInfoVo.resId)
                .into(categroyIcon);"
1465,unSelect,"    public void unSelect(boolean setActiveColor, int animationDuration) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
                labelView.animate().scaleX(labelScale).scaleY(labelScale).setDuration(animationDuration).start();
            }"
1466,select,"    public void select(boolean setActiveColor, int animationDuration) {

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
                labelView.animate().scaleX(1).scaleY(1).setDuration(animationDuration).start();"
1468,initialise,"    public void initialise(boolean setActiveColor) {
        iconView.setSelected(false);
        if (isInActiveIconSet) {
            StateListDrawable states = new StateListDrawable();"
1469,onAnimationUpdate,"                public void onAnimationUpdate(ValueAnimator valueAnimator) {
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        containerView.setPadding(containerView.getPaddingLeft(),"
1470,unSelect,"    public void unSelect(boolean setActiveColor, int animationDuration) {
        isActive = false;

        ValueAnimator animator = null;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
            animator = ValueAnimator.ofInt(containerView.getPaddingTop(), paddingTopInActive);
            animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                @Override"
1472,select,"    public void select(boolean setActiveColor, int animationDuration) {
        isActive = true;

        ValueAnimator animator = null;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
            animator = ValueAnimator.ofInt(containerView.getPaddingTop(), paddingTopActive);
            animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                @Override"
1485,init,"    void init() {
        setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
    }"
1489,isInActiveIconAvailable,"    protected boolean isInActiveIconAvailable() {
        return inActiveIconAvailable;
    }"
1502,onCancel,"                private void onCancel() {
                    backgroundView.setBackgroundColor(newColor);
                    bgOverlay.setVisibility(View.GONE);
                }"
1503,onAnimationCancel,"                public void onAnimationCancel(Animator animation) {
                    onCancel();
                }"
1504,onAnimationEnd,"                public void onAnimationEnd(Animator animation) {
                    onCancel();
                }"
1511,onTabReselected,"        public void onTabReselected(int position) {
        }"
1512,onTabUnselected,"        public void onTabUnselected(int position) {
        }"
1513,onTabSelected,"        public void onTabSelected(int position) {
        }"
1514,onTabReselected,"        void onTabReselected(int position);
    }"
1525,isAutoHideEnabled,"    public boolean isAutoHideEnabled() {
        return mAutoHideEnabled;
    }"
1526,isHidden,"    public boolean isHidden() {
        return mIsHidden;
    }"
1527,animateOffset,"    private void animateOffset(final int offset) {
        if (mTranslationAnimator == null) {
            mTranslationAnimator = ViewCompat.animate(this);
            mTranslationAnimator.setDuration(mRippleAnimationDuration);"
1529,show,"    public void show(boolean animate) {
        mIsHidden = false;
        setTranslationY(0, animate);
    }"
1530,show,"    public void show() {
        show(true);
    }"
1531,hide,"    public void hide(boolean animate) {
        mIsHidden = true;
        setTranslationY(this.getHeight(), animate);
    }"
1532,hide,"    public void hide() {
        hide(true);
    }"
1533,toggle,"    public void toggle(boolean animate) {
        if (mIsHidden) {
            show(animate);"
1534,toggle,"    public void toggle() {
        toggle(true);
    }"
1537,selectTabInternal,"    private void selectTabInternal(int newPosition, boolean firstTab, boolean callListener, boolean forcedSelection) {
        int oldPosition = mSelectedPosition;
        if (mSelectedPosition != newPosition) {
            if (mBackgroundStyle == BACKGROUND_STYLE_STATIC) {
                if (mSelectedPosition != -1)"
1538,onClick,"            public void onClick(View v) {
                BottomNavigationTab bottomNavigationTabView = (BottomNavigationTab) v;
                selectTabInternal(bottomNavigationTabView.getPosition(), false, true, false);
            }"
1540,selectTab,"    public void selectTab(int newPosition, boolean callListener) {
        selectTabInternal(newPosition, false, callListener, callListener);
    }"
1541,selectTab,"    public void selectTab(int newPosition) {
        selectTab(newPosition, true);
    }"
1542,clearAll,"    public void clearAll() {
        mTabContainer.removeAllViews();
        mBottomNavigationTabs.clear();
        mBottomNavigationItems.clear();
        mBackgroundOverlay.setVisibility(View.GONE);
        mContainer.setBackgroundColor(Color.TRANSPARENT);
        mSelectedPosition = DEFAULT_SELECTED_POSITION;
    }"
1545,initialise,"    public void initialise() {
        mSelectedPosition = DEFAULT_SELECTED_POSITION;
        mBottomNavigationTabs.clear();

        if (!mBottomNavigationItems.isEmpty()) {"
1556,removeItem,"    public BottomNavigationBar removeItem(BottomNavigationItem item) {
        mBottomNavigationItems.remove(item);
        return this;
    }"
1557,addItem,"    public BottomNavigationBar addItem(BottomNavigationItem item) {
        mBottomNavigationItems.add(item);
        return this;
    }"
1559,parseAttrs,"    private void parseAttrs(Context context, AttributeSet attrs) {
        if (attrs != null) {
            TypedArray typedArray = context.getTheme().obtainStyledAttributes(attrs, R.styleable.BottomNavigationBar, 0, 0);"
1561,createFragments,"    protected abstract List<BaseFragment> createFragments();
"
1562,createPageTitle,"    protected abstract String[] createPageTitle();
"
1564,initView,"    public void initView(Bundle state) {
        super.initView(state);
        loadManager.showStateView(LoadingState.class);
        mTabLayout = getViewById(R.id.tab_layout);
        mViewPager = getViewById(R.id.view_pager);
        mTitleBar = getViewById(R.id.rl_title_bar);
        mTitle = getViewById(R.id.tv_title);
        mTitles = new ArrayList<>();
        mFragments = new ArrayList<>();
    }"
1568,onItemLongClickListener,"        void onItemLongClickListener(View v, int position);
    }"
1569,onItemClickListener,"        void onItemClickListener(View v, int position);
    }"
1573,convert,"    protected abstract void convert(BaseViewHolder holder, T t, int position, List<Object> payloads);
"
1574,onLongClick,"            public boolean onLongClick(View v) {
                if (onItemLongClickListener != null) {
                    onItemLongClickListener.onItemLongClickListener(v, position);
                }"
1575,onClick,"            public void onClick(View v) {
                if (onItemClickListener != null) {
                    onItemClickListener.onItemClickListener(v, position);"
1577,onBindViewHolder,"    public void onBindViewHolder(BaseViewHolder holder, final int position, List<Object> payloads) {
        if (payloads.isEmpty()) {
            onBindViewHolder(holder, position);"
1578,onCreateViewHolder,"    public BaseViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = layoutInflater.inflate(mItemLayoutId, parent, false);
        return new BaseViewHolder(view);
"
1582,onScrollStateChanged,"        public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
            super.onScrollStateChanged(recyclerView, newState);
            if (newState == RecyclerView.SCROLL_STATE_IDLE) {
                if (activity != null) {"
1583,onRefresh,"    public void onRefresh(boolean isRefresh) {
        this.isRefresh = isRefresh;
        lastId = null;
        getRemoteData();
    }"
1584,onLoadMore,"    public void onLoadMore(boolean isLoadMore, int pageIndex) {
        this.isLoadMore = isLoadMore;
    }"
1586,createLayoutManager,"    protected abstract RecyclerView.LayoutManager createLayoutManager();
"
1587,createAdapter,"    protected abstract DelegateAdapter createAdapter();
"
1591,onStateRefresh,"    protected void onStateRefresh() {
        super.onStateRefresh();
    }"
1592,lazyLoad,"    protected void lazyLoad() {
        getRemoteData();
    }"
1597,onAnimationCancel,"                    public void onAnimationCancel(View view) {
                        view.setVisibility(View.GONE);
                    }"
1598,onAnimationEnd,"                    public void onAnimationEnd(View view) {
                        view.setVisibility(View.GONE);
                    }"
1600,hide,"    public BadgeItem hide(boolean animate) {
        mIsHidden = true;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            if (animate) {"
1601,hide,"    public BadgeItem hide() {
        return hide(true);
    }"
1602,show,"    public BadgeItem show(boolean animate) {
        mIsHidden = false;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            if (animate) {"
1603,show,"    public BadgeItem show() {
        return show(true);
    }"
1604,toggle,"    public BadgeItem toggle(boolean animate) {
        if (mIsHidden) {
            return show(animate);"
1605,toggle,"    public BadgeItem toggle() {
        return toggle(true);
    }"
1606,unSelect,"    void unSelect() {
        if (mHideOnSelect) {
            show(true);"
1607,select,"    void select() {
        if (mHideOnSelect) {
            hide(true);"
1608,isWeakReferenceValid,"    private boolean isWeakReferenceValid() {
        return mTextViewRef != null && mTextViewRef.get() != null;
    }"
1610,refreshDrawable,"    private void refreshDrawable() {
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();"
1612,isHideOnSelect,"    protected boolean isHideOnSelect() {
        return mHideOnSelect;
    }"
1634,onPageScrolled,"			public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
				mPagerPosition = position;
				mPagerOffsetPixels = positionOffsetPixels;
			}"
1635,isViewDraggable,"					public boolean isViewDraggable(View v, int dx,
							int x, int y) {
						if (v == mViewPager) {
							return !(mPagerPosition == 0 && mPagerOffsetPixels == 0)"
1636,onCreate,"	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		SwipeBack.attach(this, Position.LEFT)
		.setContentView(R.layout.activity_view_pager)
		.setSwipeBackView(R.layout.swipeback_default)
		.setDividerAsSolidColor(Color.WHITE)
		.setDividerSize(2)"
1642,onDraw,"    protected void onDraw(Canvas canvas){
        TextPaint textPaint = getPaint();
        textPaint.setColor(getCurrentTextColor());
        textPaint.drawableState = getDrawableState();

        canvas.save();

        if(topDown){
            canvas.translate(getWidth(), 0);
            canvas.rotate(90);"
1643,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec){
        super.onMeasure(heightMeasureSpec, widthMeasureSpec);
        setMeasuredDimension(getMeasuredHeight(), getMeasuredWidth());
    }"
1644,onSwiping,"	public void onSwiping(SwipeBack swipeBack, float openRatio, int pixelOffset);
"
1645,onSwipeBackReseted,"	public void onSwipeBackReseted(SwipeBack swipeBack, Activity activity);
"
1646,onSwipeBackCompleted,"	public void onSwipeBackCompleted(SwipeBack swipeBack, Activity activity);
"
1647,onSwipeBackViewCreated,"	public void onSwipeBackViewCreated(SwipeBack swipeBack, Activity activity, View swipeBackView);
"
1648,dispatchOnDrawerSlide,"	protected void dispatchOnDrawerSlide(float openRatio, int offsetPixels) {
		if (mOnStateChangeListener != null) {
			mOnStateChangeListener.onSlide(openRatio, offsetPixels);"
1649,fitSystemWindows,"	protected boolean fitSystemWindows(Rect insets) {
		if (mDragMode == DRAG_WINDOW && mPosition != Position.BOTTOM) {
			mSwipeBackContainer.setPadding(0, insets.top, 0, 0);
		}"
1650,postOnAnimation,"	public void postOnAnimation(Runnable action) {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
			super.postOnAnimation(action);"
1656,setTouchBezelSize,"	public abstract SwipeBack setTouchBezelSize(int size);
"
1657,setTouchMode,"	public abstract SwipeBack setTouchMode(int mode);
"
1659,logDrawerState,"	protected SwipeBack logDrawerState(int state) {
		switch (state) {
		case STATE_CLOSED:
			Log.d(TAG, ""[DrawerState] STATE_CLOSED"");"
1665,notifySwipeBackViewCreated,"	private void notifySwipeBackViewCreated(View view) {

		if (mSwipeBackTransformer != null) {"
1674,setHardwareLayerEnabled,"	public abstract SwipeBack setHardwareLayerEnabled(boolean enabled);
"
1675,peekSwipeBack,"	public abstract SwipeBack peekSwipeBack(long startDelay, long delay);
"
1676,peekSwipeBack,"	public abstract SwipeBack peekSwipeBack(long delay);
"
1689,getOffsetSwipeBackEnabled,"	public abstract boolean getOffsetSwipeBackEnabled();
"
1690,setOffsetSwipeBackViewEnabled,"	public abstract void setOffsetSwipeBackViewEnabled(boolean offsetEnabled);
"
1691,updateTouchAreaSize,"	protected void updateTouchAreaSize() {
		if (mTouchMode == TOUCH_MODE_BEZEL) {
			mTouchSize = mTouchBezelSize;"
1692,onScrollChanged,"		public void onScrollChanged() {
			if (mActiveView != null && isViewDescendant(mActiveView)) {
				mActiveView.getDrawingRect(mTempRect);"
1696,close,"	public abstract SwipeBack close(boolean animate);
"
1697,close,"	public SwipeBack close() {
		return close(true);
	}"
1701,open,"	public abstract SwipeBack open(boolean animate);
"
1702,open,"	public SwipeBack open() {
		return open(true);
	}"
1703,toggle,"	public abstract SwipeBack toggle(boolean animate);
"
1704,toggle,"	public SwipeBack toggle() {
		return toggle(true);
	}"
1705,onOffsetPixelsChanged,"	protected abstract void onOffsetPixelsChanged(int offsetPixels);
"
1707,onRtlPropertiesChanged,"	public void onRtlPropertiesChanged(int layoutDirection) {
		super.onRtlPropertiesChanged(layoutDirection);

		if (!mCustomDivider) {
			setDividerAsShadowColor(mDividerAsShadowColor);
		}
"
1713,drawOverlay,"	protected abstract void drawOverlay(Canvas canvas);
"
1714,dispatchDraw,"	protected void dispatchDraw(Canvas canvas) {
		super.dispatchDraw(canvas);
		final int offsetPixels = (int) mOffsetPixels;

		if (mDrawOverlay && offsetPixels != 0) {
			drawOverlay(canvas);"
1715,onDetachedFromWindow,"	protected void onDetachedFromWindow() {
		Log.d(TAG, ""detach from window"");
		getViewTreeObserver().removeOnScrollChangedListener(mScrollListener);
		super.onDetachedFromWindow();
	}"
1716,onAttachedToWindow,"	protected void onAttachedToWindow() {
		super.onAttachedToWindow();
		getViewTreeObserver().addOnScrollChangedListener(mScrollListener);
	}"
1717,isViewDescendant,"	protected boolean isViewDescendant(View v) {
		ViewParent parent = v.getParent();
		while (parent != null) {
			if (parent == this) {
				return true;"
1718,dpToPx,"	public int dpToPx(int dp) {
		return (int) (getResources().getDisplayMetrics().density * dp + 0.5f);
	}"
1719,onFinishInflate,"	protected void onFinishInflate() {
		super.onFinishInflate();
		View swipeBackView = findViewById(R.id.sbSwipeBackView);
		if (swipeBackView != null) {
			removeView(swipeBackView);
			setSwipeBackView(swipeBackView);
		}
"
1721,attachToDecor,"	private static void attachToDecor(Activity activity, SwipeBack swipeBack) {
		ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();
		ViewGroup decorChild = (ViewGroup) decorView.getChildAt(0);

		decorView.removeAllViews();
		decorView.addView(swipeBack, LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
"
1722,attachToContent,"	private static void attachToContent(Activity activity, SwipeBack swipeBack) {
		/**
		 * Do not call mActivity#setContentView.
		 * E.g. if using with a ListActivity, Activity#setContentView is overridden and dispatched to
		 * SwipeBack#setContentView, which then again would call Activity#setContentView."
1723,onSlide,"			public void onSlide(float openRatio, int offsetPixels) {

				if (!isActivitiyDestroyed()) {"
1724,onStateChanged,"			public void onStateChanged(int oldState, int newState) {

				if (!isActivitiyDestroyed()) {"
1725,initSwipeListener,"	private void initSwipeListener() {
		mOnStateChangeListener = new OnStateChangeListener() {
"
1726,isActivitiyDestroyed,"	protected boolean isActivitiyDestroyed() {

		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {"
1727,createSwipeBack,"	private static SwipeBack createSwipeBack(Activity activity, int dragMode, Position position, Type type, SwipeBackTransformer transformer) {

		SwipeBack drawerHelper;

		if (type == Type.OVERLAY) {
			drawerHelper = new OverlaySwipeBack(activity, dragMode);


		} else {
			drawerHelper = new SlidingSwipeBack(activity, dragMode);"
1728,attach,"	public static SwipeBack attach(Activity activity, Type type, Position position, int dragMode, SwipeBackTransformer transformer) {

		SwipeBack swipeBack = createSwipeBack(activity, dragMode, position, type, transformer);
		swipeBack.setId(R.id.sb__swipeBack);

"
1729,attach,"	public static SwipeBack attach(Activity activity, Type type,
			Position position) {
		return attach(activity, type, position, DRAG_WINDOW);"
1730,attach,"	public static SwipeBack attach(Activity activity, Type type,
			Position position, int dragMode) {
		return attach(activity, type, position, dragMode,"
1731,attach,"	public static SwipeBack attach(Activity activity, Type type, Position position, SwipeBackTransformer transformer) {
		return attach(activity, type, position, DRAG_WINDOW, transformer);
	}"
1732,attach,"	public static SwipeBack attach(Activity activity, Position position) {
		return attach(activity, Type.BEHIND, position);
	}"
1733,attach,"	public static SwipeBack attach(Activity activity, Position position, SwipeBackTransformer transformer) {
		return attach(activity, Type.BEHIND, position, transformer);
	}"
1734,attach,"	public static SwipeBack attach(Activity activity, Type type, SwipeBackTransformer transformer) {
		return attach(activity, type, Position.START);
	}"
1735,attach,"	public static SwipeBack attach(Activity activity, Type type) {
		return attach(activity, type, Position.START);
	}"
1736,attach,"	public static SwipeBack attach(Activity activity, SwipeBackTransformer transformer) {
		return attach(activity, Type.BEHIND, transformer);
	}"
1737,attach,"	public static SwipeBack attach(Activity activity) {
		return attach(activity, Type.BEHIND);
	}"
1738,isViewDraggable,"		boolean isViewDraggable(View v, int delta, int x, int y);
	}"
1739,onSlide,"		void onSlide(float openRatio, int offsetPixels);
	}"
1740,onStateChanged,"		void onStateChanged(int oldState, int newState);
"
1742,onPointerUp,"	 private void onPointerUp(MotionEvent ev) {
		 final int pointerIndex = ev.getActionIndex();
		 final int pointerId = ev.getPointerId(pointerIndex);
		 if (pointerId == mActivePointerId) {
			 final int newPointerIndex = pointerIndex == 0 ? 1 : 0;"
1743,onTouchEvent,"	 public boolean onTouchEvent(MotionEvent ev) {
		 if (!mSwipeBackViewVisible && !mIsDragging && mTouchMode == TOUCH_MODE_NONE) {
			 return false;
		 }
		 final int action = ev.getAction() & MotionEvent.ACTION_MASK;

		 if (mVelocityTracker == null) {
			 mVelocityTracker = VelocityTracker.obtain();"
1752,offsetMenu,"	private void offsetMenu(int offsetPixels) {
		 if (!mOffsetMenu || mSwipeBackViewSize == 0) {
			 return;
		 }

		 final int width = getWidth();
		 final int height = getHeight();

		 final int menuSize = mSwipeBackViewSize;
		 final int sign = (int) (mOffsetPixels / Math.abs(mOffsetPixels));"
1753,onLayout,"	protected void onLayout(boolean changed, int l, int t, int r, int b) {
		final int width = r - l;
		final int height = b - t;

		if (USE_TRANSLATIONS) {
			mContentContainer.layout(0, 0, width, height);"
1755,onSizeChanged,"	protected void onSizeChanged(int w, int h, int oldw, int oldh) {
		super.onSizeChanged(w, h, oldw, oldh);
		onOffsetPixelsChanged((int) mOffsetPixels);
	}"
1758,close,"	public SwipeBack close(boolean animate) {
		animateOffsetTo(0, 0, animate);
		return this;
	}"
1760,init,"	protected void init(Context context, AttributeSet attrs, int defStyle) {
		super.init(context, attrs, defStyle);
		super.addView(mSwipeBackContainer, -1, new LayoutParams(
				LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
		super.addView(mContentContainer, -1, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));"
1763,onSwipeBackCompleted,"	public void onSwipeBackCompleted(SwipeBack swipeBack, Activity activity){
		activity.finish();
		activity.overridePendingTransition(R.anim.swipeback_slide_left_in, R.anim.swipeback_slide_right_out);
	}"
1764,onSwipeBackViewCreated,"	public void onSwipeBackViewCreated(SwipeBack swipeBack, Activity activity,
			final View swipeBackView) {

		arrowTop = swipeBackView.findViewById(R.id.arrowTop);
		arrowBottom = swipeBackView.findViewById(R.id.arrowBottom);
		textView = (TextView) swipeBackView.findViewById(R.id.text);"
1765,unscheduleDrawable,"    public void unscheduleDrawable(Drawable who, Runnable what) {
        if (who == mWrapped) {
            unscheduleSelf(what);"
1766,scheduleDrawable,"    public void scheduleDrawable(Drawable who, Runnable what, long when) {
        if (who == mWrapped) {
            scheduleSelf(what, when);"
1767,invalidateDrawable,"    public void invalidateDrawable(Drawable who) {
        if (who == mWrapped) {
            invalidateSelf();"
1774,onBoundsChange,"    protected void onBoundsChange(Rect bounds) {
        super.onBoundsChange(bounds);
        mWrapped.setBounds(bounds);
    }"
1775,onStateChange,"    protected boolean onStateChange(int[] state) {
        mWrapped.setState(state);
        return super.onStateChange(state);
    }"
1782,isStateful,"    public boolean isStateful() {
        return mWrapped.isStateful();
    }"
1783,clearColorFilter,"    public void clearColorFilter() {
        mWrapped.clearColorFilter();
    }"
1791,draw,"    public void draw(Canvas canvas) {
        mWrapped.copyBounds(mTmpRect);
        canvas.save();
        if (mIsRtl) {
            canvas.translate(1.f / 3 * mTmpRect.width() * mOffset, 0);
        } else {
            canvas.translate(1.f / 3 * mTmpRect.width() * -mOffset, 0);"
1796,onCreateView,"	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {

		View v = inflater.inflate(R.layout.fragment_simple, container, false);

		textView = (TextView) v.findViewById(R.id.textView);
"
1797,newInstance,"	public static SimpleFragment newInstance(String text, int backgroundColor) {
		SimpleFragment f = new SimpleFragment();
		f.text = text;
		f.backgroundColor = backgroundColor;
		return f;
	}"
1798,isScrollingInDirection,"    public boolean isScrollingInDirection(float xvel, float yvel) {
        return !mFinished && Math.signum(xvel) == Math.signum(mFinalX - mStartX)
                && Math.signum(yvel) == Math.signum(mFinalY - mStartY);"
1801,timePassed,"    public int timePassed() {
        return (int) (AnimationUtils.currentAnimationTimeMillis() - mStartTime);
    }"
1802,extendDuration,"    public void extendDuration(int extend) {
        int passed = timePassed();
        mDuration = passed + extend;
        mDurationReciprocal = 1.0f / mDuration;
        mFinished = false;
    }"
1803,abortAnimation,"    public void abortAnimation() {
        mCurrX = mFinalX;
        mCurrY = mFinalY;
        mFinished = true;
    }"
1807,startScroll,"    public void startScroll(int startX, int startY, int dx, int dy) {
        startScroll(startX, startY, dx, dy, DEFAULT_DURATION);
    }"
1808,computeScrollOffset,"    public boolean computeScrollOffset() {
        if (mFinished) {
            return false;
        }

        int timePassed = (int) (AnimationUtils.currentAnimationTimeMillis() - mStartTime);"
1817,forceFinished,"    public final void forceFinished(boolean finished) {
        mFinished = finished;
    }"
1818,isFinished,"    public final boolean isFinished() {
        return mFinished;
    }"
1821,fromValue,"    public static Position fromValue(int value) {
        return STRING_MAPPING.get(value);
    }"
1823,onPointerUp,"  private void onPointerUp(MotionEvent ev) {
    final int pointerIndex = ev.getActionIndex();
    final int pointerId = ev.getPointerId(pointerIndex);
    if (pointerId == mActivePointerId) {
      final int newPointerIndex = pointerIndex == 0 ? 1 : 0;"
1824,onTouchEvent,"  @Override public boolean onTouchEvent(MotionEvent ev) {
    if (!mSwipeBackViewVisible && !mIsDragging && mTouchMode == TOUCH_MODE_NONE) {
      return false;
    }
    final int action = ev.getAction() & MotionEvent.ACTION_MASK;

    if (mVelocityTracker == null) {
      mVelocityTracker = VelocityTracker.obtain();"
1826,stopAnimation,"  @Override protected void stopAnimation() {
    super.stopAnimation();
    removeCallbacks(mRevealRunnable);
  }"
1830,onMoveAllowDrag,"  protected boolean onMoveAllowDrag(int x, int y, float dx, float dy) {
    if (mSwipeBackViewVisible && mTouchMode == TOUCH_MODE_FULLSCREEN) {
      return true;
    }
"
1834,onLayout,"  @Override protected void onLayout(boolean changed, int l, int t, int r, int b) {
    final int width = r - l;
    final int height = b - t;

    mContentContainer.layout(0, 0, width, height);
"
1835,stopLayerTranslation,"  @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override protected void stopLayerTranslation() {
    if (mLayerTypeHardware) {
      mLayerTypeHardware = false;"
1836,startLayerTranslation,"  @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override protected void startLayerTranslation() {
    if (USE_TRANSLATIONS && mHardwareLayersEnabled && !mLayerTypeHardware) {
      mLayerTypeHardware = true;"
1839,onSizeChanged,"  @Override protected void onSizeChanged(int w, int h, int oldw, int oldh) {
    super.onSizeChanged(w, h, oldw, oldh);
    onOffsetPixelsChanged((int) mOffsetPixels);
  }"
1842,close,"  @Override public SwipeBack close(boolean animate) {
    animateOffsetTo(0, 0, animate);
    return this;
  }"
1845,init,"  protected void init(Context context, AttributeSet attrs, int defStyle) {
    super.init(context, attrs, defStyle);
    super.addView(mContentContainer, -1,
        new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
    if (USE_TRANSLATIONS) {
      mContentContainer.setLayerType(View.LAYER_TYPE_NONE, null);
    }
    mContentContainer.setHardwareLayersEnabled(false);"
1847,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        return true;
    }"
1853,abortAnimation,"    public void abortAnimation() {
        mCurr = mFinal;
        mFinished = true;
    }"
1854,startScroll,"    public void startScroll(float start, float delta, int duration) {
        mFinished = false;
        mDuration = duration;
        mStartTime = AnimationUtils.currentAnimationTimeMillis();
        mStart = start;
        mFinal = start + delta;
        mDeltaX = delta;
        mDurationReciprocal = 1.0f / (float) mDuration;
    }"
1862,safeGetY,"	protected float safeGetY(MotionEvent ev) {
		try {
			return ev.getY(ev.findPointerIndex(mActivePointerId));"
1863,safeGetX,"	protected float safeGetX(MotionEvent ev) {
		try {
			return ev.getX(ev.findPointerIndex(mActivePointerId));"
1864,supportGetTranslationX,"	private int supportGetTranslationX(View v) {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			return (int) v.getTranslationX();
		}"
1865,supportGetTranslationY,"	private int supportGetTranslationY(View v) {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			return (int) v.getTranslationY();
		}"
1868,canChildScrollVertically,"	protected boolean canChildScrollVertically(View v, boolean checkV, int dx, int x, int y) {
		if (v instanceof ViewGroup) {
			final ViewGroup group = (ViewGroup) v;
"
1869,canChildScrollHorizontally,"	protected boolean canChildScrollHorizontally(View v, boolean checkV, int dx, int x, int y) {
		if (v instanceof ViewGroup) {
			final ViewGroup group = (ViewGroup) v;
"
1871,isCloseEnough,"	protected boolean isCloseEnough() {
		return Math.abs(mOffsetPixels) <= mCloseEnough;
	}"
1872,endPeek,"	protected void endPeek() {
		removeCallbacks(mPeekStartRunnable);
		removeCallbacks(mPeekRunnable);
		stopLayerTranslation();
	}"
1873,completePeek,"	private void completePeek() {
		mPeekScroller.abortAnimation();

		setOffsetPixels(0);

		setDrawerState(STATE_CLOSED);"
1874,run,"					public void run() {
						startPeek();
					}"
1875,peekDrawerInvalidate,"	private void peekDrawerInvalidate() {
		if (mPeekScroller.computeScrollOffset()) {
			final int oldX = (int) mOffsetPixels;
			final int x = mPeekScroller.getCurrX();"
1877,startPeek,"	protected void startPeek() {
		initPeekScroller();

		startLayerTranslation();
		peekDrawerInvalidate();"
1878,postAnimationInvalidate,"	private void postAnimationInvalidate() {
		if (mScroller.computeScrollOffset()) {
			final int oldX = (int) mOffsetPixels;
			final int x = mScroller.getCurrX();"
1879,animateOffsetTo,"	protected void animateOffsetTo(int position, int duration) {
		final int startX = (int) mOffsetPixels;
		final int dx = position - startX;

		if (dx > 0) {
			setDrawerState(STATE_OPENING);
			mScroller.startScroll(startX, 0, dx, 0, duration);"
1880,animateOffsetTo,"	protected void animateOffsetTo(int position, int velocity, boolean animate) {
		endDrag();
		endPeek();

		final int startX = (int) mOffsetPixels;
		final int dx = position - startX;
		if (dx == 0 || !animate) {
			setOffsetPixels(position);
			setDrawerState(position == 0 ? STATE_CLOSED : STATE_OPEN);
			stopLayerTranslation();
			return;
		}"
1881,cancelContentTouch,"	protected void cancelContentTouch() {
		final long now = SystemClock.uptimeMillis();
		final MotionEvent cancelEvent = MotionEvent.obtain(now, now, MotionEvent.ACTION_CANCEL, 0.0f, 0.0f, 0);
		final int childCount = getChildCount();
		for (int i = 0; i < childCount; i++) {
			getChildAt(i).dispatchTouchEvent(cancelEvent);
		}
		mContentContainer.dispatchTouchEvent(cancelEvent);"
1882,completeAnimation,"	private void completeAnimation() {
		mScroller.abortAnimation();
		final int finalX = mScroller.getFinalX();
		setOffsetPixels(finalX);
		setDrawerState(finalX == 0 ? STATE_CLOSED : STATE_OPEN);
		stopLayerTranslation();
	}"
1883,stopAnimation,"	protected void stopAnimation() {
		removeCallbacks(mDragRunnable);
		mScroller.abortAnimation();
		stopLayerTranslation();
	}"
1884,endDrag,"	protected void endDrag() {
		mIsDragging = false;

		if (mVelocityTracker != null) {"
1885,stopLayerTranslation,"	protected void stopLayerTranslation() {
		if (mLayerTypeHardware) {
			mLayerTypeHardware = false;"
1886,startLayerTranslation,"	protected void startLayerTranslation() {
		if (USE_TRANSLATIONS && mHardwareLayersEnabled && !mLayerTypeHardware) {
			mLayerTypeHardware = true;"
1893,peekSwipeBack,"	public SwipeBack peekSwipeBack(final long startDelay, final long delay) {
		if (startDelay < 0) {
			throw new IllegalArgumentException(""startDelay must be zero or larger."");
		}
		if (delay < 0) {
			throw new IllegalArgumentException(""delay must be zero or larger"");
		}

		removeCallbacks(mPeekRunnable);
		removeCallbacks(mPeekStartRunnable);"
1894,peekSwipeBack,"	public SwipeBack peekSwipeBack(long delay) {
		peekSwipeBack(DEFAULT_PEEK_START_DELAY, delay);
		return this;
	}"
1895,peekSwipeBack,"	public SwipeBack peekSwipeBack() {
		peekSwipeBack(DEFAULT_PEEK_START_DELAY, DEFAULT_PEEK_DELAY);
		return this;
	}"
1899,isVisible,"	public boolean isVisible() {
		return mSwipeBackViewVisible;
	}"
1900,toggle,"	public SwipeBack toggle(boolean animate) {
		if (mDrawerState == STATE_OPEN || mDrawerState == STATE_OPENING) {
			close(animate);
		} else if (mDrawerState == STATE_CLOSED || mDrawerState == STATE_CLOSING) {"
1902,run,"		public void run() {
			postAnimationInvalidate();
		}"
1903,run,"		public void run() {
			peekDrawerInvalidate();
		}"
1906,onSwipeBackCompleted,"	public void onSwipeBackCompleted(SwipeBack swipeBack, Activity activity) {
		activity.finish();
		activity.overridePendingTransition(R.anim.swipeback_stack_to_front,
				R.anim.swipeback_stack_right_out);"
1909,newDrawable,"        public Drawable newDrawable(Resources res) {
            return new ColorDrawable(this);
        }"
1910,newDrawable,"        public Drawable newDrawable() {
            return new ColorDrawable(this);
        }"
1918,draw,"    public void draw(Canvas canvas) {
        if ((mState.mUseColor >>> 24) != 0) {
            mPaint.setColor(mState.mUseColor);"
1920,run,"                public void run() {
                    if (mAttached) {
                        final int layerType = getLayerType();"
1921,dispatchDraw,"    protected void dispatchDraw(Canvas canvas) {
        super.dispatchDraw(canvas);

        if (mChanged && SwipeBack.USE_TRANSLATIONS) {"
1922,run,"                public void run() {
                    mChanged = true;
                    invalidate();
                }"
1923,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);

        if (SwipeBack.USE_TRANSLATIONS && mHardwareLayersEnabled) {"
1924,onDetachedFromWindow,"    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        mAttached = false;
    }"
1925,onAttachedToWindow,"    protected void onAttachedToWindow() {
        super.onAttachedToWindow();
        mAttached = true;
    }"
1927,onAnimationUpdate,"            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                lp.height = (Integer) valueAnimator.getAnimatedValue();
                mView.setLayoutParams(lp);
            }"
1930,onAnimationEnd,"                                public void onAnimationEnd(Animator animation) {
                                    performDismiss();
                                }"
1932,onDismiss,"        void onDismiss(View view, Object token);
    }"
1934,onAttachedToRecyclerView,"    public void onAttachedToRecyclerView(RecyclerView recyclerView) {
        super.onAttachedToRecyclerView(recyclerView);
    }"
1935,onClick,"            public void onClick(View v) {
                animationCardUp(cardViewHolder.card, cardViewHolder.toolbar, duration);
            }"
1936,onClick,"            public void onClick(View v) {
                animationCardDown(cardViewHolder.card, cardViewHolder.toolbar, duration);
            }"
1937,onClick,"                    public void onClick(View v) {
                        if (!back) {
                            cardViewHolder.creditCardView.showBack();"
1945,onFinish,"            public void onFinish() {
                card.animate()
                        .translationY(height - (card.getHeight() + toolbar.getHeight()))"
1946,onTick,"            public void onTick(long millisUntilFinished) {
            }"
1947,animationCardUp,"    public void animationCardUp(@NotNull final CardView card,  final Toolbar toolbar, final long duration){
        new CountDownTimer(1, 1) {
            public void onTick(long millisUntilFinished) {"
1948,onFinish,"            public void onFinish() {
                card.animate()
                        .translationY(height - ((int)(toolbar.getHeight() * 1.7)))"
1950,animationCardDown,"    public void animationCardDown(@NotNull final CardView card, @NotNull final Toolbar toolbar, final long duration){
        new CountDownTimer(1, 1) {
            public void onTick(long millisUntilFinished) {"
1951,onAnimationEnd,"                            public void onAnimationEnd(Animator animation) {
                                super.onAnimationEnd(animation);
                                card.setVisibility(View.VISIBLE);
                            }"
1952,onFinish,"            public void onFinish() {
                card.animate()
                        .translationY(height - ((int) (toolbar.getHeight() * 1.7)))"
1954,animationCardStart,"    public void animationCardStart(@NotNull final CardView card, @NotNull final Toolbar toolbar){
        new CountDownTimer(1, 1) {
            public void onTick(long millisUntilFinished) {"
1958,updateMapContents,"    protected void updateMapContents(OptionView mOptionView) {
        mGoogleMap.clear();
        if(mOptionView.isMultipleMarker() && !mOptionView.isSingleMarker()) {
            LatLngBounds.Builder builder = new LatLngBounds.Builder();"
1959,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {

        if (!mOptionView.isAutoAnimation()) {"
1960,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent ev) {
        if(!mOptionView.isAutoAnimation()) {
            if (isLocked) {"
1965,updateMapContents,"    protected void updateMapContents() {
        mGoogleMap.clear();
        if(mOptionView.isMultipleMarker() && !mOptionView.isSingleMarker()) {
            LatLngBounds.Builder builder = new LatLngBounds.Builder();"
1966,onClick,"    public void onClick(View v) {
        animationCardUp(card, toolbar, duration);
    }"
1967,onFinish,"            public void onFinish() {
                card.animate()
                        .translationY(height - (card.getHeight() + toolbar.getHeight()))
                        .setDuration(duration).start();"
1969,animationCardUp,"    public void animationCardUp(@NotNull final CardView card, @NotNull final Toolbar toolbar, final long duration){
        new CountDownTimer(1, 1) {
            public void onTick(long millisUntilFinished) {"
1970,onFinish,"            public void onFinish() {
                card.animate()
                        .translationY(height - ((int)(toolbar.getHeight() * 1.7)))
                        .setDuration(duration).start();"
1973,onFinish,"            public void onFinish() {
                card.setTranslationY(height - ((int)(toolbar.getHeight() * 1.7)));
                fab.setTranslationY((height - ((int) (toolbar.getHeight() * 1.7))) + card.getHeight() - (fab.getHeight() - fab.getHeight() / 4));
            }"
1974,onTick,"            public void onTick(long millisUntilFinished) {
                card.setTranslationY(height - ((int)(toolbar.getHeight() * 1.7)));
                fab.setTranslationY((height - ((int) (toolbar.getHeight() * 1.7))) + card.getHeight() - (fab.getHeight() - fab.getHeight() / 4));
            }"
1975,animationCardStart,"    public void animationCardStart(@NotNull final CardView card, @NotNull final Toolbar toolbar){
        new CountDownTimer(300, 1) {
            public void onTick(long millisUntilFinished) {"
1976,onFinishInflate,"    protected void onFinishInflate() {
        super.onFinishInflate();
    }"
1977,initToolbar,"    private void initToolbar(Context context, OptionView option)
    {
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        toolbar.setTitle(titleAttr);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if(colorTitleAttr == 0)"
1979,onClick,"                                                public void onClick(View v) {
                                                    setVisibility(View.VISIBLE);
                                                }"
1980,onDismiss,"                            public void onDismiss(View view, Object token) {
                                setVisibility(View.GONE);
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
                                    Snackbar.make(SwipeableCard.this, ""Deleted!"", Snackbar.LENGTH_LONG)"
1981,canDismiss,"                            public boolean canDismiss(Object token) {
                                return true;
                            }"
1982,onClick,"                public void onClick(View v) {
                    animationCardDown(card, toolbar, duration);
                }"
1983,onClick,"                        public void onClick(View v) {
                            if (!back) {
                                creditCardView.showBack();"
1984,onClick,"                        public void onClick(View v) {
                            ActivityCardCreation.setCreditCardView(creditCardView, option, newCreditCard, relativeCreditCardCreation, relativeCreditCard);
                            Intent intent = new Intent(option.getActivity(), ActivityCardCreation.class);
                            option.getActivity().startActivityForResult(intent, 1);
                        }"
1985,init,"    public void init(@NotNull final Context context, @NotNull final OptionView option){
        if(option != null)
        {"
2003,isTextBtn2,"    public boolean isTextBtn2() {
        return isTextBtn2;
    }"
2004,isTextBtn1,"    public boolean isTextBtn1() {
        return isTextBtn1;
    }"
2005,isIconBtn3,"    public boolean isIconBtn3() {
        return isIconBtn3;
    }"
2006,isIconBtn2,"    public boolean isIconBtn2() {
        return isIconBtn2;
    }"
2007,isIconBtn1,"    public boolean isIconBtn1() {
        return isIconBtn1;
    }"
2008,build,"        public OptionViewAdditional build() {
            return new OptionViewAdditional(this);
        }"
2009,textButton,"        public Builder textButton(@NotNull String... text)
        {
            if(text.length > 2)
            {
                Log.e(""TextColorButton"", ""Impossible to set Text Button value more than 2! Please Check it"");
                throw new IllegalArgumentException(""Impossible to set Text Button value more than 2! Please Check it"");"
2010,iconButton,"        public Builder iconButton(@DrawableRes int... icon)
        {
            if(icon.length > 3)
            {
                Log.e(""TextColorButton"", ""Impossible to set Icon Button value more than 3! Please Check it"");
                throw new IllegalArgumentException(""Impossible to set Icon Button value more than 3! Please Check it"");
            }"
2011,textColorButton,"        public Builder textColorButton(@ColorRes int... color)
        {
            if(color.length > 2)
            {
                Log.e(""TextColorButton"", ""Impossible to set Text Color Button value more than 2! Please Check it"");
                throw new IllegalArgumentException(""Impossible to set Text Color Button value more than 2! Please Check it"");"
2012,textSize,"        public Builder textSize(float... size)
        {
            if(size.length > 2)
            {
                Log.e(""TextSizeButton"", ""Impossible to set Text Size value more than 2! Please Check it"");
                throw new IllegalArgumentException(""Impossible to set Text Size value more than 2! Please Check it"");"
2018,build,"        public OptionView build() {
            return new OptionView(this);
        }"
2019,toolbarColor,"        public NormalCard toolbarColor(@ColorRes int toolbarColor) {

            if(toolbarColor == 0)
            {"
2020,image,"        public NormalCard image(@DrawableRes int image) {
            mImage = image;
            isImage = true;
            isText = false;
            return this;
        }"
2021,subTitle,"        public NormalCard subTitle(@NotNull String subTitle) {
            mSubTitle = subTitle;
            isSubTitle = true;
            return this;
        }"
2022,text,"        public NormalCard text(@NotNull String text) {
            mText = text;
            isImage = false;
            isText = true;
            return this;
        }"
2023,title,"        public NormalCard title(@NotNull String title) {
            mTitle = title;
            return this;
        }"
2024,menuItem,"        public NormalCard menuItem(@AnyRes int menuItem) {

            if(menuItem == 0)
            {"
2025,colorTitle,"        public NormalCard colorTitle(@ColorRes int colorTitle) {
            mColorTitle = colorTitle;
            return this;
        }"
2026,toolbarListener,"        public NormalCard toolbarListener(@NotNull Toolbar.OnMenuItemClickListener toolbarListener)
        {
            mToolbarListener = toolbarListener;
            return this;"
2033,toolbarColor,"        public MapsCard toolbarColor(@ColorRes int toolbarColor) {

            if(toolbarColor == 0)
            {"
2034,subTitle,"        public MapsCard subTitle(@NotNull String subTitle) {
            mSubTitle = subTitle;
            isSubTitle = true;
            return this;
        }"
2035,title,"        public MapsCard title(@NotNull String title) {
            mTitle = title;
            return this;
        }"
2036,menuItem,"        public MapsCard menuItem(@AnyRes int menuItem) {

            if(menuItem == 0)
            {"
2037,colorTitle,"        public MapsCard colorTitle(@ColorRes int colorTitle) {
            mColorTitle = colorTitle;
            return this;
        }"
2038,toolbarListener,"        public MapsCard toolbarListener(@NotNull Toolbar.OnMenuItemClickListener toolbarListener)
        {
            mToolbarListener = toolbarListener;
            return this;"
2043,withStreetName,"        public MapsCard withStreetName(boolean isStreetName)
        {
            this.isStreetName = isStreetName;
            return this;"
2057,toolbarColor,"        public CreditCard toolbarColor(@ColorRes int toolbarColor) {

            if(toolbarColor == 0)
            {"
2058,subTitle,"        public CreditCard subTitle(@NotNull String subTitle) {
            mSubTitle = subTitle;
            isSubTitle = true;
            return this;
        }"
2059,title,"        public CreditCard title(@NotNull String title) {
            mTitle = title;
            return this;
        }"
2060,menuItem,"        public CreditCard menuItem(@AnyRes int menuItem) {

            if(menuItem == 0)
            {"
2061,colorTitle,"        public CreditCard colorTitle(@ColorRes int colorTitle) {
            mColorTitle = colorTitle;
            return this;
        }"
2062,toolbarListener,"        public CreditCard toolbarListener(@NotNull Toolbar.OnMenuItemClickListener toolbarListener)
        {
            mToolbarListener = toolbarListener;
            return this;"
2075,isCreateCreditCard,"    public boolean isCreateCreditCard() {
        return createCreditCard;
    }"
2081,isAutoAnimation,"    public boolean isAutoAnimation() {
        return autoAnimation;
    }"
2089,isSingleMarker,"    public boolean isSingleMarker() {
        return singleMarker;
    }"
2090,isMultipleMarker,"    public boolean isMultipleMarker() {
        return multipleMarker;
    }"
2091,isStreetName,"    public boolean isStreetName() {
        return isStreetName;
    }"
2094,isTypeCardCredit,"    public boolean isTypeCardCredit() {
        return TYPE_CARD_CREDIT;
    }"
2095,isTypeCardMaps,"    public boolean isTypeCardMaps() {
        return TYPE_CARD_MAPS;
    }"
2096,isTypeCardNormal,"    public boolean isTypeCardNormal() {
        return TYPE_CARD_NORMAL;
    }"
2099,isSubTitle,"    public boolean isSubTitle()
    {
        return isSubTitle;"
2100,isText,"    public boolean isText()
    {
        return isText;"
2101,isImage,"    public boolean isImage()
    {
        return isImage;"
2102,isMenuItem,"    public boolean isMenuItem()
    {
        return isMenuItem;"
2103,isSwipeToDismiss,"    public boolean isSwipeToDismiss()
    {
        return isSwipeLeftRight;"
2117,creditCard,"        public CreditCard creditCard() {
            return new CreditCard();
        }"
2118,mapsCard,"        public MapsCard mapsCard()
        {
            return new MapsCard();"
2119,normalCard,"        public NormalCard normalCard()
        {
            return new NormalCard();"
2121,onFinish,"                    public void onFinish() {
                        mCardView.animate()
                                .translationY(height - (mCardView.getHeight() + mStartCardPosition))"
2123,animationCustomCardUp,"    public void animationCustomCardUp()
    {
        final int height = getScreenSize(mContext);
        new CountDownTimer(1, 1) {"
2124,onFinish,"                    public void onFinish() {
                        mCardView.animate()
                                .translationY(height - ((int) (mStartCardPosition * 1.7)))"
2125,onTick,"                    public void onTick(long millisUntilFinished) {
                    }"
2126,animationCustomCardDown,"    public void animationCustomCardDown()
    {
        final int height = getScreenSize(mContext);
                new CountDownTimer(1, 1) {"
2127,onFinish,"            public void onFinish() {
                mCardView.setTranslationY(height - ((int)(mStartCardPosition * 1.7)));
            }"
2128,onTick,"            public void onTick(long millisUntilFinished) {
                mCardView.setTranslationY(height - ((int)(mStartCardPosition * 1.7)));
            }"
2129,animationCustomCardStart,"    private void animationCustomCardStart()
    {
        final int height = getScreenSize(mContext);
        new CountDownTimer(300, 1) {"
2130,setAutoAnimation,"    Card setAutoAnimation(boolean autoAnimation);
}"
2132,setAdditionalItem,"    Card setAdditionalItem(@NotNull OptionViewAdditional option);
"
2134,toolbarListener,"    Card toolbarListener(@NotNull Toolbar.OnMenuItemClickListener toolbarListener);
"
2135,colorTitle,"    Card colorTitle(@ColorRes int colorTitle);
"
2140,toolbarColor,"    Card toolbarColor(@ColorRes int toolbarColor);
"
2142,animationCardUp,"    void animationCardUp(final CardView card, final Toolbar toolbar, long duration);
}"
2143,animationCardDown,"    void animationCardDown(final CardView card, final Toolbar toolbar, long duration);
"
2144,animationCardStart,"    void animationCardStart(final CardView card, final Toolbar toolbar);
"
2145,onBackPressed,"    public void onBackPressed() {
        this.finish();
    }"
2146,onClick,"                public void onClick(View v) {
                    if (!back) {
                        creditCardView.showBack();"
2147,onActivityResult,"    public void onActivityResult(int reqCode, int resultCode, Intent data) {

        if(resultCode == RESULT_OK) {"
2148,onCreate,"    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        Intent intent = new Intent(ActivityCardCreation.this, CardEditActivity.class);
        startActivityForResult(intent, 1);"
2150,postEvent,"    public boolean postEvent(Event event) {

        if (eventQueue == null)

            return false;"
2151,removeEventQueue,"    public void removeEventQueue() {

        eventQueue = null;"
2155,unshift,"    private synchronized Event unshift() {

        

        if (bufferLength == 0)

            return null;"
2156,poll,"    public Event poll() {

        

        Event event;"
2163,runs,"    public boolean runs() {

        return runs;"
2164,run,"    public void run() {

        while (runs) {"
2165,start,"    public void start() {

        runs = true;
"
2166,countListeners,"    public int countListeners() {

        return listeners.size();"
2167,removeListener,"    public void removeListener(EventListener listener) {

        listeners.remove(listener);"
2168,addListener,"    public void addListener(EventListener listener) {

        listeners.add(listener);"
2172,main,"  public static void main(String[] args) throws Exception {

    TopologyBuilder builder = new TopologyBuilder();

    builder.setSpout(""spout"", new RandomSentenceSpout(), 5);

    builder.setBolt(""split"", new SplitSentence(), 8).shuffleGrouping(""spout"");
    builder.setBolt(""count"", new WordCount(), 12).fieldsGrouping(""split"", new Fields(""word""));
"
2173,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""word"", ""count""));
    }"
2174,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      String word = tuple.getString(0);
      Integer count = counts.get(word);
      if (count == null)
        count = 0;
      count++;
      counts.put(word, count);
      collector.emit(new Values(word, count));"
2176,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""word""));
    }"
2178,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""bucket"", ""count""));
    }"
2179,finishBatch,"    public void finishBatch() {
      for (Integer bucket : _accum.keySet()) {
        BucketValue currVal = BUCKET_DATABASE.get(bucket);"
2180,execute,"    public void execute(Tuple tuple) {
      Integer bucket = tuple.getInteger(1);
      Integer delta = tuple.getInteger(2);
      Integer curr = _accum.get(bucket);
      if (curr == null)
        curr = 0;
      _accum.put(bucket, curr + delta);"
2181,prepare,"    public void prepare(Map conf, TopologyContext context, BatchOutputCollector collector, TransactionAttempt attempt) {
      _collector = collector;
      _attempt = attempt;
    }"
2182,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""attempt"", ""bucket"", ""delta""));
    }"
2183,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      TransactionAttempt attempt = (TransactionAttempt) tuple.getValue(0);
      int curr = tuple.getInteger(2);
      Integer prev = tuple.getInteger(3);

      int currBucket = curr / BUCKET_SIZE;
      Integer prevBucket = null;
      if (prev != null) {
        prevBucket = prev / BUCKET_SIZE;"
2184,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""key"", ""count"", ""prev-count""));
    }"
2185,finishBatch,"    public void finishBatch() {
      for (String key : _counts.keySet()) {
        CountValue val = COUNT_DATABASE.get(key);"
2186,execute,"    public void execute(Tuple tuple) {
      String key = tuple.getString(1);
      Integer curr = _counts.get(key);
      if (curr == null)
        curr = 0;
      _counts.put(key, curr + 1);"
2187,prepare,"    public void prepare(Map conf, TopologyContext context, BatchOutputCollector collector, TransactionAttempt id) {
      _collector = collector;
      _id = id;
    }"
2189,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""sum""));
    }"
2191,execute,"    public void execute(Tuple tuple) {
      _sum += tuple.getInteger(1);
    }"
2193,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""count""));
    }"
2194,finishBatch,"    public void finishBatch() {
      _collector.emit(new Values(_id, _count));
    }"
2195,execute,"    public void execute(Tuple tuple) {
      _count++;
    }"
2196,prepare,"    public void prepare(Map conf, TopologyContext context, BatchOutputCollector collector, Object id) {
      _collector = collector;
      _id = id;
    }"
2198,updateRankingsWithTuple,"  void updateRankingsWithTuple(Tuple tuple) {
    Rankings rankingsToBeMerged = (Rankings) tuple.getValue(0);
    super.getRankings().updateWith(rankingsToBeMerged);
    super.getRankings().pruneZeroCounts();
  }"
2204,incrementCountData,"  public Object[][] incrementCountData() {
    return new Object[][]{ { new String[]{ ""foo"", ""bar"" }, new int[]{ 3, 2 } } };
  }"
2207,positiveNumSlotsShouldBeOk,"  public void positiveNumSlotsShouldBeOk(int numSlots) {
    new SlotBasedCounter<Object>(numSlots);
  }"
2208,legalNumSlotsData,"  public Object[][] legalNumSlotsData() {
    return new Object[][]{ { 1 }, { 2 }, { 3 }, { 20 } };
  }"
2209,negativeOrZeroNumSlotsShouldThrowIAE,"  public void negativeOrZeroNumSlotsShouldThrowIAE(int numSlots) {
    new SlotBasedCounter<Object>(numSlots);
  }"
2210,illegalNumSlotsData,"  public Object[][] illegalNumSlotsData() {
    return new Object[][]{ { -10 }, { -3 }, { -2 }, { -1 }, { 0 } };
  }"
2211,wipeZeros,"  public void wipeZeros() {
    Set<T> objToBeRemoved = new HashSet<T>();
    for (T obj : objToCounts.keySet()) {
      if (shouldBeRemovedFromCounter(obj)) {
        objToBeRemoved.add(obj);"
2212,shouldBeRemovedFromCounter,"  private boolean shouldBeRemovedFromCounter(T obj) {
    return computeTotalCount(obj) == 0;
  }"
2213,resetSlotCountToZero,"  private void resetSlotCountToZero(T obj, int slot) {
    long[] counts = objToCounts.get(obj);
    counts[slot] = 0;
  }"
2214,wipeSlot,"  public void wipeSlot(int slot) {
    for (T obj : objToCounts.keySet()) {
      resetSlotCountToZero(obj, slot);"
2215,computeTotalCount,"  private long computeTotalCount(T obj) {
    long[] curr = objToCounts.get(obj);
    long total = 0;
    for (long l : curr) {
      total += l;
    }"
2218,incrementCount,"  public void incrementCount(T obj, int slot) {
    long[] counts = objToCounts.get(obj);
    if (counts == null) {
      counts = new long[this.numSlots];
      objToCounts.put(obj, counts);"
2220,simulatedCounterIterations,"  public Object[][] simulatedCounterIterations() {
    return new Object[][]{ { 2, new int[]{ 3, 2, 0, 0, 1, 0, 0, 0 }, new long[]{ 3, 5, 2, 0, 1, 1, 0, 0 } },
        { 3, new int[]{ 3, 2, 0, 0, 1, 0, 0, 0 }, new long[]{ 3, 5, 5, 2, 1, 1, 1, 0 } },"
2222,twoOrMoreSlotsShouldBeValid,"  public void twoOrMoreSlotsShouldBeValid(int windowLengthInSlots) {
    new SlidingWindowCounter<Object>(windowLengthInSlots);
  }"
2223,legalWindowLengths,"  public Object[][] legalWindowLengths() {
    return new Object[][]{ { 2 }, { 3 }, { 20 } };
  }"
2224,lessThanTwoSlotsShouldThrowIAE,"  public void lessThanTwoSlotsShouldThrowIAE(int windowLengthInSlots) {
    new SlidingWindowCounter<Object>(windowLengthInSlots);
  }"
2225,illegalWindowLengths,"  public Object[][] illegalWindowLengths() {
    return new Object[][]{ { -10 }, { -3 }, { -2 }, { -1 }, { 0 }, { 1 } };
  }"
2226,slotAfter,"  private int slotAfter(int slot) {
    return (slot + 1) % windowLengthInSlots;
  }"
2227,advanceHead,"  private void advanceHead() {
    headSlot = tailSlot;
    tailSlot = slotAfter(tailSlot);
  }"
2229,incrementCount,"  public void incrementCount(T obj) {
    objCounter.incrementCount(obj, headSlot);
  }"
2231,expire,"    public void expire(List<Object> id, Map<GlobalStreamId, Tuple> tuples) {
      for (Tuple tuple : tuples.values()) {
        _collector.fail(tuple);"
2232,declareOutputFields,"  public void declareOutputFields(OutputFieldsDeclarer declarer) {
    declarer.declare(_outFields);
  }"
2235,main,"  public static void main(String[] args) throws Exception {
    new RollingTopWords().run();
  }"
2236,run,"  public void run() throws InterruptedException {
    StormRunner.runTopologyLocally(builder.createTopology(), topologyName, topologyConfig, runtimeInSeconds);
  }"
2238,createTopologyConfiguration,"  private static Config createTopologyConfiguration() {
    Config conf = new Config();
    conf.setDebug(true);
    return conf;
  }"
2240,declareOutputFields,"  public void declareOutputFields(OutputFieldsDeclarer declarer) {
    declarer.declare(new Fields(""obj"", ""count"", ""actualWindowLengthInSeconds""));
  }"
2241,countObjAndAck,"  private void countObjAndAck(Tuple tuple) {
    Object obj = tuple.getValue(0);
    counter.incrementCount(obj);
    collector.ack(tuple);
  }"
2242,emit,"  private void emit(Map<Object, Long> counts, int actualWindowLengthInSeconds) {
    for (Entry<Object, Long> entry : counts.entrySet()) {
      Object obj = entry.getKey();"
2244,execute,"  public void execute(Tuple tuple) {
    if (TupleHelpers.isTickTuple(tuple)) {
      LOG.debug(""Received tick tuple, triggering emit of current window counts"");"
2245,prepare,"  public void prepare(Map stormConf, TopologyContext context, OutputCollector collector) {
    this.collector = collector;
    lastModifiedTracker = new NthLastModifiedTimeTracker(deriveNumWindowChunksFrom(this.windowLengthInSeconds,
        this.emitFrequencyInSeconds));"
2246,deriveNumWindowChunksFrom,"  private int deriveNumWindowChunksFrom(int windowLengthInSeconds, int windowUpdateFrequencyInSeconds) {
    return windowLengthInSeconds / windowUpdateFrequencyInSeconds;
  }"
2247,main,"  public static void main(String[] args) throws Exception {
    LinearDRPCTopologyBuilder builder = construct();


    Config conf = new Config();"
2249,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""reach""));
    }"
2251,execute,"    public void execute(Tuple tuple) {
      _count += tuple.getInteger(1);
    }"
2253,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""partial-count""));
    }"
2254,finishBatch,"    public void finishBatch() {
      _collector.emit(new Values(_id, _followers.size()));
    }"
2255,execute,"    public void execute(Tuple tuple) {
      _followers.add(tuple.getString(1));
    }"
2257,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""follower""));
    }"
2258,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      Object id = tuple.getValue(0);
      String tweeter = tuple.getString(1);
      List<String> followers = FOLLOWERS_DB.get(tweeter);
      if (followers != null) {
        for (String follower : followers) {"
2259,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""tweeter""));
    }"
2260,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      Object id = tuple.getValue(0);
      String url = tuple.getString(1);
      List<String> tweeters = TWEETERS_DB.get(url);
      if (tweeters != null) {
        for (String tweeter : tweeters) {"
2263,run,"      public void run() {
        for (Rankable r : entries) {
          try {"
2266,removeZeroRankingsData,"  public Object[][] removeZeroRankingsData() {
    return new Object[][]{ { Lists.newArrayList(A, ZERO), Lists.newArrayList(A) }, { Lists.newArrayList(A),
        Lists.newArrayList(A) }, { Lists.newArrayList(ZERO, A), Lists.newArrayList(A) }, { Lists.newArrayList(ZERO),"
2268,duplicatesData,"  public Object[][] duplicatesData() {
    Rankable A1 = new RankableObjectWithFields(""A"", 1);
    Rankable A2 = new RankableObjectWithFields(""A"", 2);
    Rankable A3 = new RankableObjectWithFields(""A"", 3);
    return new Object[][]{ { Lists.newArrayList(ANY_RANKABLE, ANY_RANKABLE, ANY_RANKABLE) }, { Lists.newArrayList(A1,
        A2, A3) }, };"
2270,simulatedRankingsAndOtherRankingsData,"  public Object[][] simulatedRankingsAndOtherRankingsData() {
    return new Object[][]{ { Lists.newArrayList(A), Lists.newArrayList(A), Lists.newArrayList(A) },
        { Lists.newArrayList(A, C), Lists.newArrayList(B, D), Lists.newArrayList(D, C, B, A) }, { Lists.newArrayList(B,"
2274,simulatedRankingsData,"  public Object[][] simulatedRankingsData() {
    return new Object[][]{ { Lists.newArrayList(A), Lists.newArrayList(A) }, { Lists.newArrayList(B, D, A, C),
        Lists.newArrayList(D, C, B, A) }, { Lists.newArrayList(B, F, A, C, D, E), Lists.newArrayList(F, E, D, C, B,"
2276,rankingsGrowData,"  public Object[][] rankingsGrowData() {
    return new Object[][]{ { 2, Lists.newArrayList(new RankableObjectWithFields(""A"", 1), new RankableObjectWithFields(
        ""B"", 2), new RankableObjectWithFields(""C"", 3)) }, { 2, Lists.newArrayList(new RankableObjectWithFields(""A"", 1),"
2278,shouldHaveDefaultConstructor,"  public void shouldHaveDefaultConstructor() {
    new Rankings();
  }"
2280,legalTopNData,"  public Object[][] legalTopNData() {
    return new Object[][]{ { 1 }, { 2 }, { 1000 }, { 1000000 } };
  }"
2282,defensiveCopyRankingsData,"  public Object[][] defensiveCopyRankingsData() {
    return new Object[][]{ { 5, Lists.newArrayList(A, B, C), Lists.newArrayList(D) }, { 2, Lists.newArrayList(A, B, C,
        D), Lists.newArrayList(E, F) }, { 1, Lists.newArrayList(), Lists.newArrayList(A) }, { 1, Lists.newArrayList(A),"
2284,copyRankingsData,"  public Object[][] copyRankingsData() {
    return new Object[][]{ { 5, Lists.newArrayList(A, B, C) }, { 2, Lists.newArrayList(A, B, C, D) },
        { 1, Lists.newArrayList() }, { 1, Lists.newArrayList(A) }, { 1, Lists.newArrayList(A, B) } };"
2285,constructorWithNegativeOrZeroTopNShouldThrowIAE,"  public void constructorWithNegativeOrZeroTopNShouldThrowIAE(int topN) {
    new Rankings(topN);
  }"
2286,illegalTopNData,"  public Object[][] illegalTopNData() {
    return new Object[][]{ { 0 }, { -1 }, { -2 }, { -10 } };
  }"
2287,copy,"  public Rankings copy() {
    return new Rankings(this);
  }"
2288,toString,"  public String toString() {
    return rankedItems.toString();
  }"
2290,shrinkRankingsIfNeeded,"  private void shrinkRankingsIfNeeded() {
    if (rankedItems.size() > maxSize) {
      rankedItems.remove(maxSize);"
2291,rerank,"  private void rerank() {
    Collections.sort(rankedItems);
    Collections.reverse(rankedItems);
  }"
2292,findRankOf,"  private Integer findRankOf(Rankable r) {
    Object tag = r.getObject();
    for (int rank = 0; rank < rankedItems.size(); rank++) {
      Object cur = rankedItems.get(rank).getObject();
      if (cur.equals(tag)) {"
2293,addOrReplace,"  private void addOrReplace(Rankable r) {
    Integer rank = findRankOf(r);
    if (rank != null) {
      rankedItems.set(rank, r);"
2294,updateWith,"  public void updateWith(Rankable r) {
    synchronized(rankedItems) {
      addOrReplace(r);"
2297,size,"  public int size() {
    return rankedItems.size();
  }"
2298,maxSize,"  public int maxSize() {
    return maxSize;
  }"
2300,copyData,"  public Object[][] copyData() {
    return new Object[][]{ { new RankableObjectWithFields(""foo"", 0) }, { new RankableObjectWithFields(""foo"", 3,
        ""someOtherField"") }, { new RankableObjectWithFields(""foo"", 0, ""someField"") } };"
2304,fieldsData,"  public Object[][] fieldsData() {
    return new Object[][]{ { ANY_OBJECT, ANY_COUNT, new Object[]{ ANY_FIELD } },
        { ""quux"", 42L, new Object[]{ ""one"", ""two"", ""three"" } } };"
2308,toStringData,"  public Object[][] toStringData() {
    return new Object[][]{ { new String(""foo""), 0L }, { new String(""BAR""), 8L } };
  }"
2309,verifyCompareTo,"  public void verifyCompareTo(RankableObjectWithFields first, RankableObjectWithFields second, int expCompareToValue) {
    assertThat(first.compareTo(second)).isEqualTo(expCompareToValue);
  }"
2310,compareToData,"  public Object[][] compareToData() {
    return new Object[][]{ { new RankableObjectWithFields(""foo"", 1000), new RankableObjectWithFields(""foo"", 0),
        GREATER_THAN }, { new RankableObjectWithFields(""foo"", 1), new RankableObjectWithFields(""foo"", 0),"
2311,shouldHaveSameHashCodeAsTrueDuplicates,"  public void shouldHaveSameHashCodeAsTrueDuplicates(RankableObjectWithFields r,
      RankableObjectWithFields trueDuplicate) {
    assertThat(r.hashCode()).isEqualTo(trueDuplicate.hashCode());"
2312,shouldBeEqualToTrueDuplicates,"  public void shouldBeEqualToTrueDuplicates(RankableObjectWithFields r, RankableObjectWithFields trueDuplicate) {
    assertTrue(r.equals(trueDuplicate), r + "" is not equal to "" + trueDuplicate + "" but it should be"");
  }"
2313,trueDuplicatesData,"  public Object[][] trueDuplicatesData() {
    return new Object[][]{ { new RankableObjectWithFields(""foo"", 0), new RankableObjectWithFields(""foo"", 0) },
        { new RankableObjectWithFields(""foo"", 0), new RankableObjectWithFields(""foo"", 0, ""someOtherField"") },"
2314,shouldHaveDifferentHashCodeThanFalseDuplicates,"  public void shouldHaveDifferentHashCodeThanFalseDuplicates(RankableObjectWithFields r,
      RankableObjectWithFields falseDuplicate) {
    assertThat(r.hashCode()).isNotEqualTo(falseDuplicate.hashCode());"
2315,shouldNotBeEqualToFalseDuplicates,"  public void shouldNotBeEqualToFalseDuplicates(RankableObjectWithFields r, RankableObjectWithFields falseDuplicate) {
    assertFalse(r.equals(falseDuplicate), r + "" is equal to "" + falseDuplicate + "" but it should not be"");
  }"
2316,falseDuplicatesData,"  public Object[][] falseDuplicatesData() {
    return new Object[][]{ { new RankableObjectWithFields(""foo"", 0), new RankableObjectWithFields(""foo"", 1) },
        { new RankableObjectWithFields(""foo"", 1), new RankableObjectWithFields(""Foo"", 1) },"
2317,shouldNotBeEqualToInstancesOfOtherClasses,"  public void shouldNotBeEqualToInstancesOfOtherClasses(Object notARankable) {
    RankableObjectWithFields r = new RankableObjectWithFields(ANY_OBJECT, ANY_COUNT);
    assertFalse(r.equals(notARankable), r + "" is equal to "" + notARankable + "" but it should not be"");
  }"
2318,otherClassesData,"  public Object[][] otherClassesData() {
    return new Object[][]{ { new String(""foo"") }, { new Object() }, { Integer.valueOf(4) }, { Lists.newArrayList(7, 8,
        9) } };"
2319,shouldBeEqualToItself,"  public void shouldBeEqualToItself() {
    RankableObjectWithFields r = new RankableObjectWithFields(ANY_OBJECT, ANY_COUNT);
    assertThat(r).isEqualTo(r);
  }"
2320,constructorWithNegativeCountAndFieldsShouldThrowIAE,"  public void constructorWithNegativeCountAndFieldsShouldThrowIAE() {
    Object someAdditionalField = new Object();
    new RankableObjectWithFields(ANY_OBJECT, -1, someAdditionalField);
  }"
2321,constructorWithNegativeCountAndNoFieldsShouldThrowIAE,"  public void constructorWithNegativeCountAndNoFieldsShouldThrowIAE() {
    new RankableObjectWithFields(ANY_OBJECT, -1);
  }"
2322,constructorWithNullObjectAndFieldsShouldThrowIAE,"  public void constructorWithNullObjectAndFieldsShouldThrowIAE() {
    Object someAdditionalField = new Object();
    new RankableObjectWithFields(null, ANY_COUNT, someAdditionalField);
  }"
2323,constructorWithNullObjectAndNoFieldsShouldThrowIAE,"  public void constructorWithNullObjectAndNoFieldsShouldThrowIAE() {
    new RankableObjectWithFields(null, ANY_COUNT);
  }"
2324,copy,"  public Rankable copy() {
    List<Object> shallowCopyOfFields = ImmutableList.copyOf(getFields());
    return new RankableObjectWithFields(getObject(), getCount(), shallowCopyOfFields);
  }"
2325,toString,"  public String toString() {
    StringBuffer buf = new StringBuffer();
    buf.append(""["");
    buf.append(obj);
    buf.append(toStringSeparator);
    buf.append(count);
    for (Object field : fields) {
      buf.append(toStringSeparator);
      buf.append(field);
    }"
2326,hashCode,"  public int hashCode() {
    int result = 17;
    int countHash = (int) (count ^ (count >>> 32));
    result = 31 * result + countHash;
    result = 31 * result + obj.hashCode();
    return result;
  }"
2327,equals,"  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof RankableObjectWithFields)) {
      return false;"
2328,compareTo,"  public int compareTo(Rankable other) {
    long delta = this.getCount() - other.getCount();
    if (delta > 0) {
      return 1;"
2332,from,"  public static RankableObjectWithFields from(Tuple tuple) {
    List<Object> otherFields = Lists.newArrayList(tuple.getValues());
    Object obj = otherFields.remove(0);
    Long count = (Long) otherFields.remove(0);
    return new RankableObjectWithFields(obj, count, otherFields.toArray());
  }"
2336,declareOutputFields,"  public void declareOutputFields(OutputFieldsDeclarer ofd) {
  }"
2337,execute,"  public void execute(Tuple tuple, BasicOutputCollector collector) {
    System.out.println(tuple);
  }"
2338,advanceSimulatedTimeBy,"  private void advanceSimulatedTimeBy(int seconds) {
    Time.advanceTime(seconds * MILLIS_IN_SEC);
  }"
2340,simulatedTrackerIterations,"  public Object[][] simulatedTrackerIterations() {
    return new Object[][]{ { 1, new int[]{ 0, 1 }, new int[]{ 0, 0 } }, { 1, new int[]{ 0, 2 }, new int[]{ 0, 0 } },
        { 2, new int[]{ 2, 2 }, new int[]{ 2, 2 } }, { 2, new int[]{ 0, 4 }, new int[]{ 0, 4 } },"
2342,whenNotYetMarkedAsModifiedData,"  public Object[][] whenNotYetMarkedAsModifiedData() {
    return new Object[][]{ { 0 }, { 1 }, { 2 }, { 3 }, { 4 }, { 5 }, { 8 }, { 10 } };
  }"
2343,positiveNumTimesToTrackShouldBeOk,"  public void positiveNumTimesToTrackShouldBeOk(int numTimesToTrack) {
    new NthLastModifiedTimeTracker(numTimesToTrack);
  }"
2344,legalNumTimesData,"  public Object[][] legalNumTimesData() {
    return new Object[][]{ { 1 }, { 2 }, { 3 }, { 20 } };
  }"
2345,negativeOrZeroNumTimesToTrackShouldThrowIAE,"  public void negativeOrZeroNumTimesToTrackShouldThrowIAE(int numTimesToTrack) {
    new NthLastModifiedTimeTracker(numTimesToTrack);
  }"
2346,illegalNumTimesData,"  public Object[][] illegalNumTimesData() {
    return new Object[][]{ { -10 }, { -3 }, { -2 }, { -1 }, { 0 } };
  }"
2347,updateLastModifiedTime,"  private void updateLastModifiedTime() {
    lastModifiedTimesMillis.add(now());
  }"
2348,markAsModified,"  public void markAsModified() {
    updateLastModifiedTime();
  }"
2349,secondsSinceOldestModification,"  public int secondsSinceOldestModification() {
    long modifiedTimeMillis = ((Long) lastModifiedTimesMillis.get()).longValue();
    return (int) ((now() - modifiedTimeMillis) / MILLIS_IN_SEC);
  }"
2350,now,"  private long now() {
    return Time.currentTimeMillis();
  }"
2351,initLastModifiedTimesMillis,"  private void initLastModifiedTimesMillis() {
    long nowCached = now();
    for (int i = 0; i < lastModifiedTimesMillis.maxSize(); i++) {
      lastModifiedTimesMillis.add(Long.valueOf(nowCached));"
2352,mockTuple,"  public static Tuple mockTuple(String componentId, String streamId) {
    Tuple tuple = mock(Tuple.class);
    when(tuple.getSourceComponent()).thenReturn(componentId);
    when(tuple.getSourceStreamId()).thenReturn(streamId);
    return tuple;
  }"
2353,mockTickTuple,"  public static Tuple mockTickTuple() {
    return mockTuple(Constants.SYSTEM_COMPONENT_ID, Constants.SYSTEM_TICK_STREAM_ID);
  }"
2355,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      String arg = tuple.getString(0);
      Object retInfo = tuple.getValue(1);
      collector.emit(new Values(arg + ""!!!"", retInfo));
    }"
2356,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""result"", ""return-info""));
    }"
2358,updateRankingsWithTuple,"  void updateRankingsWithTuple(Tuple tuple) {
    Rankable rankable = RankableObjectWithFields.from(tuple);
    super.getRankings().updateWith(rankable);
  }"
2359,main,"  public static void main(String[] args) throws Exception {
    TopologyBuilder builder = new TopologyBuilder();

    builder.setSpout(""word"", new TestWordSpout(), 10);
    builder.setBolt(""exclaim1"", new ExclamationBolt(), 3).shuffleGrouping(""word"");
    builder.setBolt(""exclaim2"", new ExclamationBolt(), 2).shuffleGrouping(""exclaim1"");

    Config conf = new Config();
    conf.setDebug(true);"
2361,execute,"    public void execute(Tuple tuple) {
      _collector.emit(tuple, new Values(tuple.getString(0) + ""!!!""));
      _collector.ack(tuple);
    }"
2362,prepare,"    public void prepare(Map conf, TopologyContext context, OutputCollector collector) {
      _collector = collector;
    }"
2363,main,"  public static void main(String[] args) throws Exception {
    LinearDRPCTopologyBuilder builder = new LinearDRPCTopologyBuilder(""exclamation"");
    builder.addBolt(new ExclaimBolt(), 3);

    Config conf = new Config();
"
2364,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""result""));
    }"
2365,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      String input = tuple.getString(1);
      collector.emit(new Values(tuple.getValue(0), input + ""!""));
    }"
2368,declareOutputFields,"  public void declareOutputFields(OutputFieldsDeclarer declarer) {
    declarer.declare(new Fields(""rankings""));
  }"
2369,emitRankings,"  private void emitRankings(BasicOutputCollector collector) {
    collector.emit(new Values(rankings.copy()));
    getLogger().debug(""Rankings: "" + rankings);
  }"
2370,updateRankingsWithTuple,"  abstract void updateRankingsWithTuple(Tuple tuple);
"
2371,execute,"  public final void execute(Tuple tuple, BasicOutputCollector collector) {
    if (TupleHelpers.isTickTuple(tuple)) {
      getLogger().debug(""Received tick tuple, triggering emit of current rankings"");"
2379,setyLocation,"    public void setyLocation(float yLocation) {
        this.yLocation = yLocation;
    }"
2380,getyLocation,"    public float getyLocation() {
        return yLocation;
    }"
2381,setxLocation,"    public void setxLocation(float xLocation) {
        this.xLocation = xLocation;
    }"
2382,getxLocation,"    public float getxLocation() {
        return xLocation;
    }"
2405,login,"    public String login(String account) {
        User user = userService.login(account);
        DTO dto = new DTO();
        if (user == null) {
            dto.code = ""-1"";
            dto.msg = ""Have not registered"";"
2406,queryTopN,"    public String queryTopN() {
        List<User> userList = null;
        try {
            Set<String> resultSet = jedisClient.zgetAll(""Toptest"", (long) 0, (long) 20);
            System.out.println(""resultSet    "" + resultSet.toString());
            Iterator<String> iter = resultSet.iterator();"
2407,queryById,"    public String queryById(Long id) {
        User user = userService.queryById(id);
        return JSON.toJSONString(user);
    }"
2408,deleteUser,"    public String deleteUser(Long id) {
        int t = userService.deleteUser(id);
        return JSON.toJSONString(t);
    }"
2409,queryAll,"    public String queryAll() {
        List<User> userList = userService.queryAll();
        return JSON.toJSONString(userList);
    }"
2410,insertUser,"    public String insertUser(String account, String country) {
        User user = new User();
        user.setAccount(account);
        user.setCountry(country);
        userService.insertUser(user);
        return JSON.toJSONString(user);
    }"
2413,queryLimit,"    public String queryLimit(int offset,  int limit) {
        List<Score>scoreList = scoreService.queryLimit(offset,limit);
        return JSON.toJSONString(scoreList);
    }"
2414,updateScore,"    public String updateScore(Long id,Integer scoreCount) {
        User user = userService.queryById(id);
        scoreService.updateScore(user,scoreCount);
        return JSON.toJSONString(user);
    }"
2417,loginOut,"    public String loginOut(HttpServletRequest request, HttpServletResponse response) {
        CookieUtil.deleteCookie(response,""isLogin"");
        return ""redirect:loginPage"";
    }"
2418,accusationPage,"    public String accusationPage(HttpServletRequest request) {
        return ""success"";
    }"
2419,login,"    public String login(HttpServletRequest request, HttpServletResponse response, RedirectAttributes model, String account, String password) {
        if (""fuzhu"".equals(account) && ""fuzhucheng"".equals(password)) {
            Map<String, Object> loginInfo = new HashMap<>();"
2420,loginPage,"    public String loginPage(HttpServletRequest request, String account, String password) {
        return ""login"";
    }"
2424,findUserByProvince,"    public String findUserByProvince(String location){
        List<User> userList = userService.findUserByProvince(location);
        System.out.println(JSON.toJSONString(userList));
        return JSON.toJSONString(userList);
    }"
2425,findGoodInfo,"    public String findGoodInfo(HttpServletRequest request,String location){
        List<GoodDetails>  goodlist =  goodService.getGoodList(location);
        request.setAttribute(""goodslist"",goodlist);
        return ""testajax"";
    }"
2426,main,"    public static void main(String[] args) {
        new SpringApplicationBuilder(DiscoveryBootcwenaoApplication.class).web(true).run(args);
    }"
2443,createExpensiveGraphAsync,"    private CompletableFuture<Object> createExpensiveGraphAsync(String key, Executor executor) {
        CompletableFuture<Object> objectCompletableFuture = new CompletableFuture<>();
        return objectCompletableFuture;
    }"
2444,evit,"    public String evit(Long id) {

        personService.remove(id);
        return ""ok"";"
2445,cacheable3,"    public Person cacheable3(Person person) {

        return personService.findOne3(person);"
2446,cacheable2,"    public Person cacheable2(Person person) {

        return personService.findOne2(person);"
2447,cacheable1,"    public Person cacheable1(Person person) {
        String a = ""a"";
        String[] b = {""1"", ""2""};
        List<Long> c = new ArrayList<>();
        c.add(3L);
        c.add(4L);
        c.add(5L);
        return personService.findOne1(person, a, b, c);
    }"
2448,cacheable,"    public Person cacheable(Person person) {
        return personService.findOne();
    }"
2449,put,"    public long put(@RequestBody Person person) {
        Person p = personService.save(person);
        return p.getId();
    }"
2450,main,"    public static void main(String[] args) {
        SpringApplication.run(DubboConsumerApplication.class, args);
    }"
2451,onCreateView,"	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_card,container,false);
        ButterKnife.inject(this, rootView);
        ViewCompat.setElevation(rootView,50);
        textView.setText(""CARD ""+position);
		return rootView;
	}"
2452,onCreate,"	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		position = getArguments().getInt(ARG_POSITION);
	}"
2453,newInstance,"	public static SuperAwesomeCardFragment newInstance(int position) {
		SuperAwesomeCardFragment f = new SuperAwesomeCardFragment();
		Bundle b = new Bundle();
		b.putInt(ARG_POSITION, position);
		f.setArguments(b);
		return f;
	}"
2455,isViewFromObject,"        public boolean isViewFromObject(View v, Object o) {
            return v == o;
        }"
2456,destroyItem,"        public void destroyItem(ViewGroup container, int position, Object view) {
            container.removeView((View) view);
        }"
2457,instantiateItem,"        public Object instantiateItem(ViewGroup container, int position) {
            TextView textview= (TextView) LayoutInflater.from(mContext).inflate(R.layout.fragment_quickcontact,container,false);
            textview.setText(""PAGE ""+position);
            container.addView(textview);
            return textview;
        }"
2462,newInstance,"    public static QuickContactFragment newInstance() {
        QuickContactFragment quickContactFragment = new QuickContactFragment();
        return quickContactFragment;
    }"
2466,onRestoreInstanceState,"    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        currentColor = savedInstanceState.getInt(""currentColor"");
        changeColor(currentColor);
    }"
2467,onSaveInstanceState,"    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt(""currentColor"", currentColor);
    }"
2468,onColorClicked,"    public void onColorClicked(View v) {
        int color = Color.parseColor(v.getTag().toString());
        changeColor(color);
    }"
2471,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }"
2472,onTabReselected,"            public void onTabReselected(int position) {
                Toast.makeText(MainActivity.this, ""Tab reselected: "" + position, Toast.LENGTH_SHORT).show();
            }"
2474,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
        if (mWebView != null) {
            mWebView.removeAllViews();
            ((ViewGroup) mWebView.getParent()).removeView(mWebView);"
2475,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithWebViewActivity.this, MainActivity.class));
        finish();
    }"
2476,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        menu.add(Menu.NONE, Menu.FIRST, Menu.NONE, R.string.auto_refresh_func_demo);
        return super.onCreateOptionsMenu(menu);
    }"
2478,onPageFinished,"                    public void onPageFinished(WebView view, String url) {
                        mRefreshLayout.refreshComplete();
                    }"
2481,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
        mHandler.removeCallbacksAndMessages(null);
    }"
2482,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithViewPagerActivity.this, MainActivity.class));
        finish();
    }"
2484,run,"                                    public void run() {
                                        mViewPager.setCurrentItem(0, true);
                                        mRefreshLayout.refreshComplete();
                                        Toast.makeText(
                                                        WithViewPagerActivity.this,"
2485,onRefreshing,"                    public void onRefreshing() {
                        mHandler.postDelayed(
                                new Runnable() {"
2488,onBackPressed,"    public void onBackPressed() {
        startActivity(
                new Intent(WithRecyclerViewInCoordinatorLayoutActivity.this, MainActivity.class));
        finish();"
2489,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 20);
                                        mCount += list.size();
                                        mAdapter.appendData(list);
                                        mRefreshLayout.refreshComplete();
                                    }"
2490,onLoadingMore,"                    public void onLoadingMore() {
                        mHandler.postDelayed(
                                new Runnable() {"
2491,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 20);
                                        mCount = list.size();
                                        mAdapter.updateData(list);
                                        mRefreshLayout.refreshComplete();
                                    }"
2493,onClick,"                    public void onClick(View v) {
                        onBackPressed();
                    }"
2496,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithRecyclerViewActivity.this, MainActivity.class));
        finish();
    }"
2497,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        menu.add(Menu.NONE, Menu.FIRST, Menu.NONE, R.string.change_style);
        return super.onCreateOptionsMenu(menu);
    }"
2499,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 15);
                                        mCount += list.size();
                                        mAdapter.appendData(list);
                                        mRefreshLayout.refreshComplete();
                                    }"
2500,onLoadingMore,"                    public void onLoadingMore() {
                        Toast.makeText(
                                        WithRecyclerViewActivity.this,
                                        R.string.has_been_triggered_to_load_more,"
2501,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 60);
                                        mCount = list.size();
                                        mAdapter.insertData(list);
                                        mRefreshLayout.refreshComplete();
                                    }"
2505,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithListViewActivity.this, MainActivity.class));
        finish();
    }"
2509,onStatusChanged,"                    public void onStatusChanged(byte old, byte now) {
                        if (old == SmoothRefreshLayout.SR_STATUS_LOADING_MORE
                                && now == SmoothRefreshLayout.SR_STATUS_COMPLETE) {"
2510,run,"                                    public void run() {
                                        if (mCount >= 50) {
                                            mRefreshLayout.setEnableNoMoreDataAndNoSpringBack(true);
                                        }"
2512,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 30);
                                        mCount = list.size();
                                        mAdapter.updateData(list);
                                        mRefreshLayout.refreshComplete(1200);
                                    }"
2514,onClick,"                    public void onClick(View v) {
                        mRefreshLayout.setEnableNoMoreData(false);
                        mRefreshLayout.forceLoadMore();
                    }"
2517,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithGridViewActivity.this, MainActivity.class));
        finish();
    }"
2519,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 15);
                                        mCount += list.size();
                                        mAdapter.appendData(list);
                                        mRefreshLayout.refreshComplete(100);
                                    }"
2521,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 60);
                                        mCount = list.size();
                                        mAdapter.updateData(list);
                                        mRefreshLayout.refreshComplete();
                                    }"
2525,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithFrameLayoutActivity.this, MainActivity.class));
        finish();
    }"
2527,onStatusChanged,"                    public void onStatusChanged(byte old, byte now) {
                        if (now == SmoothRefreshLayout.SR_STATUS_INIT
                                && old == SmoothRefreshLayout.SR_STATUS_COMPLETE) {"
2528,run,"                                    public void run() {
                                        mRefreshLayout.refreshComplete();
                                        String times =
                                                getString(R.string.number_of_refresh) + mCount;
                                        mTextView.setText(times);"
2529,onRefreshing,"                    public void onRefreshing() {
                        mCount++;
                        mHandler.postDelayed(
                                new Runnable() {"
2530,onLongClick,"                    public boolean onLongClick(View v) {
                        Toast.makeText(
                                        WithFrameLayoutActivity.this,
                                        ""LongClicked"","
2531,onClick,"                    public void onClick(View v) {
                        Toast.makeText(WithFrameLayoutActivity.this, ""Clicked"", Toast.LENGTH_SHORT)
                                .show();"
2533,onPureScrollPositionChanged,"    public void onPureScrollPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        mProgress = Math.min(1, indicator.getCurrentPercentOfRefreshOffset());
        mProgress = mProgress * mProgress * mProgress;
        mOffsetY = (mTextRectF.height() + mAmplitude * 2) * (1 - mProgress) + getPaddingTop();
        invalidate();"
2534,onRefreshPositionChanged,"    public void onRefreshPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        if (status == SmoothRefreshLayout.SR_STATUS_PREPARE) {"
2535,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout layout, boolean isSuccessful) {
        mStatus = SmoothRefreshLayout.SR_STATUS_COMPLETE;
    }"
2536,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout layout, IIndicator indicator) {
        if (layout.isRefreshing()) mStatus = SmoothRefreshLayout.SR_STATUS_REFRESHING;
        else mStatus = SmoothRefreshLayout.SR_STATUS_LOADING_MORE;"
2537,onRefreshPrepare,"    public void onRefreshPrepare(SmoothRefreshLayout layout) {
        mStatus = SmoothRefreshLayout.SR_STATUS_PREPARE;
    }"
2538,onReset,"    public void onReset(SmoothRefreshLayout layout) {
        mStatus = SmoothRefreshLayout.SR_STATUS_INIT;
        mProgress = 0;
    }"
2539,onFingerUp,"    public void onFingerUp(SmoothRefreshLayout layout, IIndicator indicator) {}
"
2547,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        mTextPaint.getTextBounds(mText, 0, mText.length(), mTextRect);
        heightMeasureSpec =
                MeasureSpec.makeMeasureSpec(
                        mTextRect.height() + getPaddingTop() + getPaddingBottom(),"
2561,reset,"    private void reset() {
        mMaxY = 0;
        mProgress = 0;
        mLastDrawProgressTime = 0;
        mBarExtraLength = 0;
        mGrowingTime = 0;
        mCurrentPosY = 0;
        mLastPoint[0] = 0;
        mLastPoint[1] = 0;
        mPath.reset();
    }"
2562,updateProgressBounds,"    private void updateProgressBounds() {
        final int width = getWidth();
        mProgressBounds.setEmpty();
        mProgressBounds.set(
                width / 2f - mCircleRadius - mBarWidth,
                mCurrentPosY - mCircleRadius * 2 - mDip2 * 5 - mBarWidth * 2,
                width / 2f + mCircleRadius + mBarWidth,"
2563,onPureScrollPositionChanged,"    public void onPureScrollPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        final int width = getWidth();
        if (indicator.hasTouched()) {
            mLastPoint = new float[] {indicator.getLastMovePoint()[0], mCurrentPosY};
        } else mLastPoint[0] = width / 2f;"
2565,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout layout, boolean isSuccessful) {
        mStatus = SmoothRefreshLayout.SR_STATUS_COMPLETE;
        if (layout.isRefreshSuccessful()) {
            mText =
                    getContext()
                            .getString("
2566,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout layout, IIndicator indicator) {
        mStatus = SmoothRefreshLayout.SR_STATUS_REFRESHING;
        layout.resetScrollerInterpolator();
        updateProgressBounds();
        invalidate();
    }"
2567,onRefreshPrepare,"    public void onRefreshPrepare(SmoothRefreshLayout layout) {
        layout.resetScrollerInterpolator();
        mStatus = SmoothRefreshLayout.SR_STATUS_PREPARE;
        reset();
        invalidate();
    }"
2568,onReset,"    public void onReset(SmoothRefreshLayout layout) {
        layout.resetScrollerInterpolator();
        mStatus = SmoothRefreshLayout.SR_STATUS_INIT;
        reset();
        invalidate();
    }"
2571,drawText,"    private void drawText(Canvas canvas) {
        canvas.save();
        canvas.restore();
        float textCenterY =
                mCurrentPosY + ((mTextPaint.descent() + mTextPaint.ascent()) / 2f) - mDip2 * 5;
        canvas.drawText(mText, getWidth() / 2f, textCenterY, mTextPaint);
        canvas.save();"
2573,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        mPath.reset();
        mPath.moveTo(0, 0);
        mPath.quadTo(mLastPoint[0], mLastPoint[1] * 2, getWidth(), 0);
        mPath.lineTo(0, 0);
        canvas.drawPath(mPath, mWavePaint);
        if (mStatus == SmoothRefreshLayout.SR_STATUS_REFRESHING) {
            drawProgress(canvas);"
2588,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestTwoLevelRefreshActivity.this, MainActivity.class));
        finish();
    }"
2589,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        menu.add(Menu.NONE, Menu.FIRST, Menu.NONE, R.string.disable_two_level_refresh);
        return super.onCreateOptionsMenu(menu);
    }"
2591,onStatusChanged,"                    public void onStatusChanged(byte old, byte now) {
                        if (now == SmoothRefreshLayout.SR_STATUS_COMPLETE) {
                            mRefreshLayout.setEnableInterceptEventWhileLoading(false);"
2592,run,"                                    public void run() {
                                        String times =
                                                getString(R.string.number_of_one_level_refresh)
                                                        + mCount;
                                        mRefreshLayout.refreshComplete();"
2594,run,"                                    public void run() {
                                        startActivity(
                                                new Intent(
                                                        getApplicationContext(),"
2595,onTwoLevelRefreshing,"                    public void onTwoLevelRefreshing() {
                        mRefreshLayout.setEnableInterceptEventWhileLoading(true);
                        mTwoLevelCount++;
                        mHandler.postDelayed(
                                new Runnable() {"
2599,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestScrollToAutoRefreshActivity.this, MainActivity.class));
        finish();
    }"
2607,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestScaleEffectActivity.this, MainActivity.class));
        finish();
    }"
2612,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestReleaseToRefreshActivity.this, MainActivity.class));
        finish();
    }"
2616,onLoadingMore,"                    public void onLoadingMore() {
                        mCount++;
                        mHandler.postDelayed(
                                new Runnable() {"
2621,onBackPressed,"    public void onBackPressed() {
        startActivity(
                new Intent(
                        TestRecyclerViewInNestedScrollViewInSrlActivity.this, MainActivity.class));"
2622,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        menu.add(Menu.NONE, Menu.FIRST, Menu.NONE, getString(R.string.expand_or_collapse));
        return super.onCreateOptionsMenu(menu);
    }"
2624,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 15);
                                        mCount += list.size();
                                        mAdapter.appendData(list);
                                        mRefreshLayout.refreshComplete(500);
                                    }"
2626,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 60);
                                        mCount = list.size();
                                        mAdapter.updateData(list);
                                        mRefreshLayout.refreshComplete(500);
                                    }"
2631,onBackPressed,"    public void onBackPressed() {
        startActivity(
                new Intent(TestRecyclerViewInNestedScrollViewActivity.this, MainActivity.class));
        finish();"
2641,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestQQWebStyleActivity.this, MainActivity.class));
        finish();
    }"
2646,onCheckedChanged,"    public void onCheckedChanged(RadioGroup group, @IdRes int checkedId) {
        switch (checkedId) {
            case R.id.radioButton_test_qq_activity_style_activity:"
2648,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestQQActivityStyleActivity.this, MainActivity.class));
        finish();
    }"
2656,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
    }"
2657,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestOverScrollActivity.this, MainActivity.class));
        finish();
    }"
2660,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
        mFragments.clear();
        mHandler.removeCallbacksAndMessages(null);
    }"
2661,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestNestedWithViewPagerActivity.this, MainActivity.class));
        finish();
    }"
2663,run,"                                    public void run() {
                                        for (int i = 0; i < mFragments.size(); i++) {
                                            NestedPageFragment fragment = mFragments.get(i);
                                            fragment.appendData();"
2665,run,"                                    public void run() {
                                        for (int i = 0; i < mFragments.size(); i++) {
                                            NestedPageFragment fragment = mFragments.get(i);
                                            fragment.updateData();"
2670,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestNestedViewPagerActivity.this, MainActivity.class));
        finish();
    }"
2675,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestNestedHorizontalViewsActivity.this, MainActivity.class));
        finish();
    }"
2677,run,"                                    public void run() {
                                        mViewPager.setCurrentItem(0, true);
                                        mRefreshLayout.refreshComplete();
                                        Toast.makeText(
                                                        TestNestedHorizontalViewsActivity.this,"
2681,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestNestedActivity.this, MainActivity.class));
        finish();
    }"
2690,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestMultiDirectionViewsActivity.this, MainActivity.class));
        finish();
    }"
2693,onRefreshing,"                    public void onRefreshing() {}
"
2694,run,"                                    public void run() {
                                        mViewPager.setCurrentItem(0, true);
                                        mRefreshLayout.refreshComplete();
                                    }"
2699,run,"                                    public void run() {
                                        mRefreshLayout.refreshComplete();
                                    }"
2701,isNotYetInEdgeCannotMoveHeader,"                    public boolean isNotYetInEdgeCannotMoveHeader(
                            SmoothRefreshLayout parent,
                            @Nullable View child,"
2704,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestMaterialStyleActivity.this, MainActivity.class));
        finish();
    }"
2715,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestHorizontalScaleEffectActivity.this, MainActivity.class));
        finish();
    }"
2720,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestHorizontalRefreshActivity.this, MainActivity.class));
        finish();
    }"
2721,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        return super.onCreateOptionsMenu(menu);
    }"
2723,run,"                                    public void run() {
                                        mRefreshLayout.refreshComplete();
                                        Toast.makeText(
                                                        TestHorizontalRefreshActivity.this,"
2729,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestHorizontalRecyclerViewActivity.this, MainActivity.class));
        finish();
    }"
2733,onLoadingMore,"                    public void onLoadingMore() {
                        Toast.makeText(
                                        TestHorizontalRecyclerViewActivity.this,
                                        R.string.has_been_triggered_to_load_more,"
2738,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestBottomSheetDialogActivity.this, MainActivity.class));
        finish();
    }"
2742,onClick,"                            public void onClick(View v) {
                                if (mSheetDialog == null) {
                                    mSheetDialog = new BottomSheetDialog(v.getContext());
                                    mSheetDialog.setContentView(mRootView);"
2745,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestBaseRecyclerViewAdapterActivity.this, MainActivity.class));
        finish();
    }"
2748,onLoadMoreRequested,"                    public void onLoadMoreRequested() {
                        mHandler.postDelayed(
                                new Runnable() {"
2749,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 20);
                                        mCount = list.size();
                                        mAdapter.setNewData(list);
                                        mRefreshLayout.refreshComplete();
                                    }"
2752,stop,"        private void stop() {
            mRunning = false;
            StoreHouseHeader.this.removeCallbacks(this);
        }"
2753,run,"        public void run() {
            StoreHouseHeader.this.invalidate();
            int pos = mTick % mCountPerSeg;
            for (int i = 0; i < mSegCount; i++) {
                int index = i * mCountPerSeg + pos;
                if (index > mTick) {
                    continue;"
2754,start,"        private void start() {
            mRunning = true;
            mTick = 0;
            mInterval =
                    StoreHouseHeader.this.mLoadingAniDuration
                            / StoreHouseHeader.this.mAnimations.size();
            mCountPerSeg = StoreHouseHeader.this.mLoadingAniSegDuration / mInterval;
            mSegCount = StoreHouseHeader.this.mAnimations.size() / mCountPerSeg + 1;"
2755,calculate,"    private void calculate(IIndicator indicator) {
        mOffsetX = (getWidth() - mDrawZoneWidth) / 2;
        if (mStyle.mStyle != STYLE_SCALE && mStyle.mStyle != STYLE_FOLLOW_SCALE) {
            mOffsetY = getTopOffset();
        } else {"
2756,onPureScrollPositionChanged,"    public void onPureScrollPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        calculate(indicator);
        float currentPercent = Math.min(1f, indicator.getCurrentPercentOfRefreshOffset());
        setProgress(currentPercent);
        invalidate();"
2757,onRefreshPositionChanged,"    public void onRefreshPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        calculate(indicator);
        if (status == SmoothRefreshLayout.SR_STATUS_PREPARE"
2758,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout layout, boolean isSuccessful) {
        loadFinish();
    }"
2759,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout layout, IIndicator indicator) {
        beginLoading();
    }"
2760,onRefreshPrepare,"    public void onRefreshPrepare(SmoothRefreshLayout layout) {}
"
2761,onReset,"    public void onReset(SmoothRefreshLayout layout) {
        loadFinish();
        for (int i = 0; i < mAnimations.size(); i++) {
            mAnimations.get(i).resetPos(mHorizontalRandomness);"
2768,onDraw,"    public void onDraw(Canvas canvas) {
        float progress = mProgress;
        int c1 = canvas.save();
        int len = mAnimations.size();
        for (int i = 0; i < len; i++) {
            canvas.save();
            StoreHouseBarItemAnimation storeHouseBarItem = mAnimations.get(i);"
2769,loadFinish,"    private void loadFinish() {
        mAniController.stop();
    }"
2770,beginLoading,"    private void beginLoading() {
        mAniController.start();
        invalidate();
    }"
2774,initPathWithStringRes,"    public void initPathWithStringRes(int id) {
        String[] points = getResources().getStringArray(id);
        ArrayList<float[]> pointList = new ArrayList<>(points.length);
        for (String point : points) {
            String[] x = point.split("","");
            float[] f = new float[4];"
2775,initPathWithString,"    public void initPathWithString(String str, float fontWidthInPixel, float fontHeightInPixel) {
        ArrayList<float[]> pointList =
                StoreHousePath.parsePath(str, fontWidthInPixel, fontHeightInPixel, 22);
        initPathWithPointList(pointList);"
2776,initPathWithString,"    public void initPathWithString(String str) {
        initPathWithString(str, 62, 86);
    }"
2781,onDetachedFromWindow,"    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        mAniController.stop();
        mAnimations.clear();
    }"
2788,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second_floor);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setDisplayShowHomeEnabled(true);
        getSupportActionBar().setTitle(R.string.second_floor);
    }"
2789,onLongClick,"                        public boolean onLongClick(View v) {
                            Toast.makeText(
                                            v.getContext(),
                                            ""LongClick:"" + getAdapterPosition(),"
2790,onClick,"                        public void onClick(View v) {
                            Toast.makeText(
                                            v.getContext(),"
2792,onBindViewHolder,"    public void onBindViewHolder(@NonNull RecyclerViewHolder holder, int position) {
        holder.mTextView.setText(String.valueOf(position));
        Glide.with(mContext).asBitmap().load(mList.get(position)).into(holder.mImageView);
    }"
2793,onCreateViewHolder,"    public RecyclerViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = mInflater.inflate(R.layout.layout_list_view_item, parent, false);
        return new RecyclerViewHolder(view);
    }"
2794,appendData,"    public void appendData(List<String> list) {
        int size = mList.size();
        mList.addAll(list);
        notifyItemInserted(size);
    }"
2795,insertData,"    public void insertData(List<String> list) {
        mList.addAll(0, list);
        notifyItemRangeInserted(0, list.size());
    }"
2796,updateData,"    public void updateData(List<String> list) {
        mList.clear();
        mList.addAll(list);
        notifyDataSetChanged();
    }"
2801,run,"                    public void run() {
                        mRefreshLayout.autoRefresh(ACTION_NOTIFY, true);
                    }"
2802,run,"                                    public void run() {
                                        mRefreshLayout.refreshComplete(800);
                                    }"
2805,convert,"    protected void convert(BaseViewHolder helper, String item) {
        helper.setText(R.id.textView_list_item, String.valueOf(helper.getAdapterPosition()));
        ImageView view = helper.getView(R.id.imageView_list_item);
        Glide.with(mContext).asBitmap().load(item).into(view);
    }"
2806,onLongClick,"                        public boolean onLongClick(View v) {
                            Object obj = mTextView.getTag();
                            if (obj instanceof Integer) {
                                Toast.makeText(
                                                v.getContext(),"
2807,onClick,"                        public void onClick(View v) {
                            Object obj = mTextView.getTag();
                            if (obj instanceof Integer) {
                                Toast.makeText(v.getContext(), ""Click:"" + obj, Toast.LENGTH_SHORT)"
2812,appendData,"    public void appendData(List<String> list) {
        mList.addAll(list);
        notifyDataSetChanged();
    }"
2817,onBindViewHolder,"    public void onBindViewHolder(RecyclerViewHolder holder, int position) {
        holder.mTextView.setText(String.valueOf(position));
        Glide.with(mContext).asBitmap().load(mList.get(position)).into(holder.mImageView);
    }"
2818,onCreateViewHolder,"    public RecyclerViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = mInflater.inflate(R.layout.layout_horizontal_list_view_item, parent, false);
        return new RecyclerViewHolder(view);
    }"
2821,onTwoLevelRefreshBegin,"    public void onTwoLevelRefreshBegin(
            TwoLevelSmoothRefreshLayout layout, ITwoLevelIndicator twoLevelIndicator) {
        mTextViewTitle.setText(R.string.welcome_to_secondary_menu);"
2822,onPureScrollPositionChanged,"    public void onPureScrollPositionChanged(
            SmoothRefreshLayout layout, byte status, ITwoLevelIndicator indicator) {
        if (indicator.hasJustLeftStartPosition()) mTextViewTitle.setVisibility(GONE);"
2823,onRefreshPositionChanged,"    public void onRefreshPositionChanged(
            SmoothRefreshLayout layout, byte status, ITwoLevelIndicator indicator) {
        final int currentPos = indicator.getCurrentPos();
        if (layout instanceof TwoLevelSmoothRefreshLayout) {
            TwoLevelSmoothRefreshLayout refreshLayout = (TwoLevelSmoothRefreshLayout) layout;
            if (!refreshLayout.isDisabledTwoLevelRefresh()"
2824,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout frame, boolean isSuccessful) {
        mTextViewTitle.setVisibility(VISIBLE);
        mTextViewTitle.setText(me.dkzwm.widget.srl.ext.classic.R.string.sr_refresh_complete);
    }"
2825,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout frame, ITwoLevelIndicator indicator) {
        mTextViewTitle.setText(me.dkzwm.widget.srl.ext.classic.R.string.sr_refreshing);
    }"
2826,onFingerUp,"    public void onFingerUp(SmoothRefreshLayout layout, ITwoLevelIndicator indicator) {}
"
2827,onRefreshPrepare,"    public void onRefreshPrepare(SmoothRefreshLayout frame) {
        mTextViewTitle.setVisibility(VISIBLE);
        if (frame.isEnabledPullToRefresh()) {
            mTextViewTitle.setText("
2828,onReset,"    public void onReset(SmoothRefreshLayout frame) {
        mTextViewTitle.setVisibility(VISIBLE);
        if (frame.isEnabledPullToRefresh()) {
            mTextViewTitle.setText("
2833,onPureScrollPositionChanged,"    public void onPureScrollPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {}"
2834,onRefreshPositionChanged,"    public void onRefreshPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {}"
2835,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout layout, boolean isSuccessful) {}
"
2836,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout layout, IIndicator indicator) {}
"
2838,onReset,"    public void onReset(SmoothRefreshLayout layout) {}
"
2845,onRefreshPositionChanged,"    public void onRefreshPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        final int mOffsetToRefresh = indicator.getOffsetToRefresh();
        final int currentPos = indicator.getCurrentPos();
"
2849,onReset,"    public void onReset(SmoothRefreshLayout layout) {
        mTextViewTitle.setText(R.string.brush);
        mStartedCounter = false;
        mCount = 0;
    }"
2850,onFingerUp,"    public void onFingerUp(SmoothRefreshLayout layout, IIndicator indicator) {
        final int mOffsetToRefresh = indicator.getOffsetToRefresh();
        final int currentPos = indicator.getCurrentPos();

        if (currentPos > mOffsetToRefresh) {"
2857,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout layout, boolean isSuccessful) {
        pauseAnimation();
    }"
2858,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout layout, IIndicator indicator) {
        setRenderMode(RenderMode.HARDWARE);
        setRepeatMode(LottieDrawable.RESTART);
        setRepeatCount(LottieDrawable.INFINITE);
        playAnimation();
    }"
2866,reg,"    private void reg(int samplingPointCount) {
        if (!mIsBeginning) {
            if (!mStartingDet) {"
2867,preReg,"    private int preReg(int samplingPointCount) {
        switch (samplingPointCount) {
        case 8:
        case 9:"
2868,process,"    private void process(BufferData data) {
        int size = data.getFilledSize() - 1;
        short sh = 0;
        for (int i = 0; i < size; i++) {
            short sh1 = data.mData[i];"
2869,stop,"    public void stop() {
        if (STATE_START == mState) {
            mState = STATE_STOP;"
2870,start,"    public void start() {
        if (STATE_STOP == mState) {
"
2872,freeRecognitionBuffer,"        void freeRecognitionBuffer(BufferData buffer);
    }"
2877,onStopRecognition,"    public void onStopRecognition() {
        LogHelper.d(TAG, ""stop recognition"");
    }"
2878,onRecognition,"    public void onRecognition(int index) {
        LogHelper.d(TAG, ""recognition:"" + index);
        if (null != mListener) {
            if (Common.START_TOKEN == index) {"
2879,onStartRecognition,"    public void onStartRecognition() {
        LogHelper.d(TAG, ""start recognition"");
    }"
2880,freeRecognitionBuffer,"    public void freeRecognitionBuffer(BufferData buffer) {
        if (null != buffer) {
            if (!mBuffer.putEmpty(buffer)) {"
2882,freeRecordBuffer,"    public void freeRecordBuffer(BufferData buffer) {
        if (null != buffer) {
            if (!mBuffer.putFull(buffer)) {"
2884,onStopRecord,"    public void onStopRecord() {
        LogHelper.d(TAG, ""stop record"");
    }"
2885,onStartRecord,"    public void onStartRecord() {
        LogHelper.d(TAG, ""start record"");
    }"
2886,stop,"    public void stop() {
        if (STATE_START == mState) {
            mState = STATE_PENDING;"
2888,run,"                public void run() {
                    mRecord.start();

                    LogHelper.d(TAG, ""record thread end"");

                    LogHelper.d(TAG, ""stop recognition start"");
                    stopRecognition();"
2889,run,"                public void run() {
                    mRecognition.start();
                }"
2890,start,"    public void start() {
        if (STATE_STOP == mState) {
            mState = STATE_PENDING;"
2896,onPlayStop,"    public void onPlayStop() {
        if (null != mListener) {
            mListener.onPlayEnd();"
2897,onPlayStart,"    public void onPlayStart() {
        if (null != mListener) {
            mListener.onPlayStart();"
2898,freePlayData,"    public void freePlayData(BufferData data) {
        mBuffer.putEmpty(data);
    }"
2902,freeEncodeBuffer,"    public void freeEncodeBuffer(BufferData buffer) {
        if (null != buffer) {
            mBuffer.putFull(buffer);"
2903,onStartEncode,"    public void onStartEncode() {
        LogHelper.d(TAG, ""onStartGen"");
    }"
2906,run,"                public void run() {
                    do {
                        LogHelper.d(TAG, ""encode start"");
                        mEncoder.encode(mCodes, DEFAULT_GEN_DURATION, muteInterval);"
2907,run,"                public void run() {
                    mPlayer.start();
                }"
2908,play,"    public void play(final String text, final boolean repeat, final int muteInterval) {
        if (STATE_STOP == mState && null != mCodeBook && convertTextToCodes(text)) {
            mState = STATE_PENDING;"
2909,play,"    public void play(final String text) {
        play(text, false, 0);
    }"
2910,convertTextToCodes,"    private boolean convertTextToCodes(String text) {
        boolean ret = true;

        if (!TextUtils.isEmpty(text)) {
            mCodes.clear();"
2915,gen,"    public void gen(int genRate, int duration) {
        if (STATE_START == mState) {
            mGenRate = genRate;"
2916,start,"    public void start() {
        if (STATE_STOP == mState) {
            mState = STATE_START;"
2919,freeGenBuffer,"        void freeGenBuffer(BufferData buffer);
    }"
2925,start,"    public void start() {
        if (STATE_STOP == mState) {
            switch (mChannel) {"
2927,freeRecordBuffer,"        void freeRecordBuffer(BufferData buffer);
    }"
2931,stop,"    public void stop() {
        if (STATE_START == mState && null != mAudio) {
            mState = STATE_STOP;"
2932,start,"    public void start() {
        LogHelper.d(TAG, ""start"");
        if (STATE_STOP == mState && null != mAudio) {
            mPlayedLen = 0;"
2934,freePlayData,"        void freePlayData(BufferData data);
    }"
2938,v,"    public static final int v(String classTag, String msg) {
        return v(classTag, """", msg);
    }"
2939,v,"    public static final int v(String classTag, String privateTag, String msg) {
        return Log.v(String.format(""%s %s %s"", ROOT_TAG, classTag, privateTag), msg);
    }"
2940,e,"    public static final int e(String classTag, String msg) {
        return e(classTag, """", msg);
    }"
2941,e,"    public static final int e(String classTag, String privateTag, String msg) {
        return Log.e(String.format(""%s %s %s"", ROOT_TAG, classTag, privateTag), msg);
    }"
2942,i,"    public static final int i(String classTag, String msg) {
        return i(classTag, """", msg);
    }"
2943,i,"    public static final int i(String classTag, String privateTag, String msg) {
        return Log.i(String.format(""%s %s %s"", ROOT_TAG, classTag, privateTag), msg);
    }"
2944,d,"    public static final int d(String classTag, String msg) {
        return d(classTag, """", msg);
    }"
2945,d,"    public static final int d(String classTag, String privateTag, String msg) {
        return Log.d(String.format(""%s %s %s"", ROOT_TAG, classTag, privateTag), msg);
    }"
2946,freeGenBuffer,"    public void freeGenBuffer(BufferData buffer) {
        if (null != mCallback) {
            mCallback.freeEncodeBuffer(buffer);"
2948,onStopGen,"    public void onStopGen() {
        LogHelper.d(TAG, ""end gen codes"");
    }"
2949,onStartGen,"    public void onStartGen() {
        LogHelper.d(TAG, ""start gen codes"");
    }"
2950,stop,"    public void stop() {
        if (STATE_ENCODING == mState) {
            mState = STATE_STOPED;"
2951,encode,"    public void encode(List<Integer> codes, int duration, int muteInterval) {
        if (STATE_STOPED == mState) {
            mState = STATE_ENCODING;"
2952,encode,"    public void encode(List<Integer> codes, int duration) {
        encode(codes, duration, 0);
    }"
2953,isStoped,"    public final boolean isStoped() {
        return (STATE_STOPED == mState);
    }"
2957,freeEncodeBuffer,"        void freeEncodeBuffer(BufferData buffer);
"
2960,putImpl,"    private boolean putImpl(BufferData data, BlockingQueue<BufferData> queue) {
        if (null != queue && null != data) {
            try {
                queue.put(data);"
2962,putFull,"    public boolean putFull(BufferData data) {
        return putImpl(data, mConsumeQueue);
    }"
2964,putEmpty,"    public boolean putEmpty(BufferData data) {
        return putImpl(data, mProducerQueue);
    }"
2968,reset,"    public void reset() {
        int size = mProducerQueue.size();
        for (int i = 0; i < size; ++i) {
            BufferData data = mProducerQueue.peek();
            if (null == data || null == data.mData) {
                mProducerQueue.poll();
            }"
2972,reset,"        final public void reset() {
            mFilledSize = 0;
        }"
2974,onDestroyView,"  @Override public void onDestroyView() {
    super.onDestroyView();
    unbinder.unbind();
  }"
2975,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_step_size_and_gravity, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
2978,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_stars_separation, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
2981,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_size_of_stars, container, false);
    unbinder = ButterKnife.bind(this, view);
    setHasOptionsMenu(true);
"
2982,onClick,"  public void onClick(View view) {
    Toast.makeText(getContext(), ""Clicked!"", Toast.LENGTH_SHORT).show();
  }"
2983,onRatingChanged,"  public void onRatingChanged(SimpleRatingBar simpleRatingBar, float rating, boolean fromUser) {
    String text = String.format(""%.2f"", rating);
    if (simpleRatingBar == ratingBar1) {
      rating1.setText(text);"
2985,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_rating_changed_listener, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);
"
2988,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_number_of_stars, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
2991,onCreateOptionsMenu,"  public boolean onCreateOptionsMenu(Menu menu) {
    MenuInflater inflater = getMenuInflater();
    inflater.inflate(R.menu.menu_main, menu);
    return true;
  }"
2998,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_corner_radius, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
3001,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_border_width, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
3003,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_background_colors, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
3005,startAnimations,"  private void startAnimations() {
    ratingBar1.getAnimationBuilder()
        .setRepeatCount(ValueAnimator.INFINITE)
        .setRepeatMode(ValueAnimator.REVERSE)
        .setInterpolator(new LinearInterpolator())
        .setRatingTarget(4)
        .start();"
3006,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_animated, container, false);
    unbinder = ButterKnife.bind(this, view);

    startAnimations();"
3007,onSecondaryPointerUp,"    private void onSecondaryPointerUp(MotionEvent ev) {
        final int pointerIndex = MotionEventCompat.getActionIndex(ev);
        final int pointerId = MotionEventCompat.getPointerId(ev, pointerIndex);
        if (pointerId == mActivePointerId) {
            final int newPointerIndex = pointerIndex == 0 ? 1 : 0;"
3009,dip2px,"    private int dip2px(int dipValue) {
        return (int) (dipValue * mDensity + 0.5f);
    }"
3011,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        mHalfWidth = w - dip2px(16);
        mHalfHeight = h - getPaddingTop() - getPaddingBottom();

        float lettersLen = getLettersSize();

        mLetterHeight = mHalfHeight / lettersLen;
        int textSize = (int) (mHalfHeight * 0.7f / lettersLen);
        this.mPaint.setTextSize(textSize);"
3012,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        final int action = MotionEventCompat.getActionMasked(ev);
        switch (action) {
            case MotionEvent.ACTION_DOWN:
                mActivePointerId = MotionEventCompat.getPointerId(ev, 0);"
3015,onTouchingLetterChanged,"        void onTouchingLetterChanged(String s);
    }"
3016,onClick,"            public void onClick(View v) {
                textView.setText(""OnClick "");
            }"
3017,onTouchingLetterChanged,"            public void onTouchingLetterChanged(String s) {
                Log.d(TAG, ""select "" + s);
                textView.setText(""select "" + s);
            }"
3020,showFragmentPage,"    private void showFragmentPage() {
        new FragmentDemo().showFragment(getSupportFragmentManager());
    }"
3022,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main_menu, menu);
        return true;
    }"
3028,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_list_demo);
        listView = findViewById(R.id.list);
        listView.setAdapter(new ListAdapter());
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS, WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);
"
3029,hideFragment,"    public void hideFragment() {
        fragmentManager.popBackStack();
    }"
3030,showFragment,"    public void showFragment(final FragmentManager fragmentManager) {
        this.fragmentManager = fragmentManager;
        FragmentTransaction transaction = fragmentManager.beginTransaction();
        transaction.setCustomAnimations(
                R.anim.fragmentv_slide_bottom_enter,
                0,
                0,
                R.anim.fragmentv_slide_top_exit);"
3032,onResume,"    public void onResume() {
        initData();
        super.onResume();
    }"
3033,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        rootView = inflater.inflate(R.layout.common_fragment, null);
        return rootView;
    }"
3034,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }"
3035,onClick,"            public void onClick(View v) {
                mScrollLayout.setToOpen();
            }"
3036,onClick,"            public void onClick(View v) {
                mScrollLayout.scrollToExit();
            }"
3038,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_three);
        initView();
    }"
3039,onChildScroll,"        public void onChildScroll(int top) {
        }"
3040,onScrollFinished,"        public void onScrollFinished(ScrollLayout.Status currentStatus) {
            if (currentStatus.equals(ScrollLayout.Status.EXIT)) {
                text_foot.setVisibility(View.VISIBLE);"
3041,onScrollProgressChanged,"        public void onScrollProgressChanged(float currentProgress) {
            if (currentProgress >= 0) {
                float precent = 255 * currentProgress;
                if (precent > 255) {"
3042,initGirlUrl,"    private void initGirlUrl() {
        mAllAddressList = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            Address address = new Address();"
3043,onClick,"            public void onClick(View v) {
                onBackPressed();
            }"
3045,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second);
        initGirlUrl();
        initView();
    }"
3046,onPageScrollStateChanged,"        public void onPageScrollStateChanged(int state) {
"
3047,onPageSelected,"        public void onPageSelected(int position) {
            mGirlDesText.setText(mAllAddressList.get(position).getDesContent());
        }"
3048,onPageScrolled,"        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
"
3050,onScrollFinished,"        public void onScrollFinished(ScrollLayout.Status currentStatus) {
            if (currentStatus.equals(ScrollLayout.Status.EXIT)) {
                finish();"
3051,onScrollProgressChanged,"        public void onScrollProgressChanged(float currentProgress) {
            if (currentProgress >= 0) {
                float precent = 255 * currentProgress;"
3054,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, SecondActivity.class));
            }"
3057,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();
    }"
3063,calculateInSampleSize,"    private int calculateInSampleSize(int imgWidth, int imgHeight, int maxWidth, int maxHeight) {
        int inSampleSize = 1;
        while (imgWidth / inSampleSize > maxWidth || imgHeight / inSampleSize > maxHeight) {
            inSampleSize *= 2;
        }"
3064,scroll,"    private void scroll(View thumbnail) {
        int thumbnailCoords[] = new int[2];
        thumbnail.getLocationOnScreen(thumbnailCoords);

        int thumbnailCenterX = thumbnailCoords[0] + thumbnailSize / 2;
        int thumbnailDelta = displayProps.x / 2 - thumbnailCenterX;
"
3065,initializeViewPager,"    private void initializeViewPager() {
        viewPager = (HackyViewPager) findViewById(R.id.viewPager);

        pagerAdapter = new ScreenSlidePagerAdapter(
                fragmentManager, 
                mListOfMedia, "
3066,createThumbnail,"    private Bitmap createThumbnail(Bitmap image) {
        return ThumbnailUtils.extractThumbnail(image, thumbnailSize, thumbnailSize);
    }"
3068,addThumbnail,"    private ImageView addThumbnail(Bitmap image) {
        LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(thumbnailSize, thumbnailSize);
        lp.setMargins(10, 10, 10, 10);
        Bitmap thumbnail = createThumbnail(image);

        ImageView thumbnailView = createThumbnailView(lp, thumbnail);
        thumbnailsContainer.addView(thumbnailView);
        return thumbnailView;"
3069,removeThumbnail,"    private void removeThumbnail(int position) {
        View thumbnail = thumbnailsContainer.getChildAt(position);
        if (thumbnail == null) {
            return;
        }"
3073,run,"            public void run() {
                hideThumbnails();
                isThumbnailsHidden = !isThumbnailsHidden;
            }"
3074,hideThumbnailsAfterDelay,"    private void hideThumbnailsAfterDelay(int delay) {
        horizontalScrollView.postDelayed(new Runnable() {
            @Override"
3075,from,"    public static GalleryBuilder from(ScrollGalleryView galleryView) {
        return new GalleryBuilderImpl(galleryView);
    }"
3076,removeMedia,"    public void removeMedia(int position) {
        if (position >= mListOfMedia.size() || position < 0) {
            return;
        }
        pagerAdapter.removeItem(position);"
3078,hideThumbnails,"    public void hideThumbnails() {
        setThumbnailsTransition();
        horizontalScrollView.setVisibility(GONE);
    }"
3080,hideThumbnailsAfter,"    public ScrollGalleryView hideThumbnailsAfter(int hideThumbnailsAfterDelay) {
        if (!isThumbnailsHidden) {
            this.hideThumbnailsAfterDelay = hideThumbnailsAfterDelay;
        }"
3081,hideThumbnailsOnClick,"    public ScrollGalleryView hideThumbnailsOnClick(boolean hideThumbnailsOnClick, Transition thumbnailsTransition) {
        if (!isThumbnailsHidden) {
            this.hideThumbnailsOnClick = hideThumbnailsOnClick;
            this.thumbnailsTransition = thumbnailsTransition;"
3082,hideThumbnailsOnClick,"    public ScrollGalleryView hideThumbnailsOnClick(boolean hideThumbnailsOnClick) {
        if (!isThumbnailsHidden) {
            this.hideThumbnailsOnClick = hideThumbnailsOnClick;
            if (hideThumbnailsOnClick) this.useDefaultThumbnailsTransition = true;"
3083,withHiddenThumbnails,"    public ScrollGalleryView withHiddenThumbnails(boolean isThumbnailsHidden) {
        if (this.isThumbnailsHidden && !isThumbnailsHidden) {
            showThumbnails();
        } else if (!this.isThumbnailsHidden && isThumbnailsHidden) {
            hideThumbnails();"
3088,onSuccess,"                public void onSuccess() {
                    thumbnail.setScaleType(ImageView.ScaleType.FIT_CENTER);
                }"
3089,addMedia,"    public ScrollGalleryView addMedia(List<MediaInfo> infos) {
        if (infos == null) {
            throw new NullPointerException(""Infos may not be null!"");
        }
"
3090,addMedia,"    public ScrollGalleryView addMedia(MediaInfo mediaInfo) {
        if (mediaInfo == null) {
            throw new NullPointerException(""Infos may not be null!"");
        }"
3091,onPageScrollStateChanged,"            @Override public void onPageScrollStateChanged(int state) {
                listener.onPageScrollStateChanged(state);
            }"
3092,onPageSelected,"            @Override public void onPageSelected(int position) {
                scroll(thumbnailsContainer.getChildAt(position));
                listener.onPageSelected(position);
            }"
3093,onPageScrolled,"            @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
                listener.onPageScrolled(position, positionOffset, positionOffsetPixels);
            }"
3094,addOnPageChangeListener,"    public void addOnPageChangeListener(final ViewPager.OnPageChangeListener listener) {
        viewPager.clearOnPageChangeListeners();
        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {"
3095,addOnImageLongClickListener,"    public ScrollGalleryView addOnImageLongClickListener(OnImageLongClickListener onImageLongClickListener) {
        this.onImageLongClickListener = onImageLongClickListener;
        return this;
    }"
3096,addOnImageClickListener,"    public ScrollGalleryView addOnImageClickListener(OnImageClickListener onImageClickListener) {
        this.onImageClickListener = onImageClickListener;
        return this;
    }"
3101,onClick,"        public void onClick(int position) {
            if (onImageLongClickListener != null) onImageLongClickListener.onClick(position);
        }"
3102,onClick,"        public void onClick(int position) {
            if (hideThumbnailsOnClick) {
                if (isThumbnailsHidden) {
                    showThumbnails();"
3103,onClick,"        @Override public void onClick(View v) {
            scroll(v);
            viewPager.setCurrentItem((int) v.getId(), true);
        }"
3104,onPageSelected,"        @Override public void onPageSelected(int position) {
            scroll(thumbnailsContainer.getChildAt(position));
        }"
3107,removeItem,"    public void removeItem(int position) {
        mListOfMedia.remove(position);
        notifyDataSetChanged();
    }"
3112,mediaLoader,"    public static MediaInfo mediaLoader(MediaLoader mediaLoader) {
        return new MediaInfo().setLoader(mediaLoader);
    }"
3113,isBackgroundImageActive,"    private boolean isBackgroundImageActive() {
        return photoView != null && photoView.getDrawable() != null;
    }"
3114,isViewPagerActive,"    private boolean isViewPagerActive() {
        return viewPager != null;
    }"
3115,onSaveInstanceState,"    public void onSaveInstanceState(@NonNull Bundle outState) {
        if (isViewPagerActive()) {
            outState.putBoolean(Constants.IS_LOCKED, viewPager.isLocked());
        }"
3116,onSuccess,"                public void onSuccess() {}
            });"
3119,onLongClick,"                public boolean onLongClick(View v) {
                    onImageLongClickListener.onClick(getPosition());
                    return true;
                }"
3120,onClick,"                public void onClick(View view) {
                    onImageClickListener.onClick(getPosition());
                }"
3126,isLocked,"    public boolean isLocked() {
        return isLocked;
    }"
3128,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        return !isLocked && super.onTouchEvent(ev);
    }"
3129,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent ev) {
        if(!isLocked) {
            try {
                return super.onInterceptTouchEvent(ev);"
3130,showToast,"    private void showToast(String msg) {
        Toast.makeText(this, msg, Toast.LENGTH_SHORT).show();
    }"
3131,onError,"                    public void onError(ApiException e) {
                        super.onError(e);
                        showToast(e.getMessage());
                    }"
3132,onSuccess,"                    public void onSuccess(String s) {
                        showToast(s);
                    }"
3134,onUploadOne,"    public void onUploadOne(View view) {
        File file = new File(Environment.getExternalStorageDirectory().getPath()+""/1.jpg"");
        UIProgressResponseCallBack mUIProgressResponseCallBack = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {"
3136,onSuccess,"                    public void onSuccess(String response) {
                        showToast(response);
                    }"
3138,onUploadFileMaps2,"    public void onUploadFileMaps2(View view) {
        File file = new File(Environment.getExternalStorageDirectory().getPath()+""/1.jpg"");
        UIProgressResponseCallBack mUIProgressResponseCallBack = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {"
3142,onUploadFileMaps,"    public void onUploadFileMaps(View view) {
        File file = new File(Environment.getExternalStorageDirectory().getPath()+""/1.jpg"");
        UIProgressResponseCallBack mUIProgressResponseCallBack = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {"
3150,onUploadInputStream,"    public void onUploadInputStream(View view) throws Exception {
        final UIProgressResponseCallBack listener = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {
                int progress = (int) (bytesRead * 100 / contentLength);"
3154,onUploadFile,"    public void onUploadFile(View view) throws Exception {
        final UIProgressResponseCallBack listener = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {
                int progress = (int) (bytesRead * 100 / contentLength);"
3156,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_upload);
    }"
3157,onDestroy,"    protected void onDestroy() {
        EasyHttp.cancelSubscription(mDisposable);
        super.onDestroy();
    }"
3158,onNext,"                    public void onNext(@NonNull Content2 content) {
                        mTextView.setText(content.toString());
                    }"
3159,onError,"                    public void onError(ApiException e) {
                        mTextView.setText(e.getMessage());
                    }"
3160,onStart,"                    protected void onStart() {
                    }"
3164,findView,"    protected <T extends View> T findView(@IdRes int id) {
        return (T) findViewById(id);
    }"
3165,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_search);
        mEditText = findView(R.id.edit_text);
        mTextView = findView(R.id.content_text);
        search();
    }"
3166,showToast,"    private void showToast(String msg) {
        Toast.makeText(this, msg, Toast.LENGTH_LONG).show();
    }"
3167,onFrequentlyRquest,"    public void onFrequentlyRquest(View view) {
        Intent intent = new Intent(SceneActivity.this, SearchActivity.class);
        startActivity(intent);
    }"
3169,onNext,"            public void onNext(@NonNull ResultBean resultBean) {
                showToast(resultBean.toString());
            }"
3170,onError,"            public void onError(ApiException e) {
                showToast(e.getMessage());
            }"
3178,onNext,"            public void onNext(@NonNull List<Object> objects) {
                showToast(objects.toString());
            }"
3182,onNext,"            public void onNext(SkinTestResult skinTestResult) {
                showToast(skinTestResult.toString());
            }"
3183,onError,"            public void onError(ApiException e) {
                super.onError(e);
                showToast(e.getMessage());
            }"
3185,onPoll,"    public void onPoll(View view) {
        Intent intent = new Intent(SceneActivity.this, PollActivity.class);
        startActivity(intent);
    }"
3186,onNext,"            public void onNext(@NonNull SkinTestResult skinTestResult) {
                showToast(skinTestResult.toString());
            }"
3189,apply,"            public ObservableSource<SkinTestResult> apply(@NonNull Long aLong) throws Exception {
                Log.i(""test"", ""====="" + aLong);
                return EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                        .timeStamp(true)"
3192,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scene);
    }"
3194,onDestroy,"    protected void onDestroy() {
        EasyHttp.cancelSubscription(polldisposable);
        EasyHttp.cancelSubscription(countdisposable);
        EasyHttp.cancelSubscription(ifdisposable);
        EasyHttp.cancelSubscription(filterdisposable);
        super.onDestroy();
    }"
3195,onNext,"            public void onNext(@NonNull Content content) {
                showToast(content.toString());
            }"
3199,onPollFilter,"    public void onPollFilter(View view) {
        filterdisposable = Observable.interval(0, 5, TimeUnit.SECONDS).flatMap(new Function<Long, ObservableSource<Content>>() {
            @Override"
3211,apply,"                                    public ObservableSource<? extends Content> apply(@NonNull Throwable throwable) throws Exception {
                                        return Observable.empty();
                                    }"
3213,apply,"            public ObservableSource<Content> apply(@NonNull Long aLong) throws Exception {
                return Observable.timer(5, TimeUnit.SECONDS).flatMap(new Function<Long, ObservableSource<Content>>() {
                    @Override"
3215,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_poll);
    }"
3217,verify,"        public boolean verify(String hostname, SSLSession session) {
            HttpLog.i(""############### verify "" + hostname + "" "" + this.host);
            if (this.host == null || """".equals(this.host) || !this.host.contains(hostname))
                return false;
            return true;"
3221,onScene,"    public void onScene(View view) {
        Intent intent = new Intent(MainActivity.this, SceneActivity.class);
        startActivity(intent);
    }"
3222,onNext,"            public void onNext(List<SectionItem> sectionItems) {
                showToast(sectionItems.toString());
            }"
3225,onCustomApiResult,"    public void onCustomApiResult(View view) {
        Intent intent = new Intent(this, CustomApiActivity.class);
        startActivity(intent);
    }"
3226,accept,"            public void accept(@NonNull Throwable throwable) throws Exception {
                showToast(throwable.getMessage());
            }"
3227,accept,"            public void accept(@NonNull AuthModel authModel) throws Exception {
                showToast(authModel.toString());
            }"
3228,onCustomApiCall,"    public void onCustomApiCall(View view) {
        final String name = ""18688994275"";
        final String pass = ""123456"";
        final CustomRequest request = EasyHttp.custom()
                .addConverterFactory(GsonConverterFactory.create(new Gson()))
                .sign(true)
                .timeStamp(true)
                .params(ComParamContact.Login.ACCOUNT, name)"
3230,accept,"            public void accept(@NonNull ApiResult<AuthModel> result) throws Exception {
                showToast(result.toString());
            }"
3232,onCache,"    public void onCache(View view) {
        Intent intent = new Intent(this, CacheActivity.class);
        startActivity(intent);
    }"
3233,run,"                                    public void run() {
                                        if (response != null) showToast(response.toString());
                                    }"
3235,run,"                                    public void run() {
                                        showToast(e.getMessage());
                                    }"
3236,onError,"                            public void onError(final ApiException e) {
                                mHandler.post(new Runnable() {
                                    @Override"
3242,onSync,"    public void onSync(View view) {
        new Thread(new Runnable() {
            @Override"
3243,onDownloadFile,"    public void onDownloadFile(View view) {
        Intent intent = new Intent(this, DownloadActivity.class);
        startActivity(intent);
    }"
3244,onUploadFile,"    public void onUploadFile(View view) {
        Intent intent = new Intent(this, UploadActivity.class);
        startActivity(intent);
    }"
3247,onProgressSubscriber,"    public void onProgressSubscriber(View view) {
        Observable<SkinTestResult> observable = EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)
                .execute(SkinTestResult.class);"
3250,onObservable,"    public void onObservable(View view) {
        Observable<SkinTestResult> observable = EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)
                .execute(SkinTestResult.class);"
3251,onSuccess,"                    public void onSuccess(SkinTestResult response) {
                        showToast(response.toString());
                    }"
3252,onError,"                    public void onError(ApiException e) {
                        showToast(e.getMessage());
                    }"
3253,onSubscription,"    public void onSubscription(View view) {
        Disposable disposable = EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)"
3256,onProgressDialogCallBack,"    public void onProgressDialogCallBack(View view) {
        EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)"
3276,onError,"                    public void onError(ApiException e) {
                        showToast(e.getMessage() + ""  "" + e.getCode());
                    }"
3280,onPost,"    public void onPost(View view) {
        EasyHttp.post(""v1/app/chairdressing/news/favorite"")
                .params(""newsId"", ""552"")"
3281,onSuccess,"                    public void onSuccess(SkinTestResult response) {
                        if (response != null) showToast(response.toString());
                    }"
3284,onLogin,"    public void onLogin(View view) {
        Intent intent = new Intent(MainActivity.this, LoginActivity.class);
        startActivity(intent);
    }"
3285,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        switch (id) {
            case R.id.adout_layout:
                Intent intent = new Intent(MainActivity.this, AboutActivity.class);"
3286,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }"
3287,subscribe,"            public void subscribe(@NonNull ObservableEmitter<String> e) throws Exception {
                FileUtils.getFileFromAsset(MainActivity.this, ""1.jpg"");
            }"
3288,accept,"            public void accept(@NonNull String s) throws Exception {
"
3290,showToast,"    private void showToast(String msg) {
        Toast.makeText(LoginActivity.this, msg, Toast.LENGTH_SHORT).show();
    }"
3291,startAppSettings,"    public void startAppSettings() {
        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
        intent.setData(Uri.parse(""package:"" + getPackageName()));
        startActivity(intent);
    }"
3292,onClick,"            public void onClick(DialogInterface dialog, int which) {
                startAppSettings();
            }"
3293,onClick,"            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }"
3297,onClick,"                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }"
3299,autoLogin,"    private void autoLogin() {
        LoginInfo loginCache = LoginCache.getInstance().get();
        if (loginCache != null) {
            final String user = loginCache.getUsername();"
3304,isPasswordValid,"    private boolean isPasswordValid(String password) {
        return Validator.isPassword(password);
    }"
3305,isEmailValid,"    private boolean isEmailValid(String email) {
        return Validator.isMobile(email) || Validator.isEmail(email);
    }"
3306,attemptLogin,"    private void attemptLogin() {
        mEmailView.setError(null);
        mPasswordView.setError(null);

        String email = mEmailView.getText().toString();
        String password = mPasswordView.getText().toString();

        boolean cancel = false;
        View focusView = null;

        if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {"
3307,onClick,"            public void onClick(View view) {
                attemptLogin();
            }"
3308,onEditorAction,"            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {
                if (id == R.id.login || id == EditorInfo.IME_NULL) {
                    attemptLogin();
                    return true;"
3311,onError,"                    public void onError(ApiException e) {
                        showToast(e.getMessage());
                        dialog.dismiss();
                    }"
3313,onStart,"                    public void onStart() {
                        dialog.show();
                    }"
3316,onError,"                    public void onError(final ApiException e) {
                        HttpLog.i(""======""+Thread.currentThread().getName());
                        showToast(e.getMessage());
                        dialog.dismiss();
                    }"
3318,onStart,"                    public void onStart() {
                        HttpLog.i(""======""+Thread.currentThread().getName());
                        dialog.show();
                    }"
3323,onSuccess,"                    public void onSuccess(Result result) {
                        if (result != null) showToast(result.toString());
                    }"
3326,onSuccess,"                    public void onSuccess(ArticleBean result) {
                        if (result != null) showToast(result.toString());
                    }"
3329,onSuccess,"                    public void onSuccess(List<FriendsListBean> result) {
                        if (result != null) showToast(result.toString());
                    }"
3335,onSuccess,"                    public void onSuccess(List<String> result) {
                        if (result != null) showToast(result.toString());
                    }"
3341,onSuccess,"                    public void onSuccess(ResultBean response) {
                        if (response != null) showToast(response.toString());
                    }"
3345,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_custom_api);
    }"
3350,onClearCache,"    public void onClearCache(View view) {
        EasyHttp.clearCache();
    }"
3351,onRemoveCache,"    public void onRemoveCache(View view) {
        EasyHttp.removeCache(this.getClass().getSimpleName());
    }"
3352,onComplete,"                    public void onComplete() {
"
3353,onError,"                    public void onError(@NonNull Throwable e) {
                        showToast(e.getMessage());
                    }"
3354,onNext,"                    public void onNext(@NonNull SkinTestResult skinTestResult) {
                        showToast(skinTestResult.toString());
                    }"
3355,onSubscribe,"                    public void onSubscribe(@NonNull Disposable d) {
"
3365,schedule,"    public Completable schedule() {
        return Completable.create(this);
    }"
3366,onAnimationEnd,"            public void onAnimationEnd(final Animator animation) {
                valueAnimator.removeAllListeners();
                completableSubscriber.onCompleted();
            }"
3367,onAnimationCancel,"            public void onAnimationCancel(final Animator animation) {
                animationCancelAction.call(valueAnimator);
            }"
3368,call,"    public void call(final CompletableSubscriber completableSubscriber) {
        completableSubscriber.onSubscribe(new ClearSubscription(valueAnimator::end));
        valueAnimator.addUpdateListener(valueUpdateAction::call);
        valueAnimator.start();
        valueAnimator.addListener(new AnimatorListenerAdapter() {
"
3369,from,"    public static RxValueAnimator from(final ValueAnimator valueAnimator, final Action1<ValueAnimator> valueUpdateAction,
                                       final Action1<ValueAnimator> animationCancelAction) {
        return new RxValueAnimator(valueAnimator, valueUpdateAction, animationCancelAction);"
3370,from,"    public static RxValueAnimator from(final ValueAnimator valueAnimator, final Action1<ValueAnimator> valueUpdateAction) {
        return new RxValueAnimator(valueAnimator, valueUpdateAction, aValueAnimator -> {});
    }"
3371,end,"    public void end() {
        valueAnimator.end();
        valueUpdateSubject.onCompleted();
    }"
3373,checkSubject,"    private void checkSubject() {
        if (valueUpdateSubject.hasCompleted() || valueUpdateSubject.hasThrowable()) {
            valueUpdateSubject = BehaviorSubject.create();"
3374,scheduleReversed,"    public Observable<Object> scheduleReversed() {
        checkSubject();
        valueAnimator.reverse();
        return valueUpdateSubject;
    }"
3375,schedule,"    public Observable<Object> schedule() {
        checkSubject();
        valueAnimator.start();
        return valueUpdateSubject;
    }"
3376,onAnimationEnd,"            public void onAnimationEnd(final Animator animation) {
                valueUpdateSubject.onCompleted();
            }"
3377,from,"    public static RxObservableValueAnimator from(final ValueAnimator valueAnimator) {
        return new RxObservableValueAnimator(valueAnimator);
    }"
3378,set,"    public static void set(final View view, final float x, final float y, final float alpha, final float rotation) {
        set(view, x, y, alpha);
        view.setRotation(rotation);
    }"
3379,set,"    public static void set(final View view, final float x, final float y, final float alpha) {
        view.setAlpha(alpha);
        view.setX(x);
        view.setY(y);
    }"
3380,doAfterDelay,"    public static Completable doAfterDelay(final int delay, final Action0 action) {
        return Completable.timer(delay, TimeUnit.MILLISECONDS)
                          .observeOn(AndroidSchedulers.mainThread())"
3381,fadeOut,"    public static Completable fadeOut(final View view, final int duration, final int delay) {
        return animate(view, duration, delay)
                .interpolator(new AccelerateInterpolator())"
3382,fadeOut,"    public static Completable fadeOut(final View view, final int duration) {
        return animate(view, new AccelerateInterpolator())
                .duration(duration)"
3383,fadeOut,"    public static Completable fadeOut(final View view) {
        return animate(view, new AccelerateInterpolator())
                .fadeOut()"
3384,leave,"    public static Completable leave(final View view, final int xOffset, final int yOffset) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, new AccelerateInterpolator())
                .fadeOut()"
3385,enterWithRotation,"    public static Completable enterWithRotation(final View view, final int duration, final int xOffset, final int yOffset, final int delay, final int rotation) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        final float startRotation = view.getRotation();
        return animate(view, duration, delay)
                .fadeIn()"
3386,enterViewsWithDelay,"    public static Completable enterViewsWithDelay(final int initialDelay, final int delay, final int duration, final int xOffset, final View... views) {
        return Observable.range(0, views.length)
                         .flatMap(i -> enter(views[i], duration, xOffset, 0, i * delay + initialDelay).toObservable())"
3387,enterViewsWithDelay,"    public static Completable enterViewsWithDelay(final int delay, final int duration, final int xOffset, final View... views) {
        return enterViewsWithDelay(0, delay, duration, xOffset, views);
    }"
3388,enterTogether,"    public static Completable enterTogether(final int delay, final int xOffset, final View... views) {
        return Observable.from(views)
                         .flatMap(view -> enter(view, xOffset, 0).toObservable())"
3389,enter,"    public static Completable enter(final View view, final int duration, final int xOffset, final int yOffset, final int delay) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, duration, delay)
                .interpolator(new DecelerateInterpolator())"
3390,enter,"    public static Completable enter(final View view, final int delay, final int xOffset, final int yOffset) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, new DecelerateInterpolator())
                .delay(delay)"
3391,enter,"    public static Completable enter(final View view, final int xOffset, final int yOffset) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, new DecelerateInterpolator())
                .fadeIn()"
3392,slideVertical,"    public static Completable slideVertical(final View view, final int duration, final int yOffset) {
        final float endingY = view.getY() + yOffset;
        return animate(view, new AccelerateDecelerateInterpolator())
                .duration(duration)"
3393,slideHorizontal,"    public static Completable slideHorizontal(final View view, final int duration, final int xOffset) {
        final float endingX = view.getX() + xOffset;
        return animate(view, new AccelerateDecelerateInterpolator())
                .duration(duration)"
3394,fadeInWithDelay,"    public static Completable fadeInWithDelay(final int delay, final int duration, final View... views) {
        return Observable.range(0, views.length)
                         .flatMap(i -> animate(views[i], new LinearInterpolator())"
3395,fadeIn,"    public static Completable fadeIn(final View view, final int duration, final int delay) {
        return animate(view, duration, delay)
                .interpolator(new DecelerateInterpolator())"
3396,fadeIn,"    public static Completable fadeIn(final View view, final int duration) {
        return animate(view, new DecelerateInterpolator())
                .duration(duration)"
3397,fadeIn,"    public static Completable fadeIn(final View view) {
        return animate(view).fadeIn()
                            .onAnimationCancel(aView -> aView.setAlpha(OPAQUE))"
3398,show,"    public static Completable show(final View view) {
        return animate(view, IMMEDIATE).fadeIn().schedule();
    }"
3400,hideViewGroupChildren,"    public static Completable hideViewGroupChildren(final ViewGroup... viewGroups) {
        return Observable.from(viewGroups)
                         .flatMap(viewGroup -> hideViewGroupChildren(viewGroup).toObservable())"
3401,hideViewGroupChildren,"    public static Completable hideViewGroupChildren(final ViewGroup viewGroup) {
        return Completable.fromAction(() -> hideViewGroup(viewGroup));
    }"
3402,hide,"    public static Completable hide(final View... views) {
        return Observable.from(views)
                         .flatMap(view -> hide(view).toObservable())"
3403,hide,"    public static Completable hide(final View view) {
        return animate(view, IMMEDIATE).fadeOut().schedule();
    }"
3404,animateTogether,"    public static Completable animateTogether(final Completable... completables) {
        return Completable.merge(completables);
    }"
3405,defaultInterpolator,"    private static Interpolator defaultInterpolator() {
        return new AccelerateDecelerateInterpolator();
    }"
3406,schedule,"    public Completable schedule(final boolean preTransform) {
        return Completable.create(new AnimateOnSubscribe(viewWeakRef,
                                                         preTransform ? preTransformActions : null,"
3407,schedule,"    public Completable schedule() {
        return Completable.create(new AnimateOnSubscribe(viewWeakRef, preTransformActions, animateActions, onAnimationCancelAction));
    }"
3408,onAnimationCancel,"    public RxAnimationBuilder onAnimationCancel(final Action1<View> onAnimationCancelAction) {
        this.onAnimationCancelAction = onAnimationCancelAction;
        return this;
    }"
3409,scale,"    public RxAnimationBuilder scale(final float dX, final float dY) {
        animateActions.add(animate -> animate.scaleXBy(dX).scaleYBy(dY));
        return this;
    }"
3410,scaleY,"    public RxAnimationBuilder scaleY(final float dY) {
        animateActions.add(animate -> animate.scaleYBy(dY));
        return this;
    }"
3411,scaleX,"    public RxAnimationBuilder scaleX(final float dX) {
        animateActions.add(animate -> animate.scaleXBy(dX));
        return this;
    }"
3412,translateBy,"    public RxAnimationBuilder translateBy(final int dX, final int dY, final int dZ) {
        preTransformActions.add(preTransform -> preTransform.xBy(-dX).yBy(-dY).zBy(-dZ));
        animateActions.add(animate -> animate.xBy(dX).yBy(dY).zBy(dZ));
        return this;
    }"
3413,translateBy,"    public RxAnimationBuilder translateBy(final int dX, final int dY) {
        preTransformActions.add(preTransform -> preTransform.xBy(-dX).yBy(-dY));
        animateActions.add(animate -> animate.xBy(dX).yBy(dY));
        return this;
    }"
3414,elevationBy,"    public RxAnimationBuilder elevationBy(final int dZ) {
        preTransformActions.add(preTransform -> preTransform.zBy(-dZ));
        animateActions.add(animate -> animate.zBy(dZ));
        return this;
    }"
3415,translateY,"    public RxAnimationBuilder translateY(final int dY) {
        preTransformActions.add(preTransform -> preTransform.yBy(-dY));
        animateActions.add(animate -> animate.yBy(dY));
        return this;
    }"
3416,translateX,"    public RxAnimationBuilder translateX(final int dX) {
        preTransformActions.add(preTransform -> preTransform.xBy(-dX));
        animateActions.add(animate -> animate.xBy(dX));
        return this;
    }"
3417,counterRotateBy,"    public RxAnimationBuilder counterRotateBy(final float rotation) {
        preTransformActions.add(preTransform -> preTransform.rotationBy(-rotation));
        animateActions.add(animate -> animate.rotationBy(rotation));
        return this;
    }"
3418,rotateBy,"    public RxAnimationBuilder rotateBy(final float rotation) {
        animateActions.add(animate -> animate.rotationBy(rotation));
        return this;
    }"
3419,rotate,"    public RxAnimationBuilder rotate(final float rotation) {
        animateActions.add(animate -> animate.rotation(rotation));
        return this;
    }"
3420,fadeOut,"    public RxAnimationBuilder fadeOut() {
        animateActions.add(animate -> animate.alpha(TRANSPARENT));
        return this;
    }"
3421,fadeIn,"    public RxAnimationBuilder fadeIn() {
        preTransformActions.add(preTransform -> preTransform.alpha(0f));
        animateActions.add(animate -> animate.alpha(OPAQUE));
        return this;
    }"
3422,interpolator,"    public RxAnimationBuilder interpolator(final Interpolator interpolator) {
        animateActions.add(animate -> animate.setInterpolator(interpolator));
        return this;
    }"
3423,delay,"    public RxAnimationBuilder delay(final int delay) {
        animateActions.add(animate -> animate.setStartDelay(delay));
        return this;
    }"
3424,duration,"    public RxAnimationBuilder duration(final int duration) {
        animateActions.add(animate -> animate.setDuration(duration));
        return this;
    }"
3425,animate,"    public static RxAnimationBuilder animate(final View view, final int duration, final int delay, final Interpolator interpolator) {
        return new RxAnimationBuilder(view, duration, delay, interpolator);
    }"
3426,animate,"    public static RxAnimationBuilder animate(final View view, final Interpolator interpolator) {
        return new RxAnimationBuilder(view, DEFAULT_DURATION, DEFAULT_DELAY, interpolator);
    }"
3427,animate,"    public static RxAnimationBuilder animate(final View view, final int duration, final int delay) {
        return new RxAnimationBuilder(view, duration, delay, new AccelerateDecelerateInterpolator());
    }"
3428,animate,"    public static RxAnimationBuilder animate(final int delay, final View view) {
        return new RxAnimationBuilder(view, DEFAULT_DURATION, delay, new AccelerateDecelerateInterpolator());
    }"
3429,animate,"    public static RxAnimationBuilder animate(final View view, final int duration) {
        return new RxAnimationBuilder(view, duration, DEFAULT_DELAY, new AccelerateDecelerateInterpolator());
    }"
3430,animate,"    public static RxAnimationBuilder animate(final View view) {
        return new RxAnimationBuilder(view, DEFAULT_DURATION, DEFAULT_DELAY, defaultInterpolator());
    }"
3431,isUnsubscribed,"    public boolean isUnsubscribed() {
        return isUnsubscribed;
    }"
3432,unsubscribe,"    public void unsubscribe() {
        isUnsubscribed = true;
        clearAction.call();
    }"
3433,onAnimationCancel,"                public void onAnimationCancel(final View view) {
                    onAnimationCancelAction.call(view);
                }"
3435,runAnimation,"    private void runAnimation(final CompletableSubscriber completableSubscriber, final ViewPropertyAnimatorCompat animator) {
        applyActions(animationActions, animator);
        animator.withEndAction(completableSubscriber::onCompleted)
                .start();"
3436,applyActions,"    private void applyActions(final List<Action1<ViewPropertyAnimatorCompat>> actions, final ViewPropertyAnimatorCompat animator) {
        for (final Action1<ViewPropertyAnimatorCompat> action : actions) {
            action.call(animator);"
3437,call,"    public void call(final CompletableSubscriber completableSubscriber) {
        final View view = viewWeakRef.get();
        if (view == null) {
            completableSubscriber.onCompleted();
            return;
        }
"
3439,toQualifiedClassName,"	private String toQualifiedClassName(JPackage pkg, String fileName) {
		int suffixPosition = fileName.lastIndexOf('.');
		String className = fileName.substring(0, suffixPosition);
		String qualifiedClassName = pkg.name() + ""."" + className;
		return qualifiedClassName;
	}"
3440,openBinary,"	public OutputStream openBinary(JPackage pkg, String fileName) throws IOException {
		String qualifiedClassName = toQualifiedClassName(pkg, fileName);

		JavaFileObject sourceFile = filer.createSourceFile(qualifiedClassName);
"
3441,writeTo,"	void writeTo(AbstractCodeWriter output) throws IOException;
}"
3448,dependentProperties,"	public Set<String> dependentProperties() {

		return dependentProperties;"
3449,property,"	public String property() {

		return property;"
3451,defineFields,"	public void defineFields() {
		JFieldVar var = definedClass.field(JMod.FINAL, presentationModelClass, ""presentationModel"");
		presentationModelField = JExpr.refthis(var.name());
		presentationModelFieldWithoutThis = JExpr.ref(var.name());
	}"
3454,eventMethods,"	public Set<EventMethodInfo> eventMethods() {

		return Collections.unmodifiableSet(eventMethods);"
3455,propertyDependencies,"	public Set<PropertyDependencyInfo> propertyDependencies() {

		return Collections.unmodifiableSet(propertyDependencies);"
3456,dataSetProperties,"	public Set<DataSetPropertyInfo> dataSetProperties() {

		return Collections.unmodifiableSet(dataSetProperties);"
3457,dataSetPropertyNames,"	public Set<String> dataSetPropertyNames() {

		Set<String> names = new TreeSet<String>();

		for(DataSetPropertyInfo propertyInfo : dataSetProperties()) {"
3458,properties,"	public Set<PropertyInfo> properties() {

		return Collections.unmodifiableSet(properties);"
3459,propertyNames,"	public Set<String> propertyNames() {

		Set<String> names = new TreeSet<String>();

		for(PropertyInfo propertyInfo : properties()) {"
3461,defineFields,"	public void defineFields() {
		JFieldVar var = definedClass.field(JMod.FINAL, presentationModelClass, ""itemPresentationModel"");
		presentationModelField = JExpr.refthis(var.name());
		presentationModelFieldWithoutThis = JExpr.ref(var.name());
	}"
3471,isCreatedByFactoryMethodWithoutArg,"	boolean isCreatedByFactoryMethodWithoutArg();
"
3473,itemPresentationModelObjectTypeName,"	String itemPresentationModelObjectTypeName();
"
3476,dataSetImplementationType,"	Class<? extends AbstractDataSet> dataSetImplementationType();
"
3480,defineTryToCreateFunction,"	public void defineTryToCreateFunction() {

		JMethod method = declarePublicMethodOverride(""tryToCreateFunction"", Function.class);

		JVar methodDescriptorParam = method.param(MethodDescriptor.class, ""methodDescriptor"");

		"
3481,defineTryToCreateDataSetProperty,"	public void defineTryToCreateDataSetProperty() {

		JMethod method = declarePublicMethodOverride(""tryToCreateDataSetProperty"", DataSetProperty.class);

		JVar nameParam = method.param(String.class, ""name"");

		"
3482,declarePublicMethodOverride,"	private static JMethod declarePublicMethodOverride(JDefinedClass definedClass, String methodName, Class<?> returnType) {

		JMethod method = definedClass.method(JMod.PUBLIC, returnType, methodName);

		method.annotate(Override.class);"
3483,declarePublicMethodOverride,"	private JMethod declarePublicMethodOverride(String methodName, Class<?> returnType) {

		return declarePublicMethodOverride(definedClass, methodName, returnType);"
3484,defineTryToCreateProperty,"	public void defineTryToCreateProperty() {

		try{"
3485,defineEventMethods,"	public void defineEventMethods() {

		JMethod method = declarePublicMethodOverride(""eventMethods"", setClassWithMethodDescriptor);

		
"
3486,definePropertyDependencies,"	public void definePropertyDependencies() {

		JMethod method = declarePublicMethodOverride(""propertyDependencies"", mapClassWithStringAndStringSet);

		

		JBlock body = method.body();"
3487,defineDataSetPropertyNames,"	public void defineDataSetPropertyNames() {

		JMethod method = declarePublicMethodOverride(""dataSetPropertyNames"", setClassWithString);
"
3488,newHashSetInvocation,"	private JInvocation newHashSetInvocation(Set<String> stringSet) {

		JInvocation invocation = codeModel.ref(Sets.class).staticInvoke(""newHashSet"");

		for(String str : stringSet) {"
3489,declarePublicMethodOverride,"	private static JMethod declarePublicMethodOverride(JDefinedClass definedClass, String methodName, AbstractJClass returnType) {

		JMethod method = definedClass.method(JMod.PUBLIC, returnType, methodName);

		method.annotate(Override.class);"
3490,declarePublicMethodOverride,"	private JMethod declarePublicMethodOverride(String methodName, AbstractJClass returnType) {

		return declarePublicMethodOverride(definedClass, methodName, returnType);"
3491,definePropertyNames,"	public void definePropertyNames() {

		JMethod method = declarePublicMethodOverride(""propertyNames"", setClassWithString);
"
3494,writeTo,"	public void writeTo(AbstractCodeWriter output) throws IOException {

		codeModel.build(output);"
3495,countdown,"    public void countdown(View v) {
        Intent i = new Intent();
        i.setClass(this, Test2Activity.class);
        startActivity(i);
"
3496,automatic,"    public void automatic(View v) {
        setData();
"
3499,onCheckedChanged,"            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                mRingProgress.setCorner(b);
"
3501,onStopTrackingTouch,"            public void onStopTrackingTouch(SeekBar seekBar) {
"
3502,onStartTrackingTouch,"            public void onStartTrackingTouch(SeekBar seekBar) {
"
3503,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
                mRingProgress.setSweepAngle((int) (360f * (i / 100f)));
            }"
3506,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
                mRingProgress.setRotateAngle((int) (360f * (i / 100f)));
            }"
3509,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
                mRingProgress.setRingWidthScale(i / 100f);
            }"
3510,Selected,"            public void Selected(Ring r) {
                Toast.makeText(TestActivity.this, r.getName(), Toast.LENGTH_SHORT).show();
            }"
3512,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
        if (mTimerLVRingProgress != null) {
            mTimerLVRingProgress.cancel();"
3514,stopProgressAnim,"    private void stopProgressAnim() {
        if (mTimerLVRingProgress != null) {
            mTimerLVRingProgress.cancel();"
3515,startProgressAnim,"    private void startProgressAnim() {
        if (mValueLVRingProgress == 100)
            mValueLVRingProgress = 0;

        if (mTimerLVRingProgress != null) {
            mTimerLVRingProgress.cancel();"
3516,run,"            public void run() {
                if (mValueLVRingProgress < maxTime) {
"
3517,timerTaskLVRingProgress,"    public void timerTaskLVRingProgress() {
        mTimerLVRingProgress.schedule(new TimerTask() {
            @Override"
3518,stop,"    public void stop(View v) {
        stopProgressAnim();
    }"
3519,start,"    public void start(View v) {
        mRingProgress.stopAnim();
        startProgressAnim();
    }"
3522,unmodifiable,"		static <T> Trie<T> unmodifiable(Trie<T> toWrap)
		{
			return new Unmodifiable<T>(toWrap);"
3523,entrySet,"    		public Set<Entry<CharSequence,T>> entrySet()
		{
			return Collections.unmodifiableSet(super.entrySet());"
3524,values,"    		public Collection<T> values()
		{
			return Collections.unmodifiableCollection(super.values());"
3525,keySet,"    		public Set<CharSequence> keySet()
		{
			return Collections.unmodifiableSet(super.keySet());"
3526,clear,"    		public void clear()
		{
			throw new UnsupportedOperationException(""Unmodifiable Trie"");"
3527,putAll,"    		public void putAll(Map<? extends CharSequence,? extends T> t)
		{
			throw new UnsupportedOperationException(""Unmodifiable Trie"");"
3528,remove,"    		public T remove(CharSequence key)
		{
			throw new UnsupportedOperationException(""Unmodifiable Trie"");"
3529,put,"    		public T put(CharSequence key, T value)
		{
			throw new UnsupportedOperationException(""Unmodifiable Trie"");"
3530,hashCode,"    		public int hashCode()
		{
			return wrapped.hashCode();"
3531,equals,"    		public boolean equals(Object other)
		{
			return wrapped.equals(other);"
3532,entrySet,"    		public Set<Entry<CharSequence,T>> entrySet()
		{
			return wrapped.entrySet();"
3533,values,"    		public Collection<T> values()
		{
			return wrapped.values();"
3534,keySet,"    		public Set<CharSequence> keySet()
		{
			return wrapped.keySet();"
3535,clear,"    		public void clear()
		{
			wrapped.clear();"
3536,putAll,"    		public void putAll(Map<? extends CharSequence,? extends T> t)
		{
			wrapped.putAll(t);"
3537,remove,"    		public T remove(Object key)
		{
			return wrapped.remove(key);"
3538,put,"    		public T put(CharSequence key, T value)
		{
			return wrapped.put(key, value);"
3539,get,"    		public T get(Object key)
		{
			return wrapped.get(key);"
3540,containsValue,"    		public boolean containsValue(Object val)
		{
			return wrapped.containsValue(val);"
3541,containsKey,"    		public boolean containsKey(Object key)
		{
			return wrapped.containsKey(key);"
3542,isEmpty,"    		public boolean isEmpty()
		{
			return wrapped.isEmpty();"
3543,size,"    		public int size()
		{
			return wrapped.size();"
3545,getLongestMatch,"		public Map.Entry<CharSequence,T> getLongestMatch(PushbackReader keyIn) throws IOException
		{
			return wrapped.getLongestMatch(keyIn);"
3549,getLongestMatch,"	public Map.Entry<CharSequence,T> getLongestMatch(PushbackReader keyIn) throws IOException;
	public int getMaxKeyLength();"
3550,getLongestMatch,"	public Map.Entry<CharSequence,T> getLongestMatch(CharSequence key);
	public Map.Entry<CharSequence,T> getLongestMatch(PushbackReader keyIn) throws IOException;"
3551,remainder,"    public String remainder() {
        String output = input.substring(index);
        if (pushback != null) {
            output = pushback + output;
        }"
3552,reset,"    public void reset() {
        pushback = temp;
        index = mark;
    }"
3553,mark,"    public void mark() {
        temp = pushback;
        mark = index;
    }"
3554,peek,"    public boolean peek(Character c) {
        if (pushback != null && pushback.charValue() == c) {
            return true;
        }
        if (input == null) {
            return false;
        }"
3555,peek,"    public Character peek() {
        if (pushback != null) {
            return pushback;
        }
        if (input == null) {
            return null;
        }"
3556,nextOctal,"    public Character nextOctal() {
        Character c = next();
        if (c == null) {
            return null;
        }
        if (isOctalDigit(c)) {"
3557,nextHex,"    public Character nextHex() {
        Character c = next();
        if (c == null) {
            return null;
        }
        if (isHexDigit(c)) {"
3558,next,"    public Character next() {
        if (pushback != null) {
            Character save = pushback;
            pushback = null;
            return save;
        }
        if (input == null) {"
3559,hasNext,"    public boolean hasNext() {
        if (pushback != null) {
            return true;
        }
        if (input == null) {
            return false;
        }"
3560,index,"    public int index() {
        return index;
    }"
3561,isOctalDigit,"    public static boolean isOctalDigit(Character c) {
        if (c == null) {
            return false;
        }
        char ch = c.charValue();"
3562,isHexDigit,"    public static boolean isHexDigit(Character c) {
        if (c == null) {
            return false;
        }
        char ch = c.charValue();"
3566,peek,"    public boolean peek(Integer c) {
        if (pushback != null && pushback.intValue() == c) {
            return true;
        }
        if (input == null) {
            return false;
        }"
3567,peek,"    public Integer peek() {
        if (pushback != null) {
            return pushback;
        }
        if (input == null) {
            return null;
        }"
3568,nextOctal,"    public Integer nextOctal() {
        Integer c = next();
        if (c == null) {
            return null;
        }
        if (isOctalDigit(c)) {"
3569,nextHex,"    public Integer nextHex() {
        Integer c = next();
        if (c == null) {
            return null;
        }
        if (isHexDigit(c)) {"
3570,next,"    public Integer next() {
        if (pushback != null) {
            Integer save = pushback;
            pushback = null;
            return save;
        }
        if (input == null) {
            return null;
        }"
3571,isOctalDigit,"    public static boolean isOctalDigit(Integer c) {
        if (c == null) {
            return false;
        }
        Integer ch = Integer.valueOf(c);"
3572,isHexDigit,"    public static boolean isHexDigit(Integer c) {
        if (c == null) {
            return false;
        }
        Integer ch = Integer.valueOf(c);"
3585,encodeCharacter,"    public String encodeCharacter(char[] immune, Character c) {
        if (c.charValue() == '\'') {
            return ""\'\'"";
        }"
3587,findByKey,"        static Mode findByKey(int key) {
            for (Mode m : values()) {
                if (m.key == key) {
                    return m;"
3590,decodeCharacter,"    public Character decodeCharacter(PushbackSequence<Character> input) {
        switch (mode) {
            case ANSI:
                return decodeCharacterANSI(input);"
3591,encodeCharacterMySQL,"    private String encodeCharacterMySQL(Character c) {
        char ch = c.charValue();
        if (ch == 0x00) {
            return ""\\0"";
        }
        if (ch == 0x08) {
            return ""\\b"";
        }
        if (ch == 0x09) {
            return ""\\t"";
        }
        if (ch == 0x0a) {
            return ""\\n"";
        }
        if (ch == 0x0d) {"
3592,encodeCharacterANSI,"    private String encodeCharacterANSI(Character c) {
        if (c == '\'') {
            return ""\'\'"";
        }
        if (c == '\""') {"
3597,mkEntityToCharacterTrie,"	private static synchronized Trie<Integer> mkEntityToCharacterTrie()
	{
		Trie<Integer> trie = new HashTrie<Integer>();

		for(Map.Entry<Integer, String> entry : characterToEntityMap.entrySet())"
3605,encode,"	public String encode(char[] immune, String input) {
		StringBuilder sb = new StringBuilder();
		for(int offset  = 0; offset < input.length(); ){
			final int point = input.codePointAt(offset);
			if(Character.isValidCodePoint(point)){"
3606,isEmpty,"	public boolean isEmpty()
	{
		return(size() == 0);"
3607,toString,"	public String toString()
	{
		StringBuilder sb;
		boolean first;

		if(isEmpty())
			return ""{}"";
		sb = new StringBuilder();
		first = true;
		sb.append(""{ "");
		for(Map.Entry<CharSequence,T> entry : entrySet())"
3609,equals,"	public boolean equals(Object other)
	{
		if(other == null)
			return false;
		if(!(other instanceof Map))"
3611,get,"	public T get(Object key)
	{
		if(root == null || key == null)
			return null;
		if(!(key instanceof CharSequence))"
3612,entrySet,"	public Set<Map.Entry<CharSequence,T>> entrySet()
	{
		Set<Map.Entry<CharSequence,T>> entries = new HashSet<Map.Entry<CharSequence,T>>(size());

		if(root == null)"
3613,values,"	public Collection<T> values()
	{
		ArrayList<T> values = new ArrayList<T>(size());

		if(root == null)"
3614,keySet,"	public Set<CharSequence> keySet()
	{
		Set<CharSequence> keys = new HashSet<CharSequence>(size);
		
		if(root == null)"
3615,putAll,"	public void putAll(Map<? extends CharSequence, ? extends T> map)
	{
		for(Map.Entry<? extends CharSequence, ? extends T> entry : map.entrySet())"
3616,remove,"	public T remove(Object key) throws UnsupportedOperationException
	{
		throw new UnsupportedOperationException();"
3617,put,"	public T put(CharSequence key, T value) throws NullPointerException
	{
		int len;
		T old;

		if(key == null)
			throw new NullPointerException(""Null keys are not handled"");
		if(value == null)
			throw new NullPointerException(""Null values are not handled"");
		if(root == null)
			root = new Node<T>();"
3618,containsValue,"	public boolean containsValue(Object value)
	{
		if(root == null)
			return false;"
3619,containsKey,"	public boolean containsKey(Object key)
	{
		return (get(key) != null);"
3620,clear,"	public void clear()
	{
		root = null;
		maxKeyLen = -1;
		size = 0;"
3622,getLongestMatch,"	public Map.Entry<CharSequence,T> getLongestMatch(PushbackReader keyIn) throws IOException
	{
		if(root == null || keyIn == null)
			return null;"
3626,values,"		Collection<T> values(Collection<T> values)
		{
			if(value != null)
				values.add(value);
			if(nextMap == null)
				return values;"
3627,containsValue,"		boolean containsValue(Object toFind)
		{
			if(value != null && toFind.equals(value))
				return true;
			if(nextMap == null)
				return false;"
3628,remap,"		void remap()
		{
			if(nextMap == null)
				return;
			nextMap = newNodeMap(nextMap);"
3635,newNodeMap,"		private static <T> Map<Character,Node<T>> newNodeMap(Map<Character,Node<T>> prev)
		{
			return new HashMap<Character,Node<T>>(prev);"
3636,newNodeMap,"		private static <T> Map<Character,Node<T>> newNodeMap()
		{
			return new HashMap<Character,Node<T>>();"
3637,toString,"		public String toString()
		{
			return NullSafe.toString(key) + "" => "" + NullSafe.toString(value);"
3638,hashCode,"		public int hashCode()
		{
			return NullSafe.hashCode(key) ^ NullSafe.hashCode(value);"
3639,equals,"		public boolean equals(Object o)
		{
			if(o instanceof Map.Entry)
				return equals((Map.Entry)o);"
3640,equals,"		public boolean equals(Map.Entry other)
		{
			return (NullSafe.equals(key, other.getKey()) && NullSafe.equals(value, other.getValue()));"
3644,newInstanceIfNeeded,"		static <T> Entry<T> newInstanceIfNeeded(CharSequence key, T value)
		{
			if(value == null || key == null)
				return null;"
3645,newInstanceIfNeeded,"		static <T> Entry<T> newInstanceIfNeeded(CharSequence key, int keyLength, T value)
		{
			if(value == null || key == null)
				return null;
			if(key.length() > keyLength)"
3646,decodeCharacter,"    public Character decodeCharacter(PushbackString input) {

        input.mark();
        Character first = input.next();

        if (first == null) {
            input.reset();
            return null;
        }
"
3647,encodeCharacter,"    public String encodeCharacter(char[] immune, Character c) {

        if (c.charValue() == '\'') {
            return ""\'\'"";
        }"
3649,containsCharacter,"	public boolean containsCharacter( char c, char[] array );
"
3653,getHexForNonAlphanumeric,"	public String getHexForNonAlphanumeric(int c);
"
3654,getHexForNonAlphanumeric,"	public String getHexForNonAlphanumeric(char c);
	"
3655,decodeCharacter,"	public T decodeCharacter( PushbackSequence<T> input );
"
3657,encodeCharacter,"	public String encodeCharacter( char[] immune, int codePoint );
"
3658,encodeCharacter,"	public String encodeCharacter( char[] immune, Character c );
	"
3659,encode,"	public String encode(char[] immune, String input);
"
3662,pushback,"    public void pushback(T c) {
        pushback = c;
    }"
3663,decode,"	public String decode(String input) {
		StringBuilder sb = new StringBuilder();
		PushbackSequence<Integer> pbs = new PushBackSequenceImpl(input);
		while (pbs.hasNext()) {
			Integer c = decodeCharacter(pbs);
			boolean isValid = null == c ? false:Character.isValidCodePoint(c);"
3664,containsCharacter,"    public boolean containsCharacter(char c, char[] array) {
        for (char ch : array) {
            if (c == ch) {
                return true;"
3665,toHex,"    public String toHex(int c) {
        return Integer.toHexString(c);
    }"
3666,toHex,"    public String toHex(char c) {
        return Integer.toHexString(c);
    }"
3667,toOctal,"    public String toOctal(char c) {
        return Integer.toOctalString(c);
    }"
3670,decodeCharacter,"	public T decodeCharacter( PushbackSequence<T> input ) {
		return input.next();
	}"
3671,encodeCharacter,"    public String encodeCharacter(char[] immune, int codePoint) {
        String rval = """";
        if (Character.isValidCodePoint(codePoint)) {
            rval = new StringBuilder().appendCodePoint(codePoint).toString();
        }"
3672,encodeCharacter,"    public String encodeCharacter(char[] immune, char c) {
        throw new IllegalArgumentException(""You tried to call encodeCharacter with a char.  Nope.  Use Character instead!"");
    }"
3673,encodeCharacter,"    public String encodeCharacter(char[] immune, Character c) {
        return """" + c;
    }"
3674,encode,"    public String encode(char[] immune, String input) {
        StringBuilder sb = new StringBuilder();
        for (int offset = 0; offset < input.length(); ) {
            final int point = input.codePointAt(offset);
            if (isBmpCodePoint(point)) {"
3676,decode,"	public String decode(String input) {
		StringBuilder sb = new StringBuilder();
		PushbackSequence<Character> pbs = new PushbackString(input);
		while (pbs.hasNext()) {
			Character c = decodeCharacter(pbs);
			if (c != null) {"
3677,hashCode,"  public int hashCode() {
    return thumbnail.hashCode();
  }"
3678,equals,"  @Override public boolean equals(Object obj) {
    if (obj instanceof Video) {
      Video other = (Video) obj;"
3680,isLive,"  public boolean isLive() {
    return live;
  }"
3686,isLiked,"  public boolean isLiked() {
    return liked;
  }"
3688,isFavorite,"  public boolean isFavorite() {
    return favorite;
  }"
3691,configureTitleAndThumbnail,"  private void configureTitleAndThumbnail(final Video video) {
    int maxInt = VIDEO_INFO.size();
    int randomIndex = random.nextInt(maxInt);
    String title = getKeyForIndex(randomIndex);
    video.setTitle(title);
    String thumbnail = getValueForIndex(randomIndex);
    video.setThumbnail(thumbnail);
  }"
3692,configureLiveStatus,"  private void configureLiveStatus(final Video video) {
    boolean live = random.nextBoolean();
    video.setLive(live);
  }"
3693,configureFavoriteStatus,"  private void configureFavoriteStatus(final Video video) {
    boolean favorite = random.nextBoolean();
    video.setFavorite(favorite);
  }"
3694,configureLikeStatus,"  private void configureLikeStatus(final Video video) {
    boolean liked = random.nextBoolean();
    video.setLiked(liked);
  }"
3695,generateRandomVideo,"  private Video generateRandomVideo() {
    Video video = new Video();
    configureFavoriteStatus(video);
    configureLikeStatus(video);
    configureLiveStatus(video);
    configureTitleAndThumbnail(video);
    return video;
  }"
3697,generate,"  public List<Video> generate(final int videoCount) {
    List<Video> videos = new LinkedList<Video>();
    for (int i = 0; i < videoCount; i++) {
      Video video = generateRandomVideo();
      videos.add(video);"
3707,onResume,"    public void onResume() {
        startCameraPreview();
    }"
3708,onPause,"    public void onPause() {
        stopCameraPreview();
    }"
3710,surfaceDestroyed,"    public void surfaceDestroyed(SurfaceHolder holder) {
        stopCamera();
    }"
3711,surfaceCreated,"    public void surfaceCreated(SurfaceHolder holder) {
        mSurfaceCreated = true;
        startCamera();
    }"
3712,scheduleAutoFocus,"    private void scheduleAutoFocus() {
        mAutoFocusHandler.postDelayed(doAutoFocus, 1000);
    }"
3713,onAutoFocus,"        public void onAutoFocus(boolean success, Camera camera) {
            scheduleAutoFocus();
        }"
3714,run,"        public void run() {
            if(mCamera != null && mPreviewing && mAutoFocus && mSurfaceCreated) {
                safeAutoFocus();"
3716,safeAutoFocus,"    public void safeAutoFocus() {
        try {
            mCamera.autoFocus(autoFocusCB);"
3718,stopCameraPreview,"    public void stopCameraPreview() {
        if(mCamera != null) {
            try {"
3719,startCameraPreview,"    public void startCameraPreview() {
        if(mCamera != null) {
            try {"
3721,stopCamera,"    public void stopCamera() {
        stopCameraPreview();
        mCameraManager.releaseCamera();
    }"
3722,startCamera,"    public void startCamera() {
        mCamera = mCameraManager.getCamera(mCameraType);
        startCameraPreview();
    }"
3730,onPreviewFrame,"    public void onPreviewFrame(byte[] data, Camera camera) {
        try {
            Camera.Parameters parameters = camera.getParameters();"
3731,stopCamera,"    public void stopCamera() {
        mPreview.stopCamera();
    }"
3736,createViewManagers,"    public List<ViewManager> createViewManagers(
            ReactApplicationContext reactContext) {
        return Arrays.<ViewManager>asList("
3737,createJSModules,"    public List<Class<? extends JavaScriptModule>> createJSModules() {
        return Collections.emptyList();
    }"
3738,createNativeModules,"    public List<NativeModule> createNativeModules(
            ReactApplicationContext reactContext) {
        return Collections.emptyList();"
3740,onHostDestroy,"    public void onHostDestroy() {
        mScannerView.stopCamera();
    }"
3741,onHostPause,"    public void onHostPause() {
        mScannerView.onPause();
    }"
3742,onHostResume,"    public void onHostResume() {
        mScannerView.onResume();
    }"
3743,createViewInstance,"    public BarcodeScannerView createViewInstance(ThemedReactContext context) {
        context.addLifecycleEventListener(this);
        mScannerView = new BarcodeScannerView(context);
        mScannerView.setCameraType(DEFAULT_CAMERA_TYPE);
        mScannerView.setFlash(DEFAULT_TORCH_MODE.equals(""on""));
        mScannerViewVisible = true;
        return mScannerView;
    }"
3748,scrollYIsComputed,"	public boolean scrollYIsComputed() {
		return scrollIsComputed;
	}"
3749,computeScrollY,"	public void computeScrollY() {
		mHeight = 0;
		mItemCount = getAdapter().getCount();
		if (mItemOffsetY == null) {
			mItemOffsetY = new int[mItemCount];
		}
		for (int i = 0; i < mItemCount; ++i) {"
3751,onTabReselected,"    public void onTabReselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
    }"
3752,onTabUnselected,"    public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
    }"
3753,onTabSelected,"    public void onTabSelected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
        mPager.setCurrentItem(tab.getPosition());
    }"
3754,onPageSelected,"            public void onPageSelected(int position) {
                getActionBar().setSelectedNavigationItem(position);
            }"
3759,onScrollStateChanged,"			public void onScrollStateChanged(AbsListView view, int scrollState) {
			}"
3760,onScroll,"			public void onScroll(AbsListView view, int firstVisibleItem,
					int visibleItemCount, int totalItemCount) {
				
				mScrollY = 0;
				int translationY = 0;
				
				if (mListView.scrollYIsComputed()) {
					mScrollY = mListView.getComputedScrollY();"
3761,onGlobalLayout,"					public void onGlobalLayout() {
						mQuickReturnHeight = mQuickReturnView.getHeight();
						mListView.computeScrollY();
						mCachedVerticalScrollRange = mListView.getListHeight();
					}"
3762,onActivityCreated,"	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		
		mListView = (QuickReturnListView) getListView();
		
		mQuickReturnView.setText(""Default"");
		mListView.addHeaderView(mHeader);
		
		String[] array = new String[] { ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"","
3763,onCreateView,"	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.fragment, null);
		mHeader = inflater.inflate(R.layout.header, null);
		mQuickReturnView = (TextView) view.findViewById(R.id.sticky);
		mPlaceHolder = mHeader.findViewById(R.id.placeholder);
		return view;"
3765,onScroll,"			public void onScroll(AbsListView view, int firstVisibleItem,
					int visibleItemCount, int totalItemCount) {

				mScrollY = 0;
				int translationY = 0;

				if (mListView.scrollYIsComputed()) {
					mScrollY = mListView.getComputedScrollY();"
3766,onGlobalLayout,"					public void onGlobalLayout() {
						mQuickReturnHeight = mQuickReturnView.getHeight();
						mListView.computeScrollY();
					}"
3767,onActivityCreated,"	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);

		mListView = (QuickReturnListView) getListView();

		String[] array = new String[] { ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"","
3768,onCreateView,"	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.footer_fragment, null);
		mQuickReturnView = (TextView) view.findViewById(R.id.footer);
		return view;"
3770,onAnimationEnd,"							public void onAnimationEnd(Animation animation) {
								noAnimation = false;
								mState = STATE_OFFSCREEN;
							}"
3771,onAnimationRepeat,"							public void onAnimationRepeat(Animation animation) {
"
3772,onAnimationStart,"							public void onAnimationStart(Animation animation) {
							}"
3773,onAnimationEnd,"							public void onAnimationEnd(Animation animation) {
								noAnimation = false;
								mMinRawY = rawY;
								mState = STATE_EXPANDED;
							}"
3778,onActivityCreated,"	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);

		mListView = (QuickReturnListView) getListView();

		mQuickReturnView.setText(""Animation"");
		mListView.addHeaderView(mHeader);

		String[] array = new String[] { ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"","
3780,onShare,"	public void onShare(Platform platform, ShareParams paramsToShare);
"
3783,onError,"	public final void onError(Platform platform, int action, Throwable t) {
		t.printStackTrace();

		Message msg = new Message();
		msg.arg1 = 2;
		msg.arg2 = action;
		msg.obj = t;
		UIHandler.sendMessage(msg, this);
"
3784,onComplete,"	public final void onComplete(Platform platform, int action,
			HashMap<String, Object> res) {
		Message msg = new Message();
		msg.arg1 = 1;
		msg.arg2 = action;
		msg.obj = platform;
		UIHandler.sendMessage(msg, this);"
3785,showEditPage,"	protected abstract void showEditPage(Context context, Platform platform, ShareParams sp);
"
3786,showPlatformPage,"	protected abstract void showPlatformPage(Context context);
"
3787,handleMessage,"			public boolean handleMessage(Message msg) {
				int resId = ResHelper.getStringRes(context, resOrName);
				if (resId > 0) {
					Toast.makeText(context, resId, Toast.LENGTH_SHORT).show();
				} else {"
3788,toast,"	private void toast(final String resOrName) {
		UIHandler.sendEmptyMessage(0, new Callback() {
			public boolean handleMessage(Message msg) {"
3789,shareDataToShareParams,"	final ShareParams shareDataToShareParams(Platform plat) {
		if (plat == null || shareParamsMap == null) {
			toast(""ssdk_oks_share_failed"");
			return null;
		}"
3791,prepareForEditPage,"	private void prepareForEditPage(Platform platform) {
		if (formateShareData(platform)) {
			ShareParams sp = shareDataToShareParams(platform);"
3792,shareSilently,"	final void shareSilently(Platform platform) {
		if (formateShareData(platform)) {
			ShareParams sp = shareDataToShareParams(platform);"
3793,isUseClientToShare,"	final boolean isUseClientToShare(Platform platform) {
		String name = platform.getName();
		if (""Wechat"".equals(name) || ""WechatMoments"".equals(name)
				|| ""WechatFavorite"".equals(name) || ""ShortMessage"".equals(name)
				|| ""Email"".equals(name) || ""Qzone"".equals(name)"
3795,disableSSO,"	public final void disableSSO() {
		disableSSO = true;
	}"
3803,fromValue,"	public static OnekeyShareTheme fromValue(int value) {
		for (OnekeyShareTheme theme : OnekeyShareTheme.values()) {
			if (theme.value == value) {
				return theme;"
3806,isUseClientToShare,"	protected final boolean isUseClientToShare(Platform platform) {
		return impl.isUseClientToShare(platform);
	}"
3807,formateShareData,"	protected final ShareParams formateShareData(Platform platform) {
		if (impl.formateShareData(platform)) {
			return impl.shareDataToShareParams(platform);
		}"
3808,shareSilently,"	protected final void shareSilently(Platform platform) {
		impl.shareSilently(platform);
	}"
3809,isDisableSSO,"	protected final boolean isDisableSSO() {
		return impl.disableSSO;
	}"
3814,isSilent,"	protected final boolean isSilent() {
		return impl.silent;
	}"
3816,isDialogMode,"	protected final boolean isDialogMode() {
		return impl.dialogMode;
	}"
3822,addHiddenPlatform,"	public void addHiddenPlatform(String platform) {
		HashMap<String, String> hiddenPlatforms = ResHelper.forceCast(params.get(""hiddenPlatforms""));
		hiddenPlatforms.put(platform, platform);
	}"
3825,disableSSOWhenAuthorize,"	public void disableSSOWhenAuthorize() {
		params.put(""disableSSO"", true);
	}"
3852,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
"
3865,onClick,"			@Override public void onClick(View view) {
				mPopField.popView(imageView1);
			}"
3868,toRadians,"    private static double toRadians(final double degrees) {
        return 2 * PI * degrees / 360;
    }"
3869,constructRoundedPolygonPath,"    private void constructRoundedPolygonPath(
            @NonNull final Path path,
            @IntRange(from = 3) final int sideCount,
            final float centerX,
            final float centerY,
            @FloatRange(from = 0, fromInclusive = false) final float outerRadius,
            @FloatRange(from = 0) final float cornerRadius) {"
3870,constructNonRoundedPolygonPath,"    private void constructNonRoundedPolygonPath(
            @NonNull final Path path,
            @IntRange(from = 3) final int sideCount,
            final float centerX,"
3871,constructPolygonPath,"    public void constructPolygonPath(
            @NonNull final Path path,
            @IntRange(from = 3) final int sideCount,
            final float centerX,
            final float centerY,"
3872,drawPolygon,"    public void drawPolygon(
            @NonNull final Canvas canvas,
            @IntRange(from = 3) final int sideCount,
            final float centerX,"
3873,internalGetSectionCount,"    private int internalGetSectionCount() {
        if (mSectionCount >= 0) {
            return mSectionCount;
        }
        mSectionCount = getSectionCount();"
3874,internalGetCountForSection,"    private int internalGetCountForSection(int section) {
        Integer cachedSectionCount = mSectionCountCache.get(section);
        if (cachedSectionCount != null) {
            return cachedSectionCount;
        }
        int sectionCount = getCountForSection(section);
        mSectionCountCache.put(section, sectionCount);"
3875,getSectionHeaderView,"    public abstract View getSectionHeaderView(int section, View convertView, ViewGroup parent);
"
3876,getItemView,"    public abstract View getItemView(int section, int position, View convertView, ViewGroup parent);
"
3877,getCountForSection,"    public abstract int getCountForSection(int section);
"
3879,getItemId,"    public abstract long getItemId(int section, int position);
"
3880,getItem,"    public abstract Object getItem(int section, int position);
"
3885,isSectionHeader,"    public final boolean isSectionHeader(int position) {
        int sectionStart = 0;
        for (int i = 0; i < internalGetSectionCount(); i++) {
            if (position == sectionStart) {
                return true;"
3894,notifyDataSetInvalidated,"    public void notifyDataSetInvalidated() {
        mSectionCache.clear();
        mSectionPositionCache.clear();
        mSectionCountCache.clear();
        mCount = -1;
        mSectionCount = -1;
        super.notifyDataSetInvalidated();
    }"
3895,notifyDataSetChanged,"    public void notifyDataSetChanged() {
        mSectionCache.clear();
        mSectionPositionCache.clear();
        mSectionCountCache.clear();
        mCount = -1;
        mSectionCount = -1;
        super.notifyDataSetChanged();
    }"
3896,onSectionClick,"        public abstract void onSectionClick(AdapterView<?> adapterView, View view, int section, long id);
"
3897,onItemClick,"        public abstract void onItemClick(AdapterView<?> adapterView, View view, int section, int position, long id);
"
3900,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);

        mWidthMode = MeasureSpec.getMode(widthMeasureSpec);
        mHeightMode = MeasureSpec.getMode(heightMeasureSpec);"
3903,ensurePinnedHeaderLayout,"    private void ensurePinnedHeaderLayout(View header) {
        if (header.isLayoutRequested()) {
            int widthSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth(), mWidthMode);"
3905,onScrollStateChanged,"    public void onScrollStateChanged(AbsListView view, int scrollState) {
        if (mOnScrollListener != null) {
            mOnScrollListener.onScrollStateChanged(view, scrollState);"
3910,getSectionHeaderViewType,"        public int getSectionHeaderViewType(int section);
"
3911,getSectionHeaderView,"        public View getSectionHeaderView(int section, View convertView, ViewGroup parent);
"
3912,getSectionForPosition,"        public int getSectionForPosition(int position);
"
3913,isSectionHeader,"        public boolean isSectionHeader(int position);
"
3914,onUserDeclinePermission,"    @Override protected void onUserDeclinePermission(@NonNull String permissionName) {
        Log.w(""Warning"", ""Permission ( "" + permissionName + "" ) is skipped you can request it again by calling doing such\n "" +
                ""if (permissionHelper.isExplanationNeeded(permissionName)) {\n"" +"
3916,backPressIsEnabled,"    @Override protected boolean backPressIsEnabled() {
        return false;
    }"
3919,theme,"    @Override protected int theme() {
        return R.style.noActionBar;
    }"
3921,onCreate,"    @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.fragment_activity_layout);
    }"
3922,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionFragmentHelper.requestAfterExplanation(permission);
            }"
3924,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionFragmentHelper.requestAfterExplanation(permissions);
            }"
3927,onNoPermissionNeeded,"    @Override public void onNoPermissionNeeded() {
        result.setText(""Permission(s) not needed"");
        Log.i(""onNoPermissionNeeded"", ""Permission(s) not needed"");
    }"
3929,onPermissionNeedExplanation,"    @Override public void onPermissionNeedExplanation(@NonNull String permissionName) {
        Log.i(""NeedExplanation"", ""Permission( "" + permissionName + "" ) needs Explanation"");
        if (!isSingle) {
            neededPermission = PermissionFragmentHelper.declinedPermissions(this, MULTI_PERMISSIONS);"
3930,onPermissionPreGranted,"    @Override public void onPermissionPreGranted(@NonNull String permissionsName) {
        result.setText(""Permission( "" + permissionsName + "" ) preGranted"");
        Log.i(""onPermissionPreGranted"", ""Permission( "" + permissionsName + "" ) preGranted"");
    }"
3931,onPermissionDeclined,"    @Override public void onPermissionDeclined(@NonNull String[] permissionName) {
        result.setText(""Permission(s) "" + Arrays.toString(permissionName) + "" Declined"");
        Log.i(""onPermissionDeclined"", ""Permission(s) "" + Arrays.toString(permissionName) + "" Declined"");
    }"
3932,onPermissionGranted,"    @Override public void onPermissionGranted(@NonNull String[] permissionName) {
        result.setText(""Permission(s) "" + Arrays.toString(permissionName) + "" Granted"");
        Log.i(""onPermissionGranted"", ""Permission(s) "" + Arrays.toString(permissionName) + "" Granted"");
    }"
3933,onRequestPermissionsResult,"    @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        permissionFragmentHelper.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }"
3934,onActivityResult,"    @Override public void onActivityResult(int requestCode, int resultCode, Intent data) {
        permissionFragmentHelper.onActivityForResult(requestCode);
    }"
3936,onCreate,"    @Override public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        permissionFragmentHelper = PermissionFragmentHelper.getInstance(this);
    }"
3937,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionHelper.requestAfterExplanation(permission);
            }"
3939,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionHelper.requestAfterExplanation(permissions);
            }"
3944,onPermissionNeedExplanation,"    @Override public void onPermissionNeedExplanation(@NonNull String permissionName) {
        Log.i(""NeedExplanation"", ""Permission( "" + permissionName + "" ) needs Explanation"");
        if (!isSingle) {
            neededPermission = PermissionHelper.declinedPermissions(this, MULTI_PERMISSIONS);"
3948,onRequestPermissionsResult,"    @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        permissionHelper.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }"
3949,onActivityResult,"    @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        permissionHelper.onActivityForResult(requestCode);
    }"
3951,onClick,"    @Override public void onClick(View v) {
        boolean isBadAss = v.getId() == R.id.badAss;
        Intent intent;
        if (isBadAss) {
            intent = new Intent(this, SampleActivity.class);
        } else {
            intent = new Intent(this, SamplePagerActivity.class);"
3952,onCreate,"    @Override protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main_activity);
        findViewById(R.id.badAss).setOnClickListener(this);
        findViewById(R.id.pagerActivity).setOnClickListener(this);
    }"
3954,onRepeat,"            public void onRepeat(int index) {
                Log.i(""asd"", ""onRepeat selected: "" + index);
            }"
3955,onSelected,"            public void onSelected(int index, int old) {
                Log.i(""asd"", ""selected: "" + index + "" old: "" + old);
            }"
3957,showToast,"    private void showToast(String text) {
        Toast.makeText(TestControllerActivity.this, text, Toast.LENGTH_SHORT).show();
    }"
3958,onClick,"            public void onClick(View v) {
                String text = mEdtIndex.getText().toString();
                if (TextUtils.isEmpty(text)) {
                    showToast(""input index"");
                    return;"
3959,onClick,"            public void onClick(View v) {
                String text = mEdtIndex.getText().toString();
                if (TextUtils.isEmpty(text)) {
                    showToast(""input index"");
                    return;
                }"
3965,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_test_controller);

        initView();

        initNavigation();"
3966,newRoundItem,"    private BaseTabItem newRoundItem(int drawable,int checkedDrawable,String text){
        SpecialTabRound mainTab = new SpecialTabRound(this);
        mainTab.initialize(drawable,checkedDrawable,text);
        mainTab.setTextDefaultColor(0xFF888888);
        mainTab.setTextCheckedColor(0xFF009688);
        return mainTab;
    }"
3967,newItem,"    private BaseTabItem newItem(int drawable, int checkedDrawable, String text){
        SpecialTab mainTab = new SpecialTab(this);
        mainTab.initialize(drawable,checkedDrawable,text);
        mainTab.setTextDefaultColor(0xFF888888);
        mainTab.setTextCheckedColor(0xFF009688);
        return mainTab;
    }"
3969,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mTvText.setText(""C"");
    }"
3970,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mTvText.setText(""B"");
    }"
3971,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mTvText.setText(""A"");
    }"
3972,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        mTvText = view.findViewById(R.id.tv_text);
    }"
3973,onCreateView,"    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_navigation_page, container, false);
    }"
3974,onSupportNavigateUp,"    public boolean onSupportNavigateUp() {
        return mNavController.navigateUp();
    }"
3975,initBottomNavigation,"    private void initBottomNavigation(PageNavigationView pageNavigationView) {
        NavigationController navigationController = pageNavigationView.material()
                .addItem(R.drawable.ic_favorite_gray_24dp, ""A"")
                .addItem(R.drawable.ic_favorite_gray_24dp, ""B"")"
3976,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_navigation_component);
        mNavigation = findViewById(R.id.navigation);

        mNavController = Navigation.findNavController(this, R.id.nav_host_fragment);
"
3980,navigationArchitectureComponent,"    public void navigationArchitectureComponent(View view) {
        startActivity(new Intent(this, NavigationComponentActivity.class));
    }"
3981,toTestController,"    public void toTestController(View view) {
        startActivity(new Intent(this, TestControllerActivity.class));
    }"
3982,toCsutomVertical,"    public void toCsutomVertical(View view) {
        startActivity(new Intent(this, VerticalCustomActivity.class));
    }"
3983,toVertical,"    public void toVertical(View view) {
        startActivity(new Intent(this, VerticalActivity.class));
    }"
3984,toSpecial,"    public void toSpecial(View view) {
        startActivity(new Intent(this, SpecialActivity.class));
    }"
3985,toHide,"    public void toHide(View view) {
        startActivity(new Intent(this, HideActivity.class));
    }"
3986,toBehavior,"    public void toBehavior(View view) {
        startActivity(new Intent(this, BehaviorActivity.class));
    }"
3987,toCustom2,"    public void toCustom2(View view) {
        startActivity(new Intent(this, Custom2Activity.class));
    }"
3988,toCustom,"    public void toCustom(View view) {
        startActivity(new Intent(this, CustomActivity.class));
    }"
3989,toMaterialdesign,"    public void toMaterialdesign(View view) {
        startActivity(new Intent(this, MaterialDesignActivity.class));
    }"
3990,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }"
3992,onBindViewHolder,"        public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {

            if (holder.itemView instanceof TextView) {"
3995,onCreateView,"        public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
            return inflater.inflate(R.layout.recyclerview, container, false);
        }"
4000,newItem,"    private BaseTabItem newItem(int drawable, int checkedDrawable, String text) {
        NormalItemView normalItemView = new NormalItemView(this);
        normalItemView.initialize(drawable, checkedDrawable, text);
        normalItemView.setTextDefaultColor(Color.GRAY);
        normalItemView.setTextCheckedColor(0xFF009688);
        return normalItemView;
    }"
4002,newItem_test,"    private BaseTabItem newItem_test(int drawable, int checkedDrawable) {
        TestRepeatTab testRepeatTab = new TestRepeatTab(this);
        testRepeatTab.initialize(drawable, checkedDrawable);
        return testRepeatTab;
    }"
4003,newItem,"    private BaseTabItem newItem(int drawable, int checkedDrawable) {
        OnlyIconItemView onlyIconItemView = new OnlyIconItemView(this);
        onlyIconItemView.initialize(drawable, checkedDrawable);
        return onlyIconItemView;
    }"
4008,onViewCreated,"        public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
            RecyclerView recyclerView = view.findViewById(R.id.recyclerView);
            recyclerView.setAdapter(new TestAdapter());
            recyclerView.addItemDecoration(new DividerItemDecoration(view.getContext(), DividerItemDecoration.VERTICAL));
        }"
4018,willHit,"    boolean willHit(IDanmakuItem runningItem);
"
4026,fps,"    private double fps() {
        long lastTime = System.nanoTime();
        times.addLast(lastTime);
        double NANOS = 1000000000.0;
        double difference = (lastTime - times.getFirst()) / NANOS;
        int size = times.size();
        int MAX_SIZE = 100;
        if (size > MAX_SIZE) {
            times.removeFirst();
        }"
4027,run,"                public void run() {
                    synchronized (mWaitingItems) {
                        mWaitingItems.addAll(list);
                    }"
4028,addItem,"    public void addItem(final List<IDanmakuItem> list, boolean backgroundLoad) {
        if (backgroundLoad) {
            new Thread(){"
4029,addItemToHead,"    public void addItemToHead(IDanmakuItem item) {
        synchronized (mWaitingItems) {
            this.mWaitingItems.offerFirst(item);"
4030,addItem,"    public void addItem(IDanmakuItem item) {
        synchronized (mWaitingItems) {
            this.mWaitingItems.add(item);"
4035,clearWaiting,"    private void clearWaiting(){
        if (null != mWaitingItems && !mWaitingItems.isEmpty()) {
            mWaitingItems.clear();"
4036,clearRunning,"    private void clearRunning() {
        if (null != mChannelMap && !mChannelMap.isEmpty()) {
            mChannelMap.clear();"
4037,clearItems,"    private void clearItems() {
        clearRunning();
        clearWaiting();
    }"
4038,clear,"    public void clear() {
        status = STATUS_STOP;
        clearItems();
        invalidate();
    }"
4039,hide,"    public void hide() {
        status = STATUS_PAUSE;
        invalidate();
    }"
4040,show,"    public void show() {
        status = STATUS_RUNNING;
        invalidate();
    }"
4041,isPaused,"    public boolean isPaused() {
        return STATUS_PAUSE == status;
    }"
4043,clearPlayingItems,"    private void clearPlayingItems() {
        if (mChannelMap != null) {
            synchronized (mChannelMap) {"
4045,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (status == STATUS_RUNNING) {
            try {"
4046,initChannelY,"    private void initChannelY() {
        if (mChannelY == null){
            mChannelY = new int[mMaxRow];
        }

        float rowHeight = getHeight() * (mEndYOffset - mStartYOffset) / mMaxRow;
        float baseOffset = getHeight() * mStartYOffset;"
4047,initChannelMap,"    private void initChannelMap(){
        mChannelMap = new HashMap<>(mMaxRow);
        for (int i = 0; i < mMaxRow; i++) {
            ArrayList<IDanmakuItem> runningRow= new ArrayList<IDanmakuItem>(mMaxRunningPerRow);"
4048,calculation,"    private void calculation() {
        if (mShowDebug) {
            fpsPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
            fpsPaint.setColor(Color.YELLOW);
            fpsPaint.setTextSize(20);"
4049,init,"    private void init() {
        setBackgroundColor(Color.TRANSPARENT);
        setDrawingCacheBackgroundColor(Color.TRANSPARENT);
        calculation();
    }"
4050,checkYOffset,"    private void checkYOffset(float start, float end) {
        if (start >= end ){
            throw new IllegalArgumentException(""start_Y_offset must < end_Y_offset"");
        }"
4052,dip2px,"    private static int dip2px(Context context, float dipValue) {
        final float scale = context.getResources().getDisplayMetrics().density;
        return (int) (dipValue * scale + 0.5f);
    }"
4060,release,"    public void release() {
        mContext = null;
    }"
4061,isOut,"    public boolean isOut() {
        return mCurrX < 0 && Math.abs(mCurrX) > mContentWidth;
    }"
4069,read,"            public long read(Buffer sink, long byteCount) throws IOException {
                long bytesRead = super.read(sink, byteCount);
                totalBytesRead += ((bytesRead != -1) ? bytesRead : 0);
                if (mProgressListener != null) {
                    mProgressListener.onProgress(new Progress(totalBytesRead, mResponseBody.contentLength(), bytesRead == -1));
                }"
4070,source,"    private Source source(Source source) {

        return new ForwardingSource(source) {"
4071,source,"    public BufferedSource source() {
        if (bufferedSource == null) {
            bufferedSource = Okio.buffer(source(mResponseBody.source()));
        }"
4072,contentLength,"    public long contentLength() {
        return mResponseBody.contentLength();
    }"
4073,contentType,"    public MediaType contentType() {
        return mResponseBody.contentType();
    }"
4074,write,"            public void write(Buffer source, long byteCount) throws IOException {
                super.write(source, byteCount);
                if (contentLength == 0) {
                    contentLength = contentLength();
                }
                bytesWritten += byteCount;"
4075,sink,"    private Sink sink(Sink sink) {
        return new ForwardingSink(sink) {
            long bytesWritten = 0L;"
4076,writeTo,"    public void writeTo(BufferedSink sink) throws IOException {
        if (bufferedSink == null) {
            bufferedSink = Okio.buffer(sink(sink));
        }
        requestBody.writeTo(bufferedSink);"
4077,contentLength,"    public long contentLength() throws IOException {
        return requestBody.contentLength();
    }"
4078,contentType,"    public MediaType contentType() {
        return requestBody.contentType();
    }"
4079,addProgressRequestListener,"    public static RequestProgressBody addProgressRequestListener(RequestBody requestBody, ProgressListener progressRequestListener) {
        return new RequestProgressBody(requestBody, progressRequestListener);
    }"
4080,intercept,"                    public Response intercept(Chain chain) throws IOException {
                        Response originalResponse = chain.proceed(chain.request());
                        return originalResponse.newBuilder()
                                .body(new ResponseProgressBody(originalResponse.body(), progressListener))"
4081,addProgressResponseListener,"    public static OkHttpClient addProgressResponseListener(OkHttpClient client, final ProgressListener progressListener) {
        return client.newBuilder()
                .addNetworkInterceptor(new Interceptor() {"
4084,build,"        public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {
            return new OkHttpUrlLoader(client);
        }"
4086,buildLoadData,"    public LoadData<InputStream> buildLoadData(GlideUrl model, int width, int height,
                                               Options options) {
        return new LoadData<>(model, new OkHttpStreamFetcher(client, model));"
4087,handles,"    public boolean handles(GlideUrl url) {
        return true;
    }"
4090,cancel,"    public void cancel() {
        Call local = call;
        if (local != null) {
            local.cancel();"
4091,cleanup,"    public void cleanup() {
        try {
            if (stream != null) {
                stream.close();
            }"
4092,onResponse,"    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
        responseBody = response.body();
        if (response.isSuccessful()) {
            long contentLength = responseBody.contentLength();"
4093,onFailure,"    public void onFailure(@NonNull Call call, @NonNull IOException e) {
        if (Log.isLoggable(TAG, Log.DEBUG)) {
            Log.d(TAG, ""OkHttp failed to obtain result"", e);
        }"
4096,onFailure,"                        public void onFailure(@NonNull Call<R> call, @NonNull Throwable throwable) {
                            postValue(new ApiResponse<>(throwable));
                        }"
4097,onResponse,"                        public void onResponse(@NonNull Call<R> call, @NonNull Response<R> response) {
                            postValue(new ApiResponse<>(response));
                        }"
4098,onActive,"            protected void onActive() {
                super.onActive();
                if (started.compareAndSet(false, true)) {
                    call.enqueue(new Callback<R>() {"
4099,adapt,"    public LiveData<ApiResponse<R>> adapt(@NonNull Call<R> call) {
        return new LiveData<ApiResponse<R>>() {
            AtomicBoolean started = new AtomicBoolean(false);"
4100,responseType,"    public Type responseType() {
        return responseType;
    }"
4105,applyOptions,"    void applyOptions(Context context, ArmsConfigModule.Builder builder);
}"
4107,useEventBus,"    protected boolean useEventBus() {
        return true;
    }"
4110,unDisposeAll,"    protected void unDisposeAll() {
        if (mCompositeDisposable != null) {
            mCompositeDisposable.clear();"
4111,addDispose,"    protected void addDispose(Disposable disposable) {
        if (mCompositeDisposable == null) {
            mCompositeDisposable = new CompositeDisposable();
        }"
4112,onDestroy,"    public void onDestroy() {
        super.onDestroy();
        EventBus.getDefault().unregister(this);
        unDisposeAll();
        this.mCompositeDisposable = null;
    }"
4113,onCreate,"    public void onCreate() {
        super.onCreate();
        EventBus.getDefault().register(this);
        init();
    }"
4114,onBind,"    public IBinder onBind(Intent intent) {
        return null;
    }"
4115,onDestroy,"    public void onDestroy() {
        this.mRepositoryManager = null;
    }"
4117,onFragmentVisibleChange,"    protected void onFragmentVisibleChange(boolean isVisible) {
    }"
4119,useEventBus,"    public boolean useEventBus() {
        return true;
    }"
4128,supportFragmentInjector,"    public AndroidInjector<Fragment> supportFragmentInjector() {
        return this.mFragmentInjector;
    }"
4129,activityInjector,"    public AndroidInjector<Activity> activityInjector() {
        return this.mActivityInjector;
    }"
4130,onTerminate,"    public void onTerminate() {
        super.onTerminate();
        mAppDelegate.onTerminate(this);
    }"
4131,onCreate,"    public void onCreate() {
        super.onCreate();

        mAppDelegate.onCreate(this);"
4132,attachBaseContext,"    protected void attachBaseContext(Context context) {
        super.attachBaseContext(context);
        mAppDelegate = new AppDelegate(context);
        mAppDelegate.attachBaseContext(context);
    }"
4134,onSaveInstanceState,"    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        /**"
4135,injectable,"    public boolean injectable() {
        return true;
    }"
4136,useFragment,"    public boolean useFragment() {
        return true;
    }"
4140,onConfigurationChanged,"        public void onConfigurationChanged(Configuration newConfig) {
"
4145,onTerminate,"    public void onTerminate(Application application) {
        if (mComponentCallback != null) {
            mApplication.unregisterComponentCallbacks(mComponentCallback);
        }"
4153,onTerminate,"    public void onTerminate(Application application) {
        mLifecycleInjector.onTerminate(application);
        this.mLifecycleInjector = null;
        mArmsInjector.onTerminate(application);
        this.mArmsInjector = null;
        mRepositoryInjector.onTerminate(application);
        this.mRepositoryInjector = null;
        this.mApplication = null;
    }"
4155,attachBaseContext,"    public void attachBaseContext(Context context) {
        mLifecycleInjector.attachBaseContext(context);
    }"
4157,isSuccessful,"    public boolean isSuccessful() {
        return code >= 200 && code < 300;
    }"
4160,describeContents,"    public int describeContents() {
        return 0;
    }"
4161,newArray,"        public Message[] newArray(int size) {
            return new Message[size];
        }"
4162,createFromParcel,"        public Message createFromParcel(Parcel source) {
            Message msg = Message.obtain();
            msg.readFromParcel(source);
            return msg;
        }"
4163,toString,"    public String toString() {
        StringBuilder b = new StringBuilder();
        b.append(""{"");

        if (target != null) {

            b.append("" what="");"
4167,isAsynchronous,"    public boolean isAsynchronous() {
        return (flags & FLAG_ASYNCHRONOUS) != 0;
    }"
4168,HandleMessageToTargetUnrecycle,"    public void HandleMessageToTargetUnrecycle() {
        if (target == null) throw new IllegalArgumentException(""target is null"");
        target.handleMessage(this);
    }"
4169,HandleMessageToTarget,"    public void HandleMessageToTarget() {
        if (target == null) throw new IllegalArgumentException(""target is null"");
        target.handleMessage(this);
        this.recycleUnchecked();
    }"
4171,peekData,"    public Bundle peekData() {
        return data;
    }"
4175,copyFrom,"    public void copyFrom(Message o) {
        this.flags = o.flags & ~FLAGS_TO_CLEAR_ON_COPY_FROM;
        this.what = o.what;
        this.str = o.str;
        this.presenter = o.presenter;
        this.arg1 = o.arg1;
        this.arg2 = o.arg2;
        this.obj = o.obj;
        this.objs = o.objs;
        this.replyTo = o.replyTo;
        this.sendingUid = o.sendingUid;

        if (o.data != null) {"
4177,recycle,"    public void recycle() {
        if (isInUse()) {
            if (gCheckRecycle) {
                throw new IllegalStateException(""This message cannot be recycled because it """
4178,updateCheckRecycle,"    public static void updateCheckRecycle(int targetSdkVersion) {
        if (targetSdkVersion < Build.VERSION_CODES.LOLLIPOP) {
            gCheckRecycle = false;"
4179,isFromThisPresenter,"    public boolean isFromThisPresenter(Class presenter) {
        return this.presenter.equals(presenter.getSimpleName());
    }"
4180,obtain,"    public static Message obtain(IView v, int what,
                                 int arg1, int arg2, Object obj) {
        Message m = obtain();
        m.target = v;
        m.what = what;
        m.arg1 = arg1;
        m.arg2 = arg2;
        m.obj = obj;
"
4181,obtain,"    public static Message obtain(IView v, int what, int arg1, int arg2) {
        Message m = obtain();
        m.target = v;
        m.what = what;
        m.arg1 = arg1;
        m.arg2 = arg2;

        return m;"
4182,obtain,"    public static Message obtain(IView v, int what, Object obj) {
        Message m = obtain();
        m.target = v;
        m.what = what;
        m.obj = obj;

        return m;"
4183,obtain,"    public static Message obtain(IView v, int what) {
        Message m = obtain();
        m.target = v;
        m.what = what;

        return m;"
4184,obtain,"    public static Message obtain(IView v, Object[] objs, Class presenter) {
        Message m = obtain();
        m.target = v;
        m.objs = objs;
        m.presenter = presenter.getSimpleName();
        return m;
    }"
4185,obtain,"    public static Message obtain(IView v, Object obj, Class presenter) {
        Message m = obtain();
        m.target = v;
        m.obj = obj;
        m.presenter = presenter.getSimpleName();
        return m;
    }"
4186,obtain,"    public static Message obtain(IView v, Class presenter) {
        Message m = obtain();
        m.target = v;
        m.presenter = presenter.getSimpleName();
        return m;
    }"
4187,obtain,"    public static Message obtain(IView v, Object[] objs) {
        Message m = obtain();
        m.target = v;
        m.objs = objs;
        return m;
    }"
4188,obtain,"    public static Message obtain(IView v, Object obj) {
        Message m = obtain();
        m.target = v;
        m.obj = obj;
        return m;
    }"
4189,obtain,"    public static Message obtain(IView v) {
        Message m = obtain();
        m.target = v;
        return m;
    }"
4191,obtain,"    public static Message obtain() {
        synchronized (sPoolSync) {
            if (sPool != null) {
                Message m = sPool;"
4199,addSubscribe,"    protected void addSubscribe(Subscription subscription) {
        if (mCompositeSubscription == null) {
            mCompositeSubscription = new CompositeSubscription();
        }"
4207,initView,"    protected abstract View initView(LayoutInflater inflater, ViewGroup container);
"
4208,useEventBus,"    protected boolean useEventBus() {

        return true;"
4210,onDestroyView,"    public void onDestroyView() {

        super.onDestroyView();
"
4211,onViewStateRestored,"    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {

        super.onViewStateRestored(savedInstanceState);
"
4214,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
"
4220,onRestoreInstanceState,"    protected void onRestoreInstanceState(Bundle savedInstanceState) {

        super.onRestoreInstanceState(savedInstanceState);
"
4223,_flatMapWelfarePhotos,"    private static Func1<WelfarePhotoList, Observable<WelfarePhotoInfo>> _flatMapWelfarePhotos() {
        return new Func1<WelfarePhotoList, Observable<WelfarePhotoInfo>>() {
            @Override"
4225,_flatMapPhotos,"    private static Func1<Map<String, List<BeautyPhotoInfo>>, Observable<List<BeautyPhotoInfo>>> _flatMapPhotos() {
        return new Func1<Map<String, List<BeautyPhotoInfo>>, Observable<List<BeautyPhotoInfo>>>() {
            @Override"
4226,call,"            public Observable<SpecialInfo> call(Map<String, SpecialInfo> specialMap) {
                return Observable.just(specialMap.get(specialId));
            }"
4227,_flatMapSpecial,"    private static Func1<Map<String, SpecialInfo>, Observable<SpecialInfo>> _flatMapSpecial(final String specialId) {
        return new Func1<Map<String, SpecialInfo>, Observable<SpecialInfo>>() {
            @Override"
4228,call,"            public Observable<List<VideoInfo>> call(Map<String, List<VideoInfo>> newsListMap) {
                return Observable.just(newsListMap.get(typeStr));
            }"
4229,_flatMapVideo,"    private static Func1<Map<String, List<VideoInfo>>, Observable<List<VideoInfo>>> _flatMapVideo(final String typeStr) {
        return new Func1<Map<String, List<VideoInfo>>, Observable<List<VideoInfo>>>() {
            @Override"
4230,call,"            public Observable<NewsInfo> call(Map<String, List<NewsInfo>> newsListMap) {
                return Observable.from(newsListMap.get(typeStr));
            }"
4231,_flatMapNews,"    private static Func1<Map<String, List<NewsInfo>>, Observable<NewsInfo>> _flatMapNews(final String typeStr) {
        return new Func1<Map<String, List<NewsInfo>>, Observable<NewsInfo>>() {
            @Override"
4232,call,"                public Observable<T> call(Map<String, List<T>> stringListMap) {
                    if (TextUtils.isEmpty(mMapKey)) {
                        return Observable.error(new Throwable(""Map Key is empty""));
                    }"
4233,call,"        public Observable<T> call(Observable<Map<String, List<T>>> mapObservable) {
            return  mapObservable.flatMap(new Func1<Map<String, List<T>>, Observable<T>>() {
                @Override"
4241,call,"                    public Observable<NewsDetailInfo> call(Map<String, NewsDetailInfo> newsDetailMap) {
                        return Observable.just(newsDetailMap.get(newsId));
                    }"
4245,_parseParams,"    private static String _parseParams(RequestBody body, Buffer requestBuffer) throws UnsupportedEncodingException {
        if (body.contentType() != null && !body.contentType().toString().contains(""multipart"")) {
            return URLDecoder.decode(requestBuffer.readUtf8(), ""UTF-8"");
        }"
4246,intercept,"        public Response intercept(Chain chain) throws IOException {
            final Request request = chain.request();
            Buffer requestBuffer = new Buffer();
            if (request.body() != null) {
                request.body().writeTo(requestBuffer);
            } else {
                Logger.d(""LogTAG"", ""request.body() == null"");
            }"
4249,isNewsPhotoSet,"    public static boolean isNewsPhotoSet(String skipType) {
        return NEWS_ITEM_PHOTO_SET.equals(skipType);
    }"
4250,isNewsSpecial,"    public static boolean isNewsSpecial(String skipType) {
        return NEWS_ITEM_SPECIAL.equals(skipType);
    }"
4251,clipNewsIdFromUrl,"    public static String clipNewsIdFromUrl(String url) {
        String newsId = null;
        int index = url.indexOf(NEWS_ID_PREFIX);
        if (index != -1) {
            newsId = url.substring(index, index + NEWS_ID_LENGTH);
        } else if (url.endsWith(NEWS_ID_SUFFIX)) {"
4252,isAbNews,"    public static boolean isAbNews(@NonNull NewsInfo newsBean) {
        return (newsBean.getHasHead() == HAS_HEAD &&
                newsBean.getAds() != null && newsBean.getAds().size() > 1);"
4253,getWelfarePhoto,"    Observable<WelfarePhotoList> getWelfarePhoto(@Path(""page"") int page);
"
4254,getVideoList,"    Observable<Map<String, List<VideoInfo>>> getVideoList(@Path(""id"") String id,
                                                          @Path(""startPage"") int startPage);"
4255,getBeautyPhoto,"    Observable<Map<String, List<BeautyPhotoInfo>>> getBeautyPhoto(@Query(""offset"") int offset);
"
4256,getPhotoMoreList,"    Observable<List<PhotoInfo>> getPhotoMoreList(@Path(""setId"") String setId);
"
4257,getPhotoList,"    Observable<List<PhotoInfo>> getPhotoList();
"
4258,getPhotoSet,"    Observable<PhotoSetInfo> getPhotoSet(@Path(""photoId"") String photoId);
"
4259,getNewsDetail,"    Observable<Map<String, NewsDetailInfo>> getNewsDetail(@Path(""newsId"") String newsId);
"
4260,getSpecial,"    Observable<Map<String, SpecialInfo>> getSpecial(@Path(""specialId"") String specialIde);
"
4261,getNewsList,"    Observable<Map<String, List<NewsInfo>>> getNewsList(@Path(""type"") String type, @Path(""id"") String id,
                                                        @Path(""startPage"") int startPage);"
4264,isItemCheckable,"    public boolean isItemCheckable(int position) {

        return true;"
4266,onDestroyActionMode,"    public void onDestroyActionMode(ActionMode mode) {

        helper.onDestroyActionMode();"
4268,finishActionMode,"    protected void finishActionMode() {

        helper.finishActionMode();"
4272,isChecked,"    public boolean isChecked(long itemId) {

        return helper.isChecked(itemId);"
4276,save,"    public void save(Bundle outState) {

        helper.save(outState);"
4279,positionToSelectionHandle,"        protected long positionToSelectionHandle(int position) {

            return getItemId(position);"
4286,getViewImpl,"    protected abstract View getViewImpl(int position, View convertView, ViewGroup parent);
"
4289,isChecked,"    public boolean isChecked(long position) {

        return helper.isChecked(position);"
4311,onCheckedChanged,"    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
        if (ignoreCheckedListener) {
            return;
        }
        int position = (Integer) buttonView.getTag();"
4312,initItemCheckbox,"    private void initItemCheckbox(int position, ViewGroup view) {
        CheckBox checkBox = (CheckBox) view.findViewById(android.R.id.checkbox);
        boolean checked = isChecked(position);
        checkBox.setTag(position);
        checkBox.setChecked(checked);
        checkBox.setOnCheckedChangeListener(this);
    }"
4313,itemIncludesCheckBox,"    private boolean itemIncludesCheckBox(View v) {
        if (itemIncludesCheckBox == null) {
            if (!(v instanceof ViewGroup)) {
                itemIncludesCheckBox = false;"
4315,onItemClick,"    public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {
        if (isActionModeStarted()) {
            switch (itemClickInActionModePolicy) {
            case SELECT:"
4316,onDestroyActionMode,"    public void onDestroyActionMode() {
        checkedItems.clear();
        clearActionMode();
        owner.notifyDataSetChanged();
    }"
4317,positionToSelectionHandle,"    protected long positionToSelectionHandle(int position) {
        return position;
    }"
4318,correctPositionAccountingForHeader,"    private int correctPositionAccountingForHeader(AdapterView<?> adapterView, int position) {
        ListView listView = (adapterView instanceof ListView) ? (ListView) adapterView : null;
        int headersCount = listView == null ? 0 : listView.getHeaderViewsCount();
        if (headersCount > 0) {
            position -= listView.getHeaderViewsCount();
        }"
4321,clearActionMode,"    protected abstract void clearActionMode();
"
4322,finishActionMode,"    protected abstract void finishActionMode();
    protected abstract void clearActionMode();"
4323,startActionMode,"    protected abstract void startActionMode();
    protected abstract void finishActionMode();"
4324,isActionModeStarted,"    protected abstract boolean isActionModeStarted();
    protected abstract void startActionMode();"
4325,setActionModeTitle,"    protected abstract void setActionModeTitle(String title);
    protected abstract boolean isActionModeStarted();"
4326,onItemSelectedStateChanged,"    private void onItemSelectedStateChanged() {
        int count = getCheckedItemCount();
        if (count == 0) {
            finishActionMode();
            return;
        }"
4331,isChecked,"    public boolean isChecked(long handle) {
        return checkedItems.contains(handle);
    }"
4335,checkItem,"    public void checkItem(long handle) {
        boolean wasSelected = isChecked(handle);
        if (wasSelected) {
            return;
        }
        if (!isActionModeStarted()) {
            startActionMode();
        }"
4337,save,"    public void save(Bundle outState) {
        long[] array = new long[checkedItems.size()];
        int i = 0;
        for (Long id : checkedItems) {
            array[i++] = id;
        }"
4339,checkActivity,"    public void checkActivity() {
        Context context = getContext();
        if (context instanceof ListActivity) {
            throw new RuntimeException(""ListView cannot belong to an activity which subclasses ListActivity"");"
4341,restoreSelectionFromSavedInstanceState,"    public void restoreSelectionFromSavedInstanceState(Bundle savedInstanceState) {
        if (savedInstanceState == null) {
            return;
        }
        long[] array = savedInstanceState.getLongArray(BUNDLE_KEY);
        checkedItems.clear();"
4342,clearActionMode,"    protected void clearActionMode() {
        actionMode = null;
    }"
4343,isActionModeStarted,"    protected boolean isActionModeStarted() {
        return actionMode != null;
    }"
4345,finishActionMode,"    protected void finishActionMode() {
        if (actionMode != null) {
            actionMode.finish();"
4346,startActionMode,"    protected void startActionMode() {
        try {
            Activity activity = (Activity) adapterView.getContext();"
4348,isItemCheckable,"    boolean isItemCheckable(int position);
    String getActionModeTitle(int count);"
4349,getItemClickInActionModePolicy,"    ItemClickInActionModePolicy getItemClickInActionModePolicy();
    boolean isItemCheckable(int position);"
4350,setItemClickInActionModePolicy,"    void setItemClickInActionModePolicy(ItemClickInActionModePolicy policy);
    ItemClickInActionModePolicy getItemClickInActionModePolicy();"
4351,isChecked,"    boolean isChecked(long position);
    void setItemClickInActionModePolicy(ItemClickInActionModePolicy policy);"
4352,getCheckedItemCount,"    int getCheckedItemCount();
    boolean isChecked(long position);"
4353,getCheckedItems,"    Set<Long> getCheckedItems();
    int getCheckedItemCount();"
4354,setItemChecked,"    void setItemChecked(long position, boolean checked);
    Set<Long> getCheckedItems();"
4355,save,"    void save(Bundle outState);
    void setItemChecked(long position, boolean checked);"
4356,setOnItemClickListener,"    void setOnItemClickListener(OnItemClickListener listener);
    void save(Bundle outState);"
4357,setAdapterView,"    void setAdapterView(AdapterView<? super BaseAdapter> adapterView);
    void setOnItemClickListener(OnItemClickListener listener);"
4360,onFinishInflate,"    protected void onFinishInflate() {
        super.onFinishInflate();
        
        mText1 = (TextView) findViewById(android.R.id.text1);
        mText2 = (TextView) findViewById(android.R.id.text2);"
4361,drawableStateChanged,"    protected void drawableStateChanged() {
        super.drawableStateChanged();

        Drawable drawable = getBackground();
        if (drawable != null) {"
4362,onCreateDrawableState,"    protected int[] onCreateDrawableState(int extraSpace) {
        final int[] drawableState = super.onCreateDrawableState(extraSpace + 1);
        if (isChecked()) {
            mergeDrawableStates(drawableState, CHECKED_STATE_SET);
        }"
4365,isChecked,"    public boolean isChecked() {
        return mChecked;
    }"
4366,toggle,"    public void toggle() {
        setChecked(!mChecked);
    }"
4367,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent ev) {
        return onTouchEvent(ev);
    }"
4368,performClick,"    public boolean performClick() {
        toggle();
        return super.performClick();
    }"
4379,drawableStateChanged,"    protected void drawableStateChanged() {
        super.drawableStateChanged();

        if (stateList != null) {"
4380,onCreateDrawableState,"    public int[] onCreateDrawableState(int extraSpace) {
        final int[] drawableState = super.onCreateDrawableState(extraSpace + 1);
        if (isChecked()) {
            mergeDrawableStates(drawableState, CHECKED_STATE_SET);
        }"
4381,toggle,"    public void toggle() {
        setChecked(!isChecked());
    }"
4384,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (stateList != null) {
            stateList.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());"
4388,onCreateDrawableState,"    protected int[] onCreateDrawableState(int extraSpace) {
        final int[] drawableState = super.onCreateDrawableState(extraSpace + 2);

        if (mChecked) {
            mergeDrawableStates(drawableState, CHECKED_STATE_SET);"
4394,verifyConfiguration,"    public boolean verifyConfiguration(final Configuration conf) {
        return true;
    }"
4395,getSplits,"    public List<InputSplit> getSplits(final JobContext context) throws IOException {
        final Configuration conf = context.getConfiguration();
        try {
            MongoSplitter splitterImpl = MongoSplitterFactory.getSplitter(conf);"
4396,createRecordReader,"    public RecordReader<Object, BSONObject> createRecordReader(final InputSplit split, final TaskAttemptContext context) {
        if (!(split instanceof MongoInputSplit)) {
            throw new IllegalStateException(""Creation of a new RecordReader requires a MongoInputSplit instance."");
        }
"
4406,isNoTimeout,"    public boolean isNoTimeout() {
        return MongoConfigUtil.isNoTimeout(configuration);
    }"
4410,createInputSplits,"    public boolean createInputSplits() {
        return MongoConfigUtil.createInputSplits(configuration);
    }"
4416,canReadSplitsFromSecondary,"    public boolean canReadSplitsFromSecondary() {
        return MongoConfigUtil.canReadSplitsFromSecondary(configuration);
    }"
4418,isRangeQueryEnabled,"    public boolean isRangeQueryEnabled() {
        return MongoConfigUtil.isRangeQueryEnabled(configuration);
    }"
4420,isShardChunkedSplittingEnabled,"    public boolean isShardChunkedSplittingEnabled() {
        return MongoConfigUtil.isShardChunkedSplittingEnabled(configuration);
    }"
4422,canReadSplitsFromShards,"    public boolean canReadSplitsFromShards() {
        return MongoConfigUtil.canReadSplitsFromShards(configuration);
    }"
4482,isJobBackground,"    public boolean isJobBackground() {
        return MongoConfigUtil.isJobBackground(configuration);
    }"
4484,isJobVerbose,"    public boolean isJobVerbose() {
        return MongoConfigUtil.isJobVerbose(configuration);
    }"
4485,close,"        public void close() throws IOException {
            chunkData.close();
        }"
4486,getProgress,"        public float getProgress() throws IOException, InterruptedException {
            return (float) Math.min(
              previousMatchIndex / (float) chunkSize, 1.0);"
4487,getCurrentValue,"        public Text getCurrentValue() throws IOException, InterruptedException {
            return text;
        }"
4488,getCurrentKey,"        public NullWritable getCurrentKey()
          throws IOException, InterruptedException {
            return NullWritable.get();"
4489,nextKeyValue,"        public boolean nextKeyValue() throws IOException, InterruptedException {
            if (readLast) {
                LOG.debug(""skipping the rest of this chunk because we've ""
                    + ""read beyond the end: "" + previousMatchIndex
                    + ""; read "" + totalMatches + "" matches here."");
                return false;
            }"
4492,close,"        public void close() throws IOException {
            reader.close();
        }"
4493,fileContents,"        public CharSequence fileContents() {
            return subSequence(0, length);
        }"
4494,chunkContents,"        public CharSequence chunkContents() {
            return subSequence(0, Math.min(chunkSize, length));
        }"
4495,subSequence,"        public CharSequence subSequence(final int start, final int end) {
            try {
                advanceToIndex(end);
            } catch (IOException e) {"
4496,charAt,"        public char charAt(final int index) {
            try {
                advanceToIndex(index);
            } catch (IOException e) {"
4497,advanceToIndex,"        private void advanceToIndex(final int index) throws IOException {
            if (index >= builder.length()) {
                while (index >= builder.length()) {"
4498,length,"        public int length() {
            return length;
        }"
4499,close,"        public void close() throws IOException {
            stream.close();
        }"
4500,getProgress,"        public float getProgress() throws IOException, InterruptedException {
            return readLast ? 1.0f : 0.0f;
        }"
4501,getCurrentValue,"        public BytesWritable getCurrentValue()
          throws IOException, InterruptedException {
            return bw;"
4504,initialize,"        public void initialize(
          final InputSplit split, final TaskAttemptContext context)
          throws IOException, InterruptedException {
            this.split = (GridFSSplit) split;
            readLast = false;
            buff = new byte[1024 * 1024 * 16];"
4505,createRecordReader,"    public RecordReader<NullWritable, BinaryComparable>
    createRecordReader(final InputSplit split, final TaskAttemptContext context)
      throws IOException, InterruptedException {"
4507,accept,"    public boolean accept(final Path path) {
        String pathName = path.getName().toLowerCase();
        boolean acceptable = pathName.endsWith("".bson"") && !pathName.startsWith(""."");
        LOG.info(path.toString() + "" returning "" + acceptable);
        return acceptable;
    }"
4512,isSplitable,"    protected boolean isSplitable(
      final JobContext context, final Path filename) {
        CompressionCodec codec =
          new CompressionCodecFactory("
4513,onCreate,"  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_test);
  }"
4515,onCreate,"  @Override protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_loader1);
  }"
4516,onCreate,"  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_list_test);

    rvContacts = (RecyclerView)findViewById(R.id.rvContacts);

    adapter = new ContactsAdapter();
"
4517,bind,"    public void bind(String contact) {
      tvName.setText(contact);
    }"
4519,onBindViewHolder,"  @Override public void onBindViewHolder(ContactViewHolder holder, int position) {
    final String contact = contacts.get(position);
    holder.bind(contact);
  }"
4520,onCreateViewHolder,"  @Override public ContactViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
    final LayoutInflater inflater = LayoutInflater.from(parent.getContext());
    View itemView = inflater.inflate(R.layout.item_contact, parent, false);
    return new ContactViewHolder(itemView);
  }"
4521,onCreate,"  @Override public void onCreate() {
    super.onCreate();

    LeakCanary.install(this);"
4523,setupDbEpisodes,"	private void setupDbEpisodes() {
		mDbEpisode.clear();

		DbAdapterTvShowEpisodes db = MizuuApplication.getTvEpisodeDbAdapter();

		ColumnIndexCache cache = new ColumnIndexCache();
		Cursor tempCursor = db.getAllEpisodes();"
4525,getBackdrops,"	public abstract List<String> getBackdrops(String id);
	"
4526,getCovers,"	public abstract List<String> getCovers(String id);
	"
4530,getSimilarMovies,"	public abstract List<WebMovie> getSimilarMovies(String id);
	"
4533,get,"	public abstract Movie get(String id, String json, String language);
	"
4537,hasOfflineCopy,"	public boolean hasOfflineCopy(Filepath path) {
		return getOfflineCopyFile(path).exists();
	}"
4538,isUnidentified,"	public boolean isUnidentified() {
		return 	getRuntime().equals(""0"") &&
				getReleaseYear().equals(mContext.getString(R.string.unknownYear)) &&"
4549,hasWatched,"	public boolean hasWatched() {
		return (HAS_WATCHED.equals(""0"")) ? false : true;
	}"
4553,isFavourite,"	public boolean isFavourite() {
        return FAVOURITE.equals(""1"");
    }"
4561,toWatch,"	public boolean toWatch() {
		return (!TO_WATCH.equals(""0""));
	}"
4565,compareTo,"	public int compareTo(BaseMovie another) {
		return getTitle().compareToIgnoreCase(another.getTitle());
	}"
4569,toString,"	public String toString() {
		try {
			return getTitle().substring(0, 1);"
4571,getActors,"	public abstract List<Actor> getActors(String id);
}"
4572,get,"	public abstract T get(String id, String language);
	"
4573,searchByImdbId,"	public abstract List<T> searchByImdbId(String imdbId, String language);
	"
4574,searchNgram,"	public abstract List<T> searchNgram(String query, String language);
	"
4575,search,"	public abstract List<T> search(String query, String year, String language);
	"
4576,search,"	public abstract List<T> search(String query, String language);
	"
4580,browse,"	public boolean browse(int index, boolean fromParent) {
		return browse(fromParent ? getCurrentParentFiles()[index] : getCurrentFiles()[index]);
	}"
4581,goUp,"	public boolean goUp() {
        return mParentFolder != null && browse(mParentFolder);
    }"
4596,addToResults,"	public abstract void addToResults(T folder, TreeSet<String> results);
"
4597,recursiveSearch,"	public abstract void recursiveSearch(T folder, TreeSet<String> results);
"
4599,removeUnavailableFiles,"	public abstract void removeUnavailableFiles();
"
4600,removeUnidentifiedFiles,"	public abstract void removeUnidentifiedFiles();
"
4602,clearLibrary,"	public boolean clearLibrary() {
		return mClearLibrary;
	}"
4610,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        Content content = Content.deserialize(this);

        if(content == null){
            return;"
4611,parseResource,"    public static String  parseResource(Context context, int ressource) throws IOException {
        InputStream inputStream = context.getResources().openRawResource(ressource);
        StringBuilder sb= new StringBuilder();
        BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));
        String read = br.readLine();

        while(read!= null) {
            sb.append(read);"
4612,deserialize,"    public static Content deserialize(Context context){
        try {
            String jsonString = parseResource(context, R.raw.content);
            Content content = new Gson().fromJson(jsonString,Content.class);"
4614,onStickerSelected,"    public void onStickerSelected(String categoryName, String stickerName, String stickerBitmapPath) {
        Toast.makeText(getApplicationContext(), stickerBitmapPath, Toast.LENGTH_SHORT).show();
        Log.e(""CSDN_LQR"", ""stickerBitmapPath : "" + stickerBitmapPath);
    }"
4615,onEmojiSelected,"    public void onEmojiSelected(String key) {
        Log.e(""CSDN_LQR"", ""onEmojiSelected : "" + key);
    }"
4616,onBackPressed,"    public void onBackPressed() {
        if (mElEmotion.isShown() || mLlMore.isShown()) {
            mEmotionKeyboard.interceptBackPress();"
4617,closeBottomAndKeyboard,"    private void closeBottomAndKeyboard() {
        mElEmotion.setVisibility(View.GONE);
        mLlMore.setVisibility(View.GONE);
        if (mEmotionKeyboard != null) {
            mEmotionKeyboard.interceptBackPress();"
4618,hideMoreLayout,"    private void hideMoreLayout() {
        mLlMore.setVisibility(View.GONE);
    }"
4619,showMoreLayout,"    private void showMoreLayout() {
        mLlMore.setVisibility(View.VISIBLE);
    }"
4620,hideEmotionLayout,"    private void hideEmotionLayout() {
        mElEmotion.setVisibility(View.GONE);
        mIvEmo.setImageResource(R.mipmap.ic_cheat_emo);
    }"
4621,showEmotionLayout,"    private void showEmotionLayout() {
        mElEmotion.setVisibility(View.VISIBLE);
        mIvEmo.setImageResource(R.mipmap.ic_cheat_keyboard);
    }"
4622,hideAudioButton,"    private void hideAudioButton() {
        mBtnAudio.setVisibility(View.GONE);
        mEtContent.setVisibility(View.VISIBLE);
        mIvAudio.setImageResource(R.mipmap.ic_cheat_voice);
    }"
4623,showAudioButton,"    private void showAudioButton() {
        mBtnAudio.setVisibility(View.VISIBLE);
        mEtContent.setVisibility(View.GONE);
        mIvAudio.setImageResource(R.mipmap.ic_cheat_keyboard);

        if (mFlEmotionView.isShown()) {"
4627,afterTextChanged,"            public void afterTextChanged(Editable s) {
"
4629,beforeTextChanged,"            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
"
4630,onClick,"            public void onClick(View v) {
                if (mBtnAudio.isShown()) {
                    hideAudioButton();"
4632,onEmotionSettingClick,"            public void onEmotionSettingClick(View view) {
                Toast.makeText(getApplicationContext(), ""setting"", Toast.LENGTH_SHORT).show();
            }"
4633,onEmotionAddClick,"            public void onEmotionAddClick(View view) {
                Toast.makeText(getApplicationContext(), ""add"", Toast.LENGTH_SHORT).show();
            }"
4635,initView,"    public void initView() {
        mElEmotion.attachEditText(mEtContent);
        initEmotionKeyboard();
    }"
4636,onResume,"    protected void onResume() {
        super.onResume();
        mEtContent.clearFocus();
    }"
4637,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_wx_session);
        ButterKnife.bind(this);

        initView();
        initListener();"
4638,initEmotionKeyboard,"    private void initEmotionKeyboard() {
        mEmotionKeyboard = EmotionKeyboard.with(this);
        mEmotionKeyboard.bindToContent(mLlContent);
        mEmotionKeyboard.bindToEmotionButton(mIvEmo);
        mEmotionKeyboard.bindToEditText(mEtContent);
        mEmotionKeyboard.setEmotionLayout(mElEmotion);
    }"
4639,onStickerSelected,"            public void onStickerSelected(String categoryName, String stickerName, String stickerBitmapPath) {
                String stickerPath = stickerBitmapPath;
                Toast.makeText(getApplicationContext(), stickerPath, Toast.LENGTH_SHORT).show();
            }"
4640,onEmojiSelected,"            public void onEmojiSelected(String key) {
"
4644,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_simple_session);
        ButterKnife.bind(this);

        initEmotionKeyboard();
        initView();"
4645,onClick,"            public void onClick(View v) {
                Intent intent = new Intent(MainActivity.this, WxSessionActivity.class);
                startActivity(intent);
            }"
4646,onClick,"            public void onClick(View v) {
                Intent intent = new Intent(MainActivity.this, SimpleSessionActivity.class);
                startActivity(intent);
            }"
4648,displayImage,"            public void displayImage(Context context, String path, ImageView imageView) {
                Glide.with(context).load(path).centerCrop().diskCacheStrategy(DiskCacheStrategy.SOURCE).into(imageView);
            }"
4649,onCreate,"    public void onCreate() {
        super.onCreate();
        LQREmotionKit.init(this, new IImageLoader() {
            @Override"
4651,drawableStateChanged,"    protected void drawableStateChanged() {
        if (touchFeedbackDrawable != null) {
            touchFeedbackDrawable.setState(getDrawableState());
            invalidate();"
4652,dispatchDraw,"    protected void dispatchDraw(Canvas canvas) {
        super.dispatchDraw(canvas);
        if (touchFeedbackDrawable != null) {
            touchFeedbackDrawable.setBounds(0, 0, getWidth(), getHeight());"
4656,onScrollChanged,"    protected void onScrollChanged(int l, int t, int oldl, int oldt) {
        super.onScrollChanged(l, t, oldl, oldt);

"
4659,onListScroll,"        public void onListScroll(View view, float deltaY);
    }"
4676,onBuddyItemClicked,"        void onBuddyItemClicked(AdapterView<?> parent, View view, int buddy, int position, long id);
    }"
4681,cancelClick,"    private void cancelClick(float eventY) {
        if (mDownView != null && (Math.abs(mDownEventY - eventY) > CANCEL_CLICK_LIMIT)) {
            mDownView.setPressed(false);"
4682,actionMove,"    private void actionMove(MotionEvent event) {
        cancelClick(event.getY());
    }"
4683,actionUp,"    private void actionUp(ListView list) {
        mActionDown = false;
        performClick(list);
    }"
4684,run,"                public void run() {
                    if (isUserInteracting) {
                        if (mDownView != null) {"
4687,startClickSelection,"    private void startClickSelection(MotionEvent event, ListView list, float eventY) {
        if (!isUserInteracting || mSpeed == 0) {
            findViewClicked(event, eventY, list);"
4689,actionDown,"    private void actionDown(ListView list, MotionEvent event) {
        mActionDown = true;
        toogleListView(list);
        mLastViewTouchId = list.getId();
        startClickSelection(event, list, event.getY());
    }"
4692,createGap,"    private void createGap() {
        if (mViewStubGap == null) {
            mViewStubGap = (ViewStub) findViewById(R.id.gap);
        }
        if (mGapView == null) {
            mGapView = mViewStubGap.inflate();
        }"
4694,emptyGap,"    private void emptyGap() {
        setLeftListMargin(mGap);
        if (mGapView != null) {
            mGapView.setVisibility(View.GONE);"
4700,applyViewParams,"    private void applyViewParams() {
        setGap();
        setDividerAndHeight(mDivider, mDividerHeight);
    }"
4701,forceScroll,"    private void forceScroll() {
        MotionEvent event = MotionEvent.obtain(System.currentTimeMillis(), System.currentTimeMillis(), MotionEvent.ACTION_MOVE, 570, -1, 0);
        mScrollHelper.onTouch(mListViewLeft, event);
    }"
4702,run,"            public void run() {
                forceScroll();
            }"
4703,startAutoScroll,"    private void startAutoScroll() {
        mListViewLeft.post(new Runnable() {
            @Override"
4704,isEnable,"    private boolean isEnable() {
        return mSpeed != 0;
    }"
4705,canTargetScrollVertically,"            public boolean canTargetScrollVertically(int i) {
                return true;
            }"
4706,canTargetScrollHorizontally,"            public boolean canTargetScrollHorizontally(int i) {
                return false;
            }"
4707,scrollTargetBy,"            public void scrollTargetBy(int deltaX, int deltaY) {
                mListViewLeft.smoothScrollBy(mSpeedLeft, 0);
                mListViewRight.smoothScrollBy(mSpeedRight, 0);
            }"
4710,isOtherListEnable,"    private boolean isOtherListEnable(boolean isLeftList) {
        boolean result;
        if (isLeftList) {
            result = isRightListEnabled;
        } else {"
4711,forceScrollIfNeeded,"    private void forceScrollIfNeeded(boolean isListEnabled) {
        if (isUserInteracting && isListEnabled) {
            isUserInteracting = false;"
4712,onScroll,"            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount,
                                 int totalItemCount) {"
4713,onScrollStateChanged,"            public void onScrollStateChanged(AbsListView view, int state) {
                switch (state) {
                    case SCROLL_STATE_IDLE:"
4729,doClass,"    private byte[] doClass(String name, Class clazz, byte[] b) {
        CtClass cl = null;
        ClassPool pool = ClassPool.getDefault();
        try {
            cl = pool.makeClass(new java.io.ByteArrayInputStream(b));
            if(agentArgument!=null && agentArgument.equals(PRINT)) {"
4730,transform,"    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
        try {
            return className!=null && className.equals(XNET_PROTOCOL) ? doClass(className, classBeingRedefined, classfileBuffer) : classfileBuffer;"
4732,transform,"    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
        try {
            return className.equals(EVENT_TABLE_CLASS) ? doClass(loader, className, classBeingRedefined, classfileBuffer) : classfileBuffer;"
4733,getProperties,"    public static Properties getProperties(String defaultProperties, String propertiesFile) throws IOException {
        Properties props = null;
        if(propertiesFile !=null && !propertiesFile.equals("""")) {
            File mapping = new File(propertiesFile);
            if(mapping.exists()) {
                props = new Properties();"
4734,premain,"    public static void premain(String agentArgument, Instrumentation instrumentation) {
        if(agentArgument==null || !agentArgument.startsWith(SWTEventTableTransformer.SWT)) {
            instrumentation.addTransformer(new XKeysymTransformer(agentArgument));"
4736,orderIntToByte,"        public byte[] orderIntToByte(int serial) {
            return ByteBuffer.allocate(4).order(PLATFORM_BYTE_ORDER).putInt(serial).array();
        }"
4737,orderLongToByte,"        public byte[] orderLongToByte(long serial, int length) {
            return ByteBuffer.allocate(length).order(PLATFORM_BYTE_ORDER).putLong(serial).array();
        }"
4738,orderByteToLong,"        public long orderByteToLong(byte[] data) {
            return ByteBuffer.wrap(data).order(PLATFORM_BYTE_ORDER).getLong();
        }"
4739,orderByteToInt,"        public int orderByteToInt(byte[] data) {
            return ByteBuffer.wrap(data).order(PLATFORM_BYTE_ORDER).getInt();
        }"
4742,orderLongToByte,"        public byte[] orderLongToByte(long serial, int length) {
            return ByteBuffer.allocate(length).order(PLATFORM_BYTE_ORDER).putInt((int) serial).array();
        }"
4743,orderByteToLong,"        public long orderByteToLong(byte[] data) {
            return ByteBuffer.wrap(data).order(PLATFORM_BYTE_ORDER).getInt() & 0xFFFFFFFFL;
        }"
4746,orderIntToByte,"    public abstract byte[] orderIntToByte(int serial);
"
4747,orderLongToByte,"    public abstract byte[] orderLongToByte(long serial, int length);
"
4748,orderByteToLong,"    public abstract long orderByteToLong(byte[] data);
"
4749,orderByteToInt,"    public abstract int orderByteToInt(byte[] data);
"
4751,types,"    private static Class<?>[] types(Object... values) {
        if (values == null) {
            return new Class[0];
        }

        Class<?>[] result = new Class[values.length];"
4752,wrap,"    private static Class<?> wrap(Class<?> type) {
        if (type == null) {
            return null;
        } else if (type.isPrimitive()) {"
4753,isSimilarSignature,"    private static boolean isSimilarSignature(Class<?>[] declaredTypes, Class<?>[] actualTypes) {
        if (declaredTypes.length == actualTypes.length) {
            for (int i = 0; i < actualTypes.length; i++) {"
4763,run,"            public void run() {
                startActivity(new Intent(WelcomeActivity.this,MainActivity.class));
                finish();
            }"
4764,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_welcome);
        new Handler().postDelayed(new Runnable() {
            @Override"
4767,onItemClick,"            public void onItemClick(View view, int position) {
                switch (position){
                    case 0:"
4770,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();
        initListener();
    }"
4771,CopyStream,"    public static void CopyStream(InputStream is, OutputStream os)
    {
        final int buffer_size=1024;
        try"
4774,checkSize,"    private void checkSize() {

        Log.i(TAG, ""cache size=""+size+"" length=""+cache.size());
"
4775,put,"    public void put(String id, Bitmap bitmap){

        try{"
4776,get,"    public Bitmap get(String id){

        try{"
4778,onClick,"        public void onClick(View arg0) {
            adapter.imageLoader.clearCache();
            adapter.notifyDataSetChanged();
        }"
4779,onDestroy,"    public void onDestroy()
    {
        list.setAdapter(null);
        super.onDestroy();"
4780,onCreate,"    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        list=(ListView)findViewById(R.id.list);
        adapter=new LazyAdapter(this, mStrings);
        list.setAdapter(adapter);
        
        Button b=(Button)findViewById(R.id.button1);"
4785,clearCache,"    public void clearCache() {

        memoryCache.clear();
"
4787,imageViewReused,"    boolean imageViewReused(PhotoToLoad photoToLoad){

        String tag=imageViews.get(photoToLoad.imageView);

        if(tag==null || !tag.equals(photoToLoad.url))"
4789,decodeFile,"    private Bitmap decodeFile(File f){

        try {
"
4791,queuePhoto,"    private void queuePhoto(String url, ImageView imageView)

    {
"
4792,DisplayImage,"    public void DisplayImage(String url, ImageView imageView)

    {

        imageViews.put(imageView, url);"
4793,clear,"    public void clear(){

        File[] files=cacheDir.listFiles();

        if(files==null)"
4811,isSuccess,"    public boolean isSuccess() {
        return event.equals(""0"");
    }"
4815,sendSmsCode4Register,"    public ApiResponse<Void> sendSmsCode4Register(String phoneNum) {
        Map<String, String> paramMap = new HashMap<String, String>();
        paramMap.put(""appKey"", APP_KEY);
        paramMap.put(""method"", SEND_SMS_CODE);
        paramMap.put(""phoneNum"", phoneNum);

        Type type = new TypeToken<ApiResponse<Void>>(){}.getType();
        try {"
4816,listNewCoupon,"    public ApiResponse<List<CouponBO>> listNewCoupon(int currentPage, int pageSize);
}"
4817,loginByApp,"    public ApiResponse<Void> loginByApp(String loginName, String password, String imei, int loginOS);
"
4818,registerByPhone,"    public ApiResponse<Void> registerByPhone(String phoneNum, String code, String password);
"
4819,sendSmsCode4Register,"    public ApiResponse<Void> sendSmsCode4Register(String phoneNum);
"
4821,isLibPath,"	public static boolean isLibPath(String qualifiedName) {
		return qualifiedName.startsWith(LIBS_PACKAGE + ""."");
	}"
4822,isJDKPath,"	public static boolean isJDKPath(String qualifiedName) {
		return qualifiedName.startsWith(JAVA_PACKAGE + ""."");
	}"
4824,isJDKReplacementMode,"	public static boolean isJDKReplacementMode() {
		return ""java.lang"".equals(LANG_PACKAGE);
	}"
4826,toJsIdentifier,"	public static String toJsIdentifier(String identifier) {
		if (!identifier.isEmpty() && Character.isUpperCase(identifier.charAt(0))
				&& JSweetDefTranslatorConfig.JAVA_KEYWORDS.contains(identifier.toLowerCase())) {
			return identifier.toLowerCase();"
4829,main,"	public static void main(String[] args) throws Throwable {

		if (args.length < 1) {
			System.out.println(""usage: java -jar candy-tool.jar <command> [<args>]"");
			System.out.println();"
4830,onClick,"    public void onClick(View view) {
        JPTabBar tabBar = (JPTabBar) ((Activity)getContext()).findViewById(R.id.tabbar);
        tabBar.setTabTypeFace(""fonts/Jaden.ttf"");
    }"
4831,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.tab4,null);
        layout.findViewById(R.id.button1).setOnClickListener(this);
        return layout;
    }"
4832,onCheckedChanged,"    public void onCheckedChanged(RadioGroup group, @IdRes int checkedId) {
        switch (checkedId){
            case R.id.radioButton1:"
4833,init,"    private void init(View layout) {
        mTabBar = ((MainActivity)getActivity()).getTabbar();

        ((RadioGroup)layout.findViewById(R.id.radioGroup1)).setOnCheckedChangeListener(this);
        ((RadioGroup)layout.findViewById(R.id.radioGroup2)).setOnCheckedChangeListener(this);"
4834,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.tab3,null);
        init(layout);
        return layout;
    }"
4836,init,"    private void init(View layout) {
        mTabBar = ((MainActivity)getActivity()).getTabbar();
        mGroup = (RadioGroup) layout.findViewById(R.id.radioGroup);
        mGroup.setOnCheckedChangeListener(this);
    }"
4837,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout =inflater.inflate(R.layout.tab2,null);
        init(layout);
        return layout;
    }"
4839,afterTextChanged,"    public void afterTextChanged(Editable s) {
        if(s!=null&&s.toString().equals(""0"")){
            mTabBar.showBadge(0, """"+0,true);
            mTabBar.hideBadge(0);
            return;
        }"
4840,onTextChanged,"    public void onTextChanged(CharSequence s, int start, int before, int count) {
    }"
4841,beforeTextChanged,"    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
"
4842,onClick,"    public void onClick(View v) {
        int count = Integer.parseInt(mNumberEt.getText().toString());
        if (v == mMinusIb) {
            count--;"
4844,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.tab1, null);
        init(layout);
        return layout;
    }"
4845,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_say);
    }"
4848,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent arg0) {
        if (noScroll)
            return false;"
4850,scrollTo,"    public void scrollTo(int x, int y) {
        super.scrollTo(x, y);
    }"
4854,onTabSelect,"    public void onTabSelect(int index) {
        Toast.makeText(MainActivity.this,""choose the tab index is ""+index,Toast.LENGTH_SHORT).show();
    }"
4855,onDismiss,"    public void onDismiss(int position) {
            mTab1.clearCount();
    }"
4860,get,"        public Object get (Object ctx, String name) throws Exception {
            return NO_FETCHER_FOUND;
        }"
4861,isThisName,"    protected static boolean isThisName (String name) {
        return DOT_NAME.equals(name) || THIS_NAME.equals(name);
    }"
4862,toString,"        @Override public String toString () {
            return cclass.getName() + "":"" + name;
        }"
4863,equals,"        @Override public boolean equals (Object other) {
            Key okey = (Key)other;
            return okey.cclass == cclass && okey.name.equals(name);
        }"
4864,hashCode,"        @Override public int hashCode () {
            return cclass.hashCode() * 31 + name.hashCode();
        }"
4865,escape,"        protected static void escape (Appendable out, CharSequence data, Mustache.Escaper escape) {
            try {
                escape.escape(out, data);"
4866,write,"        protected static void write (Writer out, CharSequence data) {
            try {
                out.append(data);"
4868,indent,"        abstract Segment indent (String indent, boolean first, boolean last);
"
4869,visit,"        abstract void visit (Mustache.Visitor visitor);
"
4870,decompile,"        abstract void decompile (Mustache.Delims delims, StringBuilder into);
        abstract void visit (Mustache.Visitor visitor);"
4871,execute,"        abstract void execute (Template tmpl, Context ctx, Writer out);
        abstract void decompile (Mustache.Delims delims, StringBuilder into);"
4872,nest,"        public Context nest (Object data, int index, boolean onFirst, boolean onLast) {
            return new Context(data, this, index, onFirst, onLast);
        }"
4873,nest,"        public Context nest (Object data) {
            return new Context(data, this, index, onFirst, onLast);
        }"
4874,checkForMissing,"    protected Object checkForMissing (String name, int line, boolean missingIsNull, Object value) {
        if (value == NO_FETCHER_FOUND) {
            if (missingIsNull) return null;"
4880,execute,"            private void execute (Context ctx, Writer out) {
                for (Segment seg : segs) {
                    seg.execute(Template.this, ctx, out);"
4881,context,"            private Object context (Context ctx, int n) {
                return (n == 0) ? ctx.data : context(ctx.parent, n-1);
            }"
4882,decompile,"            @Override public StringBuilder decompile (StringBuilder into) {
                for (Segment seg : segs) seg.decompile(_compiler.delims, into);
                return into;
            }"
4883,context,"            @Override public Object context (int n) {
                return context(currentCtx, n);
            }"
4884,context,"            @Override public Object context () {
                return currentCtx.data;
            }"
4885,executeTemplate,"            @Override public void executeTemplate (Template tmpl, Writer out) {
                tmpl.executeSegs(currentCtx, out);
            }"
4886,execute,"            @Override public void execute (Object context, Writer out) {
                execute(currentCtx.nest(context), out);
            }"
4887,execute,"            @Override public void execute (Writer out) {
                execute(currentCtx, out);
            }"
4888,createFragment,"    protected Fragment createFragment (final Segment[] segs, final Context currentCtx) {
        return new Fragment() {
            @Override public void execute (Writer out) {"
4889,executeSegs,"    protected void executeSegs (Context ctx, Writer out) throws MustacheException {
        for (Segment seg : _segs) {
            seg.execute(this, ctx, out);"
4890,replaceBlocks,"    protected Template replaceBlocks (Map<String, BlockSegment> blocks) {
        if (blocks.isEmpty()) {
            return this;
        }
        Segment[] copySegs = Mustache.replaceBlockSegs(_segs, blocks);
        if (copySegs == _segs) {"
4892,visit,"    public void visit (Mustache.Visitor visitor) {
        for (Segment seg : _segs) {
            seg.visit(visitor);"
4893,execute,"    public void execute (Object context, Object parentContext, Writer out) throws MustacheException {
        Context pctx = new Context(parentContext, null, 0, false, false);
        executeSegs(new Context(context, pctx, 0, false, false), out);
    }"
4894,execute,"    public void execute (Object context, Writer out) throws MustacheException {
        executeSegs(new Context(context, null, 0, false, false), out);
    }"
4895,execute,"    public String execute (Object context) throws MustacheException {
        StringWriter out = new StringWriter();
        execute(context, out);
        return out.toString();
    }"
4896,decompile,"        public abstract StringBuilder decompile (StringBuilder into);
    }"
4897,decompile,"        public String decompile () {
            return decompile(new StringBuilder()).toString();
        }"
4898,context,"        public abstract Object context (int n);
"
4900,execute,"        public String execute (Object context) {
            StringWriter out = new StringWriter();
            execute(context, out);
            return out.toString();
        }"
4901,execute,"        public String execute () {
            StringWriter out = new StringWriter();
            execute(out);
            return out.toString();
        }"
4902,executeTemplate,"        public abstract void executeTemplate (Template tmpl, Writer out);
"
4903,execute,"        public abstract void execute (Object context, Writer out);
"
4904,execute,"        public abstract void execute (Writer out);
"
4905,format,"        public String format (Object value) {
            return String.valueOf(value);
        }"
4906,getTemplate,"        public Reader getTemplate (String name) {
            throw new UnsupportedOperationException(""Template loading not configured"");
        }"
4907,toString,"        @Override public String toString () { return ""Faux""; }
    }
"
4908,isStandalone,"        @Override boolean isStandalone () { return true; }
        @Override public String toString () { return ""Faux""; }
    }"
4909,indent,"        @Override FauxSegment indent (String indent, boolean first, boolean last) { return this; }
        @Override boolean isStandalone () { return true; }
        @Override public String toString () { return ""Faux""; }"
4910,visit,"        @Override public void visit (Visitor visit) {}
        @Override FauxSegment indent (String indent, boolean first, boolean last) { return this; }"
4913,toString,"        @Override public String toString () {
            return ""Inverted("" + _name + "":"" + _line + ""): "" + Arrays.toString(_segs);
        }"
4914,replaceBlocks,"        @Override public InvertedSegment replaceBlocks (Map<String, BlockSegment> blocks) {
            Template.Segment[] segs = replaceBlockSegs(_segs, blocks);
            if (segs == _segs) {
                return this;
            }"
4915,indent,"        @Override protected InvertedSegment indent (String indent, boolean first, boolean last) {
            Template.Segment[] segs = indentSegs(_segs, indent, first, last);
            if (segs == _segs) {
                return this;
            }"
4916,visit,"        @Override public void visit (Visitor visitor) {
            if (visitor.visitInvertedSection(_name)) {
                for (Template.Segment seg : _segs) {"
4917,decompile,"        @Override public void decompile (Delims delims, StringBuilder into) {
            delims.addTag('^', _name, into);
            for (Template.Segment seg : _segs) seg.decompile(delims, into);
            delims.addTag('/', _name, into);
        }"
4919,toString,"        @Override public String toString () {
            return ""Block("" + _name + "":"" + _line + ""): "" + Arrays.toString(_segs);
        }"
4920,replaceBlocks,"        @Override public BlockSegment replaceBlocks (Map<String, BlockSegment> blocks) {
            BlockSegment bs = blocks.get(_name);
            if (bs == null) {
                Template.Segment[] segs = replaceBlockSegs(_segs, blocks);
                if (segs == _segs) {"
4922,visit,"        @Override public void visit (Visitor visitor) {
            if (visitor.visitBlock(_name)) {
                for (Template.Segment seg : _segs) {"
4923,decompile,"        @Override public void decompile (Delims delims, StringBuilder into) {
            delims.addTag('$', _name, into);
            for (Template.Segment seg : _segs) seg.decompile(delims, into);
            delims.addTag('/', _name, into);
        }"
4924,execute,"        @Override public void execute (Template tmpl, Template.Context ctx, Writer out) {
            executeSegs(tmpl, ctx, out);
        }"
4925,toString,"        @Override public String toString () {
            return ""Section("" + _name + "":"" + _line + ""): "" + Arrays.toString(_segs);
        }"
4926,replaceBlocks,"        @Override public SectionSegment replaceBlocks(Map<String, BlockSegment> blocks) {
            Template.Segment[] segs = replaceBlockSegs(_segs, blocks);
            if (segs == _segs) {
                return this;
            }"
4927,indent,"        @Override protected SectionSegment indent (String indent, boolean first, boolean last) {
            Template.Segment[] segs = indentSegs(_segs, indent, first, last);
            if (segs == _segs) {
                return this;
            }"
4928,visit,"        @Override public void visit (Visitor visitor) {
            if (visitor.visitSection(_name)) {
                for (Template.Segment seg : _segs) {"
4929,decompile,"        @Override public void decompile (Delims delims, StringBuilder into) {
            delims.addTag('#', _name, into);
            for (Template.Segment seg : _segs) seg.decompile(delims, into);
            delims.addTag('/', _name, into);
        }"
4931,_segs,"        @Override public Template.Segment[] _segs() { return _segs; }

        protected final Compiler _comp;"
4932,standaloneEnd,"        @Override public void standaloneEnd(boolean standaloneEnd) { this._standaloneEnd = standaloneEnd; }

        @Override public Template.Segment[] _segs() { return _segs; }"
4933,standaloneStart,"        @Override public void standaloneStart(boolean standaloneStart) { this._standaloneStart = standaloneStart; }
        @Override public void standaloneEnd(boolean standaloneEnd) { this._standaloneEnd = standaloneEnd; }
"
4934,isStandaloneEnd,"        @Override public boolean isStandaloneEnd() { return _standaloneEnd; }
        @Override public void standaloneStart(boolean standaloneStart) { this._standaloneStart = standaloneStart; }
        @Override public void standaloneEnd(boolean standaloneEnd) { this._standaloneEnd = standaloneEnd; }"
4935,isStandaloneStart,"        @Override public boolean isStandaloneStart() { return _standaloneStart; }
        @Override public boolean isStandaloneEnd() { return _standaloneEnd; }
        @Override public void standaloneStart(boolean standaloneStart) { this._standaloneStart = standaloneStart; }"
4936,isStandalone,"        @Override public boolean isStandalone() { return _standaloneEnd; }
        @Override public boolean isStandaloneStart() { return _standaloneStart; }
        @Override public boolean isStandaloneEnd() { return _standaloneEnd; }"
4937,indent,"        protected abstract AbstractSectionSegment indent (String indent, boolean first, boolean last);
"
4938,executeSegs,"        protected void executeSegs (Template tmpl, Template.Context ctx, Writer out) {
            for (Template.Segment seg : _segs) {
                seg.execute(tmpl, ctx, out);"
4939,replaceBlocks,"        public Template.Segment replaceBlocks(Map<String, BlockSegment> blocks);
    }"
4941,standaloneEnd,"        void standaloneEnd (boolean standaloneEnd);
"
4942,standaloneStart,"        void standaloneStart (boolean standaloneStart);
        void standaloneEnd (boolean standaloneEnd);"
4943,isStandaloneStart,"        boolean isStandaloneStart ();
        void standaloneStart (boolean standaloneStart);"
4944,isStandaloneEnd,"        boolean isStandaloneEnd ();
        boolean isStandaloneStart ();"
4945,trimLastBlank,"        default void trimLastBlank () {
            Template.Segment[] _segs = _segs();
            int idx = _segs.length-1;
            _segs[idx] = ((StringSegment)_segs[idx]).trimTrailBlank();
        }"
4946,lastTrailsBlank,"        default boolean lastTrailsBlank () {
            Template.Segment[] _segs = _segs();
            int lastIdx = _segs.length-1;
            if (_segs.length == 0 || !(_segs[lastIdx] instanceof StringSegment)) return false;
            return ((StringSegment)_segs[lastIdx]).trailsBlank();
        }"
4947,trimFirstBlank,"        default void trimFirstBlank () {
            Template.Segment[] _segs = _segs();
            _segs[0] = ((StringSegment)_segs[0]).trimLeadBlank();
        }"
4948,firstLeadsBlank,"        default boolean firstLeadsBlank () {
            Template.Segment[] _segs = _segs();
            if (_segs.length == 0 || !(_segs[0] instanceof StringSegment)) return false;
            return ((StringSegment)_segs[0]).leadsBlank();
        }"
4949,toString,"        @Override public String toString () {
            return ""Var("" + _name + "":"" + _line + "")"";
        }"
4950,isStandalone,"        boolean isStandalone () {
            return false;
        }"
4951,indent,"        VariableSegment indent (String indent, boolean first, boolean last) {
            return this;
        }"
4952,visit,"        @Override public void visit (Visitor visitor) {
            visitor.visitVariable(_name);
        }"
4953,decompile,"        @Override public void decompile (Delims delims, StringBuilder into) {
            delims.addTag(' ', _name, into);
        }"
4954,execute,"        @Override public void execute (Template tmpl, Template.Context ctx, Writer out) {
            Object value = tmpl.getValueOrDefault(ctx, _name, _line);
            if (value == null) {
                String msg = Template.isThisName(_name) ?
                    ""Resolved '.' to null (which is disallowed), on line "" + _line :"
4955,toString,"        @Override public String toString() {
            return ""Parent(name="" + _name + "", indent="" + _indent + "", standaloneStart="" + _standaloneStart
                    + "")"";"
4956,standaloneEnd,"        @Override public void standaloneEnd(boolean standaloneEnd) { this._standaloneEnd = standaloneEnd; }
        @Override public String toString() {
            return ""Parent(name="" + _name + "", indent="" + _indent + "", standaloneStart="" + _standaloneStart"
4957,standaloneStart,"        @Override public void standaloneStart(boolean standaloneStart) { this._standaloneStart = standaloneStart; }
        @Override public void standaloneEnd(boolean standaloneEnd) { this._standaloneEnd = standaloneEnd; }
        @Override public String toString() {"
4961,_segs,"        @Override public Template.Segment[] _segs() { return _segs; }
        @Override public boolean isStandalone() { return _standaloneEnd; }
        @Override public boolean isStandaloneStart() { return _standaloneStart; }"
4962,replaceBlocks,"        @Override public ParentTemplateSegment replaceBlocks(Map<String, BlockSegment> blocks) {
            return new ParentTemplateSegment(this, _segs, """", blocks);
        }"
4963,trimLastBlank,"        @Override public void trimLastBlank () {
            Template.Segment[] _segs = _segs();
            int idx = _segs.length-1;
            if (idx < 0) return;
            _segs[idx] = ((StringSegment)_segs[idx]).trimTrailBlank();
        }"
4964,lastTrailsBlank,"        @Override public boolean lastTrailsBlank () {
            Template.Segment[] _segs = _segs();
            int lastIdx = _segs.length-1;

            if (lastIdx < 0) {
                return true;
            }"
4967,visit,"        @Override public void visit (Visitor visitor) {
            if (visitor.visitParent(_name)) {
                getTemplate().visit(visitor);"
4968,decompile,"        @Override public void decompile (Delims delims, StringBuilder into) {
            delims.addTag('<', _name, into);
        }"
4970,isStandalone,"        @Override public boolean isStandalone() { return _standalone; }
        protected boolean _standalone;
    }"
4971,toString,"        @Override public String toString () {
            return ""Include(name="" + _name + "", indent="" + _indent + "", standalone="" + _standalone
                    + "")"";"
4973,visit,"        @Override public void visit (Visitor visitor) {
            if (visitor.visitInclude(_name)) {
                getTemplate().visit(visitor);"
4975,isStandalone,"        @Override public abstract boolean isStandalone();
"
4976,_loadTemplate,"        protected Template _loadTemplate() {
            return _comp.loadTemplate(_name).indent(_indent);
        }"
4979,blankPos,"        private static int blankPos (String text, boolean leading, boolean first) {
            int len = text.length();
            for (int ii = leading ? 0 : len-1, ll = leading ? len : -1, dd = leading ? 1 : -1;
                 ii != ll; ii += dd) {
                char c = text.charAt(ii);"
4980,reindent,"        private static String reindent (String input, String indent, boolean first, boolean last) {
            int length = input.length();
            StringBuilder sb = new StringBuilder(indent.length() + length);
            if (first) {
                sb.append(indent);
            }
            for (int ii = 0; ii < length; ii++) {"
4981,toString,"        @Override public String toString () {
            return ""Text("" + _text.replace(""\r"", ""\\r"").replace(""\n"", ""\\n"") + "")"" +
                _leadBlank + ""/"" + _trailBlank;"
4982,visit,"        @Override public void visit (Visitor visitor) {
            visitor.visitText(_text);
        }"
4983,decompile,"        @Override public void decompile (Delims delims, StringBuilder into) {
            into.append(_text);
        }"
4984,execute,"        @Override public void execute (Template tmpl, Template.Context ctx, Writer out) {
            write(out, _text);
        }"
4985,isStandalone,"        @Override boolean isStandalone () {
            return false;
        }"
4986,indent,"        StringSegment indent (String indent, boolean first, boolean last) {
            if (indent.equals("""")) {
                return this;
            }
            String reindent = reindent(_text, indent, first, last);"
4987,indent,"        String indent () {
            if (_trailBlank == -1 || _trailBlank >= _text.length()) {
                return """";
            }"
4988,trimTrailBlank,"        public StringSegment trimTrailBlank  () {
            return _trailBlank == -1 ? this : new StringSegment(
                _text.substring(0, _trailBlank), _leadBlank, -1, _first);"
4989,trimLeadBlank,"        public StringSegment trimLeadBlank () {
            if (_leadBlank == -1) return this;
            int lpos = _leadBlank+1, newTrail = _trailBlank == -1 ? -1 : _trailBlank-lpos;
            return new StringSegment(_text.substring(lpos), -1, newTrail, _first);
        }"
4990,trailsBlank,"        public boolean trailsBlank () { return _trailBlank != -1; }

        public StringSegment trimLeadBlank () {"
4991,leadsBlank,"        public boolean leadsBlank () { return _leadBlank != -1; }
        public boolean trailsBlank () { return _trailBlank != -1; }
"
4992,requireSameName,"        protected static void requireSameName (String name1, String name2, int line) {
            if (!name1.equals(name2)) {
                throw new MustacheParseException(""Section close tag with mismatched open tag '"" +"
4993,requireNoNewlines,"        protected static void requireNoNewlines (String tag, int line) {
            if (tag.indexOf('\n') != -1 || tag.indexOf('\r') != -1) {
                throw new MustacheParseException("
4994,addCloseSectionSegment,"        protected Accumulator addCloseSectionSegment (String tag, int line) {
            throw new MustacheParseException(
                ""Section close tag with no open tag '"" + tag + ""'"", line);"
4995,finish,"        public Template.Segment[] finish () {
            return _segs.toArray(new Template.Segment[_segs.size()]);
        }"
4996,addFauxSegment,"        public void addFauxSegment () {
            _segs.add(new FauxSegment());
        }"
4997,addCloseSectionSegment,"                    @Override protected Accumulator addCloseSectionSegment (String itag, int line) {
                        requireSameName(tag1, itag, line);
                        outer._segs.add(new InvertedSegment(_comp, itag, super.finish(), tagLine));
                        return outer;
                    }"
4998,finish,"                    @Override public Template.Segment[] finish () {
                        throw new MustacheParseException(
                            ""Inverted section missing close tag '"" + tag1 + ""'"", tagLine);"
4999,addCloseSectionSegment,"                    @Override protected Accumulator addCloseSectionSegment (String itag, int line) {
                        requireSameName(tag1, itag, line);
                        outer._segs.add(new BlockSegment(_comp, itag, super.finish(), tagLine));
                        return outer;
                    }"
5000,finish,"                    @Override public Template.Segment[] finish () {
                        throw new MustacheParseException(
                            ""Block missing close tag '"" + tag1 + ""'"", tagLine);"
5001,addCloseSectionSegment,"                    @Override protected Accumulator addCloseSectionSegment (String itag, int line) {
                        requireSameName(tag1, itag, line);
                        outer._segs.add(new ParentTemplateSegment(_comp, itag, super.finish(), tagLine));
                        return outer;
                    }"
5002,finish,"                    @Override public Template.Segment[] finish () {
                        throw new MustacheParseException(
                            ""Parent missing close tag '"" + tag1 + ""'"", tagLine);"
5003,addCloseSectionSegment,"                    @Override protected Accumulator addCloseSectionSegment (String itag, int line) {
                        requireSameName(tag1, itag, line);
                        outer._segs.add(new SectionSegment(_comp, itag, super.finish(), tagLine));
                        return outer;
                    }"
5004,finish,"                    @Override public Template.Segment[] finish () {
                        throw new MustacheParseException(
                            ""Section missing close tag '"" + tag1 + ""'"", tagLine);"
5005,addTagSegment,"        public Accumulator addTagSegment (final StringBuilder accum, final int tagLine) {
            final Accumulator outer = this;
            String tag = accum.toString().trim();
            final String tag1 = tag.substring(1).trim();
            accum.setLength(0);

            switch (tag.charAt(0)) {"
5006,addTextSegment,"        public void addTextSegment (StringBuilder text) {
            if (text.length() > 0) {
                _segs.add(new StringSegment(text.toString(), _segs.isEmpty() && _topLevel));"
5007,errmsg,"        private static String errmsg (String dtext) {
            return ""Invalid delimiter configuration '"" + dtext + ""'. Must be of the "" +
                ""form {{=1 2=}} or {{=12 34=}} where 1, 2, 3 and 4 are delimiter chars."";"
5008,copy,"        Delims copy () {
            Delims d = new Delims();
            d.start1 = start1;
            d.start2 = start2;
            d.end1 = end1;
            d.end2 = end2;
            return d;
        }"
5009,addTag,"        public void addTag (char prefix, String name, StringBuilder into) {
            into.append(start1);
            into.append(start2);
            if (prefix != ' ') into.append(prefix);
            into.append(name);
            into.append(end1);
            into.append(end2);
        }"
5010,updateDelims,"        public Delims updateDelims (String dtext) {
            String[] delims = dtext.split("" "");
            if (delims.length != 2) throw new MustacheException(errmsg(dtext));

            switch (delims[0].length()) {
            case 1:
                start1 = delims[0].charAt(0);"
5011,isStaches,"        public boolean isStaches () {
            return start1 == '{' && start2 == '{' && end1 == '}' && end2 == '}';
        }"
5012,nextChar,"        protected int nextChar () {
            try {
                return source.read();"
5013,parseChar,"        protected void parseChar (char c) {
            switch (state) {
            case TEXT:"
5016,restoreStartTag,"    protected static void restoreStartTag (StringBuilder text, Delims starts) {
        text.insert(0, starts.start1);
        if (starts.start2 != NO_CHAR) {
            text.insert(1, starts.start2);"
5017,replaceBlockSegs,"    static Template.Segment[] replaceBlockSegs(Template.Segment[] _segs, Map<String, BlockSegment> blocks) {
        if (blocks.isEmpty()) {
            return _segs;
        }
        int length = _segs.length;
        Template.Segment[] copySegs = new Template.Segment[length];
        boolean changed = false;
        for (int i = 0; i < _segs.length; i++) {
            Template.Segment seg = _segs[i];"
5020,compile,"    protected static Template compile (Reader source, Compiler compiler) {
        Accumulator accum = new Parser(compiler).parse(source);
        return new Template(trim(accum.finish(), true), compiler);
    }"
5022,visitInvertedSection,"        boolean visitInvertedSection (String name);
    }"
5024,visitBlock,"        default boolean visitBlock (String name) {
            return false;
        }"
5025,visitParent,"        default boolean visitParent (String name) {
            return false;
        }"
5029,get,"        Object get (String name) throws Exception;
    }"
5030,createFetcherCache,"        <K,V> Map<K,V> createFetcherCache ();
    }"
5031,createFetcher,"        VariableFetcher createFetcher (Object ctx, String name);
"
5032,toIterator,"        Iterator<?> toIterator (final Object value);
"
5033,getTemplate,"        Reader getTemplate (String name) throws Exception;
    }"
5034,escape,"        default void escape (Appendable a, CharSequence raw) throws IOException {
            a.append(escape(raw));
        }"
5035,escape,"        default CharSequence escape (CharSequence raw) {
            return escape(raw.toString());
        }"
5037,get,"        Object get (Object ctx, String name) throws Exception;
    }"
5038,executeInverse,"        void executeInverse (Template.Fragment frag, Writer out) throws IOException;
    }"
5039,execute,"        void execute (Template.Fragment frag, Writer out) throws IOException;
    }"
5040,format,"        CharSequence format (Object value);
    }"
5041,loadTemplate,"        public Template loadTemplate (String name) throws MustacheException {
            Reader tin = null;
            try {
                tin = loader.getTemplate(name);"
5042,isEmptyCharSequence,"        private boolean isEmptyCharSequence (Object value) {
            if (value == null) {
                return false;
            }
            if (value instanceof CharSequence) {"
5043,isFalsey,"        public boolean isFalsey (Object value) {
            return ((emptyStringIsFalse && isEmptyCharSequence(formatter.format(value))) ||
                    (zeroIsFalse && (value instanceof Number) && ((Number)value).longValue() == 0));"
5044,computeNullValue,"        public String computeNullValue (String name) {
            return (nullValue == null) ? null : nullValue.replace(""{{name}}"", name);
        }"
5045,withDelims,"        public Compiler withDelims (String delims) {
            return new Compiler(this.standardsMode, this.strictSections, this.nullValue,
                                this.missingIsNull, this.emptyStringIsFalse, this.zeroIsFalse,"
5046,withCollector,"        public Compiler withCollector (Collector collector) {
            return new Compiler(this.standardsMode, this.strictSections, this.nullValue,
                                this.missingIsNull, this.emptyStringIsFalse, this.zeroIsFalse,"
5047,withLoader,"        public Compiler withLoader (TemplateLoader loader) {
            return new Compiler(this.standardsMode, this.strictSections, this.nullValue,
                                this.missingIsNull, this.emptyStringIsFalse, this.zeroIsFalse,"
5048,withEscaper,"        public Compiler withEscaper (Escaper escaper) {
            return new Compiler(this.standardsMode, this.strictSections, this.nullValue,
                                this.missingIsNull, this.emptyStringIsFalse, this.zeroIsFalse,"
5049,withFormatter,"        public Compiler withFormatter (Formatter formatter) {
            return new Compiler(this.standardsMode, this.strictSections, this.nullValue,
                                this.missingIsNull, this.emptyStringIsFalse, this.zeroIsFalse,"
5050,zeroIsFalse,"        public Compiler zeroIsFalse (boolean zeroIsFalse) {
            return new Compiler(this.standardsMode, this.strictSections, this.nullValue,
                                this.missingIsNull, this.emptyStringIsFalse, zeroIsFalse,"
5051,emptyStringIsFalse,"        public Compiler emptyStringIsFalse (boolean emptyStringIsFalse) {
            return new Compiler(this.standardsMode, this.strictSections, this.nullValue,
                                this.missingIsNull, emptyStringIsFalse, this.zeroIsFalse,"
5052,nullValue,"        public Compiler nullValue (String nullValue) {
            return new Compiler(this.standardsMode, this.strictSections, nullValue, false,
                                this.emptyStringIsFalse, this.zeroIsFalse, this.formatter,"
5053,defaultValue,"        public Compiler defaultValue (String defaultValue) {
            return new Compiler(this.standardsMode, this.strictSections, defaultValue, true,
                                this.emptyStringIsFalse, this.zeroIsFalse, this.formatter,"
5054,strictSections,"        public Compiler strictSections (boolean strictSections) {
            return new Compiler(this.standardsMode, strictSections, this.nullValue,
                                this.missingIsNull, this.emptyStringIsFalse, this.zeroIsFalse,"
5055,standardsMode,"        public Compiler standardsMode (boolean standardsMode) {
            return new Compiler(standardsMode, this.strictSections, this.nullValue,
                                this.missingIsNull, this.emptyStringIsFalse, this.zeroIsFalse,"
5056,escapeHTML,"        public Compiler escapeHTML (boolean escapeHTML) {
            return withEscaper(escapeHTML ? Escapers.HTML : Escapers.NONE);
        }"
5057,compile,"        public Template compile (Reader source) {
            return Mustache.compile(source, this);
        }"
5058,compile,"        public Template compile (String template) {
            return compile(new StringReader(template));
        }"
5059,toString,"        public String toString () {
            StringBuilder sb = new StringBuilder();
            sb.append(""Escaper["");
            for(char i = 0; i < lookupTable.length; i++) {
                String value = lookupTable[i];
                if (value != null) {
                    sb.append(""{'"").append(i).append(""', '"").append(value).append(""'},"");"
5060,escape,"        public String escape (String raw) {
            StringBuilder sb = new StringBuilder(raw.length());
            try {
                escape(sb, raw);
            } catch (IOException e) {"
5062,escape,"        public void escape (Appendable a, CharSequence raw) throws IOException {
            int end = raw.length();
            for (int i = 0, start = 0; i < end; i++) {
                char c = raw.charAt(i);
                String found = escapeChar(lookupTable, c);"
5064,escape,"            @Override public String escape (String text) {
                for (String[] escape : repls) {
                    text = text.replace(escape[0], escape[1]);
                }"
5065,simple,"    public static Mustache.Escaper simple (final String[]... repls) {
        String[] lookupTable = Lookup7bitEscaper.createTable(repls);
        if (lookupTable != null) {
            return new Lookup7bitEscaper(lookupTable);
        }"
5066,escape,"        @Override public String escape (String text) {
            return text;
        }"
5067,getField,"    protected Field getField (Class<?> clazz, String name) {
        if (!_allowAccessCoercion) {
            try {
                return clazz.getField(name);
            } catch (Exception e) {
                return null;
            }
        }"
5068,makeAccessible,"    private Method makeAccessible (Method m) {
        if (m.isAccessible()) return m;
        else if (!_allowAccessCoercion) return null;
        m.setAccessible(true);
        return m;"
5070,addIfaces,"    private void addIfaces (Set<Class<?>> ifaces, Class<?> clazz, boolean isIface) {
        if (isIface) ifaces.add(clazz);
        for (Class<?> iface : clazz.getInterfaces()) addIfaces(ifaces, iface, true);
    }"
5073,createFetcherCache,"    public <K,V> Map<K,V> createFetcherCache () {
        return new ConcurrentHashMap<K,V>();
    }"
5074,get,"                public Object get (Object ctx, String name) throws Exception {
                    return im.invoke(ctx);
                }"
5075,get,"                public Object get (Object ctx, String name) throws Exception {
                    return f.get(ctx);
                }"
5076,get,"                public Object get (Object ctx, String name) throws Exception {
                    return m.invoke(ctx);
                }"
5078,length,"        @Override public int length (Object ctx) { return ((double[])ctx).length; }
    };
}"
5079,get,"        @Override protected Object get (Object ctx, int index) { return ((double[])ctx)[index]; }
        @Override public int length (Object ctx) { return ((double[])ctx).length; }
    };"
5080,length,"        @Override public int length (Object ctx) { return ((float[])ctx).length; }
    };
    protected static final ArrayHelper DOUBLE_ARRAY_HELPER = new ArrayHelper() {"
5081,get,"        @Override protected Object get (Object ctx, int index) { return ((float[])ctx)[index]; }
        @Override public int length (Object ctx) { return ((float[])ctx).length; }
    };"
5082,length,"        @Override public int length (Object ctx) { return ((long[])ctx).length; }
    };
    protected static final ArrayHelper FLOAT_ARRAY_HELPER = new ArrayHelper() {"
5083,get,"        @Override protected Object get (Object ctx, int index) { return ((long[])ctx)[index]; }
        @Override public int length (Object ctx) { return ((long[])ctx).length; }
    };"
5084,length,"        @Override public int length (Object ctx) { return ((int[])ctx).length; }
    };
    protected static final ArrayHelper LONG_ARRAY_HELPER = new ArrayHelper() {"
5085,get,"        @Override protected Object get (Object ctx, int index) { return ((int[])ctx)[index]; }
        @Override public int length (Object ctx) { return ((int[])ctx).length; }
    };"
5086,length,"        @Override public int length (Object ctx) { return ((short[])ctx).length; }
    };
    protected static final ArrayHelper INT_ARRAY_HELPER = new ArrayHelper() {"
5087,get,"        @Override protected Object get (Object ctx, int index) { return ((short[])ctx)[index]; }
        @Override public int length (Object ctx) { return ((short[])ctx).length; }
    };"
5088,length,"        @Override public int length (Object ctx) { return ((char[])ctx).length; }
    };
    protected static final ArrayHelper SHORT_ARRAY_HELPER = new ArrayHelper() {"
5089,get,"        @Override protected Object get (Object ctx, int index) { return ((char[])ctx)[index]; }
        @Override public int length (Object ctx) { return ((char[])ctx).length; }
    };"
5090,length,"        @Override public int length (Object ctx) { return ((byte[])ctx).length; }
    };
    protected static final ArrayHelper CHAR_ARRAY_HELPER = new ArrayHelper() {"
5091,get,"        @Override protected Object get (Object ctx, int index) { return ((byte[])ctx)[index]; }
        @Override public int length (Object ctx) { return ((byte[])ctx).length; }
    };"
5092,length,"        @Override public int length (Object ctx) { return ((boolean[])ctx).length; }
    };
    protected static final ArrayHelper BYTE_ARRAY_HELPER = new ArrayHelper() {"
5093,get,"        @Override protected Object get (Object ctx, int index) { return ((boolean[])ctx)[index]; }
        @Override public int length (Object ctx) { return ((boolean[])ctx).length; }
    };"
5094,length,"        @Override public int length (Object ctx) { return ((Object[])ctx).length; }
    };
    protected static final ArrayHelper BOOLEAN_ARRAY_HELPER = new ArrayHelper() {"
5095,get,"        @Override protected Object get (Object ctx, int index) { return ((Object[])ctx)[index]; }
        @Override public int length (Object ctx) { return ((Object[])ctx).length; }
    };"
5096,get,"        protected abstract Object get (Object ctx, int index);
    }"
5097,length,"        public abstract int length (Object ctx);
        protected abstract Object get (Object ctx, int index);"
5098,get,"        public Object get (Object ctx, String name) throws Exception {
            try {
                return get(ctx, Integer.parseInt(name));"
5099,toString,"        @Override public String toString () {
            return ""ITER_FETCHER"";
        }"
5100,get,"        public Object get (Object ctx, String name) throws Exception {
            try {
                Iterator<?> iter = (Iterator<?>)ctx;"
5101,toString,"        @Override public String toString () {
            return ""LIST_FETCHER"";
        }"
5102,get,"        public Object get (Object ctx, String name) throws Exception {
            try {
                return ((List<?>)ctx).get(Integer.parseInt(name));"
5103,toString,"        @Override public String toString () {
            return ""MAP_FETCHER"";
        }"
5105,toString,"        @Override public String toString () {
            return ""CUSTOM_FETCHER"";
        }"
5106,get,"        public Object get (Object ctx, String name) throws Exception {
            Mustache.CustomContext custom = (Mustache.CustomContext)ctx;
            Object val = custom.get(name);
            return val == null ? Template.NO_FETCHER_FOUND : val;
        }"
5108,createFetcherCache,"    public abstract <K,V> Map<K,V> createFetcherCache ();
"
5110,remove,"                @Override public void remove () { throw new UnsupportedOperationException(); }
            };
        }"
5111,next,"                @Override public Object next () { return helper.get(value, _idx++); }
                @Override public void remove () { throw new UnsupportedOperationException(); }
            };"
5112,hasNext,"                @Override public boolean hasNext () { return _idx < _count; }
                @Override public Object next () { return helper.get(value, _idx++); }
                @Override public void remove () { throw new UnsupportedOperationException(); }"
5113,toIterator,"    public Iterator<?> toIterator (final Object value) {
        if (value instanceof Iterable<?>) {
            return ((Iterable<?>)value).iterator();
        }
        if (value instanceof Iterator<?>) {
            return (Iterator<?>)value;"
5114,addOffset,"    protected void

    addOffset(@Nullable String fileName) {

"
5121,run,"            @Override public ClassLoader

            run() {"
5127,compare,"        @Override @NotNullByDefault(false) public int

        compare(Location l1, Location l2) {"
5133,evaluate,"    @Override @Nullable public Object

    evaluate(int idx, @Nullable Object[] arguments) throws InvocationTargetException {"
5134,createFastEvaluator,"    @Override public <T> T

    createFastEvaluator(

        Reader   r,

        Class<T> interfaceToImplement,

        String[] parameterNames

    ) throws CompileException, IOException {

        if (!interfaceToImplement.isInterface()) {

            throw new RuntimeException(""\"""" + interfaceToImplement + ""\"" is not an interface"");"
5135,createFastEvaluator,"    @Override public <T> T

    createFastEvaluator("
5138,hashCode,"                @Override public int

                hashCode() { return this.name.hashCode() ^ Arrays.hashCode(this.parameterTypes); }"
5139,equals,"                @Override public boolean

                equals(@Nullable Object o) {

                    if (!(o instanceof MethodWrapper)) return false;"
5140,cook,"    protected final void

    cook(String[] fileNames, Reader[] readers, String[] imports)

    throws CompileException, IOException {



        this.setScriptCount(fileNames.length);

        this.setScriptCount(readers.length);"
5141,cook,"    @Override public void

    cook(String[] fileNames, Reader[] readers) throws CompileException, IOException {"
5142,cook,"    @Override public void

    cook(@Nullable String fileName, Reader reader) throws CompileException, IOException {

        String[] imports;
"
5150,evaluate,"    @Override @Nullable public Object

    evaluate(@Nullable Object[] arguments) throws InvocationTargetException { return this.evaluate(0, arguments); }"
5151,evaluate,"    @Override @Nullable public Object

    evaluate() throws InvocationTargetException { return this.evaluate(new Object[0]); }"
5174,report,"                @Override public void

                report(@Nullable final Diagnostic<? extends JavaFileObject> diagnostic) {
"
5177,findClass,"    @NotNullByDefault(false) @Override protected Class<?>

    findClass(String className) throws ClassNotFoundException {"
5186,createFastEvaluator,"    @Override public <T> T

    createFastEvaluator(Reader reader, Class<? extends T> interfaceToImplement, String... parameterNames)

    throws CompileException, IOException {



        if (!interfaceToImplement.isInterface()) {

            throw new InternalCompilerException(""\"""" + interfaceToImplement + ""\"" is not an interface"");

        }

"
5187,createFastEvaluator,"    @Override public <T> T

    createFastEvaluator(String expression, Class<? extends T> interfaceToImplement, String... parameterNames)"
5194,evaluate,"    @Override @Nullable public Object

    evaluate(@Nullable Object[] arguments) throws InvocationTargetException { return this.se.evaluate(arguments); }"
5197,cook,"    @Override public void

    cook(@Nullable String fileName, Reader reader) throws CompileException, IOException {



        this.se.setScriptCount(1);


"
5224,run,"            @Override public JavaSourceClassLoader run() { return new JavaSourceClassLoader(parentClassLoader); }

        });"
5225,newJavaSourceClassLoader,"    @Override public AbstractJavaSourceClassLoader

    newJavaSourceClassLoader(final ClassLoader parentClassLoader) {"
5226,run,"            @Override public JavaSourceClassLoader run() { return new JavaSourceClassLoader(); }

        });"
5227,newJavaSourceClassLoader,"    @Override public AbstractJavaSourceClassLoader

    newJavaSourceClassLoader() {"
5228,newCompiler,"    @Override public ICompiler

    newCompiler() { return new Compiler(); }"
5229,newSimpleCompiler,"    @Override public ISimpleCompiler

    newSimpleCompiler() { return new SimpleCompiler(); }"
5230,newClassBodyEvaluator,"    @Override public IClassBodyEvaluator

    newClassBodyEvaluator() { return new ClassBodyEvaluator(); }"
5231,newScriptEvaluator,"    @Override public IScriptEvaluator

    newScriptEvaluator() { return new ScriptEvaluator(); }"
5232,newExpressionEvaluator,"    @Override public IExpressionEvaluator

    newExpressionEvaluator() { return new ExpressionEvaluator(); }"
5234,toString,"    @Override public String

    toString() { return ""jdk""; }"
5236,filesToPath,"    private static String

    filesToPath(File[] files) {

        StringBuilder sb = new StringBuilder();"
5237,report,"            @Override public void

            report(@Nullable Diagnostic<? extends JavaFileObject> diagnostic) {

                assert diagnostic != null;


"
5238,compile,"    static void

    compile(

        JavaCompiler                        compiler,

        List<String>                        options,"
5239,getJavaFileManager,"    private static JavaFileManager

    getJavaFileManager(

        JavaCompiler    compiler,

        ResourceFinder  sourceFileFinder,"
5240,compile,"    static void

    compile(

        JavaCompiler                  compiler,
"
5242,compile,"    @Override public void

    compile(final Resource[] sourceResources) throws CompileException, IOException {"
5245,createInstance,"    @Override public Object

    createInstance(Reader reader) throws CompileException, IOException {
"
5246,parseImportDeclarations,"    protected static String[]

    parseImportDeclarations(Reader r) throws IOException {

        final CharBuffer cb = CharBuffer.allocate(10000);

        r.mark(cb.limit());

        r.read(cb);


"
5247,run,"            @Override public void run() { ClassBodyEvaluator.this.sc.addOffset(fileName); }

        });"
5248,newFileName,"    protected Reader

    newFileName(@Nullable final String fileName, Reader reader) {"
5251,cook,"    protected void

    cook(@Nullable String fileName, String[] imports, Reader r) throws CompileException, IOException {

"
5252,cook,"    @Override public void

    cook(@Nullable String fileName, Reader r) throws CompileException, IOException {
"
5267,byteArrayToInt,"	public static int byteArrayToInt(byte[] b, int offset) {
		return b[3 + offset] & 0xFF | (b[2 + offset] & 0xFF) << 8 | (b[1 + offset] & 0xFF) << 16 | (b[offset] & 0xFF) << 24;
	}"
5268,putIntTo,"	public static void putIntTo(byte[] newArray, int i, int offset) {
		newArray[offset] = (byte) ((i >> 24) & 0xFF);
		newArray[1 + offset] = (byte) ((i >> 16) & 0xFF);
		newArray[2 + offset] = (byte) ((i >> 8) & 0xFF);
		newArray[3 + offset] = (byte) (i & 0xFF);
	}"
5269,closeSocket,"	private void closeSocket() {
		connected = false;
		if (socket != null && !socket.isClosed()) {
			socket.close();"
5270,interrupt,"	@Override public void interrupt() {
		super.interrupt();

		closeSocket();"
5272,add,"	public void add(MotionEvent event) {
		byte[] array = new byte[32 * Config.TOUCH_METADATA_SIZE];
		Utils.putIntTo(array, clientId, 0);
		Utils.putIntTo(array, event.getAction(), 32);
		Utils.putIntTo(array, (int) event.getX(), 64);
		Utils.putIntTo(array, (int) event.getY(), 96);
		try {
			queue.put(array);"
5274,interrupt,"	@Override public void interrupt() {
		closeSocket();
		super.interrupt();
	}"
5275,run,"	@Override public void run() {
		try {
			socket = new DatagramSocket(port);"
5276,config,"	public void config(int fullCanvasWidth, int fullCanvasHeight) {
		this.fullCanvasWidth = fullCanvasWidth;
		this.fullCanvasHeight = fullCanvasHeight;
	}"
5277,onDraw,"	@Override protected void onDraw(Canvas canvas) {
		if (picture != null) {
			canvas.translate(dx, dy);"
5278,onTouchEvent,"	@Override public boolean onTouchEvent(MotionEvent event) {
		if (touchHandler != null) {
			event.setLocation(event.getX() - dx, event.getY() - dy);"
5280,init,"	private void init() {

		setLayerType(View.LAYER_TYPE_SOFTWARE, null);

		textPaint.setStyle(Paint.Style.FILL);
		textPaint.setColor(Color.BLACK);
		textPaint.setAntiAlias(true);
		textPaint.setTextSize(Utils.getSp(getContext(), 24));
"
5282,showLose,"	public void showLose() {
		loseAlphaInterpolator = new LinearInterpolator(255, 0, 300);
	}"
5283,onDrag,"	public void onDrag(int y) {
		bounds.offsetTo(bounds.left, startDragTop + y - downY);
	}"
5285,startDrag,"	public void startDrag(int downX, int downY) {
		this.downX = downX;
		this.downY = downY;
		startDragTop = bounds.top;
	}"
5286,drawLoseEffect,"	private void drawLoseEffect(Canvas canvas, long currentTime) {
		if (loseAlphaInterpolator == null) return;
		final int alpha = loseAlphaInterpolator.getValue(currentTime);
		if (alpha >= 0) {
"
5287,onDraw,"	public void onDraw(Canvas canvas, long currentTime) {

		canvas.drawRect(bounds, playerPaint);
		drawLoseEffect(canvas, currentTime);"
5288,intersectsWith,"	public boolean intersectsWith(Rect rect) {
		return Rect.intersects(rect, bounds);
	}"
5289,contains,"	public boolean contains(int x, int y) {
		return bounds.contains(x, y);
	}"
5290,onTouchEvent,"	public void onTouchEvent(int action, int x, int y) {

		if (action == MotionEvent.ACTION_DOWN) {"
5291,turnBallX,"	private void turnBallX() {
		ball.vector.set(ball.vector.x * -1, ball.vector.y);
	}"
5292,turnBallY,"	private void turnBallY() {
		ball.vector.set(ball.vector.x, ball.vector.y * -1);
	}"
5293,update,"	public void update(Canvas canvas) {

		final int canvasWidth = canvas.getWidth();
		final int canvasHeight = canvas.getHeight();
"
5294,onDraw,"	@Override protected void onDraw(Canvas canvas) {

		final long currentTime = System.currentTimeMillis();
		long timeDiff = 0;

		if (frameTime == 0) {
			frameTime = currentTime;
		} else {
			timeDiff = currentTime - frameTime;
			frameTime = currentTime;
		}"
5295,onTouchEvent,"	@Override protected void onTouchEvent(int clientId, int action, int x, int y) {
		controller.onTouchEvent(action, x, y);
	}"
5296,destroyHost,"	private void destroyHost() {
		if (hostCanvas != null) {
			hostCanvas.destroy();"
5297,destroyClient,"	private void destroyClient() {
		if (pictureReceiver != null) {
			pictureReceiver.destroy();"
5298,onDestroy,"	@Override protected void onDestroy() {
		destroyHost();
		destroyClient();
		super.onDestroy();
	}"
5299,startClient,"	private void startClient(int clientId) {
		pictureReceiver = new PictureReceiver(clientId);
		pictureReceiver.config(PICTURES_PORT, HOST_ADDRESS, TOUCH_EVENTS_PORT);
		pictureReceiver.setReceiverView(receiverView);
		pictureReceiver.start();
	}"
5300,startHost,"	private void startHost(Screen[] screens, int screenWidth, int screenHeight) {
		hostCanvas = new PingPongCanvas(
				PingPongActivity.this,
				FRAME_RATE, screenWidth * screens.length,
				screenHeight"
5301,handleTouchEvent,"			@Override public void handleTouchEvent(MotionEvent event) {
				if (pictureReceiver != null) pictureReceiver.handleTouchEvent(event);
			}"
5302,config,"	private void config(final int screenWidth, final int screenHeight) {

		final Screen[] screens = new Screen[CLIENT_ADDRESSES.length];

		for (int i = 0; i < screens.length; i++) {
			screens[i] = new Screen(CLIENT_ADDRESSES[i], screenWidth * i * -1, 0);
"
5303,onGlobalLayout,"			@Override public void onGlobalLayout() {
				receiverView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
				config(receiverView.getWidth(), receiverView.getHeight());
			}"
5304,onCreate,"	@Override protected void onCreate(Bundle savedInstanceState) {
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		super.onCreate(savedInstanceState);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);

		setContentView(R.layout.activity_pingpong);

		InternalLogger.setLogger(new Logger());
"
5305,interrupt,"	@Override public void interrupt() {
		super.interrupt();
		closeSocket();
	}"
5307,run,"	@Override public void run() {

		while (connected) {"
5310,run,"	@Override public void run() {
		socket = null;
		try {
"
5311,addPicture,"	public void addPicture(Picture picture) {
		if (!connected) return;
		os.reset();
		picture.writeToStream(os);
		try {
			byte[] raw = os.toByteArray();"
5312,config,"	public void config(Screen[] screens, int picturesPort, int touchEventsPort) {
		this.picturesPort = picturesPort;
		this.screens = screens;
		this.touchEventsPort = touchEventsPort;
	}"
5313,destroy,"	public void destroy() {
		if (pictureSenderThread != null) pictureSenderThread.interrupt();
		if (touchEventsReceiverThread != null) touchEventsReceiverThread.interrupt();
	}"
5314,start,"	public void start() {
		pictureSenderThread = new PictureSenderThread(screens, picturesPort);
		pictureSenderThread.start();

		touchEventsReceiverThread = new TouchEventsReceiverThread(touchEventsPort, interactiveCanvas);
		touchEventsReceiverThread.start();"
5315,addPicture,"	public void addPicture(Picture picture) {
		pictureSenderThread.addPicture(picture);
	}"
5317,handleTouchEvent,"	public void handleTouchEvent(MotionEvent event) {
		touchEventsSendThread.add(event);
	}"
5318,config,"	public void config(int picturesReceivePort, InetAddress hostAddress, int touchPort) {
		this.picturesPort = picturesReceivePort;
		this.hostAddress = hostAddress;
		this.touchPort = touchPort;
	}"
5319,run,"	@Override public void run() {
		try {
			receiverView.setPicture(picturesQueue.take());"
5321,destroy,"	public void destroy() {
		if (picturesReceiverThread != null) picturesReceiverThread.interrupt();
		if (touchEventsSendThread != null) touchEventsSendThread.interrupt();
	}"
5322,start,"	public void start() {
		picturesReceiverThread = new PicturesReceiverThread(picturesPort, receiverView, this, picturesQueue);
		picturesReceiverThread.start();
		touchEventsSendThread = new TouchEventsSendThread(hostAddress, touchPort, clientId);
		touchEventsSendThread.start();
	}"
5323,onDraw,"		void onDraw(Canvas canvas, Paint paint) {
			paint.setColor(color);
			canvas.save();
			canvas.translate(x, y);
			canvas.rotate(rotation);
			canvas.drawRect(-size / 2, -size / 2, size / 2, size / 2, paint);
			canvas.restore();
			rotation++;
		}"
5324,onDraw,"	@Override protected void onDraw(Canvas canvas) {
		canvas.drawColor(Color.BLACK);
		path.reset();
		for (int i = 0; i < markers.size(); i++) {
			Marker marker = markers.get(i);
			if (i == 0) path.moveTo(marker.x, marker.y);
			path.lineTo(marker.x, marker.y);
			marker.onDraw(canvas, paint);"
5325,onTouchEvent,"	@Override protected void onTouchEvent(int clientId, int action, int x, int y) {
		controller.onTouchEvent(action, x, y);
		if (action == MotionEvent.ACTION_DOWN) {
			markers.add(new Marker(x, y, radius, markersColors[clientId]));"
5327,destroyHost,"	private void destroyHost() {
		if (canvas != null) {
			canvas.destroy();"
5328,onDestroy,"	@Override protected void onDestroy() {
		destroyClient();
		destroyHost();
		super.onDestroy();
	}"
5329,startHost,"	private void startHost(Screen[] screens, int screenWidth, int screenHeight) {

		Random rnd = new Random();
		int[] markersColors = new int[screens.length];
		for (int i = 0; i < markersColors.length; i++)
			markersColors[i] = Color.argb(255, rnd.nextInt(256), rnd.nextInt(256), rnd.nextInt(256));

		canvas = new MirrorCanvas("
5332,config,"	private void config(final int screenWidth, final int screenHeight) {

		final Screen[] screens = new Screen[CLIENT_ADDRESSES.length];

		for (int i = 0; i < screens.length; i++) {
			screens[i] = new Screen(CLIENT_ADDRESSES[i], 0, 0);
"
5334,onCreate,"	protected void onCreate(Bundle savedInstanceState) {
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		super.onCreate(savedInstanceState);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);

		setContentView(R.layout.activity_mirror);

		InternalLogger.setLogger(new Logger());
"
5336,handleTouchEvent,"	void handleTouchEvent(int action, int x, int y);
}"
5338,logException,"	public static void logException(Class src, Throwable e) {
		if (logger != null) logger.logException(src, e);
	}"
5340,config,"	public final void config(Screen[] screens, int picturesPort, int touchEventsPort) {
		pictureSender.config(screens, picturesPort, touchEventsPort);
	}"
5341,destroy,"	public void destroy() {
		drawing = false;
		pictureSender.destroy();
	}"
5342,run,"			@Override public void run() {
				pictureSender.start();

				while (drawing) {
					begin();"
5343,start,"	public final void start() {
		new Thread(new Runnable() {
			@Override public void run() {"
5344,onTouchEvent,"	protected void onTouchEvent(int clientId, int action, int x, int y) {
"
5345,onDraw,"	protected void onDraw(Canvas canvas) {
		picture.endRecording();
		pictureSender.addPicture(picture);
	}"
5346,begin,"	public final void begin() {
		onDraw(picture.beginRecording(width, height));
	}"
5347,logException,"	void logException(Class src, Throwable throwable);
}"
5348,logException,"	void logException(Object msg);
	void logException(Class src, Throwable throwable);"
5349,logException,"	void logException(String msg);
	void logException(Object msg);"
5350,toByteArray,"	@Override public synchronized byte[] toByteArray() {
		byte[] newArray = new byte[count + extraBytes];
		System.arraycopy(buf, 0, newArray, extraBytes, count);
		return newArray;
	}"
5351,onTouchEvent,"	public void onTouchEvent(int action, int x, int y) {
"
5352,updatePosition,"	private void updatePosition(long timeDiff) {
		bounds.offset(
				(int) (SPEED * timeDiff * vector.x),"
5353,drawTail,"	private void drawTail(Canvas canvas, long timeDiff, long currentTime) {

		final int step = 255 / tail.length;
		int alpha = 255;
		for (Rect tailPoint : tail) {
			fillPaint.setAlpha(alpha);
			canvas.drawRect(bounds, fillPaint);
			canvas.drawRect(tailPoint, fillPaint);
			alpha -= step;
		}
		fillPaint.setAlpha(255);"
5354,onDraw,"	public void onDraw(Canvas canvas, long timeDiff, long currentTime) {
		updatePosition(timeDiff);

		canvas.drawRect(bounds, fillPaint);
		drawTail(canvas, timeDiff, currentTime);"
5356,completeSecurityScopeNameValue,"  public boolean completeSecurityScopeNameValue() {
    return pathResolver.isSecurityScopeNameValue(psiElement);
  }"
5357,completeTagsValue,"  public boolean completeTagsValue() {
    return pathResolver.isTagsValue(psiElement);
  }"
5358,completeHeadersCollectionFormat,"  public boolean completeHeadersCollectionFormat() {
    return pathResolver.childOfHeadersCollectionFormat(psiElement);
  }"
5359,completeParametersCollectionFormat,"  public boolean completeParametersCollectionFormat() {
    return pathResolver.childOfParametersCollectionFormat(psiElement);
  }"
5360,completeItemsCollectionFormat,"  public boolean completeItemsCollectionFormat() {
    return pathResolver.childOfItemsCollectionFormat(psiElement);
  }"
5361,completeOperationSecurityKey,"  public boolean completeOperationSecurityKey() {
    return pathResolver.childOfOperationSecurityKey(psiElement);
  }"
5362,completeRootSecurityKey,"  public boolean completeRootSecurityKey() {
    return pathResolver.childOfRootSecurityKey(psiElement);
  }"
5363,completeResponseDefinition,"  public boolean completeResponseDefinition() {
    return pathResolver.childOfResponseDefinition(psiElement);
  }"
5364,completeResponseRefValue,"  public boolean completeResponseRefValue() {
    return pathResolver.isResponseRefValue(psiElement);
  }"
5365,completeInValue,"  public boolean completeInValue() {
    return pathResolver.isInValue(psiElement);
  }"
5366,completeFormatValue,"  public boolean completeFormatValue() {
    return pathResolver.isFormatValue(psiElement);
  }"
5367,completeTypeValue,"  public boolean completeTypeValue() {
    return pathResolver.isTypeValue(psiElement);
  }"
5368,completeBooleanValue,"  public boolean completeBooleanValue() {
    return pathResolver.isBooleanValue(psiElement);
  }"
5369,completeParameterRefValue,"  public boolean completeParameterRefValue() {
    return pathResolver.isParameterRefValue(psiElement);
  }"
5370,completeDefinitionRefValue,"  public boolean completeDefinitionRefValue() {
    return pathResolver.isDefinitionRefValue(psiElement);
  }"
5371,completeSchemesValue,"  public boolean completeSchemesValue() {
    return pathResolver.isSchemesValue(psiElement);
  }"
5372,completeMimeValue,"  public boolean completeMimeValue() {
    return pathResolver.isMimeValue(psiElement);
  }"
5373,completeParameterDefinitionKey,"  public boolean completeParameterDefinitionKey() {
    return pathResolver.childOfParameterDefinition(psiElement);
  }"
5374,completeDefinitionsKey,"  public boolean completeDefinitionsKey() {
    return pathResolver.childOfDefinitions(psiElement);
  }"
5375,completeXmlKey,"  public boolean completeXmlKey() {
    return pathResolver.childOfXml(psiElement);
  }"
5376,completeAdditionalPropertiesKey,"  public boolean completeAdditionalPropertiesKey() {
    return pathResolver.childOfAdditionalProperties(psiElement);
  }"
5377,completePropertiesSchemaKey,"  public boolean completePropertiesSchemaKey() {
    return pathResolver.childOfPropertiesSchema(psiElement);
  }"
5378,completeSchemaItemsKey,"  public boolean completeSchemaItemsKey() {
    return pathResolver.childOfSchemaItems(psiElement);
  }"
5379,completeSchemaKey,"  public boolean completeSchemaKey() {
    return pathResolver.childOfSchema(psiElement);
  }"
5380,completeSecurityDefinitionKey,"  public boolean completeSecurityDefinitionKey() {
    return pathResolver.childOfSecurityDefinition(psiElement);
  }"
5381,completeTagKey,"  public boolean completeTagKey() {
    return pathResolver.childOfTag(psiElement);
  }"
5382,completeHeadersKey,"  public boolean completeHeadersKey() {
    return pathResolver.childOfHeaders(psiElement);
  }"
5383,completeHeaderKey,"  public boolean completeHeaderKey() {
    return pathResolver.childOfHeader(psiElement);
  }"
5384,completeResponseKey,"  public boolean completeResponseKey() {
    return pathResolver.childOfResponse(psiElement);
  }"
5385,completeResponsesKey,"  public boolean completeResponsesKey() {
    return pathResolver.childOfResponses(psiElement);
  }"
5386,completeParameterItemsKey,"  public boolean completeParameterItemsKey() {
    return pathResolver.childOfParameterItems(psiElement);
  }"
5387,completeParametersKey,"  public boolean completeParametersKey() {
    return pathResolver.childOfParameters(psiElement);
  }"
5388,completeExternalDocsKey,"  public boolean completeExternalDocsKey() {
    return pathResolver.childOfExternalDocs(psiElement);
  }"
5389,completeOperationKey,"  public boolean completeOperationKey() {
    return pathResolver.childOfOperation(psiElement);
  }"
5390,completePathKey,"  public boolean completePathKey() {
    return pathResolver.childOfPath(psiElement);
  }"
5391,completeLicenseKey,"  public boolean completeLicenseKey() {
    return pathResolver.childOfLicense(psiElement);
  }"
5392,completeContactKey,"  public boolean completeContactKey() {
    return pathResolver.childOfContact(psiElement);
  }"
5393,completeInfoKey,"  public boolean completeInfoKey() {
    return pathResolver.childOfInfo(psiElement);
  }"
5394,completeRootKey,"  public boolean completeRootKey() {
    return pathResolver.childOfRoot(psiElement);
  }"
5395,completeDiscriminatorKey,"  public boolean completeDiscriminatorKey() {
    return pathResolver.childOfDiscriminator(psiElement);
  }"
5396,completeContentKey,"  public boolean completeContentKey() {
    return pathResolver.childOfContent(psiElement);
  }"
5397,completeSecuritySchemeKey,"  public boolean completeSecuritySchemeKey() {
    return pathResolver.childOfSecurityScheme(psiElement);
  }"
5398,completeCallbackKey,"  public boolean completeCallbackKey() {
    return pathResolver.childOfCallback(psiElement);
  }"
5399,completeLinkKey,"  public boolean completeLinkKey() {
    return pathResolver.childOfLink(psiElement);
  }"
5400,completeEncodingKey,"  public boolean completeEncodingKey() {
    return pathResolver.childOfEncoding(psiElement);
  }"
5401,completeExampleKey,"  public boolean completeExampleKey() {
    return pathResolver.childOfExample(psiElement);
  }"
5402,completeMediaTypeKey,"  public boolean completeMediaTypeKey() {
    return pathResolver.childOfMediaType(psiElement);
  }"
5403,completeRequestBodyKey,"  public boolean completeRequestBodyKey() {
    return pathResolver.childOfRequestBody(psiElement);
  }"
5404,completeComponentKey,"  public boolean completeComponentKey() {
    return pathResolver.childOfComponent(psiElement);
  }"
5405,completeServerVariableKey,"  public boolean completeServerVariableKey() {
    return pathResolver.childOfServerVariable(psiElement);
  }"
5406,completeServerKey,"  public boolean completeServerKey() {
    return pathResolver.childOfServer(psiElement);
  }"
5409,completeStyleValue,"  public boolean completeStyleValue() {
    return pathResolver.isStyleValue(psiElement);
  }"
5413,completeMappingRefValue,"  public boolean completeMappingRefValue() {
    return pathResolver.isMappingRefValue(psiElement);
  }"
5414,completeCallbackRefValue,"  public boolean completeCallbackRefValue() {
    return pathResolver.isCallbackRefValue(psiElement);
  }"
5415,completeLinkRefValue,"  public boolean completeLinkRefValue() {
    return pathResolver.isLinkRefValue(psiElement);
  }"
5416,completeHeaderRefValue,"  public boolean completeHeaderRefValue() {
    return pathResolver.isHeaderRefValue(psiElement);
  }"
5417,completeRequestBodyRefValue,"  public boolean completeRequestBodyRefValue() {
    return pathResolver.isRequestBodyRefValue(psiElement);
  }"
5418,completeExampleRefValue,"  public boolean completeExampleRefValue() {
    return pathResolver.isExampleRefValue(psiElement);
  }"
5420,completeSchemaRefValue,"  public boolean completeSchemaRefValue() {
    return pathResolver.isSchemaRefValue(psiElement);
  }"
5437,isUniqueArrayStringValue,"  public boolean isUniqueArrayStringValue(final String keyName) {
    return traversal.isUniqueArrayStringValue(keyName, psiElement);
  }"
5442,extractSecurityNameFromSecurityObject,"  public Optional<String> extractSecurityNameFromSecurityObject(final PsiElement psiElement) {
    return traversal.extractSecurityNameFromSecurityItem(psiElement);
  }"
5443,createInsertValueHandler,"  public InsertHandler<LookupElement> createInsertValueHandler(final Value value) {
    return traversal.createInsertValueHandler(value);
  }"
5444,createInsertFieldHandler,"  public InsertHandler<LookupElement> createInsertFieldHandler(final Field field) {
    return traversal.createInsertFieldHandler(field);
  }"
5445,isUniqueKey,"  public boolean isUniqueKey(final String keyName) {
    List<? extends PsiNamedElement> children =
        new PathFinder().findDirectNamedChildren(""parent"", psiElement);
"
5446,hasPath,"  public boolean hasPath(final String pathExpression) {
    return new PathFinder().isInsidePath(psiElement, pathExpression);
  }"
5449,onClick,"                        public void onClick(DialogInterface dialog, int which) {
                            dialog.cancel();
                            rationale.cancel();
                        }"
5450,onClick,"                        public void onClick(DialogInterface dialog, int which) {
                            dialog.cancel();
                            rationale.resume();
                        }"
5454,delOnClickListener,"            public void delOnClickListener(int position, int remainNum) {
                Toast.makeText(OnePickerActivity.this, ""delOnClickListenerremainNum"" + remainNum, Toast.LENGTH_SHORT).show();
            }"
5455,picOnClickListener,"            public void picOnClickListener(List<ImageShowPickerBean> list, int position, int remainNum) {
                Toast.makeText(OnePickerActivity.this, list.size() + ""========"" + position + ""remainNum"" + remainNum, Toast.LENGTH_SHORT).show();
            }"
5456,addOnClickListener,"            public void addOnClickListener(int remainNum) {
                Matisse.from(OnePickerActivity.this)
                        .choose(MimeType.allOf())
                        .countable(true)"
5458,delOnClickListener,"            public void delOnClickListener(int position, int remainNum) {
                list.remove(position);
                Toast.makeText(context, ""delOnClickListenerremainNum"" + remainNum, Toast.LENGTH_SHORT).show();
            }"
5459,picOnClickListener,"            public void picOnClickListener(List<ImageShowPickerBean> list, int position, int remainNum) {
                Toast.makeText(context, list.size() + ""========"" + position + ""remainNum"" + remainNum, Toast.LENGTH_SHORT).show();
            }"
5466,displayImage,"    public void displayImage(Context context, @DrawableRes Integer resId, ImageView imageView) {
        imageView.setImageResource(resId);
    }"
5467,displayImage,"    public void displayImage(Context context, String path, ImageView imageView) {
        Glide.with(context).load(path).into(imageView);
"
5470,onClick,"            public void onClick(View v) {
                Intent intent = new Intent(HomeActivity.this,MainActivity.class);
                startActivity(intent);
            }"
5471,onClick,"            public void onClick(View v) {
                Intent intent = new Intent(HomeActivity.this,OnePickerActivity.class);
                startActivity(intent);
            }"
5476,compareTo,"        public int compareTo(Cell o) {
            return this.lexeme.compareTo(o.lexeme);
        }"
5478,isEmpty,"    boolean isEmpty() {
        return this.size == 0;
    }"
5479,size,"    int size() {
        return this.size;
    }"
5480,pollLast,"    Lexeme pollLast() {
        if (this.size == 1) {
            Lexeme last = this.head.lexeme;"
5481,peekLast,"    Lexeme peekLast() {
        if (this.tail != null) {
            return this.tail.lexeme;
        }"
5482,pollFirst,"    Lexeme pollFirst() {
        if (this.size == 1) {
            Lexeme first = this.head.lexeme;"
5483,peekFirst,"    Lexeme peekFirst() {
        if (this.head != null) {
            return this.head.lexeme;
        }"
5484,addLexeme,"    void addLexeme(Lexeme lexeme) {
        Cell newCell = new Cell(lexeme);
        if (this.size == 0) {
            this.head = newCell;"
5494,checkCross,"    boolean checkCross(Lexeme lexeme) {
        return (lexeme.getBegin() >= this.pathBegin && lexeme.getBegin() < this.pathEnd)
                || (this.pathBegin >= lexeme.getBegin() && this.pathBegin < lexeme.getBegin() + lexeme.getLength());"
5495,removeTail,"    void removeTail() {
        Lexeme tail = this.pollLast();
        if (this.isEmpty()) {
            this.pathBegin = -1;"
5496,addNotCrossLexeme,"    boolean addNotCrossLexeme(Lexeme lexeme) {
        if (this.isEmpty()) {
            this.addLexeme(lexeme);"
5497,addCrossLexeme,"    boolean addCrossLexeme(Lexeme lexeme) {
        if (this.isEmpty()) {
            this.addLexeme(lexeme);"
5498,toString,"    public String toString() {
        return this.getBeginPosition() + ""-"" + this.getEndPosition() +
                "" : "" + this.lexemeText + "" : \t"" +"
5514,hashCode,"    public int hashCode() {
        int absBegin = getBeginPosition();
        int absEnd = getEndPosition();
        return (absBegin * 37) + (absEnd * 31) + ((absBegin * absEnd) % getLength()) * 11;
    }"
5515,equals,"    public boolean equals(Object o) {
        if (o == null) {
            return false;
        }
"
5516,isNumConnector,"    private boolean isNumConnector(char input) {
        int index = Arrays.binarySearch(Num_Connector, input);
        return index >= 0;
    }"
5517,isLetterConnector,"    private boolean isLetterConnector(char input) {
        int index = Arrays.binarySearch(Letter_Connector, input);
        return index >= 0;
    }"
5521,reset,"    public void reset() {
        this.start = -1;
        this.end = -1;
        this.englishStart = -1;
        this.englishEnd = -1;
        this.arabicStart = -1;
        this.arabicEnd = -1;
    }"
5525,reset,"    public synchronized void reset(Reader input) {
        this.input = input;
        context.reset();
        for (ISegmenter segmenter : segmenters) {
            segmenter.reset();"
5529,backPath,"    private void backPath(Lexeme l, LexemePath option) {
        while (option.checkCross(l)) {
            option.removeTail();"
5532,process,"    void process(AnalyzeContext context, boolean useSmart) {
        QuickSortSet orgLexemes = context.getOrgLexemes();
        Lexeme orgLexeme = orgLexemes.pollFirst();

        LexemePath crossPath = new LexemePath();
        while (orgLexeme != null) {
            if (!crossPath.addCrossLexeme(orgLexeme)) {"
5537,reset,"    public void reset() {
        nStart = -1;
        nEnd = -1;
        countHits.clear();
    }"
5541,regularize,"    static char regularize(char input) {
        if (input == 12288) {
            input = (char) 32;
"
5542,identifyCharType,"    static int identifyCharType(char input) {
        if (input >= '0' && input <= '9') {
            return CHAR_ARABIC;
"
5543,compound,"    private void compound(Lexeme result) {
        if (!this.cfg.useSmart()) {
            return;
        }"
5544,reset,"    void reset() {
        this.buffLocker.clear();
        this.orgLexemes = new QuickSortSet();
        this.available = 0;
        this.buffOffset = 0;
        this.charTypes = new int[BUFF_SIZE];
        this.cursor = 0;
        this.results.clear();
        this.segmentBuff = new char[BUFF_SIZE];
        this.pathMap.clear();
    }"
5546,outputSingleCJK,"    private void outputSingleCJK(int index) {
        if (CharacterUtil.CHAR_CHINESE == this.charTypes[index]) {
            Lexeme singleCharLexeme = new Lexeme(this.buffOffset, index, 1, Lexeme.TYPE_CNCHAR);"
5549,addLexemePath,"    void addLexemePath(LexemePath path) {
        if (path != null) {
            this.pathMap.put(path.getPathBegin(), path);"
5550,addLexeme,"    void addLexeme(Lexeme lexeme) {
        this.orgLexemes.addLexeme(lexeme);
    }"
5551,markBufferOffset,"    void markBufferOffset() {
        this.buffOffset += this.cursor;
    }"
5552,needRefillBuffer,"    boolean needRefillBuffer() {
        return this.available == BUFF_SIZE
                && this.cursor < this.available - 1"
5553,isBufferConsumed,"    boolean isBufferConsumed() {
        return this.cursor == this.available - 1;
    }"
5554,isBufferLocked,"    private boolean isBufferLocked() {
        return this.buffLocker.size() > 0;
    }"
5555,unlockBuffer,"    void unlockBuffer(String segmenterName) {
        this.buffLocker.remove(segmenterName);
    }"
5556,lockBuffer,"    void lockBuffer(String segmenterName) {
        this.buffLocker.add(segmenterName);
    }"
5557,moveCursor,"    boolean moveCursor() {
        if (this.cursor < this.available - 1) {
            this.cursor++;"
5558,initCursor,"    void initCursor() {
        this.cursor = 0;
        this.segmentBuff[this.cursor] = CharacterUtil.regularize(this.segmentBuff[this.cursor]);
        this.charTypes[this.cursor] = CharacterUtil.identifyCharType(this.segmentBuff[this.cursor]);
    }"
5565,nextElementWithin,"    public static boolean nextElementWithin(XmlPullParser parser, int outerDepth)
            throws IOException, XmlPullParserException {
        for (;;) {"
5566,nextElement,"    public static final void nextElement(XmlPullParser parser) throws XmlPullParserException, IOException
    {
        int type;
        while ((type=parser.next()) != parser.START_TAG"
5567,beginDocument,"    public static final void beginDocument(XmlPullParser parser, String firstElementName) throws XmlPullParserException, IOException
    {
        int type;
        while ((type=parser.next()) != parser.START_TAG
                && type != parser.END_DOCUMENT) {
            ;"
5569,readValueXml,"    public static final Object readValueXml(XmlPullParser parser, String[] name)
            throws XmlPullParserException, java.io.IOException
    {
        int eventType = parser.getEventType();
        do {"
5571,readThisSetXml,"    public static final HashSet readThisSetXml(XmlPullParser parser, String endTag, String[] name)
            throws XmlPullParserException, java.io.IOException {
        HashSet set = new HashSet();

        int eventType = parser.getEventType();
        do {"
5572,readThisListXml,"    public static final ArrayList readThisListXml(XmlPullParser parser, String endTag, String[] name)
            throws XmlPullParserException, java.io.IOException
    {
        ArrayList list = new ArrayList();
        int eventType = parser.getEventType();
        do {"
5573,readThisMapXml,"    public static final HashMap readThisMapXml(XmlPullParser parser, String endTag, String[] name)
            throws XmlPullParserException, java.io.IOException
    {
        HashMap map = new HashMap();
        int eventType = parser.getEventType();
        do {"
5574,readSetXml,"    public static final HashSet readSetXml(InputStream in)
            throws XmlPullParserException, java.io.IOException {
        XmlPullParser parser = Xml.newPullParser();
        parser.setInput(in, null);
        return (HashSet) readValueXml(parser, new String[1]);"
5575,readListXml,"    public static final ArrayList readListXml(InputStream in)
            throws XmlPullParserException, java.io.IOException
    {
        XmlPullParser   parser = Xml.newPullParser();
        parser.setInput(in, null);"
5576,readMapXml,"    public static final HashMap readMapXml(InputStream in)
            throws XmlPullParserException, java.io.IOException
    {
        XmlPullParser   parser = Xml.newPullParser();
        parser.setInput(in, null);"
5577,writeValueXml,"    public static final void writeValueXml(Object v, String name, XmlSerializer out)
            throws XmlPullParserException, java.io.IOException
    {
        String typeStr;
        if (v == null) {
            out.startTag(null, ""null"");
            if (name != null) {
                out.attribute(null, ""name"", name);"
5578,writeIntArrayXml,"    public static final void writeIntArrayXml(int[] val, String name,
                                              XmlSerializer out)
            throws XmlPullParserException, java.io.IOException {
        if (val == null) {
            out.startTag(null, ""null"");
            out.endTag(null, ""null"");
            return;
        }
        out.startTag(null, ""int-array"");"
5580,writeSetXml,"    public static final void writeSetXml(Set val, String name, XmlSerializer out)
            throws XmlPullParserException, java.io.IOException {
        if (val == null) {
            out.startTag(null, ""null"");
            out.endTag(null, ""null"");
            return;
        }"
5581,writeListXml,"    public static final void writeListXml(List val, String name, XmlSerializer out)
            throws XmlPullParserException, java.io.IOException
    {
        if (val == null) {
            out.startTag(null, ""null"");
            out.endTag(null, ""null"");
            return;
        }
        out.startTag(null, ""list"");"
5582,writeMapXml,"    public static final void writeMapXml(Map val, String name, XmlSerializer out)
            throws XmlPullParserException, java.io.IOException
    {
        if (val == null) {
            out.startTag(null, ""null"");
            out.endTag(null, ""null"");
            return;
        }
        Set s = val.entrySet();"
5585,parseUnsignedIntAttribute,"    public static final int
    parseUnsignedIntAttribute(CharSequence charSeq)
    {
        String  value = charSeq.toString();
        long    bits;
        int     index = 0;
        int     len = value.length();
        int     base = 10;
        if ('0' == value.charAt(index)) {"
5586,convertValueToUnsignedInt,"    public static final int
    convertValueToUnsignedInt(String value, int defaultValue)
    {
        if (null == value)"
5588,convertValueToBoolean,"    public static final boolean
    convertValueToBoolean(CharSequence value, boolean defaultValue)
    {
        boolean result = false;
        if (null == value)
            return defaultValue;"
5589,convertValueToList,"    public static final int
    convertValueToList(CharSequence value, String[] options, int defaultValue)
    {
        if (null != value) {"
5590,skipCurrentTag,"    public static void skipCurrentTag(XmlPullParser parser)
            throws XmlPullParserException, IOException {
        int outerDepth = parser.getDepth();
        int type;
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT"
5593,skippedEntity,"    public void skippedEntity(String name) throws SAXException {
    }"
5594,processingInstruction,"    public void processingInstruction(String target, String data) throws SAXException {
    }"
5595,ignorableWhitespace,"    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {
    }"
5596,characters,"    public void characters(char ch[], int start, int length) throws SAXException {
        StringBuilder sb = new StringBuilder();
        /*
         * Ignore whitespace that immediately follows other whitespace;
         * newlines count as spaces."
5597,endElement,"    public void endElement(String uri, String localName, String qName) throws SAXException {
        handleEndTag(localName);
    }"
5598,startElement,"    public void startElement(String uri, String localName, String qName, Attributes attributes)
            throws SAXException {
        handleStartTag(localName, attributes);"
5599,endPrefixMapping,"    public void endPrefixMapping(String prefix) throws SAXException {
    }"
5600,startPrefixMapping,"    public void startPrefixMapping(String prefix, String uri) throws SAXException {
    }"
5601,endDocument,"    public void endDocument() throws SAXException {
    }"
5602,startDocument,"    public void startDocument() throws SAXException {
    }"
5605,endA,"    private void endA(String tag, Editable text) {
        Href h = getLast(text, Href.class);
        if (h != null) {
            if (h.mHref != null) {"
5606,startA,"    private void startA(Editable text, Attributes attributes) {
        String href = attributes.getValue("""", ""href"");
        start(text, new Href(href));
    }"
5607,endFont,"    private void endFont(String tag, Editable text) {
        Font font = getLast(text, Font.class);
        if (font != null) {
            setSpanFromMark(tag, text, font, new TypefaceSpan(font.mFace));
        }
        Foreground foreground = getLast(text, Foreground.class);"
5608,startFont,"    private void startFont(Editable text, Attributes attributes) {
        String color = attributes.getValue("""", ""color"");
        String face = attributes.getValue("""", ""face"");
        if (!TextUtils.isEmpty(color)) {
            int c = getHtmlColor(color);
            if (c != -1) {"
5609,startImg,"    private void startImg(Editable text, Attributes attributes, HtmlCompat.ImageGetter img) {
        String src = attributes.getValue("""", ""src"");
        Drawable d = null;
        if (img != null) {
            d = img.getDrawable(src, attributes);
        }
        if (d == null) {
            Resources res = mContext.getResources();
            d = res.getDrawable(R.drawable.unknown_image);"
5611,startCssStyle,"    private void startCssStyle(Editable text, Attributes attributes) {
        String style = attributes.getValue("""", ""style"");
        if (style != null) {
            Matcher m = getForegroundColorPattern().matcher(style);"
5612,end,"    private void end(String tag, Editable text, Class kind, Object repl) {
        Object obj = getLast(text, kind);
        if (obj != null) {
            setSpanFromMark(tag, text, obj, repl);"
5613,start,"    private void start(Editable text, Object mark) {
        int len = text.length();
        text.setSpan(mark, len, len, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
    }"
5617,startHeading,"    private void startHeading(Editable text, Attributes attributes, int level) {
        startBlockElement(text, attributes, getMarginHeading());
        start(text, new Heading(level));
    }"
5618,endBlockquote,"    private void endBlockquote(String tag, Editable text) {
        endBlockElement(tag, text);
        end(tag, text, Blockquote.class, new QuoteSpan());
    }"
5619,startBlockquote,"    private void startBlockquote(Editable text, Attributes attributes) {
        startBlockElement(text, attributes, getMarginBlockquote());
        start(text, new Blockquote());
    }"
5620,endLi,"    private void endLi(String tag, Editable text) {
        endCssStyle(tag, text);
        endBlockElement(tag, text);
        end(tag, text, Bullet.class, new BulletSpan());
    }"
5621,startLi,"    private void startLi(Editable text, Attributes attributes) {
        startBlockElement(text, attributes, getMarginListItem());
        start(text, new Bullet());
        startCssStyle(text, attributes);
    }"
5622,handleBr,"    private void handleBr(Editable text) {
        text.append('\n');
    }"
5623,endBlockElement,"    private void endBlockElement(String tag, Editable text) {
        Newline n = getLast(text, Newline.class);
        if (n != null) {
            appendNewlines(text, n.mNumNewlines);
            text.removeSpan(n);
        }"
5624,startBlockElement,"    private void startBlockElement(Editable text, Attributes attributes, int margin) {
        if (margin > 0) {
            appendNewlines(text, margin);
            start(text, new Newline(margin));
        }"
5625,appendNewlines,"    private void appendNewlines(Editable text, int minNewline) {
        final int len = text.length();
        if (len == 0) {
            return;
        }
        int existingNewlines = 0;
        for (int i = len - 1; i >= 0 && text.charAt(i) == '\n'; i--) {"
5633,handleEndTag,"    private void handleEndTag(String tag) {
        if (tag.equalsIgnoreCase(""br"")) {
            handleBr(mSpannableStringBuilder);"
5641,withinStyle,"    private static void withinStyle(StringBuilder out, CharSequence text,
                                    int start, int end) {
        for (int i = start; i < end; i++) {"
5642,withinParagraph,"    private static void withinParagraph(Context context, StringBuilder out, Spanned text, int start, int end) {
        int next;
        for (int i = start; i < end; i = next) {
            next = text.nextSpanTransition(i, end, CharacterStyle.class);"
5643,withinBlockquoteConsecutive,"    private static void withinBlockquoteConsecutive(Context context, StringBuilder out, Spanned text,
                                                    int start, int end) {
        out.append(""<p"").append(getTextDirection(text, start, end)).append("">"");
        int next;
        for (int i = start; i < end; i = next) {
            next = TextUtils.indexOf(text, '\n', i, end);"
5644,withinBlockquoteIndividual,"    private static void withinBlockquoteIndividual(Context context, StringBuilder out, Spanned text,
                                                   int start, int end) {
        boolean isInList = false;
        int next;
        for (int i = start; i <= end; i = next) {"
5645,withinBlockquote,"    private static void withinBlockquote(Context context, StringBuilder out, Spanned text,
                                         int start, int end, int option) {
        if ((option & TO_HTML_PARAGRAPH_FLAG) == TO_HTML_PARAGRAPH_LINES_CONSECUTIVE) {"
5648,withinDiv,"    private static void withinDiv(Context context, StringBuilder out, Spanned text,
                                  int start, int end, int option) {
        int next;
        for (int i = start; i < end; i = next) {"
5649,encodeTextAlignmentByDiv,"    private static void encodeTextAlignmentByDiv(Context context, StringBuilder out, Spanned text, int option) {
        int len = text.length();
        int next;
        for (int i = 0; i < len; i = next) {
            next = text.nextSpanTransition(i, len, ParagraphStyle.class);"
5650,withinHtml,"    private static void withinHtml(Context context, StringBuilder out, Spanned text, int option) {
        if ((option & TO_HTML_PARAGRAPH_FLAG) == TO_HTML_PARAGRAPH_LINES_CONSECUTIVE) {
            encodeTextAlignmentByDiv(context, out, text, option);
            return;"
5651,escapeHtml,"    public static String escapeHtml(CharSequence text) {
        StringBuilder out = new StringBuilder();
        withinStyle(out, text, 0, text.length());
        return out.toString();
    }"
5652,toHtml,"    public static String toHtml(Context context, Spanned text, int option) {
        StringBuilder out = new StringBuilder();
        withinHtml(context, out, text, option);
        return out.toString();
    }"
5653,fromHtml,"    public static Spanned fromHtml(@NonNull Context context, @NonNull String source, int flags,
                                   @Nullable ImageGetter imageGetter, @Nullable TagHandler tagHandler,
                                   @Nullable SpanCallback spanCallback) {
        if (source == null) {
            return null;
        }
        Parser parser = new Parser();"
5654,fromHtml,"    public static Spanned fromHtml(@NonNull Context context, @NonNull String source, int flags,
                                   @Nullable ImageGetter imageGetter, @Nullable TagHandler tagHandler) {
        return fromHtml(context, source, flags, imageGetter, tagHandler, null);"
5655,fromHtml,"    public static Spanned fromHtml(@NonNull Context context, @NonNull String source, int flags,
                                   @Nullable ImageGetter imageGetter) {
        return fromHtml(context, source, flags, imageGetter, null, null);"
5656,fromHtml,"    public static Spanned fromHtml(@NonNull Context context, @NonNull String source, int flags) {
        return fromHtml(context, source, flags, null, null);
    }"
5657,onClick,"        public void onClick(View widget) {
            try {
                super.onClick(widget);"
5658,onSpanCreated,"        Object onSpanCreated(String tag, Object span);
    }"
5659,handleTag,"        void handleTag(boolean opening, String tag,
                       Attributes attributes, Editable output, XMLReader xmlReader);"
5660,getDrawable,"        Drawable getDrawable(String source, Attributes attributes);
    }"
5664,onDependentViewChanged,"    public boolean onDependentViewChanged(CoordinatorLayout parent, FloatingActionButton fab, View dependency) {
        boolean returnValue = super.onDependentViewChanged(parent, fab, dependency);
        if (dependency instanceof AppBarLayout) {
                CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) fab.getLayoutParams();
                int fabBottomMargin = lp.bottomMargin;"
5665,layoutDependsOn,"    public boolean layoutDependsOn(CoordinatorLayout parent, FloatingActionButton fab, View dependency) {
        return super.layoutDependsOn(parent, fab, dependency) || (dependency instanceof AppBarLayout);
    }"
5666,testCardinalityInstance,"    public void testCardinalityInstance() throws Exception {
        final String json = ""{\""type\"":\""cardinality\"",\""size\"":1,\""extent\"":2,\""method\"":{\""type\"":\""exact\"",\""includeKey\"":false}}"";
        final CardinalityInstance aggregation = new CardinalityInstance(1, 2,
            new CardinalityMethod.ExactCardinalityMethod(false));

        assertEquals(json, mapper.writeValueAsString(aggregation));"
5667,setupBucket,"    protected CardinalityBucket setupBucket(final long timestamp) {
        return new HyperLogLogCardinalityBucket(42, true, 0.01D);
    }"
5668,allowedError,"    protected double allowedError() {
        return 0.9D;
    }"
5669,setupBucket,"    protected CardinalityBucket setupBucket(final long timestamp) {
        return new ExactCardinalityBucket(timestamp, true);
    }"
5670,allowedError,"    protected double allowedError() {
        return 0D;
    }"
5671,assertWithinVariance,"    private void assertWithinVariance(final long expected, final long count) {
        final double allowedError = allowedError();
        final double error = Math.abs(((double) expected / (double) count) - 1.0D);

        assertTrue(String.format(""Error (%f) not within (%f)"", error, allowedError),"
5672,strainTest,"    public void strainTest() {
        final CardinalityBucket bucket = setupBucket(42);

        for (int i = 0; i < 100000; i++) {
            bucket.update(t1, new Point(42, 1D * i));"
5673,basicTest,"    public void basicTest() {
        final CardinalityBucket bucket = setupBucket(42);
        bucket.update(t1, new Point(42, 1D));
        bucket.update(t1, new Point(42, 1D));
        bucket.update(t1, new Point(42, 2D));
        bucket.update(t2, new Point(42, 1D));

        assertWithinVariance(3L, bucket.count());"
5674,allowedError,"    protected double allowedError() {
        return 0.01D;
    }"
5675,setupBucket,"    protected abstract CardinalityBucket setupBucket(long timestamp);
"
5678,validateDots,"    private boolean validateDots(String name, boolean allowDirs, boolean isDir) {
        if (name.charAt(0) == '.') {
            return false;
        }
        if (!allowDirs && isDir) {
            return false;
        }
        int prevDotIndex = -1;
        int dotIndex = -1;
        int dotCount = 0;"
5679,validate,"    public boolean validate(String name, boolean allowDirs) {
        boolean isDir = MetricUtil.isDir(name);
        if ((!isDir && name.length() < minMetricLength) || name.length() > maxMetricLength) {
            return false;
        }
        if (!validateDots(name, allowDirs, isDir)) {"
5680,createStartWithDirectoryPattern,"    public static Pattern createStartWithDirectoryPattern(String[] directories) {
        String directoriesPattern = Arrays.stream(directories)
            .map(Pattern::quote)
            .collect(Collectors.joining(""|""));"
5684,splitToLevels,"    public static String[] splitToLevels(String metric) {
        return metric.split(""\\."");
    }"
5685,isDir,"    public static boolean isDir(String metric) {
        return metric.charAt(metric.length() - 1) == LEVEL_SPLITTER;
    }"
5699,needCheckInDb,"        private boolean needCheckInDb() {
            return lastCheckCounter > stepSize;
        }"
5700,addToCheck,"        private void addToCheck(String metric) {
            if (lastCheckCounter == 0) {
                minMetric = metric;
                maxMetric = metric;"
5701,reset,"        private void reset() {
            minMetric = null;
            maxMetric = null;
            lastCheckCounter = 0;
        }"
5702,hideMetricsBetween,"    private int hideMetricsBetween(String minMetric, String maxMetric) {
        if (minMetric == null || maxMetric == null) {
            return 0;
        }
"
5704,hide,"    private void hide() {
        log.info(""Running autohide."");
        try {
            MetricMinMaxChecker metricMinMaxChecker = new MetricMinMaxChecker();"
5705,run,"    public void run() {
        if (metricSearch.isMetricTreeLoaded()) {
            hide();"
5706,startService,"    public void startService() throws Exception {
        if (!enabled) {
            log.info(""Autohide disabled"");
            return;
        }"
5707,accept,"                                public void accept(String it) {
                                    GMApplication.getInstance().getDatabase().movieDao().deleteFuture();
                                }"
5708,accept,"                                public void accept(List<MovieEntity> list) {
                                    for (int i = 0, size = list.size(); i < size; i++) {
                                        list.get(i).setRank(i);
                                    }"
5709,saveRemoteResult,"            protected void saveRemoteResult(List<MovieEntity> data) {
                if (data != null && !data.isEmpty()) {
                    Observable.just(data)"
5710,requestApi,"            protected LiveData<ApiResponse<List<MovieEntity>>> requestApi() {
                MovieService service = new ApiClient().createApi(MovieService.class);
                ApiResponse<List<MovieEntity>> response = new ApiResponse<>();
                return response.map(service.movieFutureListGet(cityId));
            }"
5711,loadFromLocal,"            protected LiveData<List<MovieEntity>> loadFromLocal() {
                return GMApplication.getInstance().getDatabase().movieDao().loadMovieFutureList();
            }"
5713,accept,"                                public void accept(String it) {
                                    GMApplication.getInstance().getDatabase().movieDao().deleteNow();
                                }"
5714,accept,"                                public void accept(List<MovieEntity> list) {
                                    for (int i = 0, size = list.size(); i < size; i++) {
                                        list.get(i).setRank(i);
                                        list.get(i).setNow(true);"
5716,requestApi,"            protected LiveData<ApiResponse<List<MovieEntity>>> requestApi() {
                MovieService service = new ApiClient().createApi(MovieService.class);
                ApiResponse<List<MovieEntity>> response = new ApiResponse<>();
                return response.map(service.movieNowListGet(cityId));
            }"
5717,loadFromLocal,"            protected LiveData<List<MovieEntity>> loadFromLocal() {
                return GMApplication.getInstance().getDatabase().movieDao().loadMovieNowList();
            }"
5725,accept,"                    public void accept(String it) {
                        GMApplication.getInstance().getDatabase().cityDao().updateCity(city);
                    }"
5726,updateCity,"    public void updateCity(CityEntity city) {
        mCity.postValue(city);

        Observable.just("""")"
5728,accept,"                                public void accept(String it) {
                                    GMApplication.getInstance().getDatabase().boxOfficeDao().delete();
                                }"
5729,accept,"                                public void accept(List<BoxOfficeEntity> list) {
                                    GMApplication.getInstance().getDatabase().boxOfficeDao().update(list);
                                }"
5730,saveRemoteResult,"            protected void saveRemoteResult(List<BoxOfficeEntity> data) {
                if (data != null && !data.isEmpty()) {
                    Observable.just(data)"
5732,loadFromLocal,"            protected LiveData<List<BoxOfficeEntity>> loadFromLocal() {
                return GMApplication.getInstance().getDatabase().boxOfficeDao().loadBoxOfficeList();
            }"
5733,ifFetchNetworkFailedThenLoadLocalData,"            protected boolean ifFetchNetworkFailedThenLoadLocalData() {
                return true;
            }"
5735,isDebugEnable,"  @Override protected boolean isDebugEnable() {
    return false;
  }"
5738,isActionBarBlurred,"  @Override protected boolean isActionBarBlurred() {
    return mBlurredActionBar;
  }"
5739,isDimmingEnable,"  @Override protected boolean isDimmingEnable() {
    return mDimming;
  }"
5746,getmGifImageView,"  public GifImageView getmGifImageView() {
    return mGifImageView;
  }"
5749,show,"  public void show(FragmentManager fragmentManager){
    show(fragmentManager,"""");
  }"
5750,onDismiss,"  @Override public void onDismiss(DialogInterface dialog) {
    super.onDismiss(dialog);
    mDialog = null;
  }"
5752,onCreateDialog,"  @Override public Dialog onCreateDialog(Bundle savedInstanceState) {
    if (mDialog == null) {
      mDialog = new Dialog(getActivity(), R.style.gif_dialog);
      mDialog.setContentView(R.layout.gifloading_main);"
5755,isNetworkAvailable,"    public static boolean isNetworkAvailable(Context context) {
       if(context !=null){
           ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
           NetworkInfo info = cm.getActiveNetworkInfo();"
5756,px2dip,"    public int px2dip(int i) {
        float f = getDensity(context);
        return (int) (((double) i - 0.5D) / (double) f);
    }"
5757,px2dip,"    public int px2dip(float f) {
        float f1 = getDensity(context);
        return (int) (((double) f - 0.5D) / (double) f1);
    }"
5765,get480Height,"    public int get480Height(int i) {
        return (i * getScreenWidth()) / 480;
    }"
5766,dip2px,"    public int dip2px(int i) {
        return (int) (0.5D + (double) (getDensity(context) * (float) i));
    }"
5767,dip2px,"    public int dip2px(float f) {
        return (int) (0.5D + (double) (f * getDensity(context)));
    }"
5768,instance,"    public static ScreenUtil instance(Context context) {
        if (mScreenTools == null)
            mScreenTools = new ScreenUtil(context);
        return mScreenTools;"
5769,isSameDate,"    public static boolean isSameDate(Date date1, Date date2) {

        Calendar cal = Calendar.getInstance();
        cal.setTime(date1);
        Calendar selectedDate = Calendar.getInstance();
        selectedDate.setTime(date2);
"
5770,isHeaderTable,"  public static boolean isHeaderTable(int paramInt)
  {
    return (paramInt == head) || (paramInt == bhed);"
5771,intValue,"  public static int intValue(String paramString)
  {
    byte[] arrayOfByte = null;
    try
    {"
5772,stringValue,"  public static String stringValue(int paramInt)
  {
    String str;
    try
    {"
5773,byteValue,"  public static byte[] byteValue(int paramInt)
  {
    byte[] arrayOfByte = new byte[4];
    arrayOfByte[0] = ((byte)(0xFF & paramInt >> 24));
    arrayOfByte[1] = ((byte)(0xFF & paramInt >> 16));
    arrayOfByte[2] = ((byte)(0xFF & paramInt >> 8));
    arrayOfByte[3] = ((byte)(0xFF & paramInt));
    return arrayOfByte;"
5774,intValue,"  public static int intValue(byte[] paramArrayOfByte)
  {
    return paramArrayOfByte[0] << 24 | paramArrayOfByte[1] << 16 | paramArrayOfByte[2] << 8 | paramArrayOfByte[3];"
5775,newFontBuilder,"  public Font.Builder newFontBuilder()
  {
    return Font.Builder.getOTFBuilder(this);"
5777,serializeFont,"  public void serializeFont(Font paramFont, OutputStream paramOutputStream)
    throws IOException
  {"
5778,isCollection,"  private static boolean isCollection(ReadableFontData paramReadableFontData)
  {
    byte[] arrayOfByte = new byte[4];
    paramReadableFontData.readBytes(0, arrayOfByte, 0, arrayOfByte.length);
    return Tag.ttcf == Tag.intValue(arrayOfByte);"
5780,loadSingleOTFForBuilding,"  private Font.Builder loadSingleOTFForBuilding(WritableFontData paramWritableFontData, int paramInt)
    throws IOException
  {
    Object localObject = null;
    if (fingerprintFont()) {}
    Font.Builder localBuilder = Font.Builder.getOTFBuilder(this, paramWritableFontData, paramInt);"
5781,loadCollection,"  private Font[] loadCollection(WritableFontData paramWritableFontData)
    throws IOException
  {
    Font.Builder[] arrayOfBuilder = loadCollectionForBuilding(paramWritableFontData);
    Font[] arrayOfFont = new Font[arrayOfBuilder.length];
    for (int i = 0; i < arrayOfFont.length; i++) {"
5782,loadSingleOTF,"  private Font loadSingleOTF(WritableFontData paramWritableFontData)
    throws IOException
  {"
5783,loadFontsForBuilding,"  public Font.Builder[] loadFontsForBuilding(byte[] paramArrayOfByte)
    throws IOException
  {
    WritableFontData localWritableFontData = WritableFontData.createWritableFontData(paramArrayOfByte);
    if (isCollection(localWritableFontData)) {"
5784,loadFonts,"  public Font[] loadFonts(byte[] paramArrayOfByte)
    throws IOException
  {
    WritableFontData localWritableFontData = WritableFontData.createWritableFontData(paramArrayOfByte);
    if (isCollection(localWritableFontData)) {"
5785,isCollection,"  private static boolean isCollection(PushbackInputStream paramPushbackInputStream)
    throws IOException
  {
    byte[] arrayOfByte = new byte[4];
    paramPushbackInputStream.read(arrayOfByte);
    paramPushbackInputStream.unread(arrayOfByte);"
5786,loadCollectionForBuilding,"  private Font.Builder[] loadCollectionForBuilding(InputStream paramInputStream)
    throws IOException
  {
    WritableFontData localWritableFontData = WritableFontData.createWritableFontData(paramInputStream.available());
    localWritableFontData.copyFrom(paramInputStream);"
5787,loadSingleOTFForBuilding,"  private Font.Builder loadSingleOTFForBuilding(InputStream paramInputStream)
    throws IOException
  {
    MessageDigest localMessageDigest = null;
    if (fingerprintFont())
    {
      try"
5788,loadCollection,"  private Font[] loadCollection(InputStream paramInputStream)
    throws IOException
  {
    Font.Builder[] arrayOfBuilder = loadCollectionForBuilding(paramInputStream);
    Font[] arrayOfFont = new Font[arrayOfBuilder.length];
    for (int i = 0; i < arrayOfFont.length; i++) {"
5789,loadSingleOTF,"  private Font loadSingleOTF(InputStream paramInputStream)
    throws IOException
  {"
5790,loadFontsForBuilding,"  public Font.Builder[] loadFontsForBuilding(InputStream paramInputStream)
    throws IOException
  {
    PushbackInputStream localPushbackInputStream = new PushbackInputStream(new BufferedInputStream(paramInputStream), 4);
    if (isCollection(localPushbackInputStream)) {"
5791,loadFonts,"  public Font[] loadFonts(InputStream paramInputStream)
    throws IOException
  {
    PushbackInputStream localPushbackInputStream = new PushbackInputStream(new BufferedInputStream(paramInputStream), 4);
    if (isCollection(localPushbackInputStream)) {"
5792,fingerprintFont,"  public boolean fingerprintFont()
  {
    return this.fingerprint;"
5793,fingerprintFont,"  public void fingerprintFont(boolean paramBoolean)
  {
    this.fingerprint = paramBoolean;"
5795,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        FontCache.getInstance(this).addFont(""alegreya"", ""Alegreya-Regular.ttf"");

        DataBindingUtil.setContentView(this, R.layout.activity_main);"
5796,get,"    public Typeface get(String fontName) {
        String fontFilename = fontMapping.get(fontName);
        if (fontFilename == null) {
            Log.e(TAG, ""Couldn't find font "" + fontName + "". Maybe you need to call addFont() first?"");
            return null;"
5797,addFont,"    public void addFont(String name, String fontFilename) {
        fontMapping.put(name, fontFilename);
    }"
5800,run,"    public void run() {
        try {
            while( ! downLoadThread.isInterrupted()){"
5801,onClick,"    public void onClick(View v) {
        if(!flikerProgressBar.isFinish()){
            flikerProgressBar.toggle();"
5802,downLoad,"    private void downLoad() {
        downLoadThread = new Thread(this);
        downLoadThread.start();
    }"
5804,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        flikerProgressBar = (FlikerProgressBar) findViewById(R.id.flikerbar);
        roundProgressbar = (FlikerProgressBar) findViewById(R.id.round_flikerbar);

        flikerProgressBar.setOnClickListener(this);
        roundProgressbar.setOnClickListener(this);"
5805,handleMessage,"        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            flikerProgressBar.setProgress(msg.arg1);
            roundProgressbar.setProgress(msg.arg1);
            if(msg.arg1 == 100){
                flikerProgressBar.finishLoad();"
5806,showWarning,"	private void showWarning(String text) {
		JOptionPane.showMessageDialog(this, text, ""Warning"",
				JOptionPane.WARNING_MESSAGE);"
5807,showError,"	private void showError(String text) {
		JOptionPane.showMessageDialog(this, text, ""Error"",
				JOptionPane.ERROR_MESSAGE);"
5809,run,"					public void run() {
						Vector<String> export = getExportFolders();

						for (int i = 0; i < files.length; i++) {
							for (String exportString : export) {"
5810,filesDropped,"			public void filesDropped(final File[] files) {

				if (resFile == null) {
					showWarning(""Please select a destination folder first!"");
					return;
				}"
5811,actionPerformed,"			public void actionPerformed(ActionEvent arg0) {
				JFileChooser j = new JFileChooser();
				j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
				Integer returnVal = j.showOpenDialog(btnBrowse);
				if (returnVal == JFileChooser.APPROVE_OPTION) {
					resFile = j.getSelectedFile();"
5812,run,"			public void run() {
				try {
					ResizerFrame frame = new ResizerFrame();"
5813,main,"	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {"
5815,getRequiredSize,"	private static int getRequiredSize(String originalSize, String resFolder,
			int width) {
		float destRatio=1;
		if(resFolder.equalsIgnoreCase(""ldpi"")) {
			destRatio = LDPI_RATIO;
		}else if(resFolder.equalsIgnoreCase(""mdpi"")) {
			destRatio = MDPI_RATIO;"
5817,run,"            public void run() {
                createAndShowGUI();
            }"
5820,getObject,"            public abstract Object getObject();
"
5822,getTransferData,"        public Object getTransferData( java.awt.datatransfer.DataFlavor flavor )

        throws java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException 

        {   "
5826,filesDropped,"        public abstract void filesDropped( java.io.File[] files );
"
5828,remove,"    public static boolean remove( java.awt.Component c)

    {   return remove( null, c, true );"
5831,hierarchyChanged,"        {   public void hierarchyChanged( java.awt.event.HierarchyEvent evt )

            {   log( out, ""FileDrop: Hierarchy changed."" );

                java.awt.Component parent = c.getParent();"
5833,createFileArray,"     private static File[] createFileArray(BufferedReader bReader, PrintStream out)

     {
"
5835,dropActionChanged,"                public void dropActionChanged( java.awt.dnd.DropTargetDragEvent evt ) 

                {   log( out, ""FileDrop: dropActionChanged event."" );
"
5836,dragExit,"                public void dragExit( java.awt.dnd.DropTargetEvent evt ) 

                {   log( out, ""FileDrop: dragExit event."" );
"
5837,drop,"                public void drop( java.awt.dnd.DropTargetDropEvent evt )

                {   log( out, ""FileDrop: drop event."" );
"
5838,dragOver,"                public void dragOver( java.awt.dnd.DropTargetDragEvent evt ) 
"
5839,dragEnter,"            {   public void dragEnter( java.awt.dnd.DropTargetDragEvent evt )

                {       log( out, ""FileDrop: dragEnter event."" );
"
5840,saveFields,"    public abstract void saveFields(XContentBuilder builder) throws IOException;
}"
5841,getOplogFilter,"    public abstract DBObject getOplogFilter();
"
5842,on,"    private static Timestamp<?> on(@SuppressWarnings(""rawtypes"") Map map, boolean meta) {
        String tsField = meta ? MongoDBRiver.LAST_TIMESTAMP_FIELD : MongoDBRiver.OPLOG_TIMESTAMP;
        Object timestamp = map.get(tsField);
        if (timestamp == null) {
            return null;
        }
        if (timestamp instanceof String) {
            timestamp = JSON.parse((String) timestamp);
        }"
5843,on,"    public static Timestamp<?> on(Map<String, Object> map) {
        return on(map, true);
    }"
5844,on,"    public static Timestamp<?> on(DBObject entry) {
        return on(entry.toMap(), false);
    }"
5845,compare,"    public static int compare(Timestamp oplogTimestamp, Timestamp startTimestamp) {
        return oplogTimestamp.compareTo(startTimestamp);
    }"
5846,saveFields,"        public void saveFields(XContentBuilder builder) throws IOException {
            builder.field(MongoDBRiver.LAST_TIMESTAMP_FIELD, JSON.serialize(ts));
            builder.field(MongoDBRiver.LAST_GTID_FIELD, JSONSerializers.getStrict().serialize(gtid));
        }"
5849,toString,"        public String toString() {
            return ""Timestamp.GTID(ts="" + JSON.serialize(ts) + "", gtid="" + JSONSerializers.getStrict().serialize(gtid) + "")"";
        }"
5850,hashCode,"        public int hashCode() {
            return Arrays.hashCode(gtid);
        }"
5851,equals,"        public boolean equals(Object o) {
            return o instanceof GTID && Arrays.equals(gtid, ((GTID) o).gtid);
        }"
5852,compareTo,"        public int compareTo(Timestamp<GTID> o) {
            return UnsignedBytes.lexicographicalComparator().compare(this.gtid, ((GTID) o).gtid);
        }"
5853,saveFields,"        public void saveFields(XContentBuilder builder) throws IOException {
            builder.field(MongoDBRiver.LAST_TIMESTAMP_FIELD, JSON.serialize(ts));
        }"
5856,toString,"        public String toString() {
            return ""Timestamp.BSON(ts="" + JSON.serialize(ts) + "")"";
        }"
5857,hashCode,"        public int hashCode() {
            return ts.hashCode();
        }"
5858,equals,"        public boolean equals(Object o) {
            return o instanceof BSON && ts.equals(((BSON) o).ts);
        }"
5859,compareTo,"        public int compareTo(Timestamp<BSON> o) {
            return this.ts.compareTo(((BSON) o).ts);
        }"
5861,run,"    public void run() {
        while (true) {
            try {"
5865,addToStream,"    private void addToStream(final Operation operation, final Timestamp<?> currentTimestamp, final DBObject data, final String collection)
            throws InterruptedException {
        if (logger.isTraceEnabled()) {
            String dataString = data.toString();"
5866,addInsertToStream,"    private String addInsertToStream(final Timestamp<?> currentTimestamp, final DBObject data, final String collection)
            throws InterruptedException {
        totalDocuments.incrementAndGet();
        addToStream(Operation.INSERT, currentTimestamp, data, collection);
        if (data == null) {"
5867,addQueryToStream,"    private void addQueryToStream(final Operation operation, final Timestamp<?> currentTimestamp, final DBObject update,
                final String collection, final DBCollection slurpedCollection) throws InterruptedException {
        try (DBCursor cursor = slurpedCollection.find(update, findKeys)) {"
5868,addQueryToStream,"    private void addQueryToStream(final Operation operation, final Timestamp<?> currentTimestamp, final DBObject update,
            final String collection) throws InterruptedException {
        if (logger.isTraceEnabled()) {
            logger.trace(""addQueryToStream - operation [{}], currentTimestamp [{}], update [{}]"", operation, currentTimestamp, update);"
5872,applyFieldFilter,"    private DBObject applyFieldFilter(DBObject object) {
        if (object instanceof GridFSFile) {
            GridFSFile file = (GridFSFile) object;
            DBObject metadata = file.getMetaData();"
5873,filterMatch,"    private boolean filterMatch(DBObject filter, DBObject object) {
        for (String key : filter.keySet()) {
            if (!object.containsField(key)) {
                return false;"
5876,processAdminCommandOplogEntry,"    private void processAdminCommandOplogEntry(final DBObject entry, final Timestamp<?> startTimestamp) throws InterruptedException {
        if (logger.isTraceEnabled()) {
            logger.trace(""processAdminCommandOplogEntry - [{}]"", entry);
        }
        DBObject object = (DBObject) entry.get(MongoDBRiver.OPLOG_OBJECT);"
5878,flattenOps,"    private void flattenOps(DBObject entry) {
        Object ref = entry.removeField(MongoDBRiver.OPLOG_REF);
        Object ops = ref == null ? entry.removeField(MongoDBRiver.OPLOG_OPS) : getRefOps(ref);
        if (ops != null) {
            try {"
5880,processFullOplog,"    private DBCursor processFullOplog() throws InterruptedException, SlurperException {
        Timestamp<?> currentTimestamp = getCurrentOplogTimestamp();
        return oplogCursor(currentTimestamp);
    }"
5882,isIndexEmpty,"    protected boolean isIndexEmpty() {
        return MongoDBRiver.getIndexCount(esClient, definition) == 0;
    }"
5883,riverHasIndexedFromOplog,"    protected boolean riverHasIndexedFromOplog() {
        return MongoDBRiver.getLastTimestamp(esClient, definition) != null;
    }"
5887,configure,"    protected void configure() {
        bind(MongoClientService.class).asEagerSingleton();
    }"
5888,configure,"    protected void configure() {
        bind(River.class).to(MongoDBRiver.class).asEagerSingleton();
    }"
5894,isDisableIndexRefresh,"    public boolean isDisableIndexRefresh() {
        return disableIndexRefresh;
    }"
5895,isImportAllCollections,"    public boolean isImportAllCollections() {
        return importAllCollections;
    }"
5898,isStoreStatistics,"    public boolean isStoreStatistics() {
        return storeStatistics;
    }"
5900,isSkipInitialImport,"    public boolean isSkipInitialImport() {
        return skipInitialImport;
    }"
5901,isAdvancedTransformation,"    public boolean isAdvancedTransformation() {
        return advancedTransformation;
    }"
5908,isMongos,"    public Boolean isMongos() {
        return isMongos;
    }"
5909,isDropCollection,"    public boolean isDropCollection() {
        return dropCollection;
    }"
5910,isMongoSSLVerifyCertificate,"    public boolean isMongoSSLVerifyCertificate() {
        return mongoSSLVerifyCertificate;
    }"
5911,isMongoUseSSL,"    public boolean isMongoUseSSL() {
        return mongoUseSSL;
    }"
5912,isMongoSecondaryReadPreference,"    public boolean isMongoSecondaryReadPreference() {
        return mongoSecondaryReadPreference;
    }"
5924,isMongoGridFS,"    public boolean isMongoGridFS() {
        return mongoGridFS;
    }"
5930,addRemovePrefix,"    static String addRemovePrefix(String prefix, String object, boolean add) {
        if (prefix == null) {
            throw new IllegalArgumentException(""prefix"");
        }
        if (object == null) {
            throw new NullPointerException(""object"");
        }
        if (object.length() == 0) {
            return """";"
5931,addPrefix,"    static String addPrefix(String prefix, String object) {
        return addRemovePrefix(prefix, object, true);
    }"
5932,removePrefix,"    static String removePrefix(String prefix, String object) {
        return addRemovePrefix(prefix, object, false);
    }"
5933,convertToBasicDBObject,"    static BasicDBObject convertToBasicDBObject(String object) {
        if (object == null || object.length() == 0) {
            return new BasicDBObject();"
5934,checkClientTrusted,"                public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                }"
5935,checkServerTrusted,"                public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                }"
5943,build,"            public Bulk build() {
                return new Bulk(this);
            }"
5944,flushInterval,"            public Builder flushInterval(TimeValue flushInterval) {
                this.flushInterval = flushInterval;
                return this;
            }"
5945,bulkSize,"            public Builder bulkSize(ByteSizeValue bulkSize) {
                this.bulkSize = bulkSize;
                return this;
            }"
5946,bulkActions,"            public Builder bulkActions(int bulkActions) {
                this.bulkActions = bulkActions;
                return this;
            }"
5947,concurrentRequests,"            public Builder concurrentRequests(int concurrentRequests) {
                this.concurrentRequests = concurrentRequests;
                return this;
            }"
5948,build,"        public MongoDBRiverDefinition build() {
            return new MongoDBRiverDefinition(this);
        }"
5949,threadsAllowedToBlockForConnectionMultiplier,"        public Builder threadsAllowedToBlockForConnectionMultiplier(int threadsAllowedToBlockForConnectionMultiplier) {
            this.threadsAllowedToBlockForConnectionMultiplier = threadsAllowedToBlockForConnectionMultiplier;
            return this;
        }"
5950,connectionsPerHost,"        public Builder connectionsPerHost(int connectionsPerHost) {
            this.connectionsPerHost = connectionsPerHost;
            return this;
        }"
5951,bulk,"        public Builder bulk(Bulk bulk) {
            this.bulk = bulk;
            return this;
        }"
5952,throttleSize,"        public Builder throttleSize(int throttleSize) {
            this.throttleSize = throttleSize;
            return this;
        }"
5953,typeName,"        public Builder typeName(String typeName) {
            this.typeName = typeName;
            return this;
        }"
5954,indexName,"        public Builder indexName(String indexName) {
            this.indexName = indexName;
            return this;
        }"
5955,scriptType,"        public Builder scriptType(String scriptType) {
            this.scriptType = scriptType;
            return this;
        }"
5956,script,"        public Builder script(String script) {
            this.script = script;
            return this;
        }"
5957,importAllCollections,"        public Builder importAllCollections(boolean importAllCollections) {
            this.importAllCollections = importAllCollections;
            return this;
        }"
5958,statisticsTypeName,"        public Builder statisticsTypeName(String statisticsTypeName) {
            this.statisticsTypeName = statisticsTypeName;
            return this;
        }"
5959,statisticsIndexName,"        public Builder statisticsIndexName(String statisticsIndexName) {
            this.statisticsIndexName = statisticsIndexName;
            return this;
        }"
5960,storeStatistics,"        public Builder storeStatistics(boolean storeStatistics) {
            this.storeStatistics = storeStatistics;
            return this;
        }"
5961,parentTypes,"        public Builder parentTypes(Set<String> parentTypes) {
            this.parentTypes = parentTypes;
            return this;
        }"
5962,skipInitialImport,"        public Builder skipInitialImport(boolean skipInitialImport) {
            this.skipInitialImport = skipInitialImport;
            return this;
        }"
5963,advancedTransformation,"        public Builder advancedTransformation(boolean advancedTransformation) {
            this.advancedTransformation = advancedTransformation;
            return this;
        }"
5964,initialTimestamp,"        public Builder initialTimestamp(BSONTimestamp initialTimestamp) {
            this.initialTimestamp = new Timestamp.BSON(initialTimestamp);
            return this;
        }"
5965,initialTimestamp,"        public Builder initialTimestamp(Binary initialTimestamp) {
            this.initialTimestamp = new Timestamp.GTID(initialTimestamp.getData(), null);
            return this;
        }"
5966,disableIndexRefresh,"        public Builder disableIndexRefresh(boolean disableIndexRefresh) {
            this.disableIndexRefresh = disableIndexRefresh;
            return this;
        }"
5967,includeCollection,"        public Builder includeCollection(String includeCollection) {
            this.includeCollection = includeCollection;
            return this;
        }"
5968,includeFields,"        public Builder includeFields(Set<String> includeFields) {
            this.includeFields = includeFields;
            return this;
        }"
5969,excludeFields,"        public Builder excludeFields(Set<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }"
5970,isMongos,"        public Builder isMongos(Boolean isMongos) {
            this.isMongos = isMongos;
            return this;
        }"
5971,dropCollection,"        public Builder dropCollection(boolean dropCollection) {
            this.dropCollection = dropCollection;
            return this;
        }"
5972,mongoSSLVerifyCertificate,"        public Builder mongoSSLVerifyCertificate(boolean mongoSSLVerifyCertificate) {
            this.mongoSSLVerifyCertificate = mongoSSLVerifyCertificate;
            return this;
        }"
5973,mongoUseSSL,"        public Builder mongoUseSSL(boolean mongoUseSSL) {
            this.mongoUseSSL = mongoUseSSL;
            return this;
        }"
5974,mongoSecondaryReadPreference,"        public Builder mongoSecondaryReadPreference(boolean mongoSecondaryReadPreference) {
            this.mongoSecondaryReadPreference = mongoSecondaryReadPreference;
            return this;
        }"
5975,socketTimeout,"        public Builder socketTimeout(int socketTimeout) {
            this.socketTimeout = socketTimeout;
            return this;
        }"
5976,connectTimeout,"        public Builder connectTimeout(int connectTimeout) {
            this.connectTimeout = connectTimeout;
            return this;
        }"
5977,mongoClientOptions,"        public Builder mongoClientOptions(MongoClientOptions mongoClientOptions) {
            this.mongoClientOptions = mongoClientOptions;
            return this;
        }"
5978,mongoLocalAuthDatabase,"        public Builder mongoLocalAuthDatabase(String mongoLocalAuthDatabase) {
            this.mongoLocalAuthDatabase = mongoLocalAuthDatabase;
            return this;
        }"
5979,mongoLocalPassword,"        public Builder mongoLocalPassword(String mongoLocalPassword) {
            this.mongoLocalPassword = mongoLocalPassword;
            return this;
        }"
5980,mongoLocalUser,"        public Builder mongoLocalUser(String mongoLocalUser) {
            this.mongoLocalUser = mongoLocalUser;
            return this;
        }"
5981,mongoAdminAuthDatabase,"        public Builder mongoAdminAuthDatabase(String mongoAdminAuthDatabase) {
            this.mongoAdminAuthDatabase = mongoAdminAuthDatabase;
            return this;
        }"
5982,mongoAdminPassword,"        public Builder mongoAdminPassword(String mongoAdminPassword) {
            this.mongoAdminPassword = mongoAdminPassword;
            return this;
        }"
5983,mongoAdminUser,"        public Builder mongoAdminUser(String mongoAdminUser) {
            this.mongoAdminUser = mongoAdminUser;
            return this;
        }"
5984,mongoCollectionFilter,"        public Builder mongoCollectionFilter(BasicDBObject mongoCollectionFilter) {
            this.mongoCollectionFilter = mongoCollectionFilter;
            return this;
        }"
5985,mongoOplogFilter,"        public Builder mongoOplogFilter(BasicDBObject mongoOplogFilter) {
            this.mongoOplogFilter = mongoOplogFilter;
            return this;
        }"
5986,mongoGridFS,"        public Builder mongoGridFS(boolean mongoGridFS) {
            this.mongoGridFS = mongoGridFS;
            return this;
        }"
5987,mongoCollection,"        public Builder mongoCollection(String mongoCollection) {
            this.mongoCollection = mongoCollection;
            return this;
        }"
5988,mongoDb,"        public Builder mongoDb(String mongoDb) {
            this.mongoDb = mongoDb;
            return this;
        }"
5989,riverIndexName,"        public Builder riverIndexName(String riverIndexName) {
            this.riverIndexName = riverIndexName;
            return this;
        }"
5990,riverName,"        public Builder riverName(String riverName) {
            this.riverName = riverName;
            return this;
        }"
5991,mongoServers,"        public Builder mongoServers(List<ServerAddress> mongoServers) {
            this.mongoServers = mongoServers;
            return this;
        }"
5992,logStatistics,"    private void logStatistics(long duration) {
        if (definition.isStoreStatistics()) {
            long totalDocuments = deletedDocuments.get() + insertedDocuments.get();"
5993,dropRecreateMapping,"    private void dropRecreateMapping() throws IOException, InterruptedException {
        try {
            semaphore.acquire();"
5996,checkBulkProcessorAvailability,"    private void checkBulkProcessorAvailability() {
        while (!isBulkProcessorAvailable()) {
            try {"
5998,deleteBulkRequest,"    public void deleteBulkRequest(String id, String routing, String parent) {
        logger.trace(""deleteBulkRequest - id: {} - index: {} - type: {} - routing: {} - parent: {}"", id, index, type, routing, parent);
        bulkProcessor.add(deleteRequest(index).type(type).id(id).routing(routing).parent(parent));
        deletedDocuments.incrementAndGet();
    }"
5999,addBulkRequest,"    public void addBulkRequest(String id, XContentBuilder source, String routing, String parent) {
        bulkProcessor.add(indexRequest(index).type(type).id(id).source(source).routing(routing).parent(parent));
        insertedDocuments.incrementAndGet();
    }"
6000,addBulkRequest,"    public void addBulkRequest(String id, Map<?, ?> source, String routing, String parent) {
        bulkProcessor.add(indexRequest(index).type(type).id(id).source(source).routing(routing).parent(parent));
        insertedDocuments.incrementAndGet();
    }"
6001,dropIndex,"    public void dropIndex() {
        addBulkRequest(null, DROP_INDEX, null, null);
        flushBulkProcessor.set(true);
    }"
6002,afterBulk,"        public void afterBulk(long executionId, BulkRequest request, BulkResponse response) {
            if (response.hasFailures()) {
                logger.error(""Bulk processor failed. {}"", response.buildFailureMessage());"
6004,findLastDropCollection,"        private int findLastDropCollection(List<ActionRequest> request) {
            int index = 0;
            for (int i = 0; i < request.size(); i++) {
                ActionRequest<?> action = request.get(i);
                if (action instanceof IndexRequest) {"
6005,beforeBulk,"        public void beforeBulk(long executionId, BulkRequest request) {
            checkBulkProcessorAvailability();
            logger.trace(""beforeBulk - new bulk [{}] of items [{}]"", executionId, request.numberOfActions());
            if (flushBulkProcessor.get()) {
                logger.trace(""About to flush bulk request index[{}] - type[{}]"", index, type);"
6006,build,"        public MongoDBRiverBulkProcessor build() {
            return new MongoDBRiverBulkProcessor(river, definition, client, index, type);
        }"
6011,isAttachment,"        public boolean isAttachment() {
            return (data instanceof GridFSDBFile);
        }"
6013,source,"    private static XContentBuilder source(Timestamp<?> time) throws IOException {
        XContentBuilder builder = jsonBuilder().startObject().startObject(TYPE);
        time.saveFields(builder);
        return builder.endObject().endObject();
    }"
6016,getGridFSMapping,"    private XContentBuilder getGridFSMapping() throws IOException {
        XContentBuilder mapping = jsonBuilder()
            .startObject()
                .startObject(definition.getTypeName())
                    .startObject(""properties"")"
6019,internalStopRiver,"    void internalStopRiver() {
        logger.info(""Stopping"");
        try {
            if (startupThread != null) {"
6023,settings,"    public RiverSettings settings() {
        return super.settings;
    }"
6027,isMongos,"    private boolean isMongos() {
        if (definition.isMongos() != null) {
            return definition.isMongos().booleanValue();"
6031,call,"    public MongoConfig call() {
        boolean isMongos = isMongos();
        List<Shard> shards = getShards(isMongos);
        MongoConfig config = new MongoConfig(isMongos, shards);
        return config;
    }"
6035,isMongos,"    public boolean isMongos() {
        return isMongos;
    }"
6037,equals,"        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            ClientCacheKey other = (ClientCacheKey) obj;
            if (mongoClientOptions == null) {
                if (other.mongoClientOptions != null)"
6038,hashCode,"        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + ((mongoClientOptions == null) ? 0 : mongoClientOptions.hashCode());
            result = prime * result + ((mongoCredentials == null) ? 0 : mongoCredentials.hashCode());
            result = prime * result + ((servers == null) ? 0 : servers.hashCode());
            return result;
        }"
6041,doClose,"    protected void doClose() throws ElasticsearchException {
        synchronized ($lock) {
            for (MongoClient mongoClient : mongoClients.values()) {"
6042,doStop,"    protected void doStop() throws ElasticsearchException {
    }"
6043,doStart,"    protected void doStart() throws ElasticsearchException {
    }"
6044,extractIndex,"    private String extractIndex(Map<String, Object> ctx) {
        String index = (String) ctx.get(""_index"");
        if (index == null) {
            index = definition.getIndexName();
        }"
6045,extractType,"    private String extractType(Map<String, Object> ctx, String defaultType) {
        Object type = ctx.get(""_type"");
        if (type == null) {
            return defaultType;"
6046,isDocumentDeleted,"    private boolean isDocumentDeleted(Map<String, Object> ctx) {
        return Boolean.TRUE.equals(ctx.get(""deleted""));
    }"
6047,isDocumentIgnored,"    private boolean isDocumentIgnored(Map<String, Object> ctx) {
        return Boolean.TRUE.equals(ctx.get(""ignore""));
    }"
6048,extractOperation,"    private Operation extractOperation(Map<String, Object> ctx) {
        Object operation = ctx.get(""operation"");
        if (operation == null) {
            return null;"
6049,extractRouting,"    private String extractRouting(Map<String, Object> ctx) {
        Object routing = ctx.get(""_routing"");
        if (routing == null) {
            return null;"
6050,extractParent,"    private String extractParent(Map<String, Object> ctx) {
        Object parent = ctx.get(""_parent"");
        if (parent == null) {
            return null;"
6051,extractObjectId,"    private String extractObjectId(Map<String, Object> ctx, String objectId) {
        Object id = ctx.get(""id"");
        if (id != null) {
            return id.toString();
        }
        id = ctx.get(MongoDBRiver.MONGODB_ID_FIELD);"
6052,hasScript,"    private boolean hasScript() {
        return definition.getScriptType() != null && definition.getScript() != null;
    }"
6053,convertDbRef,"    private Map<String, Object> convertDbRef(DBRef ref) {
        Map<String, Object> obj = new HashMap<String, Object>();
        obj.put(""id"", ref.getId());
        obj.put(""ref"", ref.getCollectionName());

        return obj;"
6054,createObjectMap,"    private Map<String, Object> createObjectMap(DBObject dbObj) {
        Map<String, Object> mapData = new HashMap<String, Object>();
        for (String key : dbObj.keySet()) {
            Object value = dbObj.get(key);
            if (value instanceof DBRef) {"
6055,build,"    private XContentBuilder build(final DBObject data, final String objectId) throws IOException {
        if (data instanceof GridFSDBFile) {
            logger.info(""Add Attachment: {} to index {} / type {}"", objectId, definition.getIndexName(), definition.getTypeName());"
6057,deleteBulkRequest,"    private void deleteBulkRequest(String objectId, String index, String type, String routing, String parent) {
        if (logger.isTraceEnabled()) {
            logger.trace(""bulkDeleteRequest - objectId: {} - index: {} - type: {} - routing: {} - parent: {}"", objectId, index, type,
                    routing, parent);
        }"
6060,releaseProcessors,"    private void releaseProcessors() {
        for (MongoDBRiverBulkProcessor processor : processors.values()) {
            processor.getBulkProcessor().close();
        }"
6065,addInsertToStream,"    private String addInsertToStream(final Timestamp<?> currentTimestamp, final DBObject data) throws InterruptedException {
        return addInsertToStream(currentTimestamp, data, definition.getMongoCollection());
    }"
6067,updateIndexRefresh,"    private void updateIndexRefresh(String name, Object value) {
        esClient.admin().indices().prepareUpdateSettings(name).setSettings(ImmutableMap.of(""index.refresh_interval"", value)).get();
    }"
6072,importInitial,"    public void importInitial(Timestamp<?> timestamp) {
        try {
            if (!isIndexEmpty()) {"
6075,shutdown,"    public void shutdown() throws InterruptedException, IOException {
    }"
6076,waitFor,"    public SimplePipelineExecutor<R,P> waitFor()
            throws InterruptedException, ExecutionException {
        if (executorService == null || pipelines == null || futures == null || futures.isEmpty()) {
            return this;
        }
        exceptions = new LinkedList<>();"
6077,execute,"    public SimplePipelineExecutor<R,P> execute() {
        if (pipelines == null) {
            prepare();
        }
        if (pipelines.isEmpty()) {
            throw new IllegalStateException(""pipelines empty"");
        }"
6078,prepare,"    public SimplePipelineExecutor<R,P> prepare() {
        if (provider == null) {
            throw new IllegalStateException(""no provider set"");
        }
        if (queue == null) {
            throw new IllegalStateException(""no queue set"");
        }
        this.pipelines = new LinkedList<>();"
6088,shutdown,"    void shutdown() throws InterruptedException, ExecutionException, IOException;
"
6089,waitFor,"    PipelineExecutor<R,P> waitFor() throws InterruptedException, ExecutionException, IOException;
"
6092,setSink,"    PipelineExecutor<R,P> setSink(PipelineSink<R> sink);
"
6093,setQueue,"    PipelineExecutor<R,P> setQueue(BlockingQueue<R> queue);
"
6094,setPipelineProvider,"    PipelineExecutor<R,P> setPipelineProvider(PipelineProvider<P> provider);
"
6095,setConcurrency,"    PipelineExecutor<R,P> setConcurrency(int concurrency);
"
6097,setQueue,"    Pipeline<R> setQueue(BlockingQueue<R> queue);
"
6098,newRequest,"    public abstract void newRequest(Pipeline<R> pipeline, R request);
"
6099,call,"    public R call() throws Exception {
        R r = null;
        try {
            r = queue.poll(5L, TimeUnit.SECONDS);
            while (r != null) {"
6102,dip2px,"    private int dip2px(float dpValue) {
        final float scale = context.getResources()
                .getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);"
6103,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        canvas.drawLine(0, blankTB, width, blankTB, linePaint);
        canvas.drawLine(0, height-blankTB, width, height-blankTB, linePaint);

        canvas.drawPath(path, pathPaint);"
6138,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        canvas.drawPath(path, paint);
    }"
6140,getLastReplacedBroker,"  public String getLastReplacedBroker(String cluster) throws Exception {
    String path = getBrokerReplacementPath(cluster);
    Stat stat = curator.checkExists().forPath(path);
    String broker = null;
    if (stat != null) {
      String jsonStr = getDataInString(path);
      JsonObject jsonObject = (JsonObject) (new JsonParser()).parse(jsonStr);"
6141,getLastBrokerReplacementTime,"  public long getLastBrokerReplacementTime(String clusterName) throws Exception {
    String path = getBrokerReplacementPath(clusterName);
    Stat stat = curator.checkExists().forPath(path);
    long timestamp = -1;
    if (stat != null) {
      String jsonStr = getDataInString(path);
      JsonObject jsonObject = (JsonObject) (new JsonParser()).parse(jsonStr);"
6142,getBrokerReplacementInfo,"  public String getBrokerReplacementInfo(String cluster) throws Exception {
    String path = getBrokerReplacementPath(cluster);
    String jsonStr = getDataInString(path);
    return jsonStr;
  }"
6143,getDataInString,"  public String getDataInString(String path) throws Exception {
    String retval;
    byte[] data = curator.getData().forPath(path);
    retval = new String(data);
    return retval;
  }"
6146,getChildren,"  public List<String> getChildren(String path) throws Exception {
    List<String> children = curator.getChildren().forPath(path);
    return children;
  }"
6147,removeZkNode,"  public void removeZkNode(String path) throws Exception {
    try {
      curator.delete().forPath(path);"
6149,createIfNotExists,"  public boolean createIfNotExists(String path) {
    int numRetries = 0;
    while (numRetries < MAX_RETRIES) {
      try {
        Stat stat = curator.checkExists().forPath(path);"
6150,waitBetweenRetries,"  private void waitBetweenRetries(int numRetries) {
    try {
      Thread.sleep(RETRY_INTERVAL_MS * numRetries);"
6152,close,"  public void close() {
    curator.close();
  }"
6153,toString,"  public String toString() {
    return ""UserPrincipal [username="" + username + ""]"";
  }"
6156,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""ClusterLoadBalancer"", options);
    System.exit(1);
  }"
6157,parseCommandLine,"  private static CommandLine parseCommandLine(String[] args) {
    Option zookeeper = new Option(ZOOKEEPER, true, ""cluster zookeeper"");
    options.addOption(zookeeper);

    if (args.length < 2) {
      printUsageAndExit();
    }

    CommandLineParser parser = new DefaultParser();"
6158,renderHTML,"  public void renderHTML(PrintWriter writer, Map<String, String> params) {
    String clusterName = params.get(""cluster"");
    printHeader(writer);

    KafkaClusterManager clusterMananger =
        DoctorKMain.doctorK.getClusterManager(clusterName);

    if (clusterMananger == null) {
      writer.print(""Failed to find cluster manager for "" + clusterName);
      return;
    }
"
6159,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params) {
    String clusterName = params.get(""cluster"");
    KafkaClusterManager clusterMananger =
        DoctorKMain.doctorK.getClusterManager(clusterName);

    if (clusterMananger == null) {
      ClusterInfoError error = new ClusterInfoError(""Failed to find cluster manager for {}"", clusterName);
      writer.print(gson.toJson(error));
      return;"
6161,configure,"  public void configure(DoctorKConfig config) throws Exception {
    List<String> doctorKAdminGroups = config.getDoctorKAdminGroups();
    if (doctorKAdminGroups != null) {
      allowedAdminGroups.addAll(doctorKAdminGroups);"
6165,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""ReplicaStatsRetriever"", options);
    System.exit(1);
  }"
6172,toString,"    public String toString() {
      String result = topicPartition.toString() + "": "";
      result += source.getName() + "" -> "" + dest.getName();
      return result;
    }"
6173,toString,"  public String toString() {
    String result = topicPartition.toString() + "": "" + preferredLeaderBroker;
    return result;
  }"
6174,run,"  public void run() {
    KafkaConsumer<byte[], byte[]> kafkaConsumer = null;
    try {
      String brokers = KafkaUtils.getBrokers(zkUrl, securityProtocol);"
6175,join,"  public void join() throws InterruptedException {
    this.thread.join();
  }"
6176,start,"  public void start() {
    thread = new Thread(this);
    thread.start();
  }"
6177,toString,"  public String toString() {
    return topicPartition.toString();
  }"
6178,hashCode,"  public int hashCode() {
    if (hash != 0) {
      return hash;
    }
    final int prime = 31;
    int result = 1;
    result = prime * result + topicPartition.hashCode();

    if (replicaBrokers != null) {
      for (int brokerId: replicaBrokers) {
        result = prime * result + brokerId;"
6181,partition,"  public int partition() {
    return topicPartition.partition();
  }"
6182,topic,"  public String topic() {
    return topicPartition.topic();
  }"
6183,run,"  public void run() {
    startAdminHttpService();
  }"
6184,startAdminHttpService,"  public void startAdminHttpService() {
    try {
      Properties properties = new Properties();
      properties.load(this.getClass().getResource(""build.properties"").openStream());
      LOG.info(""build.properties build_revision: {}"",
          properties.getProperty(""build_revision"", ""unknown""));
    } catch (Throwable t) {
      LOG.warn(""Failed to load properties from build.properties"", t);
    }"
6185,addHandler,"  public void addHandler(String path, CustomHttpHandler handler) {
    this.customHttpHandlerMap.put(path, handler);
  }"
6186,sortByValue,"  public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {
    return map.entrySet()
        .stream()"
6189,startOstrichService,"  public static void startOstrichService(String serviceName, String tsdbHostPort, int ostrichPort) {
    final int TSDB_METRICS_PUSH_INTERVAL_IN_MILLISECONDS = 10 * 1000;
    OstrichAdminService ostrichService = new OstrichAdminService(ostrichPort);
    ostrichService.startAdminHttpService();
    if (tsdbHostPort != null) {
      LOG.info(""Starting the OpenTsdb metrics pusher"");"
6190,deserializeBrokerStats,"  public static BrokerStats deserializeBrokerStats(ConsumerRecord<byte[], byte[]> record) {
    try {
      BinaryDecoder binaryDecoder = avroDecoderFactory.binaryDecoder(record.value(), null);"
6195,getOffset,"  public static long getOffset(SimpleConsumer consumer, String topic, int partition,
                               long whichTime) throws IOException {
    String errMsg = null;
    Exception lastEx = null;
    for (int i = 0; i < FETCH_RETRIES; i++) {
      TopicAndPartition topicAndPartition = new TopicAndPartition(topic, partition);"
6197,pingKafkaBroker,"  public static boolean pingKafkaBroker(String host, int port, int timeout) {
    try (Socket socket = new Socket()) {
      socket.connect(new InetSocketAddress(host, port), timeout);"
6200,gauge,"  public static void gauge(String name, double value, String... tags) {
    Stats.setGauge(nameMetric(name, tags), value);
  }"
6201,gauge,"  public static void gauge(String name, double value) {
    Stats.setGauge(name, value);
  }"
6202,incr,"  public static void incr(String name, int i, String... tags) {
    Stats.incr(nameMetric(name, tags), i);
  }"
6203,incr,"  public static void incr(String name, String... tags) {
    Stats.incr(nameMetric(name, tags));
  }"
6204,incr,"  public static void incr(String name) {
    Stats.incr(name);
  }"
6205,addMetric,"  public static void addMetric(String name, int value, String... tags) {
    Stats.addMetric(nameMetric(name, tags), value);
  }"
6206,addMetric,"  public static void addMetric(String name, int value) {
    Stats.addMetric(name, value);
  }"
6207,nameMetric,"  public static String nameMetric(String name, String... tags) {
    StringBuilder builder = new StringBuilder(name);
    builder.append("" "")
        .append(SPACE_JOINER.join(tags));
    return builder.toString();"
6211,convertCounterOrGauge,"  private boolean convertCounterOrGauge(String name, int epochSecs, float value, OpenTsdbClient.MetricsBuffer buffer) {
    Tuple2<String, StringBuilder> nameAndTags = getNameAndTags(name);
    if (nameAndTags == null) {
      return false;
    }
    String statName = nameAndTags._1();
    StringBuilder tags = nameAndTags._2().append("" "").append(getDefaultTags());
"
6212,convertGauge,"  public boolean convertGauge(String name, int epochSecs, float value, OpenTsdbClient.MetricsBuffer buffer) {
    return convertCounterOrGauge(name, epochSecs, value, buffer);
  }"
6213,convertCounter,"  public boolean convertCounter(String name, int epochSecs, float value, OpenTsdbClient.MetricsBuffer buffer) {
    return convertCounterOrGauge(name, epochSecs, value, buffer);
  }"
6214,sendMetrics,"  public void sendMetrics(MetricsBuffer buffer)
      throws ConnectionFailedException, SendFailedException {
    Socket socket = null;
    try {"
6215,toString,"    public String toString() {
      return buffer.toString();
    }"
6216,reset,"    public void reset() {
      buffer.setLength(0);
    }"
6217,addMetric,"    public void addMetric(String name, int epochSecs, float value, String tags) {
      buffer.append(""put "")
          .append(name)"
6218,addMetric,"    public void addMetric(String name, int epochSecs, float value, String... tags) {
      addMetric(name, epochSecs, value, SPACE_JOINER.join(tags));
    }"
6220,getMetricValue,"  public static Future<KafkaMetricValue> getMetricValue(MBeanServerConnection mbs,
                                                        String metricName, String attributeName) {
    Callable<KafkaMetricValue> task =
        new KafkaMetricRetrievingTask(mbs, metricName, attributeName);
    Future<KafkaMetricValue> metricFuture = metricsThreadPool.submit(task);"
6222,sendMetrics,"  public long sendMetrics(boolean retryOnFailure)
      throws InterruptedException, UnknownHostException {
    long startTimeinMillis = System.currentTimeMillis();
    long end = startTimeinMillis + pollMillis;

    StatsSummary summary = statsListener.get();
    int epochSecs = (int) (startTimeinMillis / 1000L);
    fillMetricsBuffer(summary, epochSecs);
    if (LOG.isDebugEnabled()) {
      logOstrichStats(epochSecs);"
6223,logOstrichStats,"  private void logOstrichStats(int epochSecs) {
    LOG.debug(""Ostrich Metrics {}: \n{}"", epochSecs, buffer.toString());
  }"
6225,main,"  public static void main(String[] args) throws Exception {
    CommandLine commandLine = parseCommandLine(args);

    String host = commandLine.getOptionValue(BROKER_NAME);
    String jmxPort = commandLine.getOptionValue(JMX_PORT);
    String metric = commandLine.getOptionValue(METRICS_NAME);
    fetchKafkaMetrics(host, jmxPort, metric);"
6227,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""KafkaMetricsCollector"", options);
    System.exit(1);
  }"
6232,compare,"    public int compare(Node a, Node b) {
      int result = a.host().compareTo(b.host());
      if (result == 0) {
        result = a.port() - b.port();
      }"
6233,compare,"    public int compare(TopicPartition x, TopicPartition y) {
      int result = x.topic().compareTo(y.topic());
      if (result == 0) {
        result = x.partition() - y.partition();
      }"
6234,closeConsumer,"  public static void closeConsumer(String zkUrl) {
    if (kafkaConsumers.containsKey(zkUrl)) {
      kafkaConsumers.get(zkUrl).close();"
6235,getKafkaConsumer,"  public static KafkaConsumer<byte[], byte[]> getKafkaConsumer(String zkUrl,
      SecurityProtocol securityProtocol,
      Map<String, String> consumerConfigs) {"
6236,getKafkaConsumer,"  public static KafkaConsumer<?, ?> getKafkaConsumer(String zkUrl,
                                               String keyDeserializer, String valueDeserializer) {
    return getKafkaConsumer(zkUrl, keyDeserializer, valueDeserializer,"
6237,getKafkaConsumer,"  public static KafkaConsumer<byte[], byte[]> getKafkaConsumer(String zkUrl,
                                               String keyDeserializer,
                                               String valueDeserializer,
                                               int maxPoolRecords,
                                               SecurityProtocol securityProtocol,"
6242,isZero,"  private boolean isZero(double val) {
    return Math.abs(val - 0.0) < 0.00001;
  }"
6244,renderHTML,"  public void renderHTML(PrintWriter writer, Map<String, String> params) {
    String clusterName = params.get(""cluster"");
    String topic = params.get(""topic"");
    try {
      printHeader(writer);"
6245,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params) {
    String clusterName = params.get(""cluster"");
    String topic = params.get(""topic"");
    JsonArray json = new JsonArray();

    KafkaClusterManager clusterMananger =
      DoctorKMain.doctorK.getClusterManager(clusterName);
    if (clusterMananger == null) {"
6246,run,"    public void run() {
      try {
        if (brokerStatsReporter != null) {
          brokerStatsReporter.stop();
        }
      } catch (Throwable t) {"
6247,run,"    public void run() {
      long now = System.currentTimeMillis();
      if (now > restartTime) {
        LOG.warn(""Restarting metrics collector"");"
6248,stop,"    public void stop() throws Exception {
      monitorExecutor.shutdown();
    }"
6249,start,"    public void start() {
      monitorExecutor.scheduleAtFixedRate(this, INITIAL_DELAY, 15, TimeUnit.SECONDS);
    }"
6254,toInteger,"  public int toInteger() {
    return (Integer)value;
  }"
6255,toLong,"  public long toLong() {
    if (value instanceof Double) {
      return ((Double)value).longValue();
    }"
6256,toDouble,"  public double toDouble() {
    return (Double)value;
  }"
6258,call,"  public KafkaMetricValue call() throws Exception {
    try {
      Object obj = mbs.getAttribute(new ObjectName(metricName), attributeName);"
6263,setup,"  static void setup() throws Exception {
    DoctorKConfig config = new DoctorKConfig(""./config/doctork.properties"");
    doctorKClusterConfig = config.getClusterConfigByName(CLUSTER_NAME);
    zookeeper_url = doctorKClusterConfig.getZkUrl();
    kafkaCluster = new KafkaCluster(zookeeper_url, doctorKClusterConfig);
  }"
6265,toString,"  public String toString() {
    StringBuilder strBuilder = new StringBuilder();
    TreeMap<Integer, KafkaBroker> treeMap = new TreeMap<>(brokers);
    for (Map.Entry<Integer, KafkaBroker> entry : treeMap.entrySet()) {
      strBuilder.append(""   "" + entry.getKey() + "" : "");
      strBuilder.append(entry.getValue() + ""\n"");"
6266,clearResourceAllocationCounters,"  public void clearResourceAllocationCounters() {
    for (KafkaBroker broker : brokers.values()) {
      broker.clearResourceAllocationCounters();"
6272,findNextBrokerForOosReplica,"  protected boolean findNextBrokerForOosReplica(
      PriorityQueue<KafkaBroker> brokerQueue,
      Collection<KafkaBroker> unusableBrokers,
      Collection<Integer> replicaBrokers,
      Map<Integer, KafkaBroker> reassignmentMap,
      Integer oosBrokerId,
      TopicPartition tp,"
6273,getAlternativeBrokersByLocality,"  public Map<Integer, KafkaBroker> getAlternativeBrokersByLocality(
      Map<String, PriorityQueue<KafkaBroker>> brokerQueueByLocality,
      OutOfSyncReplica oosReplica,
      double inBoundReq,
      double outBoundReq,
      int preferredBroker
      ) {

    Map<String, List<Integer>> oosBrokerIdsByLocality = new HashMap<>();
    for ( int oosBrokerId : oosReplica.outOfSyncBrokers) {"
6274,getAlternativeBrokers,"  public Map<Integer, KafkaBroker> getAlternativeBrokers(
      PriorityQueue<KafkaBroker> brokerQueue,
      OutOfSyncReplica oosReplica,
      double inBoundReq,
      double outBoundReq,
      int preferredBroker
  ) {
"
6275,isInvalidBroker,"  protected boolean isInvalidBroker(KafkaBroker broker) {
    BrokerStats latestStats = broker.getLatestStats();
    return latestStats== null ||
        latestStats.getHasFailure() ||"
6286,toJson,"  public JsonElement toJson() {
    JsonObject json = new JsonObject();
    JsonArray jsonBrokers = new JsonArray();
    json.add(""brokers"", jsonBrokers);

    List<KafkaBroker> result = new ArrayList<>();

    synchronized (brokers) {"
6287,recordBrokerStats,"  public void recordBrokerStats(BrokerStats brokerStats) {
    try {
      int brokerId = brokerStats.getId();"
6288,name,"  public String name() {
    return clusterConfig.getClusterName();
  }"
6289,size,"  public int size() {
    return brokers.size();
  }"
6291,compare,"    public int compare(KafkaBroker x, KafkaBroker y) {
      double xNetworkUsage = x.getMaxBytesIn() + x.getMaxBytesOut()
          + x.reservedBytesIn + x.reservedBytesOut;
      double yNetworkUsage = y.getMaxBytesIn() + y.getMaxBytesOut()
          + y.reservedBytesIn + y.reservedBytesOut;"
6292,compareTo,"  public int compareTo(KafkaBroker another) {
    double networkUsage = getMaxBytesIn() + getMaxBytesOut()
        + reservedBytesIn + reservedBytesOut;
    double anotherUsage = another.getMaxBytesIn() + another.getMaxBytesOut()
        + another.reservedBytesIn + another.reservedBytesOut;"
6294,toString,"  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(""brokerId:"" + getId());
    sb.append(""; rackId = "" + rackId);
    sb.append(""; stats : "" + (latestStats == null ? ""null"" : latestStats));
    return sb.toString();
  }"
6297,removeReservedBandwidth,"  public boolean removeReservedBandwidth(TopicPartition tp, double inBound, double outBound){
    if ( toBeAddedReplicas.contains(tp) ){
      reservedBytesIn -= inBound;
      reservedBytesOut -= outBound;"
6300,isDecommissioned,"  public boolean isDecommissioned() {
    return this.isDecommissioned.get();
  }"
6301,cancelDecommission,"  public boolean cancelDecommission() {
    return this.isDecommissioned.getAndSet(false);
  }"
6302,decommission,"  public boolean decommission() {
    return this.isDecommissioned.getAndSet(true);
  }"
6307,hasTopicPartition,"  public boolean hasTopicPartition(TopicPartition tp) {
    return leaderReplicas.contains(tp) || followerReplicas.contains(tp)
        || toBeAddedReplicas.contains(tp);"
6310,clearResourceAllocationCounters,"  public void clearResourceAllocationCounters() {
    this.reservedBytesIn = 0L;
    this.reservedBytesOut = 0L;
    this.toBeAddedReplicas.clear();
  }"
6321,close,"  public void close() {
    kafkaProducer.close();
  }"
6322,publish,"  public void publish(BrokerStats brokerStats) throws IOException {
    try {
      ByteArrayOutputStream stream = new ByteArrayOutputStream();"
6323,main,"  public static void main(String[] args) throws Exception {
    CommandLine commandLine = parseCommandLine(args);
    String zkUrl = commandLine.getOptionValue(ZOOKEEPER);
    String cluster = commandLine.getOptionValue(CLUSTER);
    String broker = commandLine.getOptionValue(BROKER);
    ZookeeperClient zookeeperClient = null;

    try {"
6324,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""DoctorKZookeeperClient"", options);
    System.exit(1);
  }"
6326,doGet,"    protected void doGet(HttpServletRequest request,
                         HttpServletResponse response) throws ServletException,
                                                              IOException {
      response.setContentType(""text/html"");"
6329,run,"  public void run() {
    long now = System.currentTimeMillis();

    if (now > restartTime) {"
6330,stop,"  public void stop() throws Exception {
    monitorExecutor.shutdown();
  }"
6331,start,"  public void start() {
    monitorExecutor.scheduleAtFixedRate(this, INITIAL_DELAY, 15, TimeUnit.SECONDS);
  }"
6332,doGet,"  public void doGet(HttpServletRequest req, HttpServletResponse resp)
      throws ServletException, IOException {

    LOG.info(""Start working on get request"");
    resp.setStatus(HttpStatus.OK_200);

    PrintWriter writer = resp.getWriter();
    String contentType = req.getHeader(""content-type"");
    String queryString = req.getQueryString();"
6333,renderHTML,"  public void renderHTML(PrintWriter writer, Map<String, String> params){};
"
6334,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params){};
  public void renderHTML(PrintWriter writer, Map<String, String> params){};"
6335,convertDescriptiveStatisticsMap,"  public static Map<String, List<DescriptiveStatistics>> convertDescriptiveStatisticsMap(
      Map<TopicPartition, DescriptiveStatistics> tpsMap) {
    Map<String, List<DescriptiveStatistics>> result = new TreeMap<>();
    for (Map.Entry<TopicPartition, DescriptiveStatistics> entry : tpsMap.entrySet()) {
      String topicName = entry.getKey().topic();"
6336,parseQueryString,"  private static Map<String, String> parseQueryString(String queryString) {
    Map<String, String> result = new HashMap<>();
    if (queryString != null) {
      Arrays.stream(queryString.split(""&"")).map(s -> s.split(""="")).collect(toList())
	.forEach(arr -> result.put(arr[0], arr[1]));"
6337,printFooter,"  public static void printFooter(PrintWriter writer) {
    writer.print(""</body>"");
    writer.print(""<html>"");
  }"
6340,toString,"  public String toString() {
    return ""DoctorKSecurityContext [principal="" + principal + "", roles="" + roles + ""]"";
  }"
6342,isSecure,"  public boolean isSecure() {
    return true;
  }"
6343,isUserInRole,"  public boolean isUserInRole(String role) {
    return roles.contains(role);
  }"
6345,run,"    public void run() {
      try {
        if (doctorK != null) {
          doctorK.stop();"
6346,main,"  public static void main(String[] args) throws Exception {
    new DoctorKMain().run(args);
  }"
6348,startMetricsService,"  private void startMetricsService() {
    int ostrichPort = replicaStatsManager.getConfig().getOstrichPort();
    String tsdHostPort = replicaStatsManager.getConfig().getTsdHostPort();
    if (tsdHostPort == null && ostrichPort == 0) {
      LOG.info(""OpenTSDB and Ostrich options missing, not starting Ostrich service"");"
6349,checkAndInitializeAuthorizationFilter,"  private void checkAndInitializeAuthorizationFilter(Environment environment, DoctorKConfig doctorKConfig) {
    LOG.info(""Checking authorization filter"");
    try {
      Class<? extends DoctorKAuthorizationFilter> authorizationFilterClass = doctorKConfig.getAuthorizationFilterClass();"
6353,initialize,"  public void initialize(Bootstrap<DoctorKAppConfig> bootstrap) {
    bootstrap.addBundle(new AssetsBundle(""/webapp/pages/"", ""/"", ""index.html""));
  }"
6354,renderHTML,"  public void renderHTML(PrintWriter writer, Map<String, String> params) {
    try {
      double jvmUpTimeInSeconds = ManagementFactory.getRuntimeMXBean().getUptime() / 1000.0;"
6356,run,"  public void run() {
    OpenTsdbMetricConverter.gauge(DoctorKMetrics.DOCTORK_SERVICE_RUNNING, 1.0);
  }"
6357,stop,"  public void stop() {
    heartbeatExecutor.shutdown();
  }"
6358,start,"  public void start() {
    heartbeatExecutor.scheduleAtFixedRate(this, 0, HEARTBEAT_INTERVAL_IN_SECONDS, TimeUnit.SECONDS);
  }"
6360,getAuthorizationFilterClass,"  public Class<? extends DoctorKAuthorizationFilter> getAuthorizationFilterClass() throws ClassNotFoundException {
    if (doctorKConfiguration.containsKey(AUTHORIZATION_FILTER_CLASS)) {
      String classFqcn = doctorKConfiguration.getString(AUTHORIZATION_FILTER_CLASS);"
6373,configurationToMap,"  protected static Map<String, String> configurationToMap(AbstractConfiguration  configuration) {
    Iterator<String> keysIterator = configuration.getKeys();
    Map<String, String> result = new HashMap<>();
    while (keysIterator.hasNext()) {
      String key = keysIterator.next();
      result.put(key, configuration.getString(key));"
6387,initialize,"  private void initialize() {
    Set<String> clusters = new HashSet<>();
    Iterator<String> keysIterator = configuration.getKeys();
    while (keysIterator.hasNext()) {
      String propertyName = keysIterator.next();
      if (propertyName.startsWith(CLUSTER_PREFIX)) {
        String clusterName = propertyName.split(""\\."")[1];"
6388,enabledRackAwareness,"  public boolean enabledRackAwareness(){
    boolean result = false;
    if (clusterConfiguration.containsKey(ENABLE_RACK_AWARENESS)){
      result = clusterConfiguration.getBoolean(ENABLE_RACK_AWARENESS);
    }"
6394,enabledDeadbrokerReplacement,"  public boolean enabledDeadbrokerReplacement() {
    boolean result = false;
    if (clusterConfiguration.containsKey(BROKER_REPLACEMENT_ENABLE)) {
      result = clusterConfiguration.getBoolean(BROKER_REPLACEMENT_ENABLE);
    }"
6404,enabledWorloadBalancing,"  public boolean enabledWorloadBalancing() {
    boolean result = false;
    if (clusterConfiguration.containsKey(ENABLE_WORLOAD_BALANCING)) {
      result = clusterConfiguration.getBoolean(ENABLE_WORLOAD_BALANCING);
    }"
6406,dryRun,"  public boolean dryRun() {
    return clusterConfiguration.getBoolean(DRYRUN);
  }"
6408,printHtmlTableRow,"  private void printHtmlTableRow(PrintWriter writer, Object col1, Object col2) {
    writer.print(""<tr><td>"" + col1 + ""</td> <td>"" + col2 + ""</td> </tr>"");
  }"
6411,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params) {
    try {
      int brokerId = Integer.parseInt(params.get(""brokerid""));"
6412,getLatestStats,"  public BrokerStats getLatestStats(String clusterName, KafkaBroker broker)
    throws ClusterInfoError {
    BrokerStats latestStats = broker.getLatestStats();
    if (latestStats == null) {
      throw new ClusterInfoError(""Failed to get latest stats from broker {} in cluster {}"","
6413,getBroker,"  public KafkaBroker getBroker(String clusterName, int brokerId) throws ClusterInfoError {
    KafkaClusterManager clusterMananger =
        DoctorKMain.doctorK.getClusterManager(clusterName);
    if (clusterMananger == null) {
      throw new ClusterInfoError(""Failed to find cluster manager for {}"", clusterName);
    }
    KafkaBroker broker = clusterMananger.getCluster().getBroker(brokerId);"
6414,configure,"  public void configure(DoctorKConfig config) throws Exception;
"
6417,checkAndGetBroker,"  protected KafkaBroker checkAndGetBroker(String clusterName, String brokerId) {
    KafkaClusterManager clusterManager = checkAndGetClusterManager(clusterName);
    Integer id = Integer.parseInt(brokerId);
    KafkaBroker broker = clusterManager.getCluster().getBroker(id);
    if (broker == null) {
      throw new NotFoundException(""Unknown brokerId: "" + brokerId);
    }"
6418,checkAndGetClusterManager,"  protected KafkaClusterManager checkAndGetClusterManager(String clusterName) {
    KafkaClusterManager clusterManager = doctorK.getClusterManager(clusterName);
    if (clusterManager == null) {
      throw new NotFoundException(""Unknown clustername:"" + clusterName);
    }"
6420,main,"  public static void main(String[] args) throws Exception {
    CommandLine commandLine = parseCommandLine(args);
    String zkUrl = commandLine.getOptionValue(ZOOKEEPER);
    String topic = commandLine.getOptionValue(TOPIC);
    String message = commandLine.getOptionValue(MESSAGE);

    DoctorKActionReporter actionReporter =
        new DoctorKActionReporter(zkUrl, SecurityProtocol.PLAINTEXT, topic, null);"
6421,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""OperatorActionWriter"", options);
    System.exit(1);
  }"
6425,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params) {
    JsonArray json = new JsonArray();

    for (ConsumerRecord<byte[], byte[]> record : Lists.reverse(retrieveActionReportMessages())) {
      try {"
6427,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""OperatorActionRetriever"", options);
    System.exit(1);
  }"
6429,sendMessage,"  public synchronized void sendMessage(String clusterName, String message) {
    int numRetries = 0;
    while (numRetries < MAX_RETRIES) {
      try {"
6434,stop,"  public void stop() {
    brokerStatsProcessor.stop();
    zookeeperClient.close();
    heartbeat.stop();
    for (KafkaClusterManager clusterManager : clusterManagers.values()) {
      clusterManager.stop();"
6436,disableMaintenance,"  public void disableMaintenance(@Context HttpServletRequest ctx,
      @PathParam(""clusterName"") String clusterName) {
    KafkaClusterManager clusterManager = checkAndGetClusterManager(clusterName);
    clusterManager.disableMaintenanceMode();
    ApiUtils.logAPIAction(LOG, ctx, ""Disabled maintenance mode for cluster:"" + clusterName);"
6437,enableMaintenance,"  public void enableMaintenance(@Context HttpServletRequest ctx,
      @PathParam(""clusterName"") String clusterName) {
    KafkaClusterManager clusterManager = checkAndGetClusterManager(clusterName);
    clusterManager.enableMaintenanceMode();
    ApiUtils.logAPIAction(LOG, ctx, ""Enabled maintenance mode for cluster:"" + clusterName);"
6438,checkMaintenance,"  public boolean checkMaintenance(@PathParam(""clusterName"") String clusterName) {
    KafkaClusterManager clusterManager = checkAndGetClusterManager(clusterName);
    return clusterManager.isMaintenanceModeEnabled();
  }"
6445,renderHTML,"  public void renderHTML(PrintWriter writer, Map<String, String> params) {
    try {
      printHeader(writer);
      String clusterName = params.get(""name"");"
6446,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params) {
    String clusterName;
    try {
      clusterName = params.get(""name"");
    } catch (Exception e) {"
6457,computeNetworkStats,"  private void computeNetworkStats(NetworkStats networkStats, BrokerStats brokerStats) {
    if(this.currentNetworkStats == null) {
      this.currentNetworkStats = networkStats;"
6465,computeTopicPartitionReplicaCpuUsage,"  private void computeTopicPartitionReplicaCpuUsage(double totalCpuUsage,
                                                    List<ReplicaStat> replicaStats) {
    long totalTraffic = replicaStats.stream()
        .map(stat -> stat.getBytesIn1MinMeanRate() + stat.getBytesOut1MinMeanRate())"
6466,computeTopicPartitionReplicaNetworkTraffic,"  private void computeTopicPartitionReplicaNetworkTraffic(
      List<ReplicaStat> replicaStats,
      Set<String> topics,
      Map<String, Long> topicsBytesIn1Min, Map<String, Long> topicsBytesOut1Min,
      Map<String, Long> topicsBytesIn5Min, Map<String, Long> topicsBytesOut5Min,
      Map<String, Long> topicsBytesIn15Min, Map<String, Long> topicsBytesOut15Min) {
"
6468,getProcessCpuLoad,"  public static double getProcessCpuLoad(MBeanServerConnection mbs)
      throws MalformedObjectNameException, NullPointerException, InstanceNotFoundException,
             ReflectionException, IOException {
    ObjectName name = ObjectName.getInstance(""java.lang:type=OperatingSystem"");
    AttributeList list = mbs.getAttributes(name, new String[]{""ProcessCpuLoad""});

    if (list.isEmpty()) {
      return 0.0;
    }"
6469,getTopicNetworkMetricFromFutures,"  private Map<String, Long> getTopicNetworkMetricFromFutures(
      Map<String, Future<KafkaMetricValue>> futures)
      throws ExecutionException, InterruptedException {
    Map<String, Long> metricValues = new HashMap<>();
"
6470,getTopicMetrics,"  private Map<String, Future<KafkaMetricValue>> getTopicMetrics(MBeanServerConnection mbs,
                                                                Set<String> topics,
                                                                String metricTemplate,
                                                                String attributeName) {
    Map<String, Future<KafkaMetricValue>> futures = new HashMap<>();"
6471,run,"  public void run() {
    BrokerStatsRetriever brokerStatsRetriever = new BrokerStatsRetriever(kafkaConfigPath, primaryNetworkInterfaceName, disableEc2metadata);
    try {
      BrokerStats stats = brokerStatsRetriever.retrieveBrokerStats(brokerHost, jmxPort);"
6472,stop,"  public void stop() throws Exception {
    statsReportExecutor.shutdown();
  }"
6473,start,"  public void start() {
    LOG.info(""Starting broker stats reporter....."");
    statsReportExecutor.scheduleAtFixedRate(
        this, INITIAL_DELAY, pollingIntervalInSeconds, TimeUnit.SECONDS);"
6475,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""BrokerStatsReader"", options);
    System.exit(1);
  }"
6476,parseCommandLine,"  private static CommandLine parseCommandLine(String[] args) {
    if (args.length < 4) {
      printUsageAndExit();
    }

    Option zookeeper = new Option(ZOOKEEPER, true, ""zookeeper connection string"");
    Option statsTopic = new Option(STATS_TOPIC, true, ""kafka topic for broker stats"");
    options.addOption(zookeeper).addOption(statsTopic);

    CommandLineParser parser = new DefaultParser();"
6477,uncaughtException,"    public void uncaughtException(Thread t, Throwable e) {
      LOG.error(""Unexpected exception : "", e);
      System.exit(1);
    }"
6478,run,"  public void run() {
    thread.setUncaughtExceptionHandler(new BrokerStatsReaderExceptionHandler());
    this.stopped = false;
    try {
      Properties properties = OperatorUtil.createKafkaConsumerProperties("
6479,stop,"  public void stop() {
    this.stopped = true;
  }"
6480,start,"  public void start() {
    this.thread = new Thread(this);
    this.thread.start();
  }"
6482,processOnePartition,"  public static List<BrokerStats> processOnePartition(String zkUrl, TopicPartition topicPartition,
                                                      long startOffset, long endOffset,
                                                      Set<String> brokerNames) {
    KafkaConsumer<byte[], byte[]> kafkaConsumer = null;
    List<BrokerStats> result = new ArrayList<>();
    try {"
6485,cancelDecommissionBroker,"  public void cancelDecommissionBroker(@Context HttpServletRequest ctx,
                                       @PathParam(""clusterName"") String clusterName,
                                       @PathParam(""brokerId"") String brokerIdStr) {
    checkAndGetClusterManager(clusterName).cancelDecommissionBroker(Integer.parseInt(brokerIdStr));"
6486,decommissionBroker,"  public void decommissionBroker(@Context HttpServletRequest ctx,
                                 @PathParam(""clusterName"") String clusterName,
                                 @PathParam(""brokerId"") String brokerIdStr) {
    checkAndGetClusterManager(clusterName).decommissionBroker(Integer.parseInt(brokerIdStr));"
6487,isBrokerDecommissioned,"  public boolean isBrokerDecommissioned(@PathParam(""clusterName"") String clusterName, @PathParam(""brokerId"") String brokerId) {
    return checkAndGetBroker(clusterName, brokerId).isDecommissioned();
  }"
6490,abort,"  public void abort() {
    if (inBrokerReplacement) {
      thread.interrupt();"
6493,busy,"  public boolean busy() {
    return this.inBrokerReplacement;
  }"
6494,replaceBroker,"  public void replaceBroker(String brokerName) {
    if (!inBrokerReplacement) {
      this.broker = brokerName;"
6496,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""BrokerReplacement"", options);
    System.exit(1);
  }"
6497,parseCommandLine,"  private static CommandLine parseCommandLine(String[] args) {
    Option broker = new Option(BROKER, true, ""broker name"");
    Option command = new Option(COMMAND, true, ""command for relaunching a host"");
    options.addOption(broker).addOption(command);

    if (args.length < 3) {
      printUsageAndExit();
    }

    CommandLineParser parser = new DefaultParser();"
6498,logAPIAction,"  public static void logAPIAction(Logger LOG, HttpServletRequest ctx, String message) {
    LOG.info(""User from:"" + ctx.getRemoteUser() + "" from ip:"" + ctx.getRemoteHost() + "" "" + message);
  }"
6500,recalculateCurrentSpeed,"  private void recalculateCurrentSpeed() {
    currentSpeed += getRandom(-SPEED_RANDOM_DELTA, SPEED_RANDOM_DELTA);

    if (currentSpeed < MIN_SPEED) {
      currentSpeed = MIN_SPEED;"
6501,calculateJumpSpeed,"  private void calculateJumpSpeed() {
    currentVerticalSpeed = getRandom(0.2f * MAX_JUMP_HEIGHT_IN_METERS, MAX_JUMP_HEIGHT_IN_METERS) * meterInDp * density;
  }"
6503,updateAngle,"  private void updateAngle(double delta) {
    angle += delta * ROTATION_SPEED;
    angle %= 360;
  }"
6504,drawTumbleweed,"  private void drawTumbleweed(Canvas canvas, double delta) {
    updateAngle(delta);
    matrix.setTranslate(x, y);
    matrix.postRotate(angle, x + tumbleweed.getWidth() / 2, y + tumbleweed.getHeight() / 2);
    canvas.drawBitmap(tumbleweed, matrix, paint);
  }"
6505,drawShadow,"  private void drawShadow(Canvas canvas) {
    float scale = 1 - SHADOW_SCALE_FACTOR * ((bottomPosition - y) / (bottomPosition - topPosition));
    Bitmap toDraw;
    if (scale == 1) {
      toDraw = shadow;
    } else {"
6506,onDraw,"  protected void onDraw(Canvas canvas) {
    long time = System.currentTimeMillis();

    if (timeStamp != INVALID_TIME) {
      double delta = (time - timeStamp) / 1000d;
      updatePosition(delta);"
6507,init,"  private void init(Context context) {
    Resources res = context.getResources();
    paint = new Paint();
    tumbleweed = BitmapFactory.decodeResource(res, R.drawable.tumbleweed);
    shadow = BitmapFactory.decodeResource(res, R.drawable.shadow_tumbleweed);
    density = context.getResources().getDisplayMetrics().density;
    random = new Random();
    meterInDp = tumbleweed.getHeight();
  }"
6512,updatePosition,"  private void updatePosition(Cloud cloud, double timeDelta) {
    cloud.x += density * SPEED_DP_PER_SEC * cloud.speedMultiplier * timeDelta;
    int width = getWidth();
    if (cloud.x > width) {
      cloud.x = -cloud.bitmap.getWidth();"
6513,drawClouds,"  private void drawClouds(Canvas canvas, long time) {
    for (Cloud cloud : clouds) {
      updatePosition(cloud, (time - timeStamp) / 1000d);"
6515,onDraw,"  protected void onDraw(Canvas canvas) {
    long time = System.currentTimeMillis();
    if (timeStamp != -1) {
      drawClouds(canvas, time);
    } else {
      initClouds();"
6516,init,"  private void init(Context context) {
    paint = new Paint();
    density = context.getResources().getDisplayMetrics().density;
  }"
6521,create,"      public WeightedResourceRecordSetApi create(String id) {
        return null;
      }"
6522,provideWeightedResourceRecordSetApiFactory,"  WeightedResourceRecordSetApi.Factory provideWeightedResourceRecordSetApiFactory() {
    return new WeightedResourceRecordSetApi.Factory() {
      @Override"
6523,create,"    ResourceRecordSetApi create(String id);
  }"
6524,deleteByNameAndType,"  void deleteByNameAndType(String name, String type);
"
6526,getByNameAndType,"  ResourceRecordSet<?> getByNameAndType(String name, String type);
"
6527,iterateByName,"  Iterator<ResourceRecordSet<?>> iterateByName(String name);
"
6529,getByNameTypeAndQualifier,"  ResourceRecordSet<?> getByNameTypeAndQualifier(String name, String type, String qualifier);
}"
6530,iterateByNameAndType,"  Iterator<ResourceRecordSet<?>> iterateByNameAndType(String name, String type);
"
6533,get,"      public Credentials get() {
        return server.credentials();
      }"
6534,url,"      public String url() {
        return server.url();
      }"
6535,mockApi,"  CloudDNS mockApi() {
    CloudDNSProvider.FeignModule module = new CloudDNSProvider.FeignModule();
    Feign feign = module.feign(module.logger(), module.logLevel());
    CloudIdentity cloudIdentity = module.cloudIdentity(feign);
    Provider provider = new CloudDNSProvider() {
      @Override
      public String url() {
        return server.url();"
6536,deleteRecord,"  public void deleteRecord() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(mxRecordDeleteInitialResponse));

    Job job = mockApi().deleteRecord(domainId, ""MX-4582544"");

    assertThat(job.id).isEqualTo(""da520d24-dd5b-4387-92be-2020a7f2b176"");
    assertThat(job.status).isEqualTo(""RUNNING"");
"
6537,updateMXRecord,"  public void updateMXRecord() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(mxRecordUpdateInitialResponse));

    Job job = mockApi().updateRecord(domainId, ""MX-4582544"", 600, ""mail.denominator.io"");

    assertThat(job.id).isEqualTo(""e32eace1-c44f-49af-8f74-768fa34469f4"");
    assertThat(job.status).isEqualTo(""RUNNING"");
"
6538,completedRequest,"  public void completedRequest() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(mxRecordCompletedResponse));

    Job job = mockApi().getStatus(""0ade2b3b-07e4-4e68-821a-fcce4f5406f3"");

    assertThat(job.id).isEqualTo(""0ade2b3b-07e4-4e68-821a-fcce4f5406f3"");
    assertThat(job.status).isEqualTo(""COMPLETED"");
"
6539,runningRequest,"  public void runningRequest() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(mxRecordRunningResponse));

    Job job = mockApi().getStatus(""0ade2b3b-07e4-4e68-821a-fcce4f5406f3"");

    assertThat(job.id).isEqualTo(""0ade2b3b-07e4-4e68-821a-fcce4f5406f3"");
    assertThat(job.status).isEqualTo(""RUNNING"");
"
6541,recordsAbsent,"  public void recordsAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(""{\""records\"":[]}""));

    assertThat(mockApi().records(domainId)).isEmpty();

    server.assertAuthRequest();"
6542,recordsPresent,"  public void recordsPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(recordsResponse));

    assertThat(mockApi().records(domainId))
        .extracting(""id"", ""name"", ""type"", ""ttl"", ""priority"", ""data"")
        .containsExactly("
6543,domainsAbsent,"  public void domainsAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(""{\""domains\"":[]}""));

    assertThat(mockApi().domains()).isEmpty();

    server.assertAuthRequest();"
6544,domainsByNamePresent,"  public void domainsByNamePresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(domainsResponse));

    assertThat(mockApi().domainsByName(""denominator.io"")).containsExactly(
        Zone.create(""1234"", ""denominator.io"", 0, ""nil@denominator.io"")
    );"
6545,domainsPresent,"  public void domainsPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(domainsResponse));

    assertThat(mockApi().domains().get(0))
        .hasName(""denominator.io"");
"
6546,limitsSuccess,"  public void limitsSuccess() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(limitsResponse));

    assertThat(mockApi().limits()).isNotEmpty();

    server.assertAuthRequest();"
6548,toString,"    public String toString() {
      return new StringBuilder(name).append(type).append(ttl).append(data).append(priority)
          .toString();"
6549,data,"    public void data(String data) {
      this.data = data;
    }"
6550,data,"    public String data() {
      if (""AAAA"".equals(type)) {
        return data.toUpperCase();
      }"
6552,deleteRecord,"    Job deleteRecord(@Param(""domainId"") int domainId,
                     @Param(""recordId"") String recordId);"
6553,updateRecord,"    Job updateRecord(@Param(""domainId"") int domainId, @Param(""recordId"") String recordId,
                     @Param(""ttl"") int ttl, @Param(""data"") String data);"
6554,createRecordWithPriority,"    Job createRecordWithPriority(@Param(""domainId"") int id, @Param(""name"") String name,
                                 @Param(""type"") String type, @Param(""ttl"") int ttl,"
6555,createRecord,"    Job createRecord(@Param(""domainId"") int id, @Param(""name"") String name,
                     @Param(""type"") String type, @Param(""ttl"") int ttl, @Param(""data"") String data);"
6556,recordsByNameAndType,"    ListWithNext<Record> recordsByNameAndType(@Param(""domainId"") int id,
                                              @Param(""name"") String nameFilter,"
6557,records,"    ListWithNext<Record> records(@Param(""domainId"") int id);
"
6561,domainsByName,"    ListWithNext<Zone> domainsByName(@Param(""name"") String name);
"
6563,updateDomain,"    Job updateDomain(@Param(""id"") String id, @Param(""email"") String email, @Param(""ttl"") int ttl);
"
6564,createDomain,"    Job createDomain(@Param(""name"") String name, @Param(""email"") String email,
                     @Param(""ttl"") int ttl);"
6565,getStatus,"    Job getStatus(@Param(""jobId"") String jobId);
"
6567,passwordAuth,"    TokenIdAndPublicURL passwordAuth(URI endpoint, @Param(""username"") String username,
                                     @Param(""password"") String password);"
6568,apiKeyAuth,"    TokenIdAndPublicURL apiKeyAuth(URI endpoint, @Param(""username"") String username,
                                   @Param(""apiKey"") String apiKey);"
6569,emptyOn404,"  static <X> ListWithNext<X> emptyOn404(Pager<X> pagingFunction, URI nullOrNext) {
    try {
      return pagingFunction.apply(nullOrNext);"
6570,write,"    public void write(JsonWriter out, ListWithNext<X> value) throws IOException {
      throw new UnsupportedOperationException();
    }"
6571,read,"    public ListWithNext<X> read(JsonReader reader) throws IOException {
      ListWithNext<X> records = new ListWithNext<X>();
      reader.beginObject();
      while (reader.hasNext()) {
        String nextName = reader.nextName();
        if (jsonKey().equals(nextName)) {
          reader.beginArray();
          while (reader.hasNext()) {"
6572,build,"    protected abstract X build(JsonReader reader) throws IOException;
"
6574,build,"    protected Record build(JsonReader reader) throws IOException {
      Record record = new Record();
      while (reader.hasNext()) {
        String key = reader.nextName();
        if (key.equals(""id"")) {"
6575,jsonKey,"    protected String jsonKey() {
      return ""records"";
    }"
6576,build,"    protected Zone build(JsonReader reader) throws IOException {
      String name = null, id = null, email = null;
      while (reader.hasNext()) {
        String nextName = reader.nextName();
        if (nextName.equals(""id"")) {"
6577,jsonKey,"    protected String jsonKey() {
      return ""domains"";
    }"
6578,read,"    public Job read(JsonReader reader) throws IOException {
      Job job = new Job();

      reader.beginObject();
      while (reader.hasNext()) {
        String key = reader.nextName();
        if (key.equals(""jobId"")) {"
6580,toStringComparator,"  private static <X> Comparator<X> toStringComparator() {
    return Comparator.class.cast(TO_STRING_COMPARATOR);
  }"
6581,compare,"    public int compare(Object left, Object right) {
      return left.toString().compareTo(right.toString());
    }"
6582,create,"    QualifiedResourceRecordSetApi create(String id);
  }"
6583,deleteByNameTypeAndQualifier,"  void deleteByNameTypeAndQualifier(String name, String type, String qualifier);
"
6585,toString,"    public String toString() {
      return ""Provides("" + provider + "")"";
    }"
6586,get,"    public Provider get() {
      return provider;
    }"
6587,provide,"  public static Object provide(denominator.Provider provider) {
    return new ProvideProvider(provider);
  }"
6589,withUrl,"  public static Provider withUrl(Provider provider, String url) {
    checkNotNull(provider, ""provider"");
    checkNotNull(url, ""url"");
    try {
      Constructor<?> ctor = provider.getClass().getDeclaredConstructor(String.class);"
6591,list,"  public static Iterable<Provider> list() {
    return ServiceLoader.load(Provider.class);
  }"
6592,credentialTypeToParameterNames,"  Map<String, Collection<String>> credentialTypeToParameterNames();
}"
6594,profileToRecordTypes,"  Map<String, Collection<String>> profileToRecordTypes();
"
6598,deleteByNameAndType,"    public void deleteByNameAndType(String name, String type) {
      api.deleteByNameAndType(name, type);
    }"
6599,deleteByNameTypeAndQualifier,"    public void deleteByNameTypeAndQualifier(String name, String type, String qualifier) {
      api.deleteByNameAndType(name, type);
    }"
6600,put,"    public void put(ResourceRecordSet<?> rrset) {
      api.put(rrset);
    }"
6601,getByNameTypeAndQualifier,"    public ResourceRecordSet<?> getByNameTypeAndQualifier(String name, String type,
                                                          String qualifier) {
      return null;"
6602,iterateByNameAndType,"    public Iterator<ResourceRecordSet<?>> iterateByNameAndType(String name, String type) {
      ResourceRecordSet<?> rrs = api.getByNameAndType(name, type);
      if (rrs != null) {
        return Collections.<ResourceRecordSet<?>>singleton(rrs).iterator();
      }"
6603,iterateByName,"    public Iterator<ResourceRecordSet<?>> iterateByName(String name) {
      return api.iterateByName(name);
    }"
6604,iterator,"    public Iterator<ResourceRecordSet<?>> iterator() {
      return api.iterator();
    }"
6605,create,"      public AllProfileResourceRecordSetApi create(String id) {
        return new OnlyBasicResourceRecordSetApi(factory.create(id));
      }"
6606,provideAllProfileResourceRecordSetApi,"  AllProfileResourceRecordSetApi.Factory provideAllProfileResourceRecordSetApi(
      final ResourceRecordSetApi.Factory factory) {
    return new AllProfileResourceRecordSetApi.Factory() {"
6608,provideCloser,"  Closeable provideCloser() {
    return this;
  }"
6609,delete,"  public void delete(String name) {
    data.remove(name);
  }"
6610,put,"  public String put(Zone zone) {
    if (!data.containsKey(zone.name())) {
      Collection<ResourceRecordSet<?>>
          recordsInZone =
          new ConcurrentSkipListSet<ResourceRecordSet<?>>(TO_STRING);"
6611,iterateByName,"  public Iterator<Zone> iterateByName(String name) {
    return filter(iterator(), nameEqualTo(name));
  }"
6612,remove,"      public void remove() {
        throw new UnsupportedOperationException(""remove"");
      }"
6614,hasNext,"      public boolean hasNext() {
        return delegate.hasNext();
      }"
6615,iterator,"  public Iterator<Zone> iterator() {
    final Iterator<Entry<String, Collection<ResourceRecordSet<?>>>>
        delegate = data.entrySet().iterator();
    return new Iterator<Zone>() {"
6616,compare,"        public int compare(ResourceRecordSet<?> arg0, ResourceRecordSet<?> arg1) {
          return arg0.toString().compareTo(arg1.toString());
        }"
6617,put,"  public void put(ResourceRecordSet<?> rrset) {
    put(IS_WEIGHTED, rrset);
  }"
6618,supportedWeights,"  public SortedSet<Integer> supportedWeights() {
    return supportedWeights;
  }"
6619,apply,"        public boolean apply(ResourceRecordSet<?> in) {
          return in != null && in.weighted() != null;
        }"
6620,deleteByNameAndType,"  public void deleteByNameAndType(String name, String type) {
    Collection<ResourceRecordSet<?>> records = delegate.records();
    synchronized (records) {
      removeByNameAndType(records.iterator(), name, type);"
6621,removeByNameAndType,"  private void removeByNameAndType(Iterator<ResourceRecordSet<?>> i, String name, String type) {
    while (i.hasNext()) {
      ResourceRecordSet<?> test = i.next();"
6622,put,"  public void put(ResourceRecordSet<?> rrset) {
    checkNotNull(rrset, ""rrset was null"");
    Collection<ResourceRecordSet<?>> records = delegate.records();
    synchronized (records) {
      removeByNameAndType(records.iterator(), rrset.name(), rrset.type());"
6624,iterateByName,"  public Iterator<ResourceRecordSet<?>> iterateByName(String name) {
    return delegate.iterateByName(name);
  }"
6625,iterator,"  public Iterator<ResourceRecordSet<?>> iterator() {
    return delegate.iterator();
  }"
6626,create,"        public WeightedResourceRecordSetApi create(String name) {
          return new MockWeightedResourceRecordSetApi(data, name, supportedWeights);
        }"
6627,provideWeightedResourceRecordSetApiFactory,"    WeightedResourceRecordSetApi.Factory provideWeightedResourceRecordSetApiFactory() {
      return new WeightedResourceRecordSetApi.Factory() {
        @Override"
6628,create,"        public GeoResourceRecordSetApi create(String name) {
          return new MockGeoResourceRecordSetApi(data, name, supportedRegions);
        }"
6629,provideGeoResourceRecordSetApiFactory,"    GeoResourceRecordSetApi.Factory provideGeoResourceRecordSetApiFactory() {
      return new GeoResourceRecordSetApi.Factory() {
        @Override"
6630,create,"        public AllProfileResourceRecordSetApi create(String name) {
          return new MockAllProfileResourceRecordSetApi(data, name, notNull());
        }"
6631,provideAllProfileResourceRecordSetApiFactory,"    AllProfileResourceRecordSetApi.Factory provideAllProfileResourceRecordSetApiFactory() {
      return new denominator.AllProfileResourceRecordSetApi.Factory() {
        @Override"
6632,create,"        public ResourceRecordSetApi create(String name) {
          return new MockResourceRecordSetApi(data, name);
        }"
6633,provideResourceRecordSetApiFactory,"    ResourceRecordSetApi.Factory provideResourceRecordSetApiFactory() {
      return new denominator.ResourceRecordSetApi.Factory() {
        @Override"
6634,provideZoneApi,"    ZoneApi provideZoneApi() {
      return new MockZoneApi(data);
    }"
6635,ok,"        public boolean ok() {
          return true;
        }"
6636,alwaysOK,"    CheckConnection alwaysOK() {
      return new CheckConnection() {
        public boolean ok() {"
6637,profileToRecordTypes,"  public Map<String, Collection<String>> profileToRecordTypes() {
    Map<String, Collection<String>> result = super.profileToRecordTypes();
    List<String> special = new ArrayList<String>(basicRecordTypes());
    special.remove(""SOA"");
    result.put(""geo"", Collections.unmodifiableList(special));
    result.put(""weighted"", result.get(""geo""));
    return result;
  }"
6639,put,"  public void put(ResourceRecordSet<?> rrset) {
    Collection<ResourceRecordSet<?>> records = records();
    synchronized (records) {
      put(IS_GEO, rrset);"
6640,supportedRegions,"  public Map<String, Collection<String>> supportedRegions() {
    return supportedRegions;
  }"
6641,apply,"    public boolean apply(ResourceRecordSet<?> in) {
      return in != null && in.geo() != null;
    }"
6642,apply,"  public Statement apply(Statement base, Description description) {
    return delegate.apply(base, description);
  }"
6643,shutdown,"  void shutdown() throws IOException {
    delegate.shutdown();
  }"
6644,assertAuthRequest,"  RecordedRequestAssert assertAuthRequest() throws InterruptedException {
    return assertThat(delegate.takeRequest())
        .hasMethod(""POST"")"
6645,assertRequest,"  RecordedRequestAssert assertRequest() throws InterruptedException {
    return assertThat(delegate.takeRequest());
  }"
6646,enqueue,"  void enqueue(MockResponse mockResponse) {
    delegate.enqueue(mockResponse);
  }"
6647,enqueueAuthResponse,"  void enqueueAuthResponse() {
    delegate.enqueue(new MockResponse().setBody(accessResponse));
  }"
6648,credentials,"  MockCloudDNSServer credentials(String username, String apiKey) {
    this.username = username;
    this.apiKey = apiKey;
    this.accessResponse = ""{\""access\"": {\n""
                          + ""  \""token\"": {\n""
                          + ""    \""expires\"": \""2013-07-08T05:55:31.809Z\"",\n"""
6649,credentials,"  Credentials credentials() {
    return ListCredentials.from(username, apiKey);
  }"
6650,connect,"  DNSApiManager connect() {
    return Denominator.create(this, CredentialsConfiguration.credentials(credentials()));
  }"
6654,records,"  Collection<ResourceRecordSet<?>> records() {
    Collection<ResourceRecordSet<?>> result = data.get(zoneName);
    checkArgument(result != null, ""zone %s not found"", zoneName);
    return result;
  }"
6655,deleteByNameAndType,"  public void deleteByNameAndType(String name, String type) {
    Collection<ResourceRecordSet<?>> records = records();
    synchronized (records) {
      for (Iterator<ResourceRecordSet<?>> it = iterateByNameAndType(name, type); it.hasNext(); ) {"
6656,deleteByNameTypeAndQualifier,"  public void deleteByNameTypeAndQualifier(String name, String type, String qualifier) {
    Collection<ResourceRecordSet<?>> records = records();
    synchronized (records) {
      ResourceRecordSet<?> rrsMatch = getByNameTypeAndQualifier(records, name, type, qualifier);"
6657,getByNameTypeAndQualifier,"  private ResourceRecordSet<?> getByNameTypeAndQualifier(Collection<ResourceRecordSet<?>> records,
                                                         String name, String type,
                                                         String qualifier) {
    Filter<ResourceRecordSet<?>>"
6658,getByNameTypeAndQualifier,"  public ResourceRecordSet<?> getByNameTypeAndQualifier(String name, String type,
                                                        String qualifier) {
    return getByNameTypeAndQualifier(records(), name, type, qualifier);"
6659,iterateByNameAndType,"  public Iterator<ResourceRecordSet<?>> iterateByNameAndType(String name, String type) {
    return filter(records().iterator(), and(nameAndTypeEqualTo(name, type), filter));
  }"
6660,put,"  public void put(ResourceRecordSet<?> rrset) {
    put(notNull(), rrset);
  }"
6661,put,"  protected void put(Filter<ResourceRecordSet<?>> valid, ResourceRecordSet<?> rrset) {
    checkNotNull(rrset, ""rrset was null"");
    checkArgument(rrset.qualifier() != null, ""no qualifier on: %s"", rrset);
    checkArgument(valid.apply(rrset), ""%s failed on: %s"", valid, rrset);
    Collection<ResourceRecordSet<?>> records = records();
    synchronized (records) {
      ResourceRecordSet<?>"
6662,iterateByName,"  public Iterator<ResourceRecordSet<?>> iterateByName(String name) {
    return filter(records().iterator(), and(nameEqualTo(name), filter));
  }"
6663,iterator,"  public Iterator<ResourceRecordSet<?>> iterator() {
    return filter(records().iterator(), filter);
  }"
6664,singleRequestOnFailure,"  public void singleRequestOnFailure() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setResponseCode(401));

    DNSApiManager api = server.connect();
    assertFalse(api.checkConnection());
"
6666,write,"  public void write(JsonWriter out, TokenIdAndPublicURL value) throws IOException {
    throw new UnsupportedOperationException();
  }"
6667,toString,"  public String toString() {
    return ""KeystoneV2AccessAdapter("" + serviceTypeSuffix + "")"";
  }"
6669,isNull,"  static boolean isNull(JsonElement element) {
    return element == null || element.isJsonNull();
  }"
6670,passwordAuth,"  TokenIdAndPublicURL passwordAuth(URI endpoint, @Param(""tenantId"") String tenantId,
                                   @Param(""username"") String username,"
6671,noToken,"  public void noToken() throws Exception {
    server.enqueue(new MockResponse().setBody(""{\n""
                                              + ""    \""access\"": {\n""
                                              + ""        \""serviceCatalog\"": [{\n""
                                              + ACCESS_FOOTER));"
6672,noServices,"  public void noServices() throws Exception {
    server.enqueue(new MockResponse().setBody(ACCESS_HEADER + SERVICE + ACCESS_FOOTER));

    TokenIdAndPublicURL result = client.passwordAuth(server.getUrl(""/"").toURI(), ""u"", ""p"");

    assertThat(result.tokenId).isEqualTo(""1bcd122d87494f5ab39a185b9ec5ff73"");"
6673,serviceNotFound,"  public void serviceNotFound() throws Exception {
    server.enqueue(new MockResponse().setBody(ACCESS_HEADER + SERVICE + ACCESS_FOOTER));

    TokenIdAndPublicURL result = client.passwordAuth(server.getUrl(""/"").toURI(), ""u"", ""p"");

    assertThat(result.tokenId).isEqualTo(""1bcd122d87494f5ab39a185b9ec5ff73"");"
6674,noEndpoints,"  public void noEndpoints() throws Exception {
    server.enqueue(new MockResponse().setBody(ACCESS_HEADER
                                              + ""            \""name\"": \""cloudDNS\"",\n""
                                              + ""            \""type\"": \""rax:dns\""\n""
                                              + SERVICE + ACCESS_FOOTER));
"
6677,toString,"  public String toString() {
    return ""KeystoneAccessAdapter("" + type + "")"";
  }"
6680,create,"      public GeoResourceRecordSetApi create(String id) {
        return null;
      }"
6681,provideGeoResourceRecordSetApiFactory,"  GeoResourceRecordSetApi.Factory provideGeoResourceRecordSetApiFactory() {
    return new GeoResourceRecordSetApi.Factory() {
"
6682,toString,"  public String toString() {
    return provider.toString();
  }"
6683,close,"  public void close() throws IOException {
    closer.close();
  }"
6684,checkConnection,"  public boolean checkConnection() {
    return checkConnection.ok();
  }"
6685,provider,"  public Provider provider() {
    return provider;
  }"
6687,weightedRecordSetsInZone,"  public WeightedResourceRecordSetApi weightedRecordSetsInZone(String id) {
    return weightedApiFactory.create(id);
  }"
6688,geoRecordSetsInZone,"  public GeoResourceRecordSetApi geoRecordSetsInZone(String id) {
    return geoApiFactory.create(id);
  }"
6689,recordSetsInZone,"  public AllProfileResourceRecordSetApi recordSetsInZone(String id) {
    return allRRSetApiFactory.create(id);
  }"
6690,basicRecordSetsInZone,"  public ResourceRecordSetApi basicRecordSetsInZone(String id) {
    return rrsetApiFactory.create(id);
  }"
6691,zones,"  public ZoneApi zones() {
    return zones;
  }"
6692,delete,"  public void delete(String id) {
    try {
      api.deleteDomain(id);"
6693,put,"  public String put(Zone zone) {
    if (zone.id() != null) {
      return api.updateDomain(zone.id(), zone.name(), zone.email(), zone.ttl()).id();
    }"
6695,iterator,"  public Iterator<Zone> iterator() {
    return api.domains().iterator();
  }"
6696,apply,"  public Request apply(RequestTemplate input) {
    TokenIdAndPublicURL urlAndToken = lazyUrlAndToken.get();
    if (input.url().indexOf(""http"") != 0) {
      input.insert(0, urlAndToken.publicURL);
    }
    input.header(""X-Auth-Token"", urlAndToken.tokenId);"
6697,url,"  public String url() {
    return lazyUrlAndToken.get().publicURL;
  }"
6698,name,"  public String name() {
    return provider.name();
  }"
6699,type,"  public Class<Designate> type() {
    return Designate.class;
  }"
6700,create,"    public ResourceRecordSetApi create(String id) {
      return new DesignateResourceRecordSetApi(api, checkNotNull(id, ""id""));
    }"
6705,iterator,"  public Iterator<ResourceRecordSet<?>> iterator() {
    return new GroupByRecordNameAndTypeIterator(api.records(domainId).iterator());
  }"
6706,feign,"    Feign feign(Logger logger, Logger.Level logLevel) {
      RecordAdapter recordAdapter = new RecordAdapter();
      return Feign.builder()
          .logger(logger)"
6707,logLevel,"    Logger.Level logLevel() {
      return Logger.Level.NONE;
    }"
6708,logger,"    Logger logger() {
      return new Logger.NoOpLogger();
    }"
6709,keystoneV2,"    KeystoneV2 keystoneV2(Feign feign) {
      return feign.newInstance(EmptyTarget.create(KeystoneV2.class, ""keystone""));
    }"
6710,designate,"    Designate designate(Feign feign, DesignateTarget target) {
      return feign.newInstance(target);
    }"
6711,provideResourceRecordSetApiFactory,"    ResourceRecordSetApi.Factory provideResourceRecordSetApiFactory(
        DesignateResourceRecordSetApi.Factory in) {
      return in;"
6712,provideZoneApi,"    ZoneApi provideZoneApi(DesignateZoneApi in) {
      return in;
    }"
6713,checkConnection,"    CheckConnection checkConnection(LimitsReadable checkConnection) {
      return checkConnection;
    }"
6714,credentialTypeToParameterNames,"  public Map<String, Collection<String>> credentialTypeToParameterNames() {
    Map<String, Collection<String>> options = new LinkedHashMap<String, Collection<String>>();
    options.put(""password"", Arrays.asList(""tenantId"", ""username"", ""password""));
    return options;
  }"
6715,profileToRecordTypes,"  public Map<String, Collection<String>> profileToRecordTypes() {
    Map<String, Collection<String>>
        profileToRecordTypes =
        new LinkedHashMap<String, Collection<String>>();
    profileToRecordTypes.put(""roundRobin"", Arrays.asList(""A"", ""AAAA"", ""MX"", ""NS"", ""SRV"", ""TXT""));"
6716,basicRecordTypes,"  public Set<String> basicRecordTypes() {
    Set<String> types = new LinkedHashSet<String>();
    types.addAll(Arrays.asList(""A"", ""AAAA"", ""CNAME"", ""MX"", ""NS"", ""SRV"", ""TXT""));
    return types;
  }"
6718,toRDataMap,"  static Map<String, Object> toRDataMap(Record record) {
    if (""A"".equals(record.type)) {
      return AData.create(record.data);"
6719,write,"    public void write(JsonWriter out, List<X> value) throws IOException {
      throw new UnsupportedOperationException();
    }"
6720,read,"    public List<X> read(JsonReader reader) throws IOException {
      List<X> elements = new LinkedList<X>();
      reader.beginObject();
      while (reader.hasNext()) {
        String nextName = reader.nextName();
        if (jsonKey().equals(nextName)) {
          reader.beginArray();
          while (reader.hasNext()) {"
6723,build,"    protected Record build(JsonReader reader) throws IOException {
      return buildRecord(reader);
    }"
6725,build,"    protected Zone build(JsonReader reader) throws IOException {
      String name = null, id = null, email = null;
      int ttl = -1;
      while (reader.hasNext()) {
        String nextName = reader.nextName();
        if (nextName.equals(""id"")) {"
6727,read,"    public Record read(JsonReader reader) throws IOException {
      reader.beginObject();
      Record record = buildRecord(reader);
      reader.endObject();
      return record;
    }"
6728,write,"    public void write(JsonWriter out, Record record) throws IOException {
      out.beginObject();
      out.name(""name"").value(record.name);
      out.name(""type"").value(record.type);
      if (record.ttl != null) {
        out.name(""ttl"").value(record.ttl);
      }
      out.name(""data"").value(record.data);
      if (record.priority != null) {"
6730,buildRecord,"  static Record buildRecord(JsonReader reader) throws IOException {
    Record record = new Record();
    while (reader.hasNext()) {
      String key = reader.nextName();
      if (key.equals(""id"")) {"
6733,deleteRecord,"  void deleteRecord(@Param(""domainId"") String domainId, @Param(""recordId"") String recordId);
"
6734,updateRecord,"  Record updateRecord(@Param(""domainId"") String domainId, @Param(""recordId"") String recordId,
                      Record record);"
6735,createRecord,"  Record createRecord(@Param(""domainId"") String domainId, Record record);
"
6736,records,"  List<Record> records(@Param(""domainId"") String domainId);
"
6737,deleteDomain,"  void deleteDomain(@Param(""domainId"") String domainId);
"
6738,updateDomain,"  Zone updateDomain(@Param(""id"") String id, @Param(""name"") String name,
                    @Param(""email"") String email, @Param(""ttl"") int ttl);"
6739,createDomain,"  Zone createDomain(@Param(""name"") String name, @Param(""email"") String email,
                    @Param(""ttl"") int ttl);"
6742,toString,"    public String toString() {
      return version;
    }"
6743,provider,"  public static Object provider(denominator.Provider provider) {
    return Providers.provide(provider);
  }"
6744,create,"  public static DNSApiManager create(String providerName, Object... modules)
      throws IllegalArgumentException {
    Provider matchedProvider = Providers.getByName(providerName);
    return create(matchedProvider, modules);"
6745,modulesForGraph,"  private static List<Object> modulesForGraph(Provider in, Object... modules) {
    List<Object> modulesForGraph = new ArrayList<Object>(3);
    modulesForGraph.add(Providers.provide(in));
    modulesForGraph.add(Providers.instantiateModule(in));
    if (modules != null) {
      for (Object module : modules) {
        modulesForGraph.add(module);"
6746,create,"  public static DNSApiManager create(Provider in, Object... modules) {
    Object[] modulesForGraph = modulesForGraph(in, modules).toArray();
    try {
      return ObjectGraph.create(modulesForGraph).get(DNSApiManager.class);"
6747,providers,"  public static Iterable<Provider> providers() {
    return Providers.list();
  }"
6748,toString,"    public String toString() {
      return ""ConstantCredentials("" + creds + "")"";
    }"
6749,hashCode,"    public int hashCode() {
      return creds.hashCode();
    }"
6750,equals,"    public boolean equals(Object obj) {
      if (obj instanceof ConstantCredentials) {
        ConstantCredentials that = ConstantCredentials.class.cast(obj);
        return this.creds.equals(that.creds);"
6751,get,"    public Credentials get(denominator.Provider provider) {
      return checkValidForProvider(creds, provider);
    }"
6752,exceptionMessage,"  public static String exceptionMessage(Credentials input, denominator.Provider provider) {
    StringBuilder msg = new StringBuilder();
    if (input == null || input == AnonymousCredentials.INSTANCE) {
      msg.append(""no credentials supplied. "");
    } else {
      msg.append(""incorrect credentials supplied. "");
    }
    msg.append(provider.name()).append("" requires "");"
6753,credentialConfigurationHasKeys,"  private static boolean credentialConfigurationHasKeys(denominator.Provider provider,
                                                        Set<?> keys) {
    for (String credentialType : provider.credentialTypeToParameterNames().keySet()) {
      if (keys.containsAll(provider.credentialTypeToParameterNames().get(credentialType))) {"
6754,credentialConfigurationHasPartCount,"  private static boolean credentialConfigurationHasPartCount(denominator.Provider provider,
                                                             int size) {
    for (String credentialType : provider.credentialTypeToParameterNames().keySet()) {
      if (provider.credentialTypeToParameterNames().get(credentialType).size() == size) {"
6755,isAnonymous,"  private final static boolean isAnonymous(Credentials input) {
    if (input == null) {
      return true;
    }
    if (input instanceof AnonymousCredentials) {
      return true;
    }"
6756,checkValidForProvider,"  public static Credentials checkValidForProvider(Credentials creds,
                                                  denominator.Provider provider) {
    checkNotNull(provider, ""provider cannot be null"");
    if (isAnonymous(creds) && provider.credentialTypeToParameterNames().isEmpty()) {
      return AnonymousCredentials.INSTANCE;"
6757,credentials,"  public static Object credentials(Credentials credentials) {
    return new ConstantCredentials(credentials);
  }"
6758,credentials,"  public static Object credentials(Object firstPart, Object secondPart, Object thirdPart) {
    return credentials(ListCredentials.from(firstPart, secondPart, thirdPart));
  }"
6759,credentials,"  public static Object credentials(Object firstPart, Object secondPart) {
    return credentials(ListCredentials.from(firstPart, secondPart));
  }"
6760,anonymous,"  public static Object anonymous() {
    return credentials(AnonymousCredentials.INSTANCE);
  }"
6761,from,"    public static Credentials from(final Map<String, ?> kwargs) {
      if (kwargs == null || kwargs.isEmpty()) {
        return AnonymousCredentials.INSTANCE;
      }"
6762,asList,"    public static List<Object> asList(Credentials in) throws IllegalArgumentException {
      checkNotNull(in, ""credentials"");
      if (in instanceof ListCredentials) {
        return ListCredentials.class.cast(in);
      } else if (in instanceof Map || in instanceof List) {"
6763,from,"    public static Credentials from(Object... parts) {
      return from(Arrays.asList(checkNotNull(parts, ""credentials"")));
    }"
6764,from,"    public static Credentials from(final List<?> parts) {
      if (parts == null || parts.isEmpty()) {
        return AnonymousCredentials.INSTANCE;
      }"
6765,deleteByNameAndType,"    public void deleteByNameAndType(String name, String type) {
      api.deleteByNameAndType(name, type);
      for (QualifiedResourceRecordSetApi qualifiedApi : qualifiedApis) {
        for (Iterator<ResourceRecordSet<?>> it = qualifiedApi.iterateByNameAndType(name, type);"
6766,deleteByNameTypeAndQualifier,"    public void deleteByNameTypeAndQualifier(String name, String type, String qualifier) {
      for (QualifiedResourceRecordSetApi qualifiedApi : qualifiedApis) {
        qualifiedApi.deleteByNameTypeAndQualifier(name, type, qualifier);"
6767,put,"    public void put(ResourceRecordSet<?> rrset) {
      if (rrset.qualifier() == null) {
        api.put(rrset);
        return;
      }
      for (QualifiedResourceRecordSetApi api : qualifiedApis) {
        if (api instanceof GeoResourceRecordSetApi && rrset.geo() != null) {
          api.put(rrset);"
6768,getByNameTypeAndQualifier,"    public ResourceRecordSet<?> getByNameTypeAndQualifier(String name, String type,
                                                          String qualifier) {
      for (QualifiedResourceRecordSetApi api : qualifiedApis) {
        ResourceRecordSet<?> val = api.getByNameTypeAndQualifier(name, type, qualifier);"
6769,iterator,"          public Iterator<ResourceRecordSet<?>> iterator() {
            return api.iterateByNameAndType(name, type);
          }"
6771,iterator,"          public Iterator<ResourceRecordSet<?>> iterator() {
            return api.iterateByName(name);
          }"
6772,iterateByName,"    public Iterator<ResourceRecordSet<?>> iterateByName(final String name) {
      List<Iterable<ResourceRecordSet<?>>>
          iterables =
          new ArrayList<Iterable<ResourceRecordSet<?>>>();
      for (final QualifiedResourceRecordSetApi api : qualifiedApis) {
        iterables.add(new Iterable<ResourceRecordSet<?>>() {"
6773,iterator,"    public Iterator<ResourceRecordSet<?>> iterator() {
      Iterator<ResourceRecordSet<?>> iterators = concat(qualifiedApis);
      if (!iterators.hasNext()) {
        return api.iterator();
      }"
6774,toIterator,"    static Iterator<ResourceRecordSet<?>> toIterator(ResourceRecordSet<?> rrs) {
      return rrs != null ? Collections.<ResourceRecordSet<?>>singleton(rrs).iterator() : Collections
          .<ResourceRecordSet<?>>emptyList().iterator();"
6775,create,"      public AllProfileResourceRecordSetApi create(String id) {
        Set<QualifiedResourceRecordSetApi>
            qualifiedApis =
            new LinkedHashSet<QualifiedResourceRecordSetApi>();
        for (Factory entry : factories) {"
6776,provideResourceRecordSetApiFactory,"  AllProfileResourceRecordSetApi.Factory provideResourceRecordSetApiFactory(
      final ResourceRecordSetApi.Factory factory, final Set<Factory> factories) {
    return new AllProfileResourceRecordSetApi.Factory() {"
6777,deleteWhenAbsent,"  public void deleteWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(deleting);
    server.enqueue(objectNotFound);

    ZoneApi api = server.connect().api().zones();
    api.delete(""1234"");

    server.assertAuthRequest();
    server.assertRequest().hasMethod(""DELETE"").hasPath(""/v1.0/123123/domains/1234"");"
6778,deleteWhenPresent,"  public void deleteWhenPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(deleting);
    server.enqueue(deleted);

    ZoneApi api = server.connect().api().zones();
    api.delete(""1234"");

    server.assertAuthRequest();
    server.assertRequest().hasMethod(""DELETE"").hasPath(""/v1.0/123123/domains/1234"");"
6779,putWhenPresent_withId,"  public void putWhenPresent_withId() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(updating);
    server.enqueue(updated);

    ZoneApi api = server.connect().api().zones();

    Zone zone = Zone.create(""1234"", ""denominator.io"", 3601, ""nil@denominator.io"");
    assertThat(api.put(zone)).isEqualTo(""1234"");

    server.assertAuthRequest();"
6781,putWhenAbsent,"  public void putWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(creating);
    server.enqueue(created);

    ZoneApi api = server.connect().api().zones();

    Zone zone = Zone.create(null, ""denominator.io"", 3601, ""nil@denominator.io"");
    assertThat(api.put(zone)).isEqualTo(""1234"");

    server.assertAuthRequest();"
6782,iteratorByNameWhenAbsent,"  public void iteratorByNameWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(""{\""domains\"":[],\""totalEntries\"":0}""));

    ZoneApi api = server.connect().api().zones();
    assertThat(api.iterateByName(""denominator.io"")).isEmpty();

    server.assertAuthRequest();"
6783,iteratorByNameWhenPresent,"  public void iteratorByNameWhenPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(domainsResponse));
    server.enqueue(new MockResponse().setBody(soaResponse));

    ZoneApi api = server.connect().api().zones();

    assertThat(api.iterateByName(""denominator.io"")).containsExactly(
        Zone.create(""1234"", ""denominator.io"", 3601, ""nil@denominator.io"")
    );"
6784,iteratorWhenAbsent,"  public void iteratorWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(""{ \""domains\"": [] }""));

    ZoneApi api = server.connect().api().zones();
    assertThat(api.iterator()).isEmpty();

    server.assertAuthRequest();"
6785,iteratorWhenPresent,"  public void iteratorWhenPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(domainsResponse));
    server.enqueue(new MockResponse().setBody(soaResponse));

    ZoneApi api = server.connect().api().zones();

    assertThat(api.iterator()).containsExactly(
        Zone.create(""1234"", ""denominator.io"", 3601, ""nil@denominator.io"")
    );"
6786,delete,"  public void delete(String id) {
    try {
      awaitComplete(api, api.deleteDomain(id));"
6787,updateZone,"  private String updateZone(String id, Zone zone) {
    awaitComplete(api, api.updateDomain(id, zone.email(), zone.ttl()));
    return id;
  }"
6788,put,"  public String put(Zone zone) {
    if (zone.id() != null) {
      return updateZone(zone.id(), zone);
    }"
6789,remove,"    public void remove() {
      throw new UnsupportedOperationException();
    }"
6790,next,"    public Zone next() {
      return zipWithSOA(list.get(i++));
    }"
6791,hasNext,"    public boolean hasNext() {
      while (i == length && list.next != null) {
        list = api.domains(list.next);
        length = list.size();"
6792,zipWithSOA,"  private Zone zipWithSOA(Zone next) {
    Record soa = api.recordsByNameAndType(Integer.parseInt(next.id()), next.name(), ""SOA"").get(0);
    return Zone.create(next.id(), next.name(), soa.ttl, next.email());
  }"
6793,iterateByName,"  public Iterator<Zone> iterateByName(String name) {
    ListWithNext<Zone> zones = api.domainsByName(name);
    if (zones.isEmpty()) {
      return singletonIterator(null);
    }"
6794,iterator,"  public Iterator<Zone> iterator() {
    return new ZipWithDomain(api.domains());
  }"
6798,type,"  public Class<CloudDNS> type() {
    return CloudDNS.class;
  }"
6799,getByNameAndTypeWhenAbsent,"  public void getByNameAndTypeWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setResponseCode(404).setBody(
        ""{\""message\"":\""Not Found\"",\""code\"":404,\""details\"":\""\""}""));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");
    assertNull(api.getByNameAndType(""www.denominator.io"", ""A""));
"
6800,getByNameAndType_SOA,"  public void getByNameAndType_SOA() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(soaResponse));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");

    assertThat(api.getByNameAndType(""denominator.io"", ""SOA""))
        .hasName(""denominator.io"")"
6801,getByNameAndTypeWhenPresent,"  public void getByNameAndTypeWhenPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(recordsByNameAndType));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");

    assertThat(api.getByNameAndType(""www.denominator.io"", ""A""))
        .hasName(""www.denominator.io"")"
6802,iterateByNameWhenAbsent,"  public void iterateByNameWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setResponseCode(404).setBody(
        ""{\""message\"":\""Not Found\"",\""code\"":404,\""details\"":\""\""}""));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");
    assertFalse(api.iterateByName(""www.denominator.io"").hasNext());
"
6803,iterateByNameWhenPresent,"  public void iterateByNameWhenPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(recordsByName));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");
    Iterator<ResourceRecordSet<?>> records = api.iterateByName(""www.denominator.io"");

    while (records.hasNext()) {
      assertThat(records.next())"
6805,listWhenAbsent,"  public void listWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setResponseCode(404).setBody(
        ""{\""message\"":\""Not Found\"",\""code\"":404,\""details\"":\""\""}""));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");

    assertFalse(api.iterator().hasNext());"
6806,listWhenPresent,"  public void listWhenPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(records));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");
    Iterator<ResourceRecordSet<?>> records = api.iterator();

    while (records.hasNext()) {
      assertThat(records.next())"
6807,create,"    public ResourceRecordSetApi create(String id) {
      return new CloudDNSResourceRecordSetApi(api, Integer.parseInt(id));
    }"
6808,remove,"      public void remove() {
        throw new UnsupportedOperationException();
      }"
6809,next,"      public Record next() {
        return current.next();
      }"
6810,hasNext,"      public boolean hasNext() {
        while (!current.hasNext() && next != null) {
          ListWithNext<Record> nextPage = emptyOn404(recordPager, next);
          current = nextPage.iterator();"
6811,lazyIterateRecords,"  Iterator<Record> lazyIterateRecords(final Pager<Record> recordPager) {
    final ListWithNext<Record> first = emptyOn404(recordPager, null);

    if (first.next == null) {
      return first.iterator();"
6812,deleteByNameAndType,"  public void deleteByNameAndType(String name, String type) {
    checkNotNull(name, ""name"");
    checkNotNull(type, ""type"");

    for (Record record : api.recordsByNameAndType(domainId, name, type)) {"
6814,put,"  public void put(ResourceRecordSet<?> rrset) {
    checkNotNull(rrset, ""rrset was null"");
    checkArgument(!rrset.records().isEmpty(), ""rrset was empty %s"", rrset);

    List<Map<String, Object>>
        recordsLeftToCreate =
        new ArrayList<Map<String, Object>>(rrset.records());
"
6815,apply,"      public ListWithNext<Record> apply(URI nullOrNext) {
        return nullOrNext == null ? api.recordsByNameAndType(domainId, name, type)
                                  : api.records(nullOrNext);"
6817,iterateByName,"  public Iterator<ResourceRecordSet<?>> iterateByName(String name) {
    checkNotNull(name, ""name was null"");
    return filter(iterator(), nameEqualTo(name));
  }"
6818,apply,"      public ListWithNext<Record> apply(URI nullOrNext) {
        return nullOrNext == null ? api.records(domainId) : api.records(nullOrNext);
      }"
6819,iterator,"  public Iterator<ResourceRecordSet<?>> iterator() {
    Pager<Record> recordPager = new Pager<Record>() {
      public ListWithNext<Record> apply(URI nullOrNext) {
        return nullOrNext == null ? api.records(domainId) : api.records(nullOrNext);"
6820,testViaDagger,"  public void testViaDagger() {
    DNSApiManager manager = ObjectGraph
        .create(provide(new CloudDNSProvider()), new CloudDNSProvider.Module(),
                credentials(""username"", ""apiKey""))"
6821,testCredentialsRequired,"  public void testCredentialsRequired() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(
        ""no credentials supplied. clouddns requires one of the following forms: when type is password: username,password; apiKey: username,apiKey"");
"
6823,testCloudDNSRegistered,"  public void testCloudDNSRegistered() {
    assertThat(list()).contains(PROVIDER);
  }"
6824,testCloudDNSMetadata,"  public void testCloudDNSMetadata() {
    assertThat(PROVIDER.name()).isEqualTo(""clouddns"");
    assertThat(PROVIDER.supportsDuplicateZoneNames()).isFalse();
    assertThat(PROVIDER.credentialTypeToParameterNames())
        .containsEntry(""password"", Arrays.asList(""username"", ""password""))"
6825,get,"    public Credentials get() {
      return dynamicCredentials.get();
    }"
6827,url,"      public String url() {
        return url.get();
      }"
6829,feign,"    Feign feign(Logger logger, Logger.Level logLevel) {
      return Feign.builder()
          .logger(logger)"
6832,cloudIdentity,"    CloudIdentity cloudIdentity(Feign feign) {
      return feign.newInstance(EmptyTarget.create(CloudIdentity.class, ""cloudidentity""));
    }"
6833,cloudDNS,"    CloudDNS cloudDNS(Feign feign, CloudDNSTarget target) {
      return feign.newInstance(target);
    }"
6834,provideResourceRecordSetApiFactory,"    ResourceRecordSetApi.Factory provideResourceRecordSetApiFactory(
        CloudDNSResourceRecordSetApi.Factory api) {
      return api;"
6835,provideZoneApi,"    ZoneApi provideZoneApi(CloudDNSZoneApi api) {
      return api;
    }"
6837,credentialTypeToParameterNames,"  public Map<String, Collection<String>> credentialTypeToParameterNames() {
    Map<String, Collection<String>> options = new LinkedHashMap<String, Collection<String>>();
    options.put(""password"", Arrays.asList(""username"", ""password""));
    options.put(""apiKey"", Arrays.asList(""username"", ""apiKey""));
    return options;
  }"
6838,profileToRecordTypes,"  public Map<String, Collection<String>> profileToRecordTypes() {
    Map<String, Collection<String>>
        profileToRecordTypes =
        new LinkedHashMap<String, Collection<String>>();
    profileToRecordTypes.put(""roundRobin"", basicRecordTypes());"
6839,basicRecordTypes,"  public Set<String> basicRecordTypes() {
    Set<String> types = new LinkedHashSet<String>();
    types.addAll(Arrays.asList(""A"", ""AAAA"", ""CNAME"", ""MX"", ""NS"", ""TXT""));
    return types;
  }"
6841,transformsTXTRecordSet,"  public void transformsTXTRecordSet() {
    Record input = new Record();
    input.name = ""denominator.io"";
    input.type = ""TXT"";
    input.ttl = 3600;
    input.data(""Hello DNS"");

    assertThat(CloudDNSFunctions.toRDataMap(input))"
6842,transformsNSRecordSet,"  public void transformsNSRecordSet() {
    Record input = new Record();
    input.name = ""denominator.io"";
    input.type = ""NS"";
    input.ttl = 3600;
    input.data(""dns1.stabletransit.com"");

    assertThat(CloudDNSFunctions.toRDataMap(input))"
6843,toRDataMap,"  static Map<String, Object> toRDataMap(Record record) {
    if (""MX"".equals(record.type)) {
      return MXData.create(record.priority, record.data());"
6844,awaitComplete,"  static String awaitComplete(CloudDNS api, Job job) {
    RetryableException retryableException = new RetryableException(
        format(""Job %s did not complete. Check your logs."", job.id), null);
    Retryer retryer = new Retryer.Default(500, 1000, 30);
"
6845,provideLogger,"    Logger provideLogger() {
      return new Logger.JavaLogger().appendToFile(""build/http-wire.log"");
    }"
6846,provideLevel,"    Logger.Level provideLevel() {
      return Logger.Level.FULL;
    }"
6847,create,"  static DNSApiManager create(String username, String apiKey) {
    CloudDNSProvider provider = new CloudDNSProvider(emptyToNull(getProperty(""clouddns.url"")));
    return Denominator.create(provider, credentials(username, apiKey), new Overrides());
  }"
6849,toString,"  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(""Provider ["");
    builder.append(""name="").append(name());
    builder.append(""url="").append(url());
    builder.append(""]"");
    return builder.toString();
  }"
6850,hashCode,"  public int hashCode() {
    int result = 17;
    result = 31 * result + name().hashCode();
    result = 31 * result + url().hashCode();
    return result;
  }"
6851,equals,"  public boolean equals(Object obj) {
    if (obj instanceof Provider) {
      Provider other = (Provider) obj;
      return name().equals(other.name())"
6852,credentialTypeToParameterNames,"  public Map<String, Collection<String>> credentialTypeToParameterNames() {
    return new LinkedHashMap<String, Collection<String>>();
  }"
6853,supportsDuplicateZoneNames,"  public boolean supportsDuplicateZoneNames() {
    return false;
  }"
6854,profileToRecordTypes,"  public Map<String, Collection<String>> profileToRecordTypes() {
    Map<String, Collection<String>> result = new LinkedHashMap<String, Collection<String>>();
    List<String> roundRobin = asList(""A"", ""AAAA"", ""MX"", ""NS"", ""PTR"", ""SPF"", ""SRV"", ""SSHFP"", ""TXT"");
    result.put(""roundRobin"", roundRobin);
    return result;
  }"
6855,basicRecordTypes,"  public Set<String> basicRecordTypes() {
    Set<String> result = new LinkedHashSet<String>();
    result.addAll(asList(""A"", ""AAAA"", ""CERT"", ""CNAME"", ""MX"", ""NAPTR"", ""NS"", ""PTR"", ""SOA"", ""SPF"",
                         ""SRV"", ""SSHFP"", ""TXT""));
    return result;"
6856,url,"  public String url() {
    return ""mem:"" + name();
  }"
6857,name,"  public String name() {
    return getClass().getSimpleName().toLowerCase().replace(""provider"", """");
  }"
6858,checkLowerCamel,"  private void checkLowerCamel(Map<String, Collection<String>> credentialTypeToParameterNames) {
    for (String credentialType : credentialTypeToParameterNames.keySet()) {
      for (String credentialParam : credentialTypeToParameterNames.get(credentialType)) {"
6859,create,"    AllProfileResourceRecordSetApi create(String id);
  }"
6861,destroyItem,"    public void destroyItem(ViewGroup container, int position, Object object) {
    }"
6863,isViewFromObject,"    public boolean isViewFromObject(View view, Object object) {
        return view == object;
    }"
6865,dip2px,"    public static int dip2px(Context context, float dpValue) {
        final float scale = context.getResources().getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);
    }"
6866,startScroll,"        public void startScroll(int startX, int startY, int dx, int dy) {
            super.startScroll(startX, startY, dx, dy, this.duration);
        }"
6867,startScroll,"        public void startScroll(int startX, int startY, int dx, int dy, int duration) {
            super.startScroll(startX, startY, dx, dy, this.duration);
        }"
6869,animateTitlesAndCursor,"    public void animateTitlesAndCursor(int position, float positionOffSet) {
        if (tabNum <= 1) {
            return;
        }
        int cursorLeft = 0;
        int cursorRight = 0;

        for (int i = 0; i < tabNum; i++) {
            if ((position % tabNum) != i) {
                continue;"
6870,onPageScrollStateChanged,"            public void onPageScrollStateChanged(int state) {}
        });"
6871,onPageSelected,"            public void onPageSelected(int position) {}
"
6874,onPreDraw,"            public boolean onPreDraw() {
                DecentBanner.this.getViewTreeObserver().removeOnPreDrawListener(this);
                initTabsAndCursorLayout();
                return true;
            }"
6876,init,"    private void init(List<View> views, final List<String> titleStrings, int interval, int animationDuration, int logoResourceId) {
        Bitmap logoBitmap;
        if (logoResourceId > 0) {
            logoBitmap = BitmapFactory.decodeResource(getResources(), logoResourceId);
        } else {"
6877,isGradientEnabled,"    public boolean isGradientEnabled() {
        return enableGradient;
    }"
6879,start,"    public void start(List<View> views, List<String> titles, int interval, int animationDuration, Bitmap logo) {
        init(views, titles, interval, animationDuration, logo);
    }"
6880,start,"    public void start(List<View> views, List<String> titles, int interval, int animationDuration, int logoResourceId) {
        init(views, titles, interval, animationDuration, logoResourceId);
    }"
6881,start,"    public void start(List<View> views, List<String> titles, int interval, int animationDuration) {
        init(views, titles, interval, animationDuration, 0);
    }"
6882,stopAutoPlay,"    public void stopAutoPlay() {
        handler.removeMessages(MESSAGE_SCROLL);
    }"
6883,startAutoPlay,"    public void startAutoPlay() {
        stopAutoPlay();
        handler.sendEmptyMessageDelayed(MESSAGE_SCROLL, homeColumnScrollInterval * 1000);
    }"
6884,handleMessage,"        public void handleMessage(Message msg) {
            if (msg.what == MESSAGE_SCROLL) {
                if(viewPager != null) {"
6885,onNothingSelected,"    public void onNothingSelected(AdapterView<?> parent) {
        mTheme = DevToolFragment.DevToolTheme.DARK;
    }"
6886,onItemSelected,"    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        mTheme = position == 0 ? DevToolFragment.DevToolTheme.DARK : DevToolFragment.DevToolTheme.LIGHT;
    }"
6888,doSomeStuff,"    private DebugFunction doSomeStuff() {
        return new DebugFunction() {
            @Override"
6889,call,"            public String call() throws Exception {
                return ""This function has a title"";
            }"
6891,onClick,"            public void onClick(View v) {

                final DevTool.Builder builder = new DevTool.Builder(ExampleActivity.this);

                if (mSeekbar != null) {"
6894,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                functionNumber.setText(Integer.toString(progress));
            }"
6897,animate,"    private void animate() {
        dashedCircularProgress.reset();
        dashedCircularProgress.setValue(5);
    }"
6898,onValueChange,"            public void onValueChange(float value) {
                androidImage.setScaleX(dashedCircularProgress.getScaleX() + value / 3);
                androidImage.setScaleY(dashedCircularProgress.getScaleY() + value / 3);
            }"
6899,onClick,"            public void onClick(View view) {
                animate();
            }"
6901,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.size, null);"
6902,animate,"    private void animate() {
        dashedCircularProgress.setValue(999);
    }"
6903,restart,"    private void restart() {
        dashedCircularProgress.reset();
        animate();
    }"
6905,onValueChange,"                    public void onValueChange(float value) {
                        numbers.setText((int) value + """");
                    }"
6906,onClick,"            public void onClick(View view) {
                restart();
            }"
6908,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.simple, null);"
6909,onCreate,"    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }"
6912,onSizeChanged,"    public void onSizeChanged(int height, int width) {
        this.width = width;
        this.height = height;
        initInternalCircle();
    }"
6918,draw,"    public void draw(Canvas canvas) {
        canvas.drawArc(progressCircle, startAngle, plusAngle, false, progressPaint);
    }"
6919,initInternalCircle,"    private void initInternalCircle() {
        progressCircle = new RectF();
        padding = internalStrokeWidth * 1.7f;
        progressCircle.set(padding, padding + marginTop, width - padding, height - padding);
    }"
6920,initInternalCirclePainter,"    private void initInternalCirclePainter() {
        progressPaint = new Paint();
        progressPaint.setAntiAlias(true);
        progressPaint.setStrokeWidth(internalStrokeWidth);
        progressPaint.setColor(color);
        progressPaint.setStyle(Paint.Style.STROKE);
        progressPaint.setPathEffect(new DashPathEffect(new float[]{dashWith, dashSpace},
                dashSpace));"
6921,init,"    private void init() {
        initInternalCirclePainter();
"
6925,onSizeChanged,"    void onSizeChanged(int height, int width);
}"
6929,onCreateView,"        public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                                 @Nullable Bundle savedInstanceState) {
            return inflater.inflate(R.layout.strong, container, false);"
6930,onCreateView,"        public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                                 @Nullable Bundle savedInstanceState) {
            return inflater.inflate(R.layout.speed, container, false);"
6934,onStrong,"    private void onStrong() {
        dashedCircularProgress.setIcon(R.drawable.strong);
        dashedCircularProgress.setValue(68);
    }"
6935,onSpeed,"    private void onSpeed() {
        dashedCircularProgress.setIcon(R.drawable.speed);
        dashedCircularProgress.setValue(46);
    }"
6937,onPageSelected,"            public void onPageSelected(int position) {
                if (position == 0) {
                    onSpeed();"
6938,onPageScrolled,"            public void onPageScrolled(int position, float positionOffset,
                                       int positionOffsetPixels) {"
6940,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.pager, container, false);"
6942,onSizeChanged,"    public void onSizeChanged(int height, int width) {
        this.width = width;
        this.height = height;
        initExternalCircle();
    }"
6945,draw,"    public void draw(Canvas canvas) {
        canvas.drawArc(internalCircle, startAngle, finishAngle, false, internalCirclePaint);
    }"
6946,initExternalCircle,"    private void initExternalCircle() {
        internalCircle = new RectF();
        float padding = internalStrokeWidth * 1.7f;
        internalCircle.set(padding, padding + marginTop, width - padding, height - padding);
    }"
6948,init,"    private void init() {
        initExternalCirclePainter();
    }"
6950,onSizeChanged,"    public void onSizeChanged(int height, int width) {
        this.width = width;
        this.height = height;
        this.centreX = (width - 64) / 2;
        this.centreY = (height - 64) / 2;
    }"
6953,draw,"    public void draw(Canvas canvas) {
        initBitmap();
        canvas.drawBitmap(image, centreX, 0, new Paint());
    }"
6954,initBitmap,"    private void initBitmap() {
        image = Bitmap.createScaledBitmap(image, 64, 64, false);
    }"
6958,draw,"    public void draw(Canvas canvas) {
        canvas.drawArc(externalCircle, startAngle, finishAngle, false, externalCirclePaint);
    }"
6959,initExternalCircle,"    private void initExternalCircle() {
        externalCircle = new RectF();
        externalCircle.set(externalStrokeWidth, externalStrokeWidth * marginTop,
                width - externalStrokeWidth, height - externalStrokeWidth);"
6960,initExternalCirclePainter,"    private void initExternalCirclePainter() {
        externalCirclePaint = new Paint();
        externalCirclePaint.setAntiAlias(true);
        externalCirclePaint.setStrokeWidth(externalStrokeWidth);
        externalCirclePaint.setColor(color);
        externalCirclePaint.setStyle(Paint.Style.STROKE);
    }"
6962,newInstance,"        public static CharFragment newInstance(int characterImage) {
            CharFragment charFragment = new CharFragment();
            Bundle args = new Bundle();
            args.putInt(IMAGE_ARG, characterImage);
            charFragment.setArguments(args);
            return charFragment;
        }"
6965,onViewCreated,"        public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
            getBundleArgs();
            charImageView = (ImageView) view.findViewById(R.id.char_image);
            charImageView.setImageResource(imageResource);
            palette = Palette.generate(((BitmapDrawable) charImageView.getDrawable()).getBitmap(),
                    32);"
6966,onCreateView,"        public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                                 @Nullable Bundle savedInstanceState) {
            return inflater.inflate(R.layout.char_layout, container, false);"
6970,animateBackgroundColor,"    private void animateBackgroundColor(int color) {
        int previousColor = Color.TRANSPARENT;
        Drawable background = dragonBallView.getBackground();

        if (background instanceof ColorDrawable)
            previousColor = ((ColorDrawable) background).getColor();

        final ObjectAnimator animator = ObjectAnimator"
6971,transform,"    private void transform(int value, Palette palette) {
        dashedCircularProgress.setValue(value);
        try {
            dashedCircularProgress.setExternalColor(palette.getPallete().get(5).getRgb());"
6973,onPageSelected,"            public void onPageSelected(int position) {
                switch (position) {
                    case 0:"
6976,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
                             @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.dragon_ball, container, false);"
6978,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    Object factory;
    if (isBuilder) {
      factory = ComponentBuilderInvocationHandler.forSubcomponentBuilder(cls, scope);
    } else {"
6979,forFactory,"  static UnlinkedBinding forFactory(Class<?> factoryClass) {
    return new UnlinkedSubcomponentBinding(false, factoryClass);
  }"
6980,forBuilder,"  static UnlinkedBinding forBuilder(Class<?> builderClass) {
    return new UnlinkedSubcomponentBinding(true, builderClass);
  }"
6981,toString,"  public String toString() {
    return ""Set"" + elementBindings;
  }"
6982,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    List<LinkedBinding<Object>> linkedElementBindings = new ArrayList<>(elementBindings.size());
    for (Binding elementBinding : elementBindings) {
      @SuppressWarnings(""unchecked"")
      LinkedBinding<Object> binding = (LinkedBinding<Object>) elementBinding.link(linker, scope);
      linkedElementBindings.add(binding);
    }"
6983,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    return new LinkedScopedBinding<>(unlinkedBinding.link(linker, scope));
  }"
6986,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    MembersInjector<?> membersInjector = ReflectiveMembersInjector.create(targetClass, scope);
    return new LinkedInstanceBinding<>(membersInjector);
  }"
6987,toString,"  public String toString() {
    return ""Map"" + mapOfProviderKey;
  }"
6989,toString,"  public String toString() {
    return ""Map"" + entryBindings;
  }"
6994,matchingParameterizedType,"  private Type[] matchingParameterizedType(Type[] typeArguments) {
    Type[] matchedTypeArguments = new Type[typeArguments.length];
    for (int i = 0; i < typeArguments.length; i++) {
      if (isTypeVariable(typeArguments[i])) {
        matchedTypeArguments[i] = matchTypeToConcreteType((TypeVariable<?>) typeArguments[i]);"
6995,findKeyForParameterizedType,"  private TypeUtil.ParameterizedTypeImpl findKeyForParameterizedType(
      ParameterizedType parameterType) {
    Type[] matchingTypes = matchingParameterizedType(parameterType.getActualTypeArguments());
    return new TypeUtil.ParameterizedTypeImpl(null, parameterType.getRawType(), matchingTypes);"
6996,hasParameterizedTypeVariable,"  private static boolean hasParameterizedTypeVariable(Type parameterType) {
    if (!(parameterType instanceof ParameterizedType)) {
      return false;
    }
    Type[] actualTypeArguments = ((ParameterizedType) parameterType).getActualTypeArguments();
    for (Type type : actualTypeArguments) {"
6997,isTypeVariable,"  private static boolean isTypeVariable(Type parameterType) {
    return parameterType instanceof TypeVariable;
  }"
6999,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    Type[] parameterTypes = constructor.getGenericParameterTypes();
    Annotation[][] parameterAnnotations = constructor.getParameterAnnotations();

    LinkedBinding<?>[] bindings = new LinkedBinding<?>[parameterTypes.length];
    for (int i = 0; i < parameterTypes.length; i++) {
      Type parameterType = parameterTypes[i];
      Key key ="
7001,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    Type[] parameterTypes = method.getGenericParameterTypes();
    if (parameterTypes.length != 0) {
      throw new IllegalArgumentException(
          ""@BindsOptionalOf methods must not have parameters: "" + method);
    }

    Annotation[] methodAnnotations = method.getDeclaredAnnotations();
    Annotation qualifier = findQualifier(methodAnnotations);"
7006,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    ReflectiveAndroidInjector.Factory<?> factory =
        new ReflectiveAndroidInjector.Factory<>(scope, moduleClasses, instanceClass, annotations);
    return new LinkedInstanceBinding<>(factory);"
7011,toString,"    public String toString() {
      if (lowerBound != null) {
        return ""? super "" + typeToString(lowerBound);"
7013,equals,"    public boolean equals(Object other) {
      return other instanceof WildcardType && Types.equals(this, (WildcardType) other);
    }"
7018,equals,"    public boolean equals(Object o) {
      return o instanceof GenericArrayType && Types.equals(this, (GenericArrayType) o);
    }"
7020,toString,"    public String toString() {
      StringBuilder result = new StringBuilder(30 * (typeArguments.length + 1));
      result.append(typeToString(rawType));

      if (typeArguments.length == 0) {
        return result.toString();
      }
"
7021,hashCode,"    public int hashCode() {
      return Arrays.hashCode(typeArguments) ^ rawType.hashCode() ^ Objects.hashCode(ownerType);
    }"
7022,equals,"    public boolean equals(Object other) {
      return other instanceof ParameterizedType && Types.equals(this, (ParameterizedType) other);
    }"
7026,checkNotPrimitive,"  static void checkNotPrimitive(Type type) {
    if ((type instanceof Class<?>) && ((Class<?>) type).isPrimitive()) {
      throw new IllegalArgumentException(""Unexpected primitive "" + type + "". Use the boxed type."");"
7027,typeToString,"  static String typeToString(Type type) {
    return type instanceof Class ? ((Class<?>) type).getName() : type.toString();
  }"
7028,canonicalize,"  static Type canonicalize(Type type) {
    if (type instanceof Class) {
      Class<?> c = (Class<?>) type;"
7034,two,"      static Long two() {
        return 2L;
      }"
7037,one,"    static String one() {
      return ""one"";
    }"
7059,string,"    static String string() {
      return ""foo"";
    }"
7061,get,"  public @Nullable T get() {
    LinkedBinding<T> binding = this.binding;
    if (binding == null) {
      binding = this.binding = (LinkedBinding<T>) scope.getBinding(key);
    }"
7062,get,"  public T get() {
    Object value = this.value;
    if (value == this) {
      synchronized (this) {
        value = this.value;"
7063,value,"    static Object value() {
      return new Object();
    }"
7066,value,"    static Runnable value() {
      return new Runnable() {
        @Override"
7072,get,"  public T get() {
    LinkedBinding<T> linked = linkedRef.get();
    if (linked == null) {
      linked = (LinkedBinding<T>) binding.link(new Linker(scope), scope);
"
7074,addInstance,"    Builder addInstance(Key key, @Nullable Object instance) {
      return addBinding(key, new LinkedInstanceBinding<>(instance));
    }"
7080,addBinding,"    Builder addBinding(Key key, Binding binding) {
      if (key == null) throw new NullPointerException(""key == null"");
      if (binding == null) throw new NullPointerException(""binding == null"");

      Binding replaced = keyToBinding.put(key, binding);
      if (replaced != null) {
        throw new IllegalStateException("
7081,addJustInTimeLookupFactory,"    Builder addJustInTimeLookupFactory(JustInTimeLookup.Factory jitLookupFactory) {
      if (jitLookupFactory == null) throw new NullPointerException(""jitLookupFactory == null"");
      this.jitLookupFactories.add(jitLookupFactory);
      return this;
    }"
7082,link,"  private LinkedBinding<?> link(Key key, @Nullable Linker linker, UnlinkedBinding binding) {
    if (linker == null) {
      linker = new Linker(this);
    }
    LinkedBinding<?> linkedBinding = linker.link(key, binding);
"
7083,putJitBinding,"  private @Nullable LinkedBinding<?> putJitBinding(
      Key key, @Nullable Linker linker, JustInTimeLookup lookup) {
    Binding jitBinding = lookup.binding;

    Annotation scope = lookup.scope;
    if (scope != null) {
      if (!annotations.contains(scope)) {
        return parent != null ? parent.putJitBinding(key, linker, lookup) : null;"
7084,findExistingBinding,"  private @Nullable LinkedBinding<?> findExistingBinding(Key key, @Nullable Linker linker) {
    Binding binding = bindings.get(key);
    if (binding != null) {
      return binding instanceof LinkedBinding<?>
          ? (LinkedBinding<?>) binding"
7087,toString,"  public String toString() {
    return ""Scope"" + annotations;
  }"
7090,runnable,"    static Runnable runnable() {
      return new Runnable() {
        @Override"
7101,addSetBinding,"  private static void addSetBinding(
      Scope.Builder scopeBuilder, Key elementKey, Binding elementBinding) {
    Key key =
        Key.of("
7102,addBinding,"  private static void addBinding(
      Scope.Builder scopeBuilder, Key key, Binding binding, Annotation[] annotations) {
    Annotation scope = findScope(annotations);
    if (scope != null) {
      if (!scopeBuilder.annotations.contains(scope)) {"
7105,injectMembers,"  public void injectMembers(T instance) {
    for (ClassInjector<T> classInjector : classInjectors) {
      classInjector.injectMembers(instance);"
7108,create,"    public AndroidInjector<T> create(T instance) {
      Scope scope =
          ComponentScopeBuilder.create(moduleClasses, new Class<?>[0], annotations, parent)
              .get()
              .addInstance(Key.of(null, instanceClass), instance)"
7109,inject,"  public void inject(T instance) {
    membersInjector.injectMembers(instance);
  }"
7110,one,"    static String one() {
      return ""one"" + oneCount.getAndIncrement();
    }"
7114,provideInteger,"    static Integer provideInteger() {
      return 1;
    }"
7115,provideString,"    static String provideString() {
      return ""foo"";
    }"
7119,intToLong,"    static Long intToLong(Integer value) {
      return Long.valueOf(value);
    }"
7120,stringToInteger,"    static Integer stringToInteger(String value) {
      return Integer.parseInt(value);
    }"
7121,longToString,"    static String longToString(Long value) {
      return String.valueOf(value);
    }"
7123,provideCharacter,"    static Character provideCharacter() {
      return '\u221E';
    }"
7124,provideBoolean,"    static Boolean provideBoolean() {
      return true;
    }"
7125,provideDouble,"    static Double provideDouble() {
      return -64.0;
    }"
7126,provideFloat,"    static Float provideFloat() {
      return -32.0f;
    }"
7127,provideLong,"    static Long provideLong() {
      return 64L;
    }"
7128,provideInteger,"    static Integer provideInteger() {
      return 32;
    }"
7129,provideShort,"    static Short provideShort() {
      return 16;
    }"
7130,provideByte,"    static Byte provideByte() {
      return 8;
    }"
7139,provideChar,"    static char provideChar() {
      return '\u221E';
    }"
7140,provideBoolean,"    static boolean provideBoolean() {
      return true;
    }"
7141,provideDouble,"    static double provideDouble() {
      return -64.0;
    }"
7142,provideFloat,"    static float provideFloat() {
      return -32.0f;
    }"
7143,provideLong,"    static long provideLong() {
      return 64L;
    }"
7144,provideInt,"    static int provideInt() {
      return 32;
    }"
7145,provideShort,"    static short provideShort() {
      return 16;
    }"
7146,provideByte,"    static byte provideByte() {
      return 8;
    }"
7157,five,"    static long five() {
      return 5L;
    }"
7162,foo,"    static String foo() {
      return ""foo"";
    }"
7168,foo,"    static String foo() {
      return null;
    }"
7177,create,"    NestedDependencyInterfaceTest create(First dependencies);
  }"
7179,string,"          static String string() {
            return ""foo"";
          }"
7185,create,"    MultipleInterfacesRequestSameDependency create(Aggregate first);
  }"
7194,one,"    static Set<Long> one() {
      return singleton(1L);
    }"
7196,two,"    static String two() {
      return ""two"";
    }"
7197,one,"    static Set<String> one() {
      return singleton(""one"");
    }"
7202,two,"    static String two() {
      return ""two"" + twoCount.getAndIncrement();
    }"
7208,two,"    static String two() {
      return twoValue.get();
    }"
7209,one,"    static String one() {
      return oneValue.get();
    }"
7222,two,"    static I two() {
      return Impl2.INSTANCE;
    }"
7223,one,"    static I one() {
      return Impl1.INSTANCE;
    }"
7228,string,"    static Long string() {
      return 5L;
    }"
7230,string,"    static String string(StringSubcomponent subcomponent) {
      return subcomponent.value().toString();
    }"
7232,create,"      StringSubcomponent create(@BindsInstance Long value);
    }"
7236,string,"    static String string(StringSubcomponent.Builder builder, StringSubcomponent.Factory factory) {
      return builder.longValue(5L).build().value().toString()
          + "" and """
7240,string,"    static String string(StringSubcomponent.Factory factory) {
      return factory.create(5L).value().toString();
    }"
7245,string,"    static String string(StringSubcomponent.Builder builder) {
      return builder.longValue(5L).build().value().toString();
    }"
7247,helperPrivateStaticMethod,"    private static Integer helperPrivateStaticMethod() {
      return 42;
    }"
7248,helperPrivateMethod,"    private Integer helperPrivateMethod() {
      return helperPrivateStaticMethod();
    }"
7249,integer,"    Integer integer() {
      return helperPrivateMethod();
    }"
7252,integer,"    static Integer integer() {
      return 42;
    }"
7254,string,"    default String string() {
      return ""foo"";
    }"
7256,unrelatedMethodInherited,"    default void unrelatedMethodInherited() {}
  }"
7263,value,"    static Integer value() {
      return 2;
    }"
7264,value,"    static Long value() {
      return 3L;
    }"
7265,add,"    static Number add(Long longValue, Integer integerValue) {
      return longValue + integerValue;
    }"
7266,string,"    static String string(Number value) {
      return value.toString();
    }"
7281,string,"    String string() {
      return ""foo"";
    }"
7286,staticMethod,"    static void staticMethod(String one) {}
  }"
7291,privateMethod,"    private void privateMethod(String one) {}
  }"
7299,abstractMethod,"    abstract void abstractMethod(String one);
  }"
7302,targetInjector,"  MembersInjector<Target<? extends String>> targetInjector();
"
7306,targetInjector,"  MembersInjector<Target<String>> targetInjector();
"
7311,foo,"    static @Foo String foo() {
      return ""foo"";
    }"
7312,foo,"    void foo(@Foo String foo) {
      fromMethod = foo;
    }"
7315,toString,"    public String toString() {
      return String.format(""%s, subField=%s"", super.toString(), subField);
    }"
7317,toString,"    public String toString() {
      return String.format(""baseField=%s"", baseField);
    }"
7320,three,"    public void three(Integer three) {
      count++;
    }"
7322,one,"    protected void one(String one) {
      count++;
    }"
7324,three,"    static Integer three() {
      return 3;
    }"
7327,three,"    public void three(Integer three) {
      this.three = three;
      count++;
    }"
7328,two,"    void two(Long two) {
      this.two = two;
      count++;
    }"
7329,one,"    protected void one(String one) {
      this.one = one;
      count++;
    }"
7334,three,"    void three(Integer three) {
      count++;
    }"
7335,two,"    long two(Long two) {
      count++;
      return two;
    }"
7336,one,"    String one(String one) {
      count++;
      return one;
    }"
7341,multiple,"    void multiple(String one, Long two, Long two2, Integer three) {
      this.one = one;
      this.two = two;
      this.two2 = two;
      this.three = three;
    }"
7347,subtype,"    void subtype(String foo) {
      subtypeCalled = true;
    }"
7348,two,"    void two(String one) {
      baseCalled = true;
    }"
7355,method,"    void method(String foo) {
      fieldBeforeMethod = this.foo != null;
    }"
7360,string,"    static Map<String, String> string() {
      Map<String, String> map = new HashMap<>();
      map.put(""1"", ""one"");
      map.put(""2"", ""two"");
      return map;
    }"
7362,string,"    static Map<String, Provider<String>> string(
        @Named(""one"") Provider<String> one, @Named(""two"") Provider<String> two) {
      Map<String, Provider<String>> map = new HashMap<>();
      map.put(""1"", one);
      map.put(""2"", two);
      return map;"
7363,provideFooString,"    static String provideFooString() {
      return twoValue.get();
    }"
7364,provideBarString,"    static String provideBarString() {
      return oneValue.get();
    }"
7366,string,"    static Map<String, Lazy<String>> string(
        @Named(""one"") Lazy<String> one, @Named(""two"") Lazy<String> two) {
      Map<String, Lazy<String>> map = new HashMap<>();
      map.put(""1"", one);
      map.put(""2"", two);
      return map;"
7370,appendChain,"  private void appendChain(StringBuilder builder) {
    for (Map.Entry<Key, Binding> entry : chain.entrySet()) {
      builder"
7371,toString,"  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(""Linker with "").append(scope).append(""\n"");
    appendChain(builder);
    return builder.toString();
  }"
7372,failure,"  private RuntimeException failure(Key key, String reason, String cause) {
    StringBuilder builder = new StringBuilder(reason).append("" for "").append(key).append('\n');
    appendChain(builder);
    builder.append("" * Requested: "").append(key).append(""\n     which "").append(cause).append('.');
    throw new IllegalStateException(builder.toString());
  }"
7373,link,"  LinkedBinding<?> link(Key key, UnlinkedBinding unlinkedBinding) {
    if (chain.containsKey(key)) {
      throw failure(key, ""Dependency cycle"", ""forms a cycle"");
    }
    chain.put(key, unlinkedBinding);
    LinkedBinding<?> linkedBinding = unlinkedBinding.link(this, scope);
    chain.remove(key);"
7374,find,"  LinkedBinding<?> find(Key key) {
    return scope.findBinding(key, this);
  }"
7375,get,"  LinkedBinding<?> get(Key key) {
    LinkedBinding<?> binding = find(key);
    if (binding != null) {
      return binding;
    }"
7376,get,"  public Set<T> get() {
    Set<T> elements = new LinkedHashSet<>();
    for (LinkedBinding<T> elementBinding : elementBindings) {
      elements.add(elementBinding.get());
    }
    for (LinkedBinding<Set<T>> elementsBinding : elementsBindings) {"
7377,get,"  public @Nullable T get() {
    Object instance = this.instance;
    if (instance == this) {
      synchronized (this) {
        instance = this.instance;"
7380,get,"  public Provider<T> get() {
    return new ScopeKeyedProvider<>(scope, key);
  }"
7381,get,"  public Map<K, V> get() {
    Map<K, Provider<V>> mapOfProvider = mapOfProviderBinding.get();
    assert mapOfProvider != null;

    Map<K, V> mapOfValue = new LinkedHashMap<>(mapOfProvider.size());
    for (Map.Entry<K, Provider<V>> entry : mapOfProvider.entrySet()) {
      mapOfValue.put(entry.getKey(), entry.getValue().get());"
7382,get,"  public Lazy<T> get() {
    return new ScopeKeyedLazy<>(scope, key);
  }"
7383,get,"  public T get() {
    T value = this.value;
    if (value == null) throw new IllegalStateException();
    return value;
  }"
7386,get,"  public T get() {
    Object[] arguments = new Object[dependencies.length];
    for (int i = 0; i < dependencies.length; i++) {
      arguments[i] = dependencies[i].get();
    }
    T instance = tryInstantiate(constructor, arguments);
    membersInjector.injectMembers(instance);"
7387,toString,"  public String toString() {
    return ""@BindsOptionalOf["" + dependency + ']';
  }"
7388,get,"  public Optional<T> get() {
    if (dependency == null) {
      return Optional.empty();
    }
    T value = dependency.get();
    if (value == null) {"
7389,toString,"  public String toString() {
    return ""@BindsInstance["" + value + ']';
  }"
7390,get,"  public @Nullable T get() {
    return value;
  }"
7392,get,"  public Optional<T> get() {
    if (dependency == null) {
      return Optional.absent();
    }
    T value = dependency.get();
    if (value == null) {"
7398,toString,"  public final String toString() {
    Annotation qualifier = qualifier();
    String type = getTypeName(type());
    return qualifier != null ? qualifier.toString() + ' ' + type : type;
  }"
7401,of,"  static Key of(@Nullable Annotation qualifier, Type type) {
    return new AutoValue_Key(qualifier, canonicalize(boxIfNecessary(type)));
  }"
7409,string,"    static String string() {
      return ""hey"";
    }"
7416,evaluate,"        public void evaluate() {
          try {
            base.evaluate();
          } catch (Throwable t) {"
7417,evaluate,"        public void evaluate() {
          throw new AssumptionViolatedException(""Ignored in code gen backend"");
        }"
7418,apply,"  public Statement apply(Statement base, Description description) {
    boolean ignoreCodegen = description.getAnnotation(IgnoreCodegen.class) != null;
    if (ignoreCodegen && backend == Backend.CODEGEN) {
      return new Statement() {
        @Override
        public void evaluate() {
          throw new AssumptionViolatedException(""Ignored in code gen backend"");"
7419,membersInjectorWildcardType,"  public void membersInjectorWildcardType() {
    try {
      backend.create(MemberInjectorWildcardType.class).targetInjector();"
7420,membersInjectorGenericType,"  public void membersInjectorGenericType() {
    MembersInjector<MemberInjectorGenericType.Target<String>> injector =
        backend.create(MemberInjectorGenericType.class).targetInjector();
    MemberInjectorGenericType.Target<String> target = new MemberInjectorGenericType.Target<>();
    assertThat(target.foo).isNull();
    injector.injectMembers(target);
    assertThat(target.foo).isEqualTo(""foo"");"
7421,membersInjectorInjected,"  public void membersInjectorInjected() {
    MembersInjector<MemberInjectorInjected.Target> injector =
        backend.create(MemberInjectorInjected.class).holder().targetInjector;
    MemberInjectorInjected.Target target = new MemberInjectorInjected.Target();
    assertThat(target.foo).isNull();
    injector.injectMembers(target);
    assertThat(target.foo).isEqualTo(""foo"");"
7422,membersInjectorComponent,"  public void membersInjectorComponent() {
    MembersInjector<MemberInjectorComponent.Target> injector =
        backend.create(MemberInjectorComponent.class).targetInjector();
    MemberInjectorComponent.Target target = new MemberInjectorComponent.Target();
    assertThat(target.foo).isNull();
    injector.injectMembers(target);
    assertThat(target.foo).isEqualTo(""foo"");"
7423,multipleInterfacesRequestSameDependency,"  public void multipleInterfacesRequestSameDependency() {
    String value = ""my-value"";
    String result =
        backend
            .factory(MultipleInterfacesRequestSameDependency.Factory.class)"
7424,nestedDependencyInterfaceTest,"  public void nestedDependencyInterfaceTest() {
    String value = ""my-value"";
    String result =
        backend.factory(NestedDependencyInterfaceTest.Factory.class).create(() -> value).value();
    assertThat(result).isSameInstanceAs(value);"
7425,subcomponentScopeDependsOnUnscoped,"  public void subcomponentScopeDependsOnUnscoped() {
    SubcomponentScopedDependsOnUnscoped unscoped =
        backend.create(SubcomponentScopedDependsOnUnscoped.class);
    try {"
7426,subcomponentScopeCycle,"  public void subcomponentScopeCycle() {
    SubcomponentScopeCycle.RequestComponent requestComponent =
        backend.create(SubcomponentScopeCycle.class).request();
    try {"
7427,componentScopeDependsOnUnscoped,"  public void componentScopeDependsOnUnscoped() {
    try {
      backend.create(ComponentScopedDependsOnUnscoped.class);"
7428,componentAndSubcomponentScopeCycle,"  public void componentAndSubcomponentScopeCycle() {
    ComponentAndSubcomponentScopeCycle component =
        backend.create(ComponentAndSubcomponentScopeCycle.class);
    try {"
7429,componentScopeCycleWithMultipleAnnotations,"  public void componentScopeCycleWithMultipleAnnotations() {
    try {
      backend.create(ComponentScopeCycleWithMultipleAnnotations.class);"
7430,componentScopeCycle,"  public void componentScopeCycle() {
    try {
      backend.create(ComponentScopeCycle.class);"
7432,componentBindingInstance,"  public void componentBindingInstance() {
    ComponentBindingInstance instance = backend.create(ComponentBindingInstance.class);
    assertThat(instance).isSameInstanceAs(instance.self());
    assertThat(instance).isSameInstanceAs(instance.target().component);
  }"
7433,subcomponentFactoryProvision,"  public void subcomponentFactoryProvision() {
    SubcomponentFactoryProvision.Nested nested =
        backend
            .create(SubcomponentFactoryProvision.class)
            .nestedFactory()"
7434,subcomponentFactoryMethod,"  public void subcomponentFactoryMethod() {
    SubcomponentFactoryMethod.Nested nested =
        backend
            .create(SubcomponentFactoryMethod.class)
            .createNested(new SubcomponentFactoryMethod.Nested.Module2(2L));"
7435,subcomponentBuilderProvision,"  public void subcomponentBuilderProvision() {
    SubcomponentBuilderProvision.Nested nested =
        backend
            .create(SubcomponentBuilderProvision.class)
            .nestedBuilder()"
7436,subcomponentProvision,"  public void subcomponentProvision() {
    SubcomponentProvision.Nested nested = backend.create(SubcomponentProvision.class).nested();
    assertThat(nested.one()).isEqualTo(""one"");
    assertThat(nested.two()).isEqualTo(2L);
  }"
7437,componentWithDependenciesCreateFails,"  public void componentWithDependenciesCreateFails() {
    try {
      backend.create(ComponentWithDependencies.class);"
7438,noComponentBuilderAnnotationFails,"  public void noComponentBuilderAnnotationFails() {
    try {
      backend.builder(NoBuilderAnnotation.Builder.class);"
7439,abstractBuilderClassFails,"  public void abstractBuilderClassFails() {
    try {
      backend.builder(AbstractBuilderClass.Builder.class);"
7440,packagePrivateComponentFails,"  public void packagePrivateComponentFails() {
    try {
      backend.builder(PackagePrivateComponent.Builder.class);"
7441,noComponentAnnotationBuilderFails,"  public void noComponentAnnotationBuilderFails() {
    try {
      backend.builder(NoAnnotation.Builder.class);"
7442,noComponentAnnotationCreateFails,"  public void noComponentAnnotationCreateFails() {
    try {
      backend.create(NoAnnotation.class);"
7443,abstractClassBuilderFails,"  public void abstractClassBuilderFails() {
    AbstractComponent.Builder builder = backend.builder(AbstractComponent.Builder.class);
    try {
      builder.build();"
7444,abstractClassCreateFails,"  public void abstractClassCreateFails() {
    try {
      backend.create(AbstractComponent.class);"
7445,membersInjectionStaticMethod,"  public void membersInjectionStaticMethod() {
    MembersInjectionStaticMethod component = backend.create(MembersInjectionStaticMethod.class);
    MembersInjectionStaticMethod.Target instance = new MembersInjectionStaticMethod.Target();
    try {
      component.inject(instance);"
7446,membersInjectionPrivateMethod,"  public void membersInjectionPrivateMethod() {
    MembersInjectionPrivateMethod component = backend.create(MembersInjectionPrivateMethod.class);
    MembersInjectionPrivateMethod.Target instance = new MembersInjectionPrivateMethod.Target();
    try {
      component.inject(instance);"
7447,membersInjectionStaticField,"  public void membersInjectionStaticField() {
    MembersInjectionStaticField component = backend.create(MembersInjectionStaticField.class);
    MembersInjectionStaticField.Target instance = new MembersInjectionStaticField.Target();
    try {
      component.inject(instance);"
7448,membersInjectionPrivateField,"  public void membersInjectionPrivateField() {
    MembersInjectionPrivateField component = backend.create(MembersInjectionPrivateField.class);
    MembersInjectionPrivateField.Target instance = new MembersInjectionPrivateField.Target();
    try {
      component.inject(instance);"
7449,interfaceMethod,"          public void interfaceMethod(String one) {}
        };"
7450,membersInjectionInterfaceMethod,"  public void membersInjectionInterfaceMethod() {
    MembersInjectionInterfaceMethod component =
        backend.create(MembersInjectionInterfaceMethod.class);
    MembersInjectionInterfaceMethod.Target instance =
        new MembersInjectionInterfaceMethod.Target() {"
7451,abstractMethod,"          public void abstractMethod(String one) {}
        };"
7452,membersInjectionAbstractMethod,"  public void membersInjectionAbstractMethod() {
    MembersInjectionAbstractMethod component = backend.create(MembersInjectionAbstractMethod.class);
    MembersInjectionAbstractMethod.Target instance =
        new MembersInjectionAbstractMethod.Target() {
          @Override"
7453,membersInjectionWrongReturnType,"  public void membersInjectionWrongReturnType() {
    MembersInjectionWrongReturnType component =
        backend.create(MembersInjectionWrongReturnType.class);
    MembersInjectionWrongReturnType.Target instance = new MembersInjectionWrongReturnType.Target();
    try {"
7454,undeclaredDependencies,"  public void undeclaredDependencies() {
    UndeclaredDependencies.Builder builder = backend.builder(UndeclaredDependencies.Builder.class);
    try {
      builder.dep(""hey"");"
7455,undeclaredModule,"  public void undeclaredModule() {
    UndeclaredModules.Builder builder = backend.builder(UndeclaredModules.Builder.class);
    try {
      builder.module(new UndeclaredModules.Module1());"
7456,providerCycle,"  public void providerCycle() {
    ProviderCycle component = backend.create(ProviderCycle.class);
    try {
      component.string();"
7459,nestedComponentBuilder,"  public void nestedComponentBuilder() {
    NestedComponent.MoreNesting.AndMore.TheComponent component =
        backend.builder(NestedComponent.MoreNesting.AndMore.TheComponent.Builder.class).build();
    assertThat(component.string()).isEqualTo(""foo"");"
7460,nestedComponent,"  public void nestedComponent() {
    NestedComponent.MoreNesting.AndMore.TheComponent component =
        backend.create(NestedComponent.MoreNesting.AndMore.TheComponent.class);
    assertThat(component.string()).isEqualTo(""foo"");"
7461,moduleSubcomponentNoFactoryOrBuilder,"  public void moduleSubcomponentNoFactoryOrBuilder() {
    try {
      backend.create(ModuleSubcomponentNoFactoryOrBuilder.class);"
7462,moduleSubcomponentBindsFactoryAndBuilder,"  public void moduleSubcomponentBindsFactoryAndBuilder() {
    try {
      backend.create(ModuleSubcomponentBindsFactoryAndBuilder.class);"
7463,moduleSubcomponentBindsFactory,"  public void moduleSubcomponentBindsFactory() {
    ModuleSubcomponentBindsBuilder component = backend.create(ModuleSubcomponentBindsBuilder.class);
    assertThat(component.string()).isEqualTo(""5"");
  }"
7464,moduleSubcomponentBindsBuilder,"  public void moduleSubcomponentBindsBuilder() {
    ModuleSubcomponentBindsBuilder component = backend.create(ModuleSubcomponentBindsBuilder.class);
    assertThat(component.string()).isEqualTo(""5"");
  }"
7465,moduleIncludes,"  public void moduleIncludes() {
    ModuleIncludes component = backend.create(ModuleIncludes.class);
    assertThat(component.string()).isEqualTo(""5"");
  }"
7466,modulePrivateMethod,"  public void modulePrivateMethod() {
    ModulePrivateMethod component = backend.create(ModulePrivateMethod.class);
    assertThat(component.integer()).isEqualTo(42);
  }"
7467,moduleInterfaceWithDefaultMethodNotAllowed,"  public void moduleInterfaceWithDefaultMethodNotAllowed() {
    try {
      backend.create(ModuleInterfaceDefaultProvidesMethod.class);"
7468,moduleAbstractClassInstanceMethodNotAllowed,"  public void moduleAbstractClassInstanceMethodNotAllowed() {
    try {
      backend.create(ModuleAbstractInstanceProvidesMethod.class);"
7469,moduleInterfaceWithDefaultMethodUnrelatedDoesNotAffectDagger,"  public void moduleInterfaceWithDefaultMethodUnrelatedDoesNotAffectDagger() {
    ModuleInterfaceDefaultMethodUnrelated component =
        backend.create(ModuleInterfaceDefaultMethodUnrelated.class);
    assertThat(component.string()).isEqualTo(""foo"");"
7470,moduleInterfaceHierarchy,"  public void moduleInterfaceHierarchy() {
    ModuleInterfaceHierarchy component = backend.create(ModuleInterfaceHierarchy.class);
    assertThat(component.number()).isEqualTo(42);
  }"
7471,moduleInterface,"  public void moduleInterface() {
    ModuleInterface component = backend.create(ModuleInterface.class);
    assertThat(component.number()).isEqualTo(42);
  }"
7472,moduleClassHierarchyStatics,"  public void moduleClassHierarchyStatics() {
    ModuleClassHierarchyStatics component = backend.create(ModuleClassHierarchyStatics.class);
    assertThat(component.string()).isEqualTo(""foo"");
  }"
7473,moduleClassHierarchy,"  public void moduleClassHierarchy() {
    ModuleClassHierarchy component = backend.create(ModuleClassHierarchy.class);
    assertThat(component.number()).isEqualTo(42);
  }"
7474,moduleClassAndInterfaceDuplicatesHierarchy,"  public void moduleClassAndInterfaceDuplicatesHierarchy() {
    ModuleClassAndInterfaceDuplicatesHierarchy component =
        backend.create(ModuleClassAndInterfaceDuplicatesHierarchy.class);
    assertThat(component.number()).isEqualTo(42);"
7475,moduleClassAndInterfaceHierarchy,"  public void moduleClassAndInterfaceHierarchy() {
    ModuleClassAndInterfaceHierarchy component =
        backend.create(ModuleClassAndInterfaceHierarchy.class);
    assertThat(component.number()).isEqualTo(42);"
7476,moduleClass,"  public void moduleClass() {
    ModuleClass component = backend.create(ModuleClass.class);
    assertThat(component.string()).isEqualTo(""foo"");
  }"
7477,multibindsAnnotationWrongType,"  public void multibindsAnnotationWrongType() {
    try {
      backend.create(MultibindsAnnotationWrongType.class);"
7480,multibindingMapNoUnwrap,"  public void multibindingMapNoUnwrap() {
    MultibindingMapNoUnwrap component = backend.create(MultibindingMapNoUnwrap.class);
    assertThat(component.values())
        .containsExactly("
7481,multibindingMapPrimitiveValue,"  public void multibindingMapPrimitiveValue() {
    MultibindingMapPrimitiveValue component = backend.create(MultibindingMapPrimitiveValue.class);
    assertThat(component.values()).containsExactly(""1"", 1L, ""2"", 2L);
  }"
7482,multibindingMapPrimitiveKey,"  public void multibindingMapPrimitiveKey() {
    MultibindingMapPrimitiveKey component = backend.create(MultibindingMapPrimitiveKey.class);
    assertThat(component.values()).containsExactly(1L, ""one"", 2L, ""two"");
  }"
7483,multibindingMapClassKey,"  public void multibindingMapClassKey() {
    MultibindingMapClassKey c = backend.create(MultibindingMapClassKey.class);
    assertThat(c.values())
        .containsExactly(Impl1.class, Impl1.INSTANCE, Impl2.class, Impl2.INSTANCE);"
7484,multibindingMapEmpty,"  public void multibindingMapEmpty() {
    MultibindingMapEmpty component = backend.create(MultibindingMapEmpty.class);
    assertThat(component.values()).isEmpty();
  }"
7485,multibindingMap,"  public void multibindingMap() {
    MultibindingMap component = backend.create(MultibindingMap.class);
    assertThat(component.values()).containsExactly(""1"", ""one"", ""2"", ""two"");
  }"
7487,multibindingSetElementsPrimitive,"  public void multibindingSetElementsPrimitive() {
    MultibindingSetElementsPrimitive component =
        backend.create(MultibindingSetElementsPrimitive.class);
    assertThat(component.values()).containsExactly(1L, 2L);"
7488,multibindingSetPrimitive,"  public void multibindingSetPrimitive() {
    MultibindingSetPrimitive component = backend.create(MultibindingSetPrimitive.class);
    assertThat(component.values()).containsExactly(1L, 2L);
  }"
7489,multibindingSetElements,"  public void multibindingSetElements() {
    MultibindingSetElements component = backend.create(MultibindingSetElements.class);
    assertThat(component.values()).containsExactly(""one"", ""two"");
  }"
7490,multibindingSetEmpty,"  public void multibindingSetEmpty() {
    MultibindingSetEmpty component = backend.create(MultibindingSetEmpty.class);
    assertThat(component.values()).isEmpty();
  }"
7491,multibindingSet,"  public void multibindingSet() {
    MultibindingSet component = backend.create(MultibindingSet.class);
    assertThat(component.values()).containsExactly(""one"", ""two"");
  }"
7492,scopedWrong,"  public void scopedWrong() {
    try {
      backend.create(ScopedWrong.class);"
7494,scoped,"  public void scoped() {
    Scoped component = backend.create(Scoped.class);
    Object value1 = component.value();
    Object value2 = component.value();
    assertThat(value1).isSameInstanceAs(value2);
  }"
7497,memberInjectionQualified,"  public void memberInjectionQualified() {
    MemberInjectionQualified component = backend.create(MemberInjectionQualified.class);
    MemberInjectionQualified.Target target = new MemberInjectionQualified.Target();
    component.inject(target);
    assertThat(target.fromField).isEqualTo(""foo"");
    assertThat(target.fromMethod).isEqualTo(""foo"");
  }"
7498,memberInjectionMethodReturnTypes,"  public void memberInjectionMethodReturnTypes() {
    MemberInjectionMethodReturnTypes component =
        backend.create(MemberInjectionMethodReturnTypes.class);
    MemberInjectionMethodReturnTypes.Target target = new MemberInjectionMethodReturnTypes.Target();
    component.inject(target);
    assertThat(target.count).isEqualTo(3);"
7501,memberInjectionOrder,"  public void memberInjectionOrder() {
    MemberInjectionOrder component = backend.create(MemberInjectionOrder.class);
    MemberInjectionOrder.SubType target = new MemberInjectionOrder.SubType();
    component.inject(target);
    assertThat(target.calls)
        .containsExactly("
7503,memberInjectionFieldVisibility,"  public void memberInjectionFieldVisibility() {
    MemberInjectionFieldVisibility component = backend.create(MemberInjectionFieldVisibility.class);
    MemberInjectionFieldVisibility.Target target = new MemberInjectionFieldVisibility.Target();
    component.inject(target);
    assertThat(target.one).isEqualTo(""one"");
    assertThat(target.two).isEqualTo(2L);
    assertThat(target.three).isEqualTo(3);
  }"
7504,memberInjectionFieldBeforeMethod,"  public void memberInjectionFieldBeforeMethod() {
    MemberInjectionFieldBeforeMethod component =
        backend.create(MemberInjectionFieldBeforeMethod.class);
    MemberInjectionFieldBeforeMethod.Target target = new MemberInjectionFieldBeforeMethod.Target();
    component.inject(target);
    assertThat(target.fieldBeforeMethod).isTrue();"
7505,memberInjectionNoInjects,"  public void memberInjectionNoInjects() {
    MemberInjectionNoInjects component = backend.create(MemberInjectionNoInjects.class);
    MemberInjectionNoInjects.Target target = new MemberInjectionNoInjects.Target();
    component.inject(target);
    assertThat(target.one).isNull();
    assertThat(target.two).isNull();
    assertThat(target.three).isNull();
    assertThat(target.count).isEqualTo(0);
  }"
7506,memberInjectionReturnInstance,"  public void memberInjectionReturnInstance() {
    MemberInjectionReturnInstance component = backend.create(MemberInjectionReturnInstance.class);
    MemberInjectionReturnInstance.Target in = new MemberInjectionReturnInstance.Target();
    MemberInjectionReturnInstance.Target out = component.inject(in);
    assertThat(out.foo).isEqualTo(""foo"");
    assertThat(out).isSameInstanceAs(in);
  }"
7507,method,"      public void method(String foo) {
        called = true;
      }"
7508,memberInjectionInterface,"  public void memberInjectionInterface() {
    MemberInjectionInterface component = backend.create(MemberInjectionInterface.class);
    class Target implements MemberInjectionInterface.Target {
      boolean called;

      @Override
      public void method(String foo) {"
7512,factoryImplicitModules,"  public void factoryImplicitModules() {
    FactoryImplicitModules component =
        backend.factory(FactoryImplicitModules.Factory.class).create(3L);
"
7513,factoryExplicitModulesNullThrowsNpe,"  public void factoryExplicitModulesNullThrowsNpe() {
    FactoryExplicitModules.Factory factory = backend.factory(FactoryExplicitModules.Factory.class);
    try {
      factory.create(null);"
7514,factoryExplicitModules,"  public void factoryExplicitModules() {
    FactoryExplicitModules component =
        backend
            .factory(FactoryExplicitModules.Factory.class)"
7515,factoryDependencyNullThrowsNpe,"  public void factoryDependencyNullThrowsNpe() {
    FactoryDependency.Factory factory = backend.factory(FactoryDependency.Factory.class);
    try {
      factory.create(null);"
7516,factoryDependency,"  public void factoryDependency() {
    FactoryDependency component =
        backend.factory(FactoryDependency.Factory.class).create(new FactoryDependency.Other(""hey""));
"
7517,factoryBindsInstanceNull,"  public void factoryBindsInstanceNull() {
    FactoryBindsInstanceNull component =
        backend.factory(FactoryBindsInstanceNull.Factory.class).create(null);
"
7518,factoryBindsInstance,"  public void factoryBindsInstance() {
    FactoryBindsInstance component =
        backend.factory(FactoryBindsInstance.Factory.class).create(""hey"");
"
7519,builderDependencyOmitted,"  public void builderDependencyOmitted() {
    try {
      backend.builder(BuilderDependency.Builder.class).build();"
7520,builderDependencySetTwice,"  public void builderDependencySetTwice() {
    BuilderDependency component =
        backend
            .builder(BuilderDependency.Builder.class)"
7521,builderDependencyNullThrowsNpe,"  public void builderDependencyNullThrowsNpe() {
    BuilderDependency.Builder builder = backend.builder(BuilderDependency.Builder.class);
    try {
      builder.other(null);"
7522,builderDependency,"  public void builderDependency() {
    BuilderDependency component =
        backend
            .builder(BuilderDependency.Builder.class)"
7523,builderExplicitModulesOmitted,"  public void builderExplicitModulesOmitted() {
    try {
      backend.builder(BuilderExplicitModules.Builder.class).build();"
7524,builderExplicitModulesSetTwice,"  public void builderExplicitModulesSetTwice() {
    BuilderExplicitModules component =
        backend
            .builder(BuilderExplicitModules.Builder.class)"
7525,builderExplicitModulesNullThrowsNpe,"  public void builderExplicitModulesNullThrowsNpe() {
    BuilderExplicitModules.Builder builder = backend.builder(BuilderExplicitModules.Builder.class);
    try {
      builder.module1(null);"
7526,builderExplicitModules,"  public void builderExplicitModules() {
    BuilderExplicitModules component =
        backend
            .builder(BuilderExplicitModules.Builder.class)"
7527,builderImplicitModules,"  public void builderImplicitModules() {
    BuilderImplicitModules component =
        backend.builder(BuilderImplicitModules.Builder.class).value(3L).build();
"
7528,builderBindsInstanceOnParameterAndMethod,"  public void builderBindsInstanceOnParameterAndMethod() {
    BuilderBindsInstanceOnParameterAndMethod.Builder builder =
        backend.builder(BuilderBindsInstanceOnParameterAndMethod.Builder.class);
    try {"
7529,builderBindsInstanceOnParameterNull,"  public void builderBindsInstanceOnParameterNull() {
    BuilderBindsInstanceOnParameterNull component =
        backend.builder(BuilderBindsInstanceOnParameterNull.Builder.class).string(null).build();
    assertThat(component.string()).isNull();"
7530,builderBindsInstanceOnParameterCalledTwice,"  public void builderBindsInstanceOnParameterCalledTwice() {
    BuilderBindsInstanceOnParameter component =
        backend
            .builder(BuilderBindsInstanceOnParameter.Builder.class)"
7531,builderBindsInstanceOnParameter,"  public void builderBindsInstanceOnParameter() {
    BuilderBindsInstanceOnParameter component =
        backend.builder(BuilderBindsInstanceOnParameter.Builder.class).string(""foo"").build();
    assertThat(component.string()).isEqualTo(""foo"");"
7532,builderBindsInstanceNull,"  public void builderBindsInstanceNull() {
    BuilderBindsInstanceNull component =
        backend.builder(BuilderBindsInstanceNull.Builder.class).string(null).build();
    assertThat(component.string()).isNull();"
7533,builderBindsInstanceCalledTwice,"  public void builderBindsInstanceCalledTwice() {
    BuilderBindsInstance component =
        backend.builder(BuilderBindsInstance.Builder.class).string(""foo"").string(""bar"").build();
    assertThat(component.string()).isEqualTo(""bar"");"
7534,builderBindsInstance,"  public void builderBindsInstance() {
    BuilderBindsInstance component =
        backend.builder(BuilderBindsInstance.Builder.class).string(""foo"").build();
    assertThat(component.string()).isEqualTo(""foo"");"
7535,implicitModuleInstanceNotCreatedWhenUnnecessary,"  public void implicitModuleInstanceNotCreatedWhenUnnecessary() {
    ImplicitModuleInstanceCannotBeCreated component =
        backend.create(ImplicitModuleInstanceCannotBeCreated.class);
"
7536,implicitModuleInstance,"  public void implicitModuleInstance() {
    ImplicitModuleInstance component = backend.create(ImplicitModuleInstance.class);

    assertThat(component.string()).isEqualTo(""one"");"
7542,providerMultipleGenericIntoJustInTimeGeneric,"  public void providerMultipleGenericIntoJustInTimeGeneric() {
    ProviderMultipleGenericIntoJustInTime component =
        backend.create(ProviderMultipleGenericIntoJustInTime.class);
    assertThat(component.thing().thingProvider.get()).isNotNull();
    assertThat(component.thing().valueProvider.get()).isNotNull();"
7543,providerGenericIntoJustInTimeGeneric,"  public void providerGenericIntoJustInTimeGeneric() {
    ProviderGenericIntoJustInTime component = backend.create(ProviderGenericIntoJustInTime.class);
    assertThat(component.thing().genericProvider.get()).isNotNull();
  }"
7544,justInTimeNotScopedInAncestry,"  public void justInTimeNotScopedInAncestry() {
    JustInTimeNotScopedInAncestry.ChildComponent child =
        backend.create(JustInTimeNotScopedInAncestry.class).child();
    try {"
7545,justInTimeScopedIntoUnscoped,"  public void justInTimeScopedIntoUnscoped() {
    JustInTimeScopedIntoUnscoped component = backend.create(JustInTimeScopedIntoUnscoped.class);
    try {
      component.thing();"
7546,justInTimeWrongScope,"  public void justInTimeWrongScope() {
    JustInTimeWrongScope component = backend.create(JustInTimeWrongScope.class);
    try {
      component.thing();"
7547,justInTimeUnscopedIntoJustInTimeScoped,"  public void justInTimeUnscopedIntoJustInTimeScoped() {
    JustInTimeDependsOnJustInTime component = backend.create(JustInTimeDependsOnJustInTime.class);
    JustInTimeDependsOnJustInTime.Foo foo1 = component.thing();
    JustInTimeDependsOnJustInTime.Foo foo2 = component.thing();
    assertThat(foo1).isNotSameInstanceAs(foo2);
  }"
7549,justInTimeScoped,"  public void justInTimeScoped() {
    JustInTimeScoped component = backend.create(JustInTimeScoped.class);
    JustInTimeScoped.Thing thing1 = component.thing();
    JustInTimeScoped.Thing thing2 = component.thing();
    assertThat(thing1).isSameInstanceAs(thing2);
  }"
7550,justInTimeMembersInjection,"  public void justInTimeMembersInjection() {
    JustInTimeMembersInjection component = backend.create(JustInTimeMembersInjection.class);
    JustInTimeMembersInjection.Thing thing = component.thing();
    assertThat(thing.stringConstructor).isEqualTo(""hey"");
    assertThat(thing.stringField).isEqualTo(""hey"");
    assertThat(thing.stringMethod).isEqualTo(""hey"");
  }"
7551,justInTimeGeneric,"  public void justInTimeGeneric() {
    JustInTimeGeneric component = backend.create(JustInTimeGeneric.class);
    assertThat(component.thing()).isNotNull();
  }"
7552,justInTimeConstructor,"  public void justInTimeConstructor() {
    JustInTimeConstructor component = backend.create(JustInTimeConstructor.class);
    assertThat(component.thing()).isNotNull();
  }"
7553,optionalGuavaBindingPrimitive,"  public void optionalGuavaBindingPrimitive() {
    OptionalGuavaBindingPrimitive component = backend.create(OptionalGuavaBindingPrimitive.class);
    assertThat(component.five()).isEqualTo(com.google.common.base.Optional.of(5L));
  }"
7554,optionalGuavaBindingAbsent,"  public void optionalGuavaBindingAbsent() {
    OptionalGuavaBindingAbsent component = backend.create(OptionalGuavaBindingAbsent.class);
    assertThat(component.string()).isEqualTo(com.google.common.base.Optional.absent());
  }"
7555,optionalGuavaBinding,"  public void optionalGuavaBinding() {
    OptionalGuavaBinding component = backend.create(OptionalGuavaBinding.class);
    assertThat(component.string()).isEqualTo(com.google.common.base.Optional.of(""foo""));
  }"
7556,optionalBindingPrimitive,"  public void optionalBindingPrimitive() {
    OptionalBindingPrimitive component = backend.create(OptionalBindingPrimitive.class);
    assertThat(component.five()).isEqualTo(Optional.of(5L));
  }"
7557,optionalBindingAbsent,"  public void optionalBindingAbsent() {
    OptionalBindingAbsent component = backend.create(OptionalBindingAbsent.class);
    assertThat(component.string()).isEqualTo(Optional.empty());
  }"
7558,optionalBindingNullable,"  public void optionalBindingNullable() {
    OptionalBindingNullable component = backend.create(OptionalBindingNullable.class);
    try {
      component.string();"
7559,optionalBinding,"  public void optionalBinding() {
    OptionalBinding component = backend.create(OptionalBinding.class);
    assertThat(component.string()).isEqualTo(Optional.of(""foo""));
  }"
7562,mapWithoutBinds,"  public void mapWithoutBinds() {
    MapWithoutBinds component = backend.create(MapWithoutBinds.class);
    assertThat(component.strings()).containsExactly(""1"", ""one"", ""2"", ""two"");
  }"
7563,bindIntoMap,"  public void bindIntoMap() {
    BindsIntoMap component = backend.create(BindsIntoMap.class);
    assertThat(component.strings()).containsExactly(""bar"", ""foo"");
  }"
7564,bindElementsIntoSetGenericWrongReturn,"  public void bindElementsIntoSetGenericWrongReturn() {
    try {
      backend.create(BindsElementsIntoSetGenericWrongReturn.class);"
7565,bindElementsIntoSetWrongReturn,"  public void bindElementsIntoSetWrongReturn() {
    try {
      backend.create(BindsElementsIntoSetWrongReturn.class);"
7566,bindElementsIntoSet,"  public void bindElementsIntoSet() {
    BindsElementsIntoSet component = backend.create(BindsElementsIntoSet.class);
    assertThat(component.strings()).containsExactly(""foo"");
  }"
7567,bindIntoSet,"  public void bindIntoSet() {
    BindsIntoSet component = backend.create(BindsIntoSet.class);
    assertThat(component.strings()).containsExactly(""foo"");
  }"
7568,bindsProviderNull,"  public void bindsProviderNull() {
    BindsProviderNull component = backend.create(BindsProviderNull.class);
    assertThat(component.string()).isNull();
  }"
7569,bindsProviderNullabilityMismatch,"  public void bindsProviderNullabilityMismatch() {
    BindsProviderNullabilityMismatch component =
        backend.create(BindsProviderNullabilityMismatch.class);
    try {"
7570,bindsProvider,"  public void bindsProvider() {
    BindsProvider component = backend.create(BindsProvider.class);
    assertThat(component.number()).isEqualTo(42);
  }"
7571,staticProvider,"  public void staticProvider() {
    StaticProvider component = backend.create(StaticProvider.class);
    assertThat(component.string()).isEqualTo(""foo"");
  }"
7572,componentProviderQualified,"  public void componentProviderQualified() {
    ComponentProviderQualified component = backend.create(ComponentProviderQualified.class);
    assertThat(component.string()).isEqualTo(""foo"");
  }"
7573,componentProviderNull,"  public void componentProviderNull() {
    ComponentProviderNull component = backend.create(ComponentProviderNull.class);
    assertThat(component.string()).isNull();
  }"
7574,componentProvider,"  public void componentProvider() {
    ComponentProvider component = backend.create(ComponentProvider.class);
    assertThat(component.string()).isEqualTo(""foo"");
  }"
7575,parameters,"  public static Object[] parameters() {
    return Backend.values();
  }"
7577,string,"    static String string() {
      return ""one"";
    }"
7579,string,"    String string() {
      return ""one"";
    }"
7581,create,"    FactoryImplicitModules create(@BindsInstance Long value);
  }"
7582,string,"    static String string(Long value) {
      return Long.toString(value);
    }"
7584,create,"    FactoryExplicitModules create(Module1 module1);
  }"
7585,string,"    String string() {
      return value;
    }"
7588,string,"    String string() {
      return string;
    }"
7590,create,"    FactoryBindsInstanceNull create(@BindsInstance @Nullable String one);
  }"
7592,create,"    FactoryBindsInstance create(@BindsInstance String one);
  }"
7594,factory,"  public static <F> F factory(Class<F> factoryClass) {
    return ComponentFactoryInvocationHandler.forComponentFactory(factoryClass);
  }"
7595,builder,"  public static <B> B builder(Class<B> builderClass) {
    return ComponentBuilderInvocationHandler.forComponentBuilder(builderClass);
  }"
7596,create,"  public static <C> C create(Class<C> componentClass) {
    return ComponentInvocationHandler.forComponent(componentClass);
  }"
7597,get,"  Scope.Builder get() {
    Scope.Builder scopeBuilder =
        new Scope.Builder(parent, scopeAnnotations)
            .addJustInTimeLookupFactory(new ReflectiveJustInTimeLookupFactory())
            .addJustInTimeLookupFactory(new MembersInjectorJustInTimeFactory());

    for (Map.Entry<Key, Object> entry : boundInstances.entrySet()) {
      scopeBuilder.addInstance(entry.getKey(), entry.getValue());"
7600,putBoundInstance,"  void putBoundInstance(Key key, Object instance) {
    boundInstances.put(key, instance);
  }"
7602,buildSubcomponent,"  static ComponentScopeBuilder buildSubcomponent(Class<?> subcomponentClass, Scope parent) {
    Subcomponent subcomponent = requireAnnotation(subcomponentClass, Subcomponent.class);
    Set<Annotation> scopeAnnotation = findScopes(subcomponentClass.getDeclaredAnnotations());
    return create(subcomponent.modules(), new Class<?>[0], scopeAnnotation, parent);
  }"
7603,buildComponent,"  static ComponentScopeBuilder buildComponent(Class<?> componentClass) {
    Component component = requireAnnotation(componentClass, Component.class);
    Set<Annotation> scopeAnnotation = findScopes(componentClass.getDeclaredAnnotations());
    return create(component.modules(), component.dependencies(), scopeAnnotation, null);
  }"
7604,string,"    static @Foo String string() {
      return ""foo"";
    }"
7606,string,"    static @Nullable String string() {
      return null;
    }"
7610,invoke,"    public Object invoke(Object[] args) {
      return ComponentFactoryInvocationHandler.forSubcomponentFactory(cls, scope);
    }"
7611,invoke,"    public Object invoke(Object[] args) {
      return ComponentBuilderInvocationHandler.forSubcomponentBuilder(cls, scope);
    }"
7612,invoke,"    public Object invoke(Object[] args) {
      ComponentScopeBuilder scopeBuilder = ComponentScopeBuilder.buildSubcomponent(cls, scope);
      ComponentFactoryInvocationHandler.parseFactoryMethod(method, args, scopeBuilder);
      return create(cls, scopeBuilder.get());
    }"
7613,invoke,"    public @Nullable Object invoke(Object[] args) {
      Object instance = args[0];
      membersInjector.injectMembers(instance);
      return returnInstance ? instance : null;
    }"
7614,invoke,"    public @Nullable Object invoke(Object[] args) {
      return binding.get();
    }"
7618,create,"  static <C> C create(Class<C> cls, Scope.Builder scopeBuilder) {
    Key componentKey = Key.of(null, cls);
    LinkedLateInstanceBinding<C> componentBinding = new LinkedLateInstanceBinding<>();
    scopeBuilder.addBinding(componentKey, componentBinding);

    Scope scope = scopeBuilder.build();
    C instance = newProxy(cls, new ComponentInvocationHandler(scope));
    componentBinding.setValue(instance);
"
7619,forComponent,"  static <C> C forComponent(Class<C> cls) {
    Scope.Builder scopeBuilder = ComponentScopeBuilder.buildComponent(cls).get();
    return create(cls, scopeBuilder);
  }"
7620,parseFactoryMethod,"  static void parseFactoryMethod(Method method, Object[] args, ComponentScopeBuilder scopeBuilder) {
    Type[] parameterTypes = method.getGenericParameterTypes();
    Annotation[][] parameterAnnotations = method.getParameterAnnotations();
    for (int i = 0; i < parameterTypes.length; i++) {
      Type parameterType = parameterTypes[i];"
7642,build,"    BuilderBindsInstanceOnParameterNull build();
  }"
7643,string,"    Builder string(@BindsInstance @Nullable String string);
"
7645,build,"    BuilderBindsInstanceOnParameterAndMethod build();
  }"
7646,string,"    Builder string(@BindsInstance String string);
"
7648,build,"    BuilderBindsInstanceOnParameter build();
  }"
7659,charSequence,"    abstract CharSequence charSequence(@Nullable String foo);
  }"
7671,setStrings,"    abstract String setStrings(Deque<String> foo);
  }"
7672,strings,"    static Deque<String> strings() {
      ArrayDeque<String> strings = new ArrayDeque<>();
      strings.add(""foo"");
      return strings;
    }"
7674,setStrings,"    abstract Set<? extends String> setStrings(Deque<String> foo);
  }"
7677,setStrings,"    abstract Set<String> setStrings(Deque<String> foo);
  }"
7680,asScoped,"    public final Binding asScoped() {
      return new LinkedScopedBinding<>(this);
    }"
7681,link,"    public final LinkedBinding<?> link(Linker linker, Scope scope) {
      return this;
    }"
7682,asScoped,"    public final Binding asScoped() {
      return new UnlinkedScopedBinding(this);
    }"
7685,link,"  LinkedBinding<?> link(Linker linker, Scope scope);
"
7686,factory,"  abstract <F> F factory(Class<F> factoryClass);
}"
7687,builder,"  abstract <B> B builder(Class<B> builderClass);
"
7688,create,"  abstract <C> C create(Class<C> componentClass);
"
7689,factory,"    <F> F factory(Class<F> factoryClass) {
      return DaggerCodegen.factory(factoryClass);
    }"
7690,builder,"    <B> B builder(Class<B> builderClass) {
      return DaggerCodegen.builder(builderClass);
    }"
7691,create,"    <C> C create(Class<C> componentClass) {
      return DaggerCodegen.create(componentClass);
    }"
7692,factory,"    <F> F factory(Class<F> factoryClass) {
      return DaggerReflect.factory(factoryClass);
    }"
7693,builder,"    <B> B builder(Class<B> builderClass) {
      return DaggerReflect.builder(builderClass);
    }"
7694,create,"    <C> C create(Class<C> componentClass) {
      return DaggerReflect.create(componentClass);
    }"
7695,tableKey,"  static MultibindingMapNoUnwrap.TableKey tableKey(int row, int col) {
    return new AutoAnnotation_Annotations_tableKey(row, col);
  }"
7697,moveTo,"    public static PathPoint moveTo(float x, float y) {
        return new PathPoint(MOVE, x, y);
    }"
7698,curveTo,"    public static PathPoint curveTo(float c0X, float c0Y, float c1X, float c1Y, float x, float y) {
        return new PathPoint(c0X,  c0Y, c1X, c1Y, x, y);
    }"
7699,lineTo,"    public static PathPoint lineTo(float x, float y) {
        return new PathPoint(LINE, x, y);
    }"
7700,evaluate,"    public PathPoint evaluate(float t, PathPoint startValue, PathPoint endValue) {
        float x, y;
        if (endValue.mOperation == PathPoint.CURVE) {
            float oneMinusT = 1 - t;
            x = oneMinusT * oneMinusT * oneMinusT * startValue.mX +"
7701,newInstance,"    public static MediaFragment newInstance () {
        return new MediaFragment();
    }"
7703,onAnimationEnd,"        public void onAnimationEnd(Animator animation) {
            super.onAnimationEnd(animation);

            mFab.setVisibility(View.INVISIBLE);
            mFabContainer.setBackgroundColor(getResources()
                .getColor(R.color.brand_accent));"
7705,onFabPressed,"    public void onFabPressed(View view) {
        final float startX = mFab.getX();

        AnimatorPath path = new AnimatorPath();
        path.moveTo(0, 0);
        path.curveTo(-200, 200, -400, 100, -600, 50);

        final ObjectAnimator anim = ObjectAnimator.ofObject(this, ""fabLoc"",
            new PathEvaluator(), path.getPoints().toArray());

        anim.setInterpolator(new AccelerateInterpolator());"
7706,onClick,"            @Override public void onClick(View v) {
                onFabPressed(v);
            }"
7708,onActivityCreated,"    @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mFabSize = getResources().getDimensionPixelSize(R.dimen.fab_size);
        bindViews();
    }"
7709,onCreateView,"    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        mRootView = inflater.inflate(R.layout.activity_media, container, false);
        return mRootView;
    }"
7711,curveTo,"    public void curveTo(float c0X, float c0Y, float c1X, float c1Y, float x, float y) {
        mPoints.add(PathPoint.curveTo(c0X, c0Y, c1X, c1Y, x, y));
    }"
7712,lineTo,"    public void lineTo(float x, float y) {
        mPoints.add(PathPoint.lineTo(x, y));
    }"
7713,moveTo,"    public void moveTo(float x, float y) {
        mPoints.add(PathPoint.moveTo(x, y));
    }"
7723,refreshTime,"        public void refreshTime(long curTimeMillis) {
            if (null == mItemInfo || mItemInfo.getCountdown() <= 0) return;

            mCvCountdownView.updateShow(mItemInfo.getEndTime() - curTimeMillis);"
7725,run,"            public void run() {
                if (mCountdownVHList.size() == 0) return;

                synchronized (mCountdownVHList) {"
7729,onCreateViewHolder,"        public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            return new MyViewHolder(LayoutInflater.from(mContext).inflate(R.layout.list_item, parent, false));
        }"
7730,cancelRefreshTime,"        public void cancelRefreshTime() {
            isCancel = true;
            if (null != mTimer) {
                mTimer.cancel();
            }"
7731,run,"                public void run() {
                    mHandler.post(mRefreshTimeRunnable);
                }"
7732,startRefreshTime,"        public void startRefreshTime() {
            if (!isCancel) return;

            if (null != mTimer) {
                mTimer.cancel();
            }
"
7733,onDestroy,"    public void onDestroy() {
        super.onDestroy();
        if (null != mMyAdapter) {
            mMyAdapter.cancelRefreshTime();"
7734,onPause,"    protected void onPause() {
        super.onPause();
        if (null != mMyAdapter) {
            mMyAdapter.cancelRefreshTime();"
7735,onResume,"    protected void onResume() {
        super.onResume();
        if (null != mMyAdapter) {
            mMyAdapter.startRefreshTime();"
7737,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_recyclerview);

        initData();

        FamiliarRecyclerView cvFamiliarRecyclerView = (FamiliarRecyclerView) findViewById(R.id.cv_familiarRecyclerView);"
7748,refreshTime,"        public void refreshTime(long leftTime) {
            if (leftTime > 0) {
                mCvCountdownView.start(leftTime);"
7749,bindData,"        public void bindData(ItemInfo itemInfo) {
            mItemInfo = itemInfo;
            mTvTitle.setText(itemInfo.getTitle());
            refreshTime(mItemInfo.getEndTime() - System.currentTimeMillis());
        }"
7753,onBindViewHolder,"        public void onBindViewHolder(MyViewHolder holder, int position) {
            ItemInfo curItemInfo = mDatas.get(position);
            holder.bindData(curItemInfo);
        }"
7757,onEnd,"    public void onEnd(CountdownView cv) {
        Object tag = cv.getTag();
        if (null != tag) {
            Log.i(""wg"", ""tag = "" + tag.toString());"
7758,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, RecyclerViewActivity.class));
            }"
7759,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, ListViewActivity.class));
            }"
7760,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, DynamicShowActivity.class));
            }"
7761,onProgressUpdate,"            protected void onProgressUpdate(Long... values) {
                super.onProgressUpdate(values);
                mCvCountdownViewTest5.updateShow(values[0]);
            }"
7762,doInBackground,"            protected Void doInBackground(Void... params) {
                long time = 0;
                while (true) {
                    try {"
7773,refreshTime,"            public void refreshTime(long curTimeMillis) {
                if (null == mItemInfo || mItemInfo.getCountdown() <= 0) return;

                mCvCountdownView.updateShow(mItemInfo.getEndTime() - curTimeMillis);"
7775,initView,"            public void initView(View convertView) {
                mTvTitle = (TextView) convertView.findViewById(R.id.tv_title);
                mCvCountdownView = (CountdownView) convertView.findViewById(R.id.cv_countdownView);
            }"
7788,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_listview);

        initData();

        ListView lvList = (ListView) findViewById(R.id.lv_list);"
7799,refreshTime,"            public void refreshTime(long leftTime) {
                if (leftTime > 0) {
                    mCvCountdownView.start(leftTime);"
7800,bindData,"            public void bindData(ItemInfo itemInfo) {
                mItemInfo = itemInfo;
                mTvTitle.setText(itemInfo.getTitle());
                refreshTime(mItemInfo.getEndTime() - System.currentTimeMillis());
            }"
7811,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowMillisecond = isChecked;
                if (isChecked && !DynamicShowActivity.this.isShowSecond) {
                    cbSecond.setChecked(true);"
7812,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowSecond = isChecked;
                if (!isChecked && DynamicShowActivity.this.isShowMillisecond) {
                    cbMillisecond.setChecked(false);"
7813,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowMinute = isChecked;
            }"
7814,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowHour = isChecked;
            }"
7815,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowDay = isChecked;
            }"
7818,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setSuffixDay(etSuffixDay.getText().toString())
                                    .setSuffixHour(etSuffixHour.getText().toString())
                                    .setSuffixMinute(etSuffixMinute.getText().toString())"
7822,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setShowTimeBgBorder(true).setBorderRadius(++bgBorderRadius));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
7824,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setShowTimeBgBorder(true).setBorderSize(++bgBorderSize));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
7827,onClick,"            public void onClick(View v) {
                if (bgRadius == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setRadius(--bgRadius));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
7828,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setRadius(++bgRadius));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
7829,onColorPicked,"                    public void onColorPicked(int pickedColor) {
                        DynamicConfig dynamicConfig = new DynamicConfig.Builder().setBackgroundInfo(new DynamicConfig.BackgroundInfo().setColor(pickedColor)).build();
                        mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);
                    }"
7831,onClick,"            public void onClick(View v) {
                if (timeBgSize == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setSize(--timeBgSize));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
7832,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setSize(++timeBgSize));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
7833,onClick,"            public void onClick(View v) {
                if (!isShowDay && !isShowHour && !isShowMinute && !isShowSecond && !isShowMillisecond) {
                    Toast.makeText(DynamicShowActivity.this, ""Select at least one item"", Toast.LENGTH_LONG).show();
                    return;
                }
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();"
7834,onClick,"            public void onClick(View v) {
                DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixGravity(DynamicConfig.SuffixGravity.BOTTOM).build();
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
7835,onClick,"            public void onClick(View v) {
                DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixGravity(DynamicConfig.SuffixGravity.CENTER).build();
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
7836,onClick,"            public void onClick(View v) {
                DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixGravity(DynamicConfig.SuffixGravity.TOP).build();
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
7837,onColorPicked,"                    public void onColorPicked(int pickedColor) {
                        DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixTextColor(pickedColor).build();
                        if (hasBackgroundCountdownView) {
                            mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
7839,onClick,"            public void onClick(View v) {
                if (timeTextSize == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setSuffixTextSize(--suffixTextSize);
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());"
7840,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setSuffixTextSize(++suffixTextSize);
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());"
7841,onColorPicked,"                    public void onColorPicked(int pickedColor) {
                        DynamicConfig dynamicConfig = new DynamicConfig.Builder().setTimeTextColor(pickedColor).build();
                        if (hasBackgroundCountdownView) {
                            mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
7843,onClick,"            public void onClick(View v) {
                if (timeTextSize == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setTimeTextSize(--timeTextSize);
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());"
7844,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setTimeTextSize(++timeTextSize);
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());"
7845,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                if (hasBackgroundCountdownView) {
                    DynamicConfig.BackgroundInfo backgroundInfo = new DynamicConfig.BackgroundInfo();
                    backgroundInfo.setColor(0xFF444444)"
7846,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                if (hasBackgroundCountdownView) {
                    DynamicConfig.BackgroundInfo backgroundInfo = new DynamicConfig.BackgroundInfo();
                    backgroundInfo.setColor(0xFFFF5000)"
7847,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                if (hasBackgroundCountdownView) {
                    DynamicConfig.BackgroundInfo backgroundInfo = new DynamicConfig.BackgroundInfo();
                    backgroundInfo.setColor(0xFFFF54BC)"
7849,onAllAnimatorEnd,"    public void onAllAnimatorEnd() {
        mView.onAnimEnd();
    }"
7850,onMoveEnd,"    public void onMoveEnd() {
        mEndNum++;
        if (mEndNum == mPellets.size()) {
            for (Letter l : mLetters) {"
7851,onAnimatorEnd,"    public void onAnimatorEnd() {
        mEndNum++;
        if (mEndNum == mPellets.size()) {
            if (isEnding) {"
7852,endAnim,"    public void endAnim() {
        isEnding = true;
    }"
7853,drawTheWorld,"    public void drawTheWorld(Canvas canvas) {
        for (Pellet p : mPellets) {
            p.drawSelf(canvas);
        }"
7854,addLetter,"    public void addLetter(Letter letter) {
        if (letter != null) {
            mLetters.add(letter);"
7855,addPellet,"    public void addPellet(Pellet pellet) {
        if (pellet != null) {
            mPellets.add(pellet);"
7856,showText,"    public void showText() {
        isEnding = true;
        mEndNum = 0;
        for (Pellet p : mPellets) {
            p.endAnim();"
7857,startPelletsAnim,"    public void startPelletsAnim() {
        isEnding = false;
        mEndNum = 0;
        for (Pellet p : mPellets) {
            p.startAnim();"
7861,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if(!isInit){
            init();
            isInit = true;"
7862,onAnimEnd,"    public void onAnimEnd() {
        if (mOnCoolAnimViewListener != null) {
            mOnCoolAnimViewListener.onAnimEnd();"
7863,stopAnim,"    public void stopAnim() {
        if (mPelletMng != null) {
            mPelletMng.endAnim();"
7864,onAnimationRepeat,"            public void onAnimationRepeat(Animator animation) {
                invalidate();
            }"
7865,init,"    public void init() {
        mWidth = getMeasuredWidth();
        mHeight = getMeasuredHeight();

        mCenterX = (int) (getTranslationX() + mWidth/2);
        mCenterY = (int) (getTranslationY() + mHeight/2);

        mPelletMng = new PelletManager(this, mCenterX, mCenterY);

        mAnimator = ValueAnimator.ofInt(0, 1).setDuration(16);
        mAnimator.setRepeatCount(ValueAnimator.INFINITE);"
7866,measureDimension,"    public int measureDimension(int defaultSize, int measureSpec) {
        int result;

        int specMode = MeasureSpec.getMode(measureSpec);
        int specSize = MeasureSpec.getSize(measureSpec);

        if (specMode == MeasureSpec.EXACTLY) {"
7867,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        int width = measureDimension(WIDTH_DEFAULT, widthMeasureSpec);
        int height = measureDimension(HEIGHT_DEFAULT, heightMeasureSpec);
        setMeasuredDimension(width, height);
    }"
7869,remove,"	public void remove(int id) {
		this.datas.remove(id);
		this.fireTableRowsDeleted(id, id);
	}"
7870,run,"							public void run() {
								if (ret.equals(""1"")) {
									datas.get(rowIndex).setElementAt(newdata, col);"
7872,run,"									public void run() {
										if (ret.equals(""1"")) {
											datas.get(rowIndex).setElementAt(newdata, col);"
7875,addRow,"	public void addRow(Vector<String> vector) {
		this.datas.add(vector);
		this.fireTableRowsInserted(vector.size()-1, vector.size()-1);
	}"
7886,remove,"	public void remove(String id) {
		try {
			int row = this.getId(id);"
7887,update,"	public void update(String id, Vector<String> vector) {
		this.datas.set(this.getId(id), vector);
		this.fireTableDataChanged();
	}"
7888,addRow,"	public void addRow(Vector<String> vector) {
		this.datas.add(vector);
		this.fireTableRowsInserted(datas.size()-1,datas.size()-1);
	}"
7900,isCellEditable,"	public boolean isCellEditable(int row, int column) {
		if(column == 0)
		{"
7902,onClick,"    public void onClick(View v) {
        if (v == mStartBtn) {
            mProgressView.startAnim();"
7905,onStopTrackingTouch,"            public void onStopTrackingTouch(SeekBar seekBar) {
                float factor = seekBar.getProgress() / 100f;
                mProgressView.setRadius(factor);
            }"
7907,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
"
7913,stopAnim,"    public void stopAnim() {

        mStartAnim = false;"
7914,reset,"    public void reset() {

        stopAnim();

        mPlayTime = 0;"
7915,startAnim,"    public void startAnim() {

        mPlayTime = mPlayTime % mDuration;

        mStartTime = AnimationUtils.currentAnimationTimeMillis() - mPlayTime;
"
7918,calPoints,"    private void calPoints(float factor) {

        int radius = (int) (mViewSize / 3 * factor);

        mPointRadius = radius / 12;"
7919,onDraw,"    protected void onDraw(Canvas canvas) {

        canvas.save();

        canvas.translate(mCenter.x, mCenter.y);



        float factor = getFactor();
"
7920,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {

        int defaultSize = getResources().getDimensionPixelSize(R.dimen.default_circle_view_size);

        int width = getDefaultSize(defaultSize, widthMeasureSpec);

        int height = getDefaultSize(defaultSize, heightMeasureSpec);

        mViewSize = Math.min(width, height);"
7921,init,"    private void init(AttributeSet attrs, int defStyle) {

        mArcPoint = new ArcPoint[POINT_NUM];



        mPaint = new Paint();

        mPaint.setAntiAlias(true);

        mPaint.setStyle(Paint.Style.FILL);
"
7923,yypushback,"  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);
"
7924,zzScanError,"  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {"
7925,yylength,"  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }"
7926,yycharat,"  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }"
7927,yytext,"  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }"
7928,yybegin,"  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }"
7929,yystate,"  public final int yystate() {
    return zzLexicalState;
  }"
7930,yyatEOF,"  public final boolean yyatEOF() {
    return zzAtEOF;
  }"
7931,yyResetPosition,"  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }"
7932,yyreset,"  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];"
7935,zzCMap,"  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }"
7936,zzCanGrow,"  private boolean zzCanGrow() {
    return true;
  }"
7937,zzMaxBufferLen,"  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }"
7938,yystart,"	final int yystart() {
		return zzStartRead;
	}"
7939,yybuffer,"	final char [] yybuffer() {
		return zzBuffer;
	}"
7940,yychar,"	public final int yychar()
	{
	    return Math.toIntExact(yychar);"
7942,zzUnpackAttribute,"  private static int [] zzUnpackAttribute() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }"
7944,zzUnpacktrans,"  private static int [] zzUnpacktrans() {
    int [] result = new int[4859];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }"
7946,zzUnpackRowMap,"  private static int [] zzUnpackRowMap() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }"
7948,zzUnpackAction,"  private static int [] zzUnpackAction() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }"
7950,zzUnpackcmap_blocks,"  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }"
7952,zzUnpackcmap_top,"  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }"
7954,onClick,"            public void onClick(View v) {
                captchaImageView.regenerate();
            }"
7956,onDouble,"    public void onDouble(Double aDouble) {
        Toast.makeText(this, ""Double: "" + aDouble, Toast.LENGTH_SHORT).show();
    }"
7957,onShort,"    public void onShort(Short aShort) {
        Toast.makeText(this, ""Short: "" + aShort, Toast.LENGTH_SHORT).show();
    }"
7958,onLong,"    public void onLong(Long aLong) {
        Toast.makeText(this, ""Long: "" + aLong, Toast.LENGTH_SHORT).show();
    }"
7959,onFloat,"    public void onFloat(Float aFloat) {
        Toast.makeText(this, ""Float: "" + aFloat, Toast.LENGTH_SHORT).show();
    }"
7960,onInteger,"    public void onInteger(Integer integer) {
        Toast.makeText(this, ""Integer: "" + integer, Toast.LENGTH_SHORT).show();
    }"
7961,onString,"    public void onString(String stringReceived) {
        Toast.makeText(this, ""String: "" + stringReceived, Toast.LENGTH_SHORT).show();
    }"
7962,onCustomObject,"    public void onCustomObject(CustomObject customObject) {
        Toast.makeText(this, ""Object: "" + customObject.getName(), Toast.LENGTH_SHORT).show();
    }"
7963,onClick,"            public void onClick(View v) {
                List<Object> messages = Arrays.<Object>asList(editTextToSend.getText().toString(), 1, 1L, 1.0f, 1.0, (short) 1);
                Object random = messages.get(rand.nextInt(messages.size()));
                EventBus.getDefault(v.getContext()).post(random);
            }"
7968,onDestroy,"    protected void onDestroy() {
        EventBus.getDefault(this).unregister(this);
        super.onDestroy();
    }"
7970,newArray,"        public CustomObject[] newArray(int size) {
            return new CustomObject[size];
        }"
7971,createFromParcel,"        public CustomObject createFromParcel(Parcel in) {
            return new CustomObject(in);
        }"
7972,toString,"    public String toString() {
        return ""CustomObject{"" +
                ""name='"" + name + '\'' +"
7973,writeToParcel,"    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(name);
    }"
7979,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        return super.onTouchEvent(event);
    }"
7980,onClick,"                public void onClick(View v) {
                    helper4.dismissBubblePopupWindow();
                }"
7981,onClick,"                public void onClick(View v) {
                    helper3.dismissBubblePopupWindow();
                }"
7982,onClick,"                public void onClick(View v) {
                    helper2.dismissBubblePopupWindow();
                }"
7983,onClick,"                public void onClick(View v) {
                    helper1.dismissBubblePopupWindow();
                }"
7984,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        if(hasFocus && !inited){
            inited = true;"
7985,onClick,"            public void onClick(View v) {
                helper4.show();
                Toast.makeText(MainActivity3.this,""button 4"",Toast.LENGTH_SHORT).show();
            }"
7986,onClick,"            public void onClick(View v) {
                helper3.show();
            }"
7987,onClick,"            public void onClick(View v) {
                helper2.show();
            }"
7988,onClick,"            public void onClick(View v) {
                helper1.show();
            }"
7992,onClick,"            public void onClick(View v) {
                Toast.makeText(MainActivity2.this,""cancel"",Toast.LENGTH_SHORT).show();
            }"
8001,onClick,"            public void onClick(View v) {
                helper4.show();
            }"
8006,onScrolled,"            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                super.onScrolled(recyclerView, dx, dy);
                mScrollerY += dy;
                if (Math.abs(mScrollerY) > 1000) {
                    mBlurredView.setBlurredTop(100);
                    mAlpha = 100;"
8007,onScrollStateChanged,"            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                super.onScrollStateChanged(recyclerView, newState);
            }"
8011,onBindViewHolder,"    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
"
8012,onCreateViewHolder,"    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        if (viewType == TYPE_HEADER) {
            return new HeaderHolder(LayoutInflater.from(context).inflate(R.layout.recyclerview_header, parent, false));
        }"
8013,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, WeatherActivity.class));
            }"
8014,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, BlurredViewBasicActivity.class));
            }"
8018,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                mBlurredView.setBlurredLevel(progress);
                mProgressTv.setText(String.valueOf(progress));
            }"
8023,dp2px,"    public int dp2px(float dpValue) {
        final float scale = getResources().getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);
    }"
8025,loadImage,"    public void loadImage(ImageView imageView, Object obj, Context context) {
        Glide.with(context).load(obj).into(imageView);
    }"
8032,onPageScrollStateChanged,"    public void onPageScrollStateChanged(int state) {
    }"
8033,onPageSelected,"    public void onPageSelected(int position) {
    }"
8035,range0Until1,"    private float range0Until1(float minValue, float maxValue) {
        return (animatedValue - minValue) / (maxValue - minValue);
    }"
8038,onAnimationUpdate,"                public void onAnimationUpdate(ValueAnimator animation) {
                    animatedTouchValue = (float) animation.getAnimatedValue();
                    if (animatedTouchValue == mRadius * 1.5f) {
                        isTouchAniming = false;"
8040,onAnimationRepeat,"                public void onAnimationRepeat(Animator animator) {
                }"
8041,onAnimationCancel,"                public void onAnimationCancel(Animator animator) {
                    isAniming = false;
                    curPos = nextPos;
                    if (mViewPage != null) {
                        mViewPage.setTouchable(true);"
8042,onAnimationEnd,"                public void onAnimationEnd(Animator animator) {
                    isAniming = false;
                    curPos = nextPos;
                    if (mViewPage != null) {
                        mViewPage.setTouchable(true);"
8043,onAnimationStart,"                public void onAnimationStart(Animator animator) {
                    isAniming = true;
                    if (mViewPage != null) {
                        mViewPage.setTouchable(false);"
8044,onAnimationUpdate,"                public void onAnimationUpdate(ValueAnimator animation) {
                    isAniming = true;
                    animatedValue = (float) animation.getAnimatedValue();
                    invalidate();
"
8045,startAnimator,"    public void startAnimator() {
        if (animatorStart != null) {
            if (animatorStart.isRunning()) {"
8047,initCountPos,"    private void initCountPos() {
        bezPos = new float[default_round_count];
        xPivotPos = new float[default_round_count];
        for (int i = 0; i < default_round_count; i++) {
            bezPos[i] = mWidth / (default_round_count + 1) * (i + 1);"
8050,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);

        mWidth = w;
        mHeight = h;
        initCountPos();"
8051,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        if (DEFAULT_WIDTH == 0) {
            WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
            DEFAULT_WIDTH = wm.getDefaultDisplay().getWidth();
        }
"
8059,delPoint,"    public boolean delPoint() {
        if (isReady()) {
            int size = mControlPoints.size();
            if (size <= 2) {"
8060,addPoint,"    public boolean addPoint() {
        if (isReady()) {
            int size = mControlPoints.size();
            if (size >= MAX_COUNT + 1) {"
8061,stop,"    public void stop() {
        if (isRunning()) {
            mHandler.removeMessages(HANDLER_WHAT);"
8062,start,"    public void start() {
        if (isReady()) {
            mBezierPoint = null;"
8063,isStop,"    private boolean isStop() {
        return (mState & STATE_STOP) == STATE_STOP;
    }"
8064,isTouchable,"    private boolean isTouchable() {
        return (mState & STATE_TOUCH) == STATE_TOUCH;
    }"
8065,isRunning,"    private boolean isRunning() {
        return (mState & STATE_RUNNING) == STATE_RUNNING;
    }"
8066,isReady,"    private boolean isReady() {
        return (mState & STATE_READY) == STATE_READY;
    }"
8068,onDraw,"    protected void onDraw(Canvas canvas) {
        if (isRunning() && !isTouchable()) {
            if (mBezierPoint == null) {
                mBezierPath.reset();"
8069,onLayout,"    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
        super.onLayout(changed, left, top, right, bottom);
        if (mWidth == 0 || mHeight == 0) {
            mWidth = getWidth();"
8070,isLegalFingerRegion,"    private boolean isLegalFingerRegion(float x, float y) {
        if (mCurPoint != null) {
            RectF rectF = new RectF(mCurPoint.x - (FINGER_RECT_SIZE >> 1),
                    mCurPoint.y - (FINGER_RECT_SIZE >> 1), mCurPoint"
8072,isLegalTouchRegion,"    private boolean isLegalTouchRegion(float x, float y) {
        if (x <= REGION_WIDTH || x >= mWidth - REGION_WIDTH || y <= REGION_WIDTH || y >= mHeight - REGION_WIDTH) {
            return false;
        }
        RectF rectF = new RectF();
        for (PointF point : mControlPoints) {"
8073,deCasteljauY,"    private float deCasteljauY(int i, int j, float t) {
        if (i == 1) {
            return (1 - t) * mControlPoints.get(j).y + t * mControlPoints.get(j + 1).y;
        }"
8074,deCasteljauX,"    private float deCasteljauX(int i, int j, float t) {
        if (i == 1) {
            return (1 - t) * mControlPoints.get(j).x + t * mControlPoints.get(j + 1).x;
        }"
8078,handleMessage,"        public void handleMessage(Message msg) {
            if (msg.what == HANDLER_WHAT) {
                mR += mRate;"
8079,testFromValueThrowException,"    public void testFromValueThrowException() {
        ValidationStyle.fromValue(4);
    }"
8080,testFromValueToTextInputLayout,"    public void testFromValueToTextInputLayout() {
        assertEquals(ValidationStyle.TEXT_INPUT_LAYOUT, ValidationStyle.fromValue(3));
    }"
8081,testFromValueToUnderlabel,"    public void testFromValueToUnderlabel() {
        assertEquals(ValidationStyle.UNDERLABEL, ValidationStyle.fromValue(2));
    }"
8082,testFromValueToColoration,"    public void testFromValueToColoration() {
        assertEquals(ValidationStyle.COLORATION, ValidationStyle.fromValue(1));
    }"
8083,testFromValueToBasic,"    public void testFromValueToBasic() {
        assertEquals(ValidationStyle.BASIC, ValidationStyle.fromValue(0));
    }"
8084,fromValue,"    public static ValidationStyle fromValue(int value) {
        switch (value) {
            case 0:"
8085,value,"    public int value() {
        return mValue;
    }"
8086,testResetCustomError,"    public void testResetCustomError() {
        mValidationHolderCustomTypeWithSomeSortOfView.resetCustomError();
        verify(mMockCustomErrorReset, times(1)).reset(mValidationHolderCustomTypeWithSomeSortOfView);
    }"
8090,testGetView,"    public void testGetView() {
        assertEquals(mMockView, mValidationHolderCustomTypeWithSomeSortOfView.getView());
    }"
8096,testGetConfirmationTextFromTextInputLayoutThrowsException,"    public void testGetConfirmationTextFromTextInputLayoutThrowsException() {
        when(mMockConfirmationTextInputLayout.getEditText()).thenReturn(null);
        mValidationHolderConfirmationTypeWithTextInputLayout.getConfirmationText();
    }"
8098,testGetConfirmationTextFromEditText,"    public void testGetConfirmationTextFromEditText() {
        String text = ""OK"";
        Editable mockEditable = mock(Editable.class);
        when(mMockConfirmationEditText.getText()).thenReturn(mockEditable);
        when(mockEditable.toString()).thenReturn(text);
        assertEquals(text, mValidationHolderConfirmationTypeWithEditText.getConfirmationText());
    }"
8100,testGetTextFromTextInputLayoutThrowsException,"    public void testGetTextFromTextInputLayoutThrowsException() {
        when(mMockTextInputLayout.getEditText()).thenReturn(null);
        mValidationHolderRegexTypeWithTextInputLayout.getText();
    }"
8104,testIsSomeSortOfViewTrue,"    public void testIsSomeSortOfViewTrue() {
        assertTrue(mValidationHolderCustomTypeWithSomeSortOfView.isSomeSortOfView());
    }"
8108,testIsEditTextViewTrue,"    public void testIsEditTextViewTrue() {
        assertTrue(mValidationHolderRegexTypeWithEditText.isEditTextView());
        assertTrue(mValidationHolderRangeTypeWithEditText.isEditTextView());
        assertTrue(mValidationHolderConfirmationTypeWithEditText.isEditTextView());
        assertTrue(mValidationHolderSimpleCustomTypeWithEditText.isEditTextView());
    }"
8110,testIsCustomTypeTrue,"    public void testIsCustomTypeTrue() {
        assertTrue(mValidationHolderCustomTypeWithSomeSortOfView.isCustomType());
    }"
8112,testIsSimpleCustomTypeTrue,"    public void testIsSimpleCustomTypeTrue() {
        assertTrue(mValidationHolderSimpleCustomTypeWithEditText.isSimpleCustomType());
        assertTrue(mValidationHolderSimpleCustomTypeWithTextInputLayout.isSimpleCustomType());
    }"
8114,testIsConfirmationTypeTrue,"    public void testIsConfirmationTypeTrue() {
        assertTrue(mValidationHolderConfirmationTypeWithEditText.isConfirmationType());
        assertTrue(mValidationHolderConfirmationTypeWithTextInputLayout.isConfirmationType());
    }"
8116,testIsRangeTypeTrue,"    public void testIsRangeTypeTrue() {
        assertTrue(mValidationHolderRangeTypeWithEditText.isRangeType());
        assertTrue(mValidationHolderRangeTypeWithTextInputLayout.isRangeType());
    }"
8118,testIsRegexTypeTrue,"    public void testIsRegexTypeTrue() {
        assertTrue(mValidationHolderRegexTypeWithEditText.isRegexType());
        assertTrue(mValidationHolderRegexTypeWithTextInputLayout.isRegexType());
    }"
8120,resetCustomError,"    public void resetCustomError() {
        mCustomErrorReset.reset(this);
    }"
8121,isVisible,"    public boolean isVisible() {
        return isEditTextView() && getEditText().getVisibility() == View.VISIBLE
                || isTextInputLayoutView() && getTextInputLayout().getVisibility() == View.VISIBLE"
8133,isSomeSortOfView,"    public boolean isSomeSortOfView() {
        return mView != null;
    }"
8134,isTextInputLayoutView,"    public boolean isTextInputLayoutView() {
        return mTextInputLayout != null;
    }"
8135,isEditTextView,"    public boolean isEditTextView() {
        return mEditText != null;
    }"
8136,isCustomType,"    public boolean isCustomType() {
        return mCustomValidation != null;
    }"
8137,isSimpleCustomType,"    public boolean isSimpleCustomType() {
        return mSimpleCustomValidation != null;
    }"
8138,isConfirmationType,"    public boolean isConfirmationType() {
        return mConfirmationEditText != null || mConfirmationTextInputLayout != null;
    }"
8139,isRangeType,"    public boolean isRangeType() {
        return mNumericRange != null;
    }"
8140,isRegexType,"    public boolean isRegexType() {
        return mPattern != null;
    }"
8141,testClear,"    public void testClear() throws Exception {
        mSpiedAwesomeValidationBasicStyle.clear();
        verify(mSpiedBasicValidator, times(1)).halt();
    }"
8142,testValidate,"    public void testValidate() {
        mSpiedAwesomeValidationBasicStyle.validate();
        verify(mSpiedBasicValidator, times(1)).trigger();
        assertEquals(mSpiedBasicValidator.trigger(), mSpiedAwesomeValidationBasicStyle.validate());
    }"
8143,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndConfirmationThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndConfirmationThrowsException() {
        mSpiedAwesomeValidationBasicStyle.addValidation(mock(TextInputLayout.class), mock(TextInputLayout.class), PowerMockito.mock(String.class));
    }"
8144,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRangeThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRangeThrowsException() {
        mSpiedAwesomeValidationUnderlabelStyle.addValidation(mock(TextInputLayout.class), PowerMockito.mock(Range.class), PowerMockito.mock(String.class));
    }"
8145,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndPatternThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndPatternThrowsException() {
        mSpiedAwesomeValidationColorationStyle.addValidation(mock(TextInputLayout.class), PowerMockito.mock(Pattern.class), PowerMockito.mock(String.class));
    }"
8146,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRegexThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRegexThrowsException() {
        mSpiedAwesomeValidationBasicStyle.addValidation(mock(TextInputLayout.class), PowerMockito.mock(String.class), PowerMockito.mock(String.class));
    }"
8147,testAddValidationForTextInputLayoutValidatorWithEditTextAndConfirmationThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndConfirmationThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), mock(EditText.class), PowerMockito.mock(String.class));
    }"
8148,testAddValidationForTextInputLayoutValidatorWithEditTextAndRangeThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndRangeThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), PowerMockito.mock(Range.class), PowerMockito.mock(String.class));
    }"
8149,testAddValidationForTextInputLayoutValidatorWithEditTextAndPatternThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndPatternThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), PowerMockito.mock(Pattern.class), PowerMockito.mock(String.class));
    }"
8150,testAddValidationForTextInputLayoutValidatorWithEditTextAndRegexThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndRegexThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), PowerMockito.mock(String.class), PowerMockito.mock(String.class));
    }"
8152,testSetTextInputLayoutErrorTextAppearanceForNonTextInputLayoutStyle,"    public void testSetTextInputLayoutErrorTextAppearanceForNonTextInputLayoutStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setTextInputLayoutErrorTextAppearance(mStyleResId);
    }"
8153,testSetTextInputLayoutErrorTextAppearanceForTextInputLayoutStyle,"    public void testSetTextInputLayoutErrorTextAppearanceForTextInputLayoutStyle() throws Exception {
        mSpiedAwesomeValidationTextInputLayoutStyle.setTextInputLayoutErrorTextAppearance(mStyleResId);
        verify(mSpiedTextInputLayoutValidator, times(1)).setErrorTextAppearance(mStyleResId);
    }"
8154,testSetUnderlabelColorByResourceForNonUnderlabelStyle,"    public void testSetUnderlabelColorByResourceForNonUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setUnderlabelColorByResource(mColorResId);
    }"
8156,testSetUnderlabelColorForNonUnderlabelStyle,"    public void testSetUnderlabelColorForNonUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setUnderlabelColor(mColor);
    }"
8157,testSetUnderlabelColorForUnderlabelStyle,"    public void testSetUnderlabelColorForUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationUnderlabelStyle.setUnderlabelColor(mColor);
        verify(mSpiedUnderlabelValidator, times(1)).setColor(mColor);
    }"
8158,testSetColorForNonColorationStyle,"    public void testSetColorForNonColorationStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setColor(mColor);
    }"
8159,testSetColorForColorationStyle,"    public void testSetColorForColorationStyle() throws Exception {
        mSpiedAwesomeValidationColorationStyle.setColor(mColor);
        verify(mSpiedColorationValidator, times(1)).setColor(mColor);
    }"
8160,testSetContextForNonUnderlabelStyle,"    public void testSetContextForNonUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setContext(mMockContext);
    }"
8161,testSetContextForUnderlabelStyle,"    public void testSetContextForUnderlabelStyle() throws Exception {
        PowerMockito.mockStatic(ContextCompat.class);
        PowerMockito.when(ContextCompat.getColor(eq(mMockContext), anyInt())).thenReturn(mColor);
        mSpiedAwesomeValidationUnderlabelStyle.setContext(mMockContext);
        verify(mSpiedUnderlabelValidator, times(1)).setContext(mMockContext);
    }"
8162,testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithUnderlabelStyle,"    public void testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithUnderlabelStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
8163,testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithColorationStyle,"    public void testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithColorationStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
8164,testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithBasicStyle,"    public void testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
8165,testCheckIsNotTextInputLayoutValidatorThrowsExceptionWithTextInputLayoutStyle,"    public void testCheckIsNotTextInputLayoutValidatorThrowsExceptionWithTextInputLayoutStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
8166,testCheckIsTextInputLayoutValidatorWithoutException,"    public void testCheckIsTextInputLayoutValidatorWithoutException() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsTextInputLayoutValidator"");
    }"
8167,testCheckIsTextInputLayoutValidatorThrowsExceptionWithUnderlabelStyle,"    public void testCheckIsTextInputLayoutValidatorThrowsExceptionWithUnderlabelStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsTextInputLayoutValidator"");
    }"
8168,testCheckIsTextInputLayoutValidatorThrowsExceptionWithColorationStyle,"    public void testCheckIsTextInputLayoutValidatorThrowsExceptionWithColorationStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsTextInputLayoutValidator"");
    }"
8169,testCheckIsTextInputLayoutValidatorThrowsExceptionWithBasicStyle,"    public void testCheckIsTextInputLayoutValidatorThrowsExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsTextInputLayoutValidator"");
    }"
8170,testCheckIsUnderlabelValidatorWithoutException,"    public void testCheckIsUnderlabelValidatorWithoutException() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsUnderlabelValidator"");
    }"
8171,testCheckIsUnderlabelValidatorThrowsExceptionWithTextInputLayoutStyle,"    public void testCheckIsUnderlabelValidatorThrowsExceptionWithTextInputLayoutStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsUnderlabelValidator"");
    }"
8172,testCheckIsUnderlabelValidatorThrowsExceptionWithColorationStyle,"    public void testCheckIsUnderlabelValidatorThrowsExceptionWithColorationStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsUnderlabelValidator"");
    }"
8173,testCheckIsUnderlabelValidatorThrowsExceptionWithBasicStyle,"    public void testCheckIsUnderlabelValidatorThrowsExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsUnderlabelValidator"");
    }"
8174,testCheckIsColorationValidatorWithoutException,"    public void testCheckIsColorationValidatorWithoutException() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsColorationValidator"");
    }"
8175,testCheckIsColorationValidatorThrowsExceptionWithTextInputLayoutStyle,"    public void testCheckIsColorationValidatorThrowsExceptionWithTextInputLayoutStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsColorationValidator"");
    }"
8176,testCheckIsColorationValidatorThrowsExceptionWithUnderlabelStyle,"    public void testCheckIsColorationValidatorThrowsExceptionWithUnderlabelStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsColorationValidator"");
    }"
8177,testCheckIsColorationValidatorThrowsExceptionWithBasicStyle,"    public void testCheckIsColorationValidatorThrowsExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsColorationValidator"");
    }"
8178,testAwesomeValidationConstructTextInputLayoutValidatorStyle,"    public void testAwesomeValidationConstructTextInputLayoutValidatorStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationTextInputLayoutStyle, ""mValidator"") instanceof TextInputLayoutValidator);
    }"
8179,testAwesomeValidationConstructUnderlabelValidatorStyle,"    public void testAwesomeValidationConstructUnderlabelValidatorStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationUnderlabelStyle, ""mValidator"") instanceof UnderlabelValidator);
    }"
8180,testAwesomeValidationConstructColorationStyle,"    public void testAwesomeValidationConstructColorationStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationColorationStyle, ""mValidator"") instanceof ColorationValidator);
    }"
8181,testAwesomeValidationConstructBasicStyle,"    public void testAwesomeValidationConstructBasicStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationBasicStyle, ""mValidator"") instanceof BasicValidator);
    }"
8185,compare,"        public boolean compare(ValidationHolder validationHolder) {
            return false;
        }"
8186,compare,"        public boolean compare(String input) {
            return false;
        }"
8187,clear,"    public void clear() {
        mValidator.halt();
    }"
8188,validate,"    public boolean validate() {
        return mValidator.trigger();
    }"
8189,addValidation,"    public void addValidation(Activity activity, int viewId, CustomValidation customValidation, CustomValidationCallback customValidationCallback, CustomErrorReset customErrorReset, int errMsgId) {
        mValidator.set(activity, viewId, customValidation, customValidationCallback, customErrorReset, errMsgId);
    }"
8190,addValidation,"    public void addValidation(View view, CustomValidation customValidation, CustomValidationCallback customValidationCallback, CustomErrorReset customErrorReset, String errMsg) {
        mValidator.set(view, customValidation, customValidationCallback, customErrorReset, errMsg);
    }"
8191,addValidation,"    public void addValidation(Activity activity, int viewId, SimpleCustomValidation simpleCustomValidation, int errMsgId) {
        mValidator.set(activity, viewId, simpleCustomValidation, errMsgId);
    }"
8192,addValidation,"    public void addValidation(TextInputLayout textInputLayout, SimpleCustomValidation simpleCustomValidation, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, simpleCustomValidation, errMsg);
    }"
8193,addValidation,"    public void addValidation(EditText editText, SimpleCustomValidation simpleCustomValidation, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, simpleCustomValidation, errMsg);
    }"
8194,addValidation,"    public void addValidation(Activity activity, int confirmationViewId, int viewId, int errMsgId) {
        mValidator.set(activity, confirmationViewId, viewId, errMsgId);
    }"
8195,addValidation,"    public void addValidation(TextInputLayout confirmationTextInputLayout, TextInputLayout textInputLayout, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(confirmationTextInputLayout, textInputLayout, errMsg);
    }"
8196,addValidation,"    public void addValidation(EditText confirmationEditText, EditText editText, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(confirmationEditText, editText, errMsg);
    }"
8197,addValidation,"    public void addValidation(Activity activity, int viewId, Range range, int errMsgId) {
        mValidator.set(activity, viewId, new NumericRange(range), errMsgId);
    }"
8198,addValidation,"    public void addValidation(TextInputLayout textInputLayout, Range range, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, new NumericRange(range), errMsg);
    }"
8199,addValidation,"    public void addValidation(EditText editText, Range range, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, new NumericRange(range), errMsg);
    }"
8200,addValidation,"    public void addValidation(Activity activity, int viewId, Pattern pattern, int errMsgId) {
        mValidator.set(activity, viewId, pattern, errMsgId);
    }"
8201,addValidation,"    public void addValidation(TextInputLayout textInputLayout, Pattern pattern, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, pattern, errMsg);
    }"
8202,addValidation,"    public void addValidation(EditText editText, Pattern pattern, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, pattern, errMsg);
    }"
8203,addValidation,"    public void addValidation(Activity activity, int viewId, String regex, int errMsgId) {
        mValidator.set(activity, viewId, regex, errMsgId);
    }"
8204,addValidation,"    public void addValidation(TextInputLayout textInputLayout, String regex, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, regex, errMsg);
    }"
8205,addValidation,"    public void addValidation(EditText editText, String regex, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, regex, errMsg);
    }"
8211,checkIsNotTextInputLayoutValidator,"    private void checkIsNotTextInputLayoutValidator() {
        if (mValidator instanceof TextInputLayoutValidator) {
            throw new UnsupportedOperationException(""Not supported by TextInputLayoutValidator."");"
8212,checkIsTextInputLayoutValidator,"    private void checkIsTextInputLayoutValidator() {
        if (!(mValidator instanceof TextInputLayoutValidator)) {
            throw new UnsupportedOperationException(""Only supported by TextInputLayoutValidator."");"
8213,checkIsUnderlabelValidator,"    private void checkIsUnderlabelValidator() {
        if (!(mValidator instanceof UnderlabelValidator)) {
            throw new UnsupportedOperationException(""Only supported by UnderlabelValidator."");"
8214,checkIsColorationValidator,"    private void checkIsColorationValidator() {
        if (!(mValidator instanceof ColorationValidator)) {
            throw new UnsupportedOperationException(""Only supported by ColorationValidator."");"
8215,disableAutoFocusOnFirstFailure,"    public static void disableAutoFocusOnFirstFailure() {
        autoFocusOnFirstFailure = false;
    }"
8216,isAutoFocusOnFirstFailureEnabled,"    public static boolean isAutoFocusOnFirstFailureEnabled() {
        return autoFocusOnFirstFailure;
    }"
8220,springCallback,"            public void springCallback(int offset) {
                int radius = 20 * (240 - offset > 0 ? 240 - offset : 0) / 240;
                realtimeBlurView.setBlurRadius(radius);
            }"
8222,onClick,"            public void onClick(View view) {
                Snackbar.make(view, ""Replace with your own action"", Snackbar.LENGTH_LONG)
                        .setAction(""Action"", null).show();"
8226,toString,"        public String toString() {
            return super.toString() + "" '"" + mContentView.getText() + ""'"";
        }"
8228,onBindViewHolder,"    public void onBindViewHolder(final ViewHolder holder, int position) {
        holder.mItem = mValues.get(position);
        holder.mIdView.setText(mValues.get(position).id);
        holder.mContentView.setText(mValues.get(position).content);
    }"
8229,onCreateViewHolder,"    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.fragment_item, parent, false);
        return new ViewHolder(view);"
8230,onSpringTabAppBarLayoutClick,"    public void onSpringTabAppBarLayoutClick(View view) {
        startActivity(new Intent(this, SpringAppBarLayoutWithTabActivity.class));
    }"
8231,onSpringAppBarLayoutClick,"    public void onSpringAppBarLayoutClick(View view) {
        startActivity(new Intent(this, SpringAppBarLayoutActivity.class));
    }"
8232,onNormalAppBarLayoutClick,"    public void onNormalAppBarLayoutClick(View view) {
        startActivity(new Intent(this, NormalAppBarLayoutActivity.class));
    }"
8235,newInstance,"    public static ItemFragment newInstance() {
        ItemFragment fragment = new ItemFragment();
        Bundle args = new Bundle();
        fragment.setArguments(args);
        return fragment;
    }"
8236,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {

        int id = item.getItemId();
        if (id == R.id.action_recyclerView) {
            if (mSweetSheet2.isShow()) {
                mSweetSheet2.dismiss();
            }"
8237,onBackPressed,"    public void onBackPressed() {

        if (mSweetSheet.isShow() || mSweetSheet2.isShow()) {"
8239,onItemClick,"            public boolean onItemClick(int position, MenuEntity menuEntity1) {

                Toast.makeText(MainActivity.this, menuEntity1.title + ""  "" + position, Toast.LENGTH_SHORT).show();
                return true;"
8243,onClick,"            public void onClick(View v) {
                mSweetSheet3.dismiss();
            }"
8244,setupCustomView,"    private void setupCustomView() {



        mSweetSheet3 = new SweetSheet(rl);
        CustomDelegate customDelegate = new CustomDelegate(true,
                CustomDelegate.AnimationType.DuangLayoutAnimation);
        View view = LayoutInflater.from(this).inflate(R.layout.layout_custom_view, null, false);"
8245,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_main);

        rl = (RelativeLayout) findViewById(R.id.rl);
        setupViewpager();
        setupRecyclerView();"
8248,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (savedInstanceState == null) {"
8249,onListItemClick,"    public void onListItemClick(ListView l, View v, int position, long id) {
        String item = (String) l.getAdapter().getItem(position);

        if (item.equals(HANDLER)) {
            getFragmentManager().beginTransaction()"
8250,onResume,"    public void onResume() {
        super.onResume();

        ActionBar actionBar = ((MainActivity) getActivity()).getSupportActionBar();

        actionBar.setDisplayHomeAsUpEnabled(false);"
8251,onViewCreated,"    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        List<String> items = new ArrayList<String>();
        items.add(HANDLER);
        items.add(WEB_VIEW);
        items.add(DISPLAY_ERROR);
        items.add(SKIP_IDS);
        setListAdapter(new ArrayAdapter<String>(getActivity(), android.R.layout.simple_list_item_1, items));"
8252,newInstance,"    public static ListFragment newInstance() {
        return new ListFragment();
    }"
8256,onClick,"                         public void onClick(View view)
                              {
                                 
                                   Toast.makeText(this,""Hey you Have done this!!"",Toast.LENGTH_LONG).show();
                                   
                                   Intent intent=new Intent(this,YourNewActivity.class);"
8257,Item1,"           public void Item1(View view)
             {
               Button button2=findViewById(R.id.button2);
               button2.setOnClickListener(new OnClickListener()"
8258,onClick,"                         public void onClick(View view)
                              {
                                 "
8259,Item1,"         public void Item1(View view)
             {
               Button button1 =findViewById(R.id.button1);
               button1.setOnClickListener(new OnClickListener()"
8260,onCreateOptionsMenu,"             public boolean onCreateOptionsMenu(Menu menu) {

        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;"
8261,onCreate,"       public void onCreate(Bundle bundle)
         {
            super.onCreate(bundle);
            setContentView(R.layout.ToolbarMaterial);
            
            mTopToolbar = (Toolbar) findViewById(R.id.my_toolbar);"
8266,onDraw,"    protected void onDraw(Canvas canvas) {
        final int height = getHeight();
        final int childCount = getChildCount();
        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null
                ? mCustomTabColorizer
                : mDefaultTabColorizer;
"
8267,onViewPagerPageChanged,"    void onViewPagerPageChanged(int position, float positionOffset) {
        mSelectedPosition = position;
        mSelectionOffset = positionOffset;
        invalidate();
    }"
8271,onPageSelected,"        public void onPageSelected(int position) {
            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {
                mTabStrip.onViewPagerPageChanged(position, 0f);
                scrollToTab(position, 0);
            }"
8272,onPageScrollStateChanged,"        public void onPageScrollStateChanged(int state) {
            mScrollState = state;

            if (mViewPagerPageChangeListener != null) {"
8274,scrollToTab,"    private void scrollToTab(int tabIndex, int positionOffset) {
        final int tabStripChildCount = mTabStrip.getChildCount();
        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {
            return;
        }
"
8275,onAttachedToWindow,"    protected void onAttachedToWindow() {
        super.onAttachedToWindow();

        if (mViewPager != null) {"
8287,newInstance,"    public static SampleFragment newInstance(int position) {
        SampleFragment f = new SampleFragment();
        Bundle b = new Bundle();
        b.putInt(ARG_POSITION, position);
        f.setArguments(b);
        return f;
    }"
8288,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        drawerToggle.onConfigurationChanged(newConfig);
    }"
8289,onPostCreate,"    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);
        drawerToggle.syncState();
    }"
8290,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {

        if (drawerToggle.onOptionsItemSelected(item)) {
            return true;
        }"
8291,onItemClick,"            public void onItemClick(AdapterView<?> parent, View view,
                                    int position, long id) {
                switch (position) {"
8297,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (!firstAnimationOver)
            drawFirstAnimation(canvas);
        if (cont > 0)
            drawSecondAnimation(canvas);"
8300,dpToPx,"    public int dpToPx(float dp, Resources resources) {
        float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, resources.getDisplayMetrics());
        return (int) px;
    }"
8308,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (x != -1) {
            Rect src = new Rect(0, 0, getWidth(), getHeight());
            Rect dst = new Rect(dpToPx(1, getResources()), dpToPx(2, getResources()), getWidth() - dpToPx(1, getResources()), getHeight() - dpToPx(2, getResources()));"
8315,makePressColor,"    protected int makePressColor() {
        int r = (this.backgroundColor >> 16) & 0xFF;
        int g = (this.backgroundColor >> 8) & 0xFF;
        int b = (this.backgroundColor >> 0) & 0xFF;
        r = (r - 30 < 0) ? 0 : r - 30;
        g = (g - 30 < 0) ? 0 : g - 30;
        b = (b - 30 < 0) ? 0 : b - 30;
        return Color.rgb(r, g, b);
    }"
8317,onFocusChanged,"    protected void onFocusChanged(boolean gainFocus, int direction,
                                  Rect previouslyFocusedRect) {
        if (!gainFocus) {"
8321,startDocument,"		public void startDocument() throws SAXException {			
			this.mFriends.clear();
			this.mOnlineFriends.clear();
			this.mUnreadMessages.clear();
			super.startDocument();
		}"
8322,startElement,"		public void startElement(String uri, String localName, String name,
				Attributes attributes) throws SAXException 
		{				
			if (localName == ""friend"")"
8324,onServiceDisconnected,"		public void onServiceDisconnected(ComponentName className) {          
			imService = null;
			Toast.makeText(UnApprovedFriendList.this, R.string.local_service_stopped,
					Toast.LENGTH_SHORT).show();"
8325,onServiceConnected,"		public void onServiceConnected(ComponentName className, IBinder service) {          
			imService = ((IMService.IMBinder)service).getService();      
"
8326,onResume,"	protected void onResume() 
	{
		super.onResume();
		bindService(new Intent(UnApprovedFriendList.this, IMService.class), mConnection , Context.BIND_AUTO_CREATE);"
8327,onPause,"	protected void onPause() 
	{
		unbindService(mConnection);
		super.onPause();"
8328,run,"					public void run() {
						if ( approvedFriendNames.length() > 0 || 
							 discardedFriendNames.length() > 0 "
8329,onMenuItemSelected,"	public boolean onMenuItemSelected(int featureId, MenuItem item) 
	{		

		switch(item.getItemId()) "
8330,onCreateOptionsMenu,"	public boolean onCreateOptionsMenu(Menu menu) {		
		boolean result = super.onCreateOptionsMenu(menu);		

		menu.add(0, APPROVE_SELECTED_FRIENDS_ID, 0, R.string.approve_selected_friends);				
		"
8331,onCreate,"	protected void onCreate(Bundle savedInstanceState) {
		
		super.onCreate(savedInstanceState);
		
		Bundle extras = getIntent().getExtras();
		
		String names = extras.getString(FriendInfo.FRIEND_LIST);
		
		friendUsernames = names.split("","");
		"
8333,onResume,"	protected void onResume() {
		bindService(new Intent(SignUp.this, IMService.class), mConnection , Context.BIND_AUTO_CREATE);
		   
		super.onResume();"
8335,onClick,"					public void onClick(DialogInterface dialog, int whichButton) {
						finish();
					}"
8340,onCreateDialog,"	protected Dialog onCreateDialog(int id) 
	{    	
		  	"
8341,onClick,"				public void onClick(View arg0) 
				{						
					finish();					"
8342,run,"												public void run() {
													if (result.equals(SERVER_RES_RES_SIGN_UP_SUCCESFULL)) {
														Toast.makeText(getApplicationContext(),R.string.signup_successfull, Toast.LENGTH_LONG).show();"
8343,run,"										public void run() {
											result = imService.signUpUser(usernameText.getText().toString(), 
													passwordText.getText().toString(), 
													eMailText.getText().toString());"
8344,onClick,"				public void onClick(View arg0) 
				{						
					if (usernameText.length() > 0 &&		"
8348,onDestroy,"	protected void onDestroy() {
	    super.onDestroy();
	    if (localstoragehandler != null) {
	    	localstoragehandler.close();
	    }"
8349,appendToMessageHistory,"	public  void appendToMessageHistory(String username, String message) {
		Log.e(""IM_MSG"",""Messaging:appendToMessageHistory: ""+message);
		if (username != null && message != null) {
			messageHistoryText.append(username + "":\n"");								"
8350,onReceive,"		public void onReceive(Context context, Intent intent) 
		{		
			Bundle extra = intent.getExtras();
			String username = extra.getString(MessageInfo.USERID);			
			String message = extra.getString(MessageInfo.MESSAGETEXT);
			"
8351,onResume,"	protected void onResume() 
	{		
		super.onResume();
		bindService(new Intent(Messaging.this, IMService.class), mConnection , Context.BIND_AUTO_CREATE);
				
		IntentFilter i = new IntentFilter();
		i.addAction(IMService.TAKE_MESSAGE);
		"
8352,onPause,"	protected void onPause() {
		super.onPause();
		unregisterReceiver(messageReceiver);
		unbindService(mConnection);
		
		FriendController.setActiveFriend(null);"
8354,onCreateDialog,"	protected Dialog onCreateDialog(int id) {
		int message = -1;
		switch (id)
		{
		case MESSAGE_CANNOT_BE_SENT:"
8355,cancelNotification,"	public static void cancelNotification(Context ctx, int notifyId) {
		String ns = Context.NOTIFICATION_SERVICE;
		NotificationManager nMgr = (NotificationManager) ctx.getSystemService(ns);
		nMgr.cancel(notifyId);
	}"
8356,onKey,"			public boolean onKey(View v, int keyCode, KeyEvent event) 
			{
				if (keyCode == 66){
					sendMessageButton.performClick();"
8357,run,"										public void run() {
											
									        Toast.makeText(getApplicationContext(),R.string.message_cannot_be_sent, Toast.LENGTH_LONG).show();"
8358,run,"						public void run() {
							try {
								if (imService.sendMessage(imService.getUsername(), friend.userName, message.toString()) == null)"
8359,onClick,"			public void onClick(View arg0) {
				message = messageText.getText();
				if (message.length()>0) 
				{		"
8361,onServiceDisconnected,"        public void onServiceDisconnected(ComponentName className) {
        	imService = null;
            Toast.makeText(Messaging.this, R.string.local_service_stopped,
                    Toast.LENGTH_SHORT).show();"
8362,onServiceConnected,"		public void onServiceConnected(ComponentName className, IBinder service) {          
            imService = ((IMService.IMBinder)service).getService();
        }"
8365,checkMessage,"	public static MessageInfo checkMessage(String username)
	{
		MessageInfo result = null;
		if (messagesInfo != null) 
		{"
8368,onCreateOptionsMenu,"	public boolean onCreateOptionsMenu(Menu menu) {		
		boolean result = super.onCreateOptionsMenu(menu);
		
		 menu.add(0, SIGN_UP_ID, 0, R.string.sign_up);
		 menu.add(0, EXIT_APP_ID, 0, R.string.exit_application);
"
8369,onResume,"	protected void onResume() 
	{		
		bindService(new Intent(Login.this, IMService.class), mConnection , Context.BIND_AUTO_CREATE);
	    		"
8372,onCreateDialog,"    protected Dialog onCreateDialog(int id) 
    {    	
    	int message = -1;    	
    	switch (id) 
    	{"
8373,onClick,"			public void onClick(View arg0) 
			{					
				imService.exit();
				finish();"
8375,run,"									public void run() {	
										Toast.makeText(getApplicationContext(),R.string.make_sure_username_and_password_correct, Toast.LENGTH_LONG).show();
"
8376,run,"						public void run() {
							String result = null;
							try {
								result = imService.authenticateUser(usernameText.getText().toString(), passwordText.getText().toString());
							} catch (UnsupportedEncodingException e) {"
8377,onClick,"			public void onClick(View arg0) 
			{					
				if (imService == null) {"
8381,get,"	public Cursor get(String sender, String receiver) {

					

			SQLiteDatabase db = getWritableDatabase();"
8382,insert,"	public void insert(String sender, String receiver, String message){

		long rowId = -1;
"
8384,onCreate,"	public void onCreate(SQLiteDatabase db) {

		db.execSQL(TABLE_MESSAGE_CREATE);"
8385,updateData,"	public void updateData(MessageInfo[] messages, FriendInfo[] friends, FriendInfo[] unApprovedFriends, String userKey);
"
8387,exit,"	public void exit();
	public int getListeningPort();"
8388,stopListening,"	public void stopListening();
	public void exit();"
8389,startListening,"	public int startListening(int port);
	public void stopListening();"
8390,sendHttpRequest,"	public String sendHttpRequest(String params);
	public int startListening(int port);"
8391,sendFriendsReqsResponse,"	public String sendFriendsReqsResponse(String approvedFriendNames,
			String discardedFriendNames);"
8392,addNewFriendRequest,"	public String addNewFriendRequest(String friendUsername);
	public String sendFriendsReqsResponse(String approvedFriendNames,"
8393,signUpUser,"	public String signUpUser(String usernameText, String passwordText, String email);
	public String addNewFriendRequest(String friendUsername);"
8394,exit,"	public void exit();
	public String signUpUser(String usernameText, String passwordText, String email);"
8395,getLastRawFriendList,"	public String getLastRawFriendList();
	public void exit();"
8396,isUserAuthenticated,"	public boolean isUserAuthenticated();
	public String getLastRawFriendList();"
8397,isNetworkConnected,"	public boolean isNetworkConnected();
	public boolean isUserAuthenticated();"
8399,authenticateUser,"	public String authenticateUser(String usernameText, String passwordText) throws UnsupportedEncodingException; 
	public void messageReceived(String username, String message);"
8400,sendMessage,"	public String sendMessage(String username,String tousername, String message) throws UnsupportedEncodingException;
	public String authenticateUser(String usernameText, String passwordText) throws UnsupportedEncodingException; "
8401,getUsername,"	public String getUsername();
	public String sendMessage(String username,String tousername, String message) throws UnsupportedEncodingException;"
8402,onActivityResult,"	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		
		super.onActivityResult(requestCode, resultCode, data);"
8404,onCreateOptionsMenu,"	public boolean onCreateOptionsMenu(Menu menu) {		
		boolean result = super.onCreateOptionsMenu(menu);		

		menu.add(0, ADD_NEW_FRIEND_ID, 0, R.string.add_new_friend);
		
		menu.add(0, EXIT_APP_ID, 0, R.string.exit_application);		"
8405,onResume,"	protected void onResume() 
	{
			
		super.onResume();
		bindService(new Intent(FriendList.this, IMService.class), mConnection , Context.BIND_AUTO_CREATE);

		IntentFilter i = new IntentFilter();"
8406,onPause,"	protected void onPause() 
	{
		unregisterReceiver(messageReceiver);		
		unbindService(mConnection);
		super.onPause();"
8407,onListItemClick,"	protected void onListItemClick(ListView l, View v, int position, long id) {

		super.onListItemClick(l, v, position, id);		

		Intent i = new Intent(this, Messaging.class);
		FriendInfo friend = friendAdapter.getItem(position);
		i.putExtra(FriendInfo.USERNAME, friend.userName);
		i.putExtra(FriendInfo.PORT, friend.port);
		i.putExtra(FriendInfo.IP, friend.ip);		"
8408,updateData,"	public void updateData(FriendInfo[] friends, FriendInfo[] unApprovedFriends)
	{
		if (friends != null) {
			friendAdapter.setFriendList(friends);	"
8409,onCreate,"	protected void onCreate(Bundle savedInstanceState) 
	{		
		super.onCreate(savedInstanceState);

        setContentView(R.layout.list_screen);"
8410,onServiceDisconnected,"		public void onServiceDisconnected(ComponentName className) {          
			imService = null;
			Toast.makeText(FriendList.this, R.string.local_service_stopped,
					Toast.LENGTH_SHORT).show();"
8412,onReceive,"		public void onReceive(Context context, Intent intent) {
			
			Log.i(""Broadcast receiver "", ""received a message"");
			Bundle extra = intent.getExtras();
			if (extra != null)"
8424,checkFriend,"	public static FriendInfo checkFriend(String username, String userKey)
	{
		FriendInfo result = null;
		if (friendsInfo != null) 
		{"
8429,onCreateDialog,"    protected Dialog onCreateDialog(int id) {
        AlertDialog.Builder builder = new AlertDialog.Builder(AddFriend.this);
        if (id == TYPE_FRIEND_USERNAME) {
            builder.setTitle(R.string.add_new_friend)
                   .setMessage(R.string.type_friend_username)"
8430,onServiceDisconnected,"        public void onServiceDisconnected(ComponentName className) {
            if (mImService != null) {
                mImService = null;
            }"
8431,onServiceConnected,"        public void onServiceConnected(ComponentName className, IBinder service) {
            mImService = ((IMService.IMBinder)service).getService();
        }"
8432,onClick,"    public void onClick(View view) {
        if (view == mCancelButton) {
            finish();"
8433,onPause,"    protected void onPause() {
        super.onPause();

        if (mConnection != null) {"
8434,onResume,"    protected void onResume() {
        super.onResume();

        Intent intent = new Intent(this, IMService.class);
        if (mConnection != null) {"
8435,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.add_new_friend);
        setTitle(getString(R.string.add_new_friend));

        mAddFriendButton = (Button)findViewById(R.id.addFriend);
        mCancelButton = (Button)findViewById(R.id.cancel);
        mFriendUserNameText = (EditText)findViewById(R.id.newFriendUsername);
"
8437,insertAfter,"        public void insertAfter(@NonNull ChainedRef candidate) {
            lock.lock();
            try {
                if (this.next != null) {"
8438,remove,"        public WeakRunnable remove() {
            lock.lock();
            try {
                if (prev != null) {
                    prev.next = next;"
8439,run,"        public void run() {
            final Runnable delegate = mDelegate.get();
            final ChainedRef reference = mReference.get();
            if (reference != null) {
                reference.remove();
            }"
8443,hasMessages,"    public final boolean hasMessages(int what, Object object) {
        return mExec.hasMessages(what, object);
    }"
8444,hasMessages,"    public final boolean hasMessages(int what) {
        return mExec.hasMessages(what);
    }"
8445,removeCallbacksAndMessages,"    public final void removeCallbacksAndMessages(Object token) {
        mExec.removeCallbacksAndMessages(token);
    }"
8446,removeMessages,"    public final void removeMessages(int what, Object object) {
        mExec.removeMessages(what, object);
    }"
8447,removeMessages,"    public final void removeMessages(int what) {
        mExec.removeMessages(what);
    }"
8448,sendMessageAtFrontOfQueue,"    public final boolean sendMessageAtFrontOfQueue(Message msg) {
        return mExec.sendMessageAtFrontOfQueue(msg);
    }"
8449,sendMessageAtTime,"    public boolean sendMessageAtTime(Message msg, long uptimeMillis) {
        return mExec.sendMessageAtTime(msg, uptimeMillis);
    }"
8450,sendMessageDelayed,"    public final boolean sendMessageDelayed(Message msg, long delayMillis) {
        return mExec.sendMessageDelayed(msg, delayMillis);
    }"
8451,sendEmptyMessageAtTime,"    public final boolean sendEmptyMessageAtTime(int what, long uptimeMillis) {
        return mExec.sendEmptyMessageAtTime(what, uptimeMillis);
    }"
8452,sendEmptyMessageDelayed,"    public final boolean sendEmptyMessageDelayed(int what, long delayMillis) {
        return mExec.sendEmptyMessageDelayed(what, delayMillis);
    }"
8453,sendEmptyMessage,"    public final boolean sendEmptyMessage(int what) {
        return mExec.sendEmptyMessage(what);
    }"
8454,sendMessage,"    public final boolean sendMessage(Message msg) {
        return mExec.sendMessage(msg);
    }"
8455,removeCallbacks,"    public final void removeCallbacks(Runnable r, Object token) {
        final WeakRunnable runnable = mRunnables.remove(r);
        if (runnable != null) {
            mExec.removeCallbacks(runnable, token);"
8456,removeCallbacks,"    public final void removeCallbacks(Runnable r) {
        final WeakRunnable runnable = mRunnables.remove(r);
        if (runnable != null) {
            mExec.removeCallbacks(runnable);"
8457,postAtFrontOfQueue,"    public final boolean postAtFrontOfQueue(Runnable r) {
        return mExec.postAtFrontOfQueue(wrapRunnable(r));
    }"
8458,postDelayed,"    public final boolean postDelayed(Runnable r, long delayMillis) {
        return mExec.postDelayed(wrapRunnable(r), delayMillis);
    }"
8459,postAtTime,"    public final boolean postAtTime(Runnable r, Object token, long uptimeMillis) {
        return mExec.postAtTime(wrapRunnable(r), token, uptimeMillis);
    }"
8460,postAtTime,"    public final boolean postAtTime(@NonNull Runnable r, long uptimeMillis) {
        return mExec.postAtTime(wrapRunnable(r), uptimeMillis);
    }"
8461,post,"    public final boolean post(@NonNull Runnable r) {
        return mExec.post(wrapRunnable(r));
    }"
8463,animateOut,"    abstract void animateOut(long duration, AnimatorListener animatorListener);
"
8468,writeToParcel,"		public void writeToParcel(Parcel dest, int flags) {
			super.writeToParcel(dest, flags);
			dest.writeString(message);
		}"
8469,onRestoreInstanceState,"	public void onRestoreInstanceState(Parcelable state) {
		if (!(state instanceof SavedState)) {
			super.onRestoreInstanceState(state);
			return;
		}
"
8470,onSaveInstanceState,"	public Parcelable onSaveInstanceState() {
		Parcelable superState = super.onSaveInstanceState();
		SavedState ss = new SavedState(superState);
		ss.message = mMessage.getText().toString();
		return ss;
	}"
8475,onFinishInflate,"	protected void onFinishInflate() {
		super.onFinishInflate();
		
		mMessage = (TextView) findViewById(R.id.message);
		mButton = (TextView) findViewById(R.id.button);"
8476,show,"        public void show(boolean shouldAnimate) {
            create().show(shouldAnimate);
        }"
8477,show,"        public void show() {
            show(true);
        }"
8491,safelyNotifyOnUndo,"    protected void safelyNotifyOnUndo() {
        if (mUndoListener != null) {
            mUndoListener.onUndo(mUndoToken);"
8492,safelyNotifyOnHide,"    protected void safelyNotifyOnHide() {
        if (mUndoListener != null) {
            mUndoListener.onHide();"
8493,onUndo,"    protected void onUndo() {
        hide(true);
        safelyNotifyOnUndo();
    }"
8494,onHide,"    protected void onHide() {
        hide(true);
        safelyNotifyOnHide();
        mUndoListener = null;
    }"
8495,onAnimationEnd,"            public void onAnimationEnd() {
                mView.setVisibility(View.GONE);
                mUndoMessage = null;
                mUndoToken = null;
            }"
8496,animateOut,"    protected void animateOut() {
        mViewCompat.animateOut(mAnimationDuration, new ViewCompat.AnimatorListener() {
            @Override"
8497,animateIn,"    protected void animateIn() {
        mViewCompat.animateIn(mAnimationDuration);
    }"
8498,isVisible,"    public boolean isVisible() {
        return mView.getVisibility() == View.VISIBLE;
    }"
8499,hide,"    public void hide(boolean shouldAnimate) {
        mHandler.removeCallbacks(mHideRunnable);

        if (shouldAnimate) {"
8501,removeMargins,"    private static void removeMargins(View view) {
        ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) view.getLayoutParams();
        layoutParams.leftMargin = layoutParams.topMargin = layoutParams.rightMargin = layoutParams.bottomMargin = 0;
        view.setLayoutParams(layoutParams);
    }"
8502,isAlignBottomPossible,"    private boolean isAlignBottomPossible() {
        return mContext.getResources().getBoolean(R.bool.is_align_bottom_possible);
    }"
8503,isLollipopStyle,"    private boolean isLollipopStyle(Style style) {
        return style == Style.LOLLIPOP || (style == Style.DEFAULT && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP);
    }"
8504,show,"    public void show(boolean shouldAnimate) {
        mView.setMessage(mUndoMessage);
        mView.setButtonLabel(mUseEnglishLocale ? R.string.undo_english : R.string.undo);
        if (isLollipopStyle(mStyle)) {
            mView.setUndoColor(mUndoColor);
            if (mAlignParentBottom && isAlignBottomPossible()) {
                removeMargins(mView);
            }
        }"
8516,onClick,"        public void onClick(View v) {
            onUndo();
        }"
8517,run,"        public void run() {
            onHide();
        }"
8521,onMeasure,"	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		int measuredWidth = MeasureSpec.getSize(widthMeasureSpec);
		if (mMaxWidth > 0 && mMaxWidth < measuredWidth) {
			int measureMode = MeasureSpec.getMode(widthMeasureSpec);
			widthMeasureSpec = MeasureSpec.makeMeasureSpec(mMaxWidth, measureMode);"
8522,init,"	private void init(AttributeSet attrs) {
		if (attrs != null) {
			TypedArray a = getContext().obtainStyledAttributes(attrs, new int[] { android.R.attr.maxWidth });"
8527,isDrawerMoving,"    public boolean isDrawerMoving() {
        return mDrawerMoving;
    }"
8528,isDrawerOpened,"    public boolean isDrawerOpened() {
        return mDrawerOpened;
    }"
8529,closeDrawer,"    public void closeDrawer() {
        closeDrawer(true);
    }"
8530,run,"                            public void run() {
                                mDrawerCallbacks.onDrawerClosed();
                            }"
8531,run,"            public void run() {
                final boolean scrolling = mScroller.computeScrollOffset();
                mDecorContent.offsetLeftAndRight(mScroller.getCurrX() - mDecorOffsetX);
                mDecorOffsetX = mScroller.getCurrX();
                postInvalidate();

                if (!scrolling) {"
8532,closeDrawer,"    public void closeDrawer(final boolean animate) {
        if(mDrawerMoving){
            mScrollerHandler.removeCallbacks(mDrawCloseRunnable);
            mScrollerHandler.removeCallbacks(mDrawOpenRunnable);
        } else if (!mDrawerOpened) {
            return;
        }
"
8533,openDrawer,"    public void openDrawer() {
        openDrawer(true);
    }"
8534,run,"                            public void run() {
                                mDrawerCallbacks.onDrawerOpened();
                            }"
8536,openDrawer,"    public void openDrawer(final boolean animate) {
        if(mDrawerMoving){
            mScrollerHandler.removeCallbacks(mDrawCloseRunnable);
            mScrollerHandler.removeCallbacks(mDrawOpenRunnable);
        }

        if (mDrawerOpened) {
            return;
        }
"
8537,toggleDrawer,"    public void toggleDrawer() {
        toggleDrawer(true);
    }"
8538,toggleDrawer,"    public void toggleDrawer(final boolean animate) {
        if (!mDrawerOpened) {
            openDrawer(animate);"
8539,isDrawerEnabled,"    public boolean isDrawerEnabled() {
        return mDrawerEnabled;
    }"
8547,dispatchDraw,"    protected void dispatchDraw(Canvas canvas) {
        super.dispatchDraw(canvas);

        if (mDrawerOpened || mDrawerMoving) {"
8550,onLayout,"    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
        Rect windowRect = new Rect();
        mDecorView.getWindowVisibleDisplayFrame(windowRect);

        if (mSlideTarget == SLIDE_TARGET_WINDOW) {
            mDrawerContent.layout(left, top + windowRect.top, right, bottom);
            mDecorContent.layout(mDecorContent.getLeft(), mDecorContent.getTop(),"
8551,onClick,"            public void onClick(View view) {
            }"
8558,onResume,"    protected void onResume() {
        super.onResume();

        Drawable drawable = mCpuAniImageView.getDrawable();
        if (drawable instanceof Animatable) {
            ((Animatable) drawable).start();
        }
"
8559,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        mStatusTextView = (TextView) findViewById(R.id.status_text_view);"
8561,onBindViewHolder,"        public void onBindViewHolder(ViewHolder holder, int position) {
            holder.mTextView.setText(sStringList[position]);
        }"
8562,onCreateViewHolder,"        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            LayoutInflater inflater = LayoutInflater.from(parent.getContext());
            View view = inflater.inflate(R.layout.list_item, null);
            return new ViewHolder(view);
        }"
8563,show,"    public static void show(Context context, int dayNightMode) {
        new BottomSheetDialogView(context, dayNightMode);
    }"
8567,show,"    public static void show(FragmentActivity activity) {
        new JayneHatDialogFragment().show(activity.getSupportFragmentManager(), TAG);
    }"
8570,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        super.onCreateOptionsMenu(menu);
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main, menu);

        if (isDarkTheme()) {
            menu.findItem(R.id.theme_change).setTitle(""Use Light Theme"");"
8571,onPositiveButtonClicked,"    public void onPositiveButtonClicked(int resultCode, Date date) {
        String text = """";
        if (resultCode == REQUEST_DATE_PICKER) {
            text = ""Date "";
        } else if (resultCode == REQUEST_TIME_PICKER) {
            text = ""Time "";"
8572,onNegativeButtonClicked,"    public void onNegativeButtonClicked(int resultCode, Date date) {
        String text = """";
        if (resultCode == REQUEST_DATE_PICKER) {
            text = ""Date "";
        } else if (resultCode == REQUEST_TIME_PICKER) {
            text = ""Time "";"
8573,onNeutralButtonClicked,"    public void onNeutralButtonClicked(int requestCode) {
        if (requestCode == REQUEST_SIMPLE_DIALOG) {
            Toast.makeText(c, ""Neutral button clicked"", Toast.LENGTH_SHORT).show();"
8574,onNegativeButtonClicked,"    public void onNegativeButtonClicked(int requestCode) {
        if (requestCode == REQUEST_SIMPLE_DIALOG) {
            Toast.makeText(c, ""Negative button clicked"", Toast.LENGTH_SHORT).show();"
8575,onPositiveButtonClicked,"    public void onPositiveButtonClicked(int requestCode) {
        if (requestCode == REQUEST_SIMPLE_DIALOG) {
            Toast.makeText(c, ""Positive button clicked"", Toast.LENGTH_SHORT).show();"
8576,onCancelled,"    public void onCancelled(int requestCode) {
        switch (requestCode) {
            case REQUEST_SIMPLE_DIALOG:"
8577,onListItemsSelected,"    public void onListItemsSelected(CharSequence[] values, int[] selectedPositions, int requestCode) {
        if (requestCode == REQUEST_LIST_MULTIPLE) {
            StringBuilder sb = new StringBuilder();"
8578,onListItemSelected,"    public void onListItemSelected(CharSequence value, int number, int requestCode) {
        if (requestCode == REQUEST_LIST_SIMPLE || requestCode == REQUEST_LIST_SINGLE) {
            Toast.makeText(c, ""Selected: "" + value, Toast.LENGTH_SHORT).show();"
8579,onClick,"            public void onClick(View v) {
                DatePickerDialogFragment
                        .createBuilder(DemoActivity.this, getSupportFragmentManager())"
8580,onClick,"            public void onClick(View v) {
                TimePickerDialogFragment
                        .createBuilder(DemoActivity.this, getSupportFragmentManager())"
8581,onClick,"            public void onClick(View v) {
                JayneHatDialogFragment.show(c);
            }"
8582,onClick,"            public void onClick(View v) {
                ListDialogFragment
                        .createBuilder(c, getSupportFragmentManager())"
8585,onClick,"            public void onClick(View v) {
                ProgressDialogFragment.createBuilder(c, getSupportFragmentManager())
                        .setMessage(""Mal: I\'m just waiting to see if I pass out. Long story."")"
8586,onClick,"            public void onClick(View v) {
                SimpleDialogFragment.createBuilder(c, getSupportFragmentManager()).setMessage(""How will you decide?"")
                        .setPositiveButtonText(""Time for some thrillin' heroics!"").setNegativeButtonText(""Misbehave"")"
8587,onClick,"                    public void onClick(View v) {
                        SimpleDialogFragment.createBuilder(c, getSupportFragmentManager())
                                .setTitle(""Do you like this quote?"")"
8588,onClick,"            public void onClick(View v) {
                SimpleDialogFragment.createBuilder(c, getSupportFragmentManager())
                        .setTitle(""More Firefly quotes:"").setMessage"
8589,onClick,"            public void onClick(View v) {
                SimpleDialogFragment.createBuilder(c, getSupportFragmentManager())
                        .setMessage(""Love. Can know all the math in the \'verse but take a boat in the air that you don\'t "" +"
8596,safeGet,"    private <T extends Injector> T safeGet(Object target, Injector nop) {
        try {
            Class<?> targetClass = target.getClass();"
8599,restoreInstanceState,"    public static <T extends View> Parcelable restoreInstanceState(@NonNull T target, @Nullable Parcelable state) {
        return IMPL.restoreInstanceState(target, state);
    }"
8600,saveInstanceState,"    public static <T extends View> Parcelable saveInstanceState(@NonNull T target, @Nullable Parcelable state) {
        return IMPL.saveInstanceState(target, state);
    }"
8601,restoreInstanceState,"    public static <T> void restoreInstanceState(@NonNull T target, @Nullable Bundle state) {
        IMPL.restoreInstanceState(target, state);
    }"
8602,saveInstanceState,"    public static <T> void saveInstanceState(@NonNull T target, @NonNull Bundle state) {
        IMPL.saveInstanceState(target, state);
    }"
8603,save,"        public abstract Parcelable save(T target, Parcelable state);
    }"
8604,restore,"        public abstract Parcelable restore(T target, Parcelable state);
"
8605,save,"            public Parcelable save(java.lang.Object target, Parcelable state) {
                return state;
            }"
8606,restore,"            public Parcelable restore(java.lang.Object target, Parcelable state) {
                return state;
            }"
8607,save,"        public abstract void save(T target, Bundle state);
    }"
8608,restore,"        public abstract void restore(T target, Bundle state);
"
8611,putParent,"    public Bundle putParent(@Nullable Parcelable superState) {
        Bundle state = new Bundle();
        if (superState != null) {
            state.putParcelable(mBaseKey + ""$$SUPER"", superState);
        }"
8613,putSparseParcelableArray,"    public void putSparseParcelableArray(Bundle state, String key, SparseArray<? extends Parcelable> x) {
        state.putSparseParcelableArray(key + mBaseKey, x);
    }"
8615,putParcelableArrayList,"    public void putParcelableArrayList(Bundle state, String key, ArrayList<? extends Parcelable> x) {
        state.putParcelableArrayList(key + mBaseKey, x);
    }"
8617,putCharSequenceArrayList,"    public void putCharSequenceArrayList(Bundle state, String key, ArrayList<CharSequence> x) {
        state.putCharSequenceArrayList(key + mBaseKey, x);
    }"
8619,putStringArrayList,"    public void putStringArrayList(Bundle state, String key, ArrayList<String> x) {
        state.putStringArrayList(key + mBaseKey, x);
    }"
8621,putIntegerArrayList,"    public void putIntegerArrayList(Bundle state, String key, ArrayList<Integer> x) {
        state.putIntegerArrayList(key + mBaseKey, x);
    }"
8623,putSerializable,"    public void putSerializable(Bundle state, String key, Serializable x) {
        state.putSerializable(key + mBaseKey, x);
    }"
8625,putParcelableArray,"    public void putParcelableArray(Bundle state, String key, Parcelable[] x) {
        state.putParcelableArray(key + mBaseKey, x);
    }"
8627,putParcelable,"    public void putParcelable(Bundle state, String key, Parcelable x) {
        state.putParcelable(key + mBaseKey, x);
    }"
8629,putBundle,"    public void putBundle(Bundle state, String key, Bundle x) {
        state.putBundle(key + mBaseKey, x);
    }"
8631,putCharSequenceArray,"    public void putCharSequenceArray(Bundle state, String key, CharSequence[] x) {
        state.putCharSequenceArray(key + mBaseKey, x);
    }"
8633,putCharSequence,"    public void putCharSequence(Bundle state, String key, CharSequence x) {
        state.putCharSequence(key + mBaseKey, x);
    }"
8635,putStringArray,"    public void putStringArray(Bundle state, String key, String[] x) {
        state.putStringArray(key + mBaseKey, x);
    }"
8637,putString,"    public void putString(Bundle state, String key, String x) {
        state.putString(key + mBaseKey, x);
    }"
8639,putCharArray,"    public void putCharArray(Bundle state, String key, char[] x) {
        state.putCharArray(key + mBaseKey, x);
    }"
8641,putBoxedChar,"    public void putBoxedChar(Bundle state, String key, Character x) {
        if (x != null) {
            state.putChar(key + mBaseKey, x);"
8643,putChar,"    public void putChar(Bundle state, String key, char x) {
        state.putChar(key + mBaseKey, x);
    }"
8645,putDoubleArray,"    public void putDoubleArray(Bundle state, String key, double[] x) {
        state.putDoubleArray(key + mBaseKey, x);
    }"
8647,putBoxedDouble,"    public void putBoxedDouble(Bundle state, String key, Double x) {
        if (x != null) {
            state.putDouble(key + mBaseKey, x);"
8649,putDouble,"    public void putDouble(Bundle state, String key, double x) {
        state.putDouble(key + mBaseKey, x);
    }"
8651,putFloatArray,"    public void putFloatArray(Bundle state, String key, float[] x) {
        state.putFloatArray(key + mBaseKey, x);
    }"
8653,putBoxedFloat,"    public void putBoxedFloat(Bundle state, String key, Float x) {
        if (x != null) {
            state.putFloat(key + mBaseKey, x);"
8655,putFloat,"    public void putFloat(Bundle state, String key, float x) {
        state.putFloat(key + mBaseKey, x);
    }"
8657,putLongArray,"    public void putLongArray(Bundle state, String key, long[] x) {
        state.putLongArray(key + mBaseKey, x);
    }"
8659,putBoxedLong,"    public void putBoxedLong(Bundle state, String key, Long x) {
        if (x != null) {
            state.putLong(key + mBaseKey, x);"
8661,putLong,"    public void putLong(Bundle state, String key, long x) {
        state.putLong(key + mBaseKey, x);
    }"
8663,putIntArray,"    public void putIntArray(Bundle state, String key, int[] x) {
        state.putIntArray(key + mBaseKey, x);
    }"
8665,putBoxedInt,"    public void putBoxedInt(Bundle state, String key, Integer x) {
        if (x != null) {
            state.putInt(key + mBaseKey, x);"
8667,putInt,"    public void putInt(Bundle state, String key, int x) {
        state.putInt(key + mBaseKey, x);
    }"
8669,putShortArray,"    public void putShortArray(Bundle state, String key, short[] x) {
        state.putShortArray(key + mBaseKey, x);
    }"
8671,putBoxedShort,"    public void putBoxedShort(Bundle state, String key, Short x) {
        if (x != null) {
            state.putShort(key + mBaseKey, x);"
8673,putShort,"    public void putShort(Bundle state, String key, short x) {
        state.putShort(key + mBaseKey, x);
    }"
8675,putByteArray,"    public void putByteArray(Bundle state, String key, byte[] x) {
        state.putByteArray(key + mBaseKey, x);
    }"
8677,putBoxedByte,"    public void putBoxedByte(Bundle state, String key, Byte x) {
        if (x != null) {
            state.putByte(key + mBaseKey, x);"
8679,putByte,"    public void putByte(Bundle state, String key, byte x) {
        state.putByte(key + mBaseKey, x);
    }"
8681,putBooleanArray,"    public void putBooleanArray(Bundle state, String key, boolean[] x) {
        state.putBooleanArray(key + mBaseKey, x);
    }"
8683,putBoxedBoolean,"    public void putBoxedBoolean(Bundle state, String key, Boolean x) {
        if (x != null) {
            state.putBoolean(key + mBaseKey, x);"
8685,putBoolean,"    public void putBoolean(Bundle state, String key, boolean x) {
        state.putBoolean(key + mBaseKey, x);
    }"
8687,putWithBundler,"    public <T> void putWithBundler(Bundle state, String key, T value) {
        if (value != null) {
            Bundler<T> b = (Bundler<T>) mBundlers.get(key);"
8689,get,"    T get(@NonNull String key, @NonNull Bundle bundle);
}"
8690,put,"    void put(@NonNull String key, @NonNull T value, @NonNull Bundle bundle);
"
8691,onActivityDestroyed,"    public void onActivityDestroyed(Activity activity) {
    }"
8692,onActivityStopped,"    public void onActivityStopped(Activity activity) {
    }"
8693,onActivityPaused,"    public void onActivityPaused(Activity activity) {
    }"
8694,onActivityResumed,"    public void onActivityResumed(Activity activity) {
    }"
8695,onActivityStarted,"    public void onActivityStarted(Activity activity) {
    }"
8696,onFragmentSaveInstanceState,"    public void onFragmentSaveInstanceState(FragmentManager fm, Fragment f, Bundle outState) {
        if (mEnabled) {
            StateSaver.saveInstanceState(f, outState);"
8697,onFragmentPreCreated,"    public void onFragmentPreCreated(FragmentManager fm, Fragment f, Bundle savedInstanceState) {
        if (mEnabled) {
            StateSaver.restoreInstanceState(f, savedInstanceState);"
8698,onActivitySaveInstanceState,"    public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
        if (mEnabled) {
            StateSaver.saveInstanceState(activity, outState);"
8699,onActivityCreated,"    public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
        if (mEnabled) {
            StateSaver.restoreInstanceState(activity, savedInstanceState);
        }"
8702,directionChange,"	private void directionChange(){
		switch(direction){
		case Left:"
8703,onLayout,"	protected void onLayout(boolean changed, int l, int t, int r, int b) {
		super.onLayout(changed, l, t, r, b);
		View parent = (View) getParent();
		int halfParentW = (int) (parent.getWidth()*0.5);
		int center = (int) (l + (this.getWidth()*0.5));
		if(center<=halfParentW){
			direction = Direction.Left;
		}"
8704,onEditorAction,"	public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
		setStatus(Status.Normal);
		return true;
	}"
8706,initEvents,"	protected void initEvents(){
		etPictureTagLabel.setOnEditorActionListener(this);
	}"
8707,init,"	protected void init(){
		imm = (InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);
		directionChange();
	}"
8708,initViews,"	protected void initViews(){
		LayoutInflater.from(context).inflate(R.layout.picturetagview, this,true);
		tvPictureTagLabel = (TextView) findViewById(R.id.tvPictureTagLabel);
		etPictureTagLabel = (EditText) findViewById(R.id.etPictureTagLabel);
		loTag = findViewById(R.id.loTag);
	}"
8713,init,"	private void init(){
		this.setOnTouchListener(this);
	}"
8714,onCreate,"	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		this.setContentView(R.layout.act_main);
	}"
8715,onClick,"        public void onClick(View view) {
            startActivity(new Intent(view.getContext(), MainActivity.class));
            finish();
        }"
8716,onSkipToPrevious,"        public void onSkipToPrevious() {
            super.onSkipToPrevious();
            movieView.startVideo();
            if (indexInPlaylist > 0) {
                indexInPlaylist--;"
8717,onSkipToNext,"        public void onSkipToNext() {
            super.onSkipToNext();
            movieView.startVideo();
            if (indexInPlaylist < PLAYLIST_SIZE) {
                indexInPlaylist++;"
8718,onPause,"        public void onPause() {
            super.onPause();
            movieView.pause();
        }"
8719,onPlay,"        public void onPlay() {
            super.onPlay();
            movieView.play();
        }"
8720,updatePlaybackState,"    private void updatePlaybackState(
            @PlaybackStateCompat.State int state, long playbackActions, int position, int mediaId) {
        PlaybackStateCompat.Builder builder =
                new PlaybackStateCompat.Builder()"
8721,updatePlaybackState,"    private void updatePlaybackState(
            @PlaybackStateCompat.State int state, int position, int mediaId) {
        long actions = mSession.getController().getPlaybackState().getActions();
        updatePlaybackState(state, actions, position, mediaId);"
8722,adjustFullScreen,"    private void adjustFullScreen(Configuration config) {
        final View decorView = getWindow().getDecorView();
        if (config.orientation == Configuration.ORIENTATION_LANDSCAPE) {
            decorView.setSystemUiVisibility("
8724,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(
            boolean isInPictureInPictureMode, Configuration configuration) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode, configuration);
        if (!isInPictureInPictureMode) {"
8725,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        if (hasFocus) {
            adjustFullScreen(getResources().getConfiguration());"
8726,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        adjustFullScreen(newConfig);
    }"
8730,onStart,"    protected void onStart() {
        super.onStart();
        initializeMediaSession();
    }"
8736,onClick,"        public void onClick(View view) {
            startActivity(new Intent(view.getContext(), MediaSessionPlaybackActivity.class));
            finish();
        }"
8740,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(
            boolean isInPictureInPictureMode, Configuration configuration) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode, configuration);
        if (isInPictureInPictureMode) {"
8751,reset,"    void reset() {
        mLock.lock();
        mWait = false;
        mNotify = false;
        mLock.unlock();
    }"
8752,doWait,"    void doWait() {
        mLock.lock();
        boolean unlock = false;
        try {
            if (mNotify) {"
8753,doNotify,"    void doNotify() {
        mLock.lock();
        try {
            mNotify = true;"
8756,run,"            public void run() {
                try {
                    v.clearFocus();"
8758,removeEmpty,"    private static void removeEmpty() {
        Reference<? extends ReusableVec> ref;
        while ((ref = mQueue.poll()) != null) {
            mCache.remove(ref);"
8760,get,"    public static ReusableVec get(int length) {
        try {
            sLock.lock();"
8762,toString,"    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (float f : mData) {
            sb.append(String.format(""%f,"", f));
        }
        if (sb.length() > 0) {"
8765,value,"    public float value(int index) {
        return mData[index];
    }"
8768,height,"    public float height() {
        return mData[1];
    }"
8769,width,"    public float width() {
        return mData[0];
    }"
8771,a,"    public void a(float a) {
        mData[3] = a;
        mUpdateTimes.addAndGet(1);
    }"
8772,b,"    public void b(float b) {
        mData[2] = b;
        mUpdateTimes.addAndGet(1);
    }"
8773,g,"    public void g(float g) {
        mData[1] = g;
        mUpdateTimes.addAndGet(1);
    }"
8774,r,"    public void r(float r) {
        mData[0] = r;
        mUpdateTimes.addAndGet(1);
    }"
8775,a,"    public float a() {
        return mData[3];
    }"
8776,b,"    public float b() {
        return mData[2];
    }"
8777,g,"    public float g() {
        return mData[1];
    }"
8778,r,"    public float r() {
        return mData[0];
    }"
8782,z,"    public void z(float z) {
        mData[2] = z;
        mUpdateTimes.addAndGet(1);
    }"
8783,y,"    public void y(float y) {
        mData[1] = y;
        mUpdateTimes.addAndGet(1);
    }"
8784,x,"    public void x(float x) {
        mData[0] = x;
        mUpdateTimes.addAndGet(1);
    }"
8785,z,"    public float z() {
        return mData[2];
    }"
8786,y,"    public float y() {
        return mData[1];
    }"
8787,x,"    public float x() {
        return mData[0];
    }"
8788,sub,"    public void sub(float x, float y, float z) {
        add(-x, -y, -z);
    }"
8790,add,"    public void add(float x, float y, float z) {
        mData[0] = x() + x;
        mData[1] = y() + y;
        mData[2] = z() + z;
        mUpdateTimes.addAndGet(1);
    }"
8796,equals,"    public boolean equals(Object obj) {
        if (obj == null || !(obj instanceof Texture)) {
            return false;
        }
        Texture t = (Texture) obj;
        if (mBmp == null) {"
8797,prepareTexCoord,"    void prepareTexCoord() {
        try {
            mBufferLock.lock();"
8798,drawModel,"    protected void drawModel() {
        if (mDrawGrid) {
            GLES20.glDrawElements(GLES20.GL_LINE_STRIP, mIndices.length, GLES20.GL_UNSIGNED_SHORT, mIndicesBuffer);"
8799,runOnDraw,"    void runOnDraw() {
        if (!mIsMulti) {
            super.runOnDraw();"
8811,drawGrid,"    void drawGrid(boolean drawGrid) {
        mDrawGrid = drawGrid;
    }"
8812,update,"    void update(int colCount, int rowCount, float width, float height) {
        mColLineCount = colCount;
        mRowLineCount = rowCount;
        mWidth = width;
        mHeight = height;
        init();
    }"
8816,lock,"    void lock() {
        while (!t.compareAndSet(null, this));
    }"
8817,runOnDrawSize,"    int runOnDrawSize() {
        return mRunOnDraw.size();
    }"
8818,clearRunOnDraw,"    void clearRunOnDraw() {
        mRunOnDraw.clear();
    }"
8819,runOnDraw,"    void runOnDraw() {
        Runnable r;
        while ((r = mRunOnDraw.poll()) != null) {
            r.run();"
8820,addRunOnDraw,"    void addRunOnDraw(Runnable runnable) {
        mRunOnDraw.offer(runnable);
    }"
8821,free,"    public void free() {
        mIsFree = true;
    }"
8822,use,"    void use() {
        mIsFree = false;
    }"
8823,isFree,"    boolean isFree() {
        return mIsFree;
    }"
8824,isGLThread,"    boolean isGLThread() {
        return Thread.currentThread().getId() == mGLThreadId;
    }"
8825,isDeleted,"    boolean isDeleted() {
        return mDeleted;
    }"
8826,delete,"    void delete() {
        if (isGLThread()) {
            GLES20.glDeleteProgram(handle);
            GLUtil.checkGlError(""glDeleteProgram"");"
8827,use,"    void use() {
        GLES20.glUseProgram(handle);
        GLUtil.checkGlError(""glUseProgram"");
    }"
8828,restore,"    public void restore() {
        super.restore();
        mPosition.refresh();
    }"
8829,runOnDraw,"    protected void runOnDraw() {
        super.runOnDraw();
        mPosition.runOnDraw();
    }"
8835,scaleM,"    static void scaleM(float[] matrixData, float x, float y, float z) {
        Matrix.scaleM(matrixData, 0, x, y, z);
    }"
8836,translateM,"    static void translateM(float[] matrixData, float x, float y, float z) {
        Matrix.translateM(matrixData, 0, x, y, z);
    }"
8837,rotateM,"    static void rotateM(float[] matrixData, float x, float y, float z, float a) {
        Matrix.rotateM(matrixData, 0, a, x, y, z);
    }"
8838,reset,"    static void reset(float[] matrixData) {
        Matrix.setIdentityM(matrixData, 0);
    }"
8839,updateMVPMatrix,"    private void updateMVPMatrix() {
        Matrix.multiplyMM(mMVPMatrix.value(), 0, mVMatrix, 0, mModelMatrix.value(), 0);
        Matrix.multiplyMM(mMVPMatrix.value(), 0, mPMatrix, 0, mMVPMatrix.value(), 0);
        mMVPMatrix.refresh();
    }"
8840,runOnDraw,"    protected void runOnDraw() {
        super.runOnDraw();
        mMVPMatrix.runOnDraw();
        mModelMatrix.runOnDraw();
        mCameraLocation.runOnDraw();
    }"
8841,frustumM,"    void frustumM(float width, float height, float near, float far) {
        Matrix.frustumM(mPMatrix, 0, -width / 2, width / 2, -height / 2, height / 2, near, far);
        updateMVPMatrix();
    }"
8847,activeAllGroup,"    private static void activeAllGroup() {
        try {
            sLock.lock();"
8851,needUpdate,"        boolean needUpdate();
        void run();"
8852,isStopped,"        boolean isStopped();
        boolean needUpdate();"
8853,run,"    private boolean run() {
        try {
            mLock.lock();"
8854,update,"    void update() {
        mLastUpdateTime = System.currentTimeMillis();
        mWaitNotify.doNotify();
    }"
8856,start,"    void start() {
        update();
        if (mIsRunning) {
            return;
        }
        mIsRunning = true;"
8857,addRunnable,"    void addRunnable(MagicUpdaterRunnable runnable) {
        try {
            mLock.lock();"
8858,doStartedAndStopped,"    static void doStartedAndStopped(MagicUpdater updater) {
        if (updater == null) {
            return;
        }
        if (updater.isFirstTimeCheckStarted()) {"
8859,prepareUpdater,"    static boolean prepareUpdater(MagicUpdater updater) {
        if (updater == null) {
            return true;
        }
        if (updater.isReadyToUpdate()) {"
8860,run,"                public void run() {
                    for (MagicUpdaterListener l : mListeners) {
                        if (l != null) {"
8861,doStarted,"    private void doStarted() {
        notifyChanged();
        didStart();
        if (mListeners.size() > 0) {
            mHandler.post(new Runnable() {"
8862,doWillStart,"    private void doWillStart() {
        mWaitNotify.reset();
        notifyChanged();
        willStart();
    }"
8864,doStopped,"    private void doStopped() {
        didStop();
        if (mListeners.size() > 0) {
            mHandler.post(new Runnable() {"
8865,run,"    private void run() {
        setState(STATE_RUNNING);
    }"
8866,waitUpdate,"    private void waitUpdate() {
        mWaitNotify.doWait();
    }"
8871,stop,"    public void stop() {
        setState(STATE_STOPPED);
    }"
8872,run,"            public void run() {
                mStateLock.lock();
                try {
                    mUpdaterGroup.addRunnable(mRunnable);
                    if (isStopped()) {"
8873,start,"    void start() {
        mIsFirstTimeCheckStarted = true;
        mIsFirstTimeCheckStopped = true;
        mStateLock.lock();
        try {
            if (mState != STATE_NONE && mState != STATE_STOPPED) {
                return;"
8876,isFirstTimeCheckStopped,"    private boolean isFirstTimeCheckStopped() {
        if (mIsFirstTimeCheckStopped) {
            mIsFirstTimeCheckStopped = false;
            return true;"
8877,isFirstTimeCheckStarted,"    private boolean isFirstTimeCheckStarted() {
        if (mIsFirstTimeCheckStarted) {
            mIsFirstTimeCheckStarted = false;
            return true;"
8878,isStopped,"    boolean isStopped() {
        return mState == STATE_STOPPED;
    }"
8879,isRunning,"    private boolean isRunning() {
        return mState == STATE_RUNNING;
    }"
8880,isReadyToUpdate,"    private boolean isReadyToUpdate() {
        return mState == STATE_READY;
    }"
8881,isStarting,"    private boolean isStarting() {
        return mState == STATE_STARTING;
    }"
8882,notifyChanged,"    protected void notifyChanged() {
        mNeedUpdate.set(true);
        mUpdaterGroup.update();
    }"
8883,removeListener,"    public void removeListener(MagicUpdaterListener listener) {
        if (mListeners.contains(listener)) {
            mListeners.remove(listener);"
8884,addListener,"    public void addListener(MagicUpdaterListener listener) {
        if (!mListeners.contains(listener)) {
            mListeners.add(listener);"
8886,run,"        public void run() {
            if (isRunning()) {
                mNeedUpdate.set(false);"
8887,needUpdate,"        public boolean needUpdate() {
            return mNeedUpdate.get();
        }"
8888,isStopped,"        public boolean isStopped() {
            return MagicUpdater.this.isStopped();
        }"
8889,unlock,"    public static void unlock() {
        sLock.unlock();
    }"
8890,lock,"    public static void lock() {
        sLock.lock();
    }"
8891,run,"                public void run() {
                    if (!mHasNewScene) {
                        MagicSurfaceView.super.setVisibility(visibility);"
8893,onPause,"    public void onPause() {
        super.onPause();
        mHasNewScene = false;
    }"
8894,onDestroy,"    public void onDestroy() {
        onPause();
        release();
        mRenderer = null;
    }"
8895,release,"    public void release() {
        mRenderer.release();
    }"
8898,surfaceDestroyed,"            public void surfaceDestroyed(SurfaceHolder holder) {
                mRenderer.onDestroy();
                mHasNewScene = false;
            }"
8899,surfaceChanged,"            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
            }"
8901,surfaceCreated,"            public void surfaceCreated(SurfaceHolder holder) {
                postDelayed(new Runnable() {
                    @Override"
8903,updateEnd,"    protected abstract void updateEnd(MagicSurface surface);
"
8904,updatePosition,"    protected abstract void updatePosition(MagicSurface surface, int r, int c, Vec outPos, Vec outColor);
"
8905,updateBegin,"    protected abstract void updateBegin(MagicSurface surface);
"
8906,didStop,"    protected abstract void didStop(MagicSurface surface);
"
8907,didStart,"    protected abstract void didStart(MagicSurface surface);
"
8908,willStart,"    protected abstract void willStart(MagicSurface surface);
"
8910,didStop,"    void didStop() {
        didStop(mSurface);
    }"
8911,didStart,"    void didStart() {
        didStart(mSurface);
    }"
8912,willStart,"    void willStart() {
        mSurface.getModel().updatePositionUseOffset();
        willStart(mSurface);
    }"
8913,updateMatrix,"    protected abstract void updateMatrix(MagicSurface surface, Vec offset, float[] matrix);
}"
8919,willStart,"    void willStart() {
        willStart(mSurface);
    }"
8920,updateMatrix,"    void updateMatrix(float[] matrix) {
        ReusableVec offset = VecPool.get(3);
        try {
            mSurface.getModel().getOffset(offset);"
8922,doUpdaterStartedAndStopped,"    protected void doUpdaterStartedAndStopped() {
        MagicUpdater.doStartedAndStopped(mModelUpdater);
        MagicUpdater.doStartedAndStopped(mMatrixUpdater);
    }"
8923,drawModel,"    protected void drawModel(MatrixManager matrixManager) {
        mModel.draw();
    }"
8924,runOnDraw,"    protected boolean runOnDraw(MatrixManager matrixManager) {
        if (mModelUpdater != null) {
            mModelUpdater.runOnDraw();
        }
        if (mMatrixUpdater != null) {
            mMatrixUpdater.runOnDraw();"
8925,stop,"    void stop() {
        if (mModelUpdater != null) {
            mModelUpdater.stop();
        }"
8926,release,"    synchronized void release() {
        super.release();
        mModel = null;
    }"
8927,restore,"    void restore() {
        if (mModelUpdater != null && mModelUpdater.isStopped()) {
            mModelUpdater.start();
        }
        if (mMatrixUpdater != null && mMatrixUpdater.isStopped()) {"
8928,updateModel,"    protected void updateModel(Vec size, Vec offset) {
        mModel = new SurfaceModel(mColLineCount, mRowLineCount, size.width(), size.height());
        mModel.drawGrid(mDrawGrid);
        mModel.setOffset(offset.x(), offset.y(), offset.z());
    }"
8930,drawGrid,"    public MagicSurface drawGrid(boolean drawGrid) {
        mDrawGrid = drawGrid;
        if (mModel != null) {
            mModel.drawGrid(mDrawGrid);
        }"
8935,update,"    protected abstract void update(MagicScene scene, Vec outAmbientColor);
}"
8936,didStop,"    protected abstract void didStop(MagicScene scene);
"
8937,didStart,"    protected abstract void didStart(MagicScene scene);
"
8938,willStart,"    protected abstract void willStart(MagicScene scene);
"
8939,update,"    void update() {
        try {
            update(mScene, mScene.mAmbientColor.value());"
8940,didStop,"    void didStop() {
        didStop(mScene);
    }"
8941,didStart,"    void didStart() {
        didStart(mScene);
    }"
8942,willStart,"    void willStart() {
        willStart(mScene);
    }"
8943,append,"    private void append(StringBuilder sb, String format, Object... params) {
        sb.append(String.format(Locale.US, format, params));
    }"
8945,createFragmentShaderParams,"    private String createFragmentShaderParams() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < mScene.mSurfaces.size(); ++i) {
            append(sb, ""uniform bool u_surface%d_;"", i);
            append(sb, ""uniform sampler2D u_s%d_t_body;"", i);
            for (int n = 0; n < mScene.mSurfaces.get(i).mTextures.size(); ++n) {
                append(sb, ""uniform sampler2D u_s%d_t%d;"", i, n);"
8948,createVertexShaderMain,"    private String createVertexShaderMain() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < mScene.mSurfaces.size(); ++i) {
            if (i > 0) {
                sb.append("" else "");"
8949,createVertexShaderParams,"    private String createVertexShaderParams() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < mScene.mSurfaces.size(); ++i) {
            append(sb, ""uniform bool u_surface%d_;"", i);
            append(sb, ""uniform float u_s%d_shininess;"", i);
            sb.append("""");"
8951,build,"    public MagicScene build() {
        final String v = buildVertexShaderSource();
        final String f = buildFragmentShaderSource();
        mScene.init(v, f);
        return mScene;
    }"
8953,ambientColor,"    public MagicSceneBuilder ambientColor(int color) {
        mScene.setAmbientColor(color);
        return this;
    }"
8954,addSurfaces,"    public MagicSceneBuilder addSurfaces(MagicBaseSurface... objects) {
        if (objects == null) {
            return this;
        }
        for (MagicBaseSurface s : objects) {"
8955,addLights,"    public MagicSceneBuilder addLights(Light... lights) {
        if (lights == null) {
            return this;
        }
        mScene.mLights.addAll(Arrays.asList(lights));"
8956,updateCamera,"    private void updateCamera() {
        mMatrixManager.setLookAtM(
                mCameraPosition.x(), mCameraPosition.y(), mCameraPosition.z(),"
8958,initTexture,"    private void initTexture(Texture texture, int id) {
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, id);
        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, texture.mBmp, 0);
        texture.mId = id;
        GLUtil.initTexParams();
    }"
8959,draw,"    void draw() {
        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
        if (mSurfaces != null) {
            for (MagicBaseSurface<?> s : mSurfaces) {
                s.draw(mMatrixManager);"
8960,updateFrustum,"    void updateFrustum() {
        Rect r = getSceneViewRect();
        float w = r.right - r.left;
        float h = r.bottom - r.top;
        GLES20.glViewport(0, 0, (int) w, (int) h);
        GLUtil.checkGlError(""glViewport"");
        float ratio = w / h;
        if (ratio > 1) {
            w = 1;
            h = 1 / ratio;
        } else {
            w = ratio;
            h = 1;"
8962,release,"    void release() {
        stop();
        for (MagicBaseSurface<?> s : mSurfaces) {
            s.release();"
8963,stop,"    void stop() {
        if (mSurfaces != null) {
            for (MagicBaseSurface<?> s : mSurfaces) {
                s.stop();
            }"
8964,restore,"    void restore() {
        init(mVertexShader, mFragmentShader);
        init();
        mAmbientColor.refresh();
        if (mLights != null) {
            for (Light l : mLights) {
                l.restore();"
8965,runOnDraw,"    protected void runOnDraw() {
        super.runOnDraw();
        init();
        if (isReady()) {
            if (mUpdater != null) {"
8966,init,"    private void init() {
        if (!mInited && isPrepared()) {
            mProgram = new Program(mVertexShader, mFragmentShader);"
8967,run,"            public void run() {
                prepare();
            }"
8968,init,"    void init(String vertexShader, String fragmentShader) {
        mVertexShader = vertexShader;
        mFragmentShader = fragmentShader;
        mInited = false;
        addRunOnDraw(new Runnable() {
            @Override"
8969,isPrepared,"    private boolean isPrepared() {
        if (!mIsPrepared) {
            boolean prepared = true;
            for (MagicBaseSurface<?> s : mSurfaces) {
                if (!s.isPrepared()) {"
8970,prepare,"    private boolean prepare() {
        if (isPrepared()) {
            return true;
        }
        if (mIsPreparing) {
            return false;
        }"
8971,isReady,"    boolean isReady() {
        return isPrepared() && mInited;
    }"
8982,releaseScene,"    private void releaseScene() {
        if (mScene != null) {
            mScene.release();"
8983,release,"    void release() {
        mReleased = true;
        mNeedRestore = false;
        if (mOnDestroyed) {
            releaseScene();"
8984,onDestroy,"    void onDestroy() {
        mOnDestroyed = true;
        if (mScene != null) {
            mScene.stop();
        }"
8985,onDrawFrame,"    public void onDrawFrame(GL10 gl) {
        try {
            MagicSurfaceViewLock.lock();"
8986,runOnDraw,"    private void runOnDraw() {
        if (mScene != null) {
            mScene.runOnDraw();"
8987,onSurfaceChanged,"    public void onSurfaceChanged(GL10 gl, int width, int height) {
        if (mScene != null && mScene.isReady()) {
            mScene.updateFrustum();"
8988,onSurfaceCreated,"    public void onSurfaceCreated(GL10 gl, EGLConfig config) {
        mReleased = false;
        mOnDestroyed = false;
    }"
8990,render,"    void render(final MagicScene scene) {
        if (mScene != null) {
            mScene.release();
        }"
8991,updateEnd,"    protected abstract void updateEnd(MagicMultiSurface surface);
}"
8992,update,"    protected abstract void update(MagicMultiSurface surface, int r, int c, float[] matrix, Vec offset, Vec color);
"
8993,updateBegin,"    protected abstract void updateBegin(MagicMultiSurface surface);
"
8994,didStop,"    protected abstract void didStop(MagicMultiSurface surface);
"
8995,didStart,"    protected abstract void didStart(MagicMultiSurface surface);
"
8996,willStart,"    protected abstract void willStart(MagicMultiSurface surface);
"
8997,scale,"    protected void scale(float[] matrix, Vec vec) {
        MatrixManager.scaleM(matrix, vec.x(), vec.y(), vec.z());
    }"
8998,translate,"    protected void translate(float[] matrix, Vec vec) {
        MatrixManager.translateM(matrix, vec.x(), vec.y(), vec.z());
    }"
8999,rotate,"    protected void rotate(float[] matrix, Vec vec, float angle) {
        MatrixManager.rotateM(matrix, vec.x(), vec.y(), vec.z(), angle);
    }"
9000,reset,"    protected void reset(float[] matrix) {
        MatrixManager.reset(matrix);
    }"
9001,unlock,"    void unlock() {
        mLock.unlock();
    }"
9007,doUpdaterStartedAndStopped,"    protected void doUpdaterStartedAndStopped() {
        MagicUpdater.doStartedAndStopped(mUpdater);
    }"
9008,drawModel,"    protected void drawModel(MatrixManager matrixManager) {
        if (mUpdater != null) {
            mUpdater.lock();
        }"
9009,runOnDraw,"    protected boolean runOnDraw(MatrixManager matrixManager) {
        if (mUpdater != null) {
            mUpdater.runOnDraw();
        }
        if (MagicUpdater.prepareUpdater(mUpdater)) {"
9010,release,"    synchronized void release() {
        super.release();
        mModels = null;
        mDrawModel = null;
    }"
9011,restore,"    void restore() {
        if (mUpdater != null && mUpdater.isStopped()) {
            mUpdater.start();
        }"
9012,stop,"    void stop() {
        if (mUpdater != null) {
            mUpdater.stop();"
9013,updateModel,"    protected void updateModel(Vec size, Vec offset) {
        float w = size.width() / mCols;
        float h = size.height() / mRows;
        float halfW = size.width() / 2;
        float halfH = size.height() / 2;
        mDrawModel = new SurfaceModel(2, 2, w, h);
        for (int r = 0; r < mRows; ++r) {
            for (int c = 0; c < mCols; ++c) {"
9019,init,"    private void init(int rows, int cols) {
        if (rows < 1 || cols < 1) {
            throw new IllegalArgumentException();
        }
        mRows = rows;
        mCols = cols;"
9022,update,"    void update() {
        updateMatrix(mMatrix);
        try {
            mLock.lock();"
9024,updateMatrix,"    abstract void updateMatrix(float[] matrix);
"
9029,initTextures,"    private void initTextures(Bitmap... bitmaps) {
        if (bitmaps == null) {
            return;
        }"
9030,updateModel,"    protected abstract void updateModel(Vec size, Vec offset);
"
9032,doUpdaterStartedAndStopped,"    protected abstract void doUpdaterStartedAndStopped();
"
9033,drawModel,"    protected abstract void drawModel(MatrixManager matrixManager);
"
9034,draw,"    void draw(MatrixManager matrixManager) {
        if (checkRunOnDraw(matrixManager)) {
            if (isVisible()) {"
9035,runOnDraw,"    protected abstract boolean runOnDraw(MatrixManager matrixManager);
"
9036,checkRunOnDraw,"    private boolean checkRunOnDraw(MatrixManager matrixManager) {
        mBody.runOnDraw();
        mShininess.runOnDraw();
        if (mTextures != null) {
            for (GLParameter<Texture> t : mTextures) {
                t.runOnDraw();"
9037,release,"    synchronized void release() {
        if (mReleased) {
            return;
        }
        if (mBody.value().mBmp != null) {
            mBody.value().mBmp.recycle();"
9039,restore,"    void restore() {
        mBody.refresh();
        mIsCurrent.refresh();
        mShininess.refresh();
        if (mTextures != null) {
            for (GLParameter<Texture> t : mTextures) {"
9041,run,"                public void run() {
                    mBmpBody = ViewUtil.getDrawingCache(mView);
                    mBody.value().mBmp = mBmpBody;
                    mIsPrepared = true;
                    mIsPreparing = false;
                }"
9042,prepare,"    void prepare() {
        if (mIsPrepared || mIsPreparing) {
            return;
        }
        mIsPreparing = true;
        if (mIsView) {
            mViewRect = ViewUtil.getViewRect(mView);
            mViewRect.left = mViewRect.left - mScene.getSceneViewRect().left;"
9043,isPrepared,"    boolean isPrepared() {
        return mIsPrepared;
    }"
9048,isVisible,"    public boolean isVisible() {
        return mVisible;
    }"
9055,runOnDraw,"    protected void runOnDraw() {
        super.runOnDraw();
        mEnable.runOnDraw();
        mColor.runOnDraw();
        mIsPointLight.runOnDraw();
    }"
9056,restore,"    void restore() {
        mEnable.refresh();
        mColor.refresh();
        mIsPointLight.refresh();
    }"
9057,isEnable,"    public boolean isEnable() {
        return mEnable.value();
    }"
9066,checkGlError,"    static void checkGlError(String op) {
        int error;
        while ((error = GLES20.glGetError()) != GLES20.GL_NO_ERROR) {
            throw new RuntimeException(op + "": glError "" + error);"
9067,loadShader,"    static int loadShader(int shaderType, String source) {
        int shader = GLES20.glCreateShader(shaderType);
        if (shader != 0) {
            GLES20.glShaderSource(shader, source);
            GLES20.glCompileShader(shader);"
9068,updateProgram,"    static void updateProgram(int program, String vertexSource, String fragmentSource) {
        int vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, vertexSource);
        if (vertexShader == 0) {
            return;
        }
        int pixelShader = loadShader(GLES20.GL_FRAGMENT_SHADER, fragmentSource);
        if (pixelShader == 0) {"
9069,createProgram,"    static int createProgram(String vertexSource, String fragmentSource) {
        int program = GLES20.glCreateProgram();
        updateProgram(program, vertexSource, fragmentSource);
        return program;
    }"
9070,updateTextureValue,"    private void updateTextureValue(Texture texture) {
        GLES20.glActiveTexture(texture.mIndex);
        GLUtil.checkGlError(""glActiveTexture"");
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, texture.mId);
        GLES20.glUniform1i(handle(), texture.mIndex - GLES20.GL_TEXTURE0);
    }"
9071,updateFloatValue,"    private void updateFloatValue(float... value) {
        switch (value.length) {
            case 1:"
9072,updateBooleanValue,"    private void updateBooleanValue(boolean value) {
        GLES20.glUniform1i(handle(), value ? 1 : 0);
    }"
9073,updateValue,"    protected void updateValue() {
        if (mValue instanceof Float) {
            updateFloatValue((Float) mValue);"
9074,handle,"    protected int handle() {
        if (mHandle == 0) {
            mHandle = GLES20.glGetUniformLocation(mProgram.handle, mName);
        }"
9077,refresh,"    void refresh() {
        if (mProgram != null && !mProgram.isDeleted() && mProgram.isGLThread()) {
            updateValue();"
9079,value,"    GLParameter<T> value(T value) {
        mValue = value;
        refresh();
        return this;
    }"
9081,name,"    GLParameter<T> name(String name) {
        mName = name;
        return this;
    }"
9082,name,"    String name() {
        return mName;
    }"
9083,run,"        public void run() {
            updateValue();
        }"
9084,updateValue,"    protected void updateValue() {
        if (mValue == null) {
            return;
        }"
9085,runOnDraw,"    protected void runOnDraw() {
        updateValue();
    }"
9086,handle,"    protected int handle() {
        if (mHandle == 0) {
            mHandle = GLES20.glGetAttribLocation(mProgram.handle, mName);
        }"
9087,restore,"    public void restore() {
        super.restore();
        mDirection.refresh();
    }"
9088,runOnDraw,"    protected void runOnDraw() {
        super.runOnDraw();
        mDirection.runOnDraw();
    }"
9094,normalize,"    private void normalize(Vec normal) {
        float length = (float) Math.sqrt(Math.pow(normal.x(), 2) + Math.pow(normal.y(), 2) + Math.pow(normal.z(), 2));
        normal.setXYZ(
                normal.x() / length,"
9098,checkIndices,"    private boolean checkIndices(short index0, short index1, short index2) {
        return  index0 != index1 &&
                index0 != index2 &&"
9099,attachModelNormalData,"    private void attachModelNormalData(Vec surfaceNormal, int i) {
        for (int j = i; j < i + 3; ++j) {
            short index = mIndices[j];"
9103,updateModelNormal,"    public void updateModelNormal() {
        if (mNormals == null) {
            mNormals = new float[mPositions.length];
        }
        ReusableVec surfaceNormal = VecPool.get(3);
        boolean normalState = false;
        for (int i = 0; i < mIndices.length - 2; ++i) {
            short index = mIndices[i];"
9104,prepareNormals,"    void prepareNormals() {
        try {
            mBufferLock.lock();"
9105,prepareColors,"    void prepareColors() {
        try {
            mBufferLock.lock();"
9106,preparePositions,"    void preparePositions() {
        try {
            mBufferLock.lock();"
9107,prepareIndices,"    void prepareIndices() {
        try {
            mBufferLock.lock();"
9108,drawModel,"    protected void drawModel() {
        GLES20.glDrawElements(GLES20.GL_TRIANGLE_STRIP, mIndices.length, GLES20.GL_UNSIGNED_SHORT, mIndicesBuffer);
    }"
9110,runOnDraw,"    void runOnDraw() {
        super.runOnDraw();
        mPositionsBuffer.runOnDraw();
        mNormalsBuffer.runOnDraw();
        mColorsBuffer.runOnDraw();
    }"
9113,destroyCompleted,"    public void destroyCompleted() {
        dispatcher.dispatch(TodoActions.TODO_DESTROY_COMPLETED);
    }"
9114,toggleCompleteAll,"    public void toggleCompleteAll() {
        dispatcher.dispatch(TodoActions.TODO_TOGGLE_COMPLETE_ALL);
    }"
9115,toggleComplete,"    public void toggleComplete(Todo todo) {
        long id = todo.getId();
        String actionType = todo.isComplete() ? TodoActions.TODO_UNDO_COMPLETE : TodoActions.TODO_COMPLETE;

        dispatcher.dispatch("
9116,undoDestroy,"    public void undoDestroy() {
        dispatcher.dispatch(
                TodoActions.TODO_UNDO_DESTROY"
9117,destroy,"    public void destroy(long id) {
        dispatcher.dispatch(
                TodoActions.TODO_DESTROY,"
9118,create,"    public void create(String text) {
        dispatcher.dispatch(
                TodoActions.TODO_CREATE,"
9119,get,"    public static ActionsCreator get(Dispatcher dispatcher) {
        if (instance == null) {
            instance = new ActionsCreator(dispatcher);
        }"
9120,build,"        public Action build() {
            if (type == null || type.isEmpty()) {
                throw new IllegalArgumentException(""At least one key is required."");
            }"
9121,bundle,"        public Builder bundle(String key, Object value) {
            if (key == null) {
                throw new IllegalArgumentException(""Key may not be null."");
            }

            if (value == null) {"
9122,with,"        Builder with(String type) {
            if (type == null) {
                throw new IllegalArgumentException(""Type may not be null."");
            }
            this.type = type;
            this.data = new HashMap<>();"
9125,type,"    public static Builder type(String type) {
        return new Builder().with(type);
    }"
9127,disposeComponent,"    public void disposeComponent() {
        super.disposeComponent();
        this.controllerFactory = null;
    }"
9128,initComponent,"    public void initComponent() {
        super.initComponent();
        final IconApplication iconApplication = ApplicationManager.getApplication().getComponent(IconApplication.class);
        this.controllerFactory = iconApplication.getControllerFactory();
    }"
9129,projectOpened,"    public void projectOpened() {
        this.controllerFactory.setProject(myProject);
    }"
9131,disposeComponent,"    public void disposeComponent() {
        controllerFactory.tearDown();
        controllerFactory = null;
    }"
9133,initComponent,"    public void initComponent() {
        IconPack androidIcons = null;
        IconPack materialIcons = null;
        try {
            final InputStream bundledIconPackPropertiesFile = ResourceLoader.getBundledResourceStream(""icon_packs.properties"");
            final Properties bundledIconPackProperties = new Properties();"
9135,addData,"    public void addData(PictureTypeEntity entity) {
        mListData.add(entity);
"
9137,onBindViewHolder,"    public void onBindViewHolder(@NonNull Holder holder, int position) {
        holder.textView.setText(mListData.get(position).typeName);
    }"
9138,onCreateViewHolder,"    public Holder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = mLayoutInflater.inflate(android.R.layout.simple_list_item_1, parent, false);
        TextView textView = view.findViewById(android.R.id.text1);
        textView.setTextColor(Color.BLACK);
        textView.setGravity(Gravity.CENTER);
        Holder holder = new Holder(textView);
        return holder;
    }"
9139,removeRunnable,"    private void removeRunnable() {
        if (handler != null) {
            handler.removeCallbacks(runnable);
        }
        handler = null;"
9140,convert,"            protected void convert(BaseViewHolder helper, FunItem item) {
                helper.setText(android.R.id.text1, item.name());
            }"
9143,onPageSelected,"                            public void onPageSelected(Context context, ImageView imageView, String url, int position) {
                                Glide.with(context).load(url).into(imageView);
                            }"
9146,convert,"                    protected void convert(BaseViewHolder helper, MySectionEntity item) {
                        TextView textView = helper.getView(android.R.id.text1);
                        textView.setText(item.t.typeName);
                        textView.setTextColor(Color.BLACK);
                        textView.setGravity(Gravity.CENTER);
                    }"
9147,convertHead,"                    protected void convertHead(BaseViewHolder helper, MySectionEntity item) {
                        helper.setText(R.id.textView2, item.header)
                                .setTextColor(R.id.textView2, Color.BLACK);"
9150,onTimerFinish,"                            public void onTimerFinish() {
                                Toast.makeText(MainActivity.this, ""onTimerFinish"", Toast.LENGTH_SHORT).show();
                            }"
9151,onClick,"                            public boolean onClick(View v) {
                                dialogFragment.dialogDismiss();
                                return true;
                            }"
9152,onConfig,"                            public void onConfig(ProgressParams params) {
                                params.indeterminateColor = Color.parseColor(""#E9AD44"");
                            }"
9153,run,"                    public void run() {
                        progress++;
                        if (progress >= max) {
                            MainActivity.this.runOnUiThread(() -> {"
9154,onItemClick,"    public void onItemClick(BaseQuickAdapter adapter, View view, int position) {
        FunItem funItem = (FunItem) adapter.getItem(position);
        switch (funItem) {
            case fragment:"
9155,onResponse,"                public void onResponse(@NotNull Call call, @NotNull Response response) {
                    if (circleDialog != null) {
                        circleDialog.dismiss();
                    }"
9156,onFailure,"                public void onFailure(@NotNull Call call, @NotNull IOException e) {
                    if (circleDialog != null) {
                        circleDialog.dismiss();
                    }"
9158,onViewCreated,"        public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
            super.onViewCreated(view, savedInstanceState);
            textView = view.findViewById(R.id.textView);
            view.findViewById(R.id.button).setOnClickListener(v -> {
                circleDialog = new CircleDialog.Builder()"
9160,onCreate,"        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
        }"
9161,newInstance,"        public static BlankFragment newInstance() {
            BlankFragment fragment = new BlankFragment();
            Bundle args = new Bundle();
            fragment.setArguments(args);
            return fragment;
        }"
9162,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.aty_fgt);
    }"
9164,onActivityCreated,"    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        View view = getView();
        view.findViewById(R.id.but_cancle).setOnClickListener(this);
        view.findViewById(R.id.logout_ok).setOnClickListener(this);
        view.findViewById(R.id.logout_cancel).setOnClickListener(this);
    }"
9165,createView,"    public View createView(Context context, LayoutInflater inflater, ViewGroup container) {
        return inflater.inflate(R.layout.dialog_logout, container, false);
    }"
9167,createView,"    public View createView(Context context, LayoutInflater inflater, ViewGroup container) {
        return inflater.inflate(R.layout.dialog_login, container, false);
    }"
