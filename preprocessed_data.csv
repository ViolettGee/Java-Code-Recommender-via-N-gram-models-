,Method Names,Method Text
0,isEnablePlatformVerification,"  public boolean isEnablePlatformVerification() {
    return enablePlatformVerification;
  }"
14,loadFromResourceOrFile,"  public static NodeJsonConfiguration loadFromResourceOrFile(String source) {
    NodeJsonConfiguration config = fromResourceOrFile(source, NodeJsonConfiguration.class);

    if (config.configuration != null) {
      throw new GridConfigurationException(
          ""Deprecated -nodeConfig file encountered. Please update the file to work with Selenium 3. """
15,loadFromJson,"  public static NodeJsonConfiguration loadFromJson(JsonInput source) {
    NodeJsonConfiguration config = fromJson(source, NodeJsonConfiguration.class);

    if (config.configuration != null) {
      throw new GridConfigurationException(
          ""Deprecated -nodeConfig file encountered. Please update the file to work with Selenium 3. """
27,readFileOrResource,"  private static Reader readFileOrResource(String source) {
    Stream<Function<String, InputStream>> suppliers = Stream.of(
        (path) -> {
          try {
            return new FileInputStream(path);"
28,loadJsonFromResourceOrFile,"  private static JsonInput loadJsonFromResourceOrFile(String source) {
    try {
      return new Json().newInput(readFileOrResource(source));"
29,fromJson,"  static <T extends CommonJsonConfiguration> T fromJson(
          JsonInput jsonInput, Class<T> configurationClass)
  {"
30,fromResourceOrFile,"  static <T extends CommonJsonConfiguration> T fromResourceOrFile(
      String resourceOrFilePath, Class<T> configurationClass)
  {"
33,startNextScreen,"    public void startNextScreen() {

        mStartNextScreen = true;
        mShouldSpheresRotate = false;
        invalidate();"
34,translateTheSpheres,"    public void translateTheSpheres(float position, int pageWidth) {

        mPosition = position;
        invalidate();"
36,drawCircle,"    private float[] drawCircle(Canvas canvas, FloatWrapper originalPos, FloatWrapper step, Bitmap bm) {

        float distance = originalPos.floatValue + step.floatValue;
        float positionArray[] = new float[2];
        if (distance < mPathLength) {
            mPathMeasure.getPosTan(distance, mPos, mTan);

            matrix.reset();"
37,moveCircleInOut,"    private boolean moveCircleInOut(FloatWrapper distance, FloatWrapper pathLength, Matrix matrix, PathMeasure pathMeasure, Canvas canvas, Bitmap bm, FloatWrapper scaleCounter) {


        float position[] = new float[2];
        float tangent[] = new float[2];


        if (distance.floatValue >= (pathLength.floatValue / 2)) {"
39,onDraw,"    protected void onDraw(Canvas canvas) {

        canvas.drawPath(mAnimPath, mPaint);

        if (mShouldSpheresRotate || !mAllCirclesDrawn) {

            pos1 = drawCircle(canvas, mSphereOriginalPosArr[0], mSphereStepCountArr[0], mBitmap1);
            pos2 = drawCircle(canvas, mSphereOriginalPosArr[1], mSphereStepCountArr[1], mBitmap2);"
40,initOriginalPos,"    private void initOriginalPos() {

        for (int i = 0; i < 6; i++) {"
41,initLinePaths,"    private void initLinePaths() {

        for (int i = 0; i < 6; i++) {"
43,animateSecondScreenAntiClock,"    public void animateSecondScreenAntiClock(float position) {

        if (mCurrentDirection == Path.Direction.CW) {
            mCurrentDirection = Path.Direction.CCW;
            initNewPath(Path.Direction.CCW);"
45,onDraw,"    protected void onDraw(Canvas canvas) {

        canvas.drawPath(mAnimPath, mPaint);

        if (mDistance < mPathLength) {"
46,initNewPath,"    private void initNewPath(Path.Direction dir) {

        mAnimPath = new Path();
        RectF rectF = new RectF(XCOORD - RADIUS, YCOORD - RADIUS, XCOORD + RADIUS, YCOORD + RADIUS);

        if (dir == Path.Direction.CW) {
            mAnimPath.addArc(rectF, 50, 359);
        } else {
"
49,initThirdScreenViews,"    private void initThirdScreenViews(View rootView, Bundle savedInstanceState) {

        mRoundView = (ThirdScreenView) rootView.findViewById(R.id.round_view);
        mLetsGoButton = (Button) rootView.findViewById(R.id.letsgo);

        mLetsGoButton.setOnClickListener(clickListener);"
52,initializeAlpha,"    private void initializeAlpha() {

        mCamcordImage.setAlpha(0f);
        mClockImage.setAlpha(0f);
        mGraphImage.setAlpha(0f);
        mAudioImage.setAlpha(0f);
        mQuoteImage.setAlpha(0f);
        mMapImage.setAlpha(0f);
        mWordPressImage.setAlpha(0f);"
54,run,"                public void run() {

                    doFadeAnimation();"
55,run,"            public void run() {

                getOriginalXValues(savedInstanceState);"
58,onCreateView,"        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {

            Bundle args = getArguments();
            int position = args.getInt(""position"");
            int layoutId = getLayoutId(position);


            ViewGroup rootView = (ViewGroup) inflater.inflate(layoutId, container, false);
            if (position == 0) {"
59,animateSecondScreen,"    private void animateSecondScreen(float position, int pageWidth, int direction) {

        if (direction == 0) {"
61,transformPage,"        public void transformPage(View page, float position) {

            int pageWidth = page.getWidth();
            if ((mViewPagerScrollingLeft && page.findViewById(R.id.center_box) != null)) {
                animateSecondScreen(position, pageWidth, 0);
            }"
67,animateBookView,"    private void animateBookView() {

        mBookView.fadeInTheLines();"
68,onPageScrollStateChanged,"            public void onPageScrollStateChanged(int state) {

                if (state == ViewPager.SCROLL_STATE_DRAGGING) {
                    mShouldSpheresRotate = false;
                } else if (state == ViewPager.SCROLL_STATE_IDLE) {"
69,onPageSelected,"            public void onPageSelected(int position) {

                if (position == 1) {
                    mSelectedPosition = 1;
                    mSecondPageSelected = true;
                    setViewsInOriginalPosition();"
74,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        setUpViews();"
75,fadeInTheLines,"    public void fadeInTheLines() {

        mFadeInLineArr[0].floatValue = 1f;
        mFadeInLineArr[1].floatValue = 0f;
        mFadeInLineArr[2].floatValue = 0f;
        mFadeInLineArr[3].floatValue = 0f;
"
79,initZygote,"    public void initZygote(IXposedHookZygoteInit.StartupParam startupParam) {
        this.sharedPreferences = new XSharedPreferences(modulePackageName, ""default"");
        XposedBridge.log(modulePackageName+"" initZygote"");
    }"
80,afterHookedMethod,"                protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                    param.setResult(""Hook succeed"");
                    int x=sharedPreferences.getInt(""example"",1);
                }"
81,handleLoadPackage,"    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable {
        if (""xxx.xxx.xxx"".equals(loadPackageParam.packageName)){
            XposedHelpers.findAndHookMethod(""xxx.xxx.xxx.xxxClass"", loadPackageParam.classLoader, ""xxxMethod"", new XC_MethodHook() {"
82,findApkFile,"    private File findApkFile(Context context, String modulePackageName) {
        if (context == null) {
            return null;
        }
        try {"
84,initZygote,"    public void initZygote(IXposedHookZygoteInit.StartupParam startupParam) {
        this.startupparam = startupParam;
    }"
87,addition_isCorrect,"    public void addition_isCorrect() throws Exception {
        assertEquals(4, 2 + 2);
    }"
88,onCreate,"    public void onCreate() {
        super.onCreate();
        InjectorHelper.initializeApplicationComponent(this);

        if (BuildConfig.DEBUG) {"
92,convertHashToString,"    private static String convertHashToString(byte[] hashBytes) {
        StringBuilder returnVal = new StringBuilder();
        for (byte hashByte : hashBytes) {
            returnVal.append(Integer.toString((hashByte & 0xff) + 0x100, 16).substring(1));
        }"
94,filterList,"    static List<String> filterList(List<String> list, String start, String end) {
        return Stream.of(list)
                .filter(s -> TextUtils.isEmpty(start) || s.startsWith(start))"
95,filterList,"    static List<String> filterList(List<String> list, Pattern pattern) {
        return Stream.of(list)
                .filter(s -> pattern.matcher(s).find())"
97,deleteFile,"    static boolean deleteFile(String filePath) {
        File file = new File(filePath);
        if (file.isFile() && file.exists()) {
            return file.delete();
        }"
99,shell,"    static void shell(Context context, Command command) {
        try {
            RootTools.closeAllShells();"
100,run,"                public void run() {
                    Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
                }"
101,showToastOnLooper,"    static void showToastOnLooper(final Context context, String message) {
        try {
            Handler handler = new Handler(Looper.getMainLooper());"
102,is64BitImpl,"    static boolean is64BitImpl() {
        try {
            Class<?> clzVMRuntime = Class.forName(""dalvik.system.VMRuntime"");
            if (clzVMRuntime == null) {"
104,writeFileFromSD,"    static void writeFileFromSD(String path, String content) {
        BufferedWriter out = null;
        try {
            File file = new File(path);"
105,readFileFromSD,"    static String readFileFromSD(String path) {
        StringBuilder stringBuilder = new StringBuilder();
        File file = new File(path);
        if (!file.isDirectory()) {
            try {
                InputStream inputStream = new FileInputStream(file);"
106,copyFilesFromSD,"    static void copyFilesFromSD(String oldPath, String newPath) {
        try {
            File newFile = new File(newPath);"
114,PermissionsRequest,"    private static void PermissionsRequest(OnPermissionResultListener b, boolean get) {
        if (b != null)
            b.onResult(get);"
116,onRequestPermissionsResult,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        if (requestCode == REQUEST_CODE_ASK_PERMISSIONS) {
            if (grantResults.length <= 0) {"
117,onActivityResult,"    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK && requestCode == REQUEST_CODE_ASK_PERMISSIONS) {
            PermissionsRequest(back, true);"
120,handleLoadPackage,"    public void handleLoadPackage(final LoadPackageParam lpparam) throws Throwable {
        if (lpparam.packageName.equals(Tools.HOOK_NAME)) {
            HotXposed.hook(HTTPHook.class, lpparam);"
122,error,"                        public void error(int i, String s) {
                            ErrorCode.showError(context, i);
                        }"
123,finish,"                        public void finish(JSONObject jsonObject) throws JSONException {
                            if (update.downloadUrl.length() == 0) {
                                iv_script.setVisibility(View.GONE);"
124,showUpdateDialog,"    private void showUpdateDialog(final String title, final String extra, final Update update) {
        String log = update.log;
        if (extra != null && extra.length() != 0)
            log = log + ""\n\n"" + extra;
        new AlertDialog.Builder(this)"
125,showMessageDialog,"    private void showMessageDialog(final String title, final String message, final boolean finish) {
        new AlertDialog.Builder(this)
                .setCancelable(false)"
126,isVXP,"    private boolean isVXP() {
        return System.getProperty(""vxp"") != null;
    }"
127,isModuleActive,"    private static boolean isModuleActive() {
        return false;
    }"
128,isExpModuleActive,"    private boolean isExpModuleActive() {
        boolean isExp = false;

        try {
            ContentResolver contentResolver = getContentResolver();"
130,checkState,"    private void checkState() {
        String method = null;

        if (isModuleActive()) {
            method = ""Xposed / EdXposed"";"
132,error,"            public void error(int i, String s) {
                ErrorCode.showError(context, i);
            }"
133,finish,"            public void finish(JSONObject jsonObject) throws JSONException {
                scriptUpdate = Update.getUpdate(context, jsonObject);
                if (!scriptUpdate.version.equals(Tools.nowVersion.replace(""-high"", """")))
                    iv_script.setVisibility(View.VISIBLE);"
136,finish,"            public void finish(JSONObject jsonObject) throws JSONException {
                versionUpdate = Update.getUpdate(context, jsonObject);
                if (!versionUpdate.version.equals(BuildConfig.VERSION_NAME))
                    iv_version.setVisibility(View.VISIBLE);"
138,listener,"    private void listener() {
        rg_origin.setOnCheckedChangeListener((radioGroup, i) -> {
            switch (i) {
                case R.id.rb_a:
                    originIndex = 0;
                    break;
                case R.id.rb_b:
                    originIndex = 1;
                    break;
                case R.id.rb_c:
                    originIndex = 2;
                    break;"
141,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        context = this;

        checkState();
        initView();
        listener();"
142,handleMessage,"        public void handleMessage(Message msg) {
            if (msg.what == 0) {
                getPackageManager().setComponentEnabledSetting(new ComponentName(MainActivity.this, ""com.raincat.unblockmusicpro.MainAlias""),"
144,logText,"    private static void logText(String name, Object object) {
        Field[] fields = object.getClass().getDeclaredFields();
        for (Field field : fields) {
            try {"
146,beforeHookedMethod,"                                        protected void beforeHookedMethod(MethodHookParam param) {
                                            if (param.args.length >= 9) {
                                                param.args[8] = proxy;"
147,commandOutput,"                                        public void commandOutput(int id, String line) {
                                            if (showLog)
                                                XposedBridge.log(line);
                                            if (firstToastShow) {"
150,showError,"    public static void showError(Context context, int errorCode) {
            switch (errorCode) {
                case 1:"
152,getJsonBoolean,"    protected static boolean getJsonBoolean(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getBoolean(key);
            }"
153,getJsonLong,"    protected static long getJsonLong(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getLong(key);
            }"
154,getJsonInt,"    protected static int getJsonInt(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getInt(key);
            }"
155,getJsonString,"    static String getJsonString(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getString(key);
            }"
156,onClick,"            public void onClick(View v) {
                /*
                 * Storing the Context in a variable in this case is redundant since we could have
                 * just used ""this"" or ""MainActivity.this"" in the method call below. However, we
                 * wanted to demonstrate what parameter we were using ""MainActivity.this"" for as"
157,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        /*
         * Using findViewById, we get a reference to our Button from xml. This allows us to
         * do things like set the onClickListener which determines what happens when the button"
161,run,"    public DefaultExecutor run(){
        DefaultExecutor executor = new DefaultExecutor();

        if (REAL_PATH_PARENT.exists()&&REAL_PATH_PARENT.isFile()){
            executor.setWorkingDirectory(REAL_PATH_PARENT.getParentFile());
        }
        if (!setOutfileFlag)"
164,output,"    private void output(String type , String filename){
        setOutfileFlag = true;
        File output = new File(tempdir.concat(""xray/""));
        outfile = new File(output, filename);
        command.add(""--""+type+""-output ""+outfile.getAbsolutePath());
    }"
165,outputHTML,"    public XRay outputHTML(String filename){
        output(""html"",filename);
        return this;
    }"
166,outputTEXT,"    public XRay outputTEXT(String filename){
        output(""text"",filename);
        return this;
    }"
167,outputJSON,"    public XRay outputJSON(String filename){
        output(""json"",filename);
        return this;
    }"
173,isPortUsing,"    public static boolean isPortUsing(String host,int port)  {
        boolean flag = false;
        Socket socket = null;
        try {

            InetAddress Address = InetAddress.getByName(host);"
174,isLocalPortUsing,"    public  boolean isLocalPortUsing(int port){
        boolean flag = false;
        try {
            flag = isPortUsing(""127.0.0.1"", port);
        } catch (Exception e) {"
175,process,"    public void process() {
        result = this;
        command.add(REAL_PATH);
        command.add(""webscan"");

        outputDir = new File(tempdir.concat(""xray/""));
"
177,check,"    public boolean check(Map param) {
        String content = """";
        if (Constant.TRACKRAY_SYSTEMOS == Constant.WINDOWS){
            Shell block = shell().block(true);
            if (REAL_PATH_PARENT.exists()&&REAL_PATH_PARENT.isFile()){
                block.workdir(REAL_PATH_PARENT.getParentFile());"
183,clone,"    public Object clone()  {
        try {
            return super.clone();
        } catch (CloneNotSupportedException e) {"
185,toJSON,"    public JSONObject toJSON(){
        return JSONObject.fromObject(this);
    }"
186,toString,"    public String toString() {
        return toJSON().toString();
    }"
196,WARN,"    public static ResultCode WARN(String obj){
        return getInstance(400,obj);
    }"
197,ERROR,"    public static ResultCode ERROR(String obj){
        return getInstance(500,obj);
    }"
198,SUCCESS,"    public static ResultCode SUCCESS(String obj){
        return getInstance(200,obj);
    }"
202,finalize,"    protected void finalize() throws Throwable {
        if (logind)
        {
            logout();"
203,arr,"    public String[] arr(String command ,String... param){
        return param;
    }"
204,list,"    public List<String> list(String... param){
        return Arrays.asList(param);
    }"
205,format,"    private final String format() {
        return String.format(this.format,host);
    }"
206,unpack,"    public Value unpack(byte[] obj) {
        try {
            return MessagePack.unpack(obj);
        } catch (IOException e) {"
207,pack,"    public byte[] pack(Object obj) {
        try {
            return MessagePack.pack( obj );
        } catch (IOException e) {"
208,sendList,"    public Map sendList(List list){
        try {
            byte[] result= send(pack(list));
            Value unpack = unpack(result);"
209,send,"    public byte[] send(byte[] p){
        byte[] result= Requests.post(format())
                .timeout(callTimeout)
                .headers(header)"
210,readResult,"    public Map readResult(){
        Map map = sendList(list(Command.ConsoleRead, token, String.valueOf(consoleID)));
        return map;
    }"
211,executeCommand,"    public Map executeCommand(List<String> commands){
        StringBuffer buff = new StringBuffer();
        for (String command : commands) {
            buff.append(command).append(""\n"");
        }
        Map map = sendList(list(Command.ConsoleWrite, token, String.valueOf(consoleID), buff.toString()));"
212,execute,"    public String execute(List<String> commands){
        executeCommand(commands);
        Map map = readResult();
        if (map!=null && map.containsKey(""data"") && map.containsKey(""prompt"") && map.containsKey(""busy""))
        {
            String response = StrUtils.unicodeToString(map.get(""data"").toString());"
213,destroyConsole,"    public void destroyConsole(){
        Map map = sendList(list(Command.ConsoleDestroy, token , String.valueOf(consoleID)));
    }"
214,banner,"    public String banner(){
        String banner = execute(Arrays.asList(""""));
        return banner;
    }"
215,createConsole,"    public int createConsole(){
        Map map = sendList(list(Command.ConsoleCreate, token));
        if (map.containsKey(""id"")){
            consoleID = Integer.parseInt( map.get(""id"").toString());
            return consoleID;"
216,logout,"    public void logout(){
        destroyConsole();
        Map map = sendList(list(Command.AuthLogout, token));
    }"
218,login,"    public boolean login(){
        try {
            Map send = sendList(list(Command.AuthLogin, username, password));
            if (send.containsKey(""token"")){"
219,per,"        protected void per(char[] buf, char[] chs, int len , ArrayList<String> strs){
            if(len == -1){
                String tmp="""";
                for(int i=buf.length-1; i>=0; --i)"
220,numbers4,"        public List<String> numbers4(){
            char[] chars = {'0', '1', '2', '3', '4', '5', '6','7','8','9'};
            ArrayList<String> integers = new ArrayList<>();
            per(new char[4],chars,4-1,integers);
            return integers;
        }"
222,decode,"            public String decode (String str){
                return StrUtils.unicodeToString(str);
            }"
223,encode,"            public String encode (String str){
                return StrUtils.stringToUnicode(str);
            }"
224,decode,"            public String decode(String obj,String code) throws UnsupportedEncodingException { return java.net.URLDecoder.decode(obj,code); }
        }
"
226,decode,"            public  byte[] decode(String str) throws Exception {
                byte[] data = str.getBytes(""GBK"");
                int len = data.length;
                ByteArrayOutputStream buf = new ByteArrayOutputStream(len);
                int i = 0;
                int b1, b2, b3, b4;

                while (i < len) {
"
227,encode,"            public  String encode(byte[] data) {
                StringBuffer sb = new StringBuffer();
                int len = data.length;
                int i = 0;
                int b1, b2, b3;

                while (i < len) {
                    b1 = data[i++] & 0xff;"
228,MD5,"            public  String MD5(String source) {
                return byte2HexStr(MD5Bit(source.getBytes()));
            }"
230,SHA1,"            public  String SHA1(String source) {
                return byte2HexStr(SHA1Bit(source.getBytes()));
            }"
231,SHA1Bit,"            public  byte[] SHA1Bit(byte[] source) {
                try {
                    MessageDigest sha1Digest = MessageDigest.getInstance(""SHA-1"");"
240,isMatch,"    public boolean isMatch(){
        if (StringUtils.isNotBlank(match) && StringUtils.isBlank(md5))
            return true;
        return false;"
241,toInt,"    private String toInt(int i) {
        StringBuffer result = new StringBuffer();
        int temp = String.valueOf(i).length();
        String flag = "" "";
        switch (temp){
            case 1:
                result.append(i).append(flag+flag+flag);"
242,jsonPluginCount,"    public int jsonPluginCount(){
        String jsonPath = Constant.RESOURCES_INCLUDE_PATH.concat(""/json/"");

        File file = new File(jsonPath);
        if (file.isDirectory()){
            String[] list = file.list();"
243,crawlerCount,"    public int crawlerCount() {
        return dispatchController.getAppContext().getBeansOfType(CrawlerPlugin.class).size();
    }"
244,pluginCount,"    public int pluginCount() {
        return dispatchController.getAppContext().getBeansOfType(AbstractPlugin.class).size();
    }"
245,pocCount,"    public int pocCount() {
        return dispatchController.getAppContext().getBeansOfType(AbstractPOC.class).size();
    }"
247,count,"    public int count(){
        return auxiliaryCount()+crawlerCount()+pocCount()+jsonPluginCount()+pluginCount();
    }"
249,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Vulndetail) == false) {
            return false;"
250,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(vulnId).append(severity).append(criticality).append(vtId).append(cvss2).append(tags).append(affectsDetail).append(affectsUrl).append(cvss3).append(cvssScore).append(targetId).append(vtName).append(locId).append(source).append(status).append(request).append(additionalProperties).toHashCode();
    }"
253,toString,"    public String toString() {
        return ToStringBuilder.reflectionToString(this);
    }"
286,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Vulnerabilities) == false) {
            return false;"
287,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(vulnId).toHashCode();
    }"
317,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Scan) == false) {
            return false;"
318,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(nextRun).append(currentSession).append(targetId).append(profileName).append(profileId).append(criticality).append(reportTemplateId).append(scanId).append(additionalProperties).toHashCode();
    }"
338,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof CurrentSession) == false) {
            return false;"
339,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(eventLevel).append(progress).append(startDate).append(severityCounts).append(status).append(threat).append(scanSessionId).append(additionalProperties).toHashCode();
    }"
357,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof SeverityCounts) == false) {
            return false;"
358,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(high).append(medium).append(info).append(low).append(additionalProperties).toHashCode();
    }"
370,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Target) == false) {
            return false;"
371,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(address).append(severityCounts).append(lastScanDate).append(threat).append(criticality).append(manualIntervention).append(lastScanSessionId).append(targetId).append(continuousMode).append(lastScanId).append(lastScanSessionStatus).append(description).append(additionalProperties).toHashCode();
    }"
399,stopScan,"    public boolean stopScan(String scanid){
        try {
            send(String.format(""/api/v1/scans/%s/abort"", scanid), HttpMethod.POST);
        }catch (Exception e){"
401,vuln,"    public Vulndetail vuln(String vulnid){
        String url = String.format(""/api/v1/vulnerabilities/%s"", vulnid);
        String resp = send( url, HttpMethod.GET);
        try {
            return toBean(resp,Vulndetail.class);"
402,vuln,"    public Vulndetail vuln(String scanid,String sessionid ,String vid){
        String resp = send(String.format(""/api/v1/scans/%s/results/%s/vulnerabilities/%s"", scanid, sessionid , vid), HttpMethod.GET);
        try {
            return toBean(resp,Vulndetail.class);"
403,vulns,"    public List<Vulnerabilities> vulns(String sessionId,String scanId){
        ArrayList<Vulnerabilities> obj = new ArrayList<>();
        JSONObject jsonObject = vulnsJSON(sessionId, scanId);
        if (jsonObject.containsKey(""vulnerabilities"")){
            JSONArray vulnerabilities = jsonObject.getJSONArray(""vulnerabilities"");
            for (int i = 0; i < vulnerabilities.size(); i++) {"
404,vulnsJSON,"    public JSONObject vulnsJSON(String sessionid , String scanid){
        String resp = send(String.format(""/api/v1/scans/%s/results/%s/vulnerabilities"", scanid, sessionid), HttpMethod.GET);
        JSONObject obj = JSONObject.fromObject(resp);
        return obj;
    }"
405,createTarget,"    public String createTarget(String url){
        JSONObject json = new JSONObject();
        json.put(""address"",url);
        json.put(""description"",url);
        json.put(""criticality"",""10"");

        String resp = send(""/api/v1/targets"", json.toString(), HttpMethod.POST);
        JSONObject obj = JSONObject.fromObject(resp);
        return obj.getString(""target_id"");"
406,targets,"    public List<Target> targets(){
        JSONObject obj = targetsJSON();
        List <Target> list = new ArrayList<>();
        if (obj.containsKey(""targets"")){
            JSONArray scans = obj.getJSONArray(""targets"");
            for (int i = 0; i < scans.size(); i++) {"
407,toBean,"    protected <T> T toBean (String json ,  Class <T> clazz) throws IOException {
        return new ObjectMapper().readValue(json,clazz);
    }"
408,targetsJSON,"    public JSONObject targetsJSON(){
        String scans = send(""/api/v1/targets"", HttpMethod.GET);
        return JSONObject.fromObject(scans);
    }"
409,scan,"    public Scan scan(String scanId){
        String scan = send(String.format(""/api/v1/scans/%s"",scanId), HttpMethod.GET);
        try {
            return toBean(scan,Scan.class);"
410,scans,"    public List<Scan> scans(){
        List <Scan> list = new ArrayList<>();
        JSONObject obj = scansJSON();
        if (obj.containsKey(""scans"")){
            JSONArray scans = obj.getJSONArray(""scans"");
            for (int i = 0; i < scans.size(); i++) {"
411,scansJSON,"    public JSONObject scansJSON(){
        String scans = send(""/api/v1/scans"", HttpMethod.GET);
        return JSONObject.fromObject(scans);
    }"
412,send,"    String send(String url , String data , HttpMethod method){
        CrawlerPage page = new CrawlerPage();
        page.getRequest().setUrl(host+url);
        page.getRequest().setHttpHeaders(headers);
        page.getRequest().setParamStr(data);
        page.getRequest().setHttpMethod(method);
        f.run(page);
        return page.getResponse().getStatus().getContentString();
    }"
413,send,"    String send(String url , HttpMethod method){
        return send(url,"""",method);
    }"
414,initCheck,"    public void initCheck(){
        headers = new Header[]{
                new BasicHeader(""X-Auth"",apikey),
                new BasicHeader(""content-type"",""application/json""),
        };

        CrawlerPage page = new CrawlerPage();
        page.getRequest().setUrl(host+""/api/v1/scans"");
        page.getRequest().setHttpHeaders(headers);
        page.getRequest().setHttpMethod(HttpMethod.GET);"
415,measureText,"    public static float measureText(TextPaint paint,
                                    TextPaint workPaint,
                                    CharSequence text, int start, int end,"
416,drawText,"    public static float drawText(Canvas canvas,
                                 CharSequence text, int start, int end,
                                 int direction,
                                 float x, int top, int y, int bottom,"
417,drawText,"    static float drawText(Canvas canvas,
                          CharSequence text, int start, int end,
                          int dir, boolean runIsRtl,
                          float x, int top, int y, int bottom,"
419,getTextWidths,"    public static int getTextWidths(TextPaint paint,
                                    TextPaint workPaint,
                                    Spanned text, int start, int end,
                                    float[] widths, Paint.FontMetricsInt fmi) {
        MetricAffectingSpan[] spans =
                text.getSpans(start, end, MetricAffectingSpan.class);

        ReplacementSpan replacement = null;"
421,toString,"        public String toString() {
            return ""\n"";
        }"
422,draw,"        void draw(Canvas canvas, float offsetY, Paint paint, LayoutParams params) {
        }"
423,toString,"        public String toString() {
            return unit;
        }"
424,draw,"        void draw(Canvas canvas, float offsetY, Paint paint, LayoutParams params) {
            canvas.drawText(unit, x + params.getOffsetX(), y + params.getOffsetY() + offsetY, paint);
        }"
425,draw,"        abstract void draw(Canvas canvas, float offsetY, Paint paint, LayoutParams params);
    }"
428,fit,"    private LineAnalysis fit(ListIterator<Unit> iterator, int startIndex, float spaceOffset,
                             float availableWidth) {

        int i = startIndex;
"
431,isTokenized,"    public boolean isTokenized() {
        return tokens != null;
    }"
440,onDraw,"    public void onDraw(Canvas canvas, int startTop, int startBottom) {

        int tokenStart = getTokenForVertical(startTop, TokenPosition.START_OF_LINE);
        int tokenEnd = getTokenForVertical(startBottom, TokenPosition.END_OF_LINE);
"
451,onDraw,"    public void onDraw(Canvas canvas, int scrollTop, int scrollBottom) {

        if (tokens.length < TOKEN_LENGTH) {
            return;
        }

        Spannable textCpy = (Spannable) this.text;
        int startIndex = getTokenForVertical(scrollTop, TokenPosition.START_OF_LINE);
        int endIndex = getTokenForVertical(scrollBottom, TokenPosition.END_OF_LINE);

        boolean defIsReverse = false;
"
454,tokenize,"    private static LinkedList<Integer> tokenize(CharSequence source,
                                                int start,
                                                int end) {

        LinkedList<Integer> units = new LinkedList<>();

        if (start >= end) {"
455,ammortizeArray,"    private static int[] ammortizeArray(int[] array, int index) {
        if (index >= array.length) {
            int[] newArray = new int[array.length * 2];
            Arrays.fill(newArray, Integer.MAX_VALUE);"
458,isAntiAlias,"        public boolean isAntiAlias() {
            return antialias;
        }"
460,isTextSubPixel,"        public boolean isTextSubPixel() {
            return subpixelText;
        }"
462,isDebugging,"        public boolean isDebugging() {
            return debugging;
        }"
472,isTextFakeBold,"        public boolean isTextFakeBold() {
            return textFakeBold;
        }"
474,isTextStrikeThru,"        public boolean isTextStrikeThru() {
            return textStrikeThru;
        }"
476,isTextUnderline,"        public boolean isTextUnderline() {
            return textUnderline;
        }"
477,invalidate,"        public void invalidate() {
            this.changed = true;
            onLayoutParamsChange();
        }"
478,hasChanged,"        public boolean hasChanged() {
            return this.changed;
        }"
484,isReverse,"        public boolean isReverse() {
            return reverse;
        }"
486,isHyphenated,"        public boolean isHyphenated() {
            return hyphenated;
        }"
509,loadToPaint,"        public void loadToPaint(Paint paint) {
            paint.setTextSize(rawTextSize);
            paint.setFakeBoldText(textFakeBold);
            paint.setStrikeThruText(textStrikeThru);
            paint.setColor(textColor);
            paint.setTypeface(textTypeface);
            paint.setUnderlineText(textUnderline);
            paint.setAntiAlias(antialias);
            paint.setSubpixelText(subpixelText);
        }"
517,getTokenTextAt,"    public abstract CharSequence getTokenTextAt(int index);
"
522,getTokenForVertical,"    public abstract int getTokenForVertical(float y, TokenPosition position);
"
523,getTokenDescent,"    public abstract float getTokenDescent(int tokenIndex);
"
525,onDraw,"    protected abstract void onDraw(Canvas canvas, int startTop, int startBottom);
"
526,draw,"    public void draw(Canvas canvas, int startTop, int startBottom) {

        params.loadToPaint(paint);
"
527,onMeasure,"    protected abstract boolean onMeasure(IProgress<Float> progress, ICancel<Boolean> cancelled);
"
528,measure,"    public boolean measure(IProgress<Float> progress, ICancel<Boolean> cancelled) {

        if (!params.changed && !textChange) {
            return true;
        }
"
530,onTextNull,"    protected void onTextNull() {
        params.changed = false;
        measuredHeight = (int) (params.insetPaddingTop + params.insetPaddingBottom);
    }"
536,showToast,"    protected void showToast(String s) {
        toast.setText(s);
        toast.show();
    }"
537,onPostExecute,"            protected void onPostExecute(Void aVoid) {
                drawFadeInStartTime = System.currentTimeMillis();
                drawCompleted = true;
                invalidate();
            }"
538,doInBackground,"            protected Void doInBackground(Void... params) {
                drawRunnable.run();
                return null;
            }"
539,onPreExecute,"            protected void onPreExecute() {
                super.onPreExecute();
            }"
540,recycle,"        public void recycle() {
            if (drawTask != null) {
                drawTask.cancel(true);
                drawTask = null;"
541,isReady,"        public boolean isReady() {
            return drawCompleted;
        }"
546,drawInBackground,"        public void drawInBackground(Runnable runnable) {
            if (drawTask != null) {
                drawTask.cancel(true);
                drawTask = null;
            }

            drawCompleted = false;"
548,onCancelled,"        protected void onCancelled() {
            super.onCancelled();
            if (layoutProgressListener != null) {
                layoutProgressListener.onCancelled();"
549,onPostExecute,"        protected void onPostExecute(Boolean done) {
            if (!done || isCancelled()) {
                if (layoutProgressListener != null) {
                    layoutProgressListener.onCancelled();
                }
                return;
            }"
550,onPreExecute,"        protected void onPreExecute() {
            if (layoutProgressListener != null) {
                layoutProgressListener.onStart();"
551,doInBackground,"        protected Boolean doInBackground(Void... params) {
            try {
                return layout.measure(progress, cancelled);"
552,isCancelled,"                public Boolean isCancelled() {
                    return MeasureTask.this.isCancelled();
                }"
553,onUpdate,"                public void onUpdate(Float progress) {
                    if (layoutProgressListener != null) {
                        layoutProgressListener.onProgressUpdate(progress);"
554,get,"        public float get(float t, float b, float c, float d);
    }"
555,onProgressUpdate,"        public void onProgressUpdate(float progress);
    }"
562,destroyCache,"    public void destroyCache() {
        if (cacheBitmapTop != null) {
            cacheBitmapTop.recycle();
            cacheBitmapTop = null;"
563,freeResources,"    protected void freeResources() {
        viewportView.setMinimumHeight(minimumHeight);

        if (measureTask != null) {
            measureTask.cancel(true);"
565,allocateResources,"    public void allocateResources() {
        if (cacheBitmapTop == null) {
            cacheBitmapTop = new CacheBitmap(getWidth(), eglBitmapHeight, cacheConfig.getConfig());
        }"
567,run,"                        public void run() {
                            drawLayout(new Canvas(bottom.getBitmap()), startBottom, startBottom + eglBitmapHeight, true);
                        }"
568,run,"                        public void run() {
                            drawLayout(new Canvas(top.getBitmap()), startTop, startTop + eglBitmapHeight, true);
                        }"
569,run,"                        public void run() {
                            drawLayout(new Canvas(bottom.getBitmap()), startTop, startTop + eglBitmapHeight, true);
                        }"
571,onConfigurationChanged,"    protected void onConfigurationChanged(Configuration newConfig) {
        if (orientation != newConfig.orientation) {
            orientation = newConfig.orientation;
            freeResources();"
572,onProgressUpdate,"            public void onProgressUpdate(float progress) {
                progressBar.setProgress((int) (progress * (float) progressBar.getMax()));
            }"
573,onStart,"            public void onStart() {
                progressBar.setProgress(0);
            }"
574,onFinish,"            public void onFinish() {
                progressBar.setProgress(progressBar.getMax());
            }"
575,onCancelled,"            public void onCancelled() {
                progressBar.setProgress(progressBar.getMax());
            }"
577,onDetachedFromWindow,"    protected void onDetachedFromWindow() {
        freeResources();
        super.onDetachedFromWindow();
    }"
578,requestLayout,"    public void requestLayout() {
        measureState = MeasureTaskState.START;
        super.requestLayout();
    }"
579,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        requestDisallowInterceptTouchEvent(disallowInterceptTouch);
        return super.onTouchEvent(ev);
    }"
580,onMeasure,"    protected void onMeasure(final int widthMeasureSpec, final int heightMeasureSpec) {
        final int width = MeasureSpec.getSize(widthMeasureSpec);

        switch (measureState) {
            case FINISH_AWAIT:"
589,onStart,"            public void onStart() {
                progressBar = (ProgressBar) ((Activity) getContext()).getWindow().getDecorView().findViewById(progressBarId);
                progressBar.setProgress(0);
            }"
590,onFinish,"            public void onFinish() {
                progressBar.setProgress(progressBar.getMax());
                progressBar = null;
            }"
591,onCancelled,"            public void onCancelled() {
                progressBar.setProgress(progressBar.getMax());
                progressBar = null;
            }"
594,invalidateCache,"    public void invalidateCache() {
        if (cacheBitmapTop != null) {
            cacheBitmapTop.setStart(-1);
        }"
595,onTextChange,"                    public void onTextChange() {
                        invalidateCache();
                        requestLayout();
                    }"
596,onLayoutParamsChange,"                    public void onLayoutParamsChange() {
                        invalidateCache();
                        postInvalidate();
                    }"
600,onAttachedToWindow,"    protected void onAttachedToWindow() {
        orientation = getResources().getConfiguration().orientation;
        super.onAttachedToWindow();
    }"
601,initPaint,"    protected void initPaint(Paint paint) {
        paint.setTypeface(Typeface.defaultFromStyle(Typeface.NORMAL));
        paint.setTextSize(34);
        paint.setAntiAlias(true);
    }"
611,isDisallowInterceptTouch,"    public boolean isDisallowInterceptTouch() {
        return disallowInterceptTouch;
    }"
613,get,"            public float get(float t, float b, float c, float d) {
                return c * t / d + b;
            }"
614,log,"    public static <T> void log(T s) {
        android.util.Log.d("""", s == null ? ""null"" : s.toString());
    }"
615,log,"    public static void log(boolean s) {
        android.util.Log.d("""", s + """");
    }"
616,log,"    public static void log(float s) {
        android.util.Log.d("""", s + """");
    }"
617,log,"    public static void log(double s) {
        android.util.Log.d("""", s + """");
    }"
618,log,"    public static void log(long s) {
        android.util.Log.d("""", s + """");
    }"
619,log,"    public static void log(int s) {
        android.util.Log.d("""", s + """");
    }"
620,log,"    public static void log(String s) {
        android.util.Log.d("""", s);
    }"
621,log,"    public static void log(String tag, boolean s) {
        android.util.Log.d(tag, s + """");
    }"
622,log,"    public static void log(String tag, float s) {
        android.util.Log.d(tag, s + """");
    }"
623,log,"    public static void log(String tag, double s) {
        android.util.Log.d(tag, s + """");
    }"
624,log,"    public static void log(String tag, long s) {
        android.util.Log.d(tag, s + """");
    }"
625,log,"    public static void log(String tag, int s) {
        android.util.Log.d(tag, s + """");
    }"
626,log,"    public static void log(String tag, String s) {
        android.util.Log.d(tag, s);
    }"
627,remove,"        public void remove() {
            itr.remove();
        }"
628,next,"        public E next() {
            return itr.previous();
        }"
629,hasNext,"        public boolean hasNext() {
            return itr.hasPrevious();
        }"
630,set,"        public void set(E e) {
            if (lastReturned == header)
                throw new IllegalStateException();
            lastReturned.element = e;"
631,remove,"        public void remove() {
            Entry<E> lastNext = lastReturned.next;
            try {
                ConcurrentModifiableLinkedList.this.remove(lastReturned);
            } catch (NoSuchElementException e) {
                throw new IllegalStateException();"
632,previousIndex,"        public int previousIndex() {
            return nextIndex - 1;
        }"
633,previous,"        public E previous() {
            if (nextIndex == 0)
                throw new NoSuchElementException();

            lastReturned = next = next.previous;
            nextIndex--;"
634,nextIndex,"        public int nextIndex() {
            return nextIndex;
        }"
635,next,"        public E next() {
            if (nextIndex == size)
                throw new NoSuchElementException();

            lastReturned = next;
            next = next.next;
            nextIndex++;"
636,hasPrevious,"        public boolean hasPrevious() {
            return nextIndex != 0;
        }"
637,hasNext,"        public boolean hasNext() {
            return nextIndex != size;
        }"
638,add,"        public void add(E e) {
            lastReturned = header;
            addBefore(e, next);
            nextIndex++;
        }"
642,descendingIterator,"    public Iterator<E> descendingIterator() {
        return new DescendingIterator();
    }"
643,remove,"    private E remove(Entry<E> e) {
        if (e == header)
            throw new NoSuchElementException();

        E result = e.element;
        e.previous.next = e.next;
        e.next.previous = e.previous;
        e.next = e.previous = null;
        e.element = null;
        size--;
        modCount++;"
644,addBefore,"    private Entry<E> addBefore(E e, Entry<E> entry) {
        Entry<E> newEntry = new Entry<E>(e, entry, entry.previous);
        newEntry.previous.next = newEntry;
        newEntry.next.previous = newEntry;
        size++;
        modCount++;
        return newEntry;
    }"
645,removeLastOccurrence,"    public boolean removeLastOccurrence(Object o) {
        if (o == null) {
            for (Entry<E> e = header.previous; e != header; e = e.previous) {
                if (e.element == null) {"
646,removeFirstOccurrence,"    public boolean removeFirstOccurrence(Object o) {
        return remove(o);
    }"
649,pollLast,"    public E pollLast() {
        if (size == 0)
            return null;
        return removeLast();"
650,pollFirst,"    public E pollFirst() {
        if (size == 0)
            return null;
        return removeFirst();"
651,peekLast,"    public E peekLast() {
        if (size == 0)
            return null;
        return getLast();"
652,peekFirst,"    public E peekFirst() {
        if (size == 0)
            return null;
        return getFirst();"
653,offerLast,"    public boolean offerLast(E e) {
        addLast(e);
        return true;
    }"
654,offerFirst,"    public boolean offerFirst(E e) {
        addFirst(e);
        return true;
    }"
655,offer,"    public boolean offer(E e) {
        return add(e);
    }"
656,remove,"    public E remove() {
        return removeFirst();
    }"
657,poll,"    public E poll() {
        if (size == 0)
            return null;
        return removeFirst();"
659,peek,"    public E peek() {
        if (size == 0)
            return null;
        return getFirst();"
660,entry,"    private Entry<E> entry(int index) {
        if (index < 0 || index >= size)
            throw new IndexOutOfBoundsException(""Index: "" + index +
                    "", Size: "" + size);
        Entry<E> e = header;
        if (index < (size >> 1)) {"
661,set,"    public E set(int index, E element) {
        Entry<E> e = entry(index);
        E oldVal = e.element;
        e.element = element;
        return oldVal;
    }"
662,remove,"    public E remove(int index) {
        return remove(entry(index));
    }"
663,listIterator,"    public ListIterator<E> listIterator(int index) {
        return new ListItr(index);
    }"
664,get,"    public E get(int index) {
        return entry(index).element;
    }"
666,add,"    public void add(int index, E element) {
        addBefore(element, (index == size ? header : entry(index)));
    }"
667,toArray,"    public <T> T[] toArray(T[] a) {
        if (a.length < size)
            a = (T[]) java.lang.reflect.Array.newInstance(
                    a.getClass().getComponentType(), size);
        int i = 0;
        Object[] result = a;
        for (Entry<E> e = header.next; e != header; e = e.next)
            result[i++] = e.element;"
668,toArray,"    public Object[] toArray() {
        Object[] result = new Object[size];
        int i = 0;
        for (Entry<E> e = header.next; e != header; e = e.next)
            result[i++] = e.element;
        return result;"
670,remove,"    public boolean remove(Object o) {
        if (o == null) {
            for (Entry<E> e = header.next; e != header; e = e.next) {
                if (e.element == null) {"
671,contains,"    public boolean contains(Object o) {
        return indexOf(o) != -1;
    }"
672,addAll,"    public boolean addAll(Collection<? extends E> c) {
        return addAll(size, c);
    }"
673,lastIndexOf,"    public int lastIndexOf(Object o) {
        int index = size;
        if (o == null) {
            for (Entry e = header.previous; e != header; e = e.previous) {
                index--;"
674,indexOf,"    public int indexOf(Object o) {
        int index = 0;
        if (o == null) {
            for (Entry e = header.next; e != header; e = e.next) {
                if (e.element == null)"
675,clear,"    public void clear() {
        Entry<E> e = header.next;
        while (e != header) {
            Entry<E> next = e.next;
            e.next = e.previous = null;
            e.element = null;
            e = next;"
676,add,"    public boolean add(E e) {
        addBefore(e, header);
        return true;
    }"
677,addLast,"    public void addLast(E e) {
        addBefore(e, header);
    }"
678,addFirst,"    public void addFirst(E e) {
        addBefore(e, header.next);
    }"
679,removeLast,"    public E removeLast() {
        return remove(header.previous);
    }"
680,removeFirst,"    public E removeFirst() {
        return remove(header.next);
    }"
689,setyLocation,"    public void setyLocation(float yLocation) {
        this.yLocation = yLocation;
    }"
690,getyLocation,"    public float getyLocation() {
        return yLocation;
    }"
691,setxLocation,"    public void setxLocation(float xLocation) {
        this.xLocation = xLocation;
    }"
692,getxLocation,"    public float getxLocation() {
        return xLocation;
    }"
715,login,"    public String login(String account) {
        User user = userService.login(account);
        DTO dto = new DTO();
        if (user == null) {
            dto.code = ""-1"";
            dto.msg = ""Have not registered"";"
716,queryTopN,"    public String queryTopN() {
        List<User> userList = null;
        try {
            Set<String> resultSet = jedisClient.zgetAll(""Toptest"", (long) 0, (long) 20);
            System.out.println(""resultSet    "" + resultSet.toString());
            Iterator<String> iter = resultSet.iterator();"
717,queryById,"    public String queryById(Long id) {
        User user = userService.queryById(id);
        return JSON.toJSONString(user);
    }"
718,deleteUser,"    public String deleteUser(Long id) {
        int t = userService.deleteUser(id);
        return JSON.toJSONString(t);
    }"
719,queryAll,"    public String queryAll() {
        List<User> userList = userService.queryAll();
        return JSON.toJSONString(userList);
    }"
720,insertUser,"    public String insertUser(String account, String country) {
        User user = new User();
        user.setAccount(account);
        user.setCountry(country);
        userService.insertUser(user);
        return JSON.toJSONString(user);
    }"
723,queryLimit,"    public String queryLimit(int offset,  int limit) {
        List<Score>scoreList = scoreService.queryLimit(offset,limit);
        return JSON.toJSONString(scoreList);
    }"
724,updateScore,"    public String updateScore(Long id,Integer scoreCount) {
        User user = userService.queryById(id);
        scoreService.updateScore(user,scoreCount);
        return JSON.toJSONString(user);
    }"
727,loginOut,"    public String loginOut(HttpServletRequest request, HttpServletResponse response) {
        CookieUtil.deleteCookie(response,""isLogin"");
        return ""redirect:loginPage"";
    }"
728,accusationPage,"    public String accusationPage(HttpServletRequest request) {
        return ""success"";
    }"
729,login,"    public String login(HttpServletRequest request, HttpServletResponse response, RedirectAttributes model, String account, String password) {
        if (""fuzhu"".equals(account) && ""fuzhucheng"".equals(password)) {
            Map<String, Object> loginInfo = new HashMap<>();"
730,loginPage,"    public String loginPage(HttpServletRequest request, String account, String password) {
        return ""login"";
    }"
734,findUserByProvince,"    public String findUserByProvince(String location){
        List<User> userList = userService.findUserByProvince(location);
        System.out.println(JSON.toJSONString(userList));
        return JSON.toJSONString(userList);
    }"
735,findGoodInfo,"    public String findGoodInfo(HttpServletRequest request,String location){
        List<GoodDetails>  goodlist =  goodService.getGoodList(location);
        request.setAttribute(""goodslist"",goodlist);
        return ""testajax"";
    }"
736,onDestroyView,"  @Override public void onDestroyView() {
    super.onDestroyView();
    unbinder.unbind();
  }"
737,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_step_size_and_gravity, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
740,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_stars_separation, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
743,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_size_of_stars, container, false);
    unbinder = ButterKnife.bind(this, view);
    setHasOptionsMenu(true);
"
744,onClick,"  public void onClick(View view) {
    Toast.makeText(getContext(), ""Clicked!"", Toast.LENGTH_SHORT).show();
  }"
745,onRatingChanged,"  public void onRatingChanged(SimpleRatingBar simpleRatingBar, float rating, boolean fromUser) {
    String text = String.format(""%.2f"", rating);
    if (simpleRatingBar == ratingBar1) {
      rating1.setText(text);"
747,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_rating_changed_listener, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);
"
750,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_number_of_stars, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
753,onCreateOptionsMenu,"  public boolean onCreateOptionsMenu(Menu menu) {
    MenuInflater inflater = getMenuInflater();
    inflater.inflate(R.menu.menu_main, menu);
    return true;
  }"
760,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_corner_radius, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
763,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_border_width, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
765,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_background_colors, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
767,startAnimations,"  private void startAnimations() {
    ratingBar1.getAnimationBuilder()
        .setRepeatCount(ValueAnimator.INFINITE)
        .setRepeatMode(ValueAnimator.REVERSE)
        .setInterpolator(new LinearInterpolator())
        .setRatingTarget(4)
        .start();"
768,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_animated, container, false);
    unbinder = ButterKnife.bind(this, view);

    startAnimations();"
769,onSecondaryPointerUp,"    private void onSecondaryPointerUp(MotionEvent ev) {
        final int pointerIndex = MotionEventCompat.getActionIndex(ev);
        final int pointerId = MotionEventCompat.getPointerId(ev, pointerIndex);
        if (pointerId == mActivePointerId) {
            final int newPointerIndex = pointerIndex == 0 ? 1 : 0;"
771,dip2px,"    private int dip2px(int dipValue) {
        return (int) (dipValue * mDensity + 0.5f);
    }"
773,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        mHalfWidth = w - dip2px(16);
        mHalfHeight = h - getPaddingTop() - getPaddingBottom();

        float lettersLen = getLettersSize();

        mLetterHeight = mHalfHeight / lettersLen;
        int textSize = (int) (mHalfHeight * 0.7f / lettersLen);
        this.mPaint.setTextSize(textSize);"
774,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        final int action = MotionEventCompat.getActionMasked(ev);
        switch (action) {
            case MotionEvent.ACTION_DOWN:
                mActivePointerId = MotionEventCompat.getPointerId(ev, 0);"
778,onClick,"            public void onClick(View v) {
                textView.setText(""OnClick "");
            }"
779,onTouchingLetterChanged,"            public void onTouchingLetterChanged(String s) {
                Log.d(TAG, ""select "" + s);
                textView.setText(""select "" + s);
            }"
782,showFragmentPage,"    private void showFragmentPage() {
        new FragmentDemo().showFragment(getSupportFragmentManager());
    }"
784,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main_menu, menu);
        return true;
    }"
790,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_list_demo);
        listView = findViewById(R.id.list);
        listView.setAdapter(new ListAdapter());
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS, WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);
"
791,hideFragment,"    public void hideFragment() {
        fragmentManager.popBackStack();
    }"
792,showFragment,"    public void showFragment(final FragmentManager fragmentManager) {
        this.fragmentManager = fragmentManager;
        FragmentTransaction transaction = fragmentManager.beginTransaction();
        transaction.setCustomAnimations(
                R.anim.fragmentv_slide_bottom_enter,
                0,
                0,
                R.anim.fragmentv_slide_top_exit);"
794,onResume,"    public void onResume() {
        initData();
        super.onResume();
    }"
795,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        rootView = inflater.inflate(R.layout.common_fragment, null);
        return rootView;
    }"
796,onClick,"            public void onClick(View v) {
                mScrollLayout.setToOpen();
            }"
797,onClick,"            public void onClick(View v) {
                mScrollLayout.scrollToExit();
            }"
799,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_three);
        initView();
    }"
801,onScrollFinished,"        public void onScrollFinished(ScrollLayout.Status currentStatus) {
            if (currentStatus.equals(ScrollLayout.Status.EXIT)) {
                text_foot.setVisibility(View.VISIBLE);"
802,onScrollProgressChanged,"        public void onScrollProgressChanged(float currentProgress) {
            if (currentProgress >= 0) {
                float precent = 255 * currentProgress;
                if (precent > 255) {"
803,initGirlUrl,"    private void initGirlUrl() {
        mAllAddressList = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            Address address = new Address();"
804,onClick,"            public void onClick(View v) {
                onBackPressed();
            }"
806,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second);
        initGirlUrl();
        initView();
    }"
808,onPageSelected,"        public void onPageSelected(int position) {
            mGirlDesText.setText(mAllAddressList.get(position).getDesContent());
        }"
809,onPageScrolled,"        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
"
811,onScrollFinished,"        public void onScrollFinished(ScrollLayout.Status currentStatus) {
            if (currentStatus.equals(ScrollLayout.Status.EXIT)) {
                finish();"
812,onScrollProgressChanged,"        public void onScrollProgressChanged(float currentProgress) {
            if (currentProgress >= 0) {
                float precent = 255 * currentProgress;"
815,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, SecondActivity.class));
            }"
818,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();
    }"
824,calculateInSampleSize,"    private int calculateInSampleSize(int imgWidth, int imgHeight, int maxWidth, int maxHeight) {
        int inSampleSize = 1;
        while (imgWidth / inSampleSize > maxWidth || imgHeight / inSampleSize > maxHeight) {
            inSampleSize *= 2;
        }"
825,scroll,"    private void scroll(View thumbnail) {
        int thumbnailCoords[] = new int[2];
        thumbnail.getLocationOnScreen(thumbnailCoords);

        int thumbnailCenterX = thumbnailCoords[0] + thumbnailSize / 2;
        int thumbnailDelta = displayProps.x / 2 - thumbnailCenterX;
"
826,initializeViewPager,"    private void initializeViewPager() {
        viewPager = (HackyViewPager) findViewById(R.id.viewPager);

        pagerAdapter = new ScreenSlidePagerAdapter(
                fragmentManager, 
                mListOfMedia, "
827,createThumbnail,"    private Bitmap createThumbnail(Bitmap image) {
        return ThumbnailUtils.extractThumbnail(image, thumbnailSize, thumbnailSize);
    }"
829,addThumbnail,"    private ImageView addThumbnail(Bitmap image) {
        LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(thumbnailSize, thumbnailSize);
        lp.setMargins(10, 10, 10, 10);
        Bitmap thumbnail = createThumbnail(image);

        ImageView thumbnailView = createThumbnailView(lp, thumbnail);
        thumbnailsContainer.addView(thumbnailView);
        return thumbnailView;"
830,removeThumbnail,"    private void removeThumbnail(int position) {
        View thumbnail = thumbnailsContainer.getChildAt(position);
        if (thumbnail == null) {
            return;
        }"
834,run,"            public void run() {
                hideThumbnails();
                isThumbnailsHidden = !isThumbnailsHidden;
            }"
835,hideThumbnailsAfterDelay,"    private void hideThumbnailsAfterDelay(int delay) {
        horizontalScrollView.postDelayed(new Runnable() {
            @Override"
836,from,"    public static GalleryBuilder from(ScrollGalleryView galleryView) {
        return new GalleryBuilderImpl(galleryView);
    }"
837,removeMedia,"    public void removeMedia(int position) {
        if (position >= mListOfMedia.size() || position < 0) {
            return;
        }
        pagerAdapter.removeItem(position);"
839,hideThumbnails,"    public void hideThumbnails() {
        setThumbnailsTransition();
        horizontalScrollView.setVisibility(GONE);
    }"
841,hideThumbnailsAfter,"    public ScrollGalleryView hideThumbnailsAfter(int hideThumbnailsAfterDelay) {
        if (!isThumbnailsHidden) {
            this.hideThumbnailsAfterDelay = hideThumbnailsAfterDelay;
        }"
842,hideThumbnailsOnClick,"    public ScrollGalleryView hideThumbnailsOnClick(boolean hideThumbnailsOnClick, Transition thumbnailsTransition) {
        if (!isThumbnailsHidden) {
            this.hideThumbnailsOnClick = hideThumbnailsOnClick;
            this.thumbnailsTransition = thumbnailsTransition;"
843,hideThumbnailsOnClick,"    public ScrollGalleryView hideThumbnailsOnClick(boolean hideThumbnailsOnClick) {
        if (!isThumbnailsHidden) {
            this.hideThumbnailsOnClick = hideThumbnailsOnClick;
            if (hideThumbnailsOnClick) this.useDefaultThumbnailsTransition = true;"
844,withHiddenThumbnails,"    public ScrollGalleryView withHiddenThumbnails(boolean isThumbnailsHidden) {
        if (this.isThumbnailsHidden && !isThumbnailsHidden) {
            showThumbnails();
        } else if (!this.isThumbnailsHidden && isThumbnailsHidden) {
            hideThumbnails();"
849,onSuccess,"                public void onSuccess() {
                    thumbnail.setScaleType(ImageView.ScaleType.FIT_CENTER);
                }"
850,addMedia,"    public ScrollGalleryView addMedia(List<MediaInfo> infos) {
        if (infos == null) {
            throw new NullPointerException(""Infos may not be null!"");
        }
"
851,addMedia,"    public ScrollGalleryView addMedia(MediaInfo mediaInfo) {
        if (mediaInfo == null) {
            throw new NullPointerException(""Infos may not be null!"");
        }"
852,onPageScrollStateChanged,"            @Override public void onPageScrollStateChanged(int state) {
                listener.onPageScrollStateChanged(state);
            }"
853,onPageSelected,"            @Override public void onPageSelected(int position) {
                scroll(thumbnailsContainer.getChildAt(position));
                listener.onPageSelected(position);
            }"
854,onPageScrolled,"            @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
                listener.onPageScrolled(position, positionOffset, positionOffsetPixels);
            }"
855,addOnPageChangeListener,"    public void addOnPageChangeListener(final ViewPager.OnPageChangeListener listener) {
        viewPager.clearOnPageChangeListeners();
        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {"
856,addOnImageLongClickListener,"    public ScrollGalleryView addOnImageLongClickListener(OnImageLongClickListener onImageLongClickListener) {
        this.onImageLongClickListener = onImageLongClickListener;
        return this;
    }"
857,addOnImageClickListener,"    public ScrollGalleryView addOnImageClickListener(OnImageClickListener onImageClickListener) {
        this.onImageClickListener = onImageClickListener;
        return this;
    }"
862,onClick,"        public void onClick(int position) {
            if (onImageLongClickListener != null) onImageLongClickListener.onClick(position);
        }"
863,onClick,"        public void onClick(int position) {
            if (hideThumbnailsOnClick) {
                if (isThumbnailsHidden) {
                    showThumbnails();"
864,onClick,"        @Override public void onClick(View v) {
            scroll(v);
            viewPager.setCurrentItem((int) v.getId(), true);
        }"
865,onPageSelected,"        @Override public void onPageSelected(int position) {
            scroll(thumbnailsContainer.getChildAt(position));
        }"
868,removeItem,"    public void removeItem(int position) {
        mListOfMedia.remove(position);
        notifyDataSetChanged();
    }"
873,mediaLoader,"    public static MediaInfo mediaLoader(MediaLoader mediaLoader) {
        return new MediaInfo().setLoader(mediaLoader);
    }"
874,isBackgroundImageActive,"    private boolean isBackgroundImageActive() {
        return photoView != null && photoView.getDrawable() != null;
    }"
875,isViewPagerActive,"    private boolean isViewPagerActive() {
        return viewPager != null;
    }"
876,onSaveInstanceState,"    public void onSaveInstanceState(@NonNull Bundle outState) {
        if (isViewPagerActive()) {
            outState.putBoolean(Constants.IS_LOCKED, viewPager.isLocked());
        }"
880,onLongClick,"                public boolean onLongClick(View v) {
                    onImageLongClickListener.onClick(getPosition());
                    return true;
                }"
881,onClick,"                public void onClick(View view) {
                    onImageClickListener.onClick(getPosition());
                }"
887,isLocked,"    public boolean isLocked() {
        return isLocked;
    }"
889,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        return !isLocked && super.onTouchEvent(ev);
    }"
890,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent ev) {
        if(!isLocked) {
            try {
                return super.onInterceptTouchEvent(ev);"
891,showToast,"    private void showToast(String msg) {
        Toast.makeText(this, msg, Toast.LENGTH_SHORT).show();
    }"
892,onError,"                    public void onError(ApiException e) {
                        super.onError(e);
                        showToast(e.getMessage());
                    }"
893,onSuccess,"                    public void onSuccess(String s) {
                        showToast(s);
                    }"
895,onUploadOne,"    public void onUploadOne(View view) {
        File file = new File(Environment.getExternalStorageDirectory().getPath()+""/1.jpg"");
        UIProgressResponseCallBack mUIProgressResponseCallBack = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {"
897,onSuccess,"                    public void onSuccess(String response) {
                        showToast(response);
                    }"
899,onUploadFileMaps2,"    public void onUploadFileMaps2(View view) {
        File file = new File(Environment.getExternalStorageDirectory().getPath()+""/1.jpg"");
        UIProgressResponseCallBack mUIProgressResponseCallBack = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {"
903,onUploadFileMaps,"    public void onUploadFileMaps(View view) {
        File file = new File(Environment.getExternalStorageDirectory().getPath()+""/1.jpg"");
        UIProgressResponseCallBack mUIProgressResponseCallBack = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {"
911,onUploadInputStream,"    public void onUploadInputStream(View view) throws Exception {
        final UIProgressResponseCallBack listener = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {
                int progress = (int) (bytesRead * 100 / contentLength);"
915,onUploadFile,"    public void onUploadFile(View view) throws Exception {
        final UIProgressResponseCallBack listener = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {
                int progress = (int) (bytesRead * 100 / contentLength);"
917,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_upload);
    }"
918,onDestroy,"    protected void onDestroy() {
        EasyHttp.cancelSubscription(mDisposable);
        super.onDestroy();
    }"
919,onNext,"                    public void onNext(@NonNull Content2 content) {
                        mTextView.setText(content.toString());
                    }"
920,onError,"                    public void onError(ApiException e) {
                        mTextView.setText(e.getMessage());
                    }"
921,onStart,"                    protected void onStart() {
                    }"
925,findView,"    protected <T extends View> T findView(@IdRes int id) {
        return (T) findViewById(id);
    }"
926,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_search);
        mEditText = findView(R.id.edit_text);
        mTextView = findView(R.id.content_text);
        search();
    }"
927,showToast,"    private void showToast(String msg) {
        Toast.makeText(this, msg, Toast.LENGTH_LONG).show();
    }"
928,onFrequentlyRquest,"    public void onFrequentlyRquest(View view) {
        Intent intent = new Intent(SceneActivity.this, SearchActivity.class);
        startActivity(intent);
    }"
930,onNext,"            public void onNext(@NonNull ResultBean resultBean) {
                showToast(resultBean.toString());
            }"
931,onError,"            public void onError(ApiException e) {
                showToast(e.getMessage());
            }"
939,onNext,"            public void onNext(@NonNull List<Object> objects) {
                showToast(objects.toString());
            }"
943,onNext,"            public void onNext(SkinTestResult skinTestResult) {
                showToast(skinTestResult.toString());
            }"
944,onError,"            public void onError(ApiException e) {
                super.onError(e);
                showToast(e.getMessage());
            }"
946,onPoll,"    public void onPoll(View view) {
        Intent intent = new Intent(SceneActivity.this, PollActivity.class);
        startActivity(intent);
    }"
947,onNext,"            public void onNext(@NonNull SkinTestResult skinTestResult) {
                showToast(skinTestResult.toString());
            }"
950,apply,"            public ObservableSource<SkinTestResult> apply(@NonNull Long aLong) throws Exception {
                Log.i(""test"", ""====="" + aLong);
                return EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                        .timeStamp(true)"
953,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scene);
    }"
955,onDestroy,"    protected void onDestroy() {
        EasyHttp.cancelSubscription(polldisposable);
        EasyHttp.cancelSubscription(countdisposable);
        EasyHttp.cancelSubscription(ifdisposable);
        EasyHttp.cancelSubscription(filterdisposable);
        super.onDestroy();
    }"
956,onNext,"            public void onNext(@NonNull Content content) {
                showToast(content.toString());
            }"
960,onPollFilter,"    public void onPollFilter(View view) {
        filterdisposable = Observable.interval(0, 5, TimeUnit.SECONDS).flatMap(new Function<Long, ObservableSource<Content>>() {
            @Override"
972,apply,"                                    public ObservableSource<? extends Content> apply(@NonNull Throwable throwable) throws Exception {
                                        return Observable.empty();
                                    }"
974,apply,"            public ObservableSource<Content> apply(@NonNull Long aLong) throws Exception {
                return Observable.timer(5, TimeUnit.SECONDS).flatMap(new Function<Long, ObservableSource<Content>>() {
                    @Override"
976,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_poll);
    }"
978,verify,"        public boolean verify(String hostname, SSLSession session) {
            HttpLog.i(""############### verify "" + hostname + "" "" + this.host);
            if (this.host == null || """".equals(this.host) || !this.host.contains(hostname))
                return false;
            return true;"
981,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
    }"
982,onScene,"    public void onScene(View view) {
        Intent intent = new Intent(MainActivity.this, SceneActivity.class);
        startActivity(intent);
    }"
983,onNext,"            public void onNext(List<SectionItem> sectionItems) {
                showToast(sectionItems.toString());
            }"
986,onCustomApiResult,"    public void onCustomApiResult(View view) {
        Intent intent = new Intent(this, CustomApiActivity.class);
        startActivity(intent);
    }"
987,accept,"            public void accept(@NonNull Throwable throwable) throws Exception {
                showToast(throwable.getMessage());
            }"
988,accept,"            public void accept(@NonNull AuthModel authModel) throws Exception {
                showToast(authModel.toString());
            }"
989,onCustomApiCall,"    public void onCustomApiCall(View view) {
        final String name = ""18688994275"";
        final String pass = ""123456"";
        final CustomRequest request = EasyHttp.custom()
                .addConverterFactory(GsonConverterFactory.create(new Gson()))
                .sign(true)
                .timeStamp(true)
                .params(ComParamContact.Login.ACCOUNT, name)"
991,accept,"            public void accept(@NonNull ApiResult<AuthModel> result) throws Exception {
                showToast(result.toString());
            }"
993,onCache,"    public void onCache(View view) {
        Intent intent = new Intent(this, CacheActivity.class);
        startActivity(intent);
    }"
994,run,"                                    public void run() {
                                        if (response != null) showToast(response.toString());
                                    }"
996,run,"                                    public void run() {
                                        showToast(e.getMessage());
                                    }"
997,onError,"                            public void onError(final ApiException e) {
                                mHandler.post(new Runnable() {
                                    @Override"
1003,onSync,"    public void onSync(View view) {
        new Thread(new Runnable() {
            @Override"
1004,onDownloadFile,"    public void onDownloadFile(View view) {
        Intent intent = new Intent(this, DownloadActivity.class);
        startActivity(intent);
    }"
1005,onUploadFile,"    public void onUploadFile(View view) {
        Intent intent = new Intent(this, UploadActivity.class);
        startActivity(intent);
    }"
1008,onProgressSubscriber,"    public void onProgressSubscriber(View view) {
        Observable<SkinTestResult> observable = EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)
                .execute(SkinTestResult.class);"
1011,onObservable,"    public void onObservable(View view) {
        Observable<SkinTestResult> observable = EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)
                .execute(SkinTestResult.class);"
1012,onSuccess,"                    public void onSuccess(SkinTestResult response) {
                        showToast(response.toString());
                    }"
1013,onError,"                    public void onError(ApiException e) {
                        showToast(e.getMessage());
                    }"
1014,onSubscription,"    public void onSubscription(View view) {
        Disposable disposable = EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)"
1017,onProgressDialogCallBack,"    public void onProgressDialogCallBack(View view) {
        EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)"
1037,onError,"                    public void onError(ApiException e) {
                        showToast(e.getMessage() + ""  "" + e.getCode());
                    }"
1041,onPost,"    public void onPost(View view) {
        EasyHttp.post(""v1/app/chairdressing/news/favorite"")
                .params(""newsId"", ""552"")"
1042,onSuccess,"                    public void onSuccess(SkinTestResult response) {
                        if (response != null) showToast(response.toString());
                    }"
1045,onLogin,"    public void onLogin(View view) {
        Intent intent = new Intent(MainActivity.this, LoginActivity.class);
        startActivity(intent);
    }"
1046,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        switch (id) {
            case R.id.adout_layout:
                Intent intent = new Intent(MainActivity.this, AboutActivity.class);"
1047,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }"
1048,subscribe,"            public void subscribe(@NonNull ObservableEmitter<String> e) throws Exception {
                FileUtils.getFileFromAsset(MainActivity.this, ""1.jpg"");
            }"
1049,accept,"            public void accept(@NonNull String s) throws Exception {
"
1051,showToast,"    private void showToast(String msg) {
        Toast.makeText(LoginActivity.this, msg, Toast.LENGTH_SHORT).show();
    }"
1052,startAppSettings,"    public void startAppSettings() {
        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
        intent.setData(Uri.parse(""package:"" + getPackageName()));
        startActivity(intent);
    }"
1053,onClick,"            public void onClick(DialogInterface dialog, int which) {
                startAppSettings();
            }"
1054,onClick,"            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }"
1058,onClick,"                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }"
1060,autoLogin,"    private void autoLogin() {
        LoginInfo loginCache = LoginCache.getInstance().get();
        if (loginCache != null) {
            final String user = loginCache.getUsername();"
1065,isPasswordValid,"    private boolean isPasswordValid(String password) {
        return Validator.isPassword(password);
    }"
1066,isEmailValid,"    private boolean isEmailValid(String email) {
        return Validator.isMobile(email) || Validator.isEmail(email);
    }"
1067,attemptLogin,"    private void attemptLogin() {
        mEmailView.setError(null);
        mPasswordView.setError(null);

        String email = mEmailView.getText().toString();
        String password = mPasswordView.getText().toString();

        boolean cancel = false;
        View focusView = null;

        if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {"
1068,onClick,"            public void onClick(View view) {
                attemptLogin();
            }"
1069,onEditorAction,"            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {
                if (id == R.id.login || id == EditorInfo.IME_NULL) {
                    attemptLogin();
                    return true;"
1072,onError,"                    public void onError(ApiException e) {
                        showToast(e.getMessage());
                        dialog.dismiss();
                    }"
1074,onStart,"                    public void onStart() {
                        dialog.show();
                    }"
1077,onError,"                    public void onError(final ApiException e) {
                        HttpLog.i(""======""+Thread.currentThread().getName());
                        showToast(e.getMessage());
                        dialog.dismiss();
                    }"
1079,onStart,"                    public void onStart() {
                        HttpLog.i(""======""+Thread.currentThread().getName());
                        dialog.show();
                    }"
1084,onSuccess,"                    public void onSuccess(Result result) {
                        if (result != null) showToast(result.toString());
                    }"
1087,onSuccess,"                    public void onSuccess(ArticleBean result) {
                        if (result != null) showToast(result.toString());
                    }"
1090,onSuccess,"                    public void onSuccess(List<FriendsListBean> result) {
                        if (result != null) showToast(result.toString());
                    }"
1096,onSuccess,"                    public void onSuccess(List<String> result) {
                        if (result != null) showToast(result.toString());
                    }"
1102,onSuccess,"                    public void onSuccess(ResultBean response) {
                        if (response != null) showToast(response.toString());
                    }"
1106,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_custom_api);
    }"
1111,onClearCache,"    public void onClearCache(View view) {
        EasyHttp.clearCache();
    }"
1112,onRemoveCache,"    public void onRemoveCache(View view) {
        EasyHttp.removeCache(this.getClass().getSimpleName());
    }"
1114,onError,"                    public void onError(@NonNull Throwable e) {
                        showToast(e.getMessage());
                    }"
1115,onNext,"                    public void onNext(@NonNull SkinTestResult skinTestResult) {
                        showToast(skinTestResult.toString());
                    }"
1116,onSubscribe,"                    public void onSubscribe(@NonNull Disposable d) {
"
1126,schedule,"    public Completable schedule() {
        return Completable.create(this);
    }"
1127,onAnimationEnd,"            public void onAnimationEnd(final Animator animation) {
                valueAnimator.removeAllListeners();
                completableSubscriber.onCompleted();
            }"
1128,onAnimationCancel,"            public void onAnimationCancel(final Animator animation) {
                animationCancelAction.call(valueAnimator);
            }"
1129,call,"    public void call(final CompletableSubscriber completableSubscriber) {
        completableSubscriber.onSubscribe(new ClearSubscription(valueAnimator::end));
        valueAnimator.addUpdateListener(valueUpdateAction::call);
        valueAnimator.start();
        valueAnimator.addListener(new AnimatorListenerAdapter() {
"
1130,from,"    public static RxValueAnimator from(final ValueAnimator valueAnimator, final Action1<ValueAnimator> valueUpdateAction,
                                       final Action1<ValueAnimator> animationCancelAction) {
        return new RxValueAnimator(valueAnimator, valueUpdateAction, animationCancelAction);"
1131,from,"    public static RxValueAnimator from(final ValueAnimator valueAnimator, final Action1<ValueAnimator> valueUpdateAction) {
        return new RxValueAnimator(valueAnimator, valueUpdateAction, aValueAnimator -> {});
    }"
1132,end,"    public void end() {
        valueAnimator.end();
        valueUpdateSubject.onCompleted();
    }"
1134,checkSubject,"    private void checkSubject() {
        if (valueUpdateSubject.hasCompleted() || valueUpdateSubject.hasThrowable()) {
            valueUpdateSubject = BehaviorSubject.create();"
1135,scheduleReversed,"    public Observable<Object> scheduleReversed() {
        checkSubject();
        valueAnimator.reverse();
        return valueUpdateSubject;
    }"
1136,schedule,"    public Observable<Object> schedule() {
        checkSubject();
        valueAnimator.start();
        return valueUpdateSubject;
    }"
1137,onAnimationEnd,"            public void onAnimationEnd(final Animator animation) {
                valueUpdateSubject.onCompleted();
            }"
1138,from,"    public static RxObservableValueAnimator from(final ValueAnimator valueAnimator) {
        return new RxObservableValueAnimator(valueAnimator);
    }"
1139,set,"    public static void set(final View view, final float x, final float y, final float alpha, final float rotation) {
        set(view, x, y, alpha);
        view.setRotation(rotation);
    }"
1140,set,"    public static void set(final View view, final float x, final float y, final float alpha) {
        view.setAlpha(alpha);
        view.setX(x);
        view.setY(y);
    }"
1141,doAfterDelay,"    public static Completable doAfterDelay(final int delay, final Action0 action) {
        return Completable.timer(delay, TimeUnit.MILLISECONDS)
                          .observeOn(AndroidSchedulers.mainThread())"
1142,fadeOut,"    public static Completable fadeOut(final View view, final int duration, final int delay) {
        return animate(view, duration, delay)
                .interpolator(new AccelerateInterpolator())"
1143,fadeOut,"    public static Completable fadeOut(final View view, final int duration) {
        return animate(view, new AccelerateInterpolator())
                .duration(duration)"
1144,fadeOut,"    public static Completable fadeOut(final View view) {
        return animate(view, new AccelerateInterpolator())
                .fadeOut()"
1145,leave,"    public static Completable leave(final View view, final int xOffset, final int yOffset) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, new AccelerateInterpolator())
                .fadeOut()"
1146,enterWithRotation,"    public static Completable enterWithRotation(final View view, final int duration, final int xOffset, final int yOffset, final int delay, final int rotation) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        final float startRotation = view.getRotation();
        return animate(view, duration, delay)
                .fadeIn()"
1147,enterViewsWithDelay,"    public static Completable enterViewsWithDelay(final int initialDelay, final int delay, final int duration, final int xOffset, final View... views) {
        return Observable.range(0, views.length)
                         .flatMap(i -> enter(views[i], duration, xOffset, 0, i * delay + initialDelay).toObservable())"
1148,enterViewsWithDelay,"    public static Completable enterViewsWithDelay(final int delay, final int duration, final int xOffset, final View... views) {
        return enterViewsWithDelay(0, delay, duration, xOffset, views);
    }"
1149,enterTogether,"    public static Completable enterTogether(final int delay, final int xOffset, final View... views) {
        return Observable.from(views)
                         .flatMap(view -> enter(view, xOffset, 0).toObservable())"
1150,enter,"    public static Completable enter(final View view, final int duration, final int xOffset, final int yOffset, final int delay) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, duration, delay)
                .interpolator(new DecelerateInterpolator())"
1151,enter,"    public static Completable enter(final View view, final int delay, final int xOffset, final int yOffset) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, new DecelerateInterpolator())
                .delay(delay)"
1152,enter,"    public static Completable enter(final View view, final int xOffset, final int yOffset) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, new DecelerateInterpolator())
                .fadeIn()"
1153,slideVertical,"    public static Completable slideVertical(final View view, final int duration, final int yOffset) {
        final float endingY = view.getY() + yOffset;
        return animate(view, new AccelerateDecelerateInterpolator())
                .duration(duration)"
1154,slideHorizontal,"    public static Completable slideHorizontal(final View view, final int duration, final int xOffset) {
        final float endingX = view.getX() + xOffset;
        return animate(view, new AccelerateDecelerateInterpolator())
                .duration(duration)"
1155,fadeInWithDelay,"    public static Completable fadeInWithDelay(final int delay, final int duration, final View... views) {
        return Observable.range(0, views.length)
                         .flatMap(i -> animate(views[i], new LinearInterpolator())"
1156,fadeIn,"    public static Completable fadeIn(final View view, final int duration, final int delay) {
        return animate(view, duration, delay)
                .interpolator(new DecelerateInterpolator())"
1157,fadeIn,"    public static Completable fadeIn(final View view, final int duration) {
        return animate(view, new DecelerateInterpolator())
                .duration(duration)"
1158,fadeIn,"    public static Completable fadeIn(final View view) {
        return animate(view).fadeIn()
                            .onAnimationCancel(aView -> aView.setAlpha(OPAQUE))"
1159,show,"    public static Completable show(final View view) {
        return animate(view, IMMEDIATE).fadeIn().schedule();
    }"
1161,hideViewGroupChildren,"    public static Completable hideViewGroupChildren(final ViewGroup... viewGroups) {
        return Observable.from(viewGroups)
                         .flatMap(viewGroup -> hideViewGroupChildren(viewGroup).toObservable())"
1162,hideViewGroupChildren,"    public static Completable hideViewGroupChildren(final ViewGroup viewGroup) {
        return Completable.fromAction(() -> hideViewGroup(viewGroup));
    }"
1163,hide,"    public static Completable hide(final View... views) {
        return Observable.from(views)
                         .flatMap(view -> hide(view).toObservable())"
1164,hide,"    public static Completable hide(final View view) {
        return animate(view, IMMEDIATE).fadeOut().schedule();
    }"
1165,animateTogether,"    public static Completable animateTogether(final Completable... completables) {
        return Completable.merge(completables);
    }"
1166,defaultInterpolator,"    private static Interpolator defaultInterpolator() {
        return new AccelerateDecelerateInterpolator();
    }"
1167,schedule,"    public Completable schedule(final boolean preTransform) {
        return Completable.create(new AnimateOnSubscribe(viewWeakRef,
                                                         preTransform ? preTransformActions : null,"
1168,schedule,"    public Completable schedule() {
        return Completable.create(new AnimateOnSubscribe(viewWeakRef, preTransformActions, animateActions, onAnimationCancelAction));
    }"
1169,onAnimationCancel,"    public RxAnimationBuilder onAnimationCancel(final Action1<View> onAnimationCancelAction) {
        this.onAnimationCancelAction = onAnimationCancelAction;
        return this;
    }"
1170,scale,"    public RxAnimationBuilder scale(final float dX, final float dY) {
        animateActions.add(animate -> animate.scaleXBy(dX).scaleYBy(dY));
        return this;
    }"
1171,scaleY,"    public RxAnimationBuilder scaleY(final float dY) {
        animateActions.add(animate -> animate.scaleYBy(dY));
        return this;
    }"
1172,scaleX,"    public RxAnimationBuilder scaleX(final float dX) {
        animateActions.add(animate -> animate.scaleXBy(dX));
        return this;
    }"
1173,translateBy,"    public RxAnimationBuilder translateBy(final int dX, final int dY, final int dZ) {
        preTransformActions.add(preTransform -> preTransform.xBy(-dX).yBy(-dY).zBy(-dZ));
        animateActions.add(animate -> animate.xBy(dX).yBy(dY).zBy(dZ));
        return this;
    }"
1174,translateBy,"    public RxAnimationBuilder translateBy(final int dX, final int dY) {
        preTransformActions.add(preTransform -> preTransform.xBy(-dX).yBy(-dY));
        animateActions.add(animate -> animate.xBy(dX).yBy(dY));
        return this;
    }"
1175,elevationBy,"    public RxAnimationBuilder elevationBy(final int dZ) {
        preTransformActions.add(preTransform -> preTransform.zBy(-dZ));
        animateActions.add(animate -> animate.zBy(dZ));
        return this;
    }"
1176,translateY,"    public RxAnimationBuilder translateY(final int dY) {
        preTransformActions.add(preTransform -> preTransform.yBy(-dY));
        animateActions.add(animate -> animate.yBy(dY));
        return this;
    }"
1177,translateX,"    public RxAnimationBuilder translateX(final int dX) {
        preTransformActions.add(preTransform -> preTransform.xBy(-dX));
        animateActions.add(animate -> animate.xBy(dX));
        return this;
    }"
1178,counterRotateBy,"    public RxAnimationBuilder counterRotateBy(final float rotation) {
        preTransformActions.add(preTransform -> preTransform.rotationBy(-rotation));
        animateActions.add(animate -> animate.rotationBy(rotation));
        return this;
    }"
1179,rotateBy,"    public RxAnimationBuilder rotateBy(final float rotation) {
        animateActions.add(animate -> animate.rotationBy(rotation));
        return this;
    }"
1180,rotate,"    public RxAnimationBuilder rotate(final float rotation) {
        animateActions.add(animate -> animate.rotation(rotation));
        return this;
    }"
1181,fadeOut,"    public RxAnimationBuilder fadeOut() {
        animateActions.add(animate -> animate.alpha(TRANSPARENT));
        return this;
    }"
1182,fadeIn,"    public RxAnimationBuilder fadeIn() {
        preTransformActions.add(preTransform -> preTransform.alpha(0f));
        animateActions.add(animate -> animate.alpha(OPAQUE));
        return this;
    }"
1183,interpolator,"    public RxAnimationBuilder interpolator(final Interpolator interpolator) {
        animateActions.add(animate -> animate.setInterpolator(interpolator));
        return this;
    }"
1184,delay,"    public RxAnimationBuilder delay(final int delay) {
        animateActions.add(animate -> animate.setStartDelay(delay));
        return this;
    }"
1185,duration,"    public RxAnimationBuilder duration(final int duration) {
        animateActions.add(animate -> animate.setDuration(duration));
        return this;
    }"
1186,animate,"    public static RxAnimationBuilder animate(final View view, final int duration, final int delay, final Interpolator interpolator) {
        return new RxAnimationBuilder(view, duration, delay, interpolator);
    }"
1187,animate,"    public static RxAnimationBuilder animate(final View view, final Interpolator interpolator) {
        return new RxAnimationBuilder(view, DEFAULT_DURATION, DEFAULT_DELAY, interpolator);
    }"
1188,animate,"    public static RxAnimationBuilder animate(final View view, final int duration, final int delay) {
        return new RxAnimationBuilder(view, duration, delay, new AccelerateDecelerateInterpolator());
    }"
1189,animate,"    public static RxAnimationBuilder animate(final int delay, final View view) {
        return new RxAnimationBuilder(view, DEFAULT_DURATION, delay, new AccelerateDecelerateInterpolator());
    }"
1190,animate,"    public static RxAnimationBuilder animate(final View view, final int duration) {
        return new RxAnimationBuilder(view, duration, DEFAULT_DELAY, new AccelerateDecelerateInterpolator());
    }"
1191,animate,"    public static RxAnimationBuilder animate(final View view) {
        return new RxAnimationBuilder(view, DEFAULT_DURATION, DEFAULT_DELAY, defaultInterpolator());
    }"
1192,isUnsubscribed,"    public boolean isUnsubscribed() {
        return isUnsubscribed;
    }"
1193,unsubscribe,"    public void unsubscribe() {
        isUnsubscribed = true;
        clearAction.call();
    }"
1194,onAnimationCancel,"                public void onAnimationCancel(final View view) {
                    onAnimationCancelAction.call(view);
                }"
1196,runAnimation,"    private void runAnimation(final CompletableSubscriber completableSubscriber, final ViewPropertyAnimatorCompat animator) {
        applyActions(animationActions, animator);
        animator.withEndAction(completableSubscriber::onCompleted)
                .start();"
1197,applyActions,"    private void applyActions(final List<Action1<ViewPropertyAnimatorCompat>> actions, final ViewPropertyAnimatorCompat animator) {
        for (final Action1<ViewPropertyAnimatorCompat> action : actions) {
            action.call(animator);"
1198,call,"    public void call(final CompletableSubscriber completableSubscriber) {
        final View view = viewWeakRef.get();
        if (view == null) {
            completableSubscriber.onCompleted();
            return;
        }
"
1199,countdown,"    public void countdown(View v) {
        Intent i = new Intent();
        i.setClass(this, Test2Activity.class);
        startActivity(i);
"
1203,onCheckedChanged,"            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                mRingProgress.setCorner(b);
"
1205,onStopTrackingTouch,"            public void onStopTrackingTouch(SeekBar seekBar) {
"
1206,onStartTrackingTouch,"            public void onStartTrackingTouch(SeekBar seekBar) {
"
1207,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
                mRingProgress.setSweepAngle((int) (360f * (i / 100f)));
            }"
1210,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
                mRingProgress.setRotateAngle((int) (360f * (i / 100f)));
            }"
1213,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
                mRingProgress.setRingWidthScale(i / 100f);
            }"
1214,Selected,"            public void Selected(Ring r) {
                Toast.makeText(TestActivity.this, r.getName(), Toast.LENGTH_SHORT).show();
            }"
1216,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
        if (mTimerLVRingProgress != null) {
            mTimerLVRingProgress.cancel();"
1218,stopProgressAnim,"    private void stopProgressAnim() {
        if (mTimerLVRingProgress != null) {
            mTimerLVRingProgress.cancel();"
1219,startProgressAnim,"    private void startProgressAnim() {
        if (mValueLVRingProgress == 100)
            mValueLVRingProgress = 0;

        if (mTimerLVRingProgress != null) {
            mTimerLVRingProgress.cancel();"
1220,run,"            public void run() {
                if (mValueLVRingProgress < maxTime) {
"
1221,timerTaskLVRingProgress,"    public void timerTaskLVRingProgress() {
        mTimerLVRingProgress.schedule(new TimerTask() {
            @Override"
1222,stop,"    public void stop(View v) {
        stopProgressAnim();
    }"
1223,start,"    public void start(View v) {
        mRingProgress.stopAnim();
        startProgressAnim();
    }"
1226,hashCode,"  public int hashCode() {
    return thumbnail.hashCode();
  }"
1227,equals,"  @Override public boolean equals(Object obj) {
    if (obj instanceof Video) {
      Video other = (Video) obj;"
1240,configureTitleAndThumbnail,"  private void configureTitleAndThumbnail(final Video video) {
    int maxInt = VIDEO_INFO.size();
    int randomIndex = random.nextInt(maxInt);
    String title = getKeyForIndex(randomIndex);
    video.setTitle(title);
    String thumbnail = getValueForIndex(randomIndex);
    video.setThumbnail(thumbnail);
  }"
1241,configureLiveStatus,"  private void configureLiveStatus(final Video video) {
    boolean live = random.nextBoolean();
    video.setLive(live);
  }"
1242,configureFavoriteStatus,"  private void configureFavoriteStatus(final Video video) {
    boolean favorite = random.nextBoolean();
    video.setFavorite(favorite);
  }"
1243,configureLikeStatus,"  private void configureLikeStatus(final Video video) {
    boolean liked = random.nextBoolean();
    video.setLiked(liked);
  }"
1244,generateRandomVideo,"  private Video generateRandomVideo() {
    Video video = new Video();
    configureFavoriteStatus(video);
    configureLikeStatus(video);
    configureLiveStatus(video);
    configureTitleAndThumbnail(video);
    return video;
  }"
1246,generate,"  public List<Video> generate(final int videoCount) {
    List<Video> videos = new LinkedList<Video>();
    for (int i = 0; i < videoCount; i++) {
      Video video = generateRandomVideo();
      videos.add(video);"
1254,scrollYIsComputed,"	public boolean scrollYIsComputed() {
		return scrollIsComputed;
	}"
1255,computeScrollY,"	public void computeScrollY() {
		mHeight = 0;
		mItemCount = getAdapter().getCount();
		if (mItemOffsetY == null) {
			mItemOffsetY = new int[mItemCount];
		}
		for (int i = 0; i < mItemCount; ++i) {"
1257,onTabReselected,"    public void onTabReselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
    }"
1258,onTabUnselected,"    public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
    }"
1259,onTabSelected,"    public void onTabSelected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
        mPager.setCurrentItem(tab.getPosition());
    }"
1260,onPageSelected,"            public void onPageSelected(int position) {
                getActionBar().setSelectedNavigationItem(position);
            }"
1265,onScrollStateChanged,"			public void onScrollStateChanged(AbsListView view, int scrollState) {
			}"
1266,onScroll,"			public void onScroll(AbsListView view, int firstVisibleItem,
					int visibleItemCount, int totalItemCount) {
				
				mScrollY = 0;
				int translationY = 0;
				
				if (mListView.scrollYIsComputed()) {
					mScrollY = mListView.getComputedScrollY();"
1267,onGlobalLayout,"					public void onGlobalLayout() {
						mQuickReturnHeight = mQuickReturnView.getHeight();
						mListView.computeScrollY();
						mCachedVerticalScrollRange = mListView.getListHeight();
					}"
1268,onActivityCreated,"	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		
		mListView = (QuickReturnListView) getListView();
		
		mQuickReturnView.setText(""Default"");
		mListView.addHeaderView(mHeader);
		
		String[] array = new String[] { ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"","
1269,onCreateView,"	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.fragment, null);
		mHeader = inflater.inflate(R.layout.header, null);
		mQuickReturnView = (TextView) view.findViewById(R.id.sticky);
		mPlaceHolder = mHeader.findViewById(R.id.placeholder);
		return view;"
1271,onScroll,"			public void onScroll(AbsListView view, int firstVisibleItem,
					int visibleItemCount, int totalItemCount) {

				mScrollY = 0;
				int translationY = 0;

				if (mListView.scrollYIsComputed()) {
					mScrollY = mListView.getComputedScrollY();"
1272,onGlobalLayout,"					public void onGlobalLayout() {
						mQuickReturnHeight = mQuickReturnView.getHeight();
						mListView.computeScrollY();
					}"
1273,onActivityCreated,"	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);

		mListView = (QuickReturnListView) getListView();

		String[] array = new String[] { ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"","
1274,onCreateView,"	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.footer_fragment, null);
		mQuickReturnView = (TextView) view.findViewById(R.id.footer);
		return view;"
1276,onAnimationEnd,"							public void onAnimationEnd(Animation animation) {
								noAnimation = false;
								mState = STATE_OFFSCREEN;
							}"
1277,onAnimationRepeat,"							public void onAnimationRepeat(Animation animation) {
"
1278,onAnimationStart,"							public void onAnimationStart(Animation animation) {
							}"
1279,onAnimationEnd,"							public void onAnimationEnd(Animation animation) {
								noAnimation = false;
								mMinRawY = rawY;
								mState = STATE_EXPANDED;
							}"
1284,onActivityCreated,"	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);

		mListView = (QuickReturnListView) getListView();

		mQuickReturnView.setText(""Animation"");
		mListView.addHeaderView(mHeader);

		String[] array = new String[] { ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"","
1286,onShare,"	public void onShare(Platform platform, ShareParams paramsToShare);
"
1289,onError,"	public final void onError(Platform platform, int action, Throwable t) {
		t.printStackTrace();

		Message msg = new Message();
		msg.arg1 = 2;
		msg.arg2 = action;
		msg.obj = t;
		UIHandler.sendMessage(msg, this);
"
1290,onComplete,"	public final void onComplete(Platform platform, int action,
			HashMap<String, Object> res) {
		Message msg = new Message();
		msg.arg1 = 1;
		msg.arg2 = action;
		msg.obj = platform;
		UIHandler.sendMessage(msg, this);"
1291,showEditPage,"	protected abstract void showEditPage(Context context, Platform platform, ShareParams sp);
"
1292,showPlatformPage,"	protected abstract void showPlatformPage(Context context);
"
1293,handleMessage,"			public boolean handleMessage(Message msg) {
				int resId = ResHelper.getStringRes(context, resOrName);
				if (resId > 0) {
					Toast.makeText(context, resId, Toast.LENGTH_SHORT).show();
				} else {"
1294,toast,"	private void toast(final String resOrName) {
		UIHandler.sendEmptyMessage(0, new Callback() {
			public boolean handleMessage(Message msg) {"
1295,shareDataToShareParams,"	final ShareParams shareDataToShareParams(Platform plat) {
		if (plat == null || shareParamsMap == null) {
			toast(""ssdk_oks_share_failed"");
			return null;
		}"
1297,prepareForEditPage,"	private void prepareForEditPage(Platform platform) {
		if (formateShareData(platform)) {
			ShareParams sp = shareDataToShareParams(platform);"
1298,shareSilently,"	final void shareSilently(Platform platform) {
		if (formateShareData(platform)) {
			ShareParams sp = shareDataToShareParams(platform);"
1299,isUseClientToShare,"	final boolean isUseClientToShare(Platform platform) {
		String name = platform.getName();
		if (""Wechat"".equals(name) || ""WechatMoments"".equals(name)
				|| ""WechatFavorite"".equals(name) || ""ShortMessage"".equals(name)
				|| ""Email"".equals(name) || ""Qzone"".equals(name)"
1309,fromValue,"	public static OnekeyShareTheme fromValue(int value) {
		for (OnekeyShareTheme theme : OnekeyShareTheme.values()) {
			if (theme.value == value) {
				return theme;"
1312,isUseClientToShare,"	protected final boolean isUseClientToShare(Platform platform) {
		return impl.isUseClientToShare(platform);
	}"
1313,formateShareData,"	protected final ShareParams formateShareData(Platform platform) {
		if (impl.formateShareData(platform)) {
			return impl.shareDataToShareParams(platform);
		}"
1314,shareSilently,"	protected final void shareSilently(Platform platform) {
		impl.shareSilently(platform);
	}"
1315,isDisableSSO,"	protected final boolean isDisableSSO() {
		return impl.disableSSO;
	}"
1320,isSilent,"	protected final boolean isSilent() {
		return impl.silent;
	}"
1322,isDialogMode,"	protected final boolean isDialogMode() {
		return impl.dialogMode;
	}"
1328,addHiddenPlatform,"	public void addHiddenPlatform(String platform) {
		HashMap<String, String> hiddenPlatforms = ResHelper.forceCast(params.get(""hiddenPlatforms""));
		hiddenPlatforms.put(platform, platform);
	}"
1331,disableSSOWhenAuthorize,"	public void disableSSOWhenAuthorize() {
		params.put(""disableSSO"", true);
	}"
1358,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
"
1369,onUserDeclinePermission,"    @Override protected void onUserDeclinePermission(@NonNull String permissionName) {
        Log.w(""Warning"", ""Permission ( "" + permissionName + "" ) is skipped you can request it again by calling doing such\n "" +
                ""if (permissionHelper.isExplanationNeeded(permissionName)) {\n"" +"
1371,backPressIsEnabled,"    @Override protected boolean backPressIsEnabled() {
        return false;
    }"
1374,theme,"    @Override protected int theme() {
        return R.style.noActionBar;
    }"
1376,onCreate,"    @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.fragment_activity_layout);
    }"
1377,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionFragmentHelper.requestAfterExplanation(permission);
            }"
1379,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionFragmentHelper.requestAfterExplanation(permissions);
            }"
1382,onNoPermissionNeeded,"    @Override public void onNoPermissionNeeded() {
        result.setText(""Permission(s) not needed"");
        Log.i(""onNoPermissionNeeded"", ""Permission(s) not needed"");
    }"
1384,onPermissionNeedExplanation,"    @Override public void onPermissionNeedExplanation(@NonNull String permissionName) {
        Log.i(""NeedExplanation"", ""Permission( "" + permissionName + "" ) needs Explanation"");
        if (!isSingle) {
            neededPermission = PermissionFragmentHelper.declinedPermissions(this, MULTI_PERMISSIONS);"
1385,onPermissionPreGranted,"    @Override public void onPermissionPreGranted(@NonNull String permissionsName) {
        result.setText(""Permission( "" + permissionsName + "" ) preGranted"");
        Log.i(""onPermissionPreGranted"", ""Permission( "" + permissionsName + "" ) preGranted"");
    }"
1386,onPermissionDeclined,"    @Override public void onPermissionDeclined(@NonNull String[] permissionName) {
        result.setText(""Permission(s) "" + Arrays.toString(permissionName) + "" Declined"");
        Log.i(""onPermissionDeclined"", ""Permission(s) "" + Arrays.toString(permissionName) + "" Declined"");
    }"
1387,onPermissionGranted,"    @Override public void onPermissionGranted(@NonNull String[] permissionName) {
        result.setText(""Permission(s) "" + Arrays.toString(permissionName) + "" Granted"");
        Log.i(""onPermissionGranted"", ""Permission(s) "" + Arrays.toString(permissionName) + "" Granted"");
    }"
1388,onRequestPermissionsResult,"    @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        permissionFragmentHelper.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }"
1389,onActivityResult,"    @Override public void onActivityResult(int requestCode, int resultCode, Intent data) {
        permissionFragmentHelper.onActivityForResult(requestCode);
    }"
1391,onCreate,"    @Override public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        permissionFragmentHelper = PermissionFragmentHelper.getInstance(this);
    }"
1392,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionHelper.requestAfterExplanation(permission);
            }"
1394,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionHelper.requestAfterExplanation(permissions);
            }"
1399,onPermissionNeedExplanation,"    @Override public void onPermissionNeedExplanation(@NonNull String permissionName) {
        Log.i(""NeedExplanation"", ""Permission( "" + permissionName + "" ) needs Explanation"");
        if (!isSingle) {
            neededPermission = PermissionHelper.declinedPermissions(this, MULTI_PERMISSIONS);"
1403,onRequestPermissionsResult,"    @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        permissionHelper.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }"
1404,onActivityResult,"    @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        permissionHelper.onActivityForResult(requestCode);
    }"
1406,onClick,"    @Override public void onClick(View v) {
        boolean isBadAss = v.getId() == R.id.badAss;
        Intent intent;
        if (isBadAss) {
            intent = new Intent(this, SampleActivity.class);
        } else {
            intent = new Intent(this, SamplePagerActivity.class);"
1407,onCreate,"    @Override protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main_activity);
        findViewById(R.id.badAss).setOnClickListener(this);
        findViewById(R.id.pagerActivity).setOnClickListener(this);
    }"
1409,onRepeat,"            public void onRepeat(int index) {
                Log.i(""asd"", ""onRepeat selected: "" + index);
            }"
1410,onSelected,"            public void onSelected(int index, int old) {
                Log.i(""asd"", ""selected: "" + index + "" old: "" + old);
            }"
1412,showToast,"    private void showToast(String text) {
        Toast.makeText(TestControllerActivity.this, text, Toast.LENGTH_SHORT).show();
    }"
1413,onClick,"            public void onClick(View v) {
                String text = mEdtIndex.getText().toString();
                if (TextUtils.isEmpty(text)) {
                    showToast(""input index"");
                    return;"
1414,onClick,"            public void onClick(View v) {
                String text = mEdtIndex.getText().toString();
                if (TextUtils.isEmpty(text)) {
                    showToast(""input index"");
                    return;
                }"
1420,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_test_controller);

        initView();

        initNavigation();"
1421,newRoundItem,"    private BaseTabItem newRoundItem(int drawable,int checkedDrawable,String text){
        SpecialTabRound mainTab = new SpecialTabRound(this);
        mainTab.initialize(drawable,checkedDrawable,text);
        mainTab.setTextDefaultColor(0xFF888888);
        mainTab.setTextCheckedColor(0xFF009688);
        return mainTab;
    }"
1422,newItem,"    private BaseTabItem newItem(int drawable, int checkedDrawable, String text){
        SpecialTab mainTab = new SpecialTab(this);
        mainTab.initialize(drawable,checkedDrawable,text);
        mainTab.setTextDefaultColor(0xFF888888);
        mainTab.setTextCheckedColor(0xFF009688);
        return mainTab;
    }"
1424,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mTvText.setText(""C"");
    }"
1425,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mTvText.setText(""B"");
    }"
1426,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mTvText.setText(""A"");
    }"
1427,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        mTvText = view.findViewById(R.id.tv_text);
    }"
1428,onCreateView,"    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_navigation_page, container, false);
    }"
1429,onSupportNavigateUp,"    public boolean onSupportNavigateUp() {
        return mNavController.navigateUp();
    }"
1430,initBottomNavigation,"    private void initBottomNavigation(PageNavigationView pageNavigationView) {
        NavigationController navigationController = pageNavigationView.material()
                .addItem(R.drawable.ic_favorite_gray_24dp, ""A"")
                .addItem(R.drawable.ic_favorite_gray_24dp, ""B"")"
1431,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_navigation_component);
        mNavigation = findViewById(R.id.navigation);

        mNavController = Navigation.findNavController(this, R.id.nav_host_fragment);
"
1435,navigationArchitectureComponent,"    public void navigationArchitectureComponent(View view) {
        startActivity(new Intent(this, NavigationComponentActivity.class));
    }"
1436,toTestController,"    public void toTestController(View view) {
        startActivity(new Intent(this, TestControllerActivity.class));
    }"
1437,toCsutomVertical,"    public void toCsutomVertical(View view) {
        startActivity(new Intent(this, VerticalCustomActivity.class));
    }"
1438,toVertical,"    public void toVertical(View view) {
        startActivity(new Intent(this, VerticalActivity.class));
    }"
1439,toSpecial,"    public void toSpecial(View view) {
        startActivity(new Intent(this, SpecialActivity.class));
    }"
1440,toHide,"    public void toHide(View view) {
        startActivity(new Intent(this, HideActivity.class));
    }"
1441,toBehavior,"    public void toBehavior(View view) {
        startActivity(new Intent(this, BehaviorActivity.class));
    }"
1442,toCustom2,"    public void toCustom2(View view) {
        startActivity(new Intent(this, Custom2Activity.class));
    }"
1443,toCustom,"    public void toCustom(View view) {
        startActivity(new Intent(this, CustomActivity.class));
    }"
1444,toMaterialdesign,"    public void toMaterialdesign(View view) {
        startActivity(new Intent(this, MaterialDesignActivity.class));
    }"
1445,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }"
1447,onBindViewHolder,"        public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {

            if (holder.itemView instanceof TextView) {"
1449,onViewCreated,"        public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
            RecyclerView recyclerView = view.findViewById(R.id.recyclerView);
            recyclerView.setAdapter(new TestAdapter());
            recyclerView.addItemDecoration(new DividerItemDecoration(view.getContext(), DividerItemDecoration.VERTICAL));
            recyclerView.addOnScrollListener(new ListScrollListener());
        }"
1450,onCreateView,"        public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
            return inflater.inflate(R.layout.recyclerview, container, false);
        }"
1455,newItem,"    private BaseTabItem newItem(int drawable, int checkedDrawable, String text) {
        NormalItemView normalItemView = new NormalItemView(this);
        normalItemView.initialize(drawable, checkedDrawable, text);
        normalItemView.setTextDefaultColor(Color.GRAY);
        normalItemView.setTextCheckedColor(0xFF009688);
        return normalItemView;
    }"
1457,newItem_test,"    private BaseTabItem newItem_test(int drawable, int checkedDrawable) {
        TestRepeatTab testRepeatTab = new TestRepeatTab(this);
        testRepeatTab.initialize(drawable, checkedDrawable);
        return testRepeatTab;
    }"
1458,newItem,"    private BaseTabItem newItem(int drawable, int checkedDrawable) {
        OnlyIconItemView onlyIconItemView = new OnlyIconItemView(this);
        onlyIconItemView.initialize(drawable, checkedDrawable);
        return onlyIconItemView;
    }"
1463,onViewCreated,"        public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
            RecyclerView recyclerView = view.findViewById(R.id.recyclerView);
            recyclerView.setAdapter(new TestAdapter());
            recyclerView.addItemDecoration(new DividerItemDecoration(view.getContext(), DividerItemDecoration.VERTICAL));
        }"
1469,_flatMapWelfarePhotos,"    private static Func1<WelfarePhotoList, Observable<WelfarePhotoInfo>> _flatMapWelfarePhotos() {
        return new Func1<WelfarePhotoList, Observable<WelfarePhotoInfo>>() {
            @Override"
1471,_flatMapPhotos,"    private static Func1<Map<String, List<BeautyPhotoInfo>>, Observable<List<BeautyPhotoInfo>>> _flatMapPhotos() {
        return new Func1<Map<String, List<BeautyPhotoInfo>>, Observable<List<BeautyPhotoInfo>>>() {
            @Override"
1472,call,"            public Observable<SpecialInfo> call(Map<String, SpecialInfo> specialMap) {
                return Observable.just(specialMap.get(specialId));
            }"
1473,_flatMapSpecial,"    private static Func1<Map<String, SpecialInfo>, Observable<SpecialInfo>> _flatMapSpecial(final String specialId) {
        return new Func1<Map<String, SpecialInfo>, Observable<SpecialInfo>>() {
            @Override"
1474,call,"            public Observable<List<VideoInfo>> call(Map<String, List<VideoInfo>> newsListMap) {
                return Observable.just(newsListMap.get(typeStr));
            }"
1475,_flatMapVideo,"    private static Func1<Map<String, List<VideoInfo>>, Observable<List<VideoInfo>>> _flatMapVideo(final String typeStr) {
        return new Func1<Map<String, List<VideoInfo>>, Observable<List<VideoInfo>>>() {
            @Override"
1476,call,"            public Observable<NewsInfo> call(Map<String, List<NewsInfo>> newsListMap) {
                return Observable.from(newsListMap.get(typeStr));
            }"
1477,_flatMapNews,"    private static Func1<Map<String, List<NewsInfo>>, Observable<NewsInfo>> _flatMapNews(final String typeStr) {
        return new Func1<Map<String, List<NewsInfo>>, Observable<NewsInfo>>() {
            @Override"
1478,call,"                public Observable<T> call(Map<String, List<T>> stringListMap) {
                    if (TextUtils.isEmpty(mMapKey)) {
                        return Observable.error(new Throwable(""Map Key is empty""));
                    }"
1479,call,"        public Observable<T> call(Observable<Map<String, List<T>>> mapObservable) {
            return  mapObservable.flatMap(new Func1<Map<String, List<T>>, Observable<T>>() {
                @Override"
1487,call,"                    public Observable<NewsDetailInfo> call(Map<String, NewsDetailInfo> newsDetailMap) {
                        return Observable.just(newsDetailMap.get(newsId));
                    }"
1491,_parseParams,"    private static String _parseParams(RequestBody body, Buffer requestBuffer) throws UnsupportedEncodingException {
        if (body.contentType() != null && !body.contentType().toString().contains(""multipart"")) {
            return URLDecoder.decode(requestBuffer.readUtf8(), ""UTF-8"");
        }"
1492,intercept,"        public Response intercept(Chain chain) throws IOException {
            final Request request = chain.request();
            Buffer requestBuffer = new Buffer();
            if (request.body() != null) {
                request.body().writeTo(requestBuffer);
            } else {
                Logger.d(""LogTAG"", ""request.body() == null"");
            }"
1495,isNewsPhotoSet,"    public static boolean isNewsPhotoSet(String skipType) {
        return NEWS_ITEM_PHOTO_SET.equals(skipType);
    }"
1496,isNewsSpecial,"    public static boolean isNewsSpecial(String skipType) {
        return NEWS_ITEM_SPECIAL.equals(skipType);
    }"
1497,clipNewsIdFromUrl,"    public static String clipNewsIdFromUrl(String url) {
        String newsId = null;
        int index = url.indexOf(NEWS_ID_PREFIX);
        if (index != -1) {
            newsId = url.substring(index, index + NEWS_ID_LENGTH);
        } else if (url.endsWith(NEWS_ID_SUFFIX)) {"
1498,isAbNews,"    public static boolean isAbNews(@NonNull NewsInfo newsBean) {
        return (newsBean.getHasHead() == HAS_HEAD &&
                newsBean.getAds() != null && newsBean.getAds().size() > 1);"
1499,getWelfarePhoto,"    Observable<WelfarePhotoList> getWelfarePhoto(@Path(""page"") int page);
"
1500,getVideoList,"    Observable<Map<String, List<VideoInfo>>> getVideoList(@Path(""id"") String id,
                                                          @Path(""startPage"") int startPage);"
1501,getBeautyPhoto,"    Observable<Map<String, List<BeautyPhotoInfo>>> getBeautyPhoto(@Query(""offset"") int offset);
"
1502,getPhotoMoreList,"    Observable<List<PhotoInfo>> getPhotoMoreList(@Path(""setId"") String setId);
"
1504,getPhotoSet,"    Observable<PhotoSetInfo> getPhotoSet(@Path(""photoId"") String photoId);
"
1505,getNewsDetail,"    Observable<Map<String, NewsDetailInfo>> getNewsDetail(@Path(""newsId"") String newsId);
"
1506,getSpecial,"    Observable<Map<String, SpecialInfo>> getSpecial(@Path(""specialId"") String specialIde);
"
1507,getNewsList,"    Observable<Map<String, List<NewsInfo>>> getNewsList(@Path(""type"") String type, @Path(""id"") String id,
                                                        @Path(""startPage"") int startPage);"
1510,isItemCheckable,"    public boolean isItemCheckable(int position) {
        return true;
    }"
1512,onDestroyActionMode,"    public void onDestroyActionMode(ActionMode mode) {
        helper.onDestroyActionMode();
    }"
1514,finishActionMode,"    protected void finishActionMode() {
        helper.finishActionMode();
    }"
1518,isChecked,"    public boolean isChecked(long itemId) {
        return helper.isChecked(itemId);
    }"
1522,save,"    public void save(Bundle outState) {
        helper.save(outState);
    }"
1525,positionToSelectionHandle,"        protected long positionToSelectionHandle(int position) {
            return getItemId(position);
        }"
1532,getViewImpl,"    protected abstract View getViewImpl(int position, View convertView, ViewGroup parent);
"
1535,isChecked,"    public boolean isChecked(long position) {
        return helper.isChecked(position);
    }"
1557,onCheckedChanged,"    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
        if (ignoreCheckedListener) {
            return;
        }
        int position = (Integer) buttonView.getTag();"
1558,initItemCheckbox,"    private void initItemCheckbox(int position, ViewGroup view) {
        CheckBox checkBox = (CheckBox) view.findViewById(android.R.id.checkbox);
        boolean checked = isChecked(position);
        checkBox.setTag(position);
        checkBox.setChecked(checked);
        checkBox.setOnCheckedChangeListener(this);
    }"
1559,itemIncludesCheckBox,"    private boolean itemIncludesCheckBox(View v) {
        if (itemIncludesCheckBox == null) {
            if (!(v instanceof ViewGroup)) {
                itemIncludesCheckBox = false;"
1561,onItemClick,"    public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {
        if (isActionModeStarted()) {
            switch (itemClickInActionModePolicy) {
            case SELECT:"
1562,onDestroyActionMode,"    public void onDestroyActionMode() {
        checkedItems.clear();
        clearActionMode();
        owner.notifyDataSetChanged();
    }"
1563,positionToSelectionHandle,"    protected long positionToSelectionHandle(int position) {
        return position;
    }"
1564,correctPositionAccountingForHeader,"    private int correctPositionAccountingForHeader(AdapterView<?> adapterView, int position) {
        ListView listView = (adapterView instanceof ListView) ? (ListView) adapterView : null;
        int headersCount = listView == null ? 0 : listView.getHeaderViewsCount();
        if (headersCount > 0) {
            position -= listView.getHeaderViewsCount();
        }"
1568,finishActionMode,"    protected abstract void finishActionMode();
    protected abstract void clearActionMode();"
1569,startActionMode,"    protected abstract void startActionMode();
    protected abstract void finishActionMode();"
1570,isActionModeStarted,"    protected abstract boolean isActionModeStarted();
    protected abstract void startActionMode();"
1571,setActionModeTitle,"    protected abstract void setActionModeTitle(String title);
    protected abstract boolean isActionModeStarted();"
1572,onItemSelectedStateChanged,"    private void onItemSelectedStateChanged() {
        int count = getCheckedItemCount();
        if (count == 0) {
            finishActionMode();
            return;
        }"
1577,isChecked,"    public boolean isChecked(long handle) {
        return checkedItems.contains(handle);
    }"
1581,checkItem,"    public void checkItem(long handle) {
        boolean wasSelected = isChecked(handle);
        if (wasSelected) {
            return;
        }
        if (!isActionModeStarted()) {
            startActionMode();
        }"
1583,save,"    public void save(Bundle outState) {
        long[] array = new long[checkedItems.size()];
        int i = 0;
        for (Long id : checkedItems) {
            array[i++] = id;
        }"
1585,checkActivity,"    public void checkActivity() {
        Context context = getContext();
        if (context instanceof ListActivity) {
            throw new RuntimeException(""ListView cannot belong to an activity which subclasses ListActivity"");"
1587,restoreSelectionFromSavedInstanceState,"    public void restoreSelectionFromSavedInstanceState(Bundle savedInstanceState) {
        if (savedInstanceState == null) {
            return;
        }
        long[] array = savedInstanceState.getLongArray(BUNDLE_KEY);
        checkedItems.clear();"
1588,clearActionMode,"    protected void clearActionMode() {
        actionMode = null;
    }"
1589,isActionModeStarted,"    protected boolean isActionModeStarted() {
        return actionMode != null;
    }"
1591,finishActionMode,"    protected void finishActionMode() {
        if (actionMode != null) {
            actionMode.finish();"
1592,startActionMode,"    protected void startActionMode() {
        try {
            Activity activity = (Activity) adapterView.getContext();"
1594,isItemCheckable,"    boolean isItemCheckable(int position);
    String getActionModeTitle(int count);"
1595,getItemClickInActionModePolicy,"    ItemClickInActionModePolicy getItemClickInActionModePolicy();
    boolean isItemCheckable(int position);"
1596,setItemClickInActionModePolicy,"    void setItemClickInActionModePolicy(ItemClickInActionModePolicy policy);
    ItemClickInActionModePolicy getItemClickInActionModePolicy();"
1597,isChecked,"    boolean isChecked(long position);
    void setItemClickInActionModePolicy(ItemClickInActionModePolicy policy);"
1598,getCheckedItemCount,"    int getCheckedItemCount();
    boolean isChecked(long position);"
1599,getCheckedItems,"    Set<Long> getCheckedItems();
    int getCheckedItemCount();"
1600,setItemChecked,"    void setItemChecked(long position, boolean checked);
    Set<Long> getCheckedItems();"
1601,save,"    void save(Bundle outState);
    void setItemChecked(long position, boolean checked);"
1602,setOnItemClickListener,"    void setOnItemClickListener(OnItemClickListener listener);
    void save(Bundle outState);"
1603,setAdapterView,"    void setAdapterView(AdapterView<? super BaseAdapter> adapterView);
    void setOnItemClickListener(OnItemClickListener listener);"
1606,onFinishInflate,"    protected void onFinishInflate() {
        super.onFinishInflate();
        
        mText1 = (TextView) findViewById(android.R.id.text1);
        mText2 = (TextView) findViewById(android.R.id.text2);"
1607,drawableStateChanged,"    protected void drawableStateChanged() {
        super.drawableStateChanged();

        Drawable drawable = getBackground();
        if (drawable != null) {"
1608,onCreateDrawableState,"    protected int[] onCreateDrawableState(int extraSpace) {
        final int[] drawableState = super.onCreateDrawableState(extraSpace + 1);
        if (isChecked()) {
            mergeDrawableStates(drawableState, CHECKED_STATE_SET);
        }"
1611,isChecked,"    public boolean isChecked() {
        return mChecked;
    }"
1612,toggle,"    public void toggle() {
        setChecked(!mChecked);
    }"
1613,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent ev) {
        return onTouchEvent(ev);
    }"
1614,performClick,"    public boolean performClick() {
        toggle();
        return super.performClick();
    }"
1625,drawableStateChanged,"    protected void drawableStateChanged() {
        super.drawableStateChanged();

        if (stateList != null) {"
1626,onCreateDrawableState,"    public int[] onCreateDrawableState(int extraSpace) {
        final int[] drawableState = super.onCreateDrawableState(extraSpace + 1);
        if (isChecked()) {
            mergeDrawableStates(drawableState, CHECKED_STATE_SET);
        }"
1627,toggle,"    public void toggle() {
        setChecked(!isChecked());
    }"
1630,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (stateList != null) {
            stateList.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());"
1634,onCreateDrawableState,"    protected int[] onCreateDrawableState(int extraSpace) {
        final int[] drawableState = super.onCreateDrawableState(extraSpace + 2);

        if (mChecked) {
            mergeDrawableStates(drawableState, CHECKED_STATE_SET);"
1640,verifyConfiguration,"    public boolean verifyConfiguration(final Configuration conf) {
        return true;
    }"
1641,getSplits,"    public List<InputSplit> getSplits(final JobContext context) throws IOException {
        final Configuration conf = context.getConfiguration();
        try {
            MongoSplitter splitterImpl = MongoSplitterFactory.getSplitter(conf);"
1642,createRecordReader,"    public RecordReader<Object, BSONObject> createRecordReader(final InputSplit split, final TaskAttemptContext context) {
        if (!(split instanceof MongoInputSplit)) {
            throw new IllegalStateException(""Creation of a new RecordReader requires a MongoInputSplit instance."");
        }
"
1652,isNoTimeout,"    public boolean isNoTimeout() {
        return MongoConfigUtil.isNoTimeout(configuration);
    }"
1656,createInputSplits,"    public boolean createInputSplits() {
        return MongoConfigUtil.createInputSplits(configuration);
    }"
1662,canReadSplitsFromSecondary,"    public boolean canReadSplitsFromSecondary() {
        return MongoConfigUtil.canReadSplitsFromSecondary(configuration);
    }"
1664,isRangeQueryEnabled,"    public boolean isRangeQueryEnabled() {
        return MongoConfigUtil.isRangeQueryEnabled(configuration);
    }"
1666,isShardChunkedSplittingEnabled,"    public boolean isShardChunkedSplittingEnabled() {
        return MongoConfigUtil.isShardChunkedSplittingEnabled(configuration);
    }"
1668,canReadSplitsFromShards,"    public boolean canReadSplitsFromShards() {
        return MongoConfigUtil.canReadSplitsFromShards(configuration);
    }"
1728,isJobBackground,"    public boolean isJobBackground() {
        return MongoConfigUtil.isJobBackground(configuration);
    }"
1730,isJobVerbose,"    public boolean isJobVerbose() {
        return MongoConfigUtil.isJobVerbose(configuration);
    }"
1731,close,"        public void close() throws IOException {
            chunkData.close();
        }"
1732,getProgress,"        public float getProgress() throws IOException, InterruptedException {
            return (float) Math.min(
              previousMatchIndex / (float) chunkSize, 1.0);"
1733,getCurrentValue,"        public Text getCurrentValue() throws IOException, InterruptedException {
            return text;
        }"
1734,getCurrentKey,"        public NullWritable getCurrentKey()
          throws IOException, InterruptedException {
            return NullWritable.get();"
1735,nextKeyValue,"        public boolean nextKeyValue() throws IOException, InterruptedException {
            if (readLast) {
                LOG.debug(""skipping the rest of this chunk because we've ""
                    + ""read beyond the end: "" + previousMatchIndex
                    + ""; read "" + totalMatches + "" matches here."");
                return false;
            }"
1738,close,"        public void close() throws IOException {
            reader.close();
        }"
1739,fileContents,"        public CharSequence fileContents() {
            return subSequence(0, length);
        }"
1740,chunkContents,"        public CharSequence chunkContents() {
            return subSequence(0, Math.min(chunkSize, length));
        }"
1741,subSequence,"        public CharSequence subSequence(final int start, final int end) {
            try {
                advanceToIndex(end);
            } catch (IOException e) {"
1742,charAt,"        public char charAt(final int index) {
            try {
                advanceToIndex(index);
            } catch (IOException e) {"
1743,advanceToIndex,"        private void advanceToIndex(final int index) throws IOException {
            if (index >= builder.length()) {
                while (index >= builder.length()) {"
1744,length,"        public int length() {
            return length;
        }"
1745,close,"        public void close() throws IOException {
            stream.close();
        }"
1746,getProgress,"        public float getProgress() throws IOException, InterruptedException {
            return readLast ? 1.0f : 0.0f;
        }"
1747,getCurrentValue,"        public BytesWritable getCurrentValue()
          throws IOException, InterruptedException {
            return bw;"
1750,initialize,"        public void initialize(
          final InputSplit split, final TaskAttemptContext context)
          throws IOException, InterruptedException {
            this.split = (GridFSSplit) split;
            readLast = false;
            buff = new byte[1024 * 1024 * 16];"
1751,createRecordReader,"    public RecordReader<NullWritable, BinaryComparable>
    createRecordReader(final InputSplit split, final TaskAttemptContext context)
      throws IOException, InterruptedException {"
1753,accept,"    public boolean accept(final Path path) {
        String pathName = path.getName().toLowerCase();
        boolean acceptable = pathName.endsWith("".bson"") && !pathName.startsWith(""."");
        LOG.info(path.toString() + "" returning "" + acceptable);
        return acceptable;
    }"
1758,isSplitable,"    protected boolean isSplitable(
      final JobContext context, final Path filename) {
        CompressionCodec codec =
          new CompressionCodecFactory("
1759,onCreate,"  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_test);
  }"
1761,onCreate,"  @Override protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_loader1);
  }"
1762,onCreate,"  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_list_test);

    rvContacts = (RecyclerView)findViewById(R.id.rvContacts);

    adapter = new ContactsAdapter();
"
1763,bind,"    public void bind(String contact) {
      tvName.setText(contact);
    }"
1765,onBindViewHolder,"  @Override public void onBindViewHolder(ContactViewHolder holder, int position) {
    final String contact = contacts.get(position);
    holder.bind(contact);
  }"
1766,onCreateViewHolder,"  @Override public ContactViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
    final LayoutInflater inflater = LayoutInflater.from(parent.getContext());
    View itemView = inflater.inflate(R.layout.item_contact, parent, false);
    return new ContactViewHolder(itemView);
  }"
1767,onCreate,"  @Override public void onCreate() {
    super.onCreate();

    LeakCanary.install(this);"
1769,setupDbEpisodes,"	private void setupDbEpisodes() {
		mDbEpisode.clear();

		DbAdapterTvShowEpisodes db = MizuuApplication.getTvEpisodeDbAdapter();

		ColumnIndexCache cache = new ColumnIndexCache();
		Cursor tempCursor = db.getAllEpisodes();"
1776,getSimilarMovies,"	public abstract List<WebMovie> getSimilarMovies(String id);
	"
1779,get,"	public abstract Movie get(String id, String json, String language);
	"
1783,hasOfflineCopy,"	public boolean hasOfflineCopy(Filepath path) {
		return getOfflineCopyFile(path).exists();
	}"
1784,isUnidentified,"	public boolean isUnidentified() {
		return 	getRuntime().equals(""0"") &&
				getReleaseYear().equals(mContext.getString(R.string.unknownYear)) &&"
1795,hasWatched,"	public boolean hasWatched() {
		return (HAS_WATCHED.equals(""0"")) ? false : true;
	}"
1799,isFavourite,"	public boolean isFavourite() {
        return FAVOURITE.equals(""1"");
    }"
1807,toWatch,"	public boolean toWatch() {
		return (!TO_WATCH.equals(""0""));
	}"
1811,compareTo,"	public int compareTo(BaseMovie another) {
		return getTitle().compareToIgnoreCase(another.getTitle());
	}"
1815,toString,"	public String toString() {
		try {
			return getTitle().substring(0, 1);"
1819,searchByImdbId,"	public abstract List<T> searchByImdbId(String imdbId, String language);
	"
1820,searchNgram,"	public abstract List<T> searchNgram(String query, String language);
	"
1821,search,"	public abstract List<T> search(String query, String year, String language);
	"
1822,search,"	public abstract List<T> search(String query, String language);
	"
1826,browse,"	public boolean browse(int index, boolean fromParent) {
		return browse(fromParent ? getCurrentParentFiles()[index] : getCurrentFiles()[index]);
	}"
1827,goUp,"	public boolean goUp() {
        return mParentFolder != null && browse(mParentFolder);
    }"
1842,addToResults,"	public abstract void addToResults(T folder, TreeSet<String> results);
"
1843,recursiveSearch,"	public abstract void recursiveSearch(T folder, TreeSet<String> results);
"
1848,clearLibrary,"	public boolean clearLibrary() {
		return mClearLibrary;
	}"
1854,onStickerSelected,"    public void onStickerSelected(String categoryName, String stickerName, String stickerBitmapPath) {
        Toast.makeText(getApplicationContext(), stickerBitmapPath, Toast.LENGTH_SHORT).show();
        Log.e(""CSDN_LQR"", ""stickerBitmapPath : "" + stickerBitmapPath);
    }"
1855,onEmojiSelected,"    public void onEmojiSelected(String key) {
        Log.e(""CSDN_LQR"", ""onEmojiSelected : "" + key);
    }"
1856,onBackPressed,"    public void onBackPressed() {
        if (mElEmotion.isShown() || mLlMore.isShown()) {
            mEmotionKeyboard.interceptBackPress();"
1857,closeBottomAndKeyboard,"    private void closeBottomAndKeyboard() {
        mElEmotion.setVisibility(View.GONE);
        mLlMore.setVisibility(View.GONE);
        if (mEmotionKeyboard != null) {
            mEmotionKeyboard.interceptBackPress();"
1858,hideMoreLayout,"    private void hideMoreLayout() {
        mLlMore.setVisibility(View.GONE);
    }"
1859,showMoreLayout,"    private void showMoreLayout() {
        mLlMore.setVisibility(View.VISIBLE);
    }"
1860,hideEmotionLayout,"    private void hideEmotionLayout() {
        mElEmotion.setVisibility(View.GONE);
        mIvEmo.setImageResource(R.mipmap.ic_cheat_emo);
    }"
1861,showEmotionLayout,"    private void showEmotionLayout() {
        mElEmotion.setVisibility(View.VISIBLE);
        mIvEmo.setImageResource(R.mipmap.ic_cheat_keyboard);
    }"
1862,hideAudioButton,"    private void hideAudioButton() {
        mBtnAudio.setVisibility(View.GONE);
        mEtContent.setVisibility(View.VISIBLE);
        mIvAudio.setImageResource(R.mipmap.ic_cheat_voice);
    }"
1863,showAudioButton,"    private void showAudioButton() {
        mBtnAudio.setVisibility(View.VISIBLE);
        mEtContent.setVisibility(View.GONE);
        mIvAudio.setImageResource(R.mipmap.ic_cheat_keyboard);

        if (mFlEmotionView.isShown()) {"
1869,beforeTextChanged,"            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
"
1870,onClick,"            public void onClick(View v) {
                if (mBtnAudio.isShown()) {
                    hideAudioButton();"
1872,onEmotionSettingClick,"            public void onEmotionSettingClick(View view) {
                Toast.makeText(getApplicationContext(), ""setting"", Toast.LENGTH_SHORT).show();
            }"
1873,onEmotionAddClick,"            public void onEmotionAddClick(View view) {
                Toast.makeText(getApplicationContext(), ""add"", Toast.LENGTH_SHORT).show();
            }"
1875,initView,"    public void initView() {
        mElEmotion.attachEditText(mEtContent);
        initEmotionKeyboard();
    }"
1876,onResume,"    protected void onResume() {
        super.onResume();
        mEtContent.clearFocus();
    }"
1877,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_wx_session);
        ButterKnife.bind(this);

        initView();
        initListener();"
1878,initEmotionKeyboard,"    private void initEmotionKeyboard() {
        mEmotionKeyboard = EmotionKeyboard.with(this);
        mEmotionKeyboard.bindToContent(mLlContent);
        mEmotionKeyboard.bindToEmotionButton(mIvEmo);
        mEmotionKeyboard.bindToEditText(mEtContent);
        mEmotionKeyboard.setEmotionLayout(mElEmotion);
    }"
1879,onStickerSelected,"            public void onStickerSelected(String categoryName, String stickerName, String stickerBitmapPath) {
                String stickerPath = stickerBitmapPath;
                Toast.makeText(getApplicationContext(), stickerPath, Toast.LENGTH_SHORT).show();
            }"
1884,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_simple_session);
        ButterKnife.bind(this);

        initEmotionKeyboard();
        initView();"
1885,onClick,"            public void onClick(View v) {
                Intent intent = new Intent(MainActivity.this, WxSessionActivity.class);
                startActivity(intent);
            }"
1886,onClick,"            public void onClick(View v) {
                Intent intent = new Intent(MainActivity.this, SimpleSessionActivity.class);
                startActivity(intent);
            }"
1888,displayImage,"            public void displayImage(Context context, String path, ImageView imageView) {
                Glide.with(context).load(path).centerCrop().diskCacheStrategy(DiskCacheStrategy.SOURCE).into(imageView);
            }"
1889,onCreate,"    public void onCreate() {
        super.onCreate();
        LQREmotionKit.init(this, new IImageLoader() {
            @Override"
1892,orderIntToByte,"        public byte[] orderIntToByte(int serial) {
            return ByteBuffer.allocate(4).order(PLATFORM_BYTE_ORDER).putInt(serial).array();
        }"
1893,orderLongToByte,"        public byte[] orderLongToByte(long serial, int length) {
            return ByteBuffer.allocate(length).order(PLATFORM_BYTE_ORDER).putLong(serial).array();
        }"
1894,orderByteToLong,"        public long orderByteToLong(byte[] data) {
            return ByteBuffer.wrap(data).order(PLATFORM_BYTE_ORDER).getLong();
        }"
1895,orderByteToInt,"        public int orderByteToInt(byte[] data) {
            return ByteBuffer.wrap(data).order(PLATFORM_BYTE_ORDER).getInt();
        }"
1898,orderLongToByte,"        public byte[] orderLongToByte(long serial, int length) {
            return ByteBuffer.allocate(length).order(PLATFORM_BYTE_ORDER).putInt((int) serial).array();
        }"
1899,orderByteToLong,"        public long orderByteToLong(byte[] data) {
            return ByteBuffer.wrap(data).order(PLATFORM_BYTE_ORDER).getInt() & 0xFFFFFFFFL;
        }"
1903,orderLongToByte,"    public abstract byte[] orderLongToByte(long serial, int length);
"
1907,types,"    private static Class<?>[] types(Object... values) {
        if (values == null) {
            return new Class[0];
        }

        Class<?>[] result = new Class[values.length];"
1908,wrap,"    private static Class<?> wrap(Class<?> type) {
        if (type == null) {
            return null;
        } else if (type.isPrimitive()) {"
1909,isSimilarSignature,"    private static boolean isSimilarSignature(Class<?>[] declaredTypes, Class<?>[] actualTypes) {
        if (declaredTypes.length == actualTypes.length) {
            for (int i = 0; i < actualTypes.length; i++) {"
1919,run,"            public void run() {
                startActivity(new Intent(WelcomeActivity.this,MainActivity.class));
                finish();
            }"
1920,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_welcome);
        new Handler().postDelayed(new Runnable() {
            @Override"
1923,onItemClick,"            public void onItemClick(View view, int position) {
                switch (position){
                    case 0:"
1926,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();
        initListener();
    }"
1927,CopyStream,"    public static void CopyStream(InputStream is, OutputStream os)
    {
        final int buffer_size=1024;
        try"
1931,put,"    public void put(String id, Bitmap bitmap){
        try{
            if(cache.containsKey(id))"
1932,get,"    public Bitmap get(String id){
        try{
            if(!cache.containsKey(id))"
1934,onClick,"        public void onClick(View arg0) {
            adapter.imageLoader.clearCache();
            adapter.notifyDataSetChanged();
        }"
1935,onDestroy,"    public void onDestroy()
    {
        list.setAdapter(null);
        super.onDestroy();"
1936,onCreate,"    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        list=(ListView)findViewById(R.id.list);
        adapter=new LazyAdapter(this, mStrings);
        list.setAdapter(adapter);
        
        Button b=(Button)findViewById(R.id.button1);"
1941,clearCache,"    public void clearCache() {
        memoryCache.clear();
        fileCache.clear();
    }"
1942,run,"        public void run()
        {
            if(imageViewReused(photoToLoad))
                return;"
1943,imageViewReused,"    boolean imageViewReused(PhotoToLoad photoToLoad){
        String tag=imageViews.get(photoToLoad.imageView);
        if(tag==null || !tag.equals(photoToLoad.url))
            return true;
        return false;"
1944,run,"        public void run() {
            try{
                if(imageViewReused(photoToLoad))"
1947,queuePhoto,"    private void queuePhoto(String url, ImageView imageView)
    {
        PhotoToLoad p=new PhotoToLoad(url, imageView);
        executorService.submit(new PhotosLoader(p));"
1948,DisplayImage,"    public void DisplayImage(String url, ImageView imageView)
    {
        imageViews.put(imageView, url);
        Bitmap bitmap=memoryCache.get(url);
        if(bitmap!=null)"
1949,clear,"    public void clear(){
        File[] files=cacheDir.listFiles();
        if(files==null)
            return;
        for(File f:files)"
1952,isLibPath,"	public static boolean isLibPath(String qualifiedName) {
		return qualifiedName.startsWith(LIBS_PACKAGE + ""."");
	}"
1953,isJDKPath,"	public static boolean isJDKPath(String qualifiedName) {
		return qualifiedName.startsWith(JAVA_PACKAGE + ""."");
	}"
1955,isJDKReplacementMode,"	public static boolean isJDKReplacementMode() {
		return ""java.lang"".equals(LANG_PACKAGE);
	}"
1957,toJsIdentifier,"	public static String toJsIdentifier(String identifier) {
		if (!identifier.isEmpty() && Character.isUpperCase(identifier.charAt(0))
				&& JSweetDefTranslatorConfig.JAVA_KEYWORDS.contains(identifier.toLowerCase())) {
			return identifier.toLowerCase();"
1960,main,"	public static void main(String[] args) throws Throwable {

		if (args.length < 1) {
			System.out.println(""usage: java -jar candy-tool.jar <command> [<args>]"");
			System.out.println();"
1961,onClick,"    public void onClick(View view) {
        JPTabBar tabBar = (JPTabBar) ((Activity)getContext()).findViewById(R.id.tabbar);
        tabBar.setTabTypeFace(""fonts/Jaden.ttf"");
    }"
1962,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.tab4,null);
        layout.findViewById(R.id.button1).setOnClickListener(this);
        return layout;
    }"
1963,onCheckedChanged,"    public void onCheckedChanged(RadioGroup group, @IdRes int checkedId) {
        switch (checkedId){
            case R.id.radioButton1:"
1964,init,"    private void init(View layout) {
        mTabBar = ((MainActivity)getActivity()).getTabbar();

        ((RadioGroup)layout.findViewById(R.id.radioGroup1)).setOnCheckedChangeListener(this);
        ((RadioGroup)layout.findViewById(R.id.radioGroup2)).setOnCheckedChangeListener(this);"
1965,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.tab3,null);
        init(layout);
        return layout;
    }"
1967,init,"    private void init(View layout) {
        mTabBar = ((MainActivity)getActivity()).getTabbar();
        mGroup = (RadioGroup) layout.findViewById(R.id.radioGroup);
        mGroup.setOnCheckedChangeListener(this);
    }"
1968,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout =inflater.inflate(R.layout.tab2,null);
        init(layout);
        return layout;
    }"
1970,afterTextChanged,"    public void afterTextChanged(Editable s) {
        if(s!=null&&s.toString().equals(""0"")){
            mTabBar.showBadge(0, """"+0,true);
            mTabBar.hideBadge(0);
            return;
        }"
1971,onTextChanged,"    public void onTextChanged(CharSequence s, int start, int before, int count) {
    }"
1972,beforeTextChanged,"    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
"
1973,onClick,"    public void onClick(View v) {
        int count = Integer.parseInt(mNumberEt.getText().toString());
        if (v == mMinusIb) {
            count--;"
1975,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.tab1, null);
        init(layout);
        return layout;
    }"
1976,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_say);
    }"
1979,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent arg0) {
        if (noScroll)
            return false;"
1981,scrollTo,"    public void scrollTo(int x, int y) {
        super.scrollTo(x, y);
    }"
1985,onTabSelect,"    public void onTabSelect(int index) {
        Toast.makeText(MainActivity.this,""choose the tab index is ""+index,Toast.LENGTH_SHORT).show();
    }"
1986,onDismiss,"    public void onDismiss(int position) {
            mTab1.clearCount();
    }"
1991,addOffset,"    protected void
    addOffset(@Nullable String fileName) {

        LineAndColumnTracker t = this.tracker;
        assert t != null;"
1998,run,"            @Override public ClassLoader
            run() {
                return new ByteArrayClassLoader("
2004,compare,"        @Override @NotNullByDefault(false) public int
        compare(Location l1, Location l2) {
            return ("
2010,evaluate,"    @Override @Nullable public Object
    evaluate(int idx, @Nullable Object[] arguments) throws InvocationTargetException {
        try {"
2012,createFastEvaluator,"    @Override public <T> T
    createFastEvaluator(
        String   script,"
2015,hashCode,"                @Override public int
                hashCode() { return this.name.hashCode() ^ Arrays.hashCode(this.parameterTypes); }
            }"
2016,equals,"                @Override public boolean
                equals(@Nullable Object o) {
                    if (!(o instanceof MethodWrapper)) return false;
                    MethodWrapper that = (MethodWrapper) o;
                    return ("
2018,cook,"    @Override public void
    cook(String[] fileNames, Reader[] readers) throws CompileException, IOException {
"
2019,cook,"    @Override public void
    cook(@Nullable String fileName, Reader reader) throws CompileException, IOException {
        String[] imports;

        if (!reader.markSupported()) reader = new BufferedReader(reader);
        imports = ClassBodyEvaluator.parseImportDeclarations(reader);"
2027,evaluate,"    @Override @Nullable public Object
    evaluate(@Nullable Object[] arguments) throws InvocationTargetException { return this.evaluate(0, arguments); }
"
2028,evaluate,"    @Override @Nullable public Object
    evaluate() throws InvocationTargetException { return this.evaluate(new Object[0]); }
"
2051,report,"                @Override public void
                report(@Nullable final Diagnostic<? extends JavaFileObject> diagnostic) {
                    assert diagnostic != null;
"
2054,findClass,"    @NotNullByDefault(false) @Override protected Class<?>
    findClass(String className) throws ClassNotFoundException {
"
2064,createFastEvaluator,"    @Override public <T> T
    createFastEvaluator(String expression, Class<? extends T> interfaceToImplement, String... parameterNames)
    throws CompileException {"
2070,evaluate,"    @Override @Nullable public Object
    evaluate(int idx, @Nullable Object[] arguments) throws InvocationTargetException {
        return this.se.evaluate(idx, arguments);"
2071,evaluate,"    @Override @Nullable public Object
    evaluate(@Nullable Object[] arguments) throws InvocationTargetException { return this.se.evaluate(arguments); }
"
2074,cook,"    @Override public void
    cook(@Nullable String fileName, Reader reader) throws CompileException, IOException {

        this.se.setScriptCount(1);

        if (!reader.markSupported()) reader = new BufferedReader(reader);
        final String[] imports = ClassBodyEvaluator.parseImportDeclarations(reader);

        StringWriter sw = new StringWriter();
        PrintWriter  pw = new PrintWriter(sw);"
2101,run,"            @Override public JavaSourceClassLoader run() { return new JavaSourceClassLoader(parentClassLoader); }
        });
    }"
2102,newJavaSourceClassLoader,"    @Override public AbstractJavaSourceClassLoader
    newJavaSourceClassLoader(final ClassLoader parentClassLoader) {
        return AccessController.doPrivileged(new PrivilegedAction<JavaSourceClassLoader>() {"
2103,run,"            @Override public JavaSourceClassLoader run() { return new JavaSourceClassLoader(); }
        });
    }"
2104,newJavaSourceClassLoader,"    @Override public AbstractJavaSourceClassLoader
    newJavaSourceClassLoader() {
        return AccessController.doPrivileged(new PrivilegedAction<JavaSourceClassLoader>() {"
2105,newCompiler,"    @Override public ICompiler
    newCompiler() { return new Compiler(); }
"
2106,newSimpleCompiler,"    @Override public ISimpleCompiler
    newSimpleCompiler() { return new SimpleCompiler(); }
"
2107,newClassBodyEvaluator,"    @Override public IClassBodyEvaluator
    newClassBodyEvaluator() { return new ClassBodyEvaluator(); }
"
2108,newScriptEvaluator,"    @Override public IScriptEvaluator
    newScriptEvaluator() { return new ScriptEvaluator(); }
"
2109,newExpressionEvaluator,"    @Override public IExpressionEvaluator
    newExpressionEvaluator() { return new ExpressionEvaluator(); }
"
2111,toString,"    @Override public String
    toString() { return ""jdk""; }
"
2113,filesToPath,"    private static String
    filesToPath(File[] files) {
        StringBuilder sb = new StringBuilder();
        for (File cpe : files) {
            if (sb.length() > 0) sb.append(File.pathSeparatorChar);"
2115,compile,"    static void
    compile(
        JavaCompiler                        compiler,
        List<String>                        options,
        Collection<JavaFileObject>          sourceFileObjects,
        JavaFileManager                     fileManager,
        @Nullable final ErrorHandler        compileErrorHandler,"
2116,getJavaFileManager,"    private static JavaFileManager
    getJavaFileManager(
        JavaCompiler    compiler,
        ResourceFinder  sourceFileFinder,
        Charset         sourceFileCharset,
        ResourceFinder  classFileFinder,
        ResourceCreator classFileCreator"
2117,compile,"    static void
    compile(
        JavaCompiler                  compiler,
        List<String>                  options,
        ResourceFinder                sourceFinder,
        Charset                       sourceFileCharset,"
2119,compile,"    @Override public void
    compile(final Resource[] sourceResources) throws CompileException, IOException {
        this.compile(sourceResources, null);"
2122,createInstance,"    @Override public Object
    createInstance(Reader reader) throws CompileException, IOException {
        this.cook(reader);
        try {"
2124,run,"            @Override public void run() { ClassBodyEvaluator.this.sc.addOffset(fileName); }
        });
    }"
2125,newFileName,"    protected Reader
    newFileName(@Nullable final String fileName, Reader reader) {
        return Readers.onFirstChar(reader, new Runnable() {"
2129,cook,"    @Override public void
    cook(@Nullable String fileName, Reader r) throws CompileException, IOException {
        if (!r.markSupported()) r = new BufferedReader(r);
        this.cook(fileName, ClassBodyEvaluator.parseImportDeclarations(r), r);"
2143,completeSecurityScopeNameValue,"  public boolean completeSecurityScopeNameValue() {
    return pathResolver.isSecurityScopeNameValue(psiElement);
  }"
2144,completeTagsValue,"  public boolean completeTagsValue() {
    return pathResolver.isTagsValue(psiElement);
  }"
2145,completeHeadersCollectionFormat,"  public boolean completeHeadersCollectionFormat() {
    return pathResolver.childOfHeadersCollectionFormat(psiElement);
  }"
2146,completeParametersCollectionFormat,"  public boolean completeParametersCollectionFormat() {
    return pathResolver.childOfParametersCollectionFormat(psiElement);
  }"
2147,completeItemsCollectionFormat,"  public boolean completeItemsCollectionFormat() {
    return pathResolver.childOfItemsCollectionFormat(psiElement);
  }"
2148,completeOperationSecurityKey,"  public boolean completeOperationSecurityKey() {
    return pathResolver.childOfOperationSecurityKey(psiElement);
  }"
2149,completeRootSecurityKey,"  public boolean completeRootSecurityKey() {
    return pathResolver.childOfRootSecurityKey(psiElement);
  }"
2150,completeResponseDefinition,"  public boolean completeResponseDefinition() {
    return pathResolver.childOfResponseDefinition(psiElement);
  }"
2151,completeResponseRefValue,"  public boolean completeResponseRefValue() {
    return pathResolver.isResponseRefValue(psiElement);
  }"
2152,completeInValue,"  public boolean completeInValue() {
    return pathResolver.isInValue(psiElement);
  }"
2153,completeFormatValue,"  public boolean completeFormatValue() {
    return pathResolver.isFormatValue(psiElement);
  }"
2154,completeTypeValue,"  public boolean completeTypeValue() {
    return pathResolver.isTypeValue(psiElement);
  }"
2155,completeBooleanValue,"  public boolean completeBooleanValue() {
    return pathResolver.isBooleanValue(psiElement);
  }"
2156,completeParameterRefValue,"  public boolean completeParameterRefValue() {
    return pathResolver.isParameterRefValue(psiElement);
  }"
2157,completeDefinitionRefValue,"  public boolean completeDefinitionRefValue() {
    return pathResolver.isDefinitionRefValue(psiElement);
  }"
2158,completeSchemesValue,"  public boolean completeSchemesValue() {
    return pathResolver.isSchemesValue(psiElement);
  }"
2159,completeMimeValue,"  public boolean completeMimeValue() {
    return pathResolver.isMimeValue(psiElement);
  }"
2160,completeParameterDefinitionKey,"  public boolean completeParameterDefinitionKey() {
    return pathResolver.childOfParameterDefinition(psiElement);
  }"
2161,completeDefinitionsKey,"  public boolean completeDefinitionsKey() {
    return pathResolver.childOfDefinitions(psiElement);
  }"
2162,completeXmlKey,"  public boolean completeXmlKey() {
    return pathResolver.childOfXml(psiElement);
  }"
2163,completeAdditionalPropertiesKey,"  public boolean completeAdditionalPropertiesKey() {
    return pathResolver.childOfAdditionalProperties(psiElement);
  }"
2164,completePropertiesSchemaKey,"  public boolean completePropertiesSchemaKey() {
    return pathResolver.childOfPropertiesSchema(psiElement);
  }"
2165,completeSchemaItemsKey,"  public boolean completeSchemaItemsKey() {
    return pathResolver.childOfSchemaItems(psiElement);
  }"
2166,completeSchemaKey,"  public boolean completeSchemaKey() {
    return pathResolver.childOfSchema(psiElement);
  }"
2167,completeSecurityDefinitionKey,"  public boolean completeSecurityDefinitionKey() {
    return pathResolver.childOfSecurityDefinition(psiElement);
  }"
2168,completeTagKey,"  public boolean completeTagKey() {
    return pathResolver.childOfTag(psiElement);
  }"
2169,completeHeadersKey,"  public boolean completeHeadersKey() {
    return pathResolver.childOfHeaders(psiElement);
  }"
2170,completeHeaderKey,"  public boolean completeHeaderKey() {
    return pathResolver.childOfHeader(psiElement);
  }"
2171,completeResponseKey,"  public boolean completeResponseKey() {
    return pathResolver.childOfResponse(psiElement);
  }"
2172,completeResponsesKey,"  public boolean completeResponsesKey() {
    return pathResolver.childOfResponses(psiElement);
  }"
2173,completeParameterItemsKey,"  public boolean completeParameterItemsKey() {
    return pathResolver.childOfParameterItems(psiElement);
  }"
2174,completeParametersKey,"  public boolean completeParametersKey() {
    return pathResolver.childOfParameters(psiElement);
  }"
2175,completeExternalDocsKey,"  public boolean completeExternalDocsKey() {
    return pathResolver.childOfExternalDocs(psiElement);
  }"
2176,completeOperationKey,"  public boolean completeOperationKey() {
    return pathResolver.childOfOperation(psiElement);
  }"
2177,completePathKey,"  public boolean completePathKey() {
    return pathResolver.childOfPath(psiElement);
  }"
2178,completeLicenseKey,"  public boolean completeLicenseKey() {
    return pathResolver.childOfLicense(psiElement);
  }"
2179,completeContactKey,"  public boolean completeContactKey() {
    return pathResolver.childOfContact(psiElement);
  }"
2180,completeInfoKey,"  public boolean completeInfoKey() {
    return pathResolver.childOfInfo(psiElement);
  }"
2181,completeRootKey,"  public boolean completeRootKey() {
    return pathResolver.childOfRoot(psiElement);
  }"
2182,completeDiscriminatorKey,"  public boolean completeDiscriminatorKey() {
    return pathResolver.childOfDiscriminator(psiElement);
  }"
2183,completeContentKey,"  public boolean completeContentKey() {
    return pathResolver.childOfContent(psiElement);
  }"
2184,completeSecuritySchemeKey,"  public boolean completeSecuritySchemeKey() {
    return pathResolver.childOfSecurityScheme(psiElement);
  }"
2185,completeCallbackKey,"  public boolean completeCallbackKey() {
    return pathResolver.childOfCallback(psiElement);
  }"
2186,completeLinkKey,"  public boolean completeLinkKey() {
    return pathResolver.childOfLink(psiElement);
  }"
2187,completeEncodingKey,"  public boolean completeEncodingKey() {
    return pathResolver.childOfEncoding(psiElement);
  }"
2188,completeExampleKey,"  public boolean completeExampleKey() {
    return pathResolver.childOfExample(psiElement);
  }"
2189,completeMediaTypeKey,"  public boolean completeMediaTypeKey() {
    return pathResolver.childOfMediaType(psiElement);
  }"
2190,completeRequestBodyKey,"  public boolean completeRequestBodyKey() {
    return pathResolver.childOfRequestBody(psiElement);
  }"
2191,completeComponentKey,"  public boolean completeComponentKey() {
    return pathResolver.childOfComponent(psiElement);
  }"
2192,completeServerVariableKey,"  public boolean completeServerVariableKey() {
    return pathResolver.childOfServerVariable(psiElement);
  }"
2193,completeServerKey,"  public boolean completeServerKey() {
    return pathResolver.childOfServer(psiElement);
  }"
2196,completeStyleValue,"  public boolean completeStyleValue() {
    return pathResolver.isStyleValue(psiElement);
  }"
2200,completeMappingRefValue,"  public boolean completeMappingRefValue() {
    return pathResolver.isMappingRefValue(psiElement);
  }"
2201,completeCallbackRefValue,"  public boolean completeCallbackRefValue() {
    return pathResolver.isCallbackRefValue(psiElement);
  }"
2202,completeLinkRefValue,"  public boolean completeLinkRefValue() {
    return pathResolver.isLinkRefValue(psiElement);
  }"
2203,completeHeaderRefValue,"  public boolean completeHeaderRefValue() {
    return pathResolver.isHeaderRefValue(psiElement);
  }"
2204,completeRequestBodyRefValue,"  public boolean completeRequestBodyRefValue() {
    return pathResolver.isRequestBodyRefValue(psiElement);
  }"
2205,completeExampleRefValue,"  public boolean completeExampleRefValue() {
    return pathResolver.isExampleRefValue(psiElement);
  }"
2207,completeSchemaRefValue,"  public boolean completeSchemaRefValue() {
    return pathResolver.isSchemaRefValue(psiElement);
  }"
2224,isUniqueArrayStringValue,"  public boolean isUniqueArrayStringValue(final String keyName) {
    return traversal.isUniqueArrayStringValue(keyName, psiElement);
  }"
2229,extractSecurityNameFromSecurityObject,"  public Optional<String> extractSecurityNameFromSecurityObject(final PsiElement psiElement) {
    return traversal.extractSecurityNameFromSecurityItem(psiElement);
  }"
2230,createInsertValueHandler,"  public InsertHandler<LookupElement> createInsertValueHandler(final Value value) {
    return traversal.createInsertValueHandler(value);
  }"
2231,createInsertFieldHandler,"  public InsertHandler<LookupElement> createInsertFieldHandler(final Field field) {
    return traversal.createInsertFieldHandler(field);
  }"
2232,isUniqueKey,"  public boolean isUniqueKey(final String keyName) {
    List<? extends PsiNamedElement> children =
        new PathFinder().findDirectNamedChildren(""parent"", psiElement);
"
2233,hasPath,"  public boolean hasPath(final String pathExpression) {
    return new PathFinder().isInsidePath(psiElement, pathExpression);
  }"
2237,compareTo,"        public int compareTo(Cell o) {
            return this.lexeme.compareTo(o.lexeme);
        }"
2239,isEmpty,"    boolean isEmpty() {
        return this.size == 0;
    }"
2241,pollLast,"    Lexeme pollLast() {
        if (this.size == 1) {
            Lexeme last = this.head.lexeme;"
2242,peekLast,"    Lexeme peekLast() {
        if (this.tail != null) {
            return this.tail.lexeme;
        }"
2243,pollFirst,"    Lexeme pollFirst() {
        if (this.size == 1) {
            Lexeme first = this.head.lexeme;"
2244,peekFirst,"    Lexeme peekFirst() {
        if (this.head != null) {
            return this.head.lexeme;
        }"
2245,addLexeme,"    void addLexeme(Lexeme lexeme) {
        Cell newCell = new Cell(lexeme);
        if (this.size == 0) {
            this.head = newCell;"
2255,checkCross,"    boolean checkCross(Lexeme lexeme) {
        return (lexeme.getBegin() >= this.pathBegin && lexeme.getBegin() < this.pathEnd)
                || (this.pathBegin >= lexeme.getBegin() && this.pathBegin < lexeme.getBegin() + lexeme.getLength());"
2256,removeTail,"    void removeTail() {
        Lexeme tail = this.pollLast();
        if (this.isEmpty()) {
            this.pathBegin = -1;"
2257,addNotCrossLexeme,"    boolean addNotCrossLexeme(Lexeme lexeme) {
        if (this.isEmpty()) {
            this.addLexeme(lexeme);"
2258,addCrossLexeme,"    boolean addCrossLexeme(Lexeme lexeme) {
        if (this.isEmpty()) {
            this.addLexeme(lexeme);"
2259,toString,"    public String toString() {
        return this.getBeginPosition() + ""-"" + this.getEndPosition() +
                "" : "" + this.lexemeText + "" : \t"" +"
2275,hashCode,"    public int hashCode() {
        int absBegin = getBeginPosition();
        int absEnd = getEndPosition();
        return (absBegin * 37) + (absEnd * 31) + ((absBegin * absEnd) % getLength()) * 11;
    }"
2276,equals,"    public boolean equals(Object o) {
        if (o == null) {
            return false;
        }
"
2277,isNumConnector,"    private boolean isNumConnector(char input) {
        int index = Arrays.binarySearch(Num_Connector, input);
        return index >= 0;
    }"
2278,isLetterConnector,"    private boolean isLetterConnector(char input) {
        int index = Arrays.binarySearch(Letter_Connector, input);
        return index >= 0;
    }"
2282,reset,"    public void reset() {
        this.start = -1;
        this.end = -1;
        this.englishStart = -1;
        this.englishEnd = -1;
        this.arabicStart = -1;
        this.arabicEnd = -1;
    }"
2286,reset,"    public synchronized void reset(Reader input) {
        this.input = input;
        context.reset();
        for (ISegmenter segmenter : segmenters) {
            segmenter.reset();"
2290,backPath,"    private void backPath(Lexeme l, LexemePath option) {
        while (option.checkCross(l)) {
            option.removeTail();"
2293,process,"    void process(AnalyzeContext context, boolean useSmart) {
        QuickSortSet orgLexemes = context.getOrgLexemes();
        Lexeme orgLexeme = orgLexemes.pollFirst();

        LexemePath crossPath = new LexemePath();
        while (orgLexeme != null) {
            if (!crossPath.addCrossLexeme(orgLexeme)) {"
2298,reset,"    public void reset() {
        nStart = -1;
        nEnd = -1;
        countHits.clear();
    }"
2302,regularize,"    static char regularize(char input) {
        if (input == 12288) {
            input = (char) 32;
"
2303,identifyCharType,"    static int identifyCharType(char input) {
        if (input >= '0' && input <= '9') {
            return CHAR_ARABIC;
"
2304,compound,"    private void compound(Lexeme result) {
        if (!this.cfg.useSmart()) {
            return;
        }"
2305,reset,"    void reset() {
        this.buffLocker.clear();
        this.orgLexemes = new QuickSortSet();
        this.available = 0;
        this.buffOffset = 0;
        this.charTypes = new int[BUFF_SIZE];
        this.cursor = 0;
        this.results.clear();
        this.segmentBuff = new char[BUFF_SIZE];
        this.pathMap.clear();
    }"
2307,outputSingleCJK,"    private void outputSingleCJK(int index) {
        if (CharacterUtil.CHAR_CHINESE == this.charTypes[index]) {
            Lexeme singleCharLexeme = new Lexeme(this.buffOffset, index, 1, Lexeme.TYPE_CNCHAR);"
2310,addLexemePath,"    void addLexemePath(LexemePath path) {
        if (path != null) {
            this.pathMap.put(path.getPathBegin(), path);"
2311,addLexeme,"    void addLexeme(Lexeme lexeme) {
        this.orgLexemes.addLexeme(lexeme);
    }"
2312,markBufferOffset,"    void markBufferOffset() {
        this.buffOffset += this.cursor;
    }"
2313,needRefillBuffer,"    boolean needRefillBuffer() {
        return this.available == BUFF_SIZE
                && this.cursor < this.available - 1"
2314,isBufferConsumed,"    boolean isBufferConsumed() {
        return this.cursor == this.available - 1;
    }"
2315,isBufferLocked,"    private boolean isBufferLocked() {
        return this.buffLocker.size() > 0;
    }"
2316,unlockBuffer,"    void unlockBuffer(String segmenterName) {
        this.buffLocker.remove(segmenterName);
    }"
2317,lockBuffer,"    void lockBuffer(String segmenterName) {
        this.buffLocker.add(segmenterName);
    }"
2318,moveCursor,"    boolean moveCursor() {
        if (this.cursor < this.available - 1) {
            this.cursor++;"
2319,initCursor,"    void initCursor() {
        this.cursor = 0;
        this.segmentBuff[this.cursor] = CharacterUtil.regularize(this.segmentBuff[this.cursor]);
        this.charTypes[this.cursor] = CharacterUtil.identifyCharType(this.segmentBuff[this.cursor]);
    }"
2328,onDependentViewChanged,"    public boolean onDependentViewChanged(CoordinatorLayout parent, FloatingActionButton fab, View dependency) {
        boolean returnValue = super.onDependentViewChanged(parent, fab, dependency);
        if (dependency instanceof AppBarLayout) {
                CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) fab.getLayoutParams();
                int fabBottomMargin = lp.bottomMargin;"
2329,layoutDependsOn,"    public boolean layoutDependsOn(CoordinatorLayout parent, FloatingActionButton fab, View dependency) {
        return super.layoutDependsOn(parent, fab, dependency) || (dependency instanceof AppBarLayout);
    }"
2330,testCardinalityInstance,"    public void testCardinalityInstance() throws Exception {
        final String json = ""{\""type\"":\""cardinality\"",\""size\"":1,\""extent\"":2,\""method\"":{\""type\"":\""exact\"",\""includeKey\"":false}}"";
        final CardinalityInstance aggregation = new CardinalityInstance(1, 2,
            new CardinalityMethod.ExactCardinalityMethod(false));

        assertEquals(json, mapper.writeValueAsString(aggregation));"
2331,setupBucket,"    protected CardinalityBucket setupBucket(final long timestamp) {
        return new HyperLogLogCardinalityBucket(42, true, 0.01D);
    }"
2332,allowedError,"    protected double allowedError() {
        return 0.9D;
    }"
2333,setupBucket,"    protected CardinalityBucket setupBucket(final long timestamp) {
        return new ExactCardinalityBucket(timestamp, true);
    }"
2334,allowedError,"    protected double allowedError() {
        return 0D;
    }"
2335,assertWithinVariance,"    private void assertWithinVariance(final long expected, final long count) {
        final double allowedError = allowedError();
        final double error = Math.abs(((double) expected / (double) count) - 1.0D);

        assertTrue(String.format(""Error (%f) not within (%f)"", error, allowedError),"
2336,strainTest,"    public void strainTest() {
        final CardinalityBucket bucket = setupBucket(42);

        for (int i = 0; i < 100000; i++) {
            bucket.update(t1, new Point(42, 1D * i));"
2337,basicTest,"    public void basicTest() {
        final CardinalityBucket bucket = setupBucket(42);
        bucket.update(t1, new Point(42, 1D));
        bucket.update(t1, new Point(42, 1D));
        bucket.update(t1, new Point(42, 2D));
        bucket.update(t2, new Point(42, 1D));

        assertWithinVariance(3L, bucket.count());"
2338,allowedError,"    protected double allowedError() {
        return 0.01D;
    }"
2339,setupBucket,"    protected abstract CardinalityBucket setupBucket(long timestamp);
"
2340,accept,"                                public void accept(String it) {
                                    GMApplication.getInstance().getDatabase().movieDao().deleteFuture();
                                }"
2341,accept,"                                public void accept(List<MovieEntity> list) {
                                    for (int i = 0, size = list.size(); i < size; i++) {
                                        list.get(i).setRank(i);
                                    }"
2342,saveRemoteResult,"            protected void saveRemoteResult(List<MovieEntity> data) {
                if (data != null && !data.isEmpty()) {
                    Observable.just(data)"
2343,requestApi,"            protected LiveData<ApiResponse<List<MovieEntity>>> requestApi() {
                MovieService service = new ApiClient().createApi(MovieService.class);
                ApiResponse<List<MovieEntity>> response = new ApiResponse<>();
                return response.map(service.movieFutureListGet(cityId));
            }"
2344,loadFromLocal,"            protected LiveData<List<MovieEntity>> loadFromLocal() {
                return GMApplication.getInstance().getDatabase().movieDao().loadMovieFutureList();
            }"
2346,accept,"                                public void accept(String it) {
                                    GMApplication.getInstance().getDatabase().movieDao().deleteNow();
                                }"
2347,accept,"                                public void accept(List<MovieEntity> list) {
                                    for (int i = 0, size = list.size(); i < size; i++) {
                                        list.get(i).setRank(i);
                                        list.get(i).setNow(true);"
2349,requestApi,"            protected LiveData<ApiResponse<List<MovieEntity>>> requestApi() {
                MovieService service = new ApiClient().createApi(MovieService.class);
                ApiResponse<List<MovieEntity>> response = new ApiResponse<>();
                return response.map(service.movieNowListGet(cityId));
            }"
2350,loadFromLocal,"            protected LiveData<List<MovieEntity>> loadFromLocal() {
                return GMApplication.getInstance().getDatabase().movieDao().loadMovieNowList();
            }"
2358,accept,"                    public void accept(String it) {
                        GMApplication.getInstance().getDatabase().cityDao().updateCity(city);
                    }"
2359,updateCity,"    public void updateCity(CityEntity city) {
        mCity.postValue(city);

        Observable.just("""")"
2361,accept,"                                public void accept(String it) {
                                    GMApplication.getInstance().getDatabase().boxOfficeDao().delete();
                                }"
2362,accept,"                                public void accept(List<BoxOfficeEntity> list) {
                                    GMApplication.getInstance().getDatabase().boxOfficeDao().update(list);
                                }"
2363,saveRemoteResult,"            protected void saveRemoteResult(List<BoxOfficeEntity> data) {
                if (data != null && !data.isEmpty()) {
                    Observable.just(data)"
2365,loadFromLocal,"            protected LiveData<List<BoxOfficeEntity>> loadFromLocal() {
                return GMApplication.getInstance().getDatabase().boxOfficeDao().loadBoxOfficeList();
            }"
2366,ifFetchNetworkFailedThenLoadLocalData,"            protected boolean ifFetchNetworkFailedThenLoadLocalData() {
                return true;
            }"
2370,removeComposedFolder,"    public static void removeComposedFolder(@NotNull String folder) {
        Project currentProject = Utils.getCurrentProject();
        if (currentProject != null) {
            Gson gson = new Gson();"
2371,addComposedFolder,"    public static void addComposedFolder(@NotNull String folder) {
        Project currentProject = Utils.getCurrentProject();
        if (currentProject != null) {
            Gson gson = new Gson();"
2372,isComposed,"    public static boolean isComposed(@NotNull String folder) {
        boolean isFoldingOn = false;
        Project currentProject = Utils.getCurrentProject();
        if (currentProject != null) {
            Settings settings = getSettings(currentProject);
            isFoldingOn = settings.getComposedFolders().contains(folder);"
2377,isModified,"    public boolean isModified() {

        return isModified;"
2379,actionPerformed,"            public void actionPerformed(ActionEvent actionEvent) {
                isModified = true;
            }"
2380,changedUpdate,"            public void changedUpdate(DocumentEvent e) {
                isModified = true;
            }"
2381,removeUpdate,"            public void removeUpdate(DocumentEvent e) {
                isModified = true;
            }"
2382,insertUpdate,"            public void insertUpdate(DocumentEvent e) {
                isModified = true;
            }"
2383,actionPerformed,"            public void actionPerformed(ActionEvent actionEvent) {
                boolean selected = getCheckBoxStatus(actionEvent);

                customPattern.setEnabled(selected);
                isModified = true;"
2384,createComponent,"    public JComponent createComponent() {

        useCustomPatternCheckBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                boolean selected = getCheckBoxStatus(actionEvent);

                customPattern.setEnabled(selected);"
2388,createComposedFiles,"    private List<AbstractTreeNode> createComposedFiles(@NotNull Collection<AbstractTreeNode> fileNodes, ViewSettings viewSettings) {
        List<AbstractTreeNode> resultList = new ArrayList<>();
        Project project = Utils.getCurrentProject();
        if (project != null) {
            HashSet<String> composedDirNameSet = new HashSet<>();
            List<AbstractTreeNode> notComposedFileNodes = new ArrayList<>();"
2391,updateImpl,"    protected void updateImpl(PresentationData presentationData) {
        super.updateImpl(presentationData);

        presentationData.setPresentableText(mName);"
2392,update,"    protected void update(PresentationData presentation) {
        presentation.setPresentableText(mName);
        presentation.setIcon(AllIcons.Nodes.Folder);
    }"
2394,addAllChildren,"    public void addAllChildren(List<AbstractTreeNode> treeNodeList) {
        mChildNodeList.addAll(treeNodeList);
    }"
2395,addChildren,"    public void addChildren(AbstractTreeNode treeNode) {
        mChildNodeList.add(treeNode);
    }"
2396,contains,"    public boolean contains(@NotNull VirtualFile file) {
        for (final AbstractTreeNode childNode : mChildNodeList) {
            ProjectViewNode treeNode = (ProjectViewNode) childNode;
            if (treeNode.contains(file)) {"
2397,update,"    public void update(AnActionEvent actionEvent) {
        boolean enabledAndVisible = false;
        Project project = actionEvent.getData(CommonDataKeys.PROJECT);
        if (project != null) {
            Object nav = actionEvent.getData(CommonDataKeys.NAVIGATABLE);
"
2398,actionPerformed,"    public void actionPerformed(AnActionEvent actionEvent) {
        Object nav = actionEvent.getData(CommonDataKeys.NAVIGATABLE);
        if (nav instanceof PsiDirectory) {
            PsiDirectory directory = (PsiDirectory) nav;"
2399,run,"    public void run() {
        try {
            while( ! downLoadThread.isInterrupted()){"
2400,onClick,"    public void onClick(View v) {
        if(!flikerProgressBar.isFinish()){
            flikerProgressBar.toggle();"
2401,downLoad,"    private void downLoad() {
        downLoadThread = new Thread(this);
        downLoadThread.start();
    }"
2403,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        flikerProgressBar = (FlikerProgressBar) findViewById(R.id.flikerbar);
        roundProgressbar = (FlikerProgressBar) findViewById(R.id.round_flikerbar);

        flikerProgressBar.setOnClickListener(this);
        roundProgressbar.setOnClickListener(this);"
2404,handleMessage,"        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            flikerProgressBar.setProgress(msg.arg1);
            roundProgressbar.setProgress(msg.arg1);
            if(msg.arg1 == 100){
                flikerProgressBar.finishLoad();"
2405,showWarning,"	private void showWarning(String text) {
		JOptionPane.showMessageDialog(this, text, ""Warning"",
				JOptionPane.WARNING_MESSAGE);"
2406,showError,"	private void showError(String text) {
		JOptionPane.showMessageDialog(this, text, ""Error"",
				JOptionPane.ERROR_MESSAGE);"
2408,run,"					public void run() {
						Vector<String> export = getExportFolders();

						for (int i = 0; i < files.length; i++) {
							for (String exportString : export) {"
2409,filesDropped,"			public void filesDropped(final File[] files) {

				if (resFile == null) {
					showWarning(""Please select a destination folder first!"");
					return;
				}"
2410,actionPerformed,"			public void actionPerformed(ActionEvent arg0) {
				JFileChooser j = new JFileChooser();
				j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
				Integer returnVal = j.showOpenDialog(btnBrowse);
				if (returnVal == JFileChooser.APPROVE_OPTION) {
					resFile = j.getSelectedFile();"
2411,run,"			public void run() {
				try {
					ResizerFrame frame = new ResizerFrame();"
2412,main,"	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {"
2414,getRequiredSize,"	private static int getRequiredSize(String originalSize, String resFolder,
			int width) {
		float destRatio=1;
		if(resFolder.equalsIgnoreCase(""ldpi"")) {
			destRatio = LDPI_RATIO;
		}else if(resFolder.equalsIgnoreCase(""mdpi"")) {
			destRatio = MDPI_RATIO;"
2416,run,"            public void run() {
                createAndShowGUI();
            }"
2425,filesDropped,"        public abstract void filesDropped( java.io.File[] files );
        "
2430,hierarchyChanged,"        {   public void hierarchyChanged( java.awt.event.HierarchyEvent evt )
            {   log( out, ""FileDrop: Hierarchy changed."" );
                java.awt.Component parent = c.getParent();
                if( parent == null )
                {   c.setDropTarget( null );"
2432,createFileArray,"     private static File[] createFileArray(BufferedReader bReader, PrintStream out)
     {
        try { 
            java.util.List list = new java.util.ArrayList();"
2439,saveFields,"    public abstract void saveFields(XContentBuilder builder) throws IOException;
}"
2441,on,"    private static Timestamp<?> on(@SuppressWarnings(""rawtypes"") Map map, boolean meta) {
        String tsField = meta ? MongoDBRiver.LAST_TIMESTAMP_FIELD : MongoDBRiver.OPLOG_TIMESTAMP;
        Object timestamp = map.get(tsField);
        if (timestamp == null) {
            return null;
        }
        if (timestamp instanceof String) {
            timestamp = JSON.parse((String) timestamp);
        }"
2442,on,"    public static Timestamp<?> on(Map<String, Object> map) {
        return on(map, true);
    }"
2443,on,"    public static Timestamp<?> on(DBObject entry) {
        return on(entry.toMap(), false);
    }"
2444,compare,"    public static int compare(Timestamp oplogTimestamp, Timestamp startTimestamp) {
        return oplogTimestamp.compareTo(startTimestamp);
    }"
2445,saveFields,"        public void saveFields(XContentBuilder builder) throws IOException {
            builder.field(MongoDBRiver.LAST_TIMESTAMP_FIELD, JSON.serialize(ts));
            builder.field(MongoDBRiver.LAST_GTID_FIELD, JSONSerializers.getStrict().serialize(gtid));
        }"
2448,toString,"        public String toString() {
            return ""Timestamp.GTID(ts="" + JSON.serialize(ts) + "", gtid="" + JSONSerializers.getStrict().serialize(gtid) + "")"";
        }"
2449,hashCode,"        public int hashCode() {
            return Arrays.hashCode(gtid);
        }"
2450,equals,"        public boolean equals(Object o) {
            return o instanceof GTID && Arrays.equals(gtid, ((GTID) o).gtid);
        }"
2451,compareTo,"        public int compareTo(Timestamp<GTID> o) {
            return UnsignedBytes.lexicographicalComparator().compare(this.gtid, ((GTID) o).gtid);
        }"
2452,saveFields,"        public void saveFields(XContentBuilder builder) throws IOException {
            builder.field(MongoDBRiver.LAST_TIMESTAMP_FIELD, JSON.serialize(ts));
        }"
2455,toString,"        public String toString() {
            return ""Timestamp.BSON(ts="" + JSON.serialize(ts) + "")"";
        }"
2456,hashCode,"        public int hashCode() {
            return ts.hashCode();
        }"
2457,equals,"        public boolean equals(Object o) {
            return o instanceof BSON && ts.equals(((BSON) o).ts);
        }"
2458,compareTo,"        public int compareTo(Timestamp<BSON> o) {
            return this.ts.compareTo(((BSON) o).ts);
        }"
2460,run,"    public void run() {
        while (true) {
            try {"
2464,addToStream,"    private void addToStream(final Operation operation, final Timestamp<?> currentTimestamp, final DBObject data, final String collection)
            throws InterruptedException {
        if (logger.isTraceEnabled()) {
            String dataString = data.toString();"
2465,addInsertToStream,"    private String addInsertToStream(final Timestamp<?> currentTimestamp, final DBObject data, final String collection)
            throws InterruptedException {
        totalDocuments.incrementAndGet();
        addToStream(Operation.INSERT, currentTimestamp, data, collection);
        if (data == null) {"
2466,addQueryToStream,"    private void addQueryToStream(final Operation operation, final Timestamp<?> currentTimestamp, final DBObject update,
                final String collection, final DBCollection slurpedCollection) throws InterruptedException {
        try (DBCursor cursor = slurpedCollection.find(update, findKeys)) {"
2467,addQueryToStream,"    private void addQueryToStream(final Operation operation, final Timestamp<?> currentTimestamp, final DBObject update,
            final String collection) throws InterruptedException {
        if (logger.isTraceEnabled()) {
            logger.trace(""addQueryToStream - operation [{}], currentTimestamp [{}], update [{}]"", operation, currentTimestamp, update);"
2471,applyFieldFilter,"    private DBObject applyFieldFilter(DBObject object) {
        if (object instanceof GridFSFile) {
            GridFSFile file = (GridFSFile) object;
            DBObject metadata = file.getMetaData();"
2472,filterMatch,"    private boolean filterMatch(DBObject filter, DBObject object) {
        for (String key : filter.keySet()) {
            if (!object.containsField(key)) {
                return false;"
2475,processAdminCommandOplogEntry,"    private void processAdminCommandOplogEntry(final DBObject entry, final Timestamp<?> startTimestamp) throws InterruptedException {
        if (logger.isTraceEnabled()) {
            logger.trace(""processAdminCommandOplogEntry - [{}]"", entry);
        }
        DBObject object = (DBObject) entry.get(MongoDBRiver.OPLOG_OBJECT);"
2477,flattenOps,"    private void flattenOps(DBObject entry) {
        Object ref = entry.removeField(MongoDBRiver.OPLOG_REF);
        Object ops = ref == null ? entry.removeField(MongoDBRiver.OPLOG_OPS) : getRefOps(ref);
        if (ops != null) {
            try {"
2479,processFullOplog,"    private DBCursor processFullOplog() throws InterruptedException, SlurperException {
        Timestamp<?> currentTimestamp = getCurrentOplogTimestamp();
        return oplogCursor(currentTimestamp);
    }"
2481,isIndexEmpty,"    protected boolean isIndexEmpty() {
        return MongoDBRiver.getIndexCount(esClient, definition) == 0;
    }"
2482,riverHasIndexedFromOplog,"    protected boolean riverHasIndexedFromOplog() {
        return MongoDBRiver.getLastTimestamp(esClient, definition) != null;
    }"
2486,configure,"    protected void configure() {
        bind(MongoClientService.class).asEagerSingleton();
    }"
2487,configure,"    protected void configure() {
        bind(River.class).to(MongoDBRiver.class).asEagerSingleton();
    }"
2493,isDisableIndexRefresh,"    public boolean isDisableIndexRefresh() {
        return disableIndexRefresh;
    }"
2494,isImportAllCollections,"    public boolean isImportAllCollections() {
        return importAllCollections;
    }"
2497,isStoreStatistics,"    public boolean isStoreStatistics() {
        return storeStatistics;
    }"
2499,isSkipInitialImport,"    public boolean isSkipInitialImport() {
        return skipInitialImport;
    }"
2500,isAdvancedTransformation,"    public boolean isAdvancedTransformation() {
        return advancedTransformation;
    }"
2507,isMongos,"    public Boolean isMongos() {
        return isMongos;
    }"
2508,isDropCollection,"    public boolean isDropCollection() {
        return dropCollection;
    }"
2509,isMongoSSLVerifyCertificate,"    public boolean isMongoSSLVerifyCertificate() {
        return mongoSSLVerifyCertificate;
    }"
2510,isMongoUseSSL,"    public boolean isMongoUseSSL() {
        return mongoUseSSL;
    }"
2511,isMongoSecondaryReadPreference,"    public boolean isMongoSecondaryReadPreference() {
        return mongoSecondaryReadPreference;
    }"
2523,isMongoGridFS,"    public boolean isMongoGridFS() {
        return mongoGridFS;
    }"
2529,addRemovePrefix,"    static String addRemovePrefix(String prefix, String object, boolean add) {
        if (prefix == null) {
            throw new IllegalArgumentException(""prefix"");
        }
        if (object == null) {
            throw new NullPointerException(""object"");
        }
        if (object.length() == 0) {
            return """";"
2530,addPrefix,"    static String addPrefix(String prefix, String object) {
        return addRemovePrefix(prefix, object, true);
    }"
2531,removePrefix,"    static String removePrefix(String prefix, String object) {
        return addRemovePrefix(prefix, object, false);
    }"
2532,convertToBasicDBObject,"    static BasicDBObject convertToBasicDBObject(String object) {
        if (object == null || object.length() == 0) {
            return new BasicDBObject();"
2533,checkClientTrusted,"                public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                }"
2534,checkServerTrusted,"                public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                }"
2542,build,"            public Bulk build() {
                return new Bulk(this);
            }"
2543,flushInterval,"            public Builder flushInterval(TimeValue flushInterval) {
                this.flushInterval = flushInterval;
                return this;
            }"
2544,bulkSize,"            public Builder bulkSize(ByteSizeValue bulkSize) {
                this.bulkSize = bulkSize;
                return this;
            }"
2545,bulkActions,"            public Builder bulkActions(int bulkActions) {
                this.bulkActions = bulkActions;
                return this;
            }"
2546,concurrentRequests,"            public Builder concurrentRequests(int concurrentRequests) {
                this.concurrentRequests = concurrentRequests;
                return this;
            }"
2547,build,"        public MongoDBRiverDefinition build() {
            return new MongoDBRiverDefinition(this);
        }"
2548,threadsAllowedToBlockForConnectionMultiplier,"        public Builder threadsAllowedToBlockForConnectionMultiplier(int threadsAllowedToBlockForConnectionMultiplier) {
            this.threadsAllowedToBlockForConnectionMultiplier = threadsAllowedToBlockForConnectionMultiplier;
            return this;
        }"
2549,connectionsPerHost,"        public Builder connectionsPerHost(int connectionsPerHost) {
            this.connectionsPerHost = connectionsPerHost;
            return this;
        }"
2550,bulk,"        public Builder bulk(Bulk bulk) {
            this.bulk = bulk;
            return this;
        }"
2551,throttleSize,"        public Builder throttleSize(int throttleSize) {
            this.throttleSize = throttleSize;
            return this;
        }"
2552,typeName,"        public Builder typeName(String typeName) {
            this.typeName = typeName;
            return this;
        }"
2553,indexName,"        public Builder indexName(String indexName) {
            this.indexName = indexName;
            return this;
        }"
2554,scriptType,"        public Builder scriptType(String scriptType) {
            this.scriptType = scriptType;
            return this;
        }"
2555,script,"        public Builder script(String script) {
            this.script = script;
            return this;
        }"
2556,importAllCollections,"        public Builder importAllCollections(boolean importAllCollections) {
            this.importAllCollections = importAllCollections;
            return this;
        }"
2557,statisticsTypeName,"        public Builder statisticsTypeName(String statisticsTypeName) {
            this.statisticsTypeName = statisticsTypeName;
            return this;
        }"
2558,statisticsIndexName,"        public Builder statisticsIndexName(String statisticsIndexName) {
            this.statisticsIndexName = statisticsIndexName;
            return this;
        }"
2559,storeStatistics,"        public Builder storeStatistics(boolean storeStatistics) {
            this.storeStatistics = storeStatistics;
            return this;
        }"
2560,parentTypes,"        public Builder parentTypes(Set<String> parentTypes) {
            this.parentTypes = parentTypes;
            return this;
        }"
2561,skipInitialImport,"        public Builder skipInitialImport(boolean skipInitialImport) {
            this.skipInitialImport = skipInitialImport;
            return this;
        }"
2562,advancedTransformation,"        public Builder advancedTransformation(boolean advancedTransformation) {
            this.advancedTransformation = advancedTransformation;
            return this;
        }"
2563,initialTimestamp,"        public Builder initialTimestamp(BSONTimestamp initialTimestamp) {
            this.initialTimestamp = new Timestamp.BSON(initialTimestamp);
            return this;
        }"
2564,initialTimestamp,"        public Builder initialTimestamp(Binary initialTimestamp) {
            this.initialTimestamp = new Timestamp.GTID(initialTimestamp.getData(), null);
            return this;
        }"
2565,disableIndexRefresh,"        public Builder disableIndexRefresh(boolean disableIndexRefresh) {
            this.disableIndexRefresh = disableIndexRefresh;
            return this;
        }"
2566,includeCollection,"        public Builder includeCollection(String includeCollection) {
            this.includeCollection = includeCollection;
            return this;
        }"
2567,includeFields,"        public Builder includeFields(Set<String> includeFields) {
            this.includeFields = includeFields;
            return this;
        }"
2568,excludeFields,"        public Builder excludeFields(Set<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }"
2569,isMongos,"        public Builder isMongos(Boolean isMongos) {
            this.isMongos = isMongos;
            return this;
        }"
2570,dropCollection,"        public Builder dropCollection(boolean dropCollection) {
            this.dropCollection = dropCollection;
            return this;
        }"
2571,mongoSSLVerifyCertificate,"        public Builder mongoSSLVerifyCertificate(boolean mongoSSLVerifyCertificate) {
            this.mongoSSLVerifyCertificate = mongoSSLVerifyCertificate;
            return this;
        }"
2572,mongoUseSSL,"        public Builder mongoUseSSL(boolean mongoUseSSL) {
            this.mongoUseSSL = mongoUseSSL;
            return this;
        }"
2573,mongoSecondaryReadPreference,"        public Builder mongoSecondaryReadPreference(boolean mongoSecondaryReadPreference) {
            this.mongoSecondaryReadPreference = mongoSecondaryReadPreference;
            return this;
        }"
2574,socketTimeout,"        public Builder socketTimeout(int socketTimeout) {
            this.socketTimeout = socketTimeout;
            return this;
        }"
2575,connectTimeout,"        public Builder connectTimeout(int connectTimeout) {
            this.connectTimeout = connectTimeout;
            return this;
        }"
2576,mongoClientOptions,"        public Builder mongoClientOptions(MongoClientOptions mongoClientOptions) {
            this.mongoClientOptions = mongoClientOptions;
            return this;
        }"
2577,mongoLocalAuthDatabase,"        public Builder mongoLocalAuthDatabase(String mongoLocalAuthDatabase) {
            this.mongoLocalAuthDatabase = mongoLocalAuthDatabase;
            return this;
        }"
2578,mongoLocalPassword,"        public Builder mongoLocalPassword(String mongoLocalPassword) {
            this.mongoLocalPassword = mongoLocalPassword;
            return this;
        }"
2579,mongoLocalUser,"        public Builder mongoLocalUser(String mongoLocalUser) {
            this.mongoLocalUser = mongoLocalUser;
            return this;
        }"
2580,mongoAdminAuthDatabase,"        public Builder mongoAdminAuthDatabase(String mongoAdminAuthDatabase) {
            this.mongoAdminAuthDatabase = mongoAdminAuthDatabase;
            return this;
        }"
2581,mongoAdminPassword,"        public Builder mongoAdminPassword(String mongoAdminPassword) {
            this.mongoAdminPassword = mongoAdminPassword;
            return this;
        }"
2582,mongoAdminUser,"        public Builder mongoAdminUser(String mongoAdminUser) {
            this.mongoAdminUser = mongoAdminUser;
            return this;
        }"
2583,mongoCollectionFilter,"        public Builder mongoCollectionFilter(BasicDBObject mongoCollectionFilter) {
            this.mongoCollectionFilter = mongoCollectionFilter;
            return this;
        }"
2584,mongoOplogFilter,"        public Builder mongoOplogFilter(BasicDBObject mongoOplogFilter) {
            this.mongoOplogFilter = mongoOplogFilter;
            return this;
        }"
2585,mongoGridFS,"        public Builder mongoGridFS(boolean mongoGridFS) {
            this.mongoGridFS = mongoGridFS;
            return this;
        }"
2586,mongoCollection,"        public Builder mongoCollection(String mongoCollection) {
            this.mongoCollection = mongoCollection;
            return this;
        }"
2587,mongoDb,"        public Builder mongoDb(String mongoDb) {
            this.mongoDb = mongoDb;
            return this;
        }"
2588,riverIndexName,"        public Builder riverIndexName(String riverIndexName) {
            this.riverIndexName = riverIndexName;
            return this;
        }"
2589,riverName,"        public Builder riverName(String riverName) {
            this.riverName = riverName;
            return this;
        }"
2590,mongoServers,"        public Builder mongoServers(List<ServerAddress> mongoServers) {
            this.mongoServers = mongoServers;
            return this;
        }"
2591,logStatistics,"    private void logStatistics(long duration) {
        if (definition.isStoreStatistics()) {
            long totalDocuments = deletedDocuments.get() + insertedDocuments.get();"
2592,dropRecreateMapping,"    private void dropRecreateMapping() throws IOException, InterruptedException {
        try {
            semaphore.acquire();"
2595,checkBulkProcessorAvailability,"    private void checkBulkProcessorAvailability() {
        while (!isBulkProcessorAvailable()) {
            try {"
2597,deleteBulkRequest,"    public void deleteBulkRequest(String id, String routing, String parent) {
        logger.trace(""deleteBulkRequest - id: {} - index: {} - type: {} - routing: {} - parent: {}"", id, index, type, routing, parent);
        bulkProcessor.add(deleteRequest(index).type(type).id(id).routing(routing).parent(parent));
        deletedDocuments.incrementAndGet();
    }"
2598,addBulkRequest,"    public void addBulkRequest(String id, XContentBuilder source, String routing, String parent) {
        bulkProcessor.add(indexRequest(index).type(type).id(id).source(source).routing(routing).parent(parent));
        insertedDocuments.incrementAndGet();
    }"
2599,addBulkRequest,"    public void addBulkRequest(String id, Map<?, ?> source, String routing, String parent) {
        bulkProcessor.add(indexRequest(index).type(type).id(id).source(source).routing(routing).parent(parent));
        insertedDocuments.incrementAndGet();
    }"
2600,dropIndex,"    public void dropIndex() {
        addBulkRequest(null, DROP_INDEX, null, null);
        flushBulkProcessor.set(true);
    }"
2601,afterBulk,"        public void afterBulk(long executionId, BulkRequest request, BulkResponse response) {
            if (response.hasFailures()) {
                logger.error(""Bulk processor failed. {}"", response.buildFailureMessage());"
2603,findLastDropCollection,"        private int findLastDropCollection(List<ActionRequest> request) {
            int index = 0;
            for (int i = 0; i < request.size(); i++) {
                ActionRequest<?> action = request.get(i);
                if (action instanceof IndexRequest) {"
2604,beforeBulk,"        public void beforeBulk(long executionId, BulkRequest request) {
            checkBulkProcessorAvailability();
            logger.trace(""beforeBulk - new bulk [{}] of items [{}]"", executionId, request.numberOfActions());
            if (flushBulkProcessor.get()) {
                logger.trace(""About to flush bulk request index[{}] - type[{}]"", index, type);"
2605,build,"        public MongoDBRiverBulkProcessor build() {
            return new MongoDBRiverBulkProcessor(river, definition, client, index, type);
        }"
2610,isAttachment,"        public boolean isAttachment() {
            return (data instanceof GridFSDBFile);
        }"
2612,source,"    private static XContentBuilder source(Timestamp<?> time) throws IOException {
        XContentBuilder builder = jsonBuilder().startObject().startObject(TYPE);
        time.saveFields(builder);
        return builder.endObject().endObject();
    }"
2615,getGridFSMapping,"    private XContentBuilder getGridFSMapping() throws IOException {
        XContentBuilder mapping = jsonBuilder()
            .startObject()
                .startObject(definition.getTypeName())
                    .startObject(""properties"")"
2618,internalStopRiver,"    void internalStopRiver() {
        logger.info(""Stopping"");
        try {
            if (startupThread != null) {"
2622,settings,"    public RiverSettings settings() {
        return super.settings;
    }"
2626,isMongos,"    private boolean isMongos() {
        if (definition.isMongos() != null) {
            return definition.isMongos().booleanValue();"
2630,call,"    public MongoConfig call() {
        boolean isMongos = isMongos();
        List<Shard> shards = getShards(isMongos);
        MongoConfig config = new MongoConfig(isMongos, shards);
        return config;
    }"
2634,isMongos,"    public boolean isMongos() {
        return isMongos;
    }"
2636,equals,"        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            ClientCacheKey other = (ClientCacheKey) obj;
            if (mongoClientOptions == null) {
                if (other.mongoClientOptions != null)"
2637,hashCode,"        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + ((mongoClientOptions == null) ? 0 : mongoClientOptions.hashCode());
            result = prime * result + ((mongoCredentials == null) ? 0 : mongoCredentials.hashCode());
            result = prime * result + ((servers == null) ? 0 : servers.hashCode());
            return result;
        }"
2640,doClose,"    protected void doClose() throws ElasticsearchException {
        synchronized ($lock) {
            for (MongoClient mongoClient : mongoClients.values()) {"
2641,doStop,"    protected void doStop() throws ElasticsearchException {
    }"
2642,doStart,"    protected void doStart() throws ElasticsearchException {
    }"
2643,extractIndex,"    private String extractIndex(Map<String, Object> ctx) {
        String index = (String) ctx.get(""_index"");
        if (index == null) {
            index = definition.getIndexName();
        }"
2644,extractType,"    private String extractType(Map<String, Object> ctx, String defaultType) {
        Object type = ctx.get(""_type"");
        if (type == null) {
            return defaultType;"
2645,isDocumentDeleted,"    private boolean isDocumentDeleted(Map<String, Object> ctx) {
        return Boolean.TRUE.equals(ctx.get(""deleted""));
    }"
2646,isDocumentIgnored,"    private boolean isDocumentIgnored(Map<String, Object> ctx) {
        return Boolean.TRUE.equals(ctx.get(""ignore""));
    }"
2647,extractOperation,"    private Operation extractOperation(Map<String, Object> ctx) {
        Object operation = ctx.get(""operation"");
        if (operation == null) {
            return null;"
2648,extractRouting,"    private String extractRouting(Map<String, Object> ctx) {
        Object routing = ctx.get(""_routing"");
        if (routing == null) {
            return null;"
2649,extractParent,"    private String extractParent(Map<String, Object> ctx) {
        Object parent = ctx.get(""_parent"");
        if (parent == null) {
            return null;"
2650,extractObjectId,"    private String extractObjectId(Map<String, Object> ctx, String objectId) {
        Object id = ctx.get(""id"");
        if (id != null) {
            return id.toString();
        }
        id = ctx.get(MongoDBRiver.MONGODB_ID_FIELD);"
2651,hasScript,"    private boolean hasScript() {
        return definition.getScriptType() != null && definition.getScript() != null;
    }"
2652,convertDbRef,"    private Map<String, Object> convertDbRef(DBRef ref) {
        Map<String, Object> obj = new HashMap<String, Object>();
        obj.put(""id"", ref.getId());
        obj.put(""ref"", ref.getCollectionName());

        return obj;"
2653,createObjectMap,"    private Map<String, Object> createObjectMap(DBObject dbObj) {
        Map<String, Object> mapData = new HashMap<String, Object>();
        for (String key : dbObj.keySet()) {
            Object value = dbObj.get(key);
            if (value instanceof DBRef) {"
2654,build,"    private XContentBuilder build(final DBObject data, final String objectId) throws IOException {
        if (data instanceof GridFSDBFile) {
            logger.info(""Add Attachment: {} to index {} / type {}"", objectId, definition.getIndexName(), definition.getTypeName());"
2656,deleteBulkRequest,"    private void deleteBulkRequest(String objectId, String index, String type, String routing, String parent) {
        if (logger.isTraceEnabled()) {
            logger.trace(""bulkDeleteRequest - objectId: {} - index: {} - type: {} - routing: {} - parent: {}"", objectId, index, type,
                    routing, parent);
        }"
2659,releaseProcessors,"    private void releaseProcessors() {
        for (MongoDBRiverBulkProcessor processor : processors.values()) {
            processor.getBulkProcessor().close();
        }"
2664,addInsertToStream,"    private String addInsertToStream(final Timestamp<?> currentTimestamp, final DBObject data) throws InterruptedException {
        return addInsertToStream(currentTimestamp, data, definition.getMongoCollection());
    }"
2666,updateIndexRefresh,"    private void updateIndexRefresh(String name, Object value) {
        esClient.admin().indices().prepareUpdateSettings(name).setSettings(ImmutableMap.of(""index.refresh_interval"", value)).get();
    }"
2671,importInitial,"    public void importInitial(Timestamp<?> timestamp) {
        try {
            if (!isIndexEmpty()) {"
2674,shutdown,"    public void shutdown() throws InterruptedException, IOException {
    }"
2675,waitFor,"    public SimplePipelineExecutor<R,P> waitFor()
            throws InterruptedException, ExecutionException {
        if (executorService == null || pipelines == null || futures == null || futures.isEmpty()) {
            return this;
        }
        exceptions = new LinkedList<>();"
2676,execute,"    public SimplePipelineExecutor<R,P> execute() {
        if (pipelines == null) {
            prepare();
        }
        if (pipelines.isEmpty()) {
            throw new IllegalStateException(""pipelines empty"");
        }"
2677,prepare,"    public SimplePipelineExecutor<R,P> prepare() {
        if (provider == null) {
            throw new IllegalStateException(""no provider set"");
        }
        if (queue == null) {
            throw new IllegalStateException(""no queue set"");
        }
        this.pipelines = new LinkedList<>();"
2687,shutdown,"    void shutdown() throws InterruptedException, ExecutionException, IOException;
"
2688,waitFor,"    PipelineExecutor<R,P> waitFor() throws InterruptedException, ExecutionException, IOException;
"
2692,setQueue,"    PipelineExecutor<R,P> setQueue(BlockingQueue<R> queue);
"
2693,setPipelineProvider,"    PipelineExecutor<R,P> setPipelineProvider(PipelineProvider<P> provider);
"
2694,setConcurrency,"    PipelineExecutor<R,P> setConcurrency(int concurrency);
"
2697,newRequest,"    public abstract void newRequest(Pipeline<R> pipeline, R request);
"
2698,call,"    public R call() throws Exception {
        R r = null;
        try {
            r = queue.poll(5L, TimeUnit.SECONDS);
            while (r != null) {"
2702,recalculateCurrentSpeed,"  private void recalculateCurrentSpeed() {
    currentSpeed += getRandom(-SPEED_RANDOM_DELTA, SPEED_RANDOM_DELTA);

    if (currentSpeed < MIN_SPEED) {
      currentSpeed = MIN_SPEED;"
2703,calculateJumpSpeed,"  private void calculateJumpSpeed() {
    currentVerticalSpeed = getRandom(0.2f * MAX_JUMP_HEIGHT_IN_METERS, MAX_JUMP_HEIGHT_IN_METERS) * meterInDp * density;
  }"
2705,updateAngle,"  private void updateAngle(double delta) {
    angle += delta * ROTATION_SPEED;
    angle %= 360;
  }"
2706,drawTumbleweed,"  private void drawTumbleweed(Canvas canvas, double delta) {
    updateAngle(delta);
    matrix.setTranslate(x, y);
    matrix.postRotate(angle, x + tumbleweed.getWidth() / 2, y + tumbleweed.getHeight() / 2);
    canvas.drawBitmap(tumbleweed, matrix, paint);
  }"
2707,drawShadow,"  private void drawShadow(Canvas canvas) {
    float scale = 1 - SHADOW_SCALE_FACTOR * ((bottomPosition - y) / (bottomPosition - topPosition));
    Bitmap toDraw;
    if (scale == 1) {
      toDraw = shadow;
    } else {"
2708,onDraw,"  protected void onDraw(Canvas canvas) {
    long time = System.currentTimeMillis();

    if (timeStamp != INVALID_TIME) {
      double delta = (time - timeStamp) / 1000d;
      updatePosition(delta);"
2709,init,"  private void init(Context context) {
    Resources res = context.getResources();
    paint = new Paint();
    tumbleweed = BitmapFactory.decodeResource(res, R.drawable.tumbleweed);
    shadow = BitmapFactory.decodeResource(res, R.drawable.shadow_tumbleweed);
    density = context.getResources().getDisplayMetrics().density;
    random = new Random();
    meterInDp = tumbleweed.getHeight();
  }"
2714,updatePosition,"  private void updatePosition(Cloud cloud, double timeDelta) {
    cloud.x += density * SPEED_DP_PER_SEC * cloud.speedMultiplier * timeDelta;
    int width = getWidth();
    if (cloud.x > width) {
      cloud.x = -cloud.bitmap.getWidth();"
2715,drawClouds,"  private void drawClouds(Canvas canvas, long time) {
    for (Cloud cloud : clouds) {
      updatePosition(cloud, (time - timeStamp) / 1000d);"
2717,onDraw,"  protected void onDraw(Canvas canvas) {
    long time = System.currentTimeMillis();
    if (timeStamp != -1) {
      drawClouds(canvas, time);
    } else {
      initClouds();"
2718,init,"  private void init(Context context) {
    paint = new Paint();
    density = context.getResources().getDisplayMetrics().density;
  }"
2719,onNothingSelected,"    public void onNothingSelected(AdapterView<?> parent) {
        mTheme = DevToolFragment.DevToolTheme.DARK;
    }"
2720,onItemSelected,"    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        mTheme = position == 0 ? DevToolFragment.DevToolTheme.DARK : DevToolFragment.DevToolTheme.LIGHT;
    }"
2722,doSomeStuff,"    private DebugFunction doSomeStuff() {
        return new DebugFunction() {
            @Override"
2723,call,"            public String call() throws Exception {
                return ""This function has a title"";
            }"
2725,onClick,"            public void onClick(View v) {

                final DevTool.Builder builder = new DevTool.Builder(ExampleActivity.this);

                if (mSeekbar != null) {"
2728,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                functionNumber.setText(Integer.toString(progress));
            }"
2730,moveTo,"    public static PathPoint moveTo(float x, float y) {
        return new PathPoint(MOVE, x, y);
    }"
2731,curveTo,"    public static PathPoint curveTo(float c0X, float c0Y, float c1X, float c1Y, float x, float y) {
        return new PathPoint(c0X,  c0Y, c1X, c1Y, x, y);
    }"
2732,lineTo,"    public static PathPoint lineTo(float x, float y) {
        return new PathPoint(LINE, x, y);
    }"
2733,evaluate,"    public PathPoint evaluate(float t, PathPoint startValue, PathPoint endValue) {
        float x, y;
        if (endValue.mOperation == PathPoint.CURVE) {
            float oneMinusT = 1 - t;
            x = oneMinusT * oneMinusT * oneMinusT * startValue.mX +"
2734,newInstance,"    public static MediaFragment newInstance () {
        return new MediaFragment();
    }"
2736,onAnimationEnd,"        public void onAnimationEnd(Animator animation) {
            super.onAnimationEnd(animation);

            mFab.setVisibility(View.INVISIBLE);
            mFabContainer.setBackgroundColor(getResources()
                .getColor(R.color.brand_accent));"
2738,onFabPressed,"    public void onFabPressed(View view) {
        final float startX = mFab.getX();

        AnimatorPath path = new AnimatorPath();
        path.moveTo(0, 0);
        path.curveTo(-200, 200, -400, 100, -600, 50);

        final ObjectAnimator anim = ObjectAnimator.ofObject(this, ""fabLoc"",
            new PathEvaluator(), path.getPoints().toArray());

        anim.setInterpolator(new AccelerateInterpolator());"
2739,onClick,"            @Override public void onClick(View v) {
                onFabPressed(v);
            }"
2741,onActivityCreated,"    @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mFabSize = getResources().getDimensionPixelSize(R.dimen.fab_size);
        bindViews();
    }"
2742,onCreateView,"    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        mRootView = inflater.inflate(R.layout.activity_media, container, false);
        return mRootView;
    }"
2744,curveTo,"    public void curveTo(float c0X, float c0Y, float c1X, float c1Y, float x, float y) {
        mPoints.add(PathPoint.curveTo(c0X, c0Y, c1X, c1Y, x, y));
    }"
2745,lineTo,"    public void lineTo(float x, float y) {
        mPoints.add(PathPoint.lineTo(x, y));
    }"
2746,moveTo,"    public void moveTo(float x, float y) {
        mPoints.add(PathPoint.moveTo(x, y));
    }"
2756,refreshTime,"        public void refreshTime(long curTimeMillis) {
            if (null == mItemInfo || mItemInfo.getCountdown() <= 0) return;

            mCvCountdownView.updateShow(mItemInfo.getEndTime() - curTimeMillis);"
2758,run,"            public void run() {
                if (mCountdownVHList.size() == 0) return;

                synchronized (mCountdownVHList) {"
2762,onCreateViewHolder,"        public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            return new MyViewHolder(LayoutInflater.from(mContext).inflate(R.layout.list_item, parent, false));
        }"
2763,cancelRefreshTime,"        public void cancelRefreshTime() {
            isCancel = true;
            if (null != mTimer) {
                mTimer.cancel();
            }"
2764,run,"                public void run() {
                    mHandler.post(mRefreshTimeRunnable);
                }"
2765,startRefreshTime,"        public void startRefreshTime() {
            if (!isCancel) return;

            if (null != mTimer) {
                mTimer.cancel();
            }
"
2766,onDestroy,"    public void onDestroy() {
        super.onDestroy();
        if (null != mMyAdapter) {
            mMyAdapter.cancelRefreshTime();"
2767,onPause,"    protected void onPause() {
        super.onPause();
        if (null != mMyAdapter) {
            mMyAdapter.cancelRefreshTime();"
2768,onResume,"    protected void onResume() {
        super.onResume();
        if (null != mMyAdapter) {
            mMyAdapter.startRefreshTime();"
2770,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_recyclerview);

        initData();

        FamiliarRecyclerView cvFamiliarRecyclerView = (FamiliarRecyclerView) findViewById(R.id.cv_familiarRecyclerView);"
2781,refreshTime,"        public void refreshTime(long leftTime) {
            if (leftTime > 0) {
                mCvCountdownView.start(leftTime);"
2782,bindData,"        public void bindData(ItemInfo itemInfo) {
            mItemInfo = itemInfo;
            mTvTitle.setText(itemInfo.getTitle());
            refreshTime(mItemInfo.getEndTime() - System.currentTimeMillis());
        }"
2786,onBindViewHolder,"        public void onBindViewHolder(MyViewHolder holder, int position) {
            ItemInfo curItemInfo = mDatas.get(position);
            holder.bindData(curItemInfo);
        }"
2790,onEnd,"    public void onEnd(CountdownView cv) {
        Object tag = cv.getTag();
        if (null != tag) {
            Log.i(""wg"", ""tag = "" + tag.toString());"
2791,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, RecyclerViewActivity.class));
            }"
2792,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, ListViewActivity.class));
            }"
2793,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, DynamicShowActivity.class));
            }"
2794,onProgressUpdate,"            protected void onProgressUpdate(Long... values) {
                super.onProgressUpdate(values);
                mCvCountdownViewTest5.updateShow(values[0]);
            }"
2795,doInBackground,"            protected Void doInBackground(Void... params) {
                long time = 0;
                while (true) {
                    try {"
2806,refreshTime,"            public void refreshTime(long curTimeMillis) {
                if (null == mItemInfo || mItemInfo.getCountdown() <= 0) return;

                mCvCountdownView.updateShow(mItemInfo.getEndTime() - curTimeMillis);"
2808,initView,"            public void initView(View convertView) {
                mTvTitle = (TextView) convertView.findViewById(R.id.tv_title);
                mCvCountdownView = (CountdownView) convertView.findViewById(R.id.cv_countdownView);
            }"
2821,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_listview);

        initData();

        ListView lvList = (ListView) findViewById(R.id.lv_list);"
2832,refreshTime,"            public void refreshTime(long leftTime) {
                if (leftTime > 0) {
                    mCvCountdownView.start(leftTime);"
2833,bindData,"            public void bindData(ItemInfo itemInfo) {
                mItemInfo = itemInfo;
                mTvTitle.setText(itemInfo.getTitle());
                refreshTime(mItemInfo.getEndTime() - System.currentTimeMillis());
            }"
2844,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowMillisecond = isChecked;
                if (isChecked && !DynamicShowActivity.this.isShowSecond) {
                    cbSecond.setChecked(true);"
2845,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowSecond = isChecked;
                if (!isChecked && DynamicShowActivity.this.isShowMillisecond) {
                    cbMillisecond.setChecked(false);"
2846,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowMinute = isChecked;
            }"
2847,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowHour = isChecked;
            }"
2848,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowDay = isChecked;
            }"
2851,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setSuffixDay(etSuffixDay.getText().toString())
                                    .setSuffixHour(etSuffixHour.getText().toString())
                                    .setSuffixMinute(etSuffixMinute.getText().toString())"
2852,onColorPicked,"                    public void onColorPicked(int pickedColor) {
                        DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                        dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setShowTimeBgBorder(true).setBorderColor(pickedColor));
                        mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
                    }"
2854,onClick,"            public void onClick(View v) {
                if (bgBorderRadius == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setShowTimeBgBorder(true).setBorderRadius(--bgBorderRadius));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
2855,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setShowTimeBgBorder(true).setBorderRadius(++bgBorderRadius));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
2856,onClick,"            public void onClick(View v) {
                if (bgBorderSize == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setShowTimeBgBorder(true).setBorderSize(--bgBorderSize));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
2857,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setShowTimeBgBorder(true).setBorderSize(++bgBorderSize));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
2860,onClick,"            public void onClick(View v) {
                if (bgRadius == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setRadius(--bgRadius));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
2861,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setRadius(++bgRadius));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
2862,onColorPicked,"                    public void onColorPicked(int pickedColor) {
                        DynamicConfig dynamicConfig = new DynamicConfig.Builder().setBackgroundInfo(new DynamicConfig.BackgroundInfo().setColor(pickedColor)).build();
                        mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);
                    }"
2864,onClick,"            public void onClick(View v) {
                if (timeBgSize == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setSize(--timeBgSize));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
2865,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setSize(++timeBgSize));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
2866,onClick,"            public void onClick(View v) {
                if (!isShowDay && !isShowHour && !isShowMinute && !isShowSecond && !isShowMillisecond) {
                    Toast.makeText(DynamicShowActivity.this, ""Select at least one item"", Toast.LENGTH_LONG).show();
                    return;
                }
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();"
2867,onClick,"            public void onClick(View v) {
                DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixGravity(DynamicConfig.SuffixGravity.BOTTOM).build();
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
2868,onClick,"            public void onClick(View v) {
                DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixGravity(DynamicConfig.SuffixGravity.CENTER).build();
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
2869,onClick,"            public void onClick(View v) {
                DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixGravity(DynamicConfig.SuffixGravity.TOP).build();
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
2870,onColorPicked,"                    public void onColorPicked(int pickedColor) {
                        DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixTextColor(pickedColor).build();
                        if (hasBackgroundCountdownView) {
                            mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
2872,onClick,"            public void onClick(View v) {
                if (timeTextSize == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setSuffixTextSize(--suffixTextSize);
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());"
2873,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setSuffixTextSize(++suffixTextSize);
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());"
2874,onColorPicked,"                    public void onColorPicked(int pickedColor) {
                        DynamicConfig dynamicConfig = new DynamicConfig.Builder().setTimeTextColor(pickedColor).build();
                        if (hasBackgroundCountdownView) {
                            mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
2876,onClick,"            public void onClick(View v) {
                if (timeTextSize == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setTimeTextSize(--timeTextSize);
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());"
2877,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setTimeTextSize(++timeTextSize);
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());"
2878,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                if (hasBackgroundCountdownView) {
                    DynamicConfig.BackgroundInfo backgroundInfo = new DynamicConfig.BackgroundInfo();
                    backgroundInfo.setColor(0xFF444444)"
2879,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                if (hasBackgroundCountdownView) {
                    DynamicConfig.BackgroundInfo backgroundInfo = new DynamicConfig.BackgroundInfo();
                    backgroundInfo.setColor(0xFFFF5000)"
2880,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                if (hasBackgroundCountdownView) {
                    DynamicConfig.BackgroundInfo backgroundInfo = new DynamicConfig.BackgroundInfo();
                    backgroundInfo.setColor(0xFFFF54BC)"
2882,onAllAnimatorEnd,"    public void onAllAnimatorEnd() {
        mView.onAnimEnd();
    }"
2883,onMoveEnd,"    public void onMoveEnd() {
        mEndNum++;
        if (mEndNum == mPellets.size()) {
            for (Letter l : mLetters) {"
2884,onAnimatorEnd,"    public void onAnimatorEnd() {
        mEndNum++;
        if (mEndNum == mPellets.size()) {
            if (isEnding) {"
2886,drawTheWorld,"    public void drawTheWorld(Canvas canvas) {
        for (Pellet p : mPellets) {
            p.drawSelf(canvas);
        }"
2887,addLetter,"    public void addLetter(Letter letter) {
        if (letter != null) {
            mLetters.add(letter);"
2888,addPellet,"    public void addPellet(Pellet pellet) {
        if (pellet != null) {
            mPellets.add(pellet);"
2889,showText,"    public void showText() {
        isEnding = true;
        mEndNum = 0;
        for (Pellet p : mPellets) {
            p.endAnim();"
2890,startPelletsAnim,"    public void startPelletsAnim() {
        isEnding = false;
        mEndNum = 0;
        for (Pellet p : mPellets) {
            p.startAnim();"
2894,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if(!isInit){
            init();
            isInit = true;"
2895,onAnimEnd,"    public void onAnimEnd() {
        if (mOnCoolAnimViewListener != null) {
            mOnCoolAnimViewListener.onAnimEnd();"
2896,stopAnim,"    public void stopAnim() {
        if (mPelletMng != null) {
            mPelletMng.endAnim();"
2897,onAnimationRepeat,"            public void onAnimationRepeat(Animator animation) {
                invalidate();
            }"
2898,init,"    public void init() {
        mWidth = getMeasuredWidth();
        mHeight = getMeasuredHeight();

        mCenterX = (int) (getTranslationX() + mWidth/2);
        mCenterY = (int) (getTranslationY() + mHeight/2);

        mPelletMng = new PelletManager(this, mCenterX, mCenterY);

        mAnimator = ValueAnimator.ofInt(0, 1).setDuration(16);
        mAnimator.setRepeatCount(ValueAnimator.INFINITE);"
2899,measureDimension,"    public int measureDimension(int defaultSize, int measureSpec) {
        int result;

        int specMode = MeasureSpec.getMode(measureSpec);
        int specSize = MeasureSpec.getSize(measureSpec);

        if (specMode == MeasureSpec.EXACTLY) {"
2900,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        int width = measureDimension(WIDTH_DEFAULT, widthMeasureSpec);
        int height = measureDimension(HEIGHT_DEFAULT, heightMeasureSpec);
        setMeasuredDimension(width, height);
    }"
2902,remove,"	public void remove(int id) {
		this.datas.remove(id);
		this.fireTableRowsDeleted(id, id);
	}"
2903,run,"							public void run() {
								if (ret.equals(""1"")) {
									datas.get(rowIndex).setElementAt(newdata, col);"
2905,run,"									public void run() {
										if (ret.equals(""1"")) {
											datas.get(rowIndex).setElementAt(newdata, col);"
2908,addRow,"	public void addRow(Vector<String> vector) {
		this.datas.add(vector);
		this.fireTableRowsInserted(vector.size()-1, vector.size()-1);
	}"
2919,remove,"	public void remove(String id) {
		try {
			int row = this.getId(id);"
2920,update,"	public void update(String id, Vector<String> vector) {
		this.datas.set(this.getId(id), vector);
		this.fireTableDataChanged();
	}"
2921,addRow,"	public void addRow(Vector<String> vector) {
		this.datas.add(vector);
		this.fireTableRowsInserted(datas.size()-1,datas.size()-1);
	}"
2933,isCellEditable,"	public boolean isCellEditable(int row, int column) {
		if(column == 0)
		{"
2935,onClick,"    public void onClick(View v) {
        if (v == mStartBtn) {
            mProgressView.startAnim();"
2938,onStopTrackingTouch,"            public void onStopTrackingTouch(SeekBar seekBar) {
                float factor = seekBar.getProgress() / 100f;
                mProgressView.setRadius(factor);
            }"
2940,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
"
2946,stopAnim,"    public void stopAnim() {
        mStartAnim = false;
    }"
2947,reset,"    public void reset() {
        stopAnim();
        mPlayTime = 0;
        postInvalidate();
"
2948,startAnim,"    public void startAnim() {
        mPlayTime = mPlayTime % mDuration;
        mStartTime = AnimationUtils.currentAnimationTimeMillis() - mPlayTime;
        mStartAnim = true;
        postInvalidate();
    }"
2951,calPoints,"    private void calPoints(float factor) {
        int radius = (int) (mViewSize / 3 * factor);
        mPointRadius = radius / 12;

        for (int i = 0; i < POINT_NUM; ++i) {"
2952,onDraw,"    protected void onDraw(Canvas canvas) {
        canvas.save();
        canvas.translate(mCenter.x, mCenter.y);

        float factor = getFactor();
        canvas.rotate(36 * factor);
        float x, y;
        for (int i = 0; i < POINT_NUM; ++i) {
            mPaint.setColor(mArcPoint[i].color);
            float itemFactor = getItemFactor(i, factor);"
2956,onClick,"            public void onClick(View v) {
                captchaImageView.regenerate();
            }"
2960,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        return super.onTouchEvent(event);
    }"
2961,onClick,"                public void onClick(View v) {
                    helper4.dismissBubblePopupWindow();
                }"
2962,onClick,"                public void onClick(View v) {
                    helper3.dismissBubblePopupWindow();
                }"
2963,onClick,"                public void onClick(View v) {
                    helper2.dismissBubblePopupWindow();
                }"
2964,onClick,"                public void onClick(View v) {
                    helper1.dismissBubblePopupWindow();
                }"
2965,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        if(hasFocus && !inited){
            inited = true;"
2966,onClick,"            public void onClick(View v) {
                helper4.show();
                Toast.makeText(MainActivity3.this,""button 4"",Toast.LENGTH_SHORT).show();
            }"
2967,onClick,"            public void onClick(View v) {
                helper3.show();
            }"
2968,onClick,"            public void onClick(View v) {
                helper2.show();
            }"
2969,onClick,"            public void onClick(View v) {
                helper1.show();
            }"
2973,onClick,"            public void onClick(View v) {
                Toast.makeText(MainActivity2.this,""cancel"",Toast.LENGTH_SHORT).show();
            }"
2982,onClick,"            public void onClick(View v) {
                helper4.show();
            }"
2987,onScrolled,"            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                super.onScrolled(recyclerView, dx, dy);
                mScrollerY += dy;
                if (Math.abs(mScrollerY) > 1000) {
                    mBlurredView.setBlurredTop(100);
                    mAlpha = 100;"
2988,onScrollStateChanged,"            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                super.onScrollStateChanged(recyclerView, newState);
            }"
2992,onBindViewHolder,"    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
"
2993,onCreateViewHolder,"    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        if (viewType == TYPE_HEADER) {
            return new HeaderHolder(LayoutInflater.from(context).inflate(R.layout.recyclerview_header, parent, false));
        }"
2994,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, WeatherActivity.class));
            }"
2995,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, BlurredViewBasicActivity.class));
            }"
2999,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                mBlurredView.setBlurredLevel(progress);
                mProgressTv.setText(String.valueOf(progress));
            }"
3004,dp2px,"    public int dp2px(float dpValue) {
        final float scale = getResources().getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);
    }"
3006,loadImage,"    public void loadImage(ImageView imageView, Object obj, Context context) {
        Glide.with(context).load(obj).into(imageView);
    }"
3013,onPageScrollStateChanged,"    public void onPageScrollStateChanged(int state) {
    }"
3016,range0Until1,"    private float range0Until1(float minValue, float maxValue) {
        return (animatedValue - minValue) / (maxValue - minValue);
    }"
3019,onAnimationUpdate,"                public void onAnimationUpdate(ValueAnimator animation) {
                    animatedTouchValue = (float) animation.getAnimatedValue();
                    if (animatedTouchValue == mRadius * 1.5f) {
                        isTouchAniming = false;"
3021,onAnimationRepeat,"                public void onAnimationRepeat(Animator animator) {
                }"
3022,onAnimationCancel,"                public void onAnimationCancel(Animator animator) {
                    isAniming = false;
                    curPos = nextPos;
                    if (mViewPage != null) {
                        mViewPage.setTouchable(true);"
3023,onAnimationEnd,"                public void onAnimationEnd(Animator animator) {
                    isAniming = false;
                    curPos = nextPos;
                    if (mViewPage != null) {
                        mViewPage.setTouchable(true);"
3024,onAnimationStart,"                public void onAnimationStart(Animator animator) {
                    isAniming = true;
                    if (mViewPage != null) {
                        mViewPage.setTouchable(false);"
3025,onAnimationUpdate,"                public void onAnimationUpdate(ValueAnimator animation) {
                    isAniming = true;
                    animatedValue = (float) animation.getAnimatedValue();
                    invalidate();
"
3026,startAnimator,"    public void startAnimator() {
        if (animatorStart != null) {
            if (animatorStart.isRunning()) {"
3028,initCountPos,"    private void initCountPos() {
        bezPos = new float[default_round_count];
        xPivotPos = new float[default_round_count];
        for (int i = 0; i < default_round_count; i++) {
            bezPos[i] = mWidth / (default_round_count + 1) * (i + 1);"
3031,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);

        mWidth = w;
        mHeight = h;
        initCountPos();"
3032,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        if (DEFAULT_WIDTH == 0) {
            WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
            DEFAULT_WIDTH = wm.getDefaultDisplay().getWidth();
        }
"
3034,testFromValueThrowException,"    public void testFromValueThrowException() {
        ValidationStyle.fromValue(4);
    }"
3035,testFromValueToTextInputLayout,"    public void testFromValueToTextInputLayout() {
        assertEquals(ValidationStyle.TEXT_INPUT_LAYOUT, ValidationStyle.fromValue(3));
    }"
3036,testFromValueToUnderlabel,"    public void testFromValueToUnderlabel() {
        assertEquals(ValidationStyle.UNDERLABEL, ValidationStyle.fromValue(2));
    }"
3037,testFromValueToColoration,"    public void testFromValueToColoration() {
        assertEquals(ValidationStyle.COLORATION, ValidationStyle.fromValue(1));
    }"
3038,testFromValueToBasic,"    public void testFromValueToBasic() {
        assertEquals(ValidationStyle.BASIC, ValidationStyle.fromValue(0));
    }"
3039,fromValue,"    public static ValidationStyle fromValue(int value) {
        switch (value) {
            case 0:"
3041,testResetCustomError,"    public void testResetCustomError() {
        mValidationHolderCustomTypeWithSomeSortOfView.resetCustomError();
        verify(mMockCustomErrorReset, times(1)).reset(mValidationHolderCustomTypeWithSomeSortOfView);
    }"
3045,testGetView,"    public void testGetView() {
        assertEquals(mMockView, mValidationHolderCustomTypeWithSomeSortOfView.getView());
    }"
3051,testGetConfirmationTextFromTextInputLayoutThrowsException,"    public void testGetConfirmationTextFromTextInputLayoutThrowsException() {
        when(mMockConfirmationTextInputLayout.getEditText()).thenReturn(null);
        mValidationHolderConfirmationTypeWithTextInputLayout.getConfirmationText();
    }"
3053,testGetConfirmationTextFromEditText,"    public void testGetConfirmationTextFromEditText() {
        String text = ""OK"";
        Editable mockEditable = mock(Editable.class);
        when(mMockConfirmationEditText.getText()).thenReturn(mockEditable);
        when(mockEditable.toString()).thenReturn(text);
        assertEquals(text, mValidationHolderConfirmationTypeWithEditText.getConfirmationText());
    }"
3055,testGetTextFromTextInputLayoutThrowsException,"    public void testGetTextFromTextInputLayoutThrowsException() {
        when(mMockTextInputLayout.getEditText()).thenReturn(null);
        mValidationHolderRegexTypeWithTextInputLayout.getText();
    }"
3059,testIsSomeSortOfViewTrue,"    public void testIsSomeSortOfViewTrue() {
        assertTrue(mValidationHolderCustomTypeWithSomeSortOfView.isSomeSortOfView());
    }"
3063,testIsEditTextViewTrue,"    public void testIsEditTextViewTrue() {
        assertTrue(mValidationHolderRegexTypeWithEditText.isEditTextView());
        assertTrue(mValidationHolderRangeTypeWithEditText.isEditTextView());
        assertTrue(mValidationHolderConfirmationTypeWithEditText.isEditTextView());
        assertTrue(mValidationHolderSimpleCustomTypeWithEditText.isEditTextView());
    }"
3065,testIsCustomTypeTrue,"    public void testIsCustomTypeTrue() {
        assertTrue(mValidationHolderCustomTypeWithSomeSortOfView.isCustomType());
    }"
3067,testIsSimpleCustomTypeTrue,"    public void testIsSimpleCustomTypeTrue() {
        assertTrue(mValidationHolderSimpleCustomTypeWithEditText.isSimpleCustomType());
        assertTrue(mValidationHolderSimpleCustomTypeWithTextInputLayout.isSimpleCustomType());
    }"
3069,testIsConfirmationTypeTrue,"    public void testIsConfirmationTypeTrue() {
        assertTrue(mValidationHolderConfirmationTypeWithEditText.isConfirmationType());
        assertTrue(mValidationHolderConfirmationTypeWithTextInputLayout.isConfirmationType());
    }"
3071,testIsRangeTypeTrue,"    public void testIsRangeTypeTrue() {
        assertTrue(mValidationHolderRangeTypeWithEditText.isRangeType());
        assertTrue(mValidationHolderRangeTypeWithTextInputLayout.isRangeType());
    }"
3073,testIsRegexTypeTrue,"    public void testIsRegexTypeTrue() {
        assertTrue(mValidationHolderRegexTypeWithEditText.isRegexType());
        assertTrue(mValidationHolderRegexTypeWithTextInputLayout.isRegexType());
    }"
3075,resetCustomError,"    public void resetCustomError() {
        mCustomErrorReset.reset(this);
    }"
3076,isVisible,"    public boolean isVisible() {
        return isEditTextView() && getEditText().getVisibility() == View.VISIBLE
                || isTextInputLayoutView() && getTextInputLayout().getVisibility() == View.VISIBLE"
3088,isSomeSortOfView,"    public boolean isSomeSortOfView() {
        return mView != null;
    }"
3089,isTextInputLayoutView,"    public boolean isTextInputLayoutView() {
        return mTextInputLayout != null;
    }"
3090,isEditTextView,"    public boolean isEditTextView() {
        return mEditText != null;
    }"
3091,isCustomType,"    public boolean isCustomType() {
        return mCustomValidation != null;
    }"
3092,isSimpleCustomType,"    public boolean isSimpleCustomType() {
        return mSimpleCustomValidation != null;
    }"
3093,isConfirmationType,"    public boolean isConfirmationType() {
        return mConfirmationEditText != null || mConfirmationTextInputLayout != null;
    }"
3094,isRangeType,"    public boolean isRangeType() {
        return mNumericRange != null;
    }"
3095,isRegexType,"    public boolean isRegexType() {
        return mPattern != null;
    }"
3096,testClear,"    public void testClear() throws Exception {
        mSpiedAwesomeValidationBasicStyle.clear();
        verify(mSpiedBasicValidator, times(1)).halt();
    }"
3097,testValidate,"    public void testValidate() {
        mSpiedAwesomeValidationBasicStyle.validate();
        verify(mSpiedBasicValidator, times(1)).trigger();
        assertEquals(mSpiedBasicValidator.trigger(), mSpiedAwesomeValidationBasicStyle.validate());
    }"
3098,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndConfirmationThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndConfirmationThrowsException() {
        mSpiedAwesomeValidationBasicStyle.addValidation(mock(TextInputLayout.class), mock(TextInputLayout.class), PowerMockito.mock(String.class));
    }"
3099,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRangeThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRangeThrowsException() {
        mSpiedAwesomeValidationUnderlabelStyle.addValidation(mock(TextInputLayout.class), PowerMockito.mock(Range.class), PowerMockito.mock(String.class));
    }"
3100,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndPatternThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndPatternThrowsException() {
        mSpiedAwesomeValidationColorationStyle.addValidation(mock(TextInputLayout.class), PowerMockito.mock(Pattern.class), PowerMockito.mock(String.class));
    }"
3101,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRegexThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRegexThrowsException() {
        mSpiedAwesomeValidationBasicStyle.addValidation(mock(TextInputLayout.class), PowerMockito.mock(String.class), PowerMockito.mock(String.class));
    }"
3102,testAddValidationForTextInputLayoutValidatorWithEditTextAndConfirmationThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndConfirmationThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), mock(EditText.class), PowerMockito.mock(String.class));
    }"
3103,testAddValidationForTextInputLayoutValidatorWithEditTextAndRangeThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndRangeThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), PowerMockito.mock(Range.class), PowerMockito.mock(String.class));
    }"
3104,testAddValidationForTextInputLayoutValidatorWithEditTextAndPatternThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndPatternThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), PowerMockito.mock(Pattern.class), PowerMockito.mock(String.class));
    }"
3105,testAddValidationForTextInputLayoutValidatorWithEditTextAndRegexThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndRegexThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), PowerMockito.mock(String.class), PowerMockito.mock(String.class));
    }"
3107,testSetTextInputLayoutErrorTextAppearanceForNonTextInputLayoutStyle,"    public void testSetTextInputLayoutErrorTextAppearanceForNonTextInputLayoutStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setTextInputLayoutErrorTextAppearance(mStyleResId);
    }"
3108,testSetTextInputLayoutErrorTextAppearanceForTextInputLayoutStyle,"    public void testSetTextInputLayoutErrorTextAppearanceForTextInputLayoutStyle() throws Exception {
        mSpiedAwesomeValidationTextInputLayoutStyle.setTextInputLayoutErrorTextAppearance(mStyleResId);
        verify(mSpiedTextInputLayoutValidator, times(1)).setErrorTextAppearance(mStyleResId);
    }"
3109,testSetUnderlabelColorByResourceForNonUnderlabelStyle,"    public void testSetUnderlabelColorByResourceForNonUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setUnderlabelColorByResource(mColorResId);
    }"
3111,testSetUnderlabelColorForNonUnderlabelStyle,"    public void testSetUnderlabelColorForNonUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setUnderlabelColor(mColor);
    }"
3112,testSetUnderlabelColorForUnderlabelStyle,"    public void testSetUnderlabelColorForUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationUnderlabelStyle.setUnderlabelColor(mColor);
        verify(mSpiedUnderlabelValidator, times(1)).setColor(mColor);
    }"
3113,testSetColorForNonColorationStyle,"    public void testSetColorForNonColorationStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setColor(mColor);
    }"
3114,testSetColorForColorationStyle,"    public void testSetColorForColorationStyle() throws Exception {
        mSpiedAwesomeValidationColorationStyle.setColor(mColor);
        verify(mSpiedColorationValidator, times(1)).setColor(mColor);
    }"
3115,testSetContextForNonUnderlabelStyle,"    public void testSetContextForNonUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setContext(mMockContext);
    }"
3116,testSetContextForUnderlabelStyle,"    public void testSetContextForUnderlabelStyle() throws Exception {
        PowerMockito.mockStatic(ContextCompat.class);
        PowerMockito.when(ContextCompat.getColor(eq(mMockContext), anyInt())).thenReturn(mColor);
        mSpiedAwesomeValidationUnderlabelStyle.setContext(mMockContext);
        verify(mSpiedUnderlabelValidator, times(1)).setContext(mMockContext);
    }"
3117,testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithUnderlabelStyle,"    public void testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithUnderlabelStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
3118,testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithColorationStyle,"    public void testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithColorationStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
3119,testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithBasicStyle,"    public void testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
3120,testCheckIsNotTextInputLayoutValidatorThrowsExceptionWithTextInputLayoutStyle,"    public void testCheckIsNotTextInputLayoutValidatorThrowsExceptionWithTextInputLayoutStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
3121,testCheckIsTextInputLayoutValidatorWithoutException,"    public void testCheckIsTextInputLayoutValidatorWithoutException() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsTextInputLayoutValidator"");
    }"
3122,testCheckIsTextInputLayoutValidatorThrowsExceptionWithUnderlabelStyle,"    public void testCheckIsTextInputLayoutValidatorThrowsExceptionWithUnderlabelStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsTextInputLayoutValidator"");
    }"
3123,testCheckIsTextInputLayoutValidatorThrowsExceptionWithColorationStyle,"    public void testCheckIsTextInputLayoutValidatorThrowsExceptionWithColorationStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsTextInputLayoutValidator"");
    }"
3124,testCheckIsTextInputLayoutValidatorThrowsExceptionWithBasicStyle,"    public void testCheckIsTextInputLayoutValidatorThrowsExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsTextInputLayoutValidator"");
    }"
3125,testCheckIsUnderlabelValidatorWithoutException,"    public void testCheckIsUnderlabelValidatorWithoutException() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsUnderlabelValidator"");
    }"
3126,testCheckIsUnderlabelValidatorThrowsExceptionWithTextInputLayoutStyle,"    public void testCheckIsUnderlabelValidatorThrowsExceptionWithTextInputLayoutStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsUnderlabelValidator"");
    }"
3127,testCheckIsUnderlabelValidatorThrowsExceptionWithColorationStyle,"    public void testCheckIsUnderlabelValidatorThrowsExceptionWithColorationStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsUnderlabelValidator"");
    }"
3128,testCheckIsUnderlabelValidatorThrowsExceptionWithBasicStyle,"    public void testCheckIsUnderlabelValidatorThrowsExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsUnderlabelValidator"");
    }"
3129,testCheckIsColorationValidatorWithoutException,"    public void testCheckIsColorationValidatorWithoutException() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsColorationValidator"");
    }"
3130,testCheckIsColorationValidatorThrowsExceptionWithTextInputLayoutStyle,"    public void testCheckIsColorationValidatorThrowsExceptionWithTextInputLayoutStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsColorationValidator"");
    }"
3131,testCheckIsColorationValidatorThrowsExceptionWithUnderlabelStyle,"    public void testCheckIsColorationValidatorThrowsExceptionWithUnderlabelStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsColorationValidator"");
    }"
3132,testCheckIsColorationValidatorThrowsExceptionWithBasicStyle,"    public void testCheckIsColorationValidatorThrowsExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsColorationValidator"");
    }"
3133,testAwesomeValidationConstructTextInputLayoutValidatorStyle,"    public void testAwesomeValidationConstructTextInputLayoutValidatorStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationTextInputLayoutStyle, ""mValidator"") instanceof TextInputLayoutValidator);
    }"
3134,testAwesomeValidationConstructUnderlabelValidatorStyle,"    public void testAwesomeValidationConstructUnderlabelValidatorStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationUnderlabelStyle, ""mValidator"") instanceof UnderlabelValidator);
    }"
3135,testAwesomeValidationConstructColorationStyle,"    public void testAwesomeValidationConstructColorationStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationColorationStyle, ""mValidator"") instanceof ColorationValidator);
    }"
3136,testAwesomeValidationConstructBasicStyle,"    public void testAwesomeValidationConstructBasicStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationBasicStyle, ""mValidator"") instanceof BasicValidator);
    }"
3140,compare,"        public boolean compare(ValidationHolder validationHolder) {
            return false;
        }"
3141,compare,"        public boolean compare(String input) {
            return false;
        }"
3143,validate,"    public boolean validate() {
        return mValidator.trigger();
    }"
3144,addValidation,"    public void addValidation(Activity activity, int viewId, CustomValidation customValidation, CustomValidationCallback customValidationCallback, CustomErrorReset customErrorReset, int errMsgId) {
        mValidator.set(activity, viewId, customValidation, customValidationCallback, customErrorReset, errMsgId);
    }"
3145,addValidation,"    public void addValidation(View view, CustomValidation customValidation, CustomValidationCallback customValidationCallback, CustomErrorReset customErrorReset, String errMsg) {
        mValidator.set(view, customValidation, customValidationCallback, customErrorReset, errMsg);
    }"
3146,addValidation,"    public void addValidation(Activity activity, int viewId, SimpleCustomValidation simpleCustomValidation, int errMsgId) {
        mValidator.set(activity, viewId, simpleCustomValidation, errMsgId);
    }"
3147,addValidation,"    public void addValidation(TextInputLayout textInputLayout, SimpleCustomValidation simpleCustomValidation, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, simpleCustomValidation, errMsg);
    }"
3148,addValidation,"    public void addValidation(EditText editText, SimpleCustomValidation simpleCustomValidation, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, simpleCustomValidation, errMsg);
    }"
3149,addValidation,"    public void addValidation(Activity activity, int confirmationViewId, int viewId, int errMsgId) {
        mValidator.set(activity, confirmationViewId, viewId, errMsgId);
    }"
3150,addValidation,"    public void addValidation(TextInputLayout confirmationTextInputLayout, TextInputLayout textInputLayout, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(confirmationTextInputLayout, textInputLayout, errMsg);
    }"
3151,addValidation,"    public void addValidation(EditText confirmationEditText, EditText editText, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(confirmationEditText, editText, errMsg);
    }"
3152,addValidation,"    public void addValidation(Activity activity, int viewId, Range range, int errMsgId) {
        mValidator.set(activity, viewId, new NumericRange(range), errMsgId);
    }"
3153,addValidation,"    public void addValidation(TextInputLayout textInputLayout, Range range, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, new NumericRange(range), errMsg);
    }"
3154,addValidation,"    public void addValidation(EditText editText, Range range, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, new NumericRange(range), errMsg);
    }"
3155,addValidation,"    public void addValidation(Activity activity, int viewId, Pattern pattern, int errMsgId) {
        mValidator.set(activity, viewId, pattern, errMsgId);
    }"
3156,addValidation,"    public void addValidation(TextInputLayout textInputLayout, Pattern pattern, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, pattern, errMsg);
    }"
3157,addValidation,"    public void addValidation(EditText editText, Pattern pattern, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, pattern, errMsg);
    }"
3158,addValidation,"    public void addValidation(Activity activity, int viewId, String regex, int errMsgId) {
        mValidator.set(activity, viewId, regex, errMsgId);
    }"
3159,addValidation,"    public void addValidation(TextInputLayout textInputLayout, String regex, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, regex, errMsg);
    }"
3160,addValidation,"    public void addValidation(EditText editText, String regex, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, regex, errMsg);
    }"
3166,checkIsNotTextInputLayoutValidator,"    private void checkIsNotTextInputLayoutValidator() {
        if (mValidator instanceof TextInputLayoutValidator) {
            throw new UnsupportedOperationException(""Not supported by TextInputLayoutValidator."");"
3167,checkIsTextInputLayoutValidator,"    private void checkIsTextInputLayoutValidator() {
        if (!(mValidator instanceof TextInputLayoutValidator)) {
            throw new UnsupportedOperationException(""Only supported by TextInputLayoutValidator."");"
3168,checkIsUnderlabelValidator,"    private void checkIsUnderlabelValidator() {
        if (!(mValidator instanceof UnderlabelValidator)) {
            throw new UnsupportedOperationException(""Only supported by UnderlabelValidator."");"
3169,checkIsColorationValidator,"    private void checkIsColorationValidator() {
        if (!(mValidator instanceof ColorationValidator)) {
            throw new UnsupportedOperationException(""Only supported by ColorationValidator."");"
3170,disableAutoFocusOnFirstFailure,"    public static void disableAutoFocusOnFirstFailure() {
        autoFocusOnFirstFailure = false;
    }"
3171,isAutoFocusOnFirstFailureEnabled,"    public static boolean isAutoFocusOnFirstFailureEnabled() {
        return autoFocusOnFirstFailure;
    }"
3175,springCallback,"            public void springCallback(int offset) {
                int radius = 20 * (240 - offset > 0 ? 240 - offset : 0) / 240;
                realtimeBlurView.setBlurRadius(radius);
            }"
3177,onClick,"            public void onClick(View view) {
                Snackbar.make(view, ""Replace with your own action"", Snackbar.LENGTH_LONG)
                        .setAction(""Action"", null).show();"
3181,toString,"        public String toString() {
            return super.toString() + "" '"" + mContentView.getText() + ""'"";
        }"
3183,onBindViewHolder,"    public void onBindViewHolder(final ViewHolder holder, int position) {
        holder.mItem = mValues.get(position);
        holder.mIdView.setText(mValues.get(position).id);
        holder.mContentView.setText(mValues.get(position).content);
    }"
3184,onCreateViewHolder,"    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.fragment_item, parent, false);
        return new ViewHolder(view);"
3185,onSpringTabAppBarLayoutClick,"    public void onSpringTabAppBarLayoutClick(View view) {
        startActivity(new Intent(this, SpringAppBarLayoutWithTabActivity.class));
    }"
3186,onSpringAppBarLayoutClick,"    public void onSpringAppBarLayoutClick(View view) {
        startActivity(new Intent(this, SpringAppBarLayoutActivity.class));
    }"
3187,onNormalAppBarLayoutClick,"    public void onNormalAppBarLayoutClick(View view) {
        startActivity(new Intent(this, NormalAppBarLayoutActivity.class));
    }"
3188,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }"
3190,newInstance,"    public static ItemFragment newInstance() {
        ItemFragment fragment = new ItemFragment();
        Bundle args = new Bundle();
        fragment.setArguments(args);
        return fragment;
    }"
3191,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {

        int id = item.getItemId();
        if (id == R.id.action_recyclerView) {
            if (mSweetSheet2.isShow()) {
                mSweetSheet2.dismiss();
            }"
3192,onBackPressed,"    public void onBackPressed() {

        if (mSweetSheet.isShow() || mSweetSheet2.isShow()) {"
3194,onItemClick,"            public boolean onItemClick(int position, MenuEntity menuEntity1) {

                Toast.makeText(MainActivity.this, menuEntity1.title + ""  "" + position, Toast.LENGTH_SHORT).show();
                return true;"
3198,onClick,"            public void onClick(View v) {
                mSweetSheet3.dismiss();
            }"
3199,setupCustomView,"    private void setupCustomView() {



        mSweetSheet3 = new SweetSheet(rl);
        CustomDelegate customDelegate = new CustomDelegate(true,
                CustomDelegate.AnimationType.DuangLayoutAnimation);
        View view = LayoutInflater.from(this).inflate(R.layout.layout_custom_view, null, false);"
3200,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_main);

        rl = (RelativeLayout) findViewById(R.id.rl);
        setupViewpager();
        setupRecyclerView();"
3203,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (savedInstanceState == null) {"
3204,onListItemClick,"    public void onListItemClick(ListView l, View v, int position, long id) {
        String item = (String) l.getAdapter().getItem(position);

        if (item.equals(HANDLER)) {
            getFragmentManager().beginTransaction()"
3205,onResume,"    public void onResume() {
        super.onResume();

        ActionBar actionBar = ((MainActivity) getActivity()).getSupportActionBar();

        actionBar.setDisplayHomeAsUpEnabled(false);"
3206,onViewCreated,"    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        List<String> items = new ArrayList<String>();
        items.add(HANDLER);
        items.add(WEB_VIEW);
        items.add(DISPLAY_ERROR);
        items.add(SKIP_IDS);
        setListAdapter(new ArrayAdapter<String>(getActivity(), android.R.layout.simple_list_item_1, items));"
3207,newInstance,"    public static ListFragment newInstance() {
        return new ListFragment();
    }"
3209,insertAfter,"        public void insertAfter(@NonNull ChainedRef candidate) {
            lock.lock();
            try {
                if (this.next != null) {"
3210,remove,"        public WeakRunnable remove() {
            lock.lock();
            try {
                if (prev != null) {
                    prev.next = next;"
3211,run,"        public void run() {
            final Runnable delegate = mDelegate.get();
            final ChainedRef reference = mReference.get();
            if (reference != null) {
                reference.remove();
            }"
3215,hasMessages,"    public final boolean hasMessages(int what, Object object) {
        return mExec.hasMessages(what, object);
    }"
3216,hasMessages,"    public final boolean hasMessages(int what) {
        return mExec.hasMessages(what);
    }"
3217,removeCallbacksAndMessages,"    public final void removeCallbacksAndMessages(Object token) {
        mExec.removeCallbacksAndMessages(token);
    }"
3218,removeMessages,"    public final void removeMessages(int what, Object object) {
        mExec.removeMessages(what, object);
    }"
3219,removeMessages,"    public final void removeMessages(int what) {
        mExec.removeMessages(what);
    }"
3220,sendMessageAtFrontOfQueue,"    public final boolean sendMessageAtFrontOfQueue(Message msg) {
        return mExec.sendMessageAtFrontOfQueue(msg);
    }"
3221,sendMessageAtTime,"    public boolean sendMessageAtTime(Message msg, long uptimeMillis) {
        return mExec.sendMessageAtTime(msg, uptimeMillis);
    }"
3222,sendMessageDelayed,"    public final boolean sendMessageDelayed(Message msg, long delayMillis) {
        return mExec.sendMessageDelayed(msg, delayMillis);
    }"
3223,sendEmptyMessageAtTime,"    public final boolean sendEmptyMessageAtTime(int what, long uptimeMillis) {
        return mExec.sendEmptyMessageAtTime(what, uptimeMillis);
    }"
3224,sendEmptyMessageDelayed,"    public final boolean sendEmptyMessageDelayed(int what, long delayMillis) {
        return mExec.sendEmptyMessageDelayed(what, delayMillis);
    }"
3225,sendEmptyMessage,"    public final boolean sendEmptyMessage(int what) {
        return mExec.sendEmptyMessage(what);
    }"
3226,sendMessage,"    public final boolean sendMessage(Message msg) {
        return mExec.sendMessage(msg);
    }"
3227,removeCallbacks,"    public final void removeCallbacks(Runnable r, Object token) {
        final WeakRunnable runnable = mRunnables.remove(r);
        if (runnable != null) {
            mExec.removeCallbacks(runnable, token);"
3228,removeCallbacks,"    public final void removeCallbacks(Runnable r) {
        final WeakRunnable runnable = mRunnables.remove(r);
        if (runnable != null) {
            mExec.removeCallbacks(runnable);"
3229,postAtFrontOfQueue,"    public final boolean postAtFrontOfQueue(Runnable r) {
        return mExec.postAtFrontOfQueue(wrapRunnable(r));
    }"
3230,postDelayed,"    public final boolean postDelayed(Runnable r, long delayMillis) {
        return mExec.postDelayed(wrapRunnable(r), delayMillis);
    }"
3231,postAtTime,"    public final boolean postAtTime(Runnable r, Object token, long uptimeMillis) {
        return mExec.postAtTime(wrapRunnable(r), token, uptimeMillis);
    }"
3232,postAtTime,"    public final boolean postAtTime(@NonNull Runnable r, long uptimeMillis) {
        return mExec.postAtTime(wrapRunnable(r), uptimeMillis);
    }"
3233,post,"    public final boolean post(@NonNull Runnable r) {
        return mExec.post(wrapRunnable(r));
    }"
3235,animateOut,"    abstract void animateOut(long duration, AnimatorListener animatorListener);
"
3238,newArray,"			public SavedState[] newArray(int size) {
				return new SavedState[size];
			}"
3239,createFromParcel,"			public SavedState createFromParcel(Parcel in) {
				return new SavedState(in);
			}"
3240,writeToParcel,"		public void writeToParcel(Parcel dest, int flags) {
			super.writeToParcel(dest, flags);
			dest.writeString(message);
		}"
3241,onRestoreInstanceState,"	public void onRestoreInstanceState(Parcelable state) {
		if (!(state instanceof SavedState)) {
			super.onRestoreInstanceState(state);
			return;
		}
"
3242,onSaveInstanceState,"	public Parcelable onSaveInstanceState() {
		Parcelable superState = super.onSaveInstanceState();
		SavedState ss = new SavedState(superState);
		ss.message = mMessage.getText().toString();
		return ss;
	}"
3247,onFinishInflate,"	protected void onFinishInflate() {
		super.onFinishInflate();
		
		mMessage = (TextView) findViewById(R.id.message);
		mButton = (TextView) findViewById(R.id.button);"
3248,show,"        public void show(boolean shouldAnimate) {
            create().show(shouldAnimate);
        }"
3249,show,"        public void show() {
            show(true);
        }"
3263,safelyNotifyOnUndo,"    protected void safelyNotifyOnUndo() {
        if (mUndoListener != null) {
            mUndoListener.onUndo(mUndoToken);"
3264,safelyNotifyOnHide,"    protected void safelyNotifyOnHide() {
        if (mUndoListener != null) {
            mUndoListener.onHide();"
3265,onUndo,"    protected void onUndo() {
        hide(true);
        safelyNotifyOnUndo();
    }"
3266,onHide,"    protected void onHide() {
        hide(true);
        safelyNotifyOnHide();
        mUndoListener = null;
    }"
3267,onAnimationEnd,"            public void onAnimationEnd() {
                mView.setVisibility(View.GONE);
                mUndoMessage = null;
                mUndoToken = null;
            }"
3268,animateOut,"    protected void animateOut() {
        mViewCompat.animateOut(mAnimationDuration, new ViewCompat.AnimatorListener() {
            @Override"
3269,animateIn,"    protected void animateIn() {
        mViewCompat.animateIn(mAnimationDuration);
    }"
3270,isVisible,"    public boolean isVisible() {
        return mView.getVisibility() == View.VISIBLE;
    }"
3271,hide,"    public void hide(boolean shouldAnimate) {
        mHandler.removeCallbacks(mHideRunnable);

        if (shouldAnimate) {"
3273,removeMargins,"    private static void removeMargins(View view) {
        ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) view.getLayoutParams();
        layoutParams.leftMargin = layoutParams.topMargin = layoutParams.rightMargin = layoutParams.bottomMargin = 0;
        view.setLayoutParams(layoutParams);
    }"
3274,isAlignBottomPossible,"    private boolean isAlignBottomPossible() {
        return mContext.getResources().getBoolean(R.bool.is_align_bottom_possible);
    }"
3275,isLollipopStyle,"    private boolean isLollipopStyle(Style style) {
        return style == Style.LOLLIPOP || (style == Style.DEFAULT && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP);
    }"
3276,show,"    public void show(boolean shouldAnimate) {
        mView.setMessage(mUndoMessage);
        mView.setButtonLabel(mUseEnglishLocale ? R.string.undo_english : R.string.undo);
        if (isLollipopStyle(mStyle)) {
            mView.setUndoColor(mUndoColor);
            if (mAlignParentBottom && isAlignBottomPossible()) {
                removeMargins(mView);
            }
        }"
3288,onClick,"        public void onClick(View v) {
            onUndo();
        }"
3289,run,"        public void run() {
            onHide();
        }"
3293,onMeasure,"	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		int measuredWidth = MeasureSpec.getSize(widthMeasureSpec);
		if (mMaxWidth > 0 && mMaxWidth < measuredWidth) {
			int measureMode = MeasureSpec.getMode(widthMeasureSpec);
			widthMeasureSpec = MeasureSpec.makeMeasureSpec(mMaxWidth, measureMode);"
3294,init,"	private void init(AttributeSet attrs) {
		if (attrs != null) {
			TypedArray a = getContext().obtainStyledAttributes(attrs, new int[] { android.R.attr.maxWidth });"
3299,isDrawerMoving,"    public boolean isDrawerMoving() {
        return mDrawerMoving;
    }"
3300,isDrawerOpened,"    public boolean isDrawerOpened() {
        return mDrawerOpened;
    }"
3301,closeDrawer,"    public void closeDrawer() {
        closeDrawer(true);
    }"
3302,run,"                            public void run() {
                                mDrawerCallbacks.onDrawerClosed();
                            }"
3303,run,"            public void run() {
                final boolean scrolling = mScroller.computeScrollOffset();
                mDecorContent.offsetLeftAndRight(mScroller.getCurrX() - mDecorOffsetX);
                mDecorOffsetX = mScroller.getCurrX();
                postInvalidate();

                if (!scrolling) {"
3304,closeDrawer,"    public void closeDrawer(final boolean animate) {
        if(mDrawerMoving){
            mScrollerHandler.removeCallbacks(mDrawCloseRunnable);
            mScrollerHandler.removeCallbacks(mDrawOpenRunnable);
        } else if (!mDrawerOpened) {
            return;
        }
"
3305,openDrawer,"    public void openDrawer() {
        openDrawer(true);
    }"
3306,run,"                            public void run() {
                                mDrawerCallbacks.onDrawerOpened();
                            }"
3308,openDrawer,"    public void openDrawer(final boolean animate) {
        if(mDrawerMoving){
            mScrollerHandler.removeCallbacks(mDrawCloseRunnable);
            mScrollerHandler.removeCallbacks(mDrawOpenRunnable);
        }

        if (mDrawerOpened) {
            return;
        }
"
3309,toggleDrawer,"    public void toggleDrawer() {
        toggleDrawer(true);
    }"
3310,toggleDrawer,"    public void toggleDrawer(final boolean animate) {
        if (!mDrawerOpened) {
            openDrawer(animate);"
3311,isDrawerEnabled,"    public boolean isDrawerEnabled() {
        return mDrawerEnabled;
    }"
3319,dispatchDraw,"    protected void dispatchDraw(Canvas canvas) {
        super.dispatchDraw(canvas);

        if (mDrawerOpened || mDrawerMoving) {"
3322,onLayout,"    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
        Rect windowRect = new Rect();
        mDecorView.getWindowVisibleDisplayFrame(windowRect);

        if (mSlideTarget == SLIDE_TARGET_WINDOW) {
            mDrawerContent.layout(left, top + windowRect.top, right, bottom);
            mDecorContent.layout(mDecorContent.getLeft(), mDecorContent.getTop(),"
3329,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }"
3330,onResume,"    protected void onResume() {
        super.onResume();

        Drawable drawable = mCpuAniImageView.getDrawable();
        if (drawable instanceof Animatable) {
            ((Animatable) drawable).start();
        }
"
3331,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        mStatusTextView = (TextView) findViewById(R.id.status_text_view);"
3333,onBindViewHolder,"        public void onBindViewHolder(ViewHolder holder, int position) {
            holder.mTextView.setText(sStringList[position]);
        }"
3334,onCreateViewHolder,"        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            LayoutInflater inflater = LayoutInflater.from(parent.getContext());
            View view = inflater.inflate(R.layout.list_item, null);
            return new ViewHolder(view);
        }"
3335,show,"    public static void show(Context context, int dayNightMode) {
        new BottomSheetDialogView(context, dayNightMode);
    }"
3339,show,"    public static void show(FragmentActivity activity) {
        new JayneHatDialogFragment().show(activity.getSupportFragmentManager(), TAG);
    }"
3342,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        super.onCreateOptionsMenu(menu);
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main, menu);

        if (isDarkTheme()) {
            menu.findItem(R.id.theme_change).setTitle(""Use Light Theme"");"
3343,onPositiveButtonClicked,"    public void onPositiveButtonClicked(int resultCode, Date date) {
        String text = """";
        if (resultCode == REQUEST_DATE_PICKER) {
            text = ""Date "";
        } else if (resultCode == REQUEST_TIME_PICKER) {
            text = ""Time "";"
3344,onNegativeButtonClicked,"    public void onNegativeButtonClicked(int resultCode, Date date) {
        String text = """";
        if (resultCode == REQUEST_DATE_PICKER) {
            text = ""Date "";
        } else if (resultCode == REQUEST_TIME_PICKER) {
            text = ""Time "";"
3345,onNeutralButtonClicked,"    public void onNeutralButtonClicked(int requestCode) {
        if (requestCode == REQUEST_SIMPLE_DIALOG) {
            Toast.makeText(c, ""Neutral button clicked"", Toast.LENGTH_SHORT).show();"
3346,onNegativeButtonClicked,"    public void onNegativeButtonClicked(int requestCode) {
        if (requestCode == REQUEST_SIMPLE_DIALOG) {
            Toast.makeText(c, ""Negative button clicked"", Toast.LENGTH_SHORT).show();"
3347,onPositiveButtonClicked,"    public void onPositiveButtonClicked(int requestCode) {
        if (requestCode == REQUEST_SIMPLE_DIALOG) {
            Toast.makeText(c, ""Positive button clicked"", Toast.LENGTH_SHORT).show();"
3348,onCancelled,"    public void onCancelled(int requestCode) {
        switch (requestCode) {
            case REQUEST_SIMPLE_DIALOG:"
3349,onListItemsSelected,"    public void onListItemsSelected(CharSequence[] values, int[] selectedPositions, int requestCode) {
        if (requestCode == REQUEST_LIST_MULTIPLE) {
            StringBuilder sb = new StringBuilder();"
3350,onListItemSelected,"    public void onListItemSelected(CharSequence value, int number, int requestCode) {
        if (requestCode == REQUEST_LIST_SIMPLE || requestCode == REQUEST_LIST_SINGLE) {
            Toast.makeText(c, ""Selected: "" + value, Toast.LENGTH_SHORT).show();"
3351,onClick,"            public void onClick(View v) {
                DatePickerDialogFragment
                        .createBuilder(DemoActivity.this, getSupportFragmentManager())"
3352,onClick,"            public void onClick(View v) {
                TimePickerDialogFragment
                        .createBuilder(DemoActivity.this, getSupportFragmentManager())"
3353,onClick,"            public void onClick(View v) {
                JayneHatDialogFragment.show(c);
            }"
3354,onClick,"            public void onClick(View v) {
                ListDialogFragment
                        .createBuilder(c, getSupportFragmentManager())"
3357,onClick,"            public void onClick(View v) {
                ProgressDialogFragment.createBuilder(c, getSupportFragmentManager())
                        .setMessage(""Mal: I\'m just waiting to see if I pass out. Long story."")"
3358,onClick,"            public void onClick(View v) {
                SimpleDialogFragment.createBuilder(c, getSupportFragmentManager()).setMessage(""How will you decide?"")
                        .setPositiveButtonText(""Time for some thrillin' heroics!"").setNegativeButtonText(""Misbehave"")"
3359,onClick,"                    public void onClick(View v) {
                        SimpleDialogFragment.createBuilder(c, getSupportFragmentManager())
                                .setTitle(""Do you like this quote?"")"
3360,onClick,"            public void onClick(View v) {
                SimpleDialogFragment.createBuilder(c, getSupportFragmentManager())
                        .setTitle(""More Firefly quotes:"").setMessage"
3361,onClick,"            public void onClick(View v) {
                SimpleDialogFragment.createBuilder(c, getSupportFragmentManager())
                        .setMessage(""Love. Can know all the math in the \'verse but take a boat in the air that you don\'t "" +"
3365,directionChange,"	private void directionChange(){
		switch(direction){
		case Left:"
3366,onLayout,"	protected void onLayout(boolean changed, int l, int t, int r, int b) {
		super.onLayout(changed, l, t, r, b);
		View parent = (View) getParent();
		int halfParentW = (int) (parent.getWidth()*0.5);
		int center = (int) (l + (this.getWidth()*0.5));
		if(center<=halfParentW){
			direction = Direction.Left;
		}"
3367,onEditorAction,"	public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
		setStatus(Status.Normal);
		return true;
	}"
3369,initEvents,"	protected void initEvents(){
		etPictureTagLabel.setOnEditorActionListener(this);
	}"
3370,init,"	protected void init(){
		imm = (InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);
		directionChange();
	}"
3371,initViews,"	protected void initViews(){
		LayoutInflater.from(context).inflate(R.layout.picturetagview, this,true);
		tvPictureTagLabel = (TextView) findViewById(R.id.tvPictureTagLabel);
		etPictureTagLabel = (EditText) findViewById(R.id.etPictureTagLabel);
		loTag = findViewById(R.id.loTag);
	}"
3377,onCreate,"	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		this.setContentView(R.layout.act_main);
	}"
3378,onClick,"        public void onClick(View view) {
            startActivity(new Intent(view.getContext(), MainActivity.class));
            finish();
        }"
3379,onSkipToPrevious,"        public void onSkipToPrevious() {
            super.onSkipToPrevious();
            movieView.startVideo();
            if (indexInPlaylist > 0) {
                indexInPlaylist--;"
3380,onSkipToNext,"        public void onSkipToNext() {
            super.onSkipToNext();
            movieView.startVideo();
            if (indexInPlaylist < PLAYLIST_SIZE) {
                indexInPlaylist++;"
3381,onPause,"        public void onPause() {
            super.onPause();
            movieView.pause();
        }"
3382,onPlay,"        public void onPlay() {
            super.onPlay();
            movieView.play();
        }"
3383,updatePlaybackState,"    private void updatePlaybackState(
            @PlaybackStateCompat.State int state, long playbackActions, int position, int mediaId) {
        PlaybackStateCompat.Builder builder =
                new PlaybackStateCompat.Builder()"
3384,updatePlaybackState,"    private void updatePlaybackState(
            @PlaybackStateCompat.State int state, int position, int mediaId) {
        long actions = mSession.getController().getPlaybackState().getActions();
        updatePlaybackState(state, actions, position, mediaId);"
3385,adjustFullScreen,"    private void adjustFullScreen(Configuration config) {
        final View decorView = getWindow().getDecorView();
        if (config.orientation == Configuration.ORIENTATION_LANDSCAPE) {
            decorView.setSystemUiVisibility("
3387,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(
            boolean isInPictureInPictureMode, Configuration configuration) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode, configuration);
        if (!isInPictureInPictureMode) {"
3388,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        if (hasFocus) {
            adjustFullScreen(getResources().getConfiguration());"
3389,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        adjustFullScreen(newConfig);
    }"
3393,onStart,"    protected void onStart() {
        super.onStart();
        initializeMediaSession();
    }"
3399,onClick,"        public void onClick(View view) {
            startActivity(new Intent(view.getContext(), MediaSessionPlaybackActivity.class));
            finish();
        }"
3403,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(
            boolean isInPictureInPictureMode, Configuration configuration) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode, configuration);
        if (isInPictureInPictureMode) {"
3415,disposeComponent,"    public void disposeComponent() {
        super.disposeComponent();
        this.controllerFactory = null;
    }"
3416,initComponent,"    public void initComponent() {
        super.initComponent();
        final IconApplication iconApplication = ApplicationManager.getApplication().getComponent(IconApplication.class);
        this.controllerFactory = iconApplication.getControllerFactory();
    }"
3417,projectOpened,"    public void projectOpened() {
        this.controllerFactory.setProject(myProject);
    }"
3419,disposeComponent,"    public void disposeComponent() {
        controllerFactory.tearDown();
        controllerFactory = null;
    }"
3421,initComponent,"    public void initComponent() {
        IconPack androidIcons = null;
        IconPack materialIcons = null;
        try {
            final InputStream bundledIconPackPropertiesFile = ResourceLoader.getBundledResourceStream(""icon_packs.properties"");
            final Properties bundledIconPackProperties = new Properties();"
