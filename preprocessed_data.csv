,Method Names,Method Text
0,onPreviewFrame,"    public void onPreviewFrame(byte[] data, Camera camera) {

        Point cameraResolution = configManager.getCameraResolution();

        Handler thePreviewHandler = previewHandler;"
2,doInBackground,"        protected Object doInBackground(Object... objects) {

            try {
"
4,shutdown,"    public void shutdown() {

        cancel();"
5,cancel,"    private synchronized void cancel() {

        AsyncTask<?, ?, ?> task = inactivityTask;
"
6,onResume,"    public synchronized void onResume() {

        if (registered) {
"
7,onPause,"    public synchronized void onPause() {

        cancel();
"
8,onActivity,"    public synchronized void onActivity() {

        cancel();

        inactivityTask = new InactivityAsyncTask();"
9,run,"    public void run() {

        Looper.prepare();

        handler = new DecodeHandler(activity, hints);
"
11,buildLuminanceSource,"    public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data, int width, int height) {

        Rect rect = activity.getCropRect();

        if (rect == null) {"
13,handleMessage,"    public void handleMessage(Message message) {

        if (!running) {
"
14,bundleThumbnail,"    private static void bundleThumbnail(PlanarYUVLuminanceSource source, Bundle bundle) {

        int[] pixels = source.renderThumbnail();

        int width = source.getThumbnailWidth();

        int height = source.getThumbnailHeight();

        Bitmap bitmap = Bitmap.createBitmap(pixels, 0, width, width, height, Bitmap.Config.ARGB_8888);"
17,restartPreviewAndDecode,"    private void restartPreviewAndDecode() {

        if (state == State.SUCCESS) {"
18,quitSynchronously,"    public void quitSynchronously() {

        state = State.DONE;

        cameraManager.stopPreview();

        Message quit = Message.obtain(decodeThread.getHandler(), R.id.quit);

        quit.sendToTarget();"
19,handleMessage,"    public void handleMessage(Message message) {

        if (message.what == R.id.restart_preview) {"
23,requestPreviewFrame,"    public synchronized void requestPreviewFrame(Handler handler, int message) {

        Camera theCamera = camera;
"
24,stopPreview,"    public synchronized void stopPreview() {

        if (autoFocusManager != null) {
"
25,startPreview,"    public synchronized void startPreview() {

        Camera theCamera = camera;
"
26,closeDriver,"    public synchronized void closeDriver() {

        if (camera != null) {"
27,isOpen,"    public synchronized boolean isOpen() {

        return camera != null;"
28,get,"    public static CameraManager get() {

        return cameraManager;"
29,openDriver,"    public synchronized void openDriver(SurfaceHolder holder) throws IOException {

        Camera theCamera = camera;

        if (theCamera == null) {



            if (requestedCameraId >= 0) {"
30,compare,"            public int compare(Camera.Size a, Camera.Size b) {

                int aPixels = a.height * a.width;

                int bPixels = b.height * b.width;

                if (bPixels < aPixels) {"
37,close,"    public synchronized void close() {

        if (mediaPlayer != null) {"
38,onError,"    public synchronized boolean onError(MediaPlayer mp, int what, int extra) {

        if (what == MediaPlayer.MEDIA_ERROR_SERVER_DIED) {
"
40,buildMediaPlayer,"    private MediaPlayer buildMediaPlayer(Context activity) {

        MediaPlayer mediaPlayer = new MediaPlayer();

        mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);

        mediaPlayer.setOnCompletionListener(this);"
41,playBeepSoundAndVibrate,"    public synchronized void playBeepSoundAndVibrate() {

        if (playBeep && mediaPlayer != null) {
"
42,updatePrefs,"    private synchronized void updatePrefs() {

        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(activity);

        playBeep = shouldBeep(prefs, activity);
"
43,shouldBeep,"    private static boolean shouldBeep(SharedPreferences prefs, Context activity) {

        boolean shouldPlayBeep = true;

        if (shouldPlayBeep) {"
44,doInBackground,"        protected Object doInBackground(Object... voids) {

            try {

                Thread.sleep(AUTO_FOCUS_INTERVAL_MS);"
45,stop,"    public synchronized void stop() {

        stopped = true;
"
46,cancelOutstandingTask,"    private synchronized void cancelOutstandingTask() {

        if (outstandingTask != null) {"
47,start,"    public synchronized void start() {

        if (useAutoFocus) {"
48,autoFocusAgainLater,"    private synchronized void autoFocusAgainLater() {

        if (!stopped && outstandingTask == null) {"
49,onAutoFocus,"    public synchronized void onAutoFocus(boolean success, Camera theCamera) {

        focusing = false;
"
50,onItemLongClick,"        boolean onItemLongClick(ZrcListView parent, View view, int position, long id);
"
51,onItemClick,"        void onItemClick(ZrcListView parent, View view, int position, long id);
"
52,onScroll,"        public void onScroll(ZrcAbsListView view, int firstVisibleItem, int visibleItemCount,
"
53,onScrollStateChanged,"        public void onScrollStateChanged(ZrcAbsListView view, int scrollState);
"
60,onFinishInflate,"    protected void onFinishInflate() {

        super.onFinishInflate();

        int count = getChildCount();"
61,onFocusChanged,"    protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect) {

        super.onFocusChanged(gainFocus, direction, previouslyFocusedRect);


"
62,areFooterDividersEnabled,"    public boolean areFooterDividersEnabled() {

        return mFooterDividersEnabled;"
64,areHeaderDividersEnabled,"    public boolean areHeaderDividersEnabled() {

        return mHeaderDividersEnabled;"
70,drawDivider,"    void drawDivider(Canvas canvas, Rect bounds, int childIndex) {

        final Drawable divider = mDivider;

        divider.setBounds(bounds);"
71,drawChild,"    protected boolean drawChild(Canvas canvas, View child, long drawingTime) {

        boolean more = super.drawChild(canvas, child, drawingTime);

        if (mCachingActive) {"
72,dispatchDraw,"    protected void dispatchDraw(Canvas canvas) {

        if (mCachingStarted) {

            mCachingActive = true;

        }"
74,isOpaque,"    public boolean isOpaque() {

        boolean retValue =

                (mCachingActive && mIsCacheColorOpaque && mDividerIsOpaque) || super.isOpaque();"
77,addViewBelow,"    private View addViewBelow(View theView, int position) {

        int belowPosition = position + 1;

        View view = obtainView(belowPosition, mIsScrap);

        int edgeOfNewChild = theView.getBottom() + mDividerHeight;"
78,addViewAbove,"    private View addViewAbove(View theView, int position) {

        int abovePosition = position - 1;

        View view = obtainView(abovePosition, mIsScrap);

        int edgeOfNewChild = theView.getTop() - mDividerHeight;"
79,scrollListItemsBy,"    private void scrollListItemsBy(int amount) {

        offsetChildrenTopAndBottom(amount);



        final int listBottom = getHeight() - mListPadding.bottom - mLastBottomOffset;"
80,canAnimate,"    protected boolean canAnimate() {

        return super.canAnimate() && mItemCount > 0;"
82,makeAndAddView,"    private View makeAndAddView(int position, int y, boolean flow, int childrenLeft,

            boolean selected) {

        View child;

"
83,layoutChildren,"    protected void layoutChildren() {

        final boolean blockLayoutRequests = mBlockLayoutRequests;

        if (blockLayoutRequests) {
"
84,findMotionRow,"    int findMotionRow(int y) {

        int childCount = getChildCount();

        if (childCount > 0) {"
85,measureHeightOfChildren,"    final int measureHeightOfChildren(int widthMeasureSpec, int startPosition, int endPosition,

            final int maxHeight,

            int disallowPartialChildPosition) {

        final ListAdapter adapter = mAdapter;

        if (adapter == null) {

            return mListPadding.top + mListPadding.bottom + mFirstTopOffset + mLastBottomOffset;

        }

"
86,recycleOnMeasure,"    protected boolean recycleOnMeasure() {

        return true;"
87,measureScrapChild,"    private void measureScrapChild(View child, int position, int widthMeasureSpec) {

        LayoutParams p = (LayoutParams) child.getLayoutParams();

        if (p == null) {

            p = (ZrcAbsListView.LayoutParams) generateDefaultLayoutParams();

            child.setLayoutParams(p);

        }"
89,fillFromTop,"    private void fillFromTop(int nextTop) {

        mFirstPosition = Math.min(mFirstPosition, mItemCount - 1);

        if (mFirstPosition < 0) {"
90,fillUp,"    private void fillUp(int pos, int nextBottom, boolean isAnim) {

        int end = 0;

"
91,fillDown,"    private void fillDown(int pos, int nextTop, boolean isAnim) {

        int end = (getBottom() - getTop());
"
92,correctTooHighOrTooLow,"    void correctTooHighOrTooLow() {

        final int count = getCount();

        if (count == 0) {
"
93,fillGap,"    void fillGap(boolean down) {

        final int count = getChildCount();
"
94,requestChildRectangleOnScreen,"    public boolean requestChildRectangleOnScreen(View child, Rect rect, boolean immediate) {

        rect.offset(child.getLeft(), child.getTop());

        rect.offset(-child.getScrollX(), -child.getScrollY());



        final int height = getHeight();

        int listUnfadedTop = getScrollY();

        int listUnfadedBottom = listUnfadedTop + height;
"
95,clearRecycledState,"    private void clearRecycledState(ArrayList<FixedViewInfo> infos) {

        if (infos != null) {"
96,resetList,"    void resetList() {

        clearRecycledState(mHeaderViewInfos);

        clearRecycledState(mFooterViewInfos);
"
99,removeFooterView,"    public boolean removeFooterView(View v) {

        if (mFooterViewInfos.size() > 0) {
"
101,addFooterView,"    public void addFooterView(View v) {

        addFooterView(v, null, true);"
102,addFooterView,"    public void addFooterView(View v, Object data, boolean isSelectable) {

        final FixedViewInfo info = new FixedViewInfo();

        info.view = v;

        info.data = data;
"
103,removeFixedViewInfo,"    private void removeFixedViewInfo(View v, ArrayList<FixedViewInfo> where) {

        int len = where.size();
"
104,removeHeaderView,"    public boolean removeHeaderView(View v) {

        if (mHeaderViewInfos.size() > 0) {
"
106,addHeaderView,"    public void addHeaderView(View v) {

        addHeaderView(v, null, true);"
107,addHeaderView,"    public void addHeaderView(View v, Object data, boolean isSelectable) {

        final FixedViewInfo info = new FixedViewInfo();

        info.view = v;

        info.data = data;
"
108,adjustViewsUp,"    private void adjustViewsUp() {

        final int childCount = getChildCount();

        int delta;"
110,onInvalidated,"        public void onInvalidated() {

            mDataChanged = true;

            mOldItemCount = mItemCount;

            mItemCount = 0;"
111,onChanged,"        public void onChanged() {

            mDataChanged = true;

            mOldItemCount = mItemCount;

            mItemCount = getAdapter().getCount();"
112,isSupportHardwareAccelerated,"    protected boolean isSupportHardwareAccelerated() {

        return APIUtil.isSupport(11) && isHardwareAccelerated();"
114,onDetachedFromWindow,"    protected void onDetachedFromWindow() {

        super.onDetachedFromWindow();"
115,dispatchRestoreInstanceState,"    protected void dispatchRestoreInstanceState(SparseArray<Parcelable> container) {

        dispatchThawSelfOnly(container);"
116,dispatchSaveInstanceState,"    protected void dispatchSaveInstanceState(SparseArray<Parcelable> container) {

        dispatchFreezeSelfOnly(container);"
120,updateEmptyStatus,"    private void updateEmptyStatus(boolean empty) {

        if (empty) {"
121,checkFocus,"    void checkFocus() {

        final T adapter = getAdapter();

        final boolean empty = adapter == null || adapter.getCount() == 0;

        final boolean focusable = !empty;
"
130,removeAllViews,"    public void removeAllViews() {

        throw new UnsupportedOperationException();"
131,removeViewAt,"    public void removeViewAt(int index) {

        throw new UnsupportedOperationException();"
132,removeView,"    public void removeView(View child) {

        throw new UnsupportedOperationException();"
133,addView,"    public void addView(View child, int index, LayoutParams params) {

        throw new UnsupportedOperationException();"
134,addView,"    public void addView(View child, LayoutParams params) {

        throw new UnsupportedOperationException();"
135,addView,"    public void addView(View child, int index) {

        throw new UnsupportedOperationException();"
136,addView,"    public void addView(View child) {

        throw new UnsupportedOperationException();"
137,setAdapter,"    public abstract void setAdapter(T adapter);
"
141,performItemClick,"    public boolean performItemClick(View view, int position, long id) {

        if (mOnItemClickListener != null) {
"
145,reclaimScrapViews,"		void reclaimScrapViews(List<View> views) {
			if (mViewTypeCount == 1) {
				views.addAll(mCurrentScrap);"
146,pruneScrapViews,"		private void pruneScrapViews() {
			final int maxViews = mActiveViews.length;
			final int viewTypeCount = mViewTypeCount;
			final ArrayList<View>[] scrapViews = mScrapViews;
			for (int i = 0; i < viewTypeCount; ++i) {
				final ArrayList<View> scrapPile = scrapViews[i];
				int size = scrapPile.size();"
148,removeSkippedScrap,"		void removeSkippedScrap() {
			if (mSkippedScrap == null) {
				return;
			}
			final int count = mSkippedScrap.size();
			for (int i = 0; i < count; i++) {"
149,addScrapView,"		void addScrapView(View scrap, int position) {
			final LayoutParams lp = (LayoutParams) scrap.getLayoutParams();
			if (lp == null) {
				return;
			}
			lp.scrappedFromPosition = position;
			final int viewType = lp.viewType;
			if (!shouldRecycleViewType(viewType)) {
				return;"
151,clearTransientStateViews,"		void clearTransientStateViews() {
			if (mTransientStateViews != null) {
				mTransientStateViews.clear();
			}"
154,fillActiveViews,"		void fillActiveViews(int childCount, int firstActivePosition) {
			if (mActiveViews.length < childCount) {
				mActiveViews = new View[childCount];
			}
			mFirstActivePosition = firstActivePosition;
			final View[] activeViews = mActiveViews;"
155,clear,"		void clear() {
			if (mViewTypeCount == 1) {
				final ArrayList<View> scrap = mCurrentScrap;
				final int scrapCount = scrap.size();
				for (int i = 0; i < scrapCount; i++) {"
156,shouldRecycleViewType,"		public boolean shouldRecycleViewType(int viewType) {
			return viewType >= 0;
		}"
157,markChildrenDirty,"		public void markChildrenDirty() {
			if (mViewTypeCount == 1) {
				final ArrayList<View> scrap = mCurrentScrap;
				final int scrapCount = scrap.size();
				for (int i = 0; i < scrapCount; i++) {"
161,run,"		public void run() {
			switch (mTouchMode) {
			default:"
163,endFling,"		void endFling() {
			int oldTouchMode = mTouchMode;
			mTouchMode = TOUCH_MODE_REST;
			removeCallbacks(this);
			reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
			clearScrollingCache();
			mScroller.abortAnimation();

			if (mZrcHeader != null && oldTouchMode == TOUCH_MODE_RESCROLL"
164,startScroll,"		void startScroll(int distance, int duration, boolean linear) {
			if (!mScroller.isFinished()) {
				mScroller.abortAnimation();
			}
			int initialY = distance < 0 ? Integer.MAX_VALUE : 0;
			mLastFlingY = initialY;
			mScroller.startScroll(0, initialY, 0, distance, duration);
			mTouchMode = TOUCH_MODE_FLING;"
165,start,"		void start(int initialVelocity) {
			if (!mScroller.isFinished()) {
				mScroller.abortAnimation();
			}
			int initialY = initialVelocity < 0 ? Integer.MAX_VALUE : 0;
			mLastFlingY = initialY;
			mScroller.fling(0, initialY, 0, initialVelocity, 0,
					Integer.MAX_VALUE, 0, Integer.MAX_VALUE);"
167,run,"		public void run() {
			final int motionPosition = mMotionPosition;
			final View child = getChildAt(motionPosition - mFirstPosition);
			if (child != null) {
				final int longPressPosition = mMotionPosition;"
168,run,"		public void run() {
			if (mTouchMode == TOUCH_MODE_DOWN) {
				mTouchMode = TOUCH_MODE_TAP;"
169,run,"		public void run() {
			if (mDataChanged) {
				return;
			}
			final ListAdapter adapter = mAdapter;
			final int motionPosition = mClickMotionPosition;"
170,sameWindow,"		public boolean sameWindow() {
			return getWindowAttachCount() == mOriginalAttachCount;
		}"
171,rememberWindowAttachCount,"		public void rememberWindowAttachCount() {
			mOriginalAttachCount = getWindowAttachCount();
		}"
172,toString,"		public String toString() {
			return ""AbsListView.SavedState{""
					+ Integer.toHexString(System.identityHashCode(this))"
174,newArray,"			public SavedState[] newArray(int size) {
				return new SavedState[size];
			}"
175,createFromParcel,"			public SavedState createFromParcel(Parcel in) {
				return new SavedState(in);
			}"
177,onRestoreInstanceState,"	public void onRestoreInstanceState(Parcelable state) {
		SavedState ss = (SavedState) state;
		super.onRestoreInstanceState(ss.getSuperState());
		mFirstPosition = ss.mFirstPosition;
		requestLayout();
		if (mFlingRunnable != null) {
			mFlingRunnable.scrollToAdjustViewsUpOrDown();"
178,onSaveInstanceState,"	public Parcelable onSaveInstanceState() {
		Parcelable superState = super.onSaveInstanceState();
		SavedState ss = new SavedState(superState);
		ss.mFirstPosition = mFirstPosition;
		return ss;
	}"
185,run,"				public void run() {
					if (mFlingRunnable != null /*
												 * && mTouchMode !="
187,reset,"	public void reset() {
		if (mZrcHeader != null) {
			mZrcHeader.stateChange(Headable.STATE_REST, """");"
196,run,"			public void run() {
				if (mZrcHeader == null
						|| mZrcHeader.getState() == Headable.STATE_LOADING
						|| onRefreshStart == null"
197,refresh,"	public void refresh() {
		post(new Runnable() {
			@Override"
198,stopLoadMore,"	public void stopLoadMore() {
		isLoadingMore = false;
		isLoadMoreOn = false;
		if (mFlingRunnable != null) {
			mFlingRunnable.scrollToAdjustViewsUpOrDown();"
200,startLoadMore,"	public void startLoadMore() {
		isLoadingMore = false;
		isLoadMoreOn = true;
	}"
201,reclaimViews,"	public void reclaimViews(List<View> views) {
		int childCount = getChildCount();
		RecyclerListener listener = mRecycler.mRecyclerListener;
		for (int i = 0; i < childCount; i++) {
			View child = getChildAt(i);
			LayoutParams lp = (LayoutParams) child.getLayoutParams();
			if (lp != null && mRecycler.shouldRecycleViewType(lp.viewType)) {"
207,checkLayoutParams,"	protected boolean checkLayoutParams(ViewGroup.LayoutParams p) {
		return p instanceof LayoutParams;
	}"
208,generateLayoutParams,"	public LayoutParams generateLayoutParams(AttributeSet attrs) {
		return new LayoutParams(getContext(), attrs);
	}"
209,generateLayoutParams,"	protected ViewGroup.LayoutParams generateLayoutParams(
			ViewGroup.LayoutParams p) {
		return new LayoutParams(p);"
210,generateDefaultLayoutParams,"	protected ViewGroup.LayoutParams generateDefaultLayoutParams() {
		return new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
				ViewGroup.LayoutParams.WRAP_CONTENT, 0);"
212,invalidateViews,"	public void invalidateViews() {
		mDataChanged = true;
		requestLayout();
		invalidate();
	}"
213,findClosestMotionRow,"	int findClosestMotionRow(int y) {
		final int childCount = getChildCount();
		if (childCount == 0) {
			return INVALID_POSITION;
		}
		final int motionRow = findMotionRow(y);"
218,offsetChildrenTopAndBottom,"	public void offsetChildrenTopAndBottom(int offset) {
		final int count = getChildCount();
		for (int i = 0; i < count; i++) {
			final View v = getChildAt(i);"
220,canScrollList,"	public boolean canScrollList(int direction) {
		final int childCount = getChildCount();
		if (childCount == 0) {
			return false;
		}
		final int firstPosition = mFirstPosition;
		final Rect listPadding = mListPadding;"
221,scrollListBy,"	public void scrollListBy(int y) {
		trackMotionScroll(-y, -y);
	}"
222,run,"					public void run() {
						if (mCachingStarted) {
							mCachingStarted = mCachingActive = false;"
223,clearScrollingCache,"	private void clearScrollingCache() {
		if (!isSupportHardwareAccelerated()) {
			if (mClearScrollingCache == null) {"
224,createScrollingCache,"	private void createScrollingCache() {
		if (mScrollingCacheEnabled && !mCachingStarted
				&& !isSupportHardwareAccelerated()) {"
225,smoothScrollBy,"	void smoothScrollBy(int distance, int duration, boolean linear) {
		if (mFlingRunnable == null) {
			mFlingRunnable = new FlingRunnable();
		}
		final int firstPos = mFirstPosition;
		final int childCount = getChildCount();
		final int lastPos = firstPos + childCount;
		final int topLimit = getPaddingTop();
		final int bottomLimit = getHeight() - getPaddingBottom();"
226,smoothScrollBy,"	public void smoothScrollBy(int distance, int duration) {
		smoothScrollBy(distance, duration, false);
	}"
229,scrollToAdjustViewsUpOrDown,"	protected void scrollToAdjustViewsUpOrDown() {
		if (mFlingRunnable != null) {
			mFlingRunnable.scrollToAdjustViewsUpOrDown();"
230,reportScrollStateChange,"	void reportScrollStateChange(int newState) {
		if (newState != mLastScrollState) {
			if (mOnScrollListener != null) {"
231,addTouchables,"	public void addTouchables(ArrayList<View> views) {
		final int count = getChildCount();
		final int firstPosition = mFirstPosition;
		final ListAdapter adapter = mAdapter;
		if (adapter == null) {
			return;
		}"
232,onSecondaryPointerUp,"	private void onSecondaryPointerUp(MotionEvent ev) {
		final int pointerIndex = (ev.getAction() & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
		final int pointerId = ev.getPointerId(pointerIndex);
		if (pointerId == mActivePointerId) {
			final int newPointerIndex = pointerIndex == 0 ? 1 : 0;"
233,onInterceptTouchEvent,"	public boolean onInterceptTouchEvent(MotionEvent ev) {
		int action = ev.getAction();
		if (!mIsAttached) {
			return false;
		}
		switch (action & MotionEvent.ACTION_MASK) {"
234,requestDisallowInterceptTouchEvent,"	public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
		if (disallowIntercept) {
			recycleVelocityTracker();
		}"
235,recycleVelocityTracker,"	private void recycleVelocityTracker() {
		if (mVelocityTracker != null) {
			mVelocityTracker.recycle();"
236,initVelocityTrackerIfNotExists,"	private void initVelocityTrackerIfNotExists() {
		if (mVelocityTracker == null) {
			mVelocityTracker = VelocityTracker.obtain();"
237,initOrResetVelocityTracker,"	private void initOrResetVelocityTracker() {
		if (mVelocityTracker == null) {
			mVelocityTracker = VelocityTracker.obtain();"
242,onTouchCancel,"	private void onTouchCancel() {
		mTouchMode = TOUCH_MODE_REST;
		setPressed(false);
		final View motionView = getChildCount() == 0 ? null : this
				.getChildAt(mMotionPosition - mFirstPosition);
		if (motionView != null) {
			motionView.setPressed(false);
		}
		clearScrollingCache();
		recycleVelocityTracker();
		mSelectorPosition = INVALID_POSITION;
		invalidate();"
243,run,"								public void run() {
									mTouchModeReset = null;
									mTouchMode = TOUCH_MODE_REST;
									child.setPressed(false);
									setPressed(false);
									invalidate();
									if (!mDataChanged && mIsAttached) {
										performClick.run();"
244,onTouchUp,"	private void onTouchUp(MotionEvent ev) {
		switch (mTouchMode) {
		case TOUCH_MODE_DOWN:
		case TOUCH_MODE_TAP:
		case TOUCH_MODE_DONE_WAITING:
			final int motionPosition = mMotionPosition;
			final View child = getChildCount() == 0 ? null"
245,onTouchMove,"	private void onTouchMove(MotionEvent ev) {
		if (mTouchMode == TOUCH_MODE_INVALID) {
			mTouchMode = TOUCH_MODE_SCROLL;
		}
		int pointerIndex = ev.findPointerIndex(mActivePointerId);
		if (pointerIndex == -1) {
			pointerIndex = 0;
			mActivePointerId = ev.getPointerId(pointerIndex);
		}"
247,onTouchEvent,"	public boolean onTouchEvent(MotionEvent ev) {
		try {
			if (!isEnabled()) {"
249,scrollIfNeeded,"	private void scrollIfNeeded(int x, int y) {
		final int rawDeltaY = y - mMotionY;
		final int deltaY = rawDeltaY - mMotionCorrection;
		int incrementalDeltaY = mLastY != Integer.MIN_VALUE ? y - mLastY
				: deltaY;
		if (mTouchMode == TOUCH_MODE_SCROLL) {"
250,startScrollIfNeeded,"	private boolean startScrollIfNeeded(int x, int y) {
		final int deltaX = x - mMotionX;
		final int distanceX = Math.abs(deltaX);
		final int deltaY = y - mMotionY;
		final int distanceY = Math.abs(deltaY);
		if (distanceX > mTouchSlop || distanceY > mTouchSlop) {
			if (distanceY > distanceX * 2) {
				createScrollingCache();"
251,pointToRowId,"	public long pointToRowId(int x, int y) {
		int position = pointToPosition(x, y);
		if (position >= 0) {
			return mAdapter.getItemId(position);
		}"
252,pointToPosition,"	public int pointToPosition(int x, int y) {
		Rect frame = mTouchFrame;
		if (frame == null) {
			mTouchFrame = new Rect();
			frame = mTouchFrame;
		}
		final int count = getChildCount();"
253,dispatchSetPressed,"	protected void dispatchSetPressed(boolean pressed) {
	}"
254,performLongPress,"	boolean performLongPress(final View child, final int longPressPosition,
			final long longPressId) {
		boolean handled = false;
		if (mOnItemLongClickListener != null) {
			handled = mOnItemLongClickListener.onItemLongClick(
					(ZrcListView) this, child, longPressPosition, longPressId);"
255,onWindowFocusChanged,"	public void onWindowFocusChanged(boolean hasWindowFocus) {
		super.onWindowFocusChanged(hasWindowFocus);
		final int touchMode = isInTouchMode() ? TOUCH_MODE_ON : TOUCH_MODE_OFF;
		if (!hasWindowFocus) {
			setChildrenDrawingCacheEnabled(false);
		} else {"
256,onDetachedFromWindow,"	protected void onDetachedFromWindow() {
		super.onDetachedFromWindow();
		mRecycler.clear();
		if (mAdapter != null && mDataSetObserver != null) {
			mAdapter.unregisterDataSetObserver(mDataSetObserver);
			mDataSetObserver = null;
		}
		if (mClearScrollingCache != null) {
			removeCallbacks(mClearScrollingCache);"
257,onAttachedToWindow,"	protected void onAttachedToWindow() {
		super.onAttachedToWindow();
		if (mAdapter != null && mDataSetObserver == null) {
			mDataSetObserver = new AdapterDataSetObserver();
			mAdapter.registerDataSetObserver(mDataSetObserver);
			mDataChanged = true;"
258,jumpDrawablesToCurrentState,"	public void jumpDrawablesToCurrentState() {
		super.jumpDrawablesToCurrentState();
		if (APIUtil.isSupport(11) && mSelector != null) {
			mSelector.jumpToCurrentState();"
259,verifyDrawable,"	public boolean verifyDrawable(Drawable dr) {
		return mSelector == dr || super.verifyDrawable(dr);
	}"
260,onCreateDrawableState,"	protected int[] onCreateDrawableState(int extraSpace) {
		if (mIsChildViewEnabled) {
			return super.onCreateDrawableState(extraSpace);
		}
		final int enabledState = ENABLED_STATE_SET[0];
		int[] state = super.onCreateDrawableState(extraSpace + 1);
		int enabledPos = -1;
		for (int i = state.length - 1; i >= 0; i--) {
			if (state[i] == enabledState) {"
261,drawableStateChanged,"	protected void drawableStateChanged() {
		super.drawableStateChanged();
		updateSelectorState();
	}"
262,updateSelectorState,"	void updateSelectorState() {
		if (mSelector != null) {
			if (shouldShowSelector()) {"
268,drawSelector,"	private void drawSelector(Canvas canvas) {
		if (!mSelectorRect.isEmpty()) {
			final Drawable selector = mSelector;"
269,shouldShowSelector,"	boolean shouldShowSelector() {
		return (!isInTouchMode())
				|| (touchModeDrawsInPressedState() && isPressed());"
270,touchModeDrawsInPressedState,"	boolean touchModeDrawsInPressedState() {
		switch (mTouchMode) {
		case TOUCH_MODE_TAP:"
277,positionSelector,"	void positionSelector(int position, View sel) {
		if (position != INVALID_POSITION) {
			mSelectorPosition = position;
		}
		final Rect selectorRect = mSelectorRect;
		invalidate(selectorRect);
		selectorRect.set(sel.getLeft(), sel.getTop(), sel.getRight(),
				sel.getBottom());
		invalidate(selectorRect);"
278,obtainView,"	View obtainView(int position, boolean[] isScrap) {
		isScrap[0] = false;
		View scrapView;
		scrapView = mRecycler.getTransientStateView(position);
		if (scrapView == null) {
			scrapView = mRecycler.getScrapView(position);
		}
		View child;
		if (scrapView != null) {
			child = mAdapter.getView(position, scrapView, this);"
283,updateScrollIndicators,"	void updateScrollIndicators() {
		if (mScrollUp != null) {
			boolean canScrollUp;
			canScrollUp = mFirstPosition > 0;"
285,onLayout,"	protected void onLayout(boolean changed, int l, int t, int r, int b) {
		mInLayout = true;
		if (changed) {
			int childCount = getChildCount();
			for (int i = 0; i < childCount; i++) {
				getChildAt(i).forceLayout();"
286,onMeasure,"	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		if (mSelector == null) {
			useDefaultSelector();
		}
		final Rect listPadding = mListPadding;
		listPadding.left = getPaddingLeft();
		listPadding.top = getPaddingTop();
		listPadding.right = getPaddingRight();"
287,computeVerticalScrollRange,"	protected int computeVerticalScrollRange() {
		int result;
		if (mSmoothScrollbarEnabled) {
			result = Math.max(getHeight() * 10, 0);
		} else {"
288,computeVerticalScrollOffset,"	protected int computeVerticalScrollOffset() {
		final int firstPosition = mFirstPosition;
		final int childCount = getChildCount();
		final int mScrollY = getScrollY();
		if (firstPosition >= 0 && childCount > 0) {
			if (mSmoothScrollbarEnabled) {
				final View view = getChildAt(0);"
289,computeVerticalScrollExtent,"	protected int computeVerticalScrollExtent() {
		final int count = getChildCount();
		if (count > 0) {
			if (mSmoothScrollbarEnabled) {
				final int range = (getHeight() - mFirstTopOffset - mLastBottomOffset) * 10;"
290,resetList,"	void resetList() {
		removeAllViewsInLayout();
		mFirstPosition = 0;
		mFirstTop = mFirstTopOffset + mListPadding.top;
		mDataChanged = false;
		mPositionScrollAfterLayout = null;
		mSelectorPosition = INVALID_POSITION;
		mSelectorRect.setEmpty();
		invalidate();
	}"
291,requestLayout,"	public void requestLayout() {
		if (!mBlockLayoutRequests && !mInLayout) {
			super.requestLayout();"
292,onFocusChanged,"	protected void onFocusChanged(boolean gainFocus, int direction,
			Rect previouslyFocusedRect) {
		super.onFocusChanged(gainFocus, direction, previouslyFocusedRect);
		if (gainFocus && !isInTouchMode()) {"
294,useDefaultSelector,"	private void useDefaultSelector() {
		setSelector(getResources().getDrawable(
				android.R.drawable.list_selector_background));"
297,isScrollingCacheEnabled,"	public boolean isScrollingCacheEnabled() {
		return mScrollingCacheEnabled;
	}"
298,invokeOnItemScrollListener,"	void invokeOnItemScrollListener() {
		if (mOnScrollListener != null) {
			mOnScrollListener.onScroll(this, mFirstPosition, getChildCount(),
					mItemCount);"
301,isSmoothScrollbarEnabled,"	public boolean isSmoothScrollbarEnabled() {
		return mSmoothScrollbarEnabled;
	}"
302,performItemClick,"	public boolean performItemClick(View view, int position, long id) {
		boolean handled = false;
		boolean dispatchItemClick = true;
		if (dispatchItemClick) {
			handled |= super.performItemClick(view, position, id);
		}"
305,retrieveFromScrap,"	static View retrieveFromScrap(ArrayList<View> scrapViews, int position) {
		int size = scrapViews.size();
		if (size > 0) {
			for (int i = 0; i < size; i++) {"
307,run,"		public void run() {
			mZrcHeader.stateChange(Headable.STATE_REST, null);
		}"
309,toastResultInOtherWay,"    public void toastResultInOtherWay(Context context, int state) {

        if (state == Headable.STATE_SUCCESS) {"
310,draw,"    public boolean draw(Canvas canvas, int left, int top, int right, int bottom) {

        boolean more = false;

        final int width = right - left;

        final int height = mHeight;

        final int offset = bottom - top;

        canvas.save();"
312,stateChange,"    public void stateChange(int state, String msg) {

        if (mState != state) {

            mTime = 0;"
317,draw,"    public boolean draw(Canvas canvas, int left, int top, int right, int bottom) {

        final int width = right - left;

        final int height = mHeight;

        final int viewHeight = bottom - top;

        canvas.save();

        canvas.clipRect(left + 5, top + 1, right + 5, bottom - 1);
"
320,unregisterDataSetObserver,"    public void unregisterDataSetObserver(DataSetObserver observer) {
        if (mAdapter != null) {
            mAdapter.unregisterDataSetObserver(observer);"
321,registerDataSetObserver,"    public void registerDataSetObserver(DataSetObserver observer) {
        if (mAdapter != null) {
            mAdapter.registerDataSetObserver(observer);"
325,hasStableIds,"    public boolean hasStableIds() {
        if (mAdapter != null) {
            return mAdapter.hasStableIds();
        }"
329,areAllItemsEnabled,"    public boolean areAllItemsEnabled() {
        if (mAdapter != null) {
            return mAreAllFixedViewsSelectable && mAdapter.areAllItemsEnabled();"
331,removeFooter,"    public boolean removeFooter(View v) {
        for (int i = 0; i < mFooterViewInfos.size(); i++) {
            ZrcListView.FixedViewInfo info = mFooterViewInfos.get(i);
            if (info.view == v) {"
332,removeHeader,"    public boolean removeHeader(View v) {
        for (int i = 0; i < mHeaderViewInfos.size(); i++) {
            ZrcListView.FixedViewInfo info = mHeaderViewInfos.get(i);
            if (info.view == v) {"
333,areAllListInfosSelectable,"    private boolean areAllListInfosSelectable(ArrayList<ZrcListView.FixedViewInfo> infos) {
        if (infos != null) {
            for (ZrcListView.FixedViewInfo info : infos) {
                if (!info.isSelectable) {"
334,isEmpty,"    public boolean isEmpty() {
        return mAdapter == null || mAdapter.isEmpty();
    }"
338,toastResultInOtherWay,"    void toastResultInOtherWay(Context context, int state);
"
339,draw,"    boolean draw(Canvas canvas, int left, int top, int right, int bottom);
"
341,stateChange,"    void stateChange(int state, String msg);
"
344,isEnablePlatformVerification,"  public boolean isEnablePlatformVerification() {
    return enablePlatformVerification;
  }"
358,loadFromResourceOrFile,"  public static NodeJsonConfiguration loadFromResourceOrFile(String source) {
    NodeJsonConfiguration config = fromResourceOrFile(source, NodeJsonConfiguration.class);

    if (config.configuration != null) {
      throw new GridConfigurationException(
          ""Deprecated -nodeConfig file encountered. Please update the file to work with Selenium 3. """
359,loadFromJson,"  public static NodeJsonConfiguration loadFromJson(JsonInput source) {
    NodeJsonConfiguration config = fromJson(source, NodeJsonConfiguration.class);

    if (config.configuration != null) {
      throw new GridConfigurationException(
          ""Deprecated -nodeConfig file encountered. Please update the file to work with Selenium 3. """
371,readFileOrResource,"  private static Reader readFileOrResource(String source) {
    Stream<Function<String, InputStream>> suppliers = Stream.of(
        (path) -> {
          try {
            return new FileInputStream(path);"
372,loadJsonFromResourceOrFile,"  private static JsonInput loadJsonFromResourceOrFile(String source) {
    try {
      return new Json().newInput(readFileOrResource(source));"
373,fromJson,"  static <T extends CommonJsonConfiguration> T fromJson(
          JsonInput jsonInput, Class<T> configurationClass)
  {"
374,fromResourceOrFile,"  static <T extends CommonJsonConfiguration> T fromResourceOrFile(
      String resourceOrFilePath, Class<T> configurationClass)
  {"
377,startNextScreen,"    public void startNextScreen() {

        mStartNextScreen = true;
        mShouldSpheresRotate = false;
        invalidate();"
378,translateTheSpheres,"    public void translateTheSpheres(float position, int pageWidth) {

        mPosition = position;
        invalidate();"
380,drawCircle,"    private float[] drawCircle(Canvas canvas, FloatWrapper originalPos, FloatWrapper step, Bitmap bm) {

        float distance = originalPos.floatValue + step.floatValue;
        float positionArray[] = new float[2];
        if (distance < mPathLength) {
            mPathMeasure.getPosTan(distance, mPos, mTan);

            matrix.reset();"
381,moveCircleInOut,"    private boolean moveCircleInOut(FloatWrapper distance, FloatWrapper pathLength, Matrix matrix, PathMeasure pathMeasure, Canvas canvas, Bitmap bm, FloatWrapper scaleCounter) {


        float position[] = new float[2];
        float tangent[] = new float[2];


        if (distance.floatValue >= (pathLength.floatValue / 2)) {"
383,onDraw,"    protected void onDraw(Canvas canvas) {

        canvas.drawPath(mAnimPath, mPaint);

        if (mShouldSpheresRotate || !mAllCirclesDrawn) {

            pos1 = drawCircle(canvas, mSphereOriginalPosArr[0], mSphereStepCountArr[0], mBitmap1);
            pos2 = drawCircle(canvas, mSphereOriginalPosArr[1], mSphereStepCountArr[1], mBitmap2);"
384,initOriginalPos,"    private void initOriginalPos() {

        for (int i = 0; i < 6; i++) {"
385,initLinePaths,"    private void initLinePaths() {

        for (int i = 0; i < 6; i++) {"
387,animateSecondScreenAntiClock,"    public void animateSecondScreenAntiClock(float position) {

        if (mCurrentDirection == Path.Direction.CW) {
            mCurrentDirection = Path.Direction.CCW;
            initNewPath(Path.Direction.CCW);"
389,onDraw,"    protected void onDraw(Canvas canvas) {

        canvas.drawPath(mAnimPath, mPaint);

        if (mDistance < mPathLength) {"
390,initNewPath,"    private void initNewPath(Path.Direction dir) {

        mAnimPath = new Path();
        RectF rectF = new RectF(XCOORD - RADIUS, YCOORD - RADIUS, XCOORD + RADIUS, YCOORD + RADIUS);

        if (dir == Path.Direction.CW) {
            mAnimPath.addArc(rectF, 50, 359);
        } else {
"
393,initThirdScreenViews,"    private void initThirdScreenViews(View rootView, Bundle savedInstanceState) {

        mRoundView = (ThirdScreenView) rootView.findViewById(R.id.round_view);
        mLetsGoButton = (Button) rootView.findViewById(R.id.letsgo);

        mLetsGoButton.setOnClickListener(clickListener);"
396,initializeAlpha,"    private void initializeAlpha() {

        mCamcordImage.setAlpha(0f);
        mClockImage.setAlpha(0f);
        mGraphImage.setAlpha(0f);
        mAudioImage.setAlpha(0f);
        mQuoteImage.setAlpha(0f);
        mMapImage.setAlpha(0f);
        mWordPressImage.setAlpha(0f);"
398,run,"                public void run() {

                    doFadeAnimation();"
399,run,"            public void run() {

                getOriginalXValues(savedInstanceState);"
403,animateSecondScreen,"    private void animateSecondScreen(float position, int pageWidth, int direction) {

        if (direction == 0) {"
405,transformPage,"        public void transformPage(View page, float position) {

            int pageWidth = page.getWidth();
            if ((mViewPagerScrollingLeft && page.findViewById(R.id.center_box) != null)) {
                animateSecondScreen(position, pageWidth, 0);
            }"
411,animateBookView,"    private void animateBookView() {

        mBookView.fadeInTheLines();"
412,onPageScrollStateChanged,"            public void onPageScrollStateChanged(int state) {

                if (state == ViewPager.SCROLL_STATE_DRAGGING) {
                    mShouldSpheresRotate = false;
                } else if (state == ViewPager.SCROLL_STATE_IDLE) {"
413,onPageSelected,"            public void onPageSelected(int position) {

                if (position == 1) {
                    mSelectedPosition = 1;
                    mSecondPageSelected = true;
                    setViewsInOriginalPosition();"
418,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        setUpViews();"
419,fadeInTheLines,"    public void fadeInTheLines() {

        mFadeInLineArr[0].floatValue = 1f;
        mFadeInLineArr[1].floatValue = 0f;
        mFadeInLineArr[2].floatValue = 0f;
        mFadeInLineArr[3].floatValue = 0f;
"
423,initZygote,"    public void initZygote(IXposedHookZygoteInit.StartupParam startupParam) {
        this.sharedPreferences = new XSharedPreferences(modulePackageName, ""default"");
        XposedBridge.log(modulePackageName+"" initZygote"");
    }"
424,afterHookedMethod,"                protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                    param.setResult(""Hook succeed"");
                    int x=sharedPreferences.getInt(""example"",1);
                }"
425,handleLoadPackage,"    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable {
        if (""xxx.xxx.xxx"".equals(loadPackageParam.packageName)){
            XposedHelpers.findAndHookMethod(""xxx.xxx.xxx.xxxClass"", loadPackageParam.classLoader, ""xxxMethod"", new XC_MethodHook() {"
426,findApkFile,"    private File findApkFile(Context context, String modulePackageName) {
        if (context == null) {
            return null;
        }
        try {"
428,initZygote,"    public void initZygote(IXposedHookZygoteInit.StartupParam startupParam) {
        this.startupparam = startupParam;
    }"
434,onClick,"    public void onClick(View view) {
        int id = view.getId();
        if (id == R.id.btn_get) {
            int width = CommonUtils.getDisplayWidth(this, true);"
435,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_module1);
        mTvDisplay = findViewById(R.id.tv_display);
    }"
438,testDiskCache5,"    private int[] testDiskCache5() {
        return null;
    }"
439,testDiskCache4,"    private String[] testDiskCache4(int num, String name) {
        return new String[]{""234"", ""345""};
    }"
440,testDiskCache3,"    private int[] testDiskCache3() {
        return new int[] {5,6,7};
    }"
441,testDiskCache2,"    private String testDiskCache2() {
        count ++;
        if (count % 3 == 0) {
            return ""123"";"
442,testDiskCache1,"    private int testDiskCache1() {
        return 2;
    }"
447,hello,"    private String hello(String name, String cardId) {
        return ""hello, "" + name + ""! Your CardId is "" + cardId + ""."";
    }"
450,run,"                    public void run() {
                        doInMainThread(v);
                    }"
452,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mTvHello = findViewById(R.id.tv_hello);"
453,toString,"    public String toString() {
        return ""LoginInfo{"" +
                ""LoginName='"" + LoginName + '\'' +"
454,random,"    public LoginInfo random() {
        LoginName = ""xuexiang"" + (int) (Math.random() * 1000 + 50);
        Age = (int) (Math.random() * 10 + 20);
        IsBoy = (Age % 2 == 0);
        score = new int[]{(int) (Math.random() * 100 + 50), (int) (Math.random() * 100 + 50)};
        return this;
    }"
456,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);
"
457,writer,"    public boolean writer(OutputStream sink, Object data) {
        try {
            String json = mGson.toJson(data);
            byte[] bytes = json.getBytes();"
458,load,"    public <T> T load(InputStream source, Type type) {
        T value = null;
        try {
            if (mGson == null) {
                mGson = new Gson();"
465,addition_isCorrect,"    public void addition_isCorrect() throws Exception {
        assertEquals(4, 2 + 2);
    }"
466,hasAttemptRemaining,"  protected boolean hasAttemptRemaining() {
    return currentRetryCount <= maxNumRetries;
  }"
467,retry,"  public void retry(VolleyError error) throws VolleyError {
    currentRetryCount++;
    currentTimeoutMs += (currentTimeoutMs * backoffMultiplier);
    if (!hasAttemptRemaining()) {
      throw error;"
477,setCookieHandler,"  void setCookieHandler(CookieHandler cookieHandler);
"
478,setSslSocketFactory,"  void setSslSocketFactory(SSLSocketFactory sslSocketFactory);
"
479,setHostnameVerifier,"  void setHostnameVerifier(HostnameVerifier hostnameVerifier);
"
481,log,"  void log() {
    switch (logLevel) {
      case FULL:"
482,toString,"  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(""Wasp Error: "");
    if (errorMessage != null) {
      builder.append(""Message: "")
          .append(errorMessage);
    }"
486,clearAll,"  public synchronized void clearAll() {
    map.clear();
  }"
487,get,"  public V get(K key) {
    if (key == null) {
      throw new NullPointerException(""key may not be null"");
    }"
488,remove,"  public void remove(K key) {
    if (key == null) {
      throw new NullPointerException(""key may not be null"");
    }"
489,put,"  public void put(K key, V value) {
    if (key == null || value == null) {
      throw new NullPointerException(""key == null || value == null"");
    }
    V temp = map.get(key);"
490,build,"    public Wasp build() {
      return new Wasp(this);
    }"
503,enableCookies,"    public Builder enableCookies(CookieStore cookieStore, CookiePolicy cookiePolicy) {
      if (cookiePolicy == null) {
        throw new NullPointerException(""CookiePolicy may not be null"");
      }
      this.cookieHandler = new CookieManager(cookieStore, cookiePolicy);"
504,enableCookies,"    public Builder enableCookies(CookiePolicy cookiePolicy) {
      return enableCookies(null, cookiePolicy);
    }"
505,trustCertificates,"    public Builder trustCertificates(int keyStoreRawResId, String keyStorePassword) {
      if (sslSocketFactory != null) {
        throw new IllegalStateException(""Only one type of trust certificate method can be used!"");
      }
      this.sslSocketFactory = SSLUtils.getPinnedCertSslSocketFactory("
506,trustCertificates,"    public Builder trustCertificates() {
      if (sslSocketFactory != null) {
        throw new IllegalStateException(""Only one type of trust certificate method can be used!"");
      }
      this.sslSocketFactory = SSLUtils.getTrustAllCertSslSocketFactory();
      this.hostnameVerifier = SSLUtils.getEmptyHostnameVerifier();"
510,clearCache,"    public static void clearCache() {
      if (imageHandler == null) {
        return;
      }"
512,from,"    public static ImageCreator.Builder from(String path) {
      if (TextUtils.isEmpty(path)) {
        throw new IllegalArgumentException(""Path cannot be empty or null"");
      }"
513,create,"  public <T> T create(Class<T> service) {
    if (service == null) {
      throw new NullPointerException(""service param may not be null"");
    }
    if (!service.isInterface()) {
      throw new IllegalArgumentException(""Only interface type is supported"");"
516,getBody,"    public byte[] getBody() throws AuthFailureError {
      byte[] body;
      try {
        body = requestBody == null ? null : requestBody.getBytes(PROTOCOL_CHARSET);
      } catch (UnsupportedEncodingException uee) {
        Logger.wtf(""Unsupported Encoding while trying to get the bytes of %s using %s"""
517,getParams,"    protected Map<String, String> getParams() throws AuthFailureError {
      return waspRequest.getFieldParams();
    }"
519,parseNetworkResponse,"    protected com.android.volley.Response parseNetworkResponse(NetworkResponse response) {
      try {
        byte[] data = response.data;"
520,deliverResponse,"    protected void deliverResponse(Response response) {
      response.log();
    }"
521,getHeaders,"    public Map<String, String> getHeaders() throws AuthFailureError {
      return waspRequest.getHeaders();
    }"
522,onErrorResponse,"    public void onErrorResponse(VolleyError error) {
      Response.Builder builder = new Response.Builder().setUrl(url);
      String errorMessage = null;

      if (error != null) {
        builder.setNetworkTime(error.getNetworkTimeMs());"
523,onResponse,"    public void onResponse(Response response) {
      waspCallback.onSuccess(response);
    }"
524,invokeRequest,"  public Object invokeRequest(RequestCreator requestCreator) throws Exception {
    return addToQueueSync(requestCreator);
  }"
525,invokeRequest,"  public void invokeRequest(RequestCreator waspRequest, InternalCallback<Response> waspCallback) {
    addToQueue(waspRequest, waspCallback);
  }"
526,addToQueue,"  private <T> void addToQueue(Request<T> request) {
    getRequestQueue().add(request);
  }"
528,deliverResponse,"      protected void deliverResponse(Response response) {
        super.deliverResponse(response);
        listener.onResponse(response);
      }"
530,deliverResponse,"      protected void deliverResponse(Response response) {
        super.deliverResponse(response);
        future.onResponse(response.getResponseObject());
      }"
533,newInstance,"  static VolleyNetworkStack newInstance(RequestQueue requestQueue) {
    return new VolleyNetworkStack(requestQueue);
  }"
534,newInstance,"  static VolleyNetworkStack newInstance(Context context, WaspHttpStack stack) {
    return new VolleyNetworkStack(context, stack);
  }"
535,apply,"      public boolean apply(Request<?> request) {
        return tag.equals(request.getTag());
      }"
536,cancelRequest,"  public void cancelRequest(final String tag) {
    Logger.w(""CANCEL REQUEST -> url : "" + tag);
    RequestQueue.RequestFilter filter = new RequestQueue.RequestFilter() {
      @Override
      public boolean apply(Request<?> request) {"
537,onErrorResponse,"          public void onErrorResponse(VolleyError error) {
            Response.Builder builder = new Response.Builder().setUrl(url);
            String errorMessage = null;

            if (error != null) {
              builder.setNetworkTime(error.getNetworkTimeMs());"
540,checkRx,"  public static void checkRx() {
    if (!hasRxJavaOnClasspath()) {
      throw new NoClassDefFoundError(""RxJava is not on classpath, """
541,hasRxJavaOnClasspath,"  static boolean hasRxJavaOnClasspath() {
    try {
      Class.forName(""rx.Observable"");
      return true;"
542,options,"  public Response options(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
543,delete,"  public Response delete(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
544,head,"  public Response head(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
545,patch,"  public Response patch(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
546,put,"  public Response put(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
547,post,"  public Response post(IHTTPSession session) {
    Map<String, String> files = new HashMap<>();
    try {
      session.parseBody(files);
    } catch (IOException ioe) {"
548,get,"  public Response get(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
549,serve,"  public Response serve(IHTTPSession session) {
    try {
      Thread.sleep(4000);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }"
550,main,"  public static void main(String[] args) {
    ServerRunner.run(TestServer.class);
  }"
552,wrap,"  public static String wrap(String value, String delimiter) {
    return delimiter + value + delimiter;
  }"
553,verify,"      public boolean verify(String hostname, SSLSession session) {
        return true;
      }"
555,getPinnedCertSslSocketFactory,"  public static SSLSocketFactory getPinnedCertSslSocketFactory(Context context,
                                                               int keyStoreRawResId,
                                                               String keyStorePassword) {
    InputStream in = null;"
557,checkServerTrusted,"            public void checkServerTrusted(X509Certificate[] chain, String authType)
                throws CertificateException {"
558,checkClientTrusted,"            public void checkClientTrusted(X509Certificate[] chain, String authType)
                throws CertificateException {"
560,cancelAll,"  public synchronized void cancelAll() {
    for (int i = 0, size = list.size(); i < size; i++) {
      list.get(i).cancel();
    }"
561,addRequest,"  public synchronized void addRequest(WaspRequest request) {
    list.add(request);
  }"
564,onQueryParamsAdded,"  public void onQueryParamsAdded(Map<String, Object> params) {
  }"
565,onHeadersAdded,"  public void onHeadersAdded(Map<String, String> headers) {
  }"
566,toString,"    public String toString() {
      if (lowerBound != null) return ""? super "" + typeToString(lowerBound);
      if (upperBound == Object.class) return ""?"";
      return ""? extends "" + typeToString(upperBound);
    }"
568,equals,"    public boolean equals(Object other) {
      return other instanceof WildcardType && RetroTypes.equals(this, (WildcardType) other);
    }"
571,toString,"    public String toString() {
      return typeToString(componentType) + ""[]"";
    }"
572,hashCode,"    public int hashCode() {
      return componentType.hashCode();
    }"
573,equals,"    public boolean equals(Object o) {
      return o instanceof GenericArrayType
          && RetroTypes.equals(this, (GenericArrayType) o);"
576,hashCode,"    public int hashCode() {
      return Arrays.hashCode(typeArguments) ^ rawType.hashCode() ^ hashCodeOrZero(ownerType);
    }"
577,equals,"    public boolean equals(Object other) {
      return other instanceof ParameterizedType
          && RetroTypes.equals(this, (ParameterizedType) other);"
581,checkNotPrimitive,"  private static void checkNotPrimitive(Type type) {
    if (type instanceof Class<?> && ((Class<?>) type).isPrimitive()) {
      throw new IllegalArgumentException();"
582,declaringClassOf,"  private static Class<?> declaringClassOf(TypeVariable<?> typeVariable) {
    GenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();
    return genericDeclaration instanceof Class ? (Class<?>) genericDeclaration : null;
  }"
586,typeToString,"  public static String typeToString(Type type) {
    return type instanceof Class ? ((Class<?>) type).getName() : type.toString();
  }"
587,hashCodeOrZero,"  private static int hashCodeOrZero(Object o) {
    return o != null ? o.hashCode() : 0;
  }"
588,equal,"  private static boolean equal(Object a, Object b) {
    return a == b || (a != null && a.equals(b));
  }"
589,indexOf,"  private static int indexOf(Object[] array, Object toFind) {
    for (int i = 0; i < array.length; i++) {
      if (toFind.equals(array[i])) return i;
    }"
593,submitResponse,"  void submitResponse() {
    callback.onSuccess(waspResponse, response);
  }"
608,build,"    Response build() {
      return new Response(this);
    }"
622,onQueryParamsAdded,"  void onQueryParamsAdded(Map<String, Object> params);
"
623,onHeadersAdded,"  void onHeadersAdded(Map<String, String> headers);
"
632,addFieldParams,"    private void addFieldParams(String key, String value) {
      Map<String, String> params = this.fieldParams;
      if (params == null) {
        params = new LinkedHashMap<>();
        this.fieldParams = params;"
633,addHeaderParam,"    private void addHeaderParam(String key, String value) {
      Map<String, String> headers = this.headers;
      if (headers == null) {
        headers = new LinkedHashMap<>();
        this.headers = headers;"
634,addQueryParam,"    private void addQueryParam(String key, Object value) {
      if (queryParamBuilder == null) {
        queryParamBuilder = new Uri.Builder();
      }"
635,addPathParam,"    private void addPathParam(String key, String value) {
      try {
        String encodedValue = URLEncoder.encode(String.valueOf(value), ""UTF-8"");"
640,build,"    RequestCreator build() {
      postInit();
      return new RequestCreator(this);
    }"
642,initParams,"    private void initParams() {
      Annotation[] annotations = methodInfo.getMethodAnnotations();
      int count = annotations.length;

      for (int i = 0; i < count; i++) {"
653,createRequestBody,"  private static RequestBody createRequestBody(Request request) throws AuthFailureError {
    byte[] body = request.getBody();
    if (body == null) {
      return null;
    }"
654,parseProtocol,"  private static ProtocolVersion parseProtocol(final Protocol protocol) {
    switch (protocol) {
      case HTTP_1_0:"
655,setConnectionParametersForRequest,"  private static void setConnectionParametersForRequest(
      com.squareup.okhttp.Request.Builder builder, Request<?> request)
      throws IOException, AuthFailureError {"
659,logHeaders,"  private static void logHeaders(Headers headers) {
    for (String headerName : headers.names()) {
      for (String headerValue : headers.values(headerName)) {"
661,invokeRequest,"  Object invokeRequest(RequestCreator requestCreator) throws Exception;
}"
662,invokeRequest,"  void invokeRequest(RequestCreator requestCreator, InternalCallback<Response> waspCallback);
"
663,onError,"      public void onError(WaspError error) {
        error.log();
        if (waspRequest.isCancelled()) {
          Logger.i(""Response not delivered because of cancelled request"");
          return;"
664,onSuccess,"      public void onSuccess(Response response) {
        if (waspRequest.isCancelled()) {
          Logger.i(""Response not delivered because of cancelled request"");
          return;"
666,invokeWaspRequest,"  private Object invokeWaspRequest(Object proxy, final Method method, final Object[] args) {
    return invokeCallbackRequest(proxy, method, args);
  }"
667,call,"      public void call(final Subscriber<? super Object> subscriber) {
        try {
          RequestCreator requestCreator = new RequestCreator.Builder(methodInfo, args, endPoint)"
668,invokeObservable,"  private Object invokeObservable(final Method method, final Object[] args) {
    final MethodInfo methodInfo = methodInfoCache.get(method.getName());

    return Observable.create(new Observable.OnSubscribe<Object>() {"
671,fillMethods,"  private void fillMethods(List<Method> methods) {
    for (Method method : methods) {
      MethodInfo methodInfo = MethodInfo.newInstance(context, method);"
675,newInstance,"  public static NetworkHandler newInstance(Class<?> service, Wasp.Builder builder) {
    return new NetworkHandler(service, builder);
  }"
677,run,"      public void run() {
        if (statusCode < 200 || statusCode > 299) {
          waspCallback.onError(new WaspError(waspResponse, ""Mock error message!""));
          return;"
682,createListObject,"  private static List createListObject(ParameterizedType type) {

    Class rawType = (Class) type.getRawType();
    Type[] genericTypes = type.getActualTypeArguments();
    List listObject;

    if (rawType.isInterface()) {
      listObject = new ArrayList(MOCK_LIST_COUNT);"
683,generateValue,"  private static Object generateValue(Class<?> rawType) {

    if (String.class.isAssignableFrom(rawType)) {
      return ""test"";
    } else if (int.class.isAssignableFrom(rawType) || Integer.class.isAssignableFrom(rawType)) {"
685,populateObject,"  private static <T> T populateObject(T object) {
    Class clazz = object.getClass();

    while (clazz != null) {
      String name = clazz.getName();"
686,instantiateObject,"  public static <T> T instantiateObject(Class<T> rawType) {
    try {
      Constructor<?> constructor = rawType.getDeclaredConstructor();
      if (!constructor.isAccessible()) {"
687,createMockObject,"  public static <T> T createMockObject(Type type) {
    Class<T> rawType;

    if (type instanceof ParameterizedType) {
      rawType = (Class<T>) ((ParameterizedType) type).getRawType();
    } else if (type instanceof Class) {"
688,readMockResponse,"  public static String readMockResponse(Context context, String filePath) {

    String responseString;
    try {
      responseString = IOUtils.readFileFromAssets(context, filePath);
    } catch (IOException e) {"
691,isAuthTokenEnabled,"  boolean isAuthTokenEnabled() {
    return isAuthTokenEnabled;
  }"
697,isMocked,"  boolean isMocked() {
    return mock != null;
  }"
702,methodError,"  private RuntimeException methodError(String message, Object... args) {
    if (args.length > 0) {
      message = String.format(message, args);
    }"
706,parseObservableResponseObjectType,"  private void parseObservableResponseObjectType() {
    Type type = method.getGenericReturnType();
    Class rawType = RetroTypes.getRawType(type);
    Type returnType = RetroTypes.getSupertype(type, rawType, Observable.class);
    responseObjectType = getParameterUpperBound((ParameterizedType) returnType);
  }"
708,addHeaders,"  private void addHeaders(String[] values) {
    for (String header : values) {
      String[] strings = header.split("":"");"
709,parseMethodAnnotations,"  private void parseMethodAnnotations() {
    Annotation[] annotations = method.getAnnotations();
    for (Annotation annotation : annotations) {
      Class<? extends Annotation> annotationType = annotation.annotationType();"
710,newInstance,"  static MethodInfo newInstance(Context context, Method method) {
    return new MethodInfo(context, method);
  }"
711,init,"  synchronized void init() {
    parseMethodAnnotations();
    parseReturnType();
    parseParamAnnotations();
  }"
712,logChunk,"  private static void logChunk(int logType, String chunk) {
    switch (logType) {
      case Log.ERROR:"
714,wtf,"  public static void wtf(String message) {
    log(Log.ASSERT, message);
  }"
715,v,"  public static void v(String message) {
    log(Log.VERBOSE, message);
  }"
716,i,"  public static void i(String message) {
    log(Log.INFO, message);
  }"
717,w,"  public static void w(String message) {
    log(Log.WARN, message);
  }"
718,e,"  public static void e(String message) {
    log(Log.ERROR, message);
  }"
719,d,"  public static void d(String message) {
    log(Log.DEBUG, message);
  }"
721,assetsFileExists,"  public static boolean assetsFileExists(Context context, String filePath) {
    if (TextUtils.isEmpty(filePath)) {
      return false;
    }
    try {"
722,cancel,"  public void cancel() {
    cancelled = true;
  }"
723,isCancelled,"  public boolean isCancelled() {
    return cancelled;
  }"
725,requestImage,"    void requestImage(ImageCreator waspImageCreator, int maxWidth, int maxHeight,
                      InternalCallback<Container> waspCallback);"
727,putBitmap,"    void putBitmap(String url, Bitmap bitmap);
"
730,clearCache,"  public void clearCache() {
    if (imageCache == null) {
      return;
    }"
731,initImageView,"  private void initImageView(ImageCreator waspImageCreator) {
    int defaultImage = waspImageCreator.getDefaultImage();
    ImageView imageView = waspImageCreator.getImageView();
    if (defaultImage != 0) {
      imageView.setImageResource(defaultImage);
      return;"
732,onError,"      public void onError(WaspError error) {
        int errorImage = imageCreator.getErrorImage();
        if (errorImage != 0) {
          imageView.setImageResource(errorImage);
        }"
735,load,"  public void load(ImageCreator imageCreator) {
    checkMain();
    loadImage(imageCreator);
  }"
739,load,"  void load(ImageCreator waspImageCreator);
"
742,load,"    public void load() {
      new ImageCreator(this).load();
    }"
746,to,"    public Builder to(ImageView imageView) {
      if (imageView == null) {
        throw new NullPointerException(""ImageView cannot be null"");
      }
      this.imageView = imageView;"
747,from,"    Builder from(String url) {
      this.url = url;
      return this;
    }"
749,logError,"  public void logError(String message, long networkTime) {
    switch (logLevel) {
      case FULL:"
750,logSuccess,"  public void logSuccess(Bitmap bitmap) {
    switch (logLevel) {
      case FULL:"
751,logRequest,"  public void logRequest() {
    switch (logLevel) {
      case FULL:"
752,load,"  void load() {
    imageHandler.load(this);
  }"
757,options,"  public NanoHTTPD.Response options(NanoHTTPD.IHTTPSession session);
"
758,delete,"  public NanoHTTPD.Response delete(NanoHTTPD.IHTTPSession session);
"
759,head,"  public NanoHTTPD.Response head(NanoHTTPD.IHTTPSession session);
"
760,patch,"  public NanoHTTPD.Response patch(NanoHTTPD.IHTTPSession session);
"
761,put,"  public NanoHTTPD.Response put(NanoHTTPD.IHTTPSession session);
"
762,post,"  public NanoHTTPD.Response post(NanoHTTPD.IHTTPSession session);
"
763,get,"  public NanoHTTPD.Response get(NanoHTTPD.IHTTPSession session);
"
764,toJson,"  public static String toJson(Map<String, Object> map) {
    StringBuilder builder = new StringBuilder();
    builder.append(""{"");
    Iterator<Map.Entry<String, Object>> iterator = map.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry<String, Object> entry = iterator.next();
      String key = entry.getKey();
      Object value = entry.getValue();"
767,clearCache,"  public void clearCache() {
    clearAll();
  }"
768,putBitmap,"  public void putBitmap(String url, Bitmap bitmap) {
    put(url, bitmap);
  }"
770,isFilterEnabled,"  public boolean isFilterEnabled() {
    return filterEnabled;
  }"
773,destroyInstance,"    public static void destroyInstance() {
        INSTANCE = null;
    }"
777,d2p,"    static int d2p(Context var0, float var1) {
        DisplayMetrics var2 = var0.getResources().getDisplayMetrics();
        return (int) TypedValue.applyDimension(1, var1, var2);
    }"
780,describeContents,"    public int describeContents() {
        return 0;
    }"
813,newArray,"        public UserInfo[] newArray(int size) {
            return new UserInfo[size];
        }"
814,createFromParcel,"        public UserInfo createFromParcel(Parcel in) {
            return new UserInfo(in);
        }"
815,listIntegral,"    ApiCall<RankListRes> listIntegral(@Path(""page"") int page);
"
817,listScoreRank,"    ApiCall<RankListRes> listScoreRank(@Path(""page"") int page);
"
823,isUserControlSetTop,"        public boolean isUserControlSetTop() {
            return userControlSetTop;
        }"
839,isUserControlSetTop,"    public boolean isUserControlSetTop() {
        return userControlSetTop;
    }"
854,listNavis,"    ApiCall<List<TreeListRes>> listNavis();
"
855,listTrees,"    ApiCall<List<TreeListRes>> listTrees();
"
859,simpleDateFormat,"    public static String simpleDateFormat(String format, Date date) {
        if (TextUtils.isEmpty(format)) {
            format = ""yyyy-MM-dd HH:mm:ss SSS"";
        }
        String content = new SimpleDateFormat(format).format(date);"
866,execute,"                public void execute(@NonNull Runnable command) {
                    runOnUiThread(command);
                }"
871,onDone,"        protected void onDone() {
            TASK_POOL_MAP.remove(this);
            if (mTimer != null) {
                mTimer.cancel();"
876,isDone,"        public boolean isDone() {
            return state.get() > RUNNING;
        }"
877,isCanceled,"        public boolean isCanceled() {
            return state.get() >= CANCELLED;
        }"
878,timeout,"        private void timeout() {
            synchronized (state) {
                if (state.get() > RUNNING) return;
                state.set(TIMEOUT);
            }"
879,run,"                public void run() {
                    onCancel();
                    onDone();
                }"
880,cancel,"        public void cancel(boolean mayInterruptIfRunning) {
            synchronized (state) {
                if (state.get() > RUNNING) return;
                state.set(CANCELLED);
            }"
881,cancel,"        public void cancel() {
            cancel(true);
        }"
882,run,"                    public void run() {
                        onFail(throwable);
                        onDone();
                    }"
883,run,"                        public void run() {
                            onSuccess(result);
                            onDone();
                        }"
884,run,"                        public void run() {
                            onSuccess(result);
                        }"
885,run,"                        public void run() {
                            if (!isDone() && mTimeoutListener != null) {
                                timeout();"
886,run,"        public void run() {
            if (isSchedule) {
                if (runner == null) {
                    if (!state.compareAndSet(NEW, RUNNING)) return;"
887,onFail,"        public abstract void onFail(Throwable t);
"
889,onSuccess,"        public abstract void onSuccess(T result);
"
890,doInBackground,"        public abstract T doInBackground() throws Throwable;
"
891,onFail,"        public void onFail(Throwable t) {
            Log.e(""ThreadUtils"", ""onFail: "", t);
        }"
892,onCancel,"        public void onCancel() {
            Log.e(""ThreadUtils"", ""onCancel: "" + Thread.currentThread());
        }"
893,uncaughtException,"                public void uncaughtException(Thread t, Throwable e) {
                    System.out.println(e);
                }"
894,run,"                public void run() {
                    try {
                        super.run();"
897,execute,"        public void execute(@NonNull Runnable command) {
            if (this.isShutdown()) return;
            mSubmittedCount.incrementAndGet();
            try {
                super.execute(command);"
898,afterExecute,"        protected void afterExecute(Runnable r, Throwable t) {
            mSubmittedCount.decrementAndGet();
            super.afterExecute(r, t);
        }"
900,createPool,"        private static ExecutorService createPool(final int type, final int priority) {
            switch (type) {
                case TYPE_SINGLE:"
903,run,"                public void run() {
                    pool.execute(task);
                }"
904,run,"                    public void run() {
                        pool.execute(task);
                    }"
905,execute,"    private static <T> void execute(final ExecutorService pool, final Task<T> task,
                                    long delay, final long period, final TimeUnit unit) {
        synchronized (TASK_POOL_MAP) {
            if (TASK_POOL_MAP.get(task) != null) {"
906,executeAtFixedRate,"    private static <T> void executeAtFixedRate(final ExecutorService pool,
                                               final Task<T> task,
                                               long delay,"
907,executeWithDelay,"    private static <T> void executeWithDelay(final ExecutorService pool,
                                             final Task<T> task,
                                             final long delay,"
908,execute,"    private static <T> void execute(final ExecutorService pool, final Task<T> task) {
        execute(pool, task, 0, 0, null);
    }"
910,cancel,"    public static void cancel(ExecutorService executorService) {
        if (executorService instanceof ThreadPoolExecutor4Util) {
            for (Map.Entry<Task, ExecutorService> taskTaskInfoEntry : TASK_POOL_MAP.entrySet()) {"
911,cancel,"    public static void cancel(final List<Task> tasks) {
        if (tasks == null || tasks.size() == 0) return;
        for (Task task : tasks) {
            if (task == null) continue;"
912,cancel,"    public static void cancel(final Task... tasks) {
        if (tasks == null || tasks.length == 0) return;
        for (Task task : tasks) {
            if (task == null) continue;"
913,cancel,"    public static void cancel(final Task task) {
        if (task == null) return;
        task.cancel();
    }"
914,executeByCustomAtFixRate,"    public static <T> void executeByCustomAtFixRate(final ExecutorService pool,
                                                    final Task<T> task,
                                                    long initialDelay,"
915,executeByCustomAtFixRate,"    public static <T> void executeByCustomAtFixRate(final ExecutorService pool,
                                                    final Task<T> task,
                                                    final long period,"
916,executeByCustomWithDelay,"    public static <T> void executeByCustomWithDelay(final ExecutorService pool,
                                                    final Task<T> task,
                                                    final long delay,"
917,executeByCustom,"    public static <T> void executeByCustom(final ExecutorService pool, final Task<T> task) {
        execute(pool, task);
    }"
918,executeByCpuAtFixRate,"    public static <T> void executeByCpuAtFixRate(final Task<T> task,
                                                 long initialDelay,
                                                 final long period,"
920,executeByCpuAtFixRate,"    public static <T> void executeByCpuAtFixRate(final Task<T> task,
                                                 final long period,
                                                 final TimeUnit unit,"
921,executeByCpuAtFixRate,"    public static <T> void executeByCpuAtFixRate(final Task<T> task,
                                                 final long period,
                                                 final TimeUnit unit) {"
922,executeByCpuWithDelay,"    public static <T> void executeByCpuWithDelay(final Task<T> task,
                                                 final long delay,
                                                 final TimeUnit unit,"
923,executeByCpuWithDelay,"    public static <T> void executeByCpuWithDelay(final Task<T> task,
                                                 final long delay,
                                                 final TimeUnit unit) {"
924,executeByCpu,"    public static <T> void executeByCpu(final Task<T> task,
                                        @IntRange(from = 1, to = 10) final int priority) {
        execute(getPoolByTypeAndPriority(TYPE_CPU, priority), task);"
925,executeByCpu,"    public static <T> void executeByCpu(final Task<T> task) {
        execute(getPoolByTypeAndPriority(TYPE_CPU), task);
    }"
926,executeByIoAtFixRate,"    public static <T> void executeByIoAtFixRate(final Task<T> task,
                                                long initialDelay,
                                                final long period,"
928,executeByIoAtFixRate,"    public static <T> void executeByIoAtFixRate(final Task<T> task,
                                                final long period,
                                                final TimeUnit unit,"
929,executeByIoAtFixRate,"    public static <T> void executeByIoAtFixRate(final Task<T> task,
                                                final long period,
                                                final TimeUnit unit) {"
930,executeByIoWithDelay,"    public static <T> void executeByIoWithDelay(final Task<T> task,
                                                final long delay,
                                                final TimeUnit unit,"
931,executeByIoWithDelay,"    public static <T> void executeByIoWithDelay(final Task<T> task,
                                                final long delay,
                                                final TimeUnit unit) {"
932,executeByIo,"    public static <T> void executeByIo(final Task<T> task,
                                       @IntRange(from = 1, to = 10) final int priority) {
        execute(getPoolByTypeAndPriority(TYPE_IO, priority), task);"
933,executeByIo,"    public static <T> void executeByIo(final Task<T> task) {
        execute(getPoolByTypeAndPriority(TYPE_IO), task);
    }"
934,executeByCachedAtFixRate,"    public static <T> void executeByCachedAtFixRate(final Task<T> task,
                                                    long initialDelay,
                                                    final long period,"
936,executeByCachedAtFixRate,"    public static <T> void executeByCachedAtFixRate(final Task<T> task,
                                                    final long period,
                                                    final TimeUnit unit,"
937,executeByCachedAtFixRate,"    public static <T> void executeByCachedAtFixRate(final Task<T> task,
                                                    final long period,
                                                    final TimeUnit unit) {"
938,executeByCachedWithDelay,"    public static <T> void executeByCachedWithDelay(final Task<T> task,
                                                    final long delay,
                                                    final TimeUnit unit,"
939,executeByCachedWithDelay,"    public static <T> void executeByCachedWithDelay(final Task<T> task,
                                                    final long delay,
                                                    final TimeUnit unit) {"
940,executeByCached,"    public static <T> void executeByCached(final Task<T> task,
                                           @IntRange(from = 1, to = 10) final int priority) {
        execute(getPoolByTypeAndPriority(TYPE_CACHED, priority), task);"
941,executeByCached,"    public static <T> void executeByCached(final Task<T> task) {
        execute(getPoolByTypeAndPriority(TYPE_CACHED), task);
    }"
942,executeBySingleAtFixRate,"    public static <T> void executeBySingleAtFixRate(final Task<T> task,
                                                    long initialDelay,
                                                    final long period,"
944,executeBySingleAtFixRate,"    public static <T> void executeBySingleAtFixRate(final Task<T> task,
                                                    final long period,
                                                    final TimeUnit unit,"
945,executeBySingleAtFixRate,"    public static <T> void executeBySingleAtFixRate(final Task<T> task,
                                                    final long period,
                                                    final TimeUnit unit) {"
946,executeBySingleWithDelay,"    public static <T> void executeBySingleWithDelay(final Task<T> task,
                                                    final long delay,
                                                    final TimeUnit unit,"
947,executeBySingleWithDelay,"    public static <T> void executeBySingleWithDelay(final Task<T> task,
                                                    final long delay,
                                                    final TimeUnit unit) {"
948,executeBySingle,"    public static <T> void executeBySingle(final Task<T> task,
                                           @IntRange(from = 1, to = 10) final int priority) {
        execute(getPoolByTypeAndPriority(TYPE_SINGLE, priority), task);"
949,executeBySingle,"    public static <T> void executeBySingle(final Task<T> task) {
        execute(getPoolByTypeAndPriority(TYPE_SINGLE), task);
    }"
950,executeByFixedAtFixRate,"    public static <T> void executeByFixedAtFixRate(@IntRange(from = 1) final int size,
                                                   final Task<T> task,
                                                   long initialDelay,"
952,executeByFixedAtFixRate,"    public static <T> void executeByFixedAtFixRate(@IntRange(from = 1) final int size,
                                                   final Task<T> task,
                                                   final long period,"
954,executeByFixedWithDelay,"    public static <T> void executeByFixedWithDelay(@IntRange(from = 1) final int size,
                                                   final Task<T> task,
                                                   final long delay,"
956,executeByFixed,"    public static <T> void executeByFixed(@IntRange(from = 1) final int size,
                                          final Task<T> task,
                                          @IntRange(from = 1, to = 10) final int priority) {"
957,executeByFixed,"    public static <T> void executeByFixed(@IntRange(from = 1) final int size, final Task<T> task) {
        execute(getPoolByTypeAndPriority(size), task);
    }"
966,getFixedPool,"    public static ExecutorService getFixedPool(@IntRange(from = 1) final int size,
                                               @IntRange(from = 1, to = 10) final int priority) {
        return getPoolByTypeAndPriority(size, priority);"
968,runOnUiThreadDelayed,"    public static void runOnUiThreadDelayed(final Runnable runnable, long delayMillis) {
        HANDLER.postDelayed(runnable, delayMillis);
    }"
971,isMainThread,"    public static boolean isMainThread() {
        return Looper.myLooper() == Looper.getMainLooper();
    }"
972,apply,"        public static void apply(SharedPreferences.Editor editor) {
            try {
                if (sApplyMethod != null) {
                    sApplyMethod.invoke(editor);"
973,findApplyMethod,"        private static Method findApplyMethod() {
            try {
                Class clz = SharedPreferences.Editor.class;
                return clz.getMethod(""apply"");"
975,contains,"    public static boolean contains(Context context, String key) {
        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,
                Context.MODE_PRIVATE);
        return sp.contains(key);"
976,clear,"    public static void clear(Context context) {
        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,
                Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();
        editor.clear();
        SharedPreferencesCompat.apply(editor);"
977,remove,"    public static void remove(Context context, String key) {
        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,
                Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();
        editor.remove(key);
        SharedPreferencesCompat.apply(editor);"
978,get,"    public static Object get(Context context, String key, Object defaultObject) {
        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,
                Context.MODE_PRIVATE);

        if (defaultObject instanceof String) {"
979,put,"    public static void put(Context context, String key, Object object) {

        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,
                Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();
"
980,onError,"            public void onError(@NonNull Throwable t) {
"
981,onSuccess,"            public void onSuccess(@NonNull ApiResponse<List<ProjectListRes>> response) {
                projectListLiveData().postValue(response.getData());
            }"
982,onStart,"            public void onStart() {
            }"
983,listProjectsTab,"    public void listProjectsTab() {
        model.listProjectsTab(new ApiCallback<List<ProjectListRes>>() {
            @Override"
984,projectListLiveData,"    public MutableLiveData<List<ProjectListRes>> projectListLiveData() {
        if (projectListLiveData == null) {
            projectListLiveData = new MutableLiveData<>();
        }"
985,listProjectsTab,"    public void listProjectsTab(ApiCallback<List<ProjectListRes>> callback) {
        ApiUtil.getProjectApi().listProjectsTab().enqueue(callback);
    }"
986,initVariableId,"    public int initVariableId() {
        return BR.viewModel;
    }"
987,initContentView,"    public int initContentView(Bundle savedInstanceState) {
        return R.layout.ac_splash_layout;
    }"
988,initViews,"    public void initViews() {
        super.initViews();
        viewModel.projectListLiveData().observe(this, projectListRes -> {
            if (projectListRes.size() > 0) {
                MMkvHelper.getInstance().saveProjectTabs(projectListRes);
            }
        });"
989,onTouchEvent,"    public boolean onTouchEvent(MotionEvent motionEvent) {
        if (!enable) {
            return super.onTouchEvent(motionEvent);
        }

        float currentX = motionEvent.getRawX();"
990,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
        if (!enable) {
            return false;
        }
"
992,onBack,"    private void onBack() {
        if (onSlide == null) {
            Utils.getActivityContext(getContext()).onBackPressed();"
993,attachToActivity,"    SlideControlLayout attachToActivity(@NonNull Activity activity) {
        ViewParent parent = getParent();
        if (parent instanceof ViewGroup) {
            ((ViewGroup) parent).removeView(this);
        }
        ViewGroup decor = (ViewGroup) activity.getWindow().getDecorView();
"
994,onDetachedFromWindow,"    protected void onDetachedFromWindow() {
        cancelAnim();
        if (rate != 0) {
            rate = 0;
            invalidate();"
995,cancelAnim,"    private void cancelAnim() {
        if (animator != null && animator.isRunning()) {
            animator.cancel();"
997,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        slideView.onDraw(canvas, rate);
    }"
1000,attachToActivity,"    public SlideControlLayout attachToActivity(@NonNull Activity activity) {
        if (slideView == null) {
            slideView = new DefaultSlideView(activity);
        }
"
1001,onSlide,"    public SlideBack onSlide(OnSlide onSlide) {
        this.onSlide = onSlide;
        return this;
    }"
1002,canSlideWidth,"    public SlideBack canSlideWidth(int canSlideWidth) {
        this.canSlideWidth = canSlideWidth;
        return this;
    }"
1003,slideView,"    public SlideBack slideView(ISlideView slideView) {
        this.slideView = slideView;
        return this;
    }"
1004,create,"    public static SlideBack create() {
        return new SlideBack();
    }"
1009,run,"            public void run() {
                if (listener != null) {
                    listener.onGetSize(view);"
1010,forceGetViewSize,"    public static void forceGetViewSize(final View view, final OnGetSizeListener listener) {
        view.post(new Runnable() {
            @Override"
1011,applyDimension,"    public static float applyDimension(final float value, final int unit) {
        DisplayMetrics metrics = Resources.getSystem().getDisplayMetrics();
        switch (unit) {
            case TypedValue.COMPLEX_UNIT_PX:
                return value;"
1012,px2sp,"    public static int px2sp(final float pxValue) {
        final float fontScale = Resources.getSystem().getDisplayMetrics().scaledDensity;
        return (int) (pxValue / fontScale + 0.5f);
    }"
1013,sp2px,"    public static int sp2px(final float spValue) {
        final float fontScale = Resources.getSystem().getDisplayMetrics().scaledDensity;
        return (int) (spValue * fontScale + 0.5f);
    }"
1014,px2dp,"    public static int px2dp(final float pxValue) {
        final float scale = Resources.getSystem().getDisplayMetrics().density;
        return (int) (pxValue / scale + 0.5f);
    }"
1015,dp2px,"    public static int dp2px(final float dpValue) {
        final float scale = Resources.getSystem().getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);
    }"
1022,onAnimationEnd,"            public void onAnimationEnd(Animator animator) {
                shineButton.removeView(ShineView.this);
            }"
1023,onAnimationEnd,"            public void onAnimationEnd(Animator animator) {
                clickValue = 0;
                invalidate();
            }"
1024,onAnimationUpdate,"            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                clickValue = (float) valueAnimator.getAnimatedValue();
                invalidate();
            }"
1025,onCheckedChanged,"        void onCheckedChanged(View view, boolean checked);
    }"
1026,onClick,"        public void onClick(View view) {
            if (!isChecked) {
                isChecked = true;
                showAnim();
            } else {"
1028,calPixels,"    private void calPixels() {
        if (activity != null && metrics != null) {
            activity.getWindowManager().getDefaultDisplay().getMetrics(metrics);"
1029,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    }"
1030,onAnimationCancel,"            public void onAnimationCancel(Animator animator) {
                setSrcColor(btnColor);
            }"
1031,onAnimationEnd,"            public void onAnimationEnd(Animator animator) {
                setSrcColor(isChecked ? btnFillColor : btnColor);
            }"
1032,onAnimationStart,"            public void onAnimationStart(Animator animator) {
                setSrcColor(btnFillColor);
            }"
1033,onAnimationUpdate,"            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                setScaleX((float) valueAnimator.getAnimatedValue());
                setScaleY((float) valueAnimator.getAnimatedValue());
            }"
1036,removeView,"    public void removeView(View view) {
        if (activity != null) {
            final ViewGroup rootView = (ViewGroup) activity.findViewById(Window.ID_ANDROID_CONTENT);"
1037,showAnim,"    public void showAnim() {
        if (activity != null) {
            shineView = new ShineView(activity, this, shineParams);"
1038,onAttachedToWindow,"    protected void onAttachedToWindow() {
        super.onAttachedToWindow();
"
1039,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        calPixels();
    }"
1040,init,"    public void init(Activity activity) {
        this.activity = activity;
        onButtonClickListener = new OnButtonClickListener();
        setOnClickListener(onButtonClickListener);
"
1049,enableFlashing,"    public void enableFlashing(boolean enable) {
        shineParams.enableFlashing = enable;
    }"
1055,onListenerUpdate,"    private void onListenerUpdate(boolean checked) {
        if (listener != null) {
            listener.onCheckedChanged(this, checked);"
1061,isChecked,"    public boolean isChecked() {
        return isChecked;
    }"
1067,startAnim,"    void startAnim() {
        start();
    }"
1078,launchLogin,"    public static void launchLogin() {
        ARouter.getInstance().build(RouterActivityPath.Login.PAGER_LOGIN).navigation();
    }"
1079,launchArticleList,"    public static void launchArticleList(String id, String title) {
        ARouter.getInstance().build(RouterActivityPath.Square.PAGER_SQUARE_LIST).withString(""id"", id).withString(""title"", title).navigation();
    }"
1080,launchWeb,"    public static void launchWeb(String webUrl) {
        ARouter.getInstance().build(RouterActivityPath.Web.PAGER_WEB).withString(""webUrl"", webUrl).navigation();
    }"
1081,launchMain,"    public static void launchMain() {
        ARouter.getInstance().build(RouterActivityPath.Main.PAGER_MAIN).navigation();
    }"
1082,canRetry,"    private boolean canRetry(Wrapper wrapper) {
        return (wrapper.throwable instanceof ConnectException || wrapper.throwable instanceof SocketTimeoutException ||
                wrapper.throwable instanceof UnknownHostException ||"
1083,apply,"                    public Wrapper apply(Throwable throwable, Integer integer)
                            throws Exception {
                        return new Wrapper(throwable, integer);"
1085,apply,"    public Observable apply(Observable<Throwable> throwableObservable) {
        return throwableObservable.zipWith(Observable.range(1, retryCount + 1),
                new BiFunction<Throwable, Integer, Wrapper>() {"
1088,initRetrofitWithLiveData,"    private Retrofit initRetrofitWithLiveData(String baseURL,OkHttpClient client) {
        return new Retrofit.Builder()
                .client(client)"
1089,create,"    public <T> T create(String baseURL, Class<T> service) {
        return initRetrofitWithLiveData(baseURL, initOkHttp()).create(service);
    }"
1093,initRetrofit,"    private Retrofit initRetrofit(String baseURL, OkHttpClient client) {
        return new Retrofit.Builder()
                .client(client)"
1094,create,"    public <T> T create(String baseURL, Class<T> service) {
        return initRetrofit(baseURL, initOkHttp()).create(service);
    }"
1106,isOver,"    public boolean isOver() {
        return over;
    }"
1165,listProjects,"    ApiCall<ArticleListRes> listProjects(@Path(""page"") int page, @Query(""cid"") String id);
"
1166,listProjectsTab,"    ApiCall<List<ProjectListRes>> listProjectsTab();
"
1167,run,"                public void run() {
                    loadService.showSuccess();
                }"
1169,postSuccessDelayed,"        public static void postSuccessDelayed(final LoadService loadService) {
            postSuccessDelayed(loadService, DELAY_TIME);
        }"
1170,run,"                public void run() {
                    loadService.showCallback(clazz);
                }"
1172,postCallbackDelayed,"        public static void postCallbackDelayed(final LoadService loadService, final Class<? extends Callback> clazz) {
            postCallbackDelayed(loadService, clazz, DELAY_TIME);
        }"
1173,configureBitmapBounds,"    private void configureBitmapBounds(int viewWidth, int viewHeight) {
        drawMatrix = null;
        int drawableWidth = shape.getIntrinsicWidth();
        int drawableHeight = shape.getIntrinsicHeight();
        boolean fits = viewWidth == drawableWidth && viewHeight == drawableHeight;

        if (drawableWidth > 0 && drawableHeight > 0 && !fits) {"
1174,paintMaskCanvas,"    protected void paintMaskCanvas(Canvas maskCanvas, Paint maskPaint, int width, int height) {
        if(shape != null) {
            if (shape instanceof BitmapDrawable) {"
1176,setup,"    private void setup(Context context, AttributeSet attrs, int defStyle) {
        if(attrs != null){
            TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.PorterImageView, defStyle, 0);
            shape = typedArray.getDrawable(R.styleable.PorterImageView_siShape);"
1177,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        if (widthMeasureSpec == 0) {
            widthMeasureSpec = 50;
        }
        if (heightMeasureSpec == 0) {"
1178,onDraw,"    protected void onDraw(Canvas canvas) {
        if (!isInEditMode()) {
            int saveCount = canvas.saveLayer(0.0f, 0.0f, getWidth(), getHeight(), null, Canvas.ALL_SAVE_FLAG);"
1179,paintMaskCanvas,"    protected abstract void paintMaskCanvas(Canvas maskCanvas, Paint maskPaint, int width, int height);
"
1180,createMaskCanvas,"    private void createMaskCanvas(int width, int height, int oldw, int oldh) {
        boolean sizeChanged = width != oldw || height != oldh;
        boolean isValid = width > 0 && height > 0;
        if(isValid && (maskCanvas == null || sizeChanged)) {
            maskCanvas = new Canvas();"
1181,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        createMaskCanvas(w, h, oldw, oldh);
    }"
1182,invalidate,"    public void invalidate() {
        invalidated = true;
        super.invalidate();
    }"
1185,hashCode,"    public int hashCode() {
        int result = actualTypeArguments != null ? Arrays.hashCode(actualTypeArguments) : 0;
        result = 31 * result + (ownerType != null ? ownerType.hashCode() : 0);
        result = 31 * result + (rawType != null ? rawType.hashCode() : 0);
        return result;
    }"
1190,isZeroPage,"    public boolean isZeroPage() {
        return zeroPage == 0;
    }"
1191,resetZero,"    public void resetZero() {
        zeroPage = 0;
    }"
1192,nextZeroPage,"    public void nextZeroPage() {
        zeroPage++;
    }"
1193,isFirstPage,"    public boolean isFirstPage() {
        return page == 1;
    }"
1194,reset,"    public void reset() {
        page = 1;
    }"
1195,nextPage,"    public void nextPage() {
        page++;
    }"
1199,cancel,"    public void cancel(int notifyId) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            notificationManager.cancel(notifyId);"
1200,completeProgress,"    public void completeProgress(String title, String content) {
        notifyProgress(0, 0, title, content);
    }"
1201,notifyProgress,"    public void notifyProgress(int max, int progress, String title, String content) {
        if (builder != null && progress > 0) {
            builder.setContentTitle(title);"
1204,notify,"    private void notify(NotificationCompat.Builder builder) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            getNotificationManager();"
1205,notified,"    public void notified(Intent intent) {
        PendingIntent pendingIntent = PendingIntent.getActivity(getApplicationContext(), 0, intent, 0);
        notify(builder.setContentIntent(pendingIntent));
    }"
1206,notified,"    public void notified() {
        notify(builder);
    }"
1210,baseNotification,"    private void baseNotification() {
        builder = getBuilder(getApplicationContext(), channelId)
                .setSmallIcon(smallIcon)"
1211,uncaughtException,"        void uncaughtException(Thread t, Throwable e);
    }"
1213,run,"            public void run() {
                for (; ; ) {
                    try {"
1215,init,"    public static void init(CrashHandler crashHandler) {
        getInstance().setCrashHandler(crashHandler);
    }"
1219,onNext,"    public void onNext(@NonNull T t) {
        try {
            if (mCallback != null) {"
1220,onSubscribe,"    public void onSubscribe(@NonNull Disposable d) {
        if (mCallback != null) {
            mCallback.onSubscribe(d);"
1221,onSubscribe,"    protected void onSubscribe(@NonNull Disposable d) {
    }"
1222,onError,"    protected void onError(String msg) {
    }"
1223,onFail,"    protected void onFail(T response) {
    }"
1224,onSuccess,"    protected void onSuccess(T response) {
    }"
1226,run,"                public void run() {
                    mToast.cancel();
                    timer.cancel();
                }"
1227,run,"                public void run() {
                    mToast.show();
                }"
1228,show,"    public void show() {
        if (mToast != null) {
            mToast.setGravity(Gravity.CENTER,0,0);"
1229,makeText,"    public static MyToast makeText(Context context, CharSequence text) {
        return new MyToast(context, text);
    }"
1234,w,"    public static void w(String message) {
        if (!isDebuggable())
            return;
        getMethodNames(new Throwable().getStackTrace());
        Log.w(className, createLog(message));"
1235,v,"    public static void v(String message) {
        if (!isDebuggable())
            return;
        getMethodNames(new Throwable().getStackTrace());
        Log.v(className, createLog(message));"
1236,d,"    public static void d(String message) {
        if (!isDebuggable())
            return;
        getMethodNames(new Throwable().getStackTrace());
        Log.d(className, createLog(message));"
1237,i,"    public static void i(String message) {
        if (!isDebuggable())
            return;
        getMethodNames(new Throwable().getStackTrace());
        Log.i(className,createLog(message));"
1238,e,"    public static void e(String message) {
        if (!isDebuggable())
            return;
        getMethodNames(new Throwable().getStackTrace());
        Log.e(className, createLog(message));"
1240,createLog,"    private static String createLog(String log) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(""=="").append(methodName);
        buffer.append(""("").append(className).append("":"").append(lineNumber).append("")==:"");
        buffer.append(log);
        return buffer.toString();
    }"
1241,isDebuggable,"    public static boolean isDebuggable() {
        return BuildConfig.DEBUG;
    }"
1243,register,"    ApiCall<UserInfo> register(@Field(""username"") String username, @Field(""password"") String password, @Field(""repassword"") String repassword);
"
1244,login,"    ApiCall<UserInfo> login(@Field(""username"") String username, @Field(""password"") String password);
"
1245,onReloadEvent,"    protected boolean onReloadEvent(Context context, View view) {
        return true;
    }"
1246,onDetach,"    public void onDetach() {
        super.onDetach();
    }"
1247,onAttach,"    public void onAttach(Context context, View view) {
        super.onAttach(context, view);
    }"
1249,onCreateView,"    protected int onCreateView() {
        return R.layout.base_layout_loading;
    }"
1252,onResponse,"                    public void onResponse(Call<T> call, Response<T> response) {
                        T body = response.body();
                        postValue(body);
                    }"
1254,adapt,"    public LiveData<T> adapt(Call<T> call) {
        return new MyLiveData<T>(call, isApiResponse);
    }"
1255,responseType,"    public Type responseType() {
        return mResponseType;
    }"
1256,updateResources,"    private static Context updateResources(Context context, Locale locale) {
        Resources resources = context.getResources();
        Configuration configuration = resources.getConfiguration();
        configuration.setLocale(locale);
        configuration.setLocales(new LocaleList(locale));
        return context.createConfigurationContext(configuration);
    }"
1257,attachBaseContext,"    public static Context attachBaseContext(Context context) {
        Locale locale = LanguageUtil.getCurrentLanguage();
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            return updateResources(context, locale);"
1259,changeLanguage,"    private static void changeLanguage(Locale locale) {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
            LanguageUtil.setConfiguration(AppProvider.getInstance().getApp(), locale);
        }"
1260,switchLanguage,"    public static void switchLanguage(Locale locale) {
        changeLanguage(locale);
    }"
1261,switchEnglish,"    public static void switchEnglish() {
        changeLanguage(Locale.US);
    }"
1262,switchChinese,"    public static void switchChinese() {
        changeLanguage(Locale.SIMPLIFIED_CHINESE);
    }"
1265,onDraw,"        void onDraw(Canvas canvas, float currentWidth);
    }"
1270,toggleSoftInput,"    private static void toggleSoftInput(View view) {
        try {
            view.setFocusable(true);"
1271,showSoftInput,"    public static void showSoftInput(View view){
        new Handler().postDelayed(() -> {
            toggleSoftInput(view);"
1272,hideInputMethod,"    public static void hideInputMethod(EditText editText, Context context) {
        InputMethodManager imm = (InputMethodManager) context.getApplicationContext().getSystemService(Context.INPUT_METHOD_SERVICE);
        try {
            imm.hideSoftInputFromWindow(editText.getWindowToken(), InputMethodManager.RESULT_UNCHANGED_SHOWN);"
1273,hideInputMethod,"    public static void hideInputMethod(Activity activity) {
        View a = activity.getCurrentFocus();
        if (a != null) {
            InputMethodManager imm = (InputMethodManager) activity.getApplicationContext().getSystemService(Context.INPUT_METHOD_SERVICE);"
1274,isShouldHideKeyboard,"    public static boolean isShouldHideKeyboard(View v, MotionEvent event) {
        if (v != null && (v instanceof EditText)) {
            int[] l = {0, 0};
            v.getLocationInWindow(l);"
1283,onAny,"    void onAny(LifecycleOwner owner, Lifecycle.Event event);
"
1284,loadCircleImage,"    public void loadCircleImage(ImageView iv, String url) {
        Glide.with(iv.getContext())
                .load(url)"
1285,loadRoundImage,"    public void loadRoundImage(ImageView iv, String url, int round) {
        Glide.with(iv.getContext())
                .load(url)"
1286,loadImage,"    public void loadImage(ImageView iv, String url, int drawable) {
        Glide.with(iv.getContext())
                .load(url)"
1287,loadImage,"    public void loadImage(ImageView iv, String url, Drawable drawable) {
        Glide.with(iv.getContext())
                .load(url)"
1288,loadImage,"    public void loadImage(ImageView iv, String url) {
        Glide.with(iv.getContext())
                .load(url)"
1291,delete,"    public static boolean delete(File file) {
        if (file == null) {
            return false;
        }
        if (file.isDirectory()) {"
1294,isSDCardAlive,"    public static boolean isSDCardAlive() {
        return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);
    }"
1295,onCreateView,"    protected int onCreateView()
    {
        return R.layout.base_layout_error;"
1296,onReloadEvent,"    protected boolean onReloadEvent(Context context, View view) {
        return false;
    }"
1297,onCreateView,"    protected int onCreateView() {
        return R.layout.base_layout_empty;
    }"
1307,get,"    static float get(@NonNull Ease ease, float elapsedTimeRate) {
        switch (ease) {
            case LINEAR:"
1312,click,"    public boolean click() {
        long currentTime = System.currentTimeMillis();
        boolean result = (currentTime - lastClickTime) < effectiveIntervalTime;
        lastClickTime = currentTime;
        if (!result) {
            Toast.makeText(context, hintMessage, Toast.LENGTH_SHORT).show();
        }"
1316,scrollVertical,"    public boolean scrollVertical() {
        return true;
    }"
1320,createFile,"    private static void createFile(String path) {
        File file = new File(path);
        if (!file.exists()) {
            file.mkdirs();"
1325,copyIntent,"    public static void copyIntent(Intent intent, Context context) {
        ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
        clipboard.setPrimaryClip(ClipData.newIntent(""intent"", intent));
    }"
1327,copyUri,"    public static void copyUri(Uri uri, Context context) {
        ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
        clipboard.setPrimaryClip(ClipData.newUri(context.getContentResolver(), ""uri"", uri));
    }"
1329,copyText,"    public static void copyText(CharSequence text, Context context) {
        ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
        clipboard.setPrimaryClip(ClipData.newPlainText(""text"", text));
    }"
1330,isDisposed,"        public boolean isDisposed() {
            return disposed;
        }"
1331,dispose,"        public void dispose() {
            disposed = true;
            call.cancel();
        }"
1332,onFailure,"        public void onFailure(Call<T> call, Throwable t) {
            if (call.isCanceled()) {
                return;
            }"
1333,onResponse,"        public void onResponse(Call<T> call, Response<T> response) {
            if (disposed) {
                return;
            }"
1335,clearAllCache,"    public static void clearAllCache() {
        FileUtils.delete(BaseApplication.getInstance().getCacheDir());
        if (FileUtils.isSDCardAlive()) {
            FileUtils.delete(BaseApplication.getInstance().getExternalCacheDir());"
1337,createLiveData,"        private <T> SingleLiveEvent<T> createLiveData(SingleLiveEvent<T> liveData) {
            if (liveData == null) {
                liveData = new SingleLiveEvent<>();
            }"
1338,onBackPressedEvent,"        public SingleLiveEvent<Void> onBackPressedEvent() {
            return onBackPressedEvent = createLiveData(onBackPressedEvent);
        }"
1339,onBackPressed,"    public void onBackPressed() {
        uiChangeLiveData.onBackPressedEvent.call();
    }"
1340,accept,"    public void accept(Disposable disposable) throws Exception {
        addDisposable(disposable);
    }"
1347,onAny,"    public void onAny(LifecycleOwner owner, Lifecycle.Event event) {
"
1348,onCleared,"    protected void onCleared() {
        super.onCleared();
        if (mCompositeDisposable != null && !mCompositeDisposable.isDisposed()) {
            mCompositeDisposable.clear();
        }"
1349,uiChangeLiveData,"    public UiChangeLiveData uiChangeLiveData() {
        if (uiChangeLiveData == null) {
            uiChangeLiveData = new UiChangeLiveData();
        }"
1350,addDisposable,"    protected void addDisposable(Disposable disposable) {
        if (this.mCompositeDisposable == null) {
            this.mCompositeDisposable = new CompositeDisposable();
        }"
1352,createModel,"    private M createModel() {
        try {
            Type superClass = getClass().getGenericSuperclass();
            Type type = ((ParameterizedType) superClass).getActualTypeArguments()[0];"
1360,swipeToFirst,"    public void swipeToFirst(int pos) {
        T t = datas.get(pos);
        datas.remove(pos);
        datas.add(0, t);
        notifyDataSetChanged();
    }"
1363,removeData," public void removeData(T datas) {
        this.datas.remove(datas);
        notifyDataSetChanged();
    }"
1364,addData,"    public void addData(T datas) {
        this.datas.add(datas);
        notifyDataSetChanged();
    }"
1365,addData,"    public void addData(int pos, T datas) {
        this.datas.add(0, datas);
        notifyDataSetChanged();
    }"
1366,addData,"    public void addData(int pos, List<T> datas) {
        this.datas.addAll(0, datas);
        notifyDataSetChanged();
    }"
1367,addData,"    public void addData(List<T> datas) {
        this.datas.addAll(datas);
        notifyDataSetChanged();
    }"
1368,clear,"    public void clear() {
        this.datas.clear();
        notifyDataSetChanged();
    }"
1369,delete,"    public void delete(int pos) {
        this.datas.remove(pos);
        this.notifyItemRemoved(pos);
    }"
1370,refresh,"    public void refresh(List<T> list) {
        this.datas.clear();
        if (list != null && list.size() > 0) {
            this.datas.addAll(list);
        }"
1371,bindData,"    protected abstract void bindData(BaseRecycleAdapter.BaseViewHolder holder, T t, int position);
"
1372,onBindViewHolder,"    public void onBindViewHolder(BaseRecycleAdapter.BaseViewHolder holder, int position) {
        bindData(holder, datas.get(position), position);
    }"
1373,isVertical,"    protected boolean isVertical() {
        return true;
    }"
1379,showErrorMsg,"    public boolean showErrorMsg() {
        return false;
    }"
1380,onSuccess,"    public abstract void onSuccess(T data);
"
1381,onChanged,"    public void onChanged(T t) {
        if (t instanceof ApiResponse) {
            ApiResponse apiResponse = (ApiResponse) t;
            if (apiResponse.isSuccess()) {"
1382,onDestroyView,"    public void onDestroyView() {
        super.onDestroyView();
        unbinder.unbind();
    }"
1384,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        context = getContext();
    }"
1388,initVariableId,"    protected abstract int initVariableId();
}"
1389,initContentView,"    protected abstract int initContentView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState);
"
1390,initViewDataBinding,"    private void initViewDataBinding() {

        if (viewModel == null) {
            Class modelClass;
            Type type = getClass().getGenericSuperclass();"
1391,onDestroyView,"    public void onDestroyView() {
        super.onDestroyView();
        if (binding != null) {
            binding.unbind();"
1393,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        initViewDataBinding();
        getLifecycle().addObserver(viewModel);
        initViews();
    }"
1394,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        binding = DataBindingUtil.inflate(inflater, initContentView(inflater, container, savedInstanceState), container, false);
        initImmersionBar();
        return binding.getRoot();
    }"
1396,initVariableId,"    protected abstract int initVariableId();
"
1397,initContentView,"    protected abstract int initContentView(Bundle savedInstanceState);
"
1398,initViewDataBinding,"    private void initViewDataBinding(Bundle savedInstanceState) {
        binding = DataBindingUtil.setContentView(this, initContentView(savedInstanceState));

        if (viewModel == null) {
            Class modelClass;
            Type type = getClass().getGenericSuperclass();"
1399,afterOnCreate,"    public void afterOnCreate(Bundle savedInstanceState) {
        super.afterOnCreate(savedInstanceState);
        initViewDataBinding(savedInstanceState);
        getLifecycle().addObserver(viewModel);
    }"
1401,onDestroyView,"    public void onDestroyView() {
        super.onDestroyView();
        if (unbinder != null) {
            unbinder.unbind();"
1404,immersionBar,"    protected boolean immersionBar() {
        return false;
    }"
1405,showSuccess,"    protected void showSuccess() {
        if (loadService != null) {
            loadService.showSuccess();"
1408,initImmersionBar,"    protected void initImmersionBar() {
        if (immersionBar()) {
            ImmersionBar.with(this)"
1410,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
    }"
1412,onPause,"    protected void onPause() {
        super.onPause();
        InputTools.hideInputMethod(this);
    }"
1413,onBackPressed,"    public void onBackPressed() {
        if (isDoubleClickExit()) {
            boolean isExit = doubleClickExitDetector.click();"
1414,isDoubleClickExit,"    public boolean isDoubleClickExit() {
        return false;
    }"
1417,requestPermissions,"    public void requestPermissions(String... permissions) {

        rxPermissions.request(permissions)"
1421,canSwipeBack,"    protected boolean canSwipeBack() {
        return true;
    }"
1423,hideKeyboard,"    private void hideKeyboard(IBinder token) {
        if (token != null) {
            InputMethodManager im = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);"
1424,isShouldHideKeyboard,"    private boolean isShouldHideKeyboard(View v, MotionEvent event) {
        if (v != null && (v instanceof EditText)) {
            int[] l = {0, 0};
            v.getLocationInWindow(l);"
1425,touchHideSoft,"    protected boolean touchHideSoft() {
        return true;
    }"
1428,fullScreen,"    protected boolean fullScreen() {
        return false;
    }"
1429,initImmersionBar,"    public void initImmersionBar() {
        if (!fullScreen()) {
            ImmersionBar.with(this)"
1432,shouldSupportMultiLanguage,"    protected boolean shouldSupportMultiLanguage() {
        return true;
    }"
1433,applyOverrideConfiguration,"                public void applyOverrideConfiguration(Configuration overrideConfiguration) {
                    if (overrideConfiguration != null) {
                        overrideConfiguration.setTo(configuration);
                    }"
1434,attachBaseContext,"    protected void attachBaseContext(Context newBase) {
        if (shouldSupportMultiLanguage()) {
            Context context = LanguageUtil.attachBaseContext(newBase);"
1436,showSuccess,"    public void showSuccess() {
        if (loadService == null) {
            loadService = LoadSir.getDefault().register(this, v -> onRetryBtnClick());
        }"
1437,showEmpty,"    public void showEmpty() {
        if (loadService == null) {
            loadService = LoadSir.getDefault().register(this, v -> onRetryBtnClick());
        }"
1438,showLoading,"    public void showLoading(View view) {
        if (loadService == null) {
            loadService = LoadSir.getDefault().register(view, v -> onRetryBtnClick());
        }"
1439,showLoading,"    public void showLoading() {
        if (loadService == null) {
            loadService = LoadSir.getDefault().register(this, v -> onRetryBtnClick());
        }"
1441,initEvents,"    public void initEvents() {
        tvTitle = (TextView) findViewById(R.id.tvTitle);
        ivLeft = (ImageView) findViewById(R.id.ivLeft);
        ivRight = (ImageView) findViewById(R.id.ivRight);
        if (ivLeft != null) {
            ivLeft.setOnClickListener(view -> finish());"
1442,afterOnCreate,"    public void afterOnCreate(Bundle savedInstanceState) {
"
1517,isFresh,"    public boolean isFresh() {
        return fresh;
    }"
1527,isCollect,"    public boolean isCollect() {
        return collect;
    }"
1533,isCanEdit,"    public boolean isCanEdit() {
        return canEdit;
    }"
1540,deleteArticle,"    ApiCall<Object> deleteArticle(@Path(""id"") String id);
}"
1541,shareArticle,"    ApiCall<Object> shareArticle(@Query(""title"") String title, @Query(""link"") String link);
"
1542,listMyShare,"    ApiCall<MyShareBean> listMyShare(@Path(""page"") int page);
"
1543,search,"    ApiCall<ArticleListRes> search(@Path(""page"") int pageNo, @Query(""k"") String k);
"
1544,hotSearch,"    ApiCall<List<SearchBeanRes>> hotSearch();
"
1545,unCollect,"    ApiCall<Object> unCollect(@Path(""id"") String id);
"
1546,collect,"    ApiCall<Object> collect(@Path(""id"") String id);
"
1547,listMyCollect,"    ApiCall<ArticleListRes> listMyCollect(@Path(""page"") int page);
"
1548,listArticle,"    ApiCall<ArticleListRes> listArticle(@Path(""page"") int page, @Query(""cid"") String id);
"
1549,listPublicAuthor,"    ApiCall<List<PublicAuthorListRes>> listPublicAuthor();
"
1550,listArticle,"    LiveData<ApiResponse<ArticleListRes>> listArticle(@Path(""id"") String id, @Path(""page"") int page);
"
1551,listArticle,"    ApiCall<ArticleListRes> listArticle(@Path(""page"") int page);
"
1557,update,"    public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs) {
        return 0;
    }"
1558,delete,"    public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {
        return 0;
    }"
1559,insert,"    public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {
        return null;
    }"
1561,query,"    public Cursor query(@NonNull Uri uri,
                        @Nullable String[] projection,
                        @Nullable String selection,"
1562,onCreate,"    public boolean onCreate() {
        Context context = getContext();
        if (context == null) return false;
        context = context.getApplicationContext();
        if (context instanceof Application) {
            AppProvider.init((Application) context);"
1566,onSuccess,"    void onSuccess(@NonNull ApiResponse<T> response);
"
1568,adapt,"        public ApiCall<R> adapt(@NonNull Call<ApiResponse<R>> call) {
            return new ApiCall<>(mAnnotations, call);
        }"
1569,responseType,"        public Type responseType() {
            return new ParameterizedTypeImpl(new Type[]{responseType}, null, ApiResponse.class);
        }"
1570,get,"    public CallAdapter<?, ?> get(@NonNull Type returnType, @NonNull final Annotation[] annotations,
                                 @NonNull Retrofit retrofit) {
        Class<?> rawType = getRawType(returnType);
        if (rawType != ApiCall.class) {
            return null;
        }
        if (!(returnType instanceof ParameterizedType)) {"
1571,create,"    public static ApiCallAdapterFactory create() {
        return new ApiCallAdapterFactory();
    }"
1572,cancel,"    public void cancel() {
        if (mDisposable != null) {
            mDisposable.dispose();"
1573,onError,"    private void onError(ApiCallback<R> callback, Throwable throwable, boolean toast) {
        callback.onError(throwable);
    }"
1574,exectue,"    public Response<ApiResponse<R>> exectue() throws IOException {
        return mCall.clone().execute();
    }"
1575,accept,"                    public void accept(Throwable throwable) throws Exception {
                        onError(callback, throwable, toastError);
                        cancel();
                    }"
1577,accept,"                    public void accept(Disposable disposable) throws Exception {
                        callback.onStart();
                    }"
1578,enqueue,"    public void enqueue(Context activity, ProgressType progressType, final boolean toastError,
                        final ApiCallback<R> callback) {
        Observable<Response<ApiResponse<R>>> observable;
        /*if (activity instanceof RxAppCompatActivity) {
            RxAppCompatActivity rxAppCompatActivity = (RxAppCompatActivity) activity;"
1579,enqueue,"    public void enqueue(Context activity, boolean toastError, final ApiCallback<R> callback) {
        enqueue(activity, ProgressType.NONE, toastError, callback);
    }"
1580,enqueue,"    public void enqueue(Context activity, ProgressType progressType, final ApiCallback<R> callback) {
        enqueue(activity, progressType, false, callback);
    }"
1581,enqueue2,"    public void enqueue2(Context activity, final ApiCallback<R> callback) {
        enqueue(activity, ProgressType.CANCELABLE, true, callback);
    }"
1582,enqueue,"    public void enqueue(Context activity, final ApiCallback<R> callback) {
        enqueue(activity, ProgressType.NONE, false, callback);
    }"
1583,enqueue,"    public <T extends ApiCallback<R>> void enqueue(T callback, ProgressType type) {
        enqueue(null, type, false, callback);
    }"
1584,enqueue,"    public <T extends ApiCallback<R>> void enqueue(T callback) {
        enqueue(null, ProgressType.NONE, false, callback);
    }"
1595,onPauseVideoLayout,"    public void onPauseVideoLayout() {
        if (mMediaPlayer != null && mMediaPlayer.isPlaying())
            try {"
1596,onResumeVideoLayout,"    public void onResumeVideoLayout() {
        if (mMediaPlayer != null && !mMediaPlayer.isPlaying())
            try {"
1597,onDestroyVideoLayout,"    public void onDestroyVideoLayout() {
        if (mMediaPlayer != null) {
            try {"
1598,onSurfaceTextureUpdated,"    public void onSurfaceTextureUpdated(SurfaceTexture surface) {
    }"
1599,onSurfaceTextureDestroyed,"    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
        return false;
    }"
1600,onSurfaceTextureSizeChanged,"    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
    }"
1601,onSurfaceTextureAvailable,"    public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
        surfaceAvailableWorkers(surface);
    }"
1602,changeVideo,"    private void changeVideo() {
        try {
            onDestroyVideoLayout();"
1603,surfaceAvailableWorkers,"    private void surfaceAvailableWorkers(SurfaceTexture surfaceTexture) {
        Surface surface = new Surface(surfaceTexture);

        try {"
1604,surfaceSetup,"    private void surfaceSetup() {
        int screenHeight = getResources().getDisplayMetrics().heightPixels;
        int screenWidth = getResources().getDisplayMetrics().widthPixels;

        if (ADJUSTVIEWBOUNDS) {"
1605,updateTextureViewSize,"    private void updateTextureViewSize(int viewWidth, int viewHeight) {
        float scaleX = 1.0f;
        float scaleY = 1.0f;

        int pivotPointX = (VIDEO_GRAVITY == 0) ? 0 : (VIDEO_GRAVITY == 1) ? viewWidth : viewWidth / 2;
        int pivotPointY = viewHeight / 2;

        Matrix matrix = new Matrix();

        if (VIDEO_GRAVITY == 4) {"
1606,calculateVideoSize,"    private void calculateVideoSize() {
        try {
            MediaMetadataRetriever metaRetriever = new MediaMetadataRetriever();"
1608,initViews,"    private void initViews() {
        videoSurface = new TextureView(getContext());
    }"
1612,onCreate,"    public void onCreate() {
        super.onCreate();
        InjectorHelper.initializeApplicationComponent(this);

        if (BuildConfig.DEBUG) {"
1613,go_to_custom_impl,"    public void go_to_custom_impl(View view) {
        startActivity(new Intent(this, CustomActivity.class));
    }"
1614,notification_custom,"    public void notification_custom(View view) {
        UpdateChecker checker = new UpdateChecker(this);
        checker.setNotice(Notice.NOTIFICATION);
        checker.setNoticeIcon(R.drawable.ic_action_info);
        checker.start();
    }"
1615,notification,"    public void notification(View view) {
        UpdateChecker checker = new UpdateChecker(this);
        checker.setNotice(Notice.NOTIFICATION);
        checker.start();
    }"
1616,dialog_custom,"    public void dialog_custom(View view) {
        UpdateChecker checker = new UpdateChecker(this);
        checker.setNoticeIcon(R.drawable.ic_launcher);
        checker.start();
    }"
1617,dialog,"    public void dialog(View view) {
        UpdateChecker checker = new UpdateChecker(this);
        checker.start();
    }"
1618,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        startActivity(new Intent(this, Infos.class));
        return super.onOptionsItemSelected(item);
"
1619,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.xml.activity_menu, menu);
        return true;
    }"
1620,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.standard_activity);
        getActionBar().setSubtitle(R.string.standard);
    }"
1622,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        finish();
        return super.onOptionsItemSelected(item);
    }"
1623,createLink,"    private String createLink(String url, String title) {
        return String.format(""<a href=\""%s\"">%s</a>"", url, title);
    }"
1625,goToMarket,"    private static void goToMarket(Context mContext) {
        mContext.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(UpdateChecker.ROOT_PLAY_STORE_DEVICE + mContext.getPackageName())));
"
1627,onClick,"                        public void onClick(DialogInterface dialog, int which) {
                            userHasTappedToNotShowNoticeAgain(context, versionDownloadable);
                            dialog.cancel();
                        }"
1628,onClick,"                        public void onClick(DialogInterface dialog, int which) {
                            dialog.cancel();
                        }"
1629,onClick,"                        public void onClick(DialogInterface dialog, int which) {
                            goToMarket(context);
                            dialog.cancel();
                        }"
1630,show,"    public static void show(final Context context, final Store store, final String versionDownloadable, final int dialogIconResId) {
        try {
            String storeName = null;"
1632,returnStoreError,"    public void returnStoreError() {
        result.setText(""Store Error"");
    }"
1633,returnAppUnpublished,"    public void returnAppUnpublished() {
        result.setText(""App unpublished"");
    }"
1634,returnNetworkError,"    public void returnNetworkError() {
        result.setText(""Network Error"");
    }"
1635,returnMultipleApksPublished,"    public void returnMultipleApksPublished() {
        result.setText(""Error #1"");
    }"
1636,returnUpToDate,"    public void returnUpToDate(String versionDownloadable) {
        result.setText(""Updated\n"" + ""Version downloadable: "" + versionDownloadable + ""\nVersion installed: "" + getVersionInstalled());
    }"
1637,foundUpdateAndDontShowIt,"    public void foundUpdateAndDontShowIt(String versionDownloadable) {
        result.setText(""Already Shown\n"" + ""Version downloadable: "" + versionDownloadable + ""\nVersion installed: "" + getVersionInstalled());
    }"
1638,foundUpdateAndShowIt,"    public void foundUpdateAndShowIt(String versionDownloadable) {
        result.setText(""Update available\n"" + ""Version downloadable: "" + versionDownloadable + ""\nVersion installed: "" + getVersionInstalled());
    }"
1639,custom_impl,"    public void custom_impl(View view) {
        UpdateChecker checker = new UpdateChecker(this, this);
        checker.setSuccessfulChecksRequired(2);
        checker.start();
        result.setText(R.string.loading);
    }"
1642,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.custom_activity);
        getActionBar().setDisplayHomeAsUpEnabled(true);
        getActionBar().setSubtitle(R.string.custom);
        result = (TextView) findViewById(R.id.result);
    }"
1646,convertHashToString,"    private static String convertHashToString(byte[] hashBytes) {
        StringBuilder returnVal = new StringBuilder();
        for (byte hashByte : hashBytes) {
            returnVal.append(Integer.toString((hashByte & 0xff) + 0x100, 16).substring(1));
        }"
1648,filterList,"    static List<String> filterList(List<String> list, String start, String end) {
        return Stream.of(list)
                .filter(s -> TextUtils.isEmpty(start) || s.startsWith(start))"
1649,filterList,"    static List<String> filterList(List<String> list, Pattern pattern) {
        return Stream.of(list)
                .filter(s -> pattern.matcher(s).find())"
1651,deleteFile,"    static boolean deleteFile(String filePath) {
        File file = new File(filePath);
        if (file.isFile() && file.exists()) {
            return file.delete();
        }"
1653,shell,"    static void shell(Context context, Command command) {
        try {
            RootTools.closeAllShells();"
1654,run,"                public void run() {
                    Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
                }"
1655,showToastOnLooper,"    static void showToastOnLooper(final Context context, String message) {
        try {
            Handler handler = new Handler(Looper.getMainLooper());"
1656,is64BitImpl,"    static boolean is64BitImpl() {
        try {
            Class<?> clzVMRuntime = Class.forName(""dalvik.system.VMRuntime"");
            if (clzVMRuntime == null) {"
1658,writeFileFromSD,"    static void writeFileFromSD(String path, String content) {
        BufferedWriter out = null;
        try {
            File file = new File(path);"
1659,readFileFromSD,"    static String readFileFromSD(String path) {
        StringBuilder stringBuilder = new StringBuilder();
        File file = new File(path);
        if (!file.isDirectory()) {
            try {
                InputStream inputStream = new FileInputStream(file);"
1660,copyFilesFromSD,"    static void copyFilesFromSD(String oldPath, String newPath) {
        try {
            File newFile = new File(newPath);"
1668,PermissionsRequest,"    private static void PermissionsRequest(OnPermissionResultListener b, boolean get) {
        if (b != null)
            b.onResult(get);"
1670,onRequestPermissionsResult,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        if (requestCode == REQUEST_CODE_ASK_PERMISSIONS) {
            if (grantResults.length <= 0) {"
1671,onActivityResult,"    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK && requestCode == REQUEST_CODE_ASK_PERMISSIONS) {
            PermissionsRequest(back, true);"
1674,handleLoadPackage,"    public void handleLoadPackage(final LoadPackageParam lpparam) throws Throwable {
        if (lpparam.packageName.equals(Tools.HOOK_NAME)) {
            HotXposed.hook(HTTPHook.class, lpparam);"
1675,init,"                        public void init() {
"
1676,error,"                        public void error(int i, String s) {
                            ErrorCode.showError(context, i);
                        }"
1677,finish,"                        public void finish(JSONObject jsonObject) throws JSONException {
                            if (update.downloadUrl.length() == 0) {
                                iv_script.setVisibility(View.GONE);"
1678,showUpdateDialog,"    private void showUpdateDialog(final String title, final String extra, final Update update) {
        String log = update.log;
        if (extra != null && extra.length() != 0)
            log = log + ""\n\n"" + extra;
        new AlertDialog.Builder(this)"
1679,showMessageDialog,"    private void showMessageDialog(final String title, final String message, final boolean finish) {
        new AlertDialog.Builder(this)
                .setCancelable(false)"
1680,isVXP,"    private boolean isVXP() {
        return System.getProperty(""vxp"") != null;
    }"
1681,isModuleActive,"    private static boolean isModuleActive() {
        return false;
    }"
1682,isExpModuleActive,"    private boolean isExpModuleActive() {
        boolean isExp = false;

        try {
            ContentResolver contentResolver = getContentResolver();"
1684,checkState,"    private void checkState() {
        String method = null;

        if (isModuleActive()) {
            method = ""Xposed / EdXposed"";"
1686,error,"            public void error(int i, String s) {
                ErrorCode.showError(context, i);
            }"
1687,finish,"            public void finish(JSONObject jsonObject) throws JSONException {
                scriptUpdate = Update.getUpdate(context, jsonObject);
                if (!scriptUpdate.version.equals(Tools.nowVersion.replace(""-high"", """")))
                    iv_script.setVisibility(View.VISIBLE);"
1690,finish,"            public void finish(JSONObject jsonObject) throws JSONException {
                versionUpdate = Update.getUpdate(context, jsonObject);
                if (!versionUpdate.version.equals(BuildConfig.VERSION_NAME))
                    iv_version.setVisibility(View.VISIBLE);"
1695,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        context = this;

        checkState();
        initView();
        listener();"
1696,handleMessage,"        public void handleMessage(Message msg) {
            if (msg.what == 0) {
                getPackageManager().setComponentEnabledSetting(new ComponentName(MainActivity.this, ""com.raincat.unblockmusicpro.MainAlias""),"
1698,logText,"    private static void logText(String name, Object object) {
        Field[] fields = object.getClass().getDeclaredFields();
        for (Field field : fields) {
            try {"
1700,beforeHookedMethod,"                                        protected void beforeHookedMethod(MethodHookParam param) {
                                            if (param.args.length >= 9) {
                                                param.args[8] = proxy;"
1701,commandOutput,"                                        public void commandOutput(int id, String line) {
                                            if (showLog)
                                                XposedBridge.log(line);
                                            if (firstToastShow) {"
1704,showError,"    public static void showError(Context context, int errorCode) {
            switch (errorCode) {
                case 1:"
1706,getJsonBoolean,"    protected static boolean getJsonBoolean(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getBoolean(key);
            }"
1707,getJsonLong,"    protected static long getJsonLong(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getLong(key);
            }"
1708,getJsonInt,"    protected static int getJsonInt(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getInt(key);
            }"
1709,getJsonString,"    static String getJsonString(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getString(key);
            }"
1712,isBlock,"    public boolean isBlock() {
        return block;
    }"
1713,run,"    public DefaultExecutor run(){
        DefaultExecutor executor = new DefaultExecutor();

        if (REAL_PATH_PARENT.exists()&&REAL_PATH_PARENT.isFile()){
            executor.setWorkingDirectory(REAL_PATH_PARENT.getParentFile());
        }
        if (!setOutfileFlag)"
1716,output,"    private void output(String type , String filename){
        setOutfileFlag = true;
        File output = new File(tempdir.concat(""xray/""));
        outfile = new File(output, filename);
        command.add(""--""+type+""-output ""+outfile.getAbsolutePath());
    }"
1717,outputHTML,"    public XRay outputHTML(String filename){
        output(""html"",filename);
        return this;
    }"
1718,outputTEXT,"    public XRay outputTEXT(String filename){
        output(""text"",filename);
        return this;
    }"
1719,outputJSON,"    public XRay outputJSON(String filename){
        output(""json"",filename);
        return this;
    }"
1725,isPortUsing,"    public static boolean isPortUsing(String host,int port)  {
        boolean flag = false;
        Socket socket = null;
        try {

            InetAddress Address = InetAddress.getByName(host);"
1726,isLocalPortUsing,"    public  boolean isLocalPortUsing(int port){
        boolean flag = false;
        try {
            flag = isPortUsing(""127.0.0.1"", port);
        } catch (Exception e) {"
1727,process,"    public void process() {
        result = this;
        command.add(REAL_PATH);
        command.add(""webscan"");

        outputDir = new File(tempdir.concat(""xray/""));
"
1729,check,"    public boolean check(Map param) {
        String content = """";
        if (Constant.TRACKRAY_SYSTEMOS == Constant.WINDOWS){
            Shell block = shell().block(true);
            if (REAL_PATH_PARENT.exists()&&REAL_PATH_PARENT.isFile()){
                block.workdir(REAL_PATH_PARENT.getParentFile());"
1735,clone,"    public Object clone()  {
        try {
            return super.clone();
        } catch (CloneNotSupportedException e) {"
1737,toJSON,"    public JSONObject toJSON(){
        return JSONObject.fromObject(this);
    }"
1738,toString,"    public String toString() {
        return toJSON().toString();
    }"
1748,WARN,"    public static ResultCode WARN(String obj){
        return getInstance(400,obj);
    }"
1749,ERROR,"    public static ResultCode ERROR(String obj){
        return getInstance(500,obj);
    }"
1750,SUCCESS,"    public static ResultCode SUCCESS(String obj){
        return getInstance(200,obj);
    }"
1754,finalize,"    protected void finalize() throws Throwable {
        if (logind)
        {
            logout();"
1755,arr,"    public String[] arr(String command ,String... param){
        return param;
    }"
1756,list,"    public List<String> list(String... param){
        return Arrays.asList(param);
    }"
1757,format,"    private final String format() {
        return String.format(this.format,host);
    }"
1758,unpack,"    public Value unpack(byte[] obj) {
        try {
            return MessagePack.unpack(obj);
        } catch (IOException e) {"
1759,pack,"    public byte[] pack(Object obj) {
        try {
            return MessagePack.pack( obj );
        } catch (IOException e) {"
1760,sendList,"    public Map sendList(List list){
        try {
            byte[] result= send(pack(list));
            Value unpack = unpack(result);"
1761,send,"    public byte[] send(byte[] p){
        byte[] result= Requests.post(format())
                .timeout(callTimeout)
                .headers(header)"
1762,readResult,"    public Map readResult(){
        Map map = sendList(list(Command.ConsoleRead, token, String.valueOf(consoleID)));
        return map;
    }"
1763,executeCommand,"    public Map executeCommand(List<String> commands){
        StringBuffer buff = new StringBuffer();
        for (String command : commands) {
            buff.append(command).append(""\n"");
        }
        Map map = sendList(list(Command.ConsoleWrite, token, String.valueOf(consoleID), buff.toString()));"
1764,execute,"    public String execute(List<String> commands){
        executeCommand(commands);
        Map map = readResult();
        if (map!=null && map.containsKey(""data"") && map.containsKey(""prompt"") && map.containsKey(""busy""))
        {
            String response = StrUtils.unicodeToString(map.get(""data"").toString());"
1765,destroyConsole,"    public void destroyConsole(){
        Map map = sendList(list(Command.ConsoleDestroy, token , String.valueOf(consoleID)));
    }"
1766,banner,"    public String banner(){
        String banner = execute(Arrays.asList(""""));
        return banner;
    }"
1767,createConsole,"    public int createConsole(){
        Map map = sendList(list(Command.ConsoleCreate, token));
        if (map.containsKey(""id"")){
            consoleID = Integer.parseInt( map.get(""id"").toString());
            return consoleID;"
1768,logout,"    public void logout(){
        destroyConsole();
        Map map = sendList(list(Command.AuthLogout, token));
    }"
1769,close,"    public void close(){
        logout();
    }"
1770,login,"    public boolean login(){
        try {
            Map send = sendList(list(Command.AuthLogin, username, password));
            if (send.containsKey(""token"")){"
1771,per,"        protected void per(char[] buf, char[] chs, int len , ArrayList<String> strs){
            if(len == -1){
                String tmp="""";
                for(int i=buf.length-1; i>=0; --i)"
1772,numbers4,"        public List<String> numbers4(){
            char[] chars = {'0', '1', '2', '3', '4', '5', '6','7','8','9'};
            ArrayList<String> integers = new ArrayList<>();
            per(new char[4],chars,4-1,integers);
            return integers;
        }"
1774,decode,"            public String decode (String str){
                return StrUtils.unicodeToString(str);
            }"
1775,encode,"            public String encode (String str){
                return StrUtils.stringToUnicode(str);
            }"
1776,decode,"            public String decode(String obj,String code) throws UnsupportedEncodingException { return java.net.URLDecoder.decode(obj,code); }
        }
"
1778,decode,"            public  byte[] decode(String str) throws Exception {
                byte[] data = str.getBytes(""GBK"");
                int len = data.length;
                ByteArrayOutputStream buf = new ByteArrayOutputStream(len);
                int i = 0;
                int b1, b2, b3, b4;

                while (i < len) {
"
1779,encode,"            public  String encode(byte[] data) {
                StringBuffer sb = new StringBuffer();
                int len = data.length;
                int i = 0;
                int b1, b2, b3;

                while (i < len) {
                    b1 = data[i++] & 0xff;"
1780,MD5,"            public  String MD5(String source) {
                return byte2HexStr(MD5Bit(source.getBytes()));
            }"
1782,SHA1,"            public  String SHA1(String source) {
                return byte2HexStr(SHA1Bit(source.getBytes()));
            }"
1783,SHA1Bit,"            public  byte[] SHA1Bit(byte[] source) {
                try {
                    MessageDigest sha1Digest = MessageDigest.getInstance(""SHA-1"");"
1792,isMatch,"    public boolean isMatch(){
        if (StringUtils.isNotBlank(match) && StringUtils.isBlank(md5))
            return true;
        return false;"
1793,toInt,"    private String toInt(int i) {
        StringBuffer result = new StringBuffer();
        int temp = String.valueOf(i).length();
        String flag = "" "";
        switch (temp){
            case 1:
                result.append(i).append(flag+flag+flag);"
1794,jsonPluginCount,"    public int jsonPluginCount(){
        String jsonPath = Constant.RESOURCES_INCLUDE_PATH.concat(""/json/"");

        File file = new File(jsonPath);
        if (file.isDirectory()){
            String[] list = file.list();"
1795,crawlerCount,"    public int crawlerCount() {
        return dispatchController.getAppContext().getBeansOfType(CrawlerPlugin.class).size();
    }"
1796,pluginCount,"    public int pluginCount() {
        return dispatchController.getAppContext().getBeansOfType(AbstractPlugin.class).size();
    }"
1797,pocCount,"    public int pocCount() {
        return dispatchController.getAppContext().getBeansOfType(AbstractPOC.class).size();
    }"
1799,count,"    public int count(){
        return auxiliaryCount()+crawlerCount()+pocCount()+jsonPluginCount()+pluginCount();
    }"
1801,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Vulndetail) == false) {
            return false;"
1802,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(vulnId).append(severity).append(criticality).append(vtId).append(cvss2).append(tags).append(affectsDetail).append(affectsUrl).append(cvss3).append(cvssScore).append(targetId).append(vtName).append(locId).append(source).append(status).append(request).append(additionalProperties).toHashCode();
    }"
1805,toString,"    public String toString() {
        return ToStringBuilder.reflectionToString(this);
    }"
1838,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Vulnerabilities) == false) {
            return false;"
1839,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(vulnId).toHashCode();
    }"
1869,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Scan) == false) {
            return false;"
1870,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(nextRun).append(currentSession).append(targetId).append(profileName).append(profileId).append(criticality).append(reportTemplateId).append(scanId).append(additionalProperties).toHashCode();
    }"
1890,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof CurrentSession) == false) {
            return false;"
1891,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(eventLevel).append(progress).append(startDate).append(severityCounts).append(status).append(threat).append(scanSessionId).append(additionalProperties).toHashCode();
    }"
1909,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof SeverityCounts) == false) {
            return false;"
1910,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(high).append(medium).append(info).append(low).append(additionalProperties).toHashCode();
    }"
1922,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Target) == false) {
            return false;"
1923,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(address).append(severityCounts).append(lastScanDate).append(threat).append(criticality).append(manualIntervention).append(lastScanSessionId).append(targetId).append(continuousMode).append(lastScanId).append(lastScanSessionStatus).append(description).append(additionalProperties).toHashCode();
    }"
1951,stopScan,"    public boolean stopScan(String scanid){
        try {
            send(String.format(""/api/v1/scans/%s/abort"", scanid), HttpMethod.POST);
        }catch (Exception e){"
1953,vuln,"    public Vulndetail vuln(String vulnid){
        String url = String.format(""/api/v1/vulnerabilities/%s"", vulnid);
        String resp = send( url, HttpMethod.GET);
        try {
            return toBean(resp,Vulndetail.class);"
1954,vuln,"    public Vulndetail vuln(String scanid,String sessionid ,String vid){
        String resp = send(String.format(""/api/v1/scans/%s/results/%s/vulnerabilities/%s"", scanid, sessionid , vid), HttpMethod.GET);
        try {
            return toBean(resp,Vulndetail.class);"
1956,vulnsJSON,"    public JSONObject vulnsJSON(String sessionid , String scanid){
        String resp = send(String.format(""/api/v1/scans/%s/results/%s/vulnerabilities"", scanid, sessionid), HttpMethod.GET);
        JSONObject obj = JSONObject.fromObject(resp);
        return obj;
    }"
1958,targets,"    public List<Target> targets(){
        JSONObject obj = targetsJSON();
        List <Target> list = new ArrayList<>();
        if (obj.containsKey(""targets"")){
            JSONArray scans = obj.getJSONArray(""targets"");
            for (int i = 0; i < scans.size(); i++) {"
1959,toBean,"    protected <T> T toBean (String json ,  Class <T> clazz) throws IOException {
        return new ObjectMapper().readValue(json,clazz);
    }"
1960,targetsJSON,"    public JSONObject targetsJSON(){
        String scans = send(""/api/v1/targets"", HttpMethod.GET);
        return JSONObject.fromObject(scans);
    }"
1961,scan,"    public Scan scan(String scanId){
        String scan = send(String.format(""/api/v1/scans/%s"",scanId), HttpMethod.GET);
        try {
            return toBean(scan,Scan.class);"
1962,scans,"    public List<Scan> scans(){
        List <Scan> list = new ArrayList<>();
        JSONObject obj = scansJSON();
        if (obj.containsKey(""scans"")){
            JSONArray scans = obj.getJSONArray(""scans"");
            for (int i = 0; i < scans.size(); i++) {"
1963,scansJSON,"    public JSONObject scansJSON(){
        String scans = send(""/api/v1/scans"", HttpMethod.GET);
        return JSONObject.fromObject(scans);
    }"
1965,send,"    String send(String url , HttpMethod method){
        return send(url,"""",method);
    }"
1967,filterRGB,"	public abstract int filterRGB(int x, int y, int rgb);
}"
1971,combinePixels,"	public static int combinePixels(int rgb1, int rgb2, int op, int extraAlpha, int channelMask) {
		return (rgb2 & ~channelMask) | combinePixels(rgb1 & channelMask, rgb2, op, extraAlpha);
	}"
1972,combinePixels,"	public static int combinePixels(int rgb1, int rgb2, int op) {
		return combinePixels(rgb1, rgb2, op, 0xff);
	}"
1973,nearColors,"	public static boolean nearColors(int rgb1, int rgb2, int tolerance) {
		int r1 = (rgb1 >> 16) & 0xff;
		int g1 = (rgb1 >> 8) & 0xff;
		int b1 = rgb1 & 0xff;
		int r2 = (rgb2 >> 16) & 0xff;
		int g2 = (rgb2 >> 8) & 0xff;
		int b2 = rgb2 & 0xff;
		return Math.abs(r1-r2) <= tolerance && Math.abs(g1-g2) <= tolerance && Math.abs(b1-b2) <= tolerance;
	}"
1974,brightness,"	public static int brightness(int rgb) {
		int r = (rgb >> 16) & 0xff;
		int g = (rgb >> 8) & 0xff;
		int b = rgb & 0xff;
		return (r+g+b)/3;
	}"
1975,interpolate,"	public static int interpolate(int v1, int v2, float f) {
		return clamp((int)(v1+f*(v2-v1)));
	}"
1976,clamp,"	public static int clamp(int c) {
		if (c < 0)
			return 0;
		if (c > 255)
			return 255;"
1977,toString,"	public String toString() {
		return ""Stylize/Add Noise..."";
	}"
1978,filterRGB,"	public int filterRGB(int x, int y, int rgb) {
		if ( randomNumbers.nextFloat() <= density ) {
			int a = rgb & 0xff000000;
			int r = (rgb >> 16) & 0xff;"
1979,random,"	private int random(int x) {
		x += (int)(((distribution == GAUSSIAN ? randomNumbers.nextGaussian() : 2*randomNumbers.nextFloat() - 1)) * amount);
		if (x < 0)
			x = 0;
		else if (x > 0xff)"
1992,createCompatibleDestImage,"    public BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel dstCM) {
        if ( dstCM == null )
            dstCM = src.getColorModel();
        return new BufferedImage(dstCM, dstCM.createCompatibleWritableRaster(src.getWidth(), src.getHeight()), dstCM.isAlphaPremultiplied(), null);"
2003,blur,"    public void blur( int[] in, int[] out, int width, int radius ) {
        int widthMinus1 = width-1;
        int r2 = 2*radius+1;
        int tr = 0, tg = 0, tb = 0;

        for ( int i = -radius; i <= radius; i++ ) {
            int rgb = in[mod(i, width)];"
2004,mod,"	private static int mod(int a, int b) {
		int n = a/b;
		
		a -= n*b;
		if (a < 0)
			return a + b;"
2005,clamp,"	private static int clamp(int c) {
		if (c < 0)
			return 0;
		if (c > 255)
			return 255;"
2006,random,"	private int random(int x) {
		x += (int)(255*(2*randomNumbers.nextFloat() - 1) * amount);
		if (x < 0)
			x = 0;
		else if (x > 0xff)"
2008,clone,"	public Object clone() {
		try {
			return super.clone();"
2015,measureText,"    public static float measureText(TextPaint paint,
                                    TextPaint workPaint,
                                    CharSequence text, int start, int end,"
2016,drawText,"    public static float drawText(Canvas canvas,
                                 CharSequence text, int start, int end,
                                 int direction,
                                 float x, int top, int y, int bottom,"
2017,drawText,"    static float drawText(Canvas canvas,
                          CharSequence text, int start, int end,
                          int dir, boolean runIsRtl,
                          float x, int top, int y, int bottom,"
2021,toString,"        public String toString() {
            return ""\n"";
        }"
2022,draw,"        void draw(Canvas canvas, float offsetY, Paint paint, LayoutParams params) {
        }"
2023,toString,"        public String toString() {
            return unit;
        }"
2024,draw,"        void draw(Canvas canvas, float offsetY, Paint paint, LayoutParams params) {
            canvas.drawText(unit, x + params.getOffsetX(), y + params.getOffsetY() + offsetY, paint);
        }"
2025,draw,"        abstract void draw(Canvas canvas, float offsetY, Paint paint, LayoutParams params);
    }"
2028,fit,"    private LineAnalysis fit(ListIterator<Unit> iterator, int startIndex, float spaceOffset,
                             float availableWidth) {

        int i = startIndex;
"
2031,isTokenized,"    public boolean isTokenized() {
        return tokens != null;
    }"
2040,onDraw,"    public void onDraw(Canvas canvas, int startTop, int startBottom) {

        int tokenStart = getTokenForVertical(startTop, TokenPosition.START_OF_LINE);
        int tokenEnd = getTokenForVertical(startBottom, TokenPosition.END_OF_LINE);
"
2054,tokenize,"    private static LinkedList<Integer> tokenize(CharSequence source,
                                                int start,
                                                int end) {

        LinkedList<Integer> units = new LinkedList<>();

        if (start >= end) {"
2055,ammortizeArray,"    private static int[] ammortizeArray(int[] array, int index) {
        if (index >= array.length) {
            int[] newArray = new int[array.length * 2];
            Arrays.fill(newArray, Integer.MAX_VALUE);"
2058,isAntiAlias,"        public boolean isAntiAlias() {
            return antialias;
        }"
2060,isTextSubPixel,"        public boolean isTextSubPixel() {
            return subpixelText;
        }"
2062,isDebugging,"        public boolean isDebugging() {
            return debugging;
        }"
2072,isTextFakeBold,"        public boolean isTextFakeBold() {
            return textFakeBold;
        }"
2074,isTextStrikeThru,"        public boolean isTextStrikeThru() {
            return textStrikeThru;
        }"
2076,isTextUnderline,"        public boolean isTextUnderline() {
            return textUnderline;
        }"
2077,invalidate,"        public void invalidate() {
            this.changed = true;
            onLayoutParamsChange();
        }"
2078,hasChanged,"        public boolean hasChanged() {
            return this.changed;
        }"
2084,isReverse,"        public boolean isReverse() {
            return reverse;
        }"
2086,isHyphenated,"        public boolean isHyphenated() {
            return hyphenated;
        }"
2115,onLayoutParamsChange,"    public abstract void onLayoutParamsChange();
"
2116,isTokenized,"    public abstract boolean isTokenized();
"
2117,getTokenTextAt,"    public abstract CharSequence getTokenTextAt(int index);
"
2118,getTokenTopAt,"    public abstract float getTokenTopAt(int tokenIndex);
"
2119,getTokenEnd,"    public abstract int getTokenEnd(int tokenIndex);
"
2120,getTokenStart,"    public abstract int getTokenStart(int tokenIndex);
"
2121,getLineForToken,"    public abstract int getLineForToken(int tokenIndex);
"
2122,getTokenForVertical,"    public abstract int getTokenForVertical(float y, TokenPosition position);
"
2123,getTokenDescent,"    public abstract float getTokenDescent(int tokenIndex);
"
2124,getTokenAscent,"    public abstract float getTokenAscent(int tokenIndex);
"
2125,onDraw,"    protected abstract void onDraw(Canvas canvas, int startTop, int startBottom);
"
2126,draw,"    public void draw(Canvas canvas, int startTop, int startBottom) {

        params.loadToPaint(paint);
"
2127,onMeasure,"    protected abstract boolean onMeasure(IProgress<Float> progress, ICancel<Boolean> cancelled);
"
2128,measure,"    public boolean measure(IProgress<Float> progress, ICancel<Boolean> cancelled) {

        if (!params.changed && !textChange) {
            return true;
        }
"
2130,onTextNull,"    protected void onTextNull() {
        params.changed = false;
        measuredHeight = (int) (params.insetPaddingTop + params.insetPaddingBottom);
    }"
2136,showToast,"    protected void showToast(String s) {
        toast.setText(s);
        toast.show();
    }"
2137,onPostExecute,"            protected void onPostExecute(Void aVoid) {
                drawFadeInStartTime = System.currentTimeMillis();
                drawCompleted = true;
                invalidate();
            }"
2138,doInBackground,"            protected Void doInBackground(Void... params) {
                drawRunnable.run();
                return null;
            }"
2139,onPreExecute,"            protected void onPreExecute() {
                super.onPreExecute();
            }"
2140,recycle,"        public void recycle() {
            if (drawTask != null) {
                drawTask.cancel(true);
                drawTask = null;"
2141,isReady,"        public boolean isReady() {
            return drawCompleted;
        }"
2146,drawInBackground,"        public void drawInBackground(Runnable runnable) {
            if (drawTask != null) {
                drawTask.cancel(true);
                drawTask = null;
            }

            drawCompleted = false;"
2148,onCancelled,"        protected void onCancelled() {
            super.onCancelled();
            if (layoutProgressListener != null) {
                layoutProgressListener.onCancelled();"
2149,onPostExecute,"        protected void onPostExecute(Boolean done) {
            if (!done || isCancelled()) {
                if (layoutProgressListener != null) {
                    layoutProgressListener.onCancelled();
                }
                return;
            }"
2150,onPreExecute,"        protected void onPreExecute() {
            if (layoutProgressListener != null) {
                layoutProgressListener.onStart();"
2151,doInBackground,"        protected Boolean doInBackground(Void... params) {
            try {
                return layout.measure(progress, cancelled);"
2152,isCancelled,"                public Boolean isCancelled() {
                    return MeasureTask.this.isCancelled();
                }"
2153,onUpdate,"                public void onUpdate(Float progress) {
                    if (layoutProgressListener != null) {
                        layoutProgressListener.onProgressUpdate(progress);"
2154,get,"        public float get(float t, float b, float c, float d);
    }"
2155,onProgressUpdate,"        public void onProgressUpdate(float progress);
    }"
2162,destroyCache,"    public void destroyCache() {
        if (cacheBitmapTop != null) {
            cacheBitmapTop.recycle();
            cacheBitmapTop = null;"
2163,freeResources,"    protected void freeResources() {
        viewportView.setMinimumHeight(minimumHeight);

        if (measureTask != null) {
            measureTask.cancel(true);"
2165,allocateResources,"    public void allocateResources() {
        if (cacheBitmapTop == null) {
            cacheBitmapTop = new CacheBitmap(getWidth(), eglBitmapHeight, cacheConfig.getConfig());
        }"
2167,run,"                        public void run() {
                            drawLayout(new Canvas(bottom.getBitmap()), startBottom, startBottom + eglBitmapHeight, true);
                        }"
2168,run,"                        public void run() {
                            drawLayout(new Canvas(top.getBitmap()), startTop, startTop + eglBitmapHeight, true);
                        }"
2169,run,"                        public void run() {
                            drawLayout(new Canvas(bottom.getBitmap()), startTop, startTop + eglBitmapHeight, true);
                        }"
2171,onConfigurationChanged,"    protected void onConfigurationChanged(Configuration newConfig) {
        if (orientation != newConfig.orientation) {
            orientation = newConfig.orientation;
            freeResources();"
2172,onProgressUpdate,"            public void onProgressUpdate(float progress) {
                progressBar.setProgress((int) (progress * (float) progressBar.getMax()));
            }"
2173,onStart,"            public void onStart() {
                progressBar.setProgress(0);
            }"
2174,onFinish,"            public void onFinish() {
                progressBar.setProgress(progressBar.getMax());
            }"
2175,onCancelled,"            public void onCancelled() {
                progressBar.setProgress(progressBar.getMax());
            }"
2177,onDetachedFromWindow,"    protected void onDetachedFromWindow() {
        freeResources();
        super.onDetachedFromWindow();
    }"
2178,requestLayout,"    public void requestLayout() {
        measureState = MeasureTaskState.START;
        super.requestLayout();
    }"
2179,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        requestDisallowInterceptTouchEvent(disallowInterceptTouch);
        return super.onTouchEvent(ev);
    }"
2180,onMeasure,"    protected void onMeasure(final int widthMeasureSpec, final int heightMeasureSpec) {
        final int width = MeasureSpec.getSize(widthMeasureSpec);

        switch (measureState) {
            case FINISH_AWAIT:"
2189,onStart,"            public void onStart() {
                progressBar = (ProgressBar) ((Activity) getContext()).getWindow().getDecorView().findViewById(progressBarId);
                progressBar.setProgress(0);
            }"
2190,onFinish,"            public void onFinish() {
                progressBar.setProgress(progressBar.getMax());
                progressBar = null;
            }"
2191,onCancelled,"            public void onCancelled() {
                progressBar.setProgress(progressBar.getMax());
                progressBar = null;
            }"
2194,invalidateCache,"    public void invalidateCache() {
        if (cacheBitmapTop != null) {
            cacheBitmapTop.setStart(-1);
        }"
2195,onTextChange,"                    public void onTextChange() {
                        invalidateCache();
                        requestLayout();
                    }"
2196,onLayoutParamsChange,"                    public void onLayoutParamsChange() {
                        invalidateCache();
                        postInvalidate();
                    }"
2200,onAttachedToWindow,"    protected void onAttachedToWindow() {
        orientation = getResources().getConfiguration().orientation;
        super.onAttachedToWindow();
    }"
2201,initPaint,"    protected void initPaint(Paint paint) {
        paint.setTypeface(Typeface.defaultFromStyle(Typeface.NORMAL));
        paint.setTextSize(34);
        paint.setAntiAlias(true);
    }"
2211,isDisallowInterceptTouch,"    public boolean isDisallowInterceptTouch() {
        return disallowInterceptTouch;
    }"
2213,get,"            public float get(float t, float b, float c, float d) {
                return c * t / d + b;
            }"
2214,log,"    public static <T> void log(T s) {
        android.util.Log.d("""", s == null ? ""null"" : s.toString());
    }"
2215,log,"    public static void log(boolean s) {
        android.util.Log.d("""", s + """");
    }"
2216,log,"    public static void log(float s) {
        android.util.Log.d("""", s + """");
    }"
2217,log,"    public static void log(double s) {
        android.util.Log.d("""", s + """");
    }"
2218,log,"    public static void log(long s) {
        android.util.Log.d("""", s + """");
    }"
2219,log,"    public static void log(int s) {
        android.util.Log.d("""", s + """");
    }"
2220,log,"    public static void log(String s) {
        android.util.Log.d("""", s);
    }"
2221,log,"    public static void log(String tag, boolean s) {
        android.util.Log.d(tag, s + """");
    }"
2222,log,"    public static void log(String tag, float s) {
        android.util.Log.d(tag, s + """");
    }"
2223,log,"    public static void log(String tag, double s) {
        android.util.Log.d(tag, s + """");
    }"
2224,log,"    public static void log(String tag, long s) {
        android.util.Log.d(tag, s + """");
    }"
2225,log,"    public static void log(String tag, int s) {
        android.util.Log.d(tag, s + """");
    }"
2226,log,"    public static void log(String tag, String s) {
        android.util.Log.d(tag, s);
    }"
2227,remove,"        public void remove() {
            itr.remove();
        }"
2228,next,"        public E next() {
            return itr.previous();
        }"
2229,hasNext,"        public boolean hasNext() {
            return itr.hasPrevious();
        }"
2230,set,"        public void set(E e) {
            if (lastReturned == header)
                throw new IllegalStateException();
            lastReturned.element = e;"
2231,remove,"        public void remove() {
            Entry<E> lastNext = lastReturned.next;
            try {
                ConcurrentModifiableLinkedList.this.remove(lastReturned);
            } catch (NoSuchElementException e) {
                throw new IllegalStateException();"
2232,previousIndex,"        public int previousIndex() {
            return nextIndex - 1;
        }"
2233,previous,"        public E previous() {
            if (nextIndex == 0)
                throw new NoSuchElementException();

            lastReturned = next = next.previous;
            nextIndex--;"
2234,nextIndex,"        public int nextIndex() {
            return nextIndex;
        }"
2235,next,"        public E next() {
            if (nextIndex == size)
                throw new NoSuchElementException();

            lastReturned = next;
            next = next.next;
            nextIndex++;"
2236,hasPrevious,"        public boolean hasPrevious() {
            return nextIndex != 0;
        }"
2237,hasNext,"        public boolean hasNext() {
            return nextIndex != size;
        }"
2238,add,"        public void add(E e) {
            lastReturned = header;
            addBefore(e, next);
            nextIndex++;
        }"
2242,descendingIterator,"    public Iterator<E> descendingIterator() {
        return new DescendingIterator();
    }"
2243,remove,"    private E remove(Entry<E> e) {
        if (e == header)
            throw new NoSuchElementException();

        E result = e.element;
        e.previous.next = e.next;
        e.next.previous = e.previous;
        e.next = e.previous = null;
        e.element = null;
        size--;
        modCount++;"
2244,addBefore,"    private Entry<E> addBefore(E e, Entry<E> entry) {
        Entry<E> newEntry = new Entry<E>(e, entry, entry.previous);
        newEntry.previous.next = newEntry;
        newEntry.next.previous = newEntry;
        size++;
        modCount++;
        return newEntry;
    }"
2245,removeLastOccurrence,"    public boolean removeLastOccurrence(Object o) {
        if (o == null) {
            for (Entry<E> e = header.previous; e != header; e = e.previous) {
                if (e.element == null) {"
2246,removeFirstOccurrence,"    public boolean removeFirstOccurrence(Object o) {
        return remove(o);
    }"
2247,pop,"    public E pop() {
        return removeFirst();
    }"
2248,push,"    public void push(E e) {
        addFirst(e);
    }"
2249,pollLast,"    public E pollLast() {
        if (size == 0)
            return null;
        return removeLast();"
2250,pollFirst,"    public E pollFirst() {
        if (size == 0)
            return null;
        return removeFirst();"
2251,peekLast,"    public E peekLast() {
        if (size == 0)
            return null;
        return getLast();"
2252,peekFirst,"    public E peekFirst() {
        if (size == 0)
            return null;
        return getFirst();"
2253,offerLast,"    public boolean offerLast(E e) {
        addLast(e);
        return true;
    }"
2254,offerFirst,"    public boolean offerFirst(E e) {
        addFirst(e);
        return true;
    }"
2255,offer,"    public boolean offer(E e) {
        return add(e);
    }"
2256,remove,"    public E remove() {
        return removeFirst();
    }"
2257,poll,"    public E poll() {
        if (size == 0)
            return null;
        return removeFirst();"
2258,element,"    public E element() {
        return getFirst();
    }"
2259,peek,"    public E peek() {
        if (size == 0)
            return null;
        return getFirst();"
2260,entry,"    private Entry<E> entry(int index) {
        if (index < 0 || index >= size)
            throw new IndexOutOfBoundsException(""Index: "" + index +
                    "", Size: "" + size);
        Entry<E> e = header;
        if (index < (size >> 1)) {"
2261,set,"    public E set(int index, E element) {
        Entry<E> e = entry(index);
        E oldVal = e.element;
        e.element = element;
        return oldVal;
    }"
2262,remove,"    public E remove(int index) {
        return remove(entry(index));
    }"
2263,listIterator,"    public ListIterator<E> listIterator(int index) {
        return new ListItr(index);
    }"
2264,get,"    public E get(int index) {
        return entry(index).element;
    }"
2266,add,"    public void add(int index, E element) {
        addBefore(element, (index == size ? header : entry(index)));
    }"
2267,toArray,"    public <T> T[] toArray(T[] a) {
        if (a.length < size)
            a = (T[]) java.lang.reflect.Array.newInstance(
                    a.getClass().getComponentType(), size);
        int i = 0;
        Object[] result = a;
        for (Entry<E> e = header.next; e != header; e = e.next)
            result[i++] = e.element;"
2268,toArray,"    public Object[] toArray() {
        Object[] result = new Object[size];
        int i = 0;
        for (Entry<E> e = header.next; e != header; e = e.next)
            result[i++] = e.element;
        return result;"
2269,size,"    public int size() {
        return size;
    }"
2270,remove,"    public boolean remove(Object o) {
        if (o == null) {
            for (Entry<E> e = header.next; e != header; e = e.next) {
                if (e.element == null) {"
2271,contains,"    public boolean contains(Object o) {
        return indexOf(o) != -1;
    }"
2272,addAll,"    public boolean addAll(Collection<? extends E> c) {
        return addAll(size, c);
    }"
2273,lastIndexOf,"    public int lastIndexOf(Object o) {
        int index = size;
        if (o == null) {
            for (Entry e = header.previous; e != header; e = e.previous) {
                index--;"
2274,indexOf,"    public int indexOf(Object o) {
        int index = 0;
        if (o == null) {
            for (Entry e = header.next; e != header; e = e.next) {
                if (e.element == null)"
2275,clear,"    public void clear() {
        Entry<E> e = header.next;
        while (e != header) {
            Entry<E> next = e.next;
            e.next = e.previous = null;
            e.element = null;
            e = next;"
2276,add,"    public boolean add(E e) {
        addBefore(e, header);
        return true;
    }"
2277,addLast,"    public void addLast(E e) {
        addBefore(e, header);
    }"
2278,addFirst,"    public void addFirst(E e) {
        addBefore(e, header.next);
    }"
2279,removeLast,"    public E removeLast() {
        return remove(header.previous);
    }"
2280,removeFirst,"    public E removeFirst() {
        return remove(header.next);
    }"
2285,onTagsChanged,"    public void onTagsChanged(Collection<String> tags) {
        Log.d(TAG, ""Tags changed: "");
        Log.d(TAG, Arrays.toString(tags.toArray()));
    }"
2287,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        if (hasFocus) {
            mTagsEditText.showDropDown();"
2292,willChangeBounds,"        public boolean willChangeBounds() {
            return true;
        }"
2293,applyTransformation,"        protected void applyTransformation(float interpolatedTime, Transformation t) {
            mView.getLayoutParams().width = mStartWidth + (int) ((mWidth - mStartWidth) * interpolatedTime);
            mView.requestLayout();
        }"
2294,unSelect,"    public void unSelect(boolean setActiveColor, int animationDuration) {
        super.unSelect(setActiveColor, animationDuration);

        ResizeWidthAnimation anim = new ResizeWidthAnimation(this, mInActiveWidth);
        anim.setDuration(animationDuration);
        this.startAnimation(anim);
"
2295,select,"    public void select(boolean setActiveColor, int animationDuration) {
        super.select(setActiveColor, animationDuration);

        ResizeWidthAnimation anim = new ResizeWidthAnimation(this, mActiveWidth);
        anim.setDuration(animationDuration);
        this.startAnimation(anim);
"
2298,convert,"    protected void convert(BaseViewHolder holder, final CatagoryInfoVo catagoryInfoVo, int position, List payloads) {
        ImageView categroyIcon = holder.getView(R.id.iv_classify);
        TextView categroyName = holder.getView(R.id.tv_classify);
        Glide.with(getContext())
                .load(catagoryInfoVo.resId)
                .into(categroyIcon);"
2299,unSelect,"    public void unSelect(boolean setActiveColor, int animationDuration) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
                labelView.animate().scaleX(labelScale).scaleY(labelScale).setDuration(animationDuration).start();
            }"
2300,select,"    public void select(boolean setActiveColor, int animationDuration) {

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
                labelView.animate().scaleX(1).scaleY(1).setDuration(animationDuration).start();"
2302,initialise,"    public void initialise(boolean setActiveColor) {
        iconView.setSelected(false);
        if (isInActiveIconSet) {
            StateListDrawable states = new StateListDrawable();"
2303,onAnimationUpdate,"                public void onAnimationUpdate(ValueAnimator valueAnimator) {
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        containerView.setPadding(containerView.getPaddingLeft(),"
2319,init,"    void init() {
        setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
    }"
2323,isInActiveIconAvailable,"    protected boolean isInActiveIconAvailable() {
        return inActiveIconAvailable;
    }"
2336,onCancel,"                private void onCancel() {
                    backgroundView.setBackgroundColor(newColor);
                    bgOverlay.setVisibility(View.GONE);
                }"
2337,onAnimationCancel,"                public void onAnimationCancel(Animator animation) {
                    onCancel();
                }"
2338,onAnimationEnd,"                public void onAnimationEnd(Animator animation) {
                    onCancel();
                }"
2345,onTabReselected,"        public void onTabReselected(int position) {
        }"
2346,onTabUnselected,"        public void onTabUnselected(int position) {
        }"
2347,onTabSelected,"        public void onTabSelected(int position) {
        }"
2348,onTabReselected,"        void onTabReselected(int position);
    }"
2349,onTabUnselected,"        void onTabUnselected(int position);
"
2359,isAutoHideEnabled,"    public boolean isAutoHideEnabled() {
        return mAutoHideEnabled;
    }"
2360,isHidden,"    public boolean isHidden() {
        return mIsHidden;
    }"
2361,animateOffset,"    private void animateOffset(final int offset) {
        if (mTranslationAnimator == null) {
            mTranslationAnimator = ViewCompat.animate(this);
            mTranslationAnimator.setDuration(mRippleAnimationDuration);"
2363,show,"    public void show(boolean animate) {
        mIsHidden = false;
        setTranslationY(0, animate);
    }"
2364,show,"    public void show() {
        show(true);
    }"
2365,hide,"    public void hide(boolean animate) {
        mIsHidden = true;
        setTranslationY(this.getHeight(), animate);
    }"
2366,hide,"    public void hide() {
        hide(true);
    }"
2367,toggle,"    public void toggle(boolean animate) {
        if (mIsHidden) {
            show(animate);"
2368,toggle,"    public void toggle() {
        toggle(true);
    }"
2371,selectTabInternal,"    private void selectTabInternal(int newPosition, boolean firstTab, boolean callListener, boolean forcedSelection) {
        int oldPosition = mSelectedPosition;
        if (mSelectedPosition != newPosition) {
            if (mBackgroundStyle == BACKGROUND_STYLE_STATIC) {
                if (mSelectedPosition != -1)"
2372,onClick,"            public void onClick(View v) {
                BottomNavigationTab bottomNavigationTabView = (BottomNavigationTab) v;
                selectTabInternal(bottomNavigationTabView.getPosition(), false, true, false);
            }"
2374,selectTab,"    public void selectTab(int newPosition, boolean callListener) {
        selectTabInternal(newPosition, false, callListener, callListener);
    }"
2375,selectTab,"    public void selectTab(int newPosition) {
        selectTab(newPosition, true);
    }"
2376,clearAll,"    public void clearAll() {
        mTabContainer.removeAllViews();
        mBottomNavigationTabs.clear();
        mBottomNavigationItems.clear();
        mBackgroundOverlay.setVisibility(View.GONE);
        mContainer.setBackgroundColor(Color.TRANSPARENT);
        mSelectedPosition = DEFAULT_SELECTED_POSITION;
    }"
2379,initialise,"    public void initialise() {
        mSelectedPosition = DEFAULT_SELECTED_POSITION;
        mBottomNavigationTabs.clear();

        if (!mBottomNavigationItems.isEmpty()) {"
2390,removeItem,"    public BottomNavigationBar removeItem(BottomNavigationItem item) {
        mBottomNavigationItems.remove(item);
        return this;
    }"
2391,addItem,"    public BottomNavigationBar addItem(BottomNavigationItem item) {
        mBottomNavigationItems.add(item);
        return this;
    }"
2393,parseAttrs,"    private void parseAttrs(Context context, AttributeSet attrs) {
        if (attrs != null) {
            TypedArray typedArray = context.getTheme().obtainStyledAttributes(attrs, R.styleable.BottomNavigationBar, 0, 0);"
2395,createFragments,"    protected abstract List<BaseFragment> createFragments();
"
2396,createPageTitle,"    protected abstract String[] createPageTitle();
"
2402,onItemLongClickListener,"        void onItemLongClickListener(View v, int position);
    }"
2403,onItemClickListener,"        void onItemClickListener(View v, int position);
    }"
2407,convert,"    protected abstract void convert(BaseViewHolder holder, T t, int position, List<Object> payloads);
"
2408,onLongClick,"            public boolean onLongClick(View v) {
                if (onItemLongClickListener != null) {
                    onItemLongClickListener.onItemLongClickListener(v, position);
                }"
2409,onClick,"            public void onClick(View v) {
                if (onItemClickListener != null) {
                    onItemClickListener.onItemClickListener(v, position);"
2411,onBindViewHolder,"    public void onBindViewHolder(BaseViewHolder holder, final int position, List<Object> payloads) {
        if (payloads.isEmpty()) {
            onBindViewHolder(holder, position);"
2412,onCreateViewHolder,"    public BaseViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = layoutInflater.inflate(mItemLayoutId, parent, false);
        return new BaseViewHolder(view);
"
2416,onScrollStateChanged,"        public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
            super.onScrollStateChanged(recyclerView, newState);
            if (newState == RecyclerView.SCROLL_STATE_IDLE) {
                if (activity != null) {"
2417,onRefresh,"    public void onRefresh(boolean isRefresh) {
        this.isRefresh = isRefresh;
        lastId = null;
        getRemoteData();
    }"
2418,onLoadMore,"    public void onLoadMore(boolean isLoadMore, int pageIndex) {
        this.isLoadMore = isLoadMore;
    }"
2420,createLayoutManager,"    protected abstract RecyclerView.LayoutManager createLayoutManager();
"
2421,createAdapter,"    protected abstract DelegateAdapter createAdapter();
"
2425,onStateRefresh,"    protected void onStateRefresh() {
        super.onStateRefresh();
    }"
2426,lazyLoad,"    protected void lazyLoad() {
        getRemoteData();
    }"
2431,onAnimationCancel,"                    public void onAnimationCancel(View view) {
                        view.setVisibility(View.GONE);
                    }"
2432,onAnimationEnd,"                    public void onAnimationEnd(View view) {
                        view.setVisibility(View.GONE);
                    }"
2434,hide,"    public BadgeItem hide(boolean animate) {
        mIsHidden = true;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            if (animate) {"
2435,hide,"    public BadgeItem hide() {
        return hide(true);
    }"
2436,show,"    public BadgeItem show(boolean animate) {
        mIsHidden = false;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            if (animate) {"
2437,show,"    public BadgeItem show() {
        return show(true);
    }"
2438,toggle,"    public BadgeItem toggle(boolean animate) {
        if (mIsHidden) {
            return show(animate);"
2439,toggle,"    public BadgeItem toggle() {
        return toggle(true);
    }"
2440,unSelect,"    void unSelect() {
        if (mHideOnSelect) {
            show(true);"
2441,select,"    void select() {
        if (mHideOnSelect) {
            hide(true);"
2442,isWeakReferenceValid,"    private boolean isWeakReferenceValid() {
        return mTextViewRef != null && mTextViewRef.get() != null;
    }"
2444,refreshDrawable,"    private void refreshDrawable() {
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();"
2446,isHideOnSelect,"    protected boolean isHideOnSelect() {
        return mHideOnSelect;
    }"
2468,onPageScrolled,"			public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
				mPagerPosition = position;
				mPagerOffsetPixels = positionOffsetPixels;
			}"
2469,isViewDraggable,"					public boolean isViewDraggable(View v, int dx,
							int x, int y) {
						if (v == mViewPager) {
							return !(mPagerPosition == 0 && mPagerOffsetPixels == 0)"
2470,onCreate,"	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		SwipeBack.attach(this, Position.LEFT)
		.setContentView(R.layout.activity_view_pager)
		.setSwipeBackView(R.layout.swipeback_default)
		.setDividerAsSolidColor(Color.WHITE)
		.setDividerSize(2)"
2476,onDraw,"    protected void onDraw(Canvas canvas){
        TextPaint textPaint = getPaint();
        textPaint.setColor(getCurrentTextColor());
        textPaint.drawableState = getDrawableState();

        canvas.save();

        if(topDown){
            canvas.translate(getWidth(), 0);
            canvas.rotate(90);"
2477,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec){
        super.onMeasure(heightMeasureSpec, widthMeasureSpec);
        setMeasuredDimension(getMeasuredHeight(), getMeasuredWidth());
    }"
2478,onSwiping,"	public void onSwiping(SwipeBack swipeBack, float openRatio, int pixelOffset);
"
2479,onSwipeBackReseted,"	public void onSwipeBackReseted(SwipeBack swipeBack, Activity activity);
"
2480,onSwipeBackCompleted,"	public void onSwipeBackCompleted(SwipeBack swipeBack, Activity activity);
"
2481,onSwipeBackViewCreated,"	public void onSwipeBackViewCreated(SwipeBack swipeBack, Activity activity, View swipeBackView);
"
2482,dispatchOnDrawerSlide,"	protected void dispatchOnDrawerSlide(float openRatio, int offsetPixels) {
		if (mOnStateChangeListener != null) {
			mOnStateChangeListener.onSlide(openRatio, offsetPixels);"
2483,fitSystemWindows,"	protected boolean fitSystemWindows(Rect insets) {
		if (mDragMode == DRAG_WINDOW && mPosition != Position.BOTTOM) {
			mSwipeBackContainer.setPadding(0, insets.top, 0, 0);
		}"
2484,postOnAnimation,"	public void postOnAnimation(Runnable action) {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
			super.postOnAnimation(action);"
2490,setTouchBezelSize,"	public abstract SwipeBack setTouchBezelSize(int size);
"
2491,setTouchMode,"	public abstract SwipeBack setTouchMode(int mode);
"
2493,logDrawerState,"	protected SwipeBack logDrawerState(int state) {
		switch (state) {
		case STATE_CLOSED:
			Log.d(TAG, ""[DrawerState] STATE_CLOSED"");"
2499,notifySwipeBackViewCreated,"	private void notifySwipeBackViewCreated(View view) {

		if (mSwipeBackTransformer != null) {"
2508,setHardwareLayerEnabled,"	public abstract SwipeBack setHardwareLayerEnabled(boolean enabled);
"
2509,peekSwipeBack,"	public abstract SwipeBack peekSwipeBack(long startDelay, long delay);
"
2510,peekSwipeBack,"	public abstract SwipeBack peekSwipeBack(long delay);
"
2511,peekSwipeBack,"	public abstract SwipeBack peekSwipeBack();
"
2523,getOffsetSwipeBackEnabled,"	public abstract boolean getOffsetSwipeBackEnabled();
"
2524,setOffsetSwipeBackViewEnabled,"	public abstract void setOffsetSwipeBackViewEnabled(boolean offsetEnabled);
"
2525,updateTouchAreaSize,"	protected void updateTouchAreaSize() {
		if (mTouchMode == TOUCH_MODE_BEZEL) {
			mTouchSize = mTouchBezelSize;"
2526,onScrollChanged,"		public void onScrollChanged() {
			if (mActiveView != null && isViewDescendant(mActiveView)) {
				mActiveView.getDrawingRect(mTempRect);"
2528,setSize,"	public abstract SwipeBack setSize(int size);
"
2530,close,"	public abstract SwipeBack close(boolean animate);
"
2531,close,"	public SwipeBack close() {
		return close(true);
	}"
2535,open,"	public abstract SwipeBack open(boolean animate);
"
2536,open,"	public SwipeBack open() {
		return open(true);
	}"
2537,toggle,"	public abstract SwipeBack toggle(boolean animate);
"
2538,toggle,"	public SwipeBack toggle() {
		return toggle(true);
	}"
2539,onOffsetPixelsChanged,"	protected abstract void onOffsetPixelsChanged(int offsetPixels);
"
2541,onRtlPropertiesChanged,"	public void onRtlPropertiesChanged(int layoutDirection) {
		super.onRtlPropertiesChanged(layoutDirection);

		if (!mCustomDivider) {
			setDividerAsShadowColor(mDividerAsShadowColor);
		}
"
2547,drawOverlay,"	protected abstract void drawOverlay(Canvas canvas);
"
2548,dispatchDraw,"	protected void dispatchDraw(Canvas canvas) {
		super.dispatchDraw(canvas);
		final int offsetPixels = (int) mOffsetPixels;

		if (mDrawOverlay && offsetPixels != 0) {
			drawOverlay(canvas);"
2549,onDetachedFromWindow,"	protected void onDetachedFromWindow() {
		Log.d(TAG, ""detach from window"");
		getViewTreeObserver().removeOnScrollChangedListener(mScrollListener);
		super.onDetachedFromWindow();
	}"
2550,onAttachedToWindow,"	protected void onAttachedToWindow() {
		super.onAttachedToWindow();
		getViewTreeObserver().addOnScrollChangedListener(mScrollListener);
	}"
2551,isViewDescendant,"	protected boolean isViewDescendant(View v) {
		ViewParent parent = v.getParent();
		while (parent != null) {
			if (parent == this) {
				return true;"
2552,dpToPx,"	public int dpToPx(int dp) {
		return (int) (getResources().getDisplayMetrics().density * dp + 0.5f);
	}"
2553,onFinishInflate,"	protected void onFinishInflate() {
		super.onFinishInflate();
		View swipeBackView = findViewById(R.id.sbSwipeBackView);
		if (swipeBackView != null) {
			removeView(swipeBackView);
			setSwipeBackView(swipeBackView);
		}
"
2555,attachToDecor,"	private static void attachToDecor(Activity activity, SwipeBack swipeBack) {
		ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();
		ViewGroup decorChild = (ViewGroup) decorView.getChildAt(0);

		decorView.removeAllViews();
		decorView.addView(swipeBack, LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
"
2556,attachToContent,"	private static void attachToContent(Activity activity, SwipeBack swipeBack) {
		/**
		 * Do not call mActivity#setContentView.
		 * E.g. if using with a ListActivity, Activity#setContentView is overridden and dispatched to
		 * SwipeBack#setContentView, which then again would call Activity#setContentView."
2557,onSlide,"			public void onSlide(float openRatio, int offsetPixels) {

				if (!isActivitiyDestroyed()) {"
2558,onStateChanged,"			public void onStateChanged(int oldState, int newState) {

				if (!isActivitiyDestroyed()) {"
2559,initSwipeListener,"	private void initSwipeListener() {
		mOnStateChangeListener = new OnStateChangeListener() {
"
2560,isActivitiyDestroyed,"	protected boolean isActivitiyDestroyed() {

		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {"
2561,createSwipeBack,"	private static SwipeBack createSwipeBack(Activity activity, int dragMode, Position position, Type type, SwipeBackTransformer transformer) {

		SwipeBack drawerHelper;

		if (type == Type.OVERLAY) {
			drawerHelper = new OverlaySwipeBack(activity, dragMode);


		} else {
			drawerHelper = new SlidingSwipeBack(activity, dragMode);"
2562,attach,"	public static SwipeBack attach(Activity activity, Type type, Position position, int dragMode, SwipeBackTransformer transformer) {

		SwipeBack swipeBack = createSwipeBack(activity, dragMode, position, type, transformer);
		swipeBack.setId(R.id.sb__swipeBack);

"
2563,attach,"	public static SwipeBack attach(Activity activity, Type type,
			Position position) {
		return attach(activity, type, position, DRAG_WINDOW);"
2564,attach,"	public static SwipeBack attach(Activity activity, Type type,
			Position position, int dragMode) {
		return attach(activity, type, position, dragMode,"
2565,attach,"	public static SwipeBack attach(Activity activity, Type type, Position position, SwipeBackTransformer transformer) {
		return attach(activity, type, position, DRAG_WINDOW, transformer);
	}"
2566,attach,"	public static SwipeBack attach(Activity activity, Position position) {
		return attach(activity, Type.BEHIND, position);
	}"
2567,attach,"	public static SwipeBack attach(Activity activity, Position position, SwipeBackTransformer transformer) {
		return attach(activity, Type.BEHIND, position, transformer);
	}"
2568,attach,"	public static SwipeBack attach(Activity activity, Type type, SwipeBackTransformer transformer) {
		return attach(activity, type, Position.START);
	}"
2569,attach,"	public static SwipeBack attach(Activity activity, Type type) {
		return attach(activity, type, Position.START);
	}"
2570,attach,"	public static SwipeBack attach(Activity activity, SwipeBackTransformer transformer) {
		return attach(activity, Type.BEHIND, transformer);
	}"
2571,attach,"	public static SwipeBack attach(Activity activity) {
		return attach(activity, Type.BEHIND);
	}"
2572,isViewDraggable,"		boolean isViewDraggable(View v, int delta, int x, int y);
	}"
2573,onSlide,"		void onSlide(float openRatio, int offsetPixels);
	}"
2574,onStateChanged,"		void onStateChanged(int oldState, int newState);
"
2576,onPointerUp,"	 private void onPointerUp(MotionEvent ev) {
		 final int pointerIndex = ev.getActionIndex();
		 final int pointerId = ev.getPointerId(pointerIndex);
		 if (pointerId == mActivePointerId) {
			 final int newPointerIndex = pointerIndex == 0 ? 1 : 0;"
2577,onTouchEvent,"	 public boolean onTouchEvent(MotionEvent ev) {
		 if (!mSwipeBackViewVisible && !mIsDragging && mTouchMode == TOUCH_MODE_NONE) {
			 return false;
		 }
		 final int action = ev.getAction() & MotionEvent.ACTION_MASK;

		 if (mVelocityTracker == null) {
			 mVelocityTracker = VelocityTracker.obtain();"
2586,offsetMenu,"	private void offsetMenu(int offsetPixels) {
		 if (!mOffsetMenu || mSwipeBackViewSize == 0) {
			 return;
		 }

		 final int width = getWidth();
		 final int height = getHeight();

		 final int menuSize = mSwipeBackViewSize;
		 final int sign = (int) (mOffsetPixels / Math.abs(mOffsetPixels));"
2587,onLayout,"	protected void onLayout(boolean changed, int l, int t, int r, int b) {
		final int width = r - l;
		final int height = b - t;

		if (USE_TRANSLATIONS) {
			mContentContainer.layout(0, 0, width, height);"
2589,onSizeChanged,"	protected void onSizeChanged(int w, int h, int oldw, int oldh) {
		super.onSizeChanged(w, h, oldw, oldh);
		onOffsetPixelsChanged((int) mOffsetPixels);
	}"
2592,close,"	public SwipeBack close(boolean animate) {
		animateOffsetTo(0, 0, animate);
		return this;
	}"
2594,init,"	protected void init(Context context, AttributeSet attrs, int defStyle) {
		super.init(context, attrs, defStyle);
		super.addView(mSwipeBackContainer, -1, new LayoutParams(
				LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
		super.addView(mContentContainer, -1, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));"
2597,onSwipeBackCompleted,"	public void onSwipeBackCompleted(SwipeBack swipeBack, Activity activity){
		activity.finish();
		activity.overridePendingTransition(R.anim.swipeback_slide_left_in, R.anim.swipeback_slide_right_out);
	}"
2598,onSwipeBackViewCreated,"	public void onSwipeBackViewCreated(SwipeBack swipeBack, Activity activity,
			final View swipeBackView) {

		arrowTop = swipeBackView.findViewById(R.id.arrowTop);
		arrowBottom = swipeBackView.findViewById(R.id.arrowBottom);
		textView = (TextView) swipeBackView.findViewById(R.id.text);"
2599,unscheduleDrawable,"    public void unscheduleDrawable(Drawable who, Runnable what) {
        if (who == mWrapped) {
            unscheduleSelf(what);"
2600,scheduleDrawable,"    public void scheduleDrawable(Drawable who, Runnable what, long when) {
        if (who == mWrapped) {
            scheduleSelf(what, when);"
2601,invalidateDrawable,"    public void invalidateDrawable(Drawable who) {
        if (who == mWrapped) {
            invalidateSelf();"
2608,onBoundsChange,"    protected void onBoundsChange(Rect bounds) {
        super.onBoundsChange(bounds);
        mWrapped.setBounds(bounds);
    }"
2609,onStateChange,"    protected boolean onStateChange(int[] state) {
        mWrapped.setState(state);
        return super.onStateChange(state);
    }"
2616,isStateful,"    public boolean isStateful() {
        return mWrapped.isStateful();
    }"
2617,clearColorFilter,"    public void clearColorFilter() {
        mWrapped.clearColorFilter();
    }"
2625,draw,"    public void draw(Canvas canvas) {
        mWrapped.copyBounds(mTmpRect);
        canvas.save();
        if (mIsRtl) {
            canvas.translate(1.f / 3 * mTmpRect.width() * mOffset, 0);
        } else {
            canvas.translate(1.f / 3 * mTmpRect.width() * -mOffset, 0);"
2630,onCreateView,"	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {

		View v = inflater.inflate(R.layout.fragment_simple, container, false);

		textView = (TextView) v.findViewById(R.id.textView);
"
2631,newInstance,"	public static SimpleFragment newInstance(String text, int backgroundColor) {
		SimpleFragment f = new SimpleFragment();
		f.text = text;
		f.backgroundColor = backgroundColor;
		return f;
	}"
2632,isScrollingInDirection,"    public boolean isScrollingInDirection(float xvel, float yvel) {
        return !mFinished && Math.signum(xvel) == Math.signum(mFinalX - mStartX)
                && Math.signum(yvel) == Math.signum(mFinalY - mStartY);"
2635,timePassed,"    public int timePassed() {
        return (int) (AnimationUtils.currentAnimationTimeMillis() - mStartTime);
    }"
2636,extendDuration,"    public void extendDuration(int extend) {
        int passed = timePassed();
        mDuration = passed + extend;
        mDurationReciprocal = 1.0f / mDuration;
        mFinished = false;
    }"
2637,abortAnimation,"    public void abortAnimation() {
        mCurrX = mFinalX;
        mCurrY = mFinalY;
        mFinished = true;
    }"
2641,startScroll,"    public void startScroll(int startX, int startY, int dx, int dy) {
        startScroll(startX, startY, dx, dy, DEFAULT_DURATION);
    }"
2642,computeScrollOffset,"    public boolean computeScrollOffset() {
        if (mFinished) {
            return false;
        }

        int timePassed = (int) (AnimationUtils.currentAnimationTimeMillis() - mStartTime);"
2651,forceFinished,"    public final void forceFinished(boolean finished) {
        mFinished = finished;
    }"
2652,isFinished,"    public final boolean isFinished() {
        return mFinished;
    }"
2655,fromValue,"    public static Position fromValue(int value) {
        return STRING_MAPPING.get(value);
    }"
2657,onPointerUp,"  private void onPointerUp(MotionEvent ev) {
    final int pointerIndex = ev.getActionIndex();
    final int pointerId = ev.getPointerId(pointerIndex);
    if (pointerId == mActivePointerId) {
      final int newPointerIndex = pointerIndex == 0 ? 1 : 0;"
2658,onTouchEvent,"  @Override public boolean onTouchEvent(MotionEvent ev) {
    if (!mSwipeBackViewVisible && !mIsDragging && mTouchMode == TOUCH_MODE_NONE) {
      return false;
    }
    final int action = ev.getAction() & MotionEvent.ACTION_MASK;

    if (mVelocityTracker == null) {
      mVelocityTracker = VelocityTracker.obtain();"
2660,stopAnimation,"  @Override protected void stopAnimation() {
    super.stopAnimation();
    removeCallbacks(mRevealRunnable);
  }"
2664,onMoveAllowDrag,"  protected boolean onMoveAllowDrag(int x, int y, float dx, float dy) {
    if (mSwipeBackViewVisible && mTouchMode == TOUCH_MODE_FULLSCREEN) {
      return true;
    }
"
2668,onLayout,"  @Override protected void onLayout(boolean changed, int l, int t, int r, int b) {
    final int width = r - l;
    final int height = b - t;

    mContentContainer.layout(0, 0, width, height);
"
2669,stopLayerTranslation,"  @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override protected void stopLayerTranslation() {
    if (mLayerTypeHardware) {
      mLayerTypeHardware = false;"
2670,startLayerTranslation,"  @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override protected void startLayerTranslation() {
    if (USE_TRANSLATIONS && mHardwareLayersEnabled && !mLayerTypeHardware) {
      mLayerTypeHardware = true;"
2673,onSizeChanged,"  @Override protected void onSizeChanged(int w, int h, int oldw, int oldh) {
    super.onSizeChanged(w, h, oldw, oldh);
    onOffsetPixelsChanged((int) mOffsetPixels);
  }"
2676,close,"  @Override public SwipeBack close(boolean animate) {
    animateOffsetTo(0, 0, animate);
    return this;
  }"
2681,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        return true;
    }"
2687,abortAnimation,"    public void abortAnimation() {
        mCurr = mFinal;
        mFinished = true;
    }"
2688,startScroll,"    public void startScroll(float start, float delta, int duration) {
        mFinished = false;
        mDuration = duration;
        mStartTime = AnimationUtils.currentAnimationTimeMillis();
        mStart = start;
        mFinal = start + delta;
        mDeltaX = delta;
        mDurationReciprocal = 1.0f / (float) mDuration;
    }"
2696,safeGetY,"	protected float safeGetY(MotionEvent ev) {
		try {
			return ev.getY(ev.findPointerIndex(mActivePointerId));"
2697,safeGetX,"	protected float safeGetX(MotionEvent ev) {
		try {
			return ev.getX(ev.findPointerIndex(mActivePointerId));"
2698,supportGetTranslationX,"	private int supportGetTranslationX(View v) {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			return (int) v.getTranslationX();
		}"
2699,supportGetTranslationY,"	private int supportGetTranslationY(View v) {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			return (int) v.getTranslationY();
		}"
2702,canChildScrollVertically,"	protected boolean canChildScrollVertically(View v, boolean checkV, int dx, int x, int y) {
		if (v instanceof ViewGroup) {
			final ViewGroup group = (ViewGroup) v;
"
2703,canChildScrollHorizontally,"	protected boolean canChildScrollHorizontally(View v, boolean checkV, int dx, int x, int y) {
		if (v instanceof ViewGroup) {
			final ViewGroup group = (ViewGroup) v;
"
2705,isCloseEnough,"	protected boolean isCloseEnough() {
		return Math.abs(mOffsetPixels) <= mCloseEnough;
	}"
2706,endPeek,"	protected void endPeek() {
		removeCallbacks(mPeekStartRunnable);
		removeCallbacks(mPeekRunnable);
		stopLayerTranslation();
	}"
2707,completePeek,"	private void completePeek() {
		mPeekScroller.abortAnimation();

		setOffsetPixels(0);

		setDrawerState(STATE_CLOSED);"
2708,run,"					public void run() {
						startPeek();
					}"
2709,peekDrawerInvalidate,"	private void peekDrawerInvalidate() {
		if (mPeekScroller.computeScrollOffset()) {
			final int oldX = (int) mOffsetPixels;
			final int x = mPeekScroller.getCurrX();"
2710,initPeekScroller,"	protected abstract void initPeekScroller();
"
2711,startPeek,"	protected void startPeek() {
		initPeekScroller();

		startLayerTranslation();
		peekDrawerInvalidate();"
2712,postAnimationInvalidate,"	private void postAnimationInvalidate() {
		if (mScroller.computeScrollOffset()) {
			final int oldX = (int) mOffsetPixels;
			final int x = mScroller.getCurrX();"
2713,animateOffsetTo,"	protected void animateOffsetTo(int position, int duration) {
		final int startX = (int) mOffsetPixels;
		final int dx = position - startX;

		if (dx > 0) {
			setDrawerState(STATE_OPENING);
			mScroller.startScroll(startX, 0, dx, 0, duration);"
2714,animateOffsetTo,"	protected void animateOffsetTo(int position, int velocity, boolean animate) {
		endDrag();
		endPeek();

		final int startX = (int) mOffsetPixels;
		final int dx = position - startX;
		if (dx == 0 || !animate) {
			setOffsetPixels(position);
			setDrawerState(position == 0 ? STATE_CLOSED : STATE_OPEN);
			stopLayerTranslation();
			return;
		}"
2716,completeAnimation,"	private void completeAnimation() {
		mScroller.abortAnimation();
		final int finalX = mScroller.getFinalX();
		setOffsetPixels(finalX);
		setDrawerState(finalX == 0 ? STATE_CLOSED : STATE_OPEN);
		stopLayerTranslation();
	}"
2717,stopAnimation,"	protected void stopAnimation() {
		removeCallbacks(mDragRunnable);
		mScroller.abortAnimation();
		stopLayerTranslation();
	}"
2718,endDrag,"	protected void endDrag() {
		mIsDragging = false;

		if (mVelocityTracker != null) {"
2719,stopLayerTranslation,"	protected void stopLayerTranslation() {
		if (mLayerTypeHardware) {
			mLayerTypeHardware = false;"
2720,startLayerTranslation,"	protected void startLayerTranslation() {
		if (USE_TRANSLATIONS && mHardwareLayersEnabled && !mLayerTypeHardware) {
			mLayerTypeHardware = true;"
2726,run,"			public void run() {
				startPeek();
			}"
2727,peekSwipeBack,"	public SwipeBack peekSwipeBack(final long startDelay, final long delay) {
		if (startDelay < 0) {
			throw new IllegalArgumentException(""startDelay must be zero or larger."");
		}
		if (delay < 0) {
			throw new IllegalArgumentException(""delay must be zero or larger"");
		}

		removeCallbacks(mPeekRunnable);
		removeCallbacks(mPeekStartRunnable);"
2728,peekSwipeBack,"	public SwipeBack peekSwipeBack(long delay) {
		peekSwipeBack(DEFAULT_PEEK_START_DELAY, delay);
		return this;
	}"
2729,peekSwipeBack,"	public SwipeBack peekSwipeBack() {
		peekSwipeBack(DEFAULT_PEEK_START_DELAY, DEFAULT_PEEK_DELAY);
		return this;
	}"
2733,isVisible,"	public boolean isVisible() {
		return mSwipeBackViewVisible;
	}"
2734,toggle,"	public SwipeBack toggle(boolean animate) {
		if (mDrawerState == STATE_OPEN || mDrawerState == STATE_OPENING) {
			close(animate);
		} else if (mDrawerState == STATE_CLOSED || mDrawerState == STATE_CLOSING) {"
2736,run,"		public void run() {
			postAnimationInvalidate();
		}"
2737,run,"		public void run() {
			peekDrawerInvalidate();
		}"
2740,onSwipeBackCompleted,"	public void onSwipeBackCompleted(SwipeBack swipeBack, Activity activity) {
		activity.finish();
		activity.overridePendingTransition(R.anim.swipeback_stack_to_front,
				R.anim.swipeback_stack_right_out);"
2743,newDrawable,"        public Drawable newDrawable(Resources res) {
            return new ColorDrawable(this);
        }"
2744,newDrawable,"        public Drawable newDrawable() {
            return new ColorDrawable(this);
        }"
2752,draw,"    public void draw(Canvas canvas) {
        if ((mState.mUseColor >>> 24) != 0) {
            mPaint.setColor(mState.mUseColor);"
2754,run,"                public void run() {
                    if (mAttached) {
                        final int layerType = getLayerType();"
2755,dispatchDraw,"    protected void dispatchDraw(Canvas canvas) {
        super.dispatchDraw(canvas);

        if (mChanged && SwipeBack.USE_TRANSLATIONS) {"
2756,run,"                public void run() {
                    mChanged = true;
                    invalidate();
                }"
2757,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);

        if (SwipeBack.USE_TRANSLATIONS && mHardwareLayersEnabled) {"
2758,onDetachedFromWindow,"    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        mAttached = false;
    }"
2759,onAttachedToWindow,"    protected void onAttachedToWindow() {
        super.onAttachedToWindow();
        mAttached = true;
    }"
2761,onAnimationUpdate,"            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                lp.height = (Integer) valueAnimator.getAnimatedValue();
                mView.setLayoutParams(lp);
            }"
2764,onAnimationEnd,"                                public void onAnimationEnd(Animator animation) {
                                    performDismiss();
                                }"
2766,onDismiss,"        void onDismiss(View view, Object token);
    }"
2768,onAttachedToRecyclerView,"    public void onAttachedToRecyclerView(RecyclerView recyclerView) {
        super.onAttachedToRecyclerView(recyclerView);
    }"
2769,onClick,"            public void onClick(View v) {
                animationCardUp(cardViewHolder.card, cardViewHolder.toolbar, duration);
            }"
2770,onClick,"            public void onClick(View v) {
                animationCardDown(cardViewHolder.card, cardViewHolder.toolbar, duration);
            }"
2771,onClick,"                    public void onClick(View v) {
                        if (!back) {
                            cardViewHolder.creditCardView.showBack();"
2779,onFinish,"            public void onFinish() {
                card.animate()
                        .translationY(height - (card.getHeight() + toolbar.getHeight()))"
2780,onTick,"            public void onTick(long millisUntilFinished) {
            }"
2781,animationCardUp,"    public void animationCardUp(@NotNull final CardView card,  final Toolbar toolbar, final long duration){
        new CountDownTimer(1, 1) {
            public void onTick(long millisUntilFinished) {"
2782,onFinish,"            public void onFinish() {
                card.animate()
                        .translationY(height - ((int)(toolbar.getHeight() * 1.7)))"
2784,animationCardDown,"    public void animationCardDown(@NotNull final CardView card, @NotNull final Toolbar toolbar, final long duration){
        new CountDownTimer(1, 1) {
            public void onTick(long millisUntilFinished) {"
2785,onAnimationEnd,"                            public void onAnimationEnd(Animator animation) {
                                super.onAnimationEnd(animation);
                                card.setVisibility(View.VISIBLE);
                            }"
2786,onFinish,"            public void onFinish() {
                card.animate()
                        .translationY(height - ((int) (toolbar.getHeight() * 1.7)))"
2788,animationCardStart,"    public void animationCardStart(@NotNull final CardView card, @NotNull final Toolbar toolbar){
        new CountDownTimer(1, 1) {
            public void onTick(long millisUntilFinished) {"
2792,updateMapContents,"    protected void updateMapContents(OptionView mOptionView) {
        mGoogleMap.clear();
        if(mOptionView.isMultipleMarker() && !mOptionView.isSingleMarker()) {
            LatLngBounds.Builder builder = new LatLngBounds.Builder();"
2793,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {

        if (!mOptionView.isAutoAnimation()) {"
2794,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent ev) {
        if(!mOptionView.isAutoAnimation()) {
            if (isLocked) {"
2799,updateMapContents,"    protected void updateMapContents() {
        mGoogleMap.clear();
        if(mOptionView.isMultipleMarker() && !mOptionView.isSingleMarker()) {
            LatLngBounds.Builder builder = new LatLngBounds.Builder();"
2800,onClick,"    public void onClick(View v) {
        animationCardUp(card, toolbar, duration);
    }"
2801,onFinish,"            public void onFinish() {
                card.animate()
                        .translationY(height - (card.getHeight() + toolbar.getHeight()))
                        .setDuration(duration).start();"
2803,animationCardUp,"    public void animationCardUp(@NotNull final CardView card, @NotNull final Toolbar toolbar, final long duration){
        new CountDownTimer(1, 1) {
            public void onTick(long millisUntilFinished) {"
2804,onFinish,"            public void onFinish() {
                card.animate()
                        .translationY(height - ((int)(toolbar.getHeight() * 1.7)))
                        .setDuration(duration).start();"
2807,onFinish,"            public void onFinish() {
                card.setTranslationY(height - ((int)(toolbar.getHeight() * 1.7)));
                fab.setTranslationY((height - ((int) (toolbar.getHeight() * 1.7))) + card.getHeight() - (fab.getHeight() - fab.getHeight() / 4));
            }"
2808,onTick,"            public void onTick(long millisUntilFinished) {
                card.setTranslationY(height - ((int)(toolbar.getHeight() * 1.7)));
                fab.setTranslationY((height - ((int) (toolbar.getHeight() * 1.7))) + card.getHeight() - (fab.getHeight() - fab.getHeight() / 4));
            }"
2809,animationCardStart,"    public void animationCardStart(@NotNull final CardView card, @NotNull final Toolbar toolbar){
        new CountDownTimer(300, 1) {
            public void onTick(long millisUntilFinished) {"
2810,onFinishInflate,"    protected void onFinishInflate() {
        super.onFinishInflate();
    }"
2811,initToolbar,"    private void initToolbar(Context context, OptionView option)
    {
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        toolbar.setTitle(titleAttr);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if(colorTitleAttr == 0)"
2813,onClick,"                                                public void onClick(View v) {
                                                    setVisibility(View.VISIBLE);
                                                }"
2814,onDismiss,"                            public void onDismiss(View view, Object token) {
                                setVisibility(View.GONE);
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
                                    Snackbar.make(SwipeableCard.this, ""Deleted!"", Snackbar.LENGTH_LONG)"
2815,canDismiss,"                            public boolean canDismiss(Object token) {
                                return true;
                            }"
2816,onClick,"                public void onClick(View v) {
                    animationCardDown(card, toolbar, duration);
                }"
2817,onClick,"                        public void onClick(View v) {
                            if (!back) {
                                creditCardView.showBack();"
2819,init,"    public void init(@NotNull final Context context, @NotNull final OptionView option){
        if(option != null)
        {"
2837,isTextBtn2,"    public boolean isTextBtn2() {
        return isTextBtn2;
    }"
2838,isTextBtn1,"    public boolean isTextBtn1() {
        return isTextBtn1;
    }"
2839,isIconBtn3,"    public boolean isIconBtn3() {
        return isIconBtn3;
    }"
2840,isIconBtn2,"    public boolean isIconBtn2() {
        return isIconBtn2;
    }"
2841,isIconBtn1,"    public boolean isIconBtn1() {
        return isIconBtn1;
    }"
2842,build,"        public OptionViewAdditional build() {
            return new OptionViewAdditional(this);
        }"
2843,textButton,"        public Builder textButton(@NotNull String... text)
        {
            if(text.length > 2)
            {
                Log.e(""TextColorButton"", ""Impossible to set Text Button value more than 2! Please Check it"");
                throw new IllegalArgumentException(""Impossible to set Text Button value more than 2! Please Check it"");"
2844,iconButton,"        public Builder iconButton(@DrawableRes int... icon)
        {
            if(icon.length > 3)
            {
                Log.e(""TextColorButton"", ""Impossible to set Icon Button value more than 3! Please Check it"");
                throw new IllegalArgumentException(""Impossible to set Icon Button value more than 3! Please Check it"");
            }"
2845,textColorButton,"        public Builder textColorButton(@ColorRes int... color)
        {
            if(color.length > 2)
            {
                Log.e(""TextColorButton"", ""Impossible to set Text Color Button value more than 2! Please Check it"");
                throw new IllegalArgumentException(""Impossible to set Text Color Button value more than 2! Please Check it"");"
2846,textSize,"        public Builder textSize(float... size)
        {
            if(size.length > 2)
            {
                Log.e(""TextSizeButton"", ""Impossible to set Text Size value more than 2! Please Check it"");
                throw new IllegalArgumentException(""Impossible to set Text Size value more than 2! Please Check it"");"
2852,build,"        public OptionView build() {
            return new OptionView(this);
        }"
2853,toolbarColor,"        public NormalCard toolbarColor(@ColorRes int toolbarColor) {

            if(toolbarColor == 0)
            {"
2854,image,"        public NormalCard image(@DrawableRes int image) {
            mImage = image;
            isImage = true;
            isText = false;
            return this;
        }"
2855,subTitle,"        public NormalCard subTitle(@NotNull String subTitle) {
            mSubTitle = subTitle;
            isSubTitle = true;
            return this;
        }"
2856,text,"        public NormalCard text(@NotNull String text) {
            mText = text;
            isImage = false;
            isText = true;
            return this;
        }"
2857,title,"        public NormalCard title(@NotNull String title) {
            mTitle = title;
            return this;
        }"
2858,menuItem,"        public NormalCard menuItem(@AnyRes int menuItem) {

            if(menuItem == 0)
            {"
2859,colorTitle,"        public NormalCard colorTitle(@ColorRes int colorTitle) {
            mColorTitle = colorTitle;
            return this;
        }"
2860,toolbarListener,"        public NormalCard toolbarListener(@NotNull Toolbar.OnMenuItemClickListener toolbarListener)
        {
            mToolbarListener = toolbarListener;
            return this;"
2867,toolbarColor,"        public MapsCard toolbarColor(@ColorRes int toolbarColor) {

            if(toolbarColor == 0)
            {"
2868,subTitle,"        public MapsCard subTitle(@NotNull String subTitle) {
            mSubTitle = subTitle;
            isSubTitle = true;
            return this;
        }"
2869,title,"        public MapsCard title(@NotNull String title) {
            mTitle = title;
            return this;
        }"
2870,menuItem,"        public MapsCard menuItem(@AnyRes int menuItem) {

            if(menuItem == 0)
            {"
2871,colorTitle,"        public MapsCard colorTitle(@ColorRes int colorTitle) {
            mColorTitle = colorTitle;
            return this;
        }"
2872,toolbarListener,"        public MapsCard toolbarListener(@NotNull Toolbar.OnMenuItemClickListener toolbarListener)
        {
            mToolbarListener = toolbarListener;
            return this;"
2877,withStreetName,"        public MapsCard withStreetName(boolean isStreetName)
        {
            this.isStreetName = isStreetName;
            return this;"
2891,toolbarColor,"        public CreditCard toolbarColor(@ColorRes int toolbarColor) {

            if(toolbarColor == 0)
            {"
2892,subTitle,"        public CreditCard subTitle(@NotNull String subTitle) {
            mSubTitle = subTitle;
            isSubTitle = true;
            return this;
        }"
2893,title,"        public CreditCard title(@NotNull String title) {
            mTitle = title;
            return this;
        }"
2894,menuItem,"        public CreditCard menuItem(@AnyRes int menuItem) {

            if(menuItem == 0)
            {"
2895,colorTitle,"        public CreditCard colorTitle(@ColorRes int colorTitle) {
            mColorTitle = colorTitle;
            return this;
        }"
2896,toolbarListener,"        public CreditCard toolbarListener(@NotNull Toolbar.OnMenuItemClickListener toolbarListener)
        {
            mToolbarListener = toolbarListener;
            return this;"
2909,isCreateCreditCard,"    public boolean isCreateCreditCard() {
        return createCreditCard;
    }"
2915,isAutoAnimation,"    public boolean isAutoAnimation() {
        return autoAnimation;
    }"
2923,isSingleMarker,"    public boolean isSingleMarker() {
        return singleMarker;
    }"
2924,isMultipleMarker,"    public boolean isMultipleMarker() {
        return multipleMarker;
    }"
2925,isStreetName,"    public boolean isStreetName() {
        return isStreetName;
    }"
2928,isTypeCardCredit,"    public boolean isTypeCardCredit() {
        return TYPE_CARD_CREDIT;
    }"
2929,isTypeCardMaps,"    public boolean isTypeCardMaps() {
        return TYPE_CARD_MAPS;
    }"
2930,isTypeCardNormal,"    public boolean isTypeCardNormal() {
        return TYPE_CARD_NORMAL;
    }"
2933,isSubTitle,"    public boolean isSubTitle()
    {
        return isSubTitle;"
2934,isText,"    public boolean isText()
    {
        return isText;"
2935,isImage,"    public boolean isImage()
    {
        return isImage;"
2936,isMenuItem,"    public boolean isMenuItem()
    {
        return isMenuItem;"
2937,isSwipeToDismiss,"    public boolean isSwipeToDismiss()
    {
        return isSwipeLeftRight;"
2951,creditCard,"        public CreditCard creditCard() {
            return new CreditCard();
        }"
2952,mapsCard,"        public MapsCard mapsCard()
        {
            return new MapsCard();"
2953,normalCard,"        public NormalCard normalCard()
        {
            return new NormalCard();"
2955,onFinish,"                    public void onFinish() {
                        mCardView.animate()
                                .translationY(height - (mCardView.getHeight() + mStartCardPosition))"
2957,animationCustomCardUp,"    public void animationCustomCardUp()
    {
        final int height = getScreenSize(mContext);
        new CountDownTimer(1, 1) {"
2958,onFinish,"                    public void onFinish() {
                        mCardView.animate()
                                .translationY(height - ((int) (mStartCardPosition * 1.7)))"
2959,onTick,"                    public void onTick(long millisUntilFinished) {
                    }"
2960,animationCustomCardDown,"    public void animationCustomCardDown()
    {
        final int height = getScreenSize(mContext);
                new CountDownTimer(1, 1) {"
2961,onFinish,"            public void onFinish() {
                mCardView.setTranslationY(height - ((int)(mStartCardPosition * 1.7)));
            }"
2962,onTick,"            public void onTick(long millisUntilFinished) {
                mCardView.setTranslationY(height - ((int)(mStartCardPosition * 1.7)));
            }"
2963,animationCustomCardStart,"    private void animationCustomCardStart()
    {
        final int height = getScreenSize(mContext);
        new CountDownTimer(300, 1) {"
2964,setAutoAnimation,"    Card setAutoAnimation(boolean autoAnimation);
}"
2966,setAdditionalItem,"    Card setAdditionalItem(@NotNull OptionViewAdditional option);
"
2967,setDuration,"    Card setDuration(long durationInMillis);
"
2968,toolbarListener,"    Card toolbarListener(@NotNull Toolbar.OnMenuItemClickListener toolbarListener);
"
2969,colorTitle,"    Card colorTitle(@ColorRes int colorTitle);
"
2972,subTitle,"    Card subTitle(@NotNull String subTitle);
"
2973,setSwipeToDismiss,"    Card setSwipeToDismiss(boolean isSwipe);
"
2974,toolbarColor,"    Card toolbarColor(@ColorRes int toolbarColor);
"
2976,animationCardUp,"    void animationCardUp(final CardView card, final Toolbar toolbar, long duration);
}"
2977,animationCardDown,"    void animationCardDown(final CardView card, final Toolbar toolbar, long duration);
"
2978,animationCardStart,"    void animationCardStart(final CardView card, final Toolbar toolbar);
"
2979,onBackPressed,"    public void onBackPressed() {
        this.finish();
    }"
2980,onClick,"                public void onClick(View v) {
                    if (!back) {
                        creditCardView.showBack();"
2981,onActivityResult,"    public void onActivityResult(int reqCode, int resultCode, Intent data) {

        if(resultCode == RESULT_OK) {"
2982,onCreate,"    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        Intent intent = new Intent(ActivityCardCreation.this, CardEditActivity.class);
        startActivityForResult(intent, 1);"
2984,endElement,"		public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
			if (localName.equals(""svg"")) {
				if (canvasRestoreCount != null) {"
2985,characters,"		public void characters(char ch[], int start, int length) {
			if (this.drawCharacters) {
				if (length == 1 && ch[0] == '\n') {"
2986,currentLayerAttributes,"		public LayerAttributes currentLayerAttributes() {
			return layerAttributeStack.getLast();
		}"
2988,popTransform,"		private void popTransform() {
			if (transformStack.removeLast()) {
				canvas.restore();"
2989,pushTransform,"		private void pushTransform(Attributes atts) {
			final String transform = getStringAttr(""transform"", atts);
			boolean pushed = transform != null;
			transformStack.addLast(pushed);
			if (pushed) {
				final Matrix matrix = parseTransform(transform);"
2990,doLimits,"		private void doLimits(RectF box) {
			doLimits(box, null);
		}"
2991,doLimits,"		private void doLimits(RectF box, Paint paint) {
			Matrix m = matrixStack.getLast();
			m.mapRect(tmpLimitRect, box);
			float width2 = (paint == null) ? 0 : paint.getStrokeWidth() / 2;
			doLimits2(tmpLimitRect.left - width2, tmpLimitRect.top - width2);
			doLimits2(tmpLimitRect.right + width2, tmpLimitRect.bottom + width2);
		}"
2992,doLimits2,"		private void doLimits2(float x, float y) {
			if (x < limits.left) {
				limits.left = x;
			}
			if (x > limits.right) {
				limits.right = x;"
2993,toFloat,"		private static float toFloat(String s, float dflt) {
			float result = dflt;
			try {
				result = Float.parseFloat(s);
			} catch (NumberFormatException e) {"
2996,finishGradients,"        private void finishGradients() {
        	for(Gradient gradient : gradientMap.values()) {
                if (gradient.xlink != null) {"
3008,hex3Tohex6,"		private int hex3Tohex6(int x) {
			return (x & 0xF00) << 8 | (x & 0xF00) << 12 | (x & 0xF0) << 4 | (x & 0xF0) << 8 | (x & 0xF) << 4
					| (x & 0xF);"
3010,parseNum,"		private int parseNum(String v) throws NumberFormatException {
			if (v.endsWith(""%"")) {
				v = v.substring(0, v.length() - 1);
				return Math.round(Float.parseFloat(v) / 100 * 255);"
3011,rgb,"		private Integer rgb(int r, int g, int b) {
			return ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
		}"
3015,inherit,"        public void inherit(Gradient parent) {
            Gradient child = this;
            child.xlink = parent.id;
            child.positions = parent.positions;
            child.colors = parent.colors;
            if (child.matrix == null) {
                child.matrix = parent.matrix;"
3018,parseFloatValue,"	private static Float parseFloatValue(String str, Float defaultValue) {
		if (str == null) {
			return defaultValue;
		} else if (str.endsWith(""px"")) {"
3025,angle,"	private static float angle(float x1, float y1, float x2, float y2) {

		return (float) Math.toDegrees(Math.atan2(x1, y1) - Math.atan2(x2, y2)) % 360;"
3027,parseTransformItem,"	private static Matrix parseTransformItem(String s, Matrix matrix) {
		if (s.startsWith(""matrix("")) {
			NumberParse np = parseNumbers(s.substring(""matrix("".length()));
			if (np.numbers.size() == 6) {"
3030,parse,"	static SVG parse(InputSource data, SVGHandler handler) throws SVGParseException {
		try {
			final Picture picture = new Picture();"
3031,parsePath,"	public static Path parsePath(String pathString) {
		return doPath(pathString);
	}"
3033,newDrawable,"		public Drawable newDrawable() {

			return new SVGDrawable(mSvg);"
3037,onBoundsChange,"	protected void onBoundsChange(Rect bounds) {

		super.onBoundsChange(bounds);"
3038,mapColour,"	public static Integer mapColour(String colour) {
		return COLOURS.get(colour);
	}"
3039,build,"	public SVG build() throws SVGParseException {
		if (data == null) {
			throw new IllegalStateException(""SVG input not specified. Call one of the readFrom...() methods first."");
		}"
3047,clearColorSwap,"	public SVGBuilder clearColorSwap() {
		searchColor = replaceColor = null;
		return this;
	}"
3048,readFromAsset,"	public SVGBuilder readFromAsset(AssetManager assetMngr, String svgPath) throws IOException {
		this.data = assetMngr.open(svgPath);
		return this;
	}"
3049,readFromResource,"	public SVGBuilder readFromResource(Resources resources, int resId) {
		this.data = resources.openRawResource(resId);
		return this;
	}"
3050,readFromString,"	public SVGBuilder readFromString(String svgData) {
		this.data = new ByteArrayInputStream(svgData.getBytes());
		return this;
	}"
3051,readFromInputStream,"	public SVGBuilder readFromInputStream(InputStream svgData) {
		this.data = svgData;
		return this;
	}"
3057,nextFlag,"	public int nextFlag() {
		skipWhitespace();
		int flag = current - '0';
		current = read();
		skipNumberSeparator();
		return flag;
	}"
3058,nextFloat,"	public float nextFloat() {
		skipWhitespace();
		float f = parseFloat();
		skipNumberSeparator();
		return f;
	}"
3059,buildFloat,"	public static float buildFloat(int mant, int exp) {
		if (exp < -125 || mant == 0) {
			return 0.0f;
		}

		if (exp >= 128) {
			return (mant > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;"
3060,reportUnexpectedCharacterError,"	private void reportUnexpectedCharacterError(char c) {
		throw new RuntimeException(""Unexpected char '"" + c + ""'."");
	}"
3062,advance,"	public void advance() {
		current = read();
	}"
3063,skipNumberSeparator,"	public void skipNumberSeparator() {
		while (pos < n) {
			char c = s[pos];"
3064,skipWhitespace,"	public void skipWhitespace() {
		while (pos < n) {
			if (Character.isWhitespace(s[pos])) {"
3065,read,"	private char read() {
		if (pos < n) {
			pos++;
		}"
3066,postEvent,"    public boolean postEvent(Event event) {

        if (eventQueue == null)

            return false;"
3067,removeEventQueue,"    public void removeEventQueue() {

        eventQueue = null;"
3071,unshift,"    private synchronized Event unshift() {

        

        if (bufferLength == 0)

            return null;"
3072,poll,"    public Event poll() {

        

        Event event;"
3078,stop,"    public void stop() {

        runs = true;"
3079,runs,"    public boolean runs() {

        return runs;"
3080,run,"    public void run() {

        while (runs) {"
3081,start,"    public void start() {

        runs = true;
"
3082,countListeners,"    public int countListeners() {

        return listeners.size();"
3083,removeListener,"    public void removeListener(EventListener listener) {

        listeners.remove(listener);"
3084,addListener,"    public void addListener(EventListener listener) {

        listeners.add(listener);"
3088,main,"  public static void main(String[] args) throws Exception {

    TopologyBuilder builder = new TopologyBuilder();

    builder.setSpout(""spout"", new RandomSentenceSpout(), 5);

    builder.setBolt(""split"", new SplitSentence(), 8).shuffleGrouping(""spout"");
    builder.setBolt(""count"", new WordCount(), 12).fieldsGrouping(""split"", new Fields(""word""));
"
3089,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""word"", ""count""));
    }"
3090,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      String word = tuple.getString(0);
      Integer count = counts.get(word);
      if (count == null)
        count = 0;
      count++;
      counts.put(word, count);
      collector.emit(new Values(word, count));"
3092,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""word""));
    }"
3094,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""bucket"", ""count""));
    }"
3095,finishBatch,"    public void finishBatch() {
      for (Integer bucket : _accum.keySet()) {
        BucketValue currVal = BUCKET_DATABASE.get(bucket);"
3096,execute,"    public void execute(Tuple tuple) {
      Integer bucket = tuple.getInteger(1);
      Integer delta = tuple.getInteger(2);
      Integer curr = _accum.get(bucket);
      if (curr == null)
        curr = 0;
      _accum.put(bucket, curr + delta);"
3097,prepare,"    public void prepare(Map conf, TopologyContext context, BatchOutputCollector collector, TransactionAttempt attempt) {
      _collector = collector;
      _attempt = attempt;
    }"
3098,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""attempt"", ""bucket"", ""delta""));
    }"
3099,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      TransactionAttempt attempt = (TransactionAttempt) tuple.getValue(0);
      int curr = tuple.getInteger(2);
      Integer prev = tuple.getInteger(3);

      int currBucket = curr / BUCKET_SIZE;
      Integer prevBucket = null;
      if (prev != null) {
        prevBucket = prev / BUCKET_SIZE;"
3100,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""key"", ""count"", ""prev-count""));
    }"
3101,finishBatch,"    public void finishBatch() {
      for (String key : _counts.keySet()) {
        CountValue val = COUNT_DATABASE.get(key);"
3102,execute,"    public void execute(Tuple tuple) {
      String key = tuple.getString(1);
      Integer curr = _counts.get(key);
      if (curr == null)
        curr = 0;
      _counts.put(key, curr + 1);"
3103,prepare,"    public void prepare(Map conf, TopologyContext context, BatchOutputCollector collector, TransactionAttempt id) {
      _collector = collector;
      _id = id;
    }"
3105,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""sum""));
    }"
3107,execute,"    public void execute(Tuple tuple) {
      _sum += tuple.getInteger(1);
    }"
3109,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""count""));
    }"
3110,finishBatch,"    public void finishBatch() {
      _collector.emit(new Values(_id, _count));
    }"
3111,execute,"    public void execute(Tuple tuple) {
      _count++;
    }"
3112,prepare,"    public void prepare(Map conf, TopologyContext context, BatchOutputCollector collector, Object id) {
      _collector = collector;
      _id = id;
    }"
3114,updateRankingsWithTuple,"  void updateRankingsWithTuple(Tuple tuple) {
    Rankings rankingsToBeMerged = (Rankings) tuple.getValue(0);
    super.getRankings().updateWith(rankingsToBeMerged);
    super.getRankings().pruneZeroCounts();
  }"
3120,incrementCountData,"  public Object[][] incrementCountData() {
    return new Object[][]{ { new String[]{ ""foo"", ""bar"" }, new int[]{ 3, 2 } } };
  }"
3123,positiveNumSlotsShouldBeOk,"  public void positiveNumSlotsShouldBeOk(int numSlots) {
    new SlotBasedCounter<Object>(numSlots);
  }"
3124,legalNumSlotsData,"  public Object[][] legalNumSlotsData() {
    return new Object[][]{ { 1 }, { 2 }, { 3 }, { 20 } };
  }"
3125,negativeOrZeroNumSlotsShouldThrowIAE,"  public void negativeOrZeroNumSlotsShouldThrowIAE(int numSlots) {
    new SlotBasedCounter<Object>(numSlots);
  }"
3126,illegalNumSlotsData,"  public Object[][] illegalNumSlotsData() {
    return new Object[][]{ { -10 }, { -3 }, { -2 }, { -1 }, { 0 } };
  }"
3127,wipeZeros,"  public void wipeZeros() {
    Set<T> objToBeRemoved = new HashSet<T>();
    for (T obj : objToCounts.keySet()) {
      if (shouldBeRemovedFromCounter(obj)) {
        objToBeRemoved.add(obj);"
3128,shouldBeRemovedFromCounter,"  private boolean shouldBeRemovedFromCounter(T obj) {
    return computeTotalCount(obj) == 0;
  }"
3129,resetSlotCountToZero,"  private void resetSlotCountToZero(T obj, int slot) {
    long[] counts = objToCounts.get(obj);
    counts[slot] = 0;
  }"
3130,wipeSlot,"  public void wipeSlot(int slot) {
    for (T obj : objToCounts.keySet()) {
      resetSlotCountToZero(obj, slot);"
3131,computeTotalCount,"  private long computeTotalCount(T obj) {
    long[] curr = objToCounts.get(obj);
    long total = 0;
    for (long l : curr) {
      total += l;
    }"
3134,incrementCount,"  public void incrementCount(T obj, int slot) {
    long[] counts = objToCounts.get(obj);
    if (counts == null) {
      counts = new long[this.numSlots];
      objToCounts.put(obj, counts);"
3136,simulatedCounterIterations,"  public Object[][] simulatedCounterIterations() {
    return new Object[][]{ { 2, new int[]{ 3, 2, 0, 0, 1, 0, 0, 0 }, new long[]{ 3, 5, 2, 0, 1, 1, 0, 0 } },
        { 3, new int[]{ 3, 2, 0, 0, 1, 0, 0, 0 }, new long[]{ 3, 5, 5, 2, 1, 1, 1, 0 } },"
3138,twoOrMoreSlotsShouldBeValid,"  public void twoOrMoreSlotsShouldBeValid(int windowLengthInSlots) {
    new SlidingWindowCounter<Object>(windowLengthInSlots);
  }"
3139,legalWindowLengths,"  public Object[][] legalWindowLengths() {
    return new Object[][]{ { 2 }, { 3 }, { 20 } };
  }"
3140,lessThanTwoSlotsShouldThrowIAE,"  public void lessThanTwoSlotsShouldThrowIAE(int windowLengthInSlots) {
    new SlidingWindowCounter<Object>(windowLengthInSlots);
  }"
3141,illegalWindowLengths,"  public Object[][] illegalWindowLengths() {
    return new Object[][]{ { -10 }, { -3 }, { -2 }, { -1 }, { 0 }, { 1 } };
  }"
3142,slotAfter,"  private int slotAfter(int slot) {
    return (slot + 1) % windowLengthInSlots;
  }"
3143,advanceHead,"  private void advanceHead() {
    headSlot = tailSlot;
    tailSlot = slotAfter(tailSlot);
  }"
3145,incrementCount,"  public void incrementCount(T obj) {
    objCounter.incrementCount(obj, headSlot);
  }"
3147,expire,"    public void expire(List<Object> id, Map<GlobalStreamId, Tuple> tuples) {
      for (Tuple tuple : tuples.values()) {
        _collector.fail(tuple);"
3148,declareOutputFields,"  public void declareOutputFields(OutputFieldsDeclarer declarer) {
    declarer.declare(_outFields);
  }"
3151,main,"  public static void main(String[] args) throws Exception {
    new RollingTopWords().run();
  }"
3152,run,"  public void run() throws InterruptedException {
    StormRunner.runTopologyLocally(builder.createTopology(), topologyName, topologyConfig, runtimeInSeconds);
  }"
3154,createTopologyConfiguration,"  private static Config createTopologyConfiguration() {
    Config conf = new Config();
    conf.setDebug(true);
    return conf;
  }"
3156,declareOutputFields,"  public void declareOutputFields(OutputFieldsDeclarer declarer) {
    declarer.declare(new Fields(""obj"", ""count"", ""actualWindowLengthInSeconds""));
  }"
3157,countObjAndAck,"  private void countObjAndAck(Tuple tuple) {
    Object obj = tuple.getValue(0);
    counter.incrementCount(obj);
    collector.ack(tuple);
  }"
3158,emit,"  private void emit(Map<Object, Long> counts, int actualWindowLengthInSeconds) {
    for (Entry<Object, Long> entry : counts.entrySet()) {
      Object obj = entry.getKey();"
3160,execute,"  public void execute(Tuple tuple) {
    if (TupleHelpers.isTickTuple(tuple)) {
      LOG.debug(""Received tick tuple, triggering emit of current window counts"");"
3161,prepare,"  public void prepare(Map stormConf, TopologyContext context, OutputCollector collector) {
    this.collector = collector;
    lastModifiedTracker = new NthLastModifiedTimeTracker(deriveNumWindowChunksFrom(this.windowLengthInSeconds,
        this.emitFrequencyInSeconds));"
3162,deriveNumWindowChunksFrom,"  private int deriveNumWindowChunksFrom(int windowLengthInSeconds, int windowUpdateFrequencyInSeconds) {
    return windowLengthInSeconds / windowUpdateFrequencyInSeconds;
  }"
3163,main,"  public static void main(String[] args) throws Exception {
    LinearDRPCTopologyBuilder builder = construct();


    Config conf = new Config();"
3165,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""reach""));
    }"
3167,execute,"    public void execute(Tuple tuple) {
      _count += tuple.getInteger(1);
    }"
3169,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""partial-count""));
    }"
3170,finishBatch,"    public void finishBatch() {
      _collector.emit(new Values(_id, _followers.size()));
    }"
3171,execute,"    public void execute(Tuple tuple) {
      _followers.add(tuple.getString(1));
    }"
3173,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""follower""));
    }"
3174,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      Object id = tuple.getValue(0);
      String tweeter = tuple.getString(1);
      List<String> followers = FOLLOWERS_DB.get(tweeter);
      if (followers != null) {
        for (String follower : followers) {"
3175,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""tweeter""));
    }"
3176,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      Object id = tuple.getValue(0);
      String url = tuple.getString(1);
      List<String> tweeters = TWEETERS_DB.get(url);
      if (tweeters != null) {
        for (String tweeter : tweeters) {"
3179,run,"      public void run() {
        for (Rankable r : entries) {
          try {"
3182,removeZeroRankingsData,"  public Object[][] removeZeroRankingsData() {
    return new Object[][]{ { Lists.newArrayList(A, ZERO), Lists.newArrayList(A) }, { Lists.newArrayList(A),
        Lists.newArrayList(A) }, { Lists.newArrayList(ZERO, A), Lists.newArrayList(A) }, { Lists.newArrayList(ZERO),"
3184,duplicatesData,"  public Object[][] duplicatesData() {
    Rankable A1 = new RankableObjectWithFields(""A"", 1);
    Rankable A2 = new RankableObjectWithFields(""A"", 2);
    Rankable A3 = new RankableObjectWithFields(""A"", 3);
    return new Object[][]{ { Lists.newArrayList(ANY_RANKABLE, ANY_RANKABLE, ANY_RANKABLE) }, { Lists.newArrayList(A1,
        A2, A3) }, };"
3186,simulatedRankingsAndOtherRankingsData,"  public Object[][] simulatedRankingsAndOtherRankingsData() {
    return new Object[][]{ { Lists.newArrayList(A), Lists.newArrayList(A), Lists.newArrayList(A) },
        { Lists.newArrayList(A, C), Lists.newArrayList(B, D), Lists.newArrayList(D, C, B, A) }, { Lists.newArrayList(B,"
3190,simulatedRankingsData,"  public Object[][] simulatedRankingsData() {
    return new Object[][]{ { Lists.newArrayList(A), Lists.newArrayList(A) }, { Lists.newArrayList(B, D, A, C),
        Lists.newArrayList(D, C, B, A) }, { Lists.newArrayList(B, F, A, C, D, E), Lists.newArrayList(F, E, D, C, B,"
3192,rankingsGrowData,"  public Object[][] rankingsGrowData() {
    return new Object[][]{ { 2, Lists.newArrayList(new RankableObjectWithFields(""A"", 1), new RankableObjectWithFields(
        ""B"", 2), new RankableObjectWithFields(""C"", 3)) }, { 2, Lists.newArrayList(new RankableObjectWithFields(""A"", 1),"
3194,shouldHaveDefaultConstructor,"  public void shouldHaveDefaultConstructor() {
    new Rankings();
  }"
3196,legalTopNData,"  public Object[][] legalTopNData() {
    return new Object[][]{ { 1 }, { 2 }, { 1000 }, { 1000000 } };
  }"
3198,defensiveCopyRankingsData,"  public Object[][] defensiveCopyRankingsData() {
    return new Object[][]{ { 5, Lists.newArrayList(A, B, C), Lists.newArrayList(D) }, { 2, Lists.newArrayList(A, B, C,
        D), Lists.newArrayList(E, F) }, { 1, Lists.newArrayList(), Lists.newArrayList(A) }, { 1, Lists.newArrayList(A),"
3200,copyRankingsData,"  public Object[][] copyRankingsData() {
    return new Object[][]{ { 5, Lists.newArrayList(A, B, C) }, { 2, Lists.newArrayList(A, B, C, D) },
        { 1, Lists.newArrayList() }, { 1, Lists.newArrayList(A) }, { 1, Lists.newArrayList(A, B) } };"
3201,constructorWithNegativeOrZeroTopNShouldThrowIAE,"  public void constructorWithNegativeOrZeroTopNShouldThrowIAE(int topN) {
    new Rankings(topN);
  }"
3202,illegalTopNData,"  public Object[][] illegalTopNData() {
    return new Object[][]{ { 0 }, { -1 }, { -2 }, { -10 } };
  }"
3203,copy,"  public Rankings copy() {
    return new Rankings(this);
  }"
3204,toString,"  public String toString() {
    return rankedItems.toString();
  }"
3206,shrinkRankingsIfNeeded,"  private void shrinkRankingsIfNeeded() {
    if (rankedItems.size() > maxSize) {
      rankedItems.remove(maxSize);"
3207,rerank,"  private void rerank() {
    Collections.sort(rankedItems);
    Collections.reverse(rankedItems);
  }"
3208,findRankOf,"  private Integer findRankOf(Rankable r) {
    Object tag = r.getObject();
    for (int rank = 0; rank < rankedItems.size(); rank++) {
      Object cur = rankedItems.get(rank).getObject();
      if (cur.equals(tag)) {"
3209,addOrReplace,"  private void addOrReplace(Rankable r) {
    Integer rank = findRankOf(r);
    if (rank != null) {
      rankedItems.set(rank, r);"
3210,updateWith,"  public void updateWith(Rankable r) {
    synchronized(rankedItems) {
      addOrReplace(r);"
3213,size,"  public int size() {
    return rankedItems.size();
  }"
3214,maxSize,"  public int maxSize() {
    return maxSize;
  }"
3216,copyData,"  public Object[][] copyData() {
    return new Object[][]{ { new RankableObjectWithFields(""foo"", 0) }, { new RankableObjectWithFields(""foo"", 3,
        ""someOtherField"") }, { new RankableObjectWithFields(""foo"", 0, ""someField"") } };"
3220,fieldsData,"  public Object[][] fieldsData() {
    return new Object[][]{ { ANY_OBJECT, ANY_COUNT, new Object[]{ ANY_FIELD } },
        { ""quux"", 42L, new Object[]{ ""one"", ""two"", ""three"" } } };"
3224,toStringData,"  public Object[][] toStringData() {
    return new Object[][]{ { new String(""foo""), 0L }, { new String(""BAR""), 8L } };
  }"
3225,verifyCompareTo,"  public void verifyCompareTo(RankableObjectWithFields first, RankableObjectWithFields second, int expCompareToValue) {
    assertThat(first.compareTo(second)).isEqualTo(expCompareToValue);
  }"
3226,compareToData,"  public Object[][] compareToData() {
    return new Object[][]{ { new RankableObjectWithFields(""foo"", 1000), new RankableObjectWithFields(""foo"", 0),
        GREATER_THAN }, { new RankableObjectWithFields(""foo"", 1), new RankableObjectWithFields(""foo"", 0),"
3227,shouldHaveSameHashCodeAsTrueDuplicates,"  public void shouldHaveSameHashCodeAsTrueDuplicates(RankableObjectWithFields r,
      RankableObjectWithFields trueDuplicate) {
    assertThat(r.hashCode()).isEqualTo(trueDuplicate.hashCode());"
3228,shouldBeEqualToTrueDuplicates,"  public void shouldBeEqualToTrueDuplicates(RankableObjectWithFields r, RankableObjectWithFields trueDuplicate) {
    assertTrue(r.equals(trueDuplicate), r + "" is not equal to "" + trueDuplicate + "" but it should be"");
  }"
3229,trueDuplicatesData,"  public Object[][] trueDuplicatesData() {
    return new Object[][]{ { new RankableObjectWithFields(""foo"", 0), new RankableObjectWithFields(""foo"", 0) },
        { new RankableObjectWithFields(""foo"", 0), new RankableObjectWithFields(""foo"", 0, ""someOtherField"") },"
3230,shouldHaveDifferentHashCodeThanFalseDuplicates,"  public void shouldHaveDifferentHashCodeThanFalseDuplicates(RankableObjectWithFields r,
      RankableObjectWithFields falseDuplicate) {
    assertThat(r.hashCode()).isNotEqualTo(falseDuplicate.hashCode());"
3231,shouldNotBeEqualToFalseDuplicates,"  public void shouldNotBeEqualToFalseDuplicates(RankableObjectWithFields r, RankableObjectWithFields falseDuplicate) {
    assertFalse(r.equals(falseDuplicate), r + "" is equal to "" + falseDuplicate + "" but it should not be"");
  }"
3232,falseDuplicatesData,"  public Object[][] falseDuplicatesData() {
    return new Object[][]{ { new RankableObjectWithFields(""foo"", 0), new RankableObjectWithFields(""foo"", 1) },
        { new RankableObjectWithFields(""foo"", 1), new RankableObjectWithFields(""Foo"", 1) },"
3233,shouldNotBeEqualToInstancesOfOtherClasses,"  public void shouldNotBeEqualToInstancesOfOtherClasses(Object notARankable) {
    RankableObjectWithFields r = new RankableObjectWithFields(ANY_OBJECT, ANY_COUNT);
    assertFalse(r.equals(notARankable), r + "" is equal to "" + notARankable + "" but it should not be"");
  }"
3234,otherClassesData,"  public Object[][] otherClassesData() {
    return new Object[][]{ { new String(""foo"") }, { new Object() }, { Integer.valueOf(4) }, { Lists.newArrayList(7, 8,
        9) } };"
3235,shouldBeEqualToItself,"  public void shouldBeEqualToItself() {
    RankableObjectWithFields r = new RankableObjectWithFields(ANY_OBJECT, ANY_COUNT);
    assertThat(r).isEqualTo(r);
  }"
3236,constructorWithNegativeCountAndFieldsShouldThrowIAE,"  public void constructorWithNegativeCountAndFieldsShouldThrowIAE() {
    Object someAdditionalField = new Object();
    new RankableObjectWithFields(ANY_OBJECT, -1, someAdditionalField);
  }"
3237,constructorWithNegativeCountAndNoFieldsShouldThrowIAE,"  public void constructorWithNegativeCountAndNoFieldsShouldThrowIAE() {
    new RankableObjectWithFields(ANY_OBJECT, -1);
  }"
3238,constructorWithNullObjectAndFieldsShouldThrowIAE,"  public void constructorWithNullObjectAndFieldsShouldThrowIAE() {
    Object someAdditionalField = new Object();
    new RankableObjectWithFields(null, ANY_COUNT, someAdditionalField);
  }"
3239,constructorWithNullObjectAndNoFieldsShouldThrowIAE,"  public void constructorWithNullObjectAndNoFieldsShouldThrowIAE() {
    new RankableObjectWithFields(null, ANY_COUNT);
  }"
3240,copy,"  public Rankable copy() {
    List<Object> shallowCopyOfFields = ImmutableList.copyOf(getFields());
    return new RankableObjectWithFields(getObject(), getCount(), shallowCopyOfFields);
  }"
3241,toString,"  public String toString() {
    StringBuffer buf = new StringBuffer();
    buf.append(""["");
    buf.append(obj);
    buf.append(toStringSeparator);
    buf.append(count);
    for (Object field : fields) {
      buf.append(toStringSeparator);
      buf.append(field);
    }"
3242,hashCode,"  public int hashCode() {
    int result = 17;
    int countHash = (int) (count ^ (count >>> 32));
    result = 31 * result + countHash;
    result = 31 * result + obj.hashCode();
    return result;
  }"
3243,equals,"  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof RankableObjectWithFields)) {
      return false;"
3244,compareTo,"  public int compareTo(Rankable other) {
    long delta = this.getCount() - other.getCount();
    if (delta > 0) {
      return 1;"
3248,from,"  public static RankableObjectWithFields from(Tuple tuple) {
    List<Object> otherFields = Lists.newArrayList(tuple.getValues());
    Object obj = otherFields.remove(0);
    Long count = (Long) otherFields.remove(0);
    return new RankableObjectWithFields(obj, count, otherFields.toArray());
  }"
3252,declareOutputFields,"  public void declareOutputFields(OutputFieldsDeclarer ofd) {
  }"
3253,execute,"  public void execute(Tuple tuple, BasicOutputCollector collector) {
    System.out.println(tuple);
  }"
3254,advanceSimulatedTimeBy,"  private void advanceSimulatedTimeBy(int seconds) {
    Time.advanceTime(seconds * MILLIS_IN_SEC);
  }"
3256,simulatedTrackerIterations,"  public Object[][] simulatedTrackerIterations() {
    return new Object[][]{ { 1, new int[]{ 0, 1 }, new int[]{ 0, 0 } }, { 1, new int[]{ 0, 2 }, new int[]{ 0, 0 } },
        { 2, new int[]{ 2, 2 }, new int[]{ 2, 2 } }, { 2, new int[]{ 0, 4 }, new int[]{ 0, 4 } },"
3258,whenNotYetMarkedAsModifiedData,"  public Object[][] whenNotYetMarkedAsModifiedData() {
    return new Object[][]{ { 0 }, { 1 }, { 2 }, { 3 }, { 4 }, { 5 }, { 8 }, { 10 } };
  }"
3259,positiveNumTimesToTrackShouldBeOk,"  public void positiveNumTimesToTrackShouldBeOk(int numTimesToTrack) {
    new NthLastModifiedTimeTracker(numTimesToTrack);
  }"
3260,legalNumTimesData,"  public Object[][] legalNumTimesData() {
    return new Object[][]{ { 1 }, { 2 }, { 3 }, { 20 } };
  }"
3261,negativeOrZeroNumTimesToTrackShouldThrowIAE,"  public void negativeOrZeroNumTimesToTrackShouldThrowIAE(int numTimesToTrack) {
    new NthLastModifiedTimeTracker(numTimesToTrack);
  }"
3262,illegalNumTimesData,"  public Object[][] illegalNumTimesData() {
    return new Object[][]{ { -10 }, { -3 }, { -2 }, { -1 }, { 0 } };
  }"
3263,updateLastModifiedTime,"  private void updateLastModifiedTime() {
    lastModifiedTimesMillis.add(now());
  }"
3264,markAsModified,"  public void markAsModified() {
    updateLastModifiedTime();
  }"
3265,secondsSinceOldestModification,"  public int secondsSinceOldestModification() {
    long modifiedTimeMillis = ((Long) lastModifiedTimesMillis.get()).longValue();
    return (int) ((now() - modifiedTimeMillis) / MILLIS_IN_SEC);
  }"
3266,now,"  private long now() {
    return Time.currentTimeMillis();
  }"
3267,initLastModifiedTimesMillis,"  private void initLastModifiedTimesMillis() {
    long nowCached = now();
    for (int i = 0; i < lastModifiedTimesMillis.maxSize(); i++) {
      lastModifiedTimesMillis.add(Long.valueOf(nowCached));"
3268,mockTuple,"  public static Tuple mockTuple(String componentId, String streamId) {
    Tuple tuple = mock(Tuple.class);
    when(tuple.getSourceComponent()).thenReturn(componentId);
    when(tuple.getSourceStreamId()).thenReturn(streamId);
    return tuple;
  }"
3269,mockTickTuple,"  public static Tuple mockTickTuple() {
    return mockTuple(Constants.SYSTEM_COMPONENT_ID, Constants.SYSTEM_TICK_STREAM_ID);
  }"
3271,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      String arg = tuple.getString(0);
      Object retInfo = tuple.getValue(1);
      collector.emit(new Values(arg + ""!!!"", retInfo));
    }"
3272,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""result"", ""return-info""));
    }"
3274,updateRankingsWithTuple,"  void updateRankingsWithTuple(Tuple tuple) {
    Rankable rankable = RankableObjectWithFields.from(tuple);
    super.getRankings().updateWith(rankable);
  }"
3277,execute,"    public void execute(Tuple tuple) {
      _collector.emit(tuple, new Values(tuple.getString(0) + ""!!!""));
      _collector.ack(tuple);
    }"
3278,prepare,"    public void prepare(Map conf, TopologyContext context, OutputCollector collector) {
      _collector = collector;
    }"
3279,main,"  public static void main(String[] args) throws Exception {
    LinearDRPCTopologyBuilder builder = new LinearDRPCTopologyBuilder(""exclamation"");
    builder.addBolt(new ExclaimBolt(), 3);

    Config conf = new Config();
"
3280,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""result""));
    }"
3281,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      String input = tuple.getString(1);
      collector.emit(new Values(tuple.getValue(0), input + ""!""));
    }"
3284,declareOutputFields,"  public void declareOutputFields(OutputFieldsDeclarer declarer) {
    declarer.declare(new Fields(""rankings""));
  }"
3285,emitRankings,"  private void emitRankings(BasicOutputCollector collector) {
    collector.emit(new Values(rankings.copy()));
    getLogger().debug(""Rankings: "" + rankings);
  }"
3286,updateRankingsWithTuple,"  abstract void updateRankingsWithTuple(Tuple tuple);
"
3287,execute,"  public final void execute(Tuple tuple, BasicOutputCollector collector) {
    if (TupleHelpers.isTickTuple(tuple)) {
      getLogger().debug(""Received tick tuple, triggering emit of current rankings"");"
3295,setyLocation,"    public void setyLocation(float yLocation) {
        this.yLocation = yLocation;
    }"
3296,getyLocation,"    public float getyLocation() {
        return yLocation;
    }"
3297,setxLocation,"    public void setxLocation(float xLocation) {
        this.xLocation = xLocation;
    }"
3298,getxLocation,"    public float getxLocation() {
        return xLocation;
    }"
3321,findUserByProvince,"    List<User> findUserByProvince(String province);
"
3328,findUserByProvince,"    List<User> findUserByProvince(@Param(""province"") String province);
}"
3360,testQuery,"    public void testQuery() throws IOException, ParseException {
        LuceneTest luceneTest = new LuceneTest();
        luceneTest.query();
    }"
3361,testSearch,"    public void testSearch(){
        LuceneTest luceneTest = new LuceneTest();
        luceneTest.search();
    }"
3362,testIndex,"    public void testIndex(){
        LuceneTest luceneTest = new LuceneTest();
        luceneTest.index();
    }"
3372,queryLimit,"    List<Score> queryLimit(int offset, int limit);
}"
3373,updateScore,"    void updateScore(User user, int scoreCount);
    /**"
3376,queryLimit,"    List<Score> queryLimit(@Param(""offset"") int offset, @Param(""limit"") int limit);
}"
3391,main,"    public static void main(String [] args){
        writeInExcel();
    }"
3392,parseExcel,"    List<GoodDetails> parseExcel(File xlsFile, String filename);
}"
3393,afterCompletion,"    public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception {

        System.out.println(""afterCompletion run!"");"
3394,postHandle,"    public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception {

        System.out.println(""postHandle run!"");"
3395,preHandle,"    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception {
        System.out.println(""preHandle run!"");
        return true;
    }"
3397,testRedisData,"    public void testRedisData() {
        User user = new User();
        user.setId(Long.valueOf(1));
        user.setAccount(String.valueOf(89564));
        Gag gag = new Gag();
        gag.setGagTime(new Date());
        gag.setUser(user);
        int insertSuccess = gagDao.insertGag(gag);
        System.out.print(""insert :"" + insertSuccess);
    }"
3400,send,"	public boolean send(String acceptorLoginId, String context){
		if(acceptorLoginId == null || """".equals(acceptorLoginId)){
			return false;
		}
		try {"
3401,send,"	public boolean send(Long acceptorUserId, String context){
		if(acceptorUserId == null ){
			return false;
		}
		try {"
3402,send,"	public boolean[] send(String acceptorName, String[] acceptors, String context) {
		if(acceptors == null || acceptors.length == 0){
			return null;
		}
		boolean[] result = new boolean[acceptors.length];
		int i = 0;
		for(String acceptor : acceptors){"
3406,checkAcceptor,"	protected boolean checkAcceptor(String acceptor){
		if(acceptor == null || """".equals(acceptor)){
			return false;
		}
"
3410,send,"	public boolean send(String acceptorLoginId, String context);
"
3411,send,"	public boolean send(Long acceptorUserId, String context);
	"
3412,send,"	public boolean send(String acceptorName, String acceptor, String context, String title);
	"
3413,send,"	public boolean[] send(String acceptorName, String[] acceptor, String context);
	"
3414,send,"	public boolean send(String acceptorName, String acceptor, String context);
	"
3417,getIndexSearcherOfSP,"    public static IndexSearcher getIndexSearcherOfSP() throws IOException {

        System.out.println(""directory_sp    "" + directory_sp);
        IndexReader indexReader = DirectoryReader.open(ramDirectory);

        IndexSearcher indexSearcher = new IndexSearcher(indexReader);"
3418,getIndexWriterOfSP,"    public static IndexWriter getIndexWriterOfSP() throws IOException {

        IndexWriter indexWriter = new IndexWriter(directory_sp, config);
"
3427,updateIndex,"    public void updateIndex(String fieldName,String fieldValue,GoodDetails goodDetails) throws IOException {

        IndexWriter indexWriter = LuceneUtils.getIndexWriterOfSP();

        Term term = new Term(fieldName,fieldValue);

        Document document = GoodDetailsUtils.GoodDetailsToDocument(goodDetails);"
3431,postHandle,"    public void postHandle(HttpServletRequest request, HttpServletResponse response,
                           Object obj, ModelAndView mav) throws Exception {"
3432,afterCompletion,"    public void afterCompletion(HttpServletRequest request,
                                HttpServletResponse response, Object obj, Exception err)"
3436,jsonObjectToUser,"    public static User jsonObjectToUser(String userString) {
        User user = JSONObject.parseObject(userString.toString(),User.class);
        return user;
    }"
3437,objectToJson,"    public static String objectToJson(Object data) {
        String json = JSONArray.toJSONString(data);
        return json;
    }"
3438,getTopLast,"    public Set<String> getTopLast(String key, long start, long end);
}"
3441,zadd,"    public long zadd(String key, double score, User user);
    public Set<String> zgetAll(String key, long start, long end);"
3442,hdel,"    public long hdel(String hkey, String key);
    public long zadd(String key, double score, User user);"
3443,del,"    public long del(String key);
    public long hdel(String hkey, String key);"
3444,ttl,"    public long ttl(String key);
    public long del(String key);"
3445,expire,"    public long expire(String key, int second);
    public long ttl(String key);"
3446,incr,"    public long incr(String key);
    public long expire(String key, int second);"
3447,hset,"    public long hset(String hkey, String key, String value);
    public long incr(String key);"
3448,hget,"    public String hget(String hkey, String key);
    public long hset(String hkey, String key, String value);"
3449,set,"    public String set(String key, String value);
    public String hget(String hkey, String key);"
3450,get,"    public String get(String key);
    public String set(String key, String value);"
3451,verifyJavaWebToken,"    public static Map<String, Object> verifyJavaWebToken(String jwt) {
        try {
            Map<String, Object> jwtClaims ="
3452,createJavaWebToken,"    public static String createJavaWebToken(Map<String, Object> claims) {
        return Jwts.builder().setClaims(claims).signWith(SignatureAlgorithm.HS256, getKeyInstance()).compact();
    }"
3457,send,"    void send(String hisEmail, String subject, String content);
}"
3458,methodOfWarn,"    public List<Integer> methodOfWarn(List<GoodDetails> goodDetailsList) throws Exception;
"
3459,getGoodList,"    public List<GoodDetails> getGoodList(String location);
"
3460,findGoodAllDetailsById,"    public GoodDetails findGoodAllDetailsById(String realGoodid);
"
3461,findIndex,"    public List<GoodDetails> findIndex(String keyword, int start, int row);
"
3462,findGoodByClassifyName,"    public List<GoodDetails> findGoodByClassifyName(String ClassifyName) throws Exception;
"
3464,GoodDetailsToDocument,"    public static Document GoodDetailsToDocument(GoodDetails goodDetails) {

        Document document = new Document();

        StringField idfield = new StringField(""id"", goodDetails.getGoodId(), Store.YES);

        TextField goodNamefield = new TextField(""goodName"", goodDetails.getGoodName(),Store.YES);
        document.add(idfield);"
3465,findGoods,"    public List<GoodDetails> findGoods(@Param(""location"") String location);
}"
3466,fingGoodsByFeatureIds,"    public List<GoodDetails> fingGoodsByFeatureIds(List<String> ids);
"
3467,findGoodDetailsById,"    public GoodDetails findGoodDetailsById(String id);
"
3468,findGoodAllDetailsByDetailId,"    public GoodDetails findGoodAllDetailsByDetailId(String goodId);
    public GoodDetails findGoodDetailsById(String id);"
3469,findGoodDetailsByClassifyId,"    public List<GoodDetails> findGoodDetailsByClassifyId(int goodClassifyId);
"
3470,toString,"    public String toString() {
        return ""GoodDetails{"" +
                ""goodId='"" + goodId + '\'' +"
3511,findGoodDetailsByClassifyID,"    public List<GoodDetails> findGoodDetailsByClassifyID(int goodClassifyID);
}"
3512,findGoodDetailsByClassifyName,"    public List<GoodDetails> findGoodDetailsByClassifyName(String goodClassifyName);
"
3513,findClassifyIdByClassifyName,"    public int findClassifyIdByClassifyName(String goodClassifyName);
"
3525,insertGag,"    public int insertGag(Gag gag);
    List<Gag> findByUserId(Long id);"
3550,sendEmail,"	void sendEmail(String hisEmail, String subject, String content);
	"
3552,deleteCookie,"    public static void deleteCookie(HttpServletResponse response,
                                    String cookieName) {
        Cookie cookie = new Cookie(cookieName, null);
        cookie.setPath(""/"");
        cookie.setMaxAge(0);
        response.addCookie(cookie);"
3553,addCookie,"    public static void addCookie(HttpServletResponse response,
                                 String cookieName, String value) {
        Cookie cookie = new Cookie(cookieName, value);
        cookie.setPath(""/"");
        cookie.setMaxAge(TIME);
        response.addCookie(cookie);"
3554,readConfigFile,"    public static Properties readConfigFile(String configFileName) throws Exception {
        if (StringUtils.isBlank(configFileName)) {
            throw new Exception(""Config file ["" + configFileName + ""] is not exist or null!"");
        }

        Properties p = null;
        try {"
3555,flush,"    private static void flush()
    {
        if ((System.currentTimeMillis()-lastFlushTime)>1000*60*10)"
3557,getConfigValue,"    public static String getConfigValue(String key) throws Exception{
        return getPropertyValue(key);
    }"
3558,getPropertyValue,"    public static String getPropertyValue(String key) throws Exception{
        flush();
        return getInstance().getProperty(key);
    }"
3559,init,"    public static void init() throws Exception{
        instance = ConfigReader.readConfigFile(PROTAL_CONFIG_FILE);
    }"
3560,getInstance,"    public static Properties getInstance() throws Exception{
        if(null == instance || instance.size() == 0){
            init();
        }"
3583,decodeSession,"    public static Map<String, Object> decodeSession(String sessionId) {
        try {
            return verifyJavaWebToken(sessionId);"
3584,getUserId,"    public static Long getUserId(HttpServletRequest request) throws Exception {
        return  Long.valueOf((Integer)getClientLoginInfo(request).get(""userId""));
"
3585,getClientLoginInfo,"    private static Map<String, Object> getClientLoginInfo(HttpServletRequest request) throws Exception {
        Map<String, Object> r = new HashMap<>();
        String sessionId = request.getHeader(""sessionId"");
        if (sessionId != null) {
            r = decodeSession(sessionId);
            return r;"
3586,AfterReturning,"    public User AfterReturning(JoinPoint joinPoint,Object returnVal){
        User user = (User) returnVal;
        user.setAccount(DigestUtils.md5DigestAsHex(user.getAccount().getBytes()));
        return user;
    }"
3588,main,"    public static void main(String[] args) {
        new SpringApplicationBuilder(DiscoveryBootcwenaoApplication.class).web(true).run(args);
    }"
3589,serverEndpointExporter,"    public ServerEndpointExporter serverEndpointExporter() {  

        return new ServerEndpointExporter();  "
3590,calculateFare,"    public BigDecimal calculateFare(TaxiRide taxiRide, TaxiFare rideFare) {
        KieSession kieSession = kieContainer.newKieSession();
        kieSession.setGlobal(""rideFare"", rideFare);
        kieSession.insert(taxiRide);
        kieSession.fireAllRules();
        kieSession.dispose();
        return rideFare.total();
    }"
3591,total,"    public BigDecimal  total() {
        return this.nightSurcharge.add(this.rideFare);
    }"
3592,apiInfo,"    private ApiInfo apiInfo() {

        return new ApiInfoBuilder()"
3593,createRestApi,"    public Docket createRestApi() {

        return new Docket(DocumentationType.SWAGGER_2)"
3594,subOnlineCount,"    public static synchronized void subOnlineCount() {

        DemoSocketServer.onlineCount--;"
3595,addOnlineCount,"    public static synchronized void addOnlineCount() {

        DemoSocketServer.onlineCount++;"
3598,sendMessage,"    public void sendMessage(String message) throws IOException {

        this.session.getBasicRemote().sendText(message);"
3604,basePath,"	public ApiReturnObject  basePath(HttpServletRequest request){

		return ApiReturnUtil.success(BasePath.getBasePath(request));"
3605,sockethtml,"	public ModelAndView  sockethtml(@PathVariable String cid){

		ModelAndView mav=new ModelAndView(""socket"");

		mav.addObject(""cid"", cid);"
3606,index,"	public ApiReturnObject  index(String data){

		if(StringUtils.isEmpty(data)) {
"
3631,createExpensiveGraphAsync,"    private CompletableFuture<Object> createExpensiveGraphAsync(String key, Executor executor) {
        CompletableFuture<Object> objectCompletableFuture = new CompletableFuture<>();
        return objectCompletableFuture;
    }"
3632,evit,"    public String evit(Long id) {

        personService.remove(id);
        return ""ok"";"
3633,cacheable3,"    public Person cacheable3(Person person) {

        return personService.findOne3(person);"
3634,cacheable2,"    public Person cacheable2(Person person) {

        return personService.findOne2(person);"
3635,cacheable1,"    public Person cacheable1(Person person) {
        String a = ""a"";
        String[] b = {""1"", ""2""};
        List<Long> c = new ArrayList<>();
        c.add(3L);
        c.add(4L);
        c.add(5L);
        return personService.findOne1(person, a, b, c);
    }"
3636,cacheable,"    public Person cacheable(Person person) {
        return personService.findOne();
    }"
3637,put,"    public long put(@RequestBody Person person) {
        Person p = personService.save(person);
        return p.getId();
    }"
3638,main,"    public static void main(String[] args) {
        SpringApplication.run(DubboConsumerApplication.class, args);
    }"
3639,onCreateView,"	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_card,container,false);
        ButterKnife.inject(this, rootView);
        ViewCompat.setElevation(rootView,50);
        textView.setText(""CARD ""+position);
		return rootView;
	}"
3640,onCreate,"	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		position = getArguments().getInt(ARG_POSITION);
	}"
3641,newInstance,"	public static SuperAwesomeCardFragment newInstance(int position) {
		SuperAwesomeCardFragment f = new SuperAwesomeCardFragment();
		Bundle b = new Bundle();
		b.putInt(ARG_POSITION, position);
		f.setArguments(b);
		return f;
	}"
3643,isViewFromObject,"        public boolean isViewFromObject(View v, Object o) {
            return v == o;
        }"
3644,destroyItem,"        public void destroyItem(ViewGroup container, int position, Object view) {
            container.removeView((View) view);
        }"
3645,instantiateItem,"        public Object instantiateItem(ViewGroup container, int position) {
            TextView textview= (TextView) LayoutInflater.from(mContext).inflate(R.layout.fragment_quickcontact,container,false);
            textview.setText(""PAGE ""+position);
            container.addView(textview);
            return textview;
        }"
3650,newInstance,"    public static QuickContactFragment newInstance() {
        QuickContactFragment quickContactFragment = new QuickContactFragment();
        return quickContactFragment;
    }"
3654,onRestoreInstanceState,"    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        currentColor = savedInstanceState.getInt(""currentColor"");
        changeColor(currentColor);
    }"
3655,onSaveInstanceState,"    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt(""currentColor"", currentColor);
    }"
3656,onColorClicked,"    public void onColorClicked(View v) {
        int color = Color.parseColor(v.getTag().toString());
        changeColor(color);
    }"
3659,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }"
3660,onTabReselected,"            public void onTabReselected(int position) {
                Toast.makeText(MainActivity.this, ""Tab reselected: "" + position, Toast.LENGTH_SHORT).show();
            }"
3662,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
        if (mWebView != null) {
            mWebView.removeAllViews();
            ((ViewGroup) mWebView.getParent()).removeView(mWebView);"
3663,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithWebViewActivity.this, MainActivity.class));
        finish();
    }"
3664,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        menu.add(Menu.NONE, Menu.FIRST, Menu.NONE, R.string.auto_refresh_func_demo);
        return super.onCreateOptionsMenu(menu);
    }"
3666,onPageFinished,"                    public void onPageFinished(WebView view, String url) {
                        mRefreshLayout.refreshComplete();
                    }"
3669,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
        mHandler.removeCallbacksAndMessages(null);
    }"
3670,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithViewPagerActivity.this, MainActivity.class));
        finish();
    }"
3672,run,"                                    public void run() {
                                        mViewPager.setCurrentItem(0, true);
                                        mRefreshLayout.refreshComplete();
                                        Toast.makeText(
                                                        WithViewPagerActivity.this,"
3673,onRefreshing,"                    public void onRefreshing() {
                        mHandler.postDelayed(
                                new Runnable() {"
3676,onBackPressed,"    public void onBackPressed() {
        startActivity(
                new Intent(WithRecyclerViewInCoordinatorLayoutActivity.this, MainActivity.class));
        finish();"
3678,onLoadingMore,"                    public void onLoadingMore() {
                        mHandler.postDelayed(
                                new Runnable() {"
3681,onClick,"                    public void onClick(View v) {
                        onBackPressed();
                    }"
3684,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithRecyclerViewActivity.this, MainActivity.class));
        finish();
    }"
3685,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        menu.add(Menu.NONE, Menu.FIRST, Menu.NONE, R.string.change_style);
        return super.onCreateOptionsMenu(menu);
    }"
3688,onLoadingMore,"                    public void onLoadingMore() {
                        Toast.makeText(
                                        WithRecyclerViewActivity.this,
                                        R.string.has_been_triggered_to_load_more,"
3693,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithListViewActivity.this, MainActivity.class));
        finish();
    }"
3697,onStatusChanged,"                    public void onStatusChanged(byte old, byte now) {
                        if (old == SmoothRefreshLayout.SR_STATUS_LOADING_MORE
                                && now == SmoothRefreshLayout.SR_STATUS_COMPLETE) {"
3698,run,"                                    public void run() {
                                        if (mCount >= 50) {
                                            mRefreshLayout.setEnableNoMoreDataAndNoSpringBack(true);
                                        }"
3702,onClick,"                    public void onClick(View v) {
                        mRefreshLayout.setEnableNoMoreData(false);
                        mRefreshLayout.forceLoadMore();
                    }"
3705,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithGridViewActivity.this, MainActivity.class));
        finish();
    }"
3713,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithFrameLayoutActivity.this, MainActivity.class));
        finish();
    }"
3715,onStatusChanged,"                    public void onStatusChanged(byte old, byte now) {
                        if (now == SmoothRefreshLayout.SR_STATUS_INIT
                                && old == SmoothRefreshLayout.SR_STATUS_COMPLETE) {"
3716,run,"                                    public void run() {
                                        mRefreshLayout.refreshComplete();
                                        String times =
                                                getString(R.string.number_of_refresh) + mCount;
                                        mTextView.setText(times);"
3717,onRefreshing,"                    public void onRefreshing() {
                        mCount++;
                        mHandler.postDelayed(
                                new Runnable() {"
3718,onLongClick,"                    public boolean onLongClick(View v) {
                        Toast.makeText(
                                        WithFrameLayoutActivity.this,
                                        ""LongClicked"","
3719,onClick,"                    public void onClick(View v) {
                        Toast.makeText(WithFrameLayoutActivity.this, ""Clicked"", Toast.LENGTH_SHORT)
                                .show();"
3721,onPureScrollPositionChanged,"    public void onPureScrollPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        mProgress = Math.min(1, indicator.getCurrentPercentOfRefreshOffset());
        mProgress = mProgress * mProgress * mProgress;
        mOffsetY = (mTextRectF.height() + mAmplitude * 2) * (1 - mProgress) + getPaddingTop();
        invalidate();"
3722,onRefreshPositionChanged,"    public void onRefreshPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        if (status == SmoothRefreshLayout.SR_STATUS_PREPARE) {"
3723,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout layout, boolean isSuccessful) {
        mStatus = SmoothRefreshLayout.SR_STATUS_COMPLETE;
    }"
3724,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout layout, IIndicator indicator) {
        if (layout.isRefreshing()) mStatus = SmoothRefreshLayout.SR_STATUS_REFRESHING;
        else mStatus = SmoothRefreshLayout.SR_STATUS_LOADING_MORE;"
3725,onRefreshPrepare,"    public void onRefreshPrepare(SmoothRefreshLayout layout) {
        mStatus = SmoothRefreshLayout.SR_STATUS_PREPARE;
    }"
3726,onReset,"    public void onReset(SmoothRefreshLayout layout) {
        mStatus = SmoothRefreshLayout.SR_STATUS_INIT;
        mProgress = 0;
    }"
3727,onFingerUp,"    public void onFingerUp(SmoothRefreshLayout layout, IIndicator indicator) {}
"
3735,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        mTextPaint.getTextBounds(mText, 0, mText.length(), mTextRect);
        heightMeasureSpec =
                MeasureSpec.makeMeasureSpec(
                        mTextRect.height() + getPaddingTop() + getPaddingBottom(),"
3749,reset,"    private void reset() {
        mMaxY = 0;
        mProgress = 0;
        mLastDrawProgressTime = 0;
        mBarExtraLength = 0;
        mGrowingTime = 0;
        mCurrentPosY = 0;
        mLastPoint[0] = 0;
        mLastPoint[1] = 0;
        mPath.reset();
    }"
3750,updateProgressBounds,"    private void updateProgressBounds() {
        final int width = getWidth();
        mProgressBounds.setEmpty();
        mProgressBounds.set(
                width / 2f - mCircleRadius - mBarWidth,
                mCurrentPosY - mCircleRadius * 2 - mDip2 * 5 - mBarWidth * 2,
                width / 2f + mCircleRadius + mBarWidth,"
3751,onPureScrollPositionChanged,"    public void onPureScrollPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        final int width = getWidth();
        if (indicator.hasTouched()) {
            mLastPoint = new float[] {indicator.getLastMovePoint()[0], mCurrentPosY};
        } else mLastPoint[0] = width / 2f;"
3753,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout layout, boolean isSuccessful) {
        mStatus = SmoothRefreshLayout.SR_STATUS_COMPLETE;
        if (layout.isRefreshSuccessful()) {
            mText =
                    getContext()
                            .getString("
3754,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout layout, IIndicator indicator) {
        mStatus = SmoothRefreshLayout.SR_STATUS_REFRESHING;
        layout.resetScrollerInterpolator();
        updateProgressBounds();
        invalidate();
    }"
3755,onRefreshPrepare,"    public void onRefreshPrepare(SmoothRefreshLayout layout) {
        layout.resetScrollerInterpolator();
        mStatus = SmoothRefreshLayout.SR_STATUS_PREPARE;
        reset();
        invalidate();
    }"
3756,onReset,"    public void onReset(SmoothRefreshLayout layout) {
        layout.resetScrollerInterpolator();
        mStatus = SmoothRefreshLayout.SR_STATUS_INIT;
        reset();
        invalidate();
    }"
3759,drawText,"    private void drawText(Canvas canvas) {
        canvas.save();
        canvas.restore();
        float textCenterY =
                mCurrentPosY + ((mTextPaint.descent() + mTextPaint.ascent()) / 2f) - mDip2 * 5;
        canvas.drawText(mText, getWidth() / 2f, textCenterY, mTextPaint);
        canvas.save();"
3761,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        mPath.reset();
        mPath.moveTo(0, 0);
        mPath.quadTo(mLastPoint[0], mLastPoint[1] * 2, getWidth(), 0);
        mPath.lineTo(0, 0);
        canvas.drawPath(mPath, mWavePaint);
        if (mStatus == SmoothRefreshLayout.SR_STATUS_REFRESHING) {
            drawProgress(canvas);"
3776,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestTwoLevelRefreshActivity.this, MainActivity.class));
        finish();
    }"
3777,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        menu.add(Menu.NONE, Menu.FIRST, Menu.NONE, R.string.disable_two_level_refresh);
        return super.onCreateOptionsMenu(menu);
    }"
3779,onStatusChanged,"                    public void onStatusChanged(byte old, byte now) {
                        if (now == SmoothRefreshLayout.SR_STATUS_COMPLETE) {
                            mRefreshLayout.setEnableInterceptEventWhileLoading(false);"
3780,run,"                                    public void run() {
                                        String times =
                                                getString(R.string.number_of_one_level_refresh)
                                                        + mCount;
                                        mRefreshLayout.refreshComplete();"
3782,run,"                                    public void run() {
                                        startActivity(
                                                new Intent(
                                                        getApplicationContext(),"
3783,onTwoLevelRefreshing,"                    public void onTwoLevelRefreshing() {
                        mRefreshLayout.setEnableInterceptEventWhileLoading(true);
                        mTwoLevelCount++;
                        mHandler.postDelayed(
                                new Runnable() {"
3787,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestScrollToAutoRefreshActivity.this, MainActivity.class));
        finish();
    }"
3795,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestScaleEffectActivity.this, MainActivity.class));
        finish();
    }"
3800,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestReleaseToRefreshActivity.this, MainActivity.class));
        finish();
    }"
3804,onLoadingMore,"                    public void onLoadingMore() {
                        mCount++;
                        mHandler.postDelayed(
                                new Runnable() {"
3809,onBackPressed,"    public void onBackPressed() {
        startActivity(
                new Intent(
                        TestRecyclerViewInNestedScrollViewInSrlActivity.this, MainActivity.class));"
3810,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        menu.add(Menu.NONE, Menu.FIRST, Menu.NONE, getString(R.string.expand_or_collapse));
        return super.onCreateOptionsMenu(menu);
    }"
3819,onBackPressed,"    public void onBackPressed() {
        startActivity(
                new Intent(TestRecyclerViewInNestedScrollViewActivity.this, MainActivity.class));
        finish();"
3829,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestQQWebStyleActivity.this, MainActivity.class));
        finish();
    }"
3834,onCheckedChanged,"    public void onCheckedChanged(RadioGroup group, @IdRes int checkedId) {
        switch (checkedId) {
            case R.id.radioButton_test_qq_activity_style_activity:"
3836,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestQQActivityStyleActivity.this, MainActivity.class));
        finish();
    }"
3844,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
    }"
3845,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestOverScrollActivity.this, MainActivity.class));
        finish();
    }"
3848,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
        mFragments.clear();
        mHandler.removeCallbacksAndMessages(null);
    }"
3849,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestNestedWithViewPagerActivity.this, MainActivity.class));
        finish();
    }"
3851,run,"                                    public void run() {
                                        for (int i = 0; i < mFragments.size(); i++) {
                                            NestedPageFragment fragment = mFragments.get(i);
                                            fragment.appendData();"
3853,run,"                                    public void run() {
                                        for (int i = 0; i < mFragments.size(); i++) {
                                            NestedPageFragment fragment = mFragments.get(i);
                                            fragment.updateData();"
3858,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestNestedViewPagerActivity.this, MainActivity.class));
        finish();
    }"
3863,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestNestedHorizontalViewsActivity.this, MainActivity.class));
        finish();
    }"
3865,run,"                                    public void run() {
                                        mViewPager.setCurrentItem(0, true);
                                        mRefreshLayout.refreshComplete();
                                        Toast.makeText(
                                                        TestNestedHorizontalViewsActivity.this,"
3869,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestNestedActivity.this, MainActivity.class));
        finish();
    }"
3878,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestMultiDirectionViewsActivity.this, MainActivity.class));
        finish();
    }"
3881,onRefreshing,"                    public void onRefreshing() {}
"
3882,run,"                                    public void run() {
                                        mViewPager.setCurrentItem(0, true);
                                        mRefreshLayout.refreshComplete();
                                    }"
3887,run,"                                    public void run() {
                                        mRefreshLayout.refreshComplete();
                                    }"
3889,isNotYetInEdgeCannotMoveHeader,"                    public boolean isNotYetInEdgeCannotMoveHeader(
                            SmoothRefreshLayout parent,
                            @Nullable View child,"
3892,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestMaterialStyleActivity.this, MainActivity.class));
        finish();
    }"
3903,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestHorizontalScaleEffectActivity.this, MainActivity.class));
        finish();
    }"
3908,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestHorizontalRefreshActivity.this, MainActivity.class));
        finish();
    }"
3909,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        return super.onCreateOptionsMenu(menu);
    }"
3911,run,"                                    public void run() {
                                        mRefreshLayout.refreshComplete();
                                        Toast.makeText(
                                                        TestHorizontalRefreshActivity.this,"
3917,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestHorizontalRecyclerViewActivity.this, MainActivity.class));
        finish();
    }"
3921,onLoadingMore,"                    public void onLoadingMore() {
                        Toast.makeText(
                                        TestHorizontalRecyclerViewActivity.this,
                                        R.string.has_been_triggered_to_load_more,"
3926,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestBottomSheetDialogActivity.this, MainActivity.class));
        finish();
    }"
3930,onClick,"                            public void onClick(View v) {
                                if (mSheetDialog == null) {
                                    mSheetDialog = new BottomSheetDialog(v.getContext());
                                    mSheetDialog.setContentView(mRootView);"
3933,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestBaseRecyclerViewAdapterActivity.this, MainActivity.class));
        finish();
    }"
3936,onLoadMoreRequested,"                    public void onLoadMoreRequested() {
                        mHandler.postDelayed(
                                new Runnable() {"
3940,stop,"        private void stop() {
            mRunning = false;
            StoreHouseHeader.this.removeCallbacks(this);
        }"
3941,run,"        public void run() {
            StoreHouseHeader.this.invalidate();
            int pos = mTick % mCountPerSeg;
            for (int i = 0; i < mSegCount; i++) {
                int index = i * mCountPerSeg + pos;
                if (index > mTick) {
                    continue;"
3943,calculate,"    private void calculate(IIndicator indicator) {
        mOffsetX = (getWidth() - mDrawZoneWidth) / 2;
        if (mStyle.mStyle != STYLE_SCALE && mStyle.mStyle != STYLE_FOLLOW_SCALE) {
            mOffsetY = getTopOffset();
        } else {"
3944,onPureScrollPositionChanged,"    public void onPureScrollPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        calculate(indicator);
        float currentPercent = Math.min(1f, indicator.getCurrentPercentOfRefreshOffset());
        setProgress(currentPercent);
        invalidate();"
3945,onRefreshPositionChanged,"    public void onRefreshPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        calculate(indicator);
        if (status == SmoothRefreshLayout.SR_STATUS_PREPARE"
3946,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout layout, boolean isSuccessful) {
        loadFinish();
    }"
3947,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout layout, IIndicator indicator) {
        beginLoading();
    }"
3948,onRefreshPrepare,"    public void onRefreshPrepare(SmoothRefreshLayout layout) {}
"
3949,onReset,"    public void onReset(SmoothRefreshLayout layout) {
        loadFinish();
        for (int i = 0; i < mAnimations.size(); i++) {
            mAnimations.get(i).resetPos(mHorizontalRandomness);"
3956,onDraw,"    public void onDraw(Canvas canvas) {
        float progress = mProgress;
        int c1 = canvas.save();
        int len = mAnimations.size();
        for (int i = 0; i < len; i++) {
            canvas.save();
            StoreHouseBarItemAnimation storeHouseBarItem = mAnimations.get(i);"
3957,loadFinish,"    private void loadFinish() {
        mAniController.stop();
    }"
3958,beginLoading,"    private void beginLoading() {
        mAniController.start();
        invalidate();
    }"
3962,initPathWithStringRes,"    public void initPathWithStringRes(int id) {
        String[] points = getResources().getStringArray(id);
        ArrayList<float[]> pointList = new ArrayList<>(points.length);
        for (String point : points) {
            String[] x = point.split("","");
            float[] f = new float[4];"
3963,initPathWithString,"    public void initPathWithString(String str, float fontWidthInPixel, float fontHeightInPixel) {
        ArrayList<float[]> pointList =
                StoreHousePath.parsePath(str, fontWidthInPixel, fontHeightInPixel, 22);
        initPathWithPointList(pointList);"
3964,initPathWithString,"    public void initPathWithString(String str) {
        initPathWithString(str, 62, 86);
    }"
3969,onDetachedFromWindow,"    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        mAniController.stop();
        mAnimations.clear();
    }"
3976,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second_floor);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setDisplayShowHomeEnabled(true);
        getSupportActionBar().setTitle(R.string.second_floor);
    }"
3977,onLongClick,"                        public boolean onLongClick(View v) {
                            Toast.makeText(
                                            v.getContext(),
                                            ""LongClick:"" + getAdapterPosition(),"
3978,onClick,"                        public void onClick(View v) {
                            Toast.makeText(
                                            v.getContext(),"
3980,onBindViewHolder,"    public void onBindViewHolder(@NonNull RecyclerViewHolder holder, int position) {
        holder.mTextView.setText(String.valueOf(position));
        Glide.with(mContext).asBitmap().load(mList.get(position)).into(holder.mImageView);
    }"
3981,onCreateViewHolder,"    public RecyclerViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = mInflater.inflate(R.layout.layout_list_view_item, parent, false);
        return new RecyclerViewHolder(view);
    }"
3982,appendData,"    public void appendData(List<String> list) {
        int size = mList.size();
        mList.addAll(list);
        notifyItemInserted(size);
    }"
3983,insertData,"    public void insertData(List<String> list) {
        mList.addAll(0, list);
        notifyItemRangeInserted(0, list.size());
    }"
3984,updateData,"    public void updateData(List<String> list) {
        mList.clear();
        mList.addAll(list);
        notifyDataSetChanged();
    }"
3989,run,"                    public void run() {
                        mRefreshLayout.autoRefresh(ACTION_NOTIFY, true);
                    }"
3990,run,"                                    public void run() {
                                        mRefreshLayout.refreshComplete(800);
                                    }"
3993,convert,"    protected void convert(BaseViewHolder helper, String item) {
        helper.setText(R.id.textView_list_item, String.valueOf(helper.getAdapterPosition()));
        ImageView view = helper.getView(R.id.imageView_list_item);
        Glide.with(mContext).asBitmap().load(item).into(view);
    }"
3994,onLongClick,"                        public boolean onLongClick(View v) {
                            Object obj = mTextView.getTag();
                            if (obj instanceof Integer) {
                                Toast.makeText(
                                                v.getContext(),"
3995,onClick,"                        public void onClick(View v) {
                            Object obj = mTextView.getTag();
                            if (obj instanceof Integer) {
                                Toast.makeText(v.getContext(), ""Click:"" + obj, Toast.LENGTH_SHORT)"
4000,appendData,"    public void appendData(List<String> list) {
        mList.addAll(list);
        notifyDataSetChanged();
    }"
4005,onBindViewHolder,"    public void onBindViewHolder(RecyclerViewHolder holder, int position) {
        holder.mTextView.setText(String.valueOf(position));
        Glide.with(mContext).asBitmap().load(mList.get(position)).into(holder.mImageView);
    }"
4006,onCreateViewHolder,"    public RecyclerViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = mInflater.inflate(R.layout.layout_horizontal_list_view_item, parent, false);
        return new RecyclerViewHolder(view);
    }"
4009,onTwoLevelRefreshBegin,"    public void onTwoLevelRefreshBegin(
            TwoLevelSmoothRefreshLayout layout, ITwoLevelIndicator twoLevelIndicator) {
        mTextViewTitle.setText(R.string.welcome_to_secondary_menu);"
4010,onPureScrollPositionChanged,"    public void onPureScrollPositionChanged(
            SmoothRefreshLayout layout, byte status, ITwoLevelIndicator indicator) {
        if (indicator.hasJustLeftStartPosition()) mTextViewTitle.setVisibility(GONE);"
4012,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout frame, boolean isSuccessful) {
        mTextViewTitle.setVisibility(VISIBLE);
        mTextViewTitle.setText(me.dkzwm.widget.srl.ext.classic.R.string.sr_refresh_complete);
    }"
4013,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout frame, ITwoLevelIndicator indicator) {
        mTextViewTitle.setText(me.dkzwm.widget.srl.ext.classic.R.string.sr_refreshing);
    }"
4014,onFingerUp,"    public void onFingerUp(SmoothRefreshLayout layout, ITwoLevelIndicator indicator) {}
"
4015,onRefreshPrepare,"    public void onRefreshPrepare(SmoothRefreshLayout frame) {
        mTextViewTitle.setVisibility(VISIBLE);
        if (frame.isEnabledPullToRefresh()) {
            mTextViewTitle.setText("
4016,onReset,"    public void onReset(SmoothRefreshLayout frame) {
        mTextViewTitle.setVisibility(VISIBLE);
        if (frame.isEnabledPullToRefresh()) {
            mTextViewTitle.setText("
4021,onPureScrollPositionChanged,"    public void onPureScrollPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {}"
4022,onRefreshPositionChanged,"    public void onRefreshPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {}"
4023,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout layout, boolean isSuccessful) {}
"
4024,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout layout, IIndicator indicator) {}
"
4026,onReset,"    public void onReset(SmoothRefreshLayout layout) {}
"
4033,onRefreshPositionChanged,"    public void onRefreshPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        final int mOffsetToRefresh = indicator.getOffsetToRefresh();
        final int currentPos = indicator.getCurrentPos();
"
4037,onReset,"    public void onReset(SmoothRefreshLayout layout) {
        mTextViewTitle.setText(R.string.brush);
        mStartedCounter = false;
        mCount = 0;
    }"
4038,onFingerUp,"    public void onFingerUp(SmoothRefreshLayout layout, IIndicator indicator) {
        final int mOffsetToRefresh = indicator.getOffsetToRefresh();
        final int currentPos = indicator.getCurrentPos();

        if (currentPos > mOffsetToRefresh) {"
4045,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout layout, boolean isSuccessful) {
        pauseAnimation();
    }"
4046,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout layout, IIndicator indicator) {
        setRenderMode(RenderMode.HARDWARE);
        setRepeatMode(LottieDrawable.RESTART);
        setRepeatCount(LottieDrawable.INFINITE);
        playAnimation();
    }"
4054,reg,"    private void reg(int samplingPointCount) {
        if (!mIsBeginning) {
            if (!mStartingDet) {"
4055,preReg,"    private int preReg(int samplingPointCount) {
        switch (samplingPointCount) {
        case 8:
        case 9:"
4056,process,"    private void process(BufferData data) {
        int size = data.getFilledSize() - 1;
        short sh = 0;
        for (int i = 0; i < size; i++) {
            short sh1 = data.mData[i];"
4057,stop,"    public void stop() {
        if (STATE_START == mState) {
            mState = STATE_STOP;"
4058,start,"    public void start() {
        if (STATE_STOP == mState) {
"
4060,freeRecognitionBuffer,"        void freeRecognitionBuffer(BufferData buffer);
    }"
4061,getRecognitionBuffer,"        BufferData getRecognitionBuffer();
"
4065,onStopRecognition,"    public void onStopRecognition() {
        LogHelper.d(TAG, ""stop recognition"");
    }"
4066,onRecognition,"    public void onRecognition(int index) {
        LogHelper.d(TAG, ""recognition:"" + index);
        if (null != mListener) {
            if (Common.START_TOKEN == index) {"
4067,onStartRecognition,"    public void onStartRecognition() {
        LogHelper.d(TAG, ""start recognition"");
    }"
4068,freeRecognitionBuffer,"    public void freeRecognitionBuffer(BufferData buffer) {
        if (null != buffer) {
            if (!mBuffer.putEmpty(buffer)) {"
4070,freeRecordBuffer,"    public void freeRecordBuffer(BufferData buffer) {
        if (null != buffer) {
            if (!mBuffer.putFull(buffer)) {"
4072,onStopRecord,"    public void onStopRecord() {
        LogHelper.d(TAG, ""stop record"");
    }"
4073,onStartRecord,"    public void onStartRecord() {
        LogHelper.d(TAG, ""start record"");
    }"
4074,stop,"    public void stop() {
        if (STATE_START == mState) {
            mState = STATE_PENDING;"
4076,run,"                public void run() {
                    mRecord.start();

                    LogHelper.d(TAG, ""record thread end"");

                    LogHelper.d(TAG, ""stop recognition start"");
                    stopRecognition();"
4077,run,"                public void run() {
                    mRecognition.start();
                }"
4078,start,"    public void start() {
        if (STATE_STOP == mState) {
            mState = STATE_PENDING;"
4084,onPlayStop,"    public void onPlayStop() {
        if (null != mListener) {
            mListener.onPlayEnd();"
4085,onPlayStart,"    public void onPlayStart() {
        if (null != mListener) {
            mListener.onPlayStart();"
4086,freePlayData,"    public void freePlayData(BufferData data) {
        mBuffer.putEmpty(data);
    }"
4090,freeEncodeBuffer,"    public void freeEncodeBuffer(BufferData buffer) {
        if (null != buffer) {
            mBuffer.putFull(buffer);"
4091,onStartEncode,"    public void onStartEncode() {
        LogHelper.d(TAG, ""onStartGen"");
    }"
4094,run,"                public void run() {
                    do {
                        LogHelper.d(TAG, ""encode start"");
                        mEncoder.encode(mCodes, DEFAULT_GEN_DURATION, muteInterval);"
4095,run,"                public void run() {
                    mPlayer.start();
                }"
4096,play,"    public void play(final String text, final boolean repeat, final int muteInterval) {
        if (STATE_STOP == mState && null != mCodeBook && convertTextToCodes(text)) {
            mState = STATE_PENDING;"
4097,play,"    public void play(final String text) {
        play(text, false, 0);
    }"
4098,convertTextToCodes,"    private boolean convertTextToCodes(String text) {
        boolean ret = true;

        if (!TextUtils.isEmpty(text)) {
            mCodes.clear();"
4103,gen,"    public void gen(int genRate, int duration) {
        if (STATE_START == mState) {
            mGenRate = genRate;"
4104,start,"    public void start() {
        if (STATE_STOP == mState) {
            mState = STATE_START;"
4107,freeGenBuffer,"        void freeGenBuffer(BufferData buffer);
    }"
4113,start,"    public void start() {
        if (STATE_STOP == mState) {
            switch (mChannel) {"
4115,freeRecordBuffer,"        void freeRecordBuffer(BufferData buffer);
    }"
4119,stop,"    public void stop() {
        if (STATE_START == mState && null != mAudio) {
            mState = STATE_STOP;"
4120,start,"    public void start() {
        LogHelper.d(TAG, ""start"");
        if (STATE_STOP == mState && null != mAudio) {
            mPlayedLen = 0;"
4122,freePlayData,"        void freePlayData(BufferData data);
    }"
4126,v,"    public static final int v(String classTag, String msg) {
        return v(classTag, """", msg);
    }"
4127,v,"    public static final int v(String classTag, String privateTag, String msg) {
        return Log.v(String.format(""%s %s %s"", ROOT_TAG, classTag, privateTag), msg);
    }"
4128,e,"    public static final int e(String classTag, String msg) {
        return e(classTag, """", msg);
    }"
4129,e,"    public static final int e(String classTag, String privateTag, String msg) {
        return Log.e(String.format(""%s %s %s"", ROOT_TAG, classTag, privateTag), msg);
    }"
4130,i,"    public static final int i(String classTag, String msg) {
        return i(classTag, """", msg);
    }"
4131,i,"    public static final int i(String classTag, String privateTag, String msg) {
        return Log.i(String.format(""%s %s %s"", ROOT_TAG, classTag, privateTag), msg);
    }"
4132,d,"    public static final int d(String classTag, String msg) {
        return d(classTag, """", msg);
    }"
4133,d,"    public static final int d(String classTag, String privateTag, String msg) {
        return Log.d(String.format(""%s %s %s"", ROOT_TAG, classTag, privateTag), msg);
    }"
4134,freeGenBuffer,"    public void freeGenBuffer(BufferData buffer) {
        if (null != mCallback) {
            mCallback.freeEncodeBuffer(buffer);"
4136,onStopGen,"    public void onStopGen() {
        LogHelper.d(TAG, ""end gen codes"");
    }"
4137,onStartGen,"    public void onStartGen() {
        LogHelper.d(TAG, ""start gen codes"");
    }"
4138,stop,"    public void stop() {
        if (STATE_ENCODING == mState) {
            mState = STATE_STOPED;"
4139,encode,"    public void encode(List<Integer> codes, int duration, int muteInterval) {
        if (STATE_STOPED == mState) {
            mState = STATE_ENCODING;"
4140,encode,"    public void encode(List<Integer> codes, int duration) {
        encode(codes, duration, 0);
    }"
4141,isStoped,"    public final boolean isStoped() {
        return (STATE_STOPED == mState);
    }"
4144,getEncodeBuffer,"        BufferData getEncodeBuffer();
    }"
4145,freeEncodeBuffer,"        void freeEncodeBuffer(BufferData buffer);
"
4148,putImpl,"    private boolean putImpl(BufferData data, BlockingQueue<BufferData> queue) {
        if (null != queue && null != data) {
            try {
                queue.put(data);"
4150,putFull,"    public boolean putFull(BufferData data) {
        return putImpl(data, mConsumeQueue);
    }"
4152,putEmpty,"    public boolean putEmpty(BufferData data) {
        return putImpl(data, mProducerQueue);
    }"
4156,reset,"    public void reset() {
        int size = mProducerQueue.size();
        for (int i = 0; i < size; ++i) {
            BufferData data = mProducerQueue.peek();
            if (null == data || null == data.mData) {
                mProducerQueue.poll();
            }"
4160,reset,"        final public void reset() {
            mFilledSize = 0;
        }"
4162,onDestroyView,"  @Override public void onDestroyView() {
    super.onDestroyView();
    unbinder.unbind();
  }"
4163,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_step_size_and_gravity, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
4166,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_stars_separation, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
4169,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_size_of_stars, container, false);
    unbinder = ButterKnife.bind(this, view);
    setHasOptionsMenu(true);
"
4170,onClick,"  public void onClick(View view) {
    Toast.makeText(getContext(), ""Clicked!"", Toast.LENGTH_SHORT).show();
  }"
4171,onRatingChanged,"  public void onRatingChanged(SimpleRatingBar simpleRatingBar, float rating, boolean fromUser) {
    String text = String.format(""%.2f"", rating);
    if (simpleRatingBar == ratingBar1) {
      rating1.setText(text);"
4173,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_rating_changed_listener, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);
"
4176,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_number_of_stars, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
4179,onCreateOptionsMenu,"  public boolean onCreateOptionsMenu(Menu menu) {
    MenuInflater inflater = getMenuInflater();
    inflater.inflate(R.menu.menu_main, menu);
    return true;
  }"
4186,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_corner_radius, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
4189,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_border_width, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
4191,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_background_colors, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
4193,startAnimations,"  private void startAnimations() {
    ratingBar1.getAnimationBuilder()
        .setRepeatCount(ValueAnimator.INFINITE)
        .setRepeatMode(ValueAnimator.REVERSE)
        .setInterpolator(new LinearInterpolator())
        .setRatingTarget(4)
        .start();"
4194,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_animated, container, false);
    unbinder = ButterKnife.bind(this, view);

    startAnimations();"
4195,onSecondaryPointerUp,"    private void onSecondaryPointerUp(MotionEvent ev) {
        final int pointerIndex = MotionEventCompat.getActionIndex(ev);
        final int pointerId = MotionEventCompat.getPointerId(ev, pointerIndex);
        if (pointerId == mActivePointerId) {
            final int newPointerIndex = pointerIndex == 0 ? 1 : 0;"
4197,dip2px,"    private int dip2px(int dipValue) {
        return (int) (dipValue * mDensity + 0.5f);
    }"
4200,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        final int action = MotionEventCompat.getActionMasked(ev);
        switch (action) {
            case MotionEvent.ACTION_DOWN:
                mActivePointerId = MotionEventCompat.getPointerId(ev, 0);"
4203,onTouchingLetterChanged,"        void onTouchingLetterChanged(String s);
    }"
4204,onClick,"            public void onClick(View v) {
                textView.setText(""OnClick "");
            }"
4205,onTouchingLetterChanged,"            public void onTouchingLetterChanged(String s) {
                Log.d(TAG, ""select "" + s);
                textView.setText(""select "" + s);
            }"
4208,showFragmentPage,"    private void showFragmentPage() {
        new FragmentDemo().showFragment(getSupportFragmentManager());
    }"
4210,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main_menu, menu);
        return true;
    }"
4217,hideFragment,"    public void hideFragment() {
        fragmentManager.popBackStack();
    }"
4220,onResume,"    public void onResume() {
        initData();
        super.onResume();
    }"
4221,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        rootView = inflater.inflate(R.layout.common_fragment, null);
        return rootView;
    }"
4222,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }"
4223,onClick,"            public void onClick(View v) {
                mScrollLayout.setToOpen();
            }"
4224,onClick,"            public void onClick(View v) {
                mScrollLayout.scrollToExit();
            }"
4226,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_three);
        initView();
    }"
4227,onChildScroll,"        public void onChildScroll(int top) {
        }"
4228,onScrollFinished,"        public void onScrollFinished(ScrollLayout.Status currentStatus) {
            if (currentStatus.equals(ScrollLayout.Status.EXIT)) {
                text_foot.setVisibility(View.VISIBLE);"
4229,onScrollProgressChanged,"        public void onScrollProgressChanged(float currentProgress) {
            if (currentProgress >= 0) {
                float precent = 255 * currentProgress;
                if (precent > 255) {"
4230,initGirlUrl,"    private void initGirlUrl() {
        mAllAddressList = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            Address address = new Address();"
4231,onClick,"            public void onClick(View v) {
                onBackPressed();
            }"
4233,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second);
        initGirlUrl();
        initView();
    }"
4234,onPageScrollStateChanged,"        public void onPageScrollStateChanged(int state) {
"
4235,onPageSelected,"        public void onPageSelected(int position) {
            mGirlDesText.setText(mAllAddressList.get(position).getDesContent());
        }"
4236,onPageScrolled,"        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
"
4238,onScrollFinished,"        public void onScrollFinished(ScrollLayout.Status currentStatus) {
            if (currentStatus.equals(ScrollLayout.Status.EXIT)) {
                finish();"
4239,onScrollProgressChanged,"        public void onScrollProgressChanged(float currentProgress) {
            if (currentProgress >= 0) {
                float precent = 255 * currentProgress;"
4242,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, SecondActivity.class));
            }"
4245,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();
    }"
4251,calculateInSampleSize,"    private int calculateInSampleSize(int imgWidth, int imgHeight, int maxWidth, int maxHeight) {
        int inSampleSize = 1;
        while (imgWidth / inSampleSize > maxWidth || imgHeight / inSampleSize > maxHeight) {
            inSampleSize *= 2;
        }"
4252,scroll,"    private void scroll(View thumbnail) {
        int thumbnailCoords[] = new int[2];
        thumbnail.getLocationOnScreen(thumbnailCoords);

        int thumbnailCenterX = thumbnailCoords[0] + thumbnailSize / 2;
        int thumbnailDelta = displayProps.x / 2 - thumbnailCenterX;
"
4253,initializeViewPager,"    private void initializeViewPager() {
        viewPager = (HackyViewPager) findViewById(R.id.viewPager);

        pagerAdapter = new ScreenSlidePagerAdapter(
                fragmentManager, 
                mListOfMedia, "
4254,createThumbnail,"    private Bitmap createThumbnail(Bitmap image) {
        return ThumbnailUtils.extractThumbnail(image, thumbnailSize, thumbnailSize);
    }"
4257,removeThumbnail,"    private void removeThumbnail(int position) {
        View thumbnail = thumbnailsContainer.getChildAt(position);
        if (thumbnail == null) {
            return;
        }"
4261,run,"            public void run() {
                hideThumbnails();
                isThumbnailsHidden = !isThumbnailsHidden;
            }"
4262,hideThumbnailsAfterDelay,"    private void hideThumbnailsAfterDelay(int delay) {
        horizontalScrollView.postDelayed(new Runnable() {
            @Override"
4263,from,"    public static GalleryBuilder from(ScrollGalleryView galleryView) {
        return new GalleryBuilderImpl(galleryView);
    }"
4264,removeMedia,"    public void removeMedia(int position) {
        if (position >= mListOfMedia.size() || position < 0) {
            return;
        }
        pagerAdapter.removeItem(position);"
4266,hideThumbnails,"    public void hideThumbnails() {
        setThumbnailsTransition();
        horizontalScrollView.setVisibility(GONE);
    }"
4268,hideThumbnailsAfter,"    public ScrollGalleryView hideThumbnailsAfter(int hideThumbnailsAfterDelay) {
        if (!isThumbnailsHidden) {
            this.hideThumbnailsAfterDelay = hideThumbnailsAfterDelay;
        }"
4269,hideThumbnailsOnClick,"    public ScrollGalleryView hideThumbnailsOnClick(boolean hideThumbnailsOnClick, Transition thumbnailsTransition) {
        if (!isThumbnailsHidden) {
            this.hideThumbnailsOnClick = hideThumbnailsOnClick;
            this.thumbnailsTransition = thumbnailsTransition;"
4270,hideThumbnailsOnClick,"    public ScrollGalleryView hideThumbnailsOnClick(boolean hideThumbnailsOnClick) {
        if (!isThumbnailsHidden) {
            this.hideThumbnailsOnClick = hideThumbnailsOnClick;
            if (hideThumbnailsOnClick) this.useDefaultThumbnailsTransition = true;"
4271,withHiddenThumbnails,"    public ScrollGalleryView withHiddenThumbnails(boolean isThumbnailsHidden) {
        if (this.isThumbnailsHidden && !isThumbnailsHidden) {
            showThumbnails();
        } else if (!this.isThumbnailsHidden && isThumbnailsHidden) {
            hideThumbnails();"
4276,onSuccess,"                public void onSuccess() {
                    thumbnail.setScaleType(ImageView.ScaleType.FIT_CENTER);
                }"
4277,addMedia,"    public ScrollGalleryView addMedia(List<MediaInfo> infos) {
        if (infos == null) {
            throw new NullPointerException(""Infos may not be null!"");
        }
"
4278,addMedia,"    public ScrollGalleryView addMedia(MediaInfo mediaInfo) {
        if (mediaInfo == null) {
            throw new NullPointerException(""Infos may not be null!"");
        }"
4279,onPageScrollStateChanged,"            @Override public void onPageScrollStateChanged(int state) {
                listener.onPageScrollStateChanged(state);
            }"
4280,onPageSelected,"            @Override public void onPageSelected(int position) {
                scroll(thumbnailsContainer.getChildAt(position));
                listener.onPageSelected(position);
            }"
4281,onPageScrolled,"            @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
                listener.onPageScrolled(position, positionOffset, positionOffsetPixels);
            }"
4282,addOnPageChangeListener,"    public void addOnPageChangeListener(final ViewPager.OnPageChangeListener listener) {
        viewPager.clearOnPageChangeListeners();
        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {"
4283,addOnImageLongClickListener,"    public ScrollGalleryView addOnImageLongClickListener(OnImageLongClickListener onImageLongClickListener) {
        this.onImageLongClickListener = onImageLongClickListener;
        return this;
    }"
4284,addOnImageClickListener,"    public ScrollGalleryView addOnImageClickListener(OnImageClickListener onImageClickListener) {
        this.onImageClickListener = onImageClickListener;
        return this;
    }"
4289,onClick,"        public void onClick(int position) {
            if (onImageLongClickListener != null) onImageLongClickListener.onClick(position);
        }"
4290,onClick,"        public void onClick(int position) {
            if (hideThumbnailsOnClick) {
                if (isThumbnailsHidden) {
                    showThumbnails();"
4291,onClick,"        @Override public void onClick(View v) {
            scroll(v);
            viewPager.setCurrentItem((int) v.getId(), true);
        }"
4292,onPageSelected,"        @Override public void onPageSelected(int position) {
            scroll(thumbnailsContainer.getChildAt(position));
        }"
4295,removeItem,"    public void removeItem(int position) {
        mListOfMedia.remove(position);
        notifyDataSetChanged();
    }"
4300,mediaLoader,"    public static MediaInfo mediaLoader(MediaLoader mediaLoader) {
        return new MediaInfo().setLoader(mediaLoader);
    }"
4301,isBackgroundImageActive,"    private boolean isBackgroundImageActive() {
        return photoView != null && photoView.getDrawable() != null;
    }"
4302,isViewPagerActive,"    private boolean isViewPagerActive() {
        return viewPager != null;
    }"
4303,onSaveInstanceState,"    public void onSaveInstanceState(@NonNull Bundle outState) {
        if (isViewPagerActive()) {
            outState.putBoolean(Constants.IS_LOCKED, viewPager.isLocked());
        }"
4304,onSuccess,"                public void onSuccess() {}
            });"
4307,onLongClick,"                public boolean onLongClick(View v) {
                    onImageLongClickListener.onClick(getPosition());
                    return true;
                }"
4308,onClick,"                public void onClick(View view) {
                    onImageClickListener.onClick(getPosition());
                }"
4314,isLocked,"    public boolean isLocked() {
        return isLocked;
    }"
4316,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        return !isLocked && super.onTouchEvent(ev);
    }"
4317,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent ev) {
        if(!isLocked) {
            try {
                return super.onInterceptTouchEvent(ev);"
4318,showToast,"    private void showToast(String msg) {
        Toast.makeText(this, msg, Toast.LENGTH_SHORT).show();
    }"
4319,onError,"                    public void onError(ApiException e) {
                        super.onError(e);
                        showToast(e.getMessage());
                    }"
4320,onSuccess,"                    public void onSuccess(String s) {
                        showToast(s);
                    }"
4322,onUploadOne,"    public void onUploadOne(View view) {
        File file = new File(Environment.getExternalStorageDirectory().getPath()+""/1.jpg"");
        UIProgressResponseCallBack mUIProgressResponseCallBack = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {"
4324,onSuccess,"                    public void onSuccess(String response) {
                        showToast(response);
                    }"
4326,onUploadFileMaps2,"    public void onUploadFileMaps2(View view) {
        File file = new File(Environment.getExternalStorageDirectory().getPath()+""/1.jpg"");
        UIProgressResponseCallBack mUIProgressResponseCallBack = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {"
4330,onUploadFileMaps,"    public void onUploadFileMaps(View view) {
        File file = new File(Environment.getExternalStorageDirectory().getPath()+""/1.jpg"");
        UIProgressResponseCallBack mUIProgressResponseCallBack = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {"
4338,onUploadInputStream,"    public void onUploadInputStream(View view) throws Exception {
        final UIProgressResponseCallBack listener = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {
                int progress = (int) (bytesRead * 100 / contentLength);"
4342,onUploadFile,"    public void onUploadFile(View view) throws Exception {
        final UIProgressResponseCallBack listener = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {
                int progress = (int) (bytesRead * 100 / contentLength);"
4344,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_upload);
    }"
4345,onDestroy,"    protected void onDestroy() {
        EasyHttp.cancelSubscription(mDisposable);
        super.onDestroy();
    }"
4346,onNext,"                    public void onNext(@NonNull Content2 content) {
                        mTextView.setText(content.toString());
                    }"
4347,onError,"                    public void onError(ApiException e) {
                        mTextView.setText(e.getMessage());
                    }"
4348,onStart,"                    protected void onStart() {
                    }"
4352,findView,"    protected <T extends View> T findView(@IdRes int id) {
        return (T) findViewById(id);
    }"
4353,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_search);
        mEditText = findView(R.id.edit_text);
        mTextView = findView(R.id.content_text);
        search();
    }"
4354,showToast,"    private void showToast(String msg) {
        Toast.makeText(this, msg, Toast.LENGTH_LONG).show();
    }"
4355,onFrequentlyRquest,"    public void onFrequentlyRquest(View view) {
        Intent intent = new Intent(SceneActivity.this, SearchActivity.class);
        startActivity(intent);
    }"
4357,onNext,"            public void onNext(@NonNull ResultBean resultBean) {
                showToast(resultBean.toString());
            }"
4358,onError,"            public void onError(ApiException e) {
                showToast(e.getMessage());
            }"
4366,onNext,"            public void onNext(@NonNull List<Object> objects) {
                showToast(objects.toString());
            }"
4370,onNext,"            public void onNext(SkinTestResult skinTestResult) {
                showToast(skinTestResult.toString());
            }"
4371,onError,"            public void onError(ApiException e) {
                super.onError(e);
                showToast(e.getMessage());
            }"
4373,onPoll,"    public void onPoll(View view) {
        Intent intent = new Intent(SceneActivity.this, PollActivity.class);
        startActivity(intent);
    }"
4374,onNext,"            public void onNext(@NonNull SkinTestResult skinTestResult) {
                showToast(skinTestResult.toString());
            }"
4377,apply,"            public ObservableSource<SkinTestResult> apply(@NonNull Long aLong) throws Exception {
                Log.i(""test"", ""====="" + aLong);
                return EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                        .timeStamp(true)"
4380,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scene);
    }"
4382,onDestroy,"    protected void onDestroy() {
        EasyHttp.cancelSubscription(polldisposable);
        EasyHttp.cancelSubscription(countdisposable);
        EasyHttp.cancelSubscription(ifdisposable);
        EasyHttp.cancelSubscription(filterdisposable);
        super.onDestroy();
    }"
4383,onNext,"            public void onNext(@NonNull Content content) {
                showToast(content.toString());
            }"
4387,onPollFilter,"    public void onPollFilter(View view) {
        filterdisposable = Observable.interval(0, 5, TimeUnit.SECONDS).flatMap(new Function<Long, ObservableSource<Content>>() {
            @Override"
4399,apply,"                                    public ObservableSource<? extends Content> apply(@NonNull Throwable throwable) throws Exception {
                                        return Observable.empty();
                                    }"
4401,apply,"            public ObservableSource<Content> apply(@NonNull Long aLong) throws Exception {
                return Observable.timer(5, TimeUnit.SECONDS).flatMap(new Function<Long, ObservableSource<Content>>() {
                    @Override"
4403,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_poll);
    }"
4405,verify,"        public boolean verify(String hostname, SSLSession session) {
            HttpLog.i(""############### verify "" + hostname + "" "" + this.host);
            if (this.host == null || """".equals(this.host) || !this.host.contains(hostname))
                return false;
            return true;"
4409,onScene,"    public void onScene(View view) {
        Intent intent = new Intent(MainActivity.this, SceneActivity.class);
        startActivity(intent);
    }"
4410,onNext,"            public void onNext(List<SectionItem> sectionItems) {
                showToast(sectionItems.toString());
            }"
4413,onCustomApiResult,"    public void onCustomApiResult(View view) {
        Intent intent = new Intent(this, CustomApiActivity.class);
        startActivity(intent);
    }"
4414,accept,"            public void accept(@NonNull Throwable throwable) throws Exception {
                showToast(throwable.getMessage());
            }"
4415,accept,"            public void accept(@NonNull AuthModel authModel) throws Exception {
                showToast(authModel.toString());
            }"
4418,accept,"            public void accept(@NonNull ApiResult<AuthModel> result) throws Exception {
                showToast(result.toString());
            }"
4420,onCache,"    public void onCache(View view) {
        Intent intent = new Intent(this, CacheActivity.class);
        startActivity(intent);
    }"
4421,run,"                                    public void run() {
                                        if (response != null) showToast(response.toString());
                                    }"
4423,run,"                                    public void run() {
                                        showToast(e.getMessage());
                                    }"
4424,onError,"                            public void onError(final ApiException e) {
                                mHandler.post(new Runnable() {
                                    @Override"
4430,onSync,"    public void onSync(View view) {
        new Thread(new Runnable() {
            @Override"
4431,onDownloadFile,"    public void onDownloadFile(View view) {
        Intent intent = new Intent(this, DownloadActivity.class);
        startActivity(intent);
    }"
4432,onUploadFile,"    public void onUploadFile(View view) {
        Intent intent = new Intent(this, UploadActivity.class);
        startActivity(intent);
    }"
4435,onProgressSubscriber,"    public void onProgressSubscriber(View view) {
        Observable<SkinTestResult> observable = EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)
                .execute(SkinTestResult.class);"
4438,onObservable,"    public void onObservable(View view) {
        Observable<SkinTestResult> observable = EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)
                .execute(SkinTestResult.class);"
4439,onSuccess,"                    public void onSuccess(SkinTestResult response) {
                        showToast(response.toString());
                    }"
4440,onError,"                    public void onError(ApiException e) {
                        showToast(e.getMessage());
                    }"
4441,onSubscription,"    public void onSubscription(View view) {
        Disposable disposable = EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)"
4444,onProgressDialogCallBack,"    public void onProgressDialogCallBack(View view) {
        EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)"
4464,onError,"                    public void onError(ApiException e) {
                        showToast(e.getMessage() + ""  "" + e.getCode());
                    }"
4468,onPost,"    public void onPost(View view) {
        EasyHttp.post(""v1/app/chairdressing/news/favorite"")
                .params(""newsId"", ""552"")"
4469,onSuccess,"                    public void onSuccess(SkinTestResult response) {
                        if (response != null) showToast(response.toString());
                    }"
4472,onLogin,"    public void onLogin(View view) {
        Intent intent = new Intent(MainActivity.this, LoginActivity.class);
        startActivity(intent);
    }"
4473,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        switch (id) {
            case R.id.adout_layout:
                Intent intent = new Intent(MainActivity.this, AboutActivity.class);"
4474,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }"
4475,subscribe,"            public void subscribe(@NonNull ObservableEmitter<String> e) throws Exception {
                FileUtils.getFileFromAsset(MainActivity.this, ""1.jpg"");
            }"
4476,accept,"            public void accept(@NonNull String s) throws Exception {
"
4478,showToast,"    private void showToast(String msg) {
        Toast.makeText(LoginActivity.this, msg, Toast.LENGTH_SHORT).show();
    }"
4479,startAppSettings,"    public void startAppSettings() {
        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
        intent.setData(Uri.parse(""package:"" + getPackageName()));
        startActivity(intent);
    }"
4480,onClick,"            public void onClick(DialogInterface dialog, int which) {
                startAppSettings();
            }"
4481,onClick,"            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }"
4485,onClick,"                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }"
4487,autoLogin,"    private void autoLogin() {
        LoginInfo loginCache = LoginCache.getInstance().get();
        if (loginCache != null) {
            final String user = loginCache.getUsername();"
4492,isPasswordValid,"    private boolean isPasswordValid(String password) {
        return Validator.isPassword(password);
    }"
4493,isEmailValid,"    private boolean isEmailValid(String email) {
        return Validator.isMobile(email) || Validator.isEmail(email);
    }"
4494,attemptLogin,"    private void attemptLogin() {
        mEmailView.setError(null);
        mPasswordView.setError(null);

        String email = mEmailView.getText().toString();
        String password = mPasswordView.getText().toString();

        boolean cancel = false;
        View focusView = null;

        if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {"
4495,onClick,"            public void onClick(View view) {
                attemptLogin();
            }"
4496,onEditorAction,"            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {
                if (id == R.id.login || id == EditorInfo.IME_NULL) {
                    attemptLogin();
                    return true;"
4499,onError,"                    public void onError(ApiException e) {
                        showToast(e.getMessage());
                        dialog.dismiss();
                    }"
4501,onStart,"                    public void onStart() {
                        dialog.show();
                    }"
4504,onError,"                    public void onError(final ApiException e) {
                        HttpLog.i(""======""+Thread.currentThread().getName());
                        showToast(e.getMessage());
                        dialog.dismiss();
                    }"
4506,onStart,"                    public void onStart() {
                        HttpLog.i(""======""+Thread.currentThread().getName());
                        dialog.show();
                    }"
4511,onSuccess,"                    public void onSuccess(Result result) {
                        if (result != null) showToast(result.toString());
                    }"
4514,onSuccess,"                    public void onSuccess(ArticleBean result) {
                        if (result != null) showToast(result.toString());
                    }"
4517,onSuccess,"                    public void onSuccess(List<FriendsListBean> result) {
                        if (result != null) showToast(result.toString());
                    }"
4523,onSuccess,"                    public void onSuccess(List<String> result) {
                        if (result != null) showToast(result.toString());
                    }"
4529,onSuccess,"                    public void onSuccess(ResultBean response) {
                        if (response != null) showToast(response.toString());
                    }"
4533,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_custom_api);
    }"
4538,onClearCache,"    public void onClearCache(View view) {
        EasyHttp.clearCache();
    }"
4539,onRemoveCache,"    public void onRemoveCache(View view) {
        EasyHttp.removeCache(this.getClass().getSimpleName());
    }"
4540,onComplete,"                    public void onComplete() {
"
4541,onError,"                    public void onError(@NonNull Throwable e) {
                        showToast(e.getMessage());
                    }"
4542,onNext,"                    public void onNext(@NonNull SkinTestResult skinTestResult) {
                        showToast(skinTestResult.toString());
                    }"
4543,onSubscribe,"                    public void onSubscribe(@NonNull Disposable d) {
"
4553,schedule,"    public Completable schedule() {
        return Completable.create(this);
    }"
4554,onAnimationEnd,"            public void onAnimationEnd(final Animator animation) {
                valueAnimator.removeAllListeners();
                completableSubscriber.onCompleted();
            }"
4555,onAnimationCancel,"            public void onAnimationCancel(final Animator animation) {
                animationCancelAction.call(valueAnimator);
            }"
4556,call,"    public void call(final CompletableSubscriber completableSubscriber) {
        completableSubscriber.onSubscribe(new ClearSubscription(valueAnimator::end));
        valueAnimator.addUpdateListener(valueUpdateAction::call);
        valueAnimator.start();
        valueAnimator.addListener(new AnimatorListenerAdapter() {
"
4557,from,"    public static RxValueAnimator from(final ValueAnimator valueAnimator, final Action1<ValueAnimator> valueUpdateAction,
                                       final Action1<ValueAnimator> animationCancelAction) {
        return new RxValueAnimator(valueAnimator, valueUpdateAction, animationCancelAction);"
4558,from,"    public static RxValueAnimator from(final ValueAnimator valueAnimator, final Action1<ValueAnimator> valueUpdateAction) {
        return new RxValueAnimator(valueAnimator, valueUpdateAction, aValueAnimator -> {});
    }"
4559,end,"    public void end() {
        valueAnimator.end();
        valueUpdateSubject.onCompleted();
    }"
4561,checkSubject,"    private void checkSubject() {
        if (valueUpdateSubject.hasCompleted() || valueUpdateSubject.hasThrowable()) {
            valueUpdateSubject = BehaviorSubject.create();"
4562,scheduleReversed,"    public Observable<Object> scheduleReversed() {
        checkSubject();
        valueAnimator.reverse();
        return valueUpdateSubject;
    }"
4563,schedule,"    public Observable<Object> schedule() {
        checkSubject();
        valueAnimator.start();
        return valueUpdateSubject;
    }"
4564,onAnimationEnd,"            public void onAnimationEnd(final Animator animation) {
                valueUpdateSubject.onCompleted();
            }"
4565,from,"    public static RxObservableValueAnimator from(final ValueAnimator valueAnimator) {
        return new RxObservableValueAnimator(valueAnimator);
    }"
4566,set,"    public static void set(final View view, final float x, final float y, final float alpha, final float rotation) {
        set(view, x, y, alpha);
        view.setRotation(rotation);
    }"
4567,set,"    public static void set(final View view, final float x, final float y, final float alpha) {
        view.setAlpha(alpha);
        view.setX(x);
        view.setY(y);
    }"
4568,doAfterDelay,"    public static Completable doAfterDelay(final int delay, final Action0 action) {
        return Completable.timer(delay, TimeUnit.MILLISECONDS)
                          .observeOn(AndroidSchedulers.mainThread())"
4569,fadeOut,"    public static Completable fadeOut(final View view, final int duration, final int delay) {
        return animate(view, duration, delay)
                .interpolator(new AccelerateInterpolator())"
4570,fadeOut,"    public static Completable fadeOut(final View view, final int duration) {
        return animate(view, new AccelerateInterpolator())
                .duration(duration)"
4571,fadeOut,"    public static Completable fadeOut(final View view) {
        return animate(view, new AccelerateInterpolator())
                .fadeOut()"
4572,leave,"    public static Completable leave(final View view, final int xOffset, final int yOffset) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, new AccelerateInterpolator())
                .fadeOut()"
4574,enterViewsWithDelay,"    public static Completable enterViewsWithDelay(final int initialDelay, final int delay, final int duration, final int xOffset, final View... views) {
        return Observable.range(0, views.length)
                         .flatMap(i -> enter(views[i], duration, xOffset, 0, i * delay + initialDelay).toObservable())"
4575,enterViewsWithDelay,"    public static Completable enterViewsWithDelay(final int delay, final int duration, final int xOffset, final View... views) {
        return enterViewsWithDelay(0, delay, duration, xOffset, views);
    }"
4576,enterTogether,"    public static Completable enterTogether(final int delay, final int xOffset, final View... views) {
        return Observable.from(views)
                         .flatMap(view -> enter(view, xOffset, 0).toObservable())"
4577,enter,"    public static Completable enter(final View view, final int duration, final int xOffset, final int yOffset, final int delay) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, duration, delay)
                .interpolator(new DecelerateInterpolator())"
4578,enter,"    public static Completable enter(final View view, final int delay, final int xOffset, final int yOffset) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, new DecelerateInterpolator())
                .delay(delay)"
4579,enter,"    public static Completable enter(final View view, final int xOffset, final int yOffset) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, new DecelerateInterpolator())
                .fadeIn()"
4580,slideVertical,"    public static Completable slideVertical(final View view, final int duration, final int yOffset) {
        final float endingY = view.getY() + yOffset;
        return animate(view, new AccelerateDecelerateInterpolator())
                .duration(duration)"
4581,slideHorizontal,"    public static Completable slideHorizontal(final View view, final int duration, final int xOffset) {
        final float endingX = view.getX() + xOffset;
        return animate(view, new AccelerateDecelerateInterpolator())
                .duration(duration)"
4582,fadeInWithDelay,"    public static Completable fadeInWithDelay(final int delay, final int duration, final View... views) {
        return Observable.range(0, views.length)
                         .flatMap(i -> animate(views[i], new LinearInterpolator())"
4583,fadeIn,"    public static Completable fadeIn(final View view, final int duration, final int delay) {
        return animate(view, duration, delay)
                .interpolator(new DecelerateInterpolator())"
4584,fadeIn,"    public static Completable fadeIn(final View view, final int duration) {
        return animate(view, new DecelerateInterpolator())
                .duration(duration)"
4585,fadeIn,"    public static Completable fadeIn(final View view) {
        return animate(view).fadeIn()
                            .onAnimationCancel(aView -> aView.setAlpha(OPAQUE))"
4586,show,"    public static Completable show(final View view) {
        return animate(view, IMMEDIATE).fadeIn().schedule();
    }"
4588,hideViewGroupChildren,"    public static Completable hideViewGroupChildren(final ViewGroup... viewGroups) {
        return Observable.from(viewGroups)
                         .flatMap(viewGroup -> hideViewGroupChildren(viewGroup).toObservable())"
4589,hideViewGroupChildren,"    public static Completable hideViewGroupChildren(final ViewGroup viewGroup) {
        return Completable.fromAction(() -> hideViewGroup(viewGroup));
    }"
4590,hide,"    public static Completable hide(final View... views) {
        return Observable.from(views)
                         .flatMap(view -> hide(view).toObservable())"
4591,hide,"    public static Completable hide(final View view) {
        return animate(view, IMMEDIATE).fadeOut().schedule();
    }"
4592,animateTogether,"    public static Completable animateTogether(final Completable... completables) {
        return Completable.merge(completables);
    }"
4593,defaultInterpolator,"    private static Interpolator defaultInterpolator() {
        return new AccelerateDecelerateInterpolator();
    }"
4594,schedule,"    public Completable schedule(final boolean preTransform) {
        return Completable.create(new AnimateOnSubscribe(viewWeakRef,
                                                         preTransform ? preTransformActions : null,"
4595,schedule,"    public Completable schedule() {
        return Completable.create(new AnimateOnSubscribe(viewWeakRef, preTransformActions, animateActions, onAnimationCancelAction));
    }"
4596,onAnimationCancel,"    public RxAnimationBuilder onAnimationCancel(final Action1<View> onAnimationCancelAction) {
        this.onAnimationCancelAction = onAnimationCancelAction;
        return this;
    }"
4597,scale,"    public RxAnimationBuilder scale(final float dX, final float dY) {
        animateActions.add(animate -> animate.scaleXBy(dX).scaleYBy(dY));
        return this;
    }"
4598,scaleY,"    public RxAnimationBuilder scaleY(final float dY) {
        animateActions.add(animate -> animate.scaleYBy(dY));
        return this;
    }"
4599,scaleX,"    public RxAnimationBuilder scaleX(final float dX) {
        animateActions.add(animate -> animate.scaleXBy(dX));
        return this;
    }"
4600,translateBy,"    public RxAnimationBuilder translateBy(final int dX, final int dY, final int dZ) {
        preTransformActions.add(preTransform -> preTransform.xBy(-dX).yBy(-dY).zBy(-dZ));
        animateActions.add(animate -> animate.xBy(dX).yBy(dY).zBy(dZ));
        return this;
    }"
4601,translateBy,"    public RxAnimationBuilder translateBy(final int dX, final int dY) {
        preTransformActions.add(preTransform -> preTransform.xBy(-dX).yBy(-dY));
        animateActions.add(animate -> animate.xBy(dX).yBy(dY));
        return this;
    }"
4602,elevationBy,"    public RxAnimationBuilder elevationBy(final int dZ) {
        preTransformActions.add(preTransform -> preTransform.zBy(-dZ));
        animateActions.add(animate -> animate.zBy(dZ));
        return this;
    }"
4603,translateY,"    public RxAnimationBuilder translateY(final int dY) {
        preTransformActions.add(preTransform -> preTransform.yBy(-dY));
        animateActions.add(animate -> animate.yBy(dY));
        return this;
    }"
4604,translateX,"    public RxAnimationBuilder translateX(final int dX) {
        preTransformActions.add(preTransform -> preTransform.xBy(-dX));
        animateActions.add(animate -> animate.xBy(dX));
        return this;
    }"
4605,counterRotateBy,"    public RxAnimationBuilder counterRotateBy(final float rotation) {
        preTransformActions.add(preTransform -> preTransform.rotationBy(-rotation));
        animateActions.add(animate -> animate.rotationBy(rotation));
        return this;
    }"
4606,rotateBy,"    public RxAnimationBuilder rotateBy(final float rotation) {
        animateActions.add(animate -> animate.rotationBy(rotation));
        return this;
    }"
4607,rotate,"    public RxAnimationBuilder rotate(final float rotation) {
        animateActions.add(animate -> animate.rotation(rotation));
        return this;
    }"
4608,fadeOut,"    public RxAnimationBuilder fadeOut() {
        animateActions.add(animate -> animate.alpha(TRANSPARENT));
        return this;
    }"
4609,fadeIn,"    public RxAnimationBuilder fadeIn() {
        preTransformActions.add(preTransform -> preTransform.alpha(0f));
        animateActions.add(animate -> animate.alpha(OPAQUE));
        return this;
    }"
4610,interpolator,"    public RxAnimationBuilder interpolator(final Interpolator interpolator) {
        animateActions.add(animate -> animate.setInterpolator(interpolator));
        return this;
    }"
4611,delay,"    public RxAnimationBuilder delay(final int delay) {
        animateActions.add(animate -> animate.setStartDelay(delay));
        return this;
    }"
4612,duration,"    public RxAnimationBuilder duration(final int duration) {
        animateActions.add(animate -> animate.setDuration(duration));
        return this;
    }"
4613,animate,"    public static RxAnimationBuilder animate(final View view, final int duration, final int delay, final Interpolator interpolator) {
        return new RxAnimationBuilder(view, duration, delay, interpolator);
    }"
4614,animate,"    public static RxAnimationBuilder animate(final View view, final Interpolator interpolator) {
        return new RxAnimationBuilder(view, DEFAULT_DURATION, DEFAULT_DELAY, interpolator);
    }"
4615,animate,"    public static RxAnimationBuilder animate(final View view, final int duration, final int delay) {
        return new RxAnimationBuilder(view, duration, delay, new AccelerateDecelerateInterpolator());
    }"
4616,animate,"    public static RxAnimationBuilder animate(final int delay, final View view) {
        return new RxAnimationBuilder(view, DEFAULT_DURATION, delay, new AccelerateDecelerateInterpolator());
    }"
4617,animate,"    public static RxAnimationBuilder animate(final View view, final int duration) {
        return new RxAnimationBuilder(view, duration, DEFAULT_DELAY, new AccelerateDecelerateInterpolator());
    }"
4618,animate,"    public static RxAnimationBuilder animate(final View view) {
        return new RxAnimationBuilder(view, DEFAULT_DURATION, DEFAULT_DELAY, defaultInterpolator());
    }"
4619,isUnsubscribed,"    public boolean isUnsubscribed() {
        return isUnsubscribed;
    }"
4620,unsubscribe,"    public void unsubscribe() {
        isUnsubscribed = true;
        clearAction.call();
    }"
4621,onAnimationCancel,"                public void onAnimationCancel(final View view) {
                    onAnimationCancelAction.call(view);
                }"
4623,runAnimation,"    private void runAnimation(final CompletableSubscriber completableSubscriber, final ViewPropertyAnimatorCompat animator) {
        applyActions(animationActions, animator);
        animator.withEndAction(completableSubscriber::onCompleted)
                .start();"
4624,applyActions,"    private void applyActions(final List<Action1<ViewPropertyAnimatorCompat>> actions, final ViewPropertyAnimatorCompat animator) {
        for (final Action1<ViewPropertyAnimatorCompat> action : actions) {
            action.call(animator);"
4625,call,"    public void call(final CompletableSubscriber completableSubscriber) {
        final View view = viewWeakRef.get();
        if (view == null) {
            completableSubscriber.onCompleted();
            return;
        }
"
4626,set,"  @Override public void set(@NonNull String key, @NonNull Set<String> value,
      @NonNull SharedPreferences.Editor editor) {
    editor.putStringSet(key, value);"
4627,get,"  @NonNull @Override public Set<String> get(@NonNull String key,
      @NonNull SharedPreferences preferences, @NonNull Set<String> defaultValue) {
    return unmodifiableSet(preferences.getStringSet(key, defaultValue));"
4628,set,"  @Override public void set(@NonNull String key, @NonNull String value,
      @NonNull SharedPreferences.Editor editor) {
    editor.putString(key, value);"
4630,stringSetNullDefaultValueThrows,"  @Test public void stringSetNullDefaultValueThrows() {
    try {
      rxPreferences.getStringSet(""key"", null);"
4631,stringSetNullKeyThrows,"  @Test public void stringSetNullKeyThrows() {
    try {
      rxPreferences.getStringSet(null);
      fail();"
4632,stringNullDefaultValueThrows,"  @Test public void stringNullDefaultValueThrows() {
    try {
      rxPreferences.getString(""key"", null);"
4633,stringNullKeyThrows,"  @Test public void stringNullKeyThrows() {
    try {
      rxPreferences.getString(null);
      fail();"
4634,objectNullDefaultValueThrows,"  @Test public void objectNullDefaultValueThrows() {
    try {
      rxPreferences.getObject(""key"", null, new PointPreferenceConverter());"
4635,objectNullAdapterThrows,"  @Test public void objectNullAdapterThrows() {
    try {
      rxPreferences.getObject(""key"", new Point(1, 2), null);"
4636,objectNullKeyThrows,"  @Test public void objectNullKeyThrows() {
    try {
      rxPreferences.getObject(null, new Point(1, 2), new PointPreferenceConverter());"
4637,longNullDefaultValueThrows,"  @Test public void longNullDefaultValueThrows() {
    try {
      rxPreferences.getLong(""key"", null);"
4638,longNullKeyThrows,"  @Test public void longNullKeyThrows() {
    try {
      rxPreferences.getLong(null);
      fail();"
4639,integerNullDefaultValueThrows,"  @Test public void integerNullDefaultValueThrows() {
    try {
      rxPreferences.getInteger(""key"", null);"
4640,integerNullKeyThrows,"  @Test public void integerNullKeyThrows() {
    try {
      rxPreferences.getInteger(null);
      fail();"
4641,floatNullDefaultValueThrows,"  @Test public void floatNullDefaultValueThrows() {
    try {
      rxPreferences.getFloat(""key"", null);"
4642,floatNullKeyThrows,"  @Test public void floatNullKeyThrows() {
    try {
      rxPreferences.getFloat(null);
      fail();"
4643,enumNullDefaultValueThrows,"  @Test public void enumNullDefaultValueThrows() {
    try {
      rxPreferences.getEnum(""key"", null, Roshambo.class);"
4644,enumNullClassThrows,"  @Test public void enumNullClassThrows() {
    try {
      rxPreferences.getEnum(""key"", Roshambo.ROCK, null);"
4645,enumNullKeyThrows,"  @Test public void enumNullKeyThrows() {
    try {
      rxPreferences.getEnum(null, Roshambo.ROCK, Roshambo.class);"
4646,booleanNullDefaultValueThrows,"  @Test public void booleanNullDefaultValueThrows() {
    try {
      rxPreferences.getBoolean(""key"", null);"
4647,booleanNullKeyThrows,"  @Test public void booleanNullKeyThrows() {
    try {
      rxPreferences.getBoolean(null);
      fail();"
4648,createWithNullThrows,"  @Test public void createWithNullThrows() {
    try {
      RxSharedPreferences.create(null);"
4649,clearRemovesAllPreferences,"  @Test public void clearRemovesAllPreferences() {
    Preference<String> preference = rxPreferences.getString(""key"", ""default"");
    preference.set(""foo"");
    rxPreferences.clear();
    assertThat(preference.get()).isEqualTo(""default"");
  }"
4651,clear,"  public void clear() {
    preferences.edit().clear().apply();
  }"
4652,getStringSet,"  public Preference<Set<String>> getStringSet(@NonNull String key,
      @NonNull Set<String> defaultValue) {
    checkNotNull(key, ""key == null"");
    checkNotNull(defaultValue, ""defaultValue == null"");
    return new RealPreference<>(preferences, key, defaultValue, StringSetAdapter.INSTANCE, keyChanges);"
4656,getObject,"  @CheckResult @NonNull public <T> Preference<T> getObject(@NonNull String key,
      @NonNull T defaultValue, @NonNull Preference.Converter<T> converter) {
    checkNotNull(key, ""key == null"");
    checkNotNull(defaultValue, ""defaultValue == null"");
    checkNotNull(converter, ""converter == null"");
    return new RealPreference<>(preferences, key, defaultValue,"
4666,cancel,"          @Override public void cancel() {
            preferences.unregisterOnSharedPreferenceChangeListener(listener);
          }"
4667,onSharedPreferenceChanged,"          public void onSharedPreferenceChanged(SharedPreferences preferences, String key) {
            if (key == null) {
              emitter.onNext(NULL_KEY_EMISSION);"
4668,subscribe,"      @Override public void subscribe(final ObservableEmitter<String> emitter) {
        final OnSharedPreferenceChangeListener listener = new OnSharedPreferenceChangeListener() {
          @Override
          public void onSharedPreferenceChanged(SharedPreferences preferences, String key) {
            if (key == null) {"
4669,create,"  public static RxSharedPreferences create(@NonNull SharedPreferences preferences) {
    checkNotNull(preferences, ""preferences == null"");
    return new RxSharedPreferences(preferences);
  }"
4670,evaluate,"        @Override public void evaluate() throws Throwable {
          base.evaluate();
          for (RecordingObserver<?> subscriber : subscribers) {
            subscriber.assertNoEvents();"
4671,apply,"    @Override public Statement apply(final Statement base, Description description) {
      return new Statement() {
        @Override public void evaluate() throws Throwable {"
4672,create,"    public <T> RecordingObserver<T> create() {
      RecordingObserver<T> subscriber = new RecordingObserver<>();
      subscribers.add(subscriber);
      return subscriber;
    }"
4673,assertNoEvents,"  public void assertNoEvents() {
    assertThat(events).isEmpty();
  }"
4674,assertValue,"  public RecordingObserver<T> assertValue(T value) {
    assertThat(takeValue()).isEqualTo(value);
    return this;
  }"
4675,takeValue,"  public T takeValue() {
    Notification<T> notification = takeNotification();
    assertThat(notification.isOnNext()).isTrue();
    return notification.getValue();
  }"
4676,takeNotification,"  private Notification<T> takeNotification() {
    Notification<T> notification = events.pollFirst();
    if (notification == null) {
      throw new AssertionError(""No event found!"");
    }"
4677,onError,"  @Override public void onError(Throwable e) {
    events.add(Notification.<T>createOnError(e));
  }"
4678,onComplete,"  @Override public void onComplete() {
    events.add(Notification.<T>createOnComplete());
  }"
4679,onNext,"  @Override public void onNext(T value) {
    events.add(Notification.createOnNext(value));
  }"
4680,onSubscribe,"  @Override public void onSubscribe(Disposable disposable) {
  }"
4681,accept,"      @Override public void accept(T value) {
        set(value);
      }"
4682,asConsumer,"  @Override @CheckResult @NonNull public Consumer<? super T> asConsumer() {
    return new Consumer<T>() {
      @Override public void accept(T value) {"
4683,asObservable,"  @Override @CheckResult @NonNull public Observable<T> asObservable() {
    return values;
  }"
4684,delete,"  @Override public synchronized void delete() {
    preferences.edit().remove(key).apply();
  }"
4685,isSet,"  @Override public boolean isSet() {
    return preferences.contains(key);
  }"
4686,set,"  @Override public void set(@NonNull T value) {
    checkNotNull(value, ""value == null"");
    SharedPreferences.Editor editor = preferences.edit();
    adapter.set(key, value, editor);
    editor.apply();
  }"
4687,get,"  @Override @NonNull public synchronized T get() {
    return adapter.get(key, preferences, defaultValue);
  }"
4688,defaultValue,"  @Override @NonNull public T defaultValue() {
    return defaultValue;
  }"
4689,key,"  @Override @NonNull public String key() {
    return key;
  }"
4690,test,"          @Override public boolean test(String changedKey) {
            return key.equals(changedKey);
          }"
4691,apply,"          @Override public T apply(String s) {
            if(s.equals(RxSharedPreferences.NULL_KEY_EMISSION)) {
              return defaultValue;"
4692,set,"    void set(@NonNull String key, @NonNull T value, @NonNull SharedPreferences.Editor editor);
  }"
4693,get,"    @NonNull T get(@NonNull String key, @NonNull SharedPreferences preferences,
        @NonNull T defaultValue);"
4694,nullValue,"  private void nullValue(String key) {
    preferences.edit()
        .putString(key, null)"
4695,legacyNullSet,"  @Test public void legacyNullSet() {
    nullValue(""set"");
    List<String> strings = asList(""able"", ""baker"", ""charlie"");
    HashSet<String> defaultSet = new HashSet<>(strings);
    HashSet<String> expectedSet = new HashSet<>(strings);
    assertThat(rxPreferences.getStringSet(""key"", defaultSet).get()).isEqualTo(expectedSet);
  }"
4696,legacyNullObject,"  @Test public void legacyNullObject() {
    nullValue(""obj"");
    assertThat(rxPreferences.getObject(""obj"", new Point(10, 11), pointConverter).get())
        .isEqualTo(new Point(10, 11));"
4697,legacyNullLong,"  @Test public void legacyNullLong() {
    nullValue(""long"");
    assertThat(rxPreferences.getLong(""long"", 12345L).get()).isEqualTo(12345L);
  }"
4698,legacyNullInteger,"  @Test public void legacyNullInteger() {
    nullValue(""int"");
    assertThat(rxPreferences.getInteger(""int"", 12345).get()).isEqualTo(12345);
  }"
4699,legacyNullFloat,"  @Test public void legacyNullFloat() {
    nullValue(""float"");
    assertThat(rxPreferences.getFloat(""float"", 123.45f).get()).isEqualTo(123.45f);
  }"
4700,legacyNullEnum,"  @Test public void legacyNullEnum() {
    nullValue(""enum"");
    assertThat(rxPreferences.getEnum(""enum"", PAPER, Roshambo.class).get()).isEqualTo(PAPER);
  }"
4701,legacyNullBoolean,"  @Test public void legacyNullBoolean() {
    nullValue(""bool"");
    assertThat(rxPreferences.getBoolean(""bool"", true).get()).isEqualTo(true);
  }"
4702,legacyNullString,"  @Test public void legacyNullString() {
    nullValue(""string"");
    assertThat(rxPreferences.getString(""string"", ""default"").get()).isEqualTo(""default"");
  }"
4705,asObservable,"  @Test public void asObservable() {
    Preference<String> preference = rxPreferences.getString(""foo"", ""bar"");

    RecordingObserver<String> observer = observerRule.create();
    preference.asObservable().subscribe(observer);
    observer.assertValue(""bar"");

    preferences.edit().putString(""foo"", ""baz"").commit();
    observer.assertValue(""baz"");
"
4706,stringSetIsUnmodifiable,"  @Test public void stringSetIsUnmodifiable() {
    Preference<Set<String>> preference = rxPreferences.getStringSet(""foo"");
    preference.set(new LinkedHashSet<String>());
    Set<String> stringSet = preference.get();
    try {
      stringSet.add("""");"
4707,stringSetDefaultIsUnmodifiable,"  @Test public void stringSetDefaultIsUnmodifiable() {
    Preference<Set<String>> preference = rxPreferences.getStringSet(""foo"");
    Set<String> stringSet = preference.get();
    try {
      stringSet.add("""");"
4708,serialize,"          @NonNull @Override public String serialize(@NonNull Point value) {
            return null;
          }"
4709,deserialize,"          @NonNull @Override public Point deserialize(@NonNull String serialized) {
            return null;
          }"
4711,delete,"  @Test public void delete() {
    Preference<String> preference = rxPreferences.getString(""foo"");

    preferences.edit().putBoolean(""foo"", true).commit();
    assertThat(preferences.contains(""foo"")).isTrue();

    preference.delete();"
4712,isSet,"  @Test public void isSet() {
    Preference<String> preference = rxPreferences.getString(""foo"");

    assertThat(preferences.contains(""foo"")).isFalse();
    assertThat(preference.isSet()).isFalse();

    preferences.edit().putString(""foo"", ""2,3"").commit();
    assertThat(preference.isSet()).isTrue();
"
4719,key,"  @Test public void key() {
    Preference<String> preference = rxPreferences.getString(""foo"");
    assertThat(preference.key()).isEqualTo(""foo"");
  }"
4721,asConsumer,"  @CheckResult @NonNull Consumer<? super T> asConsumer();
}"
4722,asObservable,"  @CheckResult @NonNull Observable<T> asObservable();
"
4729,serialize,"    @NonNull String serialize(@NonNull T value);
  }"
4730,deserialize,"    @NonNull T deserialize(@NonNull String serialized);
"
4731,checkNotNull,"  static void checkNotNull(Object o, String message) {
    if (o == null) {
      throw new NullPointerException(message);"
4732,serialize,"  @NonNull @Override public String serialize(@NonNull Point value) {
    return value.x + "","" + value.y;
  }"
4733,deserialize,"  @NonNull @Override public Point deserialize(@NonNull String serialized) {
    String[] parts = serialized.split("","", -1);
    if (parts.length != 2) {
      throw new IllegalStateException(""Malformed point value: '"" + serialized + ""'"");
    }"
4734,toString,"  @Override public String toString() {
    return ""Point{x="" + x + "", y="" + y + '}';
  }"
4735,hashCode,"  @Override public int hashCode() {
    return 31 * x + y;
  }"
4736,equals,"  @Override public boolean equals(Object o) {
    if (this == o) return true;
    if (!(o instanceof Point)) return false;
    Point point = (Point) o;
    return x == point.x && y == point.y;
  }"
4737,set,"  @Override public void set(@NonNull String key, @NonNull Long value,
      @NonNull SharedPreferences.Editor editor) {
    editor.putLong(key, value);"
4738,get,"  @NonNull @Override public Long get(@NonNull String key, @NonNull SharedPreferences preferences,
      @NonNull Long defaultValue) {
    return preferences.getLong(key, defaultValue);"
4739,set,"  @Override public void set(@NonNull String key, @NonNull Integer value,
      @NonNull SharedPreferences.Editor editor) {
    editor.putInt(key, value);"
4740,get,"  @NonNull @Override public Integer get(@NonNull String key, @NonNull SharedPreferences preferences,
      @NonNull Integer defaultValue) {
    return preferences.getInt(key, defaultValue);"
4741,set,"  @Override public void set(@NonNull String key, @NonNull Float value,
      @NonNull SharedPreferences.Editor editor) {
    editor.putFloat(key, value);"
4742,get,"  @NonNull @Override public Float get(@NonNull String key, @NonNull SharedPreferences preferences,
      @NonNull Float defaultValue) {
    return preferences.getFloat(key, defaultValue);"
4743,set,"  public void set(@NonNull String key, @NonNull T value, @NonNull SharedPreferences.Editor editor) {
    editor.putString(key, value.name());
  }"
4744,get,"  @NonNull @Override public T get(@NonNull String key, @NonNull SharedPreferences preferences,
      @NonNull T defaultValue) {
    String value = preferences.getString(key, null);
    if (value == null) return defaultValue;
    return Enum.valueOf(enumClass, value);"
4745,set,"  public void set(@NonNull String key, @NonNull T value, @NonNull SharedPreferences.Editor editor) {
    String serialized = converter.serialize(value);
    checkNotNull(serialized, ""Serialized string must not be null from value: "" + value);
    editor.putString(key, serialized);
  }"
4747,set,"  @Override public void set(@NonNull String key, @NonNull Boolean value,
      @NonNull SharedPreferences.Editor editor) {
    editor.putBoolean(key, value);"
4748,get,"  @NonNull @Override public Boolean get(@NonNull String key, @NonNull SharedPreferences preferences,
      @NonNull Boolean defaultValue) {
    return preferences.getBoolean(key, defaultValue);"
4749,close,"	public void close() throws IOException {
	}"
4750,toQualifiedClassName,"	private String toQualifiedClassName(JPackage pkg, String fileName) {
		int suffixPosition = fileName.lastIndexOf('.');
		String className = fileName.substring(0, suffixPosition);
		String qualifiedClassName = pkg.name() + ""."" + className;
		return qualifiedClassName;
	}"
4751,openBinary,"	public OutputStream openBinary(JPackage pkg, String fileName) throws IOException {
		String qualifiedClassName = toQualifiedClassName(pkg, fileName);

		JavaFileObject sourceFile = filer.createSourceFile(qualifiedClassName);
"
4752,writeTo,"	void writeTo(AbstractCodeWriter output) throws IOException;
}"
4759,dependentProperties,"	public Set<String> dependentProperties() {

		return dependentProperties;"
4760,property,"	public String property() {

		return property;"
4762,defineFields,"	public void defineFields() {
		JFieldVar var = definedClass.field(JMod.FINAL, presentationModelClass, ""presentationModel"");
		presentationModelField = JExpr.refthis(var.name());
		presentationModelFieldWithoutThis = JExpr.ref(var.name());
	}"
4765,eventMethods,"	public Set<EventMethodInfo> eventMethods() {

		return Collections.unmodifiableSet(eventMethods);"
4766,propertyDependencies,"	public Set<PropertyDependencyInfo> propertyDependencies() {

		return Collections.unmodifiableSet(propertyDependencies);"
4767,dataSetProperties,"	public Set<DataSetPropertyInfo> dataSetProperties() {

		return Collections.unmodifiableSet(dataSetProperties);"
4768,dataSetPropertyNames,"	public Set<String> dataSetPropertyNames() {

		Set<String> names = new TreeSet<String>();

		for(DataSetPropertyInfo propertyInfo : dataSetProperties()) {"
4769,properties,"	public Set<PropertyInfo> properties() {

		return Collections.unmodifiableSet(properties);"
4770,propertyNames,"	public Set<String> propertyNames() {

		Set<String> names = new TreeSet<String>();

		for(PropertyInfo propertyInfo : properties()) {"
4772,defineFields,"	public void defineFields() {
		JFieldVar var = definedClass.field(JMod.FINAL, presentationModelClass, ""itemPresentationModel"");
		presentationModelField = JExpr.refthis(var.name());
		presentationModelFieldWithoutThis = JExpr.ref(var.name());
	}"
4778,preInitializingViews,"	PreInitializingViews preInitializingViews();
"
4782,isCreatedByFactoryMethodWithoutArg,"	boolean isCreatedByFactoryMethodWithoutArg();
"
4783,isCreatedByFactoryMethodWithArg,"	boolean isCreatedByFactoryMethodWithArg();
"
4784,itemPresentationModelObjectTypeName,"	String itemPresentationModelObjectTypeName();
"
4787,dataSetImplementationType,"	Class<? extends AbstractDataSet> dataSetImplementationType();
"
4791,defineTryToCreateFunction,"	public void defineTryToCreateFunction() {

		JMethod method = declarePublicMethodOverride(""tryToCreateFunction"", Function.class);

		JVar methodDescriptorParam = method.param(MethodDescriptor.class, ""methodDescriptor"");

		"
4792,defineTryToCreateDataSetProperty,"	public void defineTryToCreateDataSetProperty() {

		JMethod method = declarePublicMethodOverride(""tryToCreateDataSetProperty"", DataSetProperty.class);

		JVar nameParam = method.param(String.class, ""name"");

		"
4793,declarePublicMethodOverride,"	private static JMethod declarePublicMethodOverride(JDefinedClass definedClass, String methodName, Class<?> returnType) {

		JMethod method = definedClass.method(JMod.PUBLIC, returnType, methodName);

		method.annotate(Override.class);"
4794,declarePublicMethodOverride,"	private JMethod declarePublicMethodOverride(String methodName, Class<?> returnType) {

		return declarePublicMethodOverride(definedClass, methodName, returnType);"
4795,defineTryToCreateProperty,"	public void defineTryToCreateProperty() {

		try{"
4796,defineEventMethods,"	public void defineEventMethods() {

		JMethod method = declarePublicMethodOverride(""eventMethods"", setClassWithMethodDescriptor);

		
"
4797,definePropertyDependencies,"	public void definePropertyDependencies() {

		JMethod method = declarePublicMethodOverride(""propertyDependencies"", mapClassWithStringAndStringSet);

		

		JBlock body = method.body();"
4798,defineDataSetPropertyNames,"	public void defineDataSetPropertyNames() {

		JMethod method = declarePublicMethodOverride(""dataSetPropertyNames"", setClassWithString);
"
4799,newHashSetInvocation,"	private JInvocation newHashSetInvocation(Set<String> stringSet) {

		JInvocation invocation = codeModel.ref(Sets.class).staticInvoke(""newHashSet"");

		for(String str : stringSet) {"
4800,declarePublicMethodOverride,"	private static JMethod declarePublicMethodOverride(JDefinedClass definedClass, String methodName, AbstractJClass returnType) {

		JMethod method = definedClass.method(JMod.PUBLIC, returnType, methodName);

		method.annotate(Override.class);"
4801,declarePublicMethodOverride,"	private JMethod declarePublicMethodOverride(String methodName, AbstractJClass returnType) {

		return declarePublicMethodOverride(definedClass, methodName, returnType);"
4802,definePropertyNames,"	public void definePropertyNames() {

		JMethod method = declarePublicMethodOverride(""propertyNames"", setClassWithString);
"
4803,defineConstructor,"	public abstract void defineConstructor();
"
4805,writeTo,"	public void writeTo(AbstractCodeWriter output) throws IOException {

		codeModel.build(output);"
4806,countdown,"    public void countdown(View v) {
        Intent i = new Intent();
        i.setClass(this, Test2Activity.class);
        startActivity(i);
"
4807,automatic,"    public void automatic(View v) {
        setData();
"
4810,onCheckedChanged,"            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                mRingProgress.setCorner(b);
"
4812,onStopTrackingTouch,"            public void onStopTrackingTouch(SeekBar seekBar) {
"
4813,onStartTrackingTouch,"            public void onStartTrackingTouch(SeekBar seekBar) {
"
4814,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
                mRingProgress.setSweepAngle((int) (360f * (i / 100f)));
            }"
4817,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
                mRingProgress.setRotateAngle((int) (360f * (i / 100f)));
            }"
4820,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
                mRingProgress.setRingWidthScale(i / 100f);
            }"
4821,Selected,"            public void Selected(Ring r) {
                Toast.makeText(TestActivity.this, r.getName(), Toast.LENGTH_SHORT).show();
            }"
4823,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
        if (mTimerLVRingProgress != null) {
            mTimerLVRingProgress.cancel();"
4825,stopProgressAnim,"    private void stopProgressAnim() {
        if (mTimerLVRingProgress != null) {
            mTimerLVRingProgress.cancel();"
4826,startProgressAnim,"    private void startProgressAnim() {
        if (mValueLVRingProgress == 100)
            mValueLVRingProgress = 0;

        if (mTimerLVRingProgress != null) {
            mTimerLVRingProgress.cancel();"
4827,run,"            public void run() {
                if (mValueLVRingProgress < maxTime) {
"
4828,timerTaskLVRingProgress,"    public void timerTaskLVRingProgress() {
        mTimerLVRingProgress.schedule(new TimerTask() {
            @Override"
4829,stop,"    public void stop(View v) {
        stopProgressAnim();
    }"
4830,start,"    public void start(View v) {
        mRingProgress.stopAnim();
        startProgressAnim();
    }"
4833,unmodifiable,"		static <T> Trie<T> unmodifiable(Trie<T> toWrap)
		{
			return new Unmodifiable<T>(toWrap);"
4834,entrySet,"    		public Set<Entry<CharSequence,T>> entrySet()
		{
			return Collections.unmodifiableSet(super.entrySet());"
4835,values,"    		public Collection<T> values()
		{
			return Collections.unmodifiableCollection(super.values());"
4836,keySet,"    		public Set<CharSequence> keySet()
		{
			return Collections.unmodifiableSet(super.keySet());"
4837,clear,"    		public void clear()
		{
			throw new UnsupportedOperationException(""Unmodifiable Trie"");"
4838,putAll,"    		public void putAll(Map<? extends CharSequence,? extends T> t)
		{
			throw new UnsupportedOperationException(""Unmodifiable Trie"");"
4839,remove,"    		public T remove(CharSequence key)
		{
			throw new UnsupportedOperationException(""Unmodifiable Trie"");"
4840,put,"    		public T put(CharSequence key, T value)
		{
			throw new UnsupportedOperationException(""Unmodifiable Trie"");"
4841,hashCode,"    		public int hashCode()
		{
			return wrapped.hashCode();"
4842,equals,"    		public boolean equals(Object other)
		{
			return wrapped.equals(other);"
4843,entrySet,"    		public Set<Entry<CharSequence,T>> entrySet()
		{
			return wrapped.entrySet();"
4844,values,"    		public Collection<T> values()
		{
			return wrapped.values();"
4845,keySet,"    		public Set<CharSequence> keySet()
		{
			return wrapped.keySet();"
4846,clear,"    		public void clear()
		{
			wrapped.clear();"
4847,putAll,"    		public void putAll(Map<? extends CharSequence,? extends T> t)
		{
			wrapped.putAll(t);"
4848,remove,"    		public T remove(Object key)
		{
			return wrapped.remove(key);"
4849,put,"    		public T put(CharSequence key, T value)
		{
			return wrapped.put(key, value);"
4850,get,"    		public T get(Object key)
		{
			return wrapped.get(key);"
4851,containsValue,"    		public boolean containsValue(Object val)
		{
			return wrapped.containsValue(val);"
4852,containsKey,"    		public boolean containsKey(Object key)
		{
			return wrapped.containsKey(key);"
4853,isEmpty,"    		public boolean isEmpty()
		{
			return wrapped.isEmpty();"
4854,size,"    		public int size()
		{
			return wrapped.size();"
4856,getLongestMatch,"		public Map.Entry<CharSequence,T> getLongestMatch(PushbackReader keyIn) throws IOException
		{
			return wrapped.getLongestMatch(keyIn);"
4860,getLongestMatch,"	public Map.Entry<CharSequence,T> getLongestMatch(PushbackReader keyIn) throws IOException;
	public int getMaxKeyLength();"
4861,getLongestMatch,"	public Map.Entry<CharSequence,T> getLongestMatch(CharSequence key);
	public Map.Entry<CharSequence,T> getLongestMatch(PushbackReader keyIn) throws IOException;"
4862,remainder,"    public String remainder() {
        String output = input.substring(index);
        if (pushback != null) {
            output = pushback + output;
        }"
4863,reset,"    public void reset() {
        pushback = temp;
        index = mark;
    }"
4864,mark,"    public void mark() {
        temp = pushback;
        mark = index;
    }"
4865,peek,"    public boolean peek(Character c) {
        if (pushback != null && pushback.charValue() == c) {
            return true;
        }
        if (input == null) {
            return false;
        }"
4866,peek,"    public Character peek() {
        if (pushback != null) {
            return pushback;
        }
        if (input == null) {
            return null;
        }"
4867,nextOctal,"    public Character nextOctal() {
        Character c = next();
        if (c == null) {
            return null;
        }
        if (isOctalDigit(c)) {"
4868,nextHex,"    public Character nextHex() {
        Character c = next();
        if (c == null) {
            return null;
        }
        if (isHexDigit(c)) {"
4869,next,"    public Character next() {
        if (pushback != null) {
            Character save = pushback;
            pushback = null;
            return save;
        }
        if (input == null) {"
4870,hasNext,"    public boolean hasNext() {
        if (pushback != null) {
            return true;
        }
        if (input == null) {
            return false;
        }"
4871,index,"    public int index() {
        return index;
    }"
4872,isOctalDigit,"    public static boolean isOctalDigit(Character c) {
        if (c == null) {
            return false;
        }
        char ch = c.charValue();"
4873,isHexDigit,"    public static boolean isHexDigit(Character c) {
        if (c == null) {
            return false;
        }
        char ch = c.charValue();"
4877,peek,"    public boolean peek(Integer c) {
        if (pushback != null && pushback.intValue() == c) {
            return true;
        }
        if (input == null) {
            return false;
        }"
4878,peek,"    public Integer peek() {
        if (pushback != null) {
            return pushback;
        }
        if (input == null) {
            return null;
        }"
4879,nextOctal,"    public Integer nextOctal() {
        Integer c = next();
        if (c == null) {
            return null;
        }
        if (isOctalDigit(c)) {"
4880,nextHex,"    public Integer nextHex() {
        Integer c = next();
        if (c == null) {
            return null;
        }
        if (isHexDigit(c)) {"
4881,next,"    public Integer next() {
        if (pushback != null) {
            Integer save = pushback;
            pushback = null;
            return save;
        }
        if (input == null) {
            return null;
        }"
4882,isOctalDigit,"    public static boolean isOctalDigit(Integer c) {
        if (c == null) {
            return false;
        }
        Integer ch = Integer.valueOf(c);"
4883,isHexDigit,"    public static boolean isHexDigit(Integer c) {
        if (c == null) {
            return false;
        }
        Integer ch = Integer.valueOf(c);"
4896,encodeCharacter,"    public String encodeCharacter(char[] immune, Character c) {
        if (c.charValue() == '\'') {
            return ""\'\'"";
        }"
4898,findByKey,"        static Mode findByKey(int key) {
            for (Mode m : values()) {
                if (m.key == key) {
                    return m;"
4901,decodeCharacter,"    public Character decodeCharacter(PushbackSequence<Character> input) {
        switch (mode) {
            case ANSI:
                return decodeCharacterANSI(input);"
4902,encodeCharacterMySQL,"    private String encodeCharacterMySQL(Character c) {
        char ch = c.charValue();
        if (ch == 0x00) {
            return ""\\0"";
        }
        if (ch == 0x08) {
            return ""\\b"";
        }
        if (ch == 0x09) {
            return ""\\t"";
        }
        if (ch == 0x0a) {
            return ""\\n"";
        }
        if (ch == 0x0d) {"
4903,encodeCharacterANSI,"    private String encodeCharacterANSI(Character c) {
        if (c == '\'') {
            return ""\'\'"";
        }
        if (c == '\""') {"
4908,mkEntityToCharacterTrie,"	private static synchronized Trie<Integer> mkEntityToCharacterTrie()
	{
		Trie<Integer> trie = new HashTrie<Integer>();

		for(Map.Entry<Integer, String> entry : characterToEntityMap.entrySet())"
4916,encode,"	public String encode(char[] immune, String input) {
		StringBuilder sb = new StringBuilder();
		for(int offset  = 0; offset < input.length(); ){
			final int point = input.codePointAt(offset);
			if(Character.isValidCodePoint(point)){"
4917,isEmpty,"	public boolean isEmpty()
	{
		return(size() == 0);"
4918,toString,"	public String toString()
	{
		StringBuilder sb;
		boolean first;

		if(isEmpty())
			return ""{}"";
		sb = new StringBuilder();
		first = true;
		sb.append(""{ "");
		for(Map.Entry<CharSequence,T> entry : entrySet())"
4920,equals,"	public boolean equals(Object other)
	{
		if(other == null)
			return false;
		if(!(other instanceof Map))"
4922,get,"	public T get(Object key)
	{
		if(root == null || key == null)
			return null;
		if(!(key instanceof CharSequence))"
4923,entrySet,"	public Set<Map.Entry<CharSequence,T>> entrySet()
	{
		Set<Map.Entry<CharSequence,T>> entries = new HashSet<Map.Entry<CharSequence,T>>(size());

		if(root == null)"
4924,values,"	public Collection<T> values()
	{
		ArrayList<T> values = new ArrayList<T>(size());

		if(root == null)"
4925,keySet,"	public Set<CharSequence> keySet()
	{
		Set<CharSequence> keys = new HashSet<CharSequence>(size);
		
		if(root == null)"
4926,putAll,"	public void putAll(Map<? extends CharSequence, ? extends T> map)
	{
		for(Map.Entry<? extends CharSequence, ? extends T> entry : map.entrySet())"
4927,remove,"	public T remove(Object key) throws UnsupportedOperationException
	{
		throw new UnsupportedOperationException();"
4928,put,"	public T put(CharSequence key, T value) throws NullPointerException
	{
		int len;
		T old;

		if(key == null)
			throw new NullPointerException(""Null keys are not handled"");
		if(value == null)
			throw new NullPointerException(""Null values are not handled"");
		if(root == null)
			root = new Node<T>();"
4929,containsValue,"	public boolean containsValue(Object value)
	{
		if(root == null)
			return false;"
4930,containsKey,"	public boolean containsKey(Object key)
	{
		return (get(key) != null);"
4931,clear,"	public void clear()
	{
		root = null;
		maxKeyLen = -1;
		size = 0;"
4933,getLongestMatch,"	public Map.Entry<CharSequence,T> getLongestMatch(PushbackReader keyIn) throws IOException
	{
		if(root == null || keyIn == null)
			return null;"
4937,values,"		Collection<T> values(Collection<T> values)
		{
			if(value != null)
				values.add(value);
			if(nextMap == null)
				return values;"
4938,containsValue,"		boolean containsValue(Object toFind)
		{
			if(value != null && toFind.equals(value))
				return true;
			if(nextMap == null)
				return false;"
4939,remap,"		void remap()
		{
			if(nextMap == null)
				return;
			nextMap = newNodeMap(nextMap);"
4946,newNodeMap,"		private static <T> Map<Character,Node<T>> newNodeMap(Map<Character,Node<T>> prev)
		{
			return new HashMap<Character,Node<T>>(prev);"
4947,newNodeMap,"		private static <T> Map<Character,Node<T>> newNodeMap()
		{
			return new HashMap<Character,Node<T>>();"
4948,toString,"		public String toString()
		{
			return NullSafe.toString(key) + "" => "" + NullSafe.toString(value);"
4949,hashCode,"		public int hashCode()
		{
			return NullSafe.hashCode(key) ^ NullSafe.hashCode(value);"
4950,equals,"		public boolean equals(Object o)
		{
			if(o instanceof Map.Entry)
				return equals((Map.Entry)o);"
4951,equals,"		public boolean equals(Map.Entry other)
		{
			return (NullSafe.equals(key, other.getKey()) && NullSafe.equals(value, other.getValue()));"
4955,newInstanceIfNeeded,"		static <T> Entry<T> newInstanceIfNeeded(CharSequence key, T value)
		{
			if(value == null || key == null)
				return null;"
4956,newInstanceIfNeeded,"		static <T> Entry<T> newInstanceIfNeeded(CharSequence key, int keyLength, T value)
		{
			if(value == null || key == null)
				return null;
			if(key.length() > keyLength)"
4957,decodeCharacter,"    public Character decodeCharacter(PushbackString input) {

        input.mark();
        Character first = input.next();

        if (first == null) {
            input.reset();
            return null;
        }
"
4958,encodeCharacter,"    public String encodeCharacter(char[] immune, Character c) {

        if (c.charValue() == '\'') {
            return ""\'\'"";
        }"
4960,containsCharacter,"	public boolean containsCharacter( char c, char[] array );
"
4964,getHexForNonAlphanumeric,"	public String getHexForNonAlphanumeric(int c);
"
4965,getHexForNonAlphanumeric,"	public String getHexForNonAlphanumeric(char c);
	"
4966,decodeCharacter,"	public T decodeCharacter( PushbackSequence<T> input );
"
4968,encodeCharacter,"	public String encodeCharacter( char[] immune, int codePoint );
"
4969,encodeCharacter,"	public String encodeCharacter( char[] immune, Character c );
	"
4970,encode,"	public String encode(char[] immune, String input);
"
4973,pushback,"    public void pushback(T c) {
        pushback = c;
    }"
4974,decode,"	public String decode(String input) {
		StringBuilder sb = new StringBuilder();
		PushbackSequence<Integer> pbs = new PushBackSequenceImpl(input);
		while (pbs.hasNext()) {
			Integer c = decodeCharacter(pbs);
			boolean isValid = null == c ? false:Character.isValidCodePoint(c);"
4975,containsCharacter,"    public boolean containsCharacter(char c, char[] array) {
        for (char ch : array) {
            if (c == ch) {
                return true;"
4976,toHex,"    public String toHex(int c) {
        return Integer.toHexString(c);
    }"
4977,toHex,"    public String toHex(char c) {
        return Integer.toHexString(c);
    }"
4978,toOctal,"    public String toOctal(char c) {
        return Integer.toOctalString(c);
    }"
4981,decodeCharacter,"	public T decodeCharacter( PushbackSequence<T> input ) {
		return input.next();
	}"
4982,encodeCharacter,"    public String encodeCharacter(char[] immune, int codePoint) {
        String rval = """";
        if (Character.isValidCodePoint(codePoint)) {
            rval = new StringBuilder().appendCodePoint(codePoint).toString();
        }"
4983,encodeCharacter,"    public String encodeCharacter(char[] immune, char c) {
        throw new IllegalArgumentException(""You tried to call encodeCharacter with a char.  Nope.  Use Character instead!"");
    }"
4984,encodeCharacter,"    public String encodeCharacter(char[] immune, Character c) {
        return """" + c;
    }"
4985,encode,"    public String encode(char[] immune, String input) {
        StringBuilder sb = new StringBuilder();
        for (int offset = 0; offset < input.length(); ) {
            final int point = input.codePointAt(offset);
            if (isBmpCodePoint(point)) {"
4987,decode,"	public String decode(String input) {
		StringBuilder sb = new StringBuilder();
		PushbackSequence<Character> pbs = new PushbackString(input);
		while (pbs.hasNext()) {
			Character c = decodeCharacter(pbs);
			if (c != null) {"
4988,hashCode,"  public int hashCode() {
    return thumbnail.hashCode();
  }"
4989,equals,"  @Override public boolean equals(Object obj) {
    if (obj instanceof Video) {
      Video other = (Video) obj;"
4991,isLive,"  public boolean isLive() {
    return live;
  }"
4997,isLiked,"  public boolean isLiked() {
    return liked;
  }"
4999,isFavorite,"  public boolean isFavorite() {
    return favorite;
  }"
5002,configureTitleAndThumbnail,"  private void configureTitleAndThumbnail(final Video video) {
    int maxInt = VIDEO_INFO.size();
    int randomIndex = random.nextInt(maxInt);
    String title = getKeyForIndex(randomIndex);
    video.setTitle(title);
    String thumbnail = getValueForIndex(randomIndex);
    video.setThumbnail(thumbnail);
  }"
5003,configureLiveStatus,"  private void configureLiveStatus(final Video video) {
    boolean live = random.nextBoolean();
    video.setLive(live);
  }"
5004,configureFavoriteStatus,"  private void configureFavoriteStatus(final Video video) {
    boolean favorite = random.nextBoolean();
    video.setFavorite(favorite);
  }"
5005,configureLikeStatus,"  private void configureLikeStatus(final Video video) {
    boolean liked = random.nextBoolean();
    video.setLiked(liked);
  }"
5006,generateRandomVideo,"  private Video generateRandomVideo() {
    Video video = new Video();
    configureFavoriteStatus(video);
    configureLikeStatus(video);
    configureLiveStatus(video);
    configureTitleAndThumbnail(video);
    return video;
  }"
5008,generate,"  public List<Video> generate(final int videoCount) {
    List<Video> videos = new LinkedList<Video>();
    for (int i = 0; i < videoCount; i++) {
      Video video = generateRandomVideo();
      videos.add(video);"
5018,onResume,"    public void onResume() {
        startCameraPreview();
    }"
5019,onPause,"    public void onPause() {
        stopCameraPreview();
    }"
5021,surfaceDestroyed,"    public void surfaceDestroyed(SurfaceHolder holder) {
        stopCamera();
    }"
5022,surfaceCreated,"    public void surfaceCreated(SurfaceHolder holder) {
        mSurfaceCreated = true;
        startCamera();
    }"
5023,scheduleAutoFocus,"    private void scheduleAutoFocus() {
        mAutoFocusHandler.postDelayed(doAutoFocus, 1000);
    }"
5024,onAutoFocus,"        public void onAutoFocus(boolean success, Camera camera) {
            scheduleAutoFocus();
        }"
5025,run,"        public void run() {
            if(mCamera != null && mPreviewing && mAutoFocus && mSurfaceCreated) {
                safeAutoFocus();"
5027,safeAutoFocus,"    public void safeAutoFocus() {
        try {
            mCamera.autoFocus(autoFocusCB);"
5029,stopCameraPreview,"    public void stopCameraPreview() {
        if(mCamera != null) {
            try {"
5030,startCameraPreview,"    public void startCameraPreview() {
        if(mCamera != null) {
            try {"
5032,stopCamera,"    public void stopCamera() {
        stopCameraPreview();
        mCameraManager.releaseCamera();
    }"
5033,startCamera,"    public void startCamera() {
        mCamera = mCameraManager.getCamera(mCameraType);
        startCameraPreview();
    }"
5041,onPreviewFrame,"    public void onPreviewFrame(byte[] data, Camera camera) {
        try {
            Camera.Parameters parameters = camera.getParameters();"
5042,stopCamera,"    public void stopCamera() {
        mPreview.stopCamera();
    }"
5047,createViewManagers,"    public List<ViewManager> createViewManagers(
            ReactApplicationContext reactContext) {
        return Arrays.<ViewManager>asList("
5048,createJSModules,"    public List<Class<? extends JavaScriptModule>> createJSModules() {
        return Collections.emptyList();
    }"
5049,createNativeModules,"    public List<NativeModule> createNativeModules(
            ReactApplicationContext reactContext) {
        return Collections.emptyList();"
5051,onHostDestroy,"    public void onHostDestroy() {
        mScannerView.stopCamera();
    }"
5052,onHostPause,"    public void onHostPause() {
        mScannerView.onPause();
    }"
5053,onHostResume,"    public void onHostResume() {
        mScannerView.onResume();
    }"
5059,scrollYIsComputed,"	public boolean scrollYIsComputed() {
		return scrollIsComputed;
	}"
5060,computeScrollY,"	public void computeScrollY() {
		mHeight = 0;
		mItemCount = getAdapter().getCount();
		if (mItemOffsetY == null) {
			mItemOffsetY = new int[mItemCount];
		}
		for (int i = 0; i < mItemCount; ++i) {"
5062,onTabReselected,"    public void onTabReselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
    }"
5063,onTabUnselected,"    public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
    }"
5064,onTabSelected,"    public void onTabSelected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
        mPager.setCurrentItem(tab.getPosition());
    }"
5065,onPageSelected,"            public void onPageSelected(int position) {
                getActionBar().setSelectedNavigationItem(position);
            }"
5070,onScrollStateChanged,"			public void onScrollStateChanged(AbsListView view, int scrollState) {
			}"
5071,onScroll,"			public void onScroll(AbsListView view, int firstVisibleItem,
					int visibleItemCount, int totalItemCount) {
				
				mScrollY = 0;
				int translationY = 0;
				
				if (mListView.scrollYIsComputed()) {
					mScrollY = mListView.getComputedScrollY();"
5072,onGlobalLayout,"					public void onGlobalLayout() {
						mQuickReturnHeight = mQuickReturnView.getHeight();
						mListView.computeScrollY();
						mCachedVerticalScrollRange = mListView.getListHeight();
					}"
5073,onActivityCreated,"	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		
		mListView = (QuickReturnListView) getListView();
		
		mQuickReturnView.setText(""Default"");
		mListView.addHeaderView(mHeader);
		
		String[] array = new String[] { ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"","
5074,onCreateView,"	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.fragment, null);
		mHeader = inflater.inflate(R.layout.header, null);
		mQuickReturnView = (TextView) view.findViewById(R.id.sticky);
		mPlaceHolder = mHeader.findViewById(R.id.placeholder);
		return view;"
5076,onScroll,"			public void onScroll(AbsListView view, int firstVisibleItem,
					int visibleItemCount, int totalItemCount) {

				mScrollY = 0;
				int translationY = 0;

				if (mListView.scrollYIsComputed()) {
					mScrollY = mListView.getComputedScrollY();"
5077,onGlobalLayout,"					public void onGlobalLayout() {
						mQuickReturnHeight = mQuickReturnView.getHeight();
						mListView.computeScrollY();
					}"
5078,onActivityCreated,"	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);

		mListView = (QuickReturnListView) getListView();

		String[] array = new String[] { ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"","
5079,onCreateView,"	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.footer_fragment, null);
		mQuickReturnView = (TextView) view.findViewById(R.id.footer);
		return view;"
5081,onAnimationEnd,"							public void onAnimationEnd(Animation animation) {
								noAnimation = false;
								mState = STATE_OFFSCREEN;
							}"
5082,onAnimationRepeat,"							public void onAnimationRepeat(Animation animation) {
"
5083,onAnimationStart,"							public void onAnimationStart(Animation animation) {
							}"
5084,onAnimationEnd,"							public void onAnimationEnd(Animation animation) {
								noAnimation = false;
								mMinRawY = rawY;
								mState = STATE_EXPANDED;
							}"
5089,onActivityCreated,"	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);

		mListView = (QuickReturnListView) getListView();

		mQuickReturnView.setText(""Animation"");
		mListView.addHeaderView(mHeader);

		String[] array = new String[] { ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"","
5098,fetch,"    public void fetch() {
        throw new UnsupportedOperationException(
                ""Required method instantiateItem was not overridden"");"
5099,attachWithNoClear,"    public void attachWithNoClear() {
        throw new UnsupportedOperationException(
                ""Required method instantiateItem was not overridden"");"
5100,attach,"    public void attach() {
        attachWithNoClear();
        clear();
    }"
5103,formatWebp,"    public T formatWebp() {
        this.format = Format.webp;
        return (T) this;
    }"
5104,formatPng,"    public T formatPng() {
        this.format = Format.png;
        return (T) this;
    }"
5105,formatOrigin,"    public T formatOrigin() {
        this.format = Format.origin;
        return (T) this;
    }"
5106,formatJpg,"    public T formatJpg() {
        this.format = Format.jpg;
        return (T) this;
    }"
5107,addOpRotate,"    public T addOpRotate(final int rotateDegree) {
        opList.add(new Op().rotate(rotateDegree));
        return (T) this;
    }"
5108,addOpBlur,"    public T addOpBlur(final int radius, final int sigma) {
        opList.add(new Op().blur(radius, sigma));
        return (T) this;
    }"
5110,rotate,"        public Op rotate(final int rotateDegree) {
            this.name = OpName.rotate;
            this.val1 = rotateDegree;
            return this;
        }"
5111,blur,"        public Op blur(final int radius, final int sigma) {
            this.name = OpName.blur;
            this.val1 = radius;
            this.val2 = sigma;
            return this;
        }"
5113,isUrl,"    private static boolean isUrl(final String url) {
        return !TextUtils.isEmpty(url) && url.startsWith(""http"");
    }"
5114,wTimesN2H,"    public T wTimesN2H(final float n) {
        this.h = (int) (this.w * n);
        return (T) this;
    }"
5117,clear,"    public void clear() {
        this.context = null;
        this.imageView = null;
        this.mode = MODE_FIT_XY;
        this.w = 0;
        this.h = 0;
        this.opList.clear();
    }"
5119,forceOrigin,"    public T forceOrigin() {
        return mode(MODE_FORCE_ORIGIN);
    }"
5120,centerCrop,"    public T centerCrop() {
        return mode(MODE_CENTER_CROP);
    }"
5121,fitXY,"    public T fitXY() {
        return mode(MODE_FIT_XY);
    }"
5122,mode,"    public T mode(final int mode) {
        this.mode = mode;
        return (T) this;
    }"
5124,h,"    public T h(final int h) {
        this.h = h;
        return (T) this;
    }"
5126,size,"    public T size(final int size) {
        w(size);
        h(size);
        return (T) this;
    }"
5128,w,"    public T w(final int w) {
        this.w = w;
        return (T) this;
    }"
5129,clear,"    public void clear() {
        super.clear();
        this.attachCallback = null;
        this.transformation = null;
    }"
5131,attachCallback,"    public PicassoQiniuImageLoader attachCallback(final Callback attachCallback) {
        this.attachCallback = attachCallback;
        return this;
    }"
5132,transformation,"    public PicassoQiniuImageLoader transformation(final Transformation transformation) {
        this.transformation = transformation;
        return this;
    }"
5133,target,"    public PicassoQiniuImageLoader target(final Target target) {
        this.target = target;
        return this;
    }"
5135,defaultD,"    public PicassoQiniuImageLoader defaultD(final Drawable defaultDrawable) {
        this.defaultDrawable = defaultDrawable;
        return this;
    }"
5136,defaultD,"    public PicassoQiniuImageLoader defaultD(final int defaultDrawable) {
        this.defaultDrawable = getDrawable(getImageView(), defaultDrawable);
        return this;
    }"
5137,findTarget,"    private Target findTarget() {
        if (this.target != null) {
            return this.target;
        }
"
5139,avatar,"    public PicassoQiniuImageLoader avatar() {
        this.isAvatar = true;
        return this;
    }"
5140,get,"        Target get(final String originUrl, final Context context);
    }"
5141,attach,"    static RequestCreator attach(final Context context, String url, final Drawable placeHolder) {
        if (context == null) {
            return null;
        }
"
5142,attach,"    static RequestCreator attach(final Context context, String url) {
        return attach(context, url, null);
    }"
5144,fetch,"    static void fetch(final Context context, String url, Target callback) {
        RequestCreator creator = attach(context, url);

        if (creator == null) {
            Log.e(TAG, String.format(""creator == null : url[%s], context[%s]"", url, context));"
5145,display,"    static void display(ImageView imageView, String url, Drawable drawable, final Transformation transformation, Target target, Callback callback) {
        if (imageView == null) {
            return;
        }"
5146,createLoader,"    public static PicassoQiniuImageLoader createLoader(final Context context, final String oriUrl) {
        return new PicassoQiniuImageLoader(context, oriUrl);
    }"
5147,createLoader,"    public static PicassoQiniuImageLoader createLoader(final ImageView imageView, final String oriUrl) {
        return new PicassoQiniuImageLoader(imageView, oriUrl);
    }"
5150,openGitHub,"    private void openGitHub() {
        Uri uri = Uri.parse(getString(R.string.app_github_url));
        Intent intent = new Intent(Intent.ACTION_VIEW, uri);
        startActivity(intent);
    }"
5152,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return super.onCreateOptionsMenu(menu);
    }"
5153,assignViews,"    private void assignViews() {
        image1 = (ImageView) findViewById(R.id.image_1);
        image2 = (ImageView) findViewById(R.id.image_2);
        image3 = (ImageView) findViewById(R.id.image_3);
        image4 = (ImageView) findViewById(R.id.image_4);
        image5 = (ImageView) findViewById(R.id.image_5);
    }"
5154,dp2px,"    public int dp2px(float dpValue) {
        final float scale = getResources().getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);
    }"
5155,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        assignViews();

        PicassoLoader.createLoader(image1, MOCK_DATA_URL)
                .attach();

        PicassoLoader.createLoader(image2, MOCK_DATA_URL)
                .centerCrop()"
5156,onShare,"	public void onShare(Platform platform, ShareParams paramsToShare);
"
5159,onError,"	public final void onError(Platform platform, int action, Throwable t) {
		t.printStackTrace();

		Message msg = new Message();
		msg.arg1 = 2;
		msg.arg2 = action;
		msg.obj = t;
		UIHandler.sendMessage(msg, this);
"
5160,onComplete,"	public final void onComplete(Platform platform, int action,
			HashMap<String, Object> res) {
		Message msg = new Message();
		msg.arg1 = 1;
		msg.arg2 = action;
		msg.obj = platform;
		UIHandler.sendMessage(msg, this);"
5161,showEditPage,"	protected abstract void showEditPage(Context context, Platform platform, ShareParams sp);
"
5162,showPlatformPage,"	protected abstract void showPlatformPage(Context context);
"
5163,handleMessage,"			public boolean handleMessage(Message msg) {
				int resId = ResHelper.getStringRes(context, resOrName);
				if (resId > 0) {
					Toast.makeText(context, resId, Toast.LENGTH_SHORT).show();
				} else {"
5164,toast,"	private void toast(final String resOrName) {
		UIHandler.sendEmptyMessage(0, new Callback() {
			public boolean handleMessage(Message msg) {"
5165,shareDataToShareParams,"	final ShareParams shareDataToShareParams(Platform plat) {
		if (plat == null || shareParamsMap == null) {
			toast(""ssdk_oks_share_failed"");
			return null;
		}"
5167,prepareForEditPage,"	private void prepareForEditPage(Platform platform) {
		if (formateShareData(platform)) {
			ShareParams sp = shareDataToShareParams(platform);"
5168,shareSilently,"	final void shareSilently(Platform platform) {
		if (formateShareData(platform)) {
			ShareParams sp = shareDataToShareParams(platform);"
5169,isUseClientToShare,"	final boolean isUseClientToShare(Platform platform) {
		String name = platform.getName();
		if (""Wechat"".equals(name) || ""WechatMoments"".equals(name)
				|| ""WechatFavorite"".equals(name) || ""ShortMessage"".equals(name)
				|| ""Email"".equals(name) || ""Qzone"".equals(name)"
5171,disableSSO,"	public final void disableSSO() {
		disableSSO = true;
	}"
5179,fromValue,"	public static OnekeyShareTheme fromValue(int value) {
		for (OnekeyShareTheme theme : OnekeyShareTheme.values()) {
			if (theme.value == value) {
				return theme;"
5182,isUseClientToShare,"	protected final boolean isUseClientToShare(Platform platform) {
		return impl.isUseClientToShare(platform);
	}"
5183,formateShareData,"	protected final ShareParams formateShareData(Platform platform) {
		if (impl.formateShareData(platform)) {
			return impl.shareDataToShareParams(platform);
		}"
5184,shareSilently,"	protected final void shareSilently(Platform platform) {
		impl.shareSilently(platform);
	}"
5185,isDisableSSO,"	protected final boolean isDisableSSO() {
		return impl.disableSSO;
	}"
5190,isSilent,"	protected final boolean isSilent() {
		return impl.silent;
	}"
5192,isDialogMode,"	protected final boolean isDialogMode() {
		return impl.dialogMode;
	}"
5198,addHiddenPlatform,"	public void addHiddenPlatform(String platform) {
		HashMap<String, String> hiddenPlatforms = ResHelper.forceCast(params.get(""hiddenPlatforms""));
		hiddenPlatforms.put(platform, platform);
	}"
5201,disableSSOWhenAuthorize,"	public void disableSSOWhenAuthorize() {
		params.put(""disableSSO"", true);
	}"
5228,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
"
5241,onClick,"			@Override public void onClick(View view) {
				mPopField.popView(imageView1);
			}"
5244,toRadians,"    private static double toRadians(final double degrees) {
        return 2 * PI * degrees / 360;
    }"
5245,constructRoundedPolygonPath,"    private void constructRoundedPolygonPath(
            @NonNull final Path path,
            @IntRange(from = 3) final int sideCount,
            final float centerX,
            final float centerY,
            @FloatRange(from = 0, fromInclusive = false) final float outerRadius,
            @FloatRange(from = 0) final float cornerRadius) {"
5246,constructNonRoundedPolygonPath,"    private void constructNonRoundedPolygonPath(
            @NonNull final Path path,
            @IntRange(from = 3) final int sideCount,
            final float centerX,"
5247,constructPolygonPath,"    public void constructPolygonPath(
            @NonNull final Path path,
            @IntRange(from = 3) final int sideCount,
            final float centerX,
            final float centerY,"
5248,drawPolygon,"    public void drawPolygon(
            @NonNull final Canvas canvas,
            @IntRange(from = 3) final int sideCount,
            final float centerX,"
5249,internalGetSectionCount,"    private int internalGetSectionCount() {
        if (mSectionCount >= 0) {
            return mSectionCount;
        }
        mSectionCount = getSectionCount();"
5250,internalGetCountForSection,"    private int internalGetCountForSection(int section) {
        Integer cachedSectionCount = mSectionCountCache.get(section);
        if (cachedSectionCount != null) {
            return cachedSectionCount;
        }
        int sectionCount = getCountForSection(section);
        mSectionCountCache.put(section, sectionCount);"
5251,getSectionHeaderView,"    public abstract View getSectionHeaderView(int section, View convertView, ViewGroup parent);
"
5252,getItemView,"    public abstract View getItemView(int section, int position, View convertView, ViewGroup parent);
"
5253,getCountForSection,"    public abstract int getCountForSection(int section);
"
5254,getSectionCount,"    public abstract int getSectionCount();
"
5255,getItemId,"    public abstract long getItemId(int section, int position);
"
5256,getItem,"    public abstract Object getItem(int section, int position);
"
5261,isSectionHeader,"    public final boolean isSectionHeader(int position) {
        int sectionStart = 0;
        for (int i = 0; i < internalGetSectionCount(); i++) {
            if (position == sectionStart) {
                return true;"
5270,notifyDataSetInvalidated,"    public void notifyDataSetInvalidated() {
        mSectionCache.clear();
        mSectionPositionCache.clear();
        mSectionCountCache.clear();
        mCount = -1;
        mSectionCount = -1;
        super.notifyDataSetInvalidated();
    }"
5271,notifyDataSetChanged,"    public void notifyDataSetChanged() {
        mSectionCache.clear();
        mSectionPositionCache.clear();
        mSectionCountCache.clear();
        mCount = -1;
        mSectionCount = -1;
        super.notifyDataSetChanged();
    }"
5272,onSectionClick,"        public abstract void onSectionClick(AdapterView<?> adapterView, View view, int section, long id);
"
5273,onItemClick,"        public abstract void onItemClick(AdapterView<?> adapterView, View view, int section, int position, long id);
"
5276,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);

        mWidthMode = MeasureSpec.getMode(widthMeasureSpec);
        mHeightMode = MeasureSpec.getMode(heightMeasureSpec);"
5279,ensurePinnedHeaderLayout,"    private void ensurePinnedHeaderLayout(View header) {
        if (header.isLayoutRequested()) {
            int widthSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth(), mWidthMode);"
5281,onScrollStateChanged,"    public void onScrollStateChanged(AbsListView view, int scrollState) {
        if (mOnScrollListener != null) {
            mOnScrollListener.onScrollStateChanged(view, scrollState);"
5286,getSectionHeaderViewType,"        public int getSectionHeaderViewType(int section);
"
5287,getSectionHeaderView,"        public View getSectionHeaderView(int section, View convertView, ViewGroup parent);
"
5288,getSectionForPosition,"        public int getSectionForPosition(int position);
"
5289,isSectionHeader,"        public boolean isSectionHeader(int position);
"
5290,onUserDeclinePermission,"    @Override protected void onUserDeclinePermission(@NonNull String permissionName) {
        Log.w(""Warning"", ""Permission ( "" + permissionName + "" ) is skipped you can request it again by calling doing such\n "" +
                ""if (permissionHelper.isExplanationNeeded(permissionName)) {\n"" +"
5292,backPressIsEnabled,"    @Override protected boolean backPressIsEnabled() {
        return false;
    }"
5295,theme,"    @Override protected int theme() {
        return R.style.noActionBar;
    }"
5297,onCreate,"    @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.fragment_activity_layout);
    }"
5298,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionFragmentHelper.requestAfterExplanation(permission);
            }"
5300,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionFragmentHelper.requestAfterExplanation(permissions);
            }"
5303,onNoPermissionNeeded,"    @Override public void onNoPermissionNeeded() {
        result.setText(""Permission(s) not needed"");
        Log.i(""onNoPermissionNeeded"", ""Permission(s) not needed"");
    }"
5305,onPermissionNeedExplanation,"    @Override public void onPermissionNeedExplanation(@NonNull String permissionName) {
        Log.i(""NeedExplanation"", ""Permission( "" + permissionName + "" ) needs Explanation"");
        if (!isSingle) {
            neededPermission = PermissionFragmentHelper.declinedPermissions(this, MULTI_PERMISSIONS);"
5306,onPermissionPreGranted,"    @Override public void onPermissionPreGranted(@NonNull String permissionsName) {
        result.setText(""Permission( "" + permissionsName + "" ) preGranted"");
        Log.i(""onPermissionPreGranted"", ""Permission( "" + permissionsName + "" ) preGranted"");
    }"
5307,onPermissionDeclined,"    @Override public void onPermissionDeclined(@NonNull String[] permissionName) {
        result.setText(""Permission(s) "" + Arrays.toString(permissionName) + "" Declined"");
        Log.i(""onPermissionDeclined"", ""Permission(s) "" + Arrays.toString(permissionName) + "" Declined"");
    }"
5308,onPermissionGranted,"    @Override public void onPermissionGranted(@NonNull String[] permissionName) {
        result.setText(""Permission(s) "" + Arrays.toString(permissionName) + "" Granted"");
        Log.i(""onPermissionGranted"", ""Permission(s) "" + Arrays.toString(permissionName) + "" Granted"");
    }"
5309,onRequestPermissionsResult,"    @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        permissionFragmentHelper.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }"
5310,onActivityResult,"    @Override public void onActivityResult(int requestCode, int resultCode, Intent data) {
        permissionFragmentHelper.onActivityForResult(requestCode);
    }"
5312,onCreate,"    @Override public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        permissionFragmentHelper = PermissionFragmentHelper.getInstance(this);
    }"
5313,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionHelper.requestAfterExplanation(permission);
            }"
5315,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionHelper.requestAfterExplanation(permissions);
            }"
5320,onPermissionNeedExplanation,"    @Override public void onPermissionNeedExplanation(@NonNull String permissionName) {
        Log.i(""NeedExplanation"", ""Permission( "" + permissionName + "" ) needs Explanation"");
        if (!isSingle) {
            neededPermission = PermissionHelper.declinedPermissions(this, MULTI_PERMISSIONS);"
5324,onRequestPermissionsResult,"    @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        permissionHelper.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }"
5325,onActivityResult,"    @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        permissionHelper.onActivityForResult(requestCode);
    }"
5327,onClick,"    @Override public void onClick(View v) {
        boolean isBadAss = v.getId() == R.id.badAss;
        Intent intent;
        if (isBadAss) {
            intent = new Intent(this, SampleActivity.class);
        } else {
            intent = new Intent(this, SamplePagerActivity.class);"
5328,onCreate,"    @Override protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main_activity);
        findViewById(R.id.badAss).setOnClickListener(this);
        findViewById(R.id.pagerActivity).setOnClickListener(this);
    }"
5330,isBlockParallaxY,"    public boolean isBlockParallaxY() {
        return blockParallaxY;
    }"
5332,isBlockParallaxX,"    public boolean isBlockParallaxX() {
        return blockParallaxX;
    }"
5338,isReverseY,"    public boolean isReverseY() {
        return reverseY;
    }"
5340,isReverseX,"    public boolean isReverseX() {
        return reverseX;
    }"
5344,applyParallax,"    private void applyParallax() {
        int[] location = new int[2];
        getLocationOnScreen(location);

        if (scrollSpaceY != 0
                && !blockParallaxY) {"
5345,initSizeScreen,"    private void initSizeScreen() {
        WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
        Display display = wm.getDefaultDisplay();
        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
            Point size = new Point();"
5346,parallaxAnimation,"    private void parallaxAnimation() {
        initSizeScreen();

        applyParallax();"
5347,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        applyParallax();
    }"
5349,onDraw,"                public void onDraw() {
                    applyParallax();
                }"
5350,onGlobalLayout,"            public void onGlobalLayout() {
                heightView = (float) getHeight();
                widthView = (float) getWidth();

                applyParallax();"
5351,onScrollChanged,"            public void onScrollChanged() {
                applyParallax();
            }"
5352,onAttachedToWindow,"    protected void onAttachedToWindow() {
        super.onAttachedToWindow();

        mOnScrollChangedListener = new ViewTreeObserver.OnScrollChangedListener() {
            @Override
            public void onScrollChanged() {
                applyParallax();
            }
        };
"
5365,applyParallax,"    private void applyParallax() {
        int[] location = new int[2];
        getLocationOnScreen(location);

        if (scrollSpaceY != 0 && !blockParallaxY) {
            float locationY = (float) location[1];"
5373,onGlobalLayout,"            public void onGlobalLayout() {
                heightImageView = (float) getHeight();
                widthImageView = (float) getWidth();

                applyParallax();"
5376,onCreateView,"        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            int anInt = getArguments().getInt(ARG_SECTION_NUMBER);
            int resource;
            switch (anInt) {
                case 0:
                default:"
5377,newInstance,"        public static PlaceholderFragment newInstance(int sectionNumber) {
            PlaceholderFragment fragment = new PlaceholderFragment();
            Bundle args = new Bundle();
            args.putInt(ARG_SECTION_NUMBER, sectionNumber);
            fragment.setArguments(args);
            return fragment;
        }"
5386,onPageSelected,"            public void onPageSelected(int position) {
                actionBar.setSelectedNavigationItem(position);
            }"
5388,interpolatorId,"    public static Interpolator interpolatorId(int interpolationId) {
        switch (interpolationId) {
            case LINEAR:"
5389,createIntent,"    public static Intent createIntent(Context context) {
        return new Intent(context, AboutActivity.class);
    }"
5390,onClick,"            public void onClick(View v) {
                finish();
            }"
5393,onRepeat,"            public void onRepeat(int index) {
                Log.i(""asd"", ""onRepeat selected: "" + index);
            }"
5394,onSelected,"            public void onSelected(int index, int old) {
                Log.i(""asd"", ""selected: "" + index + "" old: "" + old);
            }"
5396,showToast,"    private void showToast(String text) {
        Toast.makeText(TestControllerActivity.this, text, Toast.LENGTH_SHORT).show();
    }"
5397,onClick,"            public void onClick(View v) {
                String text = mEdtIndex.getText().toString();
                if (TextUtils.isEmpty(text)) {
                    showToast(""input index"");
                    return;"
5398,onClick,"            public void onClick(View v) {
                String text = mEdtIndex.getText().toString();
                if (TextUtils.isEmpty(text)) {
                    showToast(""input index"");
                    return;
                }"
5404,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_test_controller);

        initView();

        initNavigation();"
5405,newRoundItem,"    private BaseTabItem newRoundItem(int drawable,int checkedDrawable,String text){
        SpecialTabRound mainTab = new SpecialTabRound(this);
        mainTab.initialize(drawable,checkedDrawable,text);
        mainTab.setTextDefaultColor(0xFF888888);
        mainTab.setTextCheckedColor(0xFF009688);
        return mainTab;
    }"
5406,newItem,"    private BaseTabItem newItem(int drawable, int checkedDrawable, String text){
        SpecialTab mainTab = new SpecialTab(this);
        mainTab.initialize(drawable,checkedDrawable,text);
        mainTab.setTextDefaultColor(0xFF888888);
        mainTab.setTextCheckedColor(0xFF009688);
        return mainTab;
    }"
5408,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mTvText.setText(""C"");
    }"
5409,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mTvText.setText(""B"");
    }"
5410,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mTvText.setText(""A"");
    }"
5411,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        mTvText = view.findViewById(R.id.tv_text);
    }"
5412,onCreateView,"    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_navigation_page, container, false);
    }"
5413,onSupportNavigateUp,"    public boolean onSupportNavigateUp() {
        return mNavController.navigateUp();
    }"
5414,initBottomNavigation,"    private void initBottomNavigation(PageNavigationView pageNavigationView) {
        NavigationController navigationController = pageNavigationView.material()
                .addItem(R.drawable.ic_favorite_gray_24dp, ""A"")
                .addItem(R.drawable.ic_favorite_gray_24dp, ""B"")"
5415,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_navigation_component);
        mNavigation = findViewById(R.id.navigation);

        mNavController = Navigation.findNavController(this, R.id.nav_host_fragment);
"
5419,navigationArchitectureComponent,"    public void navigationArchitectureComponent(View view) {
        startActivity(new Intent(this, NavigationComponentActivity.class));
    }"
5420,toTestController,"    public void toTestController(View view) {
        startActivity(new Intent(this, TestControllerActivity.class));
    }"
5421,toCsutomVertical,"    public void toCsutomVertical(View view) {
        startActivity(new Intent(this, VerticalCustomActivity.class));
    }"
5422,toVertical,"    public void toVertical(View view) {
        startActivity(new Intent(this, VerticalActivity.class));
    }"
5423,toSpecial,"    public void toSpecial(View view) {
        startActivity(new Intent(this, SpecialActivity.class));
    }"
5424,toHide,"    public void toHide(View view) {
        startActivity(new Intent(this, HideActivity.class));
    }"
5425,toBehavior,"    public void toBehavior(View view) {
        startActivity(new Intent(this, BehaviorActivity.class));
    }"
5426,toCustom2,"    public void toCustom2(View view) {
        startActivity(new Intent(this, Custom2Activity.class));
    }"
5427,toCustom,"    public void toCustom(View view) {
        startActivity(new Intent(this, CustomActivity.class));
    }"
5428,toMaterialdesign,"    public void toMaterialdesign(View view) {
        startActivity(new Intent(this, MaterialDesignActivity.class));
    }"
5429,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }"
5431,onBindViewHolder,"        public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {

            if (holder.itemView instanceof TextView) {"
5434,onCreateView,"        public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
            return inflater.inflate(R.layout.recyclerview, container, false);
        }"
5439,newItem,"    private BaseTabItem newItem(int drawable, int checkedDrawable, String text) {
        NormalItemView normalItemView = new NormalItemView(this);
        normalItemView.initialize(drawable, checkedDrawable, text);
        normalItemView.setTextDefaultColor(Color.GRAY);
        normalItemView.setTextCheckedColor(0xFF009688);
        return normalItemView;
    }"
5441,newItem_test,"    private BaseTabItem newItem_test(int drawable, int checkedDrawable) {
        TestRepeatTab testRepeatTab = new TestRepeatTab(this);
        testRepeatTab.initialize(drawable, checkedDrawable);
        return testRepeatTab;
    }"
5442,newItem,"    private BaseTabItem newItem(int drawable, int checkedDrawable) {
        OnlyIconItemView onlyIconItemView = new OnlyIconItemView(this);
        onlyIconItemView.initialize(drawable, checkedDrawable);
        return onlyIconItemView;
    }"
5447,onViewCreated,"        public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
            RecyclerView recyclerView = view.findViewById(R.id.recyclerView);
            recyclerView.setAdapter(new TestAdapter());
            recyclerView.addItemDecoration(new DividerItemDecoration(view.getContext(), DividerItemDecoration.VERTICAL));
        }"
5457,willHit,"    boolean willHit(IDanmakuItem runningItem);
"
5465,fps,"    private double fps() {
        long lastTime = System.nanoTime();
        times.addLast(lastTime);
        double NANOS = 1000000000.0;
        double difference = (lastTime - times.getFirst()) / NANOS;
        int size = times.size();
        int MAX_SIZE = 100;
        if (size > MAX_SIZE) {
            times.removeFirst();
        }"
5466,run,"                public void run() {
                    synchronized (mWaitingItems) {
                        mWaitingItems.addAll(list);
                    }"
5467,addItem,"    public void addItem(final List<IDanmakuItem> list, boolean backgroundLoad) {
        if (backgroundLoad) {
            new Thread(){"
5468,addItemToHead,"    public void addItemToHead(IDanmakuItem item) {
        synchronized (mWaitingItems) {
            this.mWaitingItems.offerFirst(item);"
5469,addItem,"    public void addItem(IDanmakuItem item) {
        synchronized (mWaitingItems) {
            this.mWaitingItems.add(item);"
5474,clearWaiting,"    private void clearWaiting(){
        if (null != mWaitingItems && !mWaitingItems.isEmpty()) {
            mWaitingItems.clear();"
5475,clearRunning,"    private void clearRunning() {
        if (null != mChannelMap && !mChannelMap.isEmpty()) {
            mChannelMap.clear();"
5476,clearItems,"    private void clearItems() {
        clearRunning();
        clearWaiting();
    }"
5477,clear,"    public void clear() {
        status = STATUS_STOP;
        clearItems();
        invalidate();
    }"
5478,hide,"    public void hide() {
        status = STATUS_PAUSE;
        invalidate();
    }"
5479,show,"    public void show() {
        status = STATUS_RUNNING;
        invalidate();
    }"
5480,isPaused,"    public boolean isPaused() {
        return STATUS_PAUSE == status;
    }"
5482,clearPlayingItems,"    private void clearPlayingItems() {
        if (mChannelMap != null) {
            synchronized (mChannelMap) {"
5484,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (status == STATUS_RUNNING) {
            try {"
5485,initChannelY,"    private void initChannelY() {
        if (mChannelY == null){
            mChannelY = new int[mMaxRow];
        }

        float rowHeight = getHeight() * (mEndYOffset - mStartYOffset) / mMaxRow;
        float baseOffset = getHeight() * mStartYOffset;"
5486,initChannelMap,"    private void initChannelMap(){
        mChannelMap = new HashMap<>(mMaxRow);
        for (int i = 0; i < mMaxRow; i++) {
            ArrayList<IDanmakuItem> runningRow= new ArrayList<IDanmakuItem>(mMaxRunningPerRow);"
5487,calculation,"    private void calculation() {
        if (mShowDebug) {
            fpsPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
            fpsPaint.setColor(Color.YELLOW);
            fpsPaint.setTextSize(20);"
5488,init,"    private void init() {
        setBackgroundColor(Color.TRANSPARENT);
        setDrawingCacheBackgroundColor(Color.TRANSPARENT);
        calculation();
    }"
5489,checkYOffset,"    private void checkYOffset(float start, float end) {
        if (start >= end ){
            throw new IllegalArgumentException(""start_Y_offset must < end_Y_offset"");
        }"
5491,dip2px,"    private static int dip2px(Context context, float dipValue) {
        final float scale = context.getResources().getDisplayMetrics().density;
        return (int) (dipValue * scale + 0.5f);
    }"
5499,release,"    public void release() {
        mContext = null;
    }"
5500,isOut,"    public boolean isOut() {
        return mCurrX < 0 && Math.abs(mCurrX) > mContentWidth;
    }"
5509,source,"    private Source source(Source source) {

        return new ForwardingSource(source) {"
5510,source,"    public BufferedSource source() {
        if (bufferedSource == null) {
            bufferedSource = Okio.buffer(source(mResponseBody.source()));
        }"
5511,contentLength,"    public long contentLength() {
        return mResponseBody.contentLength();
    }"
5512,contentType,"    public MediaType contentType() {
        return mResponseBody.contentType();
    }"
5513,write,"            public void write(Buffer source, long byteCount) throws IOException {
                super.write(source, byteCount);
                if (contentLength == 0) {
                    contentLength = contentLength();
                }
                bytesWritten += byteCount;"
5514,sink,"    private Sink sink(Sink sink) {
        return new ForwardingSink(sink) {
            long bytesWritten = 0L;"
5515,writeTo,"    public void writeTo(BufferedSink sink) throws IOException {
        if (bufferedSink == null) {
            bufferedSink = Okio.buffer(sink(sink));
        }
        requestBody.writeTo(bufferedSink);"
5516,contentLength,"    public long contentLength() throws IOException {
        return requestBody.contentLength();
    }"
5517,contentType,"    public MediaType contentType() {
        return requestBody.contentType();
    }"
5518,addProgressRequestListener,"    public static RequestProgressBody addProgressRequestListener(RequestBody requestBody, ProgressListener progressRequestListener) {
        return new RequestProgressBody(requestBody, progressRequestListener);
    }"
5519,intercept,"                    public Response intercept(Chain chain) throws IOException {
                        Response originalResponse = chain.proceed(chain.request());
                        return originalResponse.newBuilder()
                                .body(new ResponseProgressBody(originalResponse.body(), progressListener))"
5520,addProgressResponseListener,"    public static OkHttpClient addProgressResponseListener(OkHttpClient client, final ProgressListener progressListener) {
        return client.newBuilder()
                .addNetworkInterceptor(new Interceptor() {"
5523,build,"        public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {
            return new OkHttpUrlLoader(client);
        }"
5525,buildLoadData,"    public LoadData<InputStream> buildLoadData(GlideUrl model, int width, int height,
                                               Options options) {
        return new LoadData<>(model, new OkHttpStreamFetcher(client, model));"
5526,handles,"    public boolean handles(GlideUrl url) {
        return true;
    }"
5529,cancel,"    public void cancel() {
        Call local = call;
        if (local != null) {
            local.cancel();"
5530,cleanup,"    public void cleanup() {
        try {
            if (stream != null) {
                stream.close();
            }"
5531,onResponse,"    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
        responseBody = response.body();
        if (response.isSuccessful()) {
            long contentLength = responseBody.contentLength();"
5532,onFailure,"    public void onFailure(@NonNull Call call, @NonNull IOException e) {
        if (Log.isLoggable(TAG, Log.DEBUG)) {
            Log.d(TAG, ""OkHttp failed to obtain result"", e);
        }"
5535,onFailure,"                        public void onFailure(@NonNull Call<R> call, @NonNull Throwable throwable) {
                            postValue(new ApiResponse<>(throwable));
                        }"
5536,onResponse,"                        public void onResponse(@NonNull Call<R> call, @NonNull Response<R> response) {
                            postValue(new ApiResponse<>(response));
                        }"
5537,onActive,"            protected void onActive() {
                super.onActive();
                if (started.compareAndSet(false, true)) {
                    call.enqueue(new Callback<R>() {"
5538,adapt,"    public LiveData<ApiResponse<R>> adapt(@NonNull Call<R> call) {
        return new LiveData<ApiResponse<R>>() {
            AtomicBoolean started = new AtomicBoolean(false);"
5539,responseType,"    public Type responseType() {
        return responseType;
    }"
5544,applyOptions,"    void applyOptions(Context context, ArmsConfigModule.Builder builder);
}"
5546,useEventBus,"    protected boolean useEventBus() {
        return true;
    }"
5549,unDisposeAll,"    protected void unDisposeAll() {
        if (mCompositeDisposable != null) {
            mCompositeDisposable.clear();"
5550,addDispose,"    protected void addDispose(Disposable disposable) {
        if (mCompositeDisposable == null) {
            mCompositeDisposable = new CompositeDisposable();
        }"
5551,onDestroy,"    public void onDestroy() {
        super.onDestroy();
        EventBus.getDefault().unregister(this);
        unDisposeAll();
        this.mCompositeDisposable = null;
    }"
5552,onCreate,"    public void onCreate() {
        super.onCreate();
        EventBus.getDefault().register(this);
        init();
    }"
5553,onBind,"    public IBinder onBind(Intent intent) {
        return null;
    }"
5554,onDestroy,"    public void onDestroy() {
        this.mRepositoryManager = null;
    }"
5556,onFragmentVisibleChange,"    protected void onFragmentVisibleChange(boolean isVisible) {
    }"
5558,useEventBus,"    public boolean useEventBus() {
        return true;
    }"
5567,supportFragmentInjector,"    public AndroidInjector<Fragment> supportFragmentInjector() {
        return this.mFragmentInjector;
    }"
5568,activityInjector,"    public AndroidInjector<Activity> activityInjector() {
        return this.mActivityInjector;
    }"
5569,onTerminate,"    public void onTerminate() {
        super.onTerminate();
        mAppDelegate.onTerminate(this);
    }"
5570,onCreate,"    public void onCreate() {
        super.onCreate();

        mAppDelegate.onCreate(this);"
5571,attachBaseContext,"    protected void attachBaseContext(Context context) {
        super.attachBaseContext(context);
        mAppDelegate = new AppDelegate(context);
        mAppDelegate.attachBaseContext(context);
    }"
5573,onSaveInstanceState,"    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        /**"
5574,injectable,"    public boolean injectable() {
        return true;
    }"
5575,useFragment,"    public boolean useFragment() {
        return true;
    }"
5579,onConfigurationChanged,"        public void onConfigurationChanged(Configuration newConfig) {
"
5584,onTerminate,"    public void onTerminate(Application application) {
        if (mComponentCallback != null) {
            mApplication.unregisterComponentCallbacks(mComponentCallback);
        }"
5592,onTerminate,"    public void onTerminate(Application application) {
        mLifecycleInjector.onTerminate(application);
        this.mLifecycleInjector = null;
        mArmsInjector.onTerminate(application);
        this.mArmsInjector = null;
        mRepositoryInjector.onTerminate(application);
        this.mRepositoryInjector = null;
        this.mApplication = null;
    }"
5594,attachBaseContext,"    public void attachBaseContext(Context context) {
        mLifecycleInjector.attachBaseContext(context);
    }"
5596,isSuccessful,"    public boolean isSuccessful() {
        return code >= 200 && code < 300;
    }"
5600,newArray,"        public Message[] newArray(int size) {
            return new Message[size];
        }"
5601,createFromParcel,"        public Message createFromParcel(Parcel source) {
            Message msg = Message.obtain();
            msg.readFromParcel(source);
            return msg;
        }"
5602,toString,"    public String toString() {
        StringBuilder b = new StringBuilder();
        b.append(""{"");

        if (target != null) {

            b.append("" what="");"
5606,isAsynchronous,"    public boolean isAsynchronous() {
        return (flags & FLAG_ASYNCHRONOUS) != 0;
    }"
5607,HandleMessageToTargetUnrecycle,"    public void HandleMessageToTargetUnrecycle() {
        if (target == null) throw new IllegalArgumentException(""target is null"");
        target.handleMessage(this);
    }"
5608,HandleMessageToTarget,"    public void HandleMessageToTarget() {
        if (target == null) throw new IllegalArgumentException(""target is null"");
        target.handleMessage(this);
        this.recycleUnchecked();
    }"
5610,peekData,"    public Bundle peekData() {
        return data;
    }"
5616,recycle,"    public void recycle() {
        if (isInUse()) {
            if (gCheckRecycle) {
                throw new IllegalStateException(""This message cannot be recycled because it """
5617,updateCheckRecycle,"    public static void updateCheckRecycle(int targetSdkVersion) {
        if (targetSdkVersion < Build.VERSION_CODES.LOLLIPOP) {
            gCheckRecycle = false;"
5618,isFromThisPresenter,"    public boolean isFromThisPresenter(Class presenter) {
        return this.presenter.equals(presenter.getSimpleName());
    }"
5619,obtain,"    public static Message obtain(IView v, int what,
                                 int arg1, int arg2, Object obj) {
        Message m = obtain();
        m.target = v;
        m.what = what;
        m.arg1 = arg1;
        m.arg2 = arg2;
        m.obj = obj;
"
5620,obtain,"    public static Message obtain(IView v, int what, int arg1, int arg2) {
        Message m = obtain();
        m.target = v;
        m.what = what;
        m.arg1 = arg1;
        m.arg2 = arg2;

        return m;"
5621,obtain,"    public static Message obtain(IView v, int what, Object obj) {
        Message m = obtain();
        m.target = v;
        m.what = what;
        m.obj = obj;

        return m;"
5622,obtain,"    public static Message obtain(IView v, int what) {
        Message m = obtain();
        m.target = v;
        m.what = what;

        return m;"
5623,obtain,"    public static Message obtain(IView v, Object[] objs, Class presenter) {
        Message m = obtain();
        m.target = v;
        m.objs = objs;
        m.presenter = presenter.getSimpleName();
        return m;
    }"
5624,obtain,"    public static Message obtain(IView v, Object obj, Class presenter) {
        Message m = obtain();
        m.target = v;
        m.obj = obj;
        m.presenter = presenter.getSimpleName();
        return m;
    }"
5625,obtain,"    public static Message obtain(IView v, Class presenter) {
        Message m = obtain();
        m.target = v;
        m.presenter = presenter.getSimpleName();
        return m;
    }"
5626,obtain,"    public static Message obtain(IView v, Object[] objs) {
        Message m = obtain();
        m.target = v;
        m.objs = objs;
        return m;
    }"
5627,obtain,"    public static Message obtain(IView v, Object obj) {
        Message m = obtain();
        m.target = v;
        m.obj = obj;
        return m;
    }"
5628,obtain,"    public static Message obtain(IView v) {
        Message m = obtain();
        m.target = v;
        return m;
    }"
5630,obtain,"    public static Message obtain() {
        synchronized (sPoolSync) {
            if (sPool != null) {
                Message m = sPool;"
5638,addSubscribe,"    protected void addSubscribe(Subscription subscription) {
        if (mCompositeSubscription == null) {
            mCompositeSubscription = new CompositeSubscription();
        }"
5646,initView,"    protected abstract View initView(LayoutInflater inflater, ViewGroup container);
"
5647,useEventBus,"    protected boolean useEventBus() {

        return true;"
5649,onDestroyView,"    public void onDestroyView() {

        super.onDestroyView();
"
5650,onViewStateRestored,"    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {

        super.onViewStateRestored(savedInstanceState);
"
5653,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
"
5659,onRestoreInstanceState,"    protected void onRestoreInstanceState(Bundle savedInstanceState) {

        super.onRestoreInstanceState(savedInstanceState);
"
5662,_flatMapWelfarePhotos,"    private static Func1<WelfarePhotoList, Observable<WelfarePhotoInfo>> _flatMapWelfarePhotos() {
        return new Func1<WelfarePhotoList, Observable<WelfarePhotoInfo>>() {
            @Override"
5664,_flatMapPhotos,"    private static Func1<Map<String, List<BeautyPhotoInfo>>, Observable<List<BeautyPhotoInfo>>> _flatMapPhotos() {
        return new Func1<Map<String, List<BeautyPhotoInfo>>, Observable<List<BeautyPhotoInfo>>>() {
            @Override"
5665,call,"            public Observable<SpecialInfo> call(Map<String, SpecialInfo> specialMap) {
                return Observable.just(specialMap.get(specialId));
            }"
5666,_flatMapSpecial,"    private static Func1<Map<String, SpecialInfo>, Observable<SpecialInfo>> _flatMapSpecial(final String specialId) {
        return new Func1<Map<String, SpecialInfo>, Observable<SpecialInfo>>() {
            @Override"
5667,call,"            public Observable<List<VideoInfo>> call(Map<String, List<VideoInfo>> newsListMap) {
                return Observable.just(newsListMap.get(typeStr));
            }"
5668,_flatMapVideo,"    private static Func1<Map<String, List<VideoInfo>>, Observable<List<VideoInfo>>> _flatMapVideo(final String typeStr) {
        return new Func1<Map<String, List<VideoInfo>>, Observable<List<VideoInfo>>>() {
            @Override"
5669,call,"            public Observable<NewsInfo> call(Map<String, List<NewsInfo>> newsListMap) {
                return Observable.from(newsListMap.get(typeStr));
            }"
5670,_flatMapNews,"    private static Func1<Map<String, List<NewsInfo>>, Observable<NewsInfo>> _flatMapNews(final String typeStr) {
        return new Func1<Map<String, List<NewsInfo>>, Observable<NewsInfo>>() {
            @Override"
5671,call,"                public Observable<T> call(Map<String, List<T>> stringListMap) {
                    if (TextUtils.isEmpty(mMapKey)) {
                        return Observable.error(new Throwable(""Map Key is empty""));
                    }"
5672,call,"        public Observable<T> call(Observable<Map<String, List<T>>> mapObservable) {
            return  mapObservable.flatMap(new Func1<Map<String, List<T>>, Observable<T>>() {
                @Override"
5680,call,"                    public Observable<NewsDetailInfo> call(Map<String, NewsDetailInfo> newsDetailMap) {
                        return Observable.just(newsDetailMap.get(newsId));
                    }"
5684,_parseParams,"    private static String _parseParams(RequestBody body, Buffer requestBuffer) throws UnsupportedEncodingException {
        if (body.contentType() != null && !body.contentType().toString().contains(""multipart"")) {
            return URLDecoder.decode(requestBuffer.readUtf8(), ""UTF-8"");
        }"
5685,intercept,"        public Response intercept(Chain chain) throws IOException {
            final Request request = chain.request();
            Buffer requestBuffer = new Buffer();
            if (request.body() != null) {
                request.body().writeTo(requestBuffer);
            } else {
                Logger.d(""LogTAG"", ""request.body() == null"");
            }"
5688,isNewsPhotoSet,"    public static boolean isNewsPhotoSet(String skipType) {
        return NEWS_ITEM_PHOTO_SET.equals(skipType);
    }"
5689,isNewsSpecial,"    public static boolean isNewsSpecial(String skipType) {
        return NEWS_ITEM_SPECIAL.equals(skipType);
    }"
5690,clipNewsIdFromUrl,"    public static String clipNewsIdFromUrl(String url) {
        String newsId = null;
        int index = url.indexOf(NEWS_ID_PREFIX);
        if (index != -1) {
            newsId = url.substring(index, index + NEWS_ID_LENGTH);
        } else if (url.endsWith(NEWS_ID_SUFFIX)) {"
5691,isAbNews,"    public static boolean isAbNews(@NonNull NewsInfo newsBean) {
        return (newsBean.getHasHead() == HAS_HEAD &&
                newsBean.getAds() != null && newsBean.getAds().size() > 1);"
5692,getWelfarePhoto,"    Observable<WelfarePhotoList> getWelfarePhoto(@Path(""page"") int page);
"
5693,getVideoList,"    Observable<Map<String, List<VideoInfo>>> getVideoList(@Path(""id"") String id,
                                                          @Path(""startPage"") int startPage);"
5694,getBeautyPhoto,"    Observable<Map<String, List<BeautyPhotoInfo>>> getBeautyPhoto(@Query(""offset"") int offset);
"
5695,getPhotoMoreList,"    Observable<List<PhotoInfo>> getPhotoMoreList(@Path(""setId"") String setId);
"
5696,getPhotoList,"    Observable<List<PhotoInfo>> getPhotoList();
"
5697,getPhotoSet,"    Observable<PhotoSetInfo> getPhotoSet(@Path(""photoId"") String photoId);
"
5698,getNewsDetail,"    Observable<Map<String, NewsDetailInfo>> getNewsDetail(@Path(""newsId"") String newsId);
"
5699,getSpecial,"    Observable<Map<String, SpecialInfo>> getSpecial(@Path(""specialId"") String specialIde);
"
5700,getNewsList,"    Observable<Map<String, List<NewsInfo>>> getNewsList(@Path(""type"") String type, @Path(""id"") String id,
                                                        @Path(""startPage"") int startPage);"
5703,isItemCheckable,"    public boolean isItemCheckable(int position) {

        return true;"
5705,onDestroyActionMode,"    public void onDestroyActionMode(ActionMode mode) {

        helper.onDestroyActionMode();"
5707,finishActionMode,"    protected void finishActionMode() {

        helper.finishActionMode();"
5711,isChecked,"    public boolean isChecked(long itemId) {

        return helper.isChecked(itemId);"
5715,save,"    public void save(Bundle outState) {

        helper.save(outState);"
5718,positionToSelectionHandle,"        protected long positionToSelectionHandle(int position) {

            return getItemId(position);"
5725,getViewImpl,"    protected abstract View getViewImpl(int position, View convertView, ViewGroup parent);
"
5728,isChecked,"    public boolean isChecked(long position) {

        return helper.isChecked(position);"
5750,onCheckedChanged,"    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
        if (ignoreCheckedListener) {
            return;
        }
        int position = (Integer) buttonView.getTag();"
5751,initItemCheckbox,"    private void initItemCheckbox(int position, ViewGroup view) {
        CheckBox checkBox = (CheckBox) view.findViewById(android.R.id.checkbox);
        boolean checked = isChecked(position);
        checkBox.setTag(position);
        checkBox.setChecked(checked);
        checkBox.setOnCheckedChangeListener(this);
    }"
5752,itemIncludesCheckBox,"    private boolean itemIncludesCheckBox(View v) {
        if (itemIncludesCheckBox == null) {
            if (!(v instanceof ViewGroup)) {
                itemIncludesCheckBox = false;"
5754,onItemClick,"    public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {
        if (isActionModeStarted()) {
            switch (itemClickInActionModePolicy) {
            case SELECT:"
5755,onDestroyActionMode,"    public void onDestroyActionMode() {
        checkedItems.clear();
        clearActionMode();
        owner.notifyDataSetChanged();
    }"
5756,positionToSelectionHandle,"    protected long positionToSelectionHandle(int position) {
        return position;
    }"
5757,correctPositionAccountingForHeader,"    private int correctPositionAccountingForHeader(AdapterView<?> adapterView, int position) {
        ListView listView = (adapterView instanceof ListView) ? (ListView) adapterView : null;
        int headersCount = listView == null ? 0 : listView.getHeaderViewsCount();
        if (headersCount > 0) {
            position -= listView.getHeaderViewsCount();
        }"
5760,clearActionMode,"    protected abstract void clearActionMode();
"
5761,finishActionMode,"    protected abstract void finishActionMode();
    protected abstract void clearActionMode();"
5762,startActionMode,"    protected abstract void startActionMode();
    protected abstract void finishActionMode();"
5763,isActionModeStarted,"    protected abstract boolean isActionModeStarted();
    protected abstract void startActionMode();"
5764,setActionModeTitle,"    protected abstract void setActionModeTitle(String title);
    protected abstract boolean isActionModeStarted();"
5765,onItemSelectedStateChanged,"    private void onItemSelectedStateChanged() {
        int count = getCheckedItemCount();
        if (count == 0) {
            finishActionMode();
            return;
        }"
5770,isChecked,"    public boolean isChecked(long handle) {
        return checkedItems.contains(handle);
    }"
5774,checkItem,"    public void checkItem(long handle) {
        boolean wasSelected = isChecked(handle);
        if (wasSelected) {
            return;
        }
        if (!isActionModeStarted()) {
            startActionMode();
        }"
5776,save,"    public void save(Bundle outState) {
        long[] array = new long[checkedItems.size()];
        int i = 0;
        for (Long id : checkedItems) {
            array[i++] = id;
        }"
5778,checkActivity,"    public void checkActivity() {
        Context context = getContext();
        if (context instanceof ListActivity) {
            throw new RuntimeException(""ListView cannot belong to an activity which subclasses ListActivity"");"
5780,restoreSelectionFromSavedInstanceState,"    public void restoreSelectionFromSavedInstanceState(Bundle savedInstanceState) {
        if (savedInstanceState == null) {
            return;
        }
        long[] array = savedInstanceState.getLongArray(BUNDLE_KEY);
        checkedItems.clear();"
5781,clearActionMode,"    protected void clearActionMode() {
        actionMode = null;
    }"
5782,isActionModeStarted,"    protected boolean isActionModeStarted() {
        return actionMode != null;
    }"
5784,finishActionMode,"    protected void finishActionMode() {
        if (actionMode != null) {
            actionMode.finish();"
5785,startActionMode,"    protected void startActionMode() {
        try {
            Activity activity = (Activity) adapterView.getContext();"
5786,getActionModeTitle,"    String getActionModeTitle(int count);
}"
5787,isItemCheckable,"    boolean isItemCheckable(int position);
    String getActionModeTitle(int count);"
5788,getItemClickInActionModePolicy,"    ItemClickInActionModePolicy getItemClickInActionModePolicy();
    boolean isItemCheckable(int position);"
5789,setItemClickInActionModePolicy,"    void setItemClickInActionModePolicy(ItemClickInActionModePolicy policy);
    ItemClickInActionModePolicy getItemClickInActionModePolicy();"
5790,isChecked,"    boolean isChecked(long position);
    void setItemClickInActionModePolicy(ItemClickInActionModePolicy policy);"
5791,getCheckedItemCount,"    int getCheckedItemCount();
    boolean isChecked(long position);"
5792,getCheckedItems,"    Set<Long> getCheckedItems();
    int getCheckedItemCount();"
5793,setItemChecked,"    void setItemChecked(long position, boolean checked);
    Set<Long> getCheckedItems();"
5794,save,"    void save(Bundle outState);
    void setItemChecked(long position, boolean checked);"
5795,setOnItemClickListener,"    void setOnItemClickListener(OnItemClickListener listener);
    void save(Bundle outState);"
5796,setAdapterView,"    void setAdapterView(AdapterView<? super BaseAdapter> adapterView);
    void setOnItemClickListener(OnItemClickListener listener);"
5799,onFinishInflate,"    protected void onFinishInflate() {
        super.onFinishInflate();
        
        mText1 = (TextView) findViewById(android.R.id.text1);
        mText2 = (TextView) findViewById(android.R.id.text2);"
5800,drawableStateChanged,"    protected void drawableStateChanged() {
        super.drawableStateChanged();

        Drawable drawable = getBackground();
        if (drawable != null) {"
5801,onCreateDrawableState,"    protected int[] onCreateDrawableState(int extraSpace) {
        final int[] drawableState = super.onCreateDrawableState(extraSpace + 1);
        if (isChecked()) {
            mergeDrawableStates(drawableState, CHECKED_STATE_SET);
        }"
5804,isChecked,"    public boolean isChecked() {
        return mChecked;
    }"
5805,toggle,"    public void toggle() {
        setChecked(!mChecked);
    }"
5806,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent ev) {
        return onTouchEvent(ev);
    }"
5807,performClick,"    public boolean performClick() {
        toggle();
        return super.performClick();
    }"
5818,drawableStateChanged,"    protected void drawableStateChanged() {
        super.drawableStateChanged();

        if (stateList != null) {"
5819,onCreateDrawableState,"    public int[] onCreateDrawableState(int extraSpace) {
        final int[] drawableState = super.onCreateDrawableState(extraSpace + 1);
        if (isChecked()) {
            mergeDrawableStates(drawableState, CHECKED_STATE_SET);
        }"
5820,toggle,"    public void toggle() {
        setChecked(!isChecked());
    }"
5823,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (stateList != null) {
            stateList.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());"
5827,onCreateDrawableState,"    protected int[] onCreateDrawableState(int extraSpace) {
        final int[] drawableState = super.onCreateDrawableState(extraSpace + 2);

        if (mChecked) {
            mergeDrawableStates(drawableState, CHECKED_STATE_SET);"
5833,verifyConfiguration,"    public boolean verifyConfiguration(final Configuration conf) {
        return true;
    }"
5834,getSplits,"    public List<InputSplit> getSplits(final JobContext context) throws IOException {
        final Configuration conf = context.getConfiguration();
        try {
            MongoSplitter splitterImpl = MongoSplitterFactory.getSplitter(conf);"
5835,createRecordReader,"    public RecordReader<Object, BSONObject> createRecordReader(final InputSplit split, final TaskAttemptContext context) {
        if (!(split instanceof MongoInputSplit)) {
            throw new IllegalStateException(""Creation of a new RecordReader requires a MongoInputSplit instance."");
        }
"
5845,isNoTimeout,"    public boolean isNoTimeout() {
        return MongoConfigUtil.isNoTimeout(configuration);
    }"
5849,createInputSplits,"    public boolean createInputSplits() {
        return MongoConfigUtil.createInputSplits(configuration);
    }"
5855,canReadSplitsFromSecondary,"    public boolean canReadSplitsFromSecondary() {
        return MongoConfigUtil.canReadSplitsFromSecondary(configuration);
    }"
5857,isRangeQueryEnabled,"    public boolean isRangeQueryEnabled() {
        return MongoConfigUtil.isRangeQueryEnabled(configuration);
    }"
5859,isShardChunkedSplittingEnabled,"    public boolean isShardChunkedSplittingEnabled() {
        return MongoConfigUtil.isShardChunkedSplittingEnabled(configuration);
    }"
5861,canReadSplitsFromShards,"    public boolean canReadSplitsFromShards() {
        return MongoConfigUtil.canReadSplitsFromShards(configuration);
    }"
5921,isJobBackground,"    public boolean isJobBackground() {
        return MongoConfigUtil.isJobBackground(configuration);
    }"
5923,isJobVerbose,"    public boolean isJobVerbose() {
        return MongoConfigUtil.isJobVerbose(configuration);
    }"
5924,close,"        public void close() throws IOException {
            chunkData.close();
        }"
5925,getProgress,"        public float getProgress() throws IOException, InterruptedException {
            return (float) Math.min(
              previousMatchIndex / (float) chunkSize, 1.0);"
5926,getCurrentValue,"        public Text getCurrentValue() throws IOException, InterruptedException {
            return text;
        }"
5927,getCurrentKey,"        public NullWritable getCurrentKey()
          throws IOException, InterruptedException {
            return NullWritable.get();"
5928,nextKeyValue,"        public boolean nextKeyValue() throws IOException, InterruptedException {
            if (readLast) {
                LOG.debug(""skipping the rest of this chunk because we've ""
                    + ""read beyond the end: "" + previousMatchIndex
                    + ""; read "" + totalMatches + "" matches here."");
                return false;
            }"
5931,close,"        public void close() throws IOException {
            reader.close();
        }"
5932,fileContents,"        public CharSequence fileContents() {
            return subSequence(0, length);
        }"
5933,chunkContents,"        public CharSequence chunkContents() {
            return subSequence(0, Math.min(chunkSize, length));
        }"
5934,subSequence,"        public CharSequence subSequence(final int start, final int end) {
            try {
                advanceToIndex(end);
            } catch (IOException e) {"
5935,charAt,"        public char charAt(final int index) {
            try {
                advanceToIndex(index);
            } catch (IOException e) {"
5936,advanceToIndex,"        private void advanceToIndex(final int index) throws IOException {
            if (index >= builder.length()) {
                while (index >= builder.length()) {"
5937,length,"        public int length() {
            return length;
        }"
5938,close,"        public void close() throws IOException {
            stream.close();
        }"
5939,getProgress,"        public float getProgress() throws IOException, InterruptedException {
            return readLast ? 1.0f : 0.0f;
        }"
5940,getCurrentValue,"        public BytesWritable getCurrentValue()
          throws IOException, InterruptedException {
            return bw;"
5943,initialize,"        public void initialize(
          final InputSplit split, final TaskAttemptContext context)
          throws IOException, InterruptedException {
            this.split = (GridFSSplit) split;
            readLast = false;
            buff = new byte[1024 * 1024 * 16];"
5944,createRecordReader,"    public RecordReader<NullWritable, BinaryComparable>
    createRecordReader(final InputSplit split, final TaskAttemptContext context)
      throws IOException, InterruptedException {"
5946,accept,"    public boolean accept(final Path path) {
        String pathName = path.getName().toLowerCase();
        boolean acceptable = pathName.endsWith("".bson"") && !pathName.startsWith(""."");
        LOG.info(path.toString() + "" returning "" + acceptable);
        return acceptable;
    }"
5951,isSplitable,"    protected boolean isSplitable(
      final JobContext context, final Path filename) {
        CompressionCodec codec =
          new CompressionCodecFactory("
5952,onCreate,"  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_test);
  }"
5954,onCreate,"  @Override protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_loader1);
  }"
5955,onCreate,"  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_list_test);

    rvContacts = (RecyclerView)findViewById(R.id.rvContacts);

    adapter = new ContactsAdapter();
"
5956,bind,"    public void bind(String contact) {
      tvName.setText(contact);
    }"
5958,onBindViewHolder,"  @Override public void onBindViewHolder(ContactViewHolder holder, int position) {
    final String contact = contacts.get(position);
    holder.bind(contact);
  }"
5959,onCreateViewHolder,"  @Override public ContactViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
    final LayoutInflater inflater = LayoutInflater.from(parent.getContext());
    View itemView = inflater.inflate(R.layout.item_contact, parent, false);
    return new ContactViewHolder(itemView);
  }"
5960,onCreate,"  @Override public void onCreate() {
    super.onCreate();

    LeakCanary.install(this);"
5962,setupDbEpisodes,"	private void setupDbEpisodes() {
		mDbEpisode.clear();

		DbAdapterTvShowEpisodes db = MizuuApplication.getTvEpisodeDbAdapter();

		ColumnIndexCache cache = new ColumnIndexCache();
		Cursor tempCursor = db.getAllEpisodes();"
5964,getBackdrops,"	public abstract List<String> getBackdrops(String id);
	"
5965,getCovers,"	public abstract List<String> getCovers(String id);
	"
5969,getSimilarMovies,"	public abstract List<WebMovie> getSimilarMovies(String id);
	"
5972,get,"	public abstract Movie get(String id, String json, String language);
	"
5976,hasOfflineCopy,"	public boolean hasOfflineCopy(Filepath path) {
		return getOfflineCopyFile(path).exists();
	}"
5977,isUnidentified,"	public boolean isUnidentified() {
		return 	getRuntime().equals(""0"") &&
				getReleaseYear().equals(mContext.getString(R.string.unknownYear)) &&"
5988,hasWatched,"	public boolean hasWatched() {
		return (HAS_WATCHED.equals(""0"")) ? false : true;
	}"
5992,isFavourite,"	public boolean isFavourite() {
        return FAVOURITE.equals(""1"");
    }"
6000,toWatch,"	public boolean toWatch() {
		return (!TO_WATCH.equals(""0""));
	}"
6004,compareTo,"	public int compareTo(BaseMovie another) {
		return getTitle().compareToIgnoreCase(another.getTitle());
	}"
6008,toString,"	public String toString() {
		try {
			return getTitle().substring(0, 1);"
6010,getActors,"	public abstract List<Actor> getActors(String id);
}"
6011,get,"	public abstract T get(String id, String language);
	"
6012,searchByImdbId,"	public abstract List<T> searchByImdbId(String imdbId, String language);
	"
6013,searchNgram,"	public abstract List<T> searchNgram(String query, String language);
	"
6014,search,"	public abstract List<T> search(String query, String year, String language);
	"
6015,search,"	public abstract List<T> search(String query, String language);
	"
6018,browse,"	public abstract boolean browse(T folder);
	"
6019,browse,"	public boolean browse(int index, boolean fromParent) {
		return browse(fromParent ? getCurrentParentFiles()[index] : getCurrentFiles()[index]);
	}"
6020,goUp,"	public boolean goUp() {
        return mParentFolder != null && browse(mParentFolder);
    }"
6035,addToResults,"	public abstract void addToResults(T folder, TreeSet<String> results);
"
6036,recursiveSearch,"	public abstract void recursiveSearch(T folder, TreeSet<String> results);
"
6037,searchFolder,"	public abstract List<String> searchFolder();
"
6038,removeUnavailableFiles,"	public abstract void removeUnavailableFiles();
"
6039,removeUnidentifiedFiles,"	public abstract void removeUnidentifiedFiles();
"
6041,clearLibrary,"	public boolean clearLibrary() {
		return mClearLibrary;
	}"
6049,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        Content content = Content.deserialize(this);

        if(content == null){
            return;"
6051,deserialize,"    public static Content deserialize(Context context){
        try {
            String jsonString = parseResource(context, R.raw.content);
            Content content = new Gson().fromJson(jsonString,Content.class);"
6053,dpToPx,"  public static int dpToPx(float dp, Resources resources) {
    float px =
        TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, resources.getDisplayMetrics());
    return (int) px;"
6066,type,"    public Builder type(int type) {
      this.mType = type;
      mCustomResources = false;
      return this;
    }"
6067,color,"    public Builder color(int color) {
      this.mColor = color;
      mCustomResources = false;
      return this;
    }"
6068,bounceDuration,"    public Builder bounceDuration(int bounceDuration) {
      this.mBounceDuration = bounceDuration;
      return this;
    }"
6069,rotationAngle,"    public Builder rotationAngle(int rotationAngle) {
      this.mRotationAngle = rotationAngle;
      return this;
    }"
6070,rotationDuration,"    public Builder rotationDuration(int rotationDuration) {
      this.mRotationDuration = rotationDuration;
      return this;
    }"
6071,notFavoriteResource,"    public Builder notFavoriteResource(int recsource) {
      this.mNotFavoriteResource = recsource;
      mCustomResources = true;
      return this;
    }"
6072,favoriteResource,"    public Builder favoriteResource(int resource) {
      this.mFavoriteResource = resource;
      mCustomResources = true;
      return this;
    }"
6073,animateUnfavorite,"    public Builder animateUnfavorite(boolean animation) {
      this.mAnimateUnfavorite = animation;
      return this;
    }"
6074,animateFavorite,"    public Builder animateFavorite(boolean animation) {
      this.mAnimateFavorite = animation;
      return this;
    }"
6075,favorite,"    public Builder favorite(boolean favorite) {
      this.mFavorite = favorite;
      return this;
    }"
6076,padding,"    public Builder padding(int padding) {
      this.mPadding = padding;
      return this;
    }"
6077,size,"    public Builder size(int size) {
      this.mButtonSize = size;
      return this;
    }"
6078,onAnimationEnd,"      @Override public void onAnimationEnd(Animator animation) {
        if (mOnFavoriteAnimationEndListener != null) {
          mOnFavoriteAnimationEndListener.onAnimationEnd(MaterialFavoriteButton.this, mFavorite);"
6079,onAnimationStart,"      @Override public void onAnimationStart(Animator animation) {
        if (mFavorite) {
          setImageResource(mFavoriteResource);"
6081,updateFavoriteButton,"  private void updateFavoriteButton(boolean favorite, boolean animate, boolean suppressOnChange) {
    if (mFavorite != favorite) {
      mFavorite = favorite;"
6082,toggleFavorite,"  public void toggleFavorite(boolean animated) {
    if (!mFavorite) {
      boolean orig = mAnimateFavorite;"
6083,toggleFavorite,"  public void toggleFavorite() {
    setFavorite(!mFavorite);
  }"
6088,isFavorite,"  public boolean isFavorite() {
    return mFavorite;
  }"
6089,onMeasure,"  @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    setMeasuredDimension(mButtonSize, mButtonSize);
  }"
6093,initAttributes,"  private void initAttributes(Context context, AttributeSet attributeSet) {
    TypedArray attr = getTypedArray(context, attributeSet, R.styleable.MaterialFavoriteButton);
    if (attr != null) {
      try {"
6094,onClick,"        @Override public void onClick(View v) {
          toggleFavorite();
        }"
6097,onAnimationEnd,"    void onAnimationEnd(MaterialFavoriteButton buttonView, boolean favorite);
  }"
6099,onFavoriteChanged,"    void onFavoriteChanged(MaterialFavoriteButton buttonView, boolean favorite);
  }"
6100,onStickerSelected,"    public void onStickerSelected(String categoryName, String stickerName, String stickerBitmapPath) {
        Toast.makeText(getApplicationContext(), stickerBitmapPath, Toast.LENGTH_SHORT).show();
        Log.e(""CSDN_LQR"", ""stickerBitmapPath : "" + stickerBitmapPath);
    }"
6101,onEmojiSelected,"    public void onEmojiSelected(String key) {
        Log.e(""CSDN_LQR"", ""onEmojiSelected : "" + key);
    }"
6102,onBackPressed,"    public void onBackPressed() {
        if (mElEmotion.isShown() || mLlMore.isShown()) {
            mEmotionKeyboard.interceptBackPress();"
6103,closeBottomAndKeyboard,"    private void closeBottomAndKeyboard() {
        mElEmotion.setVisibility(View.GONE);
        mLlMore.setVisibility(View.GONE);
        if (mEmotionKeyboard != null) {
            mEmotionKeyboard.interceptBackPress();"
6104,hideMoreLayout,"    private void hideMoreLayout() {
        mLlMore.setVisibility(View.GONE);
    }"
6105,showMoreLayout,"    private void showMoreLayout() {
        mLlMore.setVisibility(View.VISIBLE);
    }"
6106,hideEmotionLayout,"    private void hideEmotionLayout() {
        mElEmotion.setVisibility(View.GONE);
        mIvEmo.setImageResource(R.mipmap.ic_cheat_emo);
    }"
6107,showEmotionLayout,"    private void showEmotionLayout() {
        mElEmotion.setVisibility(View.VISIBLE);
        mIvEmo.setImageResource(R.mipmap.ic_cheat_keyboard);
    }"
6108,hideAudioButton,"    private void hideAudioButton() {
        mBtnAudio.setVisibility(View.GONE);
        mEtContent.setVisibility(View.VISIBLE);
        mIvAudio.setImageResource(R.mipmap.ic_cheat_voice);
    }"
6109,showAudioButton,"    private void showAudioButton() {
        mBtnAudio.setVisibility(View.VISIBLE);
        mEtContent.setVisibility(View.GONE);
        mIvAudio.setImageResource(R.mipmap.ic_cheat_keyboard);

        if (mFlEmotionView.isShown()) {"
6113,afterTextChanged,"            public void afterTextChanged(Editable s) {
"
6115,beforeTextChanged,"            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
"
6116,onClick,"            public void onClick(View v) {
                if (mBtnAudio.isShown()) {
                    hideAudioButton();"
6118,onEmotionSettingClick,"            public void onEmotionSettingClick(View view) {
                Toast.makeText(getApplicationContext(), ""setting"", Toast.LENGTH_SHORT).show();
            }"
6119,onEmotionAddClick,"            public void onEmotionAddClick(View view) {
                Toast.makeText(getApplicationContext(), ""add"", Toast.LENGTH_SHORT).show();
            }"
6121,initView,"    public void initView() {
        mElEmotion.attachEditText(mEtContent);
        initEmotionKeyboard();
    }"
6122,onResume,"    protected void onResume() {
        super.onResume();
        mEtContent.clearFocus();
    }"
6123,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_wx_session);
        ButterKnife.bind(this);

        initView();
        initListener();"
6124,initEmotionKeyboard,"    private void initEmotionKeyboard() {
        mEmotionKeyboard = EmotionKeyboard.with(this);
        mEmotionKeyboard.bindToContent(mLlContent);
        mEmotionKeyboard.bindToEmotionButton(mIvEmo);
        mEmotionKeyboard.bindToEditText(mEtContent);
        mEmotionKeyboard.setEmotionLayout(mElEmotion);
    }"
6125,onStickerSelected,"            public void onStickerSelected(String categoryName, String stickerName, String stickerBitmapPath) {
                String stickerPath = stickerBitmapPath;
                Toast.makeText(getApplicationContext(), stickerPath, Toast.LENGTH_SHORT).show();
            }"
6126,onEmojiSelected,"            public void onEmojiSelected(String key) {
"
6130,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_simple_session);
        ButterKnife.bind(this);

        initEmotionKeyboard();
        initView();"
6131,onClick,"            public void onClick(View v) {
                Intent intent = new Intent(MainActivity.this, WxSessionActivity.class);
                startActivity(intent);
            }"
6132,onClick,"            public void onClick(View v) {
                Intent intent = new Intent(MainActivity.this, SimpleSessionActivity.class);
                startActivity(intent);
            }"
6134,displayImage,"            public void displayImage(Context context, String path, ImageView imageView) {
                Glide.with(context).load(path).centerCrop().diskCacheStrategy(DiskCacheStrategy.SOURCE).into(imageView);
            }"
6135,onCreate,"    public void onCreate() {
        super.onCreate();
        LQREmotionKit.init(this, new IImageLoader() {
            @Override"
6137,drawableStateChanged,"    protected void drawableStateChanged() {
        if (touchFeedbackDrawable != null) {
            touchFeedbackDrawable.setState(getDrawableState());
            invalidate();"
6138,dispatchDraw,"    protected void dispatchDraw(Canvas canvas) {
        super.dispatchDraw(canvas);
        if (touchFeedbackDrawable != null) {
            touchFeedbackDrawable.setBounds(0, 0, getWidth(), getHeight());"
6142,onScrollChanged,"    protected void onScrollChanged(int l, int t, int oldl, int oldt) {
        super.onScrollChanged(l, t, oldl, oldt);

"
6145,onListScroll,"        public void onListScroll(View view, float deltaY);
    }"
6162,onBuddyItemClicked,"        void onBuddyItemClicked(AdapterView<?> parent, View view, int buddy, int position, long id);
    }"
6167,cancelClick,"    private void cancelClick(float eventY) {
        if (mDownView != null && (Math.abs(mDownEventY - eventY) > CANCEL_CLICK_LIMIT)) {
            mDownView.setPressed(false);"
6168,actionMove,"    private void actionMove(MotionEvent event) {
        cancelClick(event.getY());
    }"
6169,actionUp,"    private void actionUp(ListView list) {
        mActionDown = false;
        performClick(list);
    }"
6170,run,"                public void run() {
                    if (isUserInteracting) {
                        if (mDownView != null) {"
6173,startClickSelection,"    private void startClickSelection(MotionEvent event, ListView list, float eventY) {
        if (!isUserInteracting || mSpeed == 0) {
            findViewClicked(event, eventY, list);"
6175,actionDown,"    private void actionDown(ListView list, MotionEvent event) {
        mActionDown = true;
        toogleListView(list);
        mLastViewTouchId = list.getId();
        startClickSelection(event, list, event.getY());
    }"
6178,createGap,"    private void createGap() {
        if (mViewStubGap == null) {
            mViewStubGap = (ViewStub) findViewById(R.id.gap);
        }
        if (mGapView == null) {
            mGapView = mViewStubGap.inflate();
        }"
6180,emptyGap,"    private void emptyGap() {
        setLeftListMargin(mGap);
        if (mGapView != null) {
            mGapView.setVisibility(View.GONE);"
6186,applyViewParams,"    private void applyViewParams() {
        setGap();
        setDividerAndHeight(mDivider, mDividerHeight);
    }"
6187,forceScroll,"    private void forceScroll() {
        MotionEvent event = MotionEvent.obtain(System.currentTimeMillis(), System.currentTimeMillis(), MotionEvent.ACTION_MOVE, 570, -1, 0);
        mScrollHelper.onTouch(mListViewLeft, event);
    }"
6188,run,"            public void run() {
                forceScroll();
            }"
6189,startAutoScroll,"    private void startAutoScroll() {
        mListViewLeft.post(new Runnable() {
            @Override"
6190,isEnable,"    private boolean isEnable() {
        return mSpeed != 0;
    }"
6191,canTargetScrollVertically,"            public boolean canTargetScrollVertically(int i) {
                return true;
            }"
6192,canTargetScrollHorizontally,"            public boolean canTargetScrollHorizontally(int i) {
                return false;
            }"
6193,scrollTargetBy,"            public void scrollTargetBy(int deltaX, int deltaY) {
                mListViewLeft.smoothScrollBy(mSpeedLeft, 0);
                mListViewRight.smoothScrollBy(mSpeedRight, 0);
            }"
6196,isOtherListEnable,"    private boolean isOtherListEnable(boolean isLeftList) {
        boolean result;
        if (isLeftList) {
            result = isRightListEnabled;
        } else {"
6197,forceScrollIfNeeded,"    private void forceScrollIfNeeded(boolean isListEnabled) {
        if (isUserInteracting && isListEnabled) {
            isUserInteracting = false;"
6198,onScroll,"            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount,
                                 int totalItemCount) {"
6199,onScrollStateChanged,"            public void onScrollStateChanged(AbsListView view, int state) {
                switch (state) {
                    case SCROLL_STATE_IDLE:"
6215,doClass,"    private byte[] doClass(String name, Class clazz, byte[] b) {
        CtClass cl = null;
        ClassPool pool = ClassPool.getDefault();
        try {
            cl = pool.makeClass(new java.io.ByteArrayInputStream(b));
            if(agentArgument!=null && agentArgument.equals(PRINT)) {"
6216,transform,"    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
        try {
            return className!=null && className.equals(XNET_PROTOCOL) ? doClass(className, classBeingRedefined, classfileBuffer) : classfileBuffer;"
6218,transform,"    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
        try {
            return className.equals(EVENT_TABLE_CLASS) ? doClass(loader, className, classBeingRedefined, classfileBuffer) : classfileBuffer;"
6219,getProperties,"    public static Properties getProperties(String defaultProperties, String propertiesFile) throws IOException {
        Properties props = null;
        if(propertiesFile !=null && !propertiesFile.equals("""")) {
            File mapping = new File(propertiesFile);
            if(mapping.exists()) {
                props = new Properties();"
6220,premain,"    public static void premain(String agentArgument, Instrumentation instrumentation) {
        if(agentArgument==null || !agentArgument.startsWith(SWTEventTableTransformer.SWT)) {
            instrumentation.addTransformer(new XKeysymTransformer(agentArgument));"
6222,orderIntToByte,"        public byte[] orderIntToByte(int serial) {
            return ByteBuffer.allocate(4).order(PLATFORM_BYTE_ORDER).putInt(serial).array();
        }"
6223,orderLongToByte,"        public byte[] orderLongToByte(long serial, int length) {
            return ByteBuffer.allocate(length).order(PLATFORM_BYTE_ORDER).putLong(serial).array();
        }"
6224,orderByteToLong,"        public long orderByteToLong(byte[] data) {
            return ByteBuffer.wrap(data).order(PLATFORM_BYTE_ORDER).getLong();
        }"
6225,orderByteToInt,"        public int orderByteToInt(byte[] data) {
            return ByteBuffer.wrap(data).order(PLATFORM_BYTE_ORDER).getInt();
        }"
6228,orderLongToByte,"        public byte[] orderLongToByte(long serial, int length) {
            return ByteBuffer.allocate(length).order(PLATFORM_BYTE_ORDER).putInt((int) serial).array();
        }"
6229,orderByteToLong,"        public long orderByteToLong(byte[] data) {
            return ByteBuffer.wrap(data).order(PLATFORM_BYTE_ORDER).getInt() & 0xFFFFFFFFL;
        }"
6232,orderIntToByte,"    public abstract byte[] orderIntToByte(int serial);
"
6233,orderLongToByte,"    public abstract byte[] orderLongToByte(long serial, int length);
"
6234,orderByteToLong,"    public abstract long orderByteToLong(byte[] data);
"
6235,orderByteToInt,"    public abstract int orderByteToInt(byte[] data);
"
6237,types,"    private static Class<?>[] types(Object... values) {
        if (values == null) {
            return new Class[0];
        }

        Class<?>[] result = new Class[values.length];"
6238,wrap,"    private static Class<?> wrap(Class<?> type) {
        if (type == null) {
            return null;
        } else if (type.isPrimitive()) {"
6239,isSimilarSignature,"    private static boolean isSimilarSignature(Class<?>[] declaredTypes, Class<?>[] actualTypes) {
        if (declaredTypes.length == actualTypes.length) {
            for (int i = 0; i < actualTypes.length; i++) {"
6249,run,"            public void run() {
                startActivity(new Intent(WelcomeActivity.this,MainActivity.class));
                finish();
            }"
6250,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_welcome);
        new Handler().postDelayed(new Runnable() {
            @Override"
6253,onItemClick,"            public void onItemClick(View view, int position) {
                switch (position){
                    case 0:"
6256,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();
        initListener();
    }"
6257,CopyStream,"    public static void CopyStream(InputStream is, OutputStream os)
    {
        final int buffer_size=1024;
        try"
6260,checkSize,"    private void checkSize() {

        Log.i(TAG, ""cache size=""+size+"" length=""+cache.size());
"
6261,put,"    public void put(String id, Bitmap bitmap){

        try{"
6262,get,"    public Bitmap get(String id){

        try{"
6264,onClick,"        public void onClick(View arg0) {
            adapter.imageLoader.clearCache();
            adapter.notifyDataSetChanged();
        }"
6265,onDestroy,"    public void onDestroy()
    {
        list.setAdapter(null);
        super.onDestroy();"
6266,onCreate,"    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        list=(ListView)findViewById(R.id.list);
        adapter=new LazyAdapter(this, mStrings);
        list.setAdapter(adapter);
        
        Button b=(Button)findViewById(R.id.button1);"
6271,clearCache,"    public void clearCache() {

        memoryCache.clear();
"
6273,imageViewReused,"    boolean imageViewReused(PhotoToLoad photoToLoad){

        String tag=imageViews.get(photoToLoad.imageView);

        if(tag==null || !tag.equals(photoToLoad.url))"
6274,run,"        public void run() {

            try{"
6275,decodeFile,"    private Bitmap decodeFile(File f){

        try {
"
6277,queuePhoto,"    private void queuePhoto(String url, ImageView imageView)

    {
"
6278,DisplayImage,"    public void DisplayImage(String url, ImageView imageView)

    {

        imageViews.put(imageView, url);"
6279,clear,"    public void clear(){

        File[] files=cacheDir.listFiles();

        if(files==null)"
6297,isSuccess,"    public boolean isSuccess() {
        return event.equals(""0"");
    }"
6301,sendSmsCode4Register,"    public ApiResponse<Void> sendSmsCode4Register(String phoneNum) {
        Map<String, String> paramMap = new HashMap<String, String>();
        paramMap.put(""appKey"", APP_KEY);
        paramMap.put(""method"", SEND_SMS_CODE);
        paramMap.put(""phoneNum"", phoneNum);

        Type type = new TypeToken<ApiResponse<Void>>(){}.getType();
        try {"
6302,listNewCoupon,"    public ApiResponse<List<CouponBO>> listNewCoupon(int currentPage, int pageSize);
}"
6303,loginByApp,"    public ApiResponse<Void> loginByApp(String loginName, String password, String imei, int loginOS);
"
6304,registerByPhone,"    public ApiResponse<Void> registerByPhone(String phoneNum, String code, String password);
"
6305,sendSmsCode4Register,"    public ApiResponse<Void> sendSmsCode4Register(String phoneNum);
"
6307,isLibPath,"	public static boolean isLibPath(String qualifiedName) {
		return qualifiedName.startsWith(LIBS_PACKAGE + ""."");
	}"
6308,isJDKPath,"	public static boolean isJDKPath(String qualifiedName) {
		return qualifiedName.startsWith(JAVA_PACKAGE + ""."");
	}"
6310,isJDKReplacementMode,"	public static boolean isJDKReplacementMode() {
		return ""java.lang"".equals(LANG_PACKAGE);
	}"
6312,toJsIdentifier,"	public static String toJsIdentifier(String identifier) {
		if (!identifier.isEmpty() && Character.isUpperCase(identifier.charAt(0))
				&& JSweetDefTranslatorConfig.JAVA_KEYWORDS.contains(identifier.toLowerCase())) {
			return identifier.toLowerCase();"
6315,main,"	public static void main(String[] args) throws Throwable {

		if (args.length < 1) {
			System.out.println(""usage: java -jar candy-tool.jar <command> [<args>]"");
			System.out.println();"
6316,onClick,"    public void onClick(View view) {
        JPTabBar tabBar = (JPTabBar) ((Activity)getContext()).findViewById(R.id.tabbar);
        tabBar.setTabTypeFace(""fonts/Jaden.ttf"");
    }"
6317,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.tab4,null);
        layout.findViewById(R.id.button1).setOnClickListener(this);
        return layout;
    }"
6318,onCheckedChanged,"    public void onCheckedChanged(RadioGroup group, @IdRes int checkedId) {
        switch (checkedId){
            case R.id.radioButton1:"
6319,init,"    private void init(View layout) {
        mTabBar = ((MainActivity)getActivity()).getTabbar();

        ((RadioGroup)layout.findViewById(R.id.radioGroup1)).setOnCheckedChangeListener(this);
        ((RadioGroup)layout.findViewById(R.id.radioGroup2)).setOnCheckedChangeListener(this);"
6320,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.tab3,null);
        init(layout);
        return layout;
    }"
6322,init,"    private void init(View layout) {
        mTabBar = ((MainActivity)getActivity()).getTabbar();
        mGroup = (RadioGroup) layout.findViewById(R.id.radioGroup);
        mGroup.setOnCheckedChangeListener(this);
    }"
6323,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout =inflater.inflate(R.layout.tab2,null);
        init(layout);
        return layout;
    }"
6325,afterTextChanged,"    public void afterTextChanged(Editable s) {
        if(s!=null&&s.toString().equals(""0"")){
            mTabBar.showBadge(0, """"+0,true);
            mTabBar.hideBadge(0);
            return;
        }"
6326,onTextChanged,"    public void onTextChanged(CharSequence s, int start, int before, int count) {
    }"
6327,beforeTextChanged,"    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
"
6328,onClick,"    public void onClick(View v) {
        int count = Integer.parseInt(mNumberEt.getText().toString());
        if (v == mMinusIb) {
            count--;"
6330,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.tab1, null);
        init(layout);
        return layout;
    }"
6331,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_say);
    }"
6334,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent arg0) {
        if (noScroll)
            return false;"
6336,scrollTo,"    public void scrollTo(int x, int y) {
        super.scrollTo(x, y);
    }"
6340,onTabSelect,"    public void onTabSelect(int index) {
        Toast.makeText(MainActivity.this,""choose the tab index is ""+index,Toast.LENGTH_SHORT).show();
    }"
6341,onDismiss,"    public void onDismiss(int position) {
            mTab1.clearCount();
    }"
6346,getTemplate,"            public Reader getTemplate(String name) throws Exception {
                if (""partial"".equals(name)) {
                    loadCount.incrementAndGet();
                    TimeUnit.MILLISECONDS.sleep(20);"
6350,counter,"        public int counter () {
            return counter.get();
        }"
6351,getTemplate,"        @Override public Reader getTemplate (String name) throws Exception {
            counter.incrementAndGet();
            if (!""templateB"".equals(name)) {
                throw new IllegalArgumentException();
            }"
6354,data,"    public static Collection<Object[]> data (String specPath, String[] groups) {
        List<Object[]> tuples = new ArrayList<>();
        int i = 0;
        for (String g : groups) {
            Iterable<Spec> specs = getTestsForGroup(specPath, g);
            for (Spec s : specs) {"
6355,uncrlf,"    private static String uncrlf (String text) {
        return (text == null) ? null : text.replace(""\r"", ""\\r"").replace(""\n"", ""\\n"");
    }"
6356,showWhitespace,"    public static String showWhitespace (String s) {
       s = s.replace(""\r\n"", ""\u240D"");
       s = s.replace('\t', '\u21E5');
       s = s.replace(""\n"", ""\u21B5\n"");
       s = s.replace(""\u240D"", ""\u240D\n"");
       return s;
    }"
6358,getTemplate,"    @Override public Reader getTemplate (String name) throws Exception {
        if (spec == null) return new StringReader(EMPTY_STRING);
        String partial = spec.getPartial(name);
        return new StringReader(partial == null ? EMPTY_STRING : partial);
    }"
6360,getPartial,"    public String getPartial (String name) {
        return partials == null ? null : partials.get(name);
    }"
6361,getData,"    public Object getData () {
        return map.get(""data"");
    }"
6362,getExpectedOutput,"    public String getExpectedOutput () {
        return (String) map.get(""expected"");
    }"
6363,getTemplate,"    public String getTemplate () {
        return (String) map.get(""template"");
    }"
6364,getDescription,"    public String getDescription () {
        return (String) map.get(""desc"");
    }"
6365,getName,"    public String getName () {
        return (String) map.get(""name"");
    }"
6366,context,"    protected static Object context (Object... data) {
        Map<String, Object> ctx = new HashMap<String, Object>();
        for (int ii = 0; ii < data.length; ii += 2) {
            ctx.put(data[ii].toString(), data[ii+1]);
        }"
6367,uncrlf,"    protected static String uncrlf (String text) {
        return text == null ? null : text.replace(""\r"", ""\\r"").replace(""\n"", ""\\n"");
    }"
6368,test,"    protected void test (String expected, String template, Object ctx) {
        test(Mustache.compiler(), expected, template, ctx);
    }"
6370,test,"    protected void test(Mustache.Compiler compiler, String expected, String template, Object ctx) {
        String actual = compiler.compile(template).execute(ctx);
        if (! Objects.equals(expected, actual)) {
            System.out.println("""");
            System.out.println(""----------------------------------------"");"
6371,starting,"       protected void starting(Description description) {
           name = description.getDisplayName();
       }"
6372,testNonStandardDefaultDelims,"    @Test public void testNonStandardDefaultDelims () {
        test(Mustache.compiler().withDelims(""<% %>""), ""bar"", ""<%foo%>"", context(""foo"", ""bar""));
    }"
6373,execute,"            public void execute (Template.Fragment frag, Writer out) {
                String which = frag.execute();
                if (which.equals(""A"")) {
                    frag.executeTemplate(a, out);"
6375,execute,"               public void execute (Template.Fragment frag, Writer out) throws IOException {
                   out.write(frag.decompile());
               }"
6379,testLambdaDecompile,"    @Test public void testLambdaDecompile () {
        test(""Foo {{a}}, Bar {{a}}"", ""{{#lam}}Foo {{a}}{{/lam}}, {{#lam}}Bar {{a}}{{/lam}}"",
             context(""lam"", new Mustache.Lambda() {
               public void execute (Template.Fragment frag, Writer out) throws IOException {
                   out.write(frag.decompile());
               }"
6380,execute,"                     public void execute (Template.Fragment frag, Writer out) throws IOException {
                         frag.execute(context(""a"", ""a in l2""), out);
                     }"
6381,execute,"                     public void execute (Template.Fragment frag, Writer out) throws IOException {
                         frag.execute(context(""a"", ""a in l1""), out);
                     }"
6382,testLambdaWithContext,"    @Test public void testLambdaWithContext () {
        test(""a in l1, a in l2"", ""{{#l1}}{{a}}{{/l1}}, {{#l2}}{{a}}{{/l2}}"", context(
                 ""l1"", new Mustache.Lambda() {"
6383,execute,"                 public void execute (Template.Fragment frag, Writer out) throws IOException {
                     frag.execute(out);
                 }"
6384,executeInverse,"                 public void executeInverse (Template.Fragment frag, Writer out) throws IOException {
                     out.write(""negative = "");
                     frag.execute(out);
                 }"
6385,execute,"                 public void execute (Template.Fragment frag, Writer out) throws IOException {
                     out.write(""positive = "");
                     frag.execute(out);
                 }"
6386,testInvertibleLambda,"    @Test public void testInvertibleLambda () {
        test(""positive = positive, negative = negative, simple lambdas do still work"",
             ""{{#invertible}}positive{{/invertible}}, {{^invertible}}negative{{/invertible}}, "" +"
6387,lookup,"                 protected String lookup (String contents) {
                     if (contents.equals(""1"")) return ""Slug"";
                     else if (contents.equals(""2"")) return ""bug"";"
6388,execute,"                 public void execute (Template.Fragment frag, Writer out) throws IOException {
                     out.write(lookup(frag.execute()));
                 }"
6389,testLambda2,"    @Test public void testLambda2 () {
        test(""Slug bug potato!"", ""{{#l}}1{{/l}} {{#l}}2{{/l}} {{#l}}{{three}}{{/l}}"",
             context(""three"", ""3"", ""l"", new Mustache.Lambda() {"
6390,execute,"                 public void execute (Template.Fragment frag, Writer out) throws IOException {
                     out.write(""<b>"");
                     frag.execute(out);
                     out.write(""</b>"");
                 }"
6391,testLambda1,"    @Test public void testLambda1 () {
        test(""<b>Willy is awesome.</b>"", ""{{#bold}}{{name}} is awesome.{{/bold}}"",
             context(""name"", ""Willy"", ""bold"", new Mustache.Lambda() {"
6392,testCompilingDoesntChangeCompilersDelimiters,"    @Test public void testCompilingDoesntChangeCompilersDelimiters() {
        Mustache.Compiler compiler = Mustache.compiler();
        Object ctx = context(""variable"", ""value"");
        test(compiler, ""value"", ""{{=<% %>=}}<% variable %>"", ctx);
        test(compiler, ""value"", ""{{=<% %>=}}<% variable %>"", ctx);
    }"
6393,testNullValueGetsNullDefault,"    @Test public void testNullValueGetsNullDefault () {
        test(Mustache.compiler().nullValue(""foo""),
             ""foobar"", ""{{nullvar}}{{nonnullvar}}"", context(""nonnullvar"", ""bar"", ""nullvar"", null));"
6394,testInvalidTripleMustache,"    @Test public void testInvalidTripleMustache () {
        try {
            Mustache.compiler().compile(""{{{foo}}"");
            fail(""Expected MustacheParseException"");"
6395,testMissingValueWithNullDefault,"    @Test public void testMissingValueWithNullDefault () {
        try {
            Object ctx = context(""notmissing"", ""bar"");"
6396,testNullValueGetsDefault,"    @Test public void testNullValueGetsDefault () {
        test(Mustache.compiler().defaultValue(""foo""),
             ""foobar"", ""{{nullvar}}{{nonnullvar}}"", context(""nonnullvar"", ""bar"", ""nullvar"", null));"
6397,testMissingValueWithDefaultSubstitution3,"    @Test public void testMissingValueWithDefaultSubstitution3 () {
        test(Mustache.compiler().defaultValue(""{{?{{name}}?}}""),
             ""{{?missing?}}bar"", ""{{missing}}{{notmissing}}"", context(""notmissing"", ""bar""));"
6398,testMissingValueWithDefaultSubstitution2,"    @Test public void testMissingValueWithDefaultSubstitution2 () {
        test(Mustache.compiler().defaultValue(""{{{{name}}}}""),
             ""{{missing}}bar"", ""{{missing}}{{notmissing}}"", context(""notmissing"", ""bar""));"
6399,testMissingValueWithDefaultSubstitution,"    @Test public void testMissingValueWithDefaultSubstitution () {
        test(Mustache.compiler().defaultValue(""?{{name}}?""),
             ""?missing?bar"", ""{{missing}}{{notmissing}}"", context(""notmissing"", ""bar""));"
6400,testMissingValueWithDefaultNonEmptyString,"    @Test public void testMissingValueWithDefaultNonEmptyString () {
        test(Mustache.compiler().defaultValue(""foo""),
             ""foobar"", ""{{missing}}{{notmissing}}"", context(""notmissing"", ""bar""));"
6401,testMissingValueWithDefault,"    @Test public void testMissingValueWithDefault () {
        test(Mustache.compiler().defaultValue(""""),
             ""bar"", ""{{missing}}{{notmissing}}"", context(""notmissing"", ""bar""));"
6402,testMissingValue,"    @Test public void testMissingValue () {
        try {
            test(""n/a"", ""{{missing}} {{notmissing}}"", context(""notmissing"", ""bar""));"
6403,testStandardsModeWithNoParentContextSearching,"    @Test public void testStandardsModeWithNoParentContextSearching () {
        try {
            String tmpl = ""{{#parent}}foo{{parentProperty}}bar{{/parent}}"";"
6404,testStandardsModeWithDotValue,"    @Test public void testStandardsModeWithDotValue () {
        String tmpl = ""{{#foo}}:{{.}}:{{/foo}}"";
        String result = Mustache.compiler().standardsMode(true).compile(tmpl).
            execute(Collections.singletonMap(""foo"", ""bar""));
        check("":bar:"", result);"
6405,testStandardsModeWithNullValuesInInverseLoop,"    @Test public void testStandardsModeWithNullValuesInInverseLoop () {
        test(""first line\nfoo \nsecond line"",
             ""first line\n{{^nullvalue}}foo{{/nullvalue}} \nsecond line"","
6406,testStandardsModeWithNullValuesInLoop,"    @Test public void testStandardsModeWithNullValuesInLoop () {
        test(""first line\nsecond line"",
             ""first line\n{{#nullvalue}}foo\n{{/nullvalue}}\nsecond line"","
6407,testLineReporting,"    @Test public void testLineReporting () {
        String tmpl = ""first line\n{{nonexistent}}\nsecond line"";
        try {
            Mustache.compiler().compile(tmpl).execute(EMPTY);"
6408,testNestedIndex,"    @Test public void testNestedIndex () {
        String tmpl =
            ""{{#fooList}}\n"" +
            ""{{#quantity}}|q{{-index}}={{quantity}}{{/quantity}}|{{name}}\n"" +"
6409,testIndex,"    @Test public void testIndex () {
        test(""123"", ""{{#things}}{{-index}}{{/things}}"",
             context(""things"", Arrays.asList(""foo"", ""bar"", ""baz"")));"
6410,testNotLast,"    @Test public void testNotLast () {
        test(""1,2,3"", ""{{#things}}{{this}}{{^-last}},{{/-last}}{{/things}}"",
             context(""things"", Arrays.asList(""1"", ""2"", ""3"")));"
6411,testNotFirst,"    @Test public void testNotFirst () {
        test(""1,2,3"", ""{{#things}}{{^-first}},{{/-first}}{{this}}{{/things}}"",
             context(""things"", Arrays.asList(""1"", ""2"", ""3"")));"
6412,testInverseFirstLastCombo,"    @Test public void testInverseFirstLastCombo () {
        test(""_and_"", ""{{#things}}{{^-first}}NOT-FIRST{{/-first}}{{this}}{{^-last}}NOT-LAST{{/-last}}{{/things}}"",
             context(""things"", Arrays.asList(""_and_"")));"
6413,testFirstLastCombo,"    @Test public void testFirstLastCombo () {
        test(""FIRST_and_LAST"", ""{{#things}}{{#-first}}FIRST{{/-first}}{{this}}{{#-last}}LAST{{/-last}}{{/things}}"",
             context(""things"", Arrays.asList(""_and_"")));"
6414,testFirstLast,"    @Test public void testFirstLast () {
        test(""[foo]"", ""{{#things}}{{#-first}}[{{/-first}}{{this}}{{#-last}}]{{/-last}}{{/things}}"",
             context(""things"", Arrays.asList(""foo"")));
        test(""foo"", ""{{#things}}{{this}}{{^-last}}|{{/-last}}{{/things}}"","
6415,testLast,"    @Test public void testLast () {
        test(""foo|bar|baz"", ""{{#things}}{{this}}{{^-last}}|{{/-last}}{{/things}}"",
             context(""things"", Arrays.asList(""foo"", ""bar"", ""baz"")));"
6416,testFirst,"    @Test public void testFirst () {
        test(""foo|bar|baz"", ""{{#things}}{{^-first}}|{{/-first}}{{this}}{{/things}}"",
             context(""things"", Arrays.asList(""foo"", ""bar"", ""baz"")));"
6417,testShadowedContext,"    @Test public void testShadowedContext () {
        test(""foo((bar)(baz))"", ""{{name}}({{#things}}({{name}}){{/things}})"",
             context(""name"", ""foo"","
6418,testNestedContexts,"    @Test public void testNestedContexts () {
        test(""foo((foobar)(foobaz))"", ""{{name}}({{#things}}({{name}}{{thing_name}}){{/things}})"",
             context(""name"", ""foo"","
6420,testNewlineSkipping,"    protected void testNewlineSkipping (String sep) {
        String tmpl = ""list:"" + sep +
            ""{{#items}}"" + sep +
            ""{{this}}"" + sep +
            ""{{/items}}"" + sep +
            ""{{^items}}"" + sep +
            ""no items"" + sep +
            ""{{/items}}"" + sep +"
6422,testVisit,"    @Test public void testVisit() {
        String template = ""{{#one}}1{{/one}} {{^two}}2{{three}}{{/two}}{{four}}"";
        GetKeysVisitor viz = new GetKeysVisitor();
        Mustache.compiler().compile(template).visit(viz);
        List<String> expect = Arrays.asList(""one"", ""two"", ""three"", ""four"");
        assertEquals(new HashSet<>(expect), viz.keys);
    }"
6423,visitInvertedSection,"        public boolean visitInvertedSection (String name) { keys.add(name); return true; }
    }

    @Test public void testVisit() {"
6424,visitSection,"        public boolean visitSection (String name) { keys.add(name); return true; }
        public boolean visitInvertedSection (String name) { keys.add(name); return true; }
    }
"
6425,visitInclude,"        public boolean visitInclude (String name) { keys.add(name); return true; }
        public boolean visitSection (String name) { keys.add(name); return true; }
        public boolean visitInvertedSection (String name) { keys.add(name); return true; }
    }"
6426,visitVariable,"        public void visitVariable (String name) { keys.add(name); }
        public boolean visitInclude (String name) { keys.add(name); return true; }
        public boolean visitSection (String name) { keys.add(name); return true; }"
6427,visitText,"        public void visitText (String text) {}
        public void visitVariable (String name) { keys.add(name); }"
6428,testTrimBlank,"    @Test public void testTrimBlank () {
        Mustache.StringSegment str = new Mustache.StringSegment(""  \r\n  "", false);
        check(""Text(  )-1/0"", str.trimLeadBlank().toString());
        check(""Text(  \\r\\n)3/-1"", str.trimTrailBlank().toString());
    }"
6429,testNoTrimNewlineFromNestedTagAt0,"    @Test public void testNoTrimNewlineFromNestedTagAt0 () {
        test("" | \n  | \n"", "" | {{^boolean}}{{! comment }}\n {{/boolean}} | \n"",
             context(""boolean"", false));"
6430,testNewlineSkippingDelimsTag,"    @Test public void testNewlineSkippingDelimsTag () {
        test(""Begin.\nEnd.\n"", ""Begin.\n{{=@ @=}}\nEnd.\n"", EMPTY);
    }"
6431,testNewlineSkippingCRLF,"    @Test public void testNewlineSkippingCRLF () {
        testNewlineSkipping(""\r\n"");
    }"
6432,testNewlineSkipping,"    @Test public void testNewlineSkipping () {
        testNewlineSkipping(""\n"");
    }"
6433,testNestedNullThis,"    @Test public void testNestedNullThis () {
        check(""bar!bif"", Mustache.compiler().defaultValue(""!"").
              compile(""{{#things}}{{.}}{{/things}}"")."
6434,testNestedThis,"    @Test public void testNestedThis () {
        check(""barbazbif"", Mustache.compiler().compile(""{{#things}}{{this}}{{/things}}"").
              execute(context(""things"", Arrays.asList(""bar"", ""baz"", ""bif""))));
        check(""barbazbif"", Mustache.compiler().compile(""{{#things}}{{.}}{{/things}}"")."
6435,testTopLevelThis,"    @Test public void testTopLevelThis () {
        check(""bar"", Mustache.compiler().compile(""{{this}}"").execute(""bar""));
        check(""bar"", Mustache.compiler().compile(""{{.}}"").execute(""bar""));
    }"
6436,testPartialDelimiterMatch,"    @Test public void testPartialDelimiterMatch () {
        check(""{bob}"", Mustache.compiler().compile(""{bob}"").execute(EMPTY));
        check(""bar"", Mustache.compiler().compile(""{{bob}bob}}"").execute(context(""bob}bob"", ""bar"")));
    }"
6437,testUserDefinedEscaping,"    @Test public void testUserDefinedEscaping() {
        Mustache.Escaper escaper = Escapers.simple(new String[][] {
            { ""["", "":BEGIN:"" },
            { ""]"", "":END:"" }"
6439,testInvalidUnescapeHTML,"    @Test public void testInvalidUnescapeHTML () {
        try {
            Mustache.compiler().escapeHTML(true).compile(""{{{a}}"").execute(context(""a"", ""<b>""));"
6441,testDanglingTag,"    @Test public void testDanglingTag () {
        test(""foo{"", ""foo{"", context(""a"", ""<b>""));
        test(""foo{{"", ""foo{{"", context(""a"", ""<b>""));
        test(""foo{{a"", ""foo{{a"", context(""a"", ""<b>""));
        test(""foo{{a}"", ""foo{{a}"", context(""a"", ""<b>""));
    }"
6443,testDelimiterChange,"    @Test public void testDelimiterChange () {
        test(""foo bar baz"", ""{{one}} {{=<% %>=}}<%two%><%={{ }}=%> {{three}}"",
             context(""one"", ""foo"", ""two"", ""bar"", ""three"", ""baz""));
        test(""baz bar foo"", ""{{three}} {{=% %=}}%two%%={{ }}=% {{one}}"","
6444,getTemplate,"            public Reader getTemplate (String name) {
                return new StringReader(template);
            }"
6445,testRecursivePartial,"    @Test public void testRecursivePartial () {
        String template = ""[{{name}}{{#properties}}, {{> schema.mustache}}{{/properties}}]"";
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
6446,getTemplate,"            public Reader getTemplate (String name) {
                if (name.equals(""nested"")) {
                    return new StringReader(""{{name}}{{thing_name}}"");"
6447,testPartialPlusNestedContext,"    @Test public void testPartialPlusNestedContext () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
6448,getTemplate,"            public Reader getTemplate (String name) {
                    return new StringReader(""line {{#show}}content{{/show}}\n"");
            }"
6449,testPartialIndentWithInlineBlock,"    @Test public void testPartialIndentWithInlineBlock () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
6450,getTemplate,"            public Reader getTemplate (String name) {
                    return new StringReader(""{{#show}}\n{{{content}}}{{/show}}\n|\n"");
            }"
6451,testPartialIndentWithBlockAtStart,"    @Test public void testPartialIndentWithBlockAtStart () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
6452,getTemplate,"            public Reader getTemplate (String name) {
                    return new StringReader(""content"");
            }"
6453,testPartialIndentInBlock,"    @Test public void testPartialIndentInBlock () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
6454,getTemplate,"            public Reader getTemplate (String name) {
                    return new StringReader(""|\n{{#show}}\n{{{content}}}{{/show}}\n|\n"");
            }"
6455,testPartialIndentWithBlock,"    @Test public void testPartialIndentWithBlock () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
6456,getTemplate,"            public Reader getTemplate (String name) {
                    return new StringReader(""{{{content}}}\n|\n"");
            }"
6457,testPartialIndentWithVariableAtTheStart,"    @Test public void testPartialIndentWithVariableAtTheStart () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
6458,testNestedPartialIndent,"    @Test public void testNestedPartialIndent () {
        Mustache.TemplateLoader loader = partials(entry(""partial"", ""1\n {{>nest}}\n1\n""), entry(""nest"", ""2\n{{{content}}}\n2\n""));
        test(Mustache.compiler().withLoader(loader),
                ""|\n 1\n  2\n  <\n->\n  2\n 1\n|\n"","
6459,getTemplate,"            public Reader getTemplate (String name) {
                if (name.equals(""partial"")) {
                    return new StringReader(""1\r\n\t{{>nest}}\r\n1\r\n"");"
6460,testNestedPartialBlankLinesCRLF,"    @Test public void testNestedPartialBlankLinesCRLF () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
6461,getTemplate,"            public Reader getTemplate (String name) {
                if (name.equals(""partial"")) {
                    return new StringReader(""1\n\t{{>nest}}\n1\n"");"
6462,testNestedPartialBlankLines,"    @Test public void testNestedPartialBlankLines () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
6463,getTemplate,"            public Reader getTemplate (String name) {
                return new StringReader(""|\na\n\nb\n|\n"");
            }"
6464,testPartialBlankLines,"    @Test public void testPartialBlankLines () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
6465,getTemplate,"            public Reader getTemplate (String name) {
                return new StringReader(""|\n{{{content}}}\n|\n"");
            }"
6466,testPartialIndent,"    @Test public void testPartialIndent () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
6467,testPartial,"    @Test public void testPartial () {
        test(Mustache.compiler().withLoader(
                partials(entry(""foo"", ""inside:{{bar}}""),"
6468,partials,"    protected final Mustache.TemplateLoader partials(Map.Entry<String, String> ... entries) {
        Map<String,String> templates = new LinkedHashMap<>();
        for (Entry<String, String> e : entries) {
            templates.put(e.getKey(), e.getValue());
        }
        partials = templates;"
6469,testPartialUseWhenUnconfigured,"    @Test public void testPartialUseWhenUnconfigured () {
        try {
            test(null, ""{{>foo}}"", null);"
6470,testCommentWithFunnyChars,"    @Test public void testCommentWithFunnyChars() {
        test(""foobar"", ""foo{{! {baz\n }}bar"", EMPTY);
    }"
6471,testComment,"    @Test public void testComment () {
        test(""foobar"", ""foo{{! nothing to see here}}bar"", EMPTY);
    }"
6473,testSectionWithNonFalseyEmptyString,"    @Test public void testSectionWithNonFalseyEmptyString () {
        test(Mustache.compiler(), ""test"", ""{{#foo}}test{{/foo}}"", context(""foo"", """"));
    }"
6476,testMissingStrictSection,"    @Test public void testMissingStrictSection () {
        try {
            test(Mustache.compiler().strictSections(true), """", ""{{#foo}}{{bar}}{{/foo}}"","
6478,testNullSection,"    @Test public void testNullSection () {
        Object ctx = context(""foo"", null);
        test("""", ""{{#foo}}{{bar}}{{/foo}}"", ctx);
        test(Mustache.compiler().defaultValue(""""), """", ""{{#foo}}{{bar}}{{/foo}}"", ctx);
        test(Mustache.compiler().nullValue(""""), """", ""{{#foo}}{{bar}}{{/foo}}"", ctx);
    }"
6479,testNestedListSection,"    @Test public void testNestedListSection () {
        test(""1234"", ""{{#a}}{{#b}}{{c}}{{/b}}{{#d}}{{e}}{{/d}}{{/a}}"",
             context(""a"", context(""b"", new Object[] { context(""c"", ""1""), context(""c"", ""2"") },"
6480,testFalseSection,"    @Test public void testFalseSection () {
        test("""", ""{{#foo}}{{bar}}{{/foo}}"", context(""foo"", false));
    }"
6481,testEmptyIteratorSection,"    @Test public void testEmptyIteratorSection () {
        test("""", ""{{#foo}}{{bar}}{{/foo}}"", context(""foo"", Collections.emptyList().iterator()));
    }"
6482,testEmptyArraySection,"    @Test public void testEmptyArraySection () {
        test("""", ""{{#foo}}{{bar}}{{/foo}}"", context(""foo"", new Object[0]));
    }"
6483,testEmptyListSection,"    @Test public void testEmptyListSection () {
        test("""", ""{{#foo}}{{bar}}{{/foo}}"", context(""foo"", Collections.emptyList()));
    }"
6484,testIteratorItemSection,"    @Test public void testIteratorItemSection () {
        test(""baz"", ""{{foo.0.bar}}"",
            context(""foo"", Arrays.asList(context(""bar"", ""baz""),"
6485,testIteratorIndexOutOfBoundsSection,"    @Test public void testIteratorIndexOutOfBoundsSection () {
        test("""", ""{{#foo.2}}{{bar}}{{/foo.2}}"",
             context(""foo"", Arrays.asList(context(""bar"", ""baz""),"
6486,testIteratorIndexSection,"    @Test public void testIteratorIndexSection () {
        test(""baz"", ""{{#foo.0}}{{bar}}{{/foo.0}}"",
            context(""foo"", Arrays.asList(context(""bar"", ""baz""),"
6487,testIteratorSection,"    @Test public void testIteratorSection () {
        test(""bazbif"", ""{{#foo}}{{bar}}{{/foo}}"",
             context(""foo"", Arrays.asList(context(""bar"", ""baz""),"
6488,testArrayItemSection,"    @Test public void testArrayItemSection () {
        test(""baz"", ""{{foo.0.bar}}"",
            context(""foo"", new Object[] {"
6489,testArrayIndexOutOfBoundsSection,"    @Test public void testArrayIndexOutOfBoundsSection () {
        test("""", ""{{#foo.2}}{{bar}}{{/foo.2}}"",
             context(""foo"", new Object[] {"
6490,testArrayIndexSection,"    @Test public void testArrayIndexSection () {
        test(""baz"", ""{{#foo.0}}{{bar}}{{/foo.0}}"",
            context(""foo"", new Object[] {"
6491,testArraySection,"    @Test public void testArraySection () {
        test(""bazbif"", ""{{#foo}}{{bar}}{{/foo}}"",
             context(""foo"", new Object[] { context(""bar"", ""baz""), context(""bar"", ""bif"") }));"
6492,testMapEntriesSection,"    @Test public void testMapEntriesSection () {
        Map<String,String> data = new HashMap<String,String>();
        data.put(""k1"", ""v1"");
        data.put(""k2"", ""v2"");
        test(Mustache.compiler().escapeHTML(false),
             ""k1=v1k2=v2"", ""{{#map.entrySet}}{{.}}{{/map.entrySet}}"","
6493,testListItemSection,"    @Test public void testListItemSection () {
        test(""baz"", ""{{foo.0.bar}}"", context(
            ""foo"", Arrays.asList(context(""bar"", ""baz""), context(""bar"", ""bif""))));"
6494,testListIndexOutOfBoundsSection,"    @Test public void testListIndexOutOfBoundsSection () {
        test("""", ""{{#foo.2}}{{bar}}{{/foo.2}}"", context(
                 ""foo"", Arrays.asList(context(""bar"", ""baz""), context(""bar"", ""bif""))));"
6495,testListIndexSection,"    @Test public void testListIndexSection() {
        test(""baz"", ""{{#foo.0}}{{bar}}{{/foo.0}}"", context(
            ""foo"", Arrays.asList(context(""bar"", ""baz""), context(""bar"", ""bif""))));"
6496,testListSection,"    @Test public void testListSection () {
        test(""bazbif"", ""{{#foo}}{{bar}}{{/foo}}"", context(
                 ""foo"", Arrays.asList(context(""bar"", ""baz""), context(""bar"", ""bif""))));"
6497,testOneShotSection,"    @Test public void testOneShotSection () {
        test(""baz"", ""{{#foo}}{{bar}}{{/foo}}"", context(""foo"", context(""bar"", ""baz"")));
    }"
6498,testPrimitiveArrayIndexOutOfBoundsVariable,"    @Test public void testPrimitiveArrayIndexOutOfBoundsVariable () {
        Mustache.Compiler comp = Mustache.compiler().defaultValue(""?"");
        test(comp, ""?"", ""{{foo.4}}"", context(""foo"", new int[] { 1, 2, 3, 4 }));
    }"
6499,testPrimitiveArrayIndexVariable,"    @Test public void testPrimitiveArrayIndexVariable () {
        test(""1"", ""{{foo.0}}"", context(""foo"", new int[] { 1, 2, 3, 4 }));
    }"
6500,testPrimitiveArrayVariable,"    @Test public void testPrimitiveArrayVariable () {
        test(""1234"", ""{{#foo}}{{this}}{{/foo}}"", context(""foo"", new int[] { 1, 2, 3, 4 }));
    }"
6501,testSimpleVariable,"    @Test public void testSimpleVariable () {
        test(""bar"", ""{{foo}}"", context(""foo"", ""bar""));
    }"
6502,data,"    public static Collection<Object[]> data () {
        String[] groups = new String[] {
            ""comments"",
            ""delimiters"","
6503,foo,"            public Object foo () {
                return new Object() {
                    public Object bar = new Object() {"
6504,testNoAccesCoercion,"    @Test public void testNoAccesCoercion () {
        Object ctx = new Object() {
            public Object foo () {
                return new Object() {
                    public Object bar = new Object() {
                        public String baz = ""hello"";"
6506,format,"            public String format (Object value) {
                if (value instanceof Date) return _fmt.format((Date)value);
                else return String.valueOf(value);"
6507,testCustomFormatter,"    @Test public void testCustomFormatter () {
        Mustache.Formatter fmt = new Mustache.Formatter() {
            public String format (Object value) {
                if (value instanceof Date) return _fmt.format((Date)value);"
6508,execute,"                     public void execute (Template.Fragment frag, Writer out) throws IOException {
                         Object ctx = frag.context();
                         if (ctx instanceof Foo) lfoo.execute(ctx, out);
                         else if (ctx instanceof Bar) lbar.execute(ctx, out);"
6510,testShadowedContextWithNull,"    @Test public void testShadowedContextWithNull () {
        Mustache.Compiler comp = Mustache.compiler().nullValue(""(null)"");
        String tmpl = ""{{foo}}{{#inner}}{{foo}}{{/inner}}"", expect = ""outer(null)"";
        test(comp, expect, tmpl, new Object() {
            public String foo = ""outer"";
            public Object inner = new Object() {"
6513,testNullComponentInCompoundVariableWithDefault,"    @Test public void testNullComponentInCompoundVariableWithDefault () {
        test(Mustache.compiler().nullValue(""null""), ""null"", ""{{foo.bar.baz}}"", new Object() {
            Object foo = null;
        });"
6514,testMissingComponentInCompoundVariable,"    @Test public void testMissingComponentInCompoundVariable () {
        try {
            test(Mustache.compiler(), ""unused"", ""{{foo.bar.baz}}"", new Object() {"
6515,testNullComponentInCompoundVariable,"    @Test public void testNullComponentInCompoundVariable () {
        try {
            test(Mustache.compiler(), ""unused"", ""{{foo.bar.baz}}"", new Object() {"
6516,foo,"            Object foo () {
                return new Object() {
                    Object bar = new Object() {"
6517,testCompoundVariable,"    @Test public void testCompoundVariable () {
        test(""hello"", ""{{foo.bar.baz}}"", new Object() {
            Object foo () {"
6518,toIterator,"            public Iterator<?> toIterator (final Object value) {
                if (value instanceof Optional<?>) {
                    Optional<?> opt = (Optional<?>) value;"
6520,doublem,"                 double doublem () { return 0d; }
             });
    }"
6521,floatm,"                 float floatm () { return 0f; }
                 double doublem () { return 0d; }
             });"
6522,longm,"                 long longm () { return 0l; }
                 float floatm () { return 0f; }
                 double doublem () { return 0d; }"
6523,intm,"                 int intm () { return 0; }
                 long longm () { return 0l; }
                 float floatm () { return 0f; }"
6524,testSectionWithFalseyZero,"    @Test public void testSectionWithFalseyZero () {
        test(Mustache.compiler().zeroIsFalse(true), """",
             ""{{#intv}}intv{{/intv}}"" +"
6525,testSectionWithNonFalseyZero,"    @Test public void testSectionWithNonFalseyZero () {
        test(Mustache.compiler(), ""test"", ""{{#foo}}test{{/foo}}"", new Object() {
            Long foo = 0L;"
6526,getFoo,"            String getFoo () { return ""bar""; }
        }));
        check(""bar"", tmpl.execute(new Object() {"
6527,testCallSiteChange,"    @Test public void testCallSiteChange () {
        Template tmpl = Mustache.compiler().compile(""{{foo}}"");
        check(""bar"", tmpl.execute(new Object() {
            String getFoo () { return ""bar""; }
        }));"
6528,getFoo,"            String getFoo () { return ""bar""; }
        };
        for (int ii = 0; ii < 50; ii++) {"
6529,testCallSiteReuse,"    @Test public void testCallSiteReuse () {
        Template tmpl = Mustache.compiler().compile(""{{foo}}"");
        Object ctx = new Object() {
            String getFoo () { return ""bar""; }
        };"
6530,getFoo,"            String getFoo () { return ""bar""; }
        });
    }"
6531,foo,"            void foo () {}
            String getFoo () { return ""bar""; }"
6532,testSkipVoidReturn,"    @Test public void testSkipVoidReturn () {
        test(""bar"", ""{{foo}}"", new Object() {
            void foo () {}"
6533,isFoo,"            boolean isFoo () { return false; }
        });
    }"
6534,testPrimitiveBooleanPropertyVariable,"    @Test public void testPrimitiveBooleanPropertyVariable () {
        test(""false"", ""{{foo}}"", new Object() {
            boolean isFoo () { return false; }"
6535,isFoo,"            Boolean isFoo () { return true; }
        });
    }"
6536,testBooleanPropertyVariable,"    @Test public void testBooleanPropertyVariable () {
        test(""true"", ""{{foo}}"", new Object() {
            Boolean isFoo () { return true; }"
6537,getFoo,"            public String getFoo () { return ""bong""; }
        });
    }"
6538,testDefaultMethodVariable,"    @Test public void testDefaultMethodVariable () {
        test(""bar"", ""{{foo}}"", new HasDefault() {
        });
        test(""bang"", ""{{foo}}"", new Interloper() {
        });"
6539,getFoo,"        default String getFoo () { return ""bang""; }
    }
    @Test public void testDefaultMethodVariable () {"
6540,getFoo,"        default String getFoo () { return ""bar""; }
    }
    public interface Interloper extends HasDefault {"
6541,testCharSequenceVariable,"    @Test public void testCharSequenceVariable() {
        Map<String, CharSequence> ctx = new HashMap<>();
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(""bar"");
        ctx.put(""foo"", stringBuffer);
        test(""bar"", ""{{foo}}"", ctx);
    }"
6542,get,"            public Object get(String name) {
                return ""foo"".equals(name) ? ""bar"" : null;
            }"
6543,testCustomContext,"    @Test public void testCustomContext() {
        test(""bar"", ""{{foo}}"", new Mustache.CustomContext() {
            @Override"
6545,testPropertyVariable,"    @Test public void testPropertyVariable () {
        test(""bar"", ""{{foo}}"", new Object() {
            String getFoo () { return ""bar""; }"
6546,foo,"            String foo () { return ""bar""; }
        });
    }"
6547,testMethodVariable,"    @Test public void testMethodVariable () {
        test(""bar"", ""{{foo}}"", new Object() {
            String foo () { return ""bar""; }"
6548,testFieldVariable,"    @Test public void testFieldVariable () {
        test(""bar"", ""{{foo}}"", new Object() {
            String foo = ""bar"";"
6549,data,"    public static Collection<Object[]> data () {
        String[] groups = new String[] {
            ""sections"",
            ""partials"","
6550,addOffset,"    protected void

    addOffset(@Nullable String fileName) {

"
6557,run,"            @Override public ClassLoader

            run() {"
6563,compare,"        @Override @NotNullByDefault(false) public int

        compare(Location l1, Location l2) {"
6569,evaluate,"    @Override @Nullable public Object

    evaluate(int idx, @Nullable Object[] arguments) throws InvocationTargetException {"
6570,createFastEvaluator,"    @Override public <T> T

    createFastEvaluator(

        Reader   r,

        Class<T> interfaceToImplement,

        String[] parameterNames

    ) throws CompileException, IOException {

        if (!interfaceToImplement.isInterface()) {

            throw new RuntimeException(""\"""" + interfaceToImplement + ""\"" is not an interface"");"
6571,createFastEvaluator,"    @Override public <T> T

    createFastEvaluator("
6574,hashCode,"                @Override public int

                hashCode() { return this.name.hashCode() ^ Arrays.hashCode(this.parameterTypes); }"
6575,equals,"                @Override public boolean

                equals(@Nullable Object o) {

                    if (!(o instanceof MethodWrapper)) return false;"
6576,cook,"    protected final void

    cook(String[] fileNames, Reader[] readers, String[] imports)

    throws CompileException, IOException {



        this.setScriptCount(fileNames.length);

        this.setScriptCount(readers.length);"
6577,cook,"    @Override public void

    cook(String[] fileNames, Reader[] readers) throws CompileException, IOException {"
6578,cook,"    @Override public void

    cook(@Nullable String fileName, Reader reader) throws CompileException, IOException {

        String[] imports;
"
6586,evaluate,"    @Override @Nullable public Object

    evaluate(@Nullable Object[] arguments) throws InvocationTargetException { return this.evaluate(0, arguments); }"
6587,evaluate,"    @Override @Nullable public Object

    evaluate() throws InvocationTargetException { return this.evaluate(new Object[0]); }"
6610,report,"                @Override public void

                report(@Nullable final Diagnostic<? extends JavaFileObject> diagnostic) {
"
6613,findClass,"    @NotNullByDefault(false) @Override protected Class<?>

    findClass(String className) throws ClassNotFoundException {"
6622,createFastEvaluator,"    @Override public <T> T

    createFastEvaluator(Reader reader, Class<? extends T> interfaceToImplement, String... parameterNames)

    throws CompileException, IOException {



        if (!interfaceToImplement.isInterface()) {

            throw new InternalCompilerException(""\"""" + interfaceToImplement + ""\"" is not an interface"");

        }

"
6623,createFastEvaluator,"    @Override public <T> T

    createFastEvaluator(String expression, Class<? extends T> interfaceToImplement, String... parameterNames)"
6630,evaluate,"    @Override @Nullable public Object

    evaluate(@Nullable Object[] arguments) throws InvocationTargetException { return this.se.evaluate(arguments); }"
6633,cook,"    @Override public void

    cook(@Nullable String fileName, Reader reader) throws CompileException, IOException {



        this.se.setScriptCount(1);


"
6660,run,"            @Override public JavaSourceClassLoader run() { return new JavaSourceClassLoader(parentClassLoader); }

        });"
6661,newJavaSourceClassLoader,"    @Override public AbstractJavaSourceClassLoader

    newJavaSourceClassLoader(final ClassLoader parentClassLoader) {"
6662,run,"            @Override public JavaSourceClassLoader run() { return new JavaSourceClassLoader(); }

        });"
6663,newJavaSourceClassLoader,"    @Override public AbstractJavaSourceClassLoader

    newJavaSourceClassLoader() {"
6664,newCompiler,"    @Override public ICompiler

    newCompiler() { return new Compiler(); }"
6665,newSimpleCompiler,"    @Override public ISimpleCompiler

    newSimpleCompiler() { return new SimpleCompiler(); }"
6666,newClassBodyEvaluator,"    @Override public IClassBodyEvaluator

    newClassBodyEvaluator() { return new ClassBodyEvaluator(); }"
6667,newScriptEvaluator,"    @Override public IScriptEvaluator

    newScriptEvaluator() { return new ScriptEvaluator(); }"
6668,newExpressionEvaluator,"    @Override public IExpressionEvaluator

    newExpressionEvaluator() { return new ExpressionEvaluator(); }"
6670,toString,"    @Override public String

    toString() { return ""jdk""; }"
6672,filesToPath,"    private static String

    filesToPath(File[] files) {

        StringBuilder sb = new StringBuilder();"
6673,report,"            @Override public void

            report(@Nullable Diagnostic<? extends JavaFileObject> diagnostic) {

                assert diagnostic != null;


"
6674,compile,"    static void

    compile(

        JavaCompiler                        compiler,

        List<String>                        options,"
6675,getJavaFileManager,"    private static JavaFileManager

    getJavaFileManager(

        JavaCompiler    compiler,

        ResourceFinder  sourceFileFinder,"
6676,compile,"    static void

    compile(

        JavaCompiler                  compiler,
"
6678,compile,"    @Override public void

    compile(final Resource[] sourceResources) throws CompileException, IOException {"
6681,createInstance,"    @Override public Object

    createInstance(Reader reader) throws CompileException, IOException {
"
6682,parseImportDeclarations,"    protected static String[]

    parseImportDeclarations(Reader r) throws IOException {

        final CharBuffer cb = CharBuffer.allocate(10000);

        r.mark(cb.limit());

        r.read(cb);


"
6683,run,"            @Override public void run() { ClassBodyEvaluator.this.sc.addOffset(fileName); }

        });"
6684,newFileName,"    protected Reader

    newFileName(@Nullable final String fileName, Reader reader) {"
6687,cook,"    protected void

    cook(@Nullable String fileName, String[] imports, Reader r) throws CompileException, IOException {

"
6688,cook,"    @Override public void

    cook(@Nullable String fileName, Reader r) throws CompileException, IOException {
"
6703,byteArrayToInt,"	public static int byteArrayToInt(byte[] b, int offset) {
		return b[3 + offset] & 0xFF | (b[2 + offset] & 0xFF) << 8 | (b[1 + offset] & 0xFF) << 16 | (b[offset] & 0xFF) << 24;
	}"
6704,putIntTo,"	public static void putIntTo(byte[] newArray, int i, int offset) {
		newArray[offset] = (byte) ((i >> 24) & 0xFF);
		newArray[1 + offset] = (byte) ((i >> 16) & 0xFF);
		newArray[2 + offset] = (byte) ((i >> 8) & 0xFF);
		newArray[3 + offset] = (byte) (i & 0xFF);
	}"
6705,closeSocket,"	private void closeSocket() {
		connected = false;
		if (socket != null && !socket.isClosed()) {
			socket.close();"
6706,interrupt,"	@Override public void interrupt() {
		super.interrupt();

		closeSocket();"
6708,add,"	public void add(MotionEvent event) {
		byte[] array = new byte[32 * Config.TOUCH_METADATA_SIZE];
		Utils.putIntTo(array, clientId, 0);
		Utils.putIntTo(array, event.getAction(), 32);
		Utils.putIntTo(array, (int) event.getX(), 64);
		Utils.putIntTo(array, (int) event.getY(), 96);
		try {
			queue.put(array);"
6710,interrupt,"	@Override public void interrupt() {
		closeSocket();
		super.interrupt();
	}"
6711,run,"	@Override public void run() {
		try {
			socket = new DatagramSocket(port);"
6712,config,"	public void config(int fullCanvasWidth, int fullCanvasHeight) {
		this.fullCanvasWidth = fullCanvasWidth;
		this.fullCanvasHeight = fullCanvasHeight;
	}"
6713,onDraw,"	@Override protected void onDraw(Canvas canvas) {
		if (picture != null) {
			canvas.translate(dx, dy);"
6714,onTouchEvent,"	@Override public boolean onTouchEvent(MotionEvent event) {
		if (touchHandler != null) {
			event.setLocation(event.getX() - dx, event.getY() - dy);"
6716,init,"	private void init() {

		setLayerType(View.LAYER_TYPE_SOFTWARE, null);

		textPaint.setStyle(Paint.Style.FILL);
		textPaint.setColor(Color.BLACK);
		textPaint.setAntiAlias(true);
		textPaint.setTextSize(Utils.getSp(getContext(), 24));
"
6718,showLose,"	public void showLose() {
		loseAlphaInterpolator = new LinearInterpolator(255, 0, 300);
	}"
6719,onDrag,"	public void onDrag(int y) {
		bounds.offsetTo(bounds.left, startDragTop + y - downY);
	}"
6721,startDrag,"	public void startDrag(int downX, int downY) {
		this.downX = downX;
		this.downY = downY;
		startDragTop = bounds.top;
	}"
6722,drawLoseEffect,"	private void drawLoseEffect(Canvas canvas, long currentTime) {
		if (loseAlphaInterpolator == null) return;
		final int alpha = loseAlphaInterpolator.getValue(currentTime);
		if (alpha >= 0) {
"
6723,onDraw,"	public void onDraw(Canvas canvas, long currentTime) {

		canvas.drawRect(bounds, playerPaint);
		drawLoseEffect(canvas, currentTime);"
6724,intersectsWith,"	public boolean intersectsWith(Rect rect) {
		return Rect.intersects(rect, bounds);
	}"
6725,contains,"	public boolean contains(int x, int y) {
		return bounds.contains(x, y);
	}"
6726,onTouchEvent,"	public void onTouchEvent(int action, int x, int y) {

		if (action == MotionEvent.ACTION_DOWN) {"
6727,turnBallX,"	private void turnBallX() {
		ball.vector.set(ball.vector.x * -1, ball.vector.y);
	}"
6728,turnBallY,"	private void turnBallY() {
		ball.vector.set(ball.vector.x, ball.vector.y * -1);
	}"
6729,update,"	public void update(Canvas canvas) {

		final int canvasWidth = canvas.getWidth();
		final int canvasHeight = canvas.getHeight();
"
6730,onDraw,"	@Override protected void onDraw(Canvas canvas) {

		final long currentTime = System.currentTimeMillis();
		long timeDiff = 0;

		if (frameTime == 0) {
			frameTime = currentTime;
		} else {
			timeDiff = currentTime - frameTime;
			frameTime = currentTime;
		}"
6731,onTouchEvent,"	@Override protected void onTouchEvent(int clientId, int action, int x, int y) {
		controller.onTouchEvent(action, x, y);
	}"
6732,destroyHost,"	private void destroyHost() {
		if (hostCanvas != null) {
			hostCanvas.destroy();"
6733,destroyClient,"	private void destroyClient() {
		if (pictureReceiver != null) {
			pictureReceiver.destroy();"
6734,onDestroy,"	@Override protected void onDestroy() {
		destroyHost();
		destroyClient();
		super.onDestroy();
	}"
6735,startClient,"	private void startClient(int clientId) {
		pictureReceiver = new PictureReceiver(clientId);
		pictureReceiver.config(PICTURES_PORT, HOST_ADDRESS, TOUCH_EVENTS_PORT);
		pictureReceiver.setReceiverView(receiverView);
		pictureReceiver.start();
	}"
6736,startHost,"	private void startHost(Screen[] screens, int screenWidth, int screenHeight) {
		hostCanvas = new PingPongCanvas(
				PingPongActivity.this,
				FRAME_RATE, screenWidth * screens.length,
				screenHeight"
6737,handleTouchEvent,"			@Override public void handleTouchEvent(MotionEvent event) {
				if (pictureReceiver != null) pictureReceiver.handleTouchEvent(event);
			}"
6738,config,"	private void config(final int screenWidth, final int screenHeight) {

		final Screen[] screens = new Screen[CLIENT_ADDRESSES.length];

		for (int i = 0; i < screens.length; i++) {
			screens[i] = new Screen(CLIENT_ADDRESSES[i], screenWidth * i * -1, 0);
"
6739,onGlobalLayout,"			@Override public void onGlobalLayout() {
				receiverView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
				config(receiverView.getWidth(), receiverView.getHeight());
			}"
6740,onCreate,"	@Override protected void onCreate(Bundle savedInstanceState) {
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		super.onCreate(savedInstanceState);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);

		setContentView(R.layout.activity_pingpong);

		InternalLogger.setLogger(new Logger());
"
6741,interrupt,"	@Override public void interrupt() {
		super.interrupt();
		closeSocket();
	}"
6743,run,"	@Override public void run() {

		while (connected) {"
6746,run,"	@Override public void run() {
		socket = null;
		try {
"
6747,addPicture,"	public void addPicture(Picture picture) {
		if (!connected) return;
		os.reset();
		picture.writeToStream(os);
		try {
			byte[] raw = os.toByteArray();"
6748,config,"	public void config(Screen[] screens, int picturesPort, int touchEventsPort) {
		this.picturesPort = picturesPort;
		this.screens = screens;
		this.touchEventsPort = touchEventsPort;
	}"
6749,destroy,"	public void destroy() {
		if (pictureSenderThread != null) pictureSenderThread.interrupt();
		if (touchEventsReceiverThread != null) touchEventsReceiverThread.interrupt();
	}"
6750,start,"	public void start() {
		pictureSenderThread = new PictureSenderThread(screens, picturesPort);
		pictureSenderThread.start();

		touchEventsReceiverThread = new TouchEventsReceiverThread(touchEventsPort, interactiveCanvas);
		touchEventsReceiverThread.start();"
6751,addPicture,"	public void addPicture(Picture picture) {
		pictureSenderThread.addPicture(picture);
	}"
6753,handleTouchEvent,"	public void handleTouchEvent(MotionEvent event) {
		touchEventsSendThread.add(event);
	}"
6754,config,"	public void config(int picturesReceivePort, InetAddress hostAddress, int touchPort) {
		this.picturesPort = picturesReceivePort;
		this.hostAddress = hostAddress;
		this.touchPort = touchPort;
	}"
6755,run,"	@Override public void run() {
		try {
			receiverView.setPicture(picturesQueue.take());"
6757,destroy,"	public void destroy() {
		if (picturesReceiverThread != null) picturesReceiverThread.interrupt();
		if (touchEventsSendThread != null) touchEventsSendThread.interrupt();
	}"
6758,start,"	public void start() {
		picturesReceiverThread = new PicturesReceiverThread(picturesPort, receiverView, this, picturesQueue);
		picturesReceiverThread.start();
		touchEventsSendThread = new TouchEventsSendThread(hostAddress, touchPort, clientId);
		touchEventsSendThread.start();
	}"
6759,onDraw,"		void onDraw(Canvas canvas, Paint paint) {
			paint.setColor(color);
			canvas.save();
			canvas.translate(x, y);
			canvas.rotate(rotation);
			canvas.drawRect(-size / 2, -size / 2, size / 2, size / 2, paint);
			canvas.restore();
			rotation++;
		}"
6760,onDraw,"	@Override protected void onDraw(Canvas canvas) {
		canvas.drawColor(Color.BLACK);
		path.reset();
		for (int i = 0; i < markers.size(); i++) {
			Marker marker = markers.get(i);
			if (i == 0) path.moveTo(marker.x, marker.y);
			path.lineTo(marker.x, marker.y);
			marker.onDraw(canvas, paint);"
6761,onTouchEvent,"	@Override protected void onTouchEvent(int clientId, int action, int x, int y) {
		controller.onTouchEvent(action, x, y);
		if (action == MotionEvent.ACTION_DOWN) {
			markers.add(new Marker(x, y, radius, markersColors[clientId]));"
6763,destroyHost,"	private void destroyHost() {
		if (canvas != null) {
			canvas.destroy();"
6764,onDestroy,"	@Override protected void onDestroy() {
		destroyClient();
		destroyHost();
		super.onDestroy();
	}"
6765,startHost,"	private void startHost(Screen[] screens, int screenWidth, int screenHeight) {

		Random rnd = new Random();
		int[] markersColors = new int[screens.length];
		for (int i = 0; i < markersColors.length; i++)
			markersColors[i] = Color.argb(255, rnd.nextInt(256), rnd.nextInt(256), rnd.nextInt(256));

		canvas = new MirrorCanvas("
6768,config,"	private void config(final int screenWidth, final int screenHeight) {

		final Screen[] screens = new Screen[CLIENT_ADDRESSES.length];

		for (int i = 0; i < screens.length; i++) {
			screens[i] = new Screen(CLIENT_ADDRESSES[i], 0, 0);
"
6770,onCreate,"	protected void onCreate(Bundle savedInstanceState) {
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		super.onCreate(savedInstanceState);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);

		setContentView(R.layout.activity_mirror);

		InternalLogger.setLogger(new Logger());
"
6772,handleTouchEvent,"	void handleTouchEvent(int action, int x, int y);
}"
6773,handleTouchEvent,"	void handleTouchEvent(MotionEvent event);
}"
6774,logException,"	public static void logException(Class src, Throwable e) {
		if (logger != null) logger.logException(src, e);
	}"
6776,config,"	public final void config(Screen[] screens, int picturesPort, int touchEventsPort) {
		pictureSender.config(screens, picturesPort, touchEventsPort);
	}"
6777,destroy,"	public void destroy() {
		drawing = false;
		pictureSender.destroy();
	}"
6778,run,"			@Override public void run() {
				pictureSender.start();

				while (drawing) {
					begin();"
6779,start,"	public final void start() {
		new Thread(new Runnable() {
			@Override public void run() {"
6780,onTouchEvent,"	protected void onTouchEvent(int clientId, int action, int x, int y) {
"
6781,onDraw,"	protected void onDraw(Canvas canvas) {
		picture.endRecording();
		pictureSender.addPicture(picture);
	}"
6782,begin,"	public final void begin() {
		onDraw(picture.beginRecording(width, height));
	}"
6783,logException,"	void logException(Class src, Throwable throwable);
}"
6784,logException,"	void logException(Object msg);
	void logException(Class src, Throwable throwable);"
6785,logException,"	void logException(String msg);
	void logException(Object msg);"
6786,toByteArray,"	@Override public synchronized byte[] toByteArray() {
		byte[] newArray = new byte[count + extraBytes];
		System.arraycopy(buf, 0, newArray, extraBytes, count);
		return newArray;
	}"
6787,onTouchEvent,"	public void onTouchEvent(int action, int x, int y) {
"
6788,updatePosition,"	private void updatePosition(long timeDiff) {
		bounds.offset(
				(int) (SPEED * timeDiff * vector.x),"
6789,drawTail,"	private void drawTail(Canvas canvas, long timeDiff, long currentTime) {

		final int step = 255 / tail.length;
		int alpha = 255;
		for (Rect tailPoint : tail) {
			fillPaint.setAlpha(alpha);
			canvas.drawRect(bounds, fillPaint);
			canvas.drawRect(tailPoint, fillPaint);
			alpha -= step;
		}
		fillPaint.setAlpha(255);"
6790,onDraw,"	public void onDraw(Canvas canvas, long timeDiff, long currentTime) {
		updatePosition(timeDiff);

		canvas.drawRect(bounds, fillPaint);
		drawTail(canvas, timeDiff, currentTime);"
6792,completeSecurityScopeNameValue,"  public boolean completeSecurityScopeNameValue() {
    return pathResolver.isSecurityScopeNameValue(psiElement);
  }"
6793,completeTagsValue,"  public boolean completeTagsValue() {
    return pathResolver.isTagsValue(psiElement);
  }"
6794,completeHeadersCollectionFormat,"  public boolean completeHeadersCollectionFormat() {
    return pathResolver.childOfHeadersCollectionFormat(psiElement);
  }"
6795,completeParametersCollectionFormat,"  public boolean completeParametersCollectionFormat() {
    return pathResolver.childOfParametersCollectionFormat(psiElement);
  }"
6796,completeItemsCollectionFormat,"  public boolean completeItemsCollectionFormat() {
    return pathResolver.childOfItemsCollectionFormat(psiElement);
  }"
6797,completeOperationSecurityKey,"  public boolean completeOperationSecurityKey() {
    return pathResolver.childOfOperationSecurityKey(psiElement);
  }"
6798,completeRootSecurityKey,"  public boolean completeRootSecurityKey() {
    return pathResolver.childOfRootSecurityKey(psiElement);
  }"
6799,completeResponseDefinition,"  public boolean completeResponseDefinition() {
    return pathResolver.childOfResponseDefinition(psiElement);
  }"
6800,completeResponseRefValue,"  public boolean completeResponseRefValue() {
    return pathResolver.isResponseRefValue(psiElement);
  }"
6801,completeInValue,"  public boolean completeInValue() {
    return pathResolver.isInValue(psiElement);
  }"
6802,completeFormatValue,"  public boolean completeFormatValue() {
    return pathResolver.isFormatValue(psiElement);
  }"
6803,completeTypeValue,"  public boolean completeTypeValue() {
    return pathResolver.isTypeValue(psiElement);
  }"
6804,completeBooleanValue,"  public boolean completeBooleanValue() {
    return pathResolver.isBooleanValue(psiElement);
  }"
6805,completeParameterRefValue,"  public boolean completeParameterRefValue() {
    return pathResolver.isParameterRefValue(psiElement);
  }"
6806,completeDefinitionRefValue,"  public boolean completeDefinitionRefValue() {
    return pathResolver.isDefinitionRefValue(psiElement);
  }"
6807,completeSchemesValue,"  public boolean completeSchemesValue() {
    return pathResolver.isSchemesValue(psiElement);
  }"
6808,completeMimeValue,"  public boolean completeMimeValue() {
    return pathResolver.isMimeValue(psiElement);
  }"
6809,completeParameterDefinitionKey,"  public boolean completeParameterDefinitionKey() {
    return pathResolver.childOfParameterDefinition(psiElement);
  }"
6810,completeDefinitionsKey,"  public boolean completeDefinitionsKey() {
    return pathResolver.childOfDefinitions(psiElement);
  }"
6811,completeXmlKey,"  public boolean completeXmlKey() {
    return pathResolver.childOfXml(psiElement);
  }"
6812,completeAdditionalPropertiesKey,"  public boolean completeAdditionalPropertiesKey() {
    return pathResolver.childOfAdditionalProperties(psiElement);
  }"
6813,completePropertiesSchemaKey,"  public boolean completePropertiesSchemaKey() {
    return pathResolver.childOfPropertiesSchema(psiElement);
  }"
6814,completeSchemaItemsKey,"  public boolean completeSchemaItemsKey() {
    return pathResolver.childOfSchemaItems(psiElement);
  }"
6815,completeSchemaKey,"  public boolean completeSchemaKey() {
    return pathResolver.childOfSchema(psiElement);
  }"
6816,completeSecurityDefinitionKey,"  public boolean completeSecurityDefinitionKey() {
    return pathResolver.childOfSecurityDefinition(psiElement);
  }"
6817,completeTagKey,"  public boolean completeTagKey() {
    return pathResolver.childOfTag(psiElement);
  }"
6818,completeHeadersKey,"  public boolean completeHeadersKey() {
    return pathResolver.childOfHeaders(psiElement);
  }"
6819,completeHeaderKey,"  public boolean completeHeaderKey() {
    return pathResolver.childOfHeader(psiElement);
  }"
6820,completeResponseKey,"  public boolean completeResponseKey() {
    return pathResolver.childOfResponse(psiElement);
  }"
6821,completeResponsesKey,"  public boolean completeResponsesKey() {
    return pathResolver.childOfResponses(psiElement);
  }"
6822,completeParameterItemsKey,"  public boolean completeParameterItemsKey() {
    return pathResolver.childOfParameterItems(psiElement);
  }"
6823,completeParametersKey,"  public boolean completeParametersKey() {
    return pathResolver.childOfParameters(psiElement);
  }"
6824,completeExternalDocsKey,"  public boolean completeExternalDocsKey() {
    return pathResolver.childOfExternalDocs(psiElement);
  }"
6825,completeOperationKey,"  public boolean completeOperationKey() {
    return pathResolver.childOfOperation(psiElement);
  }"
6826,completePathKey,"  public boolean completePathKey() {
    return pathResolver.childOfPath(psiElement);
  }"
6827,completeLicenseKey,"  public boolean completeLicenseKey() {
    return pathResolver.childOfLicense(psiElement);
  }"
6828,completeContactKey,"  public boolean completeContactKey() {
    return pathResolver.childOfContact(psiElement);
  }"
6829,completeInfoKey,"  public boolean completeInfoKey() {
    return pathResolver.childOfInfo(psiElement);
  }"
6830,completeRootKey,"  public boolean completeRootKey() {
    return pathResolver.childOfRoot(psiElement);
  }"
6831,completeDiscriminatorKey,"  public boolean completeDiscriminatorKey() {
    return pathResolver.childOfDiscriminator(psiElement);
  }"
6832,completeContentKey,"  public boolean completeContentKey() {
    return pathResolver.childOfContent(psiElement);
  }"
6833,completeSecuritySchemeKey,"  public boolean completeSecuritySchemeKey() {
    return pathResolver.childOfSecurityScheme(psiElement);
  }"
6834,completeCallbackKey,"  public boolean completeCallbackKey() {
    return pathResolver.childOfCallback(psiElement);
  }"
6835,completeLinkKey,"  public boolean completeLinkKey() {
    return pathResolver.childOfLink(psiElement);
  }"
6836,completeEncodingKey,"  public boolean completeEncodingKey() {
    return pathResolver.childOfEncoding(psiElement);
  }"
6837,completeExampleKey,"  public boolean completeExampleKey() {
    return pathResolver.childOfExample(psiElement);
  }"
6838,completeMediaTypeKey,"  public boolean completeMediaTypeKey() {
    return pathResolver.childOfMediaType(psiElement);
  }"
6839,completeRequestBodyKey,"  public boolean completeRequestBodyKey() {
    return pathResolver.childOfRequestBody(psiElement);
  }"
6840,completeComponentKey,"  public boolean completeComponentKey() {
    return pathResolver.childOfComponent(psiElement);
  }"
6841,completeServerVariableKey,"  public boolean completeServerVariableKey() {
    return pathResolver.childOfServerVariable(psiElement);
  }"
6842,completeServerKey,"  public boolean completeServerKey() {
    return pathResolver.childOfServer(psiElement);
  }"
6845,completeStyleValue,"  public boolean completeStyleValue() {
    return pathResolver.isStyleValue(psiElement);
  }"
6849,completeMappingRefValue,"  public boolean completeMappingRefValue() {
    return pathResolver.isMappingRefValue(psiElement);
  }"
6850,completeCallbackRefValue,"  public boolean completeCallbackRefValue() {
    return pathResolver.isCallbackRefValue(psiElement);
  }"
6851,completeLinkRefValue,"  public boolean completeLinkRefValue() {
    return pathResolver.isLinkRefValue(psiElement);
  }"
6852,completeHeaderRefValue,"  public boolean completeHeaderRefValue() {
    return pathResolver.isHeaderRefValue(psiElement);
  }"
6853,completeRequestBodyRefValue,"  public boolean completeRequestBodyRefValue() {
    return pathResolver.isRequestBodyRefValue(psiElement);
  }"
6854,completeExampleRefValue,"  public boolean completeExampleRefValue() {
    return pathResolver.isExampleRefValue(psiElement);
  }"
6856,completeSchemaRefValue,"  public boolean completeSchemaRefValue() {
    return pathResolver.isSchemaRefValue(psiElement);
  }"
6873,isUniqueArrayStringValue,"  public boolean isUniqueArrayStringValue(final String keyName) {
    return traversal.isUniqueArrayStringValue(keyName, psiElement);
  }"
6878,extractSecurityNameFromSecurityObject,"  public Optional<String> extractSecurityNameFromSecurityObject(final PsiElement psiElement) {
    return traversal.extractSecurityNameFromSecurityItem(psiElement);
  }"
6879,createInsertValueHandler,"  public InsertHandler<LookupElement> createInsertValueHandler(final Value value) {
    return traversal.createInsertValueHandler(value);
  }"
6880,createInsertFieldHandler,"  public InsertHandler<LookupElement> createInsertFieldHandler(final Field field) {
    return traversal.createInsertFieldHandler(field);
  }"
6881,isUniqueKey,"  public boolean isUniqueKey(final String keyName) {
    List<? extends PsiNamedElement> children =
        new PathFinder().findDirectNamedChildren(""parent"", psiElement);
"
6882,hasPath,"  public boolean hasPath(final String pathExpression) {
    return new PathFinder().isInsidePath(psiElement, pathExpression);
  }"
6885,onClick,"                        public void onClick(DialogInterface dialog, int which) {
                            dialog.cancel();
                            rationale.cancel();
                        }"
6886,onClick,"                        public void onClick(DialogInterface dialog, int which) {
                            dialog.cancel();
                            rationale.resume();
                        }"
6890,delOnClickListener,"            public void delOnClickListener(int position, int remainNum) {
                Toast.makeText(OnePickerActivity.this, ""delOnClickListenerremainNum"" + remainNum, Toast.LENGTH_SHORT).show();
            }"
6891,picOnClickListener,"            public void picOnClickListener(List<ImageShowPickerBean> list, int position, int remainNum) {
                Toast.makeText(OnePickerActivity.this, list.size() + ""========"" + position + ""remainNum"" + remainNum, Toast.LENGTH_SHORT).show();
            }"
6892,addOnClickListener,"            public void addOnClickListener(int remainNum) {
                Matisse.from(OnePickerActivity.this)
                        .choose(MimeType.allOf())
                        .countable(true)"
6894,delOnClickListener,"            public void delOnClickListener(int position, int remainNum) {
                list.remove(position);
                Toast.makeText(context, ""delOnClickListenerremainNum"" + remainNum, Toast.LENGTH_SHORT).show();
            }"
6895,picOnClickListener,"            public void picOnClickListener(List<ImageShowPickerBean> list, int position, int remainNum) {
                Toast.makeText(context, list.size() + ""========"" + position + ""remainNum"" + remainNum, Toast.LENGTH_SHORT).show();
            }"
6902,displayImage,"    public void displayImage(Context context, @DrawableRes Integer resId, ImageView imageView) {
        imageView.setImageResource(resId);
    }"
6903,displayImage,"    public void displayImage(Context context, String path, ImageView imageView) {
        Glide.with(context).load(path).into(imageView);
"
6906,onClick,"            public void onClick(View v) {
                Intent intent = new Intent(HomeActivity.this,MainActivity.class);
                startActivity(intent);
            }"
6907,onClick,"            public void onClick(View v) {
                Intent intent = new Intent(HomeActivity.this,OnePickerActivity.class);
                startActivity(intent);
            }"
6912,compareTo,"        public int compareTo(Cell o) {
            return this.lexeme.compareTo(o.lexeme);
        }"
6914,isEmpty,"    boolean isEmpty() {
        return this.size == 0;
    }"
6915,size,"    int size() {
        return this.size;
    }"
6916,pollLast,"    Lexeme pollLast() {
        if (this.size == 1) {
            Lexeme last = this.head.lexeme;"
6917,peekLast,"    Lexeme peekLast() {
        if (this.tail != null) {
            return this.tail.lexeme;
        }"
6918,pollFirst,"    Lexeme pollFirst() {
        if (this.size == 1) {
            Lexeme first = this.head.lexeme;"
6919,peekFirst,"    Lexeme peekFirst() {
        if (this.head != null) {
            return this.head.lexeme;
        }"
6920,addLexeme,"    void addLexeme(Lexeme lexeme) {
        Cell newCell = new Cell(lexeme);
        if (this.size == 0) {
            this.head = newCell;"
6930,checkCross,"    boolean checkCross(Lexeme lexeme) {
        return (lexeme.getBegin() >= this.pathBegin && lexeme.getBegin() < this.pathEnd)
                || (this.pathBegin >= lexeme.getBegin() && this.pathBegin < lexeme.getBegin() + lexeme.getLength());"
6931,removeTail,"    void removeTail() {
        Lexeme tail = this.pollLast();
        if (this.isEmpty()) {
            this.pathBegin = -1;"
6932,addNotCrossLexeme,"    boolean addNotCrossLexeme(Lexeme lexeme) {
        if (this.isEmpty()) {
            this.addLexeme(lexeme);"
6933,addCrossLexeme,"    boolean addCrossLexeme(Lexeme lexeme) {
        if (this.isEmpty()) {
            this.addLexeme(lexeme);"
6934,toString,"    public String toString() {
        return this.getBeginPosition() + ""-"" + this.getEndPosition() +
                "" : "" + this.lexemeText + "" : \t"" +"
6950,hashCode,"    public int hashCode() {
        int absBegin = getBeginPosition();
        int absEnd = getEndPosition();
        return (absBegin * 37) + (absEnd * 31) + ((absBegin * absEnd) % getLength()) * 11;
    }"
6951,equals,"    public boolean equals(Object o) {
        if (o == null) {
            return false;
        }
"
6952,isNumConnector,"    private boolean isNumConnector(char input) {
        int index = Arrays.binarySearch(Num_Connector, input);
        return index >= 0;
    }"
6953,isLetterConnector,"    private boolean isLetterConnector(char input) {
        int index = Arrays.binarySearch(Letter_Connector, input);
        return index >= 0;
    }"
6957,reset,"    public void reset() {
        this.start = -1;
        this.end = -1;
        this.englishStart = -1;
        this.englishEnd = -1;
        this.arabicStart = -1;
        this.arabicEnd = -1;
    }"
6961,reset,"    public synchronized void reset(Reader input) {
        this.input = input;
        context.reset();
        for (ISegmenter segmenter : segmenters) {
            segmenter.reset();"
6965,backPath,"    private void backPath(Lexeme l, LexemePath option) {
        while (option.checkCross(l)) {
            option.removeTail();"
6968,process,"    void process(AnalyzeContext context, boolean useSmart) {
        QuickSortSet orgLexemes = context.getOrgLexemes();
        Lexeme orgLexeme = orgLexemes.pollFirst();

        LexemePath crossPath = new LexemePath();
        while (orgLexeme != null) {
            if (!crossPath.addCrossLexeme(orgLexeme)) {"
6973,reset,"    public void reset() {
        nStart = -1;
        nEnd = -1;
        countHits.clear();
    }"
6977,regularize,"    static char regularize(char input) {
        if (input == 12288) {
            input = (char) 32;
"
6978,identifyCharType,"    static int identifyCharType(char input) {
        if (input >= '0' && input <= '9') {
            return CHAR_ARABIC;
"
6979,compound,"    private void compound(Lexeme result) {
        if (!this.cfg.useSmart()) {
            return;
        }"
6980,reset,"    void reset() {
        this.buffLocker.clear();
        this.orgLexemes = new QuickSortSet();
        this.available = 0;
        this.buffOffset = 0;
        this.charTypes = new int[BUFF_SIZE];
        this.cursor = 0;
        this.results.clear();
        this.segmentBuff = new char[BUFF_SIZE];
        this.pathMap.clear();
    }"
6982,outputSingleCJK,"    private void outputSingleCJK(int index) {
        if (CharacterUtil.CHAR_CHINESE == this.charTypes[index]) {
            Lexeme singleCharLexeme = new Lexeme(this.buffOffset, index, 1, Lexeme.TYPE_CNCHAR);"
6985,addLexemePath,"    void addLexemePath(LexemePath path) {
        if (path != null) {
            this.pathMap.put(path.getPathBegin(), path);"
6986,addLexeme,"    void addLexeme(Lexeme lexeme) {
        this.orgLexemes.addLexeme(lexeme);
    }"
6987,markBufferOffset,"    void markBufferOffset() {
        this.buffOffset += this.cursor;
    }"
6988,needRefillBuffer,"    boolean needRefillBuffer() {
        return this.available == BUFF_SIZE
                && this.cursor < this.available - 1"
6989,isBufferConsumed,"    boolean isBufferConsumed() {
        return this.cursor == this.available - 1;
    }"
6990,isBufferLocked,"    private boolean isBufferLocked() {
        return this.buffLocker.size() > 0;
    }"
6991,unlockBuffer,"    void unlockBuffer(String segmenterName) {
        this.buffLocker.remove(segmenterName);
    }"
6992,lockBuffer,"    void lockBuffer(String segmenterName) {
        this.buffLocker.add(segmenterName);
    }"
6993,moveCursor,"    boolean moveCursor() {
        if (this.cursor < this.available - 1) {
            this.cursor++;"
6994,initCursor,"    void initCursor() {
        this.cursor = 0;
        this.segmentBuff[this.cursor] = CharacterUtil.regularize(this.segmentBuff[this.cursor]);
        this.charTypes[this.cursor] = CharacterUtil.identifyCharType(this.segmentBuff[this.cursor]);
    }"
7001,nextElementWithin,"    public static boolean nextElementWithin(XmlPullParser parser, int outerDepth)
            throws IOException, XmlPullParserException {
        for (;;) {"
7002,nextElement,"    public static final void nextElement(XmlPullParser parser) throws XmlPullParserException, IOException
    {
        int type;
        while ((type=parser.next()) != parser.START_TAG"
7003,beginDocument,"    public static final void beginDocument(XmlPullParser parser, String firstElementName) throws XmlPullParserException, IOException
    {
        int type;
        while ((type=parser.next()) != parser.START_TAG
                && type != parser.END_DOCUMENT) {
            ;"
7005,readValueXml,"    public static final Object readValueXml(XmlPullParser parser, String[] name)
            throws XmlPullParserException, java.io.IOException
    {
        int eventType = parser.getEventType();
        do {"
7007,readThisSetXml,"    public static final HashSet readThisSetXml(XmlPullParser parser, String endTag, String[] name)
            throws XmlPullParserException, java.io.IOException {
        HashSet set = new HashSet();

        int eventType = parser.getEventType();
        do {"
7008,readThisListXml,"    public static final ArrayList readThisListXml(XmlPullParser parser, String endTag, String[] name)
            throws XmlPullParserException, java.io.IOException
    {
        ArrayList list = new ArrayList();
        int eventType = parser.getEventType();
        do {"
7009,readThisMapXml,"    public static final HashMap readThisMapXml(XmlPullParser parser, String endTag, String[] name)
            throws XmlPullParserException, java.io.IOException
    {
        HashMap map = new HashMap();
        int eventType = parser.getEventType();
        do {"
7010,readSetXml,"    public static final HashSet readSetXml(InputStream in)
            throws XmlPullParserException, java.io.IOException {
        XmlPullParser parser = Xml.newPullParser();
        parser.setInput(in, null);
        return (HashSet) readValueXml(parser, new String[1]);"
7011,readListXml,"    public static final ArrayList readListXml(InputStream in)
            throws XmlPullParserException, java.io.IOException
    {
        XmlPullParser   parser = Xml.newPullParser();
        parser.setInput(in, null);"
7012,readMapXml,"    public static final HashMap readMapXml(InputStream in)
            throws XmlPullParserException, java.io.IOException
    {
        XmlPullParser   parser = Xml.newPullParser();
        parser.setInput(in, null);"
7013,writeValueXml,"    public static final void writeValueXml(Object v, String name, XmlSerializer out)
            throws XmlPullParserException, java.io.IOException
    {
        String typeStr;
        if (v == null) {
            out.startTag(null, ""null"");
            if (name != null) {
                out.attribute(null, ""name"", name);"
7016,writeSetXml,"    public static final void writeSetXml(Set val, String name, XmlSerializer out)
            throws XmlPullParserException, java.io.IOException {
        if (val == null) {
            out.startTag(null, ""null"");
            out.endTag(null, ""null"");
            return;
        }"
7017,writeListXml,"    public static final void writeListXml(List val, String name, XmlSerializer out)
            throws XmlPullParserException, java.io.IOException
    {
        if (val == null) {
            out.startTag(null, ""null"");
            out.endTag(null, ""null"");
            return;
        }
        out.startTag(null, ""list"");"
7018,writeMapXml,"    public static final void writeMapXml(Map val, String name, XmlSerializer out)
            throws XmlPullParserException, java.io.IOException
    {
        if (val == null) {
            out.startTag(null, ""null"");
            out.endTag(null, ""null"");
            return;
        }
        Set s = val.entrySet();"
7021,parseUnsignedIntAttribute,"    public static final int
    parseUnsignedIntAttribute(CharSequence charSeq)
    {
        String  value = charSeq.toString();
        long    bits;
        int     index = 0;
        int     len = value.length();
        int     base = 10;
        if ('0' == value.charAt(index)) {"
7022,convertValueToUnsignedInt,"    public static final int
    convertValueToUnsignedInt(String value, int defaultValue)
    {
        if (null == value)"
7024,convertValueToBoolean,"    public static final boolean
    convertValueToBoolean(CharSequence value, boolean defaultValue)
    {
        boolean result = false;
        if (null == value)
            return defaultValue;"
7025,convertValueToList,"    public static final int
    convertValueToList(CharSequence value, String[] options, int defaultValue)
    {
        if (null != value) {"
7026,skipCurrentTag,"    public static void skipCurrentTag(XmlPullParser parser)
            throws XmlPullParserException, IOException {
        int outerDepth = parser.getDepth();
        int type;
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT"
7029,skippedEntity,"    public void skippedEntity(String name) throws SAXException {
    }"
7030,processingInstruction,"    public void processingInstruction(String target, String data) throws SAXException {
    }"
7031,ignorableWhitespace,"    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {
    }"
7032,characters,"    public void characters(char ch[], int start, int length) throws SAXException {
        StringBuilder sb = new StringBuilder();
        /*
         * Ignore whitespace that immediately follows other whitespace;
         * newlines count as spaces."
7033,endElement,"    public void endElement(String uri, String localName, String qName) throws SAXException {
        handleEndTag(localName);
    }"
7034,startElement,"    public void startElement(String uri, String localName, String qName, Attributes attributes)
            throws SAXException {
        handleStartTag(localName, attributes);"
7035,endPrefixMapping,"    public void endPrefixMapping(String prefix) throws SAXException {
    }"
7036,startPrefixMapping,"    public void startPrefixMapping(String prefix, String uri) throws SAXException {
    }"
7037,endDocument,"    public void endDocument() throws SAXException {
    }"
7038,startDocument,"    public void startDocument() throws SAXException {
    }"
7041,endA,"    private void endA(String tag, Editable text) {
        Href h = getLast(text, Href.class);
        if (h != null) {
            if (h.mHref != null) {"
7042,startA,"    private void startA(Editable text, Attributes attributes) {
        String href = attributes.getValue("""", ""href"");
        start(text, new Href(href));
    }"
7043,endFont,"    private void endFont(String tag, Editable text) {
        Font font = getLast(text, Font.class);
        if (font != null) {
            setSpanFromMark(tag, text, font, new TypefaceSpan(font.mFace));
        }
        Foreground foreground = getLast(text, Foreground.class);"
7044,startFont,"    private void startFont(Editable text, Attributes attributes) {
        String color = attributes.getValue("""", ""color"");
        String face = attributes.getValue("""", ""face"");
        if (!TextUtils.isEmpty(color)) {
            int c = getHtmlColor(color);
            if (c != -1) {"
7047,startCssStyle,"    private void startCssStyle(Editable text, Attributes attributes) {
        String style = attributes.getValue("""", ""style"");
        if (style != null) {
            Matcher m = getForegroundColorPattern().matcher(style);"
7048,end,"    private void end(String tag, Editable text, Class kind, Object repl) {
        Object obj = getLast(text, kind);
        if (obj != null) {
            setSpanFromMark(tag, text, obj, repl);"
7049,start,"    private void start(Editable text, Object mark) {
        int len = text.length();
        text.setSpan(mark, len, len, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
    }"
7053,startHeading,"    private void startHeading(Editable text, Attributes attributes, int level) {
        startBlockElement(text, attributes, getMarginHeading());
        start(text, new Heading(level));
    }"
7054,endBlockquote,"    private void endBlockquote(String tag, Editable text) {
        endBlockElement(tag, text);
        end(tag, text, Blockquote.class, new QuoteSpan());
    }"
7055,startBlockquote,"    private void startBlockquote(Editable text, Attributes attributes) {
        startBlockElement(text, attributes, getMarginBlockquote());
        start(text, new Blockquote());
    }"
7056,endLi,"    private void endLi(String tag, Editable text) {
        endCssStyle(tag, text);
        endBlockElement(tag, text);
        end(tag, text, Bullet.class, new BulletSpan());
    }"
7057,startLi,"    private void startLi(Editable text, Attributes attributes) {
        startBlockElement(text, attributes, getMarginListItem());
        start(text, new Bullet());
        startCssStyle(text, attributes);
    }"
7058,handleBr,"    private void handleBr(Editable text) {
        text.append('\n');
    }"
7059,endBlockElement,"    private void endBlockElement(String tag, Editable text) {
        Newline n = getLast(text, Newline.class);
        if (n != null) {
            appendNewlines(text, n.mNumNewlines);
            text.removeSpan(n);
        }"
7060,startBlockElement,"    private void startBlockElement(Editable text, Attributes attributes, int margin) {
        if (margin > 0) {
            appendNewlines(text, margin);
            start(text, new Newline(margin));
        }"
7061,appendNewlines,"    private void appendNewlines(Editable text, int minNewline) {
        final int len = text.length();
        if (len == 0) {
            return;
        }
        int existingNewlines = 0;
        for (int i = len - 1; i >= 0 && text.charAt(i) == '\n'; i--) {"
7069,handleEndTag,"    private void handleEndTag(String tag) {
        if (tag.equalsIgnoreCase(""br"")) {
            handleBr(mSpannableStringBuilder);"
7077,withinStyle,"    private static void withinStyle(StringBuilder out, CharSequence text,
                                    int start, int end) {
        for (int i = start; i < end; i++) {"
7078,withinParagraph,"    private static void withinParagraph(Context context, StringBuilder out, Spanned text, int start, int end) {
        int next;
        for (int i = start; i < end; i = next) {
            next = text.nextSpanTransition(i, end, CharacterStyle.class);"
7080,withinBlockquoteIndividual,"    private static void withinBlockquoteIndividual(Context context, StringBuilder out, Spanned text,
                                                   int start, int end) {
        boolean isInList = false;
        int next;
        for (int i = start; i <= end; i = next) {"
7081,withinBlockquote,"    private static void withinBlockquote(Context context, StringBuilder out, Spanned text,
                                         int start, int end, int option) {
        if ((option & TO_HTML_PARAGRAPH_FLAG) == TO_HTML_PARAGRAPH_LINES_CONSECUTIVE) {"
7084,withinDiv,"    private static void withinDiv(Context context, StringBuilder out, Spanned text,
                                  int start, int end, int option) {
        int next;
        for (int i = start; i < end; i = next) {"
7085,encodeTextAlignmentByDiv,"    private static void encodeTextAlignmentByDiv(Context context, StringBuilder out, Spanned text, int option) {
        int len = text.length();
        int next;
        for (int i = 0; i < len; i = next) {
            next = text.nextSpanTransition(i, len, ParagraphStyle.class);"
7086,withinHtml,"    private static void withinHtml(Context context, StringBuilder out, Spanned text, int option) {
        if ((option & TO_HTML_PARAGRAPH_FLAG) == TO_HTML_PARAGRAPH_LINES_CONSECUTIVE) {
            encodeTextAlignmentByDiv(context, out, text, option);
            return;"
7087,escapeHtml,"    public static String escapeHtml(CharSequence text) {
        StringBuilder out = new StringBuilder();
        withinStyle(out, text, 0, text.length());
        return out.toString();
    }"
7088,toHtml,"    public static String toHtml(Context context, Spanned text, int option) {
        StringBuilder out = new StringBuilder();
        withinHtml(context, out, text, option);
        return out.toString();
    }"
7090,fromHtml,"    public static Spanned fromHtml(@NonNull Context context, @NonNull String source, int flags,
                                   @Nullable ImageGetter imageGetter, @Nullable TagHandler tagHandler) {
        return fromHtml(context, source, flags, imageGetter, tagHandler, null);"
7091,fromHtml,"    public static Spanned fromHtml(@NonNull Context context, @NonNull String source, int flags,
                                   @Nullable ImageGetter imageGetter) {
        return fromHtml(context, source, flags, imageGetter, null, null);"
7092,fromHtml,"    public static Spanned fromHtml(@NonNull Context context, @NonNull String source, int flags) {
        return fromHtml(context, source, flags, null, null);
    }"
7093,onClick,"        public void onClick(View widget) {
            try {
                super.onClick(widget);"
7094,onSpanCreated,"        Object onSpanCreated(String tag, Object span);
    }"
7095,handleTag,"        void handleTag(boolean opening, String tag,
                       Attributes attributes, Editable output, XMLReader xmlReader);"
7096,getDrawable,"        Drawable getDrawable(String source, Attributes attributes);
    }"
7101,layoutDependsOn,"    public boolean layoutDependsOn(CoordinatorLayout parent, FloatingActionButton fab, View dependency) {
        return super.layoutDependsOn(parent, fab, dependency) || (dependency instanceof AppBarLayout);
    }"
7103,setupBucket,"    protected CardinalityBucket setupBucket(final long timestamp) {
        return new HyperLogLogCardinalityBucket(42, true, 0.01D);
    }"
7104,allowedError,"    protected double allowedError() {
        return 0.9D;
    }"
7105,setupBucket,"    protected CardinalityBucket setupBucket(final long timestamp) {
        return new ExactCardinalityBucket(timestamp, true);
    }"
7106,allowedError,"    protected double allowedError() {
        return 0D;
    }"
7107,assertWithinVariance,"    private void assertWithinVariance(final long expected, final long count) {
        final double allowedError = allowedError();
        final double error = Math.abs(((double) expected / (double) count) - 1.0D);

        assertTrue(String.format(""Error (%f) not within (%f)"", error, allowedError),"
7108,strainTest,"    public void strainTest() {
        final CardinalityBucket bucket = setupBucket(42);

        for (int i = 0; i < 100000; i++) {
            bucket.update(t1, new Point(42, 1D * i));"
7109,basicTest,"    public void basicTest() {
        final CardinalityBucket bucket = setupBucket(42);
        bucket.update(t1, new Point(42, 1D));
        bucket.update(t1, new Point(42, 1D));
        bucket.update(t1, new Point(42, 2D));
        bucket.update(t2, new Point(42, 1D));

        assertWithinVariance(3L, bucket.count());"
7110,allowedError,"    protected double allowedError() {
        return 0.01D;
    }"
7111,setupBucket,"    protected abstract CardinalityBucket setupBucket(long timestamp);
"
7114,validateDots,"    private boolean validateDots(String name, boolean allowDirs, boolean isDir) {
        if (name.charAt(0) == '.') {
            return false;
        }
        if (!allowDirs && isDir) {
            return false;
        }
        int prevDotIndex = -1;
        int dotIndex = -1;
        int dotCount = 0;"
7115,validate,"    public boolean validate(String name, boolean allowDirs) {
        boolean isDir = MetricUtil.isDir(name);
        if ((!isDir && name.length() < minMetricLength) || name.length() > maxMetricLength) {
            return false;
        }
        if (!validateDots(name, allowDirs, isDir)) {"
7116,createStartWithDirectoryPattern,"    public static Pattern createStartWithDirectoryPattern(String[] directories) {
        String directoriesPattern = Arrays.stream(directories)
            .map(Pattern::quote)
            .collect(Collectors.joining(""|""));"
7120,splitToLevels,"    public static String[] splitToLevels(String metric) {
        return metric.split(""\\."");
    }"
7121,isDir,"    public static boolean isDir(String metric) {
        return metric.charAt(metric.length() - 1) == LEVEL_SPLITTER;
    }"
7135,needCheckInDb,"        private boolean needCheckInDb() {
            return lastCheckCounter > stepSize;
        }"
7136,addToCheck,"        private void addToCheck(String metric) {
            if (lastCheckCounter == 0) {
                minMetric = metric;
                maxMetric = metric;"
7137,reset,"        private void reset() {
            minMetric = null;
            maxMetric = null;
            lastCheckCounter = 0;
        }"
7138,hideMetricsBetween,"    private int hideMetricsBetween(String minMetric, String maxMetric) {
        if (minMetric == null || maxMetric == null) {
            return 0;
        }
"
7140,hide,"    private void hide() {
        log.info(""Running autohide."");
        try {
            MetricMinMaxChecker metricMinMaxChecker = new MetricMinMaxChecker();"
7141,run,"    public void run() {
        if (metricSearch.isMetricTreeLoaded()) {
            hide();"
7142,startService,"    public void startService() throws Exception {
        if (!enabled) {
            log.info(""Autohide disabled"");
            return;
        }"
7148,main,"    public static void main(String[] args) {
        System.out.println(StringUtils.capitalize(""hello""));
    }"
7149,delete,"    public void delete(ToDoItem toDoItem) {
        toDos.remove(toDoItem.getId());
    }"
7150,update,"    public void update(ToDoItem toDoItem) {
        toDos.replace(toDoItem.getId(), toDoItem);
    }"
7151,insert,"    public Long insert(ToDoItem toDoItem) {
        Long id = currentId.incrementAndGet();
        toDoItem.setId(id);
        toDos.putIfAbsent(id, toDoItem);
        return id;
    }"
7152,findById,"    public ToDoItem findById(Long id) {
        return toDos.get(id);
    }"
7153,findAll,"    public List<ToDoItem> findAll() {
        List<ToDoItem> toDoItems = new ArrayList<ToDoItem>(toDos.values());
        Collections.sort(toDoItems);
        return toDoItems;
    }"
7154,handleUnknownInput,"    private void handleUnknownInput() {
        System.out.println(""Please select a valid option!"");
    }"
7155,deleteToDoItem,"    private void deleteToDoItem() {
        ToDoItem toDoItem = findToDoItem();

        if (toDoItem != null) {"
7156,updateToDoItem,"    private void updateToDoItem() {
        ToDoItem toDoItem = findToDoItem();

        if (toDoItem != null) {"
7157,insertToDoItem,"    private void insertToDoItem() {
        ToDoItem toDoItem = askForNewToDoAction();
        Long id = toDoRepository.insert(toDoItem);
        System.out.println(""Successfully inserted to do item with ID "" + id + ""."");
    }"
7158,findToDoItem,"    private ToDoItem findToDoItem() {
        Long id = askForItemId();
        ToDoItem toDoItem = toDoRepository.findById(id);

        if (toDoItem == null) {
            System.err.println(""To do item with ID "" + id + "" could not be found."");"
7159,printToDoItem,"    private void printToDoItem() {
        ToDoItem toDoItem = findToDoItem();

        if (toDoItem != null) {"
7160,printAllToDoItems,"    private void printAllToDoItems() {
        Collection<ToDoItem> toDoItems = toDoRepository.findAll();

        if (toDoItems.isEmpty()) {"
7161,askForNewToDoAction,"    private ToDoItem askForNewToDoAction() {
        ToDoItem toDoItem = new ToDoItem();
        System.out.println(""Please enter the name of the item:"");
        toDoItem.setName(readInput());
        return toDoItem;
    }"
7162,askForItemId,"    private Long askForItemId() {
        System.out.println(""Please enter the item ID:"");
        String input = readInput();
        return Long.parseLong(input);
    }"
7163,processInput,"    public void processInput(CommandLineInput input) {
        if (input == null) {
            handleUnknownInput();"
7164,readInput,"    public String readInput() {
        return System.console().readLine(""> "");
    }"
7168,accept,"                                public void accept(String it) {
                                    GMApplication.getInstance().getDatabase().movieDao().deleteFuture();
                                }"
7169,accept,"                                public void accept(List<MovieEntity> list) {
                                    for (int i = 0, size = list.size(); i < size; i++) {
                                        list.get(i).setRank(i);
                                    }"
7170,saveRemoteResult,"            protected void saveRemoteResult(List<MovieEntity> data) {
                if (data != null && !data.isEmpty()) {
                    Observable.just(data)"
7171,requestApi,"            protected LiveData<ApiResponse<List<MovieEntity>>> requestApi() {
                MovieService service = new ApiClient().createApi(MovieService.class);
                ApiResponse<List<MovieEntity>> response = new ApiResponse<>();
                return response.map(service.movieFutureListGet(cityId));
            }"
7172,loadFromLocal,"            protected LiveData<List<MovieEntity>> loadFromLocal() {
                return GMApplication.getInstance().getDatabase().movieDao().loadMovieFutureList();
            }"
7174,accept,"                                public void accept(String it) {
                                    GMApplication.getInstance().getDatabase().movieDao().deleteNow();
                                }"
7175,accept,"                                public void accept(List<MovieEntity> list) {
                                    for (int i = 0, size = list.size(); i < size; i++) {
                                        list.get(i).setRank(i);
                                        list.get(i).setNow(true);"
7177,requestApi,"            protected LiveData<ApiResponse<List<MovieEntity>>> requestApi() {
                MovieService service = new ApiClient().createApi(MovieService.class);
                ApiResponse<List<MovieEntity>> response = new ApiResponse<>();
                return response.map(service.movieNowListGet(cityId));
            }"
7178,loadFromLocal,"            protected LiveData<List<MovieEntity>> loadFromLocal() {
                return GMApplication.getInstance().getDatabase().movieDao().loadMovieNowList();
            }"
7186,accept,"                    public void accept(String it) {
                        GMApplication.getInstance().getDatabase().cityDao().updateCity(city);
                    }"
7187,updateCity,"    public void updateCity(CityEntity city) {
        mCity.postValue(city);

        Observable.just("""")"
7189,accept,"                                public void accept(String it) {
                                    GMApplication.getInstance().getDatabase().boxOfficeDao().delete();
                                }"
7190,accept,"                                public void accept(List<BoxOfficeEntity> list) {
                                    GMApplication.getInstance().getDatabase().boxOfficeDao().update(list);
                                }"
7191,saveRemoteResult,"            protected void saveRemoteResult(List<BoxOfficeEntity> data) {
                if (data != null && !data.isEmpty()) {
                    Observable.just(data)"
7193,loadFromLocal,"            protected LiveData<List<BoxOfficeEntity>> loadFromLocal() {
                return GMApplication.getInstance().getDatabase().boxOfficeDao().loadBoxOfficeList();
            }"
7194,ifFetchNetworkFailedThenLoadLocalData,"            protected boolean ifFetchNetworkFailedThenLoadLocalData() {
                return true;
            }"
7196,isDebugEnable,"  @Override protected boolean isDebugEnable() {
    return false;
  }"
7199,isActionBarBlurred,"  @Override protected boolean isActionBarBlurred() {
    return mBlurredActionBar;
  }"
7200,isDimmingEnable,"  @Override protected boolean isDimmingEnable() {
    return mDimming;
  }"
7207,getmGifImageView,"  public GifImageView getmGifImageView() {
    return mGifImageView;
  }"
7210,show,"  public void show(FragmentManager fragmentManager){
    show(fragmentManager,"""");
  }"
7211,onDismiss,"  @Override public void onDismiss(DialogInterface dialog) {
    super.onDismiss(dialog);
    mDialog = null;
  }"
7213,onCreateDialog,"  @Override public Dialog onCreateDialog(Bundle savedInstanceState) {
    if (mDialog == null) {
      mDialog = new Dialog(getActivity(), R.style.gif_dialog);
      mDialog.setContentView(R.layout.gifloading_main);"
7216,isNetworkAvailable,"    public static boolean isNetworkAvailable(Context context) {
       if(context !=null){
           ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
           NetworkInfo info = cm.getActiveNetworkInfo();"
7217,px2dip,"    public int px2dip(int i) {
        float f = getDensity(context);
        return (int) (((double) i - 0.5D) / (double) f);
    }"
7218,px2dip,"    public int px2dip(float f) {
        float f1 = getDensity(context);
        return (int) (((double) f - 0.5D) / (double) f1);
    }"
7226,get480Height,"    public int get480Height(int i) {
        return (i * getScreenWidth()) / 480;
    }"
7227,dip2px,"    public int dip2px(int i) {
        return (int) (0.5D + (double) (getDensity(context) * (float) i));
    }"
7228,dip2px,"    public int dip2px(float f) {
        return (int) (0.5D + (double) (f * getDensity(context)));
    }"
7229,instance,"    public static ScreenUtil instance(Context context) {
        if (mScreenTools == null)
            mScreenTools = new ScreenUtil(context);
        return mScreenTools;"
7230,isSameDate,"    public static boolean isSameDate(Date date1, Date date2) {

        Calendar cal = Calendar.getInstance();
        cal.setTime(date1);
        Calendar selectedDate = Calendar.getInstance();
        selectedDate.setTime(date2);
"
7231,isHeaderTable,"  public static boolean isHeaderTable(int paramInt)
  {
    return (paramInt == head) || (paramInt == bhed);"
7232,intValue,"  public static int intValue(String paramString)
  {
    byte[] arrayOfByte = null;
    try
    {"
7233,stringValue,"  public static String stringValue(int paramInt)
  {
    String str;
    try
    {"
7234,byteValue,"  public static byte[] byteValue(int paramInt)
  {
    byte[] arrayOfByte = new byte[4];
    arrayOfByte[0] = ((byte)(0xFF & paramInt >> 24));
    arrayOfByte[1] = ((byte)(0xFF & paramInt >> 16));
    arrayOfByte[2] = ((byte)(0xFF & paramInt >> 8));
    arrayOfByte[3] = ((byte)(0xFF & paramInt));
    return arrayOfByte;"
7235,intValue,"  public static int intValue(byte[] paramArrayOfByte)
  {
    return paramArrayOfByte[0] << 24 | paramArrayOfByte[1] << 16 | paramArrayOfByte[2] << 8 | paramArrayOfByte[3];"
7236,newFontBuilder,"  public Font.Builder newFontBuilder()
  {
    return Font.Builder.getOTFBuilder(this);"
7238,serializeFont,"  public void serializeFont(Font paramFont, OutputStream paramOutputStream)
    throws IOException
  {"
7239,isCollection,"  private static boolean isCollection(ReadableFontData paramReadableFontData)
  {
    byte[] arrayOfByte = new byte[4];
    paramReadableFontData.readBytes(0, arrayOfByte, 0, arrayOfByte.length);
    return Tag.ttcf == Tag.intValue(arrayOfByte);"
7241,loadSingleOTFForBuilding,"  private Font.Builder loadSingleOTFForBuilding(WritableFontData paramWritableFontData, int paramInt)
    throws IOException
  {
    Object localObject = null;
    if (fingerprintFont()) {}
    Font.Builder localBuilder = Font.Builder.getOTFBuilder(this, paramWritableFontData, paramInt);"
7242,loadCollection,"  private Font[] loadCollection(WritableFontData paramWritableFontData)
    throws IOException
  {
    Font.Builder[] arrayOfBuilder = loadCollectionForBuilding(paramWritableFontData);
    Font[] arrayOfFont = new Font[arrayOfBuilder.length];
    for (int i = 0; i < arrayOfFont.length; i++) {"
7243,loadSingleOTF,"  private Font loadSingleOTF(WritableFontData paramWritableFontData)
    throws IOException
  {"
7244,loadFontsForBuilding,"  public Font.Builder[] loadFontsForBuilding(byte[] paramArrayOfByte)
    throws IOException
  {
    WritableFontData localWritableFontData = WritableFontData.createWritableFontData(paramArrayOfByte);
    if (isCollection(localWritableFontData)) {"
7245,loadFonts,"  public Font[] loadFonts(byte[] paramArrayOfByte)
    throws IOException
  {
    WritableFontData localWritableFontData = WritableFontData.createWritableFontData(paramArrayOfByte);
    if (isCollection(localWritableFontData)) {"
7246,isCollection,"  private static boolean isCollection(PushbackInputStream paramPushbackInputStream)
    throws IOException
  {
    byte[] arrayOfByte = new byte[4];
    paramPushbackInputStream.read(arrayOfByte);
    paramPushbackInputStream.unread(arrayOfByte);"
7247,loadCollectionForBuilding,"  private Font.Builder[] loadCollectionForBuilding(InputStream paramInputStream)
    throws IOException
  {
    WritableFontData localWritableFontData = WritableFontData.createWritableFontData(paramInputStream.available());
    localWritableFontData.copyFrom(paramInputStream);"
7248,loadSingleOTFForBuilding,"  private Font.Builder loadSingleOTFForBuilding(InputStream paramInputStream)
    throws IOException
  {
    MessageDigest localMessageDigest = null;
    if (fingerprintFont())
    {
      try"
7249,loadCollection,"  private Font[] loadCollection(InputStream paramInputStream)
    throws IOException
  {
    Font.Builder[] arrayOfBuilder = loadCollectionForBuilding(paramInputStream);
    Font[] arrayOfFont = new Font[arrayOfBuilder.length];
    for (int i = 0; i < arrayOfFont.length; i++) {"
7250,loadSingleOTF,"  private Font loadSingleOTF(InputStream paramInputStream)
    throws IOException
  {"
7251,loadFontsForBuilding,"  public Font.Builder[] loadFontsForBuilding(InputStream paramInputStream)
    throws IOException
  {
    PushbackInputStream localPushbackInputStream = new PushbackInputStream(new BufferedInputStream(paramInputStream), 4);
    if (isCollection(localPushbackInputStream)) {"
7252,loadFonts,"  public Font[] loadFonts(InputStream paramInputStream)
    throws IOException
  {
    PushbackInputStream localPushbackInputStream = new PushbackInputStream(new BufferedInputStream(paramInputStream), 4);
    if (isCollection(localPushbackInputStream)) {"
7253,fingerprintFont,"  public boolean fingerprintFont()
  {
    return this.fingerprint;"
7254,fingerprintFont,"  public void fingerprintFont(boolean paramBoolean)
  {
    this.fingerprint = paramBoolean;"
7256,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        FontCache.getInstance(this).addFont(""alegreya"", ""Alegreya-Regular.ttf"");

        DataBindingUtil.setContentView(this, R.layout.activity_main);"
7257,get,"    public Typeface get(String fontName) {
        String fontFilename = fontMapping.get(fontName);
        if (fontFilename == null) {
            Log.e(TAG, ""Couldn't find font "" + fontName + "". Maybe you need to call addFont() first?"");
            return null;"
7258,addFont,"    public void addFont(String name, String fontFilename) {
        fontMapping.put(name, fontFilename);
    }"
7261,run,"    public void run() {
        try {
            while( ! downLoadThread.isInterrupted()){"
7262,onClick,"    public void onClick(View v) {
        if(!flikerProgressBar.isFinish()){
            flikerProgressBar.toggle();"
7263,downLoad,"    private void downLoad() {
        downLoadThread = new Thread(this);
        downLoadThread.start();
    }"
7266,handleMessage,"        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            flikerProgressBar.setProgress(msg.arg1);
            roundProgressbar.setProgress(msg.arg1);
            if(msg.arg1 == 100){
                flikerProgressBar.finishLoad();"
7267,showWarning,"	private void showWarning(String text) {
		JOptionPane.showMessageDialog(this, text, ""Warning"",
				JOptionPane.WARNING_MESSAGE);"
7268,showError,"	private void showError(String text) {
		JOptionPane.showMessageDialog(this, text, ""Error"",
				JOptionPane.ERROR_MESSAGE);"
7270,run,"					public void run() {
						Vector<String> export = getExportFolders();

						for (int i = 0; i < files.length; i++) {
							for (String exportString : export) {"
7271,filesDropped,"			public void filesDropped(final File[] files) {

				if (resFile == null) {
					showWarning(""Please select a destination folder first!"");
					return;
				}"
7272,actionPerformed,"			public void actionPerformed(ActionEvent arg0) {
				JFileChooser j = new JFileChooser();
				j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
				Integer returnVal = j.showOpenDialog(btnBrowse);
				if (returnVal == JFileChooser.APPROVE_OPTION) {
					resFile = j.getSelectedFile();"
7273,run,"			public void run() {
				try {
					ResizerFrame frame = new ResizerFrame();"
7274,main,"	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {"
7276,getRequiredSize,"	private static int getRequiredSize(String originalSize, String resFolder,
			int width) {
		float destRatio=1;
		if(resFolder.equalsIgnoreCase(""ldpi"")) {
			destRatio = LDPI_RATIO;
		}else if(resFolder.equalsIgnoreCase(""mdpi"")) {
			destRatio = MDPI_RATIO;"
7278,run,"            public void run() {
                createAndShowGUI();
            }"
7281,getObject,"            public abstract Object getObject();
"
7283,getTransferData,"        public Object getTransferData( java.awt.datatransfer.DataFlavor flavor )

        throws java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException 

        {   "
7287,filesDropped,"        public abstract void filesDropped( java.io.File[] files );
"
7289,remove,"    public static boolean remove( java.awt.Component c)

    {   return remove( null, c, true );"
7292,hierarchyChanged,"        {   public void hierarchyChanged( java.awt.event.HierarchyEvent evt )

            {   log( out, ""FileDrop: Hierarchy changed."" );

                java.awt.Component parent = c.getParent();"
7294,createFileArray,"     private static File[] createFileArray(BufferedReader bReader, PrintStream out)

     {
"
7296,dropActionChanged,"                public void dropActionChanged( java.awt.dnd.DropTargetDragEvent evt ) 

                {   log( out, ""FileDrop: dropActionChanged event."" );
"
7297,dragExit,"                public void dragExit( java.awt.dnd.DropTargetEvent evt ) 

                {   log( out, ""FileDrop: dragExit event."" );
"
7298,drop,"                public void drop( java.awt.dnd.DropTargetDropEvent evt )

                {   log( out, ""FileDrop: drop event."" );
"
7299,dragOver,"                public void dragOver( java.awt.dnd.DropTargetDragEvent evt ) 
"
7300,dragEnter,"            {   public void dragEnter( java.awt.dnd.DropTargetDragEvent evt )

                {       log( out, ""FileDrop: dragEnter event."" );
"
7301,saveFields,"    public abstract void saveFields(XContentBuilder builder) throws IOException;
}"
7302,getOplogFilter,"    public abstract DBObject getOplogFilter();
"
7304,on,"    public static Timestamp<?> on(Map<String, Object> map) {
        return on(map, true);
    }"
7305,on,"    public static Timestamp<?> on(DBObject entry) {
        return on(entry.toMap(), false);
    }"
7306,compare,"    public static int compare(Timestamp oplogTimestamp, Timestamp startTimestamp) {
        return oplogTimestamp.compareTo(startTimestamp);
    }"
7307,saveFields,"        public void saveFields(XContentBuilder builder) throws IOException {
            builder.field(MongoDBRiver.LAST_TIMESTAMP_FIELD, JSON.serialize(ts));
            builder.field(MongoDBRiver.LAST_GTID_FIELD, JSONSerializers.getStrict().serialize(gtid));
        }"
7310,toString,"        public String toString() {
            return ""Timestamp.GTID(ts="" + JSON.serialize(ts) + "", gtid="" + JSONSerializers.getStrict().serialize(gtid) + "")"";
        }"
7311,hashCode,"        public int hashCode() {
            return Arrays.hashCode(gtid);
        }"
7312,equals,"        public boolean equals(Object o) {
            return o instanceof GTID && Arrays.equals(gtid, ((GTID) o).gtid);
        }"
7313,compareTo,"        public int compareTo(Timestamp<GTID> o) {
            return UnsignedBytes.lexicographicalComparator().compare(this.gtid, ((GTID) o).gtid);
        }"
7314,saveFields,"        public void saveFields(XContentBuilder builder) throws IOException {
            builder.field(MongoDBRiver.LAST_TIMESTAMP_FIELD, JSON.serialize(ts));
        }"
7317,toString,"        public String toString() {
            return ""Timestamp.BSON(ts="" + JSON.serialize(ts) + "")"";
        }"
7318,hashCode,"        public int hashCode() {
            return ts.hashCode();
        }"
7319,equals,"        public boolean equals(Object o) {
            return o instanceof BSON && ts.equals(((BSON) o).ts);
        }"
7320,compareTo,"        public int compareTo(Timestamp<BSON> o) {
            return this.ts.compareTo(((BSON) o).ts);
        }"
7322,run,"    public void run() {
        while (true) {
            try {"
7326,addToStream,"    private void addToStream(final Operation operation, final Timestamp<?> currentTimestamp, final DBObject data, final String collection)
            throws InterruptedException {
        if (logger.isTraceEnabled()) {
            String dataString = data.toString();"
7327,addInsertToStream,"    private String addInsertToStream(final Timestamp<?> currentTimestamp, final DBObject data, final String collection)
            throws InterruptedException {
        totalDocuments.incrementAndGet();
        addToStream(Operation.INSERT, currentTimestamp, data, collection);
        if (data == null) {"
7328,addQueryToStream,"    private void addQueryToStream(final Operation operation, final Timestamp<?> currentTimestamp, final DBObject update,
                final String collection, final DBCollection slurpedCollection) throws InterruptedException {
        try (DBCursor cursor = slurpedCollection.find(update, findKeys)) {"
7329,addQueryToStream,"    private void addQueryToStream(final Operation operation, final Timestamp<?> currentTimestamp, final DBObject update,
            final String collection) throws InterruptedException {
        if (logger.isTraceEnabled()) {
            logger.trace(""addQueryToStream - operation [{}], currentTimestamp [{}], update [{}]"", operation, currentTimestamp, update);"
7333,applyFieldFilter,"    private DBObject applyFieldFilter(DBObject object) {
        if (object instanceof GridFSFile) {
            GridFSFile file = (GridFSFile) object;
            DBObject metadata = file.getMetaData();"
7334,filterMatch,"    private boolean filterMatch(DBObject filter, DBObject object) {
        for (String key : filter.keySet()) {
            if (!object.containsField(key)) {
                return false;"
7337,processAdminCommandOplogEntry,"    private void processAdminCommandOplogEntry(final DBObject entry, final Timestamp<?> startTimestamp) throws InterruptedException {
        if (logger.isTraceEnabled()) {
            logger.trace(""processAdminCommandOplogEntry - [{}]"", entry);
        }
        DBObject object = (DBObject) entry.get(MongoDBRiver.OPLOG_OBJECT);"
7339,flattenOps,"    private void flattenOps(DBObject entry) {
        Object ref = entry.removeField(MongoDBRiver.OPLOG_REF);
        Object ops = ref == null ? entry.removeField(MongoDBRiver.OPLOG_OPS) : getRefOps(ref);
        if (ops != null) {
            try {"
7341,processFullOplog,"    private DBCursor processFullOplog() throws InterruptedException, SlurperException {
        Timestamp<?> currentTimestamp = getCurrentOplogTimestamp();
        return oplogCursor(currentTimestamp);
    }"
7343,isIndexEmpty,"    protected boolean isIndexEmpty() {
        return MongoDBRiver.getIndexCount(esClient, definition) == 0;
    }"
7344,riverHasIndexedFromOplog,"    protected boolean riverHasIndexedFromOplog() {
        return MongoDBRiver.getLastTimestamp(esClient, definition) != null;
    }"
7348,configure,"    protected void configure() {
        bind(MongoClientService.class).asEagerSingleton();
    }"
7349,configure,"    protected void configure() {
        bind(River.class).to(MongoDBRiver.class).asEagerSingleton();
    }"
7355,isDisableIndexRefresh,"    public boolean isDisableIndexRefresh() {
        return disableIndexRefresh;
    }"
7356,isImportAllCollections,"    public boolean isImportAllCollections() {
        return importAllCollections;
    }"
7359,isStoreStatistics,"    public boolean isStoreStatistics() {
        return storeStatistics;
    }"
7361,isSkipInitialImport,"    public boolean isSkipInitialImport() {
        return skipInitialImport;
    }"
7362,isAdvancedTransformation,"    public boolean isAdvancedTransformation() {
        return advancedTransformation;
    }"
7369,isMongos,"    public Boolean isMongos() {
        return isMongos;
    }"
7370,isDropCollection,"    public boolean isDropCollection() {
        return dropCollection;
    }"
7371,isMongoSSLVerifyCertificate,"    public boolean isMongoSSLVerifyCertificate() {
        return mongoSSLVerifyCertificate;
    }"
7372,isMongoUseSSL,"    public boolean isMongoUseSSL() {
        return mongoUseSSL;
    }"
7373,isMongoSecondaryReadPreference,"    public boolean isMongoSecondaryReadPreference() {
        return mongoSecondaryReadPreference;
    }"
7385,isMongoGridFS,"    public boolean isMongoGridFS() {
        return mongoGridFS;
    }"
7391,addRemovePrefix,"    static String addRemovePrefix(String prefix, String object, boolean add) {
        if (prefix == null) {
            throw new IllegalArgumentException(""prefix"");
        }
        if (object == null) {
            throw new NullPointerException(""object"");
        }
        if (object.length() == 0) {
            return """";"
7392,addPrefix,"    static String addPrefix(String prefix, String object) {
        return addRemovePrefix(prefix, object, true);
    }"
7393,removePrefix,"    static String removePrefix(String prefix, String object) {
        return addRemovePrefix(prefix, object, false);
    }"
7394,convertToBasicDBObject,"    static BasicDBObject convertToBasicDBObject(String object) {
        if (object == null || object.length() == 0) {
            return new BasicDBObject();"
7395,checkClientTrusted,"                public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                }"
7396,checkServerTrusted,"                public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                }"
7404,build,"            public Bulk build() {
                return new Bulk(this);
            }"
7405,flushInterval,"            public Builder flushInterval(TimeValue flushInterval) {
                this.flushInterval = flushInterval;
                return this;
            }"
7406,bulkSize,"            public Builder bulkSize(ByteSizeValue bulkSize) {
                this.bulkSize = bulkSize;
                return this;
            }"
7407,bulkActions,"            public Builder bulkActions(int bulkActions) {
                this.bulkActions = bulkActions;
                return this;
            }"
7408,concurrentRequests,"            public Builder concurrentRequests(int concurrentRequests) {
                this.concurrentRequests = concurrentRequests;
                return this;
            }"
7409,build,"        public MongoDBRiverDefinition build() {
            return new MongoDBRiverDefinition(this);
        }"
7410,threadsAllowedToBlockForConnectionMultiplier,"        public Builder threadsAllowedToBlockForConnectionMultiplier(int threadsAllowedToBlockForConnectionMultiplier) {
            this.threadsAllowedToBlockForConnectionMultiplier = threadsAllowedToBlockForConnectionMultiplier;
            return this;
        }"
7411,connectionsPerHost,"        public Builder connectionsPerHost(int connectionsPerHost) {
            this.connectionsPerHost = connectionsPerHost;
            return this;
        }"
7412,bulk,"        public Builder bulk(Bulk bulk) {
            this.bulk = bulk;
            return this;
        }"
7413,throttleSize,"        public Builder throttleSize(int throttleSize) {
            this.throttleSize = throttleSize;
            return this;
        }"
7414,typeName,"        public Builder typeName(String typeName) {
            this.typeName = typeName;
            return this;
        }"
7415,indexName,"        public Builder indexName(String indexName) {
            this.indexName = indexName;
            return this;
        }"
7416,scriptType,"        public Builder scriptType(String scriptType) {
            this.scriptType = scriptType;
            return this;
        }"
7417,script,"        public Builder script(String script) {
            this.script = script;
            return this;
        }"
7418,importAllCollections,"        public Builder importAllCollections(boolean importAllCollections) {
            this.importAllCollections = importAllCollections;
            return this;
        }"
7419,statisticsTypeName,"        public Builder statisticsTypeName(String statisticsTypeName) {
            this.statisticsTypeName = statisticsTypeName;
            return this;
        }"
7420,statisticsIndexName,"        public Builder statisticsIndexName(String statisticsIndexName) {
            this.statisticsIndexName = statisticsIndexName;
            return this;
        }"
7421,storeStatistics,"        public Builder storeStatistics(boolean storeStatistics) {
            this.storeStatistics = storeStatistics;
            return this;
        }"
7422,parentTypes,"        public Builder parentTypes(Set<String> parentTypes) {
            this.parentTypes = parentTypes;
            return this;
        }"
7423,skipInitialImport,"        public Builder skipInitialImport(boolean skipInitialImport) {
            this.skipInitialImport = skipInitialImport;
            return this;
        }"
7424,advancedTransformation,"        public Builder advancedTransformation(boolean advancedTransformation) {
            this.advancedTransformation = advancedTransformation;
            return this;
        }"
7425,initialTimestamp,"        public Builder initialTimestamp(BSONTimestamp initialTimestamp) {
            this.initialTimestamp = new Timestamp.BSON(initialTimestamp);
            return this;
        }"
7426,initialTimestamp,"        public Builder initialTimestamp(Binary initialTimestamp) {
            this.initialTimestamp = new Timestamp.GTID(initialTimestamp.getData(), null);
            return this;
        }"
7427,disableIndexRefresh,"        public Builder disableIndexRefresh(boolean disableIndexRefresh) {
            this.disableIndexRefresh = disableIndexRefresh;
            return this;
        }"
7428,includeCollection,"        public Builder includeCollection(String includeCollection) {
            this.includeCollection = includeCollection;
            return this;
        }"
7429,includeFields,"        public Builder includeFields(Set<String> includeFields) {
            this.includeFields = includeFields;
            return this;
        }"
7430,excludeFields,"        public Builder excludeFields(Set<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }"
7431,isMongos,"        public Builder isMongos(Boolean isMongos) {
            this.isMongos = isMongos;
            return this;
        }"
7432,dropCollection,"        public Builder dropCollection(boolean dropCollection) {
            this.dropCollection = dropCollection;
            return this;
        }"
7433,mongoSSLVerifyCertificate,"        public Builder mongoSSLVerifyCertificate(boolean mongoSSLVerifyCertificate) {
            this.mongoSSLVerifyCertificate = mongoSSLVerifyCertificate;
            return this;
        }"
7434,mongoUseSSL,"        public Builder mongoUseSSL(boolean mongoUseSSL) {
            this.mongoUseSSL = mongoUseSSL;
            return this;
        }"
7435,mongoSecondaryReadPreference,"        public Builder mongoSecondaryReadPreference(boolean mongoSecondaryReadPreference) {
            this.mongoSecondaryReadPreference = mongoSecondaryReadPreference;
            return this;
        }"
7436,socketTimeout,"        public Builder socketTimeout(int socketTimeout) {
            this.socketTimeout = socketTimeout;
            return this;
        }"
7437,connectTimeout,"        public Builder connectTimeout(int connectTimeout) {
            this.connectTimeout = connectTimeout;
            return this;
        }"
7438,mongoClientOptions,"        public Builder mongoClientOptions(MongoClientOptions mongoClientOptions) {
            this.mongoClientOptions = mongoClientOptions;
            return this;
        }"
7439,mongoLocalAuthDatabase,"        public Builder mongoLocalAuthDatabase(String mongoLocalAuthDatabase) {
            this.mongoLocalAuthDatabase = mongoLocalAuthDatabase;
            return this;
        }"
7440,mongoLocalPassword,"        public Builder mongoLocalPassword(String mongoLocalPassword) {
            this.mongoLocalPassword = mongoLocalPassword;
            return this;
        }"
7441,mongoLocalUser,"        public Builder mongoLocalUser(String mongoLocalUser) {
            this.mongoLocalUser = mongoLocalUser;
            return this;
        }"
7442,mongoAdminAuthDatabase,"        public Builder mongoAdminAuthDatabase(String mongoAdminAuthDatabase) {
            this.mongoAdminAuthDatabase = mongoAdminAuthDatabase;
            return this;
        }"
7443,mongoAdminPassword,"        public Builder mongoAdminPassword(String mongoAdminPassword) {
            this.mongoAdminPassword = mongoAdminPassword;
            return this;
        }"
7444,mongoAdminUser,"        public Builder mongoAdminUser(String mongoAdminUser) {
            this.mongoAdminUser = mongoAdminUser;
            return this;
        }"
7445,mongoCollectionFilter,"        public Builder mongoCollectionFilter(BasicDBObject mongoCollectionFilter) {
            this.mongoCollectionFilter = mongoCollectionFilter;
            return this;
        }"
7446,mongoOplogFilter,"        public Builder mongoOplogFilter(BasicDBObject mongoOplogFilter) {
            this.mongoOplogFilter = mongoOplogFilter;
            return this;
        }"
7447,mongoGridFS,"        public Builder mongoGridFS(boolean mongoGridFS) {
            this.mongoGridFS = mongoGridFS;
            return this;
        }"
7448,mongoCollection,"        public Builder mongoCollection(String mongoCollection) {
            this.mongoCollection = mongoCollection;
            return this;
        }"
7449,mongoDb,"        public Builder mongoDb(String mongoDb) {
            this.mongoDb = mongoDb;
            return this;
        }"
7450,riverIndexName,"        public Builder riverIndexName(String riverIndexName) {
            this.riverIndexName = riverIndexName;
            return this;
        }"
7451,riverName,"        public Builder riverName(String riverName) {
            this.riverName = riverName;
            return this;
        }"
7452,mongoServers,"        public Builder mongoServers(List<ServerAddress> mongoServers) {
            this.mongoServers = mongoServers;
            return this;
        }"
7453,logStatistics,"    private void logStatistics(long duration) {
        if (definition.isStoreStatistics()) {
            long totalDocuments = deletedDocuments.get() + insertedDocuments.get();"
7454,dropRecreateMapping,"    private void dropRecreateMapping() throws IOException, InterruptedException {
        try {
            semaphore.acquire();"
7457,checkBulkProcessorAvailability,"    private void checkBulkProcessorAvailability() {
        while (!isBulkProcessorAvailable()) {
            try {"
7459,deleteBulkRequest,"    public void deleteBulkRequest(String id, String routing, String parent) {
        logger.trace(""deleteBulkRequest - id: {} - index: {} - type: {} - routing: {} - parent: {}"", id, index, type, routing, parent);
        bulkProcessor.add(deleteRequest(index).type(type).id(id).routing(routing).parent(parent));
        deletedDocuments.incrementAndGet();
    }"
7460,addBulkRequest,"    public void addBulkRequest(String id, XContentBuilder source, String routing, String parent) {
        bulkProcessor.add(indexRequest(index).type(type).id(id).source(source).routing(routing).parent(parent));
        insertedDocuments.incrementAndGet();
    }"
7461,addBulkRequest,"    public void addBulkRequest(String id, Map<?, ?> source, String routing, String parent) {
        bulkProcessor.add(indexRequest(index).type(type).id(id).source(source).routing(routing).parent(parent));
        insertedDocuments.incrementAndGet();
    }"
7462,dropIndex,"    public void dropIndex() {
        addBulkRequest(null, DROP_INDEX, null, null);
        flushBulkProcessor.set(true);
    }"
7463,afterBulk,"        public void afterBulk(long executionId, BulkRequest request, BulkResponse response) {
            if (response.hasFailures()) {
                logger.error(""Bulk processor failed. {}"", response.buildFailureMessage());"
7465,findLastDropCollection,"        private int findLastDropCollection(List<ActionRequest> request) {
            int index = 0;
            for (int i = 0; i < request.size(); i++) {
                ActionRequest<?> action = request.get(i);
                if (action instanceof IndexRequest) {"
7466,beforeBulk,"        public void beforeBulk(long executionId, BulkRequest request) {
            checkBulkProcessorAvailability();
            logger.trace(""beforeBulk - new bulk [{}] of items [{}]"", executionId, request.numberOfActions());
            if (flushBulkProcessor.get()) {
                logger.trace(""About to flush bulk request index[{}] - type[{}]"", index, type);"
7467,build,"        public MongoDBRiverBulkProcessor build() {
            return new MongoDBRiverBulkProcessor(river, definition, client, index, type);
        }"
7472,isAttachment,"        public boolean isAttachment() {
            return (data instanceof GridFSDBFile);
        }"
7474,source,"    private static XContentBuilder source(Timestamp<?> time) throws IOException {
        XContentBuilder builder = jsonBuilder().startObject().startObject(TYPE);
        time.saveFields(builder);
        return builder.endObject().endObject();
    }"
7477,getGridFSMapping,"    private XContentBuilder getGridFSMapping() throws IOException {
        XContentBuilder mapping = jsonBuilder()
            .startObject()
                .startObject(definition.getTypeName())
                    .startObject(""properties"")"
7480,internalStopRiver,"    void internalStopRiver() {
        logger.info(""Stopping"");
        try {
            if (startupThread != null) {"
7484,settings,"    public RiverSettings settings() {
        return super.settings;
    }"
7488,isMongos,"    private boolean isMongos() {
        if (definition.isMongos() != null) {
            return definition.isMongos().booleanValue();"
7492,call,"    public MongoConfig call() {
        boolean isMongos = isMongos();
        List<Shard> shards = getShards(isMongos);
        MongoConfig config = new MongoConfig(isMongos, shards);
        return config;
    }"
7496,isMongos,"    public boolean isMongos() {
        return isMongos;
    }"
7502,doClose,"    protected void doClose() throws ElasticsearchException {
        synchronized ($lock) {
            for (MongoClient mongoClient : mongoClients.values()) {"
7503,doStop,"    protected void doStop() throws ElasticsearchException {
    }"
7504,doStart,"    protected void doStart() throws ElasticsearchException {
    }"
7505,extractIndex,"    private String extractIndex(Map<String, Object> ctx) {
        String index = (String) ctx.get(""_index"");
        if (index == null) {
            index = definition.getIndexName();
        }"
7506,extractType,"    private String extractType(Map<String, Object> ctx, String defaultType) {
        Object type = ctx.get(""_type"");
        if (type == null) {
            return defaultType;"
7507,isDocumentDeleted,"    private boolean isDocumentDeleted(Map<String, Object> ctx) {
        return Boolean.TRUE.equals(ctx.get(""deleted""));
    }"
7508,isDocumentIgnored,"    private boolean isDocumentIgnored(Map<String, Object> ctx) {
        return Boolean.TRUE.equals(ctx.get(""ignore""));
    }"
7509,extractOperation,"    private Operation extractOperation(Map<String, Object> ctx) {
        Object operation = ctx.get(""operation"");
        if (operation == null) {
            return null;"
7510,extractRouting,"    private String extractRouting(Map<String, Object> ctx) {
        Object routing = ctx.get(""_routing"");
        if (routing == null) {
            return null;"
7511,extractParent,"    private String extractParent(Map<String, Object> ctx) {
        Object parent = ctx.get(""_parent"");
        if (parent == null) {
            return null;"
7512,extractObjectId,"    private String extractObjectId(Map<String, Object> ctx, String objectId) {
        Object id = ctx.get(""id"");
        if (id != null) {
            return id.toString();
        }
        id = ctx.get(MongoDBRiver.MONGODB_ID_FIELD);"
7513,hasScript,"    private boolean hasScript() {
        return definition.getScriptType() != null && definition.getScript() != null;
    }"
7514,convertDbRef,"    private Map<String, Object> convertDbRef(DBRef ref) {
        Map<String, Object> obj = new HashMap<String, Object>();
        obj.put(""id"", ref.getId());
        obj.put(""ref"", ref.getCollectionName());

        return obj;"
7515,createObjectMap,"    private Map<String, Object> createObjectMap(DBObject dbObj) {
        Map<String, Object> mapData = new HashMap<String, Object>();
        for (String key : dbObj.keySet()) {
            Object value = dbObj.get(key);
            if (value instanceof DBRef) {"
7516,build,"    private XContentBuilder build(final DBObject data, final String objectId) throws IOException {
        if (data instanceof GridFSDBFile) {
            logger.info(""Add Attachment: {} to index {} / type {}"", objectId, definition.getIndexName(), definition.getTypeName());"
7518,deleteBulkRequest,"    private void deleteBulkRequest(String objectId, String index, String type, String routing, String parent) {
        if (logger.isTraceEnabled()) {
            logger.trace(""bulkDeleteRequest - objectId: {} - index: {} - type: {} - routing: {} - parent: {}"", objectId, index, type,
                    routing, parent);
        }"
7521,releaseProcessors,"    private void releaseProcessors() {
        for (MongoDBRiverBulkProcessor processor : processors.values()) {
            processor.getBulkProcessor().close();
        }"
7526,addInsertToStream,"    private String addInsertToStream(final Timestamp<?> currentTimestamp, final DBObject data) throws InterruptedException {
        return addInsertToStream(currentTimestamp, data, definition.getMongoCollection());
    }"
7528,updateIndexRefresh,"    private void updateIndexRefresh(String name, Object value) {
        esClient.admin().indices().prepareUpdateSettings(name).setSettings(ImmutableMap.of(""index.refresh_interval"", value)).get();
    }"
7533,importInitial,"    public void importInitial(Timestamp<?> timestamp) {
        try {
            if (!isIndexEmpty()) {"
7536,shutdown,"    public void shutdown() throws InterruptedException, IOException {
    }"
7537,waitFor,"    public SimplePipelineExecutor<R,P> waitFor()
            throws InterruptedException, ExecutionException {
        if (executorService == null || pipelines == null || futures == null || futures.isEmpty()) {
            return this;
        }
        exceptions = new LinkedList<>();"
7538,execute,"    public SimplePipelineExecutor<R,P> execute() {
        if (pipelines == null) {
            prepare();
        }
        if (pipelines.isEmpty()) {
            throw new IllegalStateException(""pipelines empty"");
        }"
7539,prepare,"    public SimplePipelineExecutor<R,P> prepare() {
        if (provider == null) {
            throw new IllegalStateException(""no provider set"");
        }
        if (queue == null) {
            throw new IllegalStateException(""no queue set"");
        }
        this.pipelines = new LinkedList<>();"
7544,sink,"    void sink(R request) throws IOException;
}"
7548,getPipelines,"    Collection<Pipeline<R>> getPipelines();
}"
7549,shutdown,"    void shutdown() throws InterruptedException, ExecutionException, IOException;
"
7550,waitFor,"    PipelineExecutor<R,P> waitFor() throws InterruptedException, ExecutionException, IOException;
"
7553,setSink,"    PipelineExecutor<R,P> setSink(PipelineSink<R> sink);
"
7554,setQueue,"    PipelineExecutor<R,P> setQueue(BlockingQueue<R> queue);
"
7555,setPipelineProvider,"    PipelineExecutor<R,P> setPipelineProvider(PipelineProvider<P> provider);
"
7556,setConcurrency,"    PipelineExecutor<R,P> setConcurrency(int concurrency);
"
7558,setQueue,"    Pipeline<R> setQueue(BlockingQueue<R> queue);
"
7559,newRequest,"    public abstract void newRequest(Pipeline<R> pipeline, R request);
"
7560,call,"    public R call() throws Exception {
        R r = null;
        try {
            r = queue.poll(5L, TimeUnit.SECONDS);
            while (r != null) {"
7563,dip2px,"    private int dip2px(float dpValue) {
        final float scale = context.getResources()
                .getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);"
7564,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        canvas.drawLine(0, blankTB, width, blankTB, linePaint);
        canvas.drawLine(0, height-blankTB, width, height-blankTB, linePaint);

        canvas.drawPath(path, pathPaint);"
7599,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        canvas.drawPath(path, paint);
    }"
7601,bodyContentLength,"    public long bodyContentLength() {
        ResponseBody body = response.body();
        if (body == null) {
            return -1;"
7602,closeByteStream,"    public void closeByteStream() throws IOException {
        ResponseBody body = response.body();
        if (body == null) {
            throw new IOException(""Response body is null"");"
7603,openByteStream,"    public InputStream openByteStream() throws IOException {
        ResponseBody body = response.body();
        if (body == null) {
            throw new IOException(""Response body is null"");"
7604,header,"    public String header(String name, String defaultValue) {
        return response.header(name, defaultValue);
    }"
7605,isSuccessful,"    public boolean isSuccessful() {
        return response.isSuccessful();
    }"
7606,code,"    public int code() {
        return response.code();
    }"
7607,execute,"    public NetworkResponse execute(NetworkRequest request) throws IOException {
        Request.Builder requestBuilder = new Request.Builder()
                .url(request.url());

        if (request.method() == NetworkRequest.Method.HEAD) {
            requestBuilder = requestBuilder.head();
        }"
7608,waitForLock,"        private void waitForLock() {
            try {
                synchronized (lock) {"
7609,thenPerform,"        T thenPerform(Action<T> action) {
            if (criteria.isNotSatisfied()) {
                waitForLock();
            }"
7611,waitFor,"    static <T> ThenPerform<T> waitFor(Criteria criteria, Object lock) {
        return new ThenPerform<>(criteria, lock);
    }"
7612,isNotSatisfied,"        boolean isNotSatisfied() {
            return toWaitFor == null;
        }"
7613,update,"        void update(ToWaitFor toWaitFor) {
            this.toWaitFor = toWaitFor;
        }"
7614,toString,"    public String toString() {
        return ""VersionOnePartialDownloadBatch{""
                + ""batch="" + batch"
7615,hashCode,"    public int hashCode() {
        int result = batch != null ? batch.hashCode() : 0;
        result = 31 * result + (originalFileLocations != null ? originalFileLocations.hashCode() : 0);
        return result;
    }"
7617,originalFileLocations,"    public List<String> originalFileLocations() {
        return originalFileLocations;
    }"
7618,batch,"    public Batch batch() {
        return batch;
    }"
7620,cloneDownloadFilesWithSize,"    private void cloneDownloadFilesWithSize(String selectedFileSize) {
        cloneCallback.onUpdate(""Cloning Files..."");
        List<String> localFileLocations = localFileLocations();
        String fileName = String.format(DOWNLOAD_FILE_NAME_FORMAT, selectedFileSize);

        for (String localFileLocation : localFileLocations) {"
7621,copyAssetToFile,"    private void copyAssetToFile(String assetName, File outputFile) {
        InputStream inputStream = null;
        OutputStream myOutput = null;
        int length;
        try {
            inputStream = assetManager.open(assetName);"
7623,cloneDatabase,"    private void cloneDatabase() {
        cloneCallback.onUpdate(""Cloning Database..."");
        File outputFile = new File(originalDatabaseLocation);
        createFileIfDoesNotExist(outputFile);
        copyAssetToFile(DATABASE_NAME, outputFile);
    }"
7624,cloneDatabaseWithDownloadSize,"    void cloneDatabaseWithDownloadSize(final String selectedFileSize) {
        executor.execute(() -> {
            cloneDatabase();"
7625,onUpdate,"        void onUpdate(String updateMessage);
    }"
7627,update,"    public void update(DownloadBatchStatus downloadBatchStatus) {
"
7629,toString,"        public String toString() {
            return ""TestStorageRoot{""
                    + ""path='"" + path + '\''"
7630,hashCode,"        public int hashCode() {
            return path != null ? path.hashCode() : 0;
        }"
7632,path,"        public String path() {
            return path;
        }"
7633,create,"    public static StorageRoot create() {
        return new TestStorageRoot();
    }"
7640,build,"        StubCursor build() {
            return new StubCursor(columns, rowsByColumn);
        }"
7641,with,"        Builder with(String columnName, String value, String... values) {
            if (columns.contains(columnName)) {
                Log.w(getClass().getSimpleName(), ""Cursor already contains column: "" + columnName);
                return this;
            }

            columns.add(columnName);

            List<String> copyRowValues = new ArrayList<>();"
7642,respond,"    public Bundle respond(Bundle bundle) {
        return null;
    }"
7648,unregisterDataSetObserver,"    public void unregisterDataSetObserver(DataSetObserver dataSetObserver) {
"
7649,registerDataSetObserver,"    public void registerDataSetObserver(DataSetObserver dataSetObserver) {
"
7650,unregisterContentObserver,"    public void unregisterContentObserver(ContentObserver contentObserver) {
"
7651,registerContentObserver,"    public void registerContentObserver(ContentObserver contentObserver) {
"
7652,isClosed,"    public boolean isClosed() {
        return isClosed;
    }"
7653,close,"    public void close() {
        position = -1;
        isClosed = true;
    }"
7654,requery,"    public boolean requery() {
        return false;
    }"
7656,isNull,"    public boolean isNull(int i) {
        return false;
    }"
7663,copyStringToBuffer,"    public void copyStringToBuffer(int i, CharArrayBuffer charArrayBuffer) {
"
7669,getColumnIndexOrThrow,"    public int getColumnIndexOrThrow(String s) throws IllegalArgumentException {
        int columnIndex = getColumnIndex(s);
        if (columnIndex == -1) {
            throw new IllegalArgumentException(""Could not find index of column with: "" + s);
        }"
7671,isAfterLast,"    public boolean isAfterLast() {
        String firstColumn = columnNames.get(0);
        return position >= rowsByColumn.get(firstColumn).size();
    }"
7672,isBeforeFirst,"    public boolean isBeforeFirst() {
        return position < 0;
    }"
7673,isLast,"    public boolean isLast() {
        String firstColumn = columnNames.get(0);
        return position == rowsByColumn.get(firstColumn).size() - 1;
    }"
7674,isFirst,"    public boolean isFirst() {
        return position == 0;
    }"
7675,moveToPrevious,"    public boolean moveToPrevious() {
        position--;
        return !isBeforeFirst();
    }"
7676,moveToNext,"    public boolean moveToNext() {
        position++;
        return !isAfterLast();
    }"
7677,moveToLast,"    public boolean moveToLast() {
        String firstColumn = columnNames.get(0);
        position = rowsByColumn.get(firstColumn).size() - 1;
        return true;
    }"
7678,moveToFirst,"    public boolean moveToFirst() {
        position = 0;
        return true;
    }"
7679,moveToPosition,"    public boolean moveToPosition(int i) {
        position = i;
        return true;
    }"
7683,createMissingStorageRoot,"    public static StorageRoot createMissingStorageRoot() {
        return () -> """";
    }"
7684,createPrimaryStorageDownloadsDirectoryRoot,"    public static StorageRoot createPrimaryStorageDownloadsDirectoryRoot(Context context) {
        return new PrimaryStorageDownloadsDirectoryRoot(context);
    }"
7686,hasViolatedRule,"    public boolean hasViolatedRule(File storageDirectory, FileSize downloadFileSize) {
        for (StorageRequirementRule requirementRule : rules) {
            if (requirementRule.hasViolatedRule(storageDirectory, downloadFileSize)) {
                return true;"
7687,addRule,"    void addRule(StorageRequirementRule storageRequirementRule) {
        rules.add(storageRequirementRule);
    }"
7688,newInstance,"    static StorageRequirementRules newInstance() {
        return new StorageRequirementRules(new ArrayList<>());
    }"
7689,createPercentageBasedRule,"    public static StorageRequirementRule createPercentageBasedRule(@FloatRange(from = 0.0, to = 0.5) float percentageOfStorageRemaining) {
        return new PercentageBasedRemainingStorageRequirementRule(new StorageCapacityReader(), percentageOfStorageRemaining);
    }"
7690,createByteBasedRule,"    public static StorageRequirementRule createByteBasedRule(long bytesRemainingAfterDownload) {
        return new ByteBasedRemainingStorageRequirementRule(new StorageCapacityReader(), bytesRemainingAfterDownload);
    }"
7691,hasViolatedRule,"    boolean hasViolatedRule(File storageDirectory, FileSize downloadFileSize);
"
7692,storageCapacityInBytes,"    long storageCapacityInBytes(String path) {
        StatFs statFs = new StatFs(path);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
            return statFs.getTotalBytes();"
7693,delete,"    public void delete(String table, String whereClause, String selectionArgument, String... selectionArguments) {
        List<String> arguments = new ArrayList<>();
        arguments.add(selectionArgument);
        arguments.addAll(Arrays.asList(selectionArguments));

        sqLiteDatabase.delete(table, whereClause, arguments.toArray(new String[arguments.size()]));"
7694,endTransaction,"    public void endTransaction() {
        sqLiteDatabase.endTransaction();
    }"
7696,startTransaction,"    public void startTransaction() {
        sqLiteDatabase.beginTransaction();
    }"
7697,deleteDatabase,"    public void deleteDatabase() {
        File outputFile = new File(sqLiteDatabase.getPath());
        if (outputFile.exists()) {
            boolean deleted = outputFile.delete();"
7698,close,"    public void close() {
        sqLiteDatabase.close();
    }"
7699,rawQuery,"    public Cursor rawQuery(String query, String selectionArgument, String... selectionArguments) {
        List<String> arguments = new ArrayList<>();
        arguments.add(selectionArgument);
        arguments.addAll(Arrays.asList(selectionArguments));

        return sqLiteDatabase.rawQuery(query, arguments.toArray(new String[arguments.size()]));"
7700,rawQuery,"    public Cursor rawQuery(String query) {
        return sqLiteDatabase.rawQuery(query, null);
    }"
7701,createNotificationInfo,"        NotificationInformation createNotificationInfo(NotificationCustomizer.NotificationDisplayState displayState, int id) {
            return notificationInformation()
                    .withNotificationDisplayState(displayState)"
7703,waitsForServiceToExist_whenUpdatingNotification,"        public void waitsForServiceToExist_whenUpdatingNotification() {
            notificationDispatcher.setService(downloadService);

            notificationDispatcher.updateNotification(DOWNLOAD_BATCH_STATUS);"
7706,dismissesStackedNotification_whenUpdatingNotification,"        public void dismissesStackedNotification_whenUpdatingNotification() {
            NotificationInformation notificationInfo = createNotificationInfo(SINGLE_PERSISTENT_NOTIFICATION, 100);

            notificationDispatcher.updateNotification(DOWNLOAD_BATCH_STATUS);
"
7712,showsSinglePersistentNotification,"        public void showsSinglePersistentNotification() {
            NotificationInformation notificationInfo = createNotificationInfo(SINGLE_PERSISTENT_NOTIFICATION, 100);
            given(notificationCreator.createNotification(DOWNLOAD_BATCH_STATUS)).willReturn(notificationInfo);

            notificationDispatcher.updateNotification(DOWNLOAD_BATCH_STATUS);
"
7714,waitsForServiceToExist_whenUpdatingNotifications,"        public void waitsForServiceToExist_whenUpdatingNotifications() {
            notificationDispatcher.updateNotification(DOWNLOAD_BATCH_STATUS);
        }"
7715,evaluate,"                    public void evaluate() throws Throwable {
                        try {
                            super.evaluate();"
7716,apply,"            public Statement apply(Statement base, Description description) {
                return new FailOnTimeout(base, 500) {
                    @Override"
7720,stackNotification,"    private void stackNotification(NotificationInformation notificationInformation) {
        dismissPersistentIfCurrent(notificationInformation);
        Notification notification = notificationInformation.getNotification();
        notificationManager.notify(NOTIFICATION_TAG, notificationInformation.getId(), notification);
    }"
7721,updatePersistentNotification,"    private void updatePersistentNotification(NotificationInformation notificationInformation) {
        persistentNotificationId = notificationInformation.getId();
        service.start(notificationInformation.getId(), notificationInformation.getNotification());
    }"
7722,dismissStackedNotification,"    private void dismissStackedNotification(NotificationInformation notificationInformation) {
        notificationManager.cancel(NOTIFICATION_TAG, notificationInformation.getId());
    }"
7723,executeUpdateNotification,"    private Wait.ThenPerform.Action<Void> executeUpdateNotification(T payload) {
        return () -> {
            NotificationInformation notificationInformation = notificationCreator.createNotification(payload);"
7724,updateNotification,"    void updateNotification(T payload) {
        Wait.<Void>waitFor(serviceCriteria, waitForDownloadService)
                .thenPerform(executeUpdateNotification(payload));"
7725,createFixedRateTimerScheduler,"    static ActionScheduler createFixedRateTimerScheduler(long frequencyInMillis) {
        return new FixedRateTimerActionScheduler(new Timer(), frequencyInMillis, new HashMap<>());
    }"
7727,loadAllFilesFor,"    List<RoomFile> loadAllFilesFor(String batchId);
"
7729,rawFileIdFrom,"    private String rawFileIdFrom(DownloadBatchTitle batch, CompletedDownloadFile completedDownloadFile) {
        if (completedDownloadFile.fileId() == null || completedDownloadFile.fileId().isEmpty()) {
            return batch.asString() + UUID.randomUUID();"
7731,update,"    public boolean update(DownloadBatchId downloadBatchId, boolean notificationSeen) {
        RoomBatch roomBatch = database.roomBatchDao().load(downloadBatchId.rawId());
        if (roomBatch == null) {
            return false;
        }
        roomBatch.notificationSeen = notificationSeen;
        database.roomBatchDao().update(roomBatch);"
7732,update,"    public boolean update(DownloadBatchId downloadBatchId, DownloadBatchStatus.Status status) {
        RoomBatch roomBatch = database.roomBatchDao().load(downloadBatchId.rawId());
        if (roomBatch == null) {
            return false;
        }

        roomBatch.status = status.toRawValue();"
7733,delete,"    public boolean delete(DownloadBatchId downloadBatchId) {
        RoomBatch roomBatch = database.roomBatchDao().load(downloadBatchId.rawId());
        if (roomBatch == null) {
            return false;
        }
"
7735,loadFiles,"    public List<DownloadsFilePersisted> loadFiles(DownloadBatchId downloadBatchId) {
        List<RoomFile> roomFiles = database.roomFileDao().loadAllFilesFor(downloadBatchId.rawId());
        return getDownloadsFilePersisted(roomFiles);
    }"
7736,loadAllFiles,"    public List<DownloadsFilePersisted> loadAllFiles() {
        List<RoomFile> roomFiles = database.roomFileDao().loadAllFiles();
        return getDownloadsFilePersisted(roomFiles);
    }"
7738,loadBatches,"    public List<DownloadsBatchPersisted> loadBatches() {
        List<RoomBatch> roomBatches = database.roomBatchDao().loadAll();

        List<DownloadsBatchPersisted> batchPersistedList = new ArrayList<>(roomBatches.size());
        for (RoomBatch roomBatch : roomBatches) {
            DownloadsBatchPersisted batchPersisted = new LiteDownloadsBatchPersisted("
7740,transactionSuccess,"    public void transactionSuccess() {
        database.setTransactionSuccessful();
    }"
7741,endTransaction,"    public void endTransaction() {
        database.endTransaction();
    }"
7742,startTransaction,"    public void startTransaction() {
        database.beginTransaction();
    }"
7743,newInstance,"    static RoomDownloadsPersistence newInstance(Context context) {
        RoomAppDatabase database = RoomAppDatabase.obtainInstance(context);
        return new RoomDownloadsPersistence(database);
    }"
7744,update,"    void update(RoomBatch... roomBatches);
}"
7745,delete,"    void delete(RoomBatch... roomBatches);
"
7750,migrate,"        public void migrate(@NonNull SupportSQLiteDatabase database) {
            database.execSQL(""ALTER TABLE RoomBatch ADD COLUMN 'storage_root' TEXT DEFAULT '"" + storageRoot.path() + ""'"");
        }"
7752,newInstance,"    static RoomAppDatabase newInstance(Context context) {
        StorageRoot storageRoot = StorageRootFactory.createPrimaryStorageDownloadsDirectoryRoot(context.getApplicationContext());
        return Room.databaseBuilder(
                context.getApplicationContext(),"
7753,obtainInstance,"    static RoomAppDatabase obtainInstance(Context context) {
        if (singleInstance == null) {
            synchronized (RoomAppDatabase.class) {
                if (singleInstance == null) {"
7756,path,"    public String path() {
        return context.getApplicationContext().getFilesDir().getAbsolutePath() + DOWNLOADS_DIR;
    }"
7758,createStorageCapacityReader,"    private static StorageCapacityReader createStorageCapacityReader() {
        StorageCapacityReader storageCapacityReader = mock(StorageCapacityReader.class);
        given(storageCapacityReader.storageCapacityInBytes(anyString())).willReturn(CAPACITY_ONE_GB_IN_BYTES);
        return storageCapacityReader;
    }"
7759,createFile,"    private static File createFile() {
        File file = mock(File.class);
        given(file.getPath()).willReturn(""any_path"");
        given(file.getUsableSpace()).willReturn(USABLE_TWO_HUNDRED_MB_IN_BYTES);
        return file;
    }"
7760,violatesRule_whenRemainingFileSizeIsGreaterThanRestriction,"    public void violatesRule_whenRemainingFileSizeIsGreaterThanRestriction() {
        given(fileSize.remainingSize()).willReturn(REMAINING_OVER_ONE_HUNDRED_MB_IN_BYTES);

        boolean hasViolatedRule = storageRequirementRule.hasViolatedRule(file, fileSize);
"
7761,doesNotViolateRule_whenRemainingFileSizeIsLessThanRestriction,"    public void doesNotViolateRule_whenRemainingFileSizeIsLessThanRestriction() {
        given(fileSize.remainingSize()).willReturn(REMAINING_ONE_HUNDRED_MB_IN_BYTES);

        boolean hasViolatedRule = storageRequirementRule.hasViolatedRule(file, fileSize);
"
7763,close,"    public void close() {
        if (fileOutputStream == null) {
            Logger.w(""Abort closing stream, does not exist."");
            return;"
7765,delete,"    public void delete(FilePath absoluteFilePath) {
        if (absoluteFilePath == null || absoluteFilePath.isUnknown()) {
            Logger.w(""Cannot delete, you must create the file first."");
            return;
        }

        File fileToDelete = new File(absoluteFilePath.path());
        if (!fileToDelete.exists()) {"
7766,write,"    public boolean write(byte[] buffer, int offset, int numberOfBytesToWrite) {
        if (fileOutputStream == null) {
            Logger.e(""Cannot write, you must create the file first"");
            return false;"
7767,ensureParentDirectoriesExistFor,"    private boolean ensureParentDirectoriesExistFor(File outputFile) {
        boolean parentExists = outputFile.getParentFile().exists();
        if (parentExists) {
            return true;
        }
"
7768,create,"    public FilePersistenceResult create(FilePath absoluteFilePath, FileSize fileSize) {
        if (fileSize.isTotalSizeUnknown()) {
            return FilePersistenceResult.ERROR_UNKNOWN_TOTAL_FILE_SIZE;
        }

        if (absoluteFilePath.isUnknown()) {"
7769,initialiseWith,"    public void initialiseWith(Context context, StorageRequirementRule storageRequirementRule) {
        this.storageRequirementRule = storageRequirementRule;
    }"
7770,createDownloadBatchIdFrom,"    private DownloadBatchId createDownloadBatchIdFrom(String originalFileId, String batchId) {
        if (originalFileId == null || originalFileId.isEmpty()) {
            String hashedString = String.valueOf(batchId.hashCode());
            return DownloadBatchIdCreator.createSanitizedFrom(hashedString);
        }"
7771,extractMigrations,"    List<VersionOnePartialDownloadBatch> extractMigrations() {
        Cursor batchesCursor = database.rawQuery(BATCHES_QUERY);

        List<VersionOnePartialDownloadBatch> partialMigrations = new ArrayList<>();
        while (batchesCursor.moveToNext()) {

            String batchId = batchesCursor.getString(BATCH_ID_COLUMN);"
7772,channelId,"    public String channelId() {
        return notificationChannel.getId();
    }"
7774,toString,"    public String toString() {
        return String.format(""Optional<%s>"", isAbsent() ? ""Absent"" : data.toString());
    }"
7775,hashCode,"    public int hashCode() {
        return data != null ? data.hashCode() : 0;
    }"
7781,map,"    <P> Optional<P> map(Func1<T, P> transformation) {
        return isPresent() ? Optional.of(transformation.call(get())) : absent();
    }"
7782,filterNot,"    Optional<T> filterNot(Predicate<T> condition) {
        return filter((it) -> !condition.isValid(it));
    }"
7783,filter,"    Optional<T> filter(Predicate<T> condition) {
        return isPresent() && condition.isValid(get()) ? this : absent();
    }"
7784,or,"    Optional<T> or(Func0<Optional<T>> elseFunc) {
        return isPresent() ? this : elseFunc.call();
    }"
7785,or,"    Optional<T> or(Optional<T> elseCase) {
        return isPresent() ? this : elseCase;
    }"
7786,or,"    T or(T elseCase) {
        return isPresent() ? get() : elseCase;
    }"
7787,get,"    T get() {
        if (!isPresent()) {
            throw new IllegalStateException(""You must check if data is present before using get()"");
        }"
7788,isAbsent,"    boolean isAbsent() {
        return !isPresent();
    }"
7789,isPresent,"    boolean isPresent() {
        return data != null;
    }"
7790,of,"    static <T> Optional<T> of(T data) {
        if (data == null) {
            throw new IllegalArgumentException(""Data cannot be null. Use Optional.fromNullable(maybeNullData)."");
        }"
7791,fromNullable,"    static <T> Optional<T> fromNullable(T data) {
        if (data == null) {
            return absent();
        }"
7792,absent,"    static <T> Optional<T> absent() {
        return ABSENT;
    }"
7793,notificationDisplayState,"            public NotificationCustomizer.NotificationDisplayState notificationDisplayState() {
                return notificationDisplayState;
            }"
7796,build,"    NotificationInformation build() {
        return new NotificationInformation() {
            @Override"
7797,withNotificationDisplayState,"    NotificationInformationFixtures withNotificationDisplayState(NotificationCustomizer.NotificationDisplayState notificationDisplayState) {
        this.notificationDisplayState = notificationDisplayState;
        return this;
    }"
7798,withNotification,"    NotificationInformationFixtures withNotification(Notification notification) {
        this.notification = notification;
        return this;
    }"
7799,withId,"    NotificationInformationFixtures withId(int id) {
        this.id = id;
        return this;
    }"
7800,notificationInformation,"    static NotificationInformationFixtures notificationInformation() {
        return new NotificationInformationFixtures();
    }"
7801,notificationDisplayState,"    NotificationCustomizer.NotificationDisplayState notificationDisplayState();
}"
7804,customNotificationFrom,"    Notification customNotificationFrom(NotificationCompat.Builder builder, T payload);
"
7805,notificationDisplayState,"    NotificationDisplayState notificationDisplayState(T payload);
"
7806,createNotification,"    NotificationInformation createNotification(T notificationPayload);
}"
7807,setNotificationChannelProvider,"    void setNotificationChannelProvider(NotificationChannelProvider notificationChannelProvider);
"
7809,registerNotificationChannel,"    void registerNotificationChannel(Context context);
"
7810,bodyContentLength,"            public long bodyContentLength() {
                return bodyContentLength;
            }"
7811,closeByteStream,"            public void closeByteStream() throws IOException {
                inputStream.close();
            }"
7812,openByteStream,"            public InputStream openByteStream() throws IOException {
                return inputStream;
            }"
7813,header,"            public String header(String name, String defaultValue) {
                return header;
            }"
7814,isSuccessful,"            public boolean isSuccessful() {
                return isSuccessful;
            }"
7815,code,"            public int code() {
                return code;
            }"
7816,build,"    NetworkResponse build() {
        return new NetworkResponse() {
            @Override"
7817,withBodyContentLength,"    NetworkResponseFixtures withBodyContentLength(long bodyContentLength) {
        this.bodyContentLength = bodyContentLength;
        return this;
    }"
7818,withInputStream,"    NetworkResponseFixtures withInputStream(InputStream inputStream) {
        this.inputStream = inputStream;
        return this;
    }"
7819,withHeader,"    NetworkResponseFixtures withHeader(String header) {
        this.header = header;
        return this;
    }"
7820,withSuccessful,"    NetworkResponseFixtures withSuccessful(boolean successful) {
        isSuccessful = successful;
        return this;
    }"
7821,withCode,"    NetworkResponseFixtures withCode(int code) {
        this.code = code;
        return this;
    }"
7822,aNetworkResponse,"    static NetworkResponseFixtures aNetworkResponse() {
        return new NetworkResponseFixtures();
    }"
7824,closeByteStream,"    void closeByteStream() throws IOException;
"
7825,openByteStream,"    InputStream openByteStream() throws IOException;
"
7826,header,"    String header(String name, String defaultValue);
"
7829,toString,"        public String toString() {
            return ""StubNetworkRequest{"" +
                    ""headers="" + headers +"
7830,hashCode,"        public int hashCode() {
            int result = headers.hashCode();
            result = 31 * result + url.hashCode();
            result = 31 * result + method.hashCode();
            return result;
        }"
7831,equals,"        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof StubNetworkRequest)) return false;

            StubNetworkRequest that = (StubNetworkRequest) o;

            if (!headers.equals(that.headers)) return false;
            if (!url.equals(that.url)) return false;"
7832,method,"        public Method method() {
            return method;
        }"
7833,url,"        public String url() {
            return url;
        }"
7834,headers,"        public Map<String, String> headers() {
            return headers;
        }"
7835,build,"    NetworkRequest build() {
        return new StubNetworkRequest(headers, url, method);
    }"
7836,withMethod,"    NetworkRequestFixtures withMethod(NetworkRequest.Method method) {
        this.method = method;
        return this;
    }"
7837,withUrl,"    NetworkRequestFixtures withUrl(String url) {
        this.url = url;
        return this;
    }"
7838,withHeader,"    NetworkRequestFixtures withHeader(String key, String value) {
        headers.put(key, value);
        return this;
    }"
7839,aNetworkRequest,"    static NetworkRequestFixtures aNetworkRequest() {
        return new NetworkRequestFixtures();
    }"
7846,createDownloadRequest,"    NetworkRequest createDownloadRequest(String url) {
        return new LiteNetworkRequest(new HashMap<>(), url, NetworkRequest.Method.GET);
    }"
7847,createFileSizeBodyRequest,"    NetworkRequest createFileSizeBodyRequest(String url) {
        return new LiteNetworkRequest(DISABLE_COMPRESSION_HEADERS, url, NetworkRequest.Method.GET);
    }"
7848,createFileSizeHeadRequest,"    NetworkRequest createFileSizeHeadRequest(String url) {
        return new LiteNetworkRequest(DISABLE_COMPRESSION_HEADERS, url, NetworkRequest.Method.HEAD);
    }"
7849,rawMethod,"        public String rawMethod() {
            return rawMethod;
        }"
7853,returnsFileSize_whenResponseSuccessful,"    public void returnsFileSize_whenResponseSuccessful() throws IOException {
        given(httpClient.execute(requestCreator.createFileSizeHeadRequest(ANY_RAW_URL))).willReturn(SUCCESSFUL_RESPONSE);

        FileSize fileSize = fileSizeRequester.requestFileSize(ANY_RAW_URL);
"
7855,returnsUnknownSize_whenHttpClientErrors,"    public void returnsUnknownSize_whenHttpClientErrors() throws IOException {
        given(httpClient.execute(requestCreator.createFileSizeHeadRequest(ANY_RAW_URL))).willThrow(IOException.class);

        FileSize fileSize = fileSizeRequester.requestFileSize(ANY_RAW_URL);
"
7860,requestFileSize,"    public FileSize requestFileSize(String url) {
        try {
            long fileSize = executeRequestFileSize(url);
            if (fileSize == UNKNOWN_CONTENT_LENGTH || fileSize == ZERO_FILE_SIZE) {"
7861,stopsEmittingBytes_whenStoppingDownload,"    public void stopsEmittingBytes_whenStoppingDownload() {
        networkFileDownloader.startDownloading(ANY_RAW_URL, UNKNOWN_FILE_SIZE, callback);

        networkFileDownloader.stopDownloading();
"
7862,emitsDownloadFinished_whenRequestExecutionFails,"    public void emitsDownloadFinished_whenRequestExecutionFails() throws IOException {
        given(httpClient.execute(requestCreator.createDownloadRequest(ANY_RAW_URL))).willThrow(IOException.class);

        networkFileDownloader.startDownloading(ANY_RAW_URL, UNKNOWN_FILE_SIZE, callback);
"
7864,emitsDownloadFinished_whenResponseCodeIsInvalid,"    public void emitsDownloadFinished_whenResponseCodeIsInvalid() throws IOException {
        given(httpClient.execute(requestCreator.createDownloadRequest(ANY_RAW_URL))).willReturn(INVALID_RESPONSE);

        networkFileDownloader.startDownloading(ANY_RAW_URL, UNKNOWN_FILE_SIZE, callback);
"
7866,closesByteStream_whenDownloaded,"    public void closesByteStream_whenDownloaded() throws IOException {
        NetworkResponse networkResponse = spy(aNetworkResponse().build());
        given(httpClient.execute(requestCreator.createDownloadRequest(ANY_RAW_URL))).willReturn(networkResponse);

        networkFileDownloader.startDownloading(ANY_RAW_URL, UNKNOWN_FILE_SIZE, callback);
"
7869,stopDownloading,"    public void stopDownloading() {
        canDownload = false;
    }"
7870,createRequestFrom,"    private NetworkRequest createRequestFrom(String url, FileSize fileSize) {
        if (fileSize.areBytesDownloadedKnown()) {
            return requestCreator.createDownloadRequestWithDownloadedBytesHeader(url, fileSize.currentSize(), fileSize.totalSize());"
7871,isValid,"    private boolean isValid(int responseCode) {
        return responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_PARTIAL;
    }"
7872,processResponse,"    private void processResponse(Callback callback, NetworkResponse response, int responseCode, String url) throws IOException {
        if (isValid(responseCode)) {
            byte[] buffer = new byte[BUFFER_SIZE];"
7873,startDownloading,"    public void startDownloading(String url, FileSize fileSize, Callback callback) {
        canDownload = true;

        NetworkRequest request = createRequestFrom(url, fileSize);
        NetworkResponse response = null;
        try {
            response = httpClient.execute(request);"
7874,returnsOriginalPath_whenFileSchemeIsNotPresent,"    public void returnsOriginalPath_whenFileSchemeIsNotPresent() {
        String originalPath = ""/data/data/com.novoda.downloadmanager.demo.simple/files/Pictures/penguins.dat"";

        String sanitizedPath = MigrationStoragePathSanitizer.sanitize(originalPath);
"
7875,stripsScheme_whenOriginalPathContainsFileScheme,"    public void stripsScheme_whenOriginalPathContainsFileScheme() {
        String originalPath = ""file:/data/data/com.novoda.downloadmanager.demo.simple/files/Pictures/penguins.dat"";

        String sanitizedPath = MigrationStoragePathSanitizer.sanitize(originalPath);
"
7876,sanitize,"    static String sanitize(String originalFilePath) {
        return originalFilePath.replace(FILE_SCHEME_TO_REMOVE, EMPTY);
    }"
7877,returnsAbsolutePathAndFileName_whenAssetPathContainsMultipleSubdirectories,"    public void returnsAbsolutePathAndFileName_whenAssetPathContainsMultipleSubdirectories() {
        String assetUrl = ""/data/data/com.novoda.downloadmanager.demo.simple/files/Pictures/foo/bar/thechase.dat"";

        FilePath migrationPath = MigrationPathExtractor.extractMigrationPath(BASE_PATH, assetUrl, DOWNLOAD_BATCH_ID);
"
7878,returnsAbsolutePathAndFileName_whenAssetPathContainsSingleSubdirectory,"    public void returnsAbsolutePathAndFileName_whenAssetPathContainsSingleSubdirectory() {
        String assetUrl = ""/data/data/com.novoda.downloadmanager.demo.simple/files/Pictures/foo/thechase.dat"";

        FilePath migrationPath = MigrationPathExtractor.extractMigrationPath(BASE_PATH, assetUrl, DOWNLOAD_BATCH_ID);
"
7879,returnsAbsolutePathAndFileName_whenAssetPathConsistsOfFileNameOnly,"    public void returnsAbsolutePathAndFileName_whenAssetPathConsistsOfFileNameOnly() {
        String assetUrl = ""/data/data/com.novoda.downloadmanager.demo.simple/files/Pictures/thechase.dat"";

        FilePath migrationPath = MigrationPathExtractor.extractMigrationPath(BASE_PATH, assetUrl, DOWNLOAD_BATCH_ID);
"
7880,removeSubstring,"    private static String removeSubstring(String source, String subString) {
        return source.replaceAll(subString, EMPTY);
    }"
7881,regexUsablePathSeparator,"    private static String regexUsablePathSeparator() {
        return File.separatorChar == '\\' ? ""\\\\"" : File.separator;
    }"
7882,extractFileName,"    private static String extractFileName(String assetUri) {
        String[] subPaths = assetUri.split(regexUsablePathSeparator());
        return subPaths.length == 0 ? assetUri : subPaths[subPaths.length - 1];
    }"
7883,sanitizeBatchIdPath,"    private static String sanitizeBatchIdPath(String batchIdPath) {
        return batchIdPath.replaceAll(""[:\\\\/*?|<>]"", ""_"");
    }"
7884,prependBatchIdTo,"    private static String prependBatchIdTo(String filePath, DownloadBatchId downloadBatchId) {
        return sanitizeBatchIdPath(downloadBatchId.rawId()) + File.separatorChar + filePath;
    }"
7885,extractRelativePath,"    private static String extractRelativePath(String basePath, String assetPath) {
        String subPathWithFileName = removeSubstring(assetPath, basePath);
        String fileName = extractFileName(subPathWithFileName);
        return removeSubstring(subPathWithFileName, fileName);
    }"
7887,onUpdate,"    private void onUpdate(String message) {
        callbackHandler.post(() -> migrationJobCallback.onUpdate(message));
    }"
7888,closeStream,"    private void closeStream(Closeable closeable) {
        if (closeable != null) {
            try {"
7890,migrateV1FileToV2Location,"    private void migrateV1FileToV2Location(CompletedDownloadFile completedDownloadFile) {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        try {
            File originalFile = new File(completedDownloadFile.originalFileLocation());"
7891,deleteVersionOneFile,"    private void deleteVersionOneFile(String originalFileLocation) {
        if (originalFileLocation != null && !originalFileLocation.isEmpty()) {
            File file = new File(originalFileLocation);"
7894,onUpdate,"        void onUpdate(String message);
    }"
7896,logAllFiles,"    private void logAllFiles(File... files) {
        for (File file : files) {
            if (file.isDirectory()) {"
7897,onStopTrackingTouch,"            public void onStopTrackingTouch(SeekBar seekBar) {
                Log.d(TAG, ""SeekBar#onStopTrackingTouch"");
            }"
7898,onStartTrackingTouch,"            public void onStartTrackingTouch(SeekBar seekBar) {
                Log.d(TAG, ""SeekBar#onStartTrackingTouch"");
            }"
7899,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                long maxSizeOfBatch = MAX_BATCH_SIZE * progress / batchSizeSeekBar.getMax();
                batchSizeLabel.setText(getString(R.string.max_batch_size, maxSizeOfBatch));
                batchSizeProvider.setMaxSizeOfBatch(maxSizeOfBatch);
            }"
7900,onBatchResumed,"            public void onBatchResumed() {
                downloadManager.resume(BATCH_ID_2);
            }"
7901,onBatchPaused,"            public void onBatchPaused() {
                downloadManager.pause(BATCH_ID_2);
            }"
7902,onBatchResumed,"            public void onBatchResumed() {
                downloadManager.resume(BATCH_ID_1);
            }"
7903,onBatchPaused,"            public void onBatchPaused() {
                downloadManager.pause(BATCH_ID_1);
            }"
7905,e,"    void e(Throwable throwable, Object... message);
}"
7907,w,"    void w(Throwable throwable, Object... message);
"
7909,d,"    void d(Throwable throwable, Object... message);
"
7914,e,"    public static void e(Throwable throwable, Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
7915,e,"    public static void e(Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
7916,w,"    public static void w(Throwable throwable, Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
7917,w,"    public static void w(Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
7918,d,"    public static void d(Throwable throwable, Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
7919,d,"    public static void d(Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
7920,i,"    public static void i(Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
7921,v,"    public static void v(Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
7922,detachAll,"    static void detachAll() {
        HANDLES.clear();
    }"
7923,detach,"    static void detach(LogHandle handle) {
        HANDLES.remove(handle);
    }"
7924,attach,"    static void attach(LogHandle handle) {
        HANDLES.add(handle);
    }"
7925,hashCode,"    public int hashCode() {
        int result = headers != null ? headers.hashCode() : 0;
        result = 31 * result + (url != null ? url.hashCode() : 0);
        result = 31 * result + (method != null ? method.hashCode() : 0);
        return result;
    }"
7927,method,"    public Method method() {
        return method;
    }"
7928,url,"    public String url() {
        return url;
    }"
7929,headers,"    public Map<String, String> headers() {
        return headers;
    }"
7930,onRunJob,"    protected Result onRunJob(Params params) {
        liteDownloadManager.submitAllStoredDownloads(() -> Logger.v(""LiteJobDownload all jobs submitted""));
        Logger.v(""LiteJobDownload run network recovery job"");
        return Result.SUCCESS;
    }"
7931,create,"    public Job create(String tag) {
        if (tag.equals(TAG)) {
            return new LiteJobDownload(liteDownloadManager);
        }"
7932,hashCode,"    public int hashCode() {
        int result = (int) (currentSize ^ (currentSize >>> 32));
        result = 31 * result + (int) (totalSize ^ (totalSize >>> 32));
        return result;
    }"
7934,toString,"    public String toString() {
        return ""LiteFileSize{""
                + ""currentSize="" + currentSize"
7935,copy,"    public LiteFileSize copy() {
        return new LiteFileSize(currentSize, totalSize);
    }"
7938,addToCurrentSize,"    public void addToCurrentSize(long newBytes) {
        currentSize += newBytes;
    }"
7939,remainingSize,"    public long remainingSize() {
        return totalSize - currentSize;
    }"
7940,totalSize,"    public long totalSize() {
        return totalSize;
    }"
7941,currentSize,"    public long currentSize() {
        return currentSize;
    }"
7942,areBytesDownloadedKnown,"    public boolean areBytesDownloadedKnown() {
        return currentSize > ZERO_BYTES;
    }"
7943,isTotalSizeKnown,"    public boolean isTotalSizeKnown() {
        return totalSize > ZERO_BYTES;
    }"
7944,isTotalSizeUnknown,"    public boolean isTotalSizeUnknown() {
        return totalSize <= ZERO_BYTES;
    }"
7945,toString,"    public String toString() {
        return ""LiteFilePath{""
                + ""path='"" + path + '\''"
7946,hashCode,"    public int hashCode() {
        return path != null ? path.hashCode() : 0;
    }"
7948,isUnknown,"    public boolean isUnknown() {
        return path.equalsIgnoreCase(FilePathCreator.unknownFilePath().path());
    }"
7949,path,"    public String path() {
        return path;
    }"
7950,updateAllowedConnectionType,"    public void updateAllowedConnectionType(ConnectionType allowedConnectionType) {
        connectionType = allowedConnectionType;
    }"
7952,downloadFileId,"    public DownloadFileId downloadFileId() {
        return downloadFileId;
    }"
7954,totalFileSize,"    public long totalFileSize() {
        return totalFileSize;
    }"
7955,filePath,"    public FilePath filePath() {
        return filePath;
    }"
7956,downloadBatchId,"    public DownloadBatchId downloadBatchId() {
        return downloadBatchId;
    }"
7957,onTaskRemoved,"    public void onTaskRemoved(Intent rootIntent) {
        super.onTaskRemoved(rootIntent);
    }"
7958,onDestroy,"    public void onDestroy() {
        executor.shutdown();
        super.onDestroy();
    }"
7959,releaseHeldCpuWakeLock,"    private void releaseHeldCpuWakeLock() {
        if (wakeLock.isHeld()) {
            wakeLock.release();"
7960,acquireCpuWakeLock,"    private void acquireCpuWakeLock() {
        PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
        if (powerManager != null) {
            wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, WAKELOCK_TAG);"
7961,download,"    public void download(DownloadBatch downloadBatch, DownloadBatchStatusCallback callback) {
        callback.onUpdate(downloadBatch.status().copy());
        downloadBatch.setCallback(callback);

        executor.execute(() -> {"
7962,onBind,"    public IBinder onBind(Intent intent) {
        return binder;
    }"
7964,stop,"    public void stop(boolean removeNotification) {
        stopForeground(removeNotification);
    }"
7965,start,"    public void start(int id, Notification notification) {
        startForeground(id, notification);
    }"
7966,onCreate,"    public void onCreate() {
        super.onCreate();
        executor = Executors.newSingleThreadExecutor();
        binder = new DownloadServiceBinder();
    }"
7967,storageRoot,"    public String storageRoot() {
        return storageRoot;
    }"
7968,notificationSeen,"    public boolean notificationSeen() {
        return notificationSeen;
    }"
7969,downloadedDateTimeInMillis,"    public long downloadedDateTimeInMillis() {
        return downloadedDateTimeInMillis;
    }"
7970,downloadBatchTitle,"    public DownloadBatchTitle downloadBatchTitle() {
        return downloadBatchTitle;
    }"
7971,downloadBatchStatus,"    public DownloadBatchStatus.Status downloadBatchStatus() {
        return status;
    }"
7973,setupFileOperations,"        private void setupFileOperations() {
            given(fileOperations.fileDownloaderCreator()).willReturn(fileDownloaderCreator);
            given(fileDownloaderCreator.create()).willReturn(fileDownloader);
        }"
7974,setupNetworkRecoveryCreator,"        private void setupNetworkRecoveryCreator() {
            DownloadsNetworkRecoveryCreator.createDisabled();
        }"
7975,setupDownloadStatusResponse,"        private void setupDownloadStatusResponse() {
            willAnswer(invocation -> {
                downloadFileStatus = invocation.getArgument(0);"
7976,setupDownloadBatchStatusesResponse,"        private void setupDownloadBatchStatusesResponse() {
            willAnswer(invocation -> {
                downloadBatchStatuses = invocation.getArgument(0);"
7977,setupDownloadBatchesResponse,"        private void setupDownloadBatchesResponse() {
            willAnswer(invocation -> {
                DownloadsBatchPersistence.LoadBatchesCallback loadBatchesCallback = invocation.getArgument(1);"
7979,throwException_whenUpdatedWithNullConnectionType,"        public void throwException_whenUpdatedWithNullConnectionType() {
            liteDownloadManager.updateAllowedConnectionType(null);
        }"
7980,stopFileDownloader_whenUpdatedInDownloadManager_andConnectionTypeNotAllowed,"        public void stopFileDownloader_whenUpdatedInDownloadManager_andConnectionTypeNotAllowed() {
            given(connectionChecker.isAllowedToDownload()).willReturn(false);

            liteDownloadManager.updateAllowedConnectionType(ANY_CONNECTION_TYPE);
"
7981,updateAllowedConnectionTypeInConnectionChecker_whenUpdatedInDownloadManager,"        public void updateAllowedConnectionTypeInConnectionChecker_whenUpdatedInDownloadManager() {
            liteDownloadManager.updateAllowedConnectionType(ANY_CONNECTION_TYPE);

            verify(connectionChecker).updateAllowedConnectionType(ANY_CONNECTION_TYPE);"
7982,getsDownloadStatusMatchingIdWithSynchronousCall_whenServiceAlreadyExists,"        public void getsDownloadStatusMatchingIdWithSynchronousCall_whenServiceAlreadyExists() {
            DownloadFileStatus fileStatus = liteDownloadManager.getDownloadFileStatusWithMatching(DOWNLOAD_BATCH_ID, DOWNLOAD_FILE_ID);

            assertThat(fileStatus).isEqualTo(DOWNLOAD_FILE_STATUS);"
7983,getsDownloadStatusMatchingId_whenServiceAlreadyExists,"        public void getsDownloadStatusMatchingId_whenServiceAlreadyExists() {
            liteDownloadManager.getDownloadFileStatusWithMatching(DOWNLOAD_BATCH_ID, DOWNLOAD_FILE_ID, downloadFileStatusCallback);

            assertThat(downloadFileStatus).isEqualTo(DOWNLOAD_FILE_STATUS);"
7984,getsAllBatchStatusesWithSynchronousCall_whenServiceAlreadyExists,"        public void getsAllBatchStatusesWithSynchronousCall_whenServiceAlreadyExists() {
            List<DownloadBatchStatus> allDownloadBatchStatuses = liteDownloadManager.getAllDownloadBatchStatuses();

            assertThat(allDownloadBatchStatuses).containsExactly(BATCH_STATUS, ADDITIONAL_BATCH_STATUS);"
7985,getsAllBatchStatuses_whenServiceAlreadyExists,"        public void getsAllBatchStatuses_whenServiceAlreadyExists() {
            liteDownloadManager.getAllDownloadBatchStatuses(allBatchStatusesCallback);

            assertThat(downloadBatchStatuses).containsExactly(BATCH_STATUS, ADDITIONAL_BATCH_STATUS);"
7986,removesCallbackFromInternalList,"        public void removesCallbackFromInternalList() {
            liteDownloadManager.removeDownloadBatchCallback(downloadBatchCallback);

            assertThat(downloadBatchCallbacks).doesNotContain(downloadBatchCallback);"
7987,addsCallbackToInternalList,"        public void addsCallbackToInternalList() {
            DownloadBatchStatusCallback additionalDownloadBatchCallback = mock(DownloadBatchStatusCallback.class);

            liteDownloadManager.addDownloadBatchCallback(additionalDownloadBatchCallback);
"
7988,doesNotRemoveBatchFromMap_whenDeletingBatch,"        public void doesNotRemoveBatchFromMap_whenDeletingBatch() {
            liteDownloadManager.delete(DOWNLOAD_BATCH_ID);

            assertThat(downloadingBatches).containsKey(DOWNLOAD_BATCH_ID);"
7989,deletesBatch,"        public void deletesBatch() {
            liteDownloadManager.delete(DOWNLOAD_BATCH_ID);

            verify(downloadBatch).delete();"
7990,doesNotDelete_whenBatchIdIsUnknown,"        public void doesNotDelete_whenBatchIdIsUnknown() {
            liteDownloadManager.delete(new LiteDownloadBatchId(""unknown""));

            verifyZeroInteractions(downloadBatch, additionalDownloadBatch);"
7991,triggersDownload_whenResumingBatch,"        public void triggersDownload_whenResumingBatch() {
            given(downloadBatch.status()).willReturn(anInternalDownloadsBatchStatus().build());

            liteDownloadManager.resume(DOWNLOAD_BATCH_ID);
"
7992,resumesBatch,"        public void resumesBatch() {
            given(downloadBatch.status()).willReturn(anInternalDownloadsBatchStatus().build());

            liteDownloadManager.resume(DOWNLOAD_BATCH_ID);
"
7994,doesNotResume_whenBatchIdIsUnknown,"        public void doesNotResume_whenBatchIdIsUnknown() {
            liteDownloadManager.pause(new LiteDownloadBatchId(""unknown""));

            verifyZeroInteractions(downloadBatch, additionalDownloadBatch);"
7995,pausesBatch,"        public void pausesBatch() {
            liteDownloadManager.pause(DOWNLOAD_BATCH_ID);

            verify(downloadBatch).pause();"
7996,doesNotPause_whenBatchIdIsUnknown,"        public void doesNotPause_whenBatchIdIsUnknown() {
            liteDownloadManager.pause(new LiteDownloadBatchId(""unknown""));

            verifyZeroInteractions(downloadBatch, additionalDownloadBatch);"
7997,doesNotDownload_whenBatchIsAlreadyBeingDownloaded,"        public void doesNotDownload_whenBatchIsAlreadyBeingDownloaded() {
            liteDownloadManager.download(BATCH);

            verify(downloadManagerDownloader, never()).download(BATCH, downloadingBatches);"
7998,downloadGivenBatch_whenBatchIsNotAlreadyBeingDownloaded,"        public void downloadGivenBatch_whenBatchIsNotAlreadyBeingDownloaded() {
            downloadingBatches.clear();

            liteDownloadManager.download(BATCH);
"
7999,notifies_whenSubmittingAllStoredDownloads,"        public void notifies_whenSubmittingAllStoredDownloads() {
            liteDownloadManager.submitAllStoredDownloads(allStoredDownloadsSubmittedCallback);

            verify(allStoredDownloadsSubmittedCallback).onAllDownloadsSubmitted();"
8000,doesNotPutBatchesIntoDownloadsMap_whenSubmittingAllStoredDownloads,"        public void doesNotPutBatchesIntoDownloadsMap_whenSubmittingAllStoredDownloads() {
            downloadingBatches.clear();

            liteDownloadManager.submitAllStoredDownloads(allStoredDownloadsSubmittedCallback);
"
8002,setsDownloadService,"        public void setsDownloadService() {
            verify(downloadManagerDownloader).setDownloadService(downloadService);
        }"
8004,waitsForServiceToExist_whenGettingDownloadStatusWithMatchingIdWithSynchronousCall,"        public void waitsForServiceToExist_whenGettingDownloadStatusWithMatchingIdWithSynchronousCall() {
            liteDownloadManager.getDownloadFileStatusWithMatching(DOWNLOAD_BATCH_ID, DOWNLOAD_FILE_ID);
        }"
8005,waitsForServiceToExist_whenGettingDownloadStatusWithMatchingId,"        public void waitsForServiceToExist_whenGettingDownloadStatusWithMatchingId() {
            liteDownloadManager.getDownloadFileStatusWithMatching(DOWNLOAD_BATCH_ID, DOWNLOAD_FILE_ID, downloadFileStatusCallback);
        }"
8006,waitsForServiceToExist_whenGettingAllBatchStatusesWithSynchronousCall,"        public void waitsForServiceToExist_whenGettingAllBatchStatusesWithSynchronousCall() {
            liteDownloadManager.getAllDownloadBatchStatuses();
        }"
8007,waitsForServiceToExist_whenGettingAllBatchStatuses,"        public void waitsForServiceToExist_whenGettingAllBatchStatuses() {
            liteDownloadManager.getAllDownloadBatchStatuses(allBatchStatusesCallback);
        }"
8010,downloadsBatchByOriginalReference_whenIdAlreadyExists,"    public void downloadsBatchByOriginalReference_whenIdAlreadyExists() {
        downloadingBatches.put(downloadBatchId, anotherDownloadBatchWithTheSameId);

        downloader.download(downloadBatch, downloadingBatches);
"
8011,downloadsBatch,"    public void downloadsBatch() {
        downloadingBatches.clear();

        downloader.download(downloadBatch, downloadingBatches);
"
8012,doesNotAddDownloadBatchToQueue_whenIdAlreadyExists,"    public void doesNotAddDownloadBatchToQueue_whenIdAlreadyExists() {
        downloadingBatches.put(downloadBatchId, anotherDownloadBatchWithTheSameId);

        downloader.download(downloadBatch, downloadingBatches);
"
8013,addsDownloadBatchToQueue,"    public void addsDownloadBatchToQueue() {
        downloadingBatches.clear();

        downloader.download(downloadBatch, downloadingBatches);
"
8017,addCompletedBatch,"    public boolean addCompletedBatch(CompletedDownloadBatch completedDownloadBatch, Map<DownloadBatchId, DownloadBatch> downloadBatchMap) {
        DownloadBatch downloadBatch = DownloadBatchFactory.newInstance(
                completedDownloadBatch.asBatch(),
                fileOperations,
                downloadsBatchPersistence,"
8019,downloadBatchCallback,"    private DownloadBatchStatusCallback downloadBatchCallback(Map<DownloadBatchId, DownloadBatch> downloadBatchMap) {
        return downloadBatchStatus -> {
            if (downloadBatchStatus == null || downloadBatchStatusFilter.shouldFilterOut(downloadBatchStatus)) {"
8020,updateStatusToQueuedIfNeeded,"    private void updateStatusToQueuedIfNeeded(InternalDownloadBatchStatus downloadBatchStatus) {
        DownloadBatchStatus.Status status = downloadBatchStatus.status();
        if (status != PAUSED && status != DOWNLOADED && status != DELETING && status != DELETED) {
            downloadBatchStatus.markAsQueued(downloadsBatchPersistence);"
8021,executeDownload,"    private Wait.ThenPerform.Action<Void> executeDownload(DownloadBatch downloadBatch, Map<DownloadBatchId, DownloadBatch> downloadBatchMap) {
        return () -> {
            InternalDownloadBatchStatus downloadBatchStatus = downloadBatch.status();"
8022,run,"            public void run() {
                Wait.<Void>waitFor(serviceCriteria, waitForDownloadService)
                        .thenPerform(executeDownload(batchToDownload, downloadBatchMap));"
8023,download,"    void download(DownloadBatch downloadBatch, Map<DownloadBatchId, DownloadBatch> downloadBatchMap) {
        DownloadBatchId downloadBatchId = downloadBatch.getId();
        if (!downloadBatchMap.containsKey(downloadBatchId)) {
            downloadBatchMap.put(downloadBatchId, downloadBatch);
        }
"
8024,download,"    void download(Batch batch, Map<DownloadBatchId, DownloadBatch> downloadBatchMap) {
        DownloadBatch downloadBatch = DownloadBatchFactory.newInstance(
                batch,
                fileOperations,
                downloadsBatchPersistence,"
8025,alreadyContainsBatch,"    private boolean alreadyContainsBatch(CompletedDownloadBatch completedDownloadBatch) {
        return downloadBatchMap.containsKey(completedDownloadBatch.downloadBatchId());
    }"
8026,addCompletedBatch,"    public boolean addCompletedBatch(CompletedDownloadBatch completedDownloadBatch) throws IllegalArgumentException {
        if (alreadyContainsBatch(completedDownloadBatch)) {
            Logger.w(""CompletedDownloadBatch with id: "" + completedDownloadBatch.downloadBatchId() + "" already exists."");
            return false;"
8028,getDownloadFileStatusWithMatching,"    public void getDownloadFileStatusWithMatching(DownloadBatchId downloadBatchId,
                                                  DownloadFileId downloadFileId,
                                                  DownloadFileStatusCallback callback) {"
8032,executeGetAllDownloadBatchStatuses,"    private List<DownloadBatchStatus> executeGetAllDownloadBatchStatuses() {
        List<DownloadBatchStatus> downloadBatchStatuses = new ArrayList<>(downloadBatchMap.size());

        for (DownloadBatch downloadBatch : downloadBatchMap.values()) {
            downloadBatchStatuses.add(downloadBatch.status());"
8034,removeDownloadBatchCallback,"    public void removeDownloadBatchCallback(DownloadBatchStatusCallback downloadBatchCallback) {
        synchronized (waitForDownloadBatchStatusCallback) {
            if (callbacks.contains(downloadBatchCallback)) {"
8035,addDownloadBatchCallback,"    public void addDownloadBatchCallback(DownloadBatchStatusCallback downloadBatchCallback) {
        synchronized (waitForDownloadBatchStatusCallback) {
            callbacks.add(downloadBatchCallback);"
8036,delete,"    public void delete(DownloadBatchId downloadBatchId) {
        DownloadBatch downloadBatch = downloadBatchMap.get(downloadBatchId);
        if (downloadBatch == null) {
            Logger.v(""abort delete batch "" + downloadBatchId + "" will not be deleted as it does not exists in the running batches map"");
            return;"
8037,resume,"    public void resume(DownloadBatchId downloadBatchId) {
        DownloadBatch downloadBatch = downloadBatchMap.get(downloadBatchId);
        if (downloadBatch == null) {
            Logger.v(""abort resume batch "" + downloadBatchId + "" will not be resume as it does not exists in the running batches map"");
            return;
        }
"
8038,pause,"    public void pause(DownloadBatchId downloadBatchId) {
        DownloadBatch downloadBatch = downloadBatchMap.get(downloadBatchId);
        if (downloadBatch == null) {
            Logger.v(""abort pause batch "" + downloadBatchId + "" will not be paused as it does not exists in the running batches map"");
            return;"
8039,download,"    public void download(Batch batch) {
        DownloadBatchId downloadBatchId = batch.downloadBatchId();
        DownloadBatch downloadBatch = downloadBatchMap.get(downloadBatchId);
        if (downloadBatch == null) {
            downloader.download(batch, downloadBatchMap);"
8040,loadBatchesCallback,"    private DownloadsBatchPersistence.LoadBatchesCallback loadBatchesCallback(AllStoredDownloadsSubmittedCallback callback) {
        return downloadBatches -> {
            for (DownloadBatch downloadBatch : downloadBatches) {"
8041,submitAllStoredDownloads,"    public void submitAllStoredDownloads(AllStoredDownloadsSubmittedCallback callback) {
        downloadsBatchPersistence.loadAsync(fileOperations, loadBatchesCallback(callback));
    }"
8042,initialise,"    void initialise(DownloadService downloadService) {
        downloader.setDownloadService(downloadService);
        serviceCriteria.update(downloadService);
        synchronized (waitForDownloadService) {
            waitForDownloadService.notifyAll();"
8043,toString,"    public String toString() {
        return ""LiteDownloadFileStatus{""
                + ""downloadBatchId="" + downloadBatchId"
8046,status,"    public Status status() {
        return status;
    }"
8047,error,"    public Optional<DownloadError> error() {
        return downloadError;
    }"
8048,waitForNetwork,"    public void waitForNetwork() {
        status = Status.WAITING_FOR_NETWORK;
    }"
8049,isMarkedAsWaitingForNetwork,"    public boolean isMarkedAsWaitingForNetwork() {
        return status == Status.WAITING_FOR_NETWORK;
    }"
8050,markAsError,"    public void markAsError(DownloadError downloadError) {
        status = Status.ERROR;
        this.downloadError = Optional.of(downloadError);
    }"
8051,markAsDeleted,"    public void markAsDeleted() {
        status = Status.DELETED;
    }"
8052,markAsQueued,"    public void markAsQueued() {
        status = Status.QUEUED;
    }"
8053,isMarkedAsError,"    public boolean isMarkedAsError() {
        return status == Status.ERROR;
    }"
8054,markAsPaused,"    public void markAsPaused() {
        status = Status.PAUSED;
    }"
8055,markAsDownloading,"    public void markAsDownloading() {
        status = Status.DOWNLOADING;
    }"
8056,isMarkedAsDeleted,"    public boolean isMarkedAsDeleted() {
        return status == Status.DELETED;
    }"
8057,isMarkedAsQueued,"    public boolean isMarkedAsQueued() {
        return status == Status.QUEUED;
    }"
8058,isMarkedAsDownloading,"    public boolean isMarkedAsDownloading() {
        return status == Status.DOWNLOADING;
    }"
8061,localFilePath,"    public FilePath localFilePath() {
        return localFilePath;
    }"
8062,totalBytes,"    public long totalBytes() {
        return fileSize.totalSize();
    }"
8063,bytesDownloaded,"    public long bytesDownloaded() {
        return fileSize.currentSize();
    }"
8064,markAsDownloaded,"    private void markAsDownloaded() {
        status = Status.DOWNLOADED;
    }"
8065,update,"    public void update(FileSize fileSize, FilePath localFilePath) {
        this.fileSize = fileSize;
        this.localFilePath = localFilePath;

        if (fileSize.currentSize() == fileSize.totalSize()) {"
8066,toString,"    public String toString() {
        return ""LiteDownloadFileId{""
                + ""id='"" + id + '\''"
8067,hashCode,"    public int hashCode() {
        return id != null ? id.hashCode() : 0;
    }"
8069,rawId,"    public String rawId() {
        return id;
    }"
8070,hashCode,"    public int hashCode() {
        return title.hashCode();
    }"
8072,toString,"    public String toString() {
        return ""LiteDownloadBatchTitle{""
                + ""title='"" + title + '\''"
8073,asString,"    public String asString() {
        return title;
    }"
8074,toString,"    public String toString() {
        return ""LiteDownloadBatchStatus{""
                + ""downloadBatchTitle="" + downloadBatchTitle"
8078,downloadError,"    public DownloadError downloadError() {
        if (downloadError.isPresent()) {
            return downloadError.get();"
8079,updateStatusAsync,"    private void updateStatusAsync(Status status, DownloadsBatchStatusPersistence persistence) {
        persistence.updateStatusAsync(downloadBatchId, status);
    }"
8080,copy,"    public InternalDownloadBatchStatus copy() {
        return new LiteDownloadBatchStatus(
                downloadBatchId,"
8081,markAsNotificationSeen,"    public void markAsNotificationSeen(DownloadsNotificationSeenPersistence persistence) {
        this.notificationSeen = NOTIFICATION_SEEN;
        persistence.updateNotificationSeenAsync(this, NOTIFICATION_SEEN);
    }"
8082,markAsWaitingForNetwork,"    public void markAsWaitingForNetwork(DownloadsBatchPersistence persistence) {
        this.status = Status.WAITING_FOR_NETWORK;
        updateStatusAsync(status, persistence);
    }"
8083,markAsDownloaded,"    public void markAsDownloaded(DownloadsBatchStatusPersistence persistence) {
        this.status = Status.DOWNLOADED;
        updateStatusAsync(status, persistence);
    }"
8084,markAsError,"    public void markAsError(Optional<DownloadError> downloadError, DownloadsBatchStatusPersistence persistence) {
        this.status = Status.ERROR;
        this.downloadError = downloadError;
        updateStatusAsync(status, persistence);
    }"
8085,markAsDeleted,"    public void markAsDeleted() {
        status = Status.DELETED;
        notificationSeen = false;
    }"
8086,markAsDeleting,"    public void markAsDeleting() {
        status = Status.DELETING;
        notificationSeen = false;
    }"
8087,markAsQueued,"    public void markAsQueued(DownloadsBatchStatusPersistence persistence) {
        status = Status.QUEUED;
        updateStatusAsync(status, persistence);
    }"
8088,markAsPaused,"    public void markAsPaused(DownloadsBatchStatusPersistence persistence) {
        status = Status.PAUSED;
        updateStatusAsync(status, persistence);
    }"
8089,markAsDownloading,"    public void markAsDownloading(DownloadsBatchStatusPersistence persistence) {
        status = Status.DOWNLOADING;
        updateStatusAsync(status, persistence);
    }"
8095,percentageDownloaded,"    public int percentageDownloaded() {
        return percentageDownloaded;
    }"
8097,updateDownloaded,"    public void updateDownloaded(long currentBytesDownloaded) {
        this.bytesDownloaded = currentBytesDownloaded;
        this.percentageDownloaded = getPercentageFrom(bytesDownloaded, totalBatchSizeBytes);
    }"
8098,updateTotalSize,"    public void updateTotalSize(long totalBatchSizeBytes) {
        this.totalBatchSizeBytes = totalBatchSizeBytes;
    }"
8099,bytesTotalSize,"    public long bytesTotalSize() {
        return totalBatchSizeBytes;
    }"
8100,bytesDownloaded,"    public long bytesDownloaded() {
        return bytesDownloaded;
    }"
8101,toString,"    public String toString() {
        return ""LiteDownloadBatchId{""
                + ""id='"" + id + '\''"
8105,batchFileWithPath,"    private BatchFile batchFileWithPath(String path) {
        return new BatchFile(
                ANY_NETWORK_ADDRESS,"
8106,whenLiteBatchFileBuilderApply,"    private void whenLiteBatchFileBuilderApply(String path, String fileName) {
        liteBatchFileBuilder.saveTo(path, fileName).apply();
    }"
8107,doesNotIgnoreSeparatorAsRoot,"    public void doesNotIgnoreSeparatorAsRoot() {
        given(batchStorageRoot.path()).willReturn(""/my-movie"");

        whenLiteBatchFileBuilderApply(""my/path"", ""/my-movie.mp4"");
"
8108,ignoreSeparatorAsPath,"    public void ignoreSeparatorAsPath() {
        given(batchStorageRoot.path()).willReturn(""root/my-movie"");

        whenLiteBatchFileBuilderApply(""/"", ""/my-movie.mp4"");
"
8109,ignoresEmptyPath,"    public void ignoresEmptyPath() {
        given(batchStorageRoot.path()).willReturn(""root/my-movie"");

        whenLiteBatchFileBuilderApply("""", ""my-movie.mp4"");
"
8111,doesNotAddDuplicateLeadingOrTrailingSeparators,"    public void doesNotAddDuplicateLeadingOrTrailingSeparators() {
        given(batchStorageRoot.path()).willReturn(""/root/my-movie/"");

        whenLiteBatchFileBuilderApply(""/my/path/"", ""/my-movie.mp4"");
"
8112,concatenatesAllPaths,"    public void concatenatesAllPaths() {
        given(batchStorageRoot.path()).willReturn(""root/my-movie"");

        whenLiteBatchFileBuilderApply(""my/path"", ""my-movie.mp4"");
"
8113,joinWithFileSeparator,"    private String joinWithFileSeparator(CharSequence... elements) {
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < elements.length; i++) {
            stringBuilder.append(elements[i]);
            if (i < elements.length - 1) {"
8114,filterEmptySegmentsOut,"    private CharSequence[] filterEmptySegmentsOut(String... pathSegments) {
        List<CharSequence> filteredPathSegments = new ArrayList<>();
        for (String pathSegment : pathSegments) {
            if (!pathSegment.isEmpty()) {
                filteredPathSegments.add(pathSegment);"
8115,sanitise,"    private String sanitise(String path) {
        String[] pathSegments = path.split(SEPARATOR_AS_REGEX);
        CharSequence[] filteredPathSegments = filterEmptySegmentsOut(pathSegments);
        return joinWithFileSeparator(filteredPathSegments);
    }"
8116,buildPath,"    private String buildPath(String... paths) {
        StringBuilder stringBuilder = new StringBuilder();

        String storagePath = paths[0];
        if (storagePath.startsWith(File.separator)) {
            stringBuilder.append(File.separator);
        }
"
8117,apply,"    public BatchBuilder apply() {
        String absolutePath = buildPath(
                batchStorageRoot.path(),
                path.or(""""),
                fileName.getOrElse(() -> FileNameExtractor.extractFrom(networkAddress))"
8118,withSize,"    public BatchFileBuilder withSize(FileSize fileSize) {
        this.fileSize = Optional.fromNullable(fileSize);
        return this;
    }"
8119,saveTo,"    public BatchFileBuilder saveTo(String path, String fileName) {
        this.path = Optional.fromNullable(path);
        this.fileName = Optional.fromNullable(fileName);
        return this;
    }"
8120,saveTo,"    public BatchFileBuilder saveTo(String path) {
        String networkAddressDerivedFileName = FileNameExtractor.extractFrom(networkAddress);
        return saveTo(path, networkAddressDerivedFileName);
    }"
8121,withIdentifier,"    public BatchFileBuilder withIdentifier(DownloadFileId downloadFileId) {
        this.downloadFileId = Optional.fromNullable(downloadFileId);
        return this;
    }"
8122,withParentBuilder,"    public BatchFileBuilder withParentBuilder(InternalBatchBuilder parentBuilder) {
        this.parentBuilder = parentBuilder;
        return this;
    }"
8123,ensureNoFileIdDuplicates,"    private void ensureNoFileIdDuplicates(List<BatchFile> batchFiles) {
        Set<DownloadFileId> rawIdsWithoutDuplicates = new HashSet<>();
        for (BatchFile batchFile : batchFiles) {
            rawIdsWithoutDuplicates.add(FallbackDownloadFileIdProvider.downloadFileIdFor(downloadBatchId, batchFile));
        }"
8124,build,"    public Batch build() {
        ensureNoFileIdDuplicates(batchFiles);
        return new Batch(storageRoot, downloadBatchId, title, batchFiles);
    }"
8125,downloadFrom,"    public BatchFileBuilder downloadFrom(String networkAddress) {
        return BatchFile.from(batchStorageRoot, networkAddress).withParentBuilder(this);
    }"
8126,withFile,"    public void withFile(BatchFile batchFile) {
        batchFiles.add(batchFile);
    }"
8127,navigateTo,"    private void navigateTo(Class<?> activityClass) {
        Intent intent = new Intent(getApplicationContext(), activityClass);
        startActivity(intent);
    }"
8128,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_landing);
        findViewById(R.id.migration).setOnClickListener(view -> navigateTo(MigrationActivity.class));
        findViewById(R.id.downloads).setOnClickListener(view -> navigateTo(MainActivity.class));
    }"
8129,areBytesDownloadedKnown,"            public boolean areBytesDownloadedKnown() {
                return areBytesDownloadedKnown;
            }"
8130,isTotalSizeUnknown,"            public boolean isTotalSizeUnknown() {
                return isTotalSizeUnknown;
            }"
8131,isTotalSizeKnown,"            public boolean isTotalSizeKnown() {
                return isTotalSizeKnown;
            }"
8132,remainingSize,"            public long remainingSize() {
                return totalSize - currentSize;
            }"
8133,totalSize,"            public long totalSize() {
                return totalSize;
            }"
8134,currentSize,"            public long currentSize() {
                return currentSize;
            }"
8135,copy,"            public InternalFileSize copy() {
                return InternalFileSizeFixtures.aFileSize()
                        .withCurrentSize(currentSize)"
8138,addToCurrentSize,"            public void addToCurrentSize(long newBytes) {
                currentSize += newBytes;
            }"
8139,build,"    InternalFileSize build() {
        return new InternalFileSize() {
            @Override"
8140,withAreBytesDownloadedKnown,"    InternalFileSizeFixtures withAreBytesDownloadedKnown(boolean areBytesDownloadedKnown) {
        this.areBytesDownloadedKnown = areBytesDownloadedKnown;
        return this;
    }"
8141,withTotalSizeUnknown,"    InternalFileSizeFixtures withTotalSizeUnknown(boolean totalSizeUnknown) {
        isTotalSizeUnknown = totalSizeUnknown;
        return this;
    }"
8142,withTotalSizeKnown,"    InternalFileSizeFixtures withTotalSizeKnown(boolean totalSizeKnown) {
        isTotalSizeKnown = totalSizeKnown;
        return this;
    }"
8143,withTotalSize,"    InternalFileSizeFixtures withTotalSize(long totalSize) {
        this.totalSize = totalSize;
        return this;
    }"
8144,withCurrentSize,"    InternalFileSizeFixtures withCurrentSize(long currentSize) {
        this.currentSize = currentSize;
        return this;
    }"
8145,aFileSize,"    static InternalFileSizeFixtures aFileSize() {
        return new InternalFileSizeFixtures();
    }"
8146,from,"    static InternalFileSize from(FileSize fileSize) {
        return new LiteFileSize(fileSize.currentSize(), fileSize.totalSize());
    }"
8147,createFromCurrentAndTotalSize,"    static InternalFileSize createFromCurrentAndTotalSize(long currentSize, long totalSize) {
        return new LiteFileSize(currentSize, totalSize);
    }"
8148,unknownFileSize,"    static InternalFileSize unknownFileSize() {
        return UNKNOWN.copy();
    }"
8150,setCurrentSize,"    void setCurrentSize(long currentSize);
"
8155,isMarkedAsWaitingForNetwork,"    boolean isMarkedAsWaitingForNetwork();
"
8156,markAsError,"    void markAsError(DownloadError downloadError);
"
8165,update,"    void update(FileSize fileSize, FilePath localFilePath);
"
8166,build,"    InternalDownloadBatchStatus build() {
        return new LiteDownloadBatchStatus(
                downloadBatchId,"
8167,withNotificationSeen,"    InternalDownloadBatchStatusFixtures withNotificationSeen(boolean notificationSeen) {
        this.notificationSeen = notificationSeen;
        return this;
    }"
8168,withDownloadError,"    InternalDownloadBatchStatusFixtures withDownloadError(DownloadError downloadError) {
        this.downloadError = downloadError;
        return this;
    }"
8169,withDownloadedDateTimeInMillis,"    InternalDownloadBatchStatusFixtures withDownloadedDateTimeInMillis(long downloadedDateTimeInMillis) {
        this.downloadedDateTimeInMillis = downloadedDateTimeInMillis;
        return this;
    }"
8170,withStatus,"    InternalDownloadBatchStatusFixtures withStatus(DownloadBatchStatus.Status status) {
        this.status = status;
        return this;
    }"
8171,withDownloadBatchId,"    InternalDownloadBatchStatusFixtures withDownloadBatchId(DownloadBatchId downloadBatchId) {
        this.downloadBatchId = downloadBatchId;
        return this;
    }"
8172,withBytesTotalSize,"    InternalDownloadBatchStatusFixtures withBytesTotalSize(long bytesTotalSize) {
        this.bytesTotalSize = bytesTotalSize;
        return this;
    }"
8173,withBytesDownloaded,"    InternalDownloadBatchStatusFixtures withBytesDownloaded(long bytesDownloaded) {
        this.bytesDownloaded = bytesDownloaded;
        return this;
    }"
8174,withPercentageDownloaded,"    InternalDownloadBatchStatusFixtures withPercentageDownloaded(int percentageDownloaded) {
        this.percentageDownloaded = percentageDownloaded;
        return this;
    }"
8175,withStorageRoot,"    InternalDownloadBatchStatusFixtures withStorageRoot(String storageRoot) {
        this.storageRoot = storageRoot;
        return this;
    }"
8176,withDownloadBatchTitle,"    InternalDownloadBatchStatusFixtures withDownloadBatchTitle(DownloadBatchTitle downloadBatchTitle) {
        this.downloadBatchTitle = downloadBatchTitle;
        return this;
    }"
8177,anInternalDownloadsBatchStatus,"    static InternalDownloadBatchStatusFixtures anInternalDownloadsBatchStatus() {
        return new InternalDownloadBatchStatusFixtures();
    }"
8179,markAsNotificationSeen,"    void markAsNotificationSeen(DownloadsNotificationSeenPersistence persistence);
"
8180,markAsWaitingForNetwork,"    void markAsWaitingForNetwork(DownloadsBatchPersistence persistence);
"
8181,markAsDownloaded,"    void markAsDownloaded(DownloadsBatchStatusPersistence persistence);
"
8182,markAsError,"    void markAsError(Optional<DownloadError> downloadError, DownloadsBatchStatusPersistence persistence);
"
8185,markAsQueued,"    void markAsQueued(DownloadsBatchStatusPersistence persistence);
"
8186,markAsPaused,"    void markAsPaused(DownloadsBatchStatusPersistence persistence);
"
8187,markAsDownloading,"    void markAsDownloading(DownloadsBatchStatusPersistence persistence);
"
8188,updateDownloaded,"    void updateDownloaded(long currentBytesDownloaded);
"
8189,updateTotalSize,"    void updateTotalSize(long totalBatchSizeBytes);
"
8190,withParentBuilder,"    BatchFileBuilder withParentBuilder(InternalBatchBuilder parentBuilder);
}"
8192,requestFileSize,"    public FileSize requestFileSize(String url) {
        return FileSizeCreator.createFromTotalSize(TOTAL_FILE_SIZE);
    }"
8193,createInstance,"        private static HttpClient createInstance() {
            OkHttpClient okHttpClient = new OkHttpClient.Builder()
                    .connectTimeout(TIMEOUT, TimeUnit.SECONDS)
                    .writeTimeout(TIMEOUT, TimeUnit.SECONDS)"
8195,execute,"    NetworkResponse execute(NetworkRequest networkRequest) throws IOException;
"
8196,givenScheduledAction,"    private void givenScheduledAction() {
        scheduler.schedule(anyAction);
        reset(timer);
    }"
8197,returnsFalse_whenActionIsNotScheduled,"    public void returnsFalse_whenActionIsNotScheduled() {
        boolean scheduled = scheduler.isScheduled(anyAction);

        assertThat(scheduled).isFalse();"
8198,returnsTrue_whenActionIsScheduled,"    public void returnsTrue_whenActionIsScheduled() {
        givenScheduledAction();

        boolean scheduled = scheduler.isScheduled(anyAction);
"
8199,clearsAllActions_whenCancellingAll,"    public void clearsAllActions_whenCancellingAll() {
        givenScheduledAction();

        scheduler.cancelAll();
"
8200,clearsTimerTasks_whenCancellingAll,"    public void clearsTimerTasks_whenCancellingAll() {
        givenScheduledAction();

        scheduler.cancelAll();
"
8202,cancelTimerTask_whenCancellingSpecificAction,"    public void cancelTimerTask_whenCancellingSpecificAction() {
        TimerTask timerTask = mock(TimerTask.class);
        actionTimerTasks.put(anyAction, timerTask);

        scheduler.cancel(anyAction);
"
8203,doesNothing_whenActionAlreadyScheduled,"    public void doesNothing_whenActionAlreadyScheduled() {
        givenScheduledAction();

        scheduler.schedule(anyAction);
"
8204,recordsAction_whenSchedulingAction,"    public void recordsAction_whenSchedulingAction() {
        scheduler.schedule(anyAction);

        assertThat(actionTimerTasks).containsEntry(anyAction, timerTask);"
8205,executesAction_whenSchedulingAction,"    public void executesAction_whenSchedulingAction() {
        scheduler.schedule(anyAction);

        timerTask.run();
"
8206,answer,"            public Void answer(InvocationOnMock invocation) throws Throwable {
                timerTask = argumentCaptor.getValue();
                return null;
            }"
8208,isScheduled,"    public boolean isScheduled(Action action) {
        return actionTimerTasks.containsKey(action);
    }"
8209,cancelAll,"    public void cancelAll() {
        for (Map.Entry<Action, TimerTask> timerTaskEntry : actionTimerTasks.entrySet()) {
            TimerTask timerTask = timerTaskEntry.getValue();
            timerTask.cancel();"
8210,cancel,"    public void cancel(Action action) {
        if (actionTimerTasks.containsKey(action)) {
            TimerTask timerTask = actionTimerTasks.get(action);"
8211,run,"            public void run() {
                action.perform();
            }"
8212,schedule,"    public void schedule(final Action action) {
        if (actionTimerTasks.containsKey(action)) {
            Logger.v(""Already contains action, aborting schedule"");
            return;
        }
"
8213,requestFileSize,"    FileSize requestFileSize(String url);
}"
8214,fileSizeFor,"    public long fileSizeFor(String filePath) {
        File file = new File(filePath);
        return file.length();
    }"
8215,createForCompletedDownloadBatch,"    public static FileSize createForCompletedDownloadBatch(long totalFileSize) {
        return new LiteFileSize(totalFileSize, totalFileSize);
    }"
8216,createFromTotalSize,"    public static FileSize createFromTotalSize(long totalFileSize) {
        return new LiteFileSize(ZERO_BYTES, totalFileSize);
    }"
8217,unknownFileSize,"    static FileSize unknownFileSize() {
        return UNKNOWN;
    }"
8227,write,"            public boolean write(byte[] buffer, int offset, int numberOfBytesToWrite) {
                return writeResult;
            }"
8228,create,"            public FilePersistenceResult create(FilePath absoluteFilePath, FileSize fileSize) {
                return filePersistenceResult;
            }"
8229,initialiseWith,"            public void initialiseWith(Context context, StorageRequirementRule storageRequirementRule) {
"
8230,build,"    FilePersistence build() {
        return new FilePersistence() {
            @Override"
8231,withCurrentSize,"    FilePersistenceFixtures withCurrentSize(long currentSize) {
        this.currentSize = currentSize;
        return this;
    }"
8232,withWriteResult,"    FilePersistenceFixtures withWriteResult(boolean writeResult) {
        this.writeResult = writeResult;
        return this;
    }"
8233,withFilePersistenceResult,"    FilePersistenceFixtures withFilePersistenceResult(FilePersistenceResult filePersistenceResult) {
        this.filePersistenceResult = filePersistenceResult;
        return this;
    }"
8234,aFilePersistence,"    static FilePersistenceFixtures aFilePersistence() {
        return new FilePersistenceFixtures();
    }"
8235,create,"    FilePersistence create() {
        FilePersistence filePersistence = new PathBasedFilePersistence();
        filePersistence.initialiseWith(context, storageRequirementRule);
        return filePersistence;
    }"
8236,withStorageRequirementRules,"    void withStorageRequirementRules(StorageRequirementRule storageRequirementRule) {
        this.storageRequirementRule = storageRequirementRule;
    }"
8238,getCurrentSize,"    long getCurrentSize(FilePath filePath);
"
8239,delete,"    void delete(FilePath absoluteFilePath);
"
8240,write,"    boolean write(byte[] buffer, int offset, int numberOfBytesToWrite);
"
8241,create,"    FilePersistenceResult create(FilePath absoluteFilePath, FileSize fileSize);
"
8242,initialiseWith,"    void initialiseWith(Context context, StorageRequirementRule storageRequirementRule);
"
8243,isUnknown,"            public boolean isUnknown() {
                return isUnknown;
            }"
8244,path,"            public String path() {
                return rawPath;
            }"
8245,build,"    FilePath build() {
        return new FilePath() {
            @Override"
8246,withUnknown,"    FilePathFixtures withUnknown(boolean unknown) {
        isUnknown = unknown;
        return this;
    }"
8247,withRawPath,"    FilePathFixtures withRawPath(String rawPath) {
        this.rawPath = rawPath;
        return this;
    }"
8248,aFilePath,"    static FilePathFixtures aFilePath() {
        return new FilePathFixtures();
    }"
8249,returnsFilePath_whenAssetUrlAlreadyContainsBasePath,"    public void returnsFilePath_whenAssetUrlAlreadyContainsBasePath() {
        String assetUrl = BASE_PATH + ""foo/bar/10MB.zip"";

        FilePath filePath = FilePathCreator.create(BASE_PATH, assetUrl);

        String expectedAbsolutePath = ""/data/data/com.novoda.downloadmanager.demo.simple/files/foo/bar/10MB.zip"";"
8250,returnsFilePath_whenAssetUrlContainsSubdirectories,"    public void returnsFilePath_whenAssetUrlContainsSubdirectories() {
        String assetUrl = ""foo/bar/10MB.zip"";

        FilePath filePath = FilePathCreator.create(BASE_PATH, assetUrl);

        String expectedAbsolutePath = ""/data/data/com.novoda.downloadmanager.demo.simple/files/foo/bar/10MB.zip"";"
8251,returnsFilePath_whenAssetUrlOnlyContainsFileName,"    public void returnsFilePath_whenAssetUrlOnlyContainsFileName() {
        String assetUrl = ""10MB.zip"";

        FilePath filePath = FilePathCreator.create(BASE_PATH, assetUrl);

        String expectedAbsolutePath = ""/data/data/com.novoda.downloadmanager.demo.simple/files/10MB.zip"";"
8252,returnsUnknownFilePath,"    public void returnsUnknownFilePath() {
        FilePath filePath = FilePathCreator.unknownFilePath();

        String expectedAbsolutePath = ""unknown"";
        assertThat(filePath).isEqualTo(new LiteFilePath(expectedAbsolutePath));"
8253,returnsFilePath,"    public void returnsFilePath() {
        FilePath filePath = FilePathCreator.create(""foo/bar/10MB.zip"");

        String expectedAbsolutePath = ""foo/bar/10MB.zip"";
        assertThat(filePath).isEqualTo(new LiteFilePath(expectedAbsolutePath));"
8255,create,"    public static FilePath create(String absolutePath) {
        return new LiteFilePath(absolutePath);
    }"
8256,create,"    public static FilePath create(String basePath, String rawPath) {
        String relativePath = removeSubstring(rawPath, basePath);
        String absolutePath = basePath + relativePath;
        return new LiteFilePath(absolutePath);
    }"
8257,unknownFilePath,"    public static FilePath unknownFilePath() {
        return UNKNOWN_FILEPATH;
    }"
8260,fileDownloaderCreator,"    FileDownloaderCreator fileDownloaderCreator() {
        return fileDownloaderCreator;
    }"
8261,fileSizeRequester,"    FileSizeRequester fileSizeRequester() {
        return fileSizeRequester;
    }"
8262,filePersistenceCreator,"    FilePersistenceCreator filePersistenceCreator() {
        return filePersistenceCreator;
    }"
8263,returnsFileName_whenAssetUrlContainsSubdirectories,"    public void returnsFileName_whenAssetUrlContainsSubdirectories() {
        String assetUrl = ""foo/bar/10MB.zip"";

        String fileName = FileNameExtractor.extractFrom(assetUrl);
"
8264,returnsFileName_whenAssetUrlOnlyContainsFileName,"    public void returnsFileName_whenAssetUrlOnlyContainsFileName() {
        String assetUrl = ""10MB.zip"";

        String fileName = FileNameExtractor.extractFrom(assetUrl);
"
8265,extractFrom,"    static String extractFrom(String assetUrl) {
        String[] subPaths = assetUrl.split(PATH_SEPARATOR);
        return subPaths.length == 0 ? assetUrl : subPaths[subPaths.length - 1];
    }"
8266,createCustomFileDownloader,"    private FileDownloader createCustomFileDownloader() {
        if (customClass == null) {
            throw new CustomFileDownloaderException(""CustomFileDownloader class cannot be accessed, is it public?"");
        }"
8267,create,"    FileDownloader create() {
        FileDownloader fileDownloader;

        switch (type) {
            case NETWORK:"
8268,newCustomFileDownloaderCreator,"    static FileDownloaderCreator newCustomFileDownloaderCreator(Class<? extends FileDownloader> customClass) {
        return new FileDownloaderCreator(FileDownloaderType.CUSTOM, customClass, null);
    }"
8269,newNetworkFileDownloaderCreator,"    static FileDownloaderCreator newNetworkFileDownloaderCreator(HttpClient httpClient) {
        return new FileDownloaderCreator(FileDownloaderType.NETWORK, null, httpClient);
    }"
8272,onBytesRead,"        void onBytesRead(byte[] buffer, int bytesRead);
"
8274,startDownloading,"    void startDownloading(String url, FileSize fileSize, Callback callback);
"
8276,update,"        public void update(DownloadBatchStatus downloadBatchStatus) {
"
8278,createsCustomThrottle,"    public void createsCustomThrottle() {
        FileCallbackThrottle fileCallbackThrottle = CallbackThrottleCreator.byCustomThrottle(TestValidCustomThrottle.class)
                .create();
"
8279,throwsException_whenCustomCallbackIsNotInstantiable,"    public void throwsException_whenCustomCallbackIsNotInstantiable() {
        CallbackThrottleCreator.byCustomThrottle(TestNonInstantiableCustomThrottle.class)
                .create();"
8280,throwsException_whenCustomCallbackIsNotFound,"    public void throwsException_whenCustomCallbackIsNotFound() {
        CallbackThrottleCreator.byCustomThrottle(TestNotFoundCustomThrottle.class)
                .create();"
8281,throwsException_whenCustomCallbackIsNotPublic,"    public void throwsException_whenCustomCallbackIsNotPublic() {
        CallbackThrottleCreator.byCustomThrottle(TestNonPublicCustomThrottle.class)
                .create();"
8282,throwsException_whenCallbackThrottleDoesNotExist,"    public void throwsException_whenCallbackThrottleDoesNotExist() {
        CallbackThrottleCreator.byCustomThrottle(null)
                .create();"
8283,createsProgressThrottle,"    public void createsProgressThrottle() {
        FileCallbackThrottle fileCallbackThrottle = CallbackThrottleCreator.byProgressIncrease()
                .create();
"
8284,createsTimeThrottle,"    public void createsTimeThrottle() {
        FileCallbackThrottle fileCallbackThrottle = CallbackThrottleCreator.byTime(TimeUnit.SECONDS, 1)
                .create();
"
8285,doesNotEmitLastStatus_whenCallbackAbsent,"    public void doesNotEmitLastStatus_whenCallbackAbsent() {
        callbackThrottleByTime.stopUpdates();

        verifyZeroInteractions(callback);"
8286,emitsLastStatus_whenStoppingUpdates,"    public void emitsLastStatus_whenStoppingUpdates() {
        callbackThrottleByTime.setCallback(callback);

        callbackThrottleByTime.stopUpdates();
"
8287,cancelsAllScheduledActions_whenStoppingUpdates,"    public void cancelsAllScheduledActions_whenStoppingUpdates() {
        callbackThrottleByTime.stopUpdates();

        verify(actionScheduler).cancelAll();"
8288,emitsStatus_whenSchedulingUniqueAction,"    public void emitsStatus_whenSchedulingUniqueAction() {
        callbackThrottleByTime.setCallback(callback);

        callbackThrottleByTime.update(downloadBatchStatus);
"
8289,doesNotSchedule_whenActionAlreadyScheduled,"    public void doesNotSchedule_whenActionAlreadyScheduled() {
        given(actionScheduler.isScheduled(any(ActionScheduler.Action.class))).willReturn(true);
        callbackThrottleByTime.setCallback(callback);

        callbackThrottleByTime.update(downloadBatchStatus);
"
8290,doesNothing_whenCallbackIsAbsent,"    public void doesNothing_whenCallbackIsAbsent() {
        callbackThrottleByTime.update(downloadBatchStatus);

        verifyZeroInteractions(actionScheduler, callback, downloadBatchStatus);"
8292,stopUpdates,"    public void stopUpdates() {
        if (callback != null) {
            callback.onUpdate(downloadBatchStatus);
        }"
8293,perform,"        public void perform() {
            callback.onUpdate(downloadBatchStatus);
        }"
8294,update,"    public void update(DownloadBatchStatus downloadBatchStatus) {
        if (callback == null) {
            Logger.w(""A DownloadBatchStatusCallback must be set before an update is called."");
            return;
        }"
8296,givenPreviousUpdate,"    private void givenPreviousUpdate(DownloadBatchStatus downloadBatchStatus) {
        callbackThrottleByProgressIncrease.update(downloadBatchStatus);
        reset(downloadBatchCallback);
    }"
8297,doesNothing_whenStoppingUpdates,"    public void doesNothing_whenStoppingUpdates() {
        callbackThrottleByProgressIncrease.setCallback(downloadBatchCallback);
        callbackThrottleByProgressIncrease.stopUpdates();

        callbackThrottleByProgressIncrease.update(percentageIncreasedStatus);
"
8298,doesNotEmit_whenPercentageIsUnchanged,"    public void doesNotEmit_whenPercentageIsUnchanged() {
        callbackThrottleByProgressIncrease.setCallback(downloadBatchCallback);
        givenPreviousUpdate(percentageIncreasedStatus);

        callbackThrottleByProgressIncrease.update(percentageIncreasedStatus);
"
8299,doesNothing_whenDownloadBatchStatusIsUnchanged,"    public void doesNothing_whenDownloadBatchStatusIsUnchanged() {
        callbackThrottleByProgressIncrease.setCallback(downloadBatchCallback);
        givenPreviousUpdate(percentageIncreasedStatus);

        callbackThrottleByProgressIncrease.update(percentageIncreasedStatus);
        then(downloadBatchCallback).should(never()).onUpdate(percentageIncreasedStatus);"
8300,doesNothing_whenCallbackUnset,"    public void doesNothing_whenCallbackUnset() {
        callbackThrottleByProgressIncrease.update(percentageIncreasedStatus);

        then(downloadBatchCallback).should(never()).onUpdate(percentageIncreasedStatus);"
8301,stopUpdates,"    public void stopUpdates() {
        callback = null;
    }"
8302,progressHasChanged,"    private boolean progressHasChanged(DownloadBatchStatus currentDownloadBatchStatus) {
        int newProgress = currentDownloadBatchStatus.percentageDownloaded();
        return currentProgress != newProgress;
    }"
8303,update,"    public void update(DownloadBatchStatus currentDownloadBatchStatus) {
        if (callback == null) {
            Logger.w(""A DownloadBatchStatusCallback must be set before an update is called."");
            return;"
8306,update,"    void update(DownloadBatchStatus downloadBatchStatus);
"
8307,setCallback,"    void setCallback(DownloadBatchStatusCallback callback);
"
8308,downloadFileIdFor,"    static DownloadFileId downloadFileIdFor(DownloadBatchId downloadBatchId, BatchFile batchFile) {
        String fallbackId = downloadBatchId.rawId() + batchFile.networkAddress();
        return batchFile.downloadFileId().or(DownloadFileIdCreator.createFrom(fallbackId));
    }"
8310,update,"    public boolean update(DownloadBatchId downloadBatchId, boolean notificationSeen) {
        return true;
    }"
8311,update,"    public boolean update(DownloadBatchId downloadBatchId, DownloadBatchStatus.Status status) {
        return true;
    }"
8312,delete,"    public boolean delete(DownloadBatchId downloadBatchId) {
        return true;
    }"
8314,loadAllFiles,"    public List<DownloadsFilePersisted> loadAllFiles() {
        List<DownloadsFilePersisted> allFiles = new ArrayList<>();
        for (Map.Entry<DownloadsBatchPersisted, List<DownloadsFilePersisted>> entry : filesByBatches.entrySet()) {
            allFiles.addAll(entry.getValue());
        }"
8316,loadBatches,"    public List<DownloadsBatchPersisted> loadBatches() {
        Set<DownloadsBatchPersisted> batches = filesByBatches.keySet();
        return new ArrayList<>(batches);
    }"
8321,persistCompletedBatch,"    void persistCompletedBatch(CompletedDownloadBatch completedDownloadBatch);
}"
8322,update,"    boolean update(DownloadBatchId downloadBatchId, boolean notificationSeen);
"
8323,update,"    boolean update(DownloadBatchId downloadBatchId, DownloadBatchStatus.Status status);
"
8324,delete,"    boolean delete(DownloadBatchId downloadBatchId);
"
8325,loadFiles,"    List<DownloadsFilePersisted> loadFiles(DownloadBatchId batchId);
"
8326,loadAllFiles,"    List<DownloadsFilePersisted> loadAllFiles();
"
8327,persistFile,"    void persistFile(DownloadsFilePersisted filePersisted);
"
8328,loadBatches,"    List<DownloadsBatchPersisted> loadBatches();
"
8329,persistBatch,"    void persistBatch(DownloadsBatchPersisted batchPersisted);
"
8333,updateNotificationSeenAsync,"    void updateNotificationSeenAsync(DownloadBatchStatus downloadBatchStatus, boolean notificationSeen);
}"
8335,createEnabled,"    static void createEnabled(Context context, LiteDownloadManager liteDownloadManager, ConnectionType connectionType) {
        DownloadsNetworkRecoveryCreator.singleInstance = new LiteDownloadsNetworkRecoveryEnabled(context, liteDownloadManager, connectionType);
    }"
8336,createDisabled,"    static void createDisabled() {
        DownloadsNetworkRecoveryCreator.singleInstance = DownloadsNetworkRecovery.DISABLED;
    }"
8339,updateAllowedConnectionType,"    void updateAllowedConnectionType(ConnectionType allowedConnectionType);
"
8343,persistSync,"    boolean persistSync(DownloadBatchId downloadBatchId,
                        FilePath filePath,
                        FileSize fileSize,
                        String url,
                        DownloadFileStatus downloadFileStatus) {
        if (downloadFileStatus.status() == DownloadFileStatus.Status.DELETED) {"
8344,downloadFileId,"            public DownloadFileId downloadFileId() {
                return downloadFileId;
            }"
8345,url,"            public String url() {
                return url;
            }"
8346,totalFileSize,"            public long totalFileSize() {
                return totalFileSize;
            }"
8347,filePath,"            public FilePath filePath() {
                return filePath;
            }"
8348,downloadBatchId,"            public DownloadBatchId downloadBatchId() {
                return downloadBatchId;
            }"
8349,build,"    DownloadsFilePersisted build() {
        return new DownloadsFilePersisted() {
            @Override"
8350,withDownloadFileId,"    DownloadsFilePersistedFixtures withDownloadFileId(DownloadFileId downloadFileId) {
        this.downloadFileId = downloadFileId;
        return this;
    }"
8351,withUrl,"    DownloadsFilePersistedFixtures withUrl(String url) {
        this.url = url;
        return this;
    }"
8352,withTotalFileSize,"    DownloadsFilePersistedFixtures withTotalFileSize(long fileSize) {
        totalFileSize = fileSize;
        return this;
    }"
8353,withFilePath,"    DownloadsFilePersistedFixtures withFilePath(FilePath filePath) {
        this.filePath = filePath;
        return this;
    }"
8354,withDownloadBatchId,"    DownloadsFilePersistedFixtures withDownloadBatchId(DownloadBatchId downloadBatchId) {
        this.downloadBatchId = downloadBatchId;
        return this;
    }"
8355,aDownloadsFilePersisted,"    static DownloadsFilePersistedFixtures aDownloadsFilePersisted() {
        return new DownloadsFilePersistedFixtures();
    }"
8361,download,"    void download(DownloadBatch downloadBatch, DownloadBatchStatusCallback callback);
}"
8362,persistCompletedBatch,"    boolean persistCompletedBatch(CompletedDownloadBatch completedDownloadBatch);
}"
8363,updateStatusAsync,"    void updateStatusAsync(DownloadBatchId downloadBatchId, DownloadBatchStatus.Status status);
"
8364,onDeleted,"        void onDeleted(DownloadBatchId downloadBatchId);
    }"
8365,onLoaded,"        void onLoaded(List<DownloadBatch> downloadBatches);
    }"
8366,persistCompletedBatch,"    public boolean persistCompletedBatch(CompletedDownloadBatch completedDownloadBatch) {
        downloadsPersistence.startTransaction();

        try {"
8367,updateNotificationSeenAsync,"    public void updateNotificationSeenAsync(DownloadBatchStatus downloadBatchStatus, boolean notificationSeen) {
        executor.execute(() -> {
            downloadsPersistence.startTransaction();"
8368,updateStatusAsync,"    public void updateStatusAsync(DownloadBatchId downloadBatchId, DownloadBatchStatus.Status status) {
        executor.execute(() -> {
            downloadsPersistence.startTransaction();"
8369,deleteSync,"    boolean deleteSync(DownloadBatchStatus downloadBatchStatus) {
        DownloadBatchId downloadBatchId = downloadBatchStatus.getDownloadBatchId();
        downloadsPersistence.startTransaction();
        try {
            if (downloadsPersistence.delete(downloadBatchId)) {"
8370,deleteAsync,"    void deleteAsync(DownloadBatchStatus downloadBatchStatus, DeleteCallback deleteCallback) {
        executor.execute(() -> {
            if (deleteSync(downloadBatchStatus)) {"
8372,loadAsync,"    void loadAsync(FileOperations fileOperations, LoadBatchesCallback callback) {
        executor.execute(() -> {
            List<DownloadsBatchPersisted> batchPersistedList = downloadsPersistence.loadBatches();"
8373,persist,"    void persist(DownloadBatchTitle downloadBatchTitle,
                 DownloadBatchId downloadBatchId,
                 DownloadBatchStatus.Status status,
                 List<DownloadFile> downloadFiles,
                 long downloadedDateTimeInMillis,"
8374,persistAsync,"    void persistAsync(DownloadBatchTitle downloadBatchTitle,
                      DownloadBatchId downloadBatchId,
                      DownloadBatchStatus.Status status,"
8375,storageRoot,"            public String storageRoot() {
                return storageRoot;
            }"
8376,notificationSeen,"            public boolean notificationSeen() {
                return notificationSeen;
            }"
8377,downloadedDateTimeInMillis,"            public long downloadedDateTimeInMillis() {
                return downloadedDateTimeInMillis;
            }"
8378,downloadBatchTitle,"            public DownloadBatchTitle downloadBatchTitle() {
                return downloadBatchTitle;
            }"
8379,downloadBatchStatus,"            public DownloadBatchStatus.Status downloadBatchStatus() {
                return downloadBatchStatus;
            }"
8381,build,"    DownloadsBatchPersisted build() {
        return new DownloadsBatchPersisted() {
            @Override"
8382,withStorageRoot,"    DownloadsBatchPersistedFixtures withStorageRoot(String storageRoot) {
        this.storageRoot = storageRoot;
        return this;
    }"
8383,withNotificationSeen,"    DownloadsBatchPersistedFixtures withNotificationSeen(boolean notificationSeen) {
        this.notificationSeen = notificationSeen;
        return this;
    }"
8384,withDownloadedDateTimeInMillis,"    DownloadsBatchPersistedFixtures withDownloadedDateTimeInMillis(long downloadedDateTimeInMillis) {
        this.downloadedDateTimeInMillis = downloadedDateTimeInMillis;
        return this;
    }"
8385,asString,"            public String asString() {
                return title;
            }"
8386,withDownloadBatchTitle,"    DownloadsBatchPersistedFixtures withDownloadBatchTitle(final String title) {
        this.downloadBatchTitle = new DownloadBatchTitle() {
            @Override
            public String asString() {"
8387,withDownloadBatchStatus,"    DownloadsBatchPersistedFixtures withDownloadBatchStatus(DownloadBatchStatus.Status status) {
        this.downloadBatchStatus = status;
        return this;
    }"
8388,withRawDownloadBatchId,"    DownloadsBatchPersistedFixtures withRawDownloadBatchId(final String rawId) {
        downloadBatchId = aDownloadBatchId().withRawDownloadBatchId(rawId).build();
        return this;
    }"
8389,aDownloadsBatchPersisted,"    static DownloadsBatchPersistedFixtures aDownloadsBatchPersisted() {
        return new DownloadsBatchPersistedFixtures();
    }"
8393,downloadBatchTitle,"    DownloadBatchTitle downloadBatchTitle();
"
8394,downloadBatchStatus,"    DownloadBatchStatus.Status downloadBatchStatus();
"
8396,stop,"    void stop(boolean removeNotification);
}"
8397,start,"    void start(int id, Notification notification);
"
8399,createCompletedNotification,"        private Notification createCompletedNotification(NotificationCompat.Builder builder) {
            String content = resources.getString(R.string.download_notification_content_completed);
            return builder
                    .setContentText(content)"
8400,createErrorNotification,"        private Notification createErrorNotification(NotificationCompat.Builder builder, DownloadError downloadError) {
            String content = resources.getString(R.string.download_notification_content_error, downloadError.type().name());
            return builder
                    .setContentText(content)"
8401,createDeletedNotification,"        private Notification createDeletedNotification(NotificationCompat.Builder builder) {
            String content = resources.getString(R.string.download_notification_content_deleted);
            return builder
                    .setContentText(content)"
8402,customNotificationFrom,"        public Notification customNotificationFrom(NotificationCompat.Builder builder, DownloadBatchStatus payload) {
            DownloadBatchTitle downloadBatchTitle = payload.getDownloadBatchTitle();
            String title = downloadBatchTitle.asString();
            builder.setSmallIcon(notificationIcon)
                    .setContentTitle(title);
"
8403,notificationDisplayState,"        public NotificationDisplayState notificationDisplayState(DownloadBatchStatus payload) {
            DownloadBatchStatus.Status status = payload.status();
            if (status == DOWNLOADED || status == DELETED || status == DELETING || status == ERROR || status == PAUSED) {
                return NotificationDisplayState.STACK_NOTIFICATION_DISMISSIBLE;"
8404,getCallbackThrottleCreator,"    private CallbackThrottleCreator getCallbackThrottleCreator(CallbackThrottleCreator.Type callbackThrottleType,
                                                               TimeUnit timeUnit,
                                                               long frequency,"
8406,onServiceConnected,"            public void onServiceConnected(ComponentName name, IBinder service) {
                if (service instanceof LiteDownloadService.DownloadServiceBinder) {
                    LiteDownloadService.DownloadServiceBinder binder = (LiteDownloadService.DownloadServiceBinder) service;"
8408,withLogHandle,"    public DownloadManagerBuilder withLogHandle(LogHandle logHandle) {
        this.logHandle = Optional.fromNullable(logHandle);
        return this;
    }"
8409,withCallbackThrottleByProgressIncrease,"    public DownloadManagerBuilder withCallbackThrottleByProgressIncrease() {
        this.callbackThrottleCreatorType = CallbackThrottleCreator.Type.THROTTLE_BY_PROGRESS_INCREASE;
        return this;
    }"
8410,withCallbackThrottleByTime,"    public DownloadManagerBuilder withCallbackThrottleByTime(TimeUnit timeUnit, long frequency) {
        this.callbackThrottleCreatorType = CallbackThrottleCreator.Type.THROTTLE_BY_TIME;
        this.timeUnit = timeUnit;
        this.frequency = frequency;
        return this;
    }"
8411,withCallbackThrottleCustom,"    public DownloadManagerBuilder withCallbackThrottleCustom(Class<? extends FileCallbackThrottle> customCallbackThrottle) {
        this.callbackThrottleCreatorType = CallbackThrottleCreator.Type.CUSTOM;
        this.customCallbackThrottle = customCallbackThrottle;
        return this;
    }"
8412,withoutNetworkRecovery,"    public DownloadManagerBuilder withoutNetworkRecovery() {
        allowNetworkRecovery = false;
        return this;
    }"
8413,withAllowedConnectionType,"    public DownloadManagerBuilder withAllowedConnectionType(ConnectionType connectionTypeAllowed) {
        this.connectionTypeAllowed = connectionTypeAllowed;
        return this;
    }"
8414,withNotification,"    public DownloadManagerBuilder withNotification(NotificationCustomizer<DownloadBatchStatus> notificationCustomizer) {
        this.notificationCreator = new DownloadBatchStatusNotificationCreator(
                applicationContext,
                notificationCustomizer,"
8415,withNotificationChannel,"    public DownloadManagerBuilder withNotificationChannel(String channelId, String name, @Importance int importance) {
        this.notificationChannelProvider = new DefaultNotificationChannelProvider(channelId, name, importance);
        this.notificationCreator.setNotificationChannelProvider(notificationChannelProvider);
        return this;
    }"
8416,withNotificationChannel,"    public DownloadManagerBuilder withNotificationChannel(NotificationChannel notificationChannel) {
        this.notificationChannelProvider = new OreoNotificationChannelProvider(notificationChannel);
        this.notificationCreator.setNotificationChannelProvider(notificationChannelProvider);
        return this;
    }"
8417,withDownloadsPersistenceCustom,"    public DownloadManagerBuilder withDownloadsPersistenceCustom(DownloadsPersistence downloadsPersistence) {
        this.downloadsPersistence = downloadsPersistence;
        return this;
    }"
8418,withDownloadBatchRequirementRules,"    public DownloadManagerBuilder withDownloadBatchRequirementRules(DownloadBatchRequirementRule... downloadBatchRequirementRules) {
        for (DownloadBatchRequirementRule downloadBatchRequirementRule : downloadBatchRequirementRules) {
            this.downloadBatchRequirementRules.addRule(downloadBatchRequirementRule);
        }"
8419,withStorageRequirementRules,"    public DownloadManagerBuilder withStorageRequirementRules(StorageRequirementRule... storageRequirementRules) {
        for (StorageRequirementRule storageRequirementRule : storageRequirementRules) {
            this.storageRequirementRules.addRule(storageRequirementRule);
        }"
8423,addCompletedBatch,"    boolean addCompletedBatch(CompletedDownloadBatch completedDownloadBatch);
}"
8425,getDownloadFileStatusWithMatching,"    void getDownloadFileStatusWithMatching(DownloadBatchId downloadBatchId, DownloadFileId downloadFileId, DownloadFileStatusCallback callback);
"
8426,getDownloadFileStatusWithMatching,"    DownloadFileStatus getDownloadFileStatusWithMatching(DownloadBatchId downloadBatchId, DownloadFileId downloadFileId);
"
8427,getAllDownloadBatchStatuses,"    void getAllDownloadBatchStatuses(AllBatchStatusesCallback callback);
"
8428,getAllDownloadBatchStatuses,"    List<DownloadBatchStatus> getAllDownloadBatchStatuses();
"
8429,submitAllStoredDownloads,"    void submitAllStoredDownloads(AllStoredDownloadsSubmittedCallback callback);
"
8430,removeDownloadBatchCallback,"    void removeDownloadBatchCallback(DownloadBatchStatusCallback downloadBatchCallback);
"
8431,addDownloadBatchCallback,"    void addDownloadBatchCallback(DownloadBatchStatusCallback downloadBatchCallback);
"
8432,delete,"    void delete(DownloadBatchId downloadBatchId);
"
8433,resume,"    void resume(DownloadBatchId downloadBatchId);
"
8434,pause,"    void pause(DownloadBatchId downloadBatchId);
"
8436,build,"    InternalDownloadFileStatus build() {
        return new LiteDownloadFileStatus(
                downloadBatchId,"
8437,withLocalFilePath,"    public DownloadFileStatusFixtures withLocalFilePath(FilePath localFilePath) {
        this.localFilePath = localFilePath;
        return this;
    }"
8438,withFileSize,"    DownloadFileStatusFixtures withFileSize(FileSize fileSize) {
        this.fileSize = fileSize;
        return this;
    }"
8439,withStatus,"    DownloadFileStatusFixtures withStatus(InternalDownloadFileStatus.Status status) {
        this.status = status;
        return this;
    }"
8440,withDownloadFileId,"    DownloadFileStatusFixtures withDownloadFileId(DownloadFileId downloadFileId) {
        this.downloadFileId = downloadFileId;
        return this;
    }"
8441,withDownloadBatchId,"    public DownloadFileStatusFixtures withDownloadBatchId(DownloadBatchId downloadBatchId) {
        this.downloadBatchId = downloadBatchId;
        return this;
    }"
8442,aDownloadFileStatus,"    static DownloadFileStatusFixtures aDownloadFileStatus() {
        return new DownloadFileStatusFixtures();
    }"
8443,onReceived,"    void onReceived(@Nullable DownloadFileStatus downloadFileStatus);
}"
8450,build,"    DownloadFileId build() {
        return () -> rawDownloadFileId;
    }"
8451,withRawDownloadFileId,"    DownloadFileIdFixtures withRawDownloadFileId(String rawDownloadFileId) {
        this.rawDownloadFileId = rawDownloadFileId;
        return this;
    }"
8452,aDownloadFileId,"    static DownloadFileIdFixtures aDownloadFileId() {
        return new DownloadFileIdFixtures();
    }"
8453,createFrom,"    public static DownloadFileId createFrom(String rawId) {
        return new LiteDownloadFileId(rawId);
    }"
8455,build,"    DownloadFile build() {
        return new DownloadFile(
                downloadBatchId,"
8456,withDownloadsFilePersistence,"    DownloadFileFixtures withDownloadsFilePersistence(DownloadsFilePersistence downloadsFilePersistence) {
        this.downloadsFilePersistence = downloadsFilePersistence;
        return this;
    }"
8457,withFilePersistence,"    DownloadFileFixtures withFilePersistence(FilePersistence filePersistence) {
        this.filePersistence = filePersistence;
        return this;
    }"
8458,withFileSizeRequester,"    DownloadFileFixtures withFileSizeRequester(FileSizeRequester fileSizeRequester) {
        this.fileSizeRequester = fileSizeRequester;
        return this;
    }"
8459,withFileDownloader,"    DownloadFileFixtures withFileDownloader(FileDownloader fileDownloader) {
        this.fileDownloader = fileDownloader;
        return this;
    }"
8460,withFileSize,"    DownloadFileFixtures withFileSize(InternalFileSize fileSize) {
        this.fileSize = fileSize;
        return this;
    }"
8461,withFilePath,"    DownloadFileFixtures withFilePath(FilePath filePath) {
        this.filePath = filePath;
        return this;
    }"
8462,withDownloadFileStatus,"    DownloadFileFixtures withDownloadFileStatus(InternalDownloadFileStatus downloadFileStatus) {
        this.downloadFileStatus = downloadFileStatus;
        return this;
    }"
8463,withUrl,"    DownloadFileFixtures withUrl(String url) {
        this.url = url;
        return this;
    }"
8464,withDownloadFileId,"    DownloadFileFixtures withDownloadFileId(DownloadFileId downloadFileId) {
        this.downloadFileId = downloadFileId;
        return this;
    }"
8465,withDownloadBatchId,"    DownloadFileFixtures withDownloadBatchId(DownloadBatchId downloadBatchId) {
        this.downloadBatchId = downloadBatchId;
        return this;
    }"
8466,aDownloadFile,"    static DownloadFileFixtures aDownloadFile() {
        return new DownloadFileFixtures();
    }"
8468,onUpdate,"        void onUpdate(InternalDownloadFileStatus downloadFileStatus);
"
8469,fileStatus,"    DownloadFileStatus fileStatus() {
        return downloadFileStatus;
    }"
8470,matches,"    boolean matches(DownloadFileId downloadFileId) {
        return this.downloadFileId.equals(downloadFileId);
    }"
8471,id,"    DownloadFileId id() {
        return downloadFileStatus.downloadFileId();
    }"
8473,persist,"    boolean persist() {
        return downloadsFilePersistence.persistSync(
                downloadBatchId,"
8475,delete,"    void delete() {
        if (downloadFileStatus.isMarkedAsDownloading()) {
            downloadFileStatus.markAsDeleted();"
8476,waitForNetwork,"    void waitForNetwork() {
        downloadFileStatus.waitForNetwork();
        fileDownloader.stopDownloading();
    }"
8477,resume,"    void resume() {
        downloadFileStatus.markAsQueued();
    }"
8478,pause,"    void pause() {
        downloadFileStatus.markAsPaused();
        fileDownloader.stopDownloading();
    }"
8479,updateAndFeedbackWithStatus,"    private void updateAndFeedbackWithStatus(DownloadError downloadError, Callback callback) {
        downloadFileStatus.markAsError(downloadError);
        callback.onUpdate(downloadFileStatus);
    }"
8480,requestTotalFileSizeIfNecessary,"    private InternalFileSize requestTotalFileSizeIfNecessary(InternalFileSize fileSize) {
        InternalFileSize updatedFileSize = fileSize.copy();

        if (fileSize.isTotalSizeUnknown()) {
            FileSize requestFileSize = fileSizeRequester.requestFileSize(url);"
8481,convertError,"    private DownloadError convertError(FilePersistenceResult status) {
        switch (status) {
            case ERROR_UNKNOWN_TOTAL_FILE_SIZE:"
8482,onDownloadFinished,"            public void onDownloadFinished() {
                filePersistence.close();
                if (downloadFileStatus.isMarkedAsDeleted()) {
                    filePersistence.delete(filePath);
                    callback.onDelete();"
8483,onError,"            public void onError(String cause) {
                DownloadError downloadError = DownloadErrorFactory.createNetworkError(cause);
                updateAndFeedbackWithStatus(downloadError, callback);
            }"
8486,createUnknownErrorFor,"    static DownloadError createUnknownErrorFor(FilePersistenceResult status) {
        String unknownErrorMessage = ""Unhandled error for FilePersistenceResult: "" + status.name();
        return new DownloadError(DownloadError.Type.UNKNOWN, unknownErrorMessage);
    }"
8487,createNetworkError,"    static DownloadError createNetworkError(String networkErrorCause) {
        String networkErrorMessage = ""Network error, cannot download file. Cause: "" + networkErrorCause;
        return new DownloadError(DownloadError.Type.NETWORK_ERROR_CANNOT_DOWNLOAD_FILE, networkErrorMessage);
    }"
8488,createCannotWriteToFileError,"    static DownloadError createCannotWriteToFileError(DownloadFileStatus downloadFileStatus) {
        String cannotWriteToFileMessage = ""Cannot write to file with Id: "" + downloadFileStatus.downloadFileId().rawId();
        return new DownloadError(DownloadError.Type.FILE_CANNOT_BE_WRITTEN, cannotWriteToFileMessage);
    }"
8489,createInsufficientFreeSpaceError,"    static DownloadError createInsufficientFreeSpaceError(DownloadFileStatus downloadFileStatus) {
        String insufficientFreeSpaceMessage =
                ""Insufficient free space to create file with ID: ""
                        + downloadFileStatus.downloadFileId().rawId()"
8490,createTotalSizeRequestFailedError,"    static DownloadError createTotalSizeRequestFailedError(DownloadFileId downloadFileId, String url) {
        String totalSizeRequestFailedMessage = ""Total size request failed for File with ID: ""
                + downloadFileId.rawId()
                + "" and Request: """
8491,createSizeMismatchError,"    static DownloadError createSizeMismatchError(DownloadFileStatus downloadFileStatus) {
        String sizeMismatchMessage = ""Download File with ID: ""
                + downloadFileStatus.downloadBatchId().rawId()
                + "" has a greater current size: """
8492,toString,"    public String toString() {
        return ""DownloadError{""
                + ""type="" + type"
8493,hashCode,"    public int hashCode() {
        int result = type != null ? type.hashCode() : 0;
        result = 31 * result + (message != null ? message.hashCode() : 0);
        return result;
    }"
8495,message,"    public String message() {
        return message;
    }"
8496,type,"    public Type type() {
        return type;
    }"
8497,asString,"            public String asString() {
                return rawBatchTitle;
            }"
8498,build,"    DownloadBatchTitle build() {
        return new DownloadBatchTitle() {
            @Override"
8499,withRawBatchTitle,"    DownloadBatchTitleFixtures withRawBatchTitle(String rawBatchTitle) {
        this.rawBatchTitle = rawBatchTitle;
        return this;
    }"
8500,aDownloadBatchTitle,"    static DownloadBatchTitleFixtures aDownloadBatchTitle() {
        return new DownloadBatchTitleFixtures();
    }"
8501,createFrom,"    public static DownloadBatchTitle createFrom(String title) {
        return new LiteDownloadBatchTitle(title);
    }"
8502,createFrom,"    public static DownloadBatchTitle createFrom(Batch batch) {
        return new LiteDownloadBatchTitle(batch.title());
    }"
8509,createMessageFrom,"    private String createMessageFrom(DownloadBatchStatus downloadBatchStatus) {
        String status = getStatusMessage(downloadBatchStatus);

        return ""Batch "" + downloadBatchStatus.getDownloadBatchTitle().asString()"
8510,update,"    public void update(DownloadBatchStatus downloadBatchStatus) {
        statusTextView.setText(createMessageFrom(downloadBatchStatus));
    }"
8512,onFinishInflate,"    protected void onFinishInflate() {
        super.onFinishInflate();
        View.inflate(getContext(), R.layout.merge_download_batch_status, this);

        statusTextView = findViewById(R.id.download_batch_status);

        findViewById(R.id.button_pause_downloading).setOnClickListener(view -> downloadBatchStatusListener.onBatchPaused());"
8513,setsDownloadServiceOnNotificationDispatcher,"    public void setsDownloadServiceOnNotificationDispatcher() {
        DownloadService downloadService = mock(LiteDownloadService.class);

        downloadBatchStatusNotificationDispatcher.setDownloadService(downloadService);
"
8514,updatesNotification_whenNotificationHasNotBeenSeen,"    public void updatesNotification_whenNotificationHasNotBeenSeen() {
        InternalDownloadBatchStatus notificationNotSeenStatus = anInternalDownloadsBatchStatus().withNotificationSeen(false).build();

        downloadBatchStatusNotificationDispatcher.updateNotification(notificationNotSeenStatus);
"
8515,doesNothing_whenNotificationHasBeenSeen,"    public void doesNothing_whenNotificationHasBeenSeen() {
        InternalDownloadBatchStatus notificationSeenStatus = anInternalDownloadsBatchStatus().withNotificationSeen(true).build();

        downloadBatchStatusNotificationDispatcher.updateNotification(notificationSeenStatus);
"
8516,updatesNotificationSeen_whenStatusIsDownloaded,"    public void updatesNotificationSeen_whenStatusIsDownloaded() {
        InternalDownloadBatchStatus downloadedBatchStatus = anInternalDownloadsBatchStatus().withStatus(DownloadBatchStatus.Status.DOWNLOADED).build();

        downloadBatchStatusNotificationDispatcher.updateNotification(downloadedBatchStatus);
"
8519,notificationIsNotMarkedAsSeenYet,"    private boolean notificationIsNotMarkedAsSeenYet(DownloadBatchStatus downloadBatchStatus, String rawDownloadBatchId) {
        return downloadBatchStatus.status() == DOWNLOADED && !downloadBatchIdNotificationSeen.contains(rawDownloadBatchId);
    }"
8521,notificationDisplayState,"            public NotificationCustomizer.NotificationDisplayState notificationDisplayState() {
                return notificationCustomizer.notificationDisplayState(downloadBatchStatus);
            }"
8522,hasChanged,"            private boolean hasChanged(int notificationId, DownloadBatchStatus.Status status) {
                return previousNotificationId != notificationId || !previousStatus.equals(status);
            }"
8525,createNotification,"    public NotificationInformation createNotification(final DownloadBatchStatus downloadBatchStatus) {
        return new NotificationInformation() {
            @Override"
8527,givenPreviousUpdate,"    private void givenPreviousUpdate(InternalDownloadBatchStatus downloadBatchStatus) {
        downloadBatchStatusFilter.shouldFilterOut(downloadBatchStatus);
    }"
8528,returnsTrue_whenStatusIsUnchanged,"    public void returnsTrue_whenStatusIsUnchanged() {
        givenPreviousUpdate(firstStatus);

        boolean shouldFilterOut = downloadBatchStatusFilter.shouldFilterOut(firstStatus);
"
8529,returnsFalse_whenStatusDoesNotMatchPrevious,"    public void returnsFalse_whenStatusDoesNotMatchPrevious() {
        givenPreviousUpdate(firstStatus);

        boolean shouldFilterOut = downloadBatchStatusFilter.shouldFilterOut(secondStatus);
"
8530,returnsTrue_whenErrorIsUnchanged,"    public void returnsTrue_whenErrorIsUnchanged() {
        givenPreviousUpdate(firstErrorStatus);

        boolean shouldFilterOut = downloadBatchStatusFilter.shouldFilterOut(firstErrorStatus);
"
8531,returnsFalse_whenErrorDoesNotMatchPrevious,"    public void returnsFalse_whenErrorDoesNotMatchPrevious() {
        givenPreviousUpdate(firstErrorStatus);

        boolean shouldFilterOut = downloadBatchStatusFilter.shouldFilterOut(secondErrorStatus);
"
8532,returnsTrue_whenPercentageIsUnchanged,"    public void returnsTrue_whenPercentageIsUnchanged() {
        givenPreviousUpdate(firstPercentageStatus);

        boolean shouldFilterOut = downloadBatchStatusFilter.shouldFilterOut(firstPercentageStatus);
"
8533,returnsFalse_whenPercentageDoesNotMatchPrevious,"    public void returnsFalse_whenPercentageDoesNotMatchPrevious() {
        givenPreviousUpdate(firstPercentageStatus);

        boolean shouldFilterOut = downloadBatchStatusFilter.shouldFilterOut(secondPercentageStatus);
"
8535,onUpdate,"    void onUpdate(DownloadBatchStatus downloadBatchStatus);
}"
8545,getDownloadBatchTitle,"    DownloadBatchTitle getDownloadBatchTitle();
"
8546,from,"        public static Status from(String rawValue) {
            for (Status status : Status.values()) {
                if (status.name().equals(rawValue)) {
                    return status;"
8547,toRawValue,"        public String toRawValue() {
            return this.name();
        }"
8548,hasViolatedRule,"    public boolean hasViolatedRule(DownloadBatchStatus downloadBatchStatus) {
        return batchSizeProvider.getMaxSizeOfBatch() < downloadBatchStatus.bytesTotalSize();
    }"
8550,hasViolatedRule,"    public boolean hasViolatedRule(DownloadBatchStatus downloadBatchStatus) {
        for (DownloadBatchRequirementRule requirementRule : rules) {
            if (requirementRule.hasViolatedRule(downloadBatchStatus)) {
                return true;"
8551,addRule,"    void addRule(DownloadBatchRequirementRule storageRequirementRule) {
        rules.add(storageRequirementRule);
    }"
8552,newInstance,"    static DownloadBatchRequirementRules newInstance() {
        return new DownloadBatchRequirementRules(new ArrayList<>());
    }"
8553,hasViolatedRule,"    boolean hasViolatedRule(DownloadBatchStatus downloadBatchStatus);
}"
8554,build,"    DownloadBatchId build() {
        return () -> rawDownloadBatchId;
    }"
8555,withRawDownloadBatchId,"    DownloadBatchIdFixtures withRawDownloadBatchId(String rawDownloadBatchId) {
        this.rawDownloadBatchId = rawDownloadBatchId;
        return this;
    }"
8556,aDownloadBatchId,"    static DownloadBatchIdFixtures aDownloadBatchId() {
        return new DownloadBatchIdFixtures();
    }"
8557,sanitizeBatchId,"    private static String sanitizeBatchId(String batchIdPath) {
        return batchIdPath.replaceAll(""[:\\\\/*?|<>]"", ""_"");
    }"
8558,createSanitizedFrom,"    public static DownloadBatchId createSanitizedFrom(String rawId) {
        String sanitizedBatchId = sanitizeBatchId(rawId);
        return new LiteDownloadBatchId(sanitizedBatchId);
    }"
8561,updateTotalSize,"    void updateTotalSize() {
        if (totalBatchSizeBytes == 0) {
            totalBatchSizeBytes = DownloadBatchSizeCalculator.getTotalSize(
                    downloadFiles,"
8562,persist,"    void persist() {
        downloadsBatchPersistence.persist(
                downloadBatchStatus.getDownloadBatchTitle(),"
8563,persistAsync,"    void persistAsync() {
        downloadsBatchPersistence.persistAsync(
                downloadBatchStatus.getDownloadBatchTitle(),"
8564,downloadFileStatusWith,"    DownloadFileStatus downloadFileStatusWith(DownloadFileId downloadFileId) {
        for (DownloadFile downloadFile : downloadFiles) {
            if (downloadFile.matches(downloadFileId)) {
                return downloadFile.fileStatus();"
8565,status,"    InternalDownloadBatchStatus status() {
        return downloadBatchStatus;
    }"
8567,isDirectoryEmpty,"    private boolean isDirectoryEmpty(File directory) {
        if (directory.isDirectory()) {
            String[] children = directory.list();
            return children == null || children.length == 0;"
8568,deleteDirectoriesIfEmpty,"    private void deleteDirectoriesIfEmpty(File batchRootDirectory) {
        if (batchRootDirectory.isDirectory()) {
            File[] nestedDirectories = batchRootDirectory.listFiles();
            if (nestedDirectories != null) {"
8569,deleteDownloadDirectories,"    private void deleteDownloadDirectories() {
        BatchStorageRoot batchStorageRoot = BatchStorageRoot.with(downloadBatchStatus::storageRoot, downloadBatchStatus.getDownloadBatchId());
        File batchRootDir = new File(batchStorageRoot.path());
        if (batchRootDir.exists()) {
            deleteDirectoriesIfEmpty(batchRootDir);"
8572,waitForNetwork,"    void waitForNetwork() {
        DownloadBatchStatus.Status status = downloadBatchStatus.status();
        if (status != DOWNLOADING) {
            Logger.v(BATCH + downloadBatchStatus.getDownloadBatchId().rawId()
                             + STATUS + status"
8576,onDelete,"        public void onDelete() {
            deleteDownloadDirectories();
        }"
8578,batchCannotContinue,"    private static boolean batchCannotContinue(InternalDownloadBatchStatus downloadBatchStatus,
                                               ConnectionChecker connectionChecker,
                                               DownloadsBatchPersistence downloadsBatchPersistence,
                                               DownloadBatchStatusCallback callback) {"
8580,markAsDownloadingIfNeeded,"    private static void markAsDownloadingIfNeeded(InternalDownloadBatchStatus downloadBatchStatus,
                                                  DownloadsBatchPersistence downloadsBatchPersistence,
                                                  DownloadBatchStatusCallback callback) {"
8582,connectionNotAllowedForDownload,"    private static boolean connectionNotAllowedForDownload(ConnectionChecker connectionChecker, DownloadBatchStatus.Status status) {
        return !connectionChecker.isAllowedToDownload() && status != DOWNLOADED;
    }"
8583,notifyCallback,"    private static void notifyCallback(DownloadBatchStatusCallback callback, InternalDownloadBatchStatus downloadBatchStatus) {
        if (callback != null) {
            callback.onUpdate(downloadBatchStatus.copy());"
8584,deleteBatchIfNeeded,"    private static void deleteBatchIfNeeded(InternalDownloadBatchStatus downloadBatchStatus,
                                            DownloadsBatchPersistence downloadsBatchPersistence,
                                            DownloadBatchStatusCallback callback) {"
8588,formatString,"    private static String formatString(Object... msg) {
        StringBuilder stringBuilder = new StringBuilder();
        for (Object o : msg) {
            stringBuilder.append(String.valueOf(o)).append(SEPARATOR);
        }"
8589,e,"    public void e(Throwable throwable, Object... message) {
        Log.e(TAG, formatString(message), throwable);
    }"
8590,e,"    public void e(Object... message) {
        Log.e(TAG, formatString(message));
    }"
8591,w,"    public void w(Throwable throwable, Object... message) {
        Log.w(TAG, formatString(message), throwable);
    }"
8592,w,"    public void w(Object... message) {
        Log.w(TAG, formatString(message));
    }"
8593,d,"    public void d(Throwable throwable, Object... message) {
        Log.d(TAG, formatString(message), throwable);
    }"
8594,d,"    public void d(Object... message) {
        Log.d(TAG, formatString(message));
    }"
8595,i,"    public void i(Object... message) {
        Log.i(TAG, formatString(message));
    }"
8596,v,"    public void v(Object... message) {
        Log.v(TAG, formatString(message));
    }"
8601,customHttpClient,"    private HttpClient customHttpClient() {
        OkHttpClient okHttpClient = new OkHttpClient.Builder()
                .connectTimeout(TIMEOUT, TimeUnit.SECONDS)
                .writeTimeout(TIMEOUT, TimeUnit.SECONDS)"
8602,createLiteDownloadManager,"    private void createLiteDownloadManager() {
        Handler handler = new Handler(Looper.getMainLooper());

        downloadManager = DownloadManagerBuilder"
8603,onCreate,"    public void onCreate() {
        super.onCreate();
        Stetho.initializeWithDefaults(this);
        createLiteDownloadManager();
    }"
8604,channelId,"    public String channelId() {
        return channelId;
    }"
8606,onUpdate,"            public void onUpdate(String updateMessage) {
                mainThreadHandler.post(() -> cloneCallback.onUpdate(updateMessage));
            }"
8615,requestFileSize,"    public FileSize requestFileSize(String url) {
        return FileSizeCreator.createFromTotalSize(FILE_TOTAL_SIZE);
    }"
8616,stopDownloading,"    public void stopDownloading() {
        Log.v(TAG, ""Stop downloading"");
        canDownload = false;
    }"
8617,startDownloading,"    public void startDownloading(String url, FileSize fileSize, Callback callback) {
        Log.v(TAG, ""Start downloading"");

        canDownload = true;

        while (canDownload && fileSize.currentSize() < fileSize.totalSize()) {
            try {"
8618,stopUpdates,"    public void stopUpdates() {
        Log.v(TAG, ""stopUpdates"");
    }"
8619,update,"    public void update(DownloadBatchStatus downloadBatchStatus) {
        Log.v(TAG, ""update "" + downloadBatchStatus.getDownloadBatchTitle().asString()
                + "", progress: "" + downloadBatchStatus.percentageDownloaded() + ""%"");

        if (callback == null) {"
8621,persistCompletedBatch,"    public void persistCompletedBatch(CompletedDownloadBatch completedDownloadBatch) {
        Log.v(TAG, ""Persist completed batch id: "" + completedDownloadBatch.downloadBatchId());
    }"
8622,update,"    public boolean update(DownloadBatchId downloadBatchId, boolean notificationSeen) {
        Log.v(TAG, ""update batch id: "" + downloadBatchId.rawId() + "" with notificationSeen: "" + notificationSeen);
        return true;
    }"
8623,update,"    public boolean update(DownloadBatchId downloadBatchId, DownloadBatchStatus.Status status) {
        Log.v(TAG, ""update batch id: "" + downloadBatchId.rawId() + "" with status: "" + status);
        return true;
    }"
8624,delete,"    public boolean delete(DownloadBatchId downloadBatchId) {
        Log.v(TAG, ""Delete batch id: "" + downloadBatchId.rawId());
        return true;
    }"
8625,loadFiles,"    public List<DownloadsFilePersisted> loadFiles(DownloadBatchId batchId) {
        Log.v(TAG, ""Load files for batch id: "" + batchId);
        return Collections.emptyList();
    }"
8626,loadAllFiles,"    public List<DownloadsFilePersisted> loadAllFiles() {
        Log.v(TAG, ""Load all files"");
        return Collections.emptyList();
    }"
8627,persistFile,"    public void persistFile(DownloadsFilePersisted filePersisted) {
        Log.v(TAG, ""Persist file id: "" + filePersisted.downloadFileId());
    }"
8628,loadBatches,"    public List<DownloadsBatchPersisted> loadBatches() {
        Log.v(TAG, ""Load batches"");
        return Collections.emptyList();
    }"
8629,persistBatch,"    public void persistBatch(DownloadsBatchPersisted batchPersisted) {
        Log.v(TAG, ""Persist batch id: "" + batchPersisted.downloadBatchId() + "", status: "" + batchPersisted.downloadBatchStatus());
    }"
8630,transactionSuccess,"    public void transactionSuccess() {
        Log.v(TAG, ""Transaction success"");
    }"
8631,endTransaction,"    public void endTransaction() {
        Log.v(TAG, ""End Transaction"");
    }"
8632,startTransaction,"    public void startTransaction() {
        Log.v(TAG, ""Start Transaction"");
    }"
8633,updateAllowedConnectionType,"    void updateAllowedConnectionType(ConnectionType allowedConnectionType) {
        this.allowedConnectionType = allowedConnectionType;
    }"
8634,isAllowedToDownload,"    boolean isAllowedToDownload() {
        switch (allowedConnectionType) {
            case UNMETERED:"
8635,toString,"    public String toString() {
        return ""CompletedDownloadFile{""
                + ""fileId='"" + fileId + '\''"
8638,asBatchFile,"    public BatchFile asBatchFile() {
        DownloadFileId downloadFileId = DownloadFileIdCreator.createFrom(fileId);
        return new BatchFile(
                originalNetworkAddress,"
8639,originalNetworkAddress,"    public String originalNetworkAddress() {
        return originalNetworkAddress;
    }"
8640,fileSize,"    public FileSize fileSize() {
        return fileSize;
    }"
8641,newFileLocation,"    public String newFileLocation() {
        return newFileLocation;
    }"
8642,originalFileLocation,"    public String originalFileLocation() {
        return originalFileLocation;
    }"
8643,fileId,"    public String fileId() {
        return fileId;
    }"
8648,extractMigrations,"    List<CompletedDownloadBatch> extractMigrations() {
        Cursor batchesCursor = database.rawQuery(BATCHES_QUERY);

        if (batchesCursor == null) {
            return Collections.emptyList();"
8649,toString,"    public String toString() {
        return ""CompletedDownloadBatch{""
                + ""downloadBatchId="" + downloadBatchId"
8652,asBatchFiles,"    private List<BatchFile> asBatchFiles() {
        List<BatchFile> batchFiles = new ArrayList<>(completedDownloadFiles.size());
        for (CompletedDownloadFile completedDownloadFile : completedDownloadFiles) {
            batchFiles.add(completedDownloadFile.asBatchFile());
        }"
8653,asBatch,"    public Batch asBatch() {
        return new Batch(
                storageRoot,"
8654,storageRoot,"    public StorageRoot storageRoot() {
        return storageRoot;
    }"
8655,completedDownloadFiles,"    public List<CompletedDownloadFile> completedDownloadFiles() {
        return completedDownloadFiles;
    }"
8659,createCallbackThrottle,"    private FileCallbackThrottle createCallbackThrottle() {
        if (customCallbackThrottle == null) {
            throw new CustomCallbackThrottleException(""CustomCallbackThrottle class cannot be accessed, is it public?"");
        }"
8660,create,"    FileCallbackThrottle create() {
        switch (type) {
            case THROTTLE_BY_TIME:"
8661,byCustomThrottle,"    static CallbackThrottleCreator byCustomThrottle(Class<? extends FileCallbackThrottle> customCallbackThrottle) {
        return new CallbackThrottleCreator(Type.CUSTOM, UNUSED_TIME_UNIT, UNUSED_FREQUENCY, customCallbackThrottle);
    }"
8662,byProgressIncrease,"    static CallbackThrottleCreator byProgressIncrease() {
        return new CallbackThrottleCreator(Type.THROTTLE_BY_PROGRESS_INCREASE, UNUSED_TIME_UNIT, UNUSED_FREQUENCY, NO_CUSTOM_CALLBACK_THROTTLE);
    }"
8663,byTime,"    static CallbackThrottleCreator byTime(TimeUnit timeUnit, long quantity) {
        return new CallbackThrottleCreator(Type.THROTTLE_BY_TIME, timeUnit, quantity, NO_CUSTOM_CALLBACK_THROTTLE);
    }"
8665,createFile,"    private static File createFile() {
        File file = mock(File.class);
        given(file.getPath()).willReturn(""any_path"");
        given(file.getUsableSpace()).willReturn(USABLE_THREE_HUNDRED_MB_IN_BYTES);
        return file;
    }"
8669,appendsDownloadBatchIdToStorageRoot,"    public void appendsDownloadBatchIdToStorageRoot() {
        BatchStorageRoot batchStorageRoot = BatchStorageRoot.with(storageRoot, downloadBatchId);

        assertThat(batchStorageRoot.path()).isEqualTo(""path/to/the/root/downloads/batch_1"");"
8670,toString,"    public String toString() {
        return ""BatchStorageRoot{""
                + ""path='"" + path + ""\'}"";"
8671,hashCode,"    public int hashCode() {
        return (path != null ? path.hashCode() : 0);
    }"
8674,with,"    static BatchStorageRoot with(StorageRoot storageRoot, DownloadBatchId downloadBatchId) {
        return new BatchStorageRoot(storageRoot, downloadBatchId);
    }"
8676,withSize,"    BatchFileBuilder withSize(FileSize fileSize);
"
8677,saveTo,"    BatchFileBuilder saveTo(String path, String fileName);
"
8679,withIdentifier,"    BatchFileBuilder withIdentifier(DownloadFileId downloadFileId);
"
8680,toString,"    public String toString() {
        return ""BatchFile{""
                + ""networkAddress='"" + networkAddress + '\''"
8681,hashCode,"    public int hashCode() {
        int result = networkAddress != null ? networkAddress.hashCode() : 0;
        result = 31 * result + (path != null ? path.hashCode() : 0);
        result = 31 * result + (downloadFileId != null ? downloadFileId.hashCode() : 0);
        result = 31 * result + (fileSize != null ? fileSize.hashCode() : 0);
        return result;
    }"
8683,fileSize,"    public Optional<FileSize> fileSize() {
        return fileSize;
    }"
8684,downloadFileId,"    public Optional<DownloadFileId> downloadFileId() {
        return downloadFileId;
    }"
8686,networkAddress,"    public String networkAddress() {
        return networkAddress;
    }"
8687,from,"    static InternalBatchFileBuilder from(BatchStorageRoot batchStorageRoot, String networkAddress) {
        return new LiteBatchFileBuilder(batchStorageRoot, networkAddress);
    }"
8688,throwsException_whenDuplicatedNetworkAddressWithoutFileIDsAreSupplied,"    public void throwsException_whenDuplicatedNetworkAddressWithoutFileIDsAreSupplied() {
        Batch.with(TestStorageRootFactory.create(), DOWNLOAD_BATCH_ID, DOWNLOAD_BATCH_TITLE)
                .downloadFrom(""net_address"").apply()"
8689,throwsException_whenDuplicatedFileIDsAreSupplied,"    public void throwsException_whenDuplicatedFileIDsAreSupplied() {
        Batch.with(TestStorageRootFactory.create(), DOWNLOAD_BATCH_ID, DOWNLOAD_BATCH_TITLE)
                .downloadFrom(""net_address"").withIdentifier(DOWNLOAD_FILE_ID).apply()"
8693,from,"    static BatchBuilder from(Batch batch) {
        InternalBatchBuilder builder = (InternalBatchBuilder) Batch.with(batch.storageRoot(), batch.downloadBatchId(), batch.title());
        for (BatchFile batchFile : batch.batchFiles()) {
            builder.withFile(batchFile);
        }"
8695,downloadFrom,"    BatchFileBuilder downloadFrom(String networkAddress);
"
8696,toString,"    public String toString() {
        return ""Batch{""
                + ""storageRoot="" + storageRoot"
8697,hashCode,"    public int hashCode() {
        int result = storageRoot != null ? storageRoot.hashCode() : 0;
        result = 31 * result + (downloadBatchId != null ? downloadBatchId.hashCode() : 0);
        result = 31 * result + (title != null ? title.hashCode() : 0);
        result = 31 * result + (batchFiles != null ? batchFiles.hashCode() : 0);
        return result;
    }"
8699,batchFiles,"    public List<BatchFile> batchFiles() {
        return batchFiles;
    }"
8700,title,"    public String title() {
        return title;
    }"
8703,with,"    public static BatchBuilder with(StorageRoot storageRoot, DownloadBatchId downloadBatchId, String title) {
        return new LiteBatchBuilder(storageRoot, downloadBatchId, title, new ArrayList<>());
    }"
8705,onReceived,"    void onReceived(List<DownloadBatchStatus> downloadBatchStatuses);
}"
8711,getLastReplacedBroker,"  public String getLastReplacedBroker(String cluster) throws Exception {
    String path = getBrokerReplacementPath(cluster);
    Stat stat = curator.checkExists().forPath(path);
    String broker = null;
    if (stat != null) {
      String jsonStr = getDataInString(path);
      JsonObject jsonObject = (JsonObject) (new JsonParser()).parse(jsonStr);"
8712,getLastBrokerReplacementTime,"  public long getLastBrokerReplacementTime(String clusterName) throws Exception {
    String path = getBrokerReplacementPath(clusterName);
    Stat stat = curator.checkExists().forPath(path);
    long timestamp = -1;
    if (stat != null) {
      String jsonStr = getDataInString(path);
      JsonObject jsonObject = (JsonObject) (new JsonParser()).parse(jsonStr);"
8713,getBrokerReplacementInfo,"  public String getBrokerReplacementInfo(String cluster) throws Exception {
    String path = getBrokerReplacementPath(cluster);
    String jsonStr = getDataInString(path);
    return jsonStr;
  }"
8714,getDataInString,"  public String getDataInString(String path) throws Exception {
    String retval;
    byte[] data = curator.getData().forPath(path);
    retval = new String(data);
    return retval;
  }"
8717,getChildren,"  public List<String> getChildren(String path) throws Exception {
    List<String> children = curator.getChildren().forPath(path);
    return children;
  }"
8718,removeZkNode,"  public void removeZkNode(String path) throws Exception {
    try {
      curator.delete().forPath(path);"
8720,createIfNotExists,"  public boolean createIfNotExists(String path) {
    int numRetries = 0;
    while (numRetries < MAX_RETRIES) {
      try {
        Stat stat = curator.checkExists().forPath(path);"
8721,waitBetweenRetries,"  private void waitBetweenRetries(int numRetries) {
    try {
      Thread.sleep(RETRY_INTERVAL_MS * numRetries);"
8723,close,"  public void close() {
    curator.close();
  }"
8724,toString,"  public String toString() {
    return ""UserPrincipal [username="" + username + ""]"";
  }"
8727,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""ClusterLoadBalancer"", options);
    System.exit(1);
  }"
8728,parseCommandLine,"  private static CommandLine parseCommandLine(String[] args) {
    Option zookeeper = new Option(ZOOKEEPER, true, ""cluster zookeeper"");
    options.addOption(zookeeper);

    if (args.length < 2) {
      printUsageAndExit();
    }

    CommandLineParser parser = new DefaultParser();"
8732,configure,"  public void configure(DoctorKConfig config) throws Exception {
    List<String> doctorKAdminGroups = config.getDoctorKAdminGroups();
    if (doctorKAdminGroups != null) {
      allowedAdminGroups.addAll(doctorKAdminGroups);"
8736,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""ReplicaStatsRetriever"", options);
    System.exit(1);
  }"
8743,toString,"    public String toString() {
      String result = topicPartition.toString() + "": "";
      result += source.getName() + "" -> "" + dest.getName();
      return result;
    }"
8744,toString,"  public String toString() {
    String result = topicPartition.toString() + "": "" + preferredLeaderBroker;
    return result;
  }"
8745,run,"  public void run() {
    KafkaConsumer<byte[], byte[]> kafkaConsumer = null;
    try {
      String brokers = KafkaUtils.getBrokers(zkUrl, securityProtocol);"
8746,join,"  public void join() throws InterruptedException {
    this.thread.join();
  }"
8747,start,"  public void start() {
    thread = new Thread(this);
    thread.start();
  }"
8748,toString,"  public String toString() {
    return topicPartition.toString();
  }"
8749,hashCode,"  public int hashCode() {
    if (hash != 0) {
      return hash;
    }
    final int prime = 31;
    int result = 1;
    result = prime * result + topicPartition.hashCode();

    if (replicaBrokers != null) {
      for (int brokerId: replicaBrokers) {
        result = prime * result + brokerId;"
8752,partition,"  public int partition() {
    return topicPartition.partition();
  }"
8753,topic,"  public String topic() {
    return topicPartition.topic();
  }"
8754,run,"  public void run() {
    startAdminHttpService();
  }"
8756,addHandler,"  public void addHandler(String path, CustomHttpHandler handler) {
    this.customHttpHandlerMap.put(path, handler);
  }"
8757,sortByValue,"  public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {
    return map.entrySet()
        .stream()"
8761,deserializeBrokerStats,"  public static BrokerStats deserializeBrokerStats(ConsumerRecord<byte[], byte[]> record) {
    try {
      BinaryDecoder binaryDecoder = avroDecoderFactory.binaryDecoder(record.value(), null);"
8766,getOffset,"  public static long getOffset(SimpleConsumer consumer, String topic, int partition,
                               long whichTime) throws IOException {
    String errMsg = null;
    Exception lastEx = null;
    for (int i = 0; i < FETCH_RETRIES; i++) {
      TopicAndPartition topicAndPartition = new TopicAndPartition(topic, partition);"
8768,pingKafkaBroker,"  public static boolean pingKafkaBroker(String host, int port, int timeout) {
    try (Socket socket = new Socket()) {
      socket.connect(new InetSocketAddress(host, port), timeout);"
8771,gauge,"  public static void gauge(String name, double value, String... tags) {
    Stats.setGauge(nameMetric(name, tags), value);
  }"
8772,gauge,"  public static void gauge(String name, double value) {
    Stats.setGauge(name, value);
  }"
8773,incr,"  public static void incr(String name, int i, String... tags) {
    Stats.incr(nameMetric(name, tags), i);
  }"
8774,incr,"  public static void incr(String name, String... tags) {
    Stats.incr(nameMetric(name, tags));
  }"
8775,incr,"  public static void incr(String name) {
    Stats.incr(name);
  }"
8776,addMetric,"  public static void addMetric(String name, int value, String... tags) {
    Stats.addMetric(nameMetric(name, tags), value);
  }"
8777,addMetric,"  public static void addMetric(String name, int value) {
    Stats.addMetric(name, value);
  }"
8778,nameMetric,"  public static String nameMetric(String name, String... tags) {
    StringBuilder builder = new StringBuilder(name);
    builder.append("" "")
        .append(SPACE_JOINER.join(tags));
    return builder.toString();"
8782,convertCounterOrGauge,"  private boolean convertCounterOrGauge(String name, int epochSecs, float value, OpenTsdbClient.MetricsBuffer buffer) {
    Tuple2<String, StringBuilder> nameAndTags = getNameAndTags(name);
    if (nameAndTags == null) {
      return false;
    }
    String statName = nameAndTags._1();
    StringBuilder tags = nameAndTags._2().append("" "").append(getDefaultTags());
"
8783,convertGauge,"  public boolean convertGauge(String name, int epochSecs, float value, OpenTsdbClient.MetricsBuffer buffer) {
    return convertCounterOrGauge(name, epochSecs, value, buffer);
  }"
8784,convertCounter,"  public boolean convertCounter(String name, int epochSecs, float value, OpenTsdbClient.MetricsBuffer buffer) {
    return convertCounterOrGauge(name, epochSecs, value, buffer);
  }"
8785,sendMetrics,"  public void sendMetrics(MetricsBuffer buffer)
      throws ConnectionFailedException, SendFailedException {
    Socket socket = null;
    try {"
8786,toString,"    public String toString() {
      return buffer.toString();
    }"
8787,reset,"    public void reset() {
      buffer.setLength(0);
    }"
8788,addMetric,"    public void addMetric(String name, int epochSecs, float value, String tags) {
      buffer.append(""put "")
          .append(name)"
8789,addMetric,"    public void addMetric(String name, int epochSecs, float value, String... tags) {
      addMetric(name, epochSecs, value, SPACE_JOINER.join(tags));
    }"
8791,getMetricValue,"  public static Future<KafkaMetricValue> getMetricValue(MBeanServerConnection mbs,
                                                        String metricName, String attributeName) {
    Callable<KafkaMetricValue> task =
        new KafkaMetricRetrievingTask(mbs, metricName, attributeName);
    Future<KafkaMetricValue> metricFuture = metricsThreadPool.submit(task);"
8794,logOstrichStats,"  private void logOstrichStats(int epochSecs) {
    LOG.debug(""Ostrich Metrics {}: \n{}"", epochSecs, buffer.toString());
  }"
8796,main,"  public static void main(String[] args) throws Exception {
    CommandLine commandLine = parseCommandLine(args);

    String host = commandLine.getOptionValue(BROKER_NAME);
    String jmxPort = commandLine.getOptionValue(JMX_PORT);
    String metric = commandLine.getOptionValue(METRICS_NAME);
    fetchKafkaMetrics(host, jmxPort, metric);"
8798,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""KafkaMetricsCollector"", options);
    System.exit(1);
  }"
8803,compare,"    public int compare(Node a, Node b) {
      int result = a.host().compareTo(b.host());
      if (result == 0) {
        result = a.port() - b.port();
      }"
8804,compare,"    public int compare(TopicPartition x, TopicPartition y) {
      int result = x.topic().compareTo(y.topic());
      if (result == 0) {
        result = x.partition() - y.partition();
      }"
8805,closeConsumer,"  public static void closeConsumer(String zkUrl) {
    if (kafkaConsumers.containsKey(zkUrl)) {
      kafkaConsumers.get(zkUrl).close();"
8806,getKafkaConsumer,"  public static KafkaConsumer<byte[], byte[]> getKafkaConsumer(String zkUrl,
      SecurityProtocol securityProtocol,
      Map<String, String> consumerConfigs) {"
8807,getKafkaConsumer,"  public static KafkaConsumer<?, ?> getKafkaConsumer(String zkUrl,
                                               String keyDeserializer, String valueDeserializer) {
    return getKafkaConsumer(zkUrl, keyDeserializer, valueDeserializer,"
8808,getKafkaConsumer,"  public static KafkaConsumer<byte[], byte[]> getKafkaConsumer(String zkUrl,
                                               String keyDeserializer,
                                               String valueDeserializer,
                                               int maxPoolRecords,
                                               SecurityProtocol securityProtocol,"
8813,isZero,"  private boolean isZero(double val) {
    return Math.abs(val - 0.0) < 0.00001;
  }"
8815,renderHTML,"  public void renderHTML(PrintWriter writer, Map<String, String> params) {
    String clusterName = params.get(""cluster"");
    String topic = params.get(""topic"");
    try {
      printHeader(writer);"
8816,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params) {
    String clusterName = params.get(""cluster"");
    String topic = params.get(""topic"");
    JsonArray json = new JsonArray();

    KafkaClusterManager clusterMananger =
      DoctorKMain.doctorK.getClusterManager(clusterName);
    if (clusterMananger == null) {"
8817,run,"    public void run() {
      try {
        if (brokerStatsReporter != null) {
          brokerStatsReporter.stop();
        }
      } catch (Throwable t) {"
8818,run,"    public void run() {
      long now = System.currentTimeMillis();
      if (now > restartTime) {
        LOG.warn(""Restarting metrics collector"");"
8819,stop,"    public void stop() throws Exception {
      monitorExecutor.shutdown();
    }"
8820,start,"    public void start() {
      monitorExecutor.scheduleAtFixedRate(this, INITIAL_DELAY, 15, TimeUnit.SECONDS);
    }"
8825,toInteger,"  public int toInteger() {
    return (Integer)value;
  }"
8826,toLong,"  public long toLong() {
    if (value instanceof Double) {
      return ((Double)value).longValue();
    }"
8827,toDouble,"  public double toDouble() {
    return (Double)value;
  }"
8829,call,"  public KafkaMetricValue call() throws Exception {
    try {
      Object obj = mbs.getAttribute(new ObjectName(metricName), attributeName);"
8834,setup,"  static void setup() throws Exception {
    DoctorKConfig config = new DoctorKConfig(""./config/doctork.properties"");
    doctorKClusterConfig = config.getClusterConfigByName(CLUSTER_NAME);
    zookeeper_url = doctorKClusterConfig.getZkUrl();
    kafkaCluster = new KafkaCluster(zookeeper_url, doctorKClusterConfig);
  }"
8836,toString,"  public String toString() {
    StringBuilder strBuilder = new StringBuilder();
    TreeMap<Integer, KafkaBroker> treeMap = new TreeMap<>(brokers);
    for (Map.Entry<Integer, KafkaBroker> entry : treeMap.entrySet()) {
      strBuilder.append(""   "" + entry.getKey() + "" : "");
      strBuilder.append(entry.getValue() + ""\n"");"
8837,clearResourceAllocationCounters,"  public void clearResourceAllocationCounters() {
    for (KafkaBroker broker : brokers.values()) {
      broker.clearResourceAllocationCounters();"
8843,findNextBrokerForOosReplica,"  protected boolean findNextBrokerForOosReplica(
      PriorityQueue<KafkaBroker> brokerQueue,
      Collection<KafkaBroker> unusableBrokers,
      Collection<Integer> replicaBrokers,
      Map<Integer, KafkaBroker> reassignmentMap,
      Integer oosBrokerId,
      TopicPartition tp,"
8845,getAlternativeBrokers,"  public Map<Integer, KafkaBroker> getAlternativeBrokers(
      PriorityQueue<KafkaBroker> brokerQueue,
      OutOfSyncReplica oosReplica,
      double inBoundReq,
      double outBoundReq,
      int preferredBroker
  ) {
"
8846,isInvalidBroker,"  protected boolean isInvalidBroker(KafkaBroker broker) {
    BrokerStats latestStats = broker.getLatestStats();
    return latestStats== null ||
        latestStats.getHasFailure() ||"
8857,toJson,"  public JsonElement toJson() {
    JsonObject json = new JsonObject();
    JsonArray jsonBrokers = new JsonArray();
    json.add(""brokers"", jsonBrokers);

    List<KafkaBroker> result = new ArrayList<>();

    synchronized (brokers) {"
8858,recordBrokerStats,"  public void recordBrokerStats(BrokerStats brokerStats) {
    try {
      int brokerId = brokerStats.getId();"
8859,name,"  public String name() {
    return clusterConfig.getClusterName();
  }"
8860,size,"  public int size() {
    return brokers.size();
  }"
8862,compare,"    public int compare(KafkaBroker x, KafkaBroker y) {
      double xNetworkUsage = x.getMaxBytesIn() + x.getMaxBytesOut()
          + x.reservedBytesIn + x.reservedBytesOut;
      double yNetworkUsage = y.getMaxBytesIn() + y.getMaxBytesOut()
          + y.reservedBytesIn + y.reservedBytesOut;"
8863,compareTo,"  public int compareTo(KafkaBroker another) {
    double networkUsage = getMaxBytesIn() + getMaxBytesOut()
        + reservedBytesIn + reservedBytesOut;
    double anotherUsage = another.getMaxBytesIn() + another.getMaxBytesOut()
        + another.reservedBytesIn + another.reservedBytesOut;"
8865,toString,"  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(""brokerId:"" + getId());
    sb.append(""; rackId = "" + rackId);
    sb.append(""; stats : "" + (latestStats == null ? ""null"" : latestStats));
    return sb.toString();
  }"
8868,removeReservedBandwidth,"  public boolean removeReservedBandwidth(TopicPartition tp, double inBound, double outBound){
    if ( toBeAddedReplicas.contains(tp) ){
      reservedBytesIn -= inBound;
      reservedBytesOut -= outBound;"
8871,isDecommissioned,"  public boolean isDecommissioned() {
    return this.isDecommissioned.get();
  }"
8872,cancelDecommission,"  public boolean cancelDecommission() {
    return this.isDecommissioned.getAndSet(false);
  }"
8873,decommission,"  public boolean decommission() {
    return this.isDecommissioned.getAndSet(true);
  }"
8878,hasTopicPartition,"  public boolean hasTopicPartition(TopicPartition tp) {
    return leaderReplicas.contains(tp) || followerReplicas.contains(tp)
        || toBeAddedReplicas.contains(tp);"
8881,clearResourceAllocationCounters,"  public void clearResourceAllocationCounters() {
    this.reservedBytesIn = 0L;
    this.reservedBytesOut = 0L;
    this.toBeAddedReplicas.clear();
  }"
8892,close,"  public void close() {
    kafkaProducer.close();
  }"
8893,publish,"  public void publish(BrokerStats brokerStats) throws IOException {
    try {
      ByteArrayOutputStream stream = new ByteArrayOutputStream();"
8894,main,"  public static void main(String[] args) throws Exception {
    CommandLine commandLine = parseCommandLine(args);
    String zkUrl = commandLine.getOptionValue(ZOOKEEPER);
    String cluster = commandLine.getOptionValue(CLUSTER);
    String broker = commandLine.getOptionValue(BROKER);
    ZookeeperClient zookeeperClient = null;

    try {"
8895,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""DoctorKZookeeperClient"", options);
    System.exit(1);
  }"
8897,doGet,"    protected void doGet(HttpServletRequest request,
                         HttpServletResponse response) throws ServletException,
                                                              IOException {
      response.setContentType(""text/html"");"
8900,run,"  public void run() {
    long now = System.currentTimeMillis();

    if (now > restartTime) {"
8901,stop,"  public void stop() throws Exception {
    monitorExecutor.shutdown();
  }"
8902,start,"  public void start() {
    monitorExecutor.scheduleAtFixedRate(this, INITIAL_DELAY, 15, TimeUnit.SECONDS);
  }"
8903,doGet,"  public void doGet(HttpServletRequest req, HttpServletResponse resp)
      throws ServletException, IOException {

    LOG.info(""Start working on get request"");
    resp.setStatus(HttpStatus.OK_200);

    PrintWriter writer = resp.getWriter();
    String contentType = req.getHeader(""content-type"");
    String queryString = req.getQueryString();"
8904,renderHTML,"  public void renderHTML(PrintWriter writer, Map<String, String> params){};
"
8905,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params){};
  public void renderHTML(PrintWriter writer, Map<String, String> params){};"
8906,convertDescriptiveStatisticsMap,"  public static Map<String, List<DescriptiveStatistics>> convertDescriptiveStatisticsMap(
      Map<TopicPartition, DescriptiveStatistics> tpsMap) {
    Map<String, List<DescriptiveStatistics>> result = new TreeMap<>();
    for (Map.Entry<TopicPartition, DescriptiveStatistics> entry : tpsMap.entrySet()) {
      String topicName = entry.getKey().topic();"
8907,parseQueryString,"  private static Map<String, String> parseQueryString(String queryString) {
    Map<String, String> result = new HashMap<>();
    if (queryString != null) {
      Arrays.stream(queryString.split(""&"")).map(s -> s.split(""="")).collect(toList())
	.forEach(arr -> result.put(arr[0], arr[1]));"
8908,printFooter,"  public static void printFooter(PrintWriter writer) {
    writer.print(""</body>"");
    writer.print(""<html>"");
  }"
8911,toString,"  public String toString() {
    return ""DoctorKSecurityContext [principal="" + principal + "", roles="" + roles + ""]"";
  }"
8913,isSecure,"  public boolean isSecure() {
    return true;
  }"
8914,isUserInRole,"  public boolean isUserInRole(String role) {
    return roles.contains(role);
  }"
8916,run,"    public void run() {
      try {
        if (doctorK != null) {
          doctorK.stop();"
8917,main,"  public static void main(String[] args) throws Exception {
    new DoctorKMain().run(args);
  }"
8919,startMetricsService,"  private void startMetricsService() {
    int ostrichPort = replicaStatsManager.getConfig().getOstrichPort();
    String tsdHostPort = replicaStatsManager.getConfig().getTsdHostPort();
    if (tsdHostPort == null && ostrichPort == 0) {
      LOG.info(""OpenTSDB and Ostrich options missing, not starting Ostrich service"");"
8920,checkAndInitializeAuthorizationFilter,"  private void checkAndInitializeAuthorizationFilter(Environment environment, DoctorKConfig doctorKConfig) {
    LOG.info(""Checking authorization filter"");
    try {
      Class<? extends DoctorKAuthorizationFilter> authorizationFilterClass = doctorKConfig.getAuthorizationFilterClass();"
8924,initialize,"  public void initialize(Bootstrap<DoctorKAppConfig> bootstrap) {
    bootstrap.addBundle(new AssetsBundle(""/webapp/pages/"", ""/"", ""index.html""));
  }"
8925,renderHTML,"  public void renderHTML(PrintWriter writer, Map<String, String> params) {
    try {
      double jvmUpTimeInSeconds = ManagementFactory.getRuntimeMXBean().getUptime() / 1000.0;"
8927,run,"  public void run() {
    OpenTsdbMetricConverter.gauge(DoctorKMetrics.DOCTORK_SERVICE_RUNNING, 1.0);
  }"
8928,stop,"  public void stop() {
    heartbeatExecutor.shutdown();
  }"
8929,start,"  public void start() {
    heartbeatExecutor.scheduleAtFixedRate(this, 0, HEARTBEAT_INTERVAL_IN_SECONDS, TimeUnit.SECONDS);
  }"
8931,getAuthorizationFilterClass,"  public Class<? extends DoctorKAuthorizationFilter> getAuthorizationFilterClass() throws ClassNotFoundException {
    if (doctorKConfiguration.containsKey(AUTHORIZATION_FILTER_CLASS)) {
      String classFqcn = doctorKConfiguration.getString(AUTHORIZATION_FILTER_CLASS);"
8944,configurationToMap,"  protected static Map<String, String> configurationToMap(AbstractConfiguration  configuration) {
    Iterator<String> keysIterator = configuration.getKeys();
    Map<String, String> result = new HashMap<>();
    while (keysIterator.hasNext()) {
      String key = keysIterator.next();
      result.put(key, configuration.getString(key));"
8958,initialize,"  private void initialize() {
    Set<String> clusters = new HashSet<>();
    Iterator<String> keysIterator = configuration.getKeys();
    while (keysIterator.hasNext()) {
      String propertyName = keysIterator.next();
      if (propertyName.startsWith(CLUSTER_PREFIX)) {
        String clusterName = propertyName.split(""\\."")[1];"
8959,enabledRackAwareness,"  public boolean enabledRackAwareness(){
    boolean result = false;
    if (clusterConfiguration.containsKey(ENABLE_RACK_AWARENESS)){
      result = clusterConfiguration.getBoolean(ENABLE_RACK_AWARENESS);
    }"
8965,enabledDeadbrokerReplacement,"  public boolean enabledDeadbrokerReplacement() {
    boolean result = false;
    if (clusterConfiguration.containsKey(BROKER_REPLACEMENT_ENABLE)) {
      result = clusterConfiguration.getBoolean(BROKER_REPLACEMENT_ENABLE);
    }"
8975,enabledWorloadBalancing,"  public boolean enabledWorloadBalancing() {
    boolean result = false;
    if (clusterConfiguration.containsKey(ENABLE_WORLOAD_BALANCING)) {
      result = clusterConfiguration.getBoolean(ENABLE_WORLOAD_BALANCING);
    }"
8977,dryRun,"  public boolean dryRun() {
    return clusterConfiguration.getBoolean(DRYRUN);
  }"
8979,printHtmlTableRow,"  private void printHtmlTableRow(PrintWriter writer, Object col1, Object col2) {
    writer.print(""<tr><td>"" + col1 + ""</td> <td>"" + col2 + ""</td> </tr>"");
  }"
8982,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params) {
    try {
      int brokerId = Integer.parseInt(params.get(""brokerid""));"
8983,getLatestStats,"  public BrokerStats getLatestStats(String clusterName, KafkaBroker broker)
    throws ClusterInfoError {
    BrokerStats latestStats = broker.getLatestStats();
    if (latestStats == null) {
      throw new ClusterInfoError(""Failed to get latest stats from broker {} in cluster {}"","
8985,configure,"  public void configure(DoctorKConfig config) throws Exception;
"
8989,checkAndGetClusterManager,"  protected KafkaClusterManager checkAndGetClusterManager(String clusterName) {
    KafkaClusterManager clusterManager = doctorK.getClusterManager(clusterName);
    if (clusterManager == null) {
      throw new NotFoundException(""Unknown clustername:"" + clusterName);
    }"
8992,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""OperatorActionWriter"", options);
    System.exit(1);
  }"
8996,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params) {
    JsonArray json = new JsonArray();

    for (ConsumerRecord<byte[], byte[]> record : Lists.reverse(retrieveActionReportMessages())) {
      try {"
8998,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""OperatorActionRetriever"", options);
    System.exit(1);
  }"
9000,sendMessage,"  public synchronized void sendMessage(String clusterName, String message) {
    int numRetries = 0;
    while (numRetries < MAX_RETRIES) {
      try {"
9005,stop,"  public void stop() {
    brokerStatsProcessor.stop();
    zookeeperClient.close();
    heartbeat.stop();
    for (KafkaClusterManager clusterManager : clusterManagers.values()) {
      clusterManager.stop();"
9007,disableMaintenance,"  public void disableMaintenance(@Context HttpServletRequest ctx,
      @PathParam(""clusterName"") String clusterName) {
    KafkaClusterManager clusterManager = checkAndGetClusterManager(clusterName);
    clusterManager.disableMaintenanceMode();
    ApiUtils.logAPIAction(LOG, ctx, ""Disabled maintenance mode for cluster:"" + clusterName);"
9008,enableMaintenance,"  public void enableMaintenance(@Context HttpServletRequest ctx,
      @PathParam(""clusterName"") String clusterName) {
    KafkaClusterManager clusterManager = checkAndGetClusterManager(clusterName);
    clusterManager.enableMaintenanceMode();
    ApiUtils.logAPIAction(LOG, ctx, ""Enabled maintenance mode for cluster:"" + clusterName);"
9009,checkMaintenance,"  public boolean checkMaintenance(@PathParam(""clusterName"") String clusterName) {
    KafkaClusterManager clusterManager = checkAndGetClusterManager(clusterName);
    return clusterManager.isMaintenanceModeEnabled();
  }"
9016,renderHTML,"  public void renderHTML(PrintWriter writer, Map<String, String> params) {
    try {
      printHeader(writer);
      String clusterName = params.get(""name"");"
9017,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params) {
    String clusterName;
    try {
      clusterName = params.get(""name"");
    } catch (Exception e) {"
9028,computeNetworkStats,"  private void computeNetworkStats(NetworkStats networkStats, BrokerStats brokerStats) {
    if(this.currentNetworkStats == null) {
      this.currentNetworkStats = networkStats;"
9036,computeTopicPartitionReplicaCpuUsage,"  private void computeTopicPartitionReplicaCpuUsage(double totalCpuUsage,
                                                    List<ReplicaStat> replicaStats) {
    long totalTraffic = replicaStats.stream()
        .map(stat -> stat.getBytesIn1MinMeanRate() + stat.getBytesOut1MinMeanRate())"
9037,computeTopicPartitionReplicaNetworkTraffic,"  private void computeTopicPartitionReplicaNetworkTraffic(
      List<ReplicaStat> replicaStats,
      Set<String> topics,
      Map<String, Long> topicsBytesIn1Min, Map<String, Long> topicsBytesOut1Min,
      Map<String, Long> topicsBytesIn5Min, Map<String, Long> topicsBytesOut5Min,
      Map<String, Long> topicsBytesIn15Min, Map<String, Long> topicsBytesOut15Min) {
"
9040,getTopicNetworkMetricFromFutures,"  private Map<String, Long> getTopicNetworkMetricFromFutures(
      Map<String, Future<KafkaMetricValue>> futures)
      throws ExecutionException, InterruptedException {
    Map<String, Long> metricValues = new HashMap<>();
"
9042,run,"  public void run() {
    BrokerStatsRetriever brokerStatsRetriever = new BrokerStatsRetriever(kafkaConfigPath, primaryNetworkInterfaceName, disableEc2metadata);
    try {
      BrokerStats stats = brokerStatsRetriever.retrieveBrokerStats(brokerHost, jmxPort);"
9043,stop,"  public void stop() throws Exception {
    statsReportExecutor.shutdown();
  }"
9044,start,"  public void start() {
    LOG.info(""Starting broker stats reporter....."");
    statsReportExecutor.scheduleAtFixedRate(
        this, INITIAL_DELAY, pollingIntervalInSeconds, TimeUnit.SECONDS);"
9046,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""BrokerStatsReader"", options);
    System.exit(1);
  }"
9048,uncaughtException,"    public void uncaughtException(Thread t, Throwable e) {
      LOG.error(""Unexpected exception : "", e);
      System.exit(1);
    }"
9049,run,"  public void run() {
    thread.setUncaughtExceptionHandler(new BrokerStatsReaderExceptionHandler());
    this.stopped = false;
    try {
      Properties properties = OperatorUtil.createKafkaConsumerProperties("
9050,stop,"  public void stop() {
    this.stopped = true;
  }"
9051,start,"  public void start() {
    this.thread = new Thread(this);
    this.thread.start();
  }"
9056,cancelDecommissionBroker,"  public void cancelDecommissionBroker(@Context HttpServletRequest ctx,
                                       @PathParam(""clusterName"") String clusterName,
                                       @PathParam(""brokerId"") String brokerIdStr) {
    checkAndGetClusterManager(clusterName).cancelDecommissionBroker(Integer.parseInt(brokerIdStr));"
9057,decommissionBroker,"  public void decommissionBroker(@Context HttpServletRequest ctx,
                                 @PathParam(""clusterName"") String clusterName,
                                 @PathParam(""brokerId"") String brokerIdStr) {
    checkAndGetClusterManager(clusterName).decommissionBroker(Integer.parseInt(brokerIdStr));"
9058,isBrokerDecommissioned,"  public boolean isBrokerDecommissioned(@PathParam(""clusterName"") String clusterName, @PathParam(""brokerId"") String brokerId) {
    return checkAndGetBroker(clusterName, brokerId).isDecommissioned();
  }"
9061,abort,"  public void abort() {
    if (inBrokerReplacement) {
      thread.interrupt();"
9064,busy,"  public boolean busy() {
    return this.inBrokerReplacement;
  }"
9065,replaceBroker,"  public void replaceBroker(String brokerName) {
    if (!inBrokerReplacement) {
      this.broker = brokerName;"
9067,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""BrokerReplacement"", options);
    System.exit(1);
  }"
9068,parseCommandLine,"  private static CommandLine parseCommandLine(String[] args) {
    Option broker = new Option(BROKER, true, ""broker name"");
    Option command = new Option(COMMAND, true, ""command for relaunching a host"");
    options.addOption(broker).addOption(command);

    if (args.length < 3) {
      printUsageAndExit();
    }

    CommandLineParser parser = new DefaultParser();"
9069,logAPIAction,"  public static void logAPIAction(Logger LOG, HttpServletRequest ctx, String message) {
    LOG.info(""User from:"" + ctx.getRemoteUser() + "" from ip:"" + ctx.getRemoteHost() + "" "" + message);
  }"
9071,recalculateCurrentSpeed,"  private void recalculateCurrentSpeed() {
    currentSpeed += getRandom(-SPEED_RANDOM_DELTA, SPEED_RANDOM_DELTA);

    if (currentSpeed < MIN_SPEED) {
      currentSpeed = MIN_SPEED;"
9072,calculateJumpSpeed,"  private void calculateJumpSpeed() {
    currentVerticalSpeed = getRandom(0.2f * MAX_JUMP_HEIGHT_IN_METERS, MAX_JUMP_HEIGHT_IN_METERS) * meterInDp * density;
  }"
9074,updateAngle,"  private void updateAngle(double delta) {
    angle += delta * ROTATION_SPEED;
    angle %= 360;
  }"
9075,drawTumbleweed,"  private void drawTumbleweed(Canvas canvas, double delta) {
    updateAngle(delta);
    matrix.setTranslate(x, y);
    matrix.postRotate(angle, x + tumbleweed.getWidth() / 2, y + tumbleweed.getHeight() / 2);
    canvas.drawBitmap(tumbleweed, matrix, paint);
  }"
9076,drawShadow,"  private void drawShadow(Canvas canvas) {
    float scale = 1 - SHADOW_SCALE_FACTOR * ((bottomPosition - y) / (bottomPosition - topPosition));
    Bitmap toDraw;
    if (scale == 1) {
      toDraw = shadow;
    } else {"
9077,onDraw,"  protected void onDraw(Canvas canvas) {
    long time = System.currentTimeMillis();

    if (timeStamp != INVALID_TIME) {
      double delta = (time - timeStamp) / 1000d;
      updatePosition(delta);"
9083,updatePosition,"  private void updatePosition(Cloud cloud, double timeDelta) {
    cloud.x += density * SPEED_DP_PER_SEC * cloud.speedMultiplier * timeDelta;
    int width = getWidth();
    if (cloud.x > width) {
      cloud.x = -cloud.bitmap.getWidth();"
9084,drawClouds,"  private void drawClouds(Canvas canvas, long time) {
    for (Cloud cloud : clouds) {
      updatePosition(cloud, (time - timeStamp) / 1000d);"
9086,onDraw,"  protected void onDraw(Canvas canvas) {
    long time = System.currentTimeMillis();
    if (timeStamp != -1) {
      drawClouds(canvas, time);
    } else {
      initClouds();"
9087,init,"  private void init(Context context) {
    paint = new Paint();
    density = context.getResources().getDisplayMetrics().density;
  }"
9090,iterateByName,"  Iterator<Zone> iterateByName(String name);
"
9092,create,"      public WeightedResourceRecordSetApi create(String id) {
        return null;
      }"
9093,provideWeightedResourceRecordSetApiFactory,"  WeightedResourceRecordSetApi.Factory provideWeightedResourceRecordSetApiFactory() {
    return new WeightedResourceRecordSetApi.Factory() {
      @Override"
9094,create,"    ResourceRecordSetApi create(String id);
  }"
9095,deleteByNameAndType,"  void deleteByNameAndType(String name, String type);
"
9097,getByNameAndType,"  ResourceRecordSet<?> getByNameAndType(String name, String type);
"
9098,iterateByName,"  Iterator<ResourceRecordSet<?>> iterateByName(String name);
"
9099,iterator,"  Iterator<ResourceRecordSet<?>> iterator();
"
9100,getByNameTypeAndQualifier,"  ResourceRecordSet<?> getByNameTypeAndQualifier(String name, String type, String qualifier);
}"
9101,iterateByNameAndType,"  Iterator<ResourceRecordSet<?>> iterateByNameAndType(String name, String type);
"
9104,get,"      public Credentials get() {
        return server.credentials();
      }"
9105,url,"      public String url() {
        return server.url();
      }"
9106,mockApi,"  CloudDNS mockApi() {
    CloudDNSProvider.FeignModule module = new CloudDNSProvider.FeignModule();
    Feign feign = module.feign(module.logger(), module.logLevel());
    CloudIdentity cloudIdentity = module.cloudIdentity(feign);
    Provider provider = new CloudDNSProvider() {
      @Override
      public String url() {
        return server.url();"
9107,deleteRecord,"  public void deleteRecord() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(mxRecordDeleteInitialResponse));

    Job job = mockApi().deleteRecord(domainId, ""MX-4582544"");

    assertThat(job.id).isEqualTo(""da520d24-dd5b-4387-92be-2020a7f2b176"");
    assertThat(job.status).isEqualTo(""RUNNING"");
"
9109,completedRequest,"  public void completedRequest() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(mxRecordCompletedResponse));

    Job job = mockApi().getStatus(""0ade2b3b-07e4-4e68-821a-fcce4f5406f3"");

    assertThat(job.id).isEqualTo(""0ade2b3b-07e4-4e68-821a-fcce4f5406f3"");
    assertThat(job.status).isEqualTo(""COMPLETED"");
"
9110,runningRequest,"  public void runningRequest() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(mxRecordRunningResponse));

    Job job = mockApi().getStatus(""0ade2b3b-07e4-4e68-821a-fcce4f5406f3"");

    assertThat(job.id).isEqualTo(""0ade2b3b-07e4-4e68-821a-fcce4f5406f3"");
    assertThat(job.status).isEqualTo(""RUNNING"");
"
9112,recordsAbsent,"  public void recordsAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(""{\""records\"":[]}""));

    assertThat(mockApi().records(domainId)).isEmpty();

    server.assertAuthRequest();"
9113,recordsPresent,"  public void recordsPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(recordsResponse));

    assertThat(mockApi().records(domainId))
        .extracting(""id"", ""name"", ""type"", ""ttl"", ""priority"", ""data"")
        .containsExactly("
9114,domainsAbsent,"  public void domainsAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(""{\""domains\"":[]}""));

    assertThat(mockApi().domains()).isEmpty();

    server.assertAuthRequest();"
9115,domainsByNamePresent,"  public void domainsByNamePresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(domainsResponse));

    assertThat(mockApi().domainsByName(""denominator.io"")).containsExactly(
        Zone.create(""1234"", ""denominator.io"", 0, ""nil@denominator.io"")
    );"
9116,domainsPresent,"  public void domainsPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(domainsResponse));

    assertThat(mockApi().domains().get(0))
        .hasName(""denominator.io"");
"
9117,limitsSuccess,"  public void limitsSuccess() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(limitsResponse));

    assertThat(mockApi().limits()).isNotEmpty();

    server.assertAuthRequest();"
9119,toString,"    public String toString() {
      return new StringBuilder(name).append(type).append(ttl).append(data).append(priority)
          .toString();"
9120,data,"    public void data(String data) {
      this.data = data;
    }"
9121,data,"    public String data() {
      if (""AAAA"".equals(type)) {
        return data.toUpperCase();
      }"
9122,apply,"    ListWithNext<X> apply(URI nullOrNext);
  }"
9123,deleteRecord,"    Job deleteRecord(@Param(""domainId"") int domainId,
                     @Param(""recordId"") String recordId);"
9124,updateRecord,"    Job updateRecord(@Param(""domainId"") int domainId, @Param(""recordId"") String recordId,
                     @Param(""ttl"") int ttl, @Param(""data"") String data);"
9125,createRecordWithPriority,"    Job createRecordWithPriority(@Param(""domainId"") int id, @Param(""name"") String name,
                                 @Param(""type"") String type, @Param(""ttl"") int ttl,"
9126,createRecord,"    Job createRecord(@Param(""domainId"") int id, @Param(""name"") String name,
                     @Param(""type"") String type, @Param(""ttl"") int ttl, @Param(""data"") String data);"
9127,recordsByNameAndType,"    ListWithNext<Record> recordsByNameAndType(@Param(""domainId"") int id,
                                              @Param(""name"") String nameFilter,"
9128,records,"    ListWithNext<Record> records(@Param(""domainId"") int id);
"
9129,records,"    ListWithNext<Record> records(URI href);
"
9132,domainsByName,"    ListWithNext<Zone> domainsByName(@Param(""name"") String name);
"
9133,deleteDomain,"    Job deleteDomain(@Param(""id"") String id);
"
9134,updateDomain,"    Job updateDomain(@Param(""id"") String id, @Param(""email"") String email, @Param(""ttl"") int ttl);
"
9135,createDomain,"    Job createDomain(@Param(""name"") String name, @Param(""email"") String email,
                     @Param(""ttl"") int ttl);"
9136,getStatus,"    Job getStatus(@Param(""jobId"") String jobId);
"
9138,passwordAuth,"    TokenIdAndPublicURL passwordAuth(URI endpoint, @Param(""username"") String username,
                                     @Param(""password"") String password);"
9139,apiKeyAuth,"    TokenIdAndPublicURL apiKeyAuth(URI endpoint, @Param(""username"") String username,
                                   @Param(""apiKey"") String apiKey);"
9140,emptyOn404,"  static <X> ListWithNext<X> emptyOn404(Pager<X> pagingFunction, URI nullOrNext) {
    try {
      return pagingFunction.apply(nullOrNext);"
9141,write,"    public void write(JsonWriter out, ListWithNext<X> value) throws IOException {
      throw new UnsupportedOperationException();
    }"
9142,read,"    public ListWithNext<X> read(JsonReader reader) throws IOException {
      ListWithNext<X> records = new ListWithNext<X>();
      reader.beginObject();
      while (reader.hasNext()) {
        String nextName = reader.nextName();
        if (jsonKey().equals(nextName)) {
          reader.beginArray();
          while (reader.hasNext()) {"
9143,build,"    protected abstract X build(JsonReader reader) throws IOException;
"
9145,build,"    protected Record build(JsonReader reader) throws IOException {
      Record record = new Record();
      while (reader.hasNext()) {
        String key = reader.nextName();
        if (key.equals(""id"")) {"
9146,jsonKey,"    protected String jsonKey() {
      return ""records"";
    }"
9147,build,"    protected Zone build(JsonReader reader) throws IOException {
      String name = null, id = null, email = null;
      while (reader.hasNext()) {
        String nextName = reader.nextName();
        if (nextName.equals(""id"")) {"
9148,jsonKey,"    protected String jsonKey() {
      return ""domains"";
    }"
9149,read,"    public Job read(JsonReader reader) throws IOException {
      Job job = new Job();

      reader.beginObject();
      while (reader.hasNext()) {
        String key = reader.nextName();
        if (key.equals(""jobId"")) {"
9151,toStringComparator,"  private static <X> Comparator<X> toStringComparator() {
    return Comparator.class.cast(TO_STRING_COMPARATOR);
  }"
9152,compare,"    public int compare(Object left, Object right) {
      return left.toString().compareTo(right.toString());
    }"
9153,create,"    QualifiedResourceRecordSetApi create(String id);
  }"
9154,deleteByNameTypeAndQualifier,"  void deleteByNameTypeAndQualifier(String name, String type, String qualifier);
"
9156,toString,"    public String toString() {
      return ""Provides("" + provider + "")"";
    }"
9157,get,"    public Provider get() {
      return provider;
    }"
9158,provide,"  public static Object provide(denominator.Provider provider) {
    return new ProvideProvider(provider);
  }"
9160,withUrl,"  public static Provider withUrl(Provider provider, String url) {
    checkNotNull(provider, ""provider"");
    checkNotNull(url, ""url"");
    try {
      Constructor<?> ctor = provider.getClass().getDeclaredConstructor(String.class);"
9162,list,"  public static Iterable<Provider> list() {
    return ServiceLoader.load(Provider.class);
  }"
9163,credentialTypeToParameterNames,"  Map<String, Collection<String>> credentialTypeToParameterNames();
}"
9165,profileToRecordTypes,"  Map<String, Collection<String>> profileToRecordTypes();
"
9169,deleteByNameAndType,"    public void deleteByNameAndType(String name, String type) {
      api.deleteByNameAndType(name, type);
    }"
9170,deleteByNameTypeAndQualifier,"    public void deleteByNameTypeAndQualifier(String name, String type, String qualifier) {
      api.deleteByNameAndType(name, type);
    }"
9171,put,"    public void put(ResourceRecordSet<?> rrset) {
      api.put(rrset);
    }"
9172,getByNameTypeAndQualifier,"    public ResourceRecordSet<?> getByNameTypeAndQualifier(String name, String type,
                                                          String qualifier) {
      return null;"
9173,iterateByNameAndType,"    public Iterator<ResourceRecordSet<?>> iterateByNameAndType(String name, String type) {
      ResourceRecordSet<?> rrs = api.getByNameAndType(name, type);
      if (rrs != null) {
        return Collections.<ResourceRecordSet<?>>singleton(rrs).iterator();
      }"
9174,iterateByName,"    public Iterator<ResourceRecordSet<?>> iterateByName(String name) {
      return api.iterateByName(name);
    }"
9175,iterator,"    public Iterator<ResourceRecordSet<?>> iterator() {
      return api.iterator();
    }"
9176,create,"      public AllProfileResourceRecordSetApi create(String id) {
        return new OnlyBasicResourceRecordSetApi(factory.create(id));
      }"
9177,provideAllProfileResourceRecordSetApi,"  AllProfileResourceRecordSetApi.Factory provideAllProfileResourceRecordSetApi(
      final ResourceRecordSetApi.Factory factory) {
    return new AllProfileResourceRecordSetApi.Factory() {"
9179,provideCloser,"  Closeable provideCloser() {
    return this;
  }"
9180,delete,"  public void delete(String name) {
    data.remove(name);
  }"
9181,put,"  public String put(Zone zone) {
    if (!data.containsKey(zone.name())) {
      Collection<ResourceRecordSet<?>>
          recordsInZone =
          new ConcurrentSkipListSet<ResourceRecordSet<?>>(TO_STRING);"
9182,iterateByName,"  public Iterator<Zone> iterateByName(String name) {
    return filter(iterator(), nameEqualTo(name));
  }"
9183,remove,"      public void remove() {
        throw new UnsupportedOperationException(""remove"");
      }"
9185,hasNext,"      public boolean hasNext() {
        return delegate.hasNext();
      }"
9186,iterator,"  public Iterator<Zone> iterator() {
    final Iterator<Entry<String, Collection<ResourceRecordSet<?>>>>
        delegate = data.entrySet().iterator();
    return new Iterator<Zone>() {"
9187,compare,"        public int compare(ResourceRecordSet<?> arg0, ResourceRecordSet<?> arg1) {
          return arg0.toString().compareTo(arg1.toString());
        }"
9188,put,"  public void put(ResourceRecordSet<?> rrset) {
    put(IS_WEIGHTED, rrset);
  }"
9189,supportedWeights,"  public SortedSet<Integer> supportedWeights() {
    return supportedWeights;
  }"
9190,apply,"        public boolean apply(ResourceRecordSet<?> in) {
          return in != null && in.weighted() != null;
        }"
9191,deleteByNameAndType,"  public void deleteByNameAndType(String name, String type) {
    Collection<ResourceRecordSet<?>> records = delegate.records();
    synchronized (records) {
      removeByNameAndType(records.iterator(), name, type);"
9192,removeByNameAndType,"  private void removeByNameAndType(Iterator<ResourceRecordSet<?>> i, String name, String type) {
    while (i.hasNext()) {
      ResourceRecordSet<?> test = i.next();"
9193,put,"  public void put(ResourceRecordSet<?> rrset) {
    checkNotNull(rrset, ""rrset was null"");
    Collection<ResourceRecordSet<?>> records = delegate.records();
    synchronized (records) {
      removeByNameAndType(records.iterator(), rrset.name(), rrset.type());"
9195,iterateByName,"  public Iterator<ResourceRecordSet<?>> iterateByName(String name) {
    return delegate.iterateByName(name);
  }"
9196,iterator,"  public Iterator<ResourceRecordSet<?>> iterator() {
    return delegate.iterator();
  }"
9197,create,"        public WeightedResourceRecordSetApi create(String name) {
          return new MockWeightedResourceRecordSetApi(data, name, supportedWeights);
        }"
9198,provideWeightedResourceRecordSetApiFactory,"    WeightedResourceRecordSetApi.Factory provideWeightedResourceRecordSetApiFactory() {
      return new WeightedResourceRecordSetApi.Factory() {
        @Override"
9199,create,"        public GeoResourceRecordSetApi create(String name) {
          return new MockGeoResourceRecordSetApi(data, name, supportedRegions);
        }"
9200,provideGeoResourceRecordSetApiFactory,"    GeoResourceRecordSetApi.Factory provideGeoResourceRecordSetApiFactory() {
      return new GeoResourceRecordSetApi.Factory() {
        @Override"
9201,create,"        public AllProfileResourceRecordSetApi create(String name) {
          return new MockAllProfileResourceRecordSetApi(data, name, notNull());
        }"
9202,provideAllProfileResourceRecordSetApiFactory,"    AllProfileResourceRecordSetApi.Factory provideAllProfileResourceRecordSetApiFactory() {
      return new denominator.AllProfileResourceRecordSetApi.Factory() {
        @Override"
9203,create,"        public ResourceRecordSetApi create(String name) {
          return new MockResourceRecordSetApi(data, name);
        }"
9204,provideResourceRecordSetApiFactory,"    ResourceRecordSetApi.Factory provideResourceRecordSetApiFactory() {
      return new denominator.ResourceRecordSetApi.Factory() {
        @Override"
9205,provideZoneApi,"    ZoneApi provideZoneApi() {
      return new MockZoneApi(data);
    }"
9206,ok,"        public boolean ok() {
          return true;
        }"
9207,alwaysOK,"    CheckConnection alwaysOK() {
      return new CheckConnection() {
        public boolean ok() {"
9208,profileToRecordTypes,"  public Map<String, Collection<String>> profileToRecordTypes() {
    Map<String, Collection<String>> result = super.profileToRecordTypes();
    List<String> special = new ArrayList<String>(basicRecordTypes());
    special.remove(""SOA"");
    result.put(""geo"", Collections.unmodifiableList(special));
    result.put(""weighted"", result.get(""geo""));
    return result;
  }"
9209,url,"  public String url() {
    return url;
  }"
9210,put,"  public void put(ResourceRecordSet<?> rrset) {
    Collection<ResourceRecordSet<?>> records = records();
    synchronized (records) {
      put(IS_GEO, rrset);"
9211,supportedRegions,"  public Map<String, Collection<String>> supportedRegions() {
    return supportedRegions;
  }"
9212,apply,"    public boolean apply(ResourceRecordSet<?> in) {
      return in != null && in.geo() != null;
    }"
9213,apply,"  public Statement apply(Statement base, Description description) {
    return delegate.apply(base, description);
  }"
9214,shutdown,"  void shutdown() throws IOException {
    delegate.shutdown();
  }"
9215,assertAuthRequest,"  RecordedRequestAssert assertAuthRequest() throws InterruptedException {
    return assertThat(delegate.takeRequest())
        .hasMethod(""POST"")"
9216,assertRequest,"  RecordedRequestAssert assertRequest() throws InterruptedException {
    return assertThat(delegate.takeRequest());
  }"
9217,enqueue,"  void enqueue(MockResponse mockResponse) {
    delegate.enqueue(mockResponse);
  }"
9218,enqueueAuthResponse,"  void enqueueAuthResponse() {
    delegate.enqueue(new MockResponse().setBody(accessResponse));
  }"
9219,credentials,"  MockCloudDNSServer credentials(String username, String apiKey) {
    this.username = username;
    this.apiKey = apiKey;
    this.accessResponse = ""{\""access\"": {\n""
                          + ""  \""token\"": {\n""
                          + ""    \""expires\"": \""2013-07-08T05:55:31.809Z\"",\n"""
9220,credentials,"  Credentials credentials() {
    return ListCredentials.from(username, apiKey);
  }"
9221,connect,"  DNSApiManager connect() {
    return Denominator.create(this, CredentialsConfiguration.credentials(credentials()));
  }"
9223,tokenId,"  String tokenId() {
    return tokenId;
  }"
9224,tenantId,"  String tenantId() {
    return tenantId;
  }"
9225,records,"  Collection<ResourceRecordSet<?>> records() {
    Collection<ResourceRecordSet<?>> result = data.get(zoneName);
    checkArgument(result != null, ""zone %s not found"", zoneName);
    return result;
  }"
9226,deleteByNameAndType,"  public void deleteByNameAndType(String name, String type) {
    Collection<ResourceRecordSet<?>> records = records();
    synchronized (records) {
      for (Iterator<ResourceRecordSet<?>> it = iterateByNameAndType(name, type); it.hasNext(); ) {"
9227,deleteByNameTypeAndQualifier,"  public void deleteByNameTypeAndQualifier(String name, String type, String qualifier) {
    Collection<ResourceRecordSet<?>> records = records();
    synchronized (records) {
      ResourceRecordSet<?> rrsMatch = getByNameTypeAndQualifier(records, name, type, qualifier);"
9228,getByNameTypeAndQualifier,"  private ResourceRecordSet<?> getByNameTypeAndQualifier(Collection<ResourceRecordSet<?>> records,
                                                         String name, String type,
                                                         String qualifier) {
    Filter<ResourceRecordSet<?>>"
9229,getByNameTypeAndQualifier,"  public ResourceRecordSet<?> getByNameTypeAndQualifier(String name, String type,
                                                        String qualifier) {
    return getByNameTypeAndQualifier(records(), name, type, qualifier);"
9230,iterateByNameAndType,"  public Iterator<ResourceRecordSet<?>> iterateByNameAndType(String name, String type) {
    return filter(records().iterator(), and(nameAndTypeEqualTo(name, type), filter));
  }"
9231,put,"  public void put(ResourceRecordSet<?> rrset) {
    put(notNull(), rrset);
  }"
9233,iterateByName,"  public Iterator<ResourceRecordSet<?>> iterateByName(String name) {
    return filter(records().iterator(), and(nameEqualTo(name), filter));
  }"
9234,iterator,"  public Iterator<ResourceRecordSet<?>> iterator() {
    return filter(records().iterator(), filter);
  }"
9235,singleRequestOnFailure,"  public void singleRequestOnFailure() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setResponseCode(401));

    DNSApiManager api = server.connect();
    assertFalse(api.checkConnection());
"
9237,write,"  public void write(JsonWriter out, TokenIdAndPublicURL value) throws IOException {
    throw new UnsupportedOperationException();
  }"
9238,toString,"  public String toString() {
    return ""KeystoneV2AccessAdapter("" + serviceTypeSuffix + "")"";
  }"
9240,isNull,"  static boolean isNull(JsonElement element) {
    return element == null || element.isJsonNull();
  }"
9241,passwordAuth,"  TokenIdAndPublicURL passwordAuth(URI endpoint, @Param(""tenantId"") String tenantId,
                                   @Param(""username"") String username,"
9242,noToken,"  public void noToken() throws Exception {
    server.enqueue(new MockResponse().setBody(""{\n""
                                              + ""    \""access\"": {\n""
                                              + ""        \""serviceCatalog\"": [{\n""
                                              + ACCESS_FOOTER));"
9243,noServices,"  public void noServices() throws Exception {
    server.enqueue(new MockResponse().setBody(ACCESS_HEADER + SERVICE + ACCESS_FOOTER));

    TokenIdAndPublicURL result = client.passwordAuth(server.getUrl(""/"").toURI(), ""u"", ""p"");

    assertThat(result.tokenId).isEqualTo(""1bcd122d87494f5ab39a185b9ec5ff73"");"
9244,serviceNotFound,"  public void serviceNotFound() throws Exception {
    server.enqueue(new MockResponse().setBody(ACCESS_HEADER + SERVICE + ACCESS_FOOTER));

    TokenIdAndPublicURL result = client.passwordAuth(server.getUrl(""/"").toURI(), ""u"", ""p"");

    assertThat(result.tokenId).isEqualTo(""1bcd122d87494f5ab39a185b9ec5ff73"");"
9245,noEndpoints,"  public void noEndpoints() throws Exception {
    server.enqueue(new MockResponse().setBody(ACCESS_HEADER
                                              + ""            \""name\"": \""cloudDNS\"",\n""
                                              + ""            \""type\"": \""rax:dns\""\n""
                                              + SERVICE + ACCESS_FOOTER));
"
9248,toString,"  public String toString() {
    return ""KeystoneAccessAdapter("" + type + "")"";
  }"
9251,create,"      public GeoResourceRecordSetApi create(String id) {
        return null;
      }"
9252,provideGeoResourceRecordSetApiFactory,"  GeoResourceRecordSetApi.Factory provideGeoResourceRecordSetApiFactory() {
    return new GeoResourceRecordSetApi.Factory() {
"
9253,toString,"  public String toString() {
    return provider.toString();
  }"
9254,close,"  public void close() throws IOException {
    closer.close();
  }"
9255,checkConnection,"  public boolean checkConnection() {
    return checkConnection.ok();
  }"
9256,provider,"  public Provider provider() {
    return provider;
  }"
9257,api,"  public DNSApi api() {
    return api;
  }"
9258,weightedRecordSetsInZone,"  public WeightedResourceRecordSetApi weightedRecordSetsInZone(String id) {
    return weightedApiFactory.create(id);
  }"
9259,geoRecordSetsInZone,"  public GeoResourceRecordSetApi geoRecordSetsInZone(String id) {
    return geoApiFactory.create(id);
  }"
9260,recordSetsInZone,"  public AllProfileResourceRecordSetApi recordSetsInZone(String id) {
    return allRRSetApiFactory.create(id);
  }"
9261,basicRecordSetsInZone,"  public ResourceRecordSetApi basicRecordSetsInZone(String id) {
    return rrsetApiFactory.create(id);
  }"
9262,zones,"  public ZoneApi zones() {
    return zones;
  }"
9263,delete,"  public void delete(String id) {
    try {
      api.deleteDomain(id);"
9264,put,"  public String put(Zone zone) {
    if (zone.id() != null) {
      return api.updateDomain(zone.id(), zone.name(), zone.email(), zone.ttl()).id();
    }"
9266,iterator,"  public Iterator<Zone> iterator() {
    return api.domains().iterator();
  }"
9267,apply,"  public Request apply(RequestTemplate input) {
    TokenIdAndPublicURL urlAndToken = lazyUrlAndToken.get();
    if (input.url().indexOf(""http"") != 0) {
      input.insert(0, urlAndToken.publicURL);
    }
    input.header(""X-Auth-Token"", urlAndToken.tokenId);"
9268,url,"  public String url() {
    return lazyUrlAndToken.get().publicURL;
  }"
9269,name,"  public String name() {
    return provider.name();
  }"
9270,type,"  public Class<Designate> type() {
    return Designate.class;
  }"
9271,create,"    public ResourceRecordSetApi create(String id) {
      return new DesignateResourceRecordSetApi(api, checkNotNull(id, ""id""));
    }"
9276,iterator,"  public Iterator<ResourceRecordSet<?>> iterator() {
    return new GroupByRecordNameAndTypeIterator(api.records(domainId).iterator());
  }"
9277,feign,"    Feign feign(Logger logger, Logger.Level logLevel) {
      RecordAdapter recordAdapter = new RecordAdapter();
      return Feign.builder()
          .logger(logger)"
9278,logLevel,"    Logger.Level logLevel() {
      return Logger.Level.NONE;
    }"
9279,logger,"    Logger logger() {
      return new Logger.NoOpLogger();
    }"
9280,keystoneV2,"    KeystoneV2 keystoneV2(Feign feign) {
      return feign.newInstance(EmptyTarget.create(KeystoneV2.class, ""keystone""));
    }"
9281,designate,"    Designate designate(Feign feign, DesignateTarget target) {
      return feign.newInstance(target);
    }"
9282,provideResourceRecordSetApiFactory,"    ResourceRecordSetApi.Factory provideResourceRecordSetApiFactory(
        DesignateResourceRecordSetApi.Factory in) {
      return in;"
9283,provideZoneApi,"    ZoneApi provideZoneApi(DesignateZoneApi in) {
      return in;
    }"
9284,checkConnection,"    CheckConnection checkConnection(LimitsReadable checkConnection) {
      return checkConnection;
    }"
9285,credentialTypeToParameterNames,"  public Map<String, Collection<String>> credentialTypeToParameterNames() {
    Map<String, Collection<String>> options = new LinkedHashMap<String, Collection<String>>();
    options.put(""password"", Arrays.asList(""tenantId"", ""username"", ""password""));
    return options;
  }"
9286,profileToRecordTypes,"  public Map<String, Collection<String>> profileToRecordTypes() {
    Map<String, Collection<String>>
        profileToRecordTypes =
        new LinkedHashMap<String, Collection<String>>();
    profileToRecordTypes.put(""roundRobin"", Arrays.asList(""A"", ""AAAA"", ""MX"", ""NS"", ""SRV"", ""TXT""));"
9287,basicRecordTypes,"  public Set<String> basicRecordTypes() {
    Set<String> types = new LinkedHashSet<String>();
    types.addAll(Arrays.asList(""A"", ""AAAA"", ""CNAME"", ""MX"", ""NS"", ""SRV"", ""TXT""));
    return types;
  }"
9289,toRDataMap,"  static Map<String, Object> toRDataMap(Record record) {
    if (""A"".equals(record.type)) {
      return AData.create(record.data);"
9290,write,"    public void write(JsonWriter out, List<X> value) throws IOException {
      throw new UnsupportedOperationException();
    }"
9291,read,"    public List<X> read(JsonReader reader) throws IOException {
      List<X> elements = new LinkedList<X>();
      reader.beginObject();
      while (reader.hasNext()) {
        String nextName = reader.nextName();
        if (jsonKey().equals(nextName)) {
          reader.beginArray();
          while (reader.hasNext()) {"
9294,build,"    protected Record build(JsonReader reader) throws IOException {
      return buildRecord(reader);
    }"
9296,build,"    protected Zone build(JsonReader reader) throws IOException {
      String name = null, id = null, email = null;
      int ttl = -1;
      while (reader.hasNext()) {
        String nextName = reader.nextName();
        if (nextName.equals(""id"")) {"
9298,read,"    public Record read(JsonReader reader) throws IOException {
      reader.beginObject();
      Record record = buildRecord(reader);
      reader.endObject();
      return record;
    }"
9299,write,"    public void write(JsonWriter out, Record record) throws IOException {
      out.beginObject();
      out.name(""name"").value(record.name);
      out.name(""type"").value(record.type);
      if (record.ttl != null) {
        out.name(""ttl"").value(record.ttl);
      }
      out.name(""data"").value(record.data);
      if (record.priority != null) {"
9301,buildRecord,"  static Record buildRecord(JsonReader reader) throws IOException {
    Record record = new Record();
    while (reader.hasNext()) {
      String key = reader.nextName();
      if (key.equals(""id"")) {"
9304,deleteRecord,"  void deleteRecord(@Param(""domainId"") String domainId, @Param(""recordId"") String recordId);
"
9305,updateRecord,"  Record updateRecord(@Param(""domainId"") String domainId, @Param(""recordId"") String recordId,
                      Record record);"
9306,createRecord,"  Record createRecord(@Param(""domainId"") String domainId, Record record);
"
9307,records,"  List<Record> records(@Param(""domainId"") String domainId);
"
9308,deleteDomain,"  void deleteDomain(@Param(""domainId"") String domainId);
"
9309,updateDomain,"  Zone updateDomain(@Param(""id"") String id, @Param(""name"") String name,
                    @Param(""email"") String email, @Param(""ttl"") int ttl);"
9310,createDomain,"  Zone createDomain(@Param(""name"") String name, @Param(""email"") String email,
                    @Param(""ttl"") int ttl);"
9313,toString,"    public String toString() {
      return version;
    }"
9314,provider,"  public static Object provider(denominator.Provider provider) {
    return Providers.provide(provider);
  }"
9315,create,"  public static DNSApiManager create(String providerName, Object... modules)
      throws IllegalArgumentException {
    Provider matchedProvider = Providers.getByName(providerName);
    return create(matchedProvider, modules);"
9316,modulesForGraph,"  private static List<Object> modulesForGraph(Provider in, Object... modules) {
    List<Object> modulesForGraph = new ArrayList<Object>(3);
    modulesForGraph.add(Providers.provide(in));
    modulesForGraph.add(Providers.instantiateModule(in));
    if (modules != null) {
      for (Object module : modules) {
        modulesForGraph.add(module);"
9317,create,"  public static DNSApiManager create(Provider in, Object... modules) {
    Object[] modulesForGraph = modulesForGraph(in, modules).toArray();
    try {
      return ObjectGraph.create(modulesForGraph).get(DNSApiManager.class);"
9318,providers,"  public static Iterable<Provider> providers() {
    return Providers.list();
  }"
9319,toString,"    public String toString() {
      return ""ConstantCredentials("" + creds + "")"";
    }"
9320,hashCode,"    public int hashCode() {
      return creds.hashCode();
    }"
9321,equals,"    public boolean equals(Object obj) {
      if (obj instanceof ConstantCredentials) {
        ConstantCredentials that = ConstantCredentials.class.cast(obj);
        return this.creds.equals(that.creds);"
9322,get,"    public Credentials get(denominator.Provider provider) {
      return checkValidForProvider(creds, provider);
    }"
9324,credentialConfigurationHasKeys,"  private static boolean credentialConfigurationHasKeys(denominator.Provider provider,
                                                        Set<?> keys) {
    for (String credentialType : provider.credentialTypeToParameterNames().keySet()) {
      if (keys.containsAll(provider.credentialTypeToParameterNames().get(credentialType))) {"
9325,credentialConfigurationHasPartCount,"  private static boolean credentialConfigurationHasPartCount(denominator.Provider provider,
                                                             int size) {
    for (String credentialType : provider.credentialTypeToParameterNames().keySet()) {
      if (provider.credentialTypeToParameterNames().get(credentialType).size() == size) {"
9326,isAnonymous,"  private final static boolean isAnonymous(Credentials input) {
    if (input == null) {
      return true;
    }
    if (input instanceof AnonymousCredentials) {
      return true;
    }"
9327,checkValidForProvider,"  public static Credentials checkValidForProvider(Credentials creds,
                                                  denominator.Provider provider) {
    checkNotNull(provider, ""provider cannot be null"");
    if (isAnonymous(creds) && provider.credentialTypeToParameterNames().isEmpty()) {
      return AnonymousCredentials.INSTANCE;"
9328,credentials,"  public static Object credentials(Credentials credentials) {
    return new ConstantCredentials(credentials);
  }"
9329,credentials,"  public static Object credentials(Object firstPart, Object secondPart, Object thirdPart) {
    return credentials(ListCredentials.from(firstPart, secondPart, thirdPart));
  }"
9330,credentials,"  public static Object credentials(Object firstPart, Object secondPart) {
    return credentials(ListCredentials.from(firstPart, secondPart));
  }"
9331,anonymous,"  public static Object anonymous() {
    return credentials(AnonymousCredentials.INSTANCE);
  }"
9332,from,"    public static Credentials from(final Map<String, ?> kwargs) {
      if (kwargs == null || kwargs.isEmpty()) {
        return AnonymousCredentials.INSTANCE;
      }"
9333,asList,"    public static List<Object> asList(Credentials in) throws IllegalArgumentException {
      checkNotNull(in, ""credentials"");
      if (in instanceof ListCredentials) {
        return ListCredentials.class.cast(in);
      } else if (in instanceof Map || in instanceof List) {"
9334,from,"    public static Credentials from(Object... parts) {
      return from(Arrays.asList(checkNotNull(parts, ""credentials"")));
    }"
9335,from,"    public static Credentials from(final List<?> parts) {
      if (parts == null || parts.isEmpty()) {
        return AnonymousCredentials.INSTANCE;
      }"
9336,deleteByNameAndType,"    public void deleteByNameAndType(String name, String type) {
      api.deleteByNameAndType(name, type);
      for (QualifiedResourceRecordSetApi qualifiedApi : qualifiedApis) {
        for (Iterator<ResourceRecordSet<?>> it = qualifiedApi.iterateByNameAndType(name, type);"
9337,deleteByNameTypeAndQualifier,"    public void deleteByNameTypeAndQualifier(String name, String type, String qualifier) {
      for (QualifiedResourceRecordSetApi qualifiedApi : qualifiedApis) {
        qualifiedApi.deleteByNameTypeAndQualifier(name, type, qualifier);"
9338,put,"    public void put(ResourceRecordSet<?> rrset) {
      if (rrset.qualifier() == null) {
        api.put(rrset);
        return;
      }
      for (QualifiedResourceRecordSetApi api : qualifiedApis) {
        if (api instanceof GeoResourceRecordSetApi && rrset.geo() != null) {
          api.put(rrset);"
9339,getByNameTypeAndQualifier,"    public ResourceRecordSet<?> getByNameTypeAndQualifier(String name, String type,
                                                          String qualifier) {
      for (QualifiedResourceRecordSetApi api : qualifiedApis) {
        ResourceRecordSet<?> val = api.getByNameTypeAndQualifier(name, type, qualifier);"
9340,iterator,"          public Iterator<ResourceRecordSet<?>> iterator() {
            return api.iterateByNameAndType(name, type);
          }"
9342,iterator,"          public Iterator<ResourceRecordSet<?>> iterator() {
            return api.iterateByName(name);
          }"
9343,iterateByName,"    public Iterator<ResourceRecordSet<?>> iterateByName(final String name) {
      List<Iterable<ResourceRecordSet<?>>>
          iterables =
          new ArrayList<Iterable<ResourceRecordSet<?>>>();
      for (final QualifiedResourceRecordSetApi api : qualifiedApis) {
        iterables.add(new Iterable<ResourceRecordSet<?>>() {"
9344,iterator,"    public Iterator<ResourceRecordSet<?>> iterator() {
      Iterator<ResourceRecordSet<?>> iterators = concat(qualifiedApis);
      if (!iterators.hasNext()) {
        return api.iterator();
      }"
9345,toIterator,"    static Iterator<ResourceRecordSet<?>> toIterator(ResourceRecordSet<?> rrs) {
      return rrs != null ? Collections.<ResourceRecordSet<?>>singleton(rrs).iterator() : Collections
          .<ResourceRecordSet<?>>emptyList().iterator();"
9346,create,"      public AllProfileResourceRecordSetApi create(String id) {
        Set<QualifiedResourceRecordSetApi>
            qualifiedApis =
            new LinkedHashSet<QualifiedResourceRecordSetApi>();
        for (Factory entry : factories) {"
9347,provideResourceRecordSetApiFactory,"  AllProfileResourceRecordSetApi.Factory provideResourceRecordSetApiFactory(
      final ResourceRecordSetApi.Factory factory, final Set<Factory> factories) {
    return new AllProfileResourceRecordSetApi.Factory() {"
9348,deleteWhenAbsent,"  public void deleteWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(deleting);
    server.enqueue(objectNotFound);

    ZoneApi api = server.connect().api().zones();
    api.delete(""1234"");

    server.assertAuthRequest();
    server.assertRequest().hasMethod(""DELETE"").hasPath(""/v1.0/123123/domains/1234"");"
9349,deleteWhenPresent,"  public void deleteWhenPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(deleting);
    server.enqueue(deleted);

    ZoneApi api = server.connect().api().zones();
    api.delete(""1234"");

    server.assertAuthRequest();
    server.assertRequest().hasMethod(""DELETE"").hasPath(""/v1.0/123123/domains/1234"");"
9350,putWhenPresent_withId,"  public void putWhenPresent_withId() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(updating);
    server.enqueue(updated);

    ZoneApi api = server.connect().api().zones();

    Zone zone = Zone.create(""1234"", ""denominator.io"", 3601, ""nil@denominator.io"");
    assertThat(api.put(zone)).isEqualTo(""1234"");

    server.assertAuthRequest();"
9352,putWhenAbsent,"  public void putWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(creating);
    server.enqueue(created);

    ZoneApi api = server.connect().api().zones();

    Zone zone = Zone.create(null, ""denominator.io"", 3601, ""nil@denominator.io"");
    assertThat(api.put(zone)).isEqualTo(""1234"");

    server.assertAuthRequest();"
9353,iteratorByNameWhenAbsent,"  public void iteratorByNameWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(""{\""domains\"":[],\""totalEntries\"":0}""));

    ZoneApi api = server.connect().api().zones();
    assertThat(api.iterateByName(""denominator.io"")).isEmpty();

    server.assertAuthRequest();"
9355,iteratorWhenAbsent,"  public void iteratorWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(""{ \""domains\"": [] }""));

    ZoneApi api = server.connect().api().zones();
    assertThat(api.iterator()).isEmpty();

    server.assertAuthRequest();"
9357,delete,"  public void delete(String id) {
    try {
      awaitComplete(api, api.deleteDomain(id));"
9358,updateZone,"  private String updateZone(String id, Zone zone) {
    awaitComplete(api, api.updateDomain(id, zone.email(), zone.ttl()));
    return id;
  }"
9359,put,"  public String put(Zone zone) {
    if (zone.id() != null) {
      return updateZone(zone.id(), zone);
    }"
9360,remove,"    public void remove() {
      throw new UnsupportedOperationException();
    }"
9361,next,"    public Zone next() {
      return zipWithSOA(list.get(i++));
    }"
9362,hasNext,"    public boolean hasNext() {
      while (i == length && list.next != null) {
        list = api.domains(list.next);
        length = list.size();"
9363,zipWithSOA,"  private Zone zipWithSOA(Zone next) {
    Record soa = api.recordsByNameAndType(Integer.parseInt(next.id()), next.name(), ""SOA"").get(0);
    return Zone.create(next.id(), next.name(), soa.ttl, next.email());
  }"
9364,iterateByName,"  public Iterator<Zone> iterateByName(String name) {
    ListWithNext<Zone> zones = api.domainsByName(name);
    if (zones.isEmpty()) {
      return singletonIterator(null);
    }"
9365,iterator,"  public Iterator<Zone> iterator() {
    return new ZipWithDomain(api.domains());
  }"
9369,type,"  public Class<CloudDNS> type() {
    return CloudDNS.class;
  }"
9371,getByNameAndType_SOA,"  public void getByNameAndType_SOA() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(soaResponse));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");

    assertThat(api.getByNameAndType(""denominator.io"", ""SOA""))
        .hasName(""denominator.io"")"
9372,getByNameAndTypeWhenPresent,"  public void getByNameAndTypeWhenPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(recordsByNameAndType));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");

    assertThat(api.getByNameAndType(""www.denominator.io"", ""A""))
        .hasName(""www.denominator.io"")"
9376,listWhenAbsent,"  public void listWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setResponseCode(404).setBody(
        ""{\""message\"":\""Not Found\"",\""code\"":404,\""details\"":\""\""}""));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");

    assertFalse(api.iterator().hasNext());"
9377,listWhenPresent,"  public void listWhenPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(records));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");
    Iterator<ResourceRecordSet<?>> records = api.iterator();

    while (records.hasNext()) {
      assertThat(records.next())"
9378,create,"    public ResourceRecordSetApi create(String id) {
      return new CloudDNSResourceRecordSetApi(api, Integer.parseInt(id));
    }"
9379,remove,"      public void remove() {
        throw new UnsupportedOperationException();
      }"
9380,next,"      public Record next() {
        return current.next();
      }"
9381,hasNext,"      public boolean hasNext() {
        while (!current.hasNext() && next != null) {
          ListWithNext<Record> nextPage = emptyOn404(recordPager, next);
          current = nextPage.iterator();"
9382,lazyIterateRecords,"  Iterator<Record> lazyIterateRecords(final Pager<Record> recordPager) {
    final ListWithNext<Record> first = emptyOn404(recordPager, null);

    if (first.next == null) {
      return first.iterator();"
9383,deleteByNameAndType,"  public void deleteByNameAndType(String name, String type) {
    checkNotNull(name, ""name"");
    checkNotNull(type, ""type"");

    for (Record record : api.recordsByNameAndType(domainId, name, type)) {"
9385,put,"  public void put(ResourceRecordSet<?> rrset) {
    checkNotNull(rrset, ""rrset was null"");
    checkArgument(!rrset.records().isEmpty(), ""rrset was empty %s"", rrset);

    List<Map<String, Object>>
        recordsLeftToCreate =
        new ArrayList<Map<String, Object>>(rrset.records());
"
9386,apply,"      public ListWithNext<Record> apply(URI nullOrNext) {
        return nullOrNext == null ? api.recordsByNameAndType(domainId, name, type)
                                  : api.records(nullOrNext);"
9388,iterateByName,"  public Iterator<ResourceRecordSet<?>> iterateByName(String name) {
    checkNotNull(name, ""name was null"");
    return filter(iterator(), nameEqualTo(name));
  }"
9389,apply,"      public ListWithNext<Record> apply(URI nullOrNext) {
        return nullOrNext == null ? api.records(domainId) : api.records(nullOrNext);
      }"
9390,iterator,"  public Iterator<ResourceRecordSet<?>> iterator() {
    Pager<Record> recordPager = new Pager<Record>() {
      public ListWithNext<Record> apply(URI nullOrNext) {
        return nullOrNext == null ? api.records(domainId) : api.records(nullOrNext);"
9391,testViaDagger,"  public void testViaDagger() {
    DNSApiManager manager = ObjectGraph
        .create(provide(new CloudDNSProvider()), new CloudDNSProvider.Module(),
                credentials(""username"", ""apiKey""))"
9392,testCredentialsRequired,"  public void testCredentialsRequired() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(
        ""no credentials supplied. clouddns requires one of the following forms: when type is password: username,password; apiKey: username,apiKey"");
"
9394,testCloudDNSRegistered,"  public void testCloudDNSRegistered() {
    assertThat(list()).contains(PROVIDER);
  }"
9395,testCloudDNSMetadata,"  public void testCloudDNSMetadata() {
    assertThat(PROVIDER.name()).isEqualTo(""clouddns"");
    assertThat(PROVIDER.supportsDuplicateZoneNames()).isFalse();
    assertThat(PROVIDER.credentialTypeToParameterNames())
        .containsEntry(""password"", Arrays.asList(""username"", ""password""))"
9396,get,"    public Credentials get() {
      return dynamicCredentials.get();
    }"
9398,url,"      public String url() {
        return url.get();
      }"
9400,feign,"    Feign feign(Logger logger, Logger.Level logLevel) {
      return Feign.builder()
          .logger(logger)"
9403,cloudIdentity,"    CloudIdentity cloudIdentity(Feign feign) {
      return feign.newInstance(EmptyTarget.create(CloudIdentity.class, ""cloudidentity""));
    }"
9404,cloudDNS,"    CloudDNS cloudDNS(Feign feign, CloudDNSTarget target) {
      return feign.newInstance(target);
    }"
9405,provideResourceRecordSetApiFactory,"    ResourceRecordSetApi.Factory provideResourceRecordSetApiFactory(
        CloudDNSResourceRecordSetApi.Factory api) {
      return api;"
9406,provideZoneApi,"    ZoneApi provideZoneApi(CloudDNSZoneApi api) {
      return api;
    }"
9408,credentialTypeToParameterNames,"  public Map<String, Collection<String>> credentialTypeToParameterNames() {
    Map<String, Collection<String>> options = new LinkedHashMap<String, Collection<String>>();
    options.put(""password"", Arrays.asList(""username"", ""password""));
    options.put(""apiKey"", Arrays.asList(""username"", ""apiKey""));
    return options;
  }"
9409,profileToRecordTypes,"  public Map<String, Collection<String>> profileToRecordTypes() {
    Map<String, Collection<String>>
        profileToRecordTypes =
        new LinkedHashMap<String, Collection<String>>();
    profileToRecordTypes.put(""roundRobin"", basicRecordTypes());"
9410,basicRecordTypes,"  public Set<String> basicRecordTypes() {
    Set<String> types = new LinkedHashSet<String>();
    types.addAll(Arrays.asList(""A"", ""AAAA"", ""CNAME"", ""MX"", ""NS"", ""TXT""));
    return types;
  }"
9412,transformsTXTRecordSet,"  public void transformsTXTRecordSet() {
    Record input = new Record();
    input.name = ""denominator.io"";
    input.type = ""TXT"";
    input.ttl = 3600;
    input.data(""Hello DNS"");

    assertThat(CloudDNSFunctions.toRDataMap(input))"
9413,transformsNSRecordSet,"  public void transformsNSRecordSet() {
    Record input = new Record();
    input.name = ""denominator.io"";
    input.type = ""NS"";
    input.ttl = 3600;
    input.data(""dns1.stabletransit.com"");

    assertThat(CloudDNSFunctions.toRDataMap(input))"
9414,toRDataMap,"  static Map<String, Object> toRDataMap(Record record) {
    if (""MX"".equals(record.type)) {
      return MXData.create(record.priority, record.data());"
9415,awaitComplete,"  static String awaitComplete(CloudDNS api, Job job) {
    RetryableException retryableException = new RetryableException(
        format(""Job %s did not complete. Check your logs."", job.id), null);
    Retryer retryer = new Retryer.Default(500, 1000, 30);
"
9416,provideLogger,"    Logger provideLogger() {
      return new Logger.JavaLogger().appendToFile(""build/http-wire.log"");
    }"
9417,provideLevel,"    Logger.Level provideLevel() {
      return Logger.Level.FULL;
    }"
9418,create,"  static DNSApiManager create(String username, String apiKey) {
    CloudDNSProvider provider = new CloudDNSProvider(emptyToNull(getProperty(""clouddns.url"")));
    return Denominator.create(provider, credentials(username, apiKey), new Overrides());
  }"
9420,toString,"  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(""Provider ["");
    builder.append(""name="").append(name());
    builder.append(""url="").append(url());
    builder.append(""]"");
    return builder.toString();
  }"
9421,hashCode,"  public int hashCode() {
    int result = 17;
    result = 31 * result + name().hashCode();
    result = 31 * result + url().hashCode();
    return result;
  }"
9422,equals,"  public boolean equals(Object obj) {
    if (obj instanceof Provider) {
      Provider other = (Provider) obj;
      return name().equals(other.name())"
9423,credentialTypeToParameterNames,"  public Map<String, Collection<String>> credentialTypeToParameterNames() {
    return new LinkedHashMap<String, Collection<String>>();
  }"
9424,supportsDuplicateZoneNames,"  public boolean supportsDuplicateZoneNames() {
    return false;
  }"
9425,profileToRecordTypes,"  public Map<String, Collection<String>> profileToRecordTypes() {
    Map<String, Collection<String>> result = new LinkedHashMap<String, Collection<String>>();
    List<String> roundRobin = asList(""A"", ""AAAA"", ""MX"", ""NS"", ""PTR"", ""SPF"", ""SRV"", ""SSHFP"", ""TXT"");
    result.put(""roundRobin"", roundRobin);
    return result;
  }"
9426,basicRecordTypes,"  public Set<String> basicRecordTypes() {
    Set<String> result = new LinkedHashSet<String>();
    result.addAll(asList(""A"", ""AAAA"", ""CERT"", ""CNAME"", ""MX"", ""NAPTR"", ""NS"", ""PTR"", ""SOA"", ""SPF"",
                         ""SRV"", ""SSHFP"", ""TXT""));
    return result;"
9427,url,"  public String url() {
    return ""mem:"" + name();
  }"
9428,name,"  public String name() {
    return getClass().getSimpleName().toLowerCase().replace(""provider"", """");
  }"
9429,checkLowerCamel,"  private void checkLowerCamel(Map<String, Collection<String>> credentialTypeToParameterNames) {
    for (String credentialType : credentialTypeToParameterNames.keySet()) {
      for (String credentialParam : credentialTypeToParameterNames.get(credentialType)) {"
9430,create,"    AllProfileResourceRecordSetApi create(String id);
  }"
9432,destroyItem,"    public void destroyItem(ViewGroup container, int position, Object object) {
    }"
9434,isViewFromObject,"    public boolean isViewFromObject(View view, Object object) {
        return view == object;
    }"
9436,dip2px,"    public static int dip2px(Context context, float dpValue) {
        final float scale = context.getResources().getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);
    }"
9437,startScroll,"        public void startScroll(int startX, int startY, int dx, int dy) {
            super.startScroll(startX, startY, dx, dy, this.duration);
        }"
9438,startScroll,"        public void startScroll(int startX, int startY, int dx, int dy, int duration) {
            super.startScroll(startX, startY, dx, dy, this.duration);
        }"
9440,animateTitlesAndCursor,"    public void animateTitlesAndCursor(int position, float positionOffSet) {
        if (tabNum <= 1) {
            return;
        }
        int cursorLeft = 0;
        int cursorRight = 0;

        for (int i = 0; i < tabNum; i++) {
            if ((position % tabNum) != i) {
                continue;"
9441,onPageScrollStateChanged,"            public void onPageScrollStateChanged(int state) {}
        });"
9442,onPageSelected,"            public void onPageSelected(int position) {}
"
9445,onPreDraw,"            public boolean onPreDraw() {
                DecentBanner.this.getViewTreeObserver().removeOnPreDrawListener(this);
                initTabsAndCursorLayout();
                return true;
            }"
9447,init,"    private void init(List<View> views, final List<String> titleStrings, int interval, int animationDuration, int logoResourceId) {
        Bitmap logoBitmap;
        if (logoResourceId > 0) {
            logoBitmap = BitmapFactory.decodeResource(getResources(), logoResourceId);
        } else {"
9448,isGradientEnabled,"    public boolean isGradientEnabled() {
        return enableGradient;
    }"
9450,start,"    public void start(List<View> views, List<String> titles, int interval, int animationDuration, Bitmap logo) {
        init(views, titles, interval, animationDuration, logo);
    }"
9451,start,"    public void start(List<View> views, List<String> titles, int interval, int animationDuration, int logoResourceId) {
        init(views, titles, interval, animationDuration, logoResourceId);
    }"
9452,start,"    public void start(List<View> views, List<String> titles, int interval, int animationDuration) {
        init(views, titles, interval, animationDuration, 0);
    }"
9453,stopAutoPlay,"    public void stopAutoPlay() {
        handler.removeMessages(MESSAGE_SCROLL);
    }"
9454,startAutoPlay,"    public void startAutoPlay() {
        stopAutoPlay();
        handler.sendEmptyMessageDelayed(MESSAGE_SCROLL, homeColumnScrollInterval * 1000);
    }"
9455,handleMessage,"        public void handleMessage(Message msg) {
            if (msg.what == MESSAGE_SCROLL) {
                if(viewPager != null) {"
9456,onNothingSelected,"    public void onNothingSelected(AdapterView<?> parent) {
        mTheme = DevToolFragment.DevToolTheme.DARK;
    }"
9457,onItemSelected,"    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        mTheme = position == 0 ? DevToolFragment.DevToolTheme.DARK : DevToolFragment.DevToolTheme.LIGHT;
    }"
9459,doSomeStuff,"    private DebugFunction doSomeStuff() {
        return new DebugFunction() {
            @Override"
9460,call,"            public String call() throws Exception {
                return ""This function has a title"";
            }"
9462,onClick,"            public void onClick(View v) {

                final DevTool.Builder builder = new DevTool.Builder(ExampleActivity.this);

                if (mSeekbar != null) {"
9465,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                functionNumber.setText(Integer.toString(progress));
            }"
9468,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        viewPager = (ViewPager) findViewById(R.id.view_pager);
        viewPager.setAdapter(new Adapter(getSupportFragmentManager()));
    }"
9477,reset,"    public void reset() {
        last = min;
    }"
9479,onValueChange,"        void onValueChange(float value);
    }"
9480,onAnimationUpdate,"        public void onAnimationUpdate(ValueAnimator valueAnimator) {
            Float value = (Float) valueAnimator.getAnimatedValue();
            progressPainter.setValue(value);

            if (valueChangeListener != null) {
                valueChangeListener.onValueChange(value);"
9487,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec + heightNormalittation);
    }"
9488,animateValue,"    private void animateValue() {
        if (valueAnimator != null) {
            valueAnimator.setFloatValues(last, value);"
9490,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        externalCirclePainter.draw(canvas);
        internalCirclePainter.draw(canvas);
        progressPainter.draw(canvas);
        iconPainter.draw(canvas);
        invalidate();
    }"
9491,initValueAnimator,"    private void initValueAnimator() {
        valueAnimator = new ValueAnimator();
        valueAnimator.setInterpolator(interpolator);
        valueAnimator.addUpdateListener(new ValueAnimatorListenerImp());
    }"
9492,initPainters,"    private void initPainters() {
        progressPainter = new ProgressPainterImp(progressColor, min, max, progressStrokeWidth);
        externalCirclePainter = new ExternalCirclePainterImp(externalColor);
        internalCirclePainter = new InternalCirclePainterImp(internalBaseColor);
        iconPainter = new IconPainter(image);
    }"
9493,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        progressPainter.onSizeChanged(h, w);
        externalCirclePainter.onSizeChanged(h, w);
        internalCirclePainter.onSizeChanged(h, w);
        iconPainter.onSizeChanged(h, w);
        animateValue();
    }"
9495,init,"    private void init(Context context, AttributeSet attributeSet) {
        setWillNotDraw(false);
        TypedArray attributes = context.obtainStyledAttributes(attributeSet,
                R.styleable.DashedCircularProgress);
        initAttributes(attributes);
        initPainters();
        initValueAnimator();"
9496,onLayout,"    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
        super.onLayout(changed, left, top, right, bottom);
        final int count = getChildCount();
        int maxWidth = getWidth() / 2;
        int maxHeight = getHeight() / 2;

        for (int i = 0; i < count; i++) {"
9499,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    Object factory;
    if (isBuilder) {
      factory = ComponentBuilderInvocationHandler.forSubcomponentBuilder(cls, scope);
    } else {"
9500,forFactory,"  static UnlinkedBinding forFactory(Class<?> factoryClass) {
    return new UnlinkedSubcomponentBinding(false, factoryClass);
  }"
9501,forBuilder,"  static UnlinkedBinding forBuilder(Class<?> builderClass) {
    return new UnlinkedSubcomponentBinding(true, builderClass);
  }"
9502,toString,"  public String toString() {
    return ""Set"" + elementBindings;
  }"
9504,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    return new LinkedScopedBinding<>(unlinkedBinding.link(linker, scope));
  }"
9507,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    MembersInjector<?> membersInjector = ReflectiveMembersInjector.create(targetClass, scope);
    return new LinkedInstanceBinding<>(membersInjector);
  }"
9508,toString,"  public String toString() {
    return ""Map"" + mapOfProviderKey;
  }"
9510,toString,"  public String toString() {
    return ""Map"" + entryBindings;
  }"
9515,matchingParameterizedType,"  private Type[] matchingParameterizedType(Type[] typeArguments) {
    Type[] matchedTypeArguments = new Type[typeArguments.length];
    for (int i = 0; i < typeArguments.length; i++) {
      if (isTypeVariable(typeArguments[i])) {
        matchedTypeArguments[i] = matchTypeToConcreteType((TypeVariable<?>) typeArguments[i]);"
9516,findKeyForParameterizedType,"  private TypeUtil.ParameterizedTypeImpl findKeyForParameterizedType(
      ParameterizedType parameterType) {
    Type[] matchingTypes = matchingParameterizedType(parameterType.getActualTypeArguments());
    return new TypeUtil.ParameterizedTypeImpl(null, parameterType.getRawType(), matchingTypes);"
9517,hasParameterizedTypeVariable,"  private static boolean hasParameterizedTypeVariable(Type parameterType) {
    if (!(parameterType instanceof ParameterizedType)) {
      return false;
    }
    Type[] actualTypeArguments = ((ParameterizedType) parameterType).getActualTypeArguments();
    for (Type type : actualTypeArguments) {"
9518,isTypeVariable,"  private static boolean isTypeVariable(Type parameterType) {
    return parameterType instanceof TypeVariable;
  }"
9527,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    ReflectiveAndroidInjector.Factory<?> factory =
        new ReflectiveAndroidInjector.Factory<>(scope, moduleClasses, instanceClass, annotations);
    return new LinkedInstanceBinding<>(factory);"
9532,toString,"    public String toString() {
      if (lowerBound != null) {
        return ""? super "" + typeToString(lowerBound);"
9534,equals,"    public boolean equals(Object other) {
      return other instanceof WildcardType && Types.equals(this, (WildcardType) other);
    }"
9539,equals,"    public boolean equals(Object o) {
      return o instanceof GenericArrayType && Types.equals(this, (GenericArrayType) o);
    }"
9541,toString,"    public String toString() {
      StringBuilder result = new StringBuilder(30 * (typeArguments.length + 1));
      result.append(typeToString(rawType));

      if (typeArguments.length == 0) {
        return result.toString();
      }
"
9542,hashCode,"    public int hashCode() {
      return Arrays.hashCode(typeArguments) ^ rawType.hashCode() ^ Objects.hashCode(ownerType);
    }"
9543,equals,"    public boolean equals(Object other) {
      return other instanceof ParameterizedType && Types.equals(this, (ParameterizedType) other);
    }"
9547,checkNotPrimitive,"  static void checkNotPrimitive(Type type) {
    if ((type instanceof Class<?>) && ((Class<?>) type).isPrimitive()) {
      throw new IllegalArgumentException(""Unexpected primitive "" + type + "". Use the boxed type."");"
9548,typeToString,"  static String typeToString(Type type) {
    return type instanceof Class ? ((Class<?>) type).getName() : type.toString();
  }"
9549,canonicalize,"  static Type canonicalize(Type type) {
    if (type instanceof Class) {
      Class<?> c = (Class<?>) type;"
9555,two,"      static Long two() {
        return 2L;
      }"
9558,one,"    static String one() {
      return ""one"";
    }"
9560,two,"      Long two() {
        return two;
      }"
9570,createNested,"  Nested createNested(Nested.Module2 module);
"
9580,string,"    static String string() {
      return ""foo"";
    }"
9582,get,"  public @Nullable T get() {
    LinkedBinding<T> binding = this.binding;
    if (binding == null) {
      binding = this.binding = (LinkedBinding<T>) scope.getBinding(key);
    }"
9583,get,"  public T get() {
    Object value = this.value;
    if (value == this) {
      synchronized (this) {
        value = this.value;"
9584,value,"    static Object value() {
      return new Object();
    }"
9587,value,"    static Runnable value() {
      return new Runnable() {
        @Override"
9593,get,"  public T get() {
    LinkedBinding<T> linked = linkedRef.get();
    if (linked == null) {
      linked = (LinkedBinding<T>) binding.link(new Linker(scope), scope);
"
9595,addInstance,"    Builder addInstance(Key key, @Nullable Object instance) {
      return addBinding(key, new LinkedInstanceBinding<>(instance));
    }"
9601,addBinding,"    Builder addBinding(Key key, Binding binding) {
      if (key == null) throw new NullPointerException(""key == null"");
      if (binding == null) throw new NullPointerException(""binding == null"");

      Binding replaced = keyToBinding.put(key, binding);
      if (replaced != null) {
        throw new IllegalStateException("
9602,addJustInTimeLookupFactory,"    Builder addJustInTimeLookupFactory(JustInTimeLookup.Factory jitLookupFactory) {
      if (jitLookupFactory == null) throw new NullPointerException(""jitLookupFactory == null"");
      this.jitLookupFactories.add(jitLookupFactory);
      return this;
    }"
9603,link,"  private LinkedBinding<?> link(Key key, @Nullable Linker linker, UnlinkedBinding binding) {
    if (linker == null) {
      linker = new Linker(this);
    }
    LinkedBinding<?> linkedBinding = linker.link(key, binding);
"
9604,putJitBinding,"  private @Nullable LinkedBinding<?> putJitBinding(
      Key key, @Nullable Linker linker, JustInTimeLookup lookup) {
    Binding jitBinding = lookup.binding;

    Annotation scope = lookup.scope;
    if (scope != null) {
      if (!annotations.contains(scope)) {
        return parent != null ? parent.putJitBinding(key, linker, lookup) : null;"
9605,findExistingBinding,"  private @Nullable LinkedBinding<?> findExistingBinding(Key key, @Nullable Linker linker) {
    Binding binding = bindings.get(key);
    if (binding != null) {
      return binding instanceof LinkedBinding<?>
          ? (LinkedBinding<?>) binding"
9608,toString,"  public String toString() {
    return ""Scope"" + annotations;
  }"
9611,runnable,"    static Runnable runnable() {
      return new Runnable() {
        @Override"
9622,addSetBinding,"  private static void addSetBinding(
      Scope.Builder scopeBuilder, Key elementKey, Binding elementBinding) {
    Key key =
        Key.of("
9623,addBinding,"  private static void addBinding(
      Scope.Builder scopeBuilder, Key key, Binding binding, Annotation[] annotations) {
    Annotation scope = findScope(annotations);
    if (scope != null) {
      if (!scopeBuilder.annotations.contains(scope)) {"
9626,injectMembers,"  public void injectMembers(T instance) {
    for (ClassInjector<T> classInjector : classInjectors) {
      classInjector.injectMembers(instance);"
9629,create,"    public AndroidInjector<T> create(T instance) {
      Scope scope =
          ComponentScopeBuilder.create(moduleClasses, new Class<?>[0], annotations, parent)
              .get()
              .addInstance(Key.of(null, instanceClass), instance)"
9630,inject,"  public void inject(T instance) {
    membersInjector.injectMembers(instance);
  }"
9631,one,"    static String one() {
      return ""one"" + oneCount.getAndIncrement();
    }"
9635,provideInteger,"    static Integer provideInteger() {
      return 1;
    }"
9636,provideString,"    static String provideString() {
      return ""foo"";
    }"
9640,intToLong,"    static Long intToLong(Integer value) {
      return Long.valueOf(value);
    }"
9641,stringToInteger,"    static Integer stringToInteger(String value) {
      return Integer.parseInt(value);
    }"
9642,longToString,"    static String longToString(Long value) {
      return String.valueOf(value);
    }"
9644,provideCharacter,"    static Character provideCharacter() {
      return '\u221E';
    }"
9645,provideBoolean,"    static Boolean provideBoolean() {
      return true;
    }"
9646,provideDouble,"    static Double provideDouble() {
      return -64.0;
    }"
9647,provideFloat,"    static Float provideFloat() {
      return -32.0f;
    }"
9648,provideLong,"    static Long provideLong() {
      return 64L;
    }"
9649,provideInteger,"    static Integer provideInteger() {
      return 32;
    }"
9650,provideShort,"    static Short provideShort() {
      return 16;
    }"
9651,provideByte,"    static Byte provideByte() {
      return 8;
    }"
9660,provideChar,"    static char provideChar() {
      return '\u221E';
    }"
9661,provideBoolean,"    static boolean provideBoolean() {
      return true;
    }"
9662,provideDouble,"    static double provideDouble() {
      return -64.0;
    }"
9663,provideFloat,"    static float provideFloat() {
      return -32.0f;
    }"
9664,provideLong,"    static long provideLong() {
      return 64L;
    }"
9665,provideInt,"    static int provideInt() {
      return 32;
    }"
9666,provideShort,"    static short provideShort() {
      return 16;
    }"
9667,provideByte,"    static byte provideByte() {
      return 8;
    }"
9678,five,"    static long five() {
      return 5L;
    }"
9683,foo,"    static String foo() {
      return ""foo"";
    }"
9689,foo,"    static String foo() {
      return null;
    }"
9698,create,"    NestedDependencyInterfaceTest create(First dependencies);
  }"
9700,string,"          static String string() {
            return ""foo"";
          }"
9706,create,"    MultipleInterfacesRequestSameDependency create(Aggregate first);
  }"
9709,two,"    static long two() {
      return 2L;
    }"
9710,one,"    static long one() {
      return 1L;
    }"
9715,one,"    static Set<Long> one() {
      return singleton(1L);
    }"
9717,two,"    static String two() {
      return ""two"";
    }"
9718,one,"    static Set<String> one() {
      return singleton(""one"");
    }"
9723,two,"    static String two() {
      return ""two"" + twoCount.getAndIncrement();
    }"
9729,two,"    static String two() {
      return twoValue.get();
    }"
9730,one,"    static String one() {
      return oneValue.get();
    }"
9741,empty,"    abstract Map<String, String> empty();
  }"
9743,two,"    static I two() {
      return Impl2.INSTANCE;
    }"
9744,one,"    static I one() {
      return Impl1.INSTANCE;
    }"
9749,string,"    static Long string() {
      return 5L;
    }"
9751,string,"    static String string(StringSubcomponent subcomponent) {
      return subcomponent.value().toString();
    }"
9753,create,"      StringSubcomponent create(@BindsInstance Long value);
    }"
9757,string,"    static String string(StringSubcomponent.Builder builder, StringSubcomponent.Factory factory) {
      return builder.longValue(5L).build().value().toString()
          + "" and """
9761,string,"    static String string(StringSubcomponent.Factory factory) {
      return factory.create(5L).value().toString();
    }"
9766,string,"    static String string(StringSubcomponent.Builder builder) {
      return builder.longValue(5L).build().value().toString();
    }"
9768,helperPrivateStaticMethod,"    private static Integer helperPrivateStaticMethod() {
      return 42;
    }"
9769,helperPrivateMethod,"    private Integer helperPrivateMethod() {
      return helperPrivateStaticMethod();
    }"
9770,integer,"    Integer integer() {
      return helperPrivateMethod();
    }"
9773,integer,"    static Integer integer() {
      return 42;
    }"
9775,string,"    default String string() {
      return ""foo"";
    }"
9777,unrelatedMethodInherited,"    default void unrelatedMethodInherited() {}
  }"
9784,value,"    static Integer value() {
      return 2;
    }"
9785,value,"    static Long value() {
      return 3L;
    }"
9786,add,"    static Number add(Long longValue, Integer integerValue) {
      return longValue + integerValue;
    }"
9787,string,"    static String string(Number value) {
      return value.toString();
    }"
9791,number,"    abstract Number number(Integer num);
  }"
9802,string,"    String string() {
      return ""foo"";
    }"
9807,staticMethod,"    static void staticMethod(String one) {}
  }"
9812,privateMethod,"    private void privateMethod(String one) {}
  }"
9820,abstractMethod,"    abstract void abstractMethod(String one);
  }"
9823,targetInjector,"  MembersInjector<Target<? extends String>> targetInjector();
"
9827,targetInjector,"  MembersInjector<Target<String>> targetInjector();
"
9829,targetInjector,"  MembersInjector<Target> targetInjector();
"
9832,foo,"    static @Foo String foo() {
      return ""foo"";
    }"
9833,foo,"    void foo(@Foo String foo) {
      fromMethod = foo;
    }"
9836,toString,"    public String toString() {
      return String.format(""%s, subField=%s"", super.toString(), subField);
    }"
9838,toString,"    public String toString() {
      return String.format(""baseField=%s"", baseField);
    }"
9841,three,"    public void three(Integer three) {
      count++;
    }"
9842,two,"    void two(Long two) {
      count++;
    }"
9843,one,"    protected void one(String one) {
      count++;
    }"
9845,three,"    static Integer three() {
      return 3;
    }"
9846,two,"    static Long two() {
      return 2L;
    }"
9848,three,"    public void three(Integer three) {
      this.three = three;
      count++;
    }"
9849,two,"    void two(Long two) {
      this.two = two;
      count++;
    }"
9850,one,"    protected void one(String one) {
      this.one = one;
      count++;
    }"
9855,three,"    void three(Integer three) {
      count++;
    }"
9856,two,"    long two(Long two) {
      count++;
      return two;
    }"
9857,one,"    String one(String one) {
      count++;
      return one;
    }"
9862,multiple,"    void multiple(String one, Long two, Long two2, Integer three) {
      this.one = one;
      this.two = two;
      this.two2 = two;
      this.three = three;
    }"
9868,subtype,"    void subtype(String foo) {
      subtypeCalled = true;
    }"
9869,two,"    void two(String one) {
      baseCalled = true;
    }"
9876,method,"    void method(String foo) {
      fieldBeforeMethod = this.foo != null;
    }"
9881,string,"    static Map<String, String> string() {
      Map<String, String> map = new HashMap<>();
      map.put(""1"", ""one"");
      map.put(""2"", ""two"");
      return map;
    }"
9883,string,"    static Map<String, Provider<String>> string(
        @Named(""one"") Provider<String> one, @Named(""two"") Provider<String> two) {
      Map<String, Provider<String>> map = new HashMap<>();
      map.put(""1"", one);
      map.put(""2"", two);
      return map;"
9884,provideFooString,"    static String provideFooString() {
      return twoValue.get();
    }"
9885,provideBarString,"    static String provideBarString() {
      return oneValue.get();
    }"
9886,strings,"  Map<String, Provider<String>> strings();
"
9887,string,"    static Map<String, Lazy<String>> string(
        @Named(""one"") Lazy<String> one, @Named(""two"") Lazy<String> two) {
      Map<String, Lazy<String>> map = new HashMap<>();
      map.put(""1"", one);
      map.put(""2"", two);
      return map;"
9891,appendChain,"  private void appendChain(StringBuilder builder) {
    for (Map.Entry<Key, Binding> entry : chain.entrySet()) {
      builder"
9892,toString,"  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(""Linker with "").append(scope).append(""\n"");
    appendChain(builder);
    return builder.toString();
  }"
9893,failure,"  private RuntimeException failure(Key key, String reason, String cause) {
    StringBuilder builder = new StringBuilder(reason).append("" for "").append(key).append('\n');
    appendChain(builder);
    builder.append("" * Requested: "").append(key).append(""\n     which "").append(cause).append('.');
    throw new IllegalStateException(builder.toString());
  }"
9894,link,"  LinkedBinding<?> link(Key key, UnlinkedBinding unlinkedBinding) {
    if (chain.containsKey(key)) {
      throw failure(key, ""Dependency cycle"", ""forms a cycle"");
    }
    chain.put(key, unlinkedBinding);
    LinkedBinding<?> linkedBinding = unlinkedBinding.link(this, scope);
    chain.remove(key);"
9895,find,"  LinkedBinding<?> find(Key key) {
    return scope.findBinding(key, this);
  }"
9896,get,"  LinkedBinding<?> get(Key key) {
    LinkedBinding<?> binding = find(key);
    if (binding != null) {
      return binding;
    }"
9897,get,"  public Set<T> get() {
    Set<T> elements = new LinkedHashSet<>();
    for (LinkedBinding<T> elementBinding : elementBindings) {
      elements.add(elementBinding.get());
    }
    for (LinkedBinding<Set<T>> elementsBinding : elementsBindings) {"
9898,get,"  public @Nullable T get() {
    Object instance = this.instance;
    if (instance == this) {
      synchronized (this) {
        instance = this.instance;"
9901,get,"  public Provider<T> get() {
    return new ScopeKeyedProvider<>(scope, key);
  }"
9902,get,"  public Map<K, V> get() {
    Map<K, Provider<V>> mapOfProvider = mapOfProviderBinding.get();
    assert mapOfProvider != null;

    Map<K, V> mapOfValue = new LinkedHashMap<>(mapOfProvider.size());
    for (Map.Entry<K, Provider<V>> entry : mapOfProvider.entrySet()) {
      mapOfValue.put(entry.getKey(), entry.getValue().get());"
9903,get,"  public Lazy<T> get() {
    return new ScopeKeyedLazy<>(scope, key);
  }"
9904,get,"  public T get() {
    T value = this.value;
    if (value == null) throw new IllegalStateException();
    return value;
  }"
9907,get,"  public T get() {
    Object[] arguments = new Object[dependencies.length];
    for (int i = 0; i < dependencies.length; i++) {
      arguments[i] = dependencies[i].get();
    }
    T instance = tryInstantiate(constructor, arguments);
    membersInjector.injectMembers(instance);"
9908,toString,"  public String toString() {
    return ""@BindsOptionalOf["" + dependency + ']';
  }"
9909,get,"  public Optional<T> get() {
    if (dependency == null) {
      return Optional.empty();
    }
    T value = dependency.get();
    if (value == null) {"
9910,toString,"  public String toString() {
    return ""@BindsInstance["" + value + ']';
  }"
9911,get,"  public @Nullable T get() {
    return value;
  }"
9913,get,"  public Optional<T> get() {
    if (dependency == null) {
      return Optional.absent();
    }
    T value = dependency.get();
    if (value == null) {"
9919,toString,"  public final String toString() {
    Annotation qualifier = qualifier();
    String type = getTypeName(type());
    return qualifier != null ? qualifier.toString() + ' ' + type : type;
  }"
9921,qualifier,"  abstract @Nullable Annotation qualifier();
"
9922,of,"  static Key of(@Nullable Annotation qualifier, Type type) {
    return new AutoValue_Key(qualifier, canonicalize(boxIfNecessary(type)));
  }"
9930,string,"    static String string() {
      return ""hey"";
    }"
9937,evaluate,"        public void evaluate() {
          try {
            base.evaluate();
          } catch (Throwable t) {"
9938,evaluate,"        public void evaluate() {
          throw new AssumptionViolatedException(""Ignored in code gen backend"");
        }"
9939,apply,"  public Statement apply(Statement base, Description description) {
    boolean ignoreCodegen = description.getAnnotation(IgnoreCodegen.class) != null;
    if (ignoreCodegen && backend == Backend.CODEGEN) {
      return new Statement() {
        @Override
        public void evaluate() {
          throw new AssumptionViolatedException(""Ignored in code gen backend"");"
9940,membersInjectorWildcardType,"  public void membersInjectorWildcardType() {
    try {
      backend.create(MemberInjectorWildcardType.class).targetInjector();"
9944,multipleInterfacesRequestSameDependency,"  public void multipleInterfacesRequestSameDependency() {
    String value = ""my-value"";
    String result =
        backend
            .factory(MultipleInterfacesRequestSameDependency.Factory.class)"
9945,nestedDependencyInterfaceTest,"  public void nestedDependencyInterfaceTest() {
    String value = ""my-value"";
    String result =
        backend.factory(NestedDependencyInterfaceTest.Factory.class).create(() -> value).value();
    assertThat(result).isSameInstanceAs(value);"
9946,subcomponentScopeDependsOnUnscoped,"  public void subcomponentScopeDependsOnUnscoped() {
    SubcomponentScopedDependsOnUnscoped unscoped =
        backend.create(SubcomponentScopedDependsOnUnscoped.class);
    try {"
9947,subcomponentScopeCycle,"  public void subcomponentScopeCycle() {
    SubcomponentScopeCycle.RequestComponent requestComponent =
        backend.create(SubcomponentScopeCycle.class).request();
    try {"
9948,componentScopeDependsOnUnscoped,"  public void componentScopeDependsOnUnscoped() {
    try {
      backend.create(ComponentScopedDependsOnUnscoped.class);"
9949,componentAndSubcomponentScopeCycle,"  public void componentAndSubcomponentScopeCycle() {
    ComponentAndSubcomponentScopeCycle component =
        backend.create(ComponentAndSubcomponentScopeCycle.class);
    try {"
9950,componentScopeCycleWithMultipleAnnotations,"  public void componentScopeCycleWithMultipleAnnotations() {
    try {
      backend.create(ComponentScopeCycleWithMultipleAnnotations.class);"
9951,componentScopeCycle,"  public void componentScopeCycle() {
    try {
      backend.create(ComponentScopeCycle.class);"
9953,componentBindingInstance,"  public void componentBindingInstance() {
    ComponentBindingInstance instance = backend.create(ComponentBindingInstance.class);
    assertThat(instance).isSameInstanceAs(instance.self());
    assertThat(instance).isSameInstanceAs(instance.target().component);
  }"
9954,subcomponentFactoryProvision,"  public void subcomponentFactoryProvision() {
    SubcomponentFactoryProvision.Nested nested =
        backend
            .create(SubcomponentFactoryProvision.class)
            .nestedFactory()"
9955,subcomponentFactoryMethod,"  public void subcomponentFactoryMethod() {
    SubcomponentFactoryMethod.Nested nested =
        backend
            .create(SubcomponentFactoryMethod.class)
            .createNested(new SubcomponentFactoryMethod.Nested.Module2(2L));"
9956,subcomponentBuilderProvision,"  public void subcomponentBuilderProvision() {
    SubcomponentBuilderProvision.Nested nested =
        backend
            .create(SubcomponentBuilderProvision.class)
            .nestedBuilder()"
9957,subcomponentProvision,"  public void subcomponentProvision() {
    SubcomponentProvision.Nested nested = backend.create(SubcomponentProvision.class).nested();
    assertThat(nested.one()).isEqualTo(""one"");
    assertThat(nested.two()).isEqualTo(2L);
  }"
9958,componentWithDependenciesCreateFails,"  public void componentWithDependenciesCreateFails() {
    try {
      backend.create(ComponentWithDependencies.class);"
9959,noComponentBuilderAnnotationFails,"  public void noComponentBuilderAnnotationFails() {
    try {
      backend.builder(NoBuilderAnnotation.Builder.class);"
9960,abstractBuilderClassFails,"  public void abstractBuilderClassFails() {
    try {
      backend.builder(AbstractBuilderClass.Builder.class);"
9961,packagePrivateComponentFails,"  public void packagePrivateComponentFails() {
    try {
      backend.builder(PackagePrivateComponent.Builder.class);"
9962,noComponentAnnotationBuilderFails,"  public void noComponentAnnotationBuilderFails() {
    try {
      backend.builder(NoAnnotation.Builder.class);"
9963,noComponentAnnotationCreateFails,"  public void noComponentAnnotationCreateFails() {
    try {
      backend.create(NoAnnotation.class);"
9964,abstractClassBuilderFails,"  public void abstractClassBuilderFails() {
    AbstractComponent.Builder builder = backend.builder(AbstractComponent.Builder.class);
    try {
      builder.build();"
9965,abstractClassCreateFails,"  public void abstractClassCreateFails() {
    try {
      backend.create(AbstractComponent.class);"
9966,membersInjectionStaticMethod,"  public void membersInjectionStaticMethod() {
    MembersInjectionStaticMethod component = backend.create(MembersInjectionStaticMethod.class);
    MembersInjectionStaticMethod.Target instance = new MembersInjectionStaticMethod.Target();
    try {
      component.inject(instance);"
9967,membersInjectionPrivateMethod,"  public void membersInjectionPrivateMethod() {
    MembersInjectionPrivateMethod component = backend.create(MembersInjectionPrivateMethod.class);
    MembersInjectionPrivateMethod.Target instance = new MembersInjectionPrivateMethod.Target();
    try {
      component.inject(instance);"
9968,membersInjectionStaticField,"  public void membersInjectionStaticField() {
    MembersInjectionStaticField component = backend.create(MembersInjectionStaticField.class);
    MembersInjectionStaticField.Target instance = new MembersInjectionStaticField.Target();
    try {
      component.inject(instance);"
9969,membersInjectionPrivateField,"  public void membersInjectionPrivateField() {
    MembersInjectionPrivateField component = backend.create(MembersInjectionPrivateField.class);
    MembersInjectionPrivateField.Target instance = new MembersInjectionPrivateField.Target();
    try {
      component.inject(instance);"
9970,interfaceMethod,"          public void interfaceMethod(String one) {}
        };"
9971,membersInjectionInterfaceMethod,"  public void membersInjectionInterfaceMethod() {
    MembersInjectionInterfaceMethod component =
        backend.create(MembersInjectionInterfaceMethod.class);
    MembersInjectionInterfaceMethod.Target instance =
        new MembersInjectionInterfaceMethod.Target() {"
9972,abstractMethod,"          public void abstractMethod(String one) {}
        };"
9973,membersInjectionAbstractMethod,"  public void membersInjectionAbstractMethod() {
    MembersInjectionAbstractMethod component = backend.create(MembersInjectionAbstractMethod.class);
    MembersInjectionAbstractMethod.Target instance =
        new MembersInjectionAbstractMethod.Target() {
          @Override"
9974,membersInjectionWrongReturnType,"  public void membersInjectionWrongReturnType() {
    MembersInjectionWrongReturnType component =
        backend.create(MembersInjectionWrongReturnType.class);
    MembersInjectionWrongReturnType.Target instance = new MembersInjectionWrongReturnType.Target();
    try {"
9975,undeclaredDependencies,"  public void undeclaredDependencies() {
    UndeclaredDependencies.Builder builder = backend.builder(UndeclaredDependencies.Builder.class);
    try {
      builder.dep(""hey"");"
9976,undeclaredModule,"  public void undeclaredModule() {
    UndeclaredModules.Builder builder = backend.builder(UndeclaredModules.Builder.class);
    try {
      builder.module(new UndeclaredModules.Module1());"
9977,providerCycle,"  public void providerCycle() {
    ProviderCycle component = backend.create(ProviderCycle.class);
    try {
      component.string();"
9980,nestedComponentBuilder,"  public void nestedComponentBuilder() {
    NestedComponent.MoreNesting.AndMore.TheComponent component =
        backend.builder(NestedComponent.MoreNesting.AndMore.TheComponent.Builder.class).build();
    assertThat(component.string()).isEqualTo(""foo"");"
9981,nestedComponent,"  public void nestedComponent() {
    NestedComponent.MoreNesting.AndMore.TheComponent component =
        backend.create(NestedComponent.MoreNesting.AndMore.TheComponent.class);
    assertThat(component.string()).isEqualTo(""foo"");"
9982,moduleSubcomponentNoFactoryOrBuilder,"  public void moduleSubcomponentNoFactoryOrBuilder() {
    try {
      backend.create(ModuleSubcomponentNoFactoryOrBuilder.class);"
9983,moduleSubcomponentBindsFactoryAndBuilder,"  public void moduleSubcomponentBindsFactoryAndBuilder() {
    try {
      backend.create(ModuleSubcomponentBindsFactoryAndBuilder.class);"
9984,moduleSubcomponentBindsFactory,"  public void moduleSubcomponentBindsFactory() {
    ModuleSubcomponentBindsBuilder component = backend.create(ModuleSubcomponentBindsBuilder.class);
    assertThat(component.string()).isEqualTo(""5"");
  }"
9985,moduleSubcomponentBindsBuilder,"  public void moduleSubcomponentBindsBuilder() {
    ModuleSubcomponentBindsBuilder component = backend.create(ModuleSubcomponentBindsBuilder.class);
    assertThat(component.string()).isEqualTo(""5"");
  }"
9986,moduleIncludes,"  public void moduleIncludes() {
    ModuleIncludes component = backend.create(ModuleIncludes.class);
    assertThat(component.string()).isEqualTo(""5"");
  }"
9987,modulePrivateMethod,"  public void modulePrivateMethod() {
    ModulePrivateMethod component = backend.create(ModulePrivateMethod.class);
    assertThat(component.integer()).isEqualTo(42);
  }"
9988,moduleInterfaceWithDefaultMethodNotAllowed,"  public void moduleInterfaceWithDefaultMethodNotAllowed() {
    try {
      backend.create(ModuleInterfaceDefaultProvidesMethod.class);"
9989,moduleAbstractClassInstanceMethodNotAllowed,"  public void moduleAbstractClassInstanceMethodNotAllowed() {
    try {
      backend.create(ModuleAbstractInstanceProvidesMethod.class);"
9990,moduleInterfaceWithDefaultMethodUnrelatedDoesNotAffectDagger,"  public void moduleInterfaceWithDefaultMethodUnrelatedDoesNotAffectDagger() {
    ModuleInterfaceDefaultMethodUnrelated component =
        backend.create(ModuleInterfaceDefaultMethodUnrelated.class);
    assertThat(component.string()).isEqualTo(""foo"");"
9991,moduleInterfaceHierarchy,"  public void moduleInterfaceHierarchy() {
    ModuleInterfaceHierarchy component = backend.create(ModuleInterfaceHierarchy.class);
    assertThat(component.number()).isEqualTo(42);
  }"
9992,moduleInterface,"  public void moduleInterface() {
    ModuleInterface component = backend.create(ModuleInterface.class);
    assertThat(component.number()).isEqualTo(42);
  }"
9993,moduleClassHierarchyStatics,"  public void moduleClassHierarchyStatics() {
    ModuleClassHierarchyStatics component = backend.create(ModuleClassHierarchyStatics.class);
    assertThat(component.string()).isEqualTo(""foo"");
  }"
9994,moduleClassHierarchy,"  public void moduleClassHierarchy() {
    ModuleClassHierarchy component = backend.create(ModuleClassHierarchy.class);
    assertThat(component.number()).isEqualTo(42);
  }"
9995,moduleClassAndInterfaceDuplicatesHierarchy,"  public void moduleClassAndInterfaceDuplicatesHierarchy() {
    ModuleClassAndInterfaceDuplicatesHierarchy component =
        backend.create(ModuleClassAndInterfaceDuplicatesHierarchy.class);
    assertThat(component.number()).isEqualTo(42);"
9996,moduleClassAndInterfaceHierarchy,"  public void moduleClassAndInterfaceHierarchy() {
    ModuleClassAndInterfaceHierarchy component =
        backend.create(ModuleClassAndInterfaceHierarchy.class);
    assertThat(component.number()).isEqualTo(42);"
9997,moduleClass,"  public void moduleClass() {
    ModuleClass component = backend.create(ModuleClass.class);
    assertThat(component.string()).isEqualTo(""foo"");
  }"
9998,multibindsAnnotationWrongType,"  public void multibindsAnnotationWrongType() {
    try {
      backend.create(MultibindsAnnotationWrongType.class);"
10001,multibindingMapNoUnwrap,"  public void multibindingMapNoUnwrap() {
    MultibindingMapNoUnwrap component = backend.create(MultibindingMapNoUnwrap.class);
    assertThat(component.values())
        .containsExactly("
10002,multibindingMapPrimitiveValue,"  public void multibindingMapPrimitiveValue() {
    MultibindingMapPrimitiveValue component = backend.create(MultibindingMapPrimitiveValue.class);
    assertThat(component.values()).containsExactly(""1"", 1L, ""2"", 2L);
  }"
10003,multibindingMapPrimitiveKey,"  public void multibindingMapPrimitiveKey() {
    MultibindingMapPrimitiveKey component = backend.create(MultibindingMapPrimitiveKey.class);
    assertThat(component.values()).containsExactly(1L, ""one"", 2L, ""two"");
  }"
10004,multibindingMapClassKey,"  public void multibindingMapClassKey() {
    MultibindingMapClassKey c = backend.create(MultibindingMapClassKey.class);
    assertThat(c.values())
        .containsExactly(Impl1.class, Impl1.INSTANCE, Impl2.class, Impl2.INSTANCE);"
10005,multibindingMapEmpty,"  public void multibindingMapEmpty() {
    MultibindingMapEmpty component = backend.create(MultibindingMapEmpty.class);
    assertThat(component.values()).isEmpty();
  }"
10006,multibindingMap,"  public void multibindingMap() {
    MultibindingMap component = backend.create(MultibindingMap.class);
    assertThat(component.values()).containsExactly(""1"", ""one"", ""2"", ""two"");
  }"
10008,multibindingSetElementsPrimitive,"  public void multibindingSetElementsPrimitive() {
    MultibindingSetElementsPrimitive component =
        backend.create(MultibindingSetElementsPrimitive.class);
    assertThat(component.values()).containsExactly(1L, 2L);"
10009,multibindingSetPrimitive,"  public void multibindingSetPrimitive() {
    MultibindingSetPrimitive component = backend.create(MultibindingSetPrimitive.class);
    assertThat(component.values()).containsExactly(1L, 2L);
  }"
10010,multibindingSetElements,"  public void multibindingSetElements() {
    MultibindingSetElements component = backend.create(MultibindingSetElements.class);
    assertThat(component.values()).containsExactly(""one"", ""two"");
  }"
10011,multibindingSetEmpty,"  public void multibindingSetEmpty() {
    MultibindingSetEmpty component = backend.create(MultibindingSetEmpty.class);
    assertThat(component.values()).isEmpty();
  }"
10012,multibindingSet,"  public void multibindingSet() {
    MultibindingSet component = backend.create(MultibindingSet.class);
    assertThat(component.values()).containsExactly(""one"", ""two"");
  }"
10013,scopedWrong,"  public void scopedWrong() {
    try {
      backend.create(ScopedWrong.class);"
10015,scoped,"  public void scoped() {
    Scoped component = backend.create(Scoped.class);
    Object value1 = component.value();
    Object value2 = component.value();
    assertThat(value1).isSameInstanceAs(value2);
  }"
10018,memberInjectionQualified,"  public void memberInjectionQualified() {
    MemberInjectionQualified component = backend.create(MemberInjectionQualified.class);
    MemberInjectionQualified.Target target = new MemberInjectionQualified.Target();
    component.inject(target);
    assertThat(target.fromField).isEqualTo(""foo"");
    assertThat(target.fromMethod).isEqualTo(""foo"");
  }"
10019,memberInjectionMethodReturnTypes,"  public void memberInjectionMethodReturnTypes() {
    MemberInjectionMethodReturnTypes component =
        backend.create(MemberInjectionMethodReturnTypes.class);
    MemberInjectionMethodReturnTypes.Target target = new MemberInjectionMethodReturnTypes.Target();
    component.inject(target);
    assertThat(target.count).isEqualTo(3);"
10022,memberInjectionOrder,"  public void memberInjectionOrder() {
    MemberInjectionOrder component = backend.create(MemberInjectionOrder.class);
    MemberInjectionOrder.SubType target = new MemberInjectionOrder.SubType();
    component.inject(target);
    assertThat(target.calls)
        .containsExactly("
10025,memberInjectionFieldBeforeMethod,"  public void memberInjectionFieldBeforeMethod() {
    MemberInjectionFieldBeforeMethod component =
        backend.create(MemberInjectionFieldBeforeMethod.class);
    MemberInjectionFieldBeforeMethod.Target target = new MemberInjectionFieldBeforeMethod.Target();
    component.inject(target);
    assertThat(target.fieldBeforeMethod).isTrue();"
10028,method,"      public void method(String foo) {
        called = true;
      }"
10029,memberInjectionInterface,"  public void memberInjectionInterface() {
    MemberInjectionInterface component = backend.create(MemberInjectionInterface.class);
    class Target implements MemberInjectionInterface.Target {
      boolean called;

      @Override
      public void method(String foo) {"
10033,factoryImplicitModules,"  public void factoryImplicitModules() {
    FactoryImplicitModules component =
        backend.factory(FactoryImplicitModules.Factory.class).create(3L);
"
10034,factoryExplicitModulesNullThrowsNpe,"  public void factoryExplicitModulesNullThrowsNpe() {
    FactoryExplicitModules.Factory factory = backend.factory(FactoryExplicitModules.Factory.class);
    try {
      factory.create(null);"
10035,factoryExplicitModules,"  public void factoryExplicitModules() {
    FactoryExplicitModules component =
        backend
            .factory(FactoryExplicitModules.Factory.class)"
10036,factoryDependencyNullThrowsNpe,"  public void factoryDependencyNullThrowsNpe() {
    FactoryDependency.Factory factory = backend.factory(FactoryDependency.Factory.class);
    try {
      factory.create(null);"
10037,factoryDependency,"  public void factoryDependency() {
    FactoryDependency component =
        backend.factory(FactoryDependency.Factory.class).create(new FactoryDependency.Other(""hey""));
"
10038,factoryBindsInstanceNull,"  public void factoryBindsInstanceNull() {
    FactoryBindsInstanceNull component =
        backend.factory(FactoryBindsInstanceNull.Factory.class).create(null);
"
10039,factoryBindsInstance,"  public void factoryBindsInstance() {
    FactoryBindsInstance component =
        backend.factory(FactoryBindsInstance.Factory.class).create(""hey"");
"
10040,builderDependencyOmitted,"  public void builderDependencyOmitted() {
    try {
      backend.builder(BuilderDependency.Builder.class).build();"
10041,builderDependencySetTwice,"  public void builderDependencySetTwice() {
    BuilderDependency component =
        backend
            .builder(BuilderDependency.Builder.class)"
10042,builderDependencyNullThrowsNpe,"  public void builderDependencyNullThrowsNpe() {
    BuilderDependency.Builder builder = backend.builder(BuilderDependency.Builder.class);
    try {
      builder.other(null);"
10043,builderDependency,"  public void builderDependency() {
    BuilderDependency component =
        backend
            .builder(BuilderDependency.Builder.class)"
10044,builderExplicitModulesOmitted,"  public void builderExplicitModulesOmitted() {
    try {
      backend.builder(BuilderExplicitModules.Builder.class).build();"
10045,builderExplicitModulesSetTwice,"  public void builderExplicitModulesSetTwice() {
    BuilderExplicitModules component =
        backend
            .builder(BuilderExplicitModules.Builder.class)"
10046,builderExplicitModulesNullThrowsNpe,"  public void builderExplicitModulesNullThrowsNpe() {
    BuilderExplicitModules.Builder builder = backend.builder(BuilderExplicitModules.Builder.class);
    try {
      builder.module1(null);"
10047,builderExplicitModules,"  public void builderExplicitModules() {
    BuilderExplicitModules component =
        backend
            .builder(BuilderExplicitModules.Builder.class)"
10048,builderImplicitModules,"  public void builderImplicitModules() {
    BuilderImplicitModules component =
        backend.builder(BuilderImplicitModules.Builder.class).value(3L).build();
"
10049,builderBindsInstanceOnParameterAndMethod,"  public void builderBindsInstanceOnParameterAndMethod() {
    BuilderBindsInstanceOnParameterAndMethod.Builder builder =
        backend.builder(BuilderBindsInstanceOnParameterAndMethod.Builder.class);
    try {"
10050,builderBindsInstanceOnParameterNull,"  public void builderBindsInstanceOnParameterNull() {
    BuilderBindsInstanceOnParameterNull component =
        backend.builder(BuilderBindsInstanceOnParameterNull.Builder.class).string(null).build();
    assertThat(component.string()).isNull();"
10051,builderBindsInstanceOnParameterCalledTwice,"  public void builderBindsInstanceOnParameterCalledTwice() {
    BuilderBindsInstanceOnParameter component =
        backend
            .builder(BuilderBindsInstanceOnParameter.Builder.class)"
10052,builderBindsInstanceOnParameter,"  public void builderBindsInstanceOnParameter() {
    BuilderBindsInstanceOnParameter component =
        backend.builder(BuilderBindsInstanceOnParameter.Builder.class).string(""foo"").build();
    assertThat(component.string()).isEqualTo(""foo"");"
10053,builderBindsInstanceNull,"  public void builderBindsInstanceNull() {
    BuilderBindsInstanceNull component =
        backend.builder(BuilderBindsInstanceNull.Builder.class).string(null).build();
    assertThat(component.string()).isNull();"
10054,builderBindsInstanceCalledTwice,"  public void builderBindsInstanceCalledTwice() {
    BuilderBindsInstance component =
        backend.builder(BuilderBindsInstance.Builder.class).string(""foo"").string(""bar"").build();
    assertThat(component.string()).isEqualTo(""bar"");"
10055,builderBindsInstance,"  public void builderBindsInstance() {
    BuilderBindsInstance component =
        backend.builder(BuilderBindsInstance.Builder.class).string(""foo"").build();
    assertThat(component.string()).isEqualTo(""foo"");"
10056,implicitModuleInstanceNotCreatedWhenUnnecessary,"  public void implicitModuleInstanceNotCreatedWhenUnnecessary() {
    ImplicitModuleInstanceCannotBeCreated component =
        backend.create(ImplicitModuleInstanceCannotBeCreated.class);
"
10057,implicitModuleInstance,"  public void implicitModuleInstance() {
    ImplicitModuleInstance component = backend.create(ImplicitModuleInstance.class);

    assertThat(component.string()).isEqualTo(""one"");"
10063,providerMultipleGenericIntoJustInTimeGeneric,"  public void providerMultipleGenericIntoJustInTimeGeneric() {
    ProviderMultipleGenericIntoJustInTime component =
        backend.create(ProviderMultipleGenericIntoJustInTime.class);
    assertThat(component.thing().thingProvider.get()).isNotNull();
    assertThat(component.thing().valueProvider.get()).isNotNull();"
10064,providerGenericIntoJustInTimeGeneric,"  public void providerGenericIntoJustInTimeGeneric() {
    ProviderGenericIntoJustInTime component = backend.create(ProviderGenericIntoJustInTime.class);
    assertThat(component.thing().genericProvider.get()).isNotNull();
  }"
10065,justInTimeNotScopedInAncestry,"  public void justInTimeNotScopedInAncestry() {
    JustInTimeNotScopedInAncestry.ChildComponent child =
        backend.create(JustInTimeNotScopedInAncestry.class).child();
    try {"
10066,justInTimeScopedIntoUnscoped,"  public void justInTimeScopedIntoUnscoped() {
    JustInTimeScopedIntoUnscoped component = backend.create(JustInTimeScopedIntoUnscoped.class);
    try {
      component.thing();"
10067,justInTimeWrongScope,"  public void justInTimeWrongScope() {
    JustInTimeWrongScope component = backend.create(JustInTimeWrongScope.class);
    try {
      component.thing();"
10068,justInTimeUnscopedIntoJustInTimeScoped,"  public void justInTimeUnscopedIntoJustInTimeScoped() {
    JustInTimeDependsOnJustInTime component = backend.create(JustInTimeDependsOnJustInTime.class);
    JustInTimeDependsOnJustInTime.Foo foo1 = component.thing();
    JustInTimeDependsOnJustInTime.Foo foo2 = component.thing();
    assertThat(foo1).isNotSameInstanceAs(foo2);
  }"
10070,justInTimeScoped,"  public void justInTimeScoped() {
    JustInTimeScoped component = backend.create(JustInTimeScoped.class);
    JustInTimeScoped.Thing thing1 = component.thing();
    JustInTimeScoped.Thing thing2 = component.thing();
    assertThat(thing1).isSameInstanceAs(thing2);
  }"
10071,justInTimeMembersInjection,"  public void justInTimeMembersInjection() {
    JustInTimeMembersInjection component = backend.create(JustInTimeMembersInjection.class);
    JustInTimeMembersInjection.Thing thing = component.thing();
    assertThat(thing.stringConstructor).isEqualTo(""hey"");
    assertThat(thing.stringField).isEqualTo(""hey"");
    assertThat(thing.stringMethod).isEqualTo(""hey"");
  }"
10072,justInTimeGeneric,"  public void justInTimeGeneric() {
    JustInTimeGeneric component = backend.create(JustInTimeGeneric.class);
    assertThat(component.thing()).isNotNull();
  }"
10073,justInTimeConstructor,"  public void justInTimeConstructor() {
    JustInTimeConstructor component = backend.create(JustInTimeConstructor.class);
    assertThat(component.thing()).isNotNull();
  }"
10074,optionalGuavaBindingPrimitive,"  public void optionalGuavaBindingPrimitive() {
    OptionalGuavaBindingPrimitive component = backend.create(OptionalGuavaBindingPrimitive.class);
    assertThat(component.five()).isEqualTo(com.google.common.base.Optional.of(5L));
  }"
10075,optionalGuavaBindingAbsent,"  public void optionalGuavaBindingAbsent() {
    OptionalGuavaBindingAbsent component = backend.create(OptionalGuavaBindingAbsent.class);
    assertThat(component.string()).isEqualTo(com.google.common.base.Optional.absent());
  }"
10076,optionalGuavaBinding,"  public void optionalGuavaBinding() {
    OptionalGuavaBinding component = backend.create(OptionalGuavaBinding.class);
    assertThat(component.string()).isEqualTo(com.google.common.base.Optional.of(""foo""));
  }"
10077,optionalBindingPrimitive,"  public void optionalBindingPrimitive() {
    OptionalBindingPrimitive component = backend.create(OptionalBindingPrimitive.class);
    assertThat(component.five()).isEqualTo(Optional.of(5L));
  }"
10078,optionalBindingAbsent,"  public void optionalBindingAbsent() {
    OptionalBindingAbsent component = backend.create(OptionalBindingAbsent.class);
    assertThat(component.string()).isEqualTo(Optional.empty());
  }"
10079,optionalBindingNullable,"  public void optionalBindingNullable() {
    OptionalBindingNullable component = backend.create(OptionalBindingNullable.class);
    try {
      component.string();"
10080,optionalBinding,"  public void optionalBinding() {
    OptionalBinding component = backend.create(OptionalBinding.class);
    assertThat(component.string()).isEqualTo(Optional.of(""foo""));
  }"
10083,mapWithoutBinds,"  public void mapWithoutBinds() {
    MapWithoutBinds component = backend.create(MapWithoutBinds.class);
    assertThat(component.strings()).containsExactly(""1"", ""one"", ""2"", ""two"");
  }"
10084,bindIntoMap,"  public void bindIntoMap() {
    BindsIntoMap component = backend.create(BindsIntoMap.class);
    assertThat(component.strings()).containsExactly(""bar"", ""foo"");
  }"
10085,bindElementsIntoSetGenericWrongReturn,"  public void bindElementsIntoSetGenericWrongReturn() {
    try {
      backend.create(BindsElementsIntoSetGenericWrongReturn.class);"
10086,bindElementsIntoSetWrongReturn,"  public void bindElementsIntoSetWrongReturn() {
    try {
      backend.create(BindsElementsIntoSetWrongReturn.class);"
10087,bindElementsIntoSet,"  public void bindElementsIntoSet() {
    BindsElementsIntoSet component = backend.create(BindsElementsIntoSet.class);
    assertThat(component.strings()).containsExactly(""foo"");
  }"
10088,bindIntoSet,"  public void bindIntoSet() {
    BindsIntoSet component = backend.create(BindsIntoSet.class);
    assertThat(component.strings()).containsExactly(""foo"");
  }"
10089,bindsProviderNull,"  public void bindsProviderNull() {
    BindsProviderNull component = backend.create(BindsProviderNull.class);
    assertThat(component.string()).isNull();
  }"
10090,bindsProviderNullabilityMismatch,"  public void bindsProviderNullabilityMismatch() {
    BindsProviderNullabilityMismatch component =
        backend.create(BindsProviderNullabilityMismatch.class);
    try {"
10091,bindsProvider,"  public void bindsProvider() {
    BindsProvider component = backend.create(BindsProvider.class);
    assertThat(component.number()).isEqualTo(42);
  }"
10092,staticProvider,"  public void staticProvider() {
    StaticProvider component = backend.create(StaticProvider.class);
    assertThat(component.string()).isEqualTo(""foo"");
  }"
10093,componentProviderQualified,"  public void componentProviderQualified() {
    ComponentProviderQualified component = backend.create(ComponentProviderQualified.class);
    assertThat(component.string()).isEqualTo(""foo"");
  }"
10094,componentProviderNull,"  public void componentProviderNull() {
    ComponentProviderNull component = backend.create(ComponentProviderNull.class);
    assertThat(component.string()).isNull();
  }"
10095,componentProvider,"  public void componentProvider() {
    ComponentProvider component = backend.create(ComponentProvider.class);
    assertThat(component.string()).isEqualTo(""foo"");
  }"
10096,parameters,"  public static Object[] parameters() {
    return Backend.values();
  }"
10098,string,"    static String string() {
      return ""one"";
    }"
10100,string,"    String string() {
      return ""one"";
    }"
10102,create,"    FactoryImplicitModules create(@BindsInstance Long value);
  }"
10103,string,"    static String string(Long value) {
      return Long.toString(value);
    }"
10105,create,"    FactoryExplicitModules create(Module1 module1);
  }"
10106,string,"    String string() {
      return value;
    }"
10108,create,"    FactoryDependency create(Other other);
  }"
10109,string,"    String string() {
      return string;
    }"
10111,create,"    FactoryBindsInstanceNull create(@BindsInstance @Nullable String one);
  }"
10113,create,"    FactoryBindsInstance create(@BindsInstance String one);
  }"
10115,factory,"  public static <F> F factory(Class<F> factoryClass) {
    return ComponentFactoryInvocationHandler.forComponentFactory(factoryClass);
  }"
10116,builder,"  public static <B> B builder(Class<B> builderClass) {
    return ComponentBuilderInvocationHandler.forComponentBuilder(builderClass);
  }"
10117,create,"  public static <C> C create(Class<C> componentClass) {
    return ComponentInvocationHandler.forComponent(componentClass);
  }"
10121,putBoundInstance,"  void putBoundInstance(Key key, Object instance) {
    boundInstances.put(key, instance);
  }"
10123,buildSubcomponent,"  static ComponentScopeBuilder buildSubcomponent(Class<?> subcomponentClass, Scope parent) {
    Subcomponent subcomponent = requireAnnotation(subcomponentClass, Subcomponent.class);
    Set<Annotation> scopeAnnotation = findScopes(subcomponentClass.getDeclaredAnnotations());
    return create(subcomponent.modules(), new Class<?>[0], scopeAnnotation, parent);
  }"
10124,buildComponent,"  static ComponentScopeBuilder buildComponent(Class<?> componentClass) {
    Component component = requireAnnotation(componentClass, Component.class);
    Set<Annotation> scopeAnnotation = findScopes(componentClass.getDeclaredAnnotations());
    return create(component.modules(), component.dependencies(), scopeAnnotation, null);
  }"
10125,string,"    static @Foo String string() {
      return ""foo"";
    }"
10127,string,"    static @Nullable String string() {
      return null;
    }"
10131,invoke,"    public Object invoke(Object[] args) {
      return ComponentFactoryInvocationHandler.forSubcomponentFactory(cls, scope);
    }"
10132,invoke,"    public Object invoke(Object[] args) {
      return ComponentBuilderInvocationHandler.forSubcomponentBuilder(cls, scope);
    }"
10133,invoke,"    public Object invoke(Object[] args) {
      ComponentScopeBuilder scopeBuilder = ComponentScopeBuilder.buildSubcomponent(cls, scope);
      ComponentFactoryInvocationHandler.parseFactoryMethod(method, args, scopeBuilder);
      return create(cls, scopeBuilder.get());
    }"
10134,invoke,"    public @Nullable Object invoke(Object[] args) {
      Object instance = args[0];
      membersInjector.injectMembers(instance);
      return returnInstance ? instance : null;
    }"
10135,invoke,"    public @Nullable Object invoke(Object[] args) {
      return binding.get();
    }"
10140,forComponent,"  static <C> C forComponent(Class<C> cls) {
    Scope.Builder scopeBuilder = ComponentScopeBuilder.buildComponent(cls).get();
    return create(cls, scopeBuilder);
  }"
10141,parseFactoryMethod,"  static void parseFactoryMethod(Method method, Object[] args, ComponentScopeBuilder scopeBuilder) {
    Type[] parameterTypes = method.getGenericParameterTypes();
    Annotation[][] parameterAnnotations = method.getParameterAnnotations();
    for (int i = 0; i < parameterTypes.length; i++) {
      Type parameterType = parameterTypes[i];"
10163,build,"    BuilderBindsInstanceOnParameterNull build();
  }"
10164,string,"    Builder string(@BindsInstance @Nullable String string);
"
10166,build,"    BuilderBindsInstanceOnParameterAndMethod build();
  }"
10167,string,"    Builder string(@BindsInstance String string);
"
10169,build,"    BuilderBindsInstanceOnParameter build();
  }"
10180,charSequence,"    abstract CharSequence charSequence(@Nullable String foo);
  }"
10186,setString,"    abstract String setString(String foo);
  }"
10189,mapString,"    abstract String mapString(String foo);
  }"
10192,setStrings,"    abstract String setStrings(Deque<String> foo);
  }"
10193,strings,"    static Deque<String> strings() {
      ArrayDeque<String> strings = new ArrayDeque<>();
      strings.add(""foo"");
      return strings;
    }"
10195,setStrings,"    abstract Set<? extends String> setStrings(Deque<String> foo);
  }"
10198,setStrings,"    abstract Set<String> setStrings(Deque<String> foo);
  }"
10201,asScoped,"    public final Binding asScoped() {
      return new LinkedScopedBinding<>(this);
    }"
10202,link,"    public final LinkedBinding<?> link(Linker linker, Scope scope) {
      return this;
    }"
10203,asScoped,"    public final Binding asScoped() {
      return new UnlinkedScopedBinding(this);
    }"
10206,link,"  LinkedBinding<?> link(Linker linker, Scope scope);
"
10207,factory,"  abstract <F> F factory(Class<F> factoryClass);
}"
10208,builder,"  abstract <B> B builder(Class<B> builderClass);
"
10209,create,"  abstract <C> C create(Class<C> componentClass);
"
10210,factory,"    <F> F factory(Class<F> factoryClass) {
      return DaggerCodegen.factory(factoryClass);
    }"
10211,builder,"    <B> B builder(Class<B> builderClass) {
      return DaggerCodegen.builder(builderClass);
    }"
10212,create,"    <C> C create(Class<C> componentClass) {
      return DaggerCodegen.create(componentClass);
    }"
10213,factory,"    <F> F factory(Class<F> factoryClass) {
      return DaggerReflect.factory(factoryClass);
    }"
10214,builder,"    <B> B builder(Class<B> builderClass) {
      return DaggerReflect.builder(builderClass);
    }"
10215,create,"    <C> C create(Class<C> componentClass) {
      return DaggerReflect.create(componentClass);
    }"
10216,tableKey,"  static MultibindingMapNoUnwrap.TableKey tableKey(int row, int col) {
    return new AutoAnnotation_Annotations_tableKey(row, col);
  }"
10218,moveTo,"    public static PathPoint moveTo(float x, float y) {
        return new PathPoint(MOVE, x, y);
    }"
10219,curveTo,"    public static PathPoint curveTo(float c0X, float c0Y, float c1X, float c1Y, float x, float y) {
        return new PathPoint(c0X,  c0Y, c1X, c1Y, x, y);
    }"
10220,lineTo,"    public static PathPoint lineTo(float x, float y) {
        return new PathPoint(LINE, x, y);
    }"
10221,evaluate,"    public PathPoint evaluate(float t, PathPoint startValue, PathPoint endValue) {
        float x, y;
        if (endValue.mOperation == PathPoint.CURVE) {
            float oneMinusT = 1 - t;
            x = oneMinusT * oneMinusT * oneMinusT * startValue.mX +"
10222,newInstance,"    public static MediaFragment newInstance () {
        return new MediaFragment();
    }"
10224,onAnimationEnd,"        public void onAnimationEnd(Animator animation) {
            super.onAnimationEnd(animation);

            mFab.setVisibility(View.INVISIBLE);
            mFabContainer.setBackgroundColor(getResources()
                .getColor(R.color.brand_accent));"
10227,onClick,"            @Override public void onClick(View v) {
                onFabPressed(v);
            }"
10229,onActivityCreated,"    @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mFabSize = getResources().getDimensionPixelSize(R.dimen.fab_size);
        bindViews();
    }"
10230,onCreateView,"    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        mRootView = inflater.inflate(R.layout.activity_media, container, false);
        return mRootView;
    }"
10232,curveTo,"    public void curveTo(float c0X, float c0Y, float c1X, float c1Y, float x, float y) {
        mPoints.add(PathPoint.curveTo(c0X, c0Y, c1X, c1Y, x, y));
    }"
10233,lineTo,"    public void lineTo(float x, float y) {
        mPoints.add(PathPoint.lineTo(x, y));
    }"
10234,moveTo,"    public void moveTo(float x, float y) {
        mPoints.add(PathPoint.moveTo(x, y));
    }"
10244,refreshTime,"        public void refreshTime(long curTimeMillis) {
            if (null == mItemInfo || mItemInfo.getCountdown() <= 0) return;

            mCvCountdownView.updateShow(mItemInfo.getEndTime() - curTimeMillis);"
10246,run,"            public void run() {
                if (mCountdownVHList.size() == 0) return;

                synchronized (mCountdownVHList) {"
10250,onCreateViewHolder,"        public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            return new MyViewHolder(LayoutInflater.from(mContext).inflate(R.layout.list_item, parent, false));
        }"
10251,cancelRefreshTime,"        public void cancelRefreshTime() {
            isCancel = true;
            if (null != mTimer) {
                mTimer.cancel();
            }"
10252,run,"                public void run() {
                    mHandler.post(mRefreshTimeRunnable);
                }"
10253,startRefreshTime,"        public void startRefreshTime() {
            if (!isCancel) return;

            if (null != mTimer) {
                mTimer.cancel();
            }
"
10254,onDestroy,"    public void onDestroy() {
        super.onDestroy();
        if (null != mMyAdapter) {
            mMyAdapter.cancelRefreshTime();"
10255,onPause,"    protected void onPause() {
        super.onPause();
        if (null != mMyAdapter) {
            mMyAdapter.cancelRefreshTime();"
10256,onResume,"    protected void onResume() {
        super.onResume();
        if (null != mMyAdapter) {
            mMyAdapter.startRefreshTime();"
10258,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_recyclerview);

        initData();

        FamiliarRecyclerView cvFamiliarRecyclerView = (FamiliarRecyclerView) findViewById(R.id.cv_familiarRecyclerView);"
10269,refreshTime,"        public void refreshTime(long leftTime) {
            if (leftTime > 0) {
                mCvCountdownView.start(leftTime);"
10270,bindData,"        public void bindData(ItemInfo itemInfo) {
            mItemInfo = itemInfo;
            mTvTitle.setText(itemInfo.getTitle());
            refreshTime(mItemInfo.getEndTime() - System.currentTimeMillis());
        }"
10274,onBindViewHolder,"        public void onBindViewHolder(MyViewHolder holder, int position) {
            ItemInfo curItemInfo = mDatas.get(position);
            holder.bindData(curItemInfo);
        }"
10278,onEnd,"    public void onEnd(CountdownView cv) {
        Object tag = cv.getTag();
        if (null != tag) {
            Log.i(""wg"", ""tag = "" + tag.toString());"
10279,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, RecyclerViewActivity.class));
            }"
10280,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, ListViewActivity.class));
            }"
10281,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, DynamicShowActivity.class));
            }"
10282,onProgressUpdate,"            protected void onProgressUpdate(Long... values) {
                super.onProgressUpdate(values);
                mCvCountdownViewTest5.updateShow(values[0]);
            }"
10283,doInBackground,"            protected Void doInBackground(Void... params) {
                long time = 0;
                while (true) {
                    try {"
10294,refreshTime,"            public void refreshTime(long curTimeMillis) {
                if (null == mItemInfo || mItemInfo.getCountdown() <= 0) return;

                mCvCountdownView.updateShow(mItemInfo.getEndTime() - curTimeMillis);"
10296,initView,"            public void initView(View convertView) {
                mTvTitle = (TextView) convertView.findViewById(R.id.tv_title);
                mCvCountdownView = (CountdownView) convertView.findViewById(R.id.cv_countdownView);
            }"
10309,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_listview);

        initData();

        ListView lvList = (ListView) findViewById(R.id.lv_list);"
10320,refreshTime,"            public void refreshTime(long leftTime) {
                if (leftTime > 0) {
                    mCvCountdownView.start(leftTime);"
10321,bindData,"            public void bindData(ItemInfo itemInfo) {
                mItemInfo = itemInfo;
                mTvTitle.setText(itemInfo.getTitle());
                refreshTime(mItemInfo.getEndTime() - System.currentTimeMillis());
            }"
10332,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowMillisecond = isChecked;
                if (isChecked && !DynamicShowActivity.this.isShowSecond) {
                    cbSecond.setChecked(true);"
10333,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowSecond = isChecked;
                if (!isChecked && DynamicShowActivity.this.isShowMillisecond) {
                    cbMillisecond.setChecked(false);"
10334,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowMinute = isChecked;
            }"
10335,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowHour = isChecked;
            }"
10336,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowDay = isChecked;
            }"
10349,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setRadius(++bgRadius));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
10350,onColorPicked,"                    public void onColorPicked(int pickedColor) {
                        DynamicConfig dynamicConfig = new DynamicConfig.Builder().setBackgroundInfo(new DynamicConfig.BackgroundInfo().setColor(pickedColor)).build();
                        mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);
                    }"
10353,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setSize(++timeBgSize));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
10355,onClick,"            public void onClick(View v) {
                DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixGravity(DynamicConfig.SuffixGravity.BOTTOM).build();
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
10356,onClick,"            public void onClick(View v) {
                DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixGravity(DynamicConfig.SuffixGravity.CENTER).build();
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
10357,onClick,"            public void onClick(View v) {
                DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixGravity(DynamicConfig.SuffixGravity.TOP).build();
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
10358,onColorPicked,"                    public void onColorPicked(int pickedColor) {
                        DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixTextColor(pickedColor).build();
                        if (hasBackgroundCountdownView) {
                            mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
10361,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setSuffixTextSize(++suffixTextSize);
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());"
10362,onColorPicked,"                    public void onColorPicked(int pickedColor) {
                        DynamicConfig dynamicConfig = new DynamicConfig.Builder().setTimeTextColor(pickedColor).build();
                        if (hasBackgroundCountdownView) {
                            mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
10365,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setTimeTextSize(++timeTextSize);
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());"
10366,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                if (hasBackgroundCountdownView) {
                    DynamicConfig.BackgroundInfo backgroundInfo = new DynamicConfig.BackgroundInfo();
                    backgroundInfo.setColor(0xFF444444)"
10367,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                if (hasBackgroundCountdownView) {
                    DynamicConfig.BackgroundInfo backgroundInfo = new DynamicConfig.BackgroundInfo();
                    backgroundInfo.setColor(0xFFFF5000)"
10368,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                if (hasBackgroundCountdownView) {
                    DynamicConfig.BackgroundInfo backgroundInfo = new DynamicConfig.BackgroundInfo();
                    backgroundInfo.setColor(0xFFFF54BC)"
10370,onAllAnimatorEnd,"    public void onAllAnimatorEnd() {
        mView.onAnimEnd();
    }"
10371,onMoveEnd,"    public void onMoveEnd() {
        mEndNum++;
        if (mEndNum == mPellets.size()) {
            for (Letter l : mLetters) {"
10372,onAnimatorEnd,"    public void onAnimatorEnd() {
        mEndNum++;
        if (mEndNum == mPellets.size()) {
            if (isEnding) {"
10373,endAnim,"    public void endAnim() {
        isEnding = true;
    }"
10374,drawTheWorld,"    public void drawTheWorld(Canvas canvas) {
        for (Pellet p : mPellets) {
            p.drawSelf(canvas);
        }"
10375,addLetter,"    public void addLetter(Letter letter) {
        if (letter != null) {
            mLetters.add(letter);"
10376,addPellet,"    public void addPellet(Pellet pellet) {
        if (pellet != null) {
            mPellets.add(pellet);"
10377,showText,"    public void showText() {
        isEnding = true;
        mEndNum = 0;
        for (Pellet p : mPellets) {
            p.endAnim();"
10378,startPelletsAnim,"    public void startPelletsAnim() {
        isEnding = false;
        mEndNum = 0;
        for (Pellet p : mPellets) {
            p.startAnim();"
10382,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if(!isInit){
            init();
            isInit = true;"
10383,onAnimEnd,"    public void onAnimEnd() {
        if (mOnCoolAnimViewListener != null) {
            mOnCoolAnimViewListener.onAnimEnd();"
10384,stopAnim,"    public void stopAnim() {
        if (mPelletMng != null) {
            mPelletMng.endAnim();"
10385,onAnimationRepeat,"            public void onAnimationRepeat(Animator animation) {
                invalidate();
            }"
10387,measureDimension,"    public int measureDimension(int defaultSize, int measureSpec) {
        int result;

        int specMode = MeasureSpec.getMode(measureSpec);
        int specSize = MeasureSpec.getSize(measureSpec);

        if (specMode == MeasureSpec.EXACTLY) {"
10388,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        int width = measureDimension(WIDTH_DEFAULT, widthMeasureSpec);
        int height = measureDimension(HEIGHT_DEFAULT, heightMeasureSpec);
        setMeasuredDimension(width, height);
    }"
10391,sayHello,"        public void sayHello() {
            super.sayHello();
            say(""How are you?"");
        }"
10392,sayHello,"        public void sayHello() {
            super.sayHello();
            say(""I'm your boss"");
        }"
10393,sayHello,"        public void sayHello() {
            say(""Is somebody listening?"");
            super.sayHello();
        }"
10394,callSayHello,"        public final void callSayHello() {
            sayHello();
        }"
10397,sayHello,"        public void sayHello() {
            say(""Hello, I'm John"");
        }"
10398,say,"        public void say(String s) {
            said.add(s);
        }"
10399,putPluginNonConfigurationInstance,"    public void putPluginNonConfigurationInstance(final CompositeNonConfigurationInstance nci) {
        mPluginNonConfigurationInstances.put(nci.getId(), nci.getNonConfigurationInstance());
    }"
10402,onRetainNonConfigurationInstance,"            public CompositeNonConfigurationInstance onRetainNonConfigurationInstance() {
                return new CompositeNonConfigurationInstance(""B"", ""Something else"");
            }"
10403,onRetainNonConfigurationInstance,"            public CompositeNonConfigurationInstance onRetainNonConfigurationInstance() {
                return new CompositeNonConfigurationInstance(""A"", ""Thing"");
            }"
10408,call,"        void call(PersonPlugin plugin, Object... args);
    }"
10409,sayHello,"        public void sayHello() {
            say(""Surprise!"");
            super.sayHello();
        }"
10413,sayHello_super,"        public void sayHello_super() {
            super.sayHello();
        }"
10414,sayHello,"        public void sayHello() {
            delegate.sayHello();
        }"
10415,addPlugins,"        public void addPlugins(PersonPlugin plugin) {
            delegate.mPlugins.add(plugin);
            plugin.mDelegate = delegate;
        }"
10416,call,"                    public Void call(final Object... args) {
                        callHook(iterator, methodCall, activitySuper, args);
                        return null;
                    }"
10417,callHook,"        void callHook(final ListIterator<PersonPlugin> iterator,
                final PluginMethodAction methodCall,
                final SuperCallVoid activitySuper,"
10418,callHook,"        protected void callHook(
                final PluginMethodAction methodCall,
                final SuperCallVoid activitySuper,
                final Object... args) {

            final ArrayList<PersonPlugin> plugins = new ArrayList<>(mPlugins);"
10419,call,"                public void call(final Object... args) {
                    mCompositePerson.sayHello_super();
                }"
10420,call,"                public void call(final PersonPlugin plugin, final Object... args) {
                    plugin.sayHello();
                }"
10421,sayHello,"        public void sayHello() {
            callHook(new PluginMethodAction() {
                @Override"
10422,say,"        public void say(String s) {
            mCompositePerson.say(s);
        }"
10423,sayHello,"        public void sayHello() {
            if (mSuperListener != null) {
                mSuperListener.call();"
10424,say,"        public void say(String s) {
            mDelegate.say(s);
        }"
10427,onClick,"            public void onClick(final View v) {
                new TestFragment().show(getSupportFragmentManager(), ""dialog"");
            }"
10429,unregisterForContextMenu,"    void unregisterForContextMenu(View view);
}"
10431,super_unregisterForContextMenu,"    void super_unregisterForContextMenu(View view);
"
10433,super_startPostponedEnterTransition,"    void super_startPostponedEnterTransition();
"
10434,super_startIntentSenderForResult,"    void super_startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, Bundle options) throws SendIntentException;"
10435,super_startActivityForResult,"    void super_startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options);
"
10436,super_startActivityForResult,"    void super_startActivityForResult(Intent intent, int requestCode);
"
10437,super_startActivity,"    void super_startActivity(Intent intent, @Nullable Bundle options);
"
10438,super_startActivity,"    void super_startActivity(Intent intent);
"
10439,super_shouldShowRequestPermissionRationale,"    boolean super_shouldShowRequestPermissionRationale(@NonNull String permission);
"
10440,super_setUserVisibleHint,"    void super_setUserVisibleHint(boolean isVisibleToUser);
"
10441,super_setTargetFragment,"    void super_setTargetFragment(@Nullable Fragment fragment, int requestCode);
"
10442,super_setSharedElementReturnTransition,"    void super_setSharedElementReturnTransition(@Nullable Object transition);
"
10443,super_setSharedElementEnterTransition,"    void super_setSharedElementEnterTransition(@Nullable Object transition);
"
10444,super_setReturnTransition,"    void super_setReturnTransition(@Nullable Object transition);
"
10445,super_setRetainInstance,"    void super_setRetainInstance(boolean retain);
"
10446,super_setReenterTransition,"    void super_setReenterTransition(@Nullable Object transition);
"
10447,super_setMenuVisibility,"    void super_setMenuVisibility(boolean menuVisible);
"
10448,super_setInitialSavedState,"    void super_setInitialSavedState(@Nullable Fragment.SavedState state);
"
10449,super_setHasOptionsMenu,"    void super_setHasOptionsMenu(boolean hasMenu);
"
10450,super_setExitTransition,"    void super_setExitTransition(@Nullable Object transition);
"
10451,super_setExitSharedElementCallback,"    void super_setExitSharedElementCallback(SharedElementCallback callback);
"
10452,super_setEnterTransition,"    void super_setEnterTransition(@Nullable Object transition);
"
10453,super_setEnterSharedElementCallback,"    void super_setEnterSharedElementCallback(SharedElementCallback callback);
"
10454,super_setArguments,"    void super_setArguments(@Nullable Bundle args);
"
10455,super_setAllowReturnTransitionOverlap,"    void super_setAllowReturnTransitionOverlap(boolean allow);
"
10456,super_setAllowEnterTransitionOverlap,"    void super_setAllowEnterTransitionOverlap(boolean allow);
"
10457,super_registerForContextMenu,"    void super_registerForContextMenu(View view);
"
10459,super_onViewStateRestored,"    void super_onViewStateRestored(@Nullable Bundle savedInstanceState);
"
10460,super_onViewCreated,"    void super_onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState);
"
10463,super_onSaveInstanceState,"    void super_onSaveInstanceState(@NonNull Bundle outState);
"
10465,super_onRequestPermissionsResult,"    void super_onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults);"
10466,super_onPrepareOptionsMenu,"    void super_onPrepareOptionsMenu(Menu menu);
"
10467,super_onPictureInPictureModeChanged,"    void super_onPictureInPictureModeChanged(boolean isInPictureInPictureMode);
"
10469,super_onOptionsMenuClosed,"    void super_onOptionsMenuClosed(Menu menu);
"
10470,super_onOptionsItemSelected,"    boolean super_onOptionsItemSelected(MenuItem item);
"
10471,super_onMultiWindowModeChanged,"    void super_onMultiWindowModeChanged(boolean isInMultiWindowMode);
"
10473,super_onInflate,"    void super_onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState);
"
10474,super_onInflate,"    void super_onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState);
"
10475,super_onHiddenChanged,"    void super_onHiddenChanged(boolean hidden);
"
10476,super_onGetLayoutInflater,"    LayoutInflater super_onGetLayoutInflater(@Nullable Bundle savedInstanceState);
"
10481,super_onCreateView,"    View super_onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState);"
10482,super_onCreateOptionsMenu,"    void super_onCreateOptionsMenu(Menu menu, MenuInflater inflater);
"
10483,super_onCreateContextMenu,"    void super_onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo);
"
10484,super_onCreateAnimator,"    Animator super_onCreateAnimator(int transit, boolean enter, int nextAnim);
"
10485,super_onCreateAnimation,"    Animation super_onCreateAnimation(int transit, boolean enter, int nextAnim);
"
10486,super_onCreate,"    void super_onCreate(@Nullable Bundle savedInstanceState);
"
10487,super_onContextItemSelected,"    boolean super_onContextItemSelected(MenuItem item);
"
10488,super_onConfigurationChanged,"    void super_onConfigurationChanged(Configuration newConfig);
"
10489,super_onAttachFragment,"    void super_onAttachFragment(Fragment childFragment);
"
10490,super_onAttach,"    void super_onAttach(Activity activity);
"
10492,super_onActivityResult,"    void super_onActivityResult(int requestCode, int resultCode, Intent data);
"
10493,super_onActivityCreated,"    void super_onActivityCreated(@Nullable Bundle savedInstanceState);
"
10494,super_getViewModelStore,"    ViewModelStore super_getViewModelStore();
"
10495,super_getViewLifecycleOwnerLiveData,"    LiveData<android.arch.lifecycle.LifecycleOwner> super_getViewLifecycleOwnerLiveData();
"
10496,super_getViewLifecycleOwner,"    android.arch.lifecycle.LifecycleOwner super_getViewLifecycleOwner();
"
10499,super_getSharedElementReturnTransition,"    Object super_getSharedElementReturnTransition();
"
10500,super_getSharedElementEnterTransition,"    Object super_getSharedElementEnterTransition();
"
10503,super_getLoaderManager,"    LoaderManager super_getLoaderManager();
"
10504,super_getLifecycle,"    android.arch.lifecycle.Lifecycle super_getLifecycle();
"
10505,super_getLayoutInflater,"    LayoutInflater super_getLayoutInflater(@Nullable Bundle savedFragmentState);
"
10509,super_getAllowReturnTransitionOverlap,"    boolean super_getAllowReturnTransitionOverlap();
"
10510,super_getAllowEnterTransitionOverlap,"    boolean super_getAllowEnterTransitionOverlap();
"
10511,super_dump,"    void super_dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args);
"
10513,startIntentSenderForResult,"    void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, Bundle options) throws SendIntentException;"
10514,startActivityForResult,"    void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options);
"
10515,startActivityForResult,"    void startActivityForResult(Intent intent, int requestCode);
"
10516,startActivity,"    void startActivity(Intent intent, @Nullable Bundle options);
"
10518,shouldShowRequestPermissionRationale,"    boolean shouldShowRequestPermissionRationale(@NonNull String permission);
"
10519,setTargetFragment,"    void setTargetFragment(@Nullable Fragment fragment, int requestCode);
"
10520,setRetainInstance,"    void setRetainInstance(boolean retain);
"
10521,setMenuVisibility,"    void setMenuVisibility(boolean menuVisible);
"
10522,setInitialSavedState,"    void setInitialSavedState(@Nullable Fragment.SavedState state);
"
10523,setHasOptionsMenu,"    void setHasOptionsMenu(boolean hasMenu);
"
10524,setExitSharedElementCallback,"    void setExitSharedElementCallback(SharedElementCallback callback);
"
10525,setEnterSharedElementCallback,"    void setEnterSharedElementCallback(SharedElementCallback callback);
"
10526,setArguments,"    void setArguments(@Nullable Bundle args);
"
10527,registerForContextMenu,"    void registerForContextMenu(View view);
"
10529,onViewStateRestored,"    void onViewStateRestored(@Nullable Bundle savedInstanceState);
"
10530,onViewCreated,"    void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState);
"
10533,onSaveInstanceState,"    void onSaveInstanceState(@NonNull Bundle outState);
"
10535,onRequestPermissionsResult,"    void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults);
"
10537,onPictureInPictureModeChanged,"    void onPictureInPictureModeChanged(boolean isInPictureInPictureMode);
"
10540,onOptionsItemSelected,"    boolean onOptionsItemSelected(MenuItem item);
"
10541,onMultiWindowModeChanged,"    void onMultiWindowModeChanged(boolean isInMultiWindowMode);
"
10543,onInflate,"    void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState);
"
10544,onInflate,"    void onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState);
"
10546,onGetLayoutInflater,"    LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState);
"
10551,onCreateView,"    View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState);"
10552,onCreateOptionsMenu,"    void onCreateOptionsMenu(Menu menu, MenuInflater inflater);
"
10553,onCreateContextMenu,"    void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo);
"
10554,onCreateAnimator,"    Animator onCreateAnimator(int transit, boolean enter, int nextAnim);
"
10555,onCreateAnimation,"    Animation onCreateAnimation(int transit, boolean enter, int nextAnim);
"
10556,onCreate,"    void onCreate(@Nullable Bundle savedInstanceState);
"
10557,onContextItemSelected,"    boolean onContextItemSelected(MenuItem item);
"
10558,onConfigurationChanged,"    void onConfigurationChanged(Configuration newConfig);
"
10559,onAttachFragment,"    void onAttachFragment(Fragment childFragment);
"
10562,onActivityResult,"    void onActivityResult(int requestCode, int resultCode, Intent data);
"
10563,onActivityCreated,"    void onActivityCreated(@Nullable Bundle savedInstanceState);
"
10565,getViewLifecycleOwnerLiveData,"    LiveData<android.arch.lifecycle.LifecycleOwner> getViewLifecycleOwnerLiveData();
"
10566,getViewLifecycleOwner,"    android.arch.lifecycle.LifecycleOwner getViewLifecycleOwner();
"
10568,setUserVisibleHint,"    void setUserVisibleHint(boolean isVisibleToUser);
"
10570,setSharedElementReturnTransition,"    void setSharedElementReturnTransition(@Nullable Object transition);
"
10571,getSharedElementReturnTransition,"    Object getSharedElementReturnTransition();
"
10572,setSharedElementEnterTransition,"    void setSharedElementEnterTransition(@Nullable Object transition);
"
10573,getSharedElementEnterTransition,"    Object getSharedElementEnterTransition();
"
10574,setReturnTransition,"    void setReturnTransition(@Nullable Object transition);
"
10576,setReenterTransition,"    void setReenterTransition(@Nullable Object transition);
"
10579,getLifecycle,"    android.arch.lifecycle.Lifecycle getLifecycle();
"
10580,getLayoutInflater,"    LayoutInflater getLayoutInflater(@Nullable Bundle savedFragmentState);
"
10581,setExitTransition,"    void setExitTransition(@Nullable Object transition);
"
10583,setEnterTransition,"    void setEnterTransition(@Nullable Object transition);
"
10586,setAllowReturnTransitionOverlap,"    void setAllowReturnTransitionOverlap(boolean allow);
"
10587,getAllowReturnTransitionOverlap,"    boolean getAllowReturnTransitionOverlap();
"
10588,setAllowEnterTransitionOverlap,"    void setAllowEnterTransitionOverlap(boolean allow);
"
10589,getAllowEnterTransitionOverlap,"    boolean getAllowEnterTransitionOverlap();
"
10590,dump,"    void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args);
"
10591,super_showNow,"    void super_showNow(FragmentManager manager, String tag);
}"
10592,super_show,"    int super_show(FragmentTransaction transaction, String tag);
"
10593,super_show,"    void super_show(FragmentManager manager, String tag);
"
10594,super_setupDialog,"    void super_setupDialog(Dialog dialog, int style);
"
10595,super_setStyle,"    void super_setStyle(int style, int theme);
"
10596,super_setShowsDialog,"    void super_setShowsDialog(boolean showsDialog);
"
10597,super_setCancelable,"    void super_setCancelable(boolean cancelable);
"
10602,super_onDismiss,"    void super_onDismiss(DialogInterface dialog);
"
10605,super_onCreateDialog,"    Dialog super_onCreateDialog(@Nullable Bundle savedInstanceState);
"
10607,super_onCancel,"    void super_onCancel(DialogInterface dialog);
"
10614,super_dismissAllowingStateLoss,"    void super_dismissAllowingStateLoss();
"
10616,showNow,"    void showNow(FragmentManager manager, String tag);
"
10617,show,"    int show(FragmentTransaction transaction, String tag);
"
10618,show,"    void show(FragmentManager manager, String tag);
"
10619,setupDialog,"    void setupDialog(Dialog dialog, int style);
"
10622,onDismiss,"    void onDismiss(DialogInterface dialog);
"
10623,onCreateDialog,"    Dialog onCreateDialog(@Nullable Bundle savedInstanceState);
"
10624,onCancel,"    void onCancel(DialogInterface dialog);
"
10625,setCancelable,"    void setCancelable(boolean cancelable);
"
10628,setShowsDialog,"    void setShowsDialog(boolean showsDialog);
"
10641,unregisterReceiver,"    void unregisterReceiver(BroadcastReceiver receiver);
}"
10642,unregisterForContextMenu,"    void unregisterForContextMenu(View view);
"
10643,unregisterComponentCallbacks,"    void unregisterComponentCallbacks(ComponentCallbacks callback);
"
10644,unbindService,"    void unbindService(ServiceConnection conn);
"
10645,triggerSearch,"    void triggerSearch(String query, @Nullable Bundle appSearchData);
"
10647,supportStartPostponedEnterTransition,"    void supportStartPostponedEnterTransition();
"
10648,supportShouldUpRecreateTask,"    boolean supportShouldUpRecreateTask(@NonNull Intent targetIntent);
"
10649,supportRequestWindowFeature,"    boolean supportRequestWindowFeature(int featureId);
"
10650,supportPostponeEnterTransition,"    void supportPostponeEnterTransition();
"
10651,supportNavigateUpTo,"    void supportNavigateUpTo(@NonNull Intent upIntent);
"
10654,super_unregisterReceiver,"    void super_unregisterReceiver(BroadcastReceiver receiver);
"
10656,super_unregisterComponentCallbacks,"    void super_unregisterComponentCallbacks(ComponentCallbacks callback);
"
10657,super_unbindService,"    void super_unbindService(ServiceConnection conn);
"
10658,super_triggerSearch,"    void super_triggerSearch(String query, @Nullable Bundle appSearchData);
"
10659,super_takeKeyEvents,"    void super_takeKeyEvents(boolean get);
"
10660,super_supportStartPostponedEnterTransition,"    void super_supportStartPostponedEnterTransition();
"
10661,super_supportShouldUpRecreateTask,"    boolean super_supportShouldUpRecreateTask(@NonNull Intent targetIntent);
"
10662,super_supportRequestWindowFeature,"    boolean super_supportRequestWindowFeature(int featureId);
"
10663,super_supportPostponeEnterTransition,"    void super_supportPostponeEnterTransition();
"
10664,super_supportNavigateUpTo,"    void super_supportNavigateUpTo(@NonNull Intent upIntent);
"
10665,super_supportInvalidateOptionsMenu,"    void super_supportInvalidateOptionsMenu();
"
10666,super_supportFinishAfterTransition,"    void super_supportFinishAfterTransition();
"
10667,super_superDispatchKeyEvent,"    boolean super_superDispatchKeyEvent(KeyEvent event);
"
10668,super_stopService,"    boolean super_stopService(Intent name);
"
10669,super_stopManagingCursor,"    void super_stopManagingCursor(Cursor c);
"
10671,super_stopLocalVoiceInteraction,"    void super_stopLocalVoiceInteraction();
"
10672,super_startSupportActionMode,"    ActionMode super_startSupportActionMode(@NonNull Callback callback);
"
10673,super_startService,"    ComponentName super_startService(Intent service);
"
10674,super_startSearch,"    void super_startSearch(@Nullable String initialQuery, boolean selectInitialQuery, @Nullable Bundle appSearchData,
            boolean globalSearch);"
10676,super_startNextMatchingActivity,"    boolean super_startNextMatchingActivity(@NonNull Intent intent, @Nullable Bundle options);
"
10677,super_startNextMatchingActivity,"    boolean super_startNextMatchingActivity(@NonNull Intent intent);
"
10678,super_startManagingCursor,"    void super_startManagingCursor(Cursor c);
"
10680,super_startLocalVoiceInteraction,"    void super_startLocalVoiceInteraction(Bundle privateOptions);
"
10681,super_startIntentSenderFromFragment,"    void super_startIntentSenderFromFragment(Fragment fragment, IntentSender intent, int requestCode,
            @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)"
10682,super_startIntentSenderFromChild,"    void super_startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, @Nullable Bundle options) throws SendIntentException;"
10683,super_startIntentSenderFromChild,"    void super_startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException;"
10685,super_startIntentSenderForResult,"    void super_startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException;"
10686,super_startIntentSender,"    void super_startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags, Bundle options) throws SendIntentException;"
10687,super_startIntentSender,"    void super_startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags) throws SendIntentException;"
10688,super_startInstrumentation,"    boolean super_startInstrumentation(ComponentName className, String profileFile, Bundle arguments);
"
10689,super_startForegroundService,"    ComponentName super_startForegroundService(Intent service);
"
10690,super_startActivityIfNeeded,"    boolean super_startActivityIfNeeded(@NonNull Intent intent, int requestCode, @Nullable Bundle options);
"
10691,super_startActivityIfNeeded,"    boolean super_startActivityIfNeeded(@NonNull Intent intent, int requestCode);
"
10692,super_startActivityFromFragment,"    void super_startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options);"
10693,super_startActivityFromFragment,"    void super_startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode);
"
10694,super_startActivityFromFragment,"    void super_startActivityFromFragment(Fragment fragment, Intent intent, int requestCode, @Nullable Bundle options);
"
10695,super_startActivityFromFragment,"    void super_startActivityFromFragment(Fragment fragment, Intent intent, int requestCode);
"
10696,super_startActivityFromChild,"    void super_startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode,
            @Nullable Bundle options);"
10697,super_startActivityFromChild,"    void super_startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode);
"
10702,super_startActivities,"    void super_startActivities(Intent[] intents, @Nullable Bundle options);
"
10703,super_startActivities,"    void super_startActivities(Intent[] intents);
"
10704,super_startActionMode,"    android.view.ActionMode super_startActionMode(android.view.ActionMode.Callback callback, int type);
"
10705,super_startActionMode,"    android.view.ActionMode super_startActionMode(android.view.ActionMode.Callback callback);
"
10706,super_showLockTaskEscapeMessage,"    void super_showLockTaskEscapeMessage();
"
10707,super_showAssist,"    boolean super_showAssist(Bundle args);
"
10708,super_shouldUpRecreateTask,"    boolean super_shouldUpRecreateTask(Intent targetIntent);
"
10710,super_setWallpaper,"    void super_setWallpaper(Bitmap bitmap) throws IOException;
"
10711,super_setWallpaper,"    void super_setWallpaper(InputStream data) throws IOException;
"
10712,super_setVrModeEnabled,"    void super_setVrModeEnabled(boolean enabled, @NonNull ComponentName requestedComponent)
            throws NameNotFoundException;"
10713,super_setVisible,"    void super_setVisible(boolean visible);
"
10714,super_setTurnScreenOn,"    void super_setTurnScreenOn(boolean turnScreenOn);
"
10715,super_setTitleColor,"    void super_setTitleColor(int textColor);
"
10717,super_setTitle,"    void super_setTitle(CharSequence title);
"
10719,super_setTaskDescription,"    void super_setTaskDescription(TaskDescription taskDescription);
"
10720,super_setSupportProgressBarVisibility,"    void super_setSupportProgressBarVisibility(boolean visible);
"
10721,super_setSupportProgressBarIndeterminateVisibility,"    void super_setSupportProgressBarIndeterminateVisibility(boolean visible);
"
10722,super_setSupportProgressBarIndeterminate,"    void super_setSupportProgressBarIndeterminate(boolean indeterminate);
"
10723,super_setSupportProgress,"    void super_setSupportProgress(int progress);
"
10724,super_setSupportActionBar,"    void super_setSupportActionBar(@Nullable Toolbar toolbar);
"
10725,super_setShowWhenLocked,"    void super_setShowWhenLocked(boolean showWhenLocked);
"
10726,super_setRequestedOrientation,"    void super_setRequestedOrientation(int requestedOrientation);
"
10727,super_setPictureInPictureParams,"    void super_setPictureInPictureParams(@NonNull PictureInPictureParams params);
"
10728,super_setIntent,"    void super_setIntent(Intent newIntent);
"
10730,super_setFinishOnTouchOutside,"    void super_setFinishOnTouchOutside(boolean finish);
"
10731,super_setExitSharedElementCallback,"    void super_setExitSharedElementCallback(android.app.SharedElementCallback callback);
"
10732,super_setExitSharedElementCallback,"    void super_setExitSharedElementCallback(SharedElementCallback listener);
"
10733,super_setEnterSharedElementCallback,"    void super_setEnterSharedElementCallback(android.app.SharedElementCallback callback);
"
10735,super_setContentView,"    void super_setContentView(View view, LayoutParams params);
"
10737,super_setContentView,"    void super_setContentView(int layoutResID);
"
10738,super_setContentTransitionManager,"    void super_setContentTransitionManager(TransitionManager tm);
"
10739,super_setActionBar,"    void super_setActionBar(@Nullable android.widget.Toolbar toolbar);
"
10740,super_sendStickyOrderedBroadcastAsUser,"    void super_sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras);"
10741,super_sendStickyOrderedBroadcast,"    void super_sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler,
            int initialCode, String initialData, Bundle initialExtras);"
10742,super_sendStickyBroadcastAsUser,"    void super_sendStickyBroadcastAsUser(Intent intent, UserHandle user);
"
10743,super_sendStickyBroadcast,"    void super_sendStickyBroadcast(Intent intent);
"
10744,super_sendOrderedBroadcastAsUser,"    void super_sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData,"
10745,super_sendOrderedBroadcast,"    void super_sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras);"
10746,super_sendOrderedBroadcast,"    void super_sendOrderedBroadcast(Intent intent, String receiverPermission);
"
10747,super_sendBroadcastAsUser,"    void super_sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission);
"
10748,super_sendBroadcastAsUser,"    void super_sendBroadcastAsUser(Intent intent, UserHandle user);
"
10749,super_sendBroadcast,"    void super_sendBroadcast(Intent intent, String receiverPermission);
"
10750,super_sendBroadcast,"    void super_sendBroadcast(Intent intent);
"
10751,super_revokeUriPermission,"    void super_revokeUriPermission(String targetPackage, Uri uri, int modeFlags);
"
10752,super_revokeUriPermission,"    void super_revokeUriPermission(Uri uri, int modeFlags);
"
10753,super_requestVisibleBehind,"    boolean super_requestVisibleBehind(boolean visible);
"
10754,super_requestDragAndDropPermissions,"    DragAndDropPermissions super_requestDragAndDropPermissions(DragEvent event);
"
10756,super_removeStickyBroadcastAsUser,"    void super_removeStickyBroadcastAsUser(Intent intent, UserHandle user);
"
10757,super_removeStickyBroadcast,"    void super_removeStickyBroadcast(Intent intent);
"
10759,super_registerReceiver,"    Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler, int flags);"
10760,super_registerReceiver,"    Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler);"
10761,super_registerReceiver,"    Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags);
"
10762,super_registerReceiver,"    Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter);
"
10764,super_registerComponentCallbacks,"    void super_registerComponentCallbacks(ComponentCallbacks callback);
"
10766,super_putExtraData,"    void super_putExtraData(ExtraData extraData);
"
10769,super_overridePendingTransition,"    void super_overridePendingTransition(int enterAnim, int exitAnim);
"
10770,super_openOrCreateDatabase,"    SQLiteDatabase super_openOrCreateDatabase(String name, int mode, CursorFactory factory,
            DatabaseErrorHandler errorHandler);"
10771,super_openOrCreateDatabase,"    SQLiteDatabase super_openOrCreateDatabase(String name, int mode, CursorFactory factory);
"
10773,super_openFileOutput,"    FileOutputStream super_openFileOutput(String name, int mode) throws FileNotFoundException;
"
10774,super_openFileInput,"    FileInputStream super_openFileInput(String name) throws FileNotFoundException;
"
10775,super_openContextMenu,"    void super_openContextMenu(View view);
"
10776,super_onWindowStartingSupportActionMode,"    ActionMode super_onWindowStartingSupportActionMode(@NonNull Callback callback);
"
10777,super_onWindowStartingActionMode,"    android.view.ActionMode super_onWindowStartingActionMode(android.view.ActionMode.Callback callback, int type);
"
10778,super_onWindowStartingActionMode,"    android.view.ActionMode super_onWindowStartingActionMode(android.view.ActionMode.Callback callback);
"
10779,super_onWindowFocusChanged,"    void super_onWindowFocusChanged(boolean hasFocus);
"
10780,super_onWindowAttributesChanged,"    void super_onWindowAttributesChanged(WindowManager.LayoutParams params);
"
10785,super_onTrackballEvent,"    boolean super_onTrackballEvent(MotionEvent event);
"
10786,super_onTouchEvent,"    boolean super_onTouchEvent(MotionEvent event);
"
10787,super_onTitleChanged,"    void super_onTitleChanged(CharSequence title, int color);
"
10790,super_onSupportActionModeStarted,"    void super_onSupportActionModeStarted(@NonNull ActionMode mode);
"
10791,super_onSupportActionModeFinished,"    void super_onSupportActionModeFinished(@NonNull ActionMode mode);
"
10796,super_onSearchRequested,"    boolean super_onSearchRequested(@Nullable SearchEvent searchEvent);
"
10797,super_onSaveInstanceState,"    void super_onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState);
"
10798,super_onSaveInstanceState,"    void super_onSaveInstanceState(Bundle outState);
"
10801,super_onRestoreInstanceState,"    void super_onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState);
"
10802,super_onRestoreInstanceState,"    void super_onRestoreInstanceState(Bundle savedInstanceState);
"
10806,super_onProvideKeyboardShortcuts,"    void super_onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, Menu menu, int deviceId);
"
10807,super_onProvideAssistData,"    void super_onProvideAssistData(Bundle data);
"
10808,super_onProvideAssistContent,"    void super_onProvideAssistContent(AssistContent outContent);
"
10809,super_onPrepareSupportNavigateUpTaskStack,"    void super_onPrepareSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder);
"
10810,super_onPreparePanel,"    boolean super_onPreparePanel(int featureId, View view, Menu menu);
"
10811,super_onPrepareOptionsPanel,"    boolean super_onPrepareOptionsPanel(View view, Menu menu);
"
10812,super_onPrepareOptionsMenu,"    boolean super_onPrepareOptionsMenu(Menu menu);
"
10813,super_onPrepareNavigateUpTaskStack,"    void super_onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder builder);
"
10814,super_onPrepareDialog,"    void super_onPrepareDialog(int id, Dialog dialog, Bundle args);
"
10815,super_onPrepareDialog,"    void super_onPrepareDialog(int id, Dialog dialog);
"
10817,super_onPostCreate,"    void super_onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState);
"
10818,super_onPostCreate,"    void super_onPostCreate(@Nullable Bundle savedInstanceState);
"
10819,super_onPictureInPictureModeChanged,"    void super_onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig);
"
10822,super_onPanelClosed,"    void super_onPanelClosed(int featureId, Menu menu);
"
10825,super_onNewIntent,"    void super_onNewIntent(Intent intent);
"
10826,super_onNavigateUpFromChild,"    boolean super_onNavigateUpFromChild(Activity child);
"
10828,super_onMultiWindowModeChanged,"    void super_onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig);
"
10830,super_onMenuOpened,"    boolean super_onMenuOpened(int featureId, Menu menu);
"
10832,super_onLocalVoiceInteractionStopped,"    void super_onLocalVoiceInteractionStopped();
"
10833,super_onLocalVoiceInteractionStarted,"    void super_onLocalVoiceInteractionStarted();
"
10834,super_onKeyUp,"    boolean super_onKeyUp(int keyCode, KeyEvent event);
"
10835,super_onKeyShortcut,"    boolean super_onKeyShortcut(int keyCode, KeyEvent event);
"
10836,super_onKeyMultiple,"    boolean super_onKeyMultiple(int keyCode, int repeatCount, KeyEvent event);
"
10837,super_onKeyLongPress,"    boolean super_onKeyLongPress(int keyCode, KeyEvent event);
"
10838,super_onKeyDown,"    boolean super_onKeyDown(int keyCode, KeyEvent event);
"
10839,super_onGenericMotionEvent,"    boolean super_onGenericMotionEvent(MotionEvent event);
"
10840,super_onEnterAnimationComplete,"    void super_onEnterAnimationComplete();
"
10843,super_onCreateView,"    View super_onCreateView(String name, Context context, AttributeSet attrs);
"
10844,super_onCreateView,"    View super_onCreateView(View parent, String name, Context context, AttributeSet attrs);
"
10845,super_onCreateThumbnail,"    boolean super_onCreateThumbnail(Bitmap outBitmap, Canvas canvas);
"
10846,super_onCreateSupportNavigateUpTaskStack,"    void super_onCreateSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder);
"
10847,super_onCreatePanelView,"    View super_onCreatePanelView(int featureId);
"
10848,super_onCreatePanelMenu,"    boolean super_onCreatePanelMenu(int featureId, Menu menu);
"
10849,super_onCreateOptionsMenu,"    boolean super_onCreateOptionsMenu(Menu menu);
"
10850,super_onCreateNavigateUpTaskStack,"    void super_onCreateNavigateUpTaskStack(android.app.TaskStackBuilder builder);
"
10851,super_onCreateDialog,"    Dialog super_onCreateDialog(int id, Bundle args);
"
10853,super_onCreateDescription,"    CharSequence super_onCreateDescription();
"
10855,super_onCreate,"    void super_onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState);
"
10857,super_onContextMenuClosed,"    void super_onContextMenuClosed(Menu menu);
"
10861,super_onChildTitleChanged,"    void super_onChildTitleChanged(Activity childActivity, CharSequence title);
"
10864,super_onAttachFragment,"    void super_onAttachFragment(android.app.Fragment fragment);
"
10865,super_onAttachFragment,"    void super_onAttachFragment(Fragment fragment);
"
10866,super_onApplyThemeResource,"    void super_onApplyThemeResource(Theme theme, int resid, boolean first);
"
10867,super_onActivityResult,"    void super_onActivityResult(int requestCode, int resultCode, @Nullable Intent data);
"
10868,super_onActivityReenter,"    void super_onActivityReenter(int resultCode, Intent data);
"
10869,super_onActionModeStarted,"    void super_onActionModeStarted(android.view.ActionMode mode);
"
10870,super_onActionModeFinished,"    void super_onActionModeFinished(android.view.ActionMode mode);
"
10871,super_navigateUpToFromChild,"    boolean super_navigateUpToFromChild(Activity child, Intent upIntent);
"
10872,super_navigateUpTo,"    boolean super_navigateUpTo(Intent upIntent);
"
10873,super_moveTaskToBack,"    boolean super_moveTaskToBack(boolean nonRoot);
"
10874,super_moveSharedPreferencesFrom,"    boolean super_moveSharedPreferencesFrom(Context sourceContext, String name);
"
10875,super_moveDatabaseFrom,"    boolean super_moveDatabaseFrom(Context sourceContext, String name);
"
10876,super_isVoiceInteractionRoot,"    boolean super_isVoiceInteractionRoot();
"
10880,super_isLocalVoiceInteractionSupported,"    boolean super_isLocalVoiceInteractionSupported();
"
10881,super_isInPictureInPictureMode,"    boolean super_isInPictureInPictureMode();
"
10885,super_isDeviceProtectedStorage,"    boolean super_isDeviceProtectedStorage();
"
10887,super_isChangingConfigurations,"    boolean super_isChangingConfigurations();
"
10888,super_isActivityTransitionRunning,"    boolean super_isActivityTransitionRunning();
"
10891,super_grantUriPermission,"    void super_grantUriPermission(String toPackage, Uri uri, int modeFlags);
"
10892,super_getWindowManager,"    WindowManager super_getWindowManager();
"
10894,super_getWallpaperDesiredMinimumWidth,"    int super_getWallpaperDesiredMinimumWidth();
"
10895,super_getWallpaperDesiredMinimumHeight,"    int super_getWallpaperDesiredMinimumHeight();
"
10897,super_getVoiceInteractor,"    VoiceInteractor super_getVoiceInteractor();
"
10901,super_getSystemServiceName,"    String super_getSystemServiceName(Class<?> serviceClass);
"
10902,super_getSystemService,"    Object super_getSystemService(@NonNull String name);
"
10903,super_getSupportParentActivityIntent,"    Intent super_getSupportParentActivityIntent();
"
10904,super_getSupportLoaderManager,"    LoaderManager super_getSupportLoaderManager();
"
10905,super_getSupportFragmentManager,"    FragmentManager super_getSupportFragmentManager();
"
10906,super_getSupportActionBar,"    ActionBar super_getSupportActionBar();
"
10907,super_getSharedPreferences,"    SharedPreferences super_getSharedPreferences(String name, int mode);
"
10911,super_getPreferences,"    SharedPreferences super_getPreferences(int mode);
"
10912,super_getParentActivityIntent,"    Intent super_getParentActivityIntent();
"
10913,super_getPackageResourcePath,"    String super_getPackageResourcePath();
"
10915,super_getPackageManager,"    PackageManager super_getPackageManager();
"
10921,super_getMaxNumPictureInPictureActions,"    int super_getMaxNumPictureInPictureActions();
"
10925,super_getLoaderManager,"    android.app.LoaderManager super_getLoaderManager();
"
10927,super_getLayoutInflater,"    LayoutInflater super_getLayoutInflater();
"
10929,super_getFragmentManager,"    android.app.FragmentManager super_getFragmentManager();
"
10931,super_getFileStreamPath,"    File super_getFileStreamPath(String name);
"
10932,super_getExtraData,"    <T extends SupportActivity.ExtraData> T super_getExtraData(Class<T> extraDataClass);
"
10934,super_getExternalFilesDirs,"    File[] super_getExternalFilesDirs(String type);
"
10935,super_getExternalFilesDir,"    File super_getExternalFilesDir(String type);
"
10938,super_getDrawerToggleDelegate,"    Delegate super_getDrawerToggleDelegate();
"
10939,super_getDir,"    File super_getDir(String name, int mode);
"
10940,super_getDelegate,"    AppCompatDelegate super_getDelegate();
"
10941,super_getDatabasePath,"    File super_getDatabasePath(String name);
"
10944,super_getContentTransitionManager,"    TransitionManager super_getContentTransitionManager();
"
10946,super_getContentResolver,"    ContentResolver super_getContentResolver();
"
10947,super_getComponentName,"    ComponentName super_getComponentName();
"
10950,super_getChangingConfigurations,"    int super_getChangingConfigurations();
"
10952,super_getCallingActivity,"    ComponentName super_getCallingActivity();
"
10956,super_getApplicationInfo,"    ApplicationInfo super_getApplicationInfo();
"
10957,super_getApplicationContext,"    Context super_getApplicationContext();
"
10958,super_getActionBar,"    android.app.ActionBar super_getActionBar();
"
10959,super_finishFromChild,"    void super_finishFromChild(Activity child);
"
10963,super_finishActivityFromChild,"    void super_finishActivityFromChild(@NonNull Activity child, int requestCode);
"
10964,super_finishActivity,"    void super_finishActivity(int requestCode);
"
10966,super_findViewById,"    <T extends View> T super_findViewById(int id);
"
10968,super_enterPictureInPictureMode,"    boolean super_enterPictureInPictureMode(@NonNull PictureInPictureParams params);
"
10969,super_enterPictureInPictureMode,"    void super_enterPictureInPictureMode();
"
10970,super_enforceUriPermission,"    void super_enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags, String message);"
10971,super_enforceUriPermission,"    void super_enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message);
"
10972,super_enforcePermission,"    void super_enforcePermission(String permission, int pid, int uid, String message);
"
10973,super_enforceCallingUriPermission,"    void super_enforceCallingUriPermission(Uri uri, int modeFlags, String message);
"
10974,super_enforceCallingPermission,"    void super_enforceCallingPermission(String permission, String message);
"
10975,super_enforceCallingOrSelfUriPermission,"    void super_enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message);
"
10976,super_enforceCallingOrSelfPermission,"    void super_enforceCallingOrSelfPermission(String permission, String message);
"
10978,super_dispatchTrackballEvent,"    boolean super_dispatchTrackballEvent(MotionEvent ev);
"
10979,super_dispatchTouchEvent,"    boolean super_dispatchTouchEvent(MotionEvent ev);
"
10980,super_dispatchPopulateAccessibilityEvent,"    boolean super_dispatchPopulateAccessibilityEvent(AccessibilityEvent event);
"
10981,super_dispatchKeyShortcutEvent,"    boolean super_dispatchKeyShortcutEvent(KeyEvent event);
"
10982,super_dispatchKeyEvent,"    boolean super_dispatchKeyEvent(KeyEvent event);
"
10983,super_dispatchGenericMotionEvent,"    boolean super_dispatchGenericMotionEvent(MotionEvent ev);
"
10984,super_deleteSharedPreferences,"    boolean super_deleteSharedPreferences(String name);
"
10985,super_deleteFile,"    boolean super_deleteFile(String name);
"
10986,super_deleteDatabase,"    boolean super_deleteDatabase(String name);
"
10988,super_createPendingResult,"    PendingIntent super_createPendingResult(int requestCode, @NonNull Intent data, int flags);
"
10989,super_createPackageContext,"    Context super_createPackageContext(String packageName, int flags) throws NameNotFoundException;
"
10990,super_createDisplayContext,"    Context super_createDisplayContext(Display display);
"
10991,super_createDeviceProtectedStorageContext,"    Context super_createDeviceProtectedStorageContext();
"
10992,super_createContextForSplit,"    Context super_createContextForSplit(String splitName) throws NameNotFoundException;
"
10993,super_createConfigurationContext,"    Context super_createConfigurationContext(Configuration overrideConfiguration);
"
10996,super_clearWallpaper,"    void super_clearWallpaper() throws IOException;
"
10997,super_checkUriPermission,"    int super_checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags);"
10998,super_checkUriPermission,"    int super_checkUriPermission(Uri uri, int pid, int uid, int modeFlags);
"
10999,super_checkSelfPermission,"    int super_checkSelfPermission(String permission);
"
11000,super_checkPermission,"    int super_checkPermission(String permission, int pid, int uid);
"
11001,super_checkCallingUriPermission,"    int super_checkCallingUriPermission(Uri uri, int modeFlags);
"
11002,super_checkCallingPermission,"    int super_checkCallingPermission(String permission);
"
11003,super_checkCallingOrSelfUriPermission,"    int super_checkCallingOrSelfUriPermission(Uri uri, int modeFlags);
"
11004,super_checkCallingOrSelfPermission,"    int super_checkCallingOrSelfPermission(String permission);
"
11005,super_bindService,"    boolean super_bindService(Intent service, ServiceConnection conn, int flags);
"
11006,super_attachBaseContext,"    void super_attachBaseContext(Context newBase);
"
11007,super_applyOverrideConfiguration,"    void super_applyOverrideConfiguration(Configuration overrideConfiguration);
"
11008,super_addContentView,"    void super_addContentView(View view, LayoutParams params);
"
11009,superDispatchKeyEvent,"    boolean superDispatchKeyEvent(KeyEvent event);
"
11014,startSupportActionMode,"    ActionMode startSupportActionMode(@NonNull Callback callback);
"
11015,startService,"    ComponentName startService(Intent service);
"
11016,startSearch,"    void startSearch(@Nullable String initialQuery, boolean selectInitialQuery, @Nullable Bundle appSearchData,
            boolean globalSearch);"
11018,startNextMatchingActivity,"    boolean startNextMatchingActivity(@NonNull Intent intent, @Nullable Bundle options);
"
11019,startNextMatchingActivity,"    boolean startNextMatchingActivity(@NonNull Intent intent);
"
11022,startLocalVoiceInteraction,"    void startLocalVoiceInteraction(Bundle privateOptions);
"
11023,startIntentSenderFromFragment,"    void startIntentSenderFromFragment(Fragment fragment, IntentSender intent, int requestCode,
            @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)"
11024,startIntentSenderFromChild,"    void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, @Nullable Bundle options) throws SendIntentException;"
11025,startIntentSenderFromChild,"    void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException;"
11027,startIntentSenderForResult,"    void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException;"
11028,startIntentSender,"    void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags, Bundle options) throws SendIntentException;"
11029,startIntentSender,"    void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags) throws SendIntentException;"
11030,startInstrumentation,"    boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments);
"
11031,startForegroundService,"    ComponentName startForegroundService(Intent service);
"
11032,startActivityIfNeeded,"    boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode, @Nullable Bundle options);
"
11033,startActivityIfNeeded,"    boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode);
"
11034,startActivityFromFragment,"    void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options);"
11035,startActivityFromFragment,"    void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode);
"
11036,startActivityFromFragment,"    void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode, @Nullable Bundle options);
"
11037,startActivityFromFragment,"    void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode);
"
11038,startActivityFromChild,"    void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode, @Nullable Bundle options);
"
11039,startActivityFromChild,"    void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode);
"
11044,startActivities,"    void startActivities(Intent[] intents, @Nullable Bundle options);
"
11045,startActivities,"    void startActivities(Intent[] intents);
"
11046,startActionMode,"    android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback, int type);
"
11047,startActionMode,"    android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback);
"
11050,shouldUpRecreateTask,"    boolean shouldUpRecreateTask(Intent targetIntent);
"
11052,setWallpaper,"    void setWallpaper(InputStream data) throws IOException;
"
11053,setVrModeEnabled,"    void setVrModeEnabled(boolean enabled, @NonNull ComponentName requestedComponent) throws NameNotFoundException;
"
11055,setTurnScreenOn,"    void setTurnScreenOn(boolean turnScreenOn);
"
11059,setTaskDescription,"    void setTaskDescription(TaskDescription taskDescription);
"
11060,setSupportProgressBarVisibility,"    void setSupportProgressBarVisibility(boolean visible);
"
11061,setSupportProgressBarIndeterminateVisibility,"    void setSupportProgressBarIndeterminateVisibility(boolean visible);
"
11062,setSupportProgressBarIndeterminate,"    void setSupportProgressBarIndeterminate(boolean indeterminate);
"
11063,setSupportProgress,"    void setSupportProgress(int progress);
"
11064,setShowWhenLocked,"    void setShowWhenLocked(boolean showWhenLocked);
"
11065,setPictureInPictureParams,"    void setPictureInPictureParams(@NonNull PictureInPictureParams params);
"
11066,setFinishOnTouchOutside,"    void setFinishOnTouchOutside(boolean finish);
"
11067,setExitSharedElementCallback,"    void setExitSharedElementCallback(android.app.SharedElementCallback callback);
"
11068,setExitSharedElementCallback,"    void setExitSharedElementCallback(SharedElementCallback listener);
"
11069,setEnterSharedElementCallback,"    void setEnterSharedElementCallback(android.app.SharedElementCallback callback);
"
11071,setContentView,"    void setContentView(View view, LayoutParams params);
"
11074,sendStickyOrderedBroadcastAsUser,"    void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras);"
11075,sendStickyOrderedBroadcast,"    void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler,
            int initialCode, String initialData, Bundle initialExtras);"
11076,sendStickyBroadcastAsUser,"    void sendStickyBroadcastAsUser(Intent intent, UserHandle user);
"
11077,sendStickyBroadcast,"    void sendStickyBroadcast(Intent intent);
"
11078,sendOrderedBroadcastAsUser,"    void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData,"
11079,sendOrderedBroadcast,"    void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras);"
11080,sendOrderedBroadcast,"    void sendOrderedBroadcast(Intent intent, String receiverPermission);
"
11081,sendBroadcastAsUser,"    void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission);
"
11082,sendBroadcastAsUser,"    void sendBroadcastAsUser(Intent intent, UserHandle user);
"
11083,sendBroadcast,"    void sendBroadcast(Intent intent, String receiverPermission);
"
11085,revokeUriPermission,"    void revokeUriPermission(String targetPackage, Uri uri, int modeFlags);
"
11086,revokeUriPermission,"    void revokeUriPermission(Uri uri, int modeFlags);
"
11087,requestVisibleBehind,"    boolean requestVisibleBehind(boolean visible);
"
11088,requestDragAndDropPermissions,"    DragAndDropPermissions requestDragAndDropPermissions(DragEvent event);
"
11090,removeStickyBroadcastAsUser,"    void removeStickyBroadcastAsUser(Intent intent, UserHandle user);
"
11091,removeStickyBroadcast,"    void removeStickyBroadcast(Intent intent);
"
11093,registerReceiver,"    Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler, int flags);"
11094,registerReceiver,"    Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler);"
11095,registerReceiver,"    Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags);
"
11096,registerReceiver,"    Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter);
"
11098,registerComponentCallbacks,"    void registerComponentCallbacks(ComponentCallbacks callback);
"
11100,putExtraData,"    void putExtraData(ExtraData extraData);
"
11103,overridePendingTransition,"    void overridePendingTransition(int enterAnim, int exitAnim);
"
11104,openOrCreateDatabase,"    SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory,
            DatabaseErrorHandler errorHandler);"
11105,openOrCreateDatabase,"    SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory);
"
11107,openFileOutput,"    FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException;
"
11108,openFileInput,"    FileInputStream openFileInput(String name) throws FileNotFoundException;
"
11110,onWindowStartingSupportActionMode,"    ActionMode onWindowStartingSupportActionMode(@NonNull Callback callback);
"
11111,onWindowStartingActionMode,"    android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback, int type);
"
11112,onWindowStartingActionMode,"    android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback);
"
11113,onWindowFocusChanged,"    void onWindowFocusChanged(boolean hasFocus);
"
11114,onWindowAttributesChanged,"    void onWindowAttributesChanged(WindowManager.LayoutParams params);
"
11119,onTrackballEvent,"    boolean onTrackballEvent(MotionEvent event);
"
11120,onTouchEvent,"    boolean onTouchEvent(MotionEvent event);
"
11121,onTitleChanged,"    void onTitleChanged(CharSequence title, int color);
"
11124,onSupportActionModeStarted,"    void onSupportActionModeStarted(@NonNull ActionMode mode);
"
11125,onSupportActionModeFinished,"    void onSupportActionModeFinished(@NonNull ActionMode mode);
"
11130,onSearchRequested,"    boolean onSearchRequested(@Nullable SearchEvent searchEvent);
"
11131,onSaveInstanceState,"    void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState);
"
11132,onSaveInstanceState,"    void onSaveInstanceState(Bundle outState);
"
11133,onRetainCustomNonConfigurationInstance,"    Object onRetainCustomNonConfigurationInstance();
"
11134,onRetainCompositeCustomNonConfigurationInstance,"    Object onRetainCompositeCustomNonConfigurationInstance();
"
11137,onRestoreInstanceState,"    void onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState);
"
11138,onRestoreInstanceState,"    void onRestoreInstanceState(Bundle savedInstanceState);
"
11141,onProvideKeyboardShortcuts,"    void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, Menu menu, int deviceId);
"
11142,onProvideAssistData,"    void onProvideAssistData(Bundle data);
"
11143,onProvideAssistContent,"    void onProvideAssistContent(AssistContent outContent);
"
11144,onPrepareSupportNavigateUpTaskStack,"    void onPrepareSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder);
"
11145,onPreparePanel,"    boolean onPreparePanel(int featureId, View view, Menu menu);
"
11146,onPrepareOptionsPanel,"    boolean onPrepareOptionsPanel(View view, Menu menu);
"
11147,onPrepareOptionsMenu,"    boolean onPrepareOptionsMenu(Menu menu);
"
11148,onPrepareNavigateUpTaskStack,"    void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder builder);
"
11149,onPrepareDialog,"    void onPrepareDialog(int id, Dialog dialog, Bundle args);
"
11150,onPrepareDialog,"    void onPrepareDialog(int id, Dialog dialog);
"
11152,onPostCreate,"    void onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState);
"
11153,onPostCreate,"    void onPostCreate(@Nullable Bundle savedInstanceState);
"
11154,onPictureInPictureModeChanged,"    void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig);
"
11157,onPanelClosed,"    void onPanelClosed(int featureId, Menu menu);
"
11161,onNavigateUpFromChild,"    boolean onNavigateUpFromChild(Activity child);
"
11163,onMultiWindowModeChanged,"    void onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig);
"
11165,onMenuOpened,"    boolean onMenuOpened(int featureId, Menu menu);
"
11167,onLocalVoiceInteractionStopped,"    void onLocalVoiceInteractionStopped();
"
11168,onLocalVoiceInteractionStarted,"    void onLocalVoiceInteractionStarted();
"
11169,onKeyUp,"    boolean onKeyUp(int keyCode, KeyEvent event);
"
11170,onKeyShortcut,"    boolean onKeyShortcut(int keyCode, KeyEvent event);
"
11171,onKeyMultiple,"    boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event);
"
11172,onKeyLongPress,"    boolean onKeyLongPress(int keyCode, KeyEvent event);
"
11173,onKeyDown,"    boolean onKeyDown(int keyCode, KeyEvent event);
"
11174,onGenericMotionEvent,"    boolean onGenericMotionEvent(MotionEvent event);
"
11178,onCreateThumbnail,"    boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas);
"
11179,onCreateSupportNavigateUpTaskStack,"    void onCreateSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder);
"
11180,onCreatePanelView,"    View onCreatePanelView(int featureId);
"
11181,onCreatePanelMenu,"    boolean onCreatePanelMenu(int featureId, Menu menu);
"
11182,onCreateOptionsMenu,"    boolean onCreateOptionsMenu(Menu menu);
"
11183,onCreateNavigateUpTaskStack,"    void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder builder);
"
11184,onCreateDialog,"    Dialog onCreateDialog(int id, Bundle args);
"
11188,onCreate,"    void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState);
"
11194,onChildTitleChanged,"    void onChildTitleChanged(Activity childActivity, CharSequence title);
"
11197,onAttachFragment,"    void onAttachFragment(android.app.Fragment fragment);
"
11198,onAttachFragment,"    void onAttachFragment(Fragment fragment);
"
11199,onApplyThemeResource,"    void onApplyThemeResource(Theme theme, int resid, boolean first);
"
11200,onActivityResult,"    void onActivityResult(int requestCode, int resultCode, @Nullable Intent data);
"
11201,onActivityReenter,"    void onActivityReenter(int resultCode, Intent data);
"
11202,onActionModeStarted,"    void onActionModeStarted(android.view.ActionMode mode);
"
11203,onActionModeFinished,"    void onActionModeFinished(android.view.ActionMode mode);
"
11204,navigateUpToFromChild,"    boolean navigateUpToFromChild(Activity child, Intent upIntent);
"
11205,navigateUpTo,"    boolean navigateUpTo(Intent upIntent);
"
11206,moveTaskToBack,"    boolean moveTaskToBack(boolean nonRoot);
"
11207,moveSharedPreferencesFrom,"    boolean moveSharedPreferencesFrom(Context sourceContext, String name);
"
11208,moveDatabaseFrom,"    boolean moveDatabaseFrom(Context sourceContext, String name);
"
11213,isLocalVoiceInteractionSupported,"    boolean isLocalVoiceInteractionSupported();
"
11222,isActivityTransitionRunning,"    boolean isActivityTransitionRunning();
"
11225,grantUriPermission,"    void grantUriPermission(String toPackage, Uri uri, int modeFlags);
"
11228,getWallpaperDesiredMinimumWidth,"    int getWallpaperDesiredMinimumWidth();
"
11229,getWallpaperDesiredMinimumHeight,"    int getWallpaperDesiredMinimumHeight();
"
11230,setWallpaper,"    void setWallpaper(Bitmap bitmap) throws IOException;
"
11237,getSystemServiceName,"    String getSystemServiceName(Class<?> serviceClass);
"
11238,getSystemService,"    Object getSystemService(@NonNull String name);
"
11239,getSupportParentActivityIntent,"    Intent getSupportParentActivityIntent();
"
11240,getSupportLoaderManager,"    LoaderManager getSupportLoaderManager();
"
11241,getSupportFragmentManager,"    FragmentManager getSupportFragmentManager();
"
11242,setSupportActionBar,"    void setSupportActionBar(@Nullable Toolbar toolbar);
"
11244,getSharedPreferences,"    SharedPreferences getSharedPreferences(String name, int mode);
"
11246,setRequestedOrientation,"    void setRequestedOrientation(int requestedOrientation);
"
11249,getPreferences,"    SharedPreferences getPreferences(int mode);
"
11259,getMaxNumPictureInPictureActions,"    int getMaxNumPictureInPictureActions();
"
11263,getLoaderManager,"    android.app.LoaderManager getLoaderManager();
"
11266,getLastNonConfigurationInstance,"    Object getLastNonConfigurationInstance();
"
11267,getLastCustomNonConfigurationInstance,"    Object getLastCustomNonConfigurationInstance();
"
11268,getLastCompositeCustomNonConfigurationInstance,"    Object getLastCompositeCustomNonConfigurationInstance();
"
11271,getFragmentManager,"    android.app.FragmentManager getFragmentManager();
"
11274,getExtraData,"    <T extends SupportActivity.ExtraData> T getExtraData(Class<T> extraDataClass);
"
11276,getExternalFilesDirs,"    File[] getExternalFilesDirs(String type);
"
11277,getExternalFilesDir,"    File getExternalFilesDir(String type);
"
11286,setContentTransitionManager,"    void setContentTransitionManager(TransitionManager tm);
"
11287,getContentTransitionManager,"    TransitionManager getContentTransitionManager();
"
11301,setActionBar,"    void setActionBar(@Nullable android.widget.Toolbar toolbar);
"
11307,finishActivityFromChild,"    void finishActivityFromChild(@NonNull Activity child, int requestCode);
"
11310,findViewById,"    <T extends View> T findViewById(int id);
"
11312,enterPictureInPictureMode,"    boolean enterPictureInPictureMode(@NonNull PictureInPictureParams params);
"
11314,enforceUriPermission,"    void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags,
            String message);"
11315,enforceUriPermission,"    void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message);
"
11316,enforcePermission,"    void enforcePermission(String permission, int pid, int uid, String message);
"
11317,enforceCallingUriPermission,"    void enforceCallingUriPermission(Uri uri, int modeFlags, String message);
"
11318,enforceCallingPermission,"    void enforceCallingPermission(String permission, String message);
"
11319,enforceCallingOrSelfUriPermission,"    void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message);
"
11320,enforceCallingOrSelfPermission,"    void enforceCallingOrSelfPermission(String permission, String message);
"
11322,dispatchTrackballEvent,"    boolean dispatchTrackballEvent(MotionEvent ev);
"
11323,dispatchTouchEvent,"    boolean dispatchTouchEvent(MotionEvent ev);
"
11324,dispatchPopulateAccessibilityEvent,"    boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event);
"
11325,dispatchKeyShortcutEvent,"    boolean dispatchKeyShortcutEvent(KeyEvent event);
"
11326,dispatchKeyEvent,"    boolean dispatchKeyEvent(KeyEvent event);
"
11327,dispatchGenericMotionEvent,"    boolean dispatchGenericMotionEvent(MotionEvent ev);
"
11328,deleteSharedPreferences,"    boolean deleteSharedPreferences(String name);
"
11332,createPendingResult,"    PendingIntent createPendingResult(int requestCode, @NonNull Intent data, int flags);
"
11333,createPackageContext,"    Context createPackageContext(String packageName, int flags) throws NameNotFoundException;
"
11334,createDisplayContext,"    Context createDisplayContext(Display display);
"
11335,createDeviceProtectedStorageContext,"    Context createDeviceProtectedStorageContext();
"
11336,createContextForSplit,"    Context createContextForSplit(String splitName) throws NameNotFoundException;
"
11337,createConfigurationContext,"    Context createConfigurationContext(Configuration overrideConfiguration);
"
11340,clearWallpaper,"    void clearWallpaper() throws IOException;
"
11341,checkUriPermission,"    int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags);
"
11342,checkUriPermission,"    int checkUriPermission(Uri uri, int pid, int uid, int modeFlags);
"
11343,checkSelfPermission,"    int checkSelfPermission(String permission);
"
11344,checkPermission,"    int checkPermission(String permission, int pid, int uid);
"
11345,checkCallingUriPermission,"    int checkCallingUriPermission(Uri uri, int modeFlags);
"
11346,checkCallingPermission,"    int checkCallingPermission(String permission);
"
11347,checkCallingOrSelfUriPermission,"    int checkCallingOrSelfUriPermission(Uri uri, int modeFlags);
"
11348,checkCallingOrSelfPermission,"    int checkCallingOrSelfPermission(String permission);
"
11349,bindService,"    boolean bindService(Intent service, ServiceConnection conn, int flags);
"
11350,attachBaseContext,"    void attachBaseContext(Context newBase);
"
11351,applyOverrideConfiguration,"    void applyOverrideConfiguration(Configuration overrideConfiguration);
"
11352,addContentView,"    void addContentView(View view, LayoutParams params);
"
11354,onCreateView,"    View onCreateView(String name, Context context, AttributeSet attrs);
"
11355,onCreateView,"    View onCreateView(View parent, String name, Context context, AttributeSet attrs);
"
11356,unregisterForContextMenu,"    void unregisterForContextMenu(final CallVoid1<View> superCall, View view) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11357,toString,"    String toString(final CallFun0<String> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11358,startPostponedEnterTransition,"    void startPostponedEnterTransition(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11359,startIntentSenderForResult,"    void startIntentSenderForResult(
            final CallVoid7<IntentSender, Integer, Intent, Integer, Integer, Integer, Bundle> superCall,
            IntentSender intent, int requestCode, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,"
11360,startActivityForResult,"    void startActivityForResult(final CallVoid3<Intent, Integer, Bundle> superCall, Intent intent, int requestCode,
            @Nullable Bundle options) {
        synchronized (mSuperListeners) {"
11361,startActivityForResult,"    void startActivityForResult(final CallVoid2<Intent, Integer> superCall, Intent intent, int requestCode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11362,startActivity,"    void startActivity(final CallVoid2<Intent, Bundle> superCall, Intent intent, @Nullable Bundle options) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11363,startActivity,"    void startActivity(final CallVoid1<Intent> superCall, Intent intent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11364,shouldShowRequestPermissionRationale,"    boolean shouldShowRequestPermissionRationale(final CallFun1<Boolean, String> superCall,
            @NonNull String permission) {
        synchronized (mSuperListeners) {"
11366,setTargetFragment,"    void setTargetFragment(final CallVoid2<Fragment, Integer> superCall, @Nullable Fragment fragment,
            int requestCode) {
        synchronized (mSuperListeners) {"
11376,setExitSharedElementCallback,"    void setExitSharedElementCallback(final CallVoid1<SharedElementCallback> superCall,
            SharedElementCallback callback) {
        synchronized (mSuperListeners) {"
11378,setEnterSharedElementCallback,"    void setEnterSharedElementCallback(final CallVoid1<SharedElementCallback> superCall,
            SharedElementCallback callback) {
        synchronized (mSuperListeners) {"
11382,registerForContextMenu,"    void registerForContextMenu(final CallVoid1<View> superCall, View view) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11383,postponeEnterTransition,"    void postponeEnterTransition(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11384,onViewStateRestored,"    void onViewStateRestored(final CallVoid1<Bundle> superCall, @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11385,onViewCreated,"    void onViewCreated(final CallVoid2<View, Bundle> superCall, @NonNull View view,
            @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {"
11386,onStop,"    void onStop(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11387,onStart,"    void onStart(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11388,onSaveInstanceState,"    void onSaveInstanceState(final CallVoid1<Bundle> superCall, @NonNull Bundle outState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11389,onResume,"    void onResume(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11390,onRequestPermissionsResult,"    void onRequestPermissionsResult(final CallVoid3<Integer, String[], int[]> superCall, int requestCode,
            @NonNull String[] permissions, @NonNull int[] grantResults) {
        synchronized (mSuperListeners) {"
11391,onPrepareOptionsMenu,"    void onPrepareOptionsMenu(final CallVoid1<Menu> superCall, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11392,onPictureInPictureModeChanged,"    void onPictureInPictureModeChanged(final CallVoid1<Boolean> superCall, boolean isInPictureInPictureMode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11393,onPause,"    void onPause(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11394,onOptionsMenuClosed,"    void onOptionsMenuClosed(final CallVoid1<Menu> superCall, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11395,onOptionsItemSelected,"    boolean onOptionsItemSelected(final CallFun1<Boolean, MenuItem> superCall, MenuItem item) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11396,onMultiWindowModeChanged,"    void onMultiWindowModeChanged(final CallVoid1<Boolean> superCall, boolean isInMultiWindowMode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11397,onLowMemory,"    void onLowMemory(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11398,onInflate,"    void onInflate(final CallVoid3<Activity, AttributeSet, Bundle> superCall, Activity activity, AttributeSet attrs,
            Bundle savedInstanceState) {
        synchronized (mSuperListeners) {"
11399,onInflate,"    void onInflate(final CallVoid3<Context, AttributeSet, Bundle> superCall, Context context, AttributeSet attrs,
            Bundle savedInstanceState) {
        synchronized (mSuperListeners) {"
11400,onHiddenChanged,"    void onHiddenChanged(final CallVoid1<Boolean> superCall, boolean hidden) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11401,onGetLayoutInflater,"    LayoutInflater onGetLayoutInflater(final CallFun1<LayoutInflater, Bundle> superCall,
            @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {"
11402,onDetach,"    void onDetach(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11403,onDestroyView,"    void onDestroyView(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11404,onDestroyOptionsMenu,"    void onDestroyOptionsMenu(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11405,onDestroy,"    void onDestroy(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11406,onCreateView,"    View onCreateView(final CallFun3<View, LayoutInflater, ViewGroup, Bundle> superCall,
            @NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {"
11407,onCreateOptionsMenu,"    void onCreateOptionsMenu(final CallVoid2<Menu, MenuInflater> superCall, Menu menu, MenuInflater inflater) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11408,onCreateContextMenu,"    void onCreateContextMenu(final CallVoid3<ContextMenu, View, ContextMenuInfo> superCall, ContextMenu menu, View v,
            ContextMenuInfo menuInfo) {
        synchronized (mSuperListeners) {"
11409,onCreateAnimator,"    Animator onCreateAnimator(final CallFun3<Animator, Integer, Boolean, Integer> superCall, int transit,
            boolean enter, int nextAnim) {
        synchronized (mSuperListeners) {"
11410,onCreateAnimation,"    Animation onCreateAnimation(final CallFun3<Animation, Integer, Boolean, Integer> superCall, int transit,
            boolean enter, int nextAnim) {
        synchronized (mSuperListeners) {"
11411,onCreate,"    void onCreate(final CallVoid1<Bundle> superCall, @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11412,onContextItemSelected,"    boolean onContextItemSelected(final CallFun1<Boolean, MenuItem> superCall, MenuItem item) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11413,onConfigurationChanged,"    void onConfigurationChanged(final CallVoid1<Configuration> superCall, Configuration newConfig) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11414,onAttachFragment,"    void onAttachFragment(final CallVoid1<Fragment> superCall, Fragment childFragment) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11415,onAttach,"    void onAttach(final CallVoid1<Activity> superCall, Activity activity) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11416,onAttach,"    void onAttach(final CallVoid1<Context> superCall, Context context) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11417,onActivityResult,"    void onActivityResult(final CallVoid3<Integer, Integer, Intent> superCall, int requestCode, int resultCode,
            Intent data) {
        synchronized (mSuperListeners) {"
11418,onActivityCreated,"    void onActivityCreated(final CallVoid1<Bundle> superCall, @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11420,getViewLifecycleOwnerLiveData,"    LiveData<android.arch.lifecycle.LifecycleOwner> getViewLifecycleOwnerLiveData(
            final CallFun0<LiveData<android.arch.lifecycle.LifecycleOwner>> superCall) {
        synchronized (mSuperListeners) {"
11421,getViewLifecycleOwner,"    android.arch.lifecycle.LifecycleOwner getViewLifecycleOwner(
            final CallFun0<android.arch.lifecycle.LifecycleOwner> superCall) {
        synchronized (mSuperListeners) {"
11430,getLayoutInflater,"    LayoutInflater getLayoutInflater(final CallFun1<LayoutInflater, Bundle> superCall,
            @Nullable Bundle savedFragmentState) {
        synchronized (mSuperListeners) {"
11436,dump,"    void dump(final CallVoid4<String, FileDescriptor, PrintWriter, String[]> superCall, String prefix,
            FileDescriptor fd, PrintWriter writer, String[] args) {
        synchronized (mSuperListeners) {"
11437,unregisterForContextMenu,"    public void unregisterForContextMenu(View view) {
        verifyMethodCalledFromDelegate(""unregisterForContextMenu(View)"");
        ((CallVoid1<View>) mSuperListeners.pop()).call(view);
    }"
11438,toString,"    public String toString() {
        verifyMethodCalledFromDelegate(""toString()"");
        return ((CallFun0<String>) mSuperListeners.pop()).call();
    }"
11439,startPostponedEnterTransition,"    public void startPostponedEnterTransition() {
        verifyMethodCalledFromDelegate(""startPostponedEnterTransition()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
11440,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, Bundle options) throws SendIntentException {
        verifyMethodCalledFromDelegate(
                ""startIntentSenderForResult(IntentSender, Integer, Intent, Integer, Integer, Integer, Bundle)"");"
11441,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startActivityForResult(Intent, Integer, Bundle)"");
        ((CallVoid3<Intent, Integer, Bundle>) mSuperListeners.pop()).call(intent, requestCode, options);
    }"
11442,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode) {
        verifyMethodCalledFromDelegate(""startActivityForResult(Intent, Integer)"");
        ((CallVoid2<Intent, Integer>) mSuperListeners.pop()).call(intent, requestCode);
    }"
11443,startActivity,"    public void startActivity(Intent intent, @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startActivity(Intent, Bundle)"");
        ((CallVoid2<Intent, Bundle>) mSuperListeners.pop()).call(intent, options);
    }"
11444,startActivity,"    public void startActivity(Intent intent) {
        verifyMethodCalledFromDelegate(""startActivity(Intent)"");
        ((CallVoid1<Intent>) mSuperListeners.pop()).call(intent);
    }"
11445,shouldShowRequestPermissionRationale,"    public boolean shouldShowRequestPermissionRationale(@NonNull String permission) {
        verifyMethodCalledFromDelegate(""shouldShowRequestPermissionRationale(String)"");
        return ((CallFun1<Boolean, String>) mSuperListeners.pop()).call(permission);
    }"
11454,registerForContextMenu,"    public void registerForContextMenu(View view) {
        verifyMethodCalledFromDelegate(""registerForContextMenu(View)"");
        ((CallVoid1<View>) mSuperListeners.pop()).call(view);
    }"
11455,postponeEnterTransition,"    public void postponeEnterTransition() {
        verifyMethodCalledFromDelegate(""postponeEnterTransition()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
11456,onViewStateRestored,"    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onViewStateRestored(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(savedInstanceState);
    }"
11457,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onViewCreated(View, Bundle)"");
        ((CallVoid2<View, Bundle>) mSuperListeners.pop()).call(view, savedInstanceState);
    }"
11458,onStop,"    public void onStop() {
        verifyMethodCalledFromDelegate(""onStop()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
11459,onStart,"    public void onStart() {
        verifyMethodCalledFromDelegate(""onStart()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
11460,onSaveInstanceState,"    public void onSaveInstanceState(@NonNull Bundle outState) {
        verifyMethodCalledFromDelegate(""onSaveInstanceState(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(outState);
    }"
11461,onResume,"    public void onResume() {
        verifyMethodCalledFromDelegate(""onResume()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
11462,onRequestPermissionsResult,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults) {
        verifyMethodCalledFromDelegate(""onRequestPermissionsResult(Integer, String[], int[])"");
        ((CallVoid3<Integer, String[], int[]>) mSuperListeners.pop()).call(requestCode, permissions, grantResults);"
11463,onPrepareOptionsMenu,"    public void onPrepareOptionsMenu(Menu menu) {
        verifyMethodCalledFromDelegate(""onPrepareOptionsMenu(Menu)"");
        ((CallVoid1<Menu>) mSuperListeners.pop()).call(menu);
    }"
11464,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode) {
        verifyMethodCalledFromDelegate(""onPictureInPictureModeChanged(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(isInPictureInPictureMode);
    }"
11465,onPause,"    public void onPause() {
        verifyMethodCalledFromDelegate(""onPause()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
11466,onOptionsMenuClosed,"    public void onOptionsMenuClosed(Menu menu) {
        verifyMethodCalledFromDelegate(""onOptionsMenuClosed(Menu)"");
        ((CallVoid1<Menu>) mSuperListeners.pop()).call(menu);
    }"
11467,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        verifyMethodCalledFromDelegate(""onOptionsItemSelected(MenuItem)"");
        return ((CallFun1<Boolean, MenuItem>) mSuperListeners.pop()).call(item);
    }"
11468,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
        verifyMethodCalledFromDelegate(""onMultiWindowModeChanged(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(isInMultiWindowMode);
    }"
11469,onLowMemory,"    public void onLowMemory() {
        verifyMethodCalledFromDelegate(""onLowMemory()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
11470,onInflate,"    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onInflate(Activity, AttributeSet, Bundle)"");
        ((CallVoid3<Activity, AttributeSet, Bundle>) mSuperListeners.pop()).call(activity, attrs, savedInstanceState);
    }"
11471,onInflate,"    public void onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onInflate(Context, AttributeSet, Bundle)"");
        ((CallVoid3<Context, AttributeSet, Bundle>) mSuperListeners.pop()).call(context, attrs, savedInstanceState);
    }"
11472,onHiddenChanged,"    public void onHiddenChanged(boolean hidden) {
        verifyMethodCalledFromDelegate(""onHiddenChanged(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(hidden);
    }"
11473,onGetLayoutInflater,"    public LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onGetLayoutInflater(Bundle)"");
        return ((CallFun1<LayoutInflater, Bundle>) mSuperListeners.pop()).call(savedInstanceState);
    }"
11474,onDetach,"    public void onDetach() {
        verifyMethodCalledFromDelegate(""onDetach()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
11475,onDestroyView,"    public void onDestroyView() {
        verifyMethodCalledFromDelegate(""onDestroyView()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
11476,onDestroyOptionsMenu,"    public void onDestroyOptionsMenu() {
        verifyMethodCalledFromDelegate(""onDestroyOptionsMenu()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
11477,onDestroy,"    public void onDestroy() {
        verifyMethodCalledFromDelegate(""onDestroy()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
11478,onCreateView,"    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onCreateView(LayoutInflater, ViewGroup, Bundle)"");
        return ((CallFun3<View, LayoutInflater, ViewGroup, Bundle>) mSuperListeners.pop())"
11479,onCreateOptionsMenu,"    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        verifyMethodCalledFromDelegate(""onCreateOptionsMenu(Menu, MenuInflater)"");
        ((CallVoid2<Menu, MenuInflater>) mSuperListeners.pop()).call(menu, inflater);
    }"
11480,onCreateContextMenu,"    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        verifyMethodCalledFromDelegate(""onCreateContextMenu(ContextMenu, View, ContextMenuInfo)"");
        ((CallVoid3<ContextMenu, View, ContextMenuInfo>) mSuperListeners.pop()).call(menu, v, menuInfo);
    }"
11481,onCreateAnimator,"    public Animator onCreateAnimator(int transit, boolean enter, int nextAnim) {
        verifyMethodCalledFromDelegate(""onCreateAnimator(Integer, Boolean, Integer)"");
        return ((CallFun3<Animator, Integer, Boolean, Integer>) mSuperListeners.pop()).call(transit, enter, nextAnim);
    }"
11482,onCreateAnimation,"    public Animation onCreateAnimation(int transit, boolean enter, int nextAnim) {
        verifyMethodCalledFromDelegate(""onCreateAnimation(Integer, Boolean, Integer)"");
        return ((CallFun3<Animation, Integer, Boolean, Integer>) mSuperListeners.pop())
                .call(transit, enter, nextAnim);"
11483,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onCreate(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(savedInstanceState);
    }"
11484,onContextItemSelected,"    public boolean onContextItemSelected(MenuItem item) {
        verifyMethodCalledFromDelegate(""onContextItemSelected(MenuItem)"");
        return ((CallFun1<Boolean, MenuItem>) mSuperListeners.pop()).call(item);
    }"
11485,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        verifyMethodCalledFromDelegate(""onConfigurationChanged(Configuration)"");
        ((CallVoid1<Configuration>) mSuperListeners.pop()).call(newConfig);
    }"
11486,onAttachFragment,"    public void onAttachFragment(Fragment childFragment) {
        verifyMethodCalledFromDelegate(""onAttachFragment(Fragment)"");
        ((CallVoid1<Fragment>) mSuperListeners.pop()).call(childFragment);
    }"
11487,onAttach,"    public void onAttach(Activity activity) {
        verifyMethodCalledFromDelegate(""onAttach(Activity)"");
        ((CallVoid1<Activity>) mSuperListeners.pop()).call(activity);
    }"
11488,onAttach,"    public void onAttach(Context context) {
        verifyMethodCalledFromDelegate(""onAttach(Context)"");
        ((CallVoid1<Context>) mSuperListeners.pop()).call(context);
    }"
11489,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        verifyMethodCalledFromDelegate(""onActivityResult(Integer, Integer, Intent)"");
        ((CallVoid3<Integer, Integer, Intent>) mSuperListeners.pop()).call(requestCode, resultCode, data);
    }"
11490,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onActivityCreated(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(savedInstanceState);
    }"
11518,dump,"    public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) {
        verifyMethodCalledFromDelegate(""dump(String, FileDescriptor, PrintWriter, String[])"");
        ((CallVoid4<String, FileDescriptor, PrintWriter, String[]>) mSuperListeners.pop())
                .call(prefix, fd, writer, args);"
11519,call,"            public void call(final View view) {
                if (iterator.hasPrevious()) {
                    iterator.previous().unregisterForContextMenu(this, view);"
11520,unregisterForContextMenu,"    public void unregisterForContextMenu(View view) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_unregisterForContextMenu(view);
            return;
        }
"
11521,call,"            public String call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().toString(this);"
11522,toString,"    public String toString() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_toString();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
11523,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().startPostponedEnterTransition(this);"
11524,startPostponedEnterTransition,"    public void startPostponedEnterTransition() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startPostponedEnterTransition();
            return;
        }
"
11525,call,"            public void call(final IntentSender intent, final Integer requestCode, final Intent fillInIntent,
                    final Integer flagsMask, final Integer flagsValues, final Integer extraFlags,
                    final Bundle options) {"
11527,call,"            public void call(final Intent intent, final Integer requestCode, final Bundle options) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivityForResult(this, intent, requestCode, options);"
11528,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityForResult(intent, requestCode, options);
            return;
        }
"
11529,call,"            public void call(final Intent intent, final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivityForResult(this, intent, requestCode);"
11530,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityForResult(intent, requestCode);
            return;
        }
"
11531,call,"            public void call(final Intent intent, final Bundle options) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivity(this, intent, options);"
11532,startActivity,"    public void startActivity(Intent intent, @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivity(intent, options);
            return;
        }
"
11533,call,"            public void call(final Intent intent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivity(this, intent);"
11534,startActivity,"    public void startActivity(Intent intent) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivity(intent);
            return;
        }
"
11535,call,"            public Boolean call(final String permission) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().shouldShowRequestPermissionRationale(this, permission);"
11536,shouldShowRequestPermissionRationale,"    public boolean shouldShowRequestPermissionRationale(@NonNull String permission) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_shouldShowRequestPermissionRationale(permission);
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
11537,call,"            public void call(final Fragment fragment, final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setTargetFragment(this, fragment, requestCode);"
11539,call,"            public void call(final Boolean retain) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setRetainInstance(this, retain);"
11541,call,"            public void call(final Boolean menuVisible) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setMenuVisibility(this, menuVisible);"
11543,call,"            public void call(final Fragment.SavedState state) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setInitialSavedState(this, state);"
11545,call,"            public void call(final Boolean hasMenu) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setHasOptionsMenu(this, hasMenu);"
11547,call,"            public void call(final SharedElementCallback callback) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setExitSharedElementCallback(this, callback);"
11549,call,"            public void call(final SharedElementCallback callback) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setEnterSharedElementCallback(this, callback);"
11551,call,"            public void call(final Bundle args) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setArguments(this, args);"
11553,call,"            public void call(final View view) {
                if (iterator.hasPrevious()) {
                    iterator.previous().registerForContextMenu(this, view);"
11554,registerForContextMenu,"    public void registerForContextMenu(View view) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_registerForContextMenu(view);
            return;
        }
"
11555,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().postponeEnterTransition(this);"
11556,postponeEnterTransition,"    public void postponeEnterTransition() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_postponeEnterTransition();
            return;
        }
"
11557,call,"            public void call(final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onViewStateRestored(this, savedInstanceState);"
11558,onViewStateRestored,"    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onViewStateRestored(savedInstanceState);
            return;
        }
"
11559,call,"            public void call(final View view, final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onViewCreated(this, view, savedInstanceState);"
11560,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onViewCreated(view, savedInstanceState);
            return;
        }
"
11561,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onStop(this);"
11562,onStop,"    public void onStop() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onStop();
            return;
        }
"
11563,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onStart(this);"
11564,onStart,"    public void onStart() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onStart();
            return;
        }
"
11565,call,"            public void call(final Bundle outState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onSaveInstanceState(this, outState);"
11566,onSaveInstanceState,"    public void onSaveInstanceState(@NonNull Bundle outState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onSaveInstanceState(outState);
            return;
        }
"
11567,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onResume(this);"
11568,onResume,"    public void onResume() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onResume();
            return;
        }
"
11569,call,"            public void call(final Integer requestCode, final String[] permissions, final int[] grantResults) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onRequestPermissionsResult(this, requestCode, permissions, grantResults);"
11570,onRequestPermissionsResult,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onRequestPermissionsResult(requestCode, permissions, grantResults);
            return;
        }"
11571,call,"            public void call(final Menu menu) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPrepareOptionsMenu(this, menu);"
11572,onPrepareOptionsMenu,"    public void onPrepareOptionsMenu(Menu menu) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPrepareOptionsMenu(menu);
            return;
        }
"
11573,call,"            public void call(final Boolean isInPictureInPictureMode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPictureInPictureModeChanged(this, isInPictureInPictureMode);"
11574,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPictureInPictureModeChanged(isInPictureInPictureMode);
            return;
        }
"
11575,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPause(this);"
11576,onPause,"    public void onPause() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPause();
            return;
        }
"
11577,call,"            public void call(final Menu menu) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onOptionsMenuClosed(this, menu);"
11578,onOptionsMenuClosed,"    public void onOptionsMenuClosed(Menu menu) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onOptionsMenuClosed(menu);
            return;
        }
"
11579,call,"            public Boolean call(final MenuItem item) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onOptionsItemSelected(this, item);"
11580,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onOptionsItemSelected(item);
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
11581,call,"            public void call(final Boolean isInMultiWindowMode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onMultiWindowModeChanged(this, isInMultiWindowMode);"
11582,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onMultiWindowModeChanged(isInMultiWindowMode);
            return;
        }
"
11583,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onLowMemory(this);"
11584,onLowMemory,"    public void onLowMemory() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onLowMemory();
            return;
        }
"
11585,call,"            public void call(final Activity activity, final AttributeSet attrs, final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onInflate(this, activity, attrs, savedInstanceState);"
11586,onInflate,"    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onInflate(activity, attrs, savedInstanceState);
            return;
        }
"
11587,call,"            public void call(final Context context, final AttributeSet attrs, final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onInflate(this, context, attrs, savedInstanceState);"
11588,onInflate,"    public void onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onInflate(context, attrs, savedInstanceState);
            return;
        }
"
11589,call,"            public void call(final Boolean hidden) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onHiddenChanged(this, hidden);"
11590,onHiddenChanged,"    public void onHiddenChanged(boolean hidden) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onHiddenChanged(hidden);
            return;
        }
"
11591,call,"            public LayoutInflater call(final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onGetLayoutInflater(this, savedInstanceState);"
11592,onGetLayoutInflater,"    public LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onGetLayoutInflater(savedInstanceState);
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
11593,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onDetach(this);"
11594,onDetach,"    public void onDetach() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onDetach();
            return;
        }
"
11595,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onDestroyView(this);"
11596,onDestroyView,"    public void onDestroyView() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onDestroyView();
            return;
        }
"
11597,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onDestroyOptionsMenu(this);"
11598,onDestroyOptionsMenu,"    public void onDestroyOptionsMenu() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onDestroyOptionsMenu();
            return;
        }
"
11599,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onDestroy(this);"
11600,onDestroy,"    public void onDestroy() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onDestroy();
            return;
        }
"
11601,call,"            public View call(final LayoutInflater inflater, final ViewGroup container,
                    final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {"
11602,onCreateView,"    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateView(inflater, container, savedInstanceState);
        }
"
11603,call,"            public void call(final Menu menu, final MenuInflater inflater) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onCreateOptionsMenu(this, menu, inflater);"
11604,onCreateOptionsMenu,"    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onCreateOptionsMenu(menu, inflater);
            return;
        }
"
11605,call,"            public void call(final ContextMenu menu, final View v, final ContextMenuInfo menuInfo) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onCreateContextMenu(this, menu, v, menuInfo);"
11606,onCreateContextMenu,"    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onCreateContextMenu(menu, v, menuInfo);
            return;
        }
"
11607,call,"            public Animator call(final Integer transit, final Boolean enter, final Integer nextAnim) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateAnimator(this, transit, enter, nextAnim);"
11608,onCreateAnimator,"    public Animator onCreateAnimator(int transit, boolean enter, int nextAnim) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateAnimator(transit, enter, nextAnim);
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
11609,call,"            public Animation call(final Integer transit, final Boolean enter, final Integer nextAnim) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateAnimation(this, transit, enter, nextAnim);"
11610,onCreateAnimation,"    public Animation onCreateAnimation(int transit, boolean enter, int nextAnim) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateAnimation(transit, enter, nextAnim);
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
11611,call,"            public void call(final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onCreate(this, savedInstanceState);"
11612,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onCreate(savedInstanceState);
            return;
        }
"
11613,call,"            public Boolean call(final MenuItem item) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onContextItemSelected(this, item);"
11614,onContextItemSelected,"    public boolean onContextItemSelected(MenuItem item) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onContextItemSelected(item);
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
11615,call,"            public void call(final Configuration newConfig) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onConfigurationChanged(this, newConfig);"
11616,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onConfigurationChanged(newConfig);
            return;
        }
"
11617,call,"            public void call(final Fragment childFragment) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onAttachFragment(this, childFragment);"
11618,onAttachFragment,"    public void onAttachFragment(Fragment childFragment) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onAttachFragment(childFragment);
            return;
        }
"
11619,call,"            public void call(final Activity activity) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onAttach(this, activity);"
11620,onAttach,"    public void onAttach(Activity activity) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onAttach(activity);
            return;
        }
"
11621,call,"            public void call(final Context context) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onAttach(this, context);"
11622,onAttach,"    public void onAttach(Context context) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onAttach(context);
            return;
        }
"
11623,call,"            public void call(final Integer requestCode, final Integer resultCode, final Intent data) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onActivityResult(this, requestCode, resultCode, data);"
11624,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onActivityResult(requestCode, resultCode, data);
            return;
        }
"
11625,call,"            public void call(final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onActivityCreated(this, savedInstanceState);"
11626,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onActivityCreated(savedInstanceState);
            return;
        }
"
11627,call,"            public ViewModelStore call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getViewModelStore(this);"
11629,call,"            public LiveData<android.arch.lifecycle.LifecycleOwner> call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getViewLifecycleOwnerLiveData(this);"
11631,call,"            public android.arch.lifecycle.LifecycleOwner call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getViewLifecycleOwner(this);"
11633,call,"            public View call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getView(this);"
11635,call,"            public void call(final Boolean isVisibleToUser) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setUserVisibleHint(this, isVisibleToUser);"
11637,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getUserVisibleHint(this);"
11639,call,"            public void call(final Object transition) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setSharedElementReturnTransition(this, transition);"
11641,call,"            public Object call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSharedElementReturnTransition(this);"
11643,call,"            public void call(final Object transition) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setSharedElementEnterTransition(this, transition);"
11645,call,"            public Object call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSharedElementEnterTransition(this);"
11647,call,"            public void call(final Object transition) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setReturnTransition(this, transition);"
11649,call,"            public Object call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getReturnTransition(this);"
11651,call,"            public void call(final Object transition) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setReenterTransition(this, transition);"
11653,call,"            public Object call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getReenterTransition(this);"
11655,call,"            public LoaderManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getLoaderManager(this);"
11657,call,"            public android.arch.lifecycle.Lifecycle call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getLifecycle(this);"
11659,call,"            public LayoutInflater call(final Bundle savedFragmentState) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getLayoutInflater(this, savedFragmentState);"
11661,call,"            public void call(final Object transition) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setExitTransition(this, transition);"
11663,call,"            public Object call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getExitTransition(this);"
11665,call,"            public void call(final Object transition) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setEnterTransition(this, transition);"
11667,call,"            public Object call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getEnterTransition(this);"
11669,call,"            public Context call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getContext(this);"
11671,call,"            public void call(final Boolean allow) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setAllowReturnTransitionOverlap(this, allow);"
11673,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getAllowReturnTransitionOverlap(this);"
11675,call,"            public void call(final Boolean allow) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setAllowEnterTransitionOverlap(this, allow);"
11677,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getAllowEnterTransitionOverlap(this);"
11679,call,"            public void call(final String prefix, final FileDescriptor fd, final PrintWriter writer,
                    final String[] args) {
                if (iterator.hasPrevious()) {"
11680,dump,"    public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_dump(prefix, fd, writer, args);
            return;
        }
"
11681,showNow,"    void showNow(final CallVoid2<FragmentManager, String> superCall, FragmentManager manager, String tag) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11682,show,"    int show(final CallFun2<Integer, FragmentTransaction, String> superCall, FragmentTransaction transaction,
            String tag) {
        synchronized (mSuperListeners) {"
11683,show,"    void show(final CallVoid2<FragmentManager, String> superCall, FragmentManager manager, String tag) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11684,setupDialog,"    void setupDialog(final CallVoid2<Dialog, Integer> superCall, Dialog dialog, int style) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11689,onDismiss,"    void onDismiss(final CallVoid1<DialogInterface> superCall, DialogInterface dialog) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11690,onCreateDialog,"    Dialog onCreateDialog(final CallFun1<Dialog, Bundle> superCall, @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11691,onCancel,"    void onCancel(final CallVoid1<DialogInterface> superCall, DialogInterface dialog) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11692,isCancelable,"    boolean isCancelable(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11696,dismissAllowingStateLoss,"    void dismissAllowingStateLoss(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11697,dismiss,"    void dismiss(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
11698,showNow,"    public void showNow(FragmentManager manager, String tag) {
        verifyMethodCalledFromDelegate(""showNow(FragmentManager, String)"");
        ((CallVoid2<FragmentManager, String>) mSuperListeners.pop()).call(manager, tag);
    }"
11699,show,"    public int show(FragmentTransaction transaction, String tag) {
        verifyMethodCalledFromDelegate(""show(FragmentTransaction, String)"");
        return ((CallFun2<Integer, FragmentTransaction, String>) mSuperListeners.pop()).call(transaction, tag);
    }"
11700,show,"    public void show(FragmentManager manager, String tag) {
        verifyMethodCalledFromDelegate(""show(FragmentManager, String)"");
        ((CallVoid2<FragmentManager, String>) mSuperListeners.pop()).call(manager, tag);
    }"
11701,setupDialog,"    public void setupDialog(Dialog dialog, int style) {
        verifyMethodCalledFromDelegate(""setupDialog(Dialog, Integer)"");
        ((CallVoid2<Dialog, Integer>) mSuperListeners.pop()).call(dialog, style);
    }"
11704,onDismiss,"    public void onDismiss(DialogInterface dialog) {
        verifyMethodCalledFromDelegate(""onDismiss(DialogInterface)"");
        ((CallVoid1<DialogInterface>) mSuperListeners.pop()).call(dialog);
    }"
11705,onCreateDialog,"    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onCreateDialog(Bundle)"");
        return ((CallFun1<Dialog, Bundle>) mSuperListeners.pop()).call(savedInstanceState);
    }"
11706,onCancel,"    public void onCancel(DialogInterface dialog) {
        verifyMethodCalledFromDelegate(""onCancel(DialogInterface)"");
        ((CallVoid1<DialogInterface>) mSuperListeners.pop()).call(dialog);
    }"
11708,isCancelable,"    public boolean isCancelable() {
        verifyMethodCalledFromDelegate(""isCancelable()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
11714,dismissAllowingStateLoss,"    public void dismissAllowingStateLoss() {
        verifyMethodCalledFromDelegate(""dismissAllowingStateLoss()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
11715,dismiss,"    public void dismiss() {
        verifyMethodCalledFromDelegate(""dismiss()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
11732,unregisterForContextMenu,"    public void unregisterForContextMenu(View view) {
        mFragmentDelegate.unregisterForContextMenu(view);
    }"
11733,toString,"    public String toString() {
        return mFragmentDelegate.toString();
    }"
11734,startPostponedEnterTransition,"    public void startPostponedEnterTransition() {
        mFragmentDelegate.startPostponedEnterTransition();
    }"
11735,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, Bundle options) throws SendIntentException {
        mFragmentDelegate"
11736,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) {
        mFragmentDelegate.startActivityForResult(intent, requestCode, options);
    }"
11737,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode) {
        mFragmentDelegate.startActivityForResult(intent, requestCode);
    }"
11738,startActivity,"    public void startActivity(Intent intent, @Nullable Bundle options) {
        mFragmentDelegate.startActivity(intent, options);
    }"
11739,startActivity,"    public void startActivity(Intent intent) {
        mFragmentDelegate.startActivity(intent);
    }"
11740,call,"            public void call(final FragmentManager manager, final String tag) {
                if (iterator.hasPrevious()) {
                    iterator.previous().showNow(this, manager, tag);"
11741,showNow,"    public void showNow(FragmentManager manager, String tag) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_showNow(manager, tag);
            return;
        }
"
11742,call,"            public Integer call(final FragmentTransaction transaction, final String tag) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().show(this, transaction, tag);"
11743,show,"    public int show(FragmentTransaction transaction, String tag) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_show(transaction, tag);
        }

        final ListIterator<DialogFragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
11744,call,"            public void call(final FragmentManager manager, final String tag) {
                if (iterator.hasPrevious()) {
                    iterator.previous().show(this, manager, tag);"
11745,show,"    public void show(FragmentManager manager, String tag) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_show(manager, tag);
            return;
        }
"
11746,shouldShowRequestPermissionRationale,"    public boolean shouldShowRequestPermissionRationale(@NonNull String permission) {
        return mFragmentDelegate.shouldShowRequestPermissionRationale(permission);
    }"
11747,call,"            public void call(final Dialog dialog, final Integer style) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setupDialog(this, dialog, style);"
11748,setupDialog,"    public void setupDialog(Dialog dialog, int style) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setupDialog(dialog, style);
            return;
        }
"
11750,call,"            public void call(final Integer style, final Integer theme) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setStyle(this, style, theme);"
11759,registerForContextMenu,"    public void registerForContextMenu(View view) {
        mFragmentDelegate.registerForContextMenu(view);
    }"
11760,postponeEnterTransition,"    public void postponeEnterTransition() {
        mFragmentDelegate.postponeEnterTransition();
    }"
11761,onViewStateRestored,"    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {
        mFragmentDelegate.onViewStateRestored(savedInstanceState);
    }"
11762,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        mFragmentDelegate.onViewCreated(view, savedInstanceState);
    }"
11763,onStop,"    public void onStop() {
        mFragmentDelegate.onStop();
    }"
11764,onStart,"    public void onStart() {
        mFragmentDelegate.onStart();
    }"
11765,onSaveInstanceState,"    public void onSaveInstanceState(@NonNull Bundle outState) {
        mFragmentDelegate.onSaveInstanceState(outState);
    }"
11766,onResume,"    public void onResume() {
        mFragmentDelegate.onResume();
    }"
11767,onRequestPermissionsResult,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults) {
        mFragmentDelegate.onRequestPermissionsResult(requestCode, permissions, grantResults);"
11768,onPrepareOptionsMenu,"    public void onPrepareOptionsMenu(Menu menu) {
        mFragmentDelegate.onPrepareOptionsMenu(menu);
    }"
11769,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode) {
        mFragmentDelegate.onPictureInPictureModeChanged(isInPictureInPictureMode);
    }"
11770,onPause,"    public void onPause() {
        mFragmentDelegate.onPause();
    }"
11771,onOptionsMenuClosed,"    public void onOptionsMenuClosed(Menu menu) {
        mFragmentDelegate.onOptionsMenuClosed(menu);
    }"
11772,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        return mFragmentDelegate.onOptionsItemSelected(item);
    }"
11773,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
        mFragmentDelegate.onMultiWindowModeChanged(isInMultiWindowMode);
    }"
11774,onLowMemory,"    public void onLowMemory() {
        mFragmentDelegate.onLowMemory();
    }"
11775,onInflate,"    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
        mFragmentDelegate.onInflate(activity, attrs, savedInstanceState);
    }"
11776,onInflate,"    public void onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState) {
        mFragmentDelegate.onInflate(context, attrs, savedInstanceState);
    }"
11777,onHiddenChanged,"    public void onHiddenChanged(boolean hidden) {
        mFragmentDelegate.onHiddenChanged(hidden);
    }"
11778,onGetLayoutInflater,"    public LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState) {
        return mFragmentDelegate.onGetLayoutInflater(savedInstanceState);
    }"
11779,call,"            public void call(final DialogInterface dialog) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onDismiss(this, dialog);"
11780,onDismiss,"    public void onDismiss(DialogInterface dialog) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onDismiss(dialog);
            return;
        }
"
11781,onDetach,"    public void onDetach() {
        mFragmentDelegate.onDetach();
    }"
11782,onDestroyView,"    public void onDestroyView() {
        mFragmentDelegate.onDestroyView();
    }"
11783,onDestroyOptionsMenu,"    public void onDestroyOptionsMenu() {
        mFragmentDelegate.onDestroyOptionsMenu();
    }"
11784,onDestroy,"    public void onDestroy() {
        mFragmentDelegate.onDestroy();
    }"
11785,onCreateView,"    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState) {
        return mFragmentDelegate.onCreateView(inflater, container, savedInstanceState);"
11786,onCreateOptionsMenu,"    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        mFragmentDelegate.onCreateOptionsMenu(menu, inflater);
    }"
11787,call,"            public Dialog call(final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateDialog(this, savedInstanceState);"
11788,onCreateDialog,"    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateDialog(savedInstanceState);
        }

        final ListIterator<DialogFragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
11789,onCreateContextMenu,"    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        mFragmentDelegate.onCreateContextMenu(menu, v, menuInfo);
    }"
11790,onCreateAnimator,"    public Animator onCreateAnimator(int transit, boolean enter, int nextAnim) {
        return mFragmentDelegate.onCreateAnimator(transit, enter, nextAnim);
    }"
11791,onCreateAnimation,"    public Animation onCreateAnimation(int transit, boolean enter, int nextAnim) {
        return mFragmentDelegate.onCreateAnimation(transit, enter, nextAnim);
    }"
11792,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState) {
        mFragmentDelegate.onCreate(savedInstanceState);
    }"
11793,onContextItemSelected,"    public boolean onContextItemSelected(MenuItem item) {
        return mFragmentDelegate.onContextItemSelected(item);
    }"
11794,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        mFragmentDelegate.onConfigurationChanged(newConfig);
    }"
11795,call,"            public void call(final DialogInterface dialog) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onCancel(this, dialog);"
11796,onCancel,"    public void onCancel(DialogInterface dialog) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onCancel(dialog);
            return;
        }
"
11797,onAttachFragment,"    public void onAttachFragment(Fragment childFragment) {
        mFragmentDelegate.onAttachFragment(childFragment);
    }"
11798,onAttach,"    public void onAttach(Activity activity) {
        mFragmentDelegate.onAttach(activity);
    }"
11799,onAttach,"    public void onAttach(Context context) {
        mFragmentDelegate.onAttach(context);
    }"
11800,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        mFragmentDelegate.onActivityResult(requestCode, resultCode, data);
    }"
11801,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        mFragmentDelegate.onActivityCreated(savedInstanceState);
    }"
11802,call,"            public void call(final Boolean cancelable) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setCancelable(this, cancelable);"
11804,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isCancelable(this);"
11805,isCancelable,"    public boolean isCancelable() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isCancelable();
        }

        final ListIterator<DialogFragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
11812,call,"            public Integer call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getTheme(this);"
11814,call,"            public void call(final Boolean showsDialog) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setShowsDialog(this, showsDialog);"
11816,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getShowsDialog(this);"
11833,call,"            public Dialog call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getDialog(this);"
11840,dump,"    public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) {
        mFragmentDelegate.dump(prefix, fd, writer, args);
    }"
11841,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().dismissAllowingStateLoss(this);"
11842,dismissAllowingStateLoss,"    public void dismissAllowingStateLoss() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_dismissAllowingStateLoss();
            return;
        }
"
11843,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().dismiss(this);"
11844,dismiss,"    public void dismiss() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_dismiss();
            return;
        }
"
11845,remove,"            public void remove() {
                removable.remove();
                superRemovable.remove();
            }"
11846,addPlugin,"    public Removable addPlugin(final DialogFragmentPlugin plugin) {
        final Removable removable = super.addPlugin(plugin);
        final Removable superRemovable = mFragmentDelegate.addPlugin(plugin);
        return new Removable() {
            @Override"
11847,addPlugin,"    public Removable addPlugin(final FragmentPlugin plugin) {
        return mFragmentDelegate.addPlugin(plugin);
    }"
11850,unregisterForContextMenu,"    public void unregisterForContextMenu(View view) {
        delegate.unregisterForContextMenu(view);
    }"
11851,toString,"    public String toString() {
        return delegate.toString();
    }"
11852,super_unregisterForContextMenu,"    public void super_unregisterForContextMenu(View view) {
        super.unregisterForContextMenu(view);
    }"
11853,super_toString,"    public String super_toString() {
        return super.toString();
    }"
11854,super_startPostponedEnterTransition,"    public void super_startPostponedEnterTransition() {
        super.startPostponedEnterTransition();
    }"
11855,super_startIntentSenderForResult,"    public void super_startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, Bundle options) throws SendIntentException {
        super.startIntentSenderForResult(intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags,"
11856,super_startActivityForResult,"    public void super_startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) {
        super.startActivityForResult(intent, requestCode, options);
    }"
11857,super_startActivityForResult,"    public void super_startActivityForResult(Intent intent, int requestCode) {
        super.startActivityForResult(intent, requestCode);
    }"
11858,super_startActivity,"    public void super_startActivity(Intent intent, @Nullable Bundle options) {
        super.startActivity(intent, options);
    }"
11859,super_startActivity,"    public void super_startActivity(Intent intent) {
        super.startActivity(intent);
    }"
11860,super_shouldShowRequestPermissionRationale,"    public boolean super_shouldShowRequestPermissionRationale(@NonNull String permission) {
        return super.shouldShowRequestPermissionRationale(permission);
    }"
11861,super_setUserVisibleHint,"    public void super_setUserVisibleHint(boolean isVisibleToUser) {
        super.setUserVisibleHint(isVisibleToUser);
    }"
11862,super_setTargetFragment,"    public void super_setTargetFragment(@Nullable Fragment fragment, int requestCode) {
        super.setTargetFragment(fragment, requestCode);
    }"
11863,super_setSharedElementReturnTransition,"    public void super_setSharedElementReturnTransition(@Nullable Object transition) {
        super.setSharedElementReturnTransition(transition);
    }"
11864,super_setSharedElementEnterTransition,"    public void super_setSharedElementEnterTransition(@Nullable Object transition) {
        super.setSharedElementEnterTransition(transition);
    }"
11865,super_setReturnTransition,"    public void super_setReturnTransition(@Nullable Object transition) {
        super.setReturnTransition(transition);
    }"
11866,super_setRetainInstance,"    public void super_setRetainInstance(boolean retain) {
        super.setRetainInstance(retain);
    }"
11867,super_setReenterTransition,"    public void super_setReenterTransition(@Nullable Object transition) {
        super.setReenterTransition(transition);
    }"
11868,super_setMenuVisibility,"    public void super_setMenuVisibility(boolean menuVisible) {
        super.setMenuVisibility(menuVisible);
    }"
11869,super_setInitialSavedState,"    public void super_setInitialSavedState(@Nullable Fragment.SavedState state) {
        super.setInitialSavedState(state);
    }"
11870,super_setHasOptionsMenu,"    public void super_setHasOptionsMenu(boolean hasMenu) {
        super.setHasOptionsMenu(hasMenu);
    }"
11871,super_setExitTransition,"    public void super_setExitTransition(@Nullable Object transition) {
        super.setExitTransition(transition);
    }"
11872,super_setExitSharedElementCallback,"    public void super_setExitSharedElementCallback(SharedElementCallback callback) {
        super.setExitSharedElementCallback(callback);
    }"
11873,super_setEnterTransition,"    public void super_setEnterTransition(@Nullable Object transition) {
        super.setEnterTransition(transition);
    }"
11874,super_setEnterSharedElementCallback,"    public void super_setEnterSharedElementCallback(SharedElementCallback callback) {
        super.setEnterSharedElementCallback(callback);
    }"
11875,super_setArguments,"    public void super_setArguments(@Nullable Bundle args) {
        super.setArguments(args);
    }"
11876,super_setAllowReturnTransitionOverlap,"    public void super_setAllowReturnTransitionOverlap(boolean allow) {
        super.setAllowReturnTransitionOverlap(allow);
    }"
11877,super_setAllowEnterTransitionOverlap,"    public void super_setAllowEnterTransitionOverlap(boolean allow) {
        super.setAllowEnterTransitionOverlap(allow);
    }"
11878,super_registerForContextMenu,"    public void super_registerForContextMenu(View view) {
        super.registerForContextMenu(view);
    }"
11879,super_postponeEnterTransition,"    public void super_postponeEnterTransition() {
        super.postponeEnterTransition();
    }"
11880,super_onViewStateRestored,"    public void super_onViewStateRestored(@Nullable Bundle savedInstanceState) {
        super.onViewStateRestored(savedInstanceState);
    }"
11881,super_onViewCreated,"    public void super_onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
    }"
11882,super_onStop,"    public void super_onStop() {
        super.onStop();
    }"
11883,super_onStart,"    public void super_onStart() {
        super.onStart();
    }"
11884,super_onSaveInstanceState,"    public void super_onSaveInstanceState(@NonNull Bundle outState) {
        super.onSaveInstanceState(outState);
    }"
11885,super_onResume,"    public void super_onResume() {
        super.onResume();
    }"
11886,super_onRequestPermissionsResult,"    public void super_onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);"
11887,super_onPrepareOptionsMenu,"    public void super_onPrepareOptionsMenu(Menu menu) {
        super.onPrepareOptionsMenu(menu);
    }"
11888,super_onPictureInPictureModeChanged,"    public void super_onPictureInPictureModeChanged(boolean isInPictureInPictureMode) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode);
    }"
11889,super_onPause,"    public void super_onPause() {
        super.onPause();
    }"
11890,super_onOptionsMenuClosed,"    public void super_onOptionsMenuClosed(Menu menu) {
        super.onOptionsMenuClosed(menu);
    }"
11891,super_onOptionsItemSelected,"    public boolean super_onOptionsItemSelected(MenuItem item) {
        return super.onOptionsItemSelected(item);
    }"
11892,super_onMultiWindowModeChanged,"    public void super_onMultiWindowModeChanged(boolean isInMultiWindowMode) {
        super.onMultiWindowModeChanged(isInMultiWindowMode);
    }"
11893,super_onLowMemory,"    public void super_onLowMemory() {
        super.onLowMemory();
    }"
11894,super_onInflate,"    public void super_onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
        super.onInflate(activity, attrs, savedInstanceState);
    }"
11895,super_onInflate,"    public void super_onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState) {
        super.onInflate(context, attrs, savedInstanceState);
    }"
11896,super_onHiddenChanged,"    public void super_onHiddenChanged(boolean hidden) {
        super.onHiddenChanged(hidden);
    }"
11897,super_onGetLayoutInflater,"    public LayoutInflater super_onGetLayoutInflater(@Nullable Bundle savedInstanceState) {
        return super.onGetLayoutInflater(savedInstanceState);
    }"
11898,super_onDetach,"    public void super_onDetach() {
        super.onDetach();
    }"
11899,super_onDestroyView,"    public void super_onDestroyView() {
        super.onDestroyView();
    }"
11900,super_onDestroyOptionsMenu,"    public void super_onDestroyOptionsMenu() {
        super.onDestroyOptionsMenu();
    }"
11901,super_onDestroy,"    public void super_onDestroy() {
        super.onDestroy();
    }"
11902,super_onCreateView,"    public View super_onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState) {
        return super.onCreateView(inflater, container, savedInstanceState);"
11903,super_onCreateOptionsMenu,"    public void super_onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        super.onCreateOptionsMenu(menu, inflater);
    }"
11904,super_onCreateContextMenu,"    public void super_onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        super.onCreateContextMenu(menu, v, menuInfo);
    }"
11905,super_onCreateAnimator,"    public Animator super_onCreateAnimator(int transit, boolean enter, int nextAnim) {
        return super.onCreateAnimator(transit, enter, nextAnim);
    }"
11906,super_onCreateAnimation,"    public Animation super_onCreateAnimation(int transit, boolean enter, int nextAnim) {
        return super.onCreateAnimation(transit, enter, nextAnim);
    }"
11907,super_onCreate,"    public void super_onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }"
11908,super_onContextItemSelected,"    public boolean super_onContextItemSelected(MenuItem item) {
        return super.onContextItemSelected(item);
    }"
11909,super_onConfigurationChanged,"    public void super_onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }"
11910,super_onAttachFragment,"    public void super_onAttachFragment(Fragment childFragment) {
        super.onAttachFragment(childFragment);
    }"
11911,super_onAttach,"    public void super_onAttach(Activity activity) {
        super.onAttach(activity);
    }"
11912,super_onAttach,"    public void super_onAttach(Context context) {
        super.onAttach(context);
    }"
11913,super_onActivityResult,"    public void super_onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
    }"
11914,super_onActivityCreated,"    public void super_onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
    }"
11915,super_getViewModelStore,"    public ViewModelStore super_getViewModelStore() {
        return super.getViewModelStore();
    }"
11916,super_getViewLifecycleOwnerLiveData,"    public LiveData<android.arch.lifecycle.LifecycleOwner> super_getViewLifecycleOwnerLiveData() {
        return super.getViewLifecycleOwnerLiveData();
    }"
11917,super_getViewLifecycleOwner,"    public android.arch.lifecycle.LifecycleOwner super_getViewLifecycleOwner() {
        return super.getViewLifecycleOwner();
    }"
11918,super_getView,"    public View super_getView() {
        return super.getView();
    }"
11919,super_getUserVisibleHint,"    public boolean super_getUserVisibleHint() {
        return super.getUserVisibleHint();
    }"
11920,super_getSharedElementReturnTransition,"    public Object super_getSharedElementReturnTransition() {
        return super.getSharedElementReturnTransition();
    }"
11921,super_getSharedElementEnterTransition,"    public Object super_getSharedElementEnterTransition() {
        return super.getSharedElementEnterTransition();
    }"
11922,super_getReturnTransition,"    public Object super_getReturnTransition() {
        return super.getReturnTransition();
    }"
11923,super_getReenterTransition,"    public Object super_getReenterTransition() {
        return super.getReenterTransition();
    }"
11924,super_getLoaderManager,"    public LoaderManager super_getLoaderManager() {
        return super.getLoaderManager();
    }"
11925,super_getLifecycle,"    public android.arch.lifecycle.Lifecycle super_getLifecycle() {
        return super.getLifecycle();
    }"
11926,super_getLayoutInflater,"    public LayoutInflater super_getLayoutInflater(@Nullable Bundle savedFragmentState) {
        return super.getLayoutInflater(savedFragmentState);
    }"
11927,super_getExitTransition,"    public Object super_getExitTransition() {
        return super.getExitTransition();
    }"
11928,super_getEnterTransition,"    public Object super_getEnterTransition() {
        return super.getEnterTransition();
    }"
11929,super_getContext,"    public Context super_getContext() {
        return super.getContext();
    }"
11930,super_getAllowReturnTransitionOverlap,"    public boolean super_getAllowReturnTransitionOverlap() {
        return super.getAllowReturnTransitionOverlap();
    }"
11931,super_getAllowEnterTransitionOverlap,"    public boolean super_getAllowEnterTransitionOverlap() {
        return super.getAllowEnterTransitionOverlap();
    }"
11932,super_dump,"    public void super_dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) {
        super.dump(prefix, fd, writer, args);
    }"
11933,startPostponedEnterTransition,"    public void startPostponedEnterTransition() {
        delegate.startPostponedEnterTransition();
    }"
11934,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, Bundle options) throws SendIntentException {
        try {"
11935,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) {
        delegate.startActivityForResult(intent, requestCode, options);
    }"
11936,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode) {
        delegate.startActivityForResult(intent, requestCode);
    }"
11937,startActivity,"    public void startActivity(Intent intent, @Nullable Bundle options) {
        delegate.startActivity(intent, options);
    }"
11938,startActivity,"    public void startActivity(Intent intent) {
        delegate.startActivity(intent);
    }"
11939,shouldShowRequestPermissionRationale,"    public boolean shouldShowRequestPermissionRationale(@NonNull String permission) {
        return delegate.shouldShowRequestPermissionRationale(permission);
    }"
11948,registerForContextMenu,"    public void registerForContextMenu(View view) {
        delegate.registerForContextMenu(view);
    }"
11949,postponeEnterTransition,"    public void postponeEnterTransition() {
        delegate.postponeEnterTransition();
    }"
11950,onPrepareOptionsMenu,"    public void onPrepareOptionsMenu(Menu menu) {
        delegate.onPrepareOptionsMenu(menu);
    }"
11951,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode) {
        delegate.onPictureInPictureModeChanged(isInPictureInPictureMode);
    }"
11952,onOptionsMenuClosed,"    public void onOptionsMenuClosed(Menu menu) {
        delegate.onOptionsMenuClosed(menu);
    }"
11953,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        return delegate.onOptionsItemSelected(item);
    }"
11954,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
        delegate.onMultiWindowModeChanged(isInMultiWindowMode);
    }"
11955,onLowMemory,"    public void onLowMemory() {
        delegate.onLowMemory();
    }"
11956,onInflate,"    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
        delegate.onInflate(activity, attrs, savedInstanceState);
    }"
11957,onInflate,"    public void onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState) {
        delegate.onInflate(context, attrs, savedInstanceState);
    }"
11958,onHiddenChanged,"    public void onHiddenChanged(boolean hidden) {
        delegate.onHiddenChanged(hidden);
    }"
11959,onGetLayoutInflater,"    public LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState) {
        return delegate.onGetLayoutInflater(savedInstanceState);
    }"
11960,onDestroyOptionsMenu,"    public void onDestroyOptionsMenu() {
        delegate.onDestroyOptionsMenu();
    }"
11961,onCreateOptionsMenu,"    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        delegate.onCreateOptionsMenu(menu, inflater);
    }"
11962,onCreateContextMenu,"    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        delegate.onCreateContextMenu(menu, v, menuInfo);
    }"
11963,onCreateAnimator,"    public Animator onCreateAnimator(int transit, boolean enter, int nextAnim) {
        return delegate.onCreateAnimator(transit, enter, nextAnim);
    }"
11964,onCreateAnimation,"    public Animation onCreateAnimation(int transit, boolean enter, int nextAnim) {
        return delegate.onCreateAnimation(transit, enter, nextAnim);
    }"
11965,onContextItemSelected,"    public boolean onContextItemSelected(MenuItem item) {
        return delegate.onContextItemSelected(item);
    }"
11966,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        delegate.onConfigurationChanged(newConfig);
    }"
11967,onAttachFragment,"    public void onAttachFragment(Fragment childFragment) {
        delegate.onAttachFragment(childFragment);
    }"
11994,dump,"    public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) {
        delegate.dump(prefix, fd, writer, args);
    }"
11995,addPlugin,"    public Removable addPlugin(final FragmentPlugin plugin) {
        return delegate.addPlugin(plugin);
    }"
11996,addFragmentPlugins,"    public List<Removable> addFragmentPlugins(@NonNull final Iterable<? extends FragmentPlugin> plugins) {
        final List<Removable> removables = new ArrayList<>();
        for (final FragmentPlugin plugin : plugins) {
            removables.add(delegate.addPlugin(plugin));
        }"
11997,addFragmentPlugins,"    public List<Removable> addFragmentPlugins(@NonNull final FragmentPlugin... plugins) {
        final List<Removable> removables = new ArrayList<>(plugins.length);
        for (final FragmentPlugin plugin : plugins) {
            removables.add(delegate.addPlugin(plugin));
        }"
11998,onRequestPermissionsResult,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults) {
        delegate.onRequestPermissionsResult(requestCode, permissions, grantResults);"
11999,onDetach,"    public void onDetach() {
        delegate.onDetach();
    }"
12000,onDestroy,"    public void onDestroy() {
        delegate.onDestroy();
    }"
12001,onDestroyView,"    public void onDestroyView() {
        delegate.onDestroyView();
    }"
12002,onSaveInstanceState,"    public void onSaveInstanceState(@NonNull Bundle outState) {
        delegate.onSaveInstanceState(outState);
    }"
12003,onStop,"    public void onStop() {
        delegate.onStop();
    }"
12004,onPause,"    public void onPause() {
        delegate.onPause();
    }"
12005,onResume,"    public void onResume() {
        delegate.onResume();
    }"
12006,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        delegate.onActivityResult(requestCode, resultCode, data);
    }"
12007,onStart,"    public void onStart() {
        delegate.onStart();
    }"
12008,onViewStateRestored,"    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {
        delegate.onViewStateRestored(savedInstanceState);
    }"
12009,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        delegate.onActivityCreated(savedInstanceState);
    }"
12010,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        delegate.onViewCreated(view, savedInstanceState);
    }"
12011,onCreateView,"    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState) {
        return delegate.onCreateView(inflater, container, savedInstanceState);"
12012,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState) {
        delegate.onCreate(savedInstanceState);
    }"
12013,onAttach,"    public void onAttach(Activity activity) {
        delegate.onAttach(activity);
    }"
12014,onAttach,"    public void onAttach(Context context) {
        delegate.onAttach(context);
    }"
12025,super_showNow,"    public void super_showNow(FragmentManager manager, String tag) {
        super.showNow(manager, tag);
    }"
12026,super_show,"    public int super_show(FragmentTransaction transaction, String tag) {
        return super.show(transaction, tag);
    }"
12027,super_show,"    public void super_show(FragmentManager manager, String tag) {
        super.show(manager, tag);
    }"
12029,super_setupDialog,"    public void super_setupDialog(Dialog dialog, int style) {
        super.setupDialog(dialog, style);
    }"
12032,super_setStyle,"    public void super_setStyle(int style, int theme) {
        super.setStyle(style, theme);
    }"
12033,super_setShowsDialog,"    public void super_setShowsDialog(boolean showsDialog) {
        super.setShowsDialog(showsDialog);
    }"
12046,super_setCancelable,"    public void super_setCancelable(boolean cancelable) {
        super.setCancelable(cancelable);
    }"
12070,super_onDismiss,"    public void super_onDismiss(DialogInterface dialog) {
        super.onDismiss(dialog);
    }"
12077,super_onCreateDialog,"    public Dialog super_onCreateDialog(@Nullable Bundle savedInstanceState) {
        return super.onCreateDialog(savedInstanceState);
    }"
12084,super_onCancel,"    public void super_onCancel(DialogInterface dialog) {
        super.onCancel(dialog);
    }"
12090,super_isCancelable,"    public boolean super_isCancelable() {
        return super.isCancelable();
    }"
12096,super_getTheme,"    public int super_getTheme() {
        return super.getTheme();
    }"
12097,super_getShowsDialog,"    public boolean super_getShowsDialog() {
        return super.getShowsDialog();
    }"
12107,super_getDialog,"    public Dialog super_getDialog() {
        return super.getDialog();
    }"
12112,super_dismissAllowingStateLoss,"    public void super_dismissAllowingStateLoss() {
        super.dismissAllowingStateLoss();
    }"
12113,super_dismiss,"    public void super_dismiss() {
        super.dismiss();
    }"
12120,showNow,"    public void showNow(FragmentManager manager, String tag) {
        delegate.showNow(manager, tag);
    }"
12121,show,"    public int show(FragmentTransaction transaction, String tag) {
        return delegate.show(transaction, tag);
    }"
12122,show,"    public void show(FragmentManager manager, String tag) {
        delegate.show(manager, tag);
    }"
12124,setupDialog,"    public void setupDialog(Dialog dialog, int style) {
        delegate.setupDialog(dialog, style);
    }"
12146,onDismiss,"    public void onDismiss(DialogInterface dialog) {
        delegate.onDismiss(dialog);
    }"
12149,onCreateDialog,"    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
        return delegate.onCreateDialog(savedInstanceState);
    }"
12155,onCancel,"    public void onCancel(DialogInterface dialog) {
        delegate.onCancel(dialog);
    }"
12158,isCancelable,"    public boolean isCancelable() {
        return delegate.isCancelable();
    }"
12190,dismissAllowingStateLoss,"    public void dismissAllowingStateLoss() {
        delegate.dismissAllowingStateLoss();
    }"
12191,dismiss,"    public void dismiss() {
        delegate.dismiss();
    }"
12193,addPlugin,"    public Removable addPlugin(final DialogFragmentPlugin plugin) {
        return delegate.addPlugin(plugin);
    }"
12196,addDialogFragmentPlugins,"    public List<Removable> addDialogFragmentPlugins(@NonNull final Iterable<? extends DialogFragmentPlugin> plugins) {
        final List<Removable> removables = new ArrayList<>();
        for (final DialogFragmentPlugin plugin : plugins) {
            removables.add(delegate.addPlugin(plugin));
        }"
12197,addDialogFragmentPlugins,"    public List<Removable> addDialogFragmentPlugins(@NonNull final DialogFragmentPlugin... plugins) {
        final List<Removable> removables = new ArrayList<>(plugins.length);
        for (final DialogFragmentPlugin plugin : plugins) {
            removables.add(delegate.addPlugin(plugin));
        }"
12215,unregisterReceiver,"    public void unregisterReceiver(BroadcastReceiver receiver) {
        delegate.unregisterReceiver(receiver);
    }"
12217,unregisterComponentCallbacks,"    public void unregisterComponentCallbacks(ComponentCallbacks callback) {
        delegate.unregisterComponentCallbacks(callback);
    }"
12218,unbindService,"    public void unbindService(ServiceConnection conn) {
        delegate.unbindService(conn);
    }"
12219,triggerSearch,"    public void triggerSearch(String query, @Nullable Bundle appSearchData) {
        delegate.triggerSearch(query, appSearchData);
    }"
12220,takeKeyEvents,"    public void takeKeyEvents(boolean get) {
        delegate.takeKeyEvents(get);
    }"
12221,supportStartPostponedEnterTransition,"    public void supportStartPostponedEnterTransition() {
        delegate.supportStartPostponedEnterTransition();
    }"
12222,supportShouldUpRecreateTask,"    public boolean supportShouldUpRecreateTask(@NonNull Intent targetIntent) {
        return delegate.supportShouldUpRecreateTask(targetIntent);
    }"
12223,supportRequestWindowFeature,"    public boolean supportRequestWindowFeature(int featureId) {
        return delegate.supportRequestWindowFeature(featureId);
    }"
12224,supportPostponeEnterTransition,"    public void supportPostponeEnterTransition() {
        delegate.supportPostponeEnterTransition();
    }"
12225,supportNavigateUpTo,"    public void supportNavigateUpTo(@NonNull Intent upIntent) {
        delegate.supportNavigateUpTo(upIntent);
    }"
12226,supportInvalidateOptionsMenu,"    public void supportInvalidateOptionsMenu() {
        delegate.supportInvalidateOptionsMenu();
    }"
12227,supportFinishAfterTransition,"    public void supportFinishAfterTransition() {
        delegate.supportFinishAfterTransition();
    }"
12228,super_unregisterReceiver,"    public void super_unregisterReceiver(BroadcastReceiver receiver) {
        super.unregisterReceiver(receiver);
    }"
12230,super_unregisterComponentCallbacks,"    public void super_unregisterComponentCallbacks(ComponentCallbacks callback) {
        super.unregisterComponentCallbacks(callback);
    }"
12231,super_unbindService,"    public void super_unbindService(ServiceConnection conn) {
        super.unbindService(conn);
    }"
12232,super_triggerSearch,"    public void super_triggerSearch(String query, @Nullable Bundle appSearchData) {
        super.triggerSearch(query, appSearchData);
    }"
12233,super_takeKeyEvents,"    public void super_takeKeyEvents(boolean get) {
        super.takeKeyEvents(get);
    }"
12234,super_supportStartPostponedEnterTransition,"    public void super_supportStartPostponedEnterTransition() {
        super.supportStartPostponedEnterTransition();
    }"
12235,super_supportShouldUpRecreateTask,"    public boolean super_supportShouldUpRecreateTask(@NonNull Intent targetIntent) {
        return super.supportShouldUpRecreateTask(targetIntent);
    }"
12236,super_supportRequestWindowFeature,"    public boolean super_supportRequestWindowFeature(int featureId) {
        return super.supportRequestWindowFeature(featureId);
    }"
12237,super_supportPostponeEnterTransition,"    public void super_supportPostponeEnterTransition() {
        super.supportPostponeEnterTransition();
    }"
12238,super_supportNavigateUpTo,"    public void super_supportNavigateUpTo(@NonNull Intent upIntent) {
        super.supportNavigateUpTo(upIntent);
    }"
12239,super_supportInvalidateOptionsMenu,"    public void super_supportInvalidateOptionsMenu() {
        super.supportInvalidateOptionsMenu();
    }"
12240,super_supportFinishAfterTransition,"    public void super_supportFinishAfterTransition() {
        super.supportFinishAfterTransition();
    }"
12241,super_superDispatchKeyEvent,"    public boolean super_superDispatchKeyEvent(KeyEvent event) {
        return super.superDispatchKeyEvent(event);
    }"
12242,super_stopService,"    public boolean super_stopService(Intent name) {
        return super.stopService(name);
    }"
12243,super_stopManagingCursor,"    public void super_stopManagingCursor(Cursor c) {
        super.stopManagingCursor(c);
    }"
12244,super_stopLockTask,"    public void super_stopLockTask() {
        super.stopLockTask();
    }"
12245,super_stopLocalVoiceInteraction,"    public void super_stopLocalVoiceInteraction() {
        super.stopLocalVoiceInteraction();
    }"
12246,super_startSupportActionMode,"    public ActionMode super_startSupportActionMode(@NonNull Callback callback) {
        return super.startSupportActionMode(callback);
    }"
12247,super_startService,"    public ComponentName super_startService(Intent service) {
        return super.startService(service);
    }"
12248,super_startSearch,"    public void super_startSearch(@Nullable String initialQuery, boolean selectInitialQuery,
            @Nullable Bundle appSearchData, boolean globalSearch) {
        super.startSearch(initialQuery, selectInitialQuery, appSearchData, globalSearch);"
12250,super_startNextMatchingActivity,"    public boolean super_startNextMatchingActivity(@NonNull Intent intent, @Nullable Bundle options) {
        return super.startNextMatchingActivity(intent, options);
    }"
12251,super_startNextMatchingActivity,"    public boolean super_startNextMatchingActivity(@NonNull Intent intent) {
        return super.startNextMatchingActivity(intent);
    }"
12252,super_startManagingCursor,"    public void super_startManagingCursor(Cursor c) {
        super.startManagingCursor(c);
    }"
12253,super_startLockTask,"    public void super_startLockTask() {
        super.startLockTask();
    }"
12254,super_startLocalVoiceInteraction,"    public void super_startLocalVoiceInteraction(Bundle privateOptions) {
        super.startLocalVoiceInteraction(privateOptions);
    }"
12255,super_startIntentSenderFromFragment,"    public void super_startIntentSenderFromFragment(Fragment fragment, IntentSender intent, int requestCode,
            @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)
            throws SendIntentException {"
12256,super_startIntentSenderFromChild,"    public void super_startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode,
            Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, @Nullable Bundle options)
            throws SendIntentException {"
12257,super_startIntentSenderFromChild,"    public void super_startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode,
            Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        super.startIntentSenderFromChild(child, intent, requestCode, fillInIntent, flagsMask, flagsValues,"
12259,super_startIntentSenderForResult,"    public void super_startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        super.startIntentSenderForResult(intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags);"
12260,super_startIntentSender,"    public void super_startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask,
            int flagsValues, int extraFlags, Bundle options) throws SendIntentException {
        super.startIntentSender(intent, fillInIntent, flagsMask, flagsValues, extraFlags, options);"
12261,super_startIntentSender,"    public void super_startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask,
            int flagsValues, int extraFlags) throws SendIntentException {
        super.startIntentSender(intent, fillInIntent, flagsMask, flagsValues, extraFlags);"
12262,super_startInstrumentation,"    public boolean super_startInstrumentation(ComponentName className, String profileFile, Bundle arguments) {
        return super.startInstrumentation(className, profileFile, arguments);
    }"
12263,super_startForegroundService,"    public ComponentName super_startForegroundService(Intent service) {
        return super.startForegroundService(service);
    }"
12264,super_startActivityIfNeeded,"    public boolean super_startActivityIfNeeded(@NonNull Intent intent, int requestCode, @Nullable Bundle options) {
        return super.startActivityIfNeeded(intent, requestCode, options);
    }"
12265,super_startActivityIfNeeded,"    public boolean super_startActivityIfNeeded(@NonNull Intent intent, int requestCode) {
        return super.startActivityIfNeeded(intent, requestCode);
    }"
12266,super_startActivityFromFragment,"    public void super_startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent,
            int requestCode, @Nullable Bundle options) {
        super.startActivityFromFragment(fragment, intent, requestCode, options);"
12267,super_startActivityFromFragment,"    public void super_startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent,
            int requestCode) {
        super.startActivityFromFragment(fragment, intent, requestCode);"
12268,super_startActivityFromFragment,"    public void super_startActivityFromFragment(Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        super.startActivityFromFragment(fragment, intent, requestCode, options);"
12269,super_startActivityFromFragment,"    public void super_startActivityFromFragment(Fragment fragment, Intent intent, int requestCode) {
        super.startActivityFromFragment(fragment, intent, requestCode);
    }"
12270,super_startActivityFromChild,"    public void super_startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode,
            @Nullable Bundle options) {
        super.startActivityFromChild(child, intent, requestCode, options);"
12271,super_startActivityFromChild,"    public void super_startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode) {
        super.startActivityFromChild(child, intent, requestCode);
    }"
12276,super_startActivities,"    public void super_startActivities(Intent[] intents, @Nullable Bundle options) {
        super.startActivities(intents, options);
    }"
12277,super_startActivities,"    public void super_startActivities(Intent[] intents) {
        super.startActivities(intents);
    }"
12278,super_startActionMode,"    public android.view.ActionMode super_startActionMode(android.view.ActionMode.Callback callback, int type) {
        return super.startActionMode(callback, type);
    }"
12279,super_startActionMode,"    public android.view.ActionMode super_startActionMode(android.view.ActionMode.Callback callback) {
        return super.startActionMode(callback);
    }"
12280,super_showLockTaskEscapeMessage,"    public void super_showLockTaskEscapeMessage() {
        super.showLockTaskEscapeMessage();
    }"
12281,super_showAssist,"    public boolean super_showAssist(Bundle args) {
        return super.showAssist(args);
    }"
12282,super_shouldUpRecreateTask,"    public boolean super_shouldUpRecreateTask(Intent targetIntent) {
        return super.shouldUpRecreateTask(targetIntent);
    }"
12284,super_setWallpaper,"    public void super_setWallpaper(Bitmap bitmap) throws IOException {
        super.setWallpaper(bitmap);
    }"
12285,super_setWallpaper,"    public void super_setWallpaper(InputStream data) throws IOException {
        super.setWallpaper(data);
    }"
12286,super_setVrModeEnabled,"    public void super_setVrModeEnabled(boolean enabled, @NonNull ComponentName requestedComponent)
            throws NameNotFoundException {
        super.setVrModeEnabled(enabled, requestedComponent);"
12287,super_setVisible,"    public void super_setVisible(boolean visible) {
        super.setVisible(visible);
    }"
12288,super_setTurnScreenOn,"    public void super_setTurnScreenOn(boolean turnScreenOn) {
        super.setTurnScreenOn(turnScreenOn);
    }"
12289,super_setTitleColor,"    public void super_setTitleColor(int textColor) {
        super.setTitleColor(textColor);
    }"
12290,super_setTitle,"    public void super_setTitle(int titleId) {
        super.setTitle(titleId);
    }"
12291,super_setTitle,"    public void super_setTitle(CharSequence title) {
        super.setTitle(title);
    }"
12292,super_setTheme,"    public void super_setTheme(int resid) {
        super.setTheme(resid);
    }"
12293,super_setTaskDescription,"    public void super_setTaskDescription(TaskDescription taskDescription) {
        super.setTaskDescription(taskDescription);
    }"
12294,super_setSupportProgressBarVisibility,"    public void super_setSupportProgressBarVisibility(boolean visible) {
        super.setSupportProgressBarVisibility(visible);
    }"
12295,super_setSupportProgressBarIndeterminateVisibility,"    public void super_setSupportProgressBarIndeterminateVisibility(boolean visible) {
        super.setSupportProgressBarIndeterminateVisibility(visible);
    }"
12296,super_setSupportProgressBarIndeterminate,"    public void super_setSupportProgressBarIndeterminate(boolean indeterminate) {
        super.setSupportProgressBarIndeterminate(indeterminate);
    }"
12297,super_setSupportProgress,"    public void super_setSupportProgress(int progress) {
        super.setSupportProgress(progress);
    }"
12298,super_setSupportActionBar,"    public void super_setSupportActionBar(@Nullable Toolbar toolbar) {
        super.setSupportActionBar(toolbar);
    }"
12299,super_setShowWhenLocked,"    public void super_setShowWhenLocked(boolean showWhenLocked) {
        super.setShowWhenLocked(showWhenLocked);
    }"
12300,super_setRequestedOrientation,"    public void super_setRequestedOrientation(int requestedOrientation) {
        super.setRequestedOrientation(requestedOrientation);
    }"
12301,super_setPictureInPictureParams,"    public void super_setPictureInPictureParams(@NonNull PictureInPictureParams params) {
        super.setPictureInPictureParams(params);
    }"
12302,super_setIntent,"    public void super_setIntent(Intent newIntent) {
        super.setIntent(newIntent);
    }"
12303,super_setImmersive,"    public void super_setImmersive(boolean i) {
        super.setImmersive(i);
    }"
12304,super_setFinishOnTouchOutside,"    public void super_setFinishOnTouchOutside(boolean finish) {
        super.setFinishOnTouchOutside(finish);
    }"
12305,super_setExitSharedElementCallback,"    public void super_setExitSharedElementCallback(android.app.SharedElementCallback callback) {
        super.setExitSharedElementCallback(callback);
    }"
12306,super_setExitSharedElementCallback,"    public void super_setExitSharedElementCallback(SharedElementCallback listener) {
        super.setExitSharedElementCallback(listener);
    }"
12307,super_setEnterSharedElementCallback,"    public void super_setEnterSharedElementCallback(android.app.SharedElementCallback callback) {
        super.setEnterSharedElementCallback(callback);
    }"
12309,super_setContentView,"    public void super_setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
    }"
12310,super_setContentView,"    public void super_setContentView(View view) {
        super.setContentView(view);
    }"
12311,super_setContentView,"    public void super_setContentView(int layoutResID) {
        super.setContentView(layoutResID);
    }"
12312,super_setContentTransitionManager,"    public void super_setContentTransitionManager(TransitionManager tm) {
        super.setContentTransitionManager(tm);
    }"
12313,super_setActionBar,"    public void super_setActionBar(@Nullable android.widget.Toolbar toolbar) {
        super.setActionBar(toolbar);
    }"
12314,super_sendStickyOrderedBroadcastAsUser,"    public void super_sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData,
            Bundle initialExtras) {"
12315,super_sendStickyOrderedBroadcast,"    public void super_sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler,
            int initialCode, String initialData, Bundle initialExtras) {
        super.sendStickyOrderedBroadcast(intent, resultReceiver, scheduler, initialCode, initialData, initialExtras);"
12316,super_sendStickyBroadcastAsUser,"    public void super_sendStickyBroadcastAsUser(Intent intent, UserHandle user) {
        super.sendStickyBroadcastAsUser(intent, user);
    }"
12317,super_sendStickyBroadcast,"    public void super_sendStickyBroadcast(Intent intent) {
        super.sendStickyBroadcast(intent);
    }"
12318,super_sendOrderedBroadcastAsUser,"    public void super_sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData,
            Bundle initialExtras) {"
12319,super_sendOrderedBroadcast,"    public void super_sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        super.sendOrderedBroadcast(intent, receiverPermission, resultReceiver, scheduler, initialCode, initialData,"
12320,super_sendOrderedBroadcast,"    public void super_sendOrderedBroadcast(Intent intent, String receiverPermission) {
        super.sendOrderedBroadcast(intent, receiverPermission);
    }"
12321,super_sendBroadcastAsUser,"    public void super_sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) {
        super.sendBroadcastAsUser(intent, user, receiverPermission);
    }"
12322,super_sendBroadcastAsUser,"    public void super_sendBroadcastAsUser(Intent intent, UserHandle user) {
        super.sendBroadcastAsUser(intent, user);
    }"
12323,super_sendBroadcast,"    public void super_sendBroadcast(Intent intent, String receiverPermission) {
        super.sendBroadcast(intent, receiverPermission);
    }"
12324,super_sendBroadcast,"    public void super_sendBroadcast(Intent intent) {
        super.sendBroadcast(intent);
    }"
12325,super_revokeUriPermission,"    public void super_revokeUriPermission(String targetPackage, Uri uri, int modeFlags) {
        super.revokeUriPermission(targetPackage, uri, modeFlags);
    }"
12326,super_revokeUriPermission,"    public void super_revokeUriPermission(Uri uri, int modeFlags) {
        super.revokeUriPermission(uri, modeFlags);
    }"
12327,super_requestVisibleBehind,"    public boolean super_requestVisibleBehind(boolean visible) {
        return super.requestVisibleBehind(visible);
    }"
12328,super_requestDragAndDropPermissions,"    public DragAndDropPermissions super_requestDragAndDropPermissions(DragEvent event) {
        return super.requestDragAndDropPermissions(event);
    }"
12329,super_reportFullyDrawn,"    public void super_reportFullyDrawn() {
        super.reportFullyDrawn();
    }"
12330,super_removeStickyBroadcastAsUser,"    public void super_removeStickyBroadcastAsUser(Intent intent, UserHandle user) {
        super.removeStickyBroadcastAsUser(intent, user);
    }"
12331,super_removeStickyBroadcast,"    public void super_removeStickyBroadcast(Intent intent) {
        super.removeStickyBroadcast(intent);
    }"
12332,super_releaseInstance,"    public boolean super_releaseInstance() {
        return super.releaseInstance();
    }"
12333,super_registerReceiver,"    public Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler, int flags) {
        return super.registerReceiver(receiver, filter, broadcastPermission, scheduler, flags);"
12334,super_registerReceiver,"    public Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler) {
        return super.registerReceiver(receiver, filter, broadcastPermission, scheduler);"
12335,super_registerReceiver,"    public Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags) {
        return super.registerReceiver(receiver, filter, flags);
    }"
12336,super_registerReceiver,"    public Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {
        return super.registerReceiver(receiver, filter);
    }"
12338,super_registerComponentCallbacks,"    public void super_registerComponentCallbacks(ComponentCallbacks callback) {
        super.registerComponentCallbacks(callback);
    }"
12339,super_recreate,"    public void super_recreate() {
        super.recreate();
    }"
12340,super_putExtraData,"    public void super_putExtraData(ExtraData extraData) {
        super.putExtraData(extraData);
    }"
12342,super_peekWallpaper,"    public Drawable super_peekWallpaper() {
        return super.peekWallpaper();
    }"
12343,super_overridePendingTransition,"    public void super_overridePendingTransition(int enterAnim, int exitAnim) {
        super.overridePendingTransition(enterAnim, exitAnim);
    }"
12344,super_openOrCreateDatabase,"    public SQLiteDatabase super_openOrCreateDatabase(String name, int mode, CursorFactory factory,
            DatabaseErrorHandler errorHandler) {
        return super.openOrCreateDatabase(name, mode, factory, errorHandler);"
12345,super_openOrCreateDatabase,"    public SQLiteDatabase super_openOrCreateDatabase(String name, int mode, CursorFactory factory) {
        return super.openOrCreateDatabase(name, mode, factory);
    }"
12346,super_openOptionsMenu,"    public void super_openOptionsMenu() {
        super.openOptionsMenu();
    }"
12347,super_openFileOutput,"    public FileOutputStream super_openFileOutput(String name, int mode) throws FileNotFoundException {
        return super.openFileOutput(name, mode);
    }"
12348,super_openFileInput,"    public FileInputStream super_openFileInput(String name) throws FileNotFoundException {
        return super.openFileInput(name);
    }"
12349,super_openContextMenu,"    public void super_openContextMenu(View view) {
        super.openContextMenu(view);
    }"
12350,super_onWindowStartingSupportActionMode,"    public ActionMode super_onWindowStartingSupportActionMode(@NonNull Callback callback) {
        return super.onWindowStartingSupportActionMode(callback);
    }"
12351,super_onWindowStartingActionMode,"    public android.view.ActionMode super_onWindowStartingActionMode(android.view.ActionMode.Callback callback,
            int type) {
        return super.onWindowStartingActionMode(callback, type);"
12352,super_onWindowStartingActionMode,"    public android.view.ActionMode super_onWindowStartingActionMode(android.view.ActionMode.Callback callback) {
        return super.onWindowStartingActionMode(callback);
    }"
12353,super_onWindowFocusChanged,"    public void super_onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
    }"
12354,super_onWindowAttributesChanged,"    public void super_onWindowAttributesChanged(WindowManager.LayoutParams params) {
        super.onWindowAttributesChanged(params);
    }"
12355,super_onVisibleBehindCanceled,"    public void super_onVisibleBehindCanceled() {
        super.onVisibleBehindCanceled();
    }"
12356,super_onUserLeaveHint,"    public void super_onUserLeaveHint() {
        super.onUserLeaveHint();
    }"
12357,super_onUserInteraction,"    public void super_onUserInteraction() {
        super.onUserInteraction();
    }"
12358,super_onTrimMemory,"    public void super_onTrimMemory(int level) {
        super.onTrimMemory(level);
    }"
12359,super_onTrackballEvent,"    public boolean super_onTrackballEvent(MotionEvent event) {
        return super.onTrackballEvent(event);
    }"
12360,super_onTouchEvent,"    public boolean super_onTouchEvent(MotionEvent event) {
        return super.onTouchEvent(event);
    }"
12361,super_onTitleChanged,"    public void super_onTitleChanged(CharSequence title, int color) {
        super.onTitleChanged(title, color);
    }"
12362,super_onSupportNavigateUp,"    public boolean super_onSupportNavigateUp() {
        return super.onSupportNavigateUp();
    }"
12363,super_onSupportContentChanged,"    public void super_onSupportContentChanged() {
        super.onSupportContentChanged();
    }"
12364,super_onSupportActionModeStarted,"    public void super_onSupportActionModeStarted(@NonNull ActionMode mode) {
        super.onSupportActionModeStarted(mode);
    }"
12365,super_onSupportActionModeFinished,"    public void super_onSupportActionModeFinished(@NonNull ActionMode mode) {
        super.onSupportActionModeFinished(mode);
    }"
12367,super_onStateNotSaved,"    public void super_onStateNotSaved() {
        super.onStateNotSaved();
    }"
12369,super_onSearchRequested,"    public boolean super_onSearchRequested() {
        return super.onSearchRequested();
    }"
12370,super_onSearchRequested,"    public boolean super_onSearchRequested(@Nullable SearchEvent searchEvent) {
        return super.onSearchRequested(searchEvent);
    }"
12371,super_onSaveInstanceState,"    public void super_onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {
        super.onSaveInstanceState(outState, outPersistentState);
    }"
12372,super_onSaveInstanceState,"    public void super_onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
    }"
12373,super_onResumeFragments,"    public void super_onResumeFragments() {
        super.onResumeFragments();
    }"
12375,super_onRestoreInstanceState,"    public void super_onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState) {
        super.onRestoreInstanceState(savedInstanceState, persistentState);
    }"
12376,super_onRestoreInstanceState,"    public void super_onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
    }"
12377,super_onRestart,"    public void super_onRestart() {
        super.onRestart();
    }"
12379,super_onProvideReferrer,"    public Uri super_onProvideReferrer() {
        return super.onProvideReferrer();
    }"
12380,super_onProvideKeyboardShortcuts,"    public void super_onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {
        super.onProvideKeyboardShortcuts(data, menu, deviceId);
    }"
12381,super_onProvideAssistData,"    public void super_onProvideAssistData(Bundle data) {
        super.onProvideAssistData(data);
    }"
12382,super_onProvideAssistContent,"    public void super_onProvideAssistContent(AssistContent outContent) {
        super.onProvideAssistContent(outContent);
    }"
12383,super_onPrepareSupportNavigateUpTaskStack,"    public void super_onPrepareSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        super.onPrepareSupportNavigateUpTaskStack(builder);
    }"
12384,super_onPreparePanel,"    public boolean super_onPreparePanel(int featureId, View view, Menu menu) {
        return super.onPreparePanel(featureId, view, menu);
    }"
12385,super_onPrepareOptionsPanel,"    public boolean super_onPrepareOptionsPanel(View view, Menu menu) {
        return super.onPrepareOptionsPanel(view, menu);
    }"
12386,super_onPrepareOptionsMenu,"    public boolean super_onPrepareOptionsMenu(Menu menu) {
        return super.onPrepareOptionsMenu(menu);
    }"
12387,super_onPrepareNavigateUpTaskStack,"    public void super_onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        super.onPrepareNavigateUpTaskStack(builder);
    }"
12388,super_onPrepareDialog,"    public void super_onPrepareDialog(int id, Dialog dialog, Bundle args) {
        super.onPrepareDialog(id, dialog, args);
    }"
12389,super_onPrepareDialog,"    public void super_onPrepareDialog(int id, Dialog dialog) {
        super.onPrepareDialog(id, dialog);
    }"
12390,super_onPostResume,"    public void super_onPostResume() {
        super.onPostResume();
    }"
12391,super_onPostCreate,"    public void super_onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        super.onPostCreate(savedInstanceState, persistentState);
    }"
12392,super_onPostCreate,"    public void super_onPostCreate(@Nullable Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);
    }"
12393,super_onPictureInPictureModeChanged,"    public void super_onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig);
    }"
12396,super_onPanelClosed,"    public void super_onPanelClosed(int featureId, Menu menu) {
        super.onPanelClosed(featureId, menu);
    }"
12399,super_onNewIntent,"    public void super_onNewIntent(Intent intent) {
        super.onNewIntent(intent);
    }"
12400,super_onNavigateUpFromChild,"    public boolean super_onNavigateUpFromChild(Activity child) {
        return super.onNavigateUpFromChild(child);
    }"
12401,super_onNavigateUp,"    public boolean super_onNavigateUp() {
        return super.onNavigateUp();
    }"
12402,super_onMultiWindowModeChanged,"    public void super_onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig) {
        super.onMultiWindowModeChanged(isInMultiWindowMode, newConfig);
    }"
12404,super_onMenuOpened,"    public boolean super_onMenuOpened(int featureId, Menu menu) {
        return super.onMenuOpened(featureId, menu);
    }"
12406,super_onLocalVoiceInteractionStopped,"    public void super_onLocalVoiceInteractionStopped() {
        super.onLocalVoiceInteractionStopped();
    }"
12407,super_onLocalVoiceInteractionStarted,"    public void super_onLocalVoiceInteractionStarted() {
        super.onLocalVoiceInteractionStarted();
    }"
12408,super_onKeyUp,"    public boolean super_onKeyUp(int keyCode, KeyEvent event) {
        return super.onKeyUp(keyCode, event);
    }"
12409,super_onKeyShortcut,"    public boolean super_onKeyShortcut(int keyCode, KeyEvent event) {
        return super.onKeyShortcut(keyCode, event);
    }"
12410,super_onKeyMultiple,"    public boolean super_onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) {
        return super.onKeyMultiple(keyCode, repeatCount, event);
    }"
12411,super_onKeyLongPress,"    public boolean super_onKeyLongPress(int keyCode, KeyEvent event) {
        return super.onKeyLongPress(keyCode, event);
    }"
12412,super_onKeyDown,"    public boolean super_onKeyDown(int keyCode, KeyEvent event) {
        return super.onKeyDown(keyCode, event);
    }"
12413,super_onGenericMotionEvent,"    public boolean super_onGenericMotionEvent(MotionEvent event) {
        return super.onGenericMotionEvent(event);
    }"
12414,super_onEnterAnimationComplete,"    public void super_onEnterAnimationComplete() {
        super.onEnterAnimationComplete();
    }"
12415,super_onDetachedFromWindow,"    public void super_onDetachedFromWindow() {
        super.onDetachedFromWindow();
    }"
12417,super_onCreateView,"    public View super_onCreateView(String name, Context context, AttributeSet attrs) {
        return super.onCreateView(name, context, attrs);
    }"
12418,super_onCreateView,"    public View super_onCreateView(View parent, String name, Context context, AttributeSet attrs) {
        return super.onCreateView(parent, name, context, attrs);
    }"
12419,super_onCreateThumbnail,"    public boolean super_onCreateThumbnail(Bitmap outBitmap, Canvas canvas) {
        return super.onCreateThumbnail(outBitmap, canvas);
    }"
12420,super_onCreateSupportNavigateUpTaskStack,"    public void super_onCreateSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        super.onCreateSupportNavigateUpTaskStack(builder);
    }"
12421,super_onCreatePanelView,"    public View super_onCreatePanelView(int featureId) {
        return super.onCreatePanelView(featureId);
    }"
12422,super_onCreatePanelMenu,"    public boolean super_onCreatePanelMenu(int featureId, Menu menu) {
        return super.onCreatePanelMenu(featureId, menu);
    }"
12423,super_onCreateOptionsMenu,"    public boolean super_onCreateOptionsMenu(Menu menu) {
        return super.onCreateOptionsMenu(menu);
    }"
12424,super_onCreateNavigateUpTaskStack,"    public void super_onCreateNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        super.onCreateNavigateUpTaskStack(builder);
    }"
12425,super_onCreateDialog,"    public Dialog super_onCreateDialog(int id, Bundle args) {
        return super.onCreateDialog(id, args);
    }"
12426,super_onCreateDialog,"    public Dialog super_onCreateDialog(int id) {
        return super.onCreateDialog(id);
    }"
12427,super_onCreateDescription,"    public CharSequence super_onCreateDescription() {
        return super.onCreateDescription();
    }"
12429,super_onCreate,"    public void super_onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        super.onCreate(savedInstanceState, persistentState);
    }"
12431,super_onContextMenuClosed,"    public void super_onContextMenuClosed(Menu menu) {
        super.onContextMenuClosed(menu);
    }"
12433,super_onContentChanged,"    public void super_onContentChanged() {
        super.onContentChanged();
    }"
12435,super_onChildTitleChanged,"    public void super_onChildTitleChanged(Activity childActivity, CharSequence title) {
        super.onChildTitleChanged(childActivity, title);
    }"
12436,super_onBackPressed,"    public void super_onBackPressed() {
        super.onBackPressed();
    }"
12437,super_onAttachedToWindow,"    public void super_onAttachedToWindow() {
        super.onAttachedToWindow();
    }"
12438,super_onAttachFragment,"    public void super_onAttachFragment(android.app.Fragment fragment) {
        super.onAttachFragment(fragment);
    }"
12439,super_onAttachFragment,"    public void super_onAttachFragment(Fragment fragment) {
        super.onAttachFragment(fragment);
    }"
12440,super_onApplyThemeResource,"    public void super_onApplyThemeResource(Theme theme, int resid, boolean first) {
        super.onApplyThemeResource(theme, resid, first);
    }"
12441,super_onActivityResult,"    public void super_onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
    }"
12442,super_onActivityReenter,"    public void super_onActivityReenter(int resultCode, Intent data) {
        super.onActivityReenter(resultCode, data);
    }"
12443,super_onActionModeStarted,"    public void super_onActionModeStarted(android.view.ActionMode mode) {
        super.onActionModeStarted(mode);
    }"
12444,super_onActionModeFinished,"    public void super_onActionModeFinished(android.view.ActionMode mode) {
        super.onActionModeFinished(mode);
    }"
12445,super_navigateUpToFromChild,"    public boolean super_navigateUpToFromChild(Activity child, Intent upIntent) {
        return super.navigateUpToFromChild(child, upIntent);
    }"
12446,super_navigateUpTo,"    public boolean super_navigateUpTo(Intent upIntent) {
        return super.navigateUpTo(upIntent);
    }"
12447,super_moveTaskToBack,"    public boolean super_moveTaskToBack(boolean nonRoot) {
        return super.moveTaskToBack(nonRoot);
    }"
12448,super_moveSharedPreferencesFrom,"    public boolean super_moveSharedPreferencesFrom(Context sourceContext, String name) {
        return super.moveSharedPreferencesFrom(sourceContext, name);
    }"
12449,super_moveDatabaseFrom,"    public boolean super_moveDatabaseFrom(Context sourceContext, String name) {
        return super.moveDatabaseFrom(sourceContext, name);
    }"
12450,super_isVoiceInteractionRoot,"    public boolean super_isVoiceInteractionRoot() {
        return super.isVoiceInteractionRoot();
    }"
12451,super_isVoiceInteraction,"    public boolean super_isVoiceInteraction() {
        return super.isVoiceInteraction();
    }"
12452,super_isTaskRoot,"    public boolean super_isTaskRoot() {
        return super.isTaskRoot();
    }"
12453,super_isRestricted,"    public boolean super_isRestricted() {
        return super.isRestricted();
    }"
12454,super_isLocalVoiceInteractionSupported,"    public boolean super_isLocalVoiceInteractionSupported() {
        return super.isLocalVoiceInteractionSupported();
    }"
12455,super_isInPictureInPictureMode,"    public boolean super_isInPictureInPictureMode() {
        return super.isInPictureInPictureMode();
    }"
12456,super_isInMultiWindowMode,"    public boolean super_isInMultiWindowMode() {
        return super.isInMultiWindowMode();
    }"
12457,super_isImmersive,"    public boolean super_isImmersive() {
        return super.isImmersive();
    }"
12458,super_isFinishing,"    public boolean super_isFinishing() {
        return super.isFinishing();
    }"
12459,super_isDeviceProtectedStorage,"    public boolean super_isDeviceProtectedStorage() {
        return super.isDeviceProtectedStorage();
    }"
12460,super_isDestroyed,"    public boolean super_isDestroyed() {
        return super.isDestroyed();
    }"
12461,super_isChangingConfigurations,"    public boolean super_isChangingConfigurations() {
        return super.isChangingConfigurations();
    }"
12462,super_isActivityTransitionRunning,"    public boolean super_isActivityTransitionRunning() {
        return super.isActivityTransitionRunning();
    }"
12463,super_invalidateOptionsMenu,"    public void super_invalidateOptionsMenu() {
        super.invalidateOptionsMenu();
    }"
12464,super_hasWindowFocus,"    public boolean super_hasWindowFocus() {
        return super.hasWindowFocus();
    }"
12465,super_grantUriPermission,"    public void super_grantUriPermission(String toPackage, Uri uri, int modeFlags) {
        super.grantUriPermission(toPackage, uri, modeFlags);
    }"
12466,super_getWindowManager,"    public WindowManager super_getWindowManager() {
        return super.getWindowManager();
    }"
12467,super_getWindow,"    public Window super_getWindow() {
        return super.getWindow();
    }"
12468,super_getWallpaperDesiredMinimumWidth,"    public int super_getWallpaperDesiredMinimumWidth() {
        return super.getWallpaperDesiredMinimumWidth();
    }"
12469,super_getWallpaperDesiredMinimumHeight,"    public int super_getWallpaperDesiredMinimumHeight() {
        return super.getWallpaperDesiredMinimumHeight();
    }"
12470,super_getWallpaper,"    public Drawable super_getWallpaper() {
        return super.getWallpaper();
    }"
12471,super_getVoiceInteractor,"    public VoiceInteractor super_getVoiceInteractor() {
        return super.getVoiceInteractor();
    }"
12473,super_getTheme,"    public Theme super_getTheme() {
        return super.getTheme();
    }"
12474,super_getTaskId,"    public int super_getTaskId() {
        return super.getTaskId();
    }"
12475,super_getSystemServiceName,"    public String super_getSystemServiceName(Class<?> serviceClass) {
        return super.getSystemServiceName(serviceClass);
    }"
12476,super_getSystemService,"    public Object super_getSystemService(@NonNull String name) {
        return super.getSystemService(name);
    }"
12477,super_getSupportParentActivityIntent,"    public Intent super_getSupportParentActivityIntent() {
        return super.getSupportParentActivityIntent();
    }"
12478,super_getSupportLoaderManager,"    public LoaderManager super_getSupportLoaderManager() {
        return super.getSupportLoaderManager();
    }"
12479,super_getSupportFragmentManager,"    public FragmentManager super_getSupportFragmentManager() {
        return super.getSupportFragmentManager();
    }"
12480,super_getSupportActionBar,"    public ActionBar super_getSupportActionBar() {
        return super.getSupportActionBar();
    }"
12481,super_getSharedPreferences,"    public SharedPreferences super_getSharedPreferences(String name, int mode) {
        return super.getSharedPreferences(name, mode);
    }"
12482,super_getResources,"    public Resources super_getResources() {
        return super.getResources();
    }"
12483,super_getRequestedOrientation,"    public int super_getRequestedOrientation() {
        return super.getRequestedOrientation();
    }"
12484,super_getReferrer,"    public Uri super_getReferrer() {
        return super.getReferrer();
    }"
12485,super_getPreferences,"    public SharedPreferences super_getPreferences(int mode) {
        return super.getPreferences(mode);
    }"
12486,super_getParentActivityIntent,"    public Intent super_getParentActivityIntent() {
        return super.getParentActivityIntent();
    }"
12487,super_getPackageResourcePath,"    public String super_getPackageResourcePath() {
        return super.getPackageResourcePath();
    }"
12488,super_getPackageName,"    public String super_getPackageName() {
        return super.getPackageName();
    }"
12489,super_getPackageManager,"    public PackageManager super_getPackageManager() {
        return super.getPackageManager();
    }"
12490,super_getPackageCodePath,"    public String super_getPackageCodePath() {
        return super.getPackageCodePath();
    }"
12491,super_getObbDirs,"    public File[] super_getObbDirs() {
        return super.getObbDirs();
    }"
12492,super_getObbDir,"    public File super_getObbDir() {
        return super.getObbDir();
    }"
12493,super_getNoBackupFilesDir,"    public File super_getNoBackupFilesDir() {
        return super.getNoBackupFilesDir();
    }"
12494,super_getMenuInflater,"    public MenuInflater super_getMenuInflater() {
        return super.getMenuInflater();
    }"
12495,super_getMaxNumPictureInPictureActions,"    public int super_getMaxNumPictureInPictureActions() {
        return super.getMaxNumPictureInPictureActions();
    }"
12496,super_getMainLooper,"    public Looper super_getMainLooper() {
        return super.getMainLooper();
    }"
12497,super_getMainExecutor,"    public Executor super_getMainExecutor() {
        return super.getMainExecutor();
    }"
12498,super_getLocalClassName,"    public String super_getLocalClassName() {
        return super.getLocalClassName();
    }"
12499,super_getLoaderManager,"    public android.app.LoaderManager super_getLoaderManager() {
        return super.getLoaderManager();
    }"
12500,super_getLifecycle,"    public Lifecycle super_getLifecycle() {
        return super.getLifecycle();
    }"
12501,super_getLayoutInflater,"    public LayoutInflater super_getLayoutInflater() {
        return super.getLayoutInflater();
    }"
12502,super_getIntent,"    public Intent super_getIntent() {
        return super.getIntent();
    }"
12503,super_getFragmentManager,"    public android.app.FragmentManager super_getFragmentManager() {
        return super.getFragmentManager();
    }"
12504,super_getFilesDir,"    public File super_getFilesDir() {
        return super.getFilesDir();
    }"
12505,super_getFileStreamPath,"    public File super_getFileStreamPath(String name) {
        return super.getFileStreamPath(name);
    }"
12506,super_getExtraData,"    public <T extends SupportActivity.ExtraData> T super_getExtraData(Class<T> extraDataClass) {
        return super.getExtraData(extraDataClass);
    }"
12507,super_getExternalMediaDirs,"    public File[] super_getExternalMediaDirs() {
        return super.getExternalMediaDirs();
    }"
12508,super_getExternalFilesDirs,"    public File[] super_getExternalFilesDirs(String type) {
        return super.getExternalFilesDirs(type);
    }"
12509,super_getExternalFilesDir,"    public File super_getExternalFilesDir(String type) {
        return super.getExternalFilesDir(type);
    }"
12510,super_getExternalCacheDirs,"    public File[] super_getExternalCacheDirs() {
        return super.getExternalCacheDirs();
    }"
12511,super_getExternalCacheDir,"    public File super_getExternalCacheDir() {
        return super.getExternalCacheDir();
    }"
12512,super_getDrawerToggleDelegate,"    public Delegate super_getDrawerToggleDelegate() {
        return super.getDrawerToggleDelegate();
    }"
12513,super_getDir,"    public File super_getDir(String name, int mode) {
        return super.getDir(name, mode);
    }"
12514,super_getDelegate,"    public AppCompatDelegate super_getDelegate() {
        return super.getDelegate();
    }"
12515,super_getDatabasePath,"    public File super_getDatabasePath(String name) {
        return super.getDatabasePath(name);
    }"
12516,super_getDataDir,"    public File super_getDataDir() {
        return super.getDataDir();
    }"
12517,super_getCurrentFocus,"    public View super_getCurrentFocus() {
        return super.getCurrentFocus();
    }"
12518,super_getContentTransitionManager,"    public TransitionManager super_getContentTransitionManager() {
        return super.getContentTransitionManager();
    }"
12519,super_getContentScene,"    public Scene super_getContentScene() {
        return super.getContentScene();
    }"
12520,super_getContentResolver,"    public ContentResolver super_getContentResolver() {
        return super.getContentResolver();
    }"
12521,super_getComponentName,"    public ComponentName super_getComponentName() {
        return super.getComponentName();
    }"
12522,super_getCodeCacheDir,"    public File super_getCodeCacheDir() {
        return super.getCodeCacheDir();
    }"
12523,super_getClassLoader,"    public ClassLoader super_getClassLoader() {
        return super.getClassLoader();
    }"
12524,super_getChangingConfigurations,"    public int super_getChangingConfigurations() {
        return super.getChangingConfigurations();
    }"
12525,super_getCallingPackage,"    public String super_getCallingPackage() {
        return super.getCallingPackage();
    }"
12526,super_getCallingActivity,"    public ComponentName super_getCallingActivity() {
        return super.getCallingActivity();
    }"
12527,super_getCacheDir,"    public File super_getCacheDir() {
        return super.getCacheDir();
    }"
12528,super_getBaseContext,"    public Context super_getBaseContext() {
        return super.getBaseContext();
    }"
12529,super_getAssets,"    public AssetManager super_getAssets() {
        return super.getAssets();
    }"
12530,super_getApplicationInfo,"    public ApplicationInfo super_getApplicationInfo() {
        return super.getApplicationInfo();
    }"
12531,super_getApplicationContext,"    public Context super_getApplicationContext() {
        return super.getApplicationContext();
    }"
12532,super_getActionBar,"    public android.app.ActionBar super_getActionBar() {
        return super.getActionBar();
    }"
12533,super_finishFromChild,"    public void super_finishFromChild(Activity child) {
        super.finishFromChild(child);
    }"
12534,super_finishAndRemoveTask,"    public void super_finishAndRemoveTask() {
        super.finishAndRemoveTask();
    }"
12535,super_finishAfterTransition,"    public void super_finishAfterTransition() {
        super.finishAfterTransition();
    }"
12536,super_finishAffinity,"    public void super_finishAffinity() {
        super.finishAffinity();
    }"
12537,super_finishActivityFromChild,"    public void super_finishActivityFromChild(@NonNull Activity child, int requestCode) {
        super.finishActivityFromChild(child, requestCode);
    }"
12538,super_finishActivity,"    public void super_finishActivity(int requestCode) {
        super.finishActivity(requestCode);
    }"
12539,super_finish,"    public void super_finish() {
        super.finish();
    }"
12540,super_findViewById,"    public <T extends View> T super_findViewById(int id) {
        return super.findViewById(id);
    }"
12541,super_fileList,"    public String[] super_fileList() {
        return super.fileList();
    }"
12542,super_enterPictureInPictureMode,"    public boolean super_enterPictureInPictureMode(@NonNull PictureInPictureParams params) {
        return super.enterPictureInPictureMode(params);
    }"
12543,super_enterPictureInPictureMode,"    public void super_enterPictureInPictureMode() {
        super.enterPictureInPictureMode();
    }"
12544,super_enforceUriPermission,"    public void super_enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags, String message) {
        super.enforceUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags, message);"
12545,super_enforceUriPermission,"    public void super_enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) {
        super.enforceUriPermission(uri, pid, uid, modeFlags, message);
    }"
12546,super_enforcePermission,"    public void super_enforcePermission(String permission, int pid, int uid, String message) {
        super.enforcePermission(permission, pid, uid, message);
    }"
12547,super_enforceCallingUriPermission,"    public void super_enforceCallingUriPermission(Uri uri, int modeFlags, String message) {
        super.enforceCallingUriPermission(uri, modeFlags, message);
    }"
12548,super_enforceCallingPermission,"    public void super_enforceCallingPermission(String permission, String message) {
        super.enforceCallingPermission(permission, message);
    }"
12549,super_enforceCallingOrSelfUriPermission,"    public void super_enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) {
        super.enforceCallingOrSelfUriPermission(uri, modeFlags, message);
    }"
12550,super_enforceCallingOrSelfPermission,"    public void super_enforceCallingOrSelfPermission(String permission, String message) {
        super.enforceCallingOrSelfPermission(permission, message);
    }"
12552,super_dispatchTrackballEvent,"    public boolean super_dispatchTrackballEvent(MotionEvent ev) {
        return super.dispatchTrackballEvent(ev);
    }"
12553,super_dispatchTouchEvent,"    public boolean super_dispatchTouchEvent(MotionEvent ev) {
        return super.dispatchTouchEvent(ev);
    }"
12554,super_dispatchPopulateAccessibilityEvent,"    public boolean super_dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {
        return super.dispatchPopulateAccessibilityEvent(event);
    }"
12555,super_dispatchKeyShortcutEvent,"    public boolean super_dispatchKeyShortcutEvent(KeyEvent event) {
        return super.dispatchKeyShortcutEvent(event);
    }"
12556,super_dispatchKeyEvent,"    public boolean super_dispatchKeyEvent(KeyEvent event) {
        return super.dispatchKeyEvent(event);
    }"
12557,super_dispatchGenericMotionEvent,"    public boolean super_dispatchGenericMotionEvent(MotionEvent ev) {
        return super.dispatchGenericMotionEvent(ev);
    }"
12558,super_deleteSharedPreferences,"    public boolean super_deleteSharedPreferences(String name) {
        return super.deleteSharedPreferences(name);
    }"
12559,super_deleteFile,"    public boolean super_deleteFile(String name) {
        return super.deleteFile(name);
    }"
12560,super_deleteDatabase,"    public boolean super_deleteDatabase(String name) {
        return super.deleteDatabase(name);
    }"
12561,super_databaseList,"    public String[] super_databaseList() {
        return super.databaseList();
    }"
12562,super_createPendingResult,"    public PendingIntent super_createPendingResult(int requestCode, @NonNull Intent data, int flags) {
        return super.createPendingResult(requestCode, data, flags);
    }"
12563,super_createPackageContext,"    public Context super_createPackageContext(String packageName, int flags) throws NameNotFoundException {
        return super.createPackageContext(packageName, flags);
    }"
12564,super_createDisplayContext,"    public Context super_createDisplayContext(Display display) {
        return super.createDisplayContext(display);
    }"
12565,super_createDeviceProtectedStorageContext,"    public Context super_createDeviceProtectedStorageContext() {
        return super.createDeviceProtectedStorageContext();
    }"
12566,super_createContextForSplit,"    public Context super_createContextForSplit(String splitName) throws NameNotFoundException {
        return super.createContextForSplit(splitName);
    }"
12567,super_createConfigurationContext,"    public Context super_createConfigurationContext(Configuration overrideConfiguration) {
        return super.createConfigurationContext(overrideConfiguration);
    }"
12568,super_closeOptionsMenu,"    public void super_closeOptionsMenu() {
        super.closeOptionsMenu();
    }"
12569,super_closeContextMenu,"    public void super_closeContextMenu() {
        super.closeContextMenu();
    }"
12570,super_clearWallpaper,"    public void super_clearWallpaper() throws IOException {
        super.clearWallpaper();
    }"
12571,super_checkUriPermission,"    public int super_checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags) {
        return super.checkUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags);"
12572,super_checkUriPermission,"    public int super_checkUriPermission(Uri uri, int pid, int uid, int modeFlags) {
        return super.checkUriPermission(uri, pid, uid, modeFlags);
    }"
12573,super_checkSelfPermission,"    public int super_checkSelfPermission(String permission) {
        return super.checkSelfPermission(permission);
    }"
12574,super_checkPermission,"    public int super_checkPermission(String permission, int pid, int uid) {
        return super.checkPermission(permission, pid, uid);
    }"
12575,super_checkCallingUriPermission,"    public int super_checkCallingUriPermission(Uri uri, int modeFlags) {
        return super.checkCallingUriPermission(uri, modeFlags);
    }"
12576,super_checkCallingPermission,"    public int super_checkCallingPermission(String permission) {
        return super.checkCallingPermission(permission);
    }"
12577,super_checkCallingOrSelfUriPermission,"    public int super_checkCallingOrSelfUriPermission(Uri uri, int modeFlags) {
        return super.checkCallingOrSelfUriPermission(uri, modeFlags);
    }"
12578,super_checkCallingOrSelfPermission,"    public int super_checkCallingOrSelfPermission(String permission) {
        return super.checkCallingOrSelfPermission(permission);
    }"
12579,super_bindService,"    public boolean super_bindService(Intent service, ServiceConnection conn, int flags) {
        return super.bindService(service, conn, flags);
    }"
12580,super_attachBaseContext,"    public void super_attachBaseContext(Context newBase) {
        super.attachBaseContext(newBase);
    }"
12581,super_applyOverrideConfiguration,"    public void super_applyOverrideConfiguration(Configuration overrideConfiguration) {
        super.applyOverrideConfiguration(overrideConfiguration);
    }"
12582,super_addContentView,"    public void super_addContentView(View view, LayoutParams params) {
        super.addContentView(view, params);
    }"
12583,superDispatchKeyEvent,"    public boolean superDispatchKeyEvent(KeyEvent event) {
        return delegate.superDispatchKeyEvent(event);
    }"
12584,stopService,"    public boolean stopService(Intent name) {
        return delegate.stopService(name);
    }"
12585,stopManagingCursor,"    public void stopManagingCursor(Cursor c) {
        delegate.stopManagingCursor(c);
    }"
12586,stopLockTask,"    public void stopLockTask() {
        delegate.stopLockTask();
    }"
12587,stopLocalVoiceInteraction,"    public void stopLocalVoiceInteraction() {
        delegate.stopLocalVoiceInteraction();
    }"
12588,startSupportActionMode,"    public ActionMode startSupportActionMode(@NonNull Callback callback) {
        return delegate.startSupportActionMode(callback);
    }"
12589,startService,"    public ComponentName startService(Intent service) {
        return delegate.startService(service);
    }"
12590,startSearch,"    public void startSearch(@Nullable String initialQuery, boolean selectInitialQuery, @Nullable Bundle appSearchData,
            boolean globalSearch) {
        delegate.startSearch(initialQuery, selectInitialQuery, appSearchData, globalSearch);"
12592,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent, @Nullable Bundle options) {
        return delegate.startNextMatchingActivity(intent, options);
    }"
12593,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent) {
        return delegate.startNextMatchingActivity(intent);
    }"
12594,startManagingCursor,"    public void startManagingCursor(Cursor c) {
        delegate.startManagingCursor(c);
    }"
12595,startLockTask,"    public void startLockTask() {
        delegate.startLockTask();
    }"
12596,startLocalVoiceInteraction,"    public void startLocalVoiceInteraction(Bundle privateOptions) {
        delegate.startLocalVoiceInteraction(privateOptions);
    }"
12597,startIntentSenderFromFragment,"    public void startIntentSenderFromFragment(Fragment fragment, IntentSender intent, int requestCode,
            @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)
            throws SendIntentException {"
12598,startIntentSenderFromChild,"    public void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, @Nullable Bundle options) throws SendIntentException {
        try {"
12599,startIntentSenderFromChild,"    public void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        try {"
12601,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        try {"
12602,startIntentSender,"    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags, Bundle options) throws SendIntentException {
        try {"
12603,startIntentSender,"    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags) throws SendIntentException {
        try {"
12604,startInstrumentation,"    public boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments) {
        return delegate.startInstrumentation(className, profileFile, arguments);
    }"
12605,startForegroundService,"    public ComponentName startForegroundService(Intent service) {
        return delegate.startForegroundService(service);
    }"
12606,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode, @Nullable Bundle options) {
        return delegate.startActivityIfNeeded(intent, requestCode, options);
    }"
12607,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode) {
        return delegate.startActivityIfNeeded(intent, requestCode);
    }"
12608,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        delegate.startActivityFromFragment(fragment, intent, requestCode, options);"
12609,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode) {
        delegate.startActivityFromFragment(fragment, intent, requestCode);
    }"
12610,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        delegate.startActivityFromFragment(fragment, intent, requestCode, options);"
12611,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode) {
        delegate.startActivityFromFragment(fragment, intent, requestCode);
    }"
12612,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode,
            @Nullable Bundle options) {
        delegate.startActivityFromChild(child, intent, requestCode, options);"
12613,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode) {
        delegate.startActivityFromChild(child, intent, requestCode);
    }"
12618,startActivities,"    public void startActivities(Intent[] intents, @Nullable Bundle options) {
        delegate.startActivities(intents, options);
    }"
12619,startActivities,"    public void startActivities(Intent[] intents) {
        delegate.startActivities(intents);
    }"
12620,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback, int type) {
        return delegate.startActionMode(callback, type);
    }"
12621,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback) {
        return delegate.startActionMode(callback);
    }"
12622,showLockTaskEscapeMessage,"    public void showLockTaskEscapeMessage() {
        delegate.showLockTaskEscapeMessage();
    }"
12623,showAssist,"    public boolean showAssist(Bundle args) {
        return delegate.showAssist(args);
    }"
12624,shouldUpRecreateTask,"    public boolean shouldUpRecreateTask(Intent targetIntent) {
        return delegate.shouldUpRecreateTask(targetIntent);
    }"
12626,setWallpaper,"    public void setWallpaper(InputStream data) throws IOException {
        try {
            delegate.setWallpaper(data);"
12627,setVrModeEnabled,"    public void setVrModeEnabled(boolean enabled, @NonNull ComponentName requestedComponent)
            throws NameNotFoundException {
        try {"
12648,sendStickyOrderedBroadcastAsUser,"    public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        delegate.sendStickyOrderedBroadcastAsUser(intent, user, resultReceiver, scheduler, initialCode, initialData,"
12649,sendStickyOrderedBroadcast,"    public void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler,
            int initialCode, String initialData, Bundle initialExtras) {
        delegate.sendStickyOrderedBroadcast(intent, resultReceiver, scheduler, initialCode, initialData,"
12650,sendStickyBroadcastAsUser,"    public void sendStickyBroadcastAsUser(Intent intent, UserHandle user) {
        delegate.sendStickyBroadcastAsUser(intent, user);
    }"
12651,sendStickyBroadcast,"    public void sendStickyBroadcast(Intent intent) {
        delegate.sendStickyBroadcast(intent);
    }"
12652,sendOrderedBroadcastAsUser,"    public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData,
            Bundle initialExtras) {"
12653,sendOrderedBroadcast,"    public void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        delegate.sendOrderedBroadcast(intent, receiverPermission, resultReceiver, scheduler, initialCode, initialData,"
12654,sendOrderedBroadcast,"    public void sendOrderedBroadcast(Intent intent, String receiverPermission) {
        delegate.sendOrderedBroadcast(intent, receiverPermission);
    }"
12655,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) {
        delegate.sendBroadcastAsUser(intent, user, receiverPermission);
    }"
12656,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user) {
        delegate.sendBroadcastAsUser(intent, user);
    }"
12657,sendBroadcast,"    public void sendBroadcast(Intent intent, String receiverPermission) {
        delegate.sendBroadcast(intent, receiverPermission);
    }"
12658,sendBroadcast,"    public void sendBroadcast(Intent intent) {
        delegate.sendBroadcast(intent);
    }"
12659,revokeUriPermission,"    public void revokeUriPermission(String targetPackage, Uri uri, int modeFlags) {
        delegate.revokeUriPermission(targetPackage, uri, modeFlags);
    }"
12660,revokeUriPermission,"    public void revokeUriPermission(Uri uri, int modeFlags) {
        delegate.revokeUriPermission(uri, modeFlags);
    }"
12661,requestVisibleBehind,"    public boolean requestVisibleBehind(boolean visible) {
        return delegate.requestVisibleBehind(visible);
    }"
12662,requestDragAndDropPermissions,"    public DragAndDropPermissions requestDragAndDropPermissions(DragEvent event) {
        return delegate.requestDragAndDropPermissions(event);
    }"
12663,reportFullyDrawn,"    public void reportFullyDrawn() {
        delegate.reportFullyDrawn();
    }"
12664,removeStickyBroadcastAsUser,"    public void removeStickyBroadcastAsUser(Intent intent, UserHandle user) {
        delegate.removeStickyBroadcastAsUser(intent, user);
    }"
12665,removeStickyBroadcast,"    public void removeStickyBroadcast(Intent intent) {
        delegate.removeStickyBroadcast(intent);
    }"
12666,releaseInstance,"    public boolean releaseInstance() {
        return delegate.releaseInstance();
    }"
12667,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler, int flags) {
        return delegate.registerReceiver(receiver, filter, broadcastPermission, scheduler, flags);"
12668,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler) {
        return delegate.registerReceiver(receiver, filter, broadcastPermission, scheduler);"
12669,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags) {
        return delegate.registerReceiver(receiver, filter, flags);
    }"
12670,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {
        return delegate.registerReceiver(receiver, filter);
    }"
12672,registerComponentCallbacks,"    public void registerComponentCallbacks(ComponentCallbacks callback) {
        delegate.registerComponentCallbacks(callback);
    }"
12673,recreate,"    public void recreate() {
        delegate.recreate();
    }"
12674,putExtraData,"    public void putExtraData(ExtraData extraData) {
        delegate.putExtraData(extraData);
    }"
12676,peekWallpaper,"    public Drawable peekWallpaper() {
        return delegate.peekWallpaper();
    }"
12677,overridePendingTransition,"    public void overridePendingTransition(int enterAnim, int exitAnim) {
        delegate.overridePendingTransition(enterAnim, exitAnim);
    }"
12678,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory,
            DatabaseErrorHandler errorHandler) {
        return delegate.openOrCreateDatabase(name, mode, factory, errorHandler);"
12679,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory) {
        return delegate.openOrCreateDatabase(name, mode, factory);
    }"
12680,openOptionsMenu,"    public void openOptionsMenu() {
        delegate.openOptionsMenu();
    }"
12681,openFileOutput,"    public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException {
        try {
            return delegate.openFileOutput(name, mode);"
12682,openFileInput,"    public FileInputStream openFileInput(String name) throws FileNotFoundException {
        try {
            return delegate.openFileInput(name);"
12683,openContextMenu,"    public void openContextMenu(View view) {
        delegate.openContextMenu(view);
    }"
12684,onWindowStartingSupportActionMode,"    public ActionMode onWindowStartingSupportActionMode(@NonNull Callback callback) {
        return delegate.onWindowStartingSupportActionMode(callback);
    }"
12685,onWindowStartingActionMode,"    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback, int type) {
        return delegate.onWindowStartingActionMode(callback, type);
    }"
12686,onWindowStartingActionMode,"    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback) {
        return delegate.onWindowStartingActionMode(callback);
    }"
12687,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        delegate.onWindowFocusChanged(hasFocus);
    }"
12688,onWindowAttributesChanged,"    public void onWindowAttributesChanged(WindowManager.LayoutParams params) {
        delegate.onWindowAttributesChanged(params);
    }"
12689,onVisibleBehindCanceled,"    public void onVisibleBehindCanceled() {
        delegate.onVisibleBehindCanceled();
    }"
12690,onUserLeaveHint,"    public void onUserLeaveHint() {
        delegate.onUserLeaveHint();
    }"
12691,onUserInteraction,"    public void onUserInteraction() {
        delegate.onUserInteraction();
    }"
12692,onTrimMemory,"    public void onTrimMemory(int level) {
        delegate.onTrimMemory(level);
    }"
12693,onTrackballEvent,"    public boolean onTrackballEvent(MotionEvent event) {
        return delegate.onTrackballEvent(event);
    }"
12694,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        return delegate.onTouchEvent(event);
    }"
12695,onTitleChanged,"    public void onTitleChanged(CharSequence title, int color) {
        delegate.onTitleChanged(title, color);
    }"
12696,onSupportNavigateUp,"    public boolean onSupportNavigateUp() {
        return delegate.onSupportNavigateUp();
    }"
12697,onSupportContentChanged,"    public void onSupportContentChanged() {
        delegate.onSupportContentChanged();
    }"
12698,onSupportActionModeStarted,"    public void onSupportActionModeStarted(@NonNull ActionMode mode) {
        delegate.onSupportActionModeStarted(mode);
    }"
12699,onSupportActionModeFinished,"    public void onSupportActionModeFinished(@NonNull ActionMode mode) {
        delegate.onSupportActionModeFinished(mode);
    }"
12700,onStateNotSaved,"    public void onStateNotSaved() {
        delegate.onStateNotSaved();
    }"
12701,onSearchRequested,"    public boolean onSearchRequested() {
        return delegate.onSearchRequested();
    }"
12702,onSearchRequested,"    public boolean onSearchRequested(@Nullable SearchEvent searchEvent) {
        return delegate.onSearchRequested(searchEvent);
    }"
12703,onRetainCustomNonConfigurationInstance,"    final public Object onRetainCustomNonConfigurationInstance() {
        return delegate.onRetainNonConfigurationInstance();
    }"
12704,onRetainCompositeCustomNonConfigurationInstance,"    public Object onRetainCompositeCustomNonConfigurationInstance() {
        return null;
    }"
12705,onResumeFragments,"    public void onResumeFragments() {
        delegate.onResumeFragments();
    }"
12706,onProvideReferrer,"    public Uri onProvideReferrer() {
        return delegate.onProvideReferrer();
    }"
12707,onProvideKeyboardShortcuts,"    public void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {
        delegate.onProvideKeyboardShortcuts(data, menu, deviceId);
    }"
12708,onProvideAssistData,"    public void onProvideAssistData(Bundle data) {
        delegate.onProvideAssistData(data);
    }"
12709,onProvideAssistContent,"    public void onProvideAssistContent(AssistContent outContent) {
        delegate.onProvideAssistContent(outContent);
    }"
12710,onPrepareSupportNavigateUpTaskStack,"    public void onPrepareSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        delegate.onPrepareSupportNavigateUpTaskStack(builder);
    }"
12711,onPreparePanel,"    public boolean onPreparePanel(int featureId, View view, Menu menu) {
        return delegate.onPreparePanel(featureId, view, menu);
    }"
12712,onPrepareOptionsPanel,"    public boolean onPrepareOptionsPanel(View view, Menu menu) {
        return delegate.onPrepareOptionsPanel(view, menu);
    }"
12713,onPrepareOptionsMenu,"    public boolean onPrepareOptionsMenu(Menu menu) {
        return delegate.onPrepareOptionsMenu(menu);
    }"
12714,onPrepareNavigateUpTaskStack,"    public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        delegate.onPrepareNavigateUpTaskStack(builder);
    }"
12715,onPrepareDialog,"    public void onPrepareDialog(int id, Dialog dialog, Bundle args) {
        delegate.onPrepareDialog(id, dialog, args);
    }"
12716,onPrepareDialog,"    public void onPrepareDialog(int id, Dialog dialog) {
        delegate.onPrepareDialog(id, dialog);
    }"
12717,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {
        delegate.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig);
    }"
12719,onPanelClosed,"    public void onPanelClosed(int featureId, Menu menu) {
        delegate.onPanelClosed(featureId, menu);
    }"
12722,onNavigateUpFromChild,"    public boolean onNavigateUpFromChild(Activity child) {
        return delegate.onNavigateUpFromChild(child);
    }"
12723,onNavigateUp,"    public boolean onNavigateUp() {
        return delegate.onNavigateUp();
    }"
12724,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig) {
        delegate.onMultiWindowModeChanged(isInMultiWindowMode, newConfig);
    }"
12726,onMenuOpened,"    public boolean onMenuOpened(int featureId, Menu menu) {
        return delegate.onMenuOpened(featureId, menu);
    }"
12728,onLocalVoiceInteractionStopped,"    public void onLocalVoiceInteractionStopped() {
        delegate.onLocalVoiceInteractionStopped();
    }"
12729,onLocalVoiceInteractionStarted,"    public void onLocalVoiceInteractionStarted() {
        delegate.onLocalVoiceInteractionStarted();
    }"
12730,onKeyUp,"    public boolean onKeyUp(int keyCode, KeyEvent event) {
        return delegate.onKeyUp(keyCode, event);
    }"
12731,onKeyShortcut,"    public boolean onKeyShortcut(int keyCode, KeyEvent event) {
        return delegate.onKeyShortcut(keyCode, event);
    }"
12732,onKeyMultiple,"    public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) {
        return delegate.onKeyMultiple(keyCode, repeatCount, event);
    }"
12733,onKeyLongPress,"    public boolean onKeyLongPress(int keyCode, KeyEvent event) {
        return delegate.onKeyLongPress(keyCode, event);
    }"
12734,onKeyDown,"    public boolean onKeyDown(int keyCode, KeyEvent event) {
        return delegate.onKeyDown(keyCode, event);
    }"
12735,onGenericMotionEvent,"    public boolean onGenericMotionEvent(MotionEvent event) {
        return delegate.onGenericMotionEvent(event);
    }"
12736,onEnterAnimationComplete,"    public void onEnterAnimationComplete() {
        delegate.onEnterAnimationComplete();
    }"
12737,onDetachedFromWindow,"    public void onDetachedFromWindow() {
        delegate.onDetachedFromWindow();
    }"
12738,onCreateThumbnail,"    public boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas) {
        return delegate.onCreateThumbnail(outBitmap, canvas);
    }"
12739,onCreateSupportNavigateUpTaskStack,"    public void onCreateSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        delegate.onCreateSupportNavigateUpTaskStack(builder);
    }"
12740,onCreatePanelView,"    public View onCreatePanelView(int featureId) {
        return delegate.onCreatePanelView(featureId);
    }"
12741,onCreatePanelMenu,"    public boolean onCreatePanelMenu(int featureId, Menu menu) {
        return delegate.onCreatePanelMenu(featureId, menu);
    }"
12742,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        return delegate.onCreateOptionsMenu(menu);
    }"
12743,onCreateNavigateUpTaskStack,"    public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        delegate.onCreateNavigateUpTaskStack(builder);
    }"
12744,onCreateDialog,"    public Dialog onCreateDialog(int id, Bundle args) {
        return delegate.onCreateDialog(id, args);
    }"
12745,onCreateDialog,"    public Dialog onCreateDialog(int id) {
        return delegate.onCreateDialog(id);
    }"
12746,onCreateDescription,"    public CharSequence onCreateDescription() {
        return delegate.onCreateDescription();
    }"
12748,onContextMenuClosed,"    public void onContextMenuClosed(Menu menu) {
        delegate.onContextMenuClosed(menu);
    }"
12750,onContentChanged,"    public void onContentChanged() {
        delegate.onContentChanged();
    }"
12752,onChildTitleChanged,"    public void onChildTitleChanged(Activity childActivity, CharSequence title) {
        delegate.onChildTitleChanged(childActivity, title);
    }"
12753,onBackPressed,"    public void onBackPressed() {
        delegate.onBackPressed();
    }"
12754,onAttachedToWindow,"    public void onAttachedToWindow() {
        delegate.onAttachedToWindow();
    }"
12755,onAttachFragment,"    public void onAttachFragment(android.app.Fragment fragment) {
        delegate.onAttachFragment(fragment);
    }"
12756,onAttachFragment,"    public void onAttachFragment(Fragment fragment) {
        delegate.onAttachFragment(fragment);
    }"
12757,onApplyThemeResource,"    public void onApplyThemeResource(Theme theme, int resid, boolean first) {
        delegate.onApplyThemeResource(theme, resid, first);
    }"
12758,onActivityReenter,"    public void onActivityReenter(int resultCode, Intent data) {
        delegate.onActivityReenter(resultCode, data);
    }"
12759,onActionModeStarted,"    public void onActionModeStarted(android.view.ActionMode mode) {
        delegate.onActionModeStarted(mode);
    }"
12760,onActionModeFinished,"    public void onActionModeFinished(android.view.ActionMode mode) {
        delegate.onActionModeFinished(mode);
    }"
12761,navigateUpToFromChild,"    public boolean navigateUpToFromChild(Activity child, Intent upIntent) {
        return delegate.navigateUpToFromChild(child, upIntent);
    }"
12762,navigateUpTo,"    public boolean navigateUpTo(Intent upIntent) {
        return delegate.navigateUpTo(upIntent);
    }"
12763,moveTaskToBack,"    public boolean moveTaskToBack(boolean nonRoot) {
        return delegate.moveTaskToBack(nonRoot);
    }"
12764,moveSharedPreferencesFrom,"    public boolean moveSharedPreferencesFrom(Context sourceContext, String name) {
        return delegate.moveSharedPreferencesFrom(sourceContext, name);
    }"
12765,moveDatabaseFrom,"    public boolean moveDatabaseFrom(Context sourceContext, String name) {
        return delegate.moveDatabaseFrom(sourceContext, name);
    }"
12766,isVoiceInteractionRoot,"    public boolean isVoiceInteractionRoot() {
        return delegate.isVoiceInteractionRoot();
    }"
12767,isVoiceInteraction,"    public boolean isVoiceInteraction() {
        return delegate.isVoiceInteraction();
    }"
12768,isTaskRoot,"    public boolean isTaskRoot() {
        return delegate.isTaskRoot();
    }"
12769,isRestricted,"    public boolean isRestricted() {
        return delegate.isRestricted();
    }"
12770,isLocalVoiceInteractionSupported,"    public boolean isLocalVoiceInteractionSupported() {
        return delegate.isLocalVoiceInteractionSupported();
    }"
12771,isInPictureInPictureMode,"    public boolean isInPictureInPictureMode() {
        return delegate.isInPictureInPictureMode();
    }"
12772,isInMultiWindowMode,"    public boolean isInMultiWindowMode() {
        return delegate.isInMultiWindowMode();
    }"
12774,isImmersive,"    public boolean isImmersive() {
        return delegate.isImmersive();
    }"
12775,isFinishing,"    public boolean isFinishing() {
        return delegate.isFinishing();
    }"
12776,isDeviceProtectedStorage,"    public boolean isDeviceProtectedStorage() {
        return delegate.isDeviceProtectedStorage();
    }"
12777,isDestroyed,"    public boolean isDestroyed() {
        return delegate.isDestroyed();
    }"
12778,isChangingConfigurations,"    public boolean isChangingConfigurations() {
        return delegate.isChangingConfigurations();
    }"
12779,isActivityTransitionRunning,"    public boolean isActivityTransitionRunning() {
        return delegate.isActivityTransitionRunning();
    }"
12780,invalidateOptionsMenu,"    public void invalidateOptionsMenu() {
        delegate.invalidateOptionsMenu();
    }"
12781,hasWindowFocus,"    public boolean hasWindowFocus() {
        return delegate.hasWindowFocus();
    }"
12782,grantUriPermission,"    public void grantUriPermission(String toPackage, Uri uri, int modeFlags) {
        delegate.grantUriPermission(toPackage, uri, modeFlags);
    }"
12787,setWallpaper,"    public void setWallpaper(Bitmap bitmap) throws IOException {
        try {
            delegate.setWallpaper(bitmap);"
12860,finishFromChild,"    public void finishFromChild(Activity child) {
        delegate.finishFromChild(child);
    }"
12861,finishAndRemoveTask,"    public void finishAndRemoveTask() {
        delegate.finishAndRemoveTask();
    }"
12862,finishAfterTransition,"    public void finishAfterTransition() {
        delegate.finishAfterTransition();
    }"
12863,finishAffinity,"    public void finishAffinity() {
        delegate.finishAffinity();
    }"
12864,finishActivityFromChild,"    public void finishActivityFromChild(@NonNull Activity child, int requestCode) {
        delegate.finishActivityFromChild(child, requestCode);
    }"
12865,finishActivity,"    public void finishActivity(int requestCode) {
        delegate.finishActivity(requestCode);
    }"
12866,finish,"    public void finish() {
        delegate.finish();
    }"
12867,findViewById,"    public <T extends View> T findViewById(int id) {
        return delegate.findViewById(id);
    }"
12868,fileList,"    public String[] fileList() {
        return delegate.fileList();
    }"
12869,enterPictureInPictureMode,"    public boolean enterPictureInPictureMode(@NonNull PictureInPictureParams params) {
        return delegate.enterPictureInPictureMode(params);
    }"
12870,enterPictureInPictureMode,"    public void enterPictureInPictureMode() {
        delegate.enterPictureInPictureMode();
    }"
12871,enforceUriPermission,"    public void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags, String message) {
        delegate.enforceUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags, message);"
12872,enforceUriPermission,"    public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) {
        delegate.enforceUriPermission(uri, pid, uid, modeFlags, message);
    }"
12873,enforcePermission,"    public void enforcePermission(String permission, int pid, int uid, String message) {
        delegate.enforcePermission(permission, pid, uid, message);
    }"
12874,enforceCallingUriPermission,"    public void enforceCallingUriPermission(Uri uri, int modeFlags, String message) {
        delegate.enforceCallingUriPermission(uri, modeFlags, message);
    }"
12875,enforceCallingPermission,"    public void enforceCallingPermission(String permission, String message) {
        delegate.enforceCallingPermission(permission, message);
    }"
12876,enforceCallingOrSelfUriPermission,"    public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) {
        delegate.enforceCallingOrSelfUriPermission(uri, modeFlags, message);
    }"
12877,enforceCallingOrSelfPermission,"    public void enforceCallingOrSelfPermission(String permission, String message) {
        delegate.enforceCallingOrSelfPermission(permission, message);
    }"
12879,dispatchTrackballEvent,"    public boolean dispatchTrackballEvent(MotionEvent ev) {
        return delegate.dispatchTrackballEvent(ev);
    }"
12880,dispatchTouchEvent,"    public boolean dispatchTouchEvent(MotionEvent ev) {
        return delegate.dispatchTouchEvent(ev);
    }"
12881,dispatchPopulateAccessibilityEvent,"    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {
        return delegate.dispatchPopulateAccessibilityEvent(event);
    }"
12882,dispatchKeyShortcutEvent,"    public boolean dispatchKeyShortcutEvent(KeyEvent event) {
        return delegate.dispatchKeyShortcutEvent(event);
    }"
12883,dispatchKeyEvent,"    public boolean dispatchKeyEvent(KeyEvent event) {
        return delegate.dispatchKeyEvent(event);
    }"
12884,dispatchGenericMotionEvent,"    public boolean dispatchGenericMotionEvent(MotionEvent ev) {
        return delegate.dispatchGenericMotionEvent(ev);
    }"
12885,deleteSharedPreferences,"    public boolean deleteSharedPreferences(String name) {
        return delegate.deleteSharedPreferences(name);
    }"
12886,deleteFile,"    public boolean deleteFile(String name) {
        return delegate.deleteFile(name);
    }"
12887,deleteDatabase,"    public boolean deleteDatabase(String name) {
        return delegate.deleteDatabase(name);
    }"
12888,databaseList,"    public String[] databaseList() {
        return delegate.databaseList();
    }"
12889,createPendingResult,"    public PendingIntent createPendingResult(int requestCode, @NonNull Intent data, int flags) {
        return delegate.createPendingResult(requestCode, data, flags);
    }"
12890,createPackageContext,"    public Context createPackageContext(String packageName, int flags) throws NameNotFoundException {
        try {
            return delegate.createPackageContext(packageName, flags);"
12891,createDisplayContext,"    public Context createDisplayContext(Display display) {
        return delegate.createDisplayContext(display);
    }"
12892,createDeviceProtectedStorageContext,"    public Context createDeviceProtectedStorageContext() {
        return delegate.createDeviceProtectedStorageContext();
    }"
12893,createContextForSplit,"    public Context createContextForSplit(String splitName) throws NameNotFoundException {
        try {
            return delegate.createContextForSplit(splitName);"
12894,createConfigurationContext,"    public Context createConfigurationContext(Configuration overrideConfiguration) {
        return delegate.createConfigurationContext(overrideConfiguration);
    }"
12895,closeOptionsMenu,"    public void closeOptionsMenu() {
        delegate.closeOptionsMenu();
    }"
12896,closeContextMenu,"    public void closeContextMenu() {
        delegate.closeContextMenu();
    }"
12897,clearWallpaper,"    public void clearWallpaper() throws IOException {
        try {
            delegate.clearWallpaper();"
12898,checkUriPermission,"    public int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags) {
        return delegate.checkUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags);"
12899,checkUriPermission,"    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags) {
        return delegate.checkUriPermission(uri, pid, uid, modeFlags);
    }"
12900,checkSelfPermission,"    public int checkSelfPermission(String permission) {
        return delegate.checkSelfPermission(permission);
    }"
12901,checkPermission,"    public int checkPermission(String permission, int pid, int uid) {
        return delegate.checkPermission(permission, pid, uid);
    }"
12902,checkCallingUriPermission,"    public int checkCallingUriPermission(Uri uri, int modeFlags) {
        return delegate.checkCallingUriPermission(uri, modeFlags);
    }"
12903,checkCallingPermission,"    public int checkCallingPermission(String permission) {
        return delegate.checkCallingPermission(permission);
    }"
12904,checkCallingOrSelfUriPermission,"    public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags) {
        return delegate.checkCallingOrSelfUriPermission(uri, modeFlags);
    }"
12905,checkCallingOrSelfPermission,"    public int checkCallingOrSelfPermission(String permission) {
        return delegate.checkCallingOrSelfPermission(permission);
    }"
12906,bindService,"    public boolean bindService(Intent service, ServiceConnection conn, int flags) {
        return delegate.bindService(service, conn, flags);
    }"
12907,attachBaseContext,"    public void attachBaseContext(Context newBase) {
        delegate.attachBaseContext(newBase);
    }"
12908,applyOverrideConfiguration,"    public void applyOverrideConfiguration(Configuration overrideConfiguration) {
        delegate.applyOverrideConfiguration(overrideConfiguration);
    }"
12909,addPlugin,"    public Removable addPlugin(final ActivityPlugin plugin) {
        return delegate.addPlugin(plugin);
    }"
12910,addContentView,"    public void addContentView(View view, LayoutParams params) {
        delegate.addContentView(view, params);
    }"
12911,addActivityPlugins,"    public List<Removable> addActivityPlugins(@NonNull final Iterable<? extends ActivityPlugin> plugins) {
        final List<Removable> removables = new ArrayList<>();
        for (final ActivityPlugin plugin : plugins) {
            removables.add(delegate.addPlugin(plugin));
        }"
12912,addActivityPlugins,"    public List<Removable> addActivityPlugins(@NonNull final ActivityPlugin... plugins) {
        final List<Removable> removables = new ArrayList<>(plugins.length);
        for (final ActivityPlugin plugin : plugins) {
            removables.add(delegate.addPlugin(plugin));
        }"
12915,onSaveInstanceState,"    public void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {
        delegate.onSaveInstanceState(outState, outPersistentState);
    }"
12916,onSaveInstanceState,"    public void onSaveInstanceState(Bundle outState) {
        delegate.onSaveInstanceState(outState);
    }"
12919,onNewIntent,"    public void onNewIntent(Intent intent) {
        delegate.onNewIntent(intent);
    }"
12920,onPostResume,"    public void onPostResume() {
        delegate.onPostResume();
    }"
12922,onRestart,"    public void onRestart() {
        delegate.onRestart();
    }"
12923,onPostCreate,"    public void onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        delegate.onPostCreate(savedInstanceState, persistentState);
    }"
12924,onPostCreate,"    public void onPostCreate(@Nullable Bundle savedInstanceState) {
        delegate.onPostCreate(savedInstanceState);
    }"
12925,onRestoreInstanceState,"    public void onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState) {
        delegate.onRestoreInstanceState(savedInstanceState, persistentState);
    }"
12926,onRestoreInstanceState,"    public void onRestoreInstanceState(Bundle savedInstanceState) {
        delegate.onRestoreInstanceState(savedInstanceState);
    }"
12927,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        delegate.onActivityResult(requestCode, resultCode, data);
    }"
12929,onCreateView,"    public View onCreateView(String name, Context context, AttributeSet attrs) {
        return delegate.onCreateView(name, context, attrs);
    }"
12930,onCreateView,"    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
        return delegate.onCreateView(parent, name, context, attrs);
    }"
12931,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        delegate.onCreate(savedInstanceState, persistentState);
    }"
12933,unregisterForContextMenu,"    public void unregisterForContextMenu(View view) {
        super.unregisterForContextMenu(view);
    }"
12934,toString,"    public String toString() {
        return super.toString();
    }"
12935,startPostponedEnterTransition,"    public void startPostponedEnterTransition() {
        super.startPostponedEnterTransition();
    }"
12936,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, Bundle options) throws SendIntentException {
        super.startIntentSenderForResult(intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags,"
12937,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) {
        super.startActivityForResult(intent, requestCode, options);
    }"
12938,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode) {
        super.startActivityForResult(intent, requestCode);
    }"
12939,startActivity,"    public void startActivity(Intent intent, @Nullable Bundle options) {
        super.startActivity(intent, options);
    }"
12940,startActivity,"    public void startActivity(Intent intent) {
        super.startActivity(intent);
    }"
12941,shouldShowRequestPermissionRationale,"    public boolean shouldShowRequestPermissionRationale(@NonNull String permission) {
        return super.shouldShowRequestPermissionRationale(permission);
    }"
12950,registerForContextMenu,"    public void registerForContextMenu(View view) {
        super.registerForContextMenu(view);
    }"
12951,postponeEnterTransition,"    public void postponeEnterTransition() {
        super.postponeEnterTransition();
    }"
12952,onPrepareOptionsMenu,"    public void onPrepareOptionsMenu(Menu menu) {
        super.onPrepareOptionsMenu(menu);
    }"
12953,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode);
    }"
12954,onOptionsMenuClosed,"    public void onOptionsMenuClosed(Menu menu) {
        super.onOptionsMenuClosed(menu);
    }"
12955,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        return super.onOptionsItemSelected(item);
    }"
12956,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
        super.onMultiWindowModeChanged(isInMultiWindowMode);
    }"
12957,onLowMemory,"    public void onLowMemory() {
        super.onLowMemory();
    }"
12958,onInflate,"    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
        super.onInflate(activity, attrs, savedInstanceState);
    }"
12959,onInflate,"    public void onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState) {
        super.onInflate(context, attrs, savedInstanceState);
    }"
12960,onHiddenChanged,"    public void onHiddenChanged(boolean hidden) {
        super.onHiddenChanged(hidden);
    }"
12961,onGetLayoutInflater,"    public LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState) {
        return super.onGetLayoutInflater(savedInstanceState);
    }"
12962,onDestroyOptionsMenu,"    public void onDestroyOptionsMenu() {
        super.onDestroyOptionsMenu();
    }"
12963,onCreateOptionsMenu,"    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        super.onCreateOptionsMenu(menu, inflater);
    }"
12964,onCreateContextMenu,"    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        super.onCreateContextMenu(menu, v, menuInfo);
    }"
12965,onCreateAnimator,"    public Animator onCreateAnimator(int transit, boolean enter, int nextAnim) {
        return super.onCreateAnimator(transit, enter, nextAnim);
    }"
12966,onCreateAnimation,"    public Animation onCreateAnimation(int transit, boolean enter, int nextAnim) {
        return super.onCreateAnimation(transit, enter, nextAnim);
    }"
12967,onContextItemSelected,"    public boolean onContextItemSelected(MenuItem item) {
        return super.onContextItemSelected(item);
    }"
12968,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }"
12969,onAttachFragment,"    public void onAttachFragment(Fragment childFragment) {
        super.onAttachFragment(childFragment);
    }"
12996,dump,"    public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) {
        super.dump(prefix, fd, writer, args);
    }"
12997,onRequestPermissionsResult,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);"
12999,onDestroy,"    public void onDestroy() {
        super.onDestroy();
    }"
13000,onDestroyView,"    public void onDestroyView() {
        super.onDestroyView();
    }"
13001,onSaveInstanceState,"    public void onSaveInstanceState(@NonNull Bundle outState) {
        super.onSaveInstanceState(outState);
    }"
13002,onStop,"    public void onStop() {
        super.onStop();
    }"
13003,onPause,"    public void onPause() {
        super.onPause();
    }"
13004,onResume,"    public void onResume() {
        super.onResume();
    }"
13005,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
    }"
13006,onStart,"    public void onStart() {
        super.onStart();
    }"
13007,onViewStateRestored,"    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {
        super.onViewStateRestored(savedInstanceState);
    }"
13008,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
    }"
13010,onCreateView,"    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState) {
        return super.onCreateView(inflater, container, savedInstanceState);"
13011,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }"
13012,onAttach,"    public void onAttach(Activity activity) {
        super.onAttach(activity);
    }"
13013,onAttach,"    public void onAttach(Context context) {
        super.onAttach(context);
    }"
13014,showNow,"    public void showNow(FragmentManager manager, String tag) {
        super.showNow(manager, tag);
    }"
13015,show,"    public int show(FragmentTransaction transaction, String tag) {
        return super.show(transaction, tag);
    }"
13016,show,"    public void show(FragmentManager manager, String tag) {
        super.show(manager, tag);
    }"
13017,setupDialog,"    public void setupDialog(Dialog dialog, int style) {
        super.setupDialog(dialog, style);
    }"
13020,onDismiss,"    public void onDismiss(DialogInterface dialog) {
        super.onDismiss(dialog);
    }"
13021,onCreateDialog,"    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
        return super.onCreateDialog(savedInstanceState);
    }"
13022,onCancel,"    public void onCancel(DialogInterface dialog) {
        super.onCancel(dialog);
    }"
13024,isCancelable,"    public boolean isCancelable() {
        return super.isCancelable();
    }"
13029,dismissAllowingStateLoss,"    public void dismissAllowingStateLoss() {
        super.dismissAllowingStateLoss();
    }"
13030,dismiss,"    public void dismiss() {
        super.dismiss();
    }"
13039,onUserLeaveHint,"    protected void onUserLeaveHint() {
        super.onUserLeaveHint();
    }"
13040,onTitleChanged,"    protected void onTitleChanged(CharSequence title, int color) {
        super.onTitleChanged(title, color);
    }"
13041,onResumeFragments,"    protected void onResumeFragments() {
        super.onResumeFragments();
    }"
13042,onPrepareOptionsPanel,"    protected boolean onPrepareOptionsPanel(View view, Menu menu) {
        return super.onPrepareOptionsPanel(view, menu);
    }"
13043,onPrepareDialog,"    protected void onPrepareDialog(int id, Dialog dialog, Bundle args) {
        super.onPrepareDialog(id, dialog, args);
    }"
13044,onPrepareDialog,"    protected void onPrepareDialog(int id, Dialog dialog) {
        super.onPrepareDialog(id, dialog);
    }"
13045,onCreateDialog,"    protected Dialog onCreateDialog(int id, Bundle args) {
        return super.onCreateDialog(id, args);
    }"
13046,onCreateDialog,"    protected Dialog onCreateDialog(int id) {
        return super.onCreateDialog(id);
    }"
13047,onChildTitleChanged,"    protected void onChildTitleChanged(Activity childActivity, CharSequence title) {
        super.onChildTitleChanged(childActivity, title);
    }"
13048,onApplyThemeResource,"    protected void onApplyThemeResource(Theme theme, int resid, boolean first) {
        super.onApplyThemeResource(theme, resid, first);
    }"
13049,attachBaseContext,"    protected void attachBaseContext(Context newBase) {
        super.attachBaseContext(newBase);
    }"
13050,unregisterReceiver,"    public void unregisterReceiver(BroadcastReceiver receiver) {
        super.unregisterReceiver(receiver);
    }"
13052,unregisterComponentCallbacks,"    public void unregisterComponentCallbacks(ComponentCallbacks callback) {
        super.unregisterComponentCallbacks(callback);
    }"
13053,unbindService,"    public void unbindService(ServiceConnection conn) {
        super.unbindService(conn);
    }"
13054,triggerSearch,"    public void triggerSearch(String query, @Nullable Bundle appSearchData) {
        super.triggerSearch(query, appSearchData);
    }"
13055,takeKeyEvents,"    public void takeKeyEvents(boolean get) {
        super.takeKeyEvents(get);
    }"
13056,supportStartPostponedEnterTransition,"    public void supportStartPostponedEnterTransition() {
        super.supportStartPostponedEnterTransition();
    }"
13057,supportShouldUpRecreateTask,"    public boolean supportShouldUpRecreateTask(@NonNull Intent targetIntent) {
        return super.supportShouldUpRecreateTask(targetIntent);
    }"
13058,supportRequestWindowFeature,"    public boolean supportRequestWindowFeature(int featureId) {
        return super.supportRequestWindowFeature(featureId);
    }"
13059,supportPostponeEnterTransition,"    public void supportPostponeEnterTransition() {
        super.supportPostponeEnterTransition();
    }"
13060,supportNavigateUpTo,"    public void supportNavigateUpTo(@NonNull Intent upIntent) {
        super.supportNavigateUpTo(upIntent);
    }"
13061,supportInvalidateOptionsMenu,"    public void supportInvalidateOptionsMenu() {
        super.supportInvalidateOptionsMenu();
    }"
13062,supportFinishAfterTransition,"    public void supportFinishAfterTransition() {
        super.supportFinishAfterTransition();
    }"
13063,superDispatchKeyEvent,"    public boolean superDispatchKeyEvent(KeyEvent event) {
        return super.superDispatchKeyEvent(event);
    }"
13064,stopService,"    public boolean stopService(Intent name) {
        return super.stopService(name);
    }"
13065,stopManagingCursor,"    public void stopManagingCursor(Cursor c) {
        super.stopManagingCursor(c);
    }"
13066,stopLockTask,"    public void stopLockTask() {
        super.stopLockTask();
    }"
13067,stopLocalVoiceInteraction,"    public void stopLocalVoiceInteraction() {
        super.stopLocalVoiceInteraction();
    }"
13068,startSupportActionMode,"    public ActionMode startSupportActionMode(@NonNull Callback callback) {
        return super.startSupportActionMode(callback);
    }"
13069,startService,"    public ComponentName startService(Intent service) {
        return super.startService(service);
    }"
13070,startSearch,"    public void startSearch(@Nullable String initialQuery, boolean selectInitialQuery, @Nullable Bundle appSearchData,
            boolean globalSearch) {
        super.startSearch(initialQuery, selectInitialQuery, appSearchData, globalSearch);"
13072,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent, @Nullable Bundle options) {
        return super.startNextMatchingActivity(intent, options);
    }"
13073,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent) {
        return super.startNextMatchingActivity(intent);
    }"
13074,startManagingCursor,"    public void startManagingCursor(Cursor c) {
        super.startManagingCursor(c);
    }"
13075,startLockTask,"    public void startLockTask() {
        super.startLockTask();
    }"
13076,startLocalVoiceInteraction,"    public void startLocalVoiceInteraction(Bundle privateOptions) {
        super.startLocalVoiceInteraction(privateOptions);
    }"
13078,startIntentSenderFromChild,"    public void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, @Nullable Bundle options) throws SendIntentException {
        super.startIntentSenderFromChild(child, intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags,"
13079,startIntentSenderFromChild,"    public void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        super.startIntentSenderFromChild(child, intent, requestCode, fillInIntent, flagsMask, flagsValues,"
13081,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        super.startIntentSenderForResult(intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags);"
13082,startIntentSender,"    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags, Bundle options) throws SendIntentException {
        super.startIntentSender(intent, fillInIntent, flagsMask, flagsValues, extraFlags, options);"
13083,startIntentSender,"    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags) throws SendIntentException {
        super.startIntentSender(intent, fillInIntent, flagsMask, flagsValues, extraFlags);"
13084,startInstrumentation,"    public boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments) {
        return super.startInstrumentation(className, profileFile, arguments);
    }"
13085,startForegroundService,"    public ComponentName startForegroundService(Intent service) {
        return super.startForegroundService(service);
    }"
13086,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode, @Nullable Bundle options) {
        return super.startActivityIfNeeded(intent, requestCode, options);
    }"
13087,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode) {
        return super.startActivityIfNeeded(intent, requestCode);
    }"
13088,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        super.startActivityFromFragment(fragment, intent, requestCode, options);"
13089,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode) {
        super.startActivityFromFragment(fragment, intent, requestCode);
    }"
13090,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        super.startActivityFromFragment(fragment, intent, requestCode, options);"
13091,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode) {
        super.startActivityFromFragment(fragment, intent, requestCode);
    }"
13092,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode,
            @Nullable Bundle options) {
        super.startActivityFromChild(child, intent, requestCode, options);"
13093,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode) {
        super.startActivityFromChild(child, intent, requestCode);
    }"
13098,startActivities,"    public void startActivities(Intent[] intents, @Nullable Bundle options) {
        super.startActivities(intents, options);
    }"
13099,startActivities,"    public void startActivities(Intent[] intents) {
        super.startActivities(intents);
    }"
13100,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback, int type) {
        return super.startActionMode(callback, type);
    }"
13101,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback) {
        return super.startActionMode(callback);
    }"
13102,showLockTaskEscapeMessage,"    public void showLockTaskEscapeMessage() {
        super.showLockTaskEscapeMessage();
    }"
13103,showAssist,"    public boolean showAssist(Bundle args) {
        return super.showAssist(args);
    }"
13104,shouldUpRecreateTask,"    public boolean shouldUpRecreateTask(Intent targetIntent) {
        return super.shouldUpRecreateTask(targetIntent);
    }"
13106,setWallpaper,"    public void setWallpaper(Bitmap bitmap) throws IOException {
        super.setWallpaper(bitmap);
    }"
13107,setVrModeEnabled,"    public void setVrModeEnabled(boolean enabled, @NonNull ComponentName requestedComponent)
            throws NameNotFoundException {
        super.setVrModeEnabled(enabled, requestedComponent);"
13128,sendStickyOrderedBroadcastAsUser,"    public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        super.sendStickyOrderedBroadcastAsUser(intent, user, resultReceiver, scheduler, initialCode, initialData,"
13129,sendStickyOrderedBroadcast,"    public void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler,
            int initialCode, String initialData, Bundle initialExtras) {
        super.sendStickyOrderedBroadcast(intent, resultReceiver, scheduler, initialCode, initialData, initialExtras);"
13130,sendStickyBroadcastAsUser,"    public void sendStickyBroadcastAsUser(Intent intent, UserHandle user) {
        super.sendStickyBroadcastAsUser(intent, user);
    }"
13131,sendStickyBroadcast,"    public void sendStickyBroadcast(Intent intent) {
        super.sendStickyBroadcast(intent);
    }"
13133,sendOrderedBroadcast,"    public void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        super.sendOrderedBroadcast(intent, receiverPermission, resultReceiver, scheduler, initialCode, initialData,"
13134,sendOrderedBroadcast,"    public void sendOrderedBroadcast(Intent intent, String receiverPermission) {
        super.sendOrderedBroadcast(intent, receiverPermission);
    }"
13135,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) {
        super.sendBroadcastAsUser(intent, user, receiverPermission);
    }"
13136,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user) {
        super.sendBroadcastAsUser(intent, user);
    }"
13137,sendBroadcast,"    public void sendBroadcast(Intent intent, String receiverPermission) {
        super.sendBroadcast(intent, receiverPermission);
    }"
13138,sendBroadcast,"    public void sendBroadcast(Intent intent) {
        super.sendBroadcast(intent);
    }"
13139,revokeUriPermission,"    public void revokeUriPermission(String targetPackage, Uri uri, int modeFlags) {
        super.revokeUriPermission(targetPackage, uri, modeFlags);
    }"
13140,revokeUriPermission,"    public void revokeUriPermission(Uri uri, int modeFlags) {
        super.revokeUriPermission(uri, modeFlags);
    }"
13141,requestVisibleBehind,"    public boolean requestVisibleBehind(boolean visible) {
        return super.requestVisibleBehind(visible);
    }"
13142,requestDragAndDropPermissions,"    public DragAndDropPermissions requestDragAndDropPermissions(DragEvent event) {
        return super.requestDragAndDropPermissions(event);
    }"
13143,reportFullyDrawn,"    public void reportFullyDrawn() {
        super.reportFullyDrawn();
    }"
13144,removeStickyBroadcastAsUser,"    public void removeStickyBroadcastAsUser(Intent intent, UserHandle user) {
        super.removeStickyBroadcastAsUser(intent, user);
    }"
13145,removeStickyBroadcast,"    public void removeStickyBroadcast(Intent intent) {
        super.removeStickyBroadcast(intent);
    }"
13146,releaseInstance,"    public boolean releaseInstance() {
        return super.releaseInstance();
    }"
13147,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler, int flags) {
        return super.registerReceiver(receiver, filter, broadcastPermission, scheduler, flags);"
13148,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler) {
        return super.registerReceiver(receiver, filter, broadcastPermission, scheduler);"
13149,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags) {
        return super.registerReceiver(receiver, filter, flags);
    }"
13150,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {
        return super.registerReceiver(receiver, filter);
    }"
13152,registerComponentCallbacks,"    public void registerComponentCallbacks(ComponentCallbacks callback) {
        super.registerComponentCallbacks(callback);
    }"
13153,recreate,"    public void recreate() {
        super.recreate();
    }"
13154,putExtraData,"    public void putExtraData(ExtraData extraData) {
        super.putExtraData(extraData);
    }"
13156,peekWallpaper,"    public Drawable peekWallpaper() {
        return super.peekWallpaper();
    }"
13157,overridePendingTransition,"    public void overridePendingTransition(int enterAnim, int exitAnim) {
        super.overridePendingTransition(enterAnim, exitAnim);
    }"
13158,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory,
            DatabaseErrorHandler errorHandler) {
        return super.openOrCreateDatabase(name, mode, factory, errorHandler);"
13159,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory) {
        return super.openOrCreateDatabase(name, mode, factory);
    }"
13160,openOptionsMenu,"    public void openOptionsMenu() {
        super.openOptionsMenu();
    }"
13161,openFileOutput,"    public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException {
        return super.openFileOutput(name, mode);
    }"
13162,openFileInput,"    public FileInputStream openFileInput(String name) throws FileNotFoundException {
        return super.openFileInput(name);
    }"
13163,openContextMenu,"    public void openContextMenu(View view) {
        super.openContextMenu(view);
    }"
13164,onWindowStartingSupportActionMode,"    public ActionMode onWindowStartingSupportActionMode(@NonNull Callback callback) {
        return super.onWindowStartingSupportActionMode(callback);
    }"
13165,onWindowStartingActionMode,"    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback, int type) {
        return super.onWindowStartingActionMode(callback, type);
    }"
13166,onWindowStartingActionMode,"    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback) {
        return super.onWindowStartingActionMode(callback);
    }"
13167,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
    }"
13168,onWindowAttributesChanged,"    public void onWindowAttributesChanged(WindowManager.LayoutParams params) {
        super.onWindowAttributesChanged(params);
    }"
13169,onVisibleBehindCanceled,"    public void onVisibleBehindCanceled() {
        super.onVisibleBehindCanceled();
    }"
13170,onUserInteraction,"    public void onUserInteraction() {
        super.onUserInteraction();
    }"
13171,onTrimMemory,"    public void onTrimMemory(int level) {
        super.onTrimMemory(level);
    }"
13172,onTrackballEvent,"    public boolean onTrackballEvent(MotionEvent event) {
        return super.onTrackballEvent(event);
    }"
13173,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        return super.onTouchEvent(event);
    }"
13174,onSupportNavigateUp,"    public boolean onSupportNavigateUp() {
        return super.onSupportNavigateUp();
    }"
13175,onSupportContentChanged,"    public void onSupportContentChanged() {
        super.onSupportContentChanged();
    }"
13176,onSupportActionModeStarted,"    public void onSupportActionModeStarted(@NonNull ActionMode mode) {
        super.onSupportActionModeStarted(mode);
    }"
13177,onSupportActionModeFinished,"    public void onSupportActionModeFinished(@NonNull ActionMode mode) {
        super.onSupportActionModeFinished(mode);
    }"
13178,onStateNotSaved,"    public void onStateNotSaved() {
        super.onStateNotSaved();
    }"
13179,onSearchRequested,"    public boolean onSearchRequested() {
        return super.onSearchRequested();
    }"
13180,onSearchRequested,"    public boolean onSearchRequested(@Nullable SearchEvent searchEvent) {
        return super.onSearchRequested(searchEvent);
    }"
13181,onRetainCustomNonConfigurationInstance,"    public Object onRetainCustomNonConfigurationInstance() {
        return super.onRetainCustomNonConfigurationInstance();
    }"
13182,onProvideReferrer,"    public Uri onProvideReferrer() {
        return super.onProvideReferrer();
    }"
13183,onProvideKeyboardShortcuts,"    public void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {
        super.onProvideKeyboardShortcuts(data, menu, deviceId);
    }"
13184,onProvideAssistData,"    public void onProvideAssistData(Bundle data) {
        super.onProvideAssistData(data);
    }"
13185,onProvideAssistContent,"    public void onProvideAssistContent(AssistContent outContent) {
        super.onProvideAssistContent(outContent);
    }"
13186,onPrepareSupportNavigateUpTaskStack,"    public void onPrepareSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        super.onPrepareSupportNavigateUpTaskStack(builder);
    }"
13187,onPreparePanel,"    public boolean onPreparePanel(int featureId, View view, Menu menu) {
        return super.onPreparePanel(featureId, view, menu);
    }"
13188,onPrepareOptionsMenu,"    public boolean onPrepareOptionsMenu(Menu menu) {
        return super.onPrepareOptionsMenu(menu);
    }"
13189,onPrepareNavigateUpTaskStack,"    public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        super.onPrepareNavigateUpTaskStack(builder);
    }"
13190,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig);
    }"
13192,onPanelClosed,"    public void onPanelClosed(int featureId, Menu menu) {
        super.onPanelClosed(featureId, menu);
    }"
13195,onNavigateUpFromChild,"    public boolean onNavigateUpFromChild(Activity child) {
        return super.onNavigateUpFromChild(child);
    }"
13196,onNavigateUp,"    public boolean onNavigateUp() {
        return super.onNavigateUp();
    }"
13197,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig) {
        super.onMultiWindowModeChanged(isInMultiWindowMode, newConfig);
    }"
13199,onMenuOpened,"    public boolean onMenuOpened(int featureId, Menu menu) {
        return super.onMenuOpened(featureId, menu);
    }"
13201,onLocalVoiceInteractionStopped,"    public void onLocalVoiceInteractionStopped() {
        super.onLocalVoiceInteractionStopped();
    }"
13202,onLocalVoiceInteractionStarted,"    public void onLocalVoiceInteractionStarted() {
        super.onLocalVoiceInteractionStarted();
    }"
13203,onKeyUp,"    public boolean onKeyUp(int keyCode, KeyEvent event) {
        return super.onKeyUp(keyCode, event);
    }"
13204,onKeyShortcut,"    public boolean onKeyShortcut(int keyCode, KeyEvent event) {
        return super.onKeyShortcut(keyCode, event);
    }"
13205,onKeyMultiple,"    public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) {
        return super.onKeyMultiple(keyCode, repeatCount, event);
    }"
13206,onKeyLongPress,"    public boolean onKeyLongPress(int keyCode, KeyEvent event) {
        return super.onKeyLongPress(keyCode, event);
    }"
13207,onKeyDown,"    public boolean onKeyDown(int keyCode, KeyEvent event) {
        return super.onKeyDown(keyCode, event);
    }"
13208,onGenericMotionEvent,"    public boolean onGenericMotionEvent(MotionEvent event) {
        return super.onGenericMotionEvent(event);
    }"
13209,onEnterAnimationComplete,"    public void onEnterAnimationComplete() {
        super.onEnterAnimationComplete();
    }"
13210,onDetachedFromWindow,"    public void onDetachedFromWindow() {
        super.onDetachedFromWindow();
    }"
13211,onCreateThumbnail,"    public boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas) {
        return super.onCreateThumbnail(outBitmap, canvas);
    }"
13212,onCreateSupportNavigateUpTaskStack,"    public void onCreateSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        super.onCreateSupportNavigateUpTaskStack(builder);
    }"
13213,onCreatePanelView,"    public View onCreatePanelView(int featureId) {
        return super.onCreatePanelView(featureId);
    }"
13214,onCreatePanelMenu,"    public boolean onCreatePanelMenu(int featureId, Menu menu) {
        return super.onCreatePanelMenu(featureId, menu);
    }"
13216,onCreateNavigateUpTaskStack,"    public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        super.onCreateNavigateUpTaskStack(builder);
    }"
13217,onCreateDescription,"    public CharSequence onCreateDescription() {
        return super.onCreateDescription();
    }"
13219,onContextMenuClosed,"    public void onContextMenuClosed(Menu menu) {
        super.onContextMenuClosed(menu);
    }"
13221,onContentChanged,"    public void onContentChanged() {
        super.onContentChanged();
    }"
13223,onBackPressed,"    public void onBackPressed() {
        super.onBackPressed();
    }"
13224,onAttachedToWindow,"    public void onAttachedToWindow() {
        super.onAttachedToWindow();
    }"
13225,onAttachFragment,"    public void onAttachFragment(android.app.Fragment fragment) {
        super.onAttachFragment(fragment);
    }"
13226,onAttachFragment,"    public void onAttachFragment(Fragment fragment) {
        super.onAttachFragment(fragment);
    }"
13227,onActivityReenter,"    public void onActivityReenter(int resultCode, Intent data) {
        super.onActivityReenter(resultCode, data);
    }"
13228,onActionModeStarted,"    public void onActionModeStarted(android.view.ActionMode mode) {
        super.onActionModeStarted(mode);
    }"
13229,onActionModeFinished,"    public void onActionModeFinished(android.view.ActionMode mode) {
        super.onActionModeFinished(mode);
    }"
13230,navigateUpToFromChild,"    public boolean navigateUpToFromChild(Activity child, Intent upIntent) {
        return super.navigateUpToFromChild(child, upIntent);
    }"
13231,navigateUpTo,"    public boolean navigateUpTo(Intent upIntent) {
        return super.navigateUpTo(upIntent);
    }"
13232,moveTaskToBack,"    public boolean moveTaskToBack(boolean nonRoot) {
        return super.moveTaskToBack(nonRoot);
    }"
13233,moveSharedPreferencesFrom,"    public boolean moveSharedPreferencesFrom(Context sourceContext, String name) {
        return super.moveSharedPreferencesFrom(sourceContext, name);
    }"
13234,moveDatabaseFrom,"    public boolean moveDatabaseFrom(Context sourceContext, String name) {
        return super.moveDatabaseFrom(sourceContext, name);
    }"
13235,isVoiceInteractionRoot,"    public boolean isVoiceInteractionRoot() {
        return super.isVoiceInteractionRoot();
    }"
13236,isVoiceInteraction,"    public boolean isVoiceInteraction() {
        return super.isVoiceInteraction();
    }"
13237,isTaskRoot,"    public boolean isTaskRoot() {
        return super.isTaskRoot();
    }"
13238,isRestricted,"    public boolean isRestricted() {
        return super.isRestricted();
    }"
13239,isLocalVoiceInteractionSupported,"    public boolean isLocalVoiceInteractionSupported() {
        return super.isLocalVoiceInteractionSupported();
    }"
13240,isInPictureInPictureMode,"    public boolean isInPictureInPictureMode() {
        return super.isInPictureInPictureMode();
    }"
13241,isInMultiWindowMode,"    public boolean isInMultiWindowMode() {
        return super.isInMultiWindowMode();
    }"
13243,isImmersive,"    public boolean isImmersive() {
        return super.isImmersive();
    }"
13244,isFinishing,"    public boolean isFinishing() {
        return super.isFinishing();
    }"
13245,isDeviceProtectedStorage,"    public boolean isDeviceProtectedStorage() {
        return super.isDeviceProtectedStorage();
    }"
13246,isDestroyed,"    public boolean isDestroyed() {
        return super.isDestroyed();
    }"
13247,isChangingConfigurations,"    public boolean isChangingConfigurations() {
        return super.isChangingConfigurations();
    }"
13248,isActivityTransitionRunning,"    public boolean isActivityTransitionRunning() {
        return super.isActivityTransitionRunning();
    }"
13249,invalidateOptionsMenu,"    public void invalidateOptionsMenu() {
        super.invalidateOptionsMenu();
    }"
13250,hasWindowFocus,"    public boolean hasWindowFocus() {
        return super.hasWindowFocus();
    }"
13251,grantUriPermission,"    public void grantUriPermission(String toPackage, Uri uri, int modeFlags) {
        super.grantUriPermission(toPackage, uri, modeFlags);
    }"
13256,setWallpaper,"    public void setWallpaper(InputStream data) throws IOException {
        super.setWallpaper(data);
    }"
13328,finishFromChild,"    public void finishFromChild(Activity child) {
        super.finishFromChild(child);
    }"
13329,finishAndRemoveTask,"    public void finishAndRemoveTask() {
        super.finishAndRemoveTask();
    }"
13330,finishAfterTransition,"    public void finishAfterTransition() {
        super.finishAfterTransition();
    }"
13331,finishAffinity,"    public void finishAffinity() {
        super.finishAffinity();
    }"
13332,finishActivityFromChild,"    public void finishActivityFromChild(@NonNull Activity child, int requestCode) {
        super.finishActivityFromChild(child, requestCode);
    }"
13333,finishActivity,"    public void finishActivity(int requestCode) {
        super.finishActivity(requestCode);
    }"
13334,finish,"    public void finish() {
        super.finish();
    }"
13335,findViewById,"    public <T extends View> T findViewById(int id) {
        return super.findViewById(id);
    }"
13336,fileList,"    public String[] fileList() {
        return super.fileList();
    }"
13337,enterPictureInPictureMode,"    public boolean enterPictureInPictureMode(@NonNull PictureInPictureParams params) {
        return super.enterPictureInPictureMode(params);
    }"
13338,enterPictureInPictureMode,"    public void enterPictureInPictureMode() {
        super.enterPictureInPictureMode();
    }"
13339,enforceUriPermission,"    public void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags, String message) {
        super.enforceUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags, message);"
13340,enforceUriPermission,"    public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) {
        super.enforceUriPermission(uri, pid, uid, modeFlags, message);
    }"
13341,enforcePermission,"    public void enforcePermission(String permission, int pid, int uid, String message) {
        super.enforcePermission(permission, pid, uid, message);
    }"
13342,enforceCallingUriPermission,"    public void enforceCallingUriPermission(Uri uri, int modeFlags, String message) {
        super.enforceCallingUriPermission(uri, modeFlags, message);
    }"
13343,enforceCallingPermission,"    public void enforceCallingPermission(String permission, String message) {
        super.enforceCallingPermission(permission, message);
    }"
13344,enforceCallingOrSelfUriPermission,"    public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) {
        super.enforceCallingOrSelfUriPermission(uri, modeFlags, message);
    }"
13345,enforceCallingOrSelfPermission,"    public void enforceCallingOrSelfPermission(String permission, String message) {
        super.enforceCallingOrSelfPermission(permission, message);
    }"
13347,dispatchTrackballEvent,"    public boolean dispatchTrackballEvent(MotionEvent ev) {
        return super.dispatchTrackballEvent(ev);
    }"
13348,dispatchTouchEvent,"    public boolean dispatchTouchEvent(MotionEvent ev) {
        return super.dispatchTouchEvent(ev);
    }"
13349,dispatchPopulateAccessibilityEvent,"    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {
        return super.dispatchPopulateAccessibilityEvent(event);
    }"
13350,dispatchKeyShortcutEvent,"    public boolean dispatchKeyShortcutEvent(KeyEvent event) {
        return super.dispatchKeyShortcutEvent(event);
    }"
13351,dispatchKeyEvent,"    public boolean dispatchKeyEvent(KeyEvent event) {
        return super.dispatchKeyEvent(event);
    }"
13352,dispatchGenericMotionEvent,"    public boolean dispatchGenericMotionEvent(MotionEvent ev) {
        return super.dispatchGenericMotionEvent(ev);
    }"
13353,deleteSharedPreferences,"    public boolean deleteSharedPreferences(String name) {
        return super.deleteSharedPreferences(name);
    }"
13354,deleteFile,"    public boolean deleteFile(String name) {
        return super.deleteFile(name);
    }"
13355,deleteDatabase,"    public boolean deleteDatabase(String name) {
        return super.deleteDatabase(name);
    }"
13356,databaseList,"    public String[] databaseList() {
        return super.databaseList();
    }"
13357,createPendingResult,"    public PendingIntent createPendingResult(int requestCode, @NonNull Intent data, int flags) {
        return super.createPendingResult(requestCode, data, flags);
    }"
13358,createPackageContext,"    public Context createPackageContext(String packageName, int flags) throws NameNotFoundException {
        return super.createPackageContext(packageName, flags);
    }"
13359,createDisplayContext,"    public Context createDisplayContext(Display display) {
        return super.createDisplayContext(display);
    }"
13360,createDeviceProtectedStorageContext,"    public Context createDeviceProtectedStorageContext() {
        return super.createDeviceProtectedStorageContext();
    }"
13361,createContextForSplit,"    public Context createContextForSplit(String splitName) throws NameNotFoundException {
        return super.createContextForSplit(splitName);
    }"
13362,createConfigurationContext,"    public Context createConfigurationContext(Configuration overrideConfiguration) {
        return super.createConfigurationContext(overrideConfiguration);
    }"
13363,closeOptionsMenu,"    public void closeOptionsMenu() {
        super.closeOptionsMenu();
    }"
13364,closeContextMenu,"    public void closeContextMenu() {
        super.closeContextMenu();
    }"
13365,clearWallpaper,"    public void clearWallpaper() throws IOException {
        super.clearWallpaper();
    }"
13366,checkUriPermission,"    public int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags) {
        return super.checkUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags);"
13367,checkUriPermission,"    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags) {
        return super.checkUriPermission(uri, pid, uid, modeFlags);
    }"
13368,checkSelfPermission,"    public int checkSelfPermission(String permission) {
        return super.checkSelfPermission(permission);
    }"
13369,checkPermission,"    public int checkPermission(String permission, int pid, int uid) {
        return super.checkPermission(permission, pid, uid);
    }"
13370,checkCallingUriPermission,"    public int checkCallingUriPermission(Uri uri, int modeFlags) {
        return super.checkCallingUriPermission(uri, modeFlags);
    }"
13371,checkCallingPermission,"    public int checkCallingPermission(String permission) {
        return super.checkCallingPermission(permission);
    }"
13372,checkCallingOrSelfUriPermission,"    public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags) {
        return super.checkCallingOrSelfUriPermission(uri, modeFlags);
    }"
13373,checkCallingOrSelfPermission,"    public int checkCallingOrSelfPermission(String permission) {
        return super.checkCallingOrSelfPermission(permission);
    }"
13374,bindService,"    public boolean bindService(Intent service, ServiceConnection conn, int flags) {
        return super.bindService(service, conn, flags);
    }"
13375,applyOverrideConfiguration,"    public void applyOverrideConfiguration(Configuration overrideConfiguration) {
        super.applyOverrideConfiguration(overrideConfiguration);
    }"
13376,addContentView,"    public void addContentView(View view, LayoutParams params) {
        super.addContentView(view, params);
    }"
13379,onSaveInstanceState,"    public void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {
        super.onSaveInstanceState(outState, outPersistentState);
    }"
13380,onSaveInstanceState,"    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
    }"
13381,onStop,"    protected void onStop() {
        super.onStop();
    }"
13382,onPause,"    protected void onPause() {
        super.onPause();
    }"
13383,onNewIntent,"    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
    }"
13384,onPostResume,"    protected void onPostResume() {
        super.onPostResume();
    }"
13385,onResume,"    protected void onResume() {
        super.onResume();
    }"
13386,onRestart,"    protected void onRestart() {
        super.onRestart();
    }"
13387,onPostCreate,"    public void onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        super.onPostCreate(savedInstanceState, persistentState);
    }"
13388,onPostCreate,"    protected void onPostCreate(@Nullable Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);
    }"
13389,onRestoreInstanceState,"    public void onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState) {
        super.onRestoreInstanceState(savedInstanceState, persistentState);
    }"
13390,onRestoreInstanceState,"    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
    }"
13391,onActivityResult,"    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
    }"
13392,onStart,"    protected void onStart() {
        super.onStart();
    }"
13393,onCreateView,"    public View onCreateView(String name, Context context, AttributeSet attrs) {
        return super.onCreateView(name, context, attrs);
    }"
13394,onCreateView,"    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
        return super.onCreateView(parent, name, context, attrs);
    }"
13395,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        super.onCreate(savedInstanceState, persistentState);
    }"
13396,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }"
13397,onResume,"    public void onResume() {
        super.onResume();
        Log.v(TAG, ""#2 onResume()"");
    }"
13398,onResume,"    public void onResume() {
        super.onResume();
        Log.v(TAG, ""#1 onResume()"");
    }"
13399,unregisterReceiver,"    void unregisterReceiver(final CallVoid1<BroadcastReceiver> superCall, BroadcastReceiver receiver) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13401,unregisterComponentCallbacks,"    void unregisterComponentCallbacks(final CallVoid1<ComponentCallbacks> superCall, ComponentCallbacks callback) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13402,unbindService,"    void unbindService(final CallVoid1<ServiceConnection> superCall, ServiceConnection conn) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13403,triggerSearch,"    void triggerSearch(final CallVoid2<String, Bundle> superCall, String query, @Nullable Bundle appSearchData) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13404,takeKeyEvents,"    void takeKeyEvents(final CallVoid1<Boolean> superCall, boolean get) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13405,supportStartPostponedEnterTransition,"    void supportStartPostponedEnterTransition(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13406,supportShouldUpRecreateTask,"    boolean supportShouldUpRecreateTask(final CallFun1<Boolean, Intent> superCall, @NonNull Intent targetIntent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13407,supportRequestWindowFeature,"    boolean supportRequestWindowFeature(final CallFun1<Boolean, Integer> superCall, int featureId) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13408,supportPostponeEnterTransition,"    void supportPostponeEnterTransition(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13409,supportNavigateUpTo,"    void supportNavigateUpTo(final CallVoid1<Intent> superCall, @NonNull Intent upIntent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13410,supportInvalidateOptionsMenu,"    void supportInvalidateOptionsMenu(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13411,supportFinishAfterTransition,"    void supportFinishAfterTransition(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13412,superDispatchKeyEvent,"    boolean superDispatchKeyEvent(final CallFun1<Boolean, KeyEvent> superCall, KeyEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13413,stopService,"    boolean stopService(final CallFun1<Boolean, Intent> superCall, Intent name) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13414,stopManagingCursor,"    void stopManagingCursor(final CallVoid1<Cursor> superCall, Cursor c) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13415,stopLockTask,"    void stopLockTask(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13416,stopLocalVoiceInteraction,"    void stopLocalVoiceInteraction(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13417,startSupportActionMode,"    ActionMode startSupportActionMode(final CallFun1<ActionMode, Callback> superCall, @NonNull Callback callback) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13418,startService,"    ComponentName startService(final CallFun1<ComponentName, Intent> superCall, Intent service) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13419,startSearch,"    void startSearch(final CallVoid4<String, Boolean, Bundle, Boolean> superCall, @Nullable String initialQuery,
            boolean selectInitialQuery, @Nullable Bundle appSearchData, boolean globalSearch) {
        synchronized (mSuperListeners) {"
13421,startNextMatchingActivity,"    boolean startNextMatchingActivity(final CallFun2<Boolean, Intent, Bundle> superCall, @NonNull Intent intent,
            @Nullable Bundle options) {
        synchronized (mSuperListeners) {"
13422,startNextMatchingActivity,"    boolean startNextMatchingActivity(final CallFun1<Boolean, Intent> superCall, @NonNull Intent intent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13423,startManagingCursor,"    void startManagingCursor(final CallVoid1<Cursor> superCall, Cursor c) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13424,startLockTask,"    void startLockTask(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13425,startLocalVoiceInteraction,"    void startLocalVoiceInteraction(final CallVoid1<Bundle> superCall, Bundle privateOptions) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13426,startIntentSenderFromFragment,"    void startIntentSenderFromFragment(
            final CallVoid8<Fragment, IntentSender, Integer, Intent, Integer, Integer, Integer, Bundle> superCall,
            Fragment fragment, IntentSender intent, int requestCode, @Nullable Intent fillInIntent, int flagsMask,"
13427,startIntentSenderFromChild,"    void startIntentSenderFromChild(
            final CallVoid8<Activity, IntentSender, Integer, Intent, Integer, Integer, Integer, Bundle> superCall,
            Activity child, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues,"
13428,startIntentSenderFromChild,"    void startIntentSenderFromChild(
            final CallVoid7<Activity, IntentSender, Integer, Intent, Integer, Integer, Integer> superCall,
            Activity child, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues,"
13430,startIntentSenderForResult,"    void startIntentSenderForResult(
            final CallVoid6<IntentSender, Integer, Intent, Integer, Integer, Integer> superCall, IntentSender intent,
            int requestCode, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)"
13431,startIntentSender,"    void startIntentSender(final CallVoid6<IntentSender, Intent, Integer, Integer, Integer, Bundle> superCall,
            IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags,
            Bundle options) throws SendIntentException {"
13432,startIntentSender,"    void startIntentSender(final CallVoid5<IntentSender, Intent, Integer, Integer, Integer> superCall,
            IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)
            throws SendIntentException {"
13433,startInstrumentation,"    boolean startInstrumentation(final CallFun3<Boolean, ComponentName, String, Bundle> superCall,
            ComponentName className, String profileFile, Bundle arguments) {
        synchronized (mSuperListeners) {"
13434,startForegroundService,"    ComponentName startForegroundService(final CallFun1<ComponentName, Intent> superCall, Intent service) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13435,startActivityIfNeeded,"    boolean startActivityIfNeeded(final CallFun3<Boolean, Intent, Integer, Bundle> superCall, @NonNull Intent intent,
            int requestCode, @Nullable Bundle options) {
        synchronized (mSuperListeners) {"
13436,startActivityIfNeeded,"    boolean startActivityIfNeeded(final CallFun2<Boolean, Intent, Integer> superCall, @NonNull Intent intent,
            int requestCode) {
        synchronized (mSuperListeners) {"
13437,startActivityFromFragment,"    void startActivityFromFragment(final CallVoid4<android.app.Fragment, Intent, Integer, Bundle> superCall,
            @NonNull android.app.Fragment fragment, Intent intent, int requestCode, @Nullable Bundle options) {
        synchronized (mSuperListeners) {"
13438,startActivityFromFragment,"    void startActivityFromFragment(final CallVoid3<android.app.Fragment, Intent, Integer> superCall,
            @NonNull android.app.Fragment fragment, Intent intent, int requestCode) {
        synchronized (mSuperListeners) {"
13439,startActivityFromFragment,"    void startActivityFromFragment(final CallVoid4<Fragment, Intent, Integer, Bundle> superCall, Fragment fragment,
            Intent intent, int requestCode, @Nullable Bundle options) {
        synchronized (mSuperListeners) {"
13440,startActivityFromFragment,"    void startActivityFromFragment(final CallVoid3<Fragment, Intent, Integer> superCall, Fragment fragment,
            Intent intent, int requestCode) {
        synchronized (mSuperListeners) {"
13441,startActivityFromChild,"    void startActivityFromChild(final CallVoid4<Activity, Intent, Integer, Bundle> superCall, @NonNull Activity child,
            Intent intent, int requestCode, @Nullable Bundle options) {
        synchronized (mSuperListeners) {"
13442,startActivityFromChild,"    void startActivityFromChild(final CallVoid3<Activity, Intent, Integer> superCall, @NonNull Activity child,
            Intent intent, int requestCode) {
        synchronized (mSuperListeners) {"
13447,startActivities,"    void startActivities(final CallVoid2<Intent[], Bundle> superCall, Intent[] intents, @Nullable Bundle options) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13448,startActivities,"    void startActivities(final CallVoid1<Intent[]> superCall, Intent[] intents) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13449,startActionMode,"    android.view.ActionMode startActionMode(
            final CallFun2<android.view.ActionMode, android.view.ActionMode.Callback, Integer> superCall,
            android.view.ActionMode.Callback callback, int type) {"
13450,startActionMode,"    android.view.ActionMode startActionMode(
            final CallFun1<android.view.ActionMode, android.view.ActionMode.Callback> superCall,
            android.view.ActionMode.Callback callback) {"
13451,showLockTaskEscapeMessage,"    void showLockTaskEscapeMessage(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13452,showAssist,"    boolean showAssist(final CallFun1<Boolean, Bundle> superCall, Bundle args) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13453,shouldUpRecreateTask,"    boolean shouldUpRecreateTask(final CallFun1<Boolean, Intent> superCall, Intent targetIntent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13455,setWallpaper,"    void setWallpaper(final CallVoid1<Bitmap> superCall, Bitmap bitmap) throws IOException {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13456,setWallpaper,"    void setWallpaper(final CallVoid1<InputStream> superCall, InputStream data) throws IOException {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13457,setVrModeEnabled,"    void setVrModeEnabled(final CallVoid2<Boolean, ComponentName> superCall, boolean enabled,
            @NonNull ComponentName requestedComponent) throws NameNotFoundException {
        synchronized (mSuperListeners) {"
13472,setPictureInPictureParams,"    void setPictureInPictureParams(final CallVoid1<PictureInPictureParams> superCall,
            @NonNull PictureInPictureParams params) {
        synchronized (mSuperListeners) {"
13476,setExitSharedElementCallback,"    void setExitSharedElementCallback(final CallVoid1<android.app.SharedElementCallback> superCall,
            android.app.SharedElementCallback callback) {
        synchronized (mSuperListeners) {"
13477,setExitSharedElementCallback,"    void setExitSharedElementCallback(final CallVoid1<SharedElementCallback> superCall,
            SharedElementCallback listener) {
        synchronized (mSuperListeners) {"
13478,setEnterSharedElementCallback,"    void setEnterSharedElementCallback(final CallVoid1<android.app.SharedElementCallback> superCall,
            android.app.SharedElementCallback callback) {
        synchronized (mSuperListeners) {"
13485,sendStickyOrderedBroadcastAsUser,"    void sendStickyOrderedBroadcastAsUser(
            final CallVoid7<Intent, UserHandle, BroadcastReceiver, Handler, Integer, String, Bundle> superCall,
            Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode,"
13486,sendStickyOrderedBroadcast,"    void sendStickyOrderedBroadcast(
            final CallVoid6<Intent, BroadcastReceiver, Handler, Integer, String, Bundle> superCall, Intent intent,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData,"
13487,sendStickyBroadcastAsUser,"    void sendStickyBroadcastAsUser(final CallVoid2<Intent, UserHandle> superCall, Intent intent, UserHandle user) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13488,sendStickyBroadcast,"    void sendStickyBroadcast(final CallVoid1<Intent> superCall, Intent intent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13489,sendOrderedBroadcastAsUser,"    void sendOrderedBroadcastAsUser(
            final CallVoid8<Intent, UserHandle, String, BroadcastReceiver, Handler, Integer, String, Bundle> superCall,
            Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver,"
13490,sendOrderedBroadcast,"    void sendOrderedBroadcast(
            final CallVoid7<Intent, String, BroadcastReceiver, Handler, Integer, String, Bundle> superCall,
            Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler,"
13491,sendOrderedBroadcast,"    void sendOrderedBroadcast(final CallVoid2<Intent, String> superCall, Intent intent, String receiverPermission) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13492,sendBroadcastAsUser,"    void sendBroadcastAsUser(final CallVoid3<Intent, UserHandle, String> superCall, Intent intent, UserHandle user,
            String receiverPermission) {
        synchronized (mSuperListeners) {"
13493,sendBroadcastAsUser,"    void sendBroadcastAsUser(final CallVoid2<Intent, UserHandle> superCall, Intent intent, UserHandle user) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13494,sendBroadcast,"    void sendBroadcast(final CallVoid2<Intent, String> superCall, Intent intent, String receiverPermission) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13495,sendBroadcast,"    void sendBroadcast(final CallVoid1<Intent> superCall, Intent intent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13496,revokeUriPermission,"    void revokeUriPermission(final CallVoid3<String, Uri, Integer> superCall, String targetPackage, Uri uri,
            int modeFlags) {
        synchronized (mSuperListeners) {"
13497,revokeUriPermission,"    void revokeUriPermission(final CallVoid2<Uri, Integer> superCall, Uri uri, int modeFlags) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13498,requestVisibleBehind,"    boolean requestVisibleBehind(final CallFun1<Boolean, Boolean> superCall, boolean visible) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13499,requestDragAndDropPermissions,"    DragAndDropPermissions requestDragAndDropPermissions(final CallFun1<DragAndDropPermissions, DragEvent> superCall,
            DragEvent event) {
        synchronized (mSuperListeners) {"
13500,reportFullyDrawn,"    void reportFullyDrawn(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13501,removeStickyBroadcastAsUser,"    void removeStickyBroadcastAsUser(final CallVoid2<Intent, UserHandle> superCall, Intent intent, UserHandle user) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13502,removeStickyBroadcast,"    void removeStickyBroadcast(final CallVoid1<Intent> superCall, Intent intent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13503,releaseInstance,"    boolean releaseInstance(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13504,registerReceiver,"    Intent registerReceiver(
            final CallFun5<Intent, BroadcastReceiver, IntentFilter, String, Handler, Integer> superCall,
            BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler,"
13505,registerReceiver,"    Intent registerReceiver(final CallFun4<Intent, BroadcastReceiver, IntentFilter, String, Handler> superCall,
            BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler) {
        synchronized (mSuperListeners) {"
13506,registerReceiver,"    Intent registerReceiver(final CallFun3<Intent, BroadcastReceiver, IntentFilter, Integer> superCall,
            BroadcastReceiver receiver, IntentFilter filter, int flags) {
        synchronized (mSuperListeners) {"
13507,registerReceiver,"    Intent registerReceiver(final CallFun2<Intent, BroadcastReceiver, IntentFilter> superCall,
            BroadcastReceiver receiver, IntentFilter filter) {
        synchronized (mSuperListeners) {"
13509,registerComponentCallbacks,"    void registerComponentCallbacks(final CallVoid1<ComponentCallbacks> superCall, ComponentCallbacks callback) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13510,recreate,"    void recreate(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13511,putExtraData,"    void putExtraData(final CallVoid1<SupportActivity.ExtraData> superCall, SupportActivity.ExtraData extraData) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13513,peekWallpaper,"    Drawable peekWallpaper(final CallFun0<Drawable> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13514,overridePendingTransition,"    void overridePendingTransition(final CallVoid2<Integer, Integer> superCall, int enterAnim, int exitAnim) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13515,openOrCreateDatabase,"    SQLiteDatabase openOrCreateDatabase(
            final CallFun4<SQLiteDatabase, String, Integer, CursorFactory, DatabaseErrorHandler> superCall,
            String name, int mode, CursorFactory factory, DatabaseErrorHandler errorHandler) {"
13516,openOrCreateDatabase,"    SQLiteDatabase openOrCreateDatabase(final CallFun3<SQLiteDatabase, String, Integer, CursorFactory> superCall,
            String name, int mode, CursorFactory factory) {
        synchronized (mSuperListeners) {"
13517,openOptionsMenu,"    void openOptionsMenu(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13518,openFileOutput,"    FileOutputStream openFileOutput(final CallFun2<FileOutputStream, String, Integer> superCall, String name,
            int mode) throws FileNotFoundException {
        synchronized (mSuperListeners) {"
13519,openFileInput,"    FileInputStream openFileInput(final CallFun1<FileInputStream, String> superCall, String name)
            throws FileNotFoundException {
        synchronized (mSuperListeners) {"
13520,openContextMenu,"    void openContextMenu(final CallVoid1<View> superCall, View view) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13521,onWindowStartingSupportActionMode,"    ActionMode onWindowStartingSupportActionMode(final CallFun1<ActionMode, Callback> superCall,
            @NonNull Callback callback) {
        synchronized (mSuperListeners) {"
13522,onWindowStartingActionMode,"    android.view.ActionMode onWindowStartingActionMode(
            final CallFun2<android.view.ActionMode, android.view.ActionMode.Callback, Integer> superCall,
            android.view.ActionMode.Callback callback, int type) {"
13523,onWindowStartingActionMode,"    android.view.ActionMode onWindowStartingActionMode(
            final CallFun1<android.view.ActionMode, android.view.ActionMode.Callback> superCall,
            android.view.ActionMode.Callback callback) {"
13524,onWindowFocusChanged,"    void onWindowFocusChanged(final CallVoid1<Boolean> superCall, boolean hasFocus) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13525,onWindowAttributesChanged,"    void onWindowAttributesChanged(final CallVoid1<WindowManager.LayoutParams> superCall,
            WindowManager.LayoutParams params) {
        synchronized (mSuperListeners) {"
13526,onVisibleBehindCanceled,"    void onVisibleBehindCanceled(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13527,onUserLeaveHint,"    void onUserLeaveHint(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13528,onUserInteraction,"    void onUserInteraction(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13529,onTrimMemory,"    void onTrimMemory(final CallVoid1<Integer> superCall, int level) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13530,onTrackballEvent,"    boolean onTrackballEvent(final CallFun1<Boolean, MotionEvent> superCall, MotionEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13531,onTouchEvent,"    boolean onTouchEvent(final CallFun1<Boolean, MotionEvent> superCall, MotionEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13532,onTitleChanged,"    void onTitleChanged(final CallVoid2<CharSequence, Integer> superCall, CharSequence title, int color) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13533,onSupportNavigateUp,"    boolean onSupportNavigateUp(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13534,onSupportContentChanged,"    void onSupportContentChanged(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13535,onSupportActionModeStarted,"    void onSupportActionModeStarted(final CallVoid1<ActionMode> superCall, @NonNull ActionMode mode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13536,onSupportActionModeFinished,"    void onSupportActionModeFinished(final CallVoid1<ActionMode> superCall, @NonNull ActionMode mode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13538,onStateNotSaved,"    void onStateNotSaved(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13540,onSearchRequested,"    boolean onSearchRequested(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13541,onSearchRequested,"    boolean onSearchRequested(final CallFun1<Boolean, SearchEvent> superCall, @Nullable SearchEvent searchEvent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13542,onSaveInstanceState,"    void onSaveInstanceState(final CallVoid2<Bundle, PersistableBundle> superCall, Bundle outState,
            PersistableBundle outPersistentState) {
        synchronized (mSuperListeners) {"
13543,onSaveInstanceState,"    void onSaveInstanceState(final CallVoid1<Bundle> superCall, Bundle outState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13544,onResumeFragments,"    void onResumeFragments(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13546,onRestoreInstanceState,"    void onRestoreInstanceState(final CallVoid2<Bundle, PersistableBundle> superCall, Bundle savedInstanceState,
            PersistableBundle persistentState) {
        synchronized (mSuperListeners) {"
13547,onRestoreInstanceState,"    void onRestoreInstanceState(final CallVoid1<Bundle> superCall, Bundle savedInstanceState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13548,onRestart,"    void onRestart(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13550,onProvideReferrer,"    Uri onProvideReferrer(final CallFun0<Uri> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13551,onProvideKeyboardShortcuts,"    void onProvideKeyboardShortcuts(final CallVoid3<List<KeyboardShortcutGroup>, Menu, Integer> superCall,
            List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {
        synchronized (mSuperListeners) {"
13552,onProvideAssistData,"    void onProvideAssistData(final CallVoid1<Bundle> superCall, Bundle data) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13553,onProvideAssistContent,"    void onProvideAssistContent(final CallVoid1<AssistContent> superCall, AssistContent outContent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13554,onPrepareSupportNavigateUpTaskStack,"    void onPrepareSupportNavigateUpTaskStack(final CallVoid1<TaskStackBuilder> superCall,
            @NonNull TaskStackBuilder builder) {
        synchronized (mSuperListeners) {"
13555,onPreparePanel,"    boolean onPreparePanel(final CallFun3<Boolean, Integer, View, Menu> superCall, int featureId, View view,
            Menu menu) {
        synchronized (mSuperListeners) {"
13556,onPrepareOptionsPanel,"    boolean onPrepareOptionsPanel(final CallFun2<Boolean, View, Menu> superCall, View view, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13557,onPrepareOptionsMenu,"    boolean onPrepareOptionsMenu(final CallFun1<Boolean, Menu> superCall, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13558,onPrepareNavigateUpTaskStack,"    void onPrepareNavigateUpTaskStack(final CallVoid1<android.app.TaskStackBuilder> superCall,
            android.app.TaskStackBuilder builder) {
        synchronized (mSuperListeners) {"
13559,onPrepareDialog,"    void onPrepareDialog(final CallVoid3<Integer, Dialog, Bundle> superCall, int id, Dialog dialog, Bundle args) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13560,onPrepareDialog,"    void onPrepareDialog(final CallVoid2<Integer, Dialog> superCall, int id, Dialog dialog) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13561,onPostResume,"    void onPostResume(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13562,onPostCreate,"    void onPostCreate(final CallVoid2<Bundle, PersistableBundle> superCall, @Nullable Bundle savedInstanceState,
            @Nullable PersistableBundle persistentState) {
        synchronized (mSuperListeners) {"
13563,onPostCreate,"    void onPostCreate(final CallVoid1<Bundle> superCall, @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13564,onPictureInPictureModeChanged,"    void onPictureInPictureModeChanged(final CallVoid2<Boolean, Configuration> superCall,
            boolean isInPictureInPictureMode, Configuration newConfig) {
        synchronized (mSuperListeners) {"
13567,onPanelClosed,"    void onPanelClosed(final CallVoid2<Integer, Menu> superCall, int featureId, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13570,onNewIntent,"    void onNewIntent(final CallVoid1<Intent> superCall, Intent intent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13571,onNavigateUpFromChild,"    boolean onNavigateUpFromChild(final CallFun1<Boolean, Activity> superCall, Activity child) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13572,onNavigateUp,"    boolean onNavigateUp(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13573,onMultiWindowModeChanged,"    void onMultiWindowModeChanged(final CallVoid2<Boolean, Configuration> superCall, boolean isInMultiWindowMode,
            Configuration newConfig) {
        synchronized (mSuperListeners) {"
13575,onMenuOpened,"    boolean onMenuOpened(final CallFun2<Boolean, Integer, Menu> superCall, int featureId, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13577,onLocalVoiceInteractionStopped,"    void onLocalVoiceInteractionStopped(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13578,onLocalVoiceInteractionStarted,"    void onLocalVoiceInteractionStarted(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13579,onKeyUp,"    boolean onKeyUp(final CallFun2<Boolean, Integer, KeyEvent> superCall, int keyCode, KeyEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13580,onKeyShortcut,"    boolean onKeyShortcut(final CallFun2<Boolean, Integer, KeyEvent> superCall, int keyCode, KeyEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13581,onKeyMultiple,"    boolean onKeyMultiple(final CallFun3<Boolean, Integer, Integer, KeyEvent> superCall, int keyCode, int repeatCount,
            KeyEvent event) {
        synchronized (mSuperListeners) {"
13582,onKeyLongPress,"    boolean onKeyLongPress(final CallFun2<Boolean, Integer, KeyEvent> superCall, int keyCode, KeyEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13583,onKeyDown,"    boolean onKeyDown(final CallFun2<Boolean, Integer, KeyEvent> superCall, int keyCode, KeyEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13584,onGenericMotionEvent,"    boolean onGenericMotionEvent(final CallFun1<Boolean, MotionEvent> superCall, MotionEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13585,onEnterAnimationComplete,"    void onEnterAnimationComplete(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13586,onDetachedFromWindow,"    void onDetachedFromWindow(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13588,onCreateView,"    View onCreateView(final CallFun3<View, String, Context, AttributeSet> superCall, String name, Context context,
            AttributeSet attrs) {
        synchronized (mSuperListeners) {"
13589,onCreateView,"    View onCreateView(final CallFun4<View, View, String, Context, AttributeSet> superCall, View parent, String name,
            Context context, AttributeSet attrs) {
        synchronized (mSuperListeners) {"
13590,onCreateThumbnail,"    boolean onCreateThumbnail(final CallFun2<Boolean, Bitmap, Canvas> superCall, Bitmap outBitmap, Canvas canvas) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13591,onCreateSupportNavigateUpTaskStack,"    void onCreateSupportNavigateUpTaskStack(final CallVoid1<TaskStackBuilder> superCall,
            @NonNull TaskStackBuilder builder) {
        synchronized (mSuperListeners) {"
13592,onCreatePanelView,"    View onCreatePanelView(final CallFun1<View, Integer> superCall, int featureId) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13593,onCreatePanelMenu,"    boolean onCreatePanelMenu(final CallFun2<Boolean, Integer, Menu> superCall, int featureId, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13594,onCreateOptionsMenu,"    boolean onCreateOptionsMenu(final CallFun1<Boolean, Menu> superCall, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13595,onCreateNavigateUpTaskStack,"    void onCreateNavigateUpTaskStack(final CallVoid1<android.app.TaskStackBuilder> superCall,
            android.app.TaskStackBuilder builder) {
        synchronized (mSuperListeners) {"
13596,onCreateDialog,"    Dialog onCreateDialog(final CallFun2<Dialog, Integer, Bundle> superCall, int id, Bundle args) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13597,onCreateDialog,"    Dialog onCreateDialog(final CallFun1<Dialog, Integer> superCall, int id) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13598,onCreateDescription,"    CharSequence onCreateDescription(final CallFun0<CharSequence> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13600,onCreate,"    void onCreate(final CallVoid2<Bundle, PersistableBundle> superCall, @Nullable Bundle savedInstanceState,
            @Nullable PersistableBundle persistentState) {
        synchronized (mSuperListeners) {"
13602,onContextMenuClosed,"    void onContextMenuClosed(final CallVoid1<Menu> superCall, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13604,onContentChanged,"    void onContentChanged(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13606,onChildTitleChanged,"    void onChildTitleChanged(final CallVoid2<Activity, CharSequence> superCall, Activity childActivity,
            CharSequence title) {
        synchronized (mSuperListeners) {"
13607,onBackPressed,"    void onBackPressed(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13608,onAttachedToWindow,"    void onAttachedToWindow(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13609,onAttachFragment,"    void onAttachFragment(final CallVoid1<android.app.Fragment> superCall, android.app.Fragment fragment) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13610,onAttachFragment,"    void onAttachFragment(final CallVoid1<Fragment> superCall, Fragment fragment) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13611,onApplyThemeResource,"    void onApplyThemeResource(final CallVoid3<Theme, Integer, Boolean> superCall, Theme theme, int resid,
            boolean first) {
        synchronized (mSuperListeners) {"
13612,onActivityResult,"    void onActivityResult(final CallVoid3<Integer, Integer, Intent> superCall, int requestCode, int resultCode,
            @Nullable Intent data) {
        synchronized (mSuperListeners) {"
13613,onActivityReenter,"    void onActivityReenter(final CallVoid2<Integer, Intent> superCall, int resultCode, Intent data) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13614,onActionModeStarted,"    void onActionModeStarted(final CallVoid1<android.view.ActionMode> superCall, android.view.ActionMode mode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13615,onActionModeFinished,"    void onActionModeFinished(final CallVoid1<android.view.ActionMode> superCall, android.view.ActionMode mode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13616,navigateUpToFromChild,"    boolean navigateUpToFromChild(final CallFun2<Boolean, Activity, Intent> superCall, Activity child,
            Intent upIntent) {
        synchronized (mSuperListeners) {"
13617,navigateUpTo,"    boolean navigateUpTo(final CallFun1<Boolean, Intent> superCall, Intent upIntent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13618,moveTaskToBack,"    boolean moveTaskToBack(final CallFun1<Boolean, Boolean> superCall, boolean nonRoot) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13619,moveSharedPreferencesFrom,"    boolean moveSharedPreferencesFrom(final CallFun2<Boolean, Context, String> superCall, Context sourceContext,
            String name) {
        synchronized (mSuperListeners) {"
13620,moveDatabaseFrom,"    boolean moveDatabaseFrom(final CallFun2<Boolean, Context, String> superCall, Context sourceContext, String name) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13621,isVoiceInteractionRoot,"    boolean isVoiceInteractionRoot(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13622,isVoiceInteraction,"    boolean isVoiceInteraction(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13623,isTaskRoot,"    boolean isTaskRoot(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13624,isRestricted,"    boolean isRestricted(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13625,isLocalVoiceInteractionSupported,"    boolean isLocalVoiceInteractionSupported(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13626,isInPictureInPictureMode,"    boolean isInPictureInPictureMode(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13627,isInMultiWindowMode,"    boolean isInMultiWindowMode(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13628,isImmersive,"    boolean isImmersive(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13629,isFinishing,"    boolean isFinishing(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13630,isDeviceProtectedStorage,"    boolean isDeviceProtectedStorage(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13631,isDestroyed,"    boolean isDestroyed(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13632,isChangingConfigurations,"    boolean isChangingConfigurations(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13633,isActivityTransitionRunning,"    boolean isActivityTransitionRunning(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13634,invalidateOptionsMenu,"    void invalidateOptionsMenu(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13635,hasWindowFocus,"    boolean hasWindowFocus(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13636,grantUriPermission,"    void grantUriPermission(final CallVoid3<String, Uri, Integer> superCall, String toPackage, Uri uri,
            int modeFlags) {
        synchronized (mSuperListeners) {"
13652,getSharedPreferences,"    SharedPreferences getSharedPreferences(final CallFun2<SharedPreferences, String, Integer> superCall, String name,
            int mode) {
        synchronized (mSuperListeners) {"
13677,getExtraData,"    <T extends SupportActivity.ExtraData> T getExtraData(final CallFun1<T, Class<T>> superCall,
            Class<T> extraDataClass) {
        synchronized (mSuperListeners) {"
13704,finishFromChild,"    void finishFromChild(final CallVoid1<Activity> superCall, Activity child) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13705,finishAndRemoveTask,"    void finishAndRemoveTask(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13706,finishAfterTransition,"    void finishAfterTransition(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13707,finishAffinity,"    void finishAffinity(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13708,finishActivityFromChild,"    void finishActivityFromChild(final CallVoid2<Activity, Integer> superCall, @NonNull Activity child,
            int requestCode) {
        synchronized (mSuperListeners) {"
13709,finishActivity,"    void finishActivity(final CallVoid1<Integer> superCall, int requestCode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13710,finish,"    void finish(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13711,findViewById,"    <T extends View> T findViewById(final CallFun1<T, Integer> superCall, int id) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13712,fileList,"    String[] fileList(final CallFun0<String[]> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13713,enterPictureInPictureMode,"    boolean enterPictureInPictureMode(final CallFun1<Boolean, PictureInPictureParams> superCall,
            @NonNull PictureInPictureParams params) {
        synchronized (mSuperListeners) {"
13714,enterPictureInPictureMode,"    void enterPictureInPictureMode(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13715,enforceUriPermission,"    void enforceUriPermission(final CallVoid7<Uri, String, String, Integer, Integer, Integer, String> superCall,
            Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message) {
        synchronized (mSuperListeners) {"
13716,enforceUriPermission,"    void enforceUriPermission(final CallVoid5<Uri, Integer, Integer, Integer, String> superCall, Uri uri, int pid,
            int uid, int modeFlags, String message) {
        synchronized (mSuperListeners) {"
13717,enforcePermission,"    void enforcePermission(final CallVoid4<String, Integer, Integer, String> superCall, String permission, int pid,
            int uid, String message) {
        synchronized (mSuperListeners) {"
13718,enforceCallingUriPermission,"    void enforceCallingUriPermission(final CallVoid3<Uri, Integer, String> superCall, Uri uri, int modeFlags,
            String message) {
        synchronized (mSuperListeners) {"
13719,enforceCallingPermission,"    void enforceCallingPermission(final CallVoid2<String, String> superCall, String permission, String message) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13720,enforceCallingOrSelfUriPermission,"    void enforceCallingOrSelfUriPermission(final CallVoid3<Uri, Integer, String> superCall, Uri uri, int modeFlags,
            String message) {
        synchronized (mSuperListeners) {"
13721,enforceCallingOrSelfPermission,"    void enforceCallingOrSelfPermission(final CallVoid2<String, String> superCall, String permission,
            String message) {
        synchronized (mSuperListeners) {"
13723,dispatchTrackballEvent,"    boolean dispatchTrackballEvent(final CallFun1<Boolean, MotionEvent> superCall, MotionEvent ev) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13724,dispatchTouchEvent,"    boolean dispatchTouchEvent(final CallFun1<Boolean, MotionEvent> superCall, MotionEvent ev) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13725,dispatchPopulateAccessibilityEvent,"    boolean dispatchPopulateAccessibilityEvent(final CallFun1<Boolean, AccessibilityEvent> superCall,
            AccessibilityEvent event) {
        synchronized (mSuperListeners) {"
13726,dispatchKeyShortcutEvent,"    boolean dispatchKeyShortcutEvent(final CallFun1<Boolean, KeyEvent> superCall, KeyEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13727,dispatchKeyEvent,"    boolean dispatchKeyEvent(final CallFun1<Boolean, KeyEvent> superCall, KeyEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13728,dispatchGenericMotionEvent,"    boolean dispatchGenericMotionEvent(final CallFun1<Boolean, MotionEvent> superCall, MotionEvent ev) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13729,deleteSharedPreferences,"    boolean deleteSharedPreferences(final CallFun1<Boolean, String> superCall, String name) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13730,deleteFile,"    boolean deleteFile(final CallFun1<Boolean, String> superCall, String name) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13731,deleteDatabase,"    boolean deleteDatabase(final CallFun1<Boolean, String> superCall, String name) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13732,databaseList,"    String[] databaseList(final CallFun0<String[]> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13733,createPendingResult,"    PendingIntent createPendingResult(final CallFun3<PendingIntent, Integer, Intent, Integer> superCall,
            int requestCode, @NonNull Intent data, int flags) {
        synchronized (mSuperListeners) {"
13734,createPackageContext,"    Context createPackageContext(final CallFun2<Context, String, Integer> superCall, String packageName, int flags)
            throws NameNotFoundException {
        synchronized (mSuperListeners) {"
13735,createDisplayContext,"    Context createDisplayContext(final CallFun1<Context, Display> superCall, Display display) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13736,createDeviceProtectedStorageContext,"    Context createDeviceProtectedStorageContext(final CallFun0<Context> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13737,createContextForSplit,"    Context createContextForSplit(final CallFun1<Context, String> superCall, String splitName)
            throws NameNotFoundException {
        synchronized (mSuperListeners) {"
13738,createConfigurationContext,"    Context createConfigurationContext(final CallFun1<Context, Configuration> superCall,
            Configuration overrideConfiguration) {
        synchronized (mSuperListeners) {"
13739,closeOptionsMenu,"    void closeOptionsMenu(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13740,closeContextMenu,"    void closeContextMenu(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13741,clearWallpaper,"    void clearWallpaper(final CallVoid0 superCall) throws IOException {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13742,checkUriPermission,"    int checkUriPermission(final CallFun6<Integer, Uri, String, String, Integer, Integer, Integer> superCall, Uri uri,
            String readPermission, String writePermission, int pid, int uid, int modeFlags) {
        synchronized (mSuperListeners) {"
13743,checkUriPermission,"    int checkUriPermission(final CallFun4<Integer, Uri, Integer, Integer, Integer> superCall, Uri uri, int pid,
            int uid, int modeFlags) {
        synchronized (mSuperListeners) {"
13744,checkSelfPermission,"    int checkSelfPermission(final CallFun1<Integer, String> superCall, String permission) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13745,checkPermission,"    int checkPermission(final CallFun3<Integer, String, Integer, Integer> superCall, String permission, int pid,
            int uid) {
        synchronized (mSuperListeners) {"
13746,checkCallingUriPermission,"    int checkCallingUriPermission(final CallFun2<Integer, Uri, Integer> superCall, Uri uri, int modeFlags) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13747,checkCallingPermission,"    int checkCallingPermission(final CallFun1<Integer, String> superCall, String permission) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13748,checkCallingOrSelfUriPermission,"    int checkCallingOrSelfUriPermission(final CallFun2<Integer, Uri, Integer> superCall, Uri uri, int modeFlags) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13749,checkCallingOrSelfPermission,"    int checkCallingOrSelfPermission(final CallFun1<Integer, String> superCall, String permission) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13750,bindService,"    boolean bindService(final CallFun3<Boolean, Intent, ServiceConnection, Integer> superCall, Intent service,
            ServiceConnection conn, int flags) {
        synchronized (mSuperListeners) {"
13751,attachBaseContext,"    void attachBaseContext(final CallVoid1<Context> superCall, Context newBase) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13752,applyOverrideConfiguration,"    void applyOverrideConfiguration(final CallVoid1<Configuration> superCall, Configuration overrideConfiguration) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13753,addContentView,"    void addContentView(final CallVoid2<View, LayoutParams> superCall, View view, LayoutParams params) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
13754,unregisterReceiver,"    public void unregisterReceiver(BroadcastReceiver receiver) {
        verifyMethodCalledFromDelegate(""unregisterReceiver(BroadcastReceiver)"");
        ((CallVoid1<BroadcastReceiver>) mSuperListeners.pop()).call(receiver);
    }"
13756,unregisterComponentCallbacks,"    public void unregisterComponentCallbacks(ComponentCallbacks callback) {
        verifyMethodCalledFromDelegate(""unregisterComponentCallbacks(ComponentCallbacks)"");
        ((CallVoid1<ComponentCallbacks>) mSuperListeners.pop()).call(callback);
    }"
13757,unbindService,"    public void unbindService(ServiceConnection conn) {
        verifyMethodCalledFromDelegate(""unbindService(ServiceConnection)"");
        ((CallVoid1<ServiceConnection>) mSuperListeners.pop()).call(conn);
    }"
13758,triggerSearch,"    public void triggerSearch(String query, @Nullable Bundle appSearchData) {
        verifyMethodCalledFromDelegate(""triggerSearch(String, Bundle)"");
        ((CallVoid2<String, Bundle>) mSuperListeners.pop()).call(query, appSearchData);
    }"
13759,takeKeyEvents,"    public void takeKeyEvents(boolean get) {
        verifyMethodCalledFromDelegate(""takeKeyEvents(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(get);
    }"
13760,supportStartPostponedEnterTransition,"    public void supportStartPostponedEnterTransition() {
        verifyMethodCalledFromDelegate(""supportStartPostponedEnterTransition()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13761,supportShouldUpRecreateTask,"    public boolean supportShouldUpRecreateTask(@NonNull Intent targetIntent) {
        verifyMethodCalledFromDelegate(""supportShouldUpRecreateTask(Intent)"");
        return ((CallFun1<Boolean, Intent>) mSuperListeners.pop()).call(targetIntent);
    }"
13762,supportRequestWindowFeature,"    public boolean supportRequestWindowFeature(int featureId) {
        verifyMethodCalledFromDelegate(""supportRequestWindowFeature(Integer)"");
        return ((CallFun1<Boolean, Integer>) mSuperListeners.pop()).call(featureId);
    }"
13763,supportPostponeEnterTransition,"    public void supportPostponeEnterTransition() {
        verifyMethodCalledFromDelegate(""supportPostponeEnterTransition()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13764,supportNavigateUpTo,"    public void supportNavigateUpTo(@NonNull Intent upIntent) {
        verifyMethodCalledFromDelegate(""supportNavigateUpTo(Intent)"");
        ((CallVoid1<Intent>) mSuperListeners.pop()).call(upIntent);
    }"
13765,supportInvalidateOptionsMenu,"    public void supportInvalidateOptionsMenu() {
        verifyMethodCalledFromDelegate(""supportInvalidateOptionsMenu()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13766,supportFinishAfterTransition,"    public void supportFinishAfterTransition() {
        verifyMethodCalledFromDelegate(""supportFinishAfterTransition()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13767,superDispatchKeyEvent,"    public boolean superDispatchKeyEvent(KeyEvent event) {
        verifyMethodCalledFromDelegate(""superDispatchKeyEvent(KeyEvent)"");
        return ((CallFun1<Boolean, KeyEvent>) mSuperListeners.pop()).call(event);
    }"
13768,stopService,"    public boolean stopService(Intent name) {
        verifyMethodCalledFromDelegate(""stopService(Intent)"");
        return ((CallFun1<Boolean, Intent>) mSuperListeners.pop()).call(name);
    }"
13769,stopManagingCursor,"    public void stopManagingCursor(Cursor c) {
        verifyMethodCalledFromDelegate(""stopManagingCursor(Cursor)"");
        ((CallVoid1<Cursor>) mSuperListeners.pop()).call(c);
    }"
13770,stopLockTask,"    public void stopLockTask() {
        verifyMethodCalledFromDelegate(""stopLockTask()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13771,stopLocalVoiceInteraction,"    public void stopLocalVoiceInteraction() {
        verifyMethodCalledFromDelegate(""stopLocalVoiceInteraction()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13772,startSupportActionMode,"    public ActionMode startSupportActionMode(@NonNull Callback callback) {
        verifyMethodCalledFromDelegate(""startSupportActionMode(Callback)"");
        return ((CallFun1<ActionMode, Callback>) mSuperListeners.pop()).call(callback);
    }"
13773,startService,"    public ComponentName startService(Intent service) {
        verifyMethodCalledFromDelegate(""startService(Intent)"");
        return ((CallFun1<ComponentName, Intent>) mSuperListeners.pop()).call(service);
    }"
13774,startSearch,"    public void startSearch(@Nullable String initialQuery, boolean selectInitialQuery, @Nullable Bundle appSearchData,
            boolean globalSearch) {
        verifyMethodCalledFromDelegate(""startSearch(String, Boolean, Bundle, Boolean)"");
        ((CallVoid4<String, Boolean, Bundle, Boolean>) mSuperListeners.pop())"
13776,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent, @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startNextMatchingActivity(Intent, Bundle)"");
        return ((CallFun2<Boolean, Intent, Bundle>) mSuperListeners.pop()).call(intent, options);
    }"
13777,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent) {
        verifyMethodCalledFromDelegate(""startNextMatchingActivity(Intent)"");
        return ((CallFun1<Boolean, Intent>) mSuperListeners.pop()).call(intent);
    }"
13778,startManagingCursor,"    public void startManagingCursor(Cursor c) {
        verifyMethodCalledFromDelegate(""startManagingCursor(Cursor)"");
        ((CallVoid1<Cursor>) mSuperListeners.pop()).call(c);
    }"
13779,startLockTask,"    public void startLockTask() {
        verifyMethodCalledFromDelegate(""startLockTask()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13780,startLocalVoiceInteraction,"    public void startLocalVoiceInteraction(Bundle privateOptions) {
        verifyMethodCalledFromDelegate(""startLocalVoiceInteraction(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(privateOptions);
    }"
13781,startIntentSenderFromFragment,"    public void startIntentSenderFromFragment(Fragment fragment, IntentSender intent, int requestCode,
            @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)
            throws SendIntentException {
        verifyMethodCalledFromDelegate("
13783,startIntentSenderFromChild,"    public void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        verifyMethodCalledFromDelegate(
                ""startIntentSenderFromChild(Activity, IntentSender, Integer, Intent, Integer, Integer, Integer)"");"
13785,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        verifyMethodCalledFromDelegate(
                ""startIntentSenderForResult(IntentSender, Integer, Intent, Integer, Integer, Integer)"");"
13788,startInstrumentation,"    public boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments) {
        verifyMethodCalledFromDelegate(""startInstrumentation(ComponentName, String, Bundle)"");
        return ((CallFun3<Boolean, ComponentName, String, Bundle>) mSuperListeners.pop())
                .call(className, profileFile, arguments);"
13789,startForegroundService,"    public ComponentName startForegroundService(Intent service) {
        verifyMethodCalledFromDelegate(""startForegroundService(Intent)"");
        return ((CallFun1<ComponentName, Intent>) mSuperListeners.pop()).call(service);
    }"
13790,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode, @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startActivityIfNeeded(Intent, Integer, Bundle)"");
        return ((CallFun3<Boolean, Intent, Integer, Bundle>) mSuperListeners.pop())
                .call(intent, requestCode, options);"
13791,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode) {
        verifyMethodCalledFromDelegate(""startActivityIfNeeded(Intent, Integer)"");
        return ((CallFun2<Boolean, Intent, Integer>) mSuperListeners.pop()).call(intent, requestCode);
    }"
13792,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startActivityFromFragment(android.app.Fragment, Intent, Integer, Bundle)"");
        ((CallVoid4<android.app.Fragment, Intent, Integer, Bundle>) mSuperListeners.pop())"
13793,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode) {
        verifyMethodCalledFromDelegate(""startActivityFromFragment(android.app.Fragment, Intent, Integer)"");
        ((CallVoid3<android.app.Fragment, Intent, Integer>) mSuperListeners.pop())
                .call(fragment, intent, requestCode);"
13794,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startActivityFromFragment(Fragment, Intent, Integer, Bundle)"");
        ((CallVoid4<Fragment, Intent, Integer, Bundle>) mSuperListeners.pop())"
13795,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode) {
        verifyMethodCalledFromDelegate(""startActivityFromFragment(Fragment, Intent, Integer)"");
        ((CallVoid3<Fragment, Intent, Integer>) mSuperListeners.pop()).call(fragment, intent, requestCode);
    }"
13796,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode,
            @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startActivityFromChild(Activity, Intent, Integer, Bundle)"");
        ((CallVoid4<Activity, Intent, Integer, Bundle>) mSuperListeners.pop())"
13797,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode) {
        verifyMethodCalledFromDelegate(""startActivityFromChild(Activity, Intent, Integer)"");
        ((CallVoid3<Activity, Intent, Integer>) mSuperListeners.pop()).call(child, intent, requestCode);
    }"
13802,startActivities,"    public void startActivities(Intent[] intents, @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startActivities(Intent[], Bundle)"");
        ((CallVoid2<Intent[], Bundle>) mSuperListeners.pop()).call(intents, options);
    }"
13803,startActivities,"    public void startActivities(Intent[] intents) {
        verifyMethodCalledFromDelegate(""startActivities(Intent[])"");
        ((CallVoid1<Intent[]>) mSuperListeners.pop()).call(intents);
    }"
13804,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback, int type) {
        verifyMethodCalledFromDelegate(""startActionMode(android.view.ActionMode.Callback, Integer)"");
        return ((CallFun2<android.view.ActionMode, android.view.ActionMode.Callback, Integer>) mSuperListeners.pop())
                .call(callback, type);"
13805,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback) {
        verifyMethodCalledFromDelegate(""startActionMode(android.view.ActionMode.Callback)"");
        return ((CallFun1<android.view.ActionMode, android.view.ActionMode.Callback>) mSuperListeners.pop())
                .call(callback);"
13806,showLockTaskEscapeMessage,"    public void showLockTaskEscapeMessage() {
        verifyMethodCalledFromDelegate(""showLockTaskEscapeMessage()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13807,showAssist,"    public boolean showAssist(Bundle args) {
        verifyMethodCalledFromDelegate(""showAssist(Bundle)"");
        return ((CallFun1<Boolean, Bundle>) mSuperListeners.pop()).call(args);
    }"
13808,shouldUpRecreateTask,"    public boolean shouldUpRecreateTask(Intent targetIntent) {
        verifyMethodCalledFromDelegate(""shouldUpRecreateTask(Intent)"");
        return ((CallFun1<Boolean, Intent>) mSuperListeners.pop()).call(targetIntent);
    }"
13810,setWallpaper,"    public void setWallpaper(InputStream data) throws IOException {
        verifyMethodCalledFromDelegate(""setWallpaper(InputStream)"");
        ((CallVoid1<InputStream>) mSuperListeners.pop()).call(data);
    }"
13811,setVrModeEnabled,"    public void setVrModeEnabled(boolean enabled, @NonNull ComponentName requestedComponent)
            throws NameNotFoundException {
        verifyMethodCalledFromDelegate(""setVrModeEnabled(Boolean, ComponentName)"");
        ((CallVoid2<Boolean, ComponentName>) mSuperListeners.pop()).call(enabled, requestedComponent);"
13832,sendStickyOrderedBroadcastAsUser,"    public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        verifyMethodCalledFromDelegate(
                ""sendStickyOrderedBroadcastAsUser(Intent, UserHandle, BroadcastReceiver, Handler, Integer, String, Bundle)"");"
13833,sendStickyOrderedBroadcast,"    public void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler,
            int initialCode, String initialData, Bundle initialExtras) {
        verifyMethodCalledFromDelegate(
                ""sendStickyOrderedBroadcast(Intent, BroadcastReceiver, Handler, Integer, String, Bundle)"");"
13834,sendStickyBroadcastAsUser,"    public void sendStickyBroadcastAsUser(Intent intent, UserHandle user) {
        verifyMethodCalledFromDelegate(""sendStickyBroadcastAsUser(Intent, UserHandle)"");
        ((CallVoid2<Intent, UserHandle>) mSuperListeners.pop()).call(intent, user);
    }"
13835,sendStickyBroadcast,"    public void sendStickyBroadcast(Intent intent) {
        verifyMethodCalledFromDelegate(""sendStickyBroadcast(Intent)"");
        ((CallVoid1<Intent>) mSuperListeners.pop()).call(intent);
    }"
13836,sendOrderedBroadcastAsUser,"    public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData,
            Bundle initialExtras) {
        verifyMethodCalledFromDelegate("
13837,sendOrderedBroadcast,"    public void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        verifyMethodCalledFromDelegate(
                ""sendOrderedBroadcast(Intent, String, BroadcastReceiver, Handler, Integer, String, Bundle)"");"
13838,sendOrderedBroadcast,"    public void sendOrderedBroadcast(Intent intent, String receiverPermission) {
        verifyMethodCalledFromDelegate(""sendOrderedBroadcast(Intent, String)"");
        ((CallVoid2<Intent, String>) mSuperListeners.pop()).call(intent, receiverPermission);
    }"
13839,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) {
        verifyMethodCalledFromDelegate(""sendBroadcastAsUser(Intent, UserHandle, String)"");
        ((CallVoid3<Intent, UserHandle, String>) mSuperListeners.pop()).call(intent, user, receiverPermission);
    }"
13840,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user) {
        verifyMethodCalledFromDelegate(""sendBroadcastAsUser(Intent, UserHandle)"");
        ((CallVoid2<Intent, UserHandle>) mSuperListeners.pop()).call(intent, user);
    }"
13841,sendBroadcast,"    public void sendBroadcast(Intent intent, String receiverPermission) {
        verifyMethodCalledFromDelegate(""sendBroadcast(Intent, String)"");
        ((CallVoid2<Intent, String>) mSuperListeners.pop()).call(intent, receiverPermission);
    }"
13842,sendBroadcast,"    public void sendBroadcast(Intent intent) {
        verifyMethodCalledFromDelegate(""sendBroadcast(Intent)"");
        ((CallVoid1<Intent>) mSuperListeners.pop()).call(intent);
    }"
13843,revokeUriPermission,"    public void revokeUriPermission(String targetPackage, Uri uri, int modeFlags) {
        verifyMethodCalledFromDelegate(""revokeUriPermission(String, Uri, Integer)"");
        ((CallVoid3<String, Uri, Integer>) mSuperListeners.pop()).call(targetPackage, uri, modeFlags);
    }"
13844,revokeUriPermission,"    public void revokeUriPermission(Uri uri, int modeFlags) {
        verifyMethodCalledFromDelegate(""revokeUriPermission(Uri, Integer)"");
        ((CallVoid2<Uri, Integer>) mSuperListeners.pop()).call(uri, modeFlags);
    }"
13845,requestVisibleBehind,"    public boolean requestVisibleBehind(boolean visible) {
        verifyMethodCalledFromDelegate(""requestVisibleBehind(Boolean)"");
        return ((CallFun1<Boolean, Boolean>) mSuperListeners.pop()).call(visible);
    }"
13846,requestDragAndDropPermissions,"    public DragAndDropPermissions requestDragAndDropPermissions(DragEvent event) {
        verifyMethodCalledFromDelegate(""requestDragAndDropPermissions(DragEvent)"");
        return ((CallFun1<DragAndDropPermissions, DragEvent>) mSuperListeners.pop()).call(event);
    }"
13847,reportFullyDrawn,"    public void reportFullyDrawn() {
        verifyMethodCalledFromDelegate(""reportFullyDrawn()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13848,removeStickyBroadcastAsUser,"    public void removeStickyBroadcastAsUser(Intent intent, UserHandle user) {
        verifyMethodCalledFromDelegate(""removeStickyBroadcastAsUser(Intent, UserHandle)"");
        ((CallVoid2<Intent, UserHandle>) mSuperListeners.pop()).call(intent, user);
    }"
13849,removeStickyBroadcast,"    public void removeStickyBroadcast(Intent intent) {
        verifyMethodCalledFromDelegate(""removeStickyBroadcast(Intent)"");
        ((CallVoid1<Intent>) mSuperListeners.pop()).call(intent);
    }"
13850,releaseInstance,"    public boolean releaseInstance() {
        verifyMethodCalledFromDelegate(""releaseInstance()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13852,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler) {
        verifyMethodCalledFromDelegate(""registerReceiver(BroadcastReceiver, IntentFilter, String, Handler)"");
        return ((CallFun4<Intent, BroadcastReceiver, IntentFilter, String, Handler>) mSuperListeners.pop())"
13853,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags) {
        verifyMethodCalledFromDelegate(""registerReceiver(BroadcastReceiver, IntentFilter, Integer)"");
        return ((CallFun3<Intent, BroadcastReceiver, IntentFilter, Integer>) mSuperListeners.pop())
                .call(receiver, filter, flags);"
13854,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {
        verifyMethodCalledFromDelegate(""registerReceiver(BroadcastReceiver, IntentFilter)"");
        return ((CallFun2<Intent, BroadcastReceiver, IntentFilter>) mSuperListeners.pop()).call(receiver, filter);
    }"
13856,registerComponentCallbacks,"    public void registerComponentCallbacks(ComponentCallbacks callback) {
        verifyMethodCalledFromDelegate(""registerComponentCallbacks(ComponentCallbacks)"");
        ((CallVoid1<ComponentCallbacks>) mSuperListeners.pop()).call(callback);
    }"
13857,recreate,"    public void recreate() {
        verifyMethodCalledFromDelegate(""recreate()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13858,putExtraData,"    public void putExtraData(ExtraData extraData) {
        verifyMethodCalledFromDelegate(""putExtraData(SupportActivity.ExtraData)"");
        ((CallVoid1<SupportActivity.ExtraData>) mSuperListeners.pop()).call(extraData);
    }"
13860,peekWallpaper,"    public Drawable peekWallpaper() {
        verifyMethodCalledFromDelegate(""peekWallpaper()"");
        return ((CallFun0<Drawable>) mSuperListeners.pop()).call();
    }"
13861,overridePendingTransition,"    public void overridePendingTransition(int enterAnim, int exitAnim) {
        verifyMethodCalledFromDelegate(""overridePendingTransition(Integer, Integer)"");
        ((CallVoid2<Integer, Integer>) mSuperListeners.pop()).call(enterAnim, exitAnim);
    }"
13862,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory,
            DatabaseErrorHandler errorHandler) {
        verifyMethodCalledFromDelegate(""openOrCreateDatabase(String, Integer, CursorFactory, DatabaseErrorHandler)"");
        return ((CallFun4<SQLiteDatabase, String, Integer, CursorFactory, DatabaseErrorHandler>) mSuperListeners"
13863,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory) {
        verifyMethodCalledFromDelegate(""openOrCreateDatabase(String, Integer, CursorFactory)"");
        return ((CallFun3<SQLiteDatabase, String, Integer, CursorFactory>) mSuperListeners.pop())
                .call(name, mode, factory);"
13864,openOptionsMenu,"    public void openOptionsMenu() {
        verifyMethodCalledFromDelegate(""openOptionsMenu()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13865,openFileOutput,"    public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException {
        verifyMethodCalledFromDelegate(""openFileOutput(String, Integer)"");
        return ((CallFun2<FileOutputStream, String, Integer>) mSuperListeners.pop()).call(name, mode);
    }"
13866,openFileInput,"    public FileInputStream openFileInput(String name) throws FileNotFoundException {
        verifyMethodCalledFromDelegate(""openFileInput(String)"");
        return ((CallFun1<FileInputStream, String>) mSuperListeners.pop()).call(name);
    }"
13867,openContextMenu,"    public void openContextMenu(View view) {
        verifyMethodCalledFromDelegate(""openContextMenu(View)"");
        ((CallVoid1<View>) mSuperListeners.pop()).call(view);
    }"
13868,onWindowStartingSupportActionMode,"    public ActionMode onWindowStartingSupportActionMode(@NonNull Callback callback) {
        verifyMethodCalledFromDelegate(""onWindowStartingSupportActionMode(Callback)"");
        return ((CallFun1<ActionMode, Callback>) mSuperListeners.pop()).call(callback);
    }"
13870,onWindowStartingActionMode,"    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback) {
        verifyMethodCalledFromDelegate(""onWindowStartingActionMode(android.view.ActionMode.Callback)"");
        return ((CallFun1<android.view.ActionMode, android.view.ActionMode.Callback>) mSuperListeners.pop())
                .call(callback);"
13871,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        verifyMethodCalledFromDelegate(""onWindowFocusChanged(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(hasFocus);
    }"
13872,onWindowAttributesChanged,"    public void onWindowAttributesChanged(WindowManager.LayoutParams params) {
        verifyMethodCalledFromDelegate(""onWindowAttributesChanged(WindowManager.LayoutParams)"");
        ((CallVoid1<WindowManager.LayoutParams>) mSuperListeners.pop()).call(params);
    }"
13873,onVisibleBehindCanceled,"    public void onVisibleBehindCanceled() {
        verifyMethodCalledFromDelegate(""onVisibleBehindCanceled()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13874,onUserLeaveHint,"    public void onUserLeaveHint() {
        verifyMethodCalledFromDelegate(""onUserLeaveHint()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13875,onUserInteraction,"    public void onUserInteraction() {
        verifyMethodCalledFromDelegate(""onUserInteraction()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13876,onTrimMemory,"    public void onTrimMemory(int level) {
        verifyMethodCalledFromDelegate(""onTrimMemory(Integer)"");
        ((CallVoid1<Integer>) mSuperListeners.pop()).call(level);
    }"
13877,onTrackballEvent,"    public boolean onTrackballEvent(MotionEvent event) {
        verifyMethodCalledFromDelegate(""onTrackballEvent(MotionEvent)"");
        return ((CallFun1<Boolean, MotionEvent>) mSuperListeners.pop()).call(event);
    }"
13878,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        verifyMethodCalledFromDelegate(""onTouchEvent(MotionEvent)"");
        return ((CallFun1<Boolean, MotionEvent>) mSuperListeners.pop()).call(event);
    }"
13879,onTitleChanged,"    public void onTitleChanged(CharSequence title, int color) {
        verifyMethodCalledFromDelegate(""onTitleChanged(CharSequence, Integer)"");
        ((CallVoid2<CharSequence, Integer>) mSuperListeners.pop()).call(title, color);
    }"
13880,onSupportNavigateUp,"    public boolean onSupportNavigateUp() {
        verifyMethodCalledFromDelegate(""onSupportNavigateUp()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13881,onSupportContentChanged,"    public void onSupportContentChanged() {
        verifyMethodCalledFromDelegate(""onSupportContentChanged()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13882,onSupportActionModeStarted,"    public void onSupportActionModeStarted(@NonNull ActionMode mode) {
        verifyMethodCalledFromDelegate(""onSupportActionModeStarted(ActionMode)"");
        ((CallVoid1<ActionMode>) mSuperListeners.pop()).call(mode);
    }"
13883,onSupportActionModeFinished,"    public void onSupportActionModeFinished(@NonNull ActionMode mode) {
        verifyMethodCalledFromDelegate(""onSupportActionModeFinished(ActionMode)"");
        ((CallVoid1<ActionMode>) mSuperListeners.pop()).call(mode);
    }"
13885,onStateNotSaved,"    public void onStateNotSaved() {
        verifyMethodCalledFromDelegate(""onStateNotSaved()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13887,onSearchRequested,"    public boolean onSearchRequested() {
        verifyMethodCalledFromDelegate(""onSearchRequested()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13888,onSearchRequested,"    public boolean onSearchRequested(@Nullable SearchEvent searchEvent) {
        verifyMethodCalledFromDelegate(""onSearchRequested(SearchEvent)"");
        return ((CallFun1<Boolean, SearchEvent>) mSuperListeners.pop()).call(searchEvent);
    }"
13889,onSaveInstanceState,"    public void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {
        verifyMethodCalledFromDelegate(""onSaveInstanceState(Bundle, PersistableBundle)"");
        ((CallVoid2<Bundle, PersistableBundle>) mSuperListeners.pop()).call(outState, outPersistentState);
    }"
13890,onSaveInstanceState,"    public void onSaveInstanceState(Bundle outState) {
        verifyMethodCalledFromDelegate(""onSaveInstanceState(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(outState);
    }"
13891,onRetainNonConfigurationInstance,"    public CompositeNonConfigurationInstance onRetainNonConfigurationInstance() {
        return null;
    }"
13892,onResumeFragments,"    public void onResumeFragments() {
        verifyMethodCalledFromDelegate(""onResumeFragments()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13894,onRestoreInstanceState,"    public void onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState) {
        verifyMethodCalledFromDelegate(""onRestoreInstanceState(Bundle, PersistableBundle)"");
        ((CallVoid2<Bundle, PersistableBundle>) mSuperListeners.pop()).call(savedInstanceState, persistentState);
    }"
13895,onRestoreInstanceState,"    public void onRestoreInstanceState(Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onRestoreInstanceState(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(savedInstanceState);
    }"
13896,onRestart,"    public void onRestart() {
        verifyMethodCalledFromDelegate(""onRestart()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13898,onProvideReferrer,"    public Uri onProvideReferrer() {
        verifyMethodCalledFromDelegate(""onProvideReferrer()"");
        return ((CallFun0<Uri>) mSuperListeners.pop()).call();
    }"
13899,onProvideKeyboardShortcuts,"    public void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {
        verifyMethodCalledFromDelegate(""onProvideKeyboardShortcuts(List<KeyboardShortcutGroup>, Menu, Integer)"");
        ((CallVoid3<List<KeyboardShortcutGroup>, Menu, Integer>) mSuperListeners.pop()).call(data, menu, deviceId);
    }"
13900,onProvideAssistData,"    public void onProvideAssistData(Bundle data) {
        verifyMethodCalledFromDelegate(""onProvideAssistData(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(data);
    }"
13901,onProvideAssistContent,"    public void onProvideAssistContent(AssistContent outContent) {
        verifyMethodCalledFromDelegate(""onProvideAssistContent(AssistContent)"");
        ((CallVoid1<AssistContent>) mSuperListeners.pop()).call(outContent);
    }"
13902,onPrepareSupportNavigateUpTaskStack,"    public void onPrepareSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        verifyMethodCalledFromDelegate(""onPrepareSupportNavigateUpTaskStack(TaskStackBuilder)"");
        ((CallVoid1<TaskStackBuilder>) mSuperListeners.pop()).call(builder);
    }"
13903,onPreparePanel,"    public boolean onPreparePanel(int featureId, View view, Menu menu) {
        verifyMethodCalledFromDelegate(""onPreparePanel(Integer, View, Menu)"");
        return ((CallFun3<Boolean, Integer, View, Menu>) mSuperListeners.pop()).call(featureId, view, menu);
    }"
13904,onPrepareOptionsPanel,"    public boolean onPrepareOptionsPanel(View view, Menu menu) {
        verifyMethodCalledFromDelegate(""onPrepareOptionsPanel(View, Menu)"");
        return ((CallFun2<Boolean, View, Menu>) mSuperListeners.pop()).call(view, menu);
    }"
13905,onPrepareOptionsMenu,"    public boolean onPrepareOptionsMenu(Menu menu) {
        verifyMethodCalledFromDelegate(""onPrepareOptionsMenu(Menu)"");
        return ((CallFun1<Boolean, Menu>) mSuperListeners.pop()).call(menu);
    }"
13906,onPrepareNavigateUpTaskStack,"    public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        verifyMethodCalledFromDelegate(""onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)"");
        ((CallVoid1<android.app.TaskStackBuilder>) mSuperListeners.pop()).call(builder);
    }"
13907,onPrepareDialog,"    public void onPrepareDialog(int id, Dialog dialog, Bundle args) {
        verifyMethodCalledFromDelegate(""onPrepareDialog(Integer, Dialog, Bundle)"");
        ((CallVoid3<Integer, Dialog, Bundle>) mSuperListeners.pop()).call(id, dialog, args);
    }"
13908,onPrepareDialog,"    public void onPrepareDialog(int id, Dialog dialog) {
        verifyMethodCalledFromDelegate(""onPrepareDialog(Integer, Dialog)"");
        ((CallVoid2<Integer, Dialog>) mSuperListeners.pop()).call(id, dialog);
    }"
13909,onPostResume,"    public void onPostResume() {
        verifyMethodCalledFromDelegate(""onPostResume()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13910,onPostCreate,"    public void onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        verifyMethodCalledFromDelegate(""onPostCreate(Bundle, PersistableBundle)"");
        ((CallVoid2<Bundle, PersistableBundle>) mSuperListeners.pop()).call(savedInstanceState, persistentState);
    }"
13911,onPostCreate,"    public void onPostCreate(@Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onPostCreate(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(savedInstanceState);
    }"
13912,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {
        verifyMethodCalledFromDelegate(""onPictureInPictureModeChanged(Boolean, Configuration)"");
        ((CallVoid2<Boolean, Configuration>) mSuperListeners.pop()).call(isInPictureInPictureMode, newConfig);
    }"
13915,onPanelClosed,"    public void onPanelClosed(int featureId, Menu menu) {
        verifyMethodCalledFromDelegate(""onPanelClosed(Integer, Menu)"");
        ((CallVoid2<Integer, Menu>) mSuperListeners.pop()).call(featureId, menu);
    }"
13918,onNewIntent,"    public void onNewIntent(Intent intent) {
        verifyMethodCalledFromDelegate(""onNewIntent(Intent)"");
        ((CallVoid1<Intent>) mSuperListeners.pop()).call(intent);
    }"
13919,onNavigateUpFromChild,"    public boolean onNavigateUpFromChild(Activity child) {
        verifyMethodCalledFromDelegate(""onNavigateUpFromChild(Activity)"");
        return ((CallFun1<Boolean, Activity>) mSuperListeners.pop()).call(child);
    }"
13920,onNavigateUp,"    public boolean onNavigateUp() {
        verifyMethodCalledFromDelegate(""onNavigateUp()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13921,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig) {
        verifyMethodCalledFromDelegate(""onMultiWindowModeChanged(Boolean, Configuration)"");
        ((CallVoid2<Boolean, Configuration>) mSuperListeners.pop()).call(isInMultiWindowMode, newConfig);
    }"
13923,onMenuOpened,"    public boolean onMenuOpened(int featureId, Menu menu) {
        verifyMethodCalledFromDelegate(""onMenuOpened(Integer, Menu)"");
        return ((CallFun2<Boolean, Integer, Menu>) mSuperListeners.pop()).call(featureId, menu);
    }"
13925,onLocalVoiceInteractionStopped,"    public void onLocalVoiceInteractionStopped() {
        verifyMethodCalledFromDelegate(""onLocalVoiceInteractionStopped()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13926,onLocalVoiceInteractionStarted,"    public void onLocalVoiceInteractionStarted() {
        verifyMethodCalledFromDelegate(""onLocalVoiceInteractionStarted()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13927,onKeyUp,"    public boolean onKeyUp(int keyCode, KeyEvent event) {
        verifyMethodCalledFromDelegate(""onKeyUp(Integer, KeyEvent)"");
        return ((CallFun2<Boolean, Integer, KeyEvent>) mSuperListeners.pop()).call(keyCode, event);
    }"
13928,onKeyShortcut,"    public boolean onKeyShortcut(int keyCode, KeyEvent event) {
        verifyMethodCalledFromDelegate(""onKeyShortcut(Integer, KeyEvent)"");
        return ((CallFun2<Boolean, Integer, KeyEvent>) mSuperListeners.pop()).call(keyCode, event);
    }"
13929,onKeyMultiple,"    public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) {
        verifyMethodCalledFromDelegate(""onKeyMultiple(Integer, Integer, KeyEvent)"");
        return ((CallFun3<Boolean, Integer, Integer, KeyEvent>) mSuperListeners.pop())
                .call(keyCode, repeatCount, event);"
13930,onKeyLongPress,"    public boolean onKeyLongPress(int keyCode, KeyEvent event) {
        verifyMethodCalledFromDelegate(""onKeyLongPress(Integer, KeyEvent)"");
        return ((CallFun2<Boolean, Integer, KeyEvent>) mSuperListeners.pop()).call(keyCode, event);
    }"
13931,onKeyDown,"    public boolean onKeyDown(int keyCode, KeyEvent event) {
        verifyMethodCalledFromDelegate(""onKeyDown(Integer, KeyEvent)"");
        return ((CallFun2<Boolean, Integer, KeyEvent>) mSuperListeners.pop()).call(keyCode, event);
    }"
13932,onGenericMotionEvent,"    public boolean onGenericMotionEvent(MotionEvent event) {
        verifyMethodCalledFromDelegate(""onGenericMotionEvent(MotionEvent)"");
        return ((CallFun1<Boolean, MotionEvent>) mSuperListeners.pop()).call(event);
    }"
13933,onEnterAnimationComplete,"    public void onEnterAnimationComplete() {
        verifyMethodCalledFromDelegate(""onEnterAnimationComplete()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13934,onDetachedFromWindow,"    public void onDetachedFromWindow() {
        verifyMethodCalledFromDelegate(""onDetachedFromWindow()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13936,onCreateView,"    public View onCreateView(String name, Context context, AttributeSet attrs) {
        verifyMethodCalledFromDelegate(""onCreateView(String, Context, AttributeSet)"");
        return ((CallFun3<View, String, Context, AttributeSet>) mSuperListeners.pop()).call(name, context, attrs);
    }"
13937,onCreateView,"    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
        verifyMethodCalledFromDelegate(""onCreateView(View, String, Context, AttributeSet)"");
        return ((CallFun4<View, View, String, Context, AttributeSet>) mSuperListeners.pop())
                .call(parent, name, context, attrs);"
13938,onCreateThumbnail,"    public boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas) {
        verifyMethodCalledFromDelegate(""onCreateThumbnail(Bitmap, Canvas)"");
        return ((CallFun2<Boolean, Bitmap, Canvas>) mSuperListeners.pop()).call(outBitmap, canvas);
    }"
13939,onCreateSupportNavigateUpTaskStack,"    public void onCreateSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        verifyMethodCalledFromDelegate(""onCreateSupportNavigateUpTaskStack(TaskStackBuilder)"");
        ((CallVoid1<TaskStackBuilder>) mSuperListeners.pop()).call(builder);
    }"
13940,onCreatePanelView,"    public View onCreatePanelView(int featureId) {
        verifyMethodCalledFromDelegate(""onCreatePanelView(Integer)"");
        return ((CallFun1<View, Integer>) mSuperListeners.pop()).call(featureId);
    }"
13941,onCreatePanelMenu,"    public boolean onCreatePanelMenu(int featureId, Menu menu) {
        verifyMethodCalledFromDelegate(""onCreatePanelMenu(Integer, Menu)"");
        return ((CallFun2<Boolean, Integer, Menu>) mSuperListeners.pop()).call(featureId, menu);
    }"
13942,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        verifyMethodCalledFromDelegate(""onCreateOptionsMenu(Menu)"");
        return ((CallFun1<Boolean, Menu>) mSuperListeners.pop()).call(menu);
    }"
13943,onCreateNavigateUpTaskStack,"    public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        verifyMethodCalledFromDelegate(""onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)"");
        ((CallVoid1<android.app.TaskStackBuilder>) mSuperListeners.pop()).call(builder);
    }"
13944,onCreateDialog,"    public Dialog onCreateDialog(int id, Bundle args) {
        verifyMethodCalledFromDelegate(""onCreateDialog(Integer, Bundle)"");
        return ((CallFun2<Dialog, Integer, Bundle>) mSuperListeners.pop()).call(id, args);
    }"
13945,onCreateDialog,"    public Dialog onCreateDialog(int id) {
        verifyMethodCalledFromDelegate(""onCreateDialog(Integer)"");
        return ((CallFun1<Dialog, Integer>) mSuperListeners.pop()).call(id);
    }"
13946,onCreateDescription,"    public CharSequence onCreateDescription() {
        verifyMethodCalledFromDelegate(""onCreateDescription()"");
        return ((CallFun0<CharSequence>) mSuperListeners.pop()).call();
    }"
13948,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        verifyMethodCalledFromDelegate(""onCreate(Bundle, PersistableBundle)"");
        ((CallVoid2<Bundle, PersistableBundle>) mSuperListeners.pop()).call(savedInstanceState, persistentState);
    }"
13950,onContextMenuClosed,"    public void onContextMenuClosed(Menu menu) {
        verifyMethodCalledFromDelegate(""onContextMenuClosed(Menu)"");
        ((CallVoid1<Menu>) mSuperListeners.pop()).call(menu);
    }"
13952,onContentChanged,"    public void onContentChanged() {
        verifyMethodCalledFromDelegate(""onContentChanged()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13954,onChildTitleChanged,"    public void onChildTitleChanged(Activity childActivity, CharSequence title) {
        verifyMethodCalledFromDelegate(""onChildTitleChanged(Activity, CharSequence)"");
        ((CallVoid2<Activity, CharSequence>) mSuperListeners.pop()).call(childActivity, title);
    }"
13955,onBackPressed,"    public void onBackPressed() {
        verifyMethodCalledFromDelegate(""onBackPressed()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13956,onAttachedToWindow,"    public void onAttachedToWindow() {
        verifyMethodCalledFromDelegate(""onAttachedToWindow()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13957,onAttachFragment,"    public void onAttachFragment(android.app.Fragment fragment) {
        verifyMethodCalledFromDelegate(""onAttachFragment(android.app.Fragment)"");
        ((CallVoid1<android.app.Fragment>) mSuperListeners.pop()).call(fragment);
    }"
13958,onAttachFragment,"    public void onAttachFragment(Fragment fragment) {
        verifyMethodCalledFromDelegate(""onAttachFragment(Fragment)"");
        ((CallVoid1<Fragment>) mSuperListeners.pop()).call(fragment);
    }"
13959,onApplyThemeResource,"    public void onApplyThemeResource(Theme theme, int resid, boolean first) {
        verifyMethodCalledFromDelegate(""onApplyThemeResource(Theme, Integer, Boolean)"");
        ((CallVoid3<Theme, Integer, Boolean>) mSuperListeners.pop()).call(theme, resid, first);
    }"
13960,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        verifyMethodCalledFromDelegate(""onActivityResult(Integer, Integer, Intent)"");
        ((CallVoid3<Integer, Integer, Intent>) mSuperListeners.pop()).call(requestCode, resultCode, data);
    }"
13961,onActivityReenter,"    public void onActivityReenter(int resultCode, Intent data) {
        verifyMethodCalledFromDelegate(""onActivityReenter(Integer, Intent)"");
        ((CallVoid2<Integer, Intent>) mSuperListeners.pop()).call(resultCode, data);
    }"
13962,onActionModeStarted,"    public void onActionModeStarted(android.view.ActionMode mode) {
        verifyMethodCalledFromDelegate(""onActionModeStarted(android.view.ActionMode)"");
        ((CallVoid1<android.view.ActionMode>) mSuperListeners.pop()).call(mode);
    }"
13963,onActionModeFinished,"    public void onActionModeFinished(android.view.ActionMode mode) {
        verifyMethodCalledFromDelegate(""onActionModeFinished(android.view.ActionMode)"");
        ((CallVoid1<android.view.ActionMode>) mSuperListeners.pop()).call(mode);
    }"
13964,navigateUpToFromChild,"    public boolean navigateUpToFromChild(Activity child, Intent upIntent) {
        verifyMethodCalledFromDelegate(""navigateUpToFromChild(Activity, Intent)"");
        return ((CallFun2<Boolean, Activity, Intent>) mSuperListeners.pop()).call(child, upIntent);
    }"
13965,navigateUpTo,"    public boolean navigateUpTo(Intent upIntent) {
        verifyMethodCalledFromDelegate(""navigateUpTo(Intent)"");
        return ((CallFun1<Boolean, Intent>) mSuperListeners.pop()).call(upIntent);
    }"
13966,moveTaskToBack,"    public boolean moveTaskToBack(boolean nonRoot) {
        verifyMethodCalledFromDelegate(""moveTaskToBack(Boolean)"");
        return ((CallFun1<Boolean, Boolean>) mSuperListeners.pop()).call(nonRoot);
    }"
13967,moveSharedPreferencesFrom,"    public boolean moveSharedPreferencesFrom(Context sourceContext, String name) {
        verifyMethodCalledFromDelegate(""moveSharedPreferencesFrom(Context, String)"");
        return ((CallFun2<Boolean, Context, String>) mSuperListeners.pop()).call(sourceContext, name);
    }"
13968,moveDatabaseFrom,"    public boolean moveDatabaseFrom(Context sourceContext, String name) {
        verifyMethodCalledFromDelegate(""moveDatabaseFrom(Context, String)"");
        return ((CallFun2<Boolean, Context, String>) mSuperListeners.pop()).call(sourceContext, name);
    }"
13969,isVoiceInteractionRoot,"    public boolean isVoiceInteractionRoot() {
        verifyMethodCalledFromDelegate(""isVoiceInteractionRoot()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13970,isVoiceInteraction,"    public boolean isVoiceInteraction() {
        verifyMethodCalledFromDelegate(""isVoiceInteraction()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13971,isTaskRoot,"    public boolean isTaskRoot() {
        verifyMethodCalledFromDelegate(""isTaskRoot()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13972,isRestricted,"    public boolean isRestricted() {
        verifyMethodCalledFromDelegate(""isRestricted()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13973,isLocalVoiceInteractionSupported,"    public boolean isLocalVoiceInteractionSupported() {
        verifyMethodCalledFromDelegate(""isLocalVoiceInteractionSupported()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13974,isInPictureInPictureMode,"    public boolean isInPictureInPictureMode() {
        verifyMethodCalledFromDelegate(""isInPictureInPictureMode()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13975,isInMultiWindowMode,"    public boolean isInMultiWindowMode() {
        verifyMethodCalledFromDelegate(""isInMultiWindowMode()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13977,isImmersive,"    public boolean isImmersive() {
        verifyMethodCalledFromDelegate(""isImmersive()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13978,isFinishing,"    public boolean isFinishing() {
        verifyMethodCalledFromDelegate(""isFinishing()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13979,isDeviceProtectedStorage,"    public boolean isDeviceProtectedStorage() {
        verifyMethodCalledFromDelegate(""isDeviceProtectedStorage()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13980,isDestroyed,"    public boolean isDestroyed() {
        verifyMethodCalledFromDelegate(""isDestroyed()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13981,isChangingConfigurations,"    public boolean isChangingConfigurations() {
        verifyMethodCalledFromDelegate(""isChangingConfigurations()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13982,isActivityTransitionRunning,"    public boolean isActivityTransitionRunning() {
        verifyMethodCalledFromDelegate(""isActivityTransitionRunning()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13983,invalidateOptionsMenu,"    public void invalidateOptionsMenu() {
        verifyMethodCalledFromDelegate(""invalidateOptionsMenu()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
13984,hasWindowFocus,"    public boolean hasWindowFocus() {
        verifyMethodCalledFromDelegate(""hasWindowFocus()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
13985,grantUriPermission,"    public void grantUriPermission(String toPackage, Uri uri, int modeFlags) {
        verifyMethodCalledFromDelegate(""grantUriPermission(String, Uri, Integer)"");
        ((CallVoid3<String, Uri, Integer>) mSuperListeners.pop()).call(toPackage, uri, modeFlags);
    }"
13990,setWallpaper,"    public void setWallpaper(Bitmap bitmap) throws IOException {
        verifyMethodCalledFromDelegate(""setWallpaper(Bitmap)"");
        ((CallVoid1<Bitmap>) mSuperListeners.pop()).call(bitmap);
    }"
14062,finishFromChild,"    public void finishFromChild(Activity child) {
        verifyMethodCalledFromDelegate(""finishFromChild(Activity)"");
        ((CallVoid1<Activity>) mSuperListeners.pop()).call(child);
    }"
14063,finishAndRemoveTask,"    public void finishAndRemoveTask() {
        verifyMethodCalledFromDelegate(""finishAndRemoveTask()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
14064,finishAfterTransition,"    public void finishAfterTransition() {
        verifyMethodCalledFromDelegate(""finishAfterTransition()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
14065,finishAffinity,"    public void finishAffinity() {
        verifyMethodCalledFromDelegate(""finishAffinity()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
14066,finishActivityFromChild,"    public void finishActivityFromChild(@NonNull Activity child, int requestCode) {
        verifyMethodCalledFromDelegate(""finishActivityFromChild(Activity, Integer)"");
        ((CallVoid2<Activity, Integer>) mSuperListeners.pop()).call(child, requestCode);
    }"
14067,finishActivity,"    public void finishActivity(int requestCode) {
        verifyMethodCalledFromDelegate(""finishActivity(Integer)"");
        ((CallVoid1<Integer>) mSuperListeners.pop()).call(requestCode);
    }"
14068,finish,"    public void finish() {
        verifyMethodCalledFromDelegate(""finish()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
14069,findViewById,"    public <T extends View> T findViewById(int id) {
        verifyMethodCalledFromDelegate(""findViewById(Integer)"");
        return ((CallFun1<T, Integer>) mSuperListeners.pop()).call(id);
    }"
14070,fileList,"    public String[] fileList() {
        verifyMethodCalledFromDelegate(""fileList()"");
        return ((CallFun0<String[]>) mSuperListeners.pop()).call();
    }"
14071,enterPictureInPictureMode,"    public boolean enterPictureInPictureMode(@NonNull PictureInPictureParams params) {
        verifyMethodCalledFromDelegate(""enterPictureInPictureMode(PictureInPictureParams)"");
        return ((CallFun1<Boolean, PictureInPictureParams>) mSuperListeners.pop()).call(params);
    }"
14072,enterPictureInPictureMode,"    public void enterPictureInPictureMode() {
        verifyMethodCalledFromDelegate(""enterPictureInPictureMode()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
14073,enforceUriPermission,"    public void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags, String message) {
        verifyMethodCalledFromDelegate(
                ""enforceUriPermission(Uri, String, String, Integer, Integer, Integer, String)"");"
14074,enforceUriPermission,"    public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) {
        verifyMethodCalledFromDelegate(""enforceUriPermission(Uri, Integer, Integer, Integer, String)"");
        ((CallVoid5<Uri, Integer, Integer, Integer, String>) mSuperListeners.pop())
                .call(uri, pid, uid, modeFlags, message);"
14075,enforcePermission,"    public void enforcePermission(String permission, int pid, int uid, String message) {
        verifyMethodCalledFromDelegate(""enforcePermission(String, Integer, Integer, String)"");
        ((CallVoid4<String, Integer, Integer, String>) mSuperListeners.pop()).call(permission, pid, uid, message);
    }"
14076,enforceCallingUriPermission,"    public void enforceCallingUriPermission(Uri uri, int modeFlags, String message) {
        verifyMethodCalledFromDelegate(""enforceCallingUriPermission(Uri, Integer, String)"");
        ((CallVoid3<Uri, Integer, String>) mSuperListeners.pop()).call(uri, modeFlags, message);
    }"
14077,enforceCallingPermission,"    public void enforceCallingPermission(String permission, String message) {
        verifyMethodCalledFromDelegate(""enforceCallingPermission(String, String)"");
        ((CallVoid2<String, String>) mSuperListeners.pop()).call(permission, message);
    }"
14078,enforceCallingOrSelfUriPermission,"    public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) {
        verifyMethodCalledFromDelegate(""enforceCallingOrSelfUriPermission(Uri, Integer, String)"");
        ((CallVoid3<Uri, Integer, String>) mSuperListeners.pop()).call(uri, modeFlags, message);
    }"
14079,enforceCallingOrSelfPermission,"    public void enforceCallingOrSelfPermission(String permission, String message) {
        verifyMethodCalledFromDelegate(""enforceCallingOrSelfPermission(String, String)"");
        ((CallVoid2<String, String>) mSuperListeners.pop()).call(permission, message);
    }"
14081,dispatchTrackballEvent,"    public boolean dispatchTrackballEvent(MotionEvent ev) {
        verifyMethodCalledFromDelegate(""dispatchTrackballEvent(MotionEvent)"");
        return ((CallFun1<Boolean, MotionEvent>) mSuperListeners.pop()).call(ev);
    }"
14082,dispatchTouchEvent,"    public boolean dispatchTouchEvent(MotionEvent ev) {
        verifyMethodCalledFromDelegate(""dispatchTouchEvent(MotionEvent)"");
        return ((CallFun1<Boolean, MotionEvent>) mSuperListeners.pop()).call(ev);
    }"
14083,dispatchPopulateAccessibilityEvent,"    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {
        verifyMethodCalledFromDelegate(""dispatchPopulateAccessibilityEvent(AccessibilityEvent)"");
        return ((CallFun1<Boolean, AccessibilityEvent>) mSuperListeners.pop()).call(event);
    }"
14084,dispatchKeyShortcutEvent,"    public boolean dispatchKeyShortcutEvent(KeyEvent event) {
        verifyMethodCalledFromDelegate(""dispatchKeyShortcutEvent(KeyEvent)"");
        return ((CallFun1<Boolean, KeyEvent>) mSuperListeners.pop()).call(event);
    }"
14085,dispatchKeyEvent,"    public boolean dispatchKeyEvent(KeyEvent event) {
        verifyMethodCalledFromDelegate(""dispatchKeyEvent(KeyEvent)"");
        return ((CallFun1<Boolean, KeyEvent>) mSuperListeners.pop()).call(event);
    }"
14086,dispatchGenericMotionEvent,"    public boolean dispatchGenericMotionEvent(MotionEvent ev) {
        verifyMethodCalledFromDelegate(""dispatchGenericMotionEvent(MotionEvent)"");
        return ((CallFun1<Boolean, MotionEvent>) mSuperListeners.pop()).call(ev);
    }"
14087,deleteSharedPreferences,"    public boolean deleteSharedPreferences(String name) {
        verifyMethodCalledFromDelegate(""deleteSharedPreferences(String)"");
        return ((CallFun1<Boolean, String>) mSuperListeners.pop()).call(name);
    }"
14088,deleteFile,"    public boolean deleteFile(String name) {
        verifyMethodCalledFromDelegate(""deleteFile(String)"");
        return ((CallFun1<Boolean, String>) mSuperListeners.pop()).call(name);
    }"
14089,deleteDatabase,"    public boolean deleteDatabase(String name) {
        verifyMethodCalledFromDelegate(""deleteDatabase(String)"");
        return ((CallFun1<Boolean, String>) mSuperListeners.pop()).call(name);
    }"
14090,databaseList,"    public String[] databaseList() {
        verifyMethodCalledFromDelegate(""databaseList()"");
        return ((CallFun0<String[]>) mSuperListeners.pop()).call();
    }"
14091,createPendingResult,"    public PendingIntent createPendingResult(int requestCode, @NonNull Intent data, int flags) {
        verifyMethodCalledFromDelegate(""createPendingResult(Integer, Intent, Integer)"");
        return ((CallFun3<PendingIntent, Integer, Intent, Integer>) mSuperListeners.pop())
                .call(requestCode, data, flags);"
14092,createPackageContext,"    public Context createPackageContext(String packageName, int flags) throws NameNotFoundException {
        verifyMethodCalledFromDelegate(""createPackageContext(String, Integer)"");
        return ((CallFun2<Context, String, Integer>) mSuperListeners.pop()).call(packageName, flags);
    }"
14093,createDisplayContext,"    public Context createDisplayContext(Display display) {
        verifyMethodCalledFromDelegate(""createDisplayContext(Display)"");
        return ((CallFun1<Context, Display>) mSuperListeners.pop()).call(display);
    }"
14094,createDeviceProtectedStorageContext,"    public Context createDeviceProtectedStorageContext() {
        verifyMethodCalledFromDelegate(""createDeviceProtectedStorageContext()"");
        return ((CallFun0<Context>) mSuperListeners.pop()).call();
    }"
14095,createContextForSplit,"    public Context createContextForSplit(String splitName) throws NameNotFoundException {
        verifyMethodCalledFromDelegate(""createContextForSplit(String)"");
        return ((CallFun1<Context, String>) mSuperListeners.pop()).call(splitName);
    }"
14096,createConfigurationContext,"    public Context createConfigurationContext(Configuration overrideConfiguration) {
        verifyMethodCalledFromDelegate(""createConfigurationContext(Configuration)"");
        return ((CallFun1<Context, Configuration>) mSuperListeners.pop()).call(overrideConfiguration);
    }"
14097,closeOptionsMenu,"    public void closeOptionsMenu() {
        verifyMethodCalledFromDelegate(""closeOptionsMenu()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
14098,closeContextMenu,"    public void closeContextMenu() {
        verifyMethodCalledFromDelegate(""closeContextMenu()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
14099,clearWallpaper,"    public void clearWallpaper() throws IOException {
        verifyMethodCalledFromDelegate(""clearWallpaper()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
14100,checkUriPermission,"    public int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags) {
        verifyMethodCalledFromDelegate(""checkUriPermission(Uri, String, String, Integer, Integer, Integer)"");
        return ((CallFun6<Integer, Uri, String, String, Integer, Integer, Integer>) mSuperListeners.pop())"
14101,checkUriPermission,"    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags) {
        verifyMethodCalledFromDelegate(""checkUriPermission(Uri, Integer, Integer, Integer)"");
        return ((CallFun4<Integer, Uri, Integer, Integer, Integer>) mSuperListeners.pop())
                .call(uri, pid, uid, modeFlags);"
14102,checkSelfPermission,"    public int checkSelfPermission(String permission) {
        verifyMethodCalledFromDelegate(""checkSelfPermission(String)"");
        return ((CallFun1<Integer, String>) mSuperListeners.pop()).call(permission);
    }"
14103,checkPermission,"    public int checkPermission(String permission, int pid, int uid) {
        verifyMethodCalledFromDelegate(""checkPermission(String, Integer, Integer)"");
        return ((CallFun3<Integer, String, Integer, Integer>) mSuperListeners.pop()).call(permission, pid, uid);
    }"
14104,checkCallingUriPermission,"    public int checkCallingUriPermission(Uri uri, int modeFlags) {
        verifyMethodCalledFromDelegate(""checkCallingUriPermission(Uri, Integer)"");
        return ((CallFun2<Integer, Uri, Integer>) mSuperListeners.pop()).call(uri, modeFlags);
    }"
14105,checkCallingPermission,"    public int checkCallingPermission(String permission) {
        verifyMethodCalledFromDelegate(""checkCallingPermission(String)"");
        return ((CallFun1<Integer, String>) mSuperListeners.pop()).call(permission);
    }"
14106,checkCallingOrSelfUriPermission,"    public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags) {
        verifyMethodCalledFromDelegate(""checkCallingOrSelfUriPermission(Uri, Integer)"");
        return ((CallFun2<Integer, Uri, Integer>) mSuperListeners.pop()).call(uri, modeFlags);
    }"
14107,checkCallingOrSelfPermission,"    public int checkCallingOrSelfPermission(String permission) {
        verifyMethodCalledFromDelegate(""checkCallingOrSelfPermission(String)"");
        return ((CallFun1<Integer, String>) mSuperListeners.pop()).call(permission);
    }"
14108,bindService,"    public boolean bindService(Intent service, ServiceConnection conn, int flags) {
        verifyMethodCalledFromDelegate(""bindService(Intent, ServiceConnection, Integer)"");
        return ((CallFun3<Boolean, Intent, ServiceConnection, Integer>) mSuperListeners.pop())
                .call(service, conn, flags);"
14109,attachBaseContext,"    public void attachBaseContext(Context newBase) {
        verifyMethodCalledFromDelegate(""attachBaseContext(Context)"");
        ((CallVoid1<Context>) mSuperListeners.pop()).call(newBase);
    }"
14110,applyOverrideConfiguration,"    public void applyOverrideConfiguration(Configuration overrideConfiguration) {
        verifyMethodCalledFromDelegate(""applyOverrideConfiguration(Configuration)"");
        ((CallVoid1<Configuration>) mSuperListeners.pop()).call(overrideConfiguration);
    }"
14111,addContentView,"    public void addContentView(View view, LayoutParams params) {
        verifyMethodCalledFromDelegate(""addContentView(View, LayoutParams)"");
        ((CallVoid2<View, LayoutParams>) mSuperListeners.pop()).call(view, params);
    }"
14112,onContextItemSelected,"            public boolean onContextItemSelected(final MenuItem item) {
                return false;
            }"
14115,onKeyDown,"            public boolean onKeyDown(final int keyCode, final KeyEvent event) {
                return super.onKeyDown(25, event);
            }"
14118,testSingleEvent,"    public void testSingleEvent() throws Exception {

        final ActivityPlugin a = spy(new ActivityPlugin());

        final CompositeActivity activity = mock(CompositeActivity.class);
        final ActivityDelegate delegate = new ActivityDelegate(activity);

        delegate.addPlugin(a);

        final KeyEvent event = mock(KeyEvent.class);"
14119,testNoPlugins,"    public void testNoPlugins() throws Exception {

        final CompositeActivity activity = mock(CompositeActivity.class);
        final ActivityDelegate delegate = new ActivityDelegate(activity);

        final KeyEvent event = mock(KeyEvent.class);
        delegate.onKeyDown(1, event);"
14120,onPause,"            public void onPause() {
                beforeCSuper.call();
                super.onPause();
                afterCSuper.call();
            }"
14121,onPause,"            public void onPause() {
                beforeBSuper.call();
                super.onPause();
                afterBSuper.call();
            }"
14129,onKeyDown,"            public boolean onKeyDown(final int keyCode, final KeyEvent event) {
                return true;
            }"
14132,call,"            public void call(final BroadcastReceiver receiver) {
                if (iterator.hasPrevious()) {
                    iterator.previous().unregisterReceiver(this, receiver);"
14133,unregisterReceiver,"    public void unregisterReceiver(BroadcastReceiver receiver) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_unregisterReceiver(receiver);
            return;
        }
"
14136,call,"            public void call(final ComponentCallbacks callback) {
                if (iterator.hasPrevious()) {
                    iterator.previous().unregisterComponentCallbacks(this, callback);"
14137,unregisterComponentCallbacks,"    public void unregisterComponentCallbacks(ComponentCallbacks callback) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_unregisterComponentCallbacks(callback);
            return;
        }
"
14138,call,"            public void call(final ServiceConnection conn) {
                if (iterator.hasPrevious()) {
                    iterator.previous().unbindService(this, conn);"
14139,unbindService,"    public void unbindService(ServiceConnection conn) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_unbindService(conn);
            return;
        }
"
14140,call,"            public void call(final String query, final Bundle appSearchData) {
                if (iterator.hasPrevious()) {
                    iterator.previous().triggerSearch(this, query, appSearchData);"
14141,triggerSearch,"    public void triggerSearch(String query, @Nullable Bundle appSearchData) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_triggerSearch(query, appSearchData);
            return;
        }
"
14142,call,"            public void call(final Boolean get) {
                if (iterator.hasPrevious()) {
                    iterator.previous().takeKeyEvents(this, get);"
14143,takeKeyEvents,"    public void takeKeyEvents(boolean get) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_takeKeyEvents(get);
            return;
        }
"
14144,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().supportStartPostponedEnterTransition(this);"
14145,supportStartPostponedEnterTransition,"    public void supportStartPostponedEnterTransition() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_supportStartPostponedEnterTransition();
            return;
        }
"
14146,call,"            public Boolean call(final Intent targetIntent) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().supportShouldUpRecreateTask(this, targetIntent);"
14147,supportShouldUpRecreateTask,"    public boolean supportShouldUpRecreateTask(@NonNull Intent targetIntent) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_supportShouldUpRecreateTask(targetIntent);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14148,call,"            public Boolean call(final Integer featureId) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().supportRequestWindowFeature(this, featureId);"
14149,supportRequestWindowFeature,"    public boolean supportRequestWindowFeature(int featureId) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_supportRequestWindowFeature(featureId);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14150,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().supportPostponeEnterTransition(this);"
14151,supportPostponeEnterTransition,"    public void supportPostponeEnterTransition() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_supportPostponeEnterTransition();
            return;
        }
"
14152,call,"            public void call(final Intent upIntent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().supportNavigateUpTo(this, upIntent);"
14153,supportNavigateUpTo,"    public void supportNavigateUpTo(@NonNull Intent upIntent) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_supportNavigateUpTo(upIntent);
            return;
        }
"
14154,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().supportInvalidateOptionsMenu(this);"
14155,supportInvalidateOptionsMenu,"    public void supportInvalidateOptionsMenu() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_supportInvalidateOptionsMenu();
            return;
        }
"
14156,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().supportFinishAfterTransition(this);"
14157,supportFinishAfterTransition,"    public void supportFinishAfterTransition() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_supportFinishAfterTransition();
            return;
        }
"
14158,call,"            public Boolean call(final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().superDispatchKeyEvent(this, event);"
14159,superDispatchKeyEvent,"    public boolean superDispatchKeyEvent(KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_superDispatchKeyEvent(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14160,call,"            public Boolean call(final Intent name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().stopService(this, name);"
14161,stopService,"    public boolean stopService(Intent name) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_stopService(name);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14162,call,"            public void call(final Cursor c) {
                if (iterator.hasPrevious()) {
                    iterator.previous().stopManagingCursor(this, c);"
14163,stopManagingCursor,"    public void stopManagingCursor(Cursor c) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_stopManagingCursor(c);
            return;
        }
"
14164,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().stopLockTask(this);"
14165,stopLockTask,"    public void stopLockTask() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_stopLockTask();
            return;
        }
"
14166,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().stopLocalVoiceInteraction(this);"
14167,stopLocalVoiceInteraction,"    public void stopLocalVoiceInteraction() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_stopLocalVoiceInteraction();
            return;
        }
"
14168,call,"            public ActionMode call(final Callback callback) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startSupportActionMode(this, callback);"
14169,startSupportActionMode,"    public ActionMode startSupportActionMode(@NonNull Callback callback) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startSupportActionMode(callback);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14170,call,"            public ComponentName call(final Intent service) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startService(this, service);"
14171,startService,"    public ComponentName startService(Intent service) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startService(service);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14172,call,"            public void call(final String initialQuery, final Boolean selectInitialQuery, final Bundle appSearchData,
                    final Boolean globalSearch) {
                if (iterator.hasPrevious()) {"
14173,startSearch,"    public void startSearch(@Nullable String initialQuery, boolean selectInitialQuery, @Nullable Bundle appSearchData,
            boolean globalSearch) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startSearch(initialQuery, selectInitialQuery, appSearchData, globalSearch);
            return;
        }"
14176,call,"            public Boolean call(final Intent intent, final Bundle options) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startNextMatchingActivity(this, intent, options);"
14177,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent, @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startNextMatchingActivity(intent, options);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14178,call,"            public Boolean call(final Intent intent) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startNextMatchingActivity(this, intent);"
14179,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startNextMatchingActivity(intent);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14180,call,"            public void call(final Cursor c) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startManagingCursor(this, c);"
14181,startManagingCursor,"    public void startManagingCursor(Cursor c) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startManagingCursor(c);
            return;
        }
"
14182,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().startLockTask(this);"
14183,startLockTask,"    public void startLockTask() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startLockTask();
            return;
        }
"
14184,call,"            public void call(final Bundle privateOptions) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startLocalVoiceInteraction(this, privateOptions);"
14185,startLocalVoiceInteraction,"    public void startLocalVoiceInteraction(Bundle privateOptions) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startLocalVoiceInteraction(privateOptions);
            return;
        }
"
14186,call,"            public void call(final Fragment fragment, final IntentSender intent, final Integer requestCode,
                    final Intent fillInIntent, final Integer flagsMask, final Integer flagsValues,
                    final Integer extraFlags, final Bundle options) {"
14187,startIntentSenderFromFragment,"    public void startIntentSenderFromFragment(Fragment fragment, IntentSender intent, int requestCode,
            @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)
            throws SendIntentException {
        if (mPlugins.isEmpty()) {
            try {
                getOriginal()"
14188,call,"            public void call(final Activity child, final IntentSender intent, final Integer requestCode,
                    final Intent fillInIntent, final Integer flagsMask, final Integer flagsValues,
                    final Integer extraFlags, final Bundle options) {"
14190,call,"            public void call(final Activity child, final IntentSender intent, final Integer requestCode,
                    final Intent fillInIntent, final Integer flagsMask, final Integer flagsValues,
                    final Integer extraFlags) {"
14194,call,"            public void call(final IntentSender intent, final Integer requestCode, final Intent fillInIntent,
                    final Integer flagsMask, final Integer flagsValues, final Integer extraFlags) {
                if (iterator.hasPrevious()) {"
14196,call,"            public void call(final IntentSender intent, final Intent fillInIntent, final Integer flagsMask,
                    final Integer flagsValues, final Integer extraFlags, final Bundle options) {
                if (iterator.hasPrevious()) {"
14198,call,"            public void call(final IntentSender intent, final Intent fillInIntent, final Integer flagsMask,
                    final Integer flagsValues, final Integer extraFlags) {
                if (iterator.hasPrevious()) {"
14200,call,"            public Boolean call(final ComponentName className, final String profileFile, final Bundle arguments) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startInstrumentation(this, className, profileFile, arguments);"
14201,startInstrumentation,"    public boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startInstrumentation(className, profileFile, arguments);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14202,call,"            public ComponentName call(final Intent service) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startForegroundService(this, service);"
14203,startForegroundService,"    public ComponentName startForegroundService(Intent service) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startForegroundService(service);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14204,call,"            public Boolean call(final Intent intent, final Integer requestCode, final Bundle options) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startActivityIfNeeded(this, intent, requestCode, options);"
14205,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode, @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startActivityIfNeeded(intent, requestCode, options);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14206,call,"            public Boolean call(final Intent intent, final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startActivityIfNeeded(this, intent, requestCode);"
14207,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startActivityIfNeeded(intent, requestCode);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14208,call,"            public void call(final android.app.Fragment fragment, final Intent intent, final Integer requestCode,
                    final Bundle options) {
                if (iterator.hasPrevious()) {"
14209,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityFromFragment(fragment, intent, requestCode, options);
            return;
        }"
14210,call,"            public void call(final android.app.Fragment fragment, final Intent intent, final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivityFromFragment(this, fragment, intent, requestCode);"
14211,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityFromFragment(fragment, intent, requestCode);
            return;
        }
"
14212,call,"            public void call(final Fragment fragment, final Intent intent, final Integer requestCode,
                    final Bundle options) {
                if (iterator.hasPrevious()) {"
14213,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityFromFragment(fragment, intent, requestCode, options);
            return;
        }"
14214,call,"            public void call(final Fragment fragment, final Intent intent, final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivityFromFragment(this, fragment, intent, requestCode);"
14215,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityFromFragment(fragment, intent, requestCode);
            return;
        }
"
14216,call,"            public void call(final Activity child, final Intent intent, final Integer requestCode,
                    final Bundle options) {
                if (iterator.hasPrevious()) {"
14217,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode,
            @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityFromChild(child, intent, requestCode, options);
            return;
        }"
14218,call,"            public void call(final Activity child, final Intent intent, final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivityFromChild(this, child, intent, requestCode);"
14219,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityFromChild(child, intent, requestCode);
            return;
        }
"
14228,call,"            public void call(final Intent[] intents, final Bundle options) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivities(this, intents, options);"
14229,startActivities,"    public void startActivities(Intent[] intents, @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivities(intents, options);
            return;
        }
"
14230,call,"            public void call(final Intent[] intents) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivities(this, intents);"
14231,startActivities,"    public void startActivities(Intent[] intents) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivities(intents);
            return;
        }
"
14232,call,"            public android.view.ActionMode call(final android.view.ActionMode.Callback callback, final Integer type) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startActionMode(this, callback, type);"
14233,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback, int type) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startActionMode(callback, type);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14234,call,"            public android.view.ActionMode call(final android.view.ActionMode.Callback callback) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startActionMode(this, callback);"
14235,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startActionMode(callback);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14236,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().showLockTaskEscapeMessage(this);"
14237,showLockTaskEscapeMessage,"    public void showLockTaskEscapeMessage() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_showLockTaskEscapeMessage();
            return;
        }
"
14238,call,"            public Boolean call(final Bundle args) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().showAssist(this, args);"
14239,showAssist,"    public boolean showAssist(Bundle args) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_showAssist(args);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14240,call,"            public Boolean call(final Intent targetIntent) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().shouldUpRecreateTask(this, targetIntent);"
14241,shouldUpRecreateTask,"    public boolean shouldUpRecreateTask(Intent targetIntent) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_shouldUpRecreateTask(targetIntent);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14243,shouldShowRequestPermissionRationale,"    public boolean shouldShowRequestPermissionRationale(@NonNull String permission) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_shouldShowRequestPermissionRationale(permission);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14244,call,"            public void call(final InputStream data) {
                if (iterator.hasPrevious()) {
                    try {"
14245,setWallpaper,"    public void setWallpaper(InputStream data) throws IOException {
        if (mPlugins.isEmpty()) {
            try {
                getOriginal().super_setWallpaper(data);
            } catch (IOException e) {
                throw new SuppressedException(e);"
14246,call,"            public void call(final Boolean enabled, final ComponentName requestedComponent) {
                if (iterator.hasPrevious()) {
                    try {"
14247,setVrModeEnabled,"    public void setVrModeEnabled(boolean enabled, @NonNull ComponentName requestedComponent)
            throws NameNotFoundException {
        if (mPlugins.isEmpty()) {
            try {
                getOriginal().super_setVrModeEnabled(enabled, requestedComponent);
            } catch (NameNotFoundException e) {"
14248,call,"            public void call(final Boolean visible) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setVisible(this, visible);"
14250,call,"            public void call(final Boolean turnScreenOn) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setTurnScreenOn(this, turnScreenOn);"
14252,call,"            public void call(final Integer textColor) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setTitleColor(this, textColor);"
14254,call,"            public void call(final Integer titleId) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setTitle(this, titleId);"
14256,call,"            public void call(final CharSequence title) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setTitle(this, title);"
14258,call,"            public void call(final TaskDescription taskDescription) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setTaskDescription(this, taskDescription);"
14260,call,"            public void call(final Boolean visible) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setSupportProgressBarVisibility(this, visible);"
14262,call,"            public void call(final Boolean visible) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setSupportProgressBarIndeterminateVisibility(this, visible);"
14264,call,"            public void call(final Boolean indeterminate) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setSupportProgressBarIndeterminate(this, indeterminate);"
14266,call,"            public void call(final Integer progress) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setSupportProgress(this, progress);"
14268,call,"            public void call(final Boolean showWhenLocked) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setShowWhenLocked(this, showWhenLocked);"
14270,call,"            public void call(final PictureInPictureParams params) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setPictureInPictureParams(this, params);"
14272,call,"            public void call(final Boolean finish) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setFinishOnTouchOutside(this, finish);"
14274,call,"            public void call(final android.app.SharedElementCallback callback) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setExitSharedElementCallback(this, callback);"
14276,call,"            public void call(final SharedElementCallback listener) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setExitSharedElementCallback(this, listener);"
14278,call,"            public void call(final android.app.SharedElementCallback callback) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setEnterSharedElementCallback(this, callback);"
14282,call,"            public void call(final View view, final LayoutParams params) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setContentView(this, view, params);"
14284,call,"            public void call(final View view) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setContentView(this, view);"
14286,call,"            public void call(final Integer layoutResID) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setContentView(this, layoutResID);"
14288,call,"            public void call(final Intent intent, final UserHandle user, final BroadcastReceiver resultReceiver,
                    final Handler scheduler, final Integer initialCode, final String initialData,
                    final Bundle initialExtras) {"
14290,call,"            public void call(final Intent intent, final BroadcastReceiver resultReceiver, final Handler scheduler,
                    final Integer initialCode, final String initialData, final Bundle initialExtras) {
                if (iterator.hasPrevious()) {"
14292,call,"            public void call(final Intent intent, final UserHandle user) {
                if (iterator.hasPrevious()) {
                    iterator.previous().sendStickyBroadcastAsUser(this, intent, user);"
14293,sendStickyBroadcastAsUser,"    public void sendStickyBroadcastAsUser(Intent intent, UserHandle user) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_sendStickyBroadcastAsUser(intent, user);
            return;
        }
"
14294,call,"            public void call(final Intent intent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().sendStickyBroadcast(this, intent);"
14295,sendStickyBroadcast,"    public void sendStickyBroadcast(Intent intent) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_sendStickyBroadcast(intent);
            return;
        }
"
14296,call,"            public void call(final Intent intent, final UserHandle user, final String receiverPermission,
                    final BroadcastReceiver resultReceiver, final Handler scheduler, final Integer initialCode,
                    final String initialData, final Bundle initialExtras) {"
14298,call,"            public void call(final Intent intent, final String receiverPermission,
                    final BroadcastReceiver resultReceiver, final Handler scheduler, final Integer initialCode,
                    final String initialData, final Bundle initialExtras) {"
14300,call,"            public void call(final Intent intent, final String receiverPermission) {
                if (iterator.hasPrevious()) {
                    iterator.previous().sendOrderedBroadcast(this, intent, receiverPermission);"
14301,sendOrderedBroadcast,"    public void sendOrderedBroadcast(Intent intent, String receiverPermission) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_sendOrderedBroadcast(intent, receiverPermission);
            return;
        }
"
14302,call,"            public void call(final Intent intent, final UserHandle user, final String receiverPermission) {
                if (iterator.hasPrevious()) {
                    iterator.previous().sendBroadcastAsUser(this, intent, user, receiverPermission);"
14303,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_sendBroadcastAsUser(intent, user, receiverPermission);
            return;
        }
"
14304,call,"            public void call(final Intent intent, final UserHandle user) {
                if (iterator.hasPrevious()) {
                    iterator.previous().sendBroadcastAsUser(this, intent, user);"
14305,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_sendBroadcastAsUser(intent, user);
            return;
        }
"
14306,call,"            public void call(final Intent intent, final String receiverPermission) {
                if (iterator.hasPrevious()) {
                    iterator.previous().sendBroadcast(this, intent, receiverPermission);"
14307,sendBroadcast,"    public void sendBroadcast(Intent intent, String receiverPermission) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_sendBroadcast(intent, receiverPermission);
            return;
        }
"
14308,call,"            public void call(final Intent intent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().sendBroadcast(this, intent);"
14309,sendBroadcast,"    public void sendBroadcast(Intent intent) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_sendBroadcast(intent);
            return;
        }
"
14310,call,"            public void call(final String targetPackage, final Uri uri, final Integer modeFlags) {
                if (iterator.hasPrevious()) {
                    iterator.previous().revokeUriPermission(this, targetPackage, uri, modeFlags);"
14311,revokeUriPermission,"    public void revokeUriPermission(String targetPackage, Uri uri, int modeFlags) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_revokeUriPermission(targetPackage, uri, modeFlags);
            return;
        }
"
14312,call,"            public void call(final Uri uri, final Integer modeFlags) {
                if (iterator.hasPrevious()) {
                    iterator.previous().revokeUriPermission(this, uri, modeFlags);"
14313,revokeUriPermission,"    public void revokeUriPermission(Uri uri, int modeFlags) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_revokeUriPermission(uri, modeFlags);
            return;
        }
"
14314,call,"            public Boolean call(final Boolean visible) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().requestVisibleBehind(this, visible);"
14315,requestVisibleBehind,"    public boolean requestVisibleBehind(boolean visible) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_requestVisibleBehind(visible);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14316,call,"            public DragAndDropPermissions call(final DragEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().requestDragAndDropPermissions(this, event);"
14317,requestDragAndDropPermissions,"    public DragAndDropPermissions requestDragAndDropPermissions(DragEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_requestDragAndDropPermissions(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14318,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().reportFullyDrawn(this);"
14319,reportFullyDrawn,"    public void reportFullyDrawn() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_reportFullyDrawn();
            return;
        }
"
14320,call,"            public void call(final Intent intent, final UserHandle user) {
                if (iterator.hasPrevious()) {
                    iterator.previous().removeStickyBroadcastAsUser(this, intent, user);"
14321,removeStickyBroadcastAsUser,"    public void removeStickyBroadcastAsUser(Intent intent, UserHandle user) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_removeStickyBroadcastAsUser(intent, user);
            return;
        }
"
14322,call,"            public void call(final Intent intent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().removeStickyBroadcast(this, intent);"
14323,removeStickyBroadcast,"    public void removeStickyBroadcast(Intent intent) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_removeStickyBroadcast(intent);
            return;
        }
"
14324,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().releaseInstance(this);"
14325,releaseInstance,"    public boolean releaseInstance() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_releaseInstance();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14326,call,"            public Intent call(final BroadcastReceiver receiver, final IntentFilter filter,
                    final String broadcastPermission, final Handler scheduler, final Integer flags) {
                if (iterator.hasPrevious()) {"
14327,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler, int flags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_registerReceiver(receiver, filter, broadcastPermission, scheduler, flags);
        }
"
14328,call,"            public Intent call(final BroadcastReceiver receiver, final IntentFilter filter,
                    final String broadcastPermission, final Handler scheduler) {
                if (iterator.hasPrevious()) {"
14329,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_registerReceiver(receiver, filter, broadcastPermission, scheduler);
        }
"
14330,call,"            public Intent call(final BroadcastReceiver receiver, final IntentFilter filter, final Integer flags) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().registerReceiver(this, receiver, filter, flags);"
14331,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_registerReceiver(receiver, filter, flags);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14332,call,"            public Intent call(final BroadcastReceiver receiver, final IntentFilter filter) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().registerReceiver(this, receiver, filter);"
14333,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_registerReceiver(receiver, filter);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14336,call,"            public void call(final ComponentCallbacks callback) {
                if (iterator.hasPrevious()) {
                    iterator.previous().registerComponentCallbacks(this, callback);"
14337,registerComponentCallbacks,"    public void registerComponentCallbacks(ComponentCallbacks callback) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_registerComponentCallbacks(callback);
            return;
        }
"
14338,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().recreate(this);"
14339,recreate,"    public void recreate() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_recreate();
            return;
        }
"
14340,call,"            public void call(final SupportActivity.ExtraData extraData) {
                if (iterator.hasPrevious()) {
                    iterator.previous().putExtraData(this, extraData);"
14341,putExtraData,"    public void putExtraData(ExtraData extraData) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_putExtraData(extraData);
            return;
        }
"
14344,call,"            public Drawable call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().peekWallpaper(this);"
14345,peekWallpaper,"    public Drawable peekWallpaper() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_peekWallpaper();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14346,call,"            public void call(final Integer enterAnim, final Integer exitAnim) {
                if (iterator.hasPrevious()) {
                    iterator.previous().overridePendingTransition(this, enterAnim, exitAnim);"
14347,overridePendingTransition,"    public void overridePendingTransition(int enterAnim, int exitAnim) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_overridePendingTransition(enterAnim, exitAnim);
            return;
        }
"
14348,call,"            public SQLiteDatabase call(final String name, final Integer mode, final CursorFactory factory,
                    final DatabaseErrorHandler errorHandler) {
                if (iterator.hasPrevious()) {"
14349,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory,
            DatabaseErrorHandler errorHandler) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_openOrCreateDatabase(name, mode, factory, errorHandler);
        }
"
14350,call,"            public SQLiteDatabase call(final String name, final Integer mode, final CursorFactory factory) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().openOrCreateDatabase(this, name, mode, factory);"
14351,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_openOrCreateDatabase(name, mode, factory);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14352,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().openOptionsMenu(this);"
14353,openOptionsMenu,"    public void openOptionsMenu() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_openOptionsMenu();
            return;
        }
"
14354,call,"            public FileOutputStream call(final String name, final Integer mode) {
                if (iterator.hasPrevious()) {
                    try {"
14355,openFileOutput,"    public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException {
        if (mPlugins.isEmpty()) {
            try {
                return getOriginal().super_openFileOutput(name, mode);
            } catch (FileNotFoundException e) {
                throw new SuppressedException(e);"
14356,call,"            public FileInputStream call(final String name) {
                if (iterator.hasPrevious()) {
                    try {"
14357,openFileInput,"    public FileInputStream openFileInput(String name) throws FileNotFoundException {
        if (mPlugins.isEmpty()) {
            try {
                return getOriginal().super_openFileInput(name);
            } catch (FileNotFoundException e) {
                throw new SuppressedException(e);"
14358,call,"            public void call(final View view) {
                if (iterator.hasPrevious()) {
                    iterator.previous().openContextMenu(this, view);"
14359,openContextMenu,"    public void openContextMenu(View view) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_openContextMenu(view);
            return;
        }
"
14360,call,"            public ActionMode call(final Callback callback) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onWindowStartingSupportActionMode(this, callback);"
14361,onWindowStartingSupportActionMode,"    public ActionMode onWindowStartingSupportActionMode(@NonNull Callback callback) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onWindowStartingSupportActionMode(callback);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14362,call,"            public android.view.ActionMode call(final android.view.ActionMode.Callback callback, final Integer type) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onWindowStartingActionMode(this, callback, type);"
14363,onWindowStartingActionMode,"    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback, int type) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onWindowStartingActionMode(callback, type);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14364,call,"            public android.view.ActionMode call(final android.view.ActionMode.Callback callback) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onWindowStartingActionMode(this, callback);"
14365,onWindowStartingActionMode,"    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onWindowStartingActionMode(callback);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14366,call,"            public void call(final Boolean hasFocus) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onWindowFocusChanged(this, hasFocus);"
14367,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onWindowFocusChanged(hasFocus);
            return;
        }
"
14368,call,"            public void call(final WindowManager.LayoutParams params) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onWindowAttributesChanged(this, params);"
14369,onWindowAttributesChanged,"    public void onWindowAttributesChanged(WindowManager.LayoutParams params) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onWindowAttributesChanged(params);
            return;
        }
"
14370,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onVisibleBehindCanceled(this);"
14371,onVisibleBehindCanceled,"    public void onVisibleBehindCanceled() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onVisibleBehindCanceled();
            return;
        }
"
14372,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onUserLeaveHint(this);"
14373,onUserLeaveHint,"    public void onUserLeaveHint() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onUserLeaveHint();
            return;
        }
"
14374,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onUserInteraction(this);"
14375,onUserInteraction,"    public void onUserInteraction() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onUserInteraction();
            return;
        }
"
14376,call,"            public void call(final Integer level) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onTrimMemory(this, level);"
14377,onTrimMemory,"    public void onTrimMemory(int level) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onTrimMemory(level);
            return;
        }
"
14378,call,"            public Boolean call(final MotionEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onTrackballEvent(this, event);"
14379,onTrackballEvent,"    public boolean onTrackballEvent(MotionEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onTrackballEvent(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14380,call,"            public Boolean call(final MotionEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onTouchEvent(this, event);"
14381,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onTouchEvent(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14382,call,"            public void call(final CharSequence title, final Integer color) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onTitleChanged(this, title, color);"
14383,onTitleChanged,"    public void onTitleChanged(CharSequence title, int color) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onTitleChanged(title, color);
            return;
        }
"
14384,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onSupportNavigateUp(this);"
14385,onSupportNavigateUp,"    public boolean onSupportNavigateUp() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onSupportNavigateUp();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14386,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onSupportContentChanged(this);"
14387,onSupportContentChanged,"    public void onSupportContentChanged() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onSupportContentChanged();
            return;
        }
"
14388,call,"            public void call(final ActionMode mode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onSupportActionModeStarted(this, mode);"
14389,onSupportActionModeStarted,"    public void onSupportActionModeStarted(@NonNull ActionMode mode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onSupportActionModeStarted(mode);
            return;
        }
"
14390,call,"            public void call(final ActionMode mode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onSupportActionModeFinished(this, mode);"
14391,onSupportActionModeFinished,"    public void onSupportActionModeFinished(@NonNull ActionMode mode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onSupportActionModeFinished(mode);
            return;
        }
"
14394,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onStateNotSaved(this);"
14395,onStateNotSaved,"    public void onStateNotSaved() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onStateNotSaved();
            return;
        }
"
14398,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onSearchRequested(this);"
14399,onSearchRequested,"    public boolean onSearchRequested() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onSearchRequested();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14400,call,"            public Boolean call(final SearchEvent searchEvent) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onSearchRequested(this, searchEvent);"
14401,onSearchRequested,"    public boolean onSearchRequested(@Nullable SearchEvent searchEvent) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onSearchRequested(searchEvent);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14402,call,"            public void call(final Bundle outState, final PersistableBundle outPersistentState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onSaveInstanceState(this, outState, outPersistentState);"
14403,onSaveInstanceState,"    public void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onSaveInstanceState(outState, outPersistentState);
            return;
        }
"
14405,onSaveInstanceState,"    public void onSaveInstanceState(Bundle outState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onSaveInstanceState(outState);
            return;
        }
"
14406,onRetainNonConfigurationInstance,"    public Object onRetainNonConfigurationInstance() {
        final NonConfigurationInstanceWrapper all = new NonConfigurationInstanceWrapper(
                getOriginal().onRetainCompositeCustomNonConfigurationInstance());
        for (final ActivityPlugin plugin : mPlugins) {
            final CompositeNonConfigurationInstance pluginNci = plugin"
14407,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onResumeFragments(this);"
14408,onResumeFragments,"    public void onResumeFragments() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onResumeFragments();
            return;
        }
"
14411,call,"            public void call(final Bundle savedInstanceState, final PersistableBundle persistentState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onRestoreInstanceState(this, savedInstanceState, persistentState);"
14412,onRestoreInstanceState,"    public void onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onRestoreInstanceState(savedInstanceState, persistentState);
            return;
        }
"
14413,call,"            public void call(final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onRestoreInstanceState(this, savedInstanceState);"
14414,onRestoreInstanceState,"    public void onRestoreInstanceState(Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onRestoreInstanceState(savedInstanceState);
            return;
        }
"
14415,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onRestart(this);"
14416,onRestart,"    public void onRestart() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onRestart();
            return;
        }
"
14419,call,"            public Uri call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onProvideReferrer(this);"
14420,onProvideReferrer,"    public Uri onProvideReferrer() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onProvideReferrer();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14421,call,"            public void call(final List<KeyboardShortcutGroup> data, final Menu menu, final Integer deviceId) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onProvideKeyboardShortcuts(this, data, menu, deviceId);"
14422,onProvideKeyboardShortcuts,"    public void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onProvideKeyboardShortcuts(data, menu, deviceId);
            return;
        }
"
14423,call,"            public void call(final Bundle data) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onProvideAssistData(this, data);"
14424,onProvideAssistData,"    public void onProvideAssistData(Bundle data) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onProvideAssistData(data);
            return;
        }
"
14425,call,"            public void call(final AssistContent outContent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onProvideAssistContent(this, outContent);"
14426,onProvideAssistContent,"    public void onProvideAssistContent(AssistContent outContent) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onProvideAssistContent(outContent);
            return;
        }
"
14427,call,"            public void call(final TaskStackBuilder builder) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPrepareSupportNavigateUpTaskStack(this, builder);"
14428,onPrepareSupportNavigateUpTaskStack,"    public void onPrepareSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPrepareSupportNavigateUpTaskStack(builder);
            return;
        }
"
14429,call,"            public Boolean call(final Integer featureId, final View view, final Menu menu) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onPreparePanel(this, featureId, view, menu);"
14430,onPreparePanel,"    public boolean onPreparePanel(int featureId, View view, Menu menu) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onPreparePanel(featureId, view, menu);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14431,call,"            public Boolean call(final View view, final Menu menu) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onPrepareOptionsPanel(this, view, menu);"
14432,onPrepareOptionsPanel,"    public boolean onPrepareOptionsPanel(View view, Menu menu) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onPrepareOptionsPanel(view, menu);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14433,call,"            public Boolean call(final Menu menu) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onPrepareOptionsMenu(this, menu);"
14434,onPrepareOptionsMenu,"    public boolean onPrepareOptionsMenu(Menu menu) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onPrepareOptionsMenu(menu);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14435,call,"            public void call(final android.app.TaskStackBuilder builder) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPrepareNavigateUpTaskStack(this, builder);"
14436,onPrepareNavigateUpTaskStack,"    public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPrepareNavigateUpTaskStack(builder);
            return;
        }
"
14437,call,"            public void call(final Integer id, final Dialog dialog, final Bundle args) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPrepareDialog(this, id, dialog, args);"
14438,onPrepareDialog,"    public void onPrepareDialog(int id, Dialog dialog, Bundle args) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPrepareDialog(id, dialog, args);
            return;
        }
"
14439,call,"            public void call(final Integer id, final Dialog dialog) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPrepareDialog(this, id, dialog);"
14440,onPrepareDialog,"    public void onPrepareDialog(int id, Dialog dialog) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPrepareDialog(id, dialog);
            return;
        }
"
14441,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPostResume(this);"
14442,onPostResume,"    public void onPostResume() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPostResume();
            return;
        }
"
14443,call,"            public void call(final Bundle savedInstanceState, final PersistableBundle persistentState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPostCreate(this, savedInstanceState, persistentState);"
14444,onPostCreate,"    public void onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPostCreate(savedInstanceState, persistentState);
            return;
        }
"
14445,call,"            public void call(final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPostCreate(this, savedInstanceState);"
14446,onPostCreate,"    public void onPostCreate(@Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPostCreate(savedInstanceState);
            return;
        }
"
14447,call,"            public void call(final Boolean isInPictureInPictureMode, final Configuration newConfig) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPictureInPictureModeChanged(this, isInPictureInPictureMode, newConfig);"
14448,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig);
            return;
        }
"
14453,call,"            public void call(final Integer featureId, final Menu menu) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPanelClosed(this, featureId, menu);"
14454,onPanelClosed,"    public void onPanelClosed(int featureId, Menu menu) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPanelClosed(featureId, menu);
            return;
        }
"
14458,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onOptionsItemSelected(item);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14459,call,"            public void call(final Intent intent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onNewIntent(this, intent);"
14460,onNewIntent,"    public void onNewIntent(Intent intent) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onNewIntent(intent);
            return;
        }
"
14461,call,"            public Boolean call(final Activity child) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onNavigateUpFromChild(this, child);"
14462,onNavigateUpFromChild,"    public boolean onNavigateUpFromChild(Activity child) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onNavigateUpFromChild(child);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14463,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onNavigateUp(this);"
14464,onNavigateUp,"    public boolean onNavigateUp() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onNavigateUp();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14465,call,"            public void call(final Boolean isInMultiWindowMode, final Configuration newConfig) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onMultiWindowModeChanged(this, isInMultiWindowMode, newConfig);"
14466,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onMultiWindowModeChanged(isInMultiWindowMode, newConfig);
            return;
        }
"
14469,call,"            public Boolean call(final Integer featureId, final Menu menu) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onMenuOpened(this, featureId, menu);"
14470,onMenuOpened,"    public boolean onMenuOpened(int featureId, Menu menu) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onMenuOpened(featureId, menu);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14473,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onLocalVoiceInteractionStopped(this);"
14474,onLocalVoiceInteractionStopped,"    public void onLocalVoiceInteractionStopped() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onLocalVoiceInteractionStopped();
            return;
        }
"
14475,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onLocalVoiceInteractionStarted(this);"
14476,onLocalVoiceInteractionStarted,"    public void onLocalVoiceInteractionStarted() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onLocalVoiceInteractionStarted();
            return;
        }
"
14477,call,"            public Boolean call(final Integer keyCode, final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onKeyUp(this, keyCode, event);"
14478,onKeyUp,"    public boolean onKeyUp(int keyCode, KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onKeyUp(keyCode, event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14479,call,"            public Boolean call(final Integer keyCode, final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onKeyShortcut(this, keyCode, event);"
14480,onKeyShortcut,"    public boolean onKeyShortcut(int keyCode, KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onKeyShortcut(keyCode, event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14481,call,"            public Boolean call(final Integer keyCode, final Integer repeatCount, final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onKeyMultiple(this, keyCode, repeatCount, event);"
14482,onKeyMultiple,"    public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onKeyMultiple(keyCode, repeatCount, event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14483,call,"            public Boolean call(final Integer keyCode, final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onKeyLongPress(this, keyCode, event);"
14484,onKeyLongPress,"    public boolean onKeyLongPress(int keyCode, KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onKeyLongPress(keyCode, event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14485,call,"            public Boolean call(final Integer keyCode, final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onKeyDown(this, keyCode, event);"
14486,onKeyDown,"    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onKeyDown(keyCode, event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14487,call,"            public Boolean call(final MotionEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onGenericMotionEvent(this, event);"
14488,onGenericMotionEvent,"    public boolean onGenericMotionEvent(MotionEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onGenericMotionEvent(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14489,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onEnterAnimationComplete(this);"
14490,onEnterAnimationComplete,"    public void onEnterAnimationComplete() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onEnterAnimationComplete();
            return;
        }
"
14491,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onDetachedFromWindow(this);"
14492,onDetachedFromWindow,"    public void onDetachedFromWindow() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onDetachedFromWindow();
            return;
        }
"
14495,call,"            public View call(final String name, final Context context, final AttributeSet attrs) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateView(this, name, context, attrs);"
14496,onCreateView,"    public View onCreateView(String name, Context context, AttributeSet attrs) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateView(name, context, attrs);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14497,call,"            public View call(final View parent, final String name, final Context context, final AttributeSet attrs) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateView(this, parent, name, context, attrs);"
14498,onCreateView,"    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateView(parent, name, context, attrs);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14499,call,"            public Boolean call(final Bitmap outBitmap, final Canvas canvas) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateThumbnail(this, outBitmap, canvas);"
14500,onCreateThumbnail,"    public boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateThumbnail(outBitmap, canvas);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14501,call,"            public void call(final TaskStackBuilder builder) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onCreateSupportNavigateUpTaskStack(this, builder);"
14502,onCreateSupportNavigateUpTaskStack,"    public void onCreateSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onCreateSupportNavigateUpTaskStack(builder);
            return;
        }
"
14503,call,"            public View call(final Integer featureId) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreatePanelView(this, featureId);"
14504,onCreatePanelView,"    public View onCreatePanelView(int featureId) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreatePanelView(featureId);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14505,call,"            public Boolean call(final Integer featureId, final Menu menu) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreatePanelMenu(this, featureId, menu);"
14506,onCreatePanelMenu,"    public boolean onCreatePanelMenu(int featureId, Menu menu) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreatePanelMenu(featureId, menu);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14507,call,"            public Boolean call(final Menu menu) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateOptionsMenu(this, menu);"
14508,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateOptionsMenu(menu);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14509,call,"            public void call(final android.app.TaskStackBuilder builder) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onCreateNavigateUpTaskStack(this, builder);"
14510,onCreateNavigateUpTaskStack,"    public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onCreateNavigateUpTaskStack(builder);
            return;
        }
"
14511,call,"            public Dialog call(final Integer id, final Bundle args) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateDialog(this, id, args);"
14512,onCreateDialog,"    public Dialog onCreateDialog(int id, Bundle args) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateDialog(id, args);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14513,call,"            public Dialog call(final Integer id) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateDialog(this, id);"
14514,onCreateDialog,"    public Dialog onCreateDialog(int id) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateDialog(id);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14515,call,"            public CharSequence call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateDescription(this);"
14516,onCreateDescription,"    public CharSequence onCreateDescription() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateDescription();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14519,call,"            public void call(final Bundle savedInstanceState, final PersistableBundle persistentState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onCreate(this, savedInstanceState, persistentState);"
14520,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onCreate(savedInstanceState, persistentState);
            return;
        }
"
14523,call,"            public void call(final Menu menu) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onContextMenuClosed(this, menu);"
14524,onContextMenuClosed,"    public void onContextMenuClosed(Menu menu) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onContextMenuClosed(menu);
            return;
        }
"
14526,onContextItemSelected,"    public boolean onContextItemSelected(MenuItem item) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onContextItemSelected(item);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14527,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onContentChanged(this);"
14528,onContentChanged,"    public void onContentChanged() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onContentChanged();
            return;
        }
"
14531,call,"            public void call(final Activity childActivity, final CharSequence title) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onChildTitleChanged(this, childActivity, title);"
14532,onChildTitleChanged,"    public void onChildTitleChanged(Activity childActivity, CharSequence title) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onChildTitleChanged(childActivity, title);
            return;
        }
"
14533,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onBackPressed(this);"
14534,onBackPressed,"    public void onBackPressed() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onBackPressed();
            return;
        }
"
14535,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onAttachedToWindow(this);"
14536,onAttachedToWindow,"    public void onAttachedToWindow() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onAttachedToWindow();
            return;
        }
"
14537,call,"            public void call(final android.app.Fragment fragment) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onAttachFragment(this, fragment);"
14538,onAttachFragment,"    public void onAttachFragment(android.app.Fragment fragment) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onAttachFragment(fragment);
            return;
        }
"
14539,call,"            public void call(final Fragment fragment) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onAttachFragment(this, fragment);"
14540,onAttachFragment,"    public void onAttachFragment(Fragment fragment) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onAttachFragment(fragment);
            return;
        }
"
14541,call,"            public void call(final Theme theme, final Integer resid, final Boolean first) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onApplyThemeResource(this, theme, resid, first);"
14542,onApplyThemeResource,"    public void onApplyThemeResource(Theme theme, int resid, boolean first) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onApplyThemeResource(theme, resid, first);
            return;
        }
"
14544,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onActivityResult(requestCode, resultCode, data);
            return;
        }
"
14545,call,"            public void call(final Integer resultCode, final Intent data) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onActivityReenter(this, resultCode, data);"
14546,onActivityReenter,"    public void onActivityReenter(int resultCode, Intent data) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onActivityReenter(resultCode, data);
            return;
        }
"
14547,call,"            public void call(final android.view.ActionMode mode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onActionModeStarted(this, mode);"
14548,onActionModeStarted,"    public void onActionModeStarted(android.view.ActionMode mode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onActionModeStarted(mode);
            return;
        }
"
14549,call,"            public void call(final android.view.ActionMode mode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onActionModeFinished(this, mode);"
14550,onActionModeFinished,"    public void onActionModeFinished(android.view.ActionMode mode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onActionModeFinished(mode);
            return;
        }
"
14551,call,"            public Boolean call(final Activity child, final Intent upIntent) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().navigateUpToFromChild(this, child, upIntent);"
14552,navigateUpToFromChild,"    public boolean navigateUpToFromChild(Activity child, Intent upIntent) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_navigateUpToFromChild(child, upIntent);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14553,call,"            public Boolean call(final Intent upIntent) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().navigateUpTo(this, upIntent);"
14554,navigateUpTo,"    public boolean navigateUpTo(Intent upIntent) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_navigateUpTo(upIntent);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14555,call,"            public Boolean call(final Boolean nonRoot) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().moveTaskToBack(this, nonRoot);"
14556,moveTaskToBack,"    public boolean moveTaskToBack(boolean nonRoot) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_moveTaskToBack(nonRoot);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14557,call,"            public Boolean call(final Context sourceContext, final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().moveSharedPreferencesFrom(this, sourceContext, name);"
14558,moveSharedPreferencesFrom,"    public boolean moveSharedPreferencesFrom(Context sourceContext, String name) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_moveSharedPreferencesFrom(sourceContext, name);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14559,call,"            public Boolean call(final Context sourceContext, final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().moveDatabaseFrom(this, sourceContext, name);"
14560,moveDatabaseFrom,"    public boolean moveDatabaseFrom(Context sourceContext, String name) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_moveDatabaseFrom(sourceContext, name);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14561,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isVoiceInteractionRoot(this);"
14562,isVoiceInteractionRoot,"    public boolean isVoiceInteractionRoot() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isVoiceInteractionRoot();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14563,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isVoiceInteraction(this);"
14564,isVoiceInteraction,"    public boolean isVoiceInteraction() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isVoiceInteraction();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14565,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isTaskRoot(this);"
14566,isTaskRoot,"    public boolean isTaskRoot() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isTaskRoot();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14567,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isRestricted(this);"
14568,isRestricted,"    public boolean isRestricted() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isRestricted();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14569,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isLocalVoiceInteractionSupported(this);"
14570,isLocalVoiceInteractionSupported,"    public boolean isLocalVoiceInteractionSupported() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isLocalVoiceInteractionSupported();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14571,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isInPictureInPictureMode(this);"
14572,isInPictureInPictureMode,"    public boolean isInPictureInPictureMode() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isInPictureInPictureMode();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14573,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isInMultiWindowMode(this);"
14574,isInMultiWindowMode,"    public boolean isInMultiWindowMode() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isInMultiWindowMode();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14575,call,"            public void call(final Boolean i) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setImmersive(this, i);"
14577,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isImmersive(this);"
14578,isImmersive,"    public boolean isImmersive() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isImmersive();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14579,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isFinishing(this);"
14580,isFinishing,"    public boolean isFinishing() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isFinishing();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14581,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isDeviceProtectedStorage(this);"
14582,isDeviceProtectedStorage,"    public boolean isDeviceProtectedStorage() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isDeviceProtectedStorage();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14583,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isDestroyed(this);"
14584,isDestroyed,"    public boolean isDestroyed() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isDestroyed();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14585,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isChangingConfigurations(this);"
14586,isChangingConfigurations,"    public boolean isChangingConfigurations() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isChangingConfigurations();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14587,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isActivityTransitionRunning(this);"
14588,isActivityTransitionRunning,"    public boolean isActivityTransitionRunning() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isActivityTransitionRunning();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14589,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().invalidateOptionsMenu(this);"
14590,invalidateOptionsMenu,"    public void invalidateOptionsMenu() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_invalidateOptionsMenu();
            return;
        }
"
14591,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().hasWindowFocus(this);"
14592,hasWindowFocus,"    public boolean hasWindowFocus() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_hasWindowFocus();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14593,call,"            public void call(final String toPackage, final Uri uri, final Integer modeFlags) {
                if (iterator.hasPrevious()) {
                    iterator.previous().grantUriPermission(this, toPackage, uri, modeFlags);"
14594,grantUriPermission,"    public void grantUriPermission(String toPackage, Uri uri, int modeFlags) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_grantUriPermission(toPackage, uri, modeFlags);
            return;
        }
"
14595,call,"            public WindowManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getWindowManager(this);"
14597,call,"            public Window call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getWindow(this);"
14599,call,"            public Integer call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getWallpaperDesiredMinimumWidth(this);"
14601,call,"            public Integer call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getWallpaperDesiredMinimumHeight(this);"
14603,call,"            public void call(final Bitmap bitmap) {
                if (iterator.hasPrevious()) {
                    try {"
14604,setWallpaper,"    public void setWallpaper(Bitmap bitmap) throws IOException {
        if (mPlugins.isEmpty()) {
            try {
                getOriginal().super_setWallpaper(bitmap);
            } catch (IOException e) {
                throw new SuppressedException(e);"
14605,call,"            public Drawable call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getWallpaper(this);"
14607,call,"            public VoiceInteractor call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getVoiceInteractor(this);"
14611,call,"            public void call(final Integer resid) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setTheme(this, resid);"
14613,call,"            public Theme call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getTheme(this);"
14615,call,"            public Integer call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getTaskId(this);"
14617,call,"            public String call(final Class<?> serviceClass) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSystemServiceName(this, serviceClass);"
14619,call,"            public Object call(final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSystemService(this, name);"
14621,call,"            public Intent call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSupportParentActivityIntent(this);"
14623,call,"            public LoaderManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSupportLoaderManager(this);"
14625,call,"            public FragmentManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSupportFragmentManager(this);"
14627,call,"            public void call(final Toolbar toolbar) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setSupportActionBar(this, toolbar);"
14629,call,"            public ActionBar call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSupportActionBar(this);"
14631,call,"            public SharedPreferences call(final String name, final Integer mode) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSharedPreferences(this, name, mode);"
14633,call,"            public Resources call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getResources(this);"
14635,call,"            public void call(final Integer requestedOrientation) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setRequestedOrientation(this, requestedOrientation);"
14637,call,"            public Integer call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getRequestedOrientation(this);"
14639,call,"            public Uri call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getReferrer(this);"
14641,call,"            public SharedPreferences call(final Integer mode) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getPreferences(this, mode);"
14643,call,"            public Intent call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getParentActivityIntent(this);"
14645,call,"            public String call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getPackageResourcePath(this);"
14647,call,"            public String call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getPackageName(this);"
14649,call,"            public PackageManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getPackageManager(this);"
14651,call,"            public String call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getPackageCodePath(this);"
14653,call,"            public File[] call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getObbDirs(this);"
14655,call,"            public File call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getObbDir(this);"
14657,call,"            public File call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getNoBackupFilesDir(this);"
14659,call,"            public MenuInflater call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getMenuInflater(this);"
14661,call,"            public Integer call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getMaxNumPictureInPictureActions(this);"
14663,call,"            public Looper call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getMainLooper(this);"
14665,call,"            public Executor call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getMainExecutor(this);"
14667,call,"            public String call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getLocalClassName(this);"
14669,call,"            public android.app.LoaderManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getLoaderManager(this);"
14671,call,"            public Lifecycle call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getLifecycle(this);"
14673,call,"            public LayoutInflater call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getLayoutInflater(this);"
14677,call,"            public void call(final Intent newIntent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setIntent(this, newIntent);"
14679,call,"            public Intent call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getIntent(this);"
14681,call,"            public android.app.FragmentManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getFragmentManager(this);"
14683,call,"            public File call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getFilesDir(this);"
14685,call,"            public File call(final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getFileStreamPath(this, name);"
14687,call,"            public T call(final Class<T> extraDataClass) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getExtraData(this, extraDataClass);"
14689,call,"            public File[] call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getExternalMediaDirs(this);"
14691,call,"            public File[] call(final String type) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getExternalFilesDirs(this, type);"
14693,call,"            public File call(final String type) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getExternalFilesDir(this, type);"
14695,call,"            public File[] call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getExternalCacheDirs(this);"
14697,call,"            public File call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getExternalCacheDir(this);"
14699,call,"            public Delegate call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getDrawerToggleDelegate(this);"
14701,call,"            public File call(final String name, final Integer mode) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getDir(this, name, mode);"
14703,call,"            public AppCompatDelegate call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getDelegate(this);"
14705,call,"            public File call(final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getDatabasePath(this, name);"
14707,call,"            public File call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getDataDir(this);"
14709,call,"            public View call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getCurrentFocus(this);"
14711,call,"            public void call(final TransitionManager tm) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setContentTransitionManager(this, tm);"
14713,call,"            public TransitionManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getContentTransitionManager(this);"
14715,call,"            public Scene call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getContentScene(this);"
14717,call,"            public ContentResolver call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getContentResolver(this);"
14719,call,"            public ComponentName call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getComponentName(this);"
14721,call,"            public File call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getCodeCacheDir(this);"
14723,call,"            public ClassLoader call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getClassLoader(this);"
14725,call,"            public Integer call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getChangingConfigurations(this);"
14727,call,"            public String call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getCallingPackage(this);"
14729,call,"            public ComponentName call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getCallingActivity(this);"
14731,call,"            public File call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getCacheDir(this);"
14733,call,"            public Context call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getBaseContext(this);"
14735,call,"            public AssetManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getAssets(this);"
14737,call,"            public ApplicationInfo call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getApplicationInfo(this);"
14739,call,"            public Context call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getApplicationContext(this);"
14741,call,"            public void call(final android.widget.Toolbar toolbar) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setActionBar(this, toolbar);"
14743,call,"            public android.app.ActionBar call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getActionBar(this);"
14745,call,"            public void call(final Activity child) {
                if (iterator.hasPrevious()) {
                    iterator.previous().finishFromChild(this, child);"
14746,finishFromChild,"    public void finishFromChild(Activity child) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_finishFromChild(child);
            return;
        }
"
14747,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().finishAndRemoveTask(this);"
14748,finishAndRemoveTask,"    public void finishAndRemoveTask() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_finishAndRemoveTask();
            return;
        }
"
14749,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().finishAfterTransition(this);"
14750,finishAfterTransition,"    public void finishAfterTransition() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_finishAfterTransition();
            return;
        }
"
14751,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().finishAffinity(this);"
14752,finishAffinity,"    public void finishAffinity() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_finishAffinity();
            return;
        }
"
14753,call,"            public void call(final Activity child, final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().finishActivityFromChild(this, child, requestCode);"
14754,finishActivityFromChild,"    public void finishActivityFromChild(@NonNull Activity child, int requestCode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_finishActivityFromChild(child, requestCode);
            return;
        }
"
14755,call,"            public void call(final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().finishActivity(this, requestCode);"
14756,finishActivity,"    public void finishActivity(int requestCode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_finishActivity(requestCode);
            return;
        }
"
14757,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().finish(this);"
14758,finish,"    public void finish() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_finish();
            return;
        }
"
14759,call,"            public T call(final Integer id) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().findViewById(this, id);"
14760,findViewById,"    public <T extends View> T findViewById(int id) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_findViewById(id);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14761,call,"            public String[] call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().fileList(this);"
14762,fileList,"    public String[] fileList() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_fileList();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14763,call,"            public Boolean call(final PictureInPictureParams params) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().enterPictureInPictureMode(this, params);"
14764,enterPictureInPictureMode,"    public boolean enterPictureInPictureMode(@NonNull PictureInPictureParams params) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_enterPictureInPictureMode(params);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14765,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().enterPictureInPictureMode(this);"
14766,enterPictureInPictureMode,"    public void enterPictureInPictureMode() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_enterPictureInPictureMode();
            return;
        }
"
14767,call,"            public void call(final Uri uri, final String readPermission, final String writePermission,
                    final Integer pid, final Integer uid, final Integer modeFlags, final String message) {
                if (iterator.hasPrevious()) {"
14768,enforceUriPermission,"    public void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags, String message) {
        if (mPlugins.isEmpty()) {
            getOriginal()
                    .super_enforceUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags, message);
            return;"
14769,call,"            public void call(final Uri uri, final Integer pid, final Integer uid, final Integer modeFlags,
                    final String message) {
                if (iterator.hasPrevious()) {"
14770,enforceUriPermission,"    public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_enforceUriPermission(uri, pid, uid, modeFlags, message);
            return;
        }
"
14771,call,"            public void call(final String permission, final Integer pid, final Integer uid, final String message) {
                if (iterator.hasPrevious()) {
                    iterator.previous().enforcePermission(this, permission, pid, uid, message);"
14772,enforcePermission,"    public void enforcePermission(String permission, int pid, int uid, String message) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_enforcePermission(permission, pid, uid, message);
            return;
        }
"
14773,call,"            public void call(final Uri uri, final Integer modeFlags, final String message) {
                if (iterator.hasPrevious()) {
                    iterator.previous().enforceCallingUriPermission(this, uri, modeFlags, message);"
14774,enforceCallingUriPermission,"    public void enforceCallingUriPermission(Uri uri, int modeFlags, String message) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_enforceCallingUriPermission(uri, modeFlags, message);
            return;
        }
"
14775,call,"            public void call(final String permission, final String message) {
                if (iterator.hasPrevious()) {
                    iterator.previous().enforceCallingPermission(this, permission, message);"
14776,enforceCallingPermission,"    public void enforceCallingPermission(String permission, String message) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_enforceCallingPermission(permission, message);
            return;
        }
"
14777,call,"            public void call(final Uri uri, final Integer modeFlags, final String message) {
                if (iterator.hasPrevious()) {
                    iterator.previous().enforceCallingOrSelfUriPermission(this, uri, modeFlags, message);"
14778,enforceCallingOrSelfUriPermission,"    public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_enforceCallingOrSelfUriPermission(uri, modeFlags, message);
            return;
        }
"
14779,call,"            public void call(final String permission, final String message) {
                if (iterator.hasPrevious()) {
                    iterator.previous().enforceCallingOrSelfPermission(this, permission, message);"
14780,enforceCallingOrSelfPermission,"    public void enforceCallingOrSelfPermission(String permission, String message) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_enforceCallingOrSelfPermission(permission, message);
            return;
        }
"
14783,call,"            public Boolean call(final MotionEvent ev) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().dispatchTrackballEvent(this, ev);"
14784,dispatchTrackballEvent,"    public boolean dispatchTrackballEvent(MotionEvent ev) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_dispatchTrackballEvent(ev);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14785,call,"            public Boolean call(final MotionEvent ev) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().dispatchTouchEvent(this, ev);"
14786,dispatchTouchEvent,"    public boolean dispatchTouchEvent(MotionEvent ev) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_dispatchTouchEvent(ev);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14787,call,"            public Boolean call(final AccessibilityEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().dispatchPopulateAccessibilityEvent(this, event);"
14788,dispatchPopulateAccessibilityEvent,"    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_dispatchPopulateAccessibilityEvent(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14789,call,"            public Boolean call(final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().dispatchKeyShortcutEvent(this, event);"
14790,dispatchKeyShortcutEvent,"    public boolean dispatchKeyShortcutEvent(KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_dispatchKeyShortcutEvent(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14791,call,"            public Boolean call(final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().dispatchKeyEvent(this, event);"
14792,dispatchKeyEvent,"    public boolean dispatchKeyEvent(KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_dispatchKeyEvent(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14793,call,"            public Boolean call(final MotionEvent ev) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().dispatchGenericMotionEvent(this, ev);"
14794,dispatchGenericMotionEvent,"    public boolean dispatchGenericMotionEvent(MotionEvent ev) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_dispatchGenericMotionEvent(ev);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14795,call,"            public Boolean call(final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().deleteSharedPreferences(this, name);"
14796,deleteSharedPreferences,"    public boolean deleteSharedPreferences(String name) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_deleteSharedPreferences(name);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14797,call,"            public Boolean call(final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().deleteFile(this, name);"
14798,deleteFile,"    public boolean deleteFile(String name) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_deleteFile(name);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14799,call,"            public Boolean call(final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().deleteDatabase(this, name);"
14800,deleteDatabase,"    public boolean deleteDatabase(String name) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_deleteDatabase(name);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14801,call,"            public String[] call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().databaseList(this);"
14802,databaseList,"    public String[] databaseList() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_databaseList();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14803,call,"            public PendingIntent call(final Integer requestCode, final Intent data, final Integer flags) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().createPendingResult(this, requestCode, data, flags);"
14804,createPendingResult,"    public PendingIntent createPendingResult(int requestCode, @NonNull Intent data, int flags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_createPendingResult(requestCode, data, flags);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14805,call,"            public Context call(final String packageName, final Integer flags) {
                if (iterator.hasPrevious()) {
                    try {"
14806,createPackageContext,"    public Context createPackageContext(String packageName, int flags) throws NameNotFoundException {
        if (mPlugins.isEmpty()) {
            try {
                return getOriginal().super_createPackageContext(packageName, flags);
            } catch (NameNotFoundException e) {
                throw new SuppressedException(e);"
14807,call,"            public Context call(final Display display) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().createDisplayContext(this, display);"
14808,createDisplayContext,"    public Context createDisplayContext(Display display) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_createDisplayContext(display);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14809,call,"            public Context call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().createDeviceProtectedStorageContext(this);"
14810,createDeviceProtectedStorageContext,"    public Context createDeviceProtectedStorageContext() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_createDeviceProtectedStorageContext();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14811,call,"            public Context call(final String splitName) {
                if (iterator.hasPrevious()) {
                    try {"
14812,createContextForSplit,"    public Context createContextForSplit(String splitName) throws NameNotFoundException {
        if (mPlugins.isEmpty()) {
            try {
                return getOriginal().super_createContextForSplit(splitName);
            } catch (NameNotFoundException e) {
                throw new SuppressedException(e);"
14813,call,"            public Context call(final Configuration overrideConfiguration) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().createConfigurationContext(this, overrideConfiguration);"
14814,createConfigurationContext,"    public Context createConfigurationContext(Configuration overrideConfiguration) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_createConfigurationContext(overrideConfiguration);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14815,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().closeOptionsMenu(this);"
14816,closeOptionsMenu,"    public void closeOptionsMenu() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_closeOptionsMenu();
            return;
        }
"
14817,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().closeContextMenu(this);"
14818,closeContextMenu,"    public void closeContextMenu() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_closeContextMenu();
            return;
        }
"
14819,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    try {"
14820,clearWallpaper,"    public void clearWallpaper() throws IOException {
        if (mPlugins.isEmpty()) {
            try {
                getOriginal().super_clearWallpaper();
            } catch (IOException e) {
                throw new SuppressedException(e);"
14821,call,"            public Integer call(final Uri uri, final String readPermission, final String writePermission,
                    final Integer pid, final Integer uid, final Integer modeFlags) {
                if (iterator.hasPrevious()) {"
14822,checkUriPermission,"    public int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags);
        }
"
14823,call,"            public Integer call(final Uri uri, final Integer pid, final Integer uid, final Integer modeFlags) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().checkUriPermission(this, uri, pid, uid, modeFlags);"
14824,checkUriPermission,"    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkUriPermission(uri, pid, uid, modeFlags);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14825,call,"            public Integer call(final String permission) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().checkSelfPermission(this, permission);"
14826,checkSelfPermission,"    public int checkSelfPermission(String permission) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkSelfPermission(permission);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14827,call,"            public Integer call(final String permission, final Integer pid, final Integer uid) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().checkPermission(this, permission, pid, uid);"
14828,checkPermission,"    public int checkPermission(String permission, int pid, int uid) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkPermission(permission, pid, uid);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14829,call,"            public Integer call(final Uri uri, final Integer modeFlags) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().checkCallingUriPermission(this, uri, modeFlags);"
14830,checkCallingUriPermission,"    public int checkCallingUriPermission(Uri uri, int modeFlags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkCallingUriPermission(uri, modeFlags);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14831,call,"            public Integer call(final String permission) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().checkCallingPermission(this, permission);"
14832,checkCallingPermission,"    public int checkCallingPermission(String permission) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkCallingPermission(permission);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14833,call,"            public Integer call(final Uri uri, final Integer modeFlags) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().checkCallingOrSelfUriPermission(this, uri, modeFlags);"
14834,checkCallingOrSelfUriPermission,"    public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkCallingOrSelfUriPermission(uri, modeFlags);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14835,call,"            public Integer call(final String permission) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().checkCallingOrSelfPermission(this, permission);"
14836,checkCallingOrSelfPermission,"    public int checkCallingOrSelfPermission(String permission) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkCallingOrSelfPermission(permission);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14837,call,"            public Boolean call(final Intent service, final ServiceConnection conn, final Integer flags) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().bindService(this, service, conn, flags);"
14838,bindService,"    public boolean bindService(Intent service, ServiceConnection conn, int flags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_bindService(service, conn, flags);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
14839,call,"            public void call(final Context newBase) {
                if (iterator.hasPrevious()) {
                    iterator.previous().attachBaseContext(this, newBase);"
14840,attachBaseContext,"    public void attachBaseContext(Context newBase) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_attachBaseContext(newBase);
            return;
        }
"
14841,call,"            public void call(final Configuration overrideConfiguration) {
                if (iterator.hasPrevious()) {
                    iterator.previous().applyOverrideConfiguration(this, overrideConfiguration);"
14842,applyOverrideConfiguration,"    public void applyOverrideConfiguration(Configuration overrideConfiguration) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_applyOverrideConfiguration(overrideConfiguration);
            return;
        }
"
14843,call,"            public void call(final View view, final LayoutParams params) {
                if (iterator.hasPrevious()) {
                    iterator.previous().addContentView(this, view, params);"
14844,addContentView,"    public void addContentView(View view, LayoutParams params) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_addContentView(view, params);
            return;
        }
"
14846,remove,"	public void remove(int id) {
		this.datas.remove(id);
		this.fireTableRowsDeleted(id, id);
	}"
14847,run,"							public void run() {
								if (ret.equals(""1"")) {
									datas.get(rowIndex).setElementAt(newdata, col);"
14849,run,"									public void run() {
										if (ret.equals(""1"")) {
											datas.get(rowIndex).setElementAt(newdata, col);"
14852,addRow,"	public void addRow(Vector<String> vector) {
		this.datas.add(vector);
		this.fireTableRowsInserted(vector.size()-1, vector.size()-1);
	}"
14859,isEdit,"	public boolean isEdit() {
		return isEdit;
	}"
14863,remove,"	public void remove(String id) {
		try {
			int row = this.getId(id);"
14864,update,"	public void update(String id, Vector<String> vector) {
		this.datas.set(this.getId(id), vector);
		this.fireTableDataChanged();
	}"
14865,addRow,"	public void addRow(Vector<String> vector) {
		this.datas.add(vector);
		this.fireTableRowsInserted(datas.size()-1,datas.size()-1);
	}"
14877,isCellEditable,"	public boolean isCellEditable(int row, int column) {
		if(column == 0)
		{"
14879,onClick,"    public void onClick(View v) {
        if (v == mStartBtn) {
            mProgressView.startAnim();"
14882,onStopTrackingTouch,"            public void onStopTrackingTouch(SeekBar seekBar) {
                float factor = seekBar.getProgress() / 100f;
                mProgressView.setRadius(factor);
            }"
14884,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
"
14890,stopAnim,"    public void stopAnim() {

        mStartAnim = false;"
14891,reset,"    public void reset() {

        stopAnim();

        mPlayTime = 0;"
14892,startAnim,"    public void startAnim() {

        mPlayTime = mPlayTime % mDuration;

        mStartTime = AnimationUtils.currentAnimationTimeMillis() - mPlayTime;
"
14895,calPoints,"    private void calPoints(float factor) {

        int radius = (int) (mViewSize / 3 * factor);

        mPointRadius = radius / 12;"
14896,onDraw,"    protected void onDraw(Canvas canvas) {

        canvas.save();

        canvas.translate(mCenter.x, mCenter.y);



        float factor = getFactor();
"
14897,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {

        int defaultSize = getResources().getDimensionPixelSize(R.dimen.default_circle_view_size);

        int width = getDefaultSize(defaultSize, widthMeasureSpec);

        int height = getDefaultSize(defaultSize, heightMeasureSpec);

        mViewSize = Math.min(width, height);"
14898,init,"    private void init(AttributeSet attrs, int defStyle) {

        mArcPoint = new ArcPoint[POINT_NUM];



        mPaint = new Paint();

        mPaint.setAntiAlias(true);

        mPaint.setStyle(Paint.Style.FILL);
"
14900,onActionMove,"        void onActionMove(boolean isExpanded, TouchManager touchManager);
        void onBeginDragging();"
14901,onActionCancel,"        void onActionCancel(boolean isExpanded);
        void onActionMove(boolean isExpanded, TouchManager touchManager);"
14902,onActionUp,"        void onActionUp(boolean isExpanded);
        void onActionCancel(boolean isExpanded);"
14903,onActionDown,"        void onActionDown();
        void onActionUp(boolean isExpanded);"
14908,onFeedInterceptEvent,"    public boolean onFeedInterceptEvent(MotionEvent event){
        int action = event.getAction();
        switch ( action & MotionEvent.ACTION_MASK  ) {
            case MotionEvent.ACTION_DOWN:
                setActivePointerId(event, 0);"
14909,motionY2TopOffset,"    private int motionY2TopOffset(float y){
        float original = y - mTouchDownActor;
        float basic = original * 0.6f;
        if ( basic > mThreshold){
            basic = mThreshold + (basic - mThreshold) * 0.3f;
        }"
14910,motionY2TouchDown,"    private float motionY2TouchDown(float y){
        float diff;
        if ( mTopOffset < 0 ){
            diff = 0;
        } else if( mTopOffset > mThreshold){"
14911,event2Point,"    public PointF event2Point(MotionEvent event){
        mTmpPoint.set(event.getX(),event.getY());
        return mTmpPoint;
    }"
14912,isBeginDragging,"    public boolean isBeginDragging() {
        return mBeginDragging;
    }"
14915,calTargetTopOffset,"    public int calTargetTopOffset(int currentTop, int offset){
        int target;
        if ( currentTop <= sThreshold2 ) {
            if ( offset < 0 ){
                target = 0 - currentTop;"
14916,calTargetTopOffset,"    public int calTargetTopOffset(int currentTop){
        return calTargetTopOffset(currentTop,getTopOffset());
    }"
14917,calExpandProgress,"    public float calExpandProgress(int currentTop){
        return currentTop * 1.0f / mThreshold;
    }"
14918,endDrag,"    public void endDrag(){
        mBeginDragging = false;
    }"
14921,resetActivePointerId,"    private void resetActivePointerId(){
        mActivePointerId = INVALID_POINTER;
    }"
14924,dispatchNestedPreFling,"    public boolean dispatchNestedPreFling(float velocityX, float velocityY) {
        return mScrollingChildHelper.dispatchNestedPreFling(velocityX, velocityY);
    }"
14925,dispatchNestedFling,"    public boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed) {
        return mScrollingChildHelper.dispatchNestedFling(velocityX, velocityY, consumed);
    }"
14926,dispatchNestedPreScroll,"    public boolean dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow) {
        return mScrollingChildHelper.dispatchNestedPreScroll(dx, dy, consumed, offsetInWindow);
    }"
14927,dispatchNestedScroll,"    public boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed,
                                        int dyUnconsumed, int[] offsetInWindow) {
        return mScrollingChildHelper.dispatchNestedScroll(dxConsumed, dyConsumed,"
14928,hasNestedScrollingParent,"    public boolean hasNestedScrollingParent() {
        return mScrollingChildHelper.hasNestedScrollingParent();
    }"
14929,stopNestedScroll,"    public void stopNestedScroll() {
        mScrollingChildHelper.stopNestedScroll();
    }"
14930,startNestedScroll,"    public boolean startNestedScroll(int axes) {
        return mScrollingChildHelper.startNestedScroll(axes);
    }"
14931,isNestedScrollingEnabled,"    public boolean isNestedScrollingEnabled() {
        return mScrollingChildHelper.isNestedScrollingEnabled();
"
14933,inside,"    private boolean inside(View view, float x, float y ){
        if ( view.getLeft() <= x && view.getRight() >= x && view.getTop() <= y && view.getBottom() >= y )
            return true;"
14934,canChildDragDownTraversal,"    private boolean canChildDragDownTraversal(View view, float x, float y){
        if ( !inside(view, x, y) ) return false;
        if ( ViewCompat.canScrollVertically(view,-1) ) return true;
        boolean canDragDown;
        if ( view instanceof ViewGroup ){
            ViewGroup vp = (ViewGroup) view;
            int count = vp.getChildCount();"
14935,canChildDragDown,"    public boolean canChildDragDown(PointF pointF){
        return canChildDragDownTraversal(this, pointF.x, pointF.y);
    }"
14936,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        measureChildren(widthMeasureSpec,heightMeasureSpec);
    }"
14938,wrap,"    public static ViewGroup wrap(View view){
        Context context = view.getContext();
        TouchAlwaysTrueLayout wrapper = new TouchAlwaysTrueLayout(context);
        wrapper.addView(view, LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
        return wrapper;
    }"
14939,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        final int action = event.getAction();

        MotionEvent vtev = MotionEvent.obtain(event);
        if (action == MotionEvent.ACTION_DOWN) {
            mNestedYOffset = 0;
        }
        vtev.offsetLocation(0, mNestedYOffset);"
14941,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ActionBar actionBar = getSupportActionBar();
        if ( actionBar != null ) actionBar.setDisplayHomeAsUpEnabled(true);
    }"
14942,onItemSelected,"                    public void onItemSelected(int index) {
                        Toast.makeText(ScrollViewActivity.this, ""onItemSelected:"" + index, Toast.LENGTH_SHORT).show();
                    }"
14943,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scrollview);

        ChromeLikeSwipeLayout chromeLikeSwipeLayout = (ChromeLikeSwipeLayout) findViewById(R.id.chrome_like_swipe_layout);
        ChromeLikeSwipeLayout.makeConfig()"
14945,onBindViewHolder,"        public void onBindViewHolder(VH holder, int position) {
"
14946,onCreateViewHolder,"        public VH onCreateViewHolder(ViewGroup parent, int viewType) {
            LayoutInflater  layoutInflater = LayoutInflater.from(parent.getContext());
            View v = layoutInflater.inflate(R.layout.list_item,parent,false);
            return new VH(v);
        }"
14947,onItemSelected,"                    public void onItemSelected(int index) {
                        Toast.makeText(RecyclerViewActivity.this, ""onItemSelected:"" + index, Toast.LENGTH_SHORT).show();
                    }"
14950,onBindViewHolder,"        public void onBindViewHolder(VH holder, int position) {
            holder.bind(position);
        }"
14951,onCreateViewHolder,"        public VH onCreateViewHolder(ViewGroup parent, int viewType) {
            LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
            View v = layoutInflater.inflate(R.layout.list_item,parent,false);
            return new VH(v);
        }"
14952,bind,"        public void bind(int position){
            ((TextView)itemView).setText(""item:"" + position);
        }"
14953,onItemSelected,"                    public void onItemSelected(int index) {
                        Toast.makeText(NestedRecyclerViewActivity.this, ""onItemSelected:"" + index, Toast.LENGTH_SHORT).show();
                    }"
14955,OnDisabledExampleClicked,"    public void OnDisabledExampleClicked(View view) {
        Intent i = new Intent(this, DisabledExampleActivity.class);
        startActivity(i);
    }"
14956,OnCustomViewWithHeightClicked,"    public void OnCustomViewWithHeightClicked(View view) {
        Intent i = new Intent(this,CustomHeightListViewActivity.class);
        startActivity(i);
    }"
14957,OnNestedRecyclerViewClicked,"    public void OnNestedRecyclerViewClicked(View view) {
        Intent i = new Intent(this,NestedRecyclerViewActivity.class);
        startActivity(i);
    }"
14958,OnRecyclerViewClicked,"    public void OnRecyclerViewClicked(View view) {
        Intent i = new Intent(this,RecyclerViewActivity.class);
        startActivity(i);
    }"
14959,OnLinearLayoutClicked,"    public void OnLinearLayoutClicked(View view) {
        Intent i = new Intent(this,LinearLayoutActivity.class);
        startActivity(i);
    }"
14960,OnScrollViewClicked,"    public void OnScrollViewClicked(View view) {
        Intent i = new Intent(this,ScrollViewActivity.class);
        startActivity(i);
    }"
14961,OnListViewClicked,"    public void OnListViewClicked(View view) {
        Intent i = new Intent(this,ListViewActivity.class);
        startActivity(i);
    }"
14962,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity);
    }"
14967,onItemSelected,"                    public void onItemSelected(int index) {
                        Toast.makeText(ListViewActivity.this, ""onItemSelected:"" + index, Toast.LENGTH_SHORT).show();
                    }"
14969,onItemSelected,"                    public void onItemSelected(int index) {
                        Toast.makeText(LinearLayoutActivity.this, ""onItemSelected:"" + index, Toast.LENGTH_SHORT).show();
                    }"
14970,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_linearlayout);

        ChromeLikeSwipeLayout chromeLikeSwipeLayout = (ChromeLikeSwipeLayout) findViewById(R.id.chrome_like_swipe_layout);
        ChromeLikeSwipeLayout.makeConfig()"
14975,onResume,"    protected void onResume() {
        super.onResume();
        chromeLikeSwipeLayout.setEnabled(false);
    }"
14976,onItemSelected,"                    public void onItemSelected(int index) {
                        Toast.makeText(DisabledExampleActivity.this, ""onItemSelected:"" + index, Toast.LENGTH_SHORT).show();
                    }"
14982,onItemSelected,"                    public void onItemSelected(int index) {
                        Toast.makeText(CustomHeightListViewActivity.this, ""onItemSelected:"" + index, Toast.LENGTH_SHORT).show();
                    }"
14984,onNestedPreFling,"    public boolean onNestedPreFling(View target, float velocityX, float velocityY) {
        return false;
    }"
14985,onNestedFling,"    public boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed) {
        return false;
    }"
14986,onNestedPreScroll,"    public void onNestedPreScroll(View target, int dx, int dy, int[] consumed) {
        this.dispatchNestedPreScroll(dx,dy,consumed,offsets);
    }"
14987,onNestedScroll,"    public void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {
        boolean result = this.dispatchNestedScroll(dxConsumed,dyConsumed,dxUnconsumed,dyUnconsumed,offsets);
        if ( result ){
            boolean consumed = (offsets[1] + dyUnconsumed) == 0 && dyUnconsumed != 0;"
14988,onStartNestedScroll,"    public boolean onStartNestedScroll(View child, View target, int nestedScrollAxes) {
        boolean result = this.startNestedScroll(nestedScrollAxes);
        if ( result ) mTouchManager.setInterceptEnabled(false);
        return true;
    }"
14989,onStopNestedScroll,"    public void onStopNestedScroll(View target) {
        mScrollingParentHelper.onStopNestedScroll(target);
    }"
14991,onNestedScrollAccepted,"    public void onNestedScrollAccepted(View child, View target, int axes) {
        mScrollingParentHelper.onNestedScrollAccepted(child, target, axes);
    }"
14994,dispatchNestedPreScroll,"    public boolean dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow) {
        boolean result = mScrollingChildHelper.dispatchNestedPreScroll(dx, dy, consumed, offsetInWindow);
        return result;
    }"
14995,dispatchNestedScroll,"    public boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed,
                                        int dyUnconsumed, int[] offsetInWindow) {
        boolean result = mScrollingChildHelper.dispatchNestedScroll(dxConsumed, dyConsumed,
                dxUnconsumed, dyUnconsumed, offsetInWindow);"
15001,isIdle,"        public boolean isIdle(){
            return  mStatus == STATUS_IDLE;
        }"
15002,isRestoring,"        public boolean isRestoring(){
            return mStatus == STATUS_RESTORE;
        }"
15003,isBusying,"        public boolean isBusying(){
            return mStatus == STATUS_BUSY;
        }"
15004,isChanged,"        public boolean isChanged(){
            return  mStatus == STATUS_CHANGED;
        }"
15005,toChanged,"        public void toChanged(){
            mStatus = STATUS_CHANGED;
        }"
15006,toRestore,"        public void toRestore(){
            mStatus = STATUS_RESTORE;
        }"
15007,toBusy,"        public void toBusy(){
            mStatus = STATUS_BUSY;
        }"
15008,toIdle,"        public void toIdle(){
            mStatus = STATUS_IDLE;
        }"
15009,onItemSelected,"        void onItemSelected(int index);
    }"
15010,dp2px,"    public static int dp2px(float valueInDp) {
        final float scale = Resources.getSystem().getDisplayMetrics().density;
        return (int) (valueInDp * scale + 0.5f);
    }"
15013,gummyDuration,"        public Config gummyDuration(int duration){
            this.mGummyDuration = duration;
            return this;
        }"
15014,rippleDuration,"        public Config rippleDuration(int duration){
            this.mRippleDuration = duration;
            return this;
        }"
15015,collapseDuration,"        public Config collapseDuration(int duration){
            this.mCollapseDuration = duration;
            return this;
        }"
15016,gap,"        public Config gap(int gap){
            this.mGap = gap;
            return this;
        }"
15017,radius,"        public Config radius(int radius){
            this.mRadius = radius;
            return this;
        }"
15018,listenItemSelected,"        public Config listenItemSelected(IOnItemSelectedListener listener){
            this.mOnItemSelectedListener = listener;
            return this;
        }"
15019,circleColor,"        public Config circleColor(@ColorInt int color){
            this.mCircleColor = color;
            return this;
        }"
15020,backgroundColor,"        public Config backgroundColor(@ColorInt int color){
            this.mBackgroundColor = color;
            return this;
        }"
15021,background,"        public Config background(@DrawableRes int backgroundResId){
            this.mBackgroundResId = backgroundResId;
            return this;
        }"
15022,addIcon,"        public Config addIcon(@DrawableRes int drawableResId){
            if ( mIcons == null ) mIcons = new LinkedList<>();
            mIcons.add(drawableResId);
            return this;
        }"
15023,makeConfig,"    public static Config makeConfig(){
        return new Config();
    }"
15024,onExpandView,"        void onExpandView(float fraction, boolean isFromCancel);
    }"
15025,onBeginDragging,"    public void onBeginDragging() {
        mStatusManager.toChanged();
    }"
15026,onActionMove,"    public void onActionMove(boolean isExpanded, TouchManager touchManager) {
        mChromeLikeLayout.onActionMove(isExpanded, touchManager);
        ensureTarget();
        View child = mTarget;
        int currentTop = child.getTop();
        if ( mTouchManager.isBeginDragging() ) {
            if ( !isExpanded )"
15027,onActionCancel,"    public void onActionCancel(boolean isExpanded) {
        mChromeLikeLayout.onActionUpOrCancel(isExpanded);
    }"
15028,onActionUp,"    public void onActionUp(boolean isExpanded) {
        executeAction(isExpanded);
        mChromeLikeLayout.onActionUpOrCancel(isExpanded);
    }"
15029,onActionDown,"    public void onActionDown() {
        mChromeLikeLayout.onActionDown();
    }"
15030,removeAllOnExpandViewListener,"    public void removeAllOnExpandViewListener(){
        mExpandListeners.clear();
    }"
15031,removeOnExpandViewListener,"    public void removeOnExpandViewListener(IOnExpandViewListener listener){
        mExpandListeners.remove(listener);
    }"
15032,addOnExpandViewListener,"    public void addOnExpandViewListener(IOnExpandViewListener listener){
        mExpandListeners.add(listener);
    }"
15033,notifyOnExpandListeners,"    public void notifyOnExpandListeners(float fraction, boolean isFromCancel){
        fraction = fraction < 1 ? fraction : 1;
        for ( IOnExpandViewListener listener : mExpandListeners )
            listener.onExpandView(fraction,isFromCancel);"
15037,canChildDragDown,"    private boolean canChildDragDown(PointF pointF){
        ensureTarget();
        if ( mTarget instanceof TouchAlwaysTrueLayout )
            return ((TouchAlwaysTrueLayout) mTarget).canChildDragDown(pointF);"
15039,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        if (mTarget == null) {
            ensureTarget();
        }
        if (mTarget == null) {
            return;
        }
        final int width = getMeasuredWidth() - getPaddingLeft() - getPaddingRight();"
15041,addView,"    public void addView(View child, int index, LayoutParams params) {

        boolean touchAlwaysTrue = child instanceof ScrollView
                || child instanceof AbsListView
                || child instanceof ScrollingView"
15042,onAnimationEnd,"            public void onAnimationEnd(Animation animation) {
                mAnimationStarted = false;
                mStatusManager.toIdle();
            }"
15045,launchResetAnim,"    private void launchResetAnim(){
        boolean isFromCancel = !mStatusManager.isRestoring();
        launchResetAnim(isFromCancel);
    }"
15046,executeAction,"    private void executeAction(boolean isExpanded) {
        if ( isExpanded ){
            mStatusManager.toBusy();"
15047,childOffsetTopAndBottom,"    private void childOffsetTopAndBottom(int target){
        mTarget.offsetTopAndBottom( target );
        mChromeLikeLayout.offsetTopAndBottom( target );
        requestLayout();
    }"
15048,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        return mTouchManager.onFeedTouchEvent(event);
    }"
15051,onRippleAnimFinished,"            public void onRippleAnimFinished(int index) {
                mStatusManager.toRestore();
                if ( !mAnimationStarted ) launchResetAnim();
                mTouchManager.endDrag();
                if ( mOnItemSelectedListener != null )
                    mOnItemSelectedListener.onItemSelected(index);"
15053,evaluate,"        public static Float evaluate(float fraction, Number startValue, Number endValue) {
            float startFloat = startValue.floatValue();
            return startFloat + fraction * (endValue.floatValue() - startFloat);
        }"
15056,onAnimationEnd,"        public void onAnimationEnd(Animation animation) {
            if (mAnimationStarted){
                mTouchHelper.resetToReady(mAnimFromX);"
15057,onAnimationStart,"        public void onAnimationStart(Animation animation) {
"
15058,isAnimationStarted,"        public boolean isAnimationStarted() {
            return mAnimationStarted;
        }"
15059,applyTransformation,"                protected void applyTransformation(float interpolatedTime, Transformation t) {
                    onAnimationUpdate(interpolatedTime);
                }"
15061,onAnimationUpdate,"        public void onAnimationUpdate(float interpolation) {
            Float currentX = FloatEvaluator.evaluate(interpolation,mAnimFromX,mAnimToX);
            mTranslate = FloatEvaluator.evaluate(interpolation, mAnimFromTranslate, mAnimToTranslate);
            updatePath(currentX, mAnimToX, mRadius, true);
        }"
15063,onAnimationEnd,"        public void onAnimationEnd(Animation animation) {
            mAnimationStarted = false;
            if ( !mEventDispatched && mRippleListener != null ){
                mRippleListener.onRippleAnimFinished(mCurrentFlag);"
15067,onAnimationUpdate,"        public void onAnimationUpdate(float interpolation) {
            int currentRadius = FloatEvaluator.evaluate(interpolation,mAnimFromRadius,mAnimToRadius).intValue();
            updatePath(0, 0, currentRadius, true);
            updateAlpha(1-interpolation);
        }"
15068,reset,"        public void reset(){
            mInit = false;
            mPrev = 0;
        }"
15069,absOverflow,"        public boolean absOverflow(float value){
            if (!mInit){
                mPrev = value;
                mInit = true;"
15070,checkAbsOverflow,"        private boolean checkAbsOverflow(float now){
            if (Math.abs(now - mPrev) > mThreshold) return true;
            else return false;"
15071,testRightEdge,"        public void testRightEdge() {
            if ( mMovingCurrentX > mMovingPrevX )
                mMovingPrevX = mMovingCurrentX;"
15072,testLeftEdge,"        public void testLeftEdge() {
            if ( mMovingCurrentX < mMovingPrevX )
                mMovingPrevX = mMovingCurrentX;"
15073,reset,"        public void reset(){
            mStatus = STATUS_NONE;
            mReadyPrevX = 0;
            mMovingPrevX = 0;
        }"
15074,resetToReady,"        public void resetToReady(float animFromX){
            mStatus = STATUS_READY;
            mReadyPrevX = animFromX;
        }"
15078,isExpanded,"        public boolean isExpanded(){
            return mStatus > STATUS_NONE;
        }"
15079,isMoving,"        public boolean isMoving(){
            return mStatus == STATUS_MOVING;
        }"
15080,onRippleAnimFinished,"        void onRippleAnimFinished(int index);
    }"
15084,offsetFraction,"    private float offsetFraction(float fraction, float factor){
        float result = (fraction - factor) / (1 - factor);
        result = result > 0 ? result : 0;
        return result;
    }"
15085,iconOffsetFraction,"    private float iconOffsetFraction( float fraction ){
        return offsetFraction(fraction, sFactorScaleIcon);
    }"
15086,circleOffsetFraction,"    private float circleOffsetFraction( float fraction ){
        return offsetFraction(fraction, sFactorScaleCircle);
    }"
15087,onExpandView,"    public void onExpandView(float fraction, boolean isFromCancel) {
        float circleFraction = circleOffsetFraction(fraction);
        if (isFromCancel) updateAlpha(circleFraction);
        updatePath(0,0,Math.round(mRadius*circleFraction),true);
        updateIconScale(fraction);
    }"
15088,points2Degrees,"    private static float points2Degrees(float x1, float y1, float x2, float y2){
        double angle = Math.atan2(y2-y1,x2-x1);
        return (float) Math.toDegrees(angle);
    }"
15089,flag2TargetTranslate,"    private int flag2TargetTranslate(){
        int startXOffset = getCircleStartX();
        return startXOffset + getItemWidth() * mCurrentFlag;
    }"
15090,distance,"    private static float distance(float x1,float y1, float x2, float y2){
        return (float) Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    }"
15091,onDraw,"    protected void onDraw(Canvas canvas) {
        if ( getChildCount() == 0 ) return;
        int centerY = getMeasuredHeight() >> 1;

        canvas.save();
        canvas.translate(mTranslate, centerY);
        canvas.rotate(mDegrees);
        canvas.drawPath(mPath, mPaint);
        canvas.restore();"
15092,prevOfCurrentFlag,"    private int prevOfCurrentFlag(){
        int tmp = mCurrentFlag;
        tmp--;
        return Math.max(tmp,0);
    }"
15093,nextOfCurrentFlag,"    private int nextOfCurrentFlag(){
        int tmp = mCurrentFlag;
        tmp++;
        return Math.min(tmp,getChildCount()-1);
    }"
15097,updatePath,"    private void updatePath(float currentX, float prevX, int radius, boolean animate){
        updatePath(currentX,0,prevX,0,radius,animate);
    }"
15098,updateAlpha,"    private void updateAlpha( float alpha ){
        mPaint.setAlpha(Math.round(255 * alpha));
    }"
15099,reset,"    private void reset(){
        onExpandView(0,false);
        updateAlpha(1);
        updateCurrentFlag((getChildCount() - 1) >> 1);
        mTranslate = flag2TargetTranslate();
    }"
15100,onActionUpOrCancel,"    public void onActionUpOrCancel(boolean isExpanded){
        if ( getChildCount() == 0 ) return;
        if ( !mTouchHelper.isExpanded() ) return;
        mTouchHelper.reset();

        if ( isExpanded ){"
15102,onActionDown,"    public void onActionDown(){
        reset();
    }"
15108,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        measureChildren(getMeasuredWidth(),getMeasuredHeight());
    }"
15109,onLayout,"    protected void onLayout(boolean changed, int l, int t, int r, int b) {

        int startXOffset = getCircleStartX();
        int startYOffset = (b - t);
"
15113,onAnimationRepeat,"    public void onAnimationRepeat(Animation animation) {
"
15114,onAnimationEnd,"    public void onAnimationEnd(Animation animation) {
"
15115,onAnimationStart,"    public void onAnimationStart(Animation animation) {
"
15117,yypushback,"  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);
"
15118,zzScanError,"  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {"
15119,yylength,"  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }"
15120,yycharat,"  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }"
15121,yytext,"  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }"
15122,yybegin,"  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }"
15123,yystate,"  public final int yystate() {
    return zzLexicalState;
  }"
15124,yyatEOF,"  public final boolean yyatEOF() {
    return zzAtEOF;
  }"
15125,yyResetPosition,"  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }"
15126,yyreset,"  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];"
15129,zzCMap,"  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }"
15130,zzCanGrow,"  private boolean zzCanGrow() {
    return true;
  }"
15131,zzMaxBufferLen,"  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }"
15132,yystart,"	final int yystart() {
		return zzStartRead;
	}"
15133,yybuffer,"	final char [] yybuffer() {
		return zzBuffer;
	}"
15134,yychar,"	public final int yychar()
	{
	    return Math.toIntExact(yychar);"
15136,zzUnpackAttribute,"  private static int [] zzUnpackAttribute() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }"
15138,zzUnpacktrans,"  private static int [] zzUnpacktrans() {
    int [] result = new int[4859];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }"
15140,zzUnpackRowMap,"  private static int [] zzUnpackRowMap() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }"
15142,zzUnpackAction,"  private static int [] zzUnpackAction() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }"
15144,zzUnpackcmap_blocks,"  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }"
15146,zzUnpackcmap_top,"  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }"
15148,onClick,"            public void onClick(View v) {
                captchaImageView.regenerate();
            }"
15150,onDouble,"    public void onDouble(Double aDouble) {
        Toast.makeText(this, ""Double: "" + aDouble, Toast.LENGTH_SHORT).show();
    }"
15151,onShort,"    public void onShort(Short aShort) {
        Toast.makeText(this, ""Short: "" + aShort, Toast.LENGTH_SHORT).show();
    }"
15152,onLong,"    public void onLong(Long aLong) {
        Toast.makeText(this, ""Long: "" + aLong, Toast.LENGTH_SHORT).show();
    }"
15153,onFloat,"    public void onFloat(Float aFloat) {
        Toast.makeText(this, ""Float: "" + aFloat, Toast.LENGTH_SHORT).show();
    }"
15154,onInteger,"    public void onInteger(Integer integer) {
        Toast.makeText(this, ""Integer: "" + integer, Toast.LENGTH_SHORT).show();
    }"
15155,onString,"    public void onString(String stringReceived) {
        Toast.makeText(this, ""String: "" + stringReceived, Toast.LENGTH_SHORT).show();
    }"
15156,onCustomObject,"    public void onCustomObject(CustomObject customObject) {
        Toast.makeText(this, ""Object: "" + customObject.getName(), Toast.LENGTH_SHORT).show();
    }"
15157,onClick,"            public void onClick(View v) {
                List<Object> messages = Arrays.<Object>asList(editTextToSend.getText().toString(), 1, 1L, 1.0f, 1.0, (short) 1);
                Object random = messages.get(rand.nextInt(messages.size()));
                EventBus.getDefault(v.getContext()).post(random);
            }"
15162,onDestroy,"    protected void onDestroy() {
        EventBus.getDefault(this).unregister(this);
        super.onDestroy();
    }"
15164,newArray,"        public CustomObject[] newArray(int size) {
            return new CustomObject[size];
        }"
15165,createFromParcel,"        public CustomObject createFromParcel(Parcel in) {
            return new CustomObject(in);
        }"
15166,toString,"    public String toString() {
        return ""CustomObject{"" +
                ""name='"" + name + '\'' +"
15167,writeToParcel,"    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(name);
    }"
15171,onTerminate,"    public void onTerminate() {
        super.onTerminate();
        Beta.unInit();
    }"
15172,registerActivityLifecycleCallback,"    public void registerActivityLifecycleCallback(
            Application.ActivityLifecycleCallbacks callbacks) {
        getApplication().registerActivityLifecycleCallbacks(callbacks);"
15174,onPatchRollback,"            public void onPatchRollback() {
"
15179,onDownloadReceived,"            public void onDownloadReceived(long savedLength, long totalLength) {
                Toast.makeText(getApplication(),
                        String.format(Locale.getDefault(), ""%s %d%%"","
15183,createNativeCrash,"    public native void createNativeCrash();
"
15184,stringFromJNI,"    public native String stringFromJNI();
    public native void createNativeCrash();"
15185,onBackPressed,"    public void onBackPressed() {
        super.onBackPressed();
        Log.e(""MainActivity"", ""onBackPressed"");

        Beta.unInit();"
15188,testToast,"    public void testToast() {
        Toast.makeText(this, LoadBugClass.getBugString(), Toast.LENGTH_SHORT).show();
    }"
15194,onClick,"                public void onClick(View v) {
                    helper4.dismissBubblePopupWindow();
                }"
15195,onClick,"                public void onClick(View v) {
                    helper3.dismissBubblePopupWindow();
                }"
15196,onClick,"                public void onClick(View v) {
                    helper2.dismissBubblePopupWindow();
                }"
15197,onClick,"                public void onClick(View v) {
                    helper1.dismissBubblePopupWindow();
                }"
15198,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        if(hasFocus && !inited){
            inited = true;"
15199,onClick,"            public void onClick(View v) {
                helper4.show();
                Toast.makeText(MainActivity3.this,""button 4"",Toast.LENGTH_SHORT).show();
            }"
15200,onClick,"            public void onClick(View v) {
                helper3.show();
            }"
15201,onClick,"            public void onClick(View v) {
                helper2.show();
            }"
15202,onClick,"            public void onClick(View v) {
                helper1.show();
            }"
15206,onClick,"            public void onClick(View v) {
                Toast.makeText(MainActivity2.this,""cancel"",Toast.LENGTH_SHORT).show();
            }"
15215,onClick,"            public void onClick(View v) {
                helper4.show();
            }"
15220,onScrolled,"            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                super.onScrolled(recyclerView, dx, dy);
                mScrollerY += dy;
                if (Math.abs(mScrollerY) > 1000) {
                    mBlurredView.setBlurredTop(100);
                    mAlpha = 100;"
15221,onScrollStateChanged,"            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                super.onScrollStateChanged(recyclerView, newState);
            }"
15225,onBindViewHolder,"    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
"
15226,onCreateViewHolder,"    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        if (viewType == TYPE_HEADER) {
            return new HeaderHolder(LayoutInflater.from(context).inflate(R.layout.recyclerview_header, parent, false));
        }"
15227,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, WeatherActivity.class));
            }"
15228,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, BlurredViewBasicActivity.class));
            }"
15232,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                mBlurredView.setBlurredLevel(progress);
                mProgressTv.setText(String.valueOf(progress));
            }"
15237,onBlurComplete,"                    public void onBlurComplete() {
                        Intent intent = new Intent(MainActivity.this, BlurredActivity.class);
                        intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);

                        startActivity(intent);"
15239,onCreate,"	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_main);

		final Button dummyButton = (Button) findViewById(R.id.dummy_button);"
15240,onCreate,"	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_blurred);
"
15241,onPostExecute,"        protected void onPostExecute(Void aVoid) {
            super.onPostExecute(aVoid);

            decorView.destroyDrawingCache();
            decorView.setDrawingCacheEnabled(false);

            activity = null;
"
15242,doInBackground,"        protected Void doInBackground(Void... params) {
            Bitmap blurredBitmap = Blur.apply(activity, image, CONSTANT_BLUR_RADIUS);
            mImageCache.put(KEY_CACHE_BLURRED_BACKGROUND_IMAGE, blurredBitmap);

            return null;"
15243,onPreExecute,"        protected void onPreExecute() {
            super.onPreExecute();

            decorView = activity.getWindow().getDecorView();
            decorView.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_LOW);
            decorView.setDrawingCacheEnabled(true);
            decorView.buildDrawingCache();
"
15245,withFilterColor,"    public BlurBehind withFilterColor(int filterColor) {
        this.mFilterColor = filterColor;
        return this;
    }"
15246,withAlpha,"    public BlurBehind withAlpha(int alpha) {
        this.mAlpha = alpha;
        return this;
    }"
15247,execute,"    public void execute(Activity activity, OnBlurCompleteListener onBlurCompleteListener) {
        if (mState.equals(State.READY)) {
            mState = State.EXECUTING;"
15252,loadImage,"    public void loadImage(ImageView imageView, Object obj, Context context) {
        Glide.with(context).load(obj).into(imageView);
    }"
15259,onPageScrollStateChanged,"    public void onPageScrollStateChanged(int state) {
    }"
15260,onPageSelected,"    public void onPageSelected(int position) {
    }"
15262,range0Until1,"    private float range0Until1(float minValue, float maxValue) {
        return (animatedValue - minValue) / (maxValue - minValue);
    }"
15265,onAnimationUpdate,"                public void onAnimationUpdate(ValueAnimator animation) {
                    animatedTouchValue = (float) animation.getAnimatedValue();
                    if (animatedTouchValue == mRadius * 1.5f) {
                        isTouchAniming = false;"
15267,onAnimationRepeat,"                public void onAnimationRepeat(Animator animator) {
                }"
15268,onAnimationCancel,"                public void onAnimationCancel(Animator animator) {
                    isAniming = false;
                    curPos = nextPos;
                    if (mViewPage != null) {
                        mViewPage.setTouchable(true);"
15269,onAnimationEnd,"                public void onAnimationEnd(Animator animator) {
                    isAniming = false;
                    curPos = nextPos;
                    if (mViewPage != null) {
                        mViewPage.setTouchable(true);"
15270,onAnimationStart,"                public void onAnimationStart(Animator animator) {
                    isAniming = true;
                    if (mViewPage != null) {
                        mViewPage.setTouchable(false);"
15271,onAnimationUpdate,"                public void onAnimationUpdate(ValueAnimator animation) {
                    isAniming = true;
                    animatedValue = (float) animation.getAnimatedValue();
                    invalidate();
"
15272,startAnimator,"    public void startAnimator() {
        if (animatorStart != null) {
            if (animatorStart.isRunning()) {"
15274,initCountPos,"    private void initCountPos() {
        bezPos = new float[default_round_count];
        xPivotPos = new float[default_round_count];
        for (int i = 0; i < default_round_count; i++) {
            bezPos[i] = mWidth / (default_round_count + 1) * (i + 1);"
15277,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);

        mWidth = w;
        mHeight = h;
        initCountPos();"
15278,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        if (DEFAULT_WIDTH == 0) {
            WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
            DEFAULT_WIDTH = wm.getDefaultDisplay().getWidth();
        }
"
15286,delPoint,"    public boolean delPoint() {
        if (isReady()) {
            int size = mControlPoints.size();
            if (size <= 2) {"
15287,addPoint,"    public boolean addPoint() {
        if (isReady()) {
            int size = mControlPoints.size();
            if (size >= MAX_COUNT + 1) {"
15288,stop,"    public void stop() {
        if (isRunning()) {
            mHandler.removeMessages(HANDLER_WHAT);"
15289,start,"    public void start() {
        if (isReady()) {
            mBezierPoint = null;"
15290,isStop,"    private boolean isStop() {
        return (mState & STATE_STOP) == STATE_STOP;
    }"
15291,isTouchable,"    private boolean isTouchable() {
        return (mState & STATE_TOUCH) == STATE_TOUCH;
    }"
15292,isRunning,"    private boolean isRunning() {
        return (mState & STATE_RUNNING) == STATE_RUNNING;
    }"
15293,isReady,"    private boolean isReady() {
        return (mState & STATE_READY) == STATE_READY;
    }"
15295,onDraw,"    protected void onDraw(Canvas canvas) {
        if (isRunning() && !isTouchable()) {
            if (mBezierPoint == null) {
                mBezierPath.reset();"
15296,onLayout,"    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
        super.onLayout(changed, left, top, right, bottom);
        if (mWidth == 0 || mHeight == 0) {
            mWidth = getWidth();"
15297,isLegalFingerRegion,"    private boolean isLegalFingerRegion(float x, float y) {
        if (mCurPoint != null) {
            RectF rectF = new RectF(mCurPoint.x - (FINGER_RECT_SIZE >> 1),
                    mCurPoint.y - (FINGER_RECT_SIZE >> 1), mCurPoint"
15299,isLegalTouchRegion,"    private boolean isLegalTouchRegion(float x, float y) {
        if (x <= REGION_WIDTH || x >= mWidth - REGION_WIDTH || y <= REGION_WIDTH || y >= mHeight - REGION_WIDTH) {
            return false;
        }
        RectF rectF = new RectF();
        for (PointF point : mControlPoints) {"
15300,deCasteljauY,"    private float deCasteljauY(int i, int j, float t) {
        if (i == 1) {
            return (1 - t) * mControlPoints.get(j).y + t * mControlPoints.get(j + 1).y;
        }"
15301,deCasteljauX,"    private float deCasteljauX(int i, int j, float t) {
        if (i == 1) {
            return (1 - t) * mControlPoints.get(j).x + t * mControlPoints.get(j + 1).x;
        }"
15305,handleMessage,"        public void handleMessage(Message msg) {
            if (msg.what == HANDLER_WHAT) {
                mR += mRate;"
15306,testFromValueThrowException,"    public void testFromValueThrowException() {
        ValidationStyle.fromValue(4);
    }"
15307,testFromValueToTextInputLayout,"    public void testFromValueToTextInputLayout() {
        assertEquals(ValidationStyle.TEXT_INPUT_LAYOUT, ValidationStyle.fromValue(3));
    }"
15308,testFromValueToUnderlabel,"    public void testFromValueToUnderlabel() {
        assertEquals(ValidationStyle.UNDERLABEL, ValidationStyle.fromValue(2));
    }"
15309,testFromValueToColoration,"    public void testFromValueToColoration() {
        assertEquals(ValidationStyle.COLORATION, ValidationStyle.fromValue(1));
    }"
15310,testFromValueToBasic,"    public void testFromValueToBasic() {
        assertEquals(ValidationStyle.BASIC, ValidationStyle.fromValue(0));
    }"
15311,fromValue,"    public static ValidationStyle fromValue(int value) {
        switch (value) {
            case 0:"
15312,value,"    public int value() {
        return mValue;
    }"
15313,testResetCustomError,"    public void testResetCustomError() {
        mValidationHolderCustomTypeWithSomeSortOfView.resetCustomError();
        verify(mMockCustomErrorReset, times(1)).reset(mValidationHolderCustomTypeWithSomeSortOfView);
    }"
15317,testGetView,"    public void testGetView() {
        assertEquals(mMockView, mValidationHolderCustomTypeWithSomeSortOfView.getView());
    }"
15323,testGetConfirmationTextFromTextInputLayoutThrowsException,"    public void testGetConfirmationTextFromTextInputLayoutThrowsException() {
        when(mMockConfirmationTextInputLayout.getEditText()).thenReturn(null);
        mValidationHolderConfirmationTypeWithTextInputLayout.getConfirmationText();
    }"
15325,testGetConfirmationTextFromEditText,"    public void testGetConfirmationTextFromEditText() {
        String text = ""OK"";
        Editable mockEditable = mock(Editable.class);
        when(mMockConfirmationEditText.getText()).thenReturn(mockEditable);
        when(mockEditable.toString()).thenReturn(text);
        assertEquals(text, mValidationHolderConfirmationTypeWithEditText.getConfirmationText());
    }"
15327,testGetTextFromTextInputLayoutThrowsException,"    public void testGetTextFromTextInputLayoutThrowsException() {
        when(mMockTextInputLayout.getEditText()).thenReturn(null);
        mValidationHolderRegexTypeWithTextInputLayout.getText();
    }"
15331,testIsSomeSortOfViewTrue,"    public void testIsSomeSortOfViewTrue() {
        assertTrue(mValidationHolderCustomTypeWithSomeSortOfView.isSomeSortOfView());
    }"
15335,testIsEditTextViewTrue,"    public void testIsEditTextViewTrue() {
        assertTrue(mValidationHolderRegexTypeWithEditText.isEditTextView());
        assertTrue(mValidationHolderRangeTypeWithEditText.isEditTextView());
        assertTrue(mValidationHolderConfirmationTypeWithEditText.isEditTextView());
        assertTrue(mValidationHolderSimpleCustomTypeWithEditText.isEditTextView());
    }"
15337,testIsCustomTypeTrue,"    public void testIsCustomTypeTrue() {
        assertTrue(mValidationHolderCustomTypeWithSomeSortOfView.isCustomType());
    }"
15339,testIsSimpleCustomTypeTrue,"    public void testIsSimpleCustomTypeTrue() {
        assertTrue(mValidationHolderSimpleCustomTypeWithEditText.isSimpleCustomType());
        assertTrue(mValidationHolderSimpleCustomTypeWithTextInputLayout.isSimpleCustomType());
    }"
15341,testIsConfirmationTypeTrue,"    public void testIsConfirmationTypeTrue() {
        assertTrue(mValidationHolderConfirmationTypeWithEditText.isConfirmationType());
        assertTrue(mValidationHolderConfirmationTypeWithTextInputLayout.isConfirmationType());
    }"
15343,testIsRangeTypeTrue,"    public void testIsRangeTypeTrue() {
        assertTrue(mValidationHolderRangeTypeWithEditText.isRangeType());
        assertTrue(mValidationHolderRangeTypeWithTextInputLayout.isRangeType());
    }"
15345,testIsRegexTypeTrue,"    public void testIsRegexTypeTrue() {
        assertTrue(mValidationHolderRegexTypeWithEditText.isRegexType());
        assertTrue(mValidationHolderRegexTypeWithTextInputLayout.isRegexType());
    }"
15347,resetCustomError,"    public void resetCustomError() {
        mCustomErrorReset.reset(this);
    }"
15348,isVisible,"    public boolean isVisible() {
        return isEditTextView() && getEditText().getVisibility() == View.VISIBLE
                || isTextInputLayoutView() && getTextInputLayout().getVisibility() == View.VISIBLE"
15360,isSomeSortOfView,"    public boolean isSomeSortOfView() {
        return mView != null;
    }"
15361,isTextInputLayoutView,"    public boolean isTextInputLayoutView() {
        return mTextInputLayout != null;
    }"
15362,isEditTextView,"    public boolean isEditTextView() {
        return mEditText != null;
    }"
15363,isCustomType,"    public boolean isCustomType() {
        return mCustomValidation != null;
    }"
15364,isSimpleCustomType,"    public boolean isSimpleCustomType() {
        return mSimpleCustomValidation != null;
    }"
15365,isConfirmationType,"    public boolean isConfirmationType() {
        return mConfirmationEditText != null || mConfirmationTextInputLayout != null;
    }"
15366,isRangeType,"    public boolean isRangeType() {
        return mNumericRange != null;
    }"
15367,isRegexType,"    public boolean isRegexType() {
        return mPattern != null;
    }"
15368,testClear,"    public void testClear() throws Exception {
        mSpiedAwesomeValidationBasicStyle.clear();
        verify(mSpiedBasicValidator, times(1)).halt();
    }"
15369,testValidate,"    public void testValidate() {
        mSpiedAwesomeValidationBasicStyle.validate();
        verify(mSpiedBasicValidator, times(1)).trigger();
        assertEquals(mSpiedBasicValidator.trigger(), mSpiedAwesomeValidationBasicStyle.validate());
    }"
15370,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndConfirmationThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndConfirmationThrowsException() {
        mSpiedAwesomeValidationBasicStyle.addValidation(mock(TextInputLayout.class), mock(TextInputLayout.class), PowerMockito.mock(String.class));
    }"
15371,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRangeThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRangeThrowsException() {
        mSpiedAwesomeValidationUnderlabelStyle.addValidation(mock(TextInputLayout.class), PowerMockito.mock(Range.class), PowerMockito.mock(String.class));
    }"
15372,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndPatternThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndPatternThrowsException() {
        mSpiedAwesomeValidationColorationStyle.addValidation(mock(TextInputLayout.class), PowerMockito.mock(Pattern.class), PowerMockito.mock(String.class));
    }"
15373,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRegexThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRegexThrowsException() {
        mSpiedAwesomeValidationBasicStyle.addValidation(mock(TextInputLayout.class), PowerMockito.mock(String.class), PowerMockito.mock(String.class));
    }"
15374,testAddValidationForTextInputLayoutValidatorWithEditTextAndConfirmationThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndConfirmationThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), mock(EditText.class), PowerMockito.mock(String.class));
    }"
15375,testAddValidationForTextInputLayoutValidatorWithEditTextAndRangeThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndRangeThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), PowerMockito.mock(Range.class), PowerMockito.mock(String.class));
    }"
15376,testAddValidationForTextInputLayoutValidatorWithEditTextAndPatternThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndPatternThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), PowerMockito.mock(Pattern.class), PowerMockito.mock(String.class));
    }"
15377,testAddValidationForTextInputLayoutValidatorWithEditTextAndRegexThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndRegexThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), PowerMockito.mock(String.class), PowerMockito.mock(String.class));
    }"
15379,testSetTextInputLayoutErrorTextAppearanceForNonTextInputLayoutStyle,"    public void testSetTextInputLayoutErrorTextAppearanceForNonTextInputLayoutStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setTextInputLayoutErrorTextAppearance(mStyleResId);
    }"
15380,testSetTextInputLayoutErrorTextAppearanceForTextInputLayoutStyle,"    public void testSetTextInputLayoutErrorTextAppearanceForTextInputLayoutStyle() throws Exception {
        mSpiedAwesomeValidationTextInputLayoutStyle.setTextInputLayoutErrorTextAppearance(mStyleResId);
        verify(mSpiedTextInputLayoutValidator, times(1)).setErrorTextAppearance(mStyleResId);
    }"
15381,testSetUnderlabelColorByResourceForNonUnderlabelStyle,"    public void testSetUnderlabelColorByResourceForNonUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setUnderlabelColorByResource(mColorResId);
    }"
15383,testSetUnderlabelColorForNonUnderlabelStyle,"    public void testSetUnderlabelColorForNonUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setUnderlabelColor(mColor);
    }"
15384,testSetUnderlabelColorForUnderlabelStyle,"    public void testSetUnderlabelColorForUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationUnderlabelStyle.setUnderlabelColor(mColor);
        verify(mSpiedUnderlabelValidator, times(1)).setColor(mColor);
    }"
15385,testSetColorForNonColorationStyle,"    public void testSetColorForNonColorationStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setColor(mColor);
    }"
15386,testSetColorForColorationStyle,"    public void testSetColorForColorationStyle() throws Exception {
        mSpiedAwesomeValidationColorationStyle.setColor(mColor);
        verify(mSpiedColorationValidator, times(1)).setColor(mColor);
    }"
15387,testSetContextForNonUnderlabelStyle,"    public void testSetContextForNonUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setContext(mMockContext);
    }"
15389,testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithUnderlabelStyle,"    public void testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithUnderlabelStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
15390,testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithColorationStyle,"    public void testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithColorationStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
15391,testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithBasicStyle,"    public void testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
15392,testCheckIsNotTextInputLayoutValidatorThrowsExceptionWithTextInputLayoutStyle,"    public void testCheckIsNotTextInputLayoutValidatorThrowsExceptionWithTextInputLayoutStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
15393,testCheckIsTextInputLayoutValidatorWithoutException,"    public void testCheckIsTextInputLayoutValidatorWithoutException() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsTextInputLayoutValidator"");
    }"
15394,testCheckIsTextInputLayoutValidatorThrowsExceptionWithUnderlabelStyle,"    public void testCheckIsTextInputLayoutValidatorThrowsExceptionWithUnderlabelStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsTextInputLayoutValidator"");
    }"
15395,testCheckIsTextInputLayoutValidatorThrowsExceptionWithColorationStyle,"    public void testCheckIsTextInputLayoutValidatorThrowsExceptionWithColorationStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsTextInputLayoutValidator"");
    }"
15396,testCheckIsTextInputLayoutValidatorThrowsExceptionWithBasicStyle,"    public void testCheckIsTextInputLayoutValidatorThrowsExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsTextInputLayoutValidator"");
    }"
15397,testCheckIsUnderlabelValidatorWithoutException,"    public void testCheckIsUnderlabelValidatorWithoutException() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsUnderlabelValidator"");
    }"
15398,testCheckIsUnderlabelValidatorThrowsExceptionWithTextInputLayoutStyle,"    public void testCheckIsUnderlabelValidatorThrowsExceptionWithTextInputLayoutStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsUnderlabelValidator"");
    }"
15399,testCheckIsUnderlabelValidatorThrowsExceptionWithColorationStyle,"    public void testCheckIsUnderlabelValidatorThrowsExceptionWithColorationStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsUnderlabelValidator"");
    }"
15400,testCheckIsUnderlabelValidatorThrowsExceptionWithBasicStyle,"    public void testCheckIsUnderlabelValidatorThrowsExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsUnderlabelValidator"");
    }"
15401,testCheckIsColorationValidatorWithoutException,"    public void testCheckIsColorationValidatorWithoutException() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsColorationValidator"");
    }"
15402,testCheckIsColorationValidatorThrowsExceptionWithTextInputLayoutStyle,"    public void testCheckIsColorationValidatorThrowsExceptionWithTextInputLayoutStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsColorationValidator"");
    }"
15403,testCheckIsColorationValidatorThrowsExceptionWithUnderlabelStyle,"    public void testCheckIsColorationValidatorThrowsExceptionWithUnderlabelStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsColorationValidator"");
    }"
15404,testCheckIsColorationValidatorThrowsExceptionWithBasicStyle,"    public void testCheckIsColorationValidatorThrowsExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsColorationValidator"");
    }"
15405,testAwesomeValidationConstructTextInputLayoutValidatorStyle,"    public void testAwesomeValidationConstructTextInputLayoutValidatorStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationTextInputLayoutStyle, ""mValidator"") instanceof TextInputLayoutValidator);
    }"
15406,testAwesomeValidationConstructUnderlabelValidatorStyle,"    public void testAwesomeValidationConstructUnderlabelValidatorStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationUnderlabelStyle, ""mValidator"") instanceof UnderlabelValidator);
    }"
15407,testAwesomeValidationConstructColorationStyle,"    public void testAwesomeValidationConstructColorationStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationColorationStyle, ""mValidator"") instanceof ColorationValidator);
    }"
15408,testAwesomeValidationConstructBasicStyle,"    public void testAwesomeValidationConstructBasicStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationBasicStyle, ""mValidator"") instanceof BasicValidator);
    }"
15412,compare,"        public boolean compare(ValidationHolder validationHolder) {
            return false;
        }"
15413,compare,"        public boolean compare(String input) {
            return false;
        }"
15414,clear,"    public void clear() {
        mValidator.halt();
    }"
15415,validate,"    public boolean validate() {
        return mValidator.trigger();
    }"
15416,addValidation,"    public void addValidation(Activity activity, int viewId, CustomValidation customValidation, CustomValidationCallback customValidationCallback, CustomErrorReset customErrorReset, int errMsgId) {
        mValidator.set(activity, viewId, customValidation, customValidationCallback, customErrorReset, errMsgId);
    }"
15417,addValidation,"    public void addValidation(View view, CustomValidation customValidation, CustomValidationCallback customValidationCallback, CustomErrorReset customErrorReset, String errMsg) {
        mValidator.set(view, customValidation, customValidationCallback, customErrorReset, errMsg);
    }"
15418,addValidation,"    public void addValidation(Activity activity, int viewId, SimpleCustomValidation simpleCustomValidation, int errMsgId) {
        mValidator.set(activity, viewId, simpleCustomValidation, errMsgId);
    }"
15419,addValidation,"    public void addValidation(TextInputLayout textInputLayout, SimpleCustomValidation simpleCustomValidation, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, simpleCustomValidation, errMsg);
    }"
15420,addValidation,"    public void addValidation(EditText editText, SimpleCustomValidation simpleCustomValidation, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, simpleCustomValidation, errMsg);
    }"
15421,addValidation,"    public void addValidation(Activity activity, int confirmationViewId, int viewId, int errMsgId) {
        mValidator.set(activity, confirmationViewId, viewId, errMsgId);
    }"
15422,addValidation,"    public void addValidation(TextInputLayout confirmationTextInputLayout, TextInputLayout textInputLayout, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(confirmationTextInputLayout, textInputLayout, errMsg);
    }"
15423,addValidation,"    public void addValidation(EditText confirmationEditText, EditText editText, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(confirmationEditText, editText, errMsg);
    }"
15424,addValidation,"    public void addValidation(Activity activity, int viewId, Range range, int errMsgId) {
        mValidator.set(activity, viewId, new NumericRange(range), errMsgId);
    }"
15425,addValidation,"    public void addValidation(TextInputLayout textInputLayout, Range range, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, new NumericRange(range), errMsg);
    }"
15426,addValidation,"    public void addValidation(EditText editText, Range range, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, new NumericRange(range), errMsg);
    }"
15427,addValidation,"    public void addValidation(Activity activity, int viewId, Pattern pattern, int errMsgId) {
        mValidator.set(activity, viewId, pattern, errMsgId);
    }"
15428,addValidation,"    public void addValidation(TextInputLayout textInputLayout, Pattern pattern, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, pattern, errMsg);
    }"
15429,addValidation,"    public void addValidation(EditText editText, Pattern pattern, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, pattern, errMsg);
    }"
15430,addValidation,"    public void addValidation(Activity activity, int viewId, String regex, int errMsgId) {
        mValidator.set(activity, viewId, regex, errMsgId);
    }"
15431,addValidation,"    public void addValidation(TextInputLayout textInputLayout, String regex, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, regex, errMsg);
    }"
15432,addValidation,"    public void addValidation(EditText editText, String regex, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, regex, errMsg);
    }"
15438,checkIsNotTextInputLayoutValidator,"    private void checkIsNotTextInputLayoutValidator() {
        if (mValidator instanceof TextInputLayoutValidator) {
            throw new UnsupportedOperationException(""Not supported by TextInputLayoutValidator."");"
15439,checkIsTextInputLayoutValidator,"    private void checkIsTextInputLayoutValidator() {
        if (!(mValidator instanceof TextInputLayoutValidator)) {
            throw new UnsupportedOperationException(""Only supported by TextInputLayoutValidator."");"
15440,checkIsUnderlabelValidator,"    private void checkIsUnderlabelValidator() {
        if (!(mValidator instanceof UnderlabelValidator)) {
            throw new UnsupportedOperationException(""Only supported by UnderlabelValidator."");"
15441,checkIsColorationValidator,"    private void checkIsColorationValidator() {
        if (!(mValidator instanceof ColorationValidator)) {
            throw new UnsupportedOperationException(""Only supported by ColorationValidator."");"
15442,disableAutoFocusOnFirstFailure,"    public static void disableAutoFocusOnFirstFailure() {
        autoFocusOnFirstFailure = false;
    }"
15443,isAutoFocusOnFirstFailureEnabled,"    public static boolean isAutoFocusOnFirstFailureEnabled() {
        return autoFocusOnFirstFailure;
    }"
15447,springCallback,"            public void springCallback(int offset) {
                int radius = 20 * (240 - offset > 0 ? 240 - offset : 0) / 240;
                realtimeBlurView.setBlurRadius(radius);
            }"
15449,onClick,"            public void onClick(View view) {
                Snackbar.make(view, ""Replace with your own action"", Snackbar.LENGTH_LONG)
                        .setAction(""Action"", null).show();"
15453,toString,"        public String toString() {
            return super.toString() + "" '"" + mContentView.getText() + ""'"";
        }"
15455,onBindViewHolder,"    public void onBindViewHolder(final ViewHolder holder, int position) {
        holder.mItem = mValues.get(position);
        holder.mIdView.setText(mValues.get(position).id);
        holder.mContentView.setText(mValues.get(position).content);
    }"
15456,onCreateViewHolder,"    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.fragment_item, parent, false);
        return new ViewHolder(view);"
15457,onSpringTabAppBarLayoutClick,"    public void onSpringTabAppBarLayoutClick(View view) {
        startActivity(new Intent(this, SpringAppBarLayoutWithTabActivity.class));
    }"
15458,onSpringAppBarLayoutClick,"    public void onSpringAppBarLayoutClick(View view) {
        startActivity(new Intent(this, SpringAppBarLayoutActivity.class));
    }"
15459,onNormalAppBarLayoutClick,"    public void onNormalAppBarLayoutClick(View view) {
        startActivity(new Intent(this, NormalAppBarLayoutActivity.class));
    }"
15462,newInstance,"    public static ItemFragment newInstance() {
        ItemFragment fragment = new ItemFragment();
        Bundle args = new Bundle();
        fragment.setArguments(args);
        return fragment;
    }"
15463,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {

        int id = item.getItemId();
        if (id == R.id.action_recyclerView) {
            if (mSweetSheet2.isShow()) {
                mSweetSheet2.dismiss();
            }"
15464,onBackPressed,"    public void onBackPressed() {

        if (mSweetSheet.isShow() || mSweetSheet2.isShow()) {"
15466,onItemClick,"            public boolean onItemClick(int position, MenuEntity menuEntity1) {

                Toast.makeText(MainActivity.this, menuEntity1.title + ""  "" + position, Toast.LENGTH_SHORT).show();
                return true;"
15470,onClick,"            public void onClick(View v) {
                mSweetSheet3.dismiss();
            }"
15471,setupCustomView,"    private void setupCustomView() {



        mSweetSheet3 = new SweetSheet(rl);
        CustomDelegate customDelegate = new CustomDelegate(true,
                CustomDelegate.AnimationType.DuangLayoutAnimation);
        View view = LayoutInflater.from(this).inflate(R.layout.layout_custom_view, null, false);"
15472,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_main);

        rl = (RelativeLayout) findViewById(R.id.rl);
        setupViewpager();
        setupRecyclerView();"
15475,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (savedInstanceState == null) {"
15476,onListItemClick,"    public void onListItemClick(ListView l, View v, int position, long id) {
        String item = (String) l.getAdapter().getItem(position);

        if (item.equals(HANDLER)) {
            getFragmentManager().beginTransaction()"
15477,onResume,"    public void onResume() {
        super.onResume();

        ActionBar actionBar = ((MainActivity) getActivity()).getSupportActionBar();

        actionBar.setDisplayHomeAsUpEnabled(false);"
15479,newInstance,"    public static ListFragment newInstance() {
        return new ListFragment();
    }"
15483,onClick,"                         public void onClick(View view)
                              {
                                 
                                   Toast.makeText(this,""Hey you Have done this!!"",Toast.LENGTH_LONG).show();
                                   
                                   Intent intent=new Intent(this,YourNewActivity.class);"
15484,Item1,"           public void Item1(View view)
             {
               Button button2=findViewById(R.id.button2);
               button2.setOnClickListener(new OnClickListener()"
15485,onClick,"                         public void onClick(View view)
                              {
                                 "
15486,Item1,"         public void Item1(View view)
             {
               Button button1 =findViewById(R.id.button1);
               button1.setOnClickListener(new OnClickListener()"
15487,onCreateOptionsMenu,"             public boolean onCreateOptionsMenu(Menu menu) {

        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;"
15488,onCreate,"       public void onCreate(Bundle bundle)
         {
            super.onCreate(bundle);
            setContentView(R.layout.ToolbarMaterial);
            
            mTopToolbar = (Toolbar) findViewById(R.id.my_toolbar);"
15493,onDraw,"    protected void onDraw(Canvas canvas) {
        final int height = getHeight();
        final int childCount = getChildCount();
        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null
                ? mCustomTabColorizer
                : mDefaultTabColorizer;
"
15494,onViewPagerPageChanged,"    void onViewPagerPageChanged(int position, float positionOffset) {
        mSelectedPosition = position;
        mSelectionOffset = positionOffset;
        invalidate();
    }"
15498,onPageSelected,"        public void onPageSelected(int position) {
            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {
                mTabStrip.onViewPagerPageChanged(position, 0f);
                scrollToTab(position, 0);
            }"
15499,onPageScrollStateChanged,"        public void onPageScrollStateChanged(int state) {
            mScrollState = state;

            if (mViewPagerPageChangeListener != null) {"
15501,scrollToTab,"    private void scrollToTab(int tabIndex, int positionOffset) {
        final int tabStripChildCount = mTabStrip.getChildCount();
        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {
            return;
        }
"
15502,onAttachedToWindow,"    protected void onAttachedToWindow() {
        super.onAttachedToWindow();

        if (mViewPager != null) {"
15512,getIndicatorColor,"        int getIndicatorColor(int position);
"
15514,newInstance,"    public static SampleFragment newInstance(int position) {
        SampleFragment f = new SampleFragment();
        Bundle b = new Bundle();
        b.putInt(ARG_POSITION, position);
        f.setArguments(b);
        return f;
    }"
15515,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        drawerToggle.onConfigurationChanged(newConfig);
    }"
15516,onPostCreate,"    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);
        drawerToggle.syncState();
    }"
15517,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {

        if (drawerToggle.onOptionsItemSelected(item)) {
            return true;
        }"
15518,onItemClick,"            public void onItemClick(AdapterView<?> parent, View view,
                                    int position, long id) {
                switch (position) {"
15524,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (!firstAnimationOver)
            drawFirstAnimation(canvas);
        if (cont > 0)
            drawSecondAnimation(canvas);"
15527,dpToPx,"    public int dpToPx(float dp, Resources resources) {
        float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, resources.getDisplayMetrics());
        return (int) px;
    }"
15535,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (x != -1) {
            Rect src = new Rect(0, 0, getWidth(), getHeight());
            Rect dst = new Rect(dpToPx(1, getResources()), dpToPx(2, getResources()), getWidth() - dpToPx(1, getResources()), getHeight() - dpToPx(2, getResources()));"
15539,getTextView,"    abstract public TextView getTextView();
"
15542,makePressColor,"    protected int makePressColor() {
        int r = (this.backgroundColor >> 16) & 0xFF;
        int g = (this.backgroundColor >> 8) & 0xFF;
        int b = (this.backgroundColor >> 0) & 0xFF;
        r = (r - 30 < 0) ? 0 : r - 30;
        g = (g - 30 < 0) ? 0 : g - 30;
        b = (b - 30 < 0) ? 0 : b - 30;
        return Color.rgb(r, g, b);
    }"
15544,onFocusChanged,"    protected void onFocusChanged(boolean gainFocus, int direction,
                                  Rect previouslyFocusedRect) {
        if (!gainFocus) {"
15548,startDocument,"		public void startDocument() throws SAXException {			
			this.mFriends.clear();
			this.mOnlineFriends.clear();
			this.mUnreadMessages.clear();
			super.startDocument();
		}"
15549,startElement,"		public void startElement(String uri, String localName, String name,
				Attributes attributes) throws SAXException 
		{				
			if (localName == ""friend"")"
15551,onServiceDisconnected,"		public void onServiceDisconnected(ComponentName className) {          
			imService = null;
			Toast.makeText(UnApprovedFriendList.this, R.string.local_service_stopped,
					Toast.LENGTH_SHORT).show();"
15552,onServiceConnected,"		public void onServiceConnected(ComponentName className, IBinder service) {          
			imService = ((IMService.IMBinder)service).getService();      
"
15553,onResume,"	protected void onResume() 
	{
		super.onResume();
		bindService(new Intent(UnApprovedFriendList.this, IMService.class), mConnection , Context.BIND_AUTO_CREATE);"
15554,onPause,"	protected void onPause() 
	{
		unbindService(mConnection);
		super.onPause();"
15555,run,"					public void run() {
						if ( approvedFriendNames.length() > 0 || 
							 discardedFriendNames.length() > 0 "
15556,onMenuItemSelected,"	public boolean onMenuItemSelected(int featureId, MenuItem item) 
	{		

		switch(item.getItemId()) "
15557,onCreateOptionsMenu,"	public boolean onCreateOptionsMenu(Menu menu) {		
		boolean result = super.onCreateOptionsMenu(menu);		

		menu.add(0, APPROVE_SELECTED_FRIENDS_ID, 0, R.string.approve_selected_friends);				
		"
15558,onCreate,"	protected void onCreate(Bundle savedInstanceState) {
		
		super.onCreate(savedInstanceState);
		
		Bundle extras = getIntent().getExtras();
		
		String names = extras.getString(FriendInfo.FRIEND_LIST);
		
		friendUsernames = names.split("","");
		"
15560,onResume,"	protected void onResume() {
		bindService(new Intent(SignUp.this, IMService.class), mConnection , Context.BIND_AUTO_CREATE);
		   
		super.onResume();"
15562,onClick,"					public void onClick(DialogInterface dialog, int whichButton) {
						finish();
					}"
15567,onCreateDialog,"	protected Dialog onCreateDialog(int id) 
	{    	
		  	"
15568,onClick,"				public void onClick(View arg0) 
				{						
					finish();					"
15569,run,"												public void run() {
													if (result.equals(SERVER_RES_RES_SIGN_UP_SUCCESFULL)) {
														Toast.makeText(getApplicationContext(),R.string.signup_successfull, Toast.LENGTH_LONG).show();"
15570,run,"										public void run() {
											result = imService.signUpUser(usernameText.getText().toString(), 
													passwordText.getText().toString(), 
													eMailText.getText().toString());"
15571,onClick,"				public void onClick(View arg0) 
				{						
					if (usernameText.length() > 0 &&		"
15575,onDestroy,"	protected void onDestroy() {
	    super.onDestroy();
	    if (localstoragehandler != null) {
	    	localstoragehandler.close();
	    }"
15576,appendToMessageHistory,"	public  void appendToMessageHistory(String username, String message) {
		Log.e(""IM_MSG"",""Messaging:appendToMessageHistory: ""+message);
		if (username != null && message != null) {
			messageHistoryText.append(username + "":\n"");								"
15577,onReceive,"		public void onReceive(Context context, Intent intent) 
		{		
			Bundle extra = intent.getExtras();
			String username = extra.getString(MessageInfo.USERID);			
			String message = extra.getString(MessageInfo.MESSAGETEXT);
			"
15578,onResume,"	protected void onResume() 
	{		
		super.onResume();
		bindService(new Intent(Messaging.this, IMService.class), mConnection , Context.BIND_AUTO_CREATE);
				
		IntentFilter i = new IntentFilter();
		i.addAction(IMService.TAKE_MESSAGE);
		"
15579,onPause,"	protected void onPause() {
		super.onPause();
		unregisterReceiver(messageReceiver);
		unbindService(mConnection);
		
		FriendController.setActiveFriend(null);"
15581,onCreateDialog,"	protected Dialog onCreateDialog(int id) {
		int message = -1;
		switch (id)
		{
		case MESSAGE_CANNOT_BE_SENT:"
15582,cancelNotification,"	public static void cancelNotification(Context ctx, int notifyId) {
		String ns = Context.NOTIFICATION_SERVICE;
		NotificationManager nMgr = (NotificationManager) ctx.getSystemService(ns);
		nMgr.cancel(notifyId);
	}"
15583,onKey,"			public boolean onKey(View v, int keyCode, KeyEvent event) 
			{
				if (keyCode == 66){
					sendMessageButton.performClick();"
15584,run,"										public void run() {
											
									        Toast.makeText(getApplicationContext(),R.string.message_cannot_be_sent, Toast.LENGTH_LONG).show();"
15585,run,"						public void run() {
							try {
								if (imService.sendMessage(imService.getUsername(), friend.userName, message.toString()) == null)"
15586,onClick,"			public void onClick(View arg0) {
				message = messageText.getText();
				if (message.length()>0) 
				{		"
15588,onServiceDisconnected,"        public void onServiceDisconnected(ComponentName className) {
        	imService = null;
            Toast.makeText(Messaging.this, R.string.local_service_stopped,
                    Toast.LENGTH_SHORT).show();"
15589,onServiceConnected,"		public void onServiceConnected(ComponentName className, IBinder service) {          
            imService = ((IMService.IMBinder)service).getService();
        }"
15592,checkMessage,"	public static MessageInfo checkMessage(String username)
	{
		MessageInfo result = null;
		if (messagesInfo != null) 
		{"
15595,onCreateOptionsMenu,"	public boolean onCreateOptionsMenu(Menu menu) {		
		boolean result = super.onCreateOptionsMenu(menu);
		
		 menu.add(0, SIGN_UP_ID, 0, R.string.sign_up);
		 menu.add(0, EXIT_APP_ID, 0, R.string.exit_application);
"
15596,onResume,"	protected void onResume() 
	{		
		bindService(new Intent(Login.this, IMService.class), mConnection , Context.BIND_AUTO_CREATE);
	    		"
15599,onCreateDialog,"    protected Dialog onCreateDialog(int id) 
    {    	
    	int message = -1;    	
    	switch (id) 
    	{"
15600,onClick,"			public void onClick(View arg0) 
			{					
				imService.exit();
				finish();"
15602,run,"									public void run() {	
										Toast.makeText(getApplicationContext(),R.string.make_sure_username_and_password_correct, Toast.LENGTH_LONG).show();
"
15603,run,"						public void run() {
							String result = null;
							try {
								result = imService.authenticateUser(usernameText.getText().toString(), passwordText.getText().toString());
							} catch (UnsupportedEncodingException e) {"
15604,onClick,"			public void onClick(View arg0) 
			{					
				if (imService == null) {"
15608,get,"	public Cursor get(String sender, String receiver) {

					

			SQLiteDatabase db = getWritableDatabase();"
15609,insert,"	public void insert(String sender, String receiver, String message){

		long rowId = -1;
"
15611,onCreate,"	public void onCreate(SQLiteDatabase db) {

		db.execSQL(TABLE_MESSAGE_CREATE);"
15612,updateData,"	public void updateData(MessageInfo[] messages, FriendInfo[] friends, FriendInfo[] unApprovedFriends, String userKey);
"
15614,exit,"	public void exit();
	public int getListeningPort();"
15615,stopListening,"	public void stopListening();
	public void exit();"
15616,startListening,"	public int startListening(int port);
	public void stopListening();"
15617,sendHttpRequest,"	public String sendHttpRequest(String params);
	public int startListening(int port);"
15618,sendFriendsReqsResponse,"	public String sendFriendsReqsResponse(String approvedFriendNames,
			String discardedFriendNames);"
15619,addNewFriendRequest,"	public String addNewFriendRequest(String friendUsername);
	public String sendFriendsReqsResponse(String approvedFriendNames,"
15620,signUpUser,"	public String signUpUser(String usernameText, String passwordText, String email);
	public String addNewFriendRequest(String friendUsername);"
15621,exit,"	public void exit();
	public String signUpUser(String usernameText, String passwordText, String email);"
15622,getLastRawFriendList,"	public String getLastRawFriendList();
	public void exit();"
15623,isUserAuthenticated,"	public boolean isUserAuthenticated();
	public String getLastRawFriendList();"
15624,isNetworkConnected,"	public boolean isNetworkConnected();
	public boolean isUserAuthenticated();"
15626,authenticateUser,"	public String authenticateUser(String usernameText, String passwordText) throws UnsupportedEncodingException; 
	public void messageReceived(String username, String message);"
15627,sendMessage,"	public String sendMessage(String username,String tousername, String message) throws UnsupportedEncodingException;
	public String authenticateUser(String usernameText, String passwordText) throws UnsupportedEncodingException; "
15628,getUsername,"	public String getUsername();
	public String sendMessage(String username,String tousername, String message) throws UnsupportedEncodingException;"
15629,onActivityResult,"	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		
		super.onActivityResult(requestCode, resultCode, data);"
15631,onCreateOptionsMenu,"	public boolean onCreateOptionsMenu(Menu menu) {		
		boolean result = super.onCreateOptionsMenu(menu);		

		menu.add(0, ADD_NEW_FRIEND_ID, 0, R.string.add_new_friend);
		
		menu.add(0, EXIT_APP_ID, 0, R.string.exit_application);		"
15632,onResume,"	protected void onResume() 
	{
			
		super.onResume();
		bindService(new Intent(FriendList.this, IMService.class), mConnection , Context.BIND_AUTO_CREATE);

		IntentFilter i = new IntentFilter();"
15633,onPause,"	protected void onPause() 
	{
		unregisterReceiver(messageReceiver);		
		unbindService(mConnection);
		super.onPause();"
15634,onListItemClick,"	protected void onListItemClick(ListView l, View v, int position, long id) {

		super.onListItemClick(l, v, position, id);		

		Intent i = new Intent(this, Messaging.class);
		FriendInfo friend = friendAdapter.getItem(position);
		i.putExtra(FriendInfo.USERNAME, friend.userName);
		i.putExtra(FriendInfo.PORT, friend.port);
		i.putExtra(FriendInfo.IP, friend.ip);		"
15635,updateData,"	public void updateData(FriendInfo[] friends, FriendInfo[] unApprovedFriends)
	{
		if (friends != null) {
			friendAdapter.setFriendList(friends);	"
15636,onCreate,"	protected void onCreate(Bundle savedInstanceState) 
	{		
		super.onCreate(savedInstanceState);

        setContentView(R.layout.list_screen);"
15637,onServiceDisconnected,"		public void onServiceDisconnected(ComponentName className) {          
			imService = null;
			Toast.makeText(FriendList.this, R.string.local_service_stopped,
					Toast.LENGTH_SHORT).show();"
15639,onReceive,"		public void onReceive(Context context, Intent intent) {
			
			Log.i(""Broadcast receiver "", ""received a message"");
			Bundle extra = intent.getExtras();
			if (extra != null)"
15651,checkFriend,"	public static FriendInfo checkFriend(String username, String userKey)
	{
		FriendInfo result = null;
		if (friendsInfo != null) 
		{"
15656,onCreateDialog,"    protected Dialog onCreateDialog(int id) {
        AlertDialog.Builder builder = new AlertDialog.Builder(AddFriend.this);
        if (id == TYPE_FRIEND_USERNAME) {
            builder.setTitle(R.string.add_new_friend)
                   .setMessage(R.string.type_friend_username)"
15657,onServiceDisconnected,"        public void onServiceDisconnected(ComponentName className) {
            if (mImService != null) {
                mImService = null;
            }"
15658,onServiceConnected,"        public void onServiceConnected(ComponentName className, IBinder service) {
            mImService = ((IMService.IMBinder)service).getService();
        }"
15659,onClick,"    public void onClick(View view) {
        if (view == mCancelButton) {
            finish();"
15660,onPause,"    protected void onPause() {
        super.onPause();

        if (mConnection != null) {"
15661,onResume,"    protected void onResume() {
        super.onResume();

        Intent intent = new Intent(this, IMService.class);
        if (mConnection != null) {"
15664,insertAfter,"        public void insertAfter(@NonNull ChainedRef candidate) {
            lock.lock();
            try {
                if (this.next != null) {"
15665,remove,"        public WeakRunnable remove() {
            lock.lock();
            try {
                if (prev != null) {
                    prev.next = next;"
15666,run,"        public void run() {
            final Runnable delegate = mDelegate.get();
            final ChainedRef reference = mReference.get();
            if (reference != null) {
                reference.remove();
            }"
15670,hasMessages,"    public final boolean hasMessages(int what, Object object) {
        return mExec.hasMessages(what, object);
    }"
15671,hasMessages,"    public final boolean hasMessages(int what) {
        return mExec.hasMessages(what);
    }"
15672,removeCallbacksAndMessages,"    public final void removeCallbacksAndMessages(Object token) {
        mExec.removeCallbacksAndMessages(token);
    }"
15673,removeMessages,"    public final void removeMessages(int what, Object object) {
        mExec.removeMessages(what, object);
    }"
15674,removeMessages,"    public final void removeMessages(int what) {
        mExec.removeMessages(what);
    }"
15675,sendMessageAtFrontOfQueue,"    public final boolean sendMessageAtFrontOfQueue(Message msg) {
        return mExec.sendMessageAtFrontOfQueue(msg);
    }"
15676,sendMessageAtTime,"    public boolean sendMessageAtTime(Message msg, long uptimeMillis) {
        return mExec.sendMessageAtTime(msg, uptimeMillis);
    }"
15677,sendMessageDelayed,"    public final boolean sendMessageDelayed(Message msg, long delayMillis) {
        return mExec.sendMessageDelayed(msg, delayMillis);
    }"
15678,sendEmptyMessageAtTime,"    public final boolean sendEmptyMessageAtTime(int what, long uptimeMillis) {
        return mExec.sendEmptyMessageAtTime(what, uptimeMillis);
    }"
15679,sendEmptyMessageDelayed,"    public final boolean sendEmptyMessageDelayed(int what, long delayMillis) {
        return mExec.sendEmptyMessageDelayed(what, delayMillis);
    }"
15680,sendEmptyMessage,"    public final boolean sendEmptyMessage(int what) {
        return mExec.sendEmptyMessage(what);
    }"
15681,sendMessage,"    public final boolean sendMessage(Message msg) {
        return mExec.sendMessage(msg);
    }"
15682,removeCallbacks,"    public final void removeCallbacks(Runnable r, Object token) {
        final WeakRunnable runnable = mRunnables.remove(r);
        if (runnable != null) {
            mExec.removeCallbacks(runnable, token);"
15683,removeCallbacks,"    public final void removeCallbacks(Runnable r) {
        final WeakRunnable runnable = mRunnables.remove(r);
        if (runnable != null) {
            mExec.removeCallbacks(runnable);"
15684,postAtFrontOfQueue,"    public final boolean postAtFrontOfQueue(Runnable r) {
        return mExec.postAtFrontOfQueue(wrapRunnable(r));
    }"
15685,postDelayed,"    public final boolean postDelayed(Runnable r, long delayMillis) {
        return mExec.postDelayed(wrapRunnable(r), delayMillis);
    }"
15686,postAtTime,"    public final boolean postAtTime(Runnable r, Object token, long uptimeMillis) {
        return mExec.postAtTime(wrapRunnable(r), token, uptimeMillis);
    }"
15687,postAtTime,"    public final boolean postAtTime(@NonNull Runnable r, long uptimeMillis) {
        return mExec.postAtTime(wrapRunnable(r), uptimeMillis);
    }"
15688,post,"    public final boolean post(@NonNull Runnable r) {
        return mExec.post(wrapRunnable(r));
    }"
15690,animateOut,"    abstract void animateOut(long duration, AnimatorListener animatorListener);
"
15691,animateIn,"    abstract void animateIn(long duration);
"
15695,writeToParcel,"		public void writeToParcel(Parcel dest, int flags) {
			super.writeToParcel(dest, flags);
			dest.writeString(message);
		}"
15696,onRestoreInstanceState,"	public void onRestoreInstanceState(Parcelable state) {
		if (!(state instanceof SavedState)) {
			super.onRestoreInstanceState(state);
			return;
		}
"
15697,onSaveInstanceState,"	public Parcelable onSaveInstanceState() {
		Parcelable superState = super.onSaveInstanceState();
		SavedState ss = new SavedState(superState);
		ss.message = mMessage.getText().toString();
		return ss;
	}"
15702,onFinishInflate,"	protected void onFinishInflate() {
		super.onFinishInflate();
		
		mMessage = (TextView) findViewById(R.id.message);
		mButton = (TextView) findViewById(R.id.button);"
15703,show,"        public void show(boolean shouldAnimate) {
            create().show(shouldAnimate);
        }"
15704,show,"        public void show() {
            show(true);
        }"
15718,safelyNotifyOnUndo,"    protected void safelyNotifyOnUndo() {
        if (mUndoListener != null) {
            mUndoListener.onUndo(mUndoToken);"
15719,safelyNotifyOnHide,"    protected void safelyNotifyOnHide() {
        if (mUndoListener != null) {
            mUndoListener.onHide();"
15720,onUndo,"    protected void onUndo() {
        hide(true);
        safelyNotifyOnUndo();
    }"
15721,onHide,"    protected void onHide() {
        hide(true);
        safelyNotifyOnHide();
        mUndoListener = null;
    }"
15722,onAnimationEnd,"            public void onAnimationEnd() {
                mView.setVisibility(View.GONE);
                mUndoMessage = null;
                mUndoToken = null;
            }"
15723,animateOut,"    protected void animateOut() {
        mViewCompat.animateOut(mAnimationDuration, new ViewCompat.AnimatorListener() {
            @Override"
15724,animateIn,"    protected void animateIn() {
        mViewCompat.animateIn(mAnimationDuration);
    }"
15725,isVisible,"    public boolean isVisible() {
        return mView.getVisibility() == View.VISIBLE;
    }"
15726,hide,"    public void hide(boolean shouldAnimate) {
        mHandler.removeCallbacks(mHideRunnable);

        if (shouldAnimate) {"
15728,removeMargins,"    private static void removeMargins(View view) {
        ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) view.getLayoutParams();
        layoutParams.leftMargin = layoutParams.topMargin = layoutParams.rightMargin = layoutParams.bottomMargin = 0;
        view.setLayoutParams(layoutParams);
    }"
15729,isAlignBottomPossible,"    private boolean isAlignBottomPossible() {
        return mContext.getResources().getBoolean(R.bool.is_align_bottom_possible);
    }"
15730,isLollipopStyle,"    private boolean isLollipopStyle(Style style) {
        return style == Style.LOLLIPOP || (style == Style.DEFAULT && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP);
    }"
15743,onClick,"        public void onClick(View v) {
            onUndo();
        }"
15744,run,"        public void run() {
            onHide();
        }"
15745,onUndo,"        void onUndo(Parcelable token);
    }"
15748,onMeasure,"	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		int measuredWidth = MeasureSpec.getSize(widthMeasureSpec);
		if (mMaxWidth > 0 && mMaxWidth < measuredWidth) {
			int measureMode = MeasureSpec.getMode(widthMeasureSpec);
			widthMeasureSpec = MeasureSpec.makeMeasureSpec(mMaxWidth, measureMode);"
15749,init,"	private void init(AttributeSet attrs) {
		if (attrs != null) {
			TypedArray a = getContext().obtainStyledAttributes(attrs, new int[] { android.R.attr.maxWidth });"
15754,isDrawerMoving,"    public boolean isDrawerMoving() {
        return mDrawerMoving;
    }"
15755,isDrawerOpened,"    public boolean isDrawerOpened() {
        return mDrawerOpened;
    }"
15756,closeDrawer,"    public void closeDrawer() {
        closeDrawer(true);
    }"
15757,run,"                            public void run() {
                                mDrawerCallbacks.onDrawerClosed();
                            }"
15758,run,"            public void run() {
                final boolean scrolling = mScroller.computeScrollOffset();
                mDecorContent.offsetLeftAndRight(mScroller.getCurrX() - mDecorOffsetX);
                mDecorOffsetX = mScroller.getCurrX();
                postInvalidate();

                if (!scrolling) {"
15759,closeDrawer,"    public void closeDrawer(final boolean animate) {
        if(mDrawerMoving){
            mScrollerHandler.removeCallbacks(mDrawCloseRunnable);
            mScrollerHandler.removeCallbacks(mDrawOpenRunnable);
        } else if (!mDrawerOpened) {
            return;
        }
"
15760,openDrawer,"    public void openDrawer() {
        openDrawer(true);
    }"
15761,run,"                            public void run() {
                                mDrawerCallbacks.onDrawerOpened();
                            }"
15763,openDrawer,"    public void openDrawer(final boolean animate) {
        if(mDrawerMoving){
            mScrollerHandler.removeCallbacks(mDrawCloseRunnable);
            mScrollerHandler.removeCallbacks(mDrawOpenRunnable);
        }

        if (mDrawerOpened) {
            return;
        }
"
15764,toggleDrawer,"    public void toggleDrawer() {
        toggleDrawer(true);
    }"
15765,toggleDrawer,"    public void toggleDrawer(final boolean animate) {
        if (!mDrawerOpened) {
            openDrawer(animate);"
15766,isDrawerEnabled,"    public boolean isDrawerEnabled() {
        return mDrawerEnabled;
    }"
15774,dispatchDraw,"    protected void dispatchDraw(Canvas canvas) {
        super.dispatchDraw(canvas);

        if (mDrawerOpened || mDrawerMoving) {"
15778,onClick,"            public void onClick(View view) {
            }"
15781,onDrawerClosed,"        public void onDrawerClosed();
    }"
15785,onResume,"    protected void onResume() {
        super.onResume();

        Drawable drawable = mCpuAniImageView.getDrawable();
        if (drawable instanceof Animatable) {
            ((Animatable) drawable).start();
        }
"
15786,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        mStatusTextView = (TextView) findViewById(R.id.status_text_view);"
15788,onBindViewHolder,"        public void onBindViewHolder(ViewHolder holder, int position) {
            holder.mTextView.setText(sStringList[position]);
        }"
15789,onCreateViewHolder,"        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            LayoutInflater inflater = LayoutInflater.from(parent.getContext());
            View view = inflater.inflate(R.layout.list_item, null);
            return new ViewHolder(view);
        }"
15790,show,"    public static void show(Context context, int dayNightMode) {
        new BottomSheetDialogView(context, dayNightMode);
    }"
15794,show,"    public static void show(FragmentActivity activity) {
        new JayneHatDialogFragment().show(activity.getSupportFragmentManager(), TAG);
    }"
15797,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        super.onCreateOptionsMenu(menu);
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main, menu);

        if (isDarkTheme()) {
            menu.findItem(R.id.theme_change).setTitle(""Use Light Theme"");"
15798,onPositiveButtonClicked,"    public void onPositiveButtonClicked(int resultCode, Date date) {
        String text = """";
        if (resultCode == REQUEST_DATE_PICKER) {
            text = ""Date "";
        } else if (resultCode == REQUEST_TIME_PICKER) {
            text = ""Time "";"
15799,onNegativeButtonClicked,"    public void onNegativeButtonClicked(int resultCode, Date date) {
        String text = """";
        if (resultCode == REQUEST_DATE_PICKER) {
            text = ""Date "";
        } else if (resultCode == REQUEST_TIME_PICKER) {
            text = ""Time "";"
15800,onNeutralButtonClicked,"    public void onNeutralButtonClicked(int requestCode) {
        if (requestCode == REQUEST_SIMPLE_DIALOG) {
            Toast.makeText(c, ""Neutral button clicked"", Toast.LENGTH_SHORT).show();"
15801,onNegativeButtonClicked,"    public void onNegativeButtonClicked(int requestCode) {
        if (requestCode == REQUEST_SIMPLE_DIALOG) {
            Toast.makeText(c, ""Negative button clicked"", Toast.LENGTH_SHORT).show();"
15802,onPositiveButtonClicked,"    public void onPositiveButtonClicked(int requestCode) {
        if (requestCode == REQUEST_SIMPLE_DIALOG) {
            Toast.makeText(c, ""Positive button clicked"", Toast.LENGTH_SHORT).show();"
15803,onCancelled,"    public void onCancelled(int requestCode) {
        switch (requestCode) {
            case REQUEST_SIMPLE_DIALOG:"
15804,onListItemsSelected,"    public void onListItemsSelected(CharSequence[] values, int[] selectedPositions, int requestCode) {
        if (requestCode == REQUEST_LIST_MULTIPLE) {
            StringBuilder sb = new StringBuilder();"
15805,onListItemSelected,"    public void onListItemSelected(CharSequence value, int number, int requestCode) {
        if (requestCode == REQUEST_LIST_SIMPLE || requestCode == REQUEST_LIST_SINGLE) {
            Toast.makeText(c, ""Selected: "" + value, Toast.LENGTH_SHORT).show();"
15806,onClick,"            public void onClick(View v) {
                DatePickerDialogFragment
                        .createBuilder(DemoActivity.this, getSupportFragmentManager())"
15807,onClick,"            public void onClick(View v) {
                TimePickerDialogFragment
                        .createBuilder(DemoActivity.this, getSupportFragmentManager())"
15808,onClick,"            public void onClick(View v) {
                JayneHatDialogFragment.show(c);
            }"
15809,onClick,"            public void onClick(View v) {
                ListDialogFragment
                        .createBuilder(c, getSupportFragmentManager())"
15812,onClick,"            public void onClick(View v) {
                ProgressDialogFragment.createBuilder(c, getSupportFragmentManager())
                        .setMessage(""Mal: I\'m just waiting to see if I pass out. Long story."")"
15813,onClick,"            public void onClick(View v) {
                SimpleDialogFragment.createBuilder(c, getSupportFragmentManager()).setMessage(""How will you decide?"")
                        .setPositiveButtonText(""Time for some thrillin' heroics!"").setNegativeButtonText(""Misbehave"")"
15814,onClick,"                    public void onClick(View v) {
                        SimpleDialogFragment.createBuilder(c, getSupportFragmentManager())
                                .setTitle(""Do you like this quote?"")"
15815,onClick,"            public void onClick(View v) {
                SimpleDialogFragment.createBuilder(c, getSupportFragmentManager())
                        .setTitle(""More Firefly quotes:"").setMessage"
15816,onClick,"            public void onClick(View v) {
                SimpleDialogFragment.createBuilder(c, getSupportFragmentManager())
                        .setMessage(""Love. Can know all the math in the \'verse but take a boat in the air that you don\'t "" +"
15818,onRestoreInstanceState,"        protected void onRestoreInstanceState(Parcelable state) {
            super.onRestoreInstanceState(StateSaver.restoreInstanceState(this, state));
        }"
15819,onSaveInstanceState,"        protected Parcelable onSaveInstanceState() {
            return StateSaver.saveInstanceState(this, super.onSaveInstanceState());
        }"
15820,onRestoreInstanceState,"    protected void onRestoreInstanceState(Parcelable state) {
        super.onRestoreInstanceState(StateSaver.restoreInstanceState(this, state));
    }"
15821,onSaveInstanceState,"    protected Parcelable onSaveInstanceState() {
        return StateSaver.saveInstanceState(this, super.onSaveInstanceState());
    }"
15830,newArray,"            public ParcelableImpl[] newArray(int size) {
                return new ParcelableImpl[size];
            }"
15831,createFromParcel,"            public ParcelableImpl createFromParcel(Parcel in) {
                return new ParcelableImpl(in);
            }"
15832,describeContents,"        public int describeContents() {
            return 0;
        }"
15833,writeToParcel,"        public void writeToParcel(Parcel dest, int flags) {
            dest.writeInt(mInt);
        }"
15834,hashCode,"        public int hashCode() {
            return mInt;
        }"
15835,equals,"        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            ParcelableImpl that = (ParcelableImpl) o;
"
15836,isB,"    public boolean isB() {
        return mInner2 == Inner.B && mParcelable2.mInt == 2 && mInnerList.get(0) == Inner.B && mParcelableList.get(0).mInt == 2;
    }"
15837,isA,"    public boolean isA() {
        return mInner2 == Inner.A && mParcelable2.mInt == 1 && mInnerList.get(0) == Inner.A && mParcelableList.get(0).mInt == 1;
    }"
15840,isValue,"    public boolean isValue(int value) {
        return mParcelableArrayImpl1[0].isValue(value) && mParcelableArrayImpl2[0].isValue(value) && mParcelableArrayImpl3[0].isValue(value);
    }"
15854,get,"        public Data get(@NonNull String key, @NonNull Bundle bundle) {
            if (bundle.containsKey(key + ""1"")) {
                Data data = new Data();"
15855,put,"        public void put(@NonNull String key, @NonNull Data value, @NonNull Bundle bundle) {
            bundle.putInt(key + ""1"", value.int1);
            bundle.putInt(key + ""2"", value.int2);
        }"
15860,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        StateSaver.restoreInstanceState(this, savedInstanceState);
    }"
15861,createSavedInstance,"    private <T> T createSavedInstance(Class<T> clazz) {
        try {
            T instance = clazz.newInstance();"
15880,testProperty,"    public void testProperty() {
        TestProperty object = createSavedInstance(TestProperty.class);
        object.setTest(5);

        StateSaver.restoreInstanceState(object, mBundle);
"
15881,testSimple,"    public void testSimple() {
        TestSimple object = createSavedInstance(TestSimple.class);
        object.field = 5;

        StateSaver.restoreInstanceState(object, mBundle);
"
15883,get,"    public List<String> get(@NonNull String key, @NonNull Bundle bundle) {
        return bundle.getStringArrayList(key);
    }"
15884,put,"    public void put(@NonNull String key, @NonNull List<String> value, @NonNull Bundle bundle) {
        ArrayList<String> arrayList = value instanceof ArrayList ? (ArrayList<String>) value : new ArrayList<>(value);
        bundle.putStringArrayList(key, arrayList);
    }"
15885,get,"    public List<? extends Parcelable> get(@NonNull String key, @NonNull Bundle bundle) {
        return bundle.getParcelableArrayList(key);
    }"
15886,put,"    public void put(@NonNull String key, @NonNull List<? extends Parcelable> value, @NonNull Bundle bundle) {
        ArrayList<? extends Parcelable> arrayList = value instanceof ArrayList ? (ArrayList<? extends Parcelable>) value : new ArrayList<>(value);
        bundle.putParcelableArrayList(key, arrayList);
    }"
15887,get,"    public List<Integer> get(@NonNull String key, @NonNull Bundle bundle) {
        return bundle.getIntegerArrayList(key);
    }"
15888,put,"    public void put(@NonNull String key, @NonNull List<Integer> value, @NonNull Bundle bundle) {
        ArrayList<Integer> arrayList = value instanceof ArrayList ? (ArrayList<Integer>) value : new ArrayList<>(value);
        bundle.putIntegerArrayList(key, arrayList);
    }"
15889,get,"    public List<CharSequence> get(@NonNull String key, @NonNull Bundle bundle) {
        return bundle.getCharSequenceArrayList(key);
    }"
15890,put,"    public void put(@NonNull String key, @NonNull List<CharSequence> value, @NonNull Bundle bundle) {
        ArrayList<CharSequence> arrayList = value instanceof ArrayList ? (ArrayList<CharSequence>) value : new ArrayList<>(value);
        bundle.putCharSequenceArrayList(key, arrayList);
    }"
15893,directionChange,"	private void directionChange(){
		switch(direction){
		case Left:"
15894,onLayout,"	protected void onLayout(boolean changed, int l, int t, int r, int b) {
		super.onLayout(changed, l, t, r, b);
		View parent = (View) getParent();
		int halfParentW = (int) (parent.getWidth()*0.5);
		int center = (int) (l + (this.getWidth()*0.5));
		if(center<=halfParentW){
			direction = Direction.Left;
		}"
15895,onEditorAction,"	public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
		setStatus(Status.Normal);
		return true;
	}"
15897,initEvents,"	protected void initEvents(){
		etPictureTagLabel.setOnEditorActionListener(this);
	}"
15898,init,"	protected void init(){
		imm = (InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);
		directionChange();
	}"
15899,initViews,"	protected void initViews(){
		LayoutInflater.from(context).inflate(R.layout.picturetagview, this,true);
		tvPictureTagLabel = (TextView) findViewById(R.id.tvPictureTagLabel);
		etPictureTagLabel = (EditText) findViewById(R.id.etPictureTagLabel);
		loTag = findViewById(R.id.loTag);
	}"
15904,init,"	private void init(){
		this.setOnTouchListener(this);
	}"
15905,onCreate,"	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		this.setContentView(R.layout.act_main);
	}"
15906,onClick,"        public void onClick(View view) {
            startActivity(new Intent(view.getContext(), MainActivity.class));
            finish();
        }"
15907,onSkipToPrevious,"        public void onSkipToPrevious() {
            super.onSkipToPrevious();
            movieView.startVideo();
            if (indexInPlaylist > 0) {
                indexInPlaylist--;"
15908,onSkipToNext,"        public void onSkipToNext() {
            super.onSkipToNext();
            movieView.startVideo();
            if (indexInPlaylist < PLAYLIST_SIZE) {
                indexInPlaylist++;"
15909,onPause,"        public void onPause() {
            super.onPause();
            movieView.pause();
        }"
15910,onPlay,"        public void onPlay() {
            super.onPlay();
            movieView.play();
        }"
15911,updatePlaybackState,"    private void updatePlaybackState(
            @PlaybackStateCompat.State int state, long playbackActions, int position, int mediaId) {
        PlaybackStateCompat.Builder builder =
                new PlaybackStateCompat.Builder()"
15912,updatePlaybackState,"    private void updatePlaybackState(
            @PlaybackStateCompat.State int state, int position, int mediaId) {
        long actions = mSession.getController().getPlaybackState().getActions();
        updatePlaybackState(state, actions, position, mediaId);"
15913,adjustFullScreen,"    private void adjustFullScreen(Configuration config) {
        final View decorView = getWindow().getDecorView();
        if (config.orientation == Configuration.ORIENTATION_LANDSCAPE) {
            decorView.setSystemUiVisibility("
15915,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(
            boolean isInPictureInPictureMode, Configuration configuration) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode, configuration);
        if (!isInPictureInPictureMode) {"
15916,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        if (hasFocus) {
            adjustFullScreen(getResources().getConfiguration());"
15917,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        adjustFullScreen(newConfig);
    }"
15921,onStart,"    protected void onStart() {
        super.onStart();
        initializeMediaSession();
    }"
15927,onClick,"        public void onClick(View view) {
            startActivity(new Intent(view.getContext(), MediaSessionPlaybackActivity.class));
            finish();
        }"
15931,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(
            boolean isInPictureInPictureMode, Configuration configuration) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode, configuration);
        if (isInPictureInPictureMode) {"
15942,reset,"    void reset() {
        mLock.lock();
        mWait = false;
        mNotify = false;
        mLock.unlock();
    }"
15943,doWait,"    void doWait() {
        mLock.lock();
        boolean unlock = false;
        try {
            if (mNotify) {"
15944,doNotify,"    void doNotify() {
        mLock.lock();
        try {
            mNotify = true;"
15947,run,"            public void run() {
                try {
                    v.clearFocus();"
15949,removeEmpty,"    private static void removeEmpty() {
        Reference<? extends ReusableVec> ref;
        while ((ref = mQueue.poll()) != null) {
            mCache.remove(ref);"
15951,get,"    public static ReusableVec get(int length) {
        try {
            sLock.lock();"
15953,toString,"    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (float f : mData) {
            sb.append(String.format(""%f,"", f));
        }
        if (sb.length() > 0) {"
15956,value,"    public float value(int index) {
        return mData[index];
    }"
15959,height,"    public float height() {
        return mData[1];
    }"
15960,width,"    public float width() {
        return mData[0];
    }"
15962,a,"    public void a(float a) {
        mData[3] = a;
        mUpdateTimes.addAndGet(1);
    }"
15963,b,"    public void b(float b) {
        mData[2] = b;
        mUpdateTimes.addAndGet(1);
    }"
15964,g,"    public void g(float g) {
        mData[1] = g;
        mUpdateTimes.addAndGet(1);
    }"
15965,r,"    public void r(float r) {
        mData[0] = r;
        mUpdateTimes.addAndGet(1);
    }"
15966,a,"    public float a() {
        return mData[3];
    }"
15967,b,"    public float b() {
        return mData[2];
    }"
15968,g,"    public float g() {
        return mData[1];
    }"
15969,r,"    public float r() {
        return mData[0];
    }"
15973,z,"    public void z(float z) {
        mData[2] = z;
        mUpdateTimes.addAndGet(1);
    }"
15974,y,"    public void y(float y) {
        mData[1] = y;
        mUpdateTimes.addAndGet(1);
    }"
15975,x,"    public void x(float x) {
        mData[0] = x;
        mUpdateTimes.addAndGet(1);
    }"
15976,z,"    public float z() {
        return mData[2];
    }"
15977,y,"    public float y() {
        return mData[1];
    }"
15978,x,"    public float x() {
        return mData[0];
    }"
15979,sub,"    public void sub(float x, float y, float z) {
        add(-x, -y, -z);
    }"
15981,add,"    public void add(float x, float y, float z) {
        mData[0] = x() + x;
        mData[1] = y() + y;
        mData[2] = z() + z;
        mUpdateTimes.addAndGet(1);
    }"
15987,equals,"    public boolean equals(Object obj) {
        if (obj == null || !(obj instanceof Texture)) {
            return false;
        }
        Texture t = (Texture) obj;
        if (mBmp == null) {"
15988,prepareTexCoord,"    void prepareTexCoord() {
        try {
            mBufferLock.lock();"
15989,drawModel,"    protected void drawModel() {
        if (mDrawGrid) {
            GLES20.glDrawElements(GLES20.GL_LINE_STRIP, mIndices.length, GLES20.GL_UNSIGNED_SHORT, mIndicesBuffer);"
15990,runOnDraw,"    void runOnDraw() {
        if (!mIsMulti) {
            super.runOnDraw();"
16002,drawGrid,"    void drawGrid(boolean drawGrid) {
        mDrawGrid = drawGrid;
    }"
16003,update,"    void update(int colCount, int rowCount, float width, float height) {
        mColLineCount = colCount;
        mRowLineCount = rowCount;
        mWidth = width;
        mHeight = height;
        init();
    }"
16006,unlock,"    void unlock() {
        t.set(null);
    }"
16007,lock,"    void lock() {
        while (!t.compareAndSet(null, this));
    }"
16008,runOnDrawSize,"    int runOnDrawSize() {
        return mRunOnDraw.size();
    }"
16009,clearRunOnDraw,"    void clearRunOnDraw() {
        mRunOnDraw.clear();
    }"
16010,runOnDraw,"    void runOnDraw() {
        Runnable r;
        while ((r = mRunOnDraw.poll()) != null) {
            r.run();"
16011,addRunOnDraw,"    void addRunOnDraw(Runnable runnable) {
        mRunOnDraw.offer(runnable);
    }"
16012,free,"    public void free() {
        mIsFree = true;
    }"
16013,use,"    void use() {
        mIsFree = false;
    }"
16014,isFree,"    boolean isFree() {
        return mIsFree;
    }"
16015,isGLThread,"    boolean isGLThread() {
        return Thread.currentThread().getId() == mGLThreadId;
    }"
16016,isDeleted,"    boolean isDeleted() {
        return mDeleted;
    }"
16017,delete,"    void delete() {
        if (isGLThread()) {
            GLES20.glDeleteProgram(handle);
            GLUtil.checkGlError(""glDeleteProgram"");"
16018,use,"    void use() {
        GLES20.glUseProgram(handle);
        GLUtil.checkGlError(""glUseProgram"");
    }"
16019,restore,"    public void restore() {
        super.restore();
        mPosition.refresh();
    }"
16020,runOnDraw,"    protected void runOnDraw() {
        super.runOnDraw();
        mPosition.runOnDraw();
    }"
16026,scaleM,"    static void scaleM(float[] matrixData, float x, float y, float z) {
        Matrix.scaleM(matrixData, 0, x, y, z);
    }"
16027,translateM,"    static void translateM(float[] matrixData, float x, float y, float z) {
        Matrix.translateM(matrixData, 0, x, y, z);
    }"
16028,rotateM,"    static void rotateM(float[] matrixData, float x, float y, float z, float a) {
        Matrix.rotateM(matrixData, 0, a, x, y, z);
    }"
16029,reset,"    static void reset(float[] matrixData) {
        Matrix.setIdentityM(matrixData, 0);
    }"
16030,updateMVPMatrix,"    private void updateMVPMatrix() {
        Matrix.multiplyMM(mMVPMatrix.value(), 0, mVMatrix, 0, mModelMatrix.value(), 0);
        Matrix.multiplyMM(mMVPMatrix.value(), 0, mPMatrix, 0, mMVPMatrix.value(), 0);
        mMVPMatrix.refresh();
    }"
16031,runOnDraw,"    protected void runOnDraw() {
        super.runOnDraw();
        mMVPMatrix.runOnDraw();
        mModelMatrix.runOnDraw();
        mCameraLocation.runOnDraw();
    }"
16032,frustumM,"    void frustumM(float width, float height, float near, float far) {
        Matrix.frustumM(mPMatrix, 0, -width / 2, width / 2, -height / 2, height / 2, near, far);
        updateMVPMatrix();
    }"
16038,activeAllGroup,"    private static void activeAllGroup() {
        try {
            sLock.lock();"
16042,needUpdate,"        boolean needUpdate();
        void run();"
16043,isStopped,"        boolean isStopped();
        boolean needUpdate();"
16044,run,"    private boolean run() {
        try {
            mLock.lock();"
16045,update,"    void update() {
        mLastUpdateTime = System.currentTimeMillis();
        mWaitNotify.doNotify();
    }"
16047,start,"    void start() {
        update();
        if (mIsRunning) {
            return;
        }
        mIsRunning = true;"
16048,addRunnable,"    void addRunnable(MagicUpdaterRunnable runnable) {
        try {
            mLock.lock();"
16049,doStartedAndStopped,"    static void doStartedAndStopped(MagicUpdater updater) {
        if (updater == null) {
            return;
        }
        if (updater.isFirstTimeCheckStarted()) {"
16050,prepareUpdater,"    static boolean prepareUpdater(MagicUpdater updater) {
        if (updater == null) {
            return true;
        }
        if (updater.isReadyToUpdate()) {"
16051,run,"                public void run() {
                    for (MagicUpdaterListener l : mListeners) {
                        if (l != null) {"
16052,doStarted,"    private void doStarted() {
        notifyChanged();
        didStart();
        if (mListeners.size() > 0) {
            mHandler.post(new Runnable() {"
16053,doWillStart,"    private void doWillStart() {
        mWaitNotify.reset();
        notifyChanged();
        willStart();
    }"
16055,doStopped,"    private void doStopped() {
        didStop();
        if (mListeners.size() > 0) {
            mHandler.post(new Runnable() {"
16056,run,"    private void run() {
        setState(STATE_RUNNING);
    }"
16057,waitUpdate,"    private void waitUpdate() {
        mWaitNotify.doWait();
    }"
16062,stop,"    public void stop() {
        setState(STATE_STOPPED);
    }"
16063,run,"            public void run() {
                mStateLock.lock();
                try {
                    mUpdaterGroup.addRunnable(mRunnable);
                    if (isStopped()) {"
16064,start,"    void start() {
        mIsFirstTimeCheckStarted = true;
        mIsFirstTimeCheckStopped = true;
        mStateLock.lock();
        try {
            if (mState != STATE_NONE && mState != STATE_STOPPED) {
                return;"
16067,isFirstTimeCheckStopped,"    private boolean isFirstTimeCheckStopped() {
        if (mIsFirstTimeCheckStopped) {
            mIsFirstTimeCheckStopped = false;
            return true;"
16068,isFirstTimeCheckStarted,"    private boolean isFirstTimeCheckStarted() {
        if (mIsFirstTimeCheckStarted) {
            mIsFirstTimeCheckStarted = false;
            return true;"
16069,isStopped,"    boolean isStopped() {
        return mState == STATE_STOPPED;
    }"
16070,isRunning,"    private boolean isRunning() {
        return mState == STATE_RUNNING;
    }"
16071,isReadyToUpdate,"    private boolean isReadyToUpdate() {
        return mState == STATE_READY;
    }"
16072,isStarting,"    private boolean isStarting() {
        return mState == STATE_STARTING;
    }"
16073,notifyChanged,"    protected void notifyChanged() {
        mNeedUpdate.set(true);
        mUpdaterGroup.update();
    }"
16074,removeListener,"    public void removeListener(MagicUpdaterListener listener) {
        if (mListeners.contains(listener)) {
            mListeners.remove(listener);"
16075,addListener,"    public void addListener(MagicUpdaterListener listener) {
        if (!mListeners.contains(listener)) {
            mListeners.add(listener);"
16077,run,"        public void run() {
            if (isRunning()) {
                mNeedUpdate.set(false);"
16078,needUpdate,"        public boolean needUpdate() {
            return mNeedUpdate.get();
        }"
16079,isStopped,"        public boolean isStopped() {
            return MagicUpdater.this.isStopped();
        }"
16080,unlock,"    public static void unlock() {
        sLock.unlock();
    }"
16081,lock,"    public static void lock() {
        sLock.lock();
    }"
16082,run,"                public void run() {
                    if (!mHasNewScene) {
                        MagicSurfaceView.super.setVisibility(visibility);"
16084,onPause,"    public void onPause() {
        super.onPause();
        mHasNewScene = false;
    }"
16085,onDestroy,"    public void onDestroy() {
        onPause();
        release();
        mRenderer = null;
    }"
16086,release,"    public void release() {
        mRenderer.release();
    }"
16089,surfaceDestroyed,"            public void surfaceDestroyed(SurfaceHolder holder) {
                mRenderer.onDestroy();
                mHasNewScene = false;
            }"
16090,surfaceChanged,"            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
            }"
16092,surfaceCreated,"            public void surfaceCreated(SurfaceHolder holder) {
                postDelayed(new Runnable() {
                    @Override"
16094,updateEnd,"    protected abstract void updateEnd(MagicSurface surface);
"
16095,updatePosition,"    protected abstract void updatePosition(MagicSurface surface, int r, int c, Vec outPos, Vec outColor);
"
16096,updateBegin,"    protected abstract void updateBegin(MagicSurface surface);
"
16097,didStop,"    protected abstract void didStop(MagicSurface surface);
"
16098,didStart,"    protected abstract void didStart(MagicSurface surface);
"
16099,willStart,"    protected abstract void willStart(MagicSurface surface);
"
16101,didStop,"    void didStop() {
        didStop(mSurface);
    }"
16102,didStart,"    void didStart() {
        didStart(mSurface);
    }"
16103,willStart,"    void willStart() {
        mSurface.getModel().updatePositionUseOffset();
        willStart(mSurface);
    }"
16104,updateMatrix,"    protected abstract void updateMatrix(MagicSurface surface, Vec offset, float[] matrix);
}"
16110,willStart,"    void willStart() {
        willStart(mSurface);
    }"
16111,updateMatrix,"    void updateMatrix(float[] matrix) {
        ReusableVec offset = VecPool.get(3);
        try {
            mSurface.getModel().getOffset(offset);"
16113,doUpdaterStartedAndStopped,"    protected void doUpdaterStartedAndStopped() {
        MagicUpdater.doStartedAndStopped(mModelUpdater);
        MagicUpdater.doStartedAndStopped(mMatrixUpdater);
    }"
16114,drawModel,"    protected void drawModel(MatrixManager matrixManager) {
        mModel.draw();
    }"
16115,runOnDraw,"    protected boolean runOnDraw(MatrixManager matrixManager) {
        if (mModelUpdater != null) {
            mModelUpdater.runOnDraw();
        }
        if (mMatrixUpdater != null) {
            mMatrixUpdater.runOnDraw();"
16116,stop,"    void stop() {
        if (mModelUpdater != null) {
            mModelUpdater.stop();
        }"
16117,release,"    synchronized void release() {
        super.release();
        mModel = null;
    }"
16118,restore,"    void restore() {
        if (mModelUpdater != null && mModelUpdater.isStopped()) {
            mModelUpdater.start();
        }
        if (mMatrixUpdater != null && mMatrixUpdater.isStopped()) {"
16119,updateModel,"    protected void updateModel(Vec size, Vec offset) {
        mModel = new SurfaceModel(mColLineCount, mRowLineCount, size.width(), size.height());
        mModel.drawGrid(mDrawGrid);
        mModel.setOffset(offset.x(), offset.y(), offset.z());
    }"
16121,drawGrid,"    public MagicSurface drawGrid(boolean drawGrid) {
        mDrawGrid = drawGrid;
        if (mModel != null) {
            mModel.drawGrid(mDrawGrid);
        }"
16126,update,"    protected abstract void update(MagicScene scene, Vec outAmbientColor);
}"
16127,didStop,"    protected abstract void didStop(MagicScene scene);
"
16128,didStart,"    protected abstract void didStart(MagicScene scene);
"
16129,willStart,"    protected abstract void willStart(MagicScene scene);
"
16130,update,"    void update() {
        try {
            update(mScene, mScene.mAmbientColor.value());"
16131,didStop,"    void didStop() {
        didStop(mScene);
    }"
16132,didStart,"    void didStart() {
        didStart(mScene);
    }"
16133,willStart,"    void willStart() {
        willStart(mScene);
    }"
16134,append,"    private void append(StringBuilder sb, String format, Object... params) {
        sb.append(String.format(Locale.US, format, params));
    }"
16139,createVertexShaderMain,"    private String createVertexShaderMain() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < mScene.mSurfaces.size(); ++i) {
            if (i > 0) {
                sb.append("" else "");"
16140,createVertexShaderParams,"    private String createVertexShaderParams() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < mScene.mSurfaces.size(); ++i) {
            append(sb, ""uniform bool u_surface%d_;"", i);
            append(sb, ""uniform float u_s%d_shininess;"", i);
            sb.append("""");"
16142,build,"    public MagicScene build() {
        final String v = buildVertexShaderSource();
        final String f = buildFragmentShaderSource();
        mScene.init(v, f);
        return mScene;
    }"
16144,ambientColor,"    public MagicSceneBuilder ambientColor(int color) {
        mScene.setAmbientColor(color);
        return this;
    }"
16145,addSurfaces,"    public MagicSceneBuilder addSurfaces(MagicBaseSurface... objects) {
        if (objects == null) {
            return this;
        }
        for (MagicBaseSurface s : objects) {"
16146,addLights,"    public MagicSceneBuilder addLights(Light... lights) {
        if (lights == null) {
            return this;
        }
        mScene.mLights.addAll(Arrays.asList(lights));"
16147,updateCamera,"    private void updateCamera() {
        mMatrixManager.setLookAtM(
                mCameraPosition.x(), mCameraPosition.y(), mCameraPosition.z(),"
16149,initTexture,"    private void initTexture(Texture texture, int id) {
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, id);
        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, texture.mBmp, 0);
        texture.mId = id;
        GLUtil.initTexParams();
    }"
16150,draw,"    void draw() {
        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
        if (mSurfaces != null) {
            for (MagicBaseSurface<?> s : mSurfaces) {
                s.draw(mMatrixManager);"
16153,release,"    void release() {
        stop();
        for (MagicBaseSurface<?> s : mSurfaces) {
            s.release();"
16154,stop,"    void stop() {
        if (mSurfaces != null) {
            for (MagicBaseSurface<?> s : mSurfaces) {
                s.stop();
            }"
16155,restore,"    void restore() {
        init(mVertexShader, mFragmentShader);
        init();
        mAmbientColor.refresh();
        if (mLights != null) {
            for (Light l : mLights) {
                l.restore();"
16156,runOnDraw,"    protected void runOnDraw() {
        super.runOnDraw();
        init();
        if (isReady()) {
            if (mUpdater != null) {"
16157,init,"    private void init() {
        if (!mInited && isPrepared()) {
            mProgram = new Program(mVertexShader, mFragmentShader);"
16158,run,"            public void run() {
                prepare();
            }"
16159,init,"    void init(String vertexShader, String fragmentShader) {
        mVertexShader = vertexShader;
        mFragmentShader = fragmentShader;
        mInited = false;
        addRunOnDraw(new Runnable() {
            @Override"
16160,isPrepared,"    private boolean isPrepared() {
        if (!mIsPrepared) {
            boolean prepared = true;
            for (MagicBaseSurface<?> s : mSurfaces) {
                if (!s.isPrepared()) {"
16161,prepare,"    private boolean prepare() {
        if (isPrepared()) {
            return true;
        }
        if (mIsPreparing) {
            return false;
        }"
16162,isReady,"    boolean isReady() {
        return isPrepared() && mInited;
    }"
16173,releaseScene,"    private void releaseScene() {
        if (mScene != null) {
            mScene.release();"
16174,release,"    void release() {
        mReleased = true;
        mNeedRestore = false;
        if (mOnDestroyed) {
            releaseScene();"
16175,onDestroy,"    void onDestroy() {
        mOnDestroyed = true;
        if (mScene != null) {
            mScene.stop();
        }"
16176,onDrawFrame,"    public void onDrawFrame(GL10 gl) {
        try {
            MagicSurfaceViewLock.lock();"
16177,runOnDraw,"    private void runOnDraw() {
        if (mScene != null) {
            mScene.runOnDraw();"
16178,onSurfaceChanged,"    public void onSurfaceChanged(GL10 gl, int width, int height) {
        if (mScene != null && mScene.isReady()) {
            mScene.updateFrustum();"
16179,onSurfaceCreated,"    public void onSurfaceCreated(GL10 gl, EGLConfig config) {
        mReleased = false;
        mOnDestroyed = false;
    }"
16181,render,"    void render(final MagicScene scene) {
        if (mScene != null) {
            mScene.release();
        }"
16182,updateEnd,"    protected abstract void updateEnd(MagicMultiSurface surface);
}"
16183,update,"    protected abstract void update(MagicMultiSurface surface, int r, int c, float[] matrix, Vec offset, Vec color);
"
16184,updateBegin,"    protected abstract void updateBegin(MagicMultiSurface surface);
"
16185,didStop,"    protected abstract void didStop(MagicMultiSurface surface);
"
16186,didStart,"    protected abstract void didStart(MagicMultiSurface surface);
"
16187,willStart,"    protected abstract void willStart(MagicMultiSurface surface);
"
16188,scale,"    protected void scale(float[] matrix, Vec vec) {
        MatrixManager.scaleM(matrix, vec.x(), vec.y(), vec.z());
    }"
16189,translate,"    protected void translate(float[] matrix, Vec vec) {
        MatrixManager.translateM(matrix, vec.x(), vec.y(), vec.z());
    }"
16190,rotate,"    protected void rotate(float[] matrix, Vec vec, float angle) {
        MatrixManager.rotateM(matrix, vec.x(), vec.y(), vec.z(), angle);
    }"
16191,reset,"    protected void reset(float[] matrix) {
        MatrixManager.reset(matrix);
    }"
16192,unlock,"    void unlock() {
        mLock.unlock();
    }"
16193,lock,"    void lock() {
        mLock.lock();
    }"
16198,doUpdaterStartedAndStopped,"    protected void doUpdaterStartedAndStopped() {
        MagicUpdater.doStartedAndStopped(mUpdater);
    }"
16199,drawModel,"    protected void drawModel(MatrixManager matrixManager) {
        if (mUpdater != null) {
            mUpdater.lock();
        }"
16200,runOnDraw,"    protected boolean runOnDraw(MatrixManager matrixManager) {
        if (mUpdater != null) {
            mUpdater.runOnDraw();
        }
        if (MagicUpdater.prepareUpdater(mUpdater)) {"
16201,release,"    synchronized void release() {
        super.release();
        mModels = null;
        mDrawModel = null;
    }"
16202,restore,"    void restore() {
        if (mUpdater != null && mUpdater.isStopped()) {
            mUpdater.start();
        }"
16203,stop,"    void stop() {
        if (mUpdater != null) {
            mUpdater.stop();"
16204,updateModel,"    protected void updateModel(Vec size, Vec offset) {
        float w = size.width() / mCols;
        float h = size.height() / mRows;
        float halfW = size.width() / 2;
        float halfH = size.height() / 2;
        mDrawModel = new SurfaceModel(2, 2, w, h);
        for (int r = 0; r < mRows; ++r) {
            for (int c = 0; c < mCols; ++c) {"
16210,init,"    private void init(int rows, int cols) {
        if (rows < 1 || cols < 1) {
            throw new IllegalArgumentException();
        }
        mRows = rows;
        mCols = cols;"
16213,update,"    void update() {
        updateMatrix(mMatrix);
        try {
            mLock.lock();"
16215,updateMatrix,"    abstract void updateMatrix(float[] matrix);
"
16220,initTextures,"    private void initTextures(Bitmap... bitmaps) {
        if (bitmaps == null) {
            return;
        }"
16221,updateModel,"    protected abstract void updateModel(Vec size, Vec offset);
"
16223,doUpdaterStartedAndStopped,"    protected abstract void doUpdaterStartedAndStopped();
"
16224,drawModel,"    protected abstract void drawModel(MatrixManager matrixManager);
"
16225,draw,"    void draw(MatrixManager matrixManager) {
        if (checkRunOnDraw(matrixManager)) {
            if (isVisible()) {"
16226,runOnDraw,"    protected abstract boolean runOnDraw(MatrixManager matrixManager);
"
16227,checkRunOnDraw,"    private boolean checkRunOnDraw(MatrixManager matrixManager) {
        mBody.runOnDraw();
        mShininess.runOnDraw();
        if (mTextures != null) {
            for (GLParameter<Texture> t : mTextures) {
                t.runOnDraw();"
16228,release,"    synchronized void release() {
        if (mReleased) {
            return;
        }
        if (mBody.value().mBmp != null) {
            mBody.value().mBmp.recycle();"
16230,restore,"    void restore() {
        mBody.refresh();
        mIsCurrent.refresh();
        mShininess.refresh();
        if (mTextures != null) {
            for (GLParameter<Texture> t : mTextures) {"
16232,run,"                public void run() {
                    mBmpBody = ViewUtil.getDrawingCache(mView);
                    mBody.value().mBmp = mBmpBody;
                    mIsPrepared = true;
                    mIsPreparing = false;
                }"
16233,prepare,"    void prepare() {
        if (mIsPrepared || mIsPreparing) {
            return;
        }
        mIsPreparing = true;
        if (mIsView) {
            mViewRect = ViewUtil.getViewRect(mView);
            mViewRect.left = mViewRect.left - mScene.getSceneViewRect().left;"
16234,isPrepared,"    boolean isPrepared() {
        return mIsPrepared;
    }"
16239,isVisible,"    public boolean isVisible() {
        return mVisible;
    }"
16246,runOnDraw,"    protected void runOnDraw() {
        super.runOnDraw();
        mEnable.runOnDraw();
        mColor.runOnDraw();
        mIsPointLight.runOnDraw();
    }"
16247,restore,"    void restore() {
        mEnable.refresh();
        mColor.refresh();
        mIsPointLight.refresh();
    }"
16248,isEnable,"    public boolean isEnable() {
        return mEnable.value();
    }"
16257,checkGlError,"    static void checkGlError(String op) {
        int error;
        while ((error = GLES20.glGetError()) != GLES20.GL_NO_ERROR) {
            throw new RuntimeException(op + "": glError "" + error);"
16258,loadShader,"    static int loadShader(int shaderType, String source) {
        int shader = GLES20.glCreateShader(shaderType);
        if (shader != 0) {
            GLES20.glShaderSource(shader, source);
            GLES20.glCompileShader(shader);"
16259,updateProgram,"    static void updateProgram(int program, String vertexSource, String fragmentSource) {
        int vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, vertexSource);
        if (vertexShader == 0) {
            return;
        }
        int pixelShader = loadShader(GLES20.GL_FRAGMENT_SHADER, fragmentSource);
        if (pixelShader == 0) {"
16260,createProgram,"    static int createProgram(String vertexSource, String fragmentSource) {
        int program = GLES20.glCreateProgram();
        updateProgram(program, vertexSource, fragmentSource);
        return program;
    }"
16261,updateTextureValue,"    private void updateTextureValue(Texture texture) {
        GLES20.glActiveTexture(texture.mIndex);
        GLUtil.checkGlError(""glActiveTexture"");
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, texture.mId);
        GLES20.glUniform1i(handle(), texture.mIndex - GLES20.GL_TEXTURE0);
    }"
16262,updateFloatValue,"    private void updateFloatValue(float... value) {
        switch (value.length) {
            case 1:"
16263,updateBooleanValue,"    private void updateBooleanValue(boolean value) {
        GLES20.glUniform1i(handle(), value ? 1 : 0);
    }"
16264,updateValue,"    protected void updateValue() {
        if (mValue instanceof Float) {
            updateFloatValue((Float) mValue);"
16265,handle,"    protected int handle() {
        if (mHandle == 0) {
            mHandle = GLES20.glGetUniformLocation(mProgram.handle, mName);
        }"
16266,updateValue,"    protected abstract void updateValue();
}"
16268,refresh,"    void refresh() {
        if (mProgram != null && !mProgram.isDeleted() && mProgram.isGLThread()) {
            updateValue();"
16270,value,"    GLParameter<T> value(T value) {
        mValue = value;
        refresh();
        return this;
    }"
16271,value,"    T value() {
        return mValue;
    }"
16272,name,"    GLParameter<T> name(String name) {
        mName = name;
        return this;
    }"
16273,name,"    String name() {
        return mName;
    }"
16274,run,"        public void run() {
            updateValue();
        }"
16275,updateValue,"    protected void updateValue() {
        if (mValue == null) {
            return;
        }"
16276,runOnDraw,"    protected void runOnDraw() {
        updateValue();
    }"
16277,handle,"    protected int handle() {
        if (mHandle == 0) {
            mHandle = GLES20.glGetAttribLocation(mProgram.handle, mName);
        }"
16278,restore,"    public void restore() {
        super.restore();
        mDirection.refresh();
    }"
16279,runOnDraw,"    protected void runOnDraw() {
        super.runOnDraw();
        mDirection.runOnDraw();
    }"
16285,normalize,"    private void normalize(Vec normal) {
        float length = (float) Math.sqrt(Math.pow(normal.x(), 2) + Math.pow(normal.y(), 2) + Math.pow(normal.z(), 2));
        normal.setXYZ(
                normal.x() / length,"
16289,checkIndices,"    private boolean checkIndices(short index0, short index1, short index2) {
        return  index0 != index1 &&
                index0 != index2 &&"
16290,attachModelNormalData,"    private void attachModelNormalData(Vec surfaceNormal, int i) {
        for (int j = i; j < i + 3; ++j) {
            short index = mIndices[j];"
16294,updateModelNormal,"    public void updateModelNormal() {
        if (mNormals == null) {
            mNormals = new float[mPositions.length];
        }
        ReusableVec surfaceNormal = VecPool.get(3);
        boolean normalState = false;
        for (int i = 0; i < mIndices.length - 2; ++i) {
            short index = mIndices[i];"
16295,prepareNormals,"    void prepareNormals() {
        try {
            mBufferLock.lock();"
16296,prepareColors,"    void prepareColors() {
        try {
            mBufferLock.lock();"
16297,preparePositions,"    void preparePositions() {
        try {
            mBufferLock.lock();"
16298,prepareIndices,"    void prepareIndices() {
        try {
            mBufferLock.lock();"
16299,drawModel,"    protected void drawModel() {
        GLES20.glDrawElements(GLES20.GL_TRIANGLE_STRIP, mIndices.length, GLES20.GL_UNSIGNED_SHORT, mIndicesBuffer);
    }"
16300,draw,"    void draw() {
        drawModel();
    }"
16301,runOnDraw,"    void runOnDraw() {
        super.runOnDraw();
        mPositionsBuffer.runOnDraw();
        mNormalsBuffer.runOnDraw();
        mColorsBuffer.runOnDraw();
    }"
16304,destroyCompleted,"    public void destroyCompleted() {
        dispatcher.dispatch(TodoActions.TODO_DESTROY_COMPLETED);
    }"
16305,toggleCompleteAll,"    public void toggleCompleteAll() {
        dispatcher.dispatch(TodoActions.TODO_TOGGLE_COMPLETE_ALL);
    }"
16306,toggleComplete,"    public void toggleComplete(Todo todo) {
        long id = todo.getId();
        String actionType = todo.isComplete() ? TodoActions.TODO_UNDO_COMPLETE : TodoActions.TODO_COMPLETE;

        dispatcher.dispatch("
16307,undoDestroy,"    public void undoDestroy() {
        dispatcher.dispatch(
                TodoActions.TODO_UNDO_DESTROY"
16308,destroy,"    public void destroy(long id) {
        dispatcher.dispatch(
                TodoActions.TODO_DESTROY,"
16309,create,"    public void create(String text) {
        dispatcher.dispatch(
                TodoActions.TODO_CREATE,"
16310,get,"    public static ActionsCreator get(Dispatcher dispatcher) {
        if (instance == null) {
            instance = new ActionsCreator(dispatcher);
        }"
16311,build,"        public Action build() {
            if (type == null || type.isEmpty()) {
                throw new IllegalArgumentException(""At least one key is required."");
            }"
16312,bundle,"        public Builder bundle(String key, Object value) {
            if (key == null) {
                throw new IllegalArgumentException(""Key may not be null."");
            }

            if (value == null) {"
16313,with,"        Builder with(String type) {
            if (type == null) {
                throw new IllegalArgumentException(""Type may not be null."");
            }
            this.type = type;
            this.data = new HashMap<>();"
16316,type,"    public static Builder type(String type) {
        return new Builder().with(type);
    }"
16318,disposeComponent,"    public void disposeComponent() {
        super.disposeComponent();
        this.controllerFactory = null;
    }"
16319,initComponent,"    public void initComponent() {
        super.initComponent();
        final IconApplication iconApplication = ApplicationManager.getApplication().getComponent(IconApplication.class);
        this.controllerFactory = iconApplication.getControllerFactory();
    }"
16320,projectOpened,"    public void projectOpened() {
        this.controllerFactory.setProject(myProject);
    }"
16322,disposeComponent,"    public void disposeComponent() {
        controllerFactory.tearDown();
        controllerFactory = null;
    }"
16324,initComponent,"    public void initComponent() {
        IconPack androidIcons = null;
        IconPack materialIcons = null;
        try {
            final InputStream bundledIconPackPropertiesFile = ResourceLoader.getBundledResourceStream(""icon_packs.properties"");
            final Properties bundledIconPackProperties = new Properties();"
16326,addData,"    public void addData(PictureTypeEntity entity) {
        mListData.add(entity);
"
16328,onBindViewHolder,"    public void onBindViewHolder(@NonNull Holder holder, int position) {
        holder.textView.setText(mListData.get(position).typeName);
    }"
16330,removeRunnable,"    private void removeRunnable() {
        if (handler != null) {
            handler.removeCallbacks(runnable);
        }
        handler = null;"
16331,convert,"            protected void convert(BaseViewHolder helper, FunItem item) {
                helper.setText(android.R.id.text1, item.name());
            }"
16334,onPageSelected,"                            public void onPageSelected(Context context, ImageView imageView, String url, int position) {
                                Glide.with(context).load(url).into(imageView);
                            }"
16337,convert,"                    protected void convert(BaseViewHolder helper, MySectionEntity item) {
                        TextView textView = helper.getView(android.R.id.text1);
                        textView.setText(item.t.typeName);
                        textView.setTextColor(Color.BLACK);
                        textView.setGravity(Gravity.CENTER);
                    }"
16338,convertHead,"                    protected void convertHead(BaseViewHolder helper, MySectionEntity item) {
                        helper.setText(R.id.textView2, item.header)
                                .setTextColor(R.id.textView2, Color.BLACK);"
16341,onTimerFinish,"                            public void onTimerFinish() {
                                Toast.makeText(MainActivity.this, ""onTimerFinish"", Toast.LENGTH_SHORT).show();
                            }"
16342,onClick,"                            public boolean onClick(View v) {
                                dialogFragment.dialogDismiss();
                                return true;
                            }"
16343,onConfig,"                            public void onConfig(ProgressParams params) {
                                params.indeterminateColor = Color.parseColor(""#E9AD44"");
                            }"
16344,run,"                    public void run() {
                        progress++;
                        if (progress >= max) {
                            MainActivity.this.runOnUiThread(() -> {"
16345,onItemClick,"    public void onItemClick(BaseQuickAdapter adapter, View view, int position) {
        FunItem funItem = (FunItem) adapter.getItem(position);
        switch (funItem) {
            case fragment:"
16346,onResponse,"                public void onResponse(@NotNull Call call, @NotNull Response response) {
                    if (circleDialog != null) {
                        circleDialog.dismiss();
                    }"
16347,onFailure,"                public void onFailure(@NotNull Call call, @NotNull IOException e) {
                    if (circleDialog != null) {
                        circleDialog.dismiss();
                    }"
16349,onViewCreated,"        public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
            super.onViewCreated(view, savedInstanceState);
            textView = view.findViewById(R.id.textView);
            view.findViewById(R.id.button).setOnClickListener(v -> {
                circleDialog = new CircleDialog.Builder()"
16351,onCreate,"        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
        }"
16352,newInstance,"        public static BlankFragment newInstance() {
            BlankFragment fragment = new BlankFragment();
            Bundle args = new Bundle();
            fragment.setArguments(args);
            return fragment;
        }"
16353,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.aty_fgt);
    }"
16355,onActivityCreated,"    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        View view = getView();
        view.findViewById(R.id.but_cancle).setOnClickListener(this);
        view.findViewById(R.id.logout_ok).setOnClickListener(this);
        view.findViewById(R.id.logout_cancel).setOnClickListener(this);
    }"
16356,createView,"    public View createView(Context context, LayoutInflater inflater, ViewGroup container) {
        return inflater.inflate(R.layout.dialog_logout, container, false);
    }"
16358,createView,"    public View createView(Context context, LayoutInflater inflater, ViewGroup container) {
        return inflater.inflate(R.layout.dialog_login, container, false);
    }"
16362,updateMessageDigest,"    public void updateMessageDigest(MessageDigest messageDigest, int len) throws IOException {
        int data;
        int bytesRead = 0;
        while (bytesRead < len && (data = read()) != -1) {
            messageDigest.update((byte) data);"
16363,updateMessageDigest,"    public void updateMessageDigest(MessageDigest messageDigest) throws IOException {
        int data;
        while ((data = read()) != -1) {
            messageDigest.update((byte) data);"
16364,toString,"    public String toString() {
        return mBuffer.toString();
    }"
16367,append,"    public Writer append(char c) {
        mBuffer.append(c);
        return this;
    }"
16368,append,"    public Writer append(CharSequence csq, int start, int end) {
        CharSequence cs = (csq == null ? ""null"" : csq);
        write(cs.subSequence(start, end).toString());
        return this;
    }"
16369,append,"    public Writer append(CharSequence csq) {
        if (csq == null) {
            write(""null"");
        } else {"
16370,write,"    public void write(String str, int off, int len) {
        mBuffer.append(str, off, off + len);
    }"
16371,write,"    public void write(String str) {
        mBuffer.append(str);
    }"
16372,write,"    public void write(char[] cs, int off, int len) throws IOException {
        if ((off < 0) || (off > cs.length) || (len < 0) ||
            ((off + len) > cs.length) || ((off + len) < 0)) {
            throw new IndexOutOfBoundsException();"
16373,write,"    public void write(char[] cs) throws IOException {
        mBuffer.append(cs, 0, cs.length);
    }"
16374,write,"    public void write(int c) {
        mBuffer.append((char) c);
    }"
16375,toParameterizedType,"    public static ParameterizedType toParameterizedType(Type type) {
        ParameterizedType result = null;
        if (type instanceof ParameterizedType) {
            result = (ParameterizedType) type;
        } else if (type instanceof Class) {"
16380,isUnknow,"    public static boolean isUnknow(Type type) {
        return null == type || type instanceof TypeVariable;
    }"
16381,flattenHierarchy,"    public static Set<Class<?>> flattenHierarchy(Class<?> concreteClass) {
        Set<Class<?>> classes = new HashSet<>();
        classes.add(concreteClass);
        while (concreteClass != null && !concreteClass.equals(Object.class)) {
            Class<?>[] interfaces = concreteClass.getInterfaces();
            if (interfaces != null) {"
16385,findActualTypeArguments,"    public static List<Type> findActualTypeArguments(Type type) {
        List<Type> list = new ArrayList();
        if (type instanceof ParameterizedType) {
            Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();
            for (Type actualTypeArgument : actualTypeArguments) {"
16386,findTargetInterfaceRecursive,"    public static ParameterizedType findTargetInterfaceRecursive(Class source, Class target) {
        while (source != null && !source.equals(Object.class)) {
            ParameterizedType directTargetInterface = findDirectTargetInterface(source, target);
            if (directTargetInterface != null) {"
16389,toString,"    public String toString() {
        return this.type.toString();
    }"
16391,toPendingString,"        String toPendingString() {
            return callable.toString();
        }"
16392,afterRanInterruptibly,"        void afterRanInterruptibly(V result, Throwable error) {
            if (error == null) {
                TrustedListenableFutureTask.this.set(result);"
16393,runInterruptibly,"        V runInterruptibly() throws Exception {
            return callable.call();
        }"
16394,isDone,"        final boolean isDone() {
            return TrustedListenableFutureTask.this.isDone();
        }"
16395,pendingToString,"    protected String pendingToString() {
        InterruptibleTask localTask = task;
        if (localTask != null) {
            return ""task=["" + localTask + ""]"";
        }"
16396,afterDone,"    protected void afterDone() {
        super.afterDone();

        if (wasInterrupted()) {
            InterruptibleTask localTask = task;"
16397,run,"    public void run() {
        InterruptibleTask localTask = task;
        if (localTask != null) {
            localTask.run();
        }"
16398,create,"    static <V> TrustedListenableFutureTask<V> create(Runnable runnable, V result) {
        return new TrustedListenableFutureTask<V>(Executors.callable(runnable, result));
    }"
16399,create,"    static <V> TrustedListenableFutureTask<V> create(Callable<V> callable) {
        return new TrustedListenableFutureTask<V>(callable);
    }"
16400,afterDone,"    protected void afterDone() {
        maybePropagateCancellationTo(delegateRef);

        Future<?> localTimer = timer;
        if (localTimer != null) {
            localTimer.cancel(false);
        }"
16401,pendingToString,"    protected String pendingToString() {
        ListenableFuture<? extends V> localInputFuture = delegateRef;
        ScheduledFuture<?> localTimer = timer;
        if (localInputFuture != null) {
            String message = ""inputFuture=["" + localInputFuture + ""]"";
            if (localTimer != null) {"
16402,fillInStackTrace,"        public synchronized Throwable fillInStackTrace() {
            setStackTrace(new StackTraceElement[0]);
            return this;
        }"
16404,create,"    public static <V> ListenableFuture<V> create(
            ListenableFuture<V> delegate,
            long time,
            TimeUnit unit,
            ScheduledExecutorService scheduledExecutor) {
        TimeoutFuture<V> result = new TimeoutFuture<>(delegate);
        Fire<V> fire = new Fire<>(result);"
16405,execute,"    static void execute(ThrowableAction action) throws RuntimeException {
        try {
            action.execute();"
16407,createThreadFactory,"    private static ThreadFactory createThreadFactory(String name) {
        return new NamedThreadFactory(""AGEI-"" + name, false, (t, e) -> LOGGER.error(t.getName() + "" e"", e));
    }"
16408,scheduledExecutorService,"    public static ScheduledExecutorService scheduledExecutorService() {
        return executor;
    }"
16409,createExecutor,"    public static ExecutorService createExecutor(String name,
                                                 int corePoolSize,
                                                 int maxPoolSize,
                                                 BlockingQueue<Runnable> workQueue) {"
16411,parseFromInstant,"    private TemporalAccessor parseFromInstant(Instant instant, ZoneId zoneId) {
        if (Instant.class.equals(this.targetType)) {
            return instant;
        }
        zoneId = zoneId == null ? ZoneId.systemDefault() : zoneId;

        TemporalAccessor result = null;"
16415,parseFromLong,"    private TemporalAccessor parseFromLong(Long time) {
        return parseFromInstant(Instant.ofEpochMilli(time), null);
    }"
16416,parseFromCharSequence,"    private TemporalAccessor parseFromCharSequence(CharSequence value) {
        final Instant instant;
        ZoneId zoneId;
        if (null != this.format) {
            final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(this.format);
            instant = formatter.parse(value, Instant::from);"
16417,convertInternal,"    protected TemporalAccessor convertInternal(Object value) {
        if (value instanceof Long) {
            return parseFromLong((Long) value);"
16420,isNew,"    public static Boolean isNew(String code) {
        return NEW.code.equals(code);
    }"
16421,isFinalStatus,"    public static Boolean isFinalStatus(String code) {
        return isFinished(code) || isError(code);
    }"
16422,isError,"    public static Boolean isError(String code) {
        return ERROR.code.equals(code);
    }"
16423,isFinished,"    public static Boolean isFinished(String code) {
        return FINISHED.code.equals(code);
    }"
16424,of,"    public static TaskStatus of(String code) {
        if (code == null) {
            return null;
        }"
16427,of,"    public static TaskSpecificationStatus of(String code) {
        if (code == null) {
            return null;
        }"
16431,genSubTaskId,"    public static String genSubTaskId(String mainTaskId, Integer subTaskNo) {
        return mainTaskId + ""_"" + subTaskNo;
    }"
16432,genMainTaskId,"    public static String genMainTaskId() {
        String date = DateUtils.format(new Date(), DateUtils.PURE_DATETIME_FORMAT);
        String uuid = UUID.randomUUID().toString();
        return date + ""-"" + uuid.split(""-"")[0];
    }"
16437,of,"    public static SubTaskStatus of(String code) {
        if (code == null) {
            return null;
        }"
16440,format,"    void format() {
        logger.info(StringUtils.format(""{},{}"", 1, 2));
        logger.info((StringUtils.format(""{},{}"", ArrayUtils.of(1, 2))));
    }"
16441,lenientToString,"    private static String lenientToString(Object o) {
        try {
            return String.valueOf(o);"
16443,padMiddle,"    public static String padMiddle(int maxLength, String start, String end, char padChar) {
        int leftLength = start.length();
        int rightLength = end.length();
        int textLength = leftLength + rightLength;
        if (maxLength <= textLength) {
            return start + end;
        }
        int padLength = maxLength - rightLength;"
16444,padEnd,"    public static String padEnd(String string, int minLength, char padChar) {
        if (string == null) {
            throw new UtilException(""string is null"");
        }

        if (string.length() >= minLength) {
            return string;
        }"
16445,padStart,"    public static String padStart(String string, int minLength, char padChar) {
        if (string == null) {
            throw new UtilException(""string is null"");
        }

        if (string.length() >= minLength) {
            return string;
        }"
16446,removeAll,"    public static String removeAll(CharSequence str, char... chars) {
        if (null == str || ArrayUtils.isEmpty(chars)) {
            return str(str);
        }
        final int len = str.length();
        if (0 == len) {
            return str(str);
        }
        final StringBuilder builder = new StringBuilder(len);"
16447,startWith,"    public static boolean startWith(CharSequence str, CharSequence prefix, boolean isIgnoreCase) {
        if (null == str || null == prefix) {
            return null == str && null == prefix;
        }"
16448,startWithIgnoreCase,"    public static boolean startWithIgnoreCase(CharSequence str, CharSequence prefix) {
        return startWith(str, prefix, true);
    }"
16449,endsWith,"    private static boolean endsWith(final CharSequence str, final CharSequence suffix, final boolean ignoreCase) {
        if (null == str || null == suffix) {
            return null == str && null == suffix;
        }"
16450,endsWithIgnoreCase,"    public static boolean endsWithIgnoreCase(final CharSequence str, final CharSequence suffix) {
        return endsWith(str, suffix, true);
    }"
16452,stripAll,"    public static String[] stripAll(String[] strs, String stripChars) {
        int strsLen;
        if (strs == null || (strsLen = strs.length) == 0) {
            return strs;
        }
        String[] newArr = new String[strsLen];
        for (int i = 0; i < strsLen; i++) {"
16453,stripAll,"    public static String[] stripAll(String[] strs) {
        return stripAll(strs, null);
    }"
16454,stripEnd,"    public static String stripEnd(String str, String stripChars) {
        int end;
        if (str == null || (end = str.length()) == 0) {
            return str;
        }
"
16455,stripStart,"    public static String stripStart(String str, String stripChars) {
        int strLen;
        if (str == null || (strLen = str.length()) == 0) {
            return str;
        }
        int start = 0;
        if (stripChars == null) {"
16456,strip,"    public static String strip(String str, String stripChars) {
        if (isEmpty(str)) {
            return str;
        }
        str = stripStart(str, stripChars);"
16457,stripToEmpty,"    public static String stripToEmpty(String str) {
        return str == null ? EMPTY : strip(str, null);
    }"
16458,stripToNull,"    public static String stripToNull(String str) {
        if (str == null) {
            return null;
        }
        str = strip(str, null);"
16459,strip,"    public static String strip(String str) {
        return strip(str, null);
    }"
16460,trimToEmpty,"    public static String trimToEmpty(String str) {
        return str == null ? EMPTY : str.trim();
    }"
16461,trimToNull,"    public static String trimToNull(String str) {
        String ts = trim(str);
        return isEmpty(ts) ? null : ts;
    }"
16463,trim,"    public static String trim(CharSequence str) {
        return (null == str) ? null : trim(str, 0);
    }"
16464,camelToSplitName,"    public static String camelToSplitName(String camelName, String split) {
        if (isEmpty(camelName)) {
            return camelName;
        }
        StringBuilder buf = null;
        for (int i = 0; i < camelName.length(); i++) {"
16466,contains,"    public static boolean contains(CharSequence str1, CharSequence str2) {
        if (null == str1 || null == str2) {
            return false;
        }"
16468,str,"    public static String str(CharSequence cs) {
        return null == cs ? null : cs.toString();
    }"
16469,sub,"    public static String sub(CharSequence str, int fromIndex, int toIndex) {
        if (isEmpty(str)) {
            return str(str);
        }
        int len = str.length();

        if (fromIndex < 0) {
            fromIndex = len + fromIndex;
            if (fromIndex < 0) {"
16470,subPre,"    public static String subPre(CharSequence string, int toIndex) {
        return sub(string, 0, toIndex);
    }"
16471,toJsonStr,"    private static String toJsonStr(Object obj) {
        if (obj instanceof String) {
            return (String) obj;
        }"
16473,isBlank,"    public static boolean isBlank(CharSequence cs) {
        int strLen;
        if (cs != null && (strLen = cs.length()) != 0) {
            for (int i = 0; i < strLen; ++i) {"
16474,isNotBlank,"    public static boolean isNotBlank(CharSequence cs) {
        return !isBlank(cs);
    }"
16475,isEmpty,"    public static boolean isEmpty(CharSequence str) {
        return str == null || str.length() == 0;
    }"
16476,isNotEmpty,"    public static boolean isNotEmpty(CharSequence str) {
        return !isEmpty(str);
    }"
16477,convertInternal,"    protected String convertInternal(Object value) {
        return convertToStr(value);
    }"
16478,isSuccessAndPageNotEmpty,"    public boolean isSuccessAndPageNotEmpty() {
        Page page = (Page) data;
        return success && !page.isEmpty();
    }"
16479,isSuccessAndNotNull,"    public boolean isSuccessAndNotNull() {
        return success && data != null;
    }"
16480,faled,"    public static <T> Result<T> faled(String code, String msg, T data) {
        Result<T> result = new Result<T>(false);
        result.setCode(code);
        result.setMsg(msg);
        result.setData(data);
        return result;
    }"
16481,faled,"    public static <T> Result<T> faled(String code, String msg) {
        Result<T> result = new Result<T>(false);
        result.setCode(code);
        result.setMsg(msg);
        return result;
    }"
16482,faled,"    public static <T> Result<T> faled(Throwable e) {
        Result<T> result = new Result<T>(false);
        if (e instanceof AbstractStandardException) {
            result.setCode(((AbstractStandardException) e).getCode());
            result.setMsg(StringUtils.isBlank(e.getMessage()) ? ""no message"" : e.getMessage());"
16483,faled,"    public static <T> Result<T> faled(Throwable e, T data) {
        Result<T> faled = faled(e);
        faled.setData(data);
        return faled;
    }"
16484,success,"    public static <T> Result<T> success(T data) {
        Result<T> result = new Result<>(true);
        result.setData(data);
        return result;
    }"
16486,newInstanceIfPossible,"    public static <T> T newInstanceIfPossible(Class<T> beanClass) {
        if (beanClass == null) {
            throw new NullPointerException(""beanClass is null"");
        }

        try {
            return newInstance(beanClass);
        } catch (Throwable e) {"
16488,newInstance,"    public static <T> T newInstance(String clazz) throws UtilException {
        try {
            return (T) Class.forName(clazz).newInstance();"
16489,getMethodsDirectly,"    public static Method[] getMethodsDirectly(Class<?> beanClass, boolean withSuperClassMethods) throws SecurityException {
        if (beanClass == null) {
            throw new UtilException(""beanClass is null"");
        }

        Method[] allMethods = null;
        Class<?> searchType = beanClass;
        Method[] declaredMethods;"
16490,getMethods,"    public static Method[] getMethods(Class<?> beanClass) throws SecurityException {
        Method[] allMethods = METHODS_CACHE.get(beanClass);
        if (null != allMethods) {
            return allMethods;
        }
"
16491,getMethods,"    public static Method[] getMethods(Class<?> clazz, Filter<Method> filter) throws SecurityException {
        if (null == clazz) {
            return null;
        }"
16492,getMethodNames,"    public static Set<String> getMethodNames(Class<?> clazz) throws SecurityException {
        final HashSet<String> methodSet = new HashSet<>();
        final Method[] methods = getMethods(clazz);
        for (Method method : methods) {
            methodSet.add(method.getName());
        }"
16493,getMethod,"    public static Method getMethod(Class<?> clazz, boolean ignoreCase, String methodName, Class<?>... paramTypes) throws SecurityException {
        if (null == clazz || StringUtils.isBlank(methodName)) {
            return null;
        }

        final Method[] methods = getMethods(clazz);"
16494,getMethod,"    public static Method getMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) throws SecurityException {
        return getMethod(clazz, false, methodName, paramTypes);
    }"
16495,getMethodIgnoreCase,"    public static Method getMethodIgnoreCase(Class<?> clazz, String methodName, Class<?>... paramTypes) throws SecurityException {
        return getMethod(clazz, true, methodName, paramTypes);
    }"
16496,getMethodOfObj,"    public static Method getMethodOfObj(Object obj, String methodName, Object... args) throws SecurityException {
        if (null == obj || StringUtils.isBlank(methodName)) {
            return null;
        }"
16497,getPublicMethod,"    public static Method getPublicMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) throws SecurityException {
        try {
            return clazz.getMethod(methodName, paramTypes);"
16503,setFieldValue,"    public static void setFieldValue(Object obj, Field field, Object value) throws UtilException {
        if (field == null) {
            throw new UtilException(""field is null"");
        }

        final Class<?> fieldType = field.getType();
        if (null != value) {"
16504,getConstructorsDirectly,"    public static Constructor<?>[] getConstructorsDirectly(Class<?> beanClass) throws SecurityException {
        if (beanClass == null) {
            throw new UtilException(""beanClass is null"");
        }"
16505,getConstructors,"    public static <T> Constructor<T>[] getConstructors(Class<T> beanClass) throws SecurityException {
        if (beanClass == null) {
            throw new UtilException(""beanClass is null"");
        }
        Constructor<?>[] constructors = CONSTRUCTORS_CACHE.get(beanClass);
        if (null != constructors) {
            return (Constructor<T>[]) constructors;"
16507,isPrimitive,"    public static boolean isPrimitive(Class<?> cls) {
        return cls.isPrimitive() || cls == String.class || cls == Boolean.class || cls == Character.class
                || Number.class.isAssignableFrom(cls) || Date.class.isAssignableFrom(cls);"
16508,isPrimitives,"    public static boolean isPrimitives(Class<?> cls) {
        if (cls.isArray()) {
            return isPrimitive(cls.getComponentType());
        }"
16509,compareTo,"    default int compareTo(Prioritized that) {
        return compare(this.getPriority(), that.getPriority());
    }"
16512,convertToStr,"    protected String convertToStr(Object value) {
        return StringUtils.trim(super.convertToStr(value));
    }"
16513,convertInternal,"    protected Object convertInternal(Object value) {
        try {
            if (byte.class == this.targetType) {
                if (value instanceof Number) {"
16514,test,"    default boolean test(T input) {
        return apply(input);
    }"
16518,isEmpty,"    public boolean isEmpty() {
        return rows == null || rows.isEmpty();
    }"
16519,build,"    public static <T> Page<T> build(PageQuery query, Long totalItem, List<T> rows) {
        return new Page<T>()
                .setPageSize(query.getPageSize())"
16520,empty,"    public static <T> Page<T> empty(PageQuery query) {
        return new Page<T>()
                .setPageSize(query.getPageSize())"
16525,createBigDecimal,"    public static BigDecimal createBigDecimal(String str) {
        if (str == null) {
            return null;"
16526,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(String value, int scale, RoundingMode roundingMode) {
        return value == null ? BigDecimal.ZERO : toScaledBigDecimal(createBigDecimal(value), scale, roundingMode);
    }"
16527,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(String value) {
        return toScaledBigDecimal(value, INTEGER_TWO, RoundingMode.HALF_EVEN);
    }"
16528,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(Double value, int scale, RoundingMode roundingMode) {
        return value == null ? BigDecimal.ZERO : toScaledBigDecimal(BigDecimal.valueOf(value), scale, roundingMode);
    }"
16529,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(Double value) {
        return toScaledBigDecimal(value, INTEGER_TWO, RoundingMode.HALF_EVEN);
    }"
16530,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(Float value, int scale, RoundingMode roundingMode) {
        return value == null ? BigDecimal.ZERO : toScaledBigDecimal(BigDecimal.valueOf((double) value), scale,
            roundingMode);"
16531,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(Float value) {
        return toScaledBigDecimal(value, INTEGER_TWO, RoundingMode.HALF_EVEN);
    }"
16532,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(BigDecimal value, int scale, RoundingMode roundingMode) {
        return value == null ? BigDecimal.ZERO : value.setScale(scale,
            roundingMode == null ? RoundingMode.HALF_EVEN : roundingMode);"
16533,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(BigDecimal value) {
        return toScaledBigDecimal(value, INTEGER_TWO, RoundingMode.HALF_EVEN);
    }"
16534,toShort,"    public static short toShort(String str, short defaultValue) {
        if (str == null) {
            return defaultValue;"
16535,toShort,"    public static short toShort(String str) {
        return toShort(str, (short) 0);
    }"
16536,toByte,"    public static byte toByte(String str, byte defaultValue) {
        if (str == null) {
            return defaultValue;"
16537,toByte,"    public static byte toByte(String str) {
        return toByte(str, (byte) 0);
    }"
16538,toDouble,"    public static double toDouble(BigDecimal value, double defaultValue) {
        return value == null ? defaultValue : value.doubleValue();
    }"
16539,toDouble,"    public static double toDouble(BigDecimal value) {
        return toDouble(value, 0.0D);
    }"
16540,toDouble,"    public static double toDouble(String str, double defaultValue) {
        if (str == null) {
            return defaultValue;"
16541,toDouble,"    public static double toDouble(String str) {
        return toDouble(str, 0.0D);
    }"
16542,toFloat,"    public static float toFloat(String str, float defaultValue) {
        if (str == null) {
            return defaultValue;"
16543,toFloat,"    public static float toFloat(String str) {
        return toFloat(str, 0.0F);
    }"
16544,toLong,"    public static long toLong(String str, long defaultValue) {
        if (str == null) {
            return defaultValue;"
16545,toLong,"    public static long toLong(String str) {
        return toLong(str, 0L);
    }"
16546,toInt,"    public static int toInt(String str, int defaultValue) {
        if (str == null) {
            return defaultValue;"
16547,toInt,"    public static int toInt(String str) {
        return toInt(str, 0);
    }"
16548,isDecimal,"    public static boolean isDecimal(Object cs) {
        if (cs == null || cs.toString().length() == 0) {
            return false;"
16550,parseNumber,"    public static Number parseNumber(String numberStr) {
        numberStr = removeNumberFlag(numberStr);
        try {
            return NumberFormat.getInstance().parse(numberStr);"
16554,toBigInteger,"    private BigInteger toBigInteger(Object value) {
        if (value instanceof Long) {
            return BigInteger.valueOf((Long) value);
        } else if (value instanceof Boolean) {
            return BigInteger.valueOf((boolean) value ? 1 : 0);
        }"
16555,toBigDecimal,"    private BigDecimal toBigDecimal(Object value) {
        if (value instanceof Long) {
            return new BigDecimal((Long) value);
        } else if (value instanceof Integer) {
            return new BigDecimal((Integer) value);
        } else if (value instanceof BigInteger) {"
16556,convertInternal,"    protected Number convertInternal(Object value) {
        final Class<?> targetType = this.targetType;
        if (Byte.class == targetType) {
            if (value instanceof Number) {
                return ((Number) value).byteValue();"
16558,error,"    public void error(String message, Object... args) {
        System.out.println(getFixPrefix(ERROR) + StringUtils.format(message, args));
    }"
16559,error,"    public void error(Throwable t) {
        System.out.println(getFixPrefix(ERROR));
        System.out.println(ExceptionUtils.stackOf(t));
    }"
16560,error,"    public void error(String message) {
        System.out.println(getFixPrefix(ERROR) + message);
    }"
16561,error,"    public void error(String message, Throwable t) {
        System.out.println(getFixPrefix(ERROR) + message);
        System.out.println(ExceptionUtils.stackOf(t));
    }"
16562,warn,"    public void warn(String message, Object... args) {
        System.out.println(getFixPrefix(WARN) + StringUtils.format(message, args));
    }"
16563,warn,"    public void warn(String message) {
        System.out.println(getFixPrefix(WARN) + message);
    }"
16564,warn,"    public void warn(String message, Throwable t) {
        System.out.println(getFixPrefix(WARN) + message);
        System.out.println(ExceptionUtils.stackOf(t));
    }"
16565,info,"    public void info(String message, Object... args) {
        System.out.println(getFixPrefix(INFO) + StringUtils.format(message, args));
    }"
16566,info,"    public void info(String message) {
        System.out.println(getFixPrefix(INFO) + message);
    }"
16567,info,"    public void info(String message, Throwable t) {
        System.out.println(getFixPrefix(INFO) + message);
        System.out.println(ExceptionUtils.stackOf(t));
    }"
16568,debug,"    public void debug(String message, Object... args) {
        System.out.println(getFixPrefix(DEBUG) + StringUtils.format(message, args));
    }"
16569,debug,"    public void debug(String message) {
        System.out.println(getFixPrefix(DEBUG) + message);
    }"
16570,debug,"    public void debug(String message, Throwable t) {
        System.out.println(getFixPrefix(DEBUG) + message);
        System.out.println(ExceptionUtils.stackOf(t));
    }"
16572,isPortAvailable,"    public static boolean isPortAvailable(int port) {
        Socket socket;
        String host = ""localhost"";
        try {
            socket = new Socket(host, port);"
16576,localAddressList,"    public static LinkedHashSet<InetAddress> localAddressList(Filter<InetAddress> addressFilter) {
        Enumeration<NetworkInterface> networkInterfaces;
        try {
            networkInterfaces = NetworkInterface.getNetworkInterfaces();
        } catch (SocketException e) {
            throw new UtilException(e.getMessage(), e);
        }
"
16577,toIpList,"    public static LinkedHashSet<String> toIpList(Set<InetAddress> addressList) {
        final LinkedHashSet<String> ipSet = new LinkedHashSet<>();
        for (InetAddress address : addressList) {
            ipSet.add(address.getHostAddress());
        }"
16578,localIps,"    public static LinkedHashSet<String> localIps() {
        final LinkedHashSet<InetAddress> localAddressList = localAddressList(null);
        return toIpList(localAddressList);
    }"
16582,isLocalhost,"    public static boolean isLocalhost(String ip) {
        return ""127.0.0.1"".equals(ip)
                || ""0:0:0:0:0:0:0:1"".equals(ip)"
16584,newThread,"    public Thread newThread(Runnable runnable) {
        String name = mPrefix + mThreadNum.getAndIncrement();
        Thread ret = new Thread(mGroup, runnable, name, 0);
        ret.setDaemon(mDaemon);
        return ret;
    }"
16585,outPrintln,"    private static void outPrintln(PrintStream out, String msg) {
        out.println(Calendar.getInstance().getTime().toString() + "" "" + CLASS_INFO + "" "" + msg);
    }"
16586,println,"    private static void println(PrintStream out, String msg) {
        out.println(Calendar.getInstance().getTime().toString() + "" "" + CLASS_INFO + "" "" + msg);
    }"
16587,warn,"    public static void warn(String msg, Throwable t) {
        if (quietMode) {
            return;
        }
"
16588,warn,"    public static void warn(String msg) {
        if (quietMode) {
            return;
        }"
16589,error,"    public static void error(String msg, Throwable t) {
        if (quietMode) {
            return;
        }
"
16590,error,"    public static void error(String msg) {
        if (quietMode) {
            return;
        }"
16591,info,"    public static void info(String msg, Throwable t) {
        if (infoEnabled && !quietMode) {
            println(System.out, INFO_PREFIX + msg);"
16592,info,"    public static void info(String msg) {
        if (infoEnabled && !quietMode) {
            println(System.out, INFO_PREFIX + msg);"
16593,debug,"    public static void debug(String msg, Throwable t) {
        if (debugEnabled && !quietMode) {
            println(System.out, DEBUG_PREFIX + msg);"
16594,debug,"    public static void debug(String msg) {
        if (debugEnabled && !quietMode) {
            println(System.out, DEBUG_PREFIX + msg);"
16598,isDebugEnabled,"    default boolean isDebugEnabled() {
        return false;
    }"
16599,error,"    void error(String message, Object... args);
"
16602,error,"    void error(String message, Throwable t);
"
16603,warn,"    void warn(String message, Object... args);
"
16605,warn,"    void warn(String message, Throwable t);
"
16606,info,"    void info(String message, Object... args);
"
16608,info,"    void info(String message, Throwable t);
"
16609,debug,"    void debug(String message, Object... args);
"
16611,debug,"    void debug(String message, Throwable t);
"
16613,error,"    public void error(String message, Object... args) {
        logger.error(message, args);
    }"
16614,error,"    public void error(Throwable t) {
        logger.error("""", t);
    }"
16615,error,"    public void error(String message) {
        logger.error(message);
    }"
16616,error,"    public void error(String message, Throwable t) {
        logger.error(message, t);
    }"
16617,warn,"    public void warn(String message, Object... args) {
        logger.warn(message, args);
    }"
16618,warn,"    public void warn(String message) {
        logger.warn(message);
    }"
16619,warn,"    public void warn(String message, Throwable t) {
        logger.warn(message, t);
    }"
16620,info,"    public void info(String message, Object... args) {
        logger.info(message, args);
    }"
16621,info,"    public void info(String message) {
        logger.info(message);
    }"
16622,info,"    public void info(String message, Throwable t) {
        logger.info(message, t);
    }"
16623,debug,"    public void debug(String message, Object... args) {
        logger.debug(message, args);
    }"
16624,debug,"    public void debug(String message) {
        logger.debug(message);
    }"
16625,debug,"    public void debug(String message, Throwable t) {
        logger.debug(message, t);
    }"
16628,error,"    public void error(String message, Object... args) {
        String msg = formatString(message, args);
        if (args != null) {
            if (args[args.length - 1] instanceof Throwable) {
                logger.error(msg, (Throwable) args[args.length - 1]);"
16629,error,"    public void error(Throwable t) {
        logger.error(t);
    }"
16632,warn,"    public void warn(String message, Object... args) {
        String msg = formatString(message, args);
        if (args != null) {
            if (args[args.length - 1] instanceof Throwable) {
                logger.warn(msg, (Throwable) args[args.length - 1]);"
16635,info,"    public void info(String message, Object... args) {
        String msg = formatString(message, args);
        if (args != null) {
            if (args[args.length - 1] instanceof Throwable) {
                logger.info(msg, (Throwable) args[args.length - 1]);"
16638,debug,"    public void debug(String message, Object... args) {
        String msg = formatString(message, args);
        if (args != null) {
            if (args[args.length - 1] instanceof Throwable) {
                logger.debug(msg, (Throwable) args[args.length - 1]);"
16641,addJar,"        public void addJar(URL url) {
            this.addURL(url);
        }"
16656,computeArrayListCapacity,"    static int computeArrayListCapacity(int arraySize) {
        return Ints.saturatedCast(5L + arraySize + (arraySize / 10));
    }"
16657,cast,"    static <T> Collection<T> cast(Iterable<T> iterable) {
        return (Collection<T>) iterable;
    }"
16658,newArrayList,"    public static <E> ArrayList<E> newArrayList(Iterator<? extends E> elements) {
        ArrayList<E> list = newArrayList();
        if (elements == null) {
            return list;
        }
        while (elements.hasNext()) {"
16659,newArrayList,"    public static <E> ArrayList<E> newArrayList(Iterable<? extends E> elements) {
        if (elements == null) {
            throw new IllegalArgumentException(""elements is null"");
        }"
16660,newArrayListWithCapacity,"    public static <E> ArrayList<E> newArrayListWithCapacity(int initialArraySize) {
        return new ArrayList<>(initialArraySize);
    }"
16662,newArrayList,"    public static <E> ArrayList<E> newArrayList() {
        return new ArrayList<>();
    }"
16663,averageAssign,"    public static <T> List<List<T>> averageAssign(List<T> source, int n) {
        List<List<T>> result = new ArrayList<>();
        int remaider = source.size() % n;
        int number = source.size() / n;
        int offset = 0;
        for (int i = 0; i < n; i++) {
            List<T> value;
            if (remaider > 0) {"
16664,invokeAll,"    <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException;
}"
16665,invokeAll,"    <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException;
"
16666,submit,"    <T> ListenableFuture<T> submit(Runnable task, T result);
"
16667,submit,"    ListenableFuture<?> submit(Runnable task);
"
16668,submit,"    <T> ListenableFuture<T> submit(Callable<T> task);
"
16669,execute,"    public final void execute(Runnable command) {
      delegate.execute(command);
    }"
16670,shutdownNow,"    public final List<Runnable> shutdownNow() {
      return delegate.shutdownNow();
    }"
16671,shutdown,"    public final void shutdown() {
      delegate.shutdown();
    }"
16672,isTerminated,"    public final boolean isTerminated() {
      return delegate.isTerminated();
    }"
16673,isShutdown,"    public final boolean isShutdown() {
      return delegate.isShutdown();
    }"
16674,awaitTermination,"    public final boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {
      return delegate.awaitTermination(timeout, unit);
    }"
16675,addListener,"    void addListener(Runnable listener, Executor executor);
}"
16676,main,"    public static void main(String[] args) {
        Map<String, Object> props = new HashMap<>();
        props.put(""x.a"", ""1"");
        props.put(""x.b"", ""2"");
        props.put(""x.n.a"", ""2"");
        props.put(""x.n.b"", ""2"");

        String jsonStringFromKv = getJsonStringFromKv(props);
        System.out.println(jsonStringFromKv);"
16677,deepMerge,"    private static Map deepMerge(Map original, Map newMap) {
        for (Object key : newMap.keySet()) {
            if (newMap.get(key) instanceof Map && original.get(key) instanceof Map) {
                Map originalChild = (Map) original.get(key);"
16682,merge,"    public static String merge(String oldJson, String newJson) {
        JSONObject oldJsonObj = JSON.parseObject(oldJson);
        if (oldJsonObj == null) {
            oldJsonObj = new JSONObject();
        }
        JSONObject newJsonObj = JSON.parseObject(newJson);
        if (newJsonObj == null) {
            return oldJsonObj.toJSONString();"
16683,toArrayObject,"    public static <T> List<T> toArrayObject(String jsonString, Class<T> clazz) {
        return JSON.parseArray(jsonString, clazz);
    }"
16684,toMap,"    public static Map toMap(String jsonString) {
        return JSON.parseObject(jsonString);
    }"
16685,toMap,"    public static Map toMap(Object object) {
        return JSON.parseObject(toJsonString(object));
    }"
16686,toObject,"    public static <T> T toObject(Map jsonString, Class<T> clazz) {
        return JSON.parseObject(toJsonString(jsonString), clazz);
    }"
16687,toObject,"    public static <T> T toObject(String jsonString, Class<T> clazz) {
        return JSON.parseObject(jsonString, clazz);
    }"
16688,toJsonString,"    public static String toJsonString(Object object) {
        return JSON.toJSONString(object);
    }"
16689,isJson,"    public static boolean isJson(String jsonString) {
        return JSON.isValid(jsonString);
    }"
16690,closeQuietly,"    public static void closeQuietly(final Closeable c) {
        if (c != null) {
            try {"
16691,toByteArray,"    public static byte[] toByteArray(final InputStream input) throws IOException {
        final ByteArrayOutputStream output = new ByteArrayOutputStream();
        copy(input, output);
        return output.toByteArray();
    }"
16692,readFully,"    public static void readFully(ReadableByteChannel channel, ByteBuffer b) throws IOException {
        final int expectedLength = b.remaining();
        int read = 0;
        while (read < expectedLength) {
            int readNow = channel.read(b);
            if (readNow <= 0) {"
16693,readFully,"    public static int readFully(final InputStream input, final byte[] b, final int offset, final int len)
            throws IOException {
        if (len < 0 || offset < 0 || len + offset > b.length) {
            throw new IndexOutOfBoundsException();
        }
        int count = 0, x = 0;"
16694,readFully,"    public static int readFully(final InputStream input, final byte[] b) throws IOException {
        return readFully(input, b, 0, b.length);
    }"
16695,skip,"    public static long skip(final InputStream input, long numToSkip) throws IOException {
        final long available = numToSkip;
        while (numToSkip > 0) {
            final long skipped = input.skip(numToSkip);
            if (skipped == 0) {
                break;"
16697,copy,"    public static long copy(final InputStream input, final OutputStream output) throws IOException {
        return copy(input, output, COPY_BUF_SIZE);
    }"
16698,tryParse,"    public static Integer tryParse(String string, int radix) {
        long result = Long.parseLong(string);
        if (result != (int)result) {
            return null;"
16699,tryParse,"    public static Integer tryParse(String string) {
        return tryParse(string, 10);
    }"
16700,toIntArray,"        int[] toIntArray() {
            return Arrays.copyOfRange(array, start, end);
        }"
16701,toString,"        public String toString() {
            StringBuilder builder = new StringBuilder(size() * 5);
            builder.append('[').append(array[start]);
            for (int i = start + 1; i < end; i++) {
                builder.append("", "").append(array[i]);
            }"
16702,hashCode,"        public int hashCode() {
            int result = 1;
            for (int i = start; i < end; i++) {
                result = 31 * result + Ints.hashCode(array[i]);
            }"
16703,equals,"        public boolean equals(Object object) {
            if (object == this) {
                return true;
            }
            if (object instanceof IntArrayAsList) {"
16704,subList,"        public List<Integer> subList(int fromIndex, int toIndex) {
            int size = size();
            if (fromIndex == toIndex) {
                return Collections.emptyList();
            }"
16709,spliterator,"        public Spliterator.OfInt spliterator() {
            return Spliterators.spliterator(array, start, end, 0);
        }"
16710,get,"        public Integer get(int index) {
            return array[start + index];
        }"
16711,isEmpty,"        public boolean isEmpty() {
            return false;
        }"
16712,size,"        public int size() {
            return end - start;
        }"
16713,asList,"    public static List<Integer> asList(int... backingArray) {
        if (backingArray.length == 0) {
            return Collections.emptyList();
        }"
16714,toArray,"    public static int[] toArray(Collection<? extends Number> collection) {
        if (collection instanceof IntArrayAsList) {
            return ((IntArrayAsList)collection).toIntArray();
        }

        Object[] boxedArray = collection.toArray();
        int len = boxedArray.length;
        int[] array = new int[len];"
16715,reverse,"    public static void reverse(int[] array, int fromIndex, int toIndex) {
        if (array == null) {
            throw new IllegalArgumentException(""array is null"");
        }"
16716,reverse,"    public static void reverse(int[] array) {
        if (array == null) {
            throw new IllegalArgumentException(""array is null"");
        }"
16717,sortDescending,"    public static void sortDescending(int[] array, int fromIndex, int toIndex) {
        if (array == null) {
            throw new IllegalArgumentException(""array is null"");
        }
        if (fromIndex > toIndex) {
            throw new IllegalArgumentException(StringUtils.format(""fromIndex({}) > toIndex({})"", fromIndex, toIndex));"
16718,sortDescending,"    public static void sortDescending(int[] array) {
        if (array == null) {
            throw new IllegalArgumentException(""array is null"");
        }"
16719,toString,"        public String toString() {
            return ""Ints.lexicographicalComparator()"";
        }"
16720,compare,"        public int compare(int[] left, int[] right) {
            int minLength = Math.min(left.length, right.length);
            for (int i = 0; i < minLength; i++) {
                int result = Ints.compare(left[i], right[i]);
                if (result != 0) {"
16721,lexicographicalComparator,"    public static Comparator<int[]> lexicographicalComparator() {
        return LexicographicalComparator.INSTANCE;
    }"
16722,join,"    public static String join(String separator, int... array) {
        if (separator == null) {
            throw new IllegalArgumentException(""separator is null"");
        }
        if (array.length == 0) {
            return """";
        }
"
16723,ensureCapacity,"    public static int[] ensureCapacity(int[] array, int minLength, int padding) {
        if (minLength < 0) {
            throw new IllegalArgumentException(""Invalid minLength: "" + minLength);
        }
        if (padding < 0) {"
16724,stringConverter,"    public static Converter<String, Integer> stringConverter() {
        return IntConverter.INSTANCE;
    }"
16725,readResolve,"        private Object readResolve() {
            return INSTANCE;
        }"
16726,toString,"        public String toString() {
            return ""Ints.stringConverter()"";
        }"
16727,doBackward,"        protected String doBackward(Integer value) {
            return value.toString();
        }"
16728,doForward,"        protected Integer doForward(String value) {
            return Integer.decode(value);
        }"
16729,fromBytes,"    public static int fromBytes(byte b1, byte b2, byte b3, byte b4) {
        return b1 << 24 | (b2 & 0xFF) << 16 | (b3 & 0xFF) << 8 | (b4 & 0xFF);
    }"
16730,fromByteArray,"    public static int fromByteArray(byte[] bytes) {
        if (bytes.length < BYTES) {
            throw new IllegalArgumentException(StringUtils.format(""array too small: %s < %"", bytes.length, BYTES));
        }"
16731,toByteArray,"    public static byte[] toByteArray(int value) {
        return new byte[] {
            (byte)(value >> 24), (byte)(value >> 16), (byte)(value >> 8), (byte)value"
16732,concat,"    public static int[] concat(int[]... arrays) {
        int length = 0;
        for (int[] array : arrays) {
            length += array.length;
        }
        int[] result = new int[length];
        int pos = 0;
        for (int[] array : arrays) {"
16733,constrainToRange,"    public static int constrainToRange(int value, int min, int max) {
        if (min > max) {
            throw new IllegalArgumentException(
                String.format(""min (%s) must be less than or equal to max (%s)"", min, max));"
16734,max,"    public static int max(int... array) {
        if (array == null) {
            throw new IllegalArgumentException(""array is null"");
        }
        if (array.length <= 0) {
            throw new IllegalArgumentException(""array.length <= 0"");
        }"
16735,min,"    public static int min(int... array) {
        if (array == null) {
            throw new IllegalArgumentException(""array is null"");
        }
        if (array.length <= 0) {
            throw new IllegalArgumentException(""array.length <= 0"");
        }"
16736,lastIndexOf,"    private static int lastIndexOf(int[] array, int target, int start, int end) {
        for (int i = end - 1; i >= start; i--) {
            if (array[i] == target) {
                return i;"
16737,lastIndexOf,"    public static int lastIndexOf(int[] array, int target) {
        return lastIndexOf(array, target, 0, array.length);
    }"
16738,indexOf,"    public static int indexOf(int[] array, int[] target) {
        if (array == null) {
            throw new IllegalArgumentException(""array is null"");
        }
        if (target == null) {
            throw new IllegalArgumentException(""target is null"");
        }"
16739,indexOf,"    private static int indexOf(int[] array, int target, int start, int end) {
        for (int i = start; i < end; i++) {
            if (array[i] == target) {
                return i;"
16740,indexOf,"    public static int indexOf(int[] array, int target) {
        return indexOf(array, target, 0, array.length);
    }"
16741,contains,"    public static boolean contains(int[] array, int target) {
        for (int value : array) {
            if (value == target) {
                return true;"
16742,compare,"    public static int compare(int a, int b) {
        return (a < b) ? -1 : ((a > b) ? 1 : 0);
    }"
16743,saturatedCast,"    public static int saturatedCast(long value) {
        if (value > Integer.MAX_VALUE) {
            return Integer.MAX_VALUE;
        }
        if (value < Integer.MIN_VALUE) {"
16744,checkedCast,"    public static int checkedCast(long value) {
        int result = (int)value;
        if (value != result) {
            throw new IllegalArgumentException(""Out of range: "" + value);
        }"
16745,hashCode,"    public static int hashCode(int value) {
        return value;
    }"
16747,toString,"    public final String toString() {
        Runnable state = get();
        final String result;
        if (state == DONE) {
            result = ""running=[DONE]"";
        } else if (state == INTERRUPTING) {"
16749,afterRanInterruptibly,"    abstract void afterRanInterruptibly(T result, Throwable error);
"
16750,runInterruptibly,"    abstract T runInterruptibly() throws Exception;
"
16754,tryInternalFastPathGetFailure,"    public static Throwable tryInternalFastPathGetFailure(InternalFutureFailureAccess future) {
        return future.tryInternalFastPathGetFailure();
    }"
16755,tryInternalFastPathGetFailure,"    protected abstract Throwable tryInternalFastPathGetFailure();
}"
16756,valueOf,"        public static Series valueOf(HttpStatus status) {
            return valueOf(status.value);
        }"
16757,valueOf,"        public static Series valueOf(int status) {
            int seriesCode = status / 100;
            for (Series series : values()) {
                if (series.value == seriesCode) {
                    return series;"
16758,value,"        public int value() {
            return this.value;
        }"
16759,resolve,"    public static HttpStatus resolve(int statusCode) {
        for (HttpStatus status : values()) {
            if (status.value == statusCode) {
                return status;"
16760,valueOf,"    public static HttpStatus valueOf(int statusCode) {
        HttpStatus status = resolve(statusCode);
        if (status == null) {
            throw new IllegalArgumentException(""No matching constant for ["" + statusCode + ""]"");
        }"
16761,toString,"    public String toString() {
        return Integer.toString(this.value);
    }"
16762,series,"    public Series series() {
        return Series.valueOf(this);
    }"
16763,isError,"    public boolean isError() {
        return is4xxClientError() || is5xxServerError();
    }"
16764,is5xxServerError,"    public boolean is5xxServerError() {
        return Series.SERVER_ERROR.equals(series());
    }"
16765,is4xxClientError,"    public boolean is4xxClientError() {
        return Series.CLIENT_ERROR.equals(series());
    }"
16766,is3xxRedirection,"    public boolean is3xxRedirection() {
        return Series.REDIRECTION.equals(series());
    }"
16767,is2xxSuccessful,"    public boolean is2xxSuccessful() {
        return Series.SUCCESSFUL.equals(series());
    }"
16768,is1xxInformational,"    public boolean is1xxInformational() {
        return Series.INFORMATIONAL.equals(series());
    }"
16770,value,"    public int value() {
        return this.value;
    }"
16771,get,"    public T get() {
        return value;
    }"
16772,set,"    public void set(T value) {
        this.value = value;
    }"
16774,addCallback,"    public static <V> void addCallback(
            final ListenableFuture<V> future,
            final FutureCallback<? super V> callback,"
16775,withTimeout,"    public static <V> ListenableFuture<V> withTimeout(
            ListenableFuture<V> delegate,
            long time,
            TimeUnit unit,"
16780,get,"    public V get(long timeout, TimeUnit unit)
            throws InterruptedException, ExecutionException, TimeoutException {
        return delegate.get(timeout, unit);"
16781,get,"    public V get() throws InterruptedException, ExecutionException {
        return delegate.get();
    }"
16782,isDone,"    public boolean isDone() {
        return delegate.isDone();
    }"
16783,isCancelled,"    public boolean isCancelled() {
        return delegate.isCancelled();
    }"
16784,cancel,"    public boolean cancel(boolean mayInterruptIfRunning) {
        return delegate.cancel(mayInterruptIfRunning);
    }"
16785,addListener,"    public void addListener(Runnable listener, Executor executor) {
        delegate.addListener(listener, executor);
    }"
16786,cancel,"        public final boolean cancel(boolean mayInterruptIfRunning) {
            return super.cancel(mayInterruptIfRunning);
        }"
16787,addListener,"        public final void addListener(Runnable listener, Executor executor) {
            super.addListener(listener, executor);
        }"
16788,isCancelled,"        public final boolean isCancelled() {
            return super.isCancelled();
        }"
16789,isDone,"        public final boolean isDone() {
            return super.isDone();
        }"
16790,get,"        public final V get(long timeout, TimeUnit unit)
                throws InterruptedException, ExecutionException, TimeoutException {
            return super.get(timeout, unit);"
16791,get,"        public final V get() throws InterruptedException, ExecutionException {
            return super.get();
        }"
16793,merge,"    public static String merge(String oldFeature, String newFeature) {
        JSONObject oldFeatureObject = JSON.parseObject(oldFeature);
        if (oldFeatureObject == null) {
            return newFeature;
        }
        JSONObject newFeatureObject = JSON.parseObject(newFeature);
        if (newFeatureObject == null) {
            return oldFeature;"
16795,exists,"    public static <T> boolean exists(String feature, FeatureKey<T> key) {
        JSONObject object = JSON.parseObject(feature);
        if (object == null) {
            return false;
        }"
16801,removeFeature,"    default void removeFeature(String key) {
        JSONObject jsonObject = JSON.parseObject(getFeature());
        if (jsonObject == null) {
            return;
        }
        jsonObject.remove(key);"
16802,addFeature,"    default void addFeature(String key, String value) {
        if (StringUtils.isEmpty(value)) {
            return;
        }
        JSONObject jsonObject = JSON.parseObject(getFeature());
        if (jsonObject == null) {
            jsonObject = new JSONObject();"
16803,addFeatures,"    default void addFeatures(Map<String, String> map) {
        if (map == null || map.isEmpty()) {
            return;
        }
        JSONObject jsonObject = JSON.parseObject(getFeature());
        if (jsonObject == null) {
            jsonObject = new JSONObject();"
16804,create,"    public static <T> FeatureKey<T> create(String key, Class<T> clazz, int length) {
        return keysMap.computeIfAbsent(key, k -> new FeatureKey(k, clazz, length));
    }"
16805,create,"    public static <T> FeatureKey<T> create(String key, Class<T> clazz) {
        return keysMap.computeIfAbsent(key, k -> new FeatureKey(k, clazz));
    }"
16810,updateMessageDigest,"		public void updateMessageDigest(MessageDigest messageDigest) {
			updateMessageDigest(messageDigest, available());
		}"
16811,available,"		public int available() {
			return (this.fastByteArrayOutputStream.size() - this.totalBytesRead);
		}"
16812,skip,"		public long skip(long n) throws IOException {
			if (n > Integer.MAX_VALUE) {
				throw new IllegalArgumentException(""n exceeds maximum ("" + Integer.MAX_VALUE + ""): "" + n);
			}
			else if (n == 0) {"
16813,read,"		public int read(byte[] b, int off, int len) {
			if (b == null) {
				throw new NullPointerException();"
16814,read,"		public int read(byte[] b) {
			return read(b, 0, b.length);
		}"
16816,nextPowerOf2,"	private static int nextPowerOf2(int val) {
		val--;
		val = (val >> 1) | val;
		val = (val >> 2) | val;
		val = (val >> 4) | val;
		val = (val >> 8) | val;
		val = (val >> 16) | val;
		val++;
		return val;
	}"
16817,addBuffer,"	private void addBuffer(int minCapacity) {
		if (this.buffers.peekLast() != null) {
			this.alreadyBufferedSize += this.index;
			this.index = 0;
		}
		if (this.nextBlockSize < minCapacity) {"
16818,resize,"	public void resize(int targetCapacity) {
		Assert.isTrue(targetCapacity >= size(), ""New capacity must not be smaller than current size"");
		if (this.buffers.peekFirst() == null) {
			this.nextBlockSize = targetCapacity - size();"
16819,writeTo,"	public void writeTo(OutputStream out) throws IOException {
		Iterator<byte[]> it = this.buffers.iterator();
		while (it.hasNext()) {
			byte[] bytes = it.next();"
16821,reset,"	public void reset() {
		this.buffers.clear();
		this.nextBlockSize = this.initialBlockSize;
		this.closed = false;
		this.index = 0;
		this.alreadyBufferedSize = 0;
	}"
16822,toByteArray,"	public byte[] toByteArray() {
		byte[] bytesUnsafe = toByteArrayUnsafe();
		byte[] ret = new byte[bytesUnsafe.length];
		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length);
		return ret;
	}"
16823,toByteArrayUnsafe,"	public byte[] toByteArrayUnsafe() {
		int totalSize = size();
		if (totalSize == 0) {
			return new byte[0];
		}
		resize(totalSize);"
16824,size,"	public int size() {
		return (this.alreadyBufferedSize + this.index);
	}"
16825,toString,"	public String toString() {
		return new String(toByteArrayUnsafe());
	}"
16826,close,"	public void close() {
		this.closed = true;
	}"
16827,write,"	public void write(byte[] data, int offset, int length) throws IOException {
		if (data == null) {
			throw new NullPointerException();"
16828,write,"	public void write(int datum) throws IOException {
		if (this.closed) {
			throw new IOException(""Stream closed"");"
16831,throwException,"    public static <E extends Throwable> void throwException(Throwable t) throws E {
        throw (E) t;
    }"
16832,toString,"    public String toString() {
        return ""MoreExecutors.directExecutor()"";
    }"
16833,execute,"    public void execute(Runnable command) {
        command.run();
    }"
16836,toString,"    public String toString() {
        final StringBuilder sb = new StringBuilder(""DelayedElement{"");
        sb.append(""delay="").append(delay);
        sb.append("", expire="").append(expire);
        sb.append("", msg='"").append(data).append('\'');
        sb.append("", now="").append(now);
        sb.append('}');
        return sb.toString();
    }"
16837,compareTo,"    public int compareTo(Delayed o) {
        return (int)(this.getDelay(TimeUnit.MILLISECONDS) - o.getDelay(TimeUnit.MILLISECONDS));
    }"
16839,format,"    public static String format(Date date, DateFormat format) {
        if (null == format || null == date) {
            return null;
        }"
16840,parseDateTime,"    public static Date parseDateTime(CharSequence dateString) {
        return parse(dateString, NORM_DATETIME_FORMAT);
    }"
16841,parseDate,"    public static Date parseDate(CharSequence dateString) {
        return parse(dateString, NORM_DATE_FORMAT);
    }"
16842,parse,"    public static Date parse(CharSequence dateStr, String format) {
        SimpleDateFormat fmt = new SimpleDateFormat(format);
        return parse(dateStr, fmt);
    }"
16843,parse,"    private static Date parse(CharSequence dateStr, DateFormat dateFormat) {
        if (StringUtils.isBlank(dateStr)) {
            throw new UtilException(""dataStr is blank"");
        }"
16845,toInstant,"    public static Instant toInstant(TemporalAccessor temporalAccessor) {
        if (null == temporalAccessor) {
            return null;
        }

        Instant result;"
16846,date,"    public static Date date(TemporalAccessor temporalAccessor) {
        Instant instant = toInstant(temporalAccessor);
        return new Date(instant.toEpochMilli());
    }"
16851,convert,"    public <T> T convert(Type type, Object value) throws ConvertException {
        return convert(type, value, null);
    }"
16852,convert,"    public <T> T convert(Type type, Object value, T defaultValue) throws ConvertException {
        return convert(type, value, defaultValue, true);
    }"
16857,putCustom,"    public ConverterRegistry putCustom(Type type, Converter<?> converter) {
        if (null == customConverterMap) {
            synchronized (this) {
                if (null == customConverterMap) {
                    customConverterMap = new ConcurrentHashMap<>();"
16858,putCustom,"    public ConverterRegistry putCustom(Type type, Class<? extends Converter<?>> converterClass) {
        return putCustom(type, ReflectUtils.newInstance(converterClass));
    }"
16864,shortToBytes,"    public static byte[] shortToBytes(short shortValue) {
        byte[] b = new byte[2];
        b[1] = (byte) (shortValue & 0xff);
        b[0] = (byte) ((shortValue >> 8) & 0xff);
        return b;
    }"
16865,bytesToShort,"    public static short bytesToShort(byte[] bytes) {
        return (short) (bytes[1] & 0xff | (bytes[0] & 0xff) << 8);
    }"
16867,intToByte,"    public static byte intToByte(int intValue) {
        return (byte) intValue;
    }"
16868,unWrap,"    public static Class<?> unWrap(Class<?> clazz) {
        return BasicType.unWrap(clazz);
    }"
16869,wrap,"    public static Class<?> wrap(Class<?> clazz) {
        return BasicType.wrap(clazz);
    }"
16870,toDBC,"    public static String toDBC(String text, Set<Character> notConvertSet) {
        if (StringUtils.isBlank(text)) {
            return text;
        }
        final char[] c = text.toCharArray();
        for (int i = 0; i < c.length; i++) {"
16871,toDBC,"    public static String toDBC(String input) {
        return toDBC(input, null);
    }"
16873,toSBC,"    public static String toSBC(String input) {
        return toSBC(input, null);
    }"
16874,convertQuietly,"    public static <T> T convertQuietly(Type type, Object value, T defaultValue) {
        try {
            return convert(type, value, defaultValue);"
16875,convertQuietly,"    public static <T> T convertQuietly(Type type, Object value) {
        return convertQuietly(type, value, null);
    }"
16876,convert,"    public static <T> T convert(Type type, Object value, T defaultValue) throws ConvertException {
        return ConverterRegistry.getInstance().convert(type, value, defaultValue);
    }"
16877,convert,"    public static <T> T convert(Class<T> type, Object value, T defaultValue) throws ConvertException {
        return convert((Type) type, value, defaultValue);
    }"
16878,convert,"    public static <T> T convert(Type type, Object value) throws ConvertException {
        return convert(type, value, null);
    }"
16879,convert,"    public static <T> T convert(TypeReference<T> reference, Object value) throws ConvertException {
        return convert(reference.getType(), value, null);
    }"
16880,convert,"    public static <T> T convert(Class<T> type, Object value) throws ConvertException {
        return convert((Type) type, value);
    }"
16881,toList,"    public static List<?> toList(Object value) {
        return convert(List.class, value);
    }"
16882,toDate,"    public static Date toDate(Object value) {
        return toDate(value, null);
    }"
16883,toInstant,"    public static Date toInstant(Object value, Date defaultValue) {
        return convertQuietly(Instant.class, value, defaultValue);
    }"
16884,toLocalDateTime,"    public static LocalDateTime toLocalDateTime(Object value) {
        return toLocalDateTime(value, null);
    }"
16885,toLocalDateTime,"    public static LocalDateTime toLocalDateTime(Object value, LocalDateTime defaultValue) {
        return convertQuietly(LocalDateTime.class, value, defaultValue);
    }"
16886,toDate,"    public static Date toDate(Object value, Date defaultValue) {
        return convertQuietly(Date.class, value, defaultValue);
    }"
16887,toBigDecimal,"    public static BigDecimal toBigDecimal(Object value) {
        return toBigDecimal(value, null);
    }"
16888,toBigDecimal,"    public static BigDecimal toBigDecimal(Object value, BigDecimal defaultValue) {
        return convertQuietly(BigDecimal.class, value, defaultValue);
    }"
16889,toBigInteger,"    public static BigInteger toBigInteger(Object value) {
        return toBigInteger(value, null);
    }"
16890,toBigInteger,"    public static BigInteger toBigInteger(Object value, BigInteger defaultValue) {
        return convertQuietly(BigInteger.class, value, defaultValue);
    }"
16891,toBooleanArray,"    public static Boolean[] toBooleanArray(Object value) {
        return convert(Boolean[].class, value);
    }"
16892,toBool,"    public static Boolean toBool(Object value) {
        return toBool(value, null);
    }"
16893,toBool,"    public static Boolean toBool(Object value, Boolean defaultValue) {
        return convertQuietly(Boolean.class, value, defaultValue);
    }"
16894,toFloatArray,"    public static Float[] toFloatArray(Object value) {
        return convert(Float[].class, value);
    }"
16895,toFloat,"    public static Float toFloat(Object value) {
        return toFloat(value, null);
    }"
16896,toFloat,"    public static Float toFloat(Object value, Float defaultValue) {
        return convertQuietly(Float.class, value, defaultValue);
    }"
16897,toDoubleArray,"    public static Double[] toDoubleArray(Object value) {
        return convert(Double[].class, value);
    }"
16898,toDouble,"    public static Double toDouble(Object value) {
        return toDouble(value, null);
    }"
16899,toDouble,"    public static Double toDouble(Object value, Double defaultValue) {
        return convertQuietly(Double.class, value, defaultValue);
    }"
16900,toLongArray,"    public static Long[] toLongArray(Object value) {
        return convert(Long[].class, value);
    }"
16901,toLong,"    public static Long toLong(Object value) {
        return toLong(value, null);
    }"
16902,toLong,"    public static Long toLong(Object value, Long defaultValue) {
        return convertQuietly(Long.class, value, defaultValue);
    }"
16903,toIntArray,"    public static Integer[] toIntArray(Object value) {
        return convert(Integer[].class, value);
    }"
16904,toInt,"    public static Integer toInt(Object value) {
        return toInt(value, null);
    }"
16905,toInt,"    public static Integer toInt(Object value, Integer defaultValue) {
        return convertQuietly(Integer.class, value, defaultValue);
    }"
16906,toNumberArray,"    public static Number[] toNumberArray(Object value) {
        return convert(Number[].class, value);
    }"
16907,toNumber,"    public static Number toNumber(Object value) {
        return toNumber(value, null);
    }"
16908,toNumber,"    public static Number toNumber(Object value, Number defaultValue) {
        return convertQuietly(Number.class, value, defaultValue);
    }"
16909,toShortArray,"    public static Short[] toShortArray(Object value) {
        return convert(Short[].class, value);
    }"
16910,toShort,"    public static Short toShort(Object value) {
        return toShort(value, null);
    }"
16911,toShort,"    public static Short toShort(Object value, Short defaultValue) {
        return convertQuietly(Short.class, value, defaultValue);
    }"
16912,toPrimitiveByteArray,"    public static byte[] toPrimitiveByteArray(Object value) {
        return convert(byte[].class, value);
    }"
16913,toByteArray,"    public static Byte[] toByteArray(Object value) {
        return convert(Byte[].class, value);
    }"
16914,toByte,"    public static Byte toByte(Object value) {
        return toByte(value, null);
    }"
16915,toByte,"    public static Byte toByte(Object value, Byte defaultValue) {
        return convertQuietly(Byte.class, value, defaultValue);
    }"
16916,toCharArray,"    public static Character[] toCharArray(Object value) {
        return convert(Character[].class, value);
    }"
16917,toChar,"    public static Character toChar(Object value) {
        return toChar(value, null);
    }"
16918,toChar,"    public static Character toChar(Object value, Character defaultValue) {
        return convertQuietly(Character.class, value, defaultValue);
    }"
16919,toStrArray,"    public static String[] toStrArray(Object value) {
        return convert(String[].class, value);
    }"
16920,toStr,"    public static String toStr(Object value) {
        return toStr(value, null);
    }"
16921,toStr,"    public static String toStr(Object value, String defaultValue) {
        return convertQuietly(String.class, value, defaultValue);
    }"
16923,checkFileNameExist,"    private static boolean checkFileNameExist(String fileName) {
        File file = new File(fileName);
        return file.exists();
    }"
16925,loadProperties,"    public static Properties loadProperties(String fileName, boolean allowMultiFile) {
        return loadProperties(fileName, allowMultiFile, false);
    }"
16926,loadProperties,"    public static Properties loadProperties(String fileName) {
        return loadProperties(fileName, false, false);
    }"
16930,addProperties,"    public static void addProperties(Properties properties) {
        if (properties != null) {
            getProperties().putAll(properties);"
16934,isDefault,"    public static boolean isDefault(String value) {
        return ""true"".equalsIgnoreCase(value)
                || ""default"".equalsIgnoreCase(value);"
16935,isEmpty,"    public static boolean isEmpty(String value) {
        return StringUtils.isEmpty(value)
                || ""false"".equalsIgnoreCase(value)"
16936,isNotEmpty,"    public static boolean isNotEmpty(String value) {
        return !isEmpty(value);
    }"
16938,newHashSet,"    public static <T> HashSet<T> newHashSet(T... ts) {
        return set(false, ts);
    }"
16939,list,"    public static <T> List<T> list(boolean isLinked, T... values) {
        if (ArrayUtils.isEmpty(values)) {
            return list(isLinked);
        }
        final List<T> arrayList = isLinked ? new LinkedList<>() : new ArrayList<>(values.length);
        Collections.addAll(arrayList, values);"
16940,toList,"    public static <T> ArrayList<T> toList(T... values) {
        return (ArrayList<T>) list(false, values);
    }"
16941,newArrayList,"    public static <T> ArrayList<T> newArrayList(T... values) {
        return toList(values);
    }"
16942,addAll,"    public static <T> Collection<T> addAll(Collection<T> collection, Enumeration<T> enumeration) {
        if (null != collection && null != enumeration) {
            while (enumeration.hasMoreElements()) {
                collection.add(enumeration.nextElement());"
16943,get,"    public static <T> T get(Collection<T> collection, int index) {
        if (null == collection) {
            return null;
        }

        final int size = collection.size();
        if (0 == size) {
            return null;
        }"
16944,isNotEmpty,"    public static boolean isNotEmpty(Enumeration<?> enumeration) {
        return null != enumeration && enumeration.hasMoreElements();
    }"
16945,isEmpty,"    public static boolean isEmpty(Collection<?> collection) {
        return collection == null || collection.isEmpty();
    }"
16946,isNotEmpty,"    public static boolean isNotEmpty(Collection<?> collection) {
        return !isEmpty(collection);
    }"
16948,toURI,"    public static URI toURI(String name) {
        try {
            return new URI(name);"
16951,forName,"    public static Class<?> forName(String[] packages, String className) {
        try {
            return classForName(className);"
16952,forNameWithCallerClassLoader,"    public static Class<?> forNameWithCallerClassLoader(String name, Class<?> caller)
        throws ClassNotFoundException {
        return forName(name, caller.getClassLoader());"
16953,forName,"    public static Class<?> forName(String name) throws ClassNotFoundException {
        return forName(name, getClassLoader());
    }"
16959,isJavaLanguageInterface,"    public static boolean isJavaLanguageInterface(Class<?> ifc) {
        return javaLanguageInterfaces.contains(ifc);
    }"
16960,registerCommonClasses,"    private static void registerCommonClasses(Class<?>... commonClasses) {
        for (Class<?> clazz : commonClasses) {
            commonClassCache.put(clazz.getName(), clazz);"
16964,isEnum,"    public static boolean isEnum(Class<?> clazz) {
        return null != clazz && clazz.isEnum();
    }"
16965,isNormalClass,"    public static boolean isNormalClass(Class<?> clazz) {
        return null != clazz
            && false == clazz.isInterface()"
16966,isAbstract,"    public static boolean isAbstract(Class<?> clazz) {
        return Modifier.isAbstract(clazz.getModifiers());
    }"
16968,isStatic,"    public static boolean isStatic(Method method) {
        if (method == null) {
            throw new IllegalArgumentException(""Method to provided is null."");
        }"
16969,isNotPublic,"    public static boolean isNotPublic(Method method) {
        return !isPublic(method);
    }"
16970,isNotPublic,"    public static boolean isNotPublic(Class<?> clazz) {
        return !isPublic(clazz);
    }"
16971,isPublic,"    public static boolean isPublic(Method method) {
        if (null == method) {
            throw new NullPointerException(""method is null"");
        }"
16972,isPublic,"    public static boolean isPublic(Class<?> clazz) {
        if (null == clazz) {
            throw new NullPointerException(""Class to provided is null."");
        }"
16973,isAssignable,"    public static boolean isAssignable(Class<?> targetType, Class<?> sourceType) {
        if (null == targetType || null == sourceType) {
            return false;
        }
"
16974,isSimpleValueType,"    public static boolean isSimpleValueType(Class<?> clazz) {
        return isBasicType(clazz)
            || clazz.isEnum()"
16975,isSimpleTypeOrArray,"    public static boolean isSimpleTypeOrArray(Class<?> clazz) {
        if (null == clazz) {
            return false;
        }"
16976,isBasicType,"    public static boolean isBasicType(Class<?> clazz) {
        if (null == clazz) {
            return false;
        }"
16977,isPrimitiveWrapper,"    public static boolean isPrimitiveWrapper(Class<?> clazz) {
        if (null == clazz) {
            return false;
        }"
16995,isTopLevelClass,"    public static boolean isTopLevelClass(Class<?> clazz) {
        if (null == clazz) {
            return false;
        }"
16998,arrayForName,"    private static Class<?> arrayForName(String className) throws ClassNotFoundException {
        return Class.forName(className.endsWith(""[]"")
            ? ""[L"" + className.substring(0, className.length() - 2) + "";"""
16999,classForName,"    public static Class<?> classForName(String className) throws ClassNotFoundException {
        switch (className) {
            case ""boolean"":
                return boolean.class;"
17000,toString,"    public static String toString(char c) {
        return c < ASCII_LENGTH ? CACHE[c] : String.valueOf(c);
    }"
17002,isBlankChar,"    public static boolean isBlankChar(int c) {
        return Character.isWhitespace(c) || Character.isSpaceChar(c) || c == '\ufeff' || c == '\u202a';
    }"
17003,isBlankChar,"    public static boolean isBlankChar(char c) {
        return isBlankChar((int) c);
    }"
17004,convertInternal,"    protected Character convertInternal(Object value) {
        if (value == null) {
            return null;
        }
"
17005,getUninterruptibly,"    public static <V> V getUninterruptibly(Future<V> future) throws ExecutionException {
        boolean interrupted = false;
        try {
            while (true) {"
17006,getDone,"    public static <V> V getDone(Future<V> future) throws ExecutionException {
        /*
         * We throw IllegalStateException, since the call could succeed later. Perhaps we ""should"" throw
         * IllegalArgumentException, since the call could succeed with a different argument. Those"
17007,run,"    public void run() {
        if (future instanceof InternalFutureFailureAccess) {
            Throwable failure =
                    InternalFutures.tryInternalFastPathGetFailure((InternalFutureFailureAccess) future);
            if (failure != null) {
                callback.onFailure(failure);"
17010,isBoolean,"    public static boolean isBoolean(Class<?> clazz) {
        return (clazz == Boolean.class || clazz == boolean.class);
    }"
17011,xor,"    public static boolean xor(boolean... array) {
        if (ArrayUtils.isEmpty(array)) {
            throw new IllegalArgumentException(""The Array must not be empty"");
        }

        boolean result = false;"
17012,or,"    public static boolean or(boolean... array) {
        if (ArrayUtils.isEmpty(array)) {
            throw new IllegalArgumentException(""The Array must not be empty !"");
        }
        for (final boolean element : array) {"
17013,and,"    public static boolean and(boolean... array) {
        if (ArrayUtils.isEmpty(array)) {
            throw new IllegalArgumentException(""The Array must not be empty !"");
        }
        for (final boolean element : array) {"
17014,toString,"    public static String toString(boolean bool, String trueString, String falseString) {
        return bool ? trueString : falseString;
    }"
17015,toStringYesNo,"    public static String toStringYesNo(boolean bool) {
        return toString(bool, ""yes"", ""no"");
    }"
17016,toStringOnOff,"    public static String toStringOnOff(boolean bool) {
        return toString(bool, ""on"", ""off"");
    }"
17017,toStringTrueFalse,"    public static String toStringTrueFalse(boolean bool) {
        return toString(bool, ""true"", ""false"");
    }"
17018,toDoubleObj,"    public static Double toDoubleObj(boolean value) {
        return toDouble(value);
    }"
17019,toDouble,"    public static double toDouble(boolean value) {
        return toInt(value);
    }"
17020,toFloatObj,"    public static Float toFloatObj(boolean value) {
        return toFloat(value);
    }"
17021,toFloat,"    public static float toFloat(boolean value) {
        return (float) toInt(value);
    }"
17022,toShortObj,"    public static Short toShortObj(boolean value) {
        return toShort(value);
    }"
17023,toShort,"    public static short toShort(boolean value) {
        return (short) toInt(value);
    }"
17024,toLongObj,"    public static Long toLongObj(boolean value) {
        return toLong(value);
    }"
17025,toLong,"    public static long toLong(boolean value) {
        return toInt(value);
    }"
17026,toByteObj,"    public static Byte toByteObj(boolean value) {
        return toByte(value);
    }"
17027,toByte,"    public static byte toByte(boolean value) {
        return (byte) toInt(value);
    }"
17028,toCharacter,"    public static Character toCharacter(boolean value) {
        return toChar(value);
    }"
17029,toChar,"    public static char toChar(boolean value) {
        return (char) toInt(value);
    }"
17030,toInteger,"    public static Integer toInteger(boolean value) {
        return toInt(value);
    }"
17031,toInt,"    public static int toInt(boolean value) {
        return value ? 1 : 0;
    }"
17032,toBoolean,"    public static boolean toBoolean(String valueStr) {
        if (StringUtils.isNotBlank(valueStr)) {
            valueStr = valueStr.trim().toLowerCase();
            return ArrayUtils.contains(TRUE_ARRAY, valueStr);"
17033,negate,"    public static boolean negate(boolean bool) {
        return !bool;
    }"
17034,isFalse,"    public static boolean isFalse(Boolean bool) {
        return Boolean.FALSE.equals(bool);
    }"
17035,isTrue,"    public static boolean isTrue(Boolean bool) {
        return Boolean.TRUE.equals(bool);
    }"
17036,negate,"    public static Boolean negate(Boolean bool) {
        if (bool == null) {
            return null;
        }"
17038,rejectedExecution,"    public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {
        try {
            /**"
17039,parseMessage,"    public String parseMessage(Object... params) {
        return StringUtils.format(messageTemplate, params);
    }"
17040,cloneProp,"    public static <T> T cloneProp(Object object, Class<T> targetClass) {
        final String jsonString = JSON.toJSONString(object);
        final Object o = JSON.parseObject(jsonString, targetClass);
        return (T) o;
    }"
17041,cloneProp,"    public static <T> T cloneProp(T object) {
        final String jsonString = JSON.toJSONString(object);
        final Object o = JSON.parseObject(jsonString, object.getClass());
        return (T) o;
    }"
17044,unWrap,"    public static Class<?> unWrap(Class<?> clazz) {
        if (null == clazz || clazz.isPrimitive()) {
            return clazz;
        }
        Class<?> result = WRAPPER_PRIMITIVE_MAP.get(clazz);"
17045,wrap,"    public static Class<?> wrap(Class<?> clazz) {
        if (null == clazz || !clazz.isPrimitive()) {
            return clazz;
        }
        Class<?> result = PRIMITIVE_WRAPPER_MAP.get(clazz);"
17046,justUnauthorized,"    public static void justUnauthorized(BizCode bizCode, Object... userMessageParams) {
        throw new UnauthorizedException(bizCode, null, userMessageParams);
    }"
17047,justUnauthorized,"    public static void justUnauthorized(BizCode bizCode) {
        throw new UnauthorizedException(bizCode, null);
    }"
17048,justUnauthorized,"    public static void justUnauthorized(String message, BizCode bizCode) {
        throw new UnauthorizedException(message, bizCode, null);
    }"
17049,justUnauthorized,"    public static void justUnauthorized(String message) {
        throw new UnauthorizedException(message);
    }"
17050,authorized,"    public static void authorized(boolean expression, BizCode bizCode, Object... userMessageParams) {
        if (!expression) {
            justUnauthorized(bizCode, userMessageParams);"
17051,authorized,"    public static void authorized(boolean expression, BizCode bizCode) {
        if (!expression) {
            justUnauthorized(bizCode);"
17052,authorized,"    public static void authorized(boolean expression, String message, BizCode bizCode) {
        if (!expression) {
            justUnauthorized(message, bizCode);"
17053,authorized,"    public static void authorized(boolean expression, String message) {
        if (!expression) {
            justUnauthorized(message);"
17054,justFailed,"    public static void justFailed(BizCode bizCode, Object... userMessageParams) {
        throw new StandardBusinessException(bizCode, null, userMessageParams);
    }"
17055,justFailed,"    public static void justFailed(BizCode bizCode) {
        throw new StandardBusinessException(bizCode, null);
    }"
17056,justFailed,"    public static void justFailed(String message, BizCode bizCode) {
        throw new StandardBusinessException(message, bizCode, null);
    }"
17057,justFailed,"    public static void justFailed(String message) {
        throw new StandardBusinessException(message);
    }"
17058,pass,"    public static void pass(boolean expression, BizCode bizCode, Object... userMessageParams) {
        if (!expression) {
            justFailed(bizCode, userMessageParams);"
17059,pass,"    public static void pass(boolean expression, BizCode bizCode) {
        if (!expression) {
            justFailed(bizCode);"
17060,pass,"    public static void pass(boolean expression, String message, BizCode bizCode) {
        if (!expression) {
            justFailed(message, bizCode);"
17061,pass,"    public static void pass(boolean expression, String message) {
        if (!expression) {
            justFailed(message);"
17062,justNotFound,"    public static void justNotFound(BizCode bizCode, Object... userMessageParams) {
        throw new NotFoundException(bizCode, null, userMessageParams);
    }"
17063,justNotFound,"    public static void justNotFound(BizCode bizCode) {
        throw new NotFoundException(bizCode, null);
    }"
17064,justNotFound,"    public static void justNotFound(String message, BizCode bizCode) {
        throw new NotFoundException(message, bizCode, null);
    }"
17065,justNotFound,"    public static void justNotFound(String message) {
        throw new NotFoundException(message);
    }"
17066,found,"    public static void found(boolean expression, BizCode bizCode, Object... userMessageParams) {
        if (!expression) {
            justNotFound(bizCode, userMessageParams);"
17067,found,"    public static void found(boolean expression, BizCode bizCode) {
        if (!expression) {
            justNotFound(bizCode);"
17068,found,"    public static void found(boolean expression, String message, BizCode bizCode) {
        if (!expression) {
            justNotFound(message, bizCode);"
17069,found,"    public static void found(boolean expression, String message) {
        if (!expression) {
            justNotFound(message);"
17070,justInvalidParam,"    public static void justInvalidParam(BizCode bizCode, Object... userMessageParams) {
        throw new InvalidParamException(bizCode, null, userMessageParams);
    }"
17071,justInvalidParam,"    public static void justInvalidParam(BizCode bizCode) {
        throw new InvalidParamException(bizCode, null);
    }"
17072,justInvalidParam,"    public static void justInvalidParam(String message, BizCode bizCode) {
        throw new InvalidParamException(message, bizCode, null);
    }"
17073,justInvalidParam,"    public static void justInvalidParam(String message) {
        throw new InvalidParamException(message);
    }"
17074,validParam,"    public static void validParam(boolean expression, BizCode bizCode, Object... userMessageParams) {
        if (!expression) {
            justInvalidParam(bizCode, userMessageParams);"
17075,validParam,"    public static void validParam(boolean expression, BizCode bizCode) {
        if (!expression) {
            justInvalidParam(bizCode);"
17076,validParam,"    public static void validParam(boolean expression, String message, BizCode bizCode) {
        if (!expression) {
            justInvalidParam(message, bizCode);"
17077,validParam,"    public static void validParam(boolean expression, String message) {
        if (!expression) {
            justInvalidParam(message);"
17078,justDenied,"    public static void justDenied(BizCode bizCode, Object... userMessageParams) {
        throw new AccessDeniedException(bizCode, null, userMessageParams);
    }"
17079,justDenied,"    public static void justDenied(BizCode bizCode) {
        throw new AccessDeniedException(bizCode, null);
    }"
17080,justDenied,"    public static void justDenied(String message, BizCode bizCode) {
        throw new AccessDeniedException(message, bizCode, null);
    }"
17081,justDenied,"    public static void justDenied(String message) {
        throw new AccessDeniedException(message);
    }"
17082,allowed,"    public static void allowed(boolean expression, BizCode bizCode, Object... userMessageParams) {
        if (!expression) {
            justDenied(bizCode, userMessageParams);"
17083,allowed,"    public static void allowed(boolean expression, BizCode bizCode) {
        if (!expression) {
            justDenied(bizCode);"
17084,allowed,"    public static void allowed(boolean expression, String message, BizCode bizCode) {
        if (!expression) {
            justDenied(message, bizCode);"
17085,allowed,"    public static void allowed(boolean expression, String message) {
        if (!expression) {
            justDenied(message);"
17086,toString,"    public static String toString(Object obj) {
        if (null == obj) {
            return null;
        }
"
17087,indexOf,"    public static <T> int indexOf(T[] array, Object value) {
        if (null != array) {
            for (int i = 0; i < array.length; i++) {
                if (Objects.equals(value, array[i])) {"
17088,contains,"    public static <T> boolean contains(T[] array, T value) {
        return indexOf(array, value) > INDEX_NOT_FOUND;
    }"
17089,indexOf,"    public static int indexOf(char[] array, char value) {
        if (null != array) {
            for (int i = 0; i < array.length; i++) {
                if (value == array[i]) {"
17090,contains,"    public static boolean contains(char[] array, char value) {
        return indexOf(array, value) > INDEX_NOT_FOUND;
    }"
17091,length,"    public static int length(Object array) {
        if (null == array) {
            return 0;
        }"
17092,insert,"    public static <T> Object insert(Object array, int index, T... newElements) {
        if (isEmpty(newElements)) {
            return array;
        }
        if (isEmpty(array)) {
            return newElements;
        }

        final int len = length(array);
        if (index < 0) {
            index = (index % len) + len;"
17093,insert,"    public static <T> T[] insert(T[] buffer, int index, T... newElements) {
        return (T[]) insert((Object) buffer, index, newElements);
    }"
17094,append,"    public static <T> T[] append(T[] buffer, T... newElements) {
        if (isEmpty(buffer)) {
            return newElements;
        }"
17095,filter,"    public static <T> T[] filter(T[] array, Filter<T> filter) {
        if (null == filter) {
            return array;
        }

        final ArrayList<T> list = new ArrayList<>(array.length);
        for (T t : array) {"
17096,newArray,"    public static <T> T[] newArray(Class<?> componentType, int newSize) {
        return (T[]) Array.newInstance(componentType, newSize);
    }"
17097,of,"    public static <T> T[] of(T... values) {
        return values;
    }"
17098,notHasNull,"    public static <T> boolean notHasNull(T... array) {
        return !hasNull(array);
    }"
17099,hasNull,"    public static <T> boolean hasNull(T... array) {
        if (isNotEmpty(array)) {
            for (T element : array) {
                if (null == element) {"
17100,isNotEmpty,"    public static boolean isNotEmpty(final Object[] array) {
        return !isEmpty(array);
    }"
17101,isEmpty,"    public static boolean isEmpty(Object array) {
        if (null == array) {
            return true;
        } else if (isArray(array)) {"
17102,isArray,"    public static boolean isArray(Object obj) {
        if (null == obj) {
            return false;
        }"
17103,resolveException,"    private void resolveException(Throwable e) {
        Throwable throwable = causeOf(e);
        if (throwable instanceof AbstractStandardException) {
            this.code = ((AbstractStandardException) e).getCode();"
17105,causeOf,"    public static Throwable causeOf(Throwable e) {
        int count = 0;
        Throwable exception = e;
        while (exception != null && count++ < 50) {
            if (exception instanceof AbstractStandardException) {
                return exception;"
17106,submit,"    public <T> ListenableFuture<T> submit(Callable<T> task) {
        return (ListenableFuture<T>) super.submit(task);
    }"
17107,submit,"    public <T> ListenableFuture<T> submit(Runnable task, T result) {
        return (ListenableFuture<T>) super.submit(task, result);
    }"
17108,submit,"    public ListenableFuture<?> submit(Runnable task) {
        return (ListenableFuture<?>) super.submit(task);
    }"
17109,newTaskFor,"    protected final <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {
        return TrustedListenableFutureTask.create(callable);
    }"
17110,newTaskFor,"    protected final <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {
        return TrustedListenableFutureTask.create(runnable, value);
    }"
17111,cancellationExceptionWithCause,"    private static CancellationException cancellationExceptionWithCause(
            String message, Throwable cause) {
        CancellationException exception = new CancellationException(message);
        exception.initCause(cause);
        return exception;"
17112,casValue,"        boolean casValue(AbstractFuture<?> future, Object expect, Object update) {
            synchronized (future) {
                if (future.value == expect) {"
17113,casListeners,"        boolean casListeners(AbstractFuture<?> future, Listener expect, Listener update) {
            synchronized (future) {
                if (future.listeners == expect) {"
17114,casWaiters,"        boolean casWaiters(AbstractFuture<?> future, Waiter expect, Waiter update) {
            synchronized (future) {
                if (future.waiters == expect) {"
17115,putNext,"        void putNext(Waiter waiter, Waiter newValue) {
            waiter.next = newValue;
        }"
17116,putThread,"        void putThread(Waiter waiter, Thread newValue) {
            waiter.thread = newValue;
        }"
17117,casValue,"        boolean casValue(AbstractFuture<?> future, Object expect, Object update) {
            return valueUpdater.compareAndSet(future, expect, update);
        }"
17118,casListeners,"        boolean casListeners(AbstractFuture<?> future, Listener expect, Listener update) {
            return listenersUpdater.compareAndSet(future, expect, update);
        }"
17119,casWaiters,"        boolean casWaiters(AbstractFuture<?> future, Waiter expect, Waiter update) {
            return waitersUpdater.compareAndSet(future, expect, update);
        }"
17120,putNext,"        void putNext(Waiter waiter, Waiter newValue) {
            waiterNextUpdater.lazySet(waiter, newValue);
        }"
17121,putThread,"        void putThread(Waiter waiter, Thread newValue) {
            waiterThreadUpdater.lazySet(waiter, newValue);
        }"
17122,casValue,"        abstract boolean casValue(AbstractFuture<?> future, Object expect, Object update);
    }"
17123,casListeners,"        abstract boolean casListeners(AbstractFuture<?> future, Listener expect, Listener update);
"
17124,casWaiters,"        abstract boolean casWaiters(AbstractFuture<?> future, Waiter expect, Waiter update);
"
17125,putNext,"        abstract void putNext(Waiter waiter, Waiter newValue);
"
17126,putThread,"        abstract void putThread(Waiter waiter, Thread newValue);
"
17127,executeListener,"    private static void executeListener(Runnable runnable, Executor executor) {
        try {
            executor.execute(runnable);"
17129,addDoneString,"    private void addDoneString(StringBuilder builder) {
        try {
            V value = getUninterruptibly(this);"
17132,toString,"    public String toString() {
        StringBuilder builder = new StringBuilder().append(super.toString()).append(""[status="");
        if (isCancelled()) {
            builder.append(""CANCELLED"");
        } else if (isDone()) {"
17133,clearListeners,"    private Listener clearListeners(Listener onto) {

        Listener head;
        do {
            head = listeners;
        } while (!ATOMIC_HELPER.casListeners(this, head, Listener.TOMBSTONE));
        Listener reversedList = onto;"
17134,releaseWaiters,"    private void releaseWaiters() {
        Waiter head;
        do {
            head = waiters;
        } while (!ATOMIC_HELPER.casWaiters(this, head, Waiter.TOMBSTONE));"
17135,maybePropagateCancellationTo,"    final void maybePropagateCancellationTo(Future<?> related) {
        if (related != null & isCancelled()) {
            related.cancel(wasInterrupted());"
17136,tryInternalFastPathGetFailure,"    protected final Throwable tryInternalFastPathGetFailure() {
        if (this instanceof Trusted) {
            Object obj = value;
            if (obj instanceof Failure) {"
17138,complete,"    private static void complete(AbstractFuture<?> future) {
        Listener next = null;
        outer:
        while (true) {"
17139,getUninterruptibly,"    private static <V> V getUninterruptibly(Future<V> future) throws ExecutionException {
        boolean interrupted = false;
        try {
            while (true) {"
17143,set,"    protected boolean set(V value) {
        Object valueToSet = value == null ? NULL : value;
        if (ATOMIC_HELPER.casValue(this, null, valueToSet)) {
            complete(this);
            return true;"
17144,addListener,"    public void addListener(Runnable listener, Executor executor) {
        if (!isDone()) {
            Listener oldHead = listeners;
            if (oldHead != Listener.TOMBSTONE) {"
17145,wasInterrupted,"    protected final boolean wasInterrupted() {
        final Object localValue = value;
        return (localValue instanceof Cancellation) && ((Cancellation) localValue).wasInterrupted;
    }"
17147,cancel,"    public boolean cancel(boolean mayInterruptIfRunning) {
        Object localValue = value;
        boolean rValue = false;
        if (localValue == null | localValue instanceof SetFuture) {
            Object valueToSet =
                    GENERATE_CANCELLATION_CAUSES"
17148,isCancelled,"    public boolean isCancelled() {
        final Object localValue = value;
        return localValue instanceof Cancellation;
    }"
17149,isDone,"    public boolean isDone() {
        final Object localValue = value;
        return localValue != null & !(localValue instanceof SetFuture);
    }"
17151,get,"    public V get() throws InterruptedException, ExecutionException {
        if (Thread.interrupted()) {
            throw new InterruptedException();
        }
        Object localValue = value;
        if (localValue != null & !(localValue instanceof SetFuture)) {
            return getDoneValue(localValue);
        }"
17156,unpark,"        void unpark() {

            Thread w = thread;
            if (w != null) {"
17159,convertToStr,"    protected String convertToStr(Object value) {
        if (null == value) {
            return null;
        }
        if (value instanceof CharSequence) {"
17160,convertInternal,"    protected abstract T convertInternal(Object value);
"
17162,convertQuietly,"    public T convertQuietly(Object value, T defaultValue) {
        try {
            return convert(value, defaultValue);"
