,Method Names,Method Text
0,onPreviewFrame,"    public void onPreviewFrame(byte[] data, Camera camera) {

        Point cameraResolution = configManager.getCameraResolution();

        Handler thePreviewHandler = previewHandler;"
1,setHandler,"    public void setHandler(Handler previewHandler, int previewMessage) {

        this.previewHandler = previewHandler;
"
2,doInBackground,"        protected Object doInBackground(Object... objects) {

            try {
"
3,onReceive,"        public void onReceive(Context context, Intent intent) {

            if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {"
4,shutdown,"    public void shutdown() {

        cancel();"
5,cancel,"    private synchronized void cancel() {

        AsyncTask<?, ?, ?> task = inactivityTask;
"
6,onResume,"    public synchronized void onResume() {

        if (registered) {
"
7,onPause,"    public synchronized void onPause() {

        cancel();
"
8,onActivity,"    public synchronized void onActivity() {

        cancel();

        inactivityTask = new InactivityAsyncTask();"
9,run,"    public void run() {

        Looper.prepare();

        handler = new DecodeHandler(activity, hints);
"
10,getHandler,"    public Handler getHandler() {

        try {
"
11,buildLuminanceSource,"    public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data, int width, int height) {

        Rect rect = activity.getCropRect();

        if (rect == null) {"
13,handleMessage,"    public void handleMessage(Message message) {

        if (!running) {
"
14,bundleThumbnail,"    private static void bundleThumbnail(PlanarYUVLuminanceSource source, Bundle bundle) {

        int[] pixels = source.renderThumbnail();

        int width = source.getThumbnailWidth();

        int height = source.getThumbnailHeight();

        Bitmap bitmap = Bitmap.createBitmap(pixels, 0, width, width, height, Bitmap.Config.ARGB_8888);"
15,getBarCodeFormats,"    public static Collection<BarcodeFormat> getBarCodeFormats() {

        return ONE_D_FORMATS;"
16,getQrCodeFormats,"    public static Collection<BarcodeFormat> getQrCodeFormats() {

        return QR_CODE_FORMATS;"
17,restartPreviewAndDecode,"    private void restartPreviewAndDecode() {

        if (state == State.SUCCESS) {"
18,quitSynchronously,"    public void quitSynchronously() {

        state = State.DONE;

        cameraManager.stopPreview();

        Message quit = Message.obtain(decodeThread.getHandler(), R.id.quit);

        quit.sendToTarget();"
19,handleMessage,"    public void handleMessage(Message message) {

        if (message.what == R.id.restart_preview) {"
20,getPreviewSize,"    public Size getPreviewSize() {

        if (null != camera) {
"
21,getCameraResolution,"    public Point getCameraResolution() {

        return configManager.getCameraResolution();"
22,setManualCameraId,"    public synchronized void setManualCameraId(int cameraId) {

        requestedCameraId = cameraId;"
23,requestPreviewFrame,"    public synchronized void requestPreviewFrame(Handler handler, int message) {

        Camera theCamera = camera;
"
24,stopPreview,"    public synchronized void stopPreview() {

        if (autoFocusManager != null) {
"
25,startPreview,"    public synchronized void startPreview() {

        Camera theCamera = camera;
"
26,closeDriver,"    public synchronized void closeDriver() {

        if (camera != null) {"
27,isOpen,"    public synchronized boolean isOpen() {

        return camera != null;"
28,get,"    public static CameraManager get() {

        return cameraManager;"
29,openDriver,"    public synchronized void openDriver(SurfaceHolder holder) throws IOException {

        Camera theCamera = camera;

        if (theCamera == null) {



            if (requestedCameraId >= 0) {"
30,compare,"            public int compare(Camera.Size a, Camera.Size b) {

                int aPixels = a.height * a.width;

                int bPixels = b.height * b.width;

                if (bPixels < aPixels) {"
32,getScreenResolution,"    public Point getScreenResolution() {

        return screenResolution;"
33,getCameraResolution,"    public Point getCameraResolution() {

        return cameraResolution;"
34,setDesiredCameraParameters,"    public void setDesiredCameraParameters(Camera camera, boolean safeMode) {

        Camera.Parameters parameters = camera.getParameters();



        if (parameters == null) {

            Log.w(TAG, ""Device error: no camera parameters are available. Proceeding without configuration."");

            return;
"
35,getDisplaySize,"    private Point getDisplaySize(final Display display) {

        final Point point = new Point();

        try {"
36,initFromCameraParameters,"    public void initFromCameraParameters(Camera camera) {

        Camera.Parameters parameters = camera.getParameters();

        WindowManager manager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);

        Display display = manager.getDefaultDisplay();

        Point theScreenResolution = new Point();

        theScreenResolution = getDisplaySize(display);



        screenResolution = theScreenResolution;
"
37,close,"    public synchronized void close() {

        if (mediaPlayer != null) {"
38,onError,"    public synchronized boolean onError(MediaPlayer mp, int what, int extra) {

        if (what == MediaPlayer.MEDIA_ERROR_SERVER_DIED) {
"
40,buildMediaPlayer,"    private MediaPlayer buildMediaPlayer(Context activity) {

        MediaPlayer mediaPlayer = new MediaPlayer();

        mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);

        mediaPlayer.setOnCompletionListener(this);"
41,playBeepSoundAndVibrate,"    public synchronized void playBeepSoundAndVibrate() {

        if (playBeep && mediaPlayer != null) {
"
42,updatePrefs,"    private synchronized void updatePrefs() {

        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(activity);

        playBeep = shouldBeep(prefs, activity);
"
43,shouldBeep,"    private static boolean shouldBeep(SharedPreferences prefs, Context activity) {

        boolean shouldPlayBeep = true;

        if (shouldPlayBeep) {"
44,doInBackground,"        protected Object doInBackground(Object... voids) {

            try {

                Thread.sleep(AUTO_FOCUS_INTERVAL_MS);"
45,stop,"    public synchronized void stop() {

        stopped = true;
"
46,cancelOutstandingTask,"    private synchronized void cancelOutstandingTask() {

        if (outstandingTask != null) {"
47,start,"    public synchronized void start() {

        if (useAutoFocus) {"
48,autoFocusAgainLater,"    private synchronized void autoFocusAgainLater() {

        if (!stopped && outstandingTask == null) {"
49,onAutoFocus,"    public synchronized void onAutoFocus(boolean success, Camera theCamera) {

        focusing = false;
"
50,onItemLongClick,"        boolean onItemLongClick(ZrcListView parent, View view, int position, long id);
"
51,onItemClick,"        void onItemClick(ZrcListView parent, View view, int position, long id);
"
52,onScroll,"        public void onScroll(ZrcAbsListView view, int firstVisibleItem, int visibleItemCount,
"
53,onScrollStateChanged,"        public void onScrollStateChanged(ZrcAbsListView view, int scrollState);
"
56,setSelectionFromTop,"    public void setSelectionFromTop(int i, int offset){

        mFirstPosition = i;

        mFirstTop = offset;
"
57,setSelection,"    public void setSelection(int i) {

        setSelectionFromTop(i, 0);"
58,setItemAnimForBottomIn,"    public void setItemAnimForBottomIn(int animId) {

        mItemAnimForBottomIn = animId;"
59,setItemAnimForTopIn,"    public void setItemAnimForTopIn(int animId) {

        mItemAnimForTopIn = animId;"
60,onFinishInflate,"    protected void onFinishInflate() {

        super.onFinishInflate();

        int count = getChildCount();"
61,onFocusChanged,"    protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect) {

        super.onFocusChanged(gainFocus, direction, previouslyFocusedRect);


"
62,areFooterDividersEnabled,"    public boolean areFooterDividersEnabled() {

        return mFooterDividersEnabled;"
63,setFooterDividersEnabled,"    public void setFooterDividersEnabled(boolean footerDividersEnabled) {

        mFooterDividersEnabled = footerDividersEnabled;
"
64,areHeaderDividersEnabled,"    public boolean areHeaderDividersEnabled() {

        return mHeaderDividersEnabled;"
65,setHeaderDividersEnabled,"    public void setHeaderDividersEnabled(boolean headerDividersEnabled) {

        mHeaderDividersEnabled = headerDividersEnabled;
"
66,setDividerHeight,"    public void setDividerHeight(int height) {

        mDividerHeight = height;

        requestLayout();"
67,getDividerHeight,"    public int getDividerHeight() {

        return mDividerHeight;"
68,setDivider,"    public void setDivider(Drawable divider) {

        if (divider != null) {

            mDividerHeight = divider.getIntrinsicHeight();

        } else {"
69,getDivider,"    public Drawable getDivider() {

        return mDivider;"
70,drawDivider,"    void drawDivider(Canvas canvas, Rect bounds, int childIndex) {

        final Drawable divider = mDivider;

        divider.setBounds(bounds);"
71,drawChild,"    protected boolean drawChild(Canvas canvas, View child, long drawingTime) {

        boolean more = super.drawChild(canvas, child, drawingTime);

        if (mCachingActive) {"
72,dispatchDraw,"    protected void dispatchDraw(Canvas canvas) {

        if (mCachingStarted) {

            mCachingActive = true;

        }"
73,setCacheColorHint,"    public void setCacheColorHint(int color) {

        final boolean opaque = (color >>> 24) == 0xFF;

        mIsCacheColorOpaque = opaque;
"
74,isOpaque,"    public boolean isOpaque() {

        boolean retValue =

                (mCachingActive && mIsCacheColorOpaque && mDividerIsOpaque) || super.isOpaque();"
75,setItemsCanFocus,"    public void setItemsCanFocus(boolean itemsCanFocus) {

        mItemsCanFocus = itemsCanFocus;
"
76,getItemsCanFocus,"    public boolean getItemsCanFocus() {

        return mItemsCanFocus;"
77,addViewBelow,"    private View addViewBelow(View theView, int position) {

        int belowPosition = position + 1;

        View view = obtainView(belowPosition, mIsScrap);

        int edgeOfNewChild = theView.getBottom() + mDividerHeight;"
78,addViewAbove,"    private View addViewAbove(View theView, int position) {

        int abovePosition = position - 1;

        View view = obtainView(abovePosition, mIsScrap);

        int edgeOfNewChild = theView.getTop() - mDividerHeight;"
79,scrollListItemsBy,"    private void scrollListItemsBy(int amount) {

        offsetChildrenTopAndBottom(amount);



        final int listBottom = getHeight() - mListPadding.bottom - mLastBottomOffset;"
80,canAnimate,"    protected boolean canAnimate() {

        return super.canAnimate() && mItemCount > 0;"
82,makeAndAddView,"    private View makeAndAddView(int position, int y, boolean flow, int childrenLeft,

            boolean selected) {

        View child;

"
83,layoutChildren,"    protected void layoutChildren() {

        final boolean blockLayoutRequests = mBlockLayoutRequests;

        if (blockLayoutRequests) {
"
84,findMotionRow,"    int findMotionRow(int y) {

        int childCount = getChildCount();

        if (childCount > 0) {"
85,measureHeightOfChildren,"    final int measureHeightOfChildren(int widthMeasureSpec, int startPosition, int endPosition,

            final int maxHeight,

            int disallowPartialChildPosition) {

        final ListAdapter adapter = mAdapter;

        if (adapter == null) {

            return mListPadding.top + mListPadding.bottom + mFirstTopOffset + mLastBottomOffset;

        }

"
86,recycleOnMeasure,"    protected boolean recycleOnMeasure() {

        return true;"
87,measureScrapChild,"    private void measureScrapChild(View child, int position, int widthMeasureSpec) {

        LayoutParams p = (LayoutParams) child.getLayoutParams();

        if (p == null) {

            p = (ZrcAbsListView.LayoutParams) generateDefaultLayoutParams();

            child.setLayoutParams(p);

        }"
89,fillFromTop,"    private void fillFromTop(int nextTop) {

        mFirstPosition = Math.min(mFirstPosition, mItemCount - 1);

        if (mFirstPosition < 0) {"
90,fillUp,"    private void fillUp(int pos, int nextBottom, boolean isAnim) {

        int end = 0;

"
91,fillDown,"    private void fillDown(int pos, int nextTop, boolean isAnim) {

        int end = (getBottom() - getTop());
"
92,correctTooHighOrTooLow,"    void correctTooHighOrTooLow() {

        final int count = getCount();

        if (count == 0) {
"
93,fillGap,"    void fillGap(boolean down) {

        final int count = getChildCount();
"
94,requestChildRectangleOnScreen,"    public boolean requestChildRectangleOnScreen(View child, Rect rect, boolean immediate) {

        rect.offset(child.getLeft(), child.getTop());

        rect.offset(-child.getScrollX(), -child.getScrollY());



        final int height = getHeight();

        int listUnfadedTop = getScrollY();

        int listUnfadedBottom = listUnfadedTop + height;
"
95,clearRecycledState,"    private void clearRecycledState(ArrayList<FixedViewInfo> infos) {

        if (infos != null) {"
96,resetList,"    void resetList() {

        clearRecycledState(mHeaderViewInfos);

        clearRecycledState(mFooterViewInfos);
"
97,setAdapter,"    public void setAdapter(ListAdapter adapter) {

        if (mAdapter != null && mDataSetObserver != null) {

            mAdapter.unregisterDataSetObserver(mDataSetObserver);

        }

        resetList();"
98,getAdapter,"    public ListAdapter getAdapter() {

        return mAdapter;"
99,removeFooterView,"    public boolean removeFooterView(View v) {

        if (mFooterViewInfos.size() > 0) {
"
100,getFooterViewsCount,"    public int getFooterViewsCount() {

        return mFooterViewInfos.size();"
101,addFooterView,"    public void addFooterView(View v) {

        addFooterView(v, null, true);"
102,addFooterView,"    public void addFooterView(View v, Object data, boolean isSelectable) {

        final FixedViewInfo info = new FixedViewInfo();

        info.view = v;

        info.data = data;
"
103,removeFixedViewInfo,"    private void removeFixedViewInfo(View v, ArrayList<FixedViewInfo> where) {

        int len = where.size();
"
104,removeHeaderView,"    public boolean removeHeaderView(View v) {

        if (mHeaderViewInfos.size() > 0) {
"
105,getHeaderViewsCount,"    public int getHeaderViewsCount() {

        return mHeaderViewInfos.size();"
106,addHeaderView,"    public void addHeaderView(View v) {

        addHeaderView(v, null, true);"
107,addHeaderView,"    public void addHeaderView(View v, Object data, boolean isSelectable) {

        final FixedViewInfo info = new FixedViewInfo();

        info.view = v;

        info.data = data;
"
108,adjustViewsUp,"    private void adjustViewsUp() {

        final int childCount = getChildCount();

        int delta;"
109,getMaxScrollAmount,"    public int getMaxScrollAmount() {

        return (int) (MAX_SCROLL_FACTOR * (getBottom() - getTop()));"
110,onInvalidated,"        public void onInvalidated() {

            mDataChanged = true;

            mOldItemCount = mItemCount;

            mItemCount = 0;"
111,onChanged,"        public void onChanged() {

            mDataChanged = true;

            mOldItemCount = mItemCount;

            mItemCount = getAdapter().getCount();"
112,isSupportHardwareAccelerated,"    protected boolean isSupportHardwareAccelerated() {

        return APIUtil.isSupport(11) && isHardwareAccelerated();"
114,onDetachedFromWindow,"    protected void onDetachedFromWindow() {

        super.onDetachedFromWindow();"
115,dispatchRestoreInstanceState,"    protected void dispatchRestoreInstanceState(SparseArray<Parcelable> container) {

        dispatchThawSelfOnly(container);"
116,dispatchSaveInstanceState,"    protected void dispatchSaveInstanceState(SparseArray<Parcelable> container) {

        dispatchFreezeSelfOnly(container);"
117,setOnClickListener,"    public void setOnClickListener(OnClickListener l) {

        throw new RuntimeException();"
118,getItemIdAtPosition,"    public long getItemIdAtPosition(int position) {

        T adapter = getAdapter();
"
119,getItemAtPosition,"    public Object getItemAtPosition(int position) {

        T adapter = getAdapter();
"
120,updateEmptyStatus,"    private void updateEmptyStatus(boolean empty) {

        if (empty) {"
121,checkFocus,"    void checkFocus() {

        final T adapter = getAdapter();

        final boolean empty = adapter == null || adapter.getCount() == 0;

        final boolean focusable = !empty;
"
122,setFocusableInTouchMode,"    public void setFocusableInTouchMode(boolean focusable) {

        final T adapter = getAdapter();

        final boolean empty = adapter == null || adapter.getCount() == 0;

        mDesiredFocusableInTouchModeState = focusable;"
123,setFocusable,"    public void setFocusable(boolean focusable) {

        final T adapter = getAdapter();

        final boolean empty = adapter == null || adapter.getCount() == 0;

"
124,setEmptyView,"    public void setEmptyView(View emptyView) {

        mEmptyView = emptyView;


"
125,getEmptyView,"    public View getEmptyView() {

        return mEmptyView;"
126,getLastVisiblePosition,"    public int getLastVisiblePosition() {

        return mFirstPosition + getChildCount() - 1;"
127,getFirstVisiblePosition,"    public int getFirstVisiblePosition() {

        return mFirstPosition;"
128,getPositionForView,"    public int getPositionForView(View view) {

        View listItem = view;

        try {

            View v;"
129,getCount,"    public int getCount() {

        return mItemCount;"
130,removeAllViews,"    public void removeAllViews() {

        throw new UnsupportedOperationException();"
131,removeViewAt,"    public void removeViewAt(int index) {

        throw new UnsupportedOperationException();"
132,removeView,"    public void removeView(View child) {

        throw new UnsupportedOperationException();"
133,addView,"    public void addView(View child, int index, LayoutParams params) {

        throw new UnsupportedOperationException();"
134,addView,"    public void addView(View child, LayoutParams params) {

        throw new UnsupportedOperationException();"
135,addView,"    public void addView(View child, int index) {

        throw new UnsupportedOperationException();"
136,addView,"    public void addView(View child) {

        throw new UnsupportedOperationException();"
137,setAdapter,"    public abstract void setAdapter(T adapter);
"
139,setOnItemLongClickListener,"    public void setOnItemLongClickListener(OnItemLongClickListener listener) {

        if (!isLongClickable()) {
"
140,getOnItemLongClickListener,"    public final OnItemLongClickListener getOnItemLongClickListener() {

        return mOnItemLongClickListener;"
141,performItemClick,"    public boolean performItemClick(View view, int position, long id) {

        if (mOnItemClickListener != null) {
"
142,setOnItemClickListener,"    public void setOnItemClickListener(OnItemClickListener listener) {

        mOnItemClickListener = listener;"
143,getOnItemClickListener,"    public final OnItemClickListener getOnItemClickListener() {

        return mOnItemClickListener;"
144,setCacheColorHint,"		void setCacheColorHint(int color) {
			if (mViewTypeCount == 1) {
				final ArrayList<View> scrap = mCurrentScrap;
				final int scrapCount = scrap.size();
				for (int i = 0; i < scrapCount; i++) {
					scrap.get(i).setDrawingCacheBackgroundColor(color);"
145,reclaimScrapViews,"		void reclaimScrapViews(List<View> views) {
			if (mViewTypeCount == 1) {
				views.addAll(mCurrentScrap);"
146,pruneScrapViews,"		private void pruneScrapViews() {
			final int maxViews = mActiveViews.length;
			final int viewTypeCount = mViewTypeCount;
			final ArrayList<View>[] scrapViews = mScrapViews;
			for (int i = 0; i < viewTypeCount; ++i) {
				final ArrayList<View> scrapPile = scrapViews[i];
				int size = scrapPile.size();"
147,scrapActiveViews,"		void scrapActiveViews() {
			final View[] activeViews = mActiveViews;
			final boolean hasListener = mRecyclerListener != null;
			final boolean multipleScraps = mViewTypeCount > 1;
			ArrayList<View> scrapViews = mCurrentScrap;
			final int count = activeViews.length;
			for (int i = count - 1; i >= 0; i--) {
				final View victim = activeViews[i];
				if (victim != null) {"
148,removeSkippedScrap,"		void removeSkippedScrap() {
			if (mSkippedScrap == null) {
				return;
			}
			final int count = mSkippedScrap.size();
			for (int i = 0; i < count; i++) {"
149,addScrapView,"		void addScrapView(View scrap, int position) {
			final LayoutParams lp = (LayoutParams) scrap.getLayoutParams();
			if (lp == null) {
				return;
			}
			lp.scrappedFromPosition = position;
			final int viewType = lp.viewType;
			if (!shouldRecycleViewType(viewType)) {
				return;"
150,getScrapView,"		View getScrapView(int position) {
			if (mViewTypeCount == 1) {
				return retrieveFromScrap(mCurrentScrap, position);
			} else {"
151,clearTransientStateViews,"		void clearTransientStateViews() {
			if (mTransientStateViews != null) {
				mTransientStateViews.clear();
			}"
152,getTransientStateView,"		View getTransientStateView(int position) {
			if (mAdapter != null && mAdapterHasStableIds
					&& mTransientStateViewsById != null) {
				long id = mAdapter.getItemId(position);
				View result = mTransientStateViewsById.get(id);"
153,getActiveView,"		View getActiveView(int position) {
			int index = position - mFirstActivePosition;
			final View[] activeViews = mActiveViews;
			if (index >= 0 && index < activeViews.length) {
				final View match = activeViews[index];
				activeViews[index] = null;"
154,fillActiveViews,"		void fillActiveViews(int childCount, int firstActivePosition) {
			if (mActiveViews.length < childCount) {
				mActiveViews = new View[childCount];
			}
			mFirstActivePosition = firstActivePosition;
			final View[] activeViews = mActiveViews;"
155,clear,"		void clear() {
			if (mViewTypeCount == 1) {
				final ArrayList<View> scrap = mCurrentScrap;
				final int scrapCount = scrap.size();
				for (int i = 0; i < scrapCount; i++) {"
156,shouldRecycleViewType,"		public boolean shouldRecycleViewType(int viewType) {
			return viewType >= 0;
		}"
157,markChildrenDirty,"		public void markChildrenDirty() {
			if (mViewTypeCount == 1) {
				final ArrayList<View> scrap = mCurrentScrap;
				final int scrapCount = scrap.size();
				for (int i = 0; i < scrapCount; i++) {"
158,setViewTypeCount,"		public void setViewTypeCount(int viewTypeCount) {
			if (viewTypeCount < 1) {
				throw new IllegalArgumentException(
						""Can't have a viewTypeCount < 1"");
			}
			ArrayList<View>[] scrapViews = new ArrayList[viewTypeCount];
			for (int i = 0; i < viewTypeCount; i++) {
				scrapViews[i] = new ArrayList<View>();"
161,run,"		public void run() {
			switch (mTouchMode) {
			default:"
163,endFling,"		void endFling() {
			int oldTouchMode = mTouchMode;
			mTouchMode = TOUCH_MODE_REST;
			removeCallbacks(this);
			reportScrollStateChange(OnScrollListener.SCROLL_STATE_IDLE);
			clearScrollingCache();
			mScroller.abortAnimation();

			if (mZrcHeader != null && oldTouchMode == TOUCH_MODE_RESCROLL"
164,startScroll,"		void startScroll(int distance, int duration, boolean linear) {
			if (!mScroller.isFinished()) {
				mScroller.abortAnimation();
			}
			int initialY = distance < 0 ? Integer.MAX_VALUE : 0;
			mLastFlingY = initialY;
			mScroller.startScroll(0, initialY, 0, distance, duration);
			mTouchMode = TOUCH_MODE_FLING;"
165,start,"		void start(int initialVelocity) {
			if (!mScroller.isFinished()) {
				mScroller.abortAnimation();
			}
			int initialY = initialVelocity < 0 ? Integer.MAX_VALUE : 0;
			mLastFlingY = initialY;
			mScroller.fling(0, initialY, 0, initialVelocity, 0,
					Integer.MAX_VALUE, 0, Integer.MAX_VALUE);"
166,getInterpolation,"				public float getInterpolation(float t) {
					t -= 1;
					return t * t * t * t * t + 1;
				}"
167,run,"		public void run() {
			final int motionPosition = mMotionPosition;
			final View child = getChildAt(motionPosition - mFirstPosition);
			if (child != null) {
				final int longPressPosition = mMotionPosition;"
168,run,"		public void run() {
			if (mTouchMode == TOUCH_MODE_DOWN) {
				mTouchMode = TOUCH_MODE_TAP;"
169,run,"		public void run() {
			if (mDataChanged) {
				return;
			}
			final ListAdapter adapter = mAdapter;
			final int motionPosition = mClickMotionPosition;"
170,sameWindow,"		public boolean sameWindow() {
			return getWindowAttachCount() == mOriginalAttachCount;
		}"
171,rememberWindowAttachCount,"		public void rememberWindowAttachCount() {
			mOriginalAttachCount = getWindowAttachCount();
		}"
172,toString,"		public String toString() {
			return ""AbsListView.SavedState{""
					+ Integer.toHexString(System.identityHashCode(this))"
174,newArray,"			public SavedState[] newArray(int size) {
				return new SavedState[size];
			}"
175,createFromParcel,"			public SavedState createFromParcel(Parcel in) {
				return new SavedState(in);
			}"
177,onRestoreInstanceState,"	public void onRestoreInstanceState(Parcelable state) {
		SavedState ss = (SavedState) state;
		super.onRestoreInstanceState(ss.getSuperState());
		mFirstPosition = ss.mFirstPosition;
		requestLayout();
		if (mFlingRunnable != null) {
			mFlingRunnable.scrollToAdjustViewsUpOrDown();"
178,onSaveInstanceState,"	public Parcelable onSaveInstanceState() {
		Parcelable superState = super.onSaveInstanceState();
		SavedState ss = new SavedState(superState);
		ss.mFirstPosition = mFirstPosition;
		return ss;
	}"
179,setLastBottomOffset,"	public void setLastBottomOffset(int offset) {
		this.mLastBottomOffset = offset;
	}"
180,setFirstTopOffset,"	public void setFirstTopOffset(int offset) {
		this.mFirstTopOffset = offset;
	}"
181,setFootable,"	public void setFootable(Footable footer) {
		this.mZrcFooter = footer;
	}"
182,getFootable,"	public Footable getFootable() {
		return mZrcFooter;
	}"
183,setHeadable,"	public void setHeadable(Headable header) {
		this.mZrcHeader = header;
	}"
184,getHeadable,"	public Headable getHeadable() {
		return mZrcHeader;
	}"
185,run,"				public void run() {
					if (mFlingRunnable != null /*
												 * && mTouchMode !="
186,setRefreshDone,"	private void setRefreshDone(String msg, int state) {
		final Headable zrcHeader = mZrcHeader;
		if (zrcHeader != null && zrcHeader.getState() == Headable.STATE_LOADING) {
			isRefreshing = false;"
187,reset,"	public void reset() {
		if (mZrcHeader != null) {
			mZrcHeader.stateChange(Headable.STATE_REST, """");"
188,setRefreshFail,"	public void setRefreshFail(String msg) {
		setRefreshDone(msg, Headable.STATE_FAIL);
	}"
190,setRefreshSuccess,"	public void setRefreshSuccess(String msg) {
		setRefreshDone(msg, Headable.STATE_SUCCESS);
	}"
192,setOnScrollStateListener,"	public void setOnScrollStateListener(OnScrollStateListener onScrollListener) {
		this.onScrollStateListener = onScrollListener;
	}"
193,setOnLoadMoreStartListener,"	public void setOnLoadMoreStartListener(OnStartListener onStart) {
		this.onLoadMoreStart = onStart;
	}"
194,setOnRefreshStartListener,"	public void setOnRefreshStartListener(OnStartListener onStart) {
		this.onRefreshStart = onStart;
	}"
195,setRecyclerListener,"	protected void setRecyclerListener(RecyclerListener listener) {
		mRecycler.mRecyclerListener = listener;
	}"
196,run,"			public void run() {
				if (mZrcHeader == null
						|| mZrcHeader.getState() == Headable.STATE_LOADING
						|| onRefreshStart == null"
197,refresh,"	public void refresh() {
		post(new Runnable() {
			@Override"
198,stopLoadMore,"	public void stopLoadMore() {
		isLoadingMore = false;
		isLoadMoreOn = false;
		if (mFlingRunnable != null) {
			mFlingRunnable.scrollToAdjustViewsUpOrDown();"
199,setLoadMoreSuccess,"	public void setLoadMoreSuccess() {
		isLoadingMore = false;
	}"
200,startLoadMore,"	public void startLoadMore() {
		isLoadingMore = false;
		isLoadMoreOn = true;
	}"
201,reclaimViews,"	public void reclaimViews(List<View> views) {
		int childCount = getChildCount();
		RecyclerListener listener = mRecycler.mRecyclerListener;
		for (int i = 0; i < childCount; i++) {
			View child = getChildAt(i);
			LayoutParams lp = (LayoutParams) child.getLayoutParams();
			if (lp != null && mRecycler.shouldRecycleViewType(lp.viewType)) {"
202,setCacheColorHint,"	public void setCacheColorHint(int color) {
		if (color != mCacheColorHint) {
			mCacheColorHint = color;"
203,getCacheColorHint,"	public int getCacheColorHint() {
		return mCacheColorHint;
	}"
204,getSolidColor,"	public int getSolidColor() {
		return mCacheColorHint;
	}"
205,setTranscriptMode,"	public void setTranscriptMode(int mode) {
		mTranscriptMode = mode;
	}"
206,getTranscriptMode,"	public int getTranscriptMode() {
		return mTranscriptMode;
	}"
207,checkLayoutParams,"	protected boolean checkLayoutParams(ViewGroup.LayoutParams p) {
		return p instanceof LayoutParams;
	}"
208,generateLayoutParams,"	public LayoutParams generateLayoutParams(AttributeSet attrs) {
		return new LayoutParams(getContext(), attrs);
	}"
209,generateLayoutParams,"	protected ViewGroup.LayoutParams generateLayoutParams(
			ViewGroup.LayoutParams p) {
		return new LayoutParams(p);"
210,generateDefaultLayoutParams,"	protected ViewGroup.LayoutParams generateDefaultLayoutParams() {
		return new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
				ViewGroup.LayoutParams.WRAP_CONTENT, 0);"
212,invalidateViews,"	public void invalidateViews() {
		mDataChanged = true;
		requestLayout();
		invalidate();
	}"
213,findClosestMotionRow,"	int findClosestMotionRow(int y) {
		final int childCount = getChildCount();
		if (childCount == 0) {
			return INVALID_POSITION;
		}
		final int motionRow = findMotionRow(y);"
218,offsetChildrenTopAndBottom,"	public void offsetChildrenTopAndBottom(int offset) {
		final int count = getChildCount();
		for (int i = 0; i < count; i++) {
			final View v = getChildAt(i);"
220,canScrollList,"	public boolean canScrollList(int direction) {
		final int childCount = getChildCount();
		if (childCount == 0) {
			return false;
		}
		final int firstPosition = mFirstPosition;
		final Rect listPadding = mListPadding;"
221,scrollListBy,"	public void scrollListBy(int y) {
		trackMotionScroll(-y, -y);
	}"
222,run,"					public void run() {
						if (mCachingStarted) {
							mCachingStarted = mCachingActive = false;"
223,clearScrollingCache,"	private void clearScrollingCache() {
		if (!isSupportHardwareAccelerated()) {
			if (mClearScrollingCache == null) {"
224,createScrollingCache,"	private void createScrollingCache() {
		if (mScrollingCacheEnabled && !mCachingStarted
				&& !isSupportHardwareAccelerated()) {"
225,smoothScrollBy,"	void smoothScrollBy(int distance, int duration, boolean linear) {
		if (mFlingRunnable == null) {
			mFlingRunnable = new FlingRunnable();
		}
		final int firstPos = mFirstPosition;
		final int childCount = getChildCount();
		final int lastPos = firstPos + childCount;
		final int topLimit = getPaddingTop();
		final int bottomLimit = getHeight() - getPaddingBottom();"
226,smoothScrollBy,"	public void smoothScrollBy(int distance, int duration) {
		smoothScrollBy(distance, duration, false);
	}"
227,setVelocityScale,"	public void setVelocityScale(float scale) {
		mVelocityScale = scale;
	}"
228,setFriction,"	public void setFriction(float friction) {
		if (mFlingRunnable == null) {
			mFlingRunnable = new FlingRunnable();
		}"
229,scrollToAdjustViewsUpOrDown,"	protected void scrollToAdjustViewsUpOrDown() {
		if (mFlingRunnable != null) {
			mFlingRunnable.scrollToAdjustViewsUpOrDown();"
230,reportScrollStateChange,"	void reportScrollStateChange(int newState) {
		if (newState != mLastScrollState) {
			if (mOnScrollListener != null) {"
231,addTouchables,"	public void addTouchables(ArrayList<View> views) {
		final int count = getChildCount();
		final int firstPosition = mFirstPosition;
		final ListAdapter adapter = mAdapter;
		if (adapter == null) {
			return;
		}"
232,onSecondaryPointerUp,"	private void onSecondaryPointerUp(MotionEvent ev) {
		final int pointerIndex = (ev.getAction() & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
		final int pointerId = ev.getPointerId(pointerIndex);
		if (pointerId == mActivePointerId) {
			final int newPointerIndex = pointerIndex == 0 ? 1 : 0;"
233,onInterceptTouchEvent,"	public boolean onInterceptTouchEvent(MotionEvent ev) {
		int action = ev.getAction();
		if (!mIsAttached) {
			return false;
		}
		switch (action & MotionEvent.ACTION_MASK) {"
234,requestDisallowInterceptTouchEvent,"	public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
		if (disallowIntercept) {
			recycleVelocityTracker();
		}"
235,recycleVelocityTracker,"	private void recycleVelocityTracker() {
		if (mVelocityTracker != null) {
			mVelocityTracker.recycle();"
236,initVelocityTrackerIfNotExists,"	private void initVelocityTrackerIfNotExists() {
		if (mVelocityTracker == null) {
			mVelocityTracker = VelocityTracker.obtain();"
237,initOrResetVelocityTracker,"	private void initOrResetVelocityTracker() {
		if (mVelocityTracker == null) {
			mVelocityTracker = VelocityTracker.obtain();"
238,setScrollY,"	public void setScrollY(int y) {
		if (APIUtil.isSupport(14)) {
			super.setScrollY(y);"
239,getVerticalScrollFactor,"	protected float getVerticalScrollFactor() {
		if (mVerticalScrollFactor == 0) {
			mVerticalScrollFactor = 64 * getResources().getDisplayMetrics().density;
		}"
240,onGenericMotionEvent,"	public boolean onGenericMotionEvent(MotionEvent event) {
		if (APIUtil.isSupport(12)) {
			if ((event.getSource() & InputDevice.SOURCE_CLASS_POINTER) != 0) {
				switch (event.getAction()) {"
241,invalidateParentIfNeeded,"	protected void invalidateParentIfNeeded() {
		if (getParent() instanceof View) {
			((View) getParent()).invalidate();"
242,onTouchCancel,"	private void onTouchCancel() {
		mTouchMode = TOUCH_MODE_REST;
		setPressed(false);
		final View motionView = getChildCount() == 0 ? null : this
				.getChildAt(mMotionPosition - mFirstPosition);
		if (motionView != null) {
			motionView.setPressed(false);
		}
		clearScrollingCache();
		recycleVelocityTracker();
		mSelectorPosition = INVALID_POSITION;
		invalidate();"
243,run,"								public void run() {
									mTouchModeReset = null;
									mTouchMode = TOUCH_MODE_REST;
									child.setPressed(false);
									setPressed(false);
									invalidate();
									if (!mDataChanged && mIsAttached) {
										performClick.run();"
244,onTouchUp,"	private void onTouchUp(MotionEvent ev) {
		switch (mTouchMode) {
		case TOUCH_MODE_DOWN:
		case TOUCH_MODE_TAP:
		case TOUCH_MODE_DONE_WAITING:
			final int motionPosition = mMotionPosition;
			final View child = getChildCount() == 0 ? null"
245,onTouchMove,"	private void onTouchMove(MotionEvent ev) {
		if (mTouchMode == TOUCH_MODE_INVALID) {
			mTouchMode = TOUCH_MODE_SCROLL;
		}
		int pointerIndex = ev.findPointerIndex(mActivePointerId);
		if (pointerIndex == -1) {
			pointerIndex = 0;
			mActivePointerId = ev.getPointerId(pointerIndex);
		}"
246,onTouchDown,"	private void onTouchDown(MotionEvent ev) {
		mActivePointerId = ev.getPointerId(0);
		final int x = (int) ev.getX();
		final int y = (int) ev.getY();
		int motionPosition = pointToPosition(x, y);
		if (!mDataChanged) {
			if (mTouchMode == TOUCH_MODE_FLING
					|| mTouchMode == TOUCH_MODE_RESCROLL) {
				createScrollingCache();
				mFlingRunnable.mScroller.abortAnimation();
				mTouchMode = TOUCH_MODE_SCROLL;"
247,onTouchEvent,"	public boolean onTouchEvent(MotionEvent ev) {
		try {
			if (!isEnabled()) {"
248,onTouchModeChanged,"	public void onTouchModeChanged(boolean isInTouchMode) {
		if (isInTouchMode) {
			if (getHeight() > 0 && getChildCount() > 0) {"
249,scrollIfNeeded,"	private void scrollIfNeeded(int x, int y) {
		final int rawDeltaY = y - mMotionY;
		final int deltaY = rawDeltaY - mMotionCorrection;
		int incrementalDeltaY = mLastY != Integer.MIN_VALUE ? y - mLastY
				: deltaY;
		if (mTouchMode == TOUCH_MODE_SCROLL) {"
250,startScrollIfNeeded,"	private boolean startScrollIfNeeded(int x, int y) {
		final int deltaX = x - mMotionX;
		final int distanceX = Math.abs(deltaX);
		final int deltaY = y - mMotionY;
		final int distanceY = Math.abs(deltaY);
		if (distanceX > mTouchSlop || distanceY > mTouchSlop) {
			if (distanceY > distanceX * 2) {
				createScrollingCache();"
251,pointToRowId,"	public long pointToRowId(int x, int y) {
		int position = pointToPosition(x, y);
		if (position >= 0) {
			return mAdapter.getItemId(position);
		}"
252,pointToPosition,"	public int pointToPosition(int x, int y) {
		Rect frame = mTouchFrame;
		if (frame == null) {
			mTouchFrame = new Rect();
			frame = mTouchFrame;
		}
		final int count = getChildCount();"
253,dispatchSetPressed,"	protected void dispatchSetPressed(boolean pressed) {
	}"
254,performLongPress,"	boolean performLongPress(final View child, final int longPressPosition,
			final long longPressId) {
		boolean handled = false;
		if (mOnItemLongClickListener != null) {
			handled = mOnItemLongClickListener.onItemLongClick(
					(ZrcListView) this, child, longPressPosition, longPressId);"
255,onWindowFocusChanged,"	public void onWindowFocusChanged(boolean hasWindowFocus) {
		super.onWindowFocusChanged(hasWindowFocus);
		final int touchMode = isInTouchMode() ? TOUCH_MODE_ON : TOUCH_MODE_OFF;
		if (!hasWindowFocus) {
			setChildrenDrawingCacheEnabled(false);
		} else {"
256,onDetachedFromWindow,"	protected void onDetachedFromWindow() {
		super.onDetachedFromWindow();
		mRecycler.clear();
		if (mAdapter != null && mDataSetObserver != null) {
			mAdapter.unregisterDataSetObserver(mDataSetObserver);
			mDataSetObserver = null;
		}
		if (mClearScrollingCache != null) {
			removeCallbacks(mClearScrollingCache);"
257,onAttachedToWindow,"	protected void onAttachedToWindow() {
		super.onAttachedToWindow();
		if (mAdapter != null && mDataSetObserver == null) {
			mDataSetObserver = new AdapterDataSetObserver();
			mAdapter.registerDataSetObserver(mDataSetObserver);
			mDataChanged = true;"
258,jumpDrawablesToCurrentState,"	public void jumpDrawablesToCurrentState() {
		super.jumpDrawablesToCurrentState();
		if (APIUtil.isSupport(11) && mSelector != null) {
			mSelector.jumpToCurrentState();"
259,verifyDrawable,"	public boolean verifyDrawable(Drawable dr) {
		return mSelector == dr || super.verifyDrawable(dr);
	}"
260,onCreateDrawableState,"	protected int[] onCreateDrawableState(int extraSpace) {
		if (mIsChildViewEnabled) {
			return super.onCreateDrawableState(extraSpace);
		}
		final int enabledState = ENABLED_STATE_SET[0];
		int[] state = super.onCreateDrawableState(extraSpace + 1);
		int enabledPos = -1;
		for (int i = state.length - 1; i >= 0; i--) {
			if (state[i] == enabledState) {"
261,drawableStateChanged,"	protected void drawableStateChanged() {
		super.drawableStateChanged();
		updateSelectorState();
	}"
262,updateSelectorState,"	void updateSelectorState() {
		if (mSelector != null) {
			if (shouldShowSelector()) {"
263,setScrollIndicators,"	public void setScrollIndicators(View up, View down) {
		mScrollUp = up;
		mScrollDown = down;
	}"
264,setSelector,"	public void setSelector(Drawable sel) {
		if (mSelector != null) {
			mSelector.setCallback(null);
			unscheduleDrawable(mSelector);
		}
		mSelector = sel;"
265,getSelector,"	public Drawable getSelector() {
		return mSelector;
	}"
266,setSelector,"	public void setSelector(int resID) {
		setSelector(getResources().getDrawable(resID));
	}"
267,setDrawSelectorOnTop,"	public void setDrawSelectorOnTop(boolean onTop) {
		mDrawSelectorOnTop = onTop;
	}"
268,drawSelector,"	private void drawSelector(Canvas canvas) {
		if (!mSelectorRect.isEmpty()) {
			final Drawable selector = mSelector;"
269,shouldShowSelector,"	boolean shouldShowSelector() {
		return (!isInTouchMode())
				|| (touchModeDrawsInPressedState() && isPressed());"
270,touchModeDrawsInPressedState,"	boolean touchModeDrawsInPressedState() {
		switch (mTouchMode) {
		case TOUCH_MODE_TAP:"
271,onSizeChanged,"	protected void onSizeChanged(int w, int h, int oldw, int oldh) {
		if (getChildCount() > 0) {
			mDataChanged = true;"
272,getBottomPaddingOffset,"	protected int getBottomPaddingOffset() {
		return getPaddingBottom();
	}"
273,getRightPaddingOffset,"	protected int getRightPaddingOffset() {
		return getPaddingRight();
	}"
274,getTopPaddingOffset,"	protected int getTopPaddingOffset() {
		return getPaddingTop();
	}"
275,getLeftPaddingOffset,"	protected int getLeftPaddingOffset() {
		return getPaddingLeft();
	}"
277,positionSelector,"	void positionSelector(int position, View sel) {
		if (position != INVALID_POSITION) {
			mSelectorPosition = position;
		}
		final Rect selectorRect = mSelectorRect;
		invalidate(selectorRect);
		selectorRect.set(sel.getLeft(), sel.getTop(), sel.getRight(),
				sel.getBottom());
		invalidate(selectorRect);"
278,obtainView,"	View obtainView(int position, boolean[] isScrap) {
		isScrap[0] = false;
		View scrapView;
		scrapView = mRecycler.getTransientStateView(position);
		if (scrapView == null) {
			scrapView = mRecycler.getScrapView(position);
		}
		View child;
		if (scrapView != null) {
			child = mAdapter.getView(position, scrapView, this);"
279,getListPaddingRight,"	public int getListPaddingRight() {
		return mListPadding.right;
	}"
280,getListPaddingLeft,"	public int getListPaddingLeft() {
		return mListPadding.left;
	}"
281,getListPaddingBottom,"	public int getListPaddingBottom() {
		return mListPadding.bottom;
	}"
282,getListPaddingTop,"	public int getListPaddingTop() {
		return mListPadding.top;
	}"
283,updateScrollIndicators,"	void updateScrollIndicators() {
		if (mScrollUp != null) {
			boolean canScrollUp;
			canScrollUp = mFirstPosition > 0;"
285,onLayout,"	protected void onLayout(boolean changed, int l, int t, int r, int b) {
		mInLayout = true;
		if (changed) {
			int childCount = getChildCount();
			for (int i = 0; i < childCount; i++) {
				getChildAt(i).forceLayout();"
286,onMeasure,"	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		if (mSelector == null) {
			useDefaultSelector();
		}
		final Rect listPadding = mListPadding;
		listPadding.left = getPaddingLeft();
		listPadding.top = getPaddingTop();
		listPadding.right = getPaddingRight();"
287,computeVerticalScrollRange,"	protected int computeVerticalScrollRange() {
		int result;
		if (mSmoothScrollbarEnabled) {
			result = Math.max(getHeight() * 10, 0);
		} else {"
288,computeVerticalScrollOffset,"	protected int computeVerticalScrollOffset() {
		final int firstPosition = mFirstPosition;
		final int childCount = getChildCount();
		final int mScrollY = getScrollY();
		if (firstPosition >= 0 && childCount > 0) {
			if (mSmoothScrollbarEnabled) {
				final View view = getChildAt(0);"
289,computeVerticalScrollExtent,"	protected int computeVerticalScrollExtent() {
		final int count = getChildCount();
		if (count > 0) {
			if (mSmoothScrollbarEnabled) {
				final int range = (getHeight() - mFirstTopOffset - mLastBottomOffset) * 10;"
290,resetList,"	void resetList() {
		removeAllViewsInLayout();
		mFirstPosition = 0;
		mFirstTop = mFirstTopOffset + mListPadding.top;
		mDataChanged = false;
		mPositionScrollAfterLayout = null;
		mSelectorPosition = INVALID_POSITION;
		mSelectorRect.setEmpty();
		invalidate();
	}"
291,requestLayout,"	public void requestLayout() {
		if (!mBlockLayoutRequests && !mInLayout) {
			super.requestLayout();"
292,onFocusChanged,"	protected void onFocusChanged(boolean gainFocus, int direction,
			Rect previouslyFocusedRect) {
		super.onFocusChanged(gainFocus, direction, previouslyFocusedRect);
		if (gainFocus && !isInTouchMode()) {"
293,requestLayoutIfNecessary,"	void requestLayoutIfNecessary() {
		if (getChildCount() > 0) {
			resetList();"
294,useDefaultSelector,"	private void useDefaultSelector() {
		setSelector(getResources().getDrawable(
				android.R.drawable.list_selector_background));"
295,getFocusedRect,"	public void getFocusedRect(Rect r) {
		super.getFocusedRect(r);
	}"
296,setScrollingCacheEnabled,"	public void setScrollingCacheEnabled(boolean enabled) {
		if (mScrollingCacheEnabled && !enabled) {
			clearScrollingCache();
		}"
297,isScrollingCacheEnabled,"	public boolean isScrollingCacheEnabled() {
		return mScrollingCacheEnabled;
	}"
298,invokeOnItemScrollListener,"	void invokeOnItemScrollListener() {
		if (mOnScrollListener != null) {
			mOnScrollListener.onScroll(this, mFirstPosition, getChildCount(),
					mItemCount);"
299,setOnScrollListener,"	public void setOnScrollListener(OnScrollListener l) {
		mOnScrollListener = l;
		invokeOnItemScrollListener();
	}"
300,setSmoothScrollbarEnabled,"	public void setSmoothScrollbarEnabled(boolean enabled) {
		mSmoothScrollbarEnabled = enabled;
	}"
301,isSmoothScrollbarEnabled,"	public boolean isSmoothScrollbarEnabled() {
		return mSmoothScrollbarEnabled;
	}"
302,performItemClick,"	public boolean performItemClick(View view, int position, long id) {
		boolean handled = false;
		boolean dispatchItemClick = true;
		if (dispatchItemClick) {
			handled |= super.performItemClick(view, position, id);
		}"
303,setAdapter,"	public void setAdapter(ListAdapter adapter) {
		if (adapter != null) {
			mAdapterHasStableIds = mAdapter.hasStableIds();"
305,retrieveFromScrap,"	static View retrieveFromScrap(ArrayList<View> scrapViews, int position) {
		int size = scrapViews.size();
		if (size > 0) {
			for (int i = 0; i < size; i++) {"
306,getDistance,"	static int getDistance(Rect source, Rect dest, int direction) {
		int sX, sY;
		int dX, dY;
		switch (direction) {
		case View.FOCUS_RIGHT:
			sX = source.right;
			sY = source.top + source.height() / 2;
			dX = dest.left;"
307,run,"		public void run() {
			mZrcHeader.stateChange(Headable.STATE_REST, null);
		}"
308,getHeight,"    public int getHeight() {

        return mHeight;"
309,toastResultInOtherWay,"    public void toastResultInOtherWay(Context context, int state) {

        if (state == Headable.STATE_SUCCESS) {"
310,draw,"    public boolean draw(Canvas canvas, int left, int top, int right, int bottom) {

        boolean more = false;

        final int width = right - left;

        final int height = mHeight;

        final int offset = bottom - top;

        canvas.save();"
311,getState,"    public int getState() {

        return mState;"
312,stateChange,"    public void stateChange(int state, String msg) {

        if (mState != state) {

            mTime = 0;"
313,setIsClipCanvas,"    public void setIsClipCanvas(boolean bool) {

        isClipCanvas = bool;"
314,setCircleColor,"    public void setCircleColor(int color) {

        mPointColor = color;"
315,setTextColor,"    public void setTextColor(int color) {

        mTextColor = color;"
317,draw,"    public boolean draw(Canvas canvas, int left, int top, int right, int bottom) {

        final int width = right - left;

        final int height = mHeight;

        final int viewHeight = bottom - top;

        canvas.save();

        canvas.clipRect(left + 5, top + 1, right + 5, bottom - 1);
"
318,setCircleColor,"    public void setCircleColor(int color) {

        mCircleColor = color;"
319,getWrappedAdapter,"    public ListAdapter getWrappedAdapter() {
        return mAdapter;
    }"
320,unregisterDataSetObserver,"    public void unregisterDataSetObserver(DataSetObserver observer) {
        if (mAdapter != null) {
            mAdapter.unregisterDataSetObserver(observer);"
321,registerDataSetObserver,"    public void registerDataSetObserver(DataSetObserver observer) {
        if (mAdapter != null) {
            mAdapter.registerDataSetObserver(observer);"
322,getViewTypeCount,"    public int getViewTypeCount() {
        if (mAdapter != null) {
            return mAdapter.getViewTypeCount();
        }"
323,getItemViewType,"    public int getItemViewType(int position) {
        int numHeaders = getHeadersCount();
        if (mAdapter != null && position >= numHeaders) {
            int adjPosition = position - numHeaders;
            int adapterCount = mAdapter.getCount();"
325,hasStableIds,"    public boolean hasStableIds() {
        if (mAdapter != null) {
            return mAdapter.hasStableIds();
        }"
326,getItemId,"    public long getItemId(int position) {
        int numHeaders = getHeadersCount();
        if (mAdapter != null && position >= numHeaders) {
            int adjPosition = position - numHeaders;
            int adapterCount = mAdapter.getCount();"
329,areAllItemsEnabled,"    public boolean areAllItemsEnabled() {
        if (mAdapter != null) {
            return mAreAllFixedViewsSelectable && mAdapter.areAllItemsEnabled();"
330,getCount,"    public int getCount() {
        if (mAdapter != null) {
            return getFootersCount() + getHeadersCount() + mAdapter.getCount();"
331,removeFooter,"    public boolean removeFooter(View v) {
        for (int i = 0; i < mFooterViewInfos.size(); i++) {
            ZrcListView.FixedViewInfo info = mFooterViewInfos.get(i);
            if (info.view == v) {"
332,removeHeader,"    public boolean removeHeader(View v) {
        for (int i = 0; i < mHeaderViewInfos.size(); i++) {
            ZrcListView.FixedViewInfo info = mHeaderViewInfos.get(i);
            if (info.view == v) {"
333,areAllListInfosSelectable,"    private boolean areAllListInfosSelectable(ArrayList<ZrcListView.FixedViewInfo> infos) {
        if (infos != null) {
            for (ZrcListView.FixedViewInfo info : infos) {
                if (!info.isSelectable) {"
334,isEmpty,"    public boolean isEmpty() {
        return mAdapter == null || mAdapter.isEmpty();
    }"
335,getFootersCount,"    public int getFootersCount() {
        return mFooterViewInfos.size();
    }"
336,getHeadersCount,"    public int getHeadersCount() {
        return mHeaderViewInfos.size();
    }"
338,toastResultInOtherWay,"    void toastResultInOtherWay(Context context, int state);
"
339,draw,"    boolean draw(Canvas canvas, int left, int top, int right, int bottom);
"
344,isEnablePlatformVerification,"  public boolean isEnablePlatformVerification() {
    return enablePlatformVerification;
  }"
345,getUnregisterIfStillDownAfter,"  public Integer getUnregisterIfStillDownAfter() {
    return unregisterIfStillDownAfter;
  }"
346,getRegisterCycle,"  public Integer getRegisterCycle() {
    return registerCycle;
  }"
347,getRegister,"  public Boolean getRegister() {
    return register;
  }"
348,getProxy,"  public String getProxy() {
    return proxy;
  }"
349,getNodeStatusCheckTimeout,"  public Integer getNodeStatusCheckTimeout() {
    return nodeStatusCheckTimeout;
  }"
350,getNodePolling,"  public Integer getNodePolling() {
    return nodePolling;
  }"
351,getHub,"  public String getHub() {
    return hub;
  }"
352,getDownPollingLimit,"  public Integer getDownPollingLimit() {
    return downPollingLimit;
  }"
353,getMaxSession,"  public Integer getMaxSession() {
    return maxSession;
  }"
354,getCapabilities,"  public List<MutableCapabilities> getCapabilities() {
    return capabilities;
  }"
356,getHubPort,"  public Integer getHubPort() {
    return hubPort;
  }"
357,getHubHost,"  public String getHubHost() {
    return hubHost;
  }"
358,loadFromResourceOrFile,"  public static NodeJsonConfiguration loadFromResourceOrFile(String source) {
    NodeJsonConfiguration config = fromResourceOrFile(source, NodeJsonConfiguration.class);

    if (config.configuration != null) {
      throw new GridConfigurationException(
          ""Deprecated -nodeConfig file encountered. Please update the file to work with Selenium 3. """
359,loadFromJson,"  public static NodeJsonConfiguration loadFromJson(JsonInput source) {
    NodeJsonConfiguration config = fromJson(source, NodeJsonConfiguration.class);

    if (config.configuration != null) {
      throw new GridConfigurationException(
          ""Deprecated -nodeConfig file encountered. Please update the file to work with Selenium 3. """
360,getWithoutServlets,"  public List<String> getWithoutServlets() {
    return withoutServlets;
  }"
361,getServlets,"  public List<String> getServlets() {
    return servlets;
  }"
362,getCustom,"  public Map<String, String> getCustom() {
    return custom;
  }"
363,getJettyMaxThreads,"  public Integer getJettyMaxThreads() {
    return jettyMaxThreads;
  }"
364,getBrowserTimeout,"  public Integer getBrowserTimeout() {
    return browserTimeout;
  }"
365,getTimeout,"  public Integer getTimeout() {
    return timeout;
  }"
366,getPort,"  public Integer getPort() {
    return port;
  }"
367,getHost,"  public String getHost() {
    return host;
  }"
368,getLog,"  public String getLog() {
    return log;
  }"
369,getDebug,"  public Boolean getDebug() {
    return debug;
  }"
370,getRole,"  protected String getRole() {
    return role;
  }"
371,readFileOrResource,"  private static Reader readFileOrResource(String source) {
    Stream<Function<String, InputStream>> suppliers = Stream.of(
        (path) -> {
          try {
            return new FileInputStream(path);"
372,loadJsonFromResourceOrFile,"  private static JsonInput loadJsonFromResourceOrFile(String source) {
    try {
      return new Json().newInput(readFileOrResource(source));"
373,fromJson,"  static <T extends CommonJsonConfiguration> T fromJson(
          JsonInput jsonInput, Class<T> configurationClass)
  {"
374,fromResourceOrFile,"  static <T extends CommonJsonConfiguration> T fromResourceOrFile(
      String resourceOrFilePath, Class<T> configurationClass)
  {"
375,getCircularBitmap,"    public static Bitmap getCircularBitmap(Bitmap bitmap){




        final Bitmap output = Bitmap.createBitmap(bitmap.getWidth(),
                bitmap.getHeight(), Bitmap.Config.ARGB_8888);
        final Canvas canvas = new Canvas(output);

        final Paint paint = new Paint();
        final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
        final RectF rectF = new RectF(rect);

        paint.setAntiAlias(true);"
376,setContext,"    public void setContext(Context context) {

        mContext = context;"
377,startNextScreen,"    public void startNextScreen() {

        mStartNextScreen = true;
        mShouldSpheresRotate = false;
        invalidate();"
378,translateTheSpheres,"    public void translateTheSpheres(float position, int pageWidth) {

        mPosition = position;
        invalidate();"
379,setRotatingPermission,"    public void setRotatingPermission(boolean permission) {

        mShouldSpheresRotate = permission;
        if (mShouldSpheresRotate) {"
380,drawCircle,"    private float[] drawCircle(Canvas canvas, FloatWrapper originalPos, FloatWrapper step, Bitmap bm) {

        float distance = originalPos.floatValue + step.floatValue;
        float positionArray[] = new float[2];
        if (distance < mPathLength) {
            mPathMeasure.getPosTan(distance, mPos, mTan);

            matrix.reset();"
381,moveCircleInOut,"    private boolean moveCircleInOut(FloatWrapper distance, FloatWrapper pathLength, Matrix matrix, PathMeasure pathMeasure, Canvas canvas, Bitmap bm, FloatWrapper scaleCounter) {


        float position[] = new float[2];
        float tangent[] = new float[2];


        if (distance.floatValue >= (pathLength.floatValue / 2)) {"
383,onDraw,"    protected void onDraw(Canvas canvas) {

        canvas.drawPath(mAnimPath, mPaint);

        if (mShouldSpheresRotate || !mAllCirclesDrawn) {

            pos1 = drawCircle(canvas, mSphereOriginalPosArr[0], mSphereStepCountArr[0], mBitmap1);
            pos2 = drawCircle(canvas, mSphereOriginalPosArr[1], mSphereStepCountArr[1], mBitmap2);"
384,initOriginalPos,"    private void initOriginalPos() {

        for (int i = 0; i < 6; i++) {"
385,initLinePaths,"    private void initLinePaths() {

        for (int i = 0; i < 6; i++) {"
387,animateSecondScreenAntiClock,"    public void animateSecondScreenAntiClock(float position) {

        if (mCurrentDirection == Path.Direction.CW) {
            mCurrentDirection = Path.Direction.CCW;
            initNewPath(Path.Direction.CCW);"
389,onDraw,"    protected void onDraw(Canvas canvas) {

        canvas.drawPath(mAnimPath, mPaint);

        if (mDistance < mPathLength) {"
390,initNewPath,"    private void initNewPath(Path.Direction dir) {

        mAnimPath = new Path();
        RectF rectF = new RectF(XCOORD - RADIUS, YCOORD - RADIUS, XCOORD + RADIUS, YCOORD + RADIUS);

        if (dir == Path.Direction.CW) {
            mAnimPath.addArc(rectF, 50, 359);
        } else {
"
392,onClick,"        public void onClick(View v) {

            switch (v.getId()) {"
393,initThirdScreenViews,"    private void initThirdScreenViews(View rootView, Bundle savedInstanceState) {

        mRoundView = (ThirdScreenView) rootView.findViewById(R.id.round_view);
        mLetsGoButton = (Button) rootView.findViewById(R.id.letsgo);

        mLetsGoButton.setOnClickListener(clickListener);"
396,initializeAlpha,"    private void initializeAlpha() {

        mCamcordImage.setAlpha(0f);
        mClockImage.setAlpha(0f);
        mGraphImage.setAlpha(0f);
        mAudioImage.setAlpha(0f);
        mQuoteImage.setAlpha(0f);
        mMapImage.setAlpha(0f);
        mWordPressImage.setAlpha(0f);"
398,run,"                public void run() {

                    doFadeAnimation();"
399,run,"            public void run() {

                getOriginalXValues(savedInstanceState);"
401,getLayoutId,"        private int getLayoutId(int position) {

            int id = 0;
            if (position == 0) {
"
402,onCreateView,"        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {

            Bundle args = getArguments();
            int position = args.getInt(""position"");
            int layoutId = getLayoutId(position);


            ViewGroup rootView = (ViewGroup) inflater.inflate(layoutId, container, false);
            if (position == 0) {"
403,animateSecondScreen,"    private void animateSecondScreen(float position, int pageWidth, int direction) {

        if (direction == 0) {"
405,transformPage,"        public void transformPage(View page, float position) {

            int pageWidth = page.getWidth();
            if ((mViewPagerScrollingLeft && page.findViewById(R.id.center_box) != null)) {
                animateSecondScreen(position, pageWidth, 0);
            }"
408,getCount,"        public int getCount() {
            return NUM_PAGES;
        }"
409,getItem,"        public Fragment getItem(int position) {

            ScreenSlideFragment fragment = new ScreenSlideFragment();
            Bundle args = new Bundle();
            args.putInt(""position"", position);
            fragment.setArguments(args);
"
411,animateBookView,"    private void animateBookView() {

        mBookView.fadeInTheLines();"
412,onPageScrollStateChanged,"            public void onPageScrollStateChanged(int state) {

                if (state == ViewPager.SCROLL_STATE_DRAGGING) {
                    mShouldSpheresRotate = false;
                } else if (state == ViewPager.SCROLL_STATE_IDLE) {"
413,onPageSelected,"            public void onPageSelected(int position) {

                if (position == 1) {
                    mSelectedPosition = 1;
                    mSecondPageSelected = true;
                    setViewsInOriginalPosition();"
415,setPageChangeListener,"    private void setPageChangeListener(ViewPager viewPager) {

"
416,setIndicatorLayout,"    private void setIndicatorLayout() {

        int dotsCount = NUM_PAGES;
        mIndicatorView = new TextView[dotsCount];
        for (int i = 0; i < dotsCount; i++) {

            mIndicatorView[i] = new TextView(this);"
417,setUpViews,"    private void setUpViews() {

        mPager = (ViewPager) findViewById(R.id.pager);
        mPagerBackground = mPager.getBackground();
        mIndicatorLayout = (LinearLayout) findViewById(R.id.indicator_layout);

        mPager.setAdapter(new ScreenSlidePagerAdapter(getSupportFragmentManager()));
        setIndicatorLayout();
        setPageChangeListener(mPager);"
418,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        setUpViews();"
419,fadeInTheLines,"    public void fadeInTheLines() {

        mFadeInLineArr[0].floatValue = 1f;
        mFadeInLineArr[1].floatValue = 0f;
        mFadeInLineArr[2].floatValue = 0f;
        mFadeInLineArr[3].floatValue = 0f;
"
420,fadeTheLine,"    private void fadeTheLine(Paint paint,FloatWrapper nextLine,FloatWrapper currentLine){

        if (paint.getAlpha() != 255) {"
423,initZygote,"    public void initZygote(IXposedHookZygoteInit.StartupParam startupParam) {
        this.sharedPreferences = new XSharedPreferences(modulePackageName, ""default"");
        XposedBridge.log(modulePackageName+"" initZygote"");
    }"
424,afterHookedMethod,"                protected void afterHookedMethod(MethodHookParam param) throws Throwable {
                    param.setResult(""Hook succeed"");
                    int x=sharedPreferences.getInt(""example"",1);
                }"
425,handleLoadPackage,"    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable {
        if (""xxx.xxx.xxx"".equals(loadPackageParam.packageName)){
            XposedHelpers.findAndHookMethod(""xxx.xxx.xxx.xxxClass"", loadPackageParam.classLoader, ""xxxMethod"", new XC_MethodHook() {"
426,findApkFile,"    private File findApkFile(Context context, String modulePackageName) {
        if (context == null) {
            return null;
        }
        try {"
428,initZygote,"    public void initZygote(IXposedHookZygoteInit.StartupParam startupParam) {
        this.startupparam = startupParam;
    }"
431,getPermissions,"    public static String[] getPermissions(@Permissions final String permission) {
        switch (permission) {
            case CALENDAR:
                return GROUP_CALENDAR;"
432,setText,"    private void setText(String content) {
        mTvDisplay.setText(content);
    }"
434,onClick,"    public void onClick(View view) {
        int id = view.getId();
        if (id == R.id.btn_get) {
            int width = CommonUtils.getDisplayWidth(this, true);"
435,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_module1);
        mTvDisplay = findViewById(R.id.tv_display);
    }"
436,getNumber,"    private int getNumber() {
        return 100 / 0;
    }"
438,testDiskCache5,"    private int[] testDiskCache5() {
        return null;
    }"
439,testDiskCache4,"    private String[] testDiskCache4(int num, String name) {
        return new String[]{""234"", ""345""};
    }"
440,testDiskCache3,"    private int[] testDiskCache3() {
        return new int[] {5,6,7};
    }"
441,testDiskCache2,"    private String testDiskCache2() {
        count ++;
        if (count % 3 == 0) {
            return ""123"";"
442,testDiskCache1,"    private int testDiskCache1() {
        return 2;
    }"
447,hello,"    private String hello(String name, String cardId) {
        return ""hello, "" + name + ""! Your CardId is "" + cardId + ""."";
    }"
450,run,"                    public void run() {
                        doInMainThread(v);
                    }"
451,onClick,"    public void onClick(final View v) {
        switch (v.getId()) {
            case R.id.btn_single_click:"
452,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mTvHello = findViewById(R.id.tv_hello);"
453,toString,"    public String toString() {
        return ""LoginInfo{"" +
                ""LoginName='"" + LoginName + '\'' +"
454,random,"    public LoginInfo random() {
        LoginName = ""xuexiang"" + (int) (Math.random() * 1000 + 50);
        Age = (int) (Math.random() * 10 + 20);
        IsBoy = (Age % 2 == 0);
        score = new int[]{(int) (Math.random() * 100 + 50), (int) (Math.random() * 100 + 50)};
        return this;
    }"
456,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);
"
457,writer,"    public boolean writer(OutputStream sink, Object data) {
        try {
            String json = mGson.toJson(data);
            byte[] bytes = json.getBytes();"
458,load,"    public <T> T load(InputStream source, Type type) {
        T value = null;
        try {
            if (mGson == null) {
                mGson = new Gson();"
459,getDisplaySize,"    private static Point getDisplaySize(Context context, boolean isReal) {
        WindowManager windowManager;
        if (context instanceof Activity) {
            windowManager = ((Activity) context).getWindowManager();
        } else {
            windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        }
        if (windowManager == null) {
            return null;"
460,getDisplayWidth,"    public static int getDisplayWidth(Context context, boolean isReal) {
        Point point = getDisplaySize(context, isReal);
        return point != null ? point.x : 0;
    }"
465,addition_isCorrect,"    public void addition_isCorrect() throws Exception {
        assertEquals(4, 2 + 2);
    }"
466,hasAttemptRemaining,"  protected boolean hasAttemptRemaining() {
    return currentRetryCount <= maxNumRetries;
  }"
467,retry,"  public void retry(VolleyError error) throws VolleyError {
    currentRetryCount++;
    currentTimeoutMs += (currentTimeoutMs * backoffMultiplier);
    if (!hasAttemptRemaining()) {
      throw error;"
468,getBackoffMultiplier,"  public float getBackoffMultiplier() {
    return backoffMultiplier;
  }"
469,getCurrentRetryCount,"  public int getCurrentRetryCount() {
    return currentRetryCount;
  }"
470,getCurrentTimeout,"  public int getCurrentTimeout() {
    return currentTimeoutMs;
  }"
473,setCookieHandler,"  public void setCookieHandler(CookieHandler cookieHandler) {
    okHttpStack.getClient().setCookieHandler(cookieHandler);
  }"
474,setSslSocketFactory,"  public void setSslSocketFactory(SSLSocketFactory sslSocketFactory) {
    okHttpStack.getClient().setSslSocketFactory(sslSocketFactory);
  }"
475,setHostnameVerifier,"  public void setHostnameVerifier(HostnameVerifier hostnameVerifier) {
    okHttpStack.getClient().setHostnameVerifier(hostnameVerifier);
  }"
476,getHttpStack,"  public OkHttpStack getHttpStack() {
    return okHttpStack;
  }"
477,setCookieHandler,"  void setCookieHandler(CookieHandler cookieHandler);
"
478,setSslSocketFactory,"  void setSslSocketFactory(SSLSocketFactory sslSocketFactory);
"
479,setHostnameVerifier,"  void setHostnameVerifier(HostnameVerifier hostnameVerifier);
"
481,log,"  void log() {
    switch (logLevel) {
      case FULL:"
482,toString,"  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(""Wasp Error: "");
    if (errorMessage != null) {
      builder.append(""Message: "")
          .append(errorMessage);
    }"
483,getBodyAs,"  public Object getBodyAs(Type type) {
    if (response == null) {
      return null;
    }
    String body = response.getBody();
    if (TextUtils.isEmpty(body)) {"
484,getResponse,"  public Response getResponse() {
    return response;
  }"
485,getErrorMessage,"  public String getErrorMessage() {
    if (errorMessage == null) {
      return """";
    }"
486,clearAll,"  public synchronized void clearAll() {
    map.clear();
  }"
487,get,"  public V get(K key) {
    if (key == null) {
      throw new NullPointerException(""key may not be null"");
    }"
488,remove,"  public void remove(K key) {
    if (key == null) {
      throw new NullPointerException(""key may not be null"");
    }"
489,put,"  public void put(K key, V value) {
    if (key == null || value == null) {
      throw new NullPointerException(""key == null || value == null"");
    }
    V temp = map.get(key);"
490,build,"    public Wasp build() {
      return new Wasp(this);
    }"
491,getNetworkStack,"    public NetworkStack getNetworkStack() {
      if (networkStack == null) {
        networkStack = VolleyNetworkStack.newInstance(getContext(), getWaspHttpStack());
      }"
492,setNetworkStack,"    public Builder setNetworkStack(NetworkStack networkStack) {
      this.networkStack = networkStack;
      return this;
    }"
493,setRequestInterceptor,"    public Builder setRequestInterceptor(RequestInterceptor interceptor) {
      this.requestInterceptor = interceptor;
      return this;
    }"
494,getRequestInterceptor,"    RequestInterceptor getRequestInterceptor() {
      return requestInterceptor;
    }"
495,setParser,"    public Builder setParser(Parser parser) {
      if (parser == null) {
        throw new NullPointerException(""Parser may not be null"");
      }
      this.parser = parser;"
496,getParser,"    Parser getParser() {
      if (parser == null) {
        parser = new GsonParser();
      }"
497,getContext,"    Context getContext() {
      return context;
    }"
498,setNetworkMode,"    public Builder setNetworkMode(NetworkMode networkMode) {
      if (networkMode == null) {
        throw new NullPointerException(""NetworkMode should not be null"");
      }
      this.networkMode = networkMode;"
499,getNetworkMode,"    NetworkMode getNetworkMode() {
      if (networkMode == null) {
        networkMode = NetworkMode.LIVE;
      }"
500,setLogLevel,"    public Builder setLogLevel(LogLevel logLevel) {
      if (logLevel == null) {
        throw new NullPointerException(""Log level should not be null"");
      }
      this.logLevel = logLevel;"
501,getLogLevel,"    LogLevel getLogLevel() {
      if (logLevel == null) {
        logLevel = LogLevel.NONE;
      }"
502,getEndPointUrl,"    String getEndPointUrl() {
      if (endPointUrl == null) {
        throw new NullPointerException(""Endpoint may not be null"");
      }"
503,enableCookies,"    public Builder enableCookies(CookieStore cookieStore, CookiePolicy cookiePolicy) {
      if (cookiePolicy == null) {
        throw new NullPointerException(""CookiePolicy may not be null"");
      }
      this.cookieHandler = new CookieManager(cookieStore, cookiePolicy);"
504,enableCookies,"    public Builder enableCookies(CookiePolicy cookiePolicy) {
      return enableCookies(null, cookiePolicy);
    }"
505,trustCertificates,"    public Builder trustCertificates(int keyStoreRawResId, String keyStorePassword) {
      if (sslSocketFactory != null) {
        throw new IllegalStateException(""Only one type of trust certificate method can be used!"");
      }
      this.sslSocketFactory = SSLUtils.getPinnedCertSslSocketFactory("
506,trustCertificates,"    public Builder trustCertificates() {
      if (sslSocketFactory != null) {
        throw new IllegalStateException(""Only one type of trust certificate method can be used!"");
      }
      this.sslSocketFactory = SSLUtils.getTrustAllCertSslSocketFactory();
      this.hostnameVerifier = SSLUtils.getEmptyHostnameVerifier();"
507,getWaspHttpStack,"    public WaspHttpStack getWaspHttpStack() {
      if (waspHttpStack == null) {
        waspHttpStack = new WaspOkHttpStack();
      }
      waspHttpStack.setHostnameVerifier(hostnameVerifier);
      waspHttpStack.setSslSocketFactory(sslSocketFactory);
      waspHttpStack.setCookieHandler(cookieHandler);"
508,setWaspHttpStack,"    public Builder setWaspHttpStack(WaspHttpStack waspHttpStack) {
      if (waspHttpStack == null) {
        throw new NullPointerException(""WaspHttpStack may not be null"");
      }
      if (waspHttpStack.getHttpStack() == null) {
        throw new NullPointerException(""WaspHttpStack.getHttpStack() may not return null"");"
509,setEndpoint,"    public Builder setEndpoint(String url) {
      if (url == null || url.trim().length() == 0) {
        throw new NullPointerException(""End point url may not be null or empty"");
      }
      if (url.charAt(url.length() - 1) == '/') {
        throw new IllegalArgumentException(""End point should not end with \""/\"""");"
510,clearCache,"    public static void clearCache() {
      if (imageHandler == null) {
        return;
      }"
511,getImageHandler,"    private static ImageHandler getImageHandler() {
      if (context == null) {
        throw new NullPointerException(""Wasp.Builder should be instantiated first"");
      }
      if (imageHandler == null) {"
512,from,"    public static ImageCreator.Builder from(String path) {
      if (TextUtils.isEmpty(path)) {
        throw new IllegalArgumentException(""Path cannot be empty or null"");
      }"
513,create,"  public <T> T create(Class<T> service) {
    if (service == null) {
      throw new NullPointerException(""service param may not be null"");
    }
    if (!service.isInterface()) {
      throw new IllegalArgumentException(""Only interface type is supported"");"
514,getLogLevel,"  static LogLevel getLogLevel() {
    return logLevel;
  }"
515,getParser,"  public static Parser getParser() {
    if (parser == null) {
      throw new NullPointerException(""Wasp.Builder must be called first"");
    }"
516,getBody,"    public byte[] getBody() throws AuthFailureError {
      byte[] body;
      try {
        body = requestBody == null ? null : requestBody.getBytes(PROTOCOL_CHARSET);
      } catch (UnsupportedEncodingException uee) {
        Logger.wtf(""Unsupported Encoding while trying to get the bytes of %s using %s"""
517,getParams,"    protected Map<String, String> getParams() throws AuthFailureError {
      return waspRequest.getFieldParams();
    }"
518,getBodyContentType,"    public String getBodyContentType() {
      return String.format(
          ""%1$s; charset=%2$s"","
519,parseNetworkResponse,"    protected com.android.volley.Response parseNetworkResponse(NetworkResponse response) {
      try {
        byte[] data = response.data;"
520,deliverResponse,"    protected void deliverResponse(Response response) {
      response.log();
    }"
521,getHeaders,"    public Map<String, String> getHeaders() throws AuthFailureError {
      return waspRequest.getHeaders();
    }"
522,onErrorResponse,"    public void onErrorResponse(VolleyError error) {
      Response.Builder builder = new Response.Builder().setUrl(url);
      String errorMessage = null;

      if (error != null) {
        builder.setNetworkTime(error.getNetworkTimeMs());"
523,onResponse,"    public void onResponse(Response response) {
      waspCallback.onSuccess(response);
    }"
524,invokeRequest,"  public Object invokeRequest(RequestCreator requestCreator) throws Exception {
    return addToQueueSync(requestCreator);
  }"
525,invokeRequest,"  public void invokeRequest(RequestCreator waspRequest, InternalCallback<Response> waspCallback) {
    addToQueue(waspRequest, waspCallback);
  }"
526,addToQueue,"  private <T> void addToQueue(Request<T> request) {
    getRequestQueue().add(request);
  }"
527,getMethod,"  private int getMethod(String method) {
    switch (method) {
      case METHOD_GET:"
528,deliverResponse,"      protected void deliverResponse(Response response) {
        super.deliverResponse(response);
        listener.onResponse(response);
      }"
530,deliverResponse,"      protected void deliverResponse(Response response) {
        super.deliverResponse(response);
        future.onResponse(response.getResponseObject());
      }"
532,getRequestQueue,"  synchronized RequestQueue getRequestQueue() {
    return requestQueue;
  }"
533,newInstance,"  static VolleyNetworkStack newInstance(RequestQueue requestQueue) {
    return new VolleyNetworkStack(requestQueue);
  }"
534,newInstance,"  static VolleyNetworkStack newInstance(Context context, WaspHttpStack stack) {
    return new VolleyNetworkStack(context, stack);
  }"
535,apply,"      public boolean apply(Request<?> request) {
        return tag.equals(request.getTag());
      }"
536,cancelRequest,"  public void cancelRequest(final String tag) {
    Logger.w(""CANCEL REQUEST -> url : "" + tag);
    RequestQueue.RequestFilter filter = new RequestQueue.RequestFilter() {
      @Override
      public boolean apply(Request<?> request) {"
537,onErrorResponse,"          public void onErrorResponse(VolleyError error) {
            Response.Builder builder = new Response.Builder().setUrl(url);
            String errorMessage = null;

            if (error != null) {
              builder.setNetworkTime(error.getNetworkTimeMs());"
538,onResponse,"          public void onResponse(Bitmap response) {
            Logger.i(""SUCCESS -> url : "" + url);
            InternalImageHandler.Container container = new InternalImageHandler.Container();
            container.bitmap = response;
            container.cacheKey = StringUtils.getCacheKey(url, maxWidth, maxHeight);
            container.waspImageCreator = waspImageCreator;
            waspCallback.onSuccess(container);
          }"
539,requestImage,"  public void requestImage(final ImageCreator waspImageCreator, final int maxWidth,
                           final int maxHeight,
                           final InternalCallback<InternalImageHandler.Container> waspCallback) {

    final String url = waspImageCreator.getUrl();
    Logger.d(""REQUEST IMAGE -> url : "" + url);
    Request<Bitmap> request = new ImageRequest("
540,checkRx,"  public static void checkRx() {
    if (!hasRxJavaOnClasspath()) {
      throw new NoClassDefFoundError(""RxJava is not on classpath, """
541,hasRxJavaOnClasspath,"  static boolean hasRxJavaOnClasspath() {
    try {
      Class.forName(""rx.Observable"");
      return true;"
542,options,"  public Response options(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
543,delete,"  public Response delete(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
544,head,"  public Response head(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
545,patch,"  public Response patch(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
546,put,"  public Response put(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
547,post,"  public Response post(IHTTPSession session) {
    Map<String, String> files = new HashMap<>();
    try {
      session.parseBody(files);
    } catch (IOException ioe) {"
548,get,"  public Response get(IHTTPSession session) {
    return new Response(Response.Status.ACCEPTED, ""application/json"", DEFAULT_RESPONSE);
  }"
549,serve,"  public Response serve(IHTTPSession session) {
    try {
      Thread.sleep(4000);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }"
550,main,"  public static void main(String[] args) {
    ServerRunner.run(TestServer.class);
  }"
551,getCacheKey,"  public static String getCacheKey(String url, int maxWidth, int maxHeight) {
    return ""#W"" + maxWidth + ""#H"" + maxHeight + url;
  }"
552,wrap,"  public static String wrap(String value, String delimiter) {
    return delimiter + value + delimiter;
  }"
553,verify,"      public boolean verify(String hostname, SSLSession session) {
        return true;
      }"
554,getEmptyHostnameVerifier,"  public static HostnameVerifier getEmptyHostnameVerifier() {
    return new HostnameVerifier() {
      @Override"
555,getPinnedCertSslSocketFactory,"  public static SSLSocketFactory getPinnedCertSslSocketFactory(Context context,
                                                               int keyStoreRawResId,
                                                               String keyStorePassword) {
    InputStream in = null;"
556,getAcceptedIssuers,"            public X509Certificate[] getAcceptedIssuers() {
              return new X509Certificate[]{};
            }"
557,checkServerTrusted,"            public void checkServerTrusted(X509Certificate[] chain, String authType)
                throws CertificateException {"
558,checkClientTrusted,"            public void checkClientTrusted(X509Certificate[] chain, String authType)
                throws CertificateException {"
559,getTrustAllCertSslSocketFactory,"  public static SSLSocketFactory getTrustAllCertSslSocketFactory() {
    try {
      TrustManager[] trustAllCerts = new TrustManager[]{"
560,cancelAll,"  public synchronized void cancelAll() {
    for (int i = 0, size = list.size(); i < size; i++) {
      list.get(i).cancel();
    }"
561,addRequest,"  public synchronized void addRequest(WaspRequest request) {
    list.add(request);
  }"
562,getAuthToken,"  public AuthToken getAuthToken() {
    return null;
  }"
563,getRetryPolicy,"  public WaspRetryPolicy getRetryPolicy() {
    return null;
  }"
564,onQueryParamsAdded,"  public void onQueryParamsAdded(Map<String, Object> params) {
  }"
565,onHeadersAdded,"  public void onHeadersAdded(Map<String, String> headers) {
  }"
566,toString,"    public String toString() {
      if (lowerBound != null) return ""? super "" + typeToString(lowerBound);
      if (upperBound == Object.class) return ""?"";
      return ""? extends "" + typeToString(upperBound);
    }"
568,equals,"    public boolean equals(Object other) {
      return other instanceof WildcardType && RetroTypes.equals(this, (WildcardType) other);
    }"
569,getLowerBounds,"    public Type[] getLowerBounds() {
      return lowerBound != null ? new Type[]{lowerBound} : EMPTY_TYPE_ARRAY;
    }"
570,getUpperBounds,"    public Type[] getUpperBounds() {
      return new Type[]{upperBound};
    }"
571,toString,"    public String toString() {
      return typeToString(componentType) + ""[]"";
    }"
572,hashCode,"    public int hashCode() {
      return componentType.hashCode();
    }"
573,equals,"    public boolean equals(Object o) {
      return o instanceof GenericArrayType
          && RetroTypes.equals(this, (GenericArrayType) o);"
574,getGenericComponentType,"    public Type getGenericComponentType() {
      return componentType;
    }"
575,toString,"    public String toString() {
      StringBuilder result = new StringBuilder(30 * (typeArguments.length + 1));
      result.append(typeToString(rawType));
      if (typeArguments.length == 0) return result.toString();
      result.append(""<"").append(typeToString(typeArguments[0]));
      for (int i = 1; i < typeArguments.length; i++) {
        result.append("", "").append(typeToString(typeArguments[i]));
      }"
576,hashCode,"    public int hashCode() {
      return Arrays.hashCode(typeArguments) ^ rawType.hashCode() ^ hashCodeOrZero(ownerType);
    }"
577,equals,"    public boolean equals(Object other) {
      return other instanceof ParameterizedType
          && RetroTypes.equals(this, (ParameterizedType) other);"
578,getOwnerType,"    public Type getOwnerType() {
      return ownerType;
    }"
579,getRawType,"    public Type getRawType() {
      return rawType;
    }"
580,getActualTypeArguments,"    public Type[] getActualTypeArguments() {
      return typeArguments.clone();
    }"
581,checkNotPrimitive,"  private static void checkNotPrimitive(Type type) {
    if (type instanceof Class<?> && ((Class<?>) type).isPrimitive()) {
      throw new IllegalArgumentException();"
582,declaringClassOf,"  private static Class<?> declaringClassOf(TypeVariable<?> typeVariable) {
    GenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();
    return genericDeclaration instanceof Class ? (Class<?>) genericDeclaration : null;
  }"
585,getSupertype,"  public static Type getSupertype(Type context, Class<?> contextRawType, Class<?> supertype) {
    if (!supertype.isAssignableFrom(contextRawType)) throw new IllegalArgumentException();
    return resolve(context, contextRawType,
        getGenericSupertype(context, contextRawType, supertype));"
586,typeToString,"  public static String typeToString(Type type) {
    return type instanceof Class ? ((Class<?>) type).getName() : type.toString();
  }"
587,hashCodeOrZero,"  private static int hashCodeOrZero(Object o) {
    return o != null ? o.hashCode() : 0;
  }"
588,equal,"  private static boolean equal(Object a, Object b) {
    return a == b || (a != null && a.equals(b));
  }"
589,indexOf,"  private static int indexOf(Object[] array, Object toFind) {
    for (int i = 0; i < array.length; i++) {
      if (toFind.equals(array[i])) return i;
    }"
593,submitResponse,"  void submitResponse() {
    callback.onSuccess(waspResponse, response);
  }"
594,setResponseObject,"    Builder setResponseObject(Object object) {
      this.responseObject = object;
      return this;
    }"
595,getResponseObject,"    Object getResponseObject() {
      return responseObject;
    }"
596,setNetworkTime,"    Builder setNetworkTime(long networkTime) {
      this.networkTime = networkTime;
      return this;
    }"
597,getNetworkTime,"    long getNetworkTime() {
      return networkTime;
    }"
598,setLength,"    Builder setLength(int length) {
      this.length = length;
      return this;
    }"
599,getLength,"    int getLength() {
      return length;
    }"
600,setBody,"    Builder setBody(String body) {
      this.body = body;
      return this;
    }"
601,getBody,"    String getBody() {
      return body;
    }"
602,setHeaders,"    Builder setHeaders(Map<String, String> headers) {
      this.headers = headers;
      return this;
    }"
603,getHeaders,"    Map<String, String> getHeaders() {
      return headers != null ? headers : Collections.<String, String>emptyMap();
    }"
604,setStatusCode,"    Builder setStatusCode(int statusCode) {
      this.statusCode = statusCode;
      return this;
    }"
605,getStatusCode,"    int getStatusCode() {
      return statusCode;
    }"
606,setUrl,"    Builder setUrl(String url) {
      this.url = url;
      return this;
    }"
608,build,"    Response build() {
      return new Response(this);
    }"
610,getFormattedBody,"  private String getFormattedBody() {
    return body.replace(""\n"", """").replace(""\r"", """").replace(""\t"", """");
  }"
611,getNetworkTime,"  public long getNetworkTime() {
    return networkTime;
  }"
612,getResponseObject,"  Object getResponseObject() {
    return responseObject;
  }"
613,getLength,"  public int getLength() {
    return length;
  }"
614,getBody,"  public String getBody() {
    return body;
  }"
615,getHeaders,"  public Map<String, String> getHeaders() {
    return headers;
  }"
616,getStatusCode,"  public int getStatusCode() {
    return statusCode;
  }"
617,getUrl,"  public String getUrl() {
    return url;
  }"
622,onQueryParamsAdded,"  void onQueryParamsAdded(Map<String, Object> params);
"
623,onHeadersAdded,"  void onHeadersAdded(Map<String, String> headers);
"
624,getFieldParams,"    Map<String, String> getFieldParams() {
      return fieldParams;
    }"
625,getContentType,"    String getContentType() {
      if (methodInfo.getContentType() == null) {
        return Wasp.getParser().getSupportedContentType();
      }"
626,getMethodInfo,"    MethodInfo getMethodInfo() {
      return methodInfo;
    }"
627,getMock,"    MockHolder getMock() {
      return methodInfo.getMock();
    }"
628,getRetryPolicy,"    WaspRetryPolicy getRetryPolicy() {
      return retryPolicy;
    }"
630,getHeaders,"    Map<String, String> getHeaders() {
      return headers;
    }"
631,getHttpMethod,"    String getHttpMethod() {
      return methodInfo.getHttpMethod();
    }"
632,addFieldParams,"    private void addFieldParams(String key, String value) {
      Map<String, String> params = this.fieldParams;
      if (params == null) {
        params = new LinkedHashMap<>();
        this.fieldParams = params;"
633,addHeaderParam,"    private void addHeaderParam(String key, String value) {
      Map<String, String> headers = this.headers;
      if (headers == null) {
        headers = new LinkedHashMap<>();
        this.headers = headers;"
634,addQueryParam,"    private void addQueryParam(String key, Object value) {
      if (queryParamBuilder == null) {
        queryParamBuilder = new Uri.Builder();
      }"
635,addPathParam,"    private void addPathParam(String key, String value) {
      try {
        String encodedValue = URLEncoder.encode(String.valueOf(value), ""UTF-8"");"
636,getQueryString,"    private String getQueryString() {
      if (queryParamBuilder == null) {
        return """";
      }"
637,getUrl,"    private String getUrl() {
      String endpoint = methodInfo.getBaseUrl();
      if (endpoint == null) {
        endpoint = baseUrl;
      }"
638,getBody,"    private String getBody(Object body) {
      return Wasp.getParser().toBody(body);
    }"
640,build,"    RequestCreator build() {
      postInit();
      return new RequestCreator(this);
    }"
641,setRequestInterceptor,"    Builder setRequestInterceptor(RequestInterceptor interceptor) {
      this.requestInterceptor = interceptor;
      return this;
    }"
642,initParams,"    private void initParams() {
      Annotation[] annotations = methodInfo.getMethodAnnotations();
      int count = annotations.length;

      for (int i = 0; i < count; i++) {"
643,getContentType,"  String getContentType() {
    return contentType;
  }"
644,getFieldParams,"  Map<String, String> getFieldParams() {
    return fieldParams != null ? fieldParams : Collections.<String, String>emptyMap();
  }"
645,getMethodInfo,"  MethodInfo getMethodInfo() {
    return methodInfo;
  }"
647,getRetryPolicy,"  WaspRetryPolicy getRetryPolicy() {
    return retryPolicy;
  }"
650,getHeaders,"  Map<String, String> getHeaders() {
    return headers != null ? headers : Collections.<String, String>emptyMap();
  }"
653,createRequestBody,"  private static RequestBody createRequestBody(Request request) throws AuthFailureError {
    byte[] body = request.getBody();
    if (body == null) {
      return null;
    }"
654,parseProtocol,"  private static ProtocolVersion parseProtocol(final Protocol protocol) {
    switch (protocol) {
      case HTTP_1_0:"
655,setConnectionParametersForRequest,"  private static void setConnectionParametersForRequest(
      com.squareup.okhttp.Request.Builder builder, Request<?> request)
      throws IOException, AuthFailureError {"
656,entityFromOkHttpResponse,"  private static HttpEntity entityFromOkHttpResponse(Response response) throws IOException {
    BasicHttpEntity entity = new BasicHttpEntity();
    ResponseBody body = response.body();

    entity.setContent(body.byteStream());
    entity.setContentLength(body.contentLength());
    entity.setContentEncoding(response.header(""Content-Encoding""));

    if (body.contentType() != null) {"
658,getClient,"  OkHttpClient getClient() {
    return client;
  }"
659,logHeaders,"  private static void logHeaders(Headers headers) {
    for (String headerName : headers.names()) {
      for (String headerValue : headers.values(headerName)) {"
661,invokeRequest,"  Object invokeRequest(RequestCreator requestCreator) throws Exception;
}"
662,invokeRequest,"  void invokeRequest(RequestCreator requestCreator, InternalCallback<Response> waspCallback);
"
663,onError,"      public void onError(WaspError error) {
        error.log();
        if (waspRequest.isCancelled()) {
          Logger.i(""Response not delivered because of cancelled request"");
          return;"
664,onSuccess,"      public void onSuccess(Response response) {
        if (waspRequest.isCancelled()) {
          Logger.i(""Response not delivered because of cancelled request"");
          return;"
666,invokeWaspRequest,"  private Object invokeWaspRequest(Object proxy, final Method method, final Object[] args) {
    return invokeCallbackRequest(proxy, method, args);
  }"
667,call,"      public void call(final Subscriber<? super Object> subscriber) {
        try {
          RequestCreator requestCreator = new RequestCreator.Builder(methodInfo, args, endPoint)"
668,invokeObservable,"  private Object invokeObservable(final Method method, final Object[] args) {
    final MethodInfo methodInfo = methodInfoCache.get(method.getName());

    return Observable.create(new Observable.OnSubscribe<Object>() {"
669,invokeSyncRequest,"  private Object invokeSyncRequest(final Method method, final Object[] args) throws Exception {
    final MethodInfo methodInfo = methodInfoCache.get(method.getName());
    RequestCreator requestCreator = new RequestCreator.Builder(methodInfo, args, endPoint)
        .setRequestInterceptor(requestInterceptor)
        .build();
    requestCreator.log();
    if (networkMode == NetworkMode.MOCK && methodInfo.isMocked()) {"
670,invoke,"  public Object invoke(Object proxy, final Method method, final Object[] args) throws Throwable {
    final MethodInfo methodInfo = methodInfoCache.get(method.getName());

    switch (methodInfo.getReturnType()) {"
671,fillMethods,"  private void fillMethods(List<Method> methods) {
    for (Method method : methods) {
      MethodInfo methodInfo = MethodInfo.newInstance(context, method);"
672,getProxyClass,"  Object getProxyClass() {
    List<Method> methods = getMethods(service);
    fillMethods(methods);

    return Proxy.newProxyInstance(classLoader, new Class[]{service}, this);"
673,getMethodsRecursive,"  private static void getMethodsRecursive(Class<?> service, List<Method> methods) {
    Collections.addAll(methods, service.getDeclaredMethods());
  }"
675,newInstance,"  public static NetworkHandler newInstance(Class<?> service, Wasp.Builder builder) {
    return new NetworkHandler(service, builder);
  }"
677,run,"      public void run() {
        if (statusCode < 200 || statusCode > 299) {
          waspCallback.onError(new WaspError(waspResponse, ""Mock error message!""));
          return;"
678,invokeRequest,"  public void invokeRequest(RequestCreator waspRequest,
                            final InternalCallback<Response> waspCallback) {
    MockHolder mock = waspRequest.getMock();
    final int statusCode = mock.getStatusCode();

    MethodInfo methodInfo = waspRequest.getMethodInfo();
    Type responseType = methodInfo.getResponseObjectType();

    String responseString;
    Object responseObject;
"
679,getDefault,"  static MockNetworkStack getDefault(Context context) {
    if (mockNetworkStack == null) {
      mockNetworkStack = new MockNetworkStack(context);
    }"
680,getPath,"  public String getPath() {
    return path;
  }"
682,createListObject,"  private static List createListObject(ParameterizedType type) {

    Class rawType = (Class) type.getRawType();
    Type[] genericTypes = type.getActualTypeArguments();
    List listObject;

    if (rawType.isInterface()) {
      listObject = new ArrayList(MOCK_LIST_COUNT);"
683,generateValue,"  private static Object generateValue(Class<?> rawType) {

    if (String.class.isAssignableFrom(rawType)) {
      return ""test"";
    } else if (int.class.isAssignableFrom(rawType) || Integer.class.isAssignableFrom(rawType)) {"
685,populateObject,"  private static <T> T populateObject(T object) {
    Class clazz = object.getClass();

    while (clazz != null) {
      String name = clazz.getName();"
686,instantiateObject,"  public static <T> T instantiateObject(Class<T> rawType) {
    try {
      Constructor<?> constructor = rawType.getDeclaredConstructor();
      if (!constructor.isAccessible()) {"
687,createMockObject,"  public static <T> T createMockObject(Type type) {
    Class<T> rawType;

    if (type instanceof ParameterizedType) {
      rawType = (Class<T>) ((ParameterizedType) type).getRawType();
    } else if (type instanceof Class) {"
688,readMockResponse,"  public static String readMockResponse(Context context, String filePath) {

    String responseString;
    try {
      responseString = IOUtils.readFileFromAssets(context, filePath);
    } catch (IOException e) {"
689,getReturnType,"  public ReturnType getReturnType() {
    return returnType;
  }"
690,getContentType,"  public String getContentType() {
    return contentType;
  }"
691,isAuthTokenEnabled,"  boolean isAuthTokenEnabled() {
    return isAuthTokenEnabled;
  }"
694,getMethodAnnotations,"  Annotation[] getMethodAnnotations() {
    return methodAnnotations;
  }"
695,getResponseObjectType,"  Type getResponseObjectType() {
    return responseObjectType;
  }"
697,isMocked,"  boolean isMocked() {
    return mock != null;
  }"
698,getHttpMethod,"  String getHttpMethod() {
    return httpMethod;
  }"
699,getBaseUrl,"  String getBaseUrl() {
    return baseUrl;
  }"
700,getRelativeUrl,"  String getRelativeUrl() {
    return relativeUrl;
  }"
701,getMethod,"  public Method getMethod() {
    return method;
  }"
702,methodError,"  private RuntimeException methodError(String message, Object... args) {
    if (args.length > 0) {
      message = String.format(message, args);
    }"
703,getParameterUpperBound,"  private static Type getParameterUpperBound(ParameterizedType type) {
    Type[] types = type.getActualTypeArguments();
    for (int i = 0; i < types.length; i++) {
      Type paramType = types[i];
      if (paramType instanceof WildcardType) {"
705,parseParamAnnotations,"  private void parseParamAnnotations() {
    Annotation[][] annotationArrays = method.getParameterAnnotations();
    methodAnnotations = new Annotation[annotationArrays.length];

    List<String> pathParams = new ArrayList<>();
    List<String> queryParams = new ArrayList<>();
    List<String> headerParams = new ArrayList<>();
    boolean isBodyAdded = false;

    int count = annotationArrays.length;"
706,parseObservableResponseObjectType,"  private void parseObservableResponseObjectType() {
    Type type = method.getGenericReturnType();
    Class rawType = RetroTypes.getRawType(type);
    Type returnType = RetroTypes.getSupertype(type, rawType, Observable.class);
    responseObjectType = getParameterUpperBound((ParameterizedType) returnType);
  }"
708,addHeaders,"  private void addHeaders(String[] values) {
    for (String header : values) {
      String[] strings = header.split("":"");"
709,parseMethodAnnotations,"  private void parseMethodAnnotations() {
    Annotation[] annotations = method.getAnnotations();
    for (Annotation annotation : annotations) {
      Class<? extends Annotation> annotationType = annotation.annotationType();"
710,newInstance,"  static MethodInfo newInstance(Context context, Method method) {
    return new MethodInfo(context, method);
  }"
711,init,"  synchronized void init() {
    parseMethodAnnotations();
    parseReturnType();
    parseParamAnnotations();
  }"
712,logChunk,"  private static void logChunk(int logType, String chunk) {
    switch (logType) {
      case Log.ERROR:"
714,wtf,"  public static void wtf(String message) {
    log(Log.ASSERT, message);
  }"
715,v,"  public static void v(String message) {
    log(Log.VERBOSE, message);
  }"
716,i,"  public static void i(String message) {
    log(Log.INFO, message);
  }"
717,w,"  public static void w(String message) {
    log(Log.WARN, message);
  }"
718,e,"  public static void e(String message) {
    log(Log.ERROR, message);
  }"
719,d,"  public static void d(String message) {
    log(Log.DEBUG, message);
  }"
720,readFileFromAssets,"  public static String readFileFromAssets(Context context, String filePath) throws IOException {
    if (TextUtils.isEmpty(filePath)) {
      return null;
    }

    StringBuilder builder = new StringBuilder();

    InputStream inputStream = context.getAssets().open(filePath);
    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, ""UTF-8""));
    String str;"
721,assetsFileExists,"  public static boolean assetsFileExists(Context context, String filePath) {
    if (TextUtils.isEmpty(filePath)) {
      return false;
    }
    try {"
722,cancel,"  public void cancel() {
    cancelled = true;
  }"
723,isCancelled,"  public boolean isCancelled() {
    return cancelled;
  }"
725,requestImage,"    void requestImage(ImageCreator waspImageCreator, int maxWidth, int maxHeight,
                      InternalCallback<Container> waspCallback);"
727,putBitmap,"    void putBitmap(String url, Bitmap bitmap);
"
729,checkMain,"  private void checkMain() {
    if (Looper.myLooper() != Looper.getMainLooper()) {
      throw new IllegalStateException(""Wasp.Image.load() must be invoked from the main thread."");"
730,clearCache,"  public void clearCache() {
    if (imageCache == null) {
      return;
    }"
731,initImageView,"  private void initImageView(ImageCreator waspImageCreator) {
    int defaultImage = waspImageCreator.getDefaultImage();
    ImageView imageView = waspImageCreator.getImageView();
    if (defaultImage != 0) {
      imageView.setImageResource(defaultImage);
      return;"
732,onError,"      public void onError(WaspError error) {
        int errorImage = imageCreator.getErrorImage();
        if (errorImage != 0) {
          imageView.setImageResource(errorImage);
        }"
735,load,"  public void load(ImageCreator imageCreator) {
    checkMain();
    loadImage(imageCreator);
  }"
740,getHeight,"    public int getHeight() {
      return height;
    }"
741,getWidth,"    public int getWidth() {
      return width;
    }"
742,load,"    public void load() {
      new ImageCreator(this).load();
    }"
743,setImageHandler,"    Builder setImageHandler(ImageHandler imageHandler) {
      this.imageHandler = imageHandler;
      return this;
    }"
744,setError,"    public Builder setError(int resId) {
      this.errorImage = resId;
      return this;
    }"
745,setDefault,"    public Builder setDefault(int resId) {
      this.defaultImage = resId;
      return this;
    }"
746,to,"    public Builder to(ImageView imageView) {
      if (imageView == null) {
        throw new NullPointerException(""ImageView cannot be null"");
      }
      this.imageView = imageView;"
747,from,"    Builder from(String url) {
      this.url = url;
      return this;
    }"
748,getBitmapSize,"  private int getBitmapSize(Bitmap bitmap) {
    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB_MR1) {
      return bitmap.getRowBytes() * bitmap.getHeight();
    }"
749,logError,"  public void logError(String message, long networkTime) {
    switch (logLevel) {
      case FULL:"
750,logSuccess,"  public void logSuccess(Bitmap bitmap) {
    switch (logLevel) {
      case FULL:"
751,logRequest,"  public void logRequest() {
    switch (logLevel) {
      case FULL:"
752,load,"  void load() {
    imageHandler.load(this);
  }"
753,getErrorImage,"  int getErrorImage() {
    return errorImage;
  }"
754,getDefaultImage,"  int getDefaultImage() {
    return defaultImage;
  }"
755,getImageView,"  ImageView getImageView() {
    return imageView;
  }"
757,options,"  public NanoHTTPD.Response options(NanoHTTPD.IHTTPSession session);
"
758,delete,"  public NanoHTTPD.Response delete(NanoHTTPD.IHTTPSession session);
"
759,head,"  public NanoHTTPD.Response head(NanoHTTPD.IHTTPSession session);
"
760,patch,"  public NanoHTTPD.Response patch(NanoHTTPD.IHTTPSession session);
"
761,put,"  public NanoHTTPD.Response put(NanoHTTPD.IHTTPSession session);
"
762,post,"  public NanoHTTPD.Response post(NanoHTTPD.IHTTPSession session);
"
763,get,"  public NanoHTTPD.Response get(NanoHTTPD.IHTTPSession session);
"
764,toJson,"  public static String toJson(Map<String, Object> map) {
    StringBuilder builder = new StringBuilder();
    builder.append(""{"");
    Iterator<Map.Entry<String, Object>> iterator = map.entrySet().iterator();
    while (iterator.hasNext()) {
      Map.Entry<String, Object> entry = iterator.next();
      String key = entry.getKey();
      Object value = entry.getValue();"
767,clearCache,"  public void clearCache() {
    clearAll();
  }"
768,putBitmap,"  public void putBitmap(String url, Bitmap bitmap) {
    put(url, bitmap);
  }"
769,getBitmap,"  public Bitmap getBitmap(String url) {
    return get(url);
  }"
770,isFilterEnabled,"  public boolean isFilterEnabled() {
    return filterEnabled;
  }"
771,getToken,"  public String getToken() {
    return token;
  }"
773,destroyInstance,"    public static void destroyInstance() {
        INSTANCE = null;
    }"
774,getInstance,"    public static ViewModelFactory getInstance(Application application, BaseModel baseModel) {
        if (INSTANCE == null) {
            synchronized (ViewModelFactory.class) {
                if (INSTANCE == null) {"
775,getActivityContext,"    static Activity getActivityContext(Context context) {
        if (context == null)
            return null;
        else if (context instanceof Activity)"
776,getScreenWidth,"    static int getScreenWidth(Context context) {
        if (screentwidth > 0)
            return screentwidth;
        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        DisplayMetrics outMetrics = new DisplayMetrics();
        wm.getDefaultDisplay().getMetrics(outMetrics);
        return screentwidth = outMetrics.widthPixels;"
777,d2p,"    static int d2p(Context var0, float var1) {
        DisplayMetrics var2 = var0.getResources().getDisplayMetrics();
        return (int) TypedValue.applyDimension(1, var1, var2);
    }"
778,setColorAlpha,"    static int setColorAlpha(int color, float alpha) {
        color = Color.argb((int) (alpha * 255), Color.red(color), Color.green(color), Color.blue(color));
        return color;
    }"
780,describeContents,"    public int describeContents() {
        return 0;
    }"
781,setDate,"    public void setDate(String date) {
        this.date = date;
    }"
782,getDate,"    public String getDate() {
        return date;
    }"
783,setDesc,"    public void setDesc(String desc) {
        this.desc = desc;
    }"
784,getDesc,"    public String getDesc() {
        return desc;
    }"
785,setReason,"    public void setReason(String reason) {
        this.reason = reason;
    }"
786,getReason,"    public String getReason() {
        return reason;
    }"
787,setUserId,"    public void setUserId(String userId) {
        this.userId = userId;
    }"
788,getUserId,"    public String getUserId() {
        return userId;
    }"
789,setRank,"    public void setRank(String rank) {
        this.rank = rank;
    }"
790,getRank,"    public String getRank() {
        return rank;
    }"
791,setLevel,"    public void setLevel(int level) {
        this.level = level;
    }"
792,getLevel,"    public int getLevel() {
        return level;
    }"
793,setCoinCount,"    public void setCoinCount(String coinCount) {
        this.coinCount = coinCount;
    }"
794,getCoinCount,"    public String getCoinCount() {
        return coinCount;
    }"
795,setCollectIds,"    public void setCollectIds(List<Integer> collectIds) {
        this.collectIds = collectIds;
    }"
796,getCollectIds,"    public List<Integer> getCollectIds() {
        return collectIds;
    }"
797,setChapterTops,"    public void setChapterTops(List<?> chapterTops) {
        this.chapterTops = chapterTops;
    }"
798,getChapterTops,"    public List<?> getChapterTops() {
        return chapterTops;
    }"
799,setUsername,"    public void setUsername(String username) {
        this.username = username;
    }"
800,getUsername,"    public String getUsername() {
        return username;
    }"
801,setType,"    public void setType(String type) {
        this.type = type;
    }"
802,getType,"    public String getType() {
        return type;
    }"
803,setToken,"    public void setToken(String token) {
        this.token = token;
    }"
804,getToken,"    public String getToken() {
        return token;
    }"
805,setPassword,"    public void setPassword(String password) {
        this.password = password;
    }"
806,getPassword,"    public String getPassword() {
        return password;
    }"
807,setId,"    public void setId(String id) {
        this.id = id;
    }"
808,getId,"    public String getId() {
        return id;
    }"
809,setIcon,"    public void setIcon(String icon) {
        this.icon = icon;
    }"
810,getIcon,"    public String getIcon() {
        return icon;
    }"
811,setEmail,"    public void setEmail(String email) {
        this.email = email;
    }"
812,getEmail,"    public String getEmail() {
        return email;
    }"
813,newArray,"        public UserInfo[] newArray(int size) {
            return new UserInfo[size];
        }"
814,createFromParcel,"        public UserInfo createFromParcel(Parcel in) {
            return new UserInfo(in);
        }"
815,listIntegral,"    ApiCall<RankListRes> listIntegral(@Path(""page"") int page);
"
817,listScoreRank,"    ApiCall<RankListRes> listScoreRank(@Path(""page"") int page);
"
818,setChildren,"        public void setChildren(List<?> children) {
            this.children = children;
        }"
819,getChildren,"        public List<?> getChildren() {
            return children;
        }"
820,setVisible,"        public void setVisible(int visible) {
            this.visible = visible;
        }"
821,getVisible,"        public int getVisible() {
            return visible;
        }"
822,setUserControlSetTop,"        public void setUserControlSetTop(boolean userControlSetTop) {
            this.userControlSetTop = userControlSetTop;
        }"
823,isUserControlSetTop,"        public boolean isUserControlSetTop() {
            return userControlSetTop;
        }"
824,setParentChapterId,"        public void setParentChapterId(int parentChapterId) {
            this.parentChapterId = parentChapterId;
        }"
825,getParentChapterId,"        public int getParentChapterId() {
            return parentChapterId;
        }"
826,setOrder,"        public void setOrder(int order) {
            this.order = order;
        }"
827,getOrder,"        public int getOrder() {
            return order;
        }"
828,setName,"        public void setName(String name) {
            this.name = name;
        }"
829,getName,"        public String getName() {
            return name;
        }"
830,setId,"        public void setId(String id) {
            this.id = id;
        }"
831,getId,"        public String getId() {
            return id;
        }"
832,setCourseId,"        public void setCourseId(String courseId) {
            this.courseId = courseId;
        }"
833,getCourseId,"        public String getCourseId() {
            return courseId;
        }"
834,setChildren,"    public void setChildren(List<ChildrenBean> children) {
        this.children = children;
    }"
835,getChildren,"    public List<ChildrenBean> getChildren() {
        return children;
    }"
836,setVisible,"    public void setVisible(int visible) {
        this.visible = visible;
    }"
837,getVisible,"    public int getVisible() {
        return visible;
    }"
838,setUserControlSetTop,"    public void setUserControlSetTop(boolean userControlSetTop) {
        this.userControlSetTop = userControlSetTop;
    }"
839,isUserControlSetTop,"    public boolean isUserControlSetTop() {
        return userControlSetTop;
    }"
840,setParentChapterId,"    public void setParentChapterId(int parentChapterId) {
        this.parentChapterId = parentChapterId;
    }"
841,getParentChapterId,"    public int getParentChapterId() {
        return parentChapterId;
    }"
842,setOrder,"    public void setOrder(int order) {
        this.order = order;
    }"
843,getOrder,"    public int getOrder() {
        return order;
    }"
844,setName,"    public void setName(String name) {
        this.name = name;
    }"
845,getName,"    public String getName() {
        return name;
    }"
848,setCourseId,"    public void setCourseId(String courseId) {
        this.courseId = courseId;
    }"
849,getCourseId,"    public String getCourseId() {
        return courseId;
    }"
850,setArticles,"    public void setArticles(List<ArticleBean> articles) {
        this.articles = articles;
    }"
851,getArticles,"    public List<ArticleBean> getArticles() {
        return articles;
    }"
852,setCid,"    public void setCid(String cid) {
        this.cid = cid;
    }"
853,getCid,"    public String getCid() {
        return cid;
    }"
856,getCurrentTime,"    public static String getCurrentTime(){
      return  TimeUtil.simpleDateFormat(null,new Date(System.currentTimeMillis()));
    }"
857,getTimeString,"    public static long getTimeString(String time) {
        SimpleDateFormat sdr = new SimpleDateFormat(""yyyy/MM/dd"",
                Locale.CHINA);
        Date date;
        long times = 0;
        try {
            date = sdr.parse(time);"
858,getCurrentDateTime,"    public static String getCurrentDateTime(String format) {
        return simpleDateFormat(format, new Date());
    }"
859,simpleDateFormat,"    public static String simpleDateFormat(String format, Date date) {
        if (TextUtils.isEmpty(format)) {
            format = ""yyyy-MM-dd HH:mm:ss SSS"";
        }
        String content = new SimpleDateFormat(format).format(date);"
860,getCollectTime,"    public static String getCollectTime(long date) {
        return new SimpleDateFormat(""yyyy/MM/dd"",Locale.CHINA).format(new Date(date));
    }"
862,getChatTime,"    public static String getChatTime(long time) {
        return getTimeStringAutoShort2(new Date(time), true);
    }"
863,getSessionTime,"    public static String getSessionTime(long time) {
        return getTimeStringAutoShort2(new Date(time), false);
    }"
864,getTimeStringAutoShort2,"    public static String getTimeStringAutoShort2(Date srcDate, boolean mustIncludeTime) {
        String ret = """";

        try {
            GregorianCalendar gcCurrent = new GregorianCalendar();"
866,execute,"                public void execute(@NonNull Runnable command) {
                    runOnUiThread(command);
                }"
867,getGlobalDeliver,"    private static Executor getGlobalDeliver() {
        if (sDeliver == null) {
            sDeliver = new Executor() {
                @Override"
868,getValue,"        public T getValue() {
            if (!mFlag.get()) {
                try {
                    mLatch.await();"
869,setValue,"        public void setValue(T value) {
            if (mFlag.compareAndSet(false, true)) {
                mValue = value;"
871,onDone,"        protected void onDone() {
            TASK_POOL_MAP.remove(this);
            if (mTimer != null) {
                mTimer.cancel();"
872,getDeliver,"        private Executor getDeliver() {
            if (deliver == null) {
                return getGlobalDeliver();
            }"
873,setSchedule,"        private void setSchedule(boolean isSchedule) {
            this.isSchedule = isSchedule;
        }"
874,setTimeout,"        public Task<T> setTimeout(final long timeoutMillis, final OnTimeoutListener listener) {
            mTimeoutMillis = timeoutMillis;
            mTimeoutListener = listener;
            return this;
        }"
875,setDeliver,"        public Task<T> setDeliver(Executor deliver) {
            this.deliver = deliver;
            return this;
        }"
876,isDone,"        public boolean isDone() {
            return state.get() > RUNNING;
        }"
877,isCanceled,"        public boolean isCanceled() {
            return state.get() >= CANCELLED;
        }"
878,timeout,"        private void timeout() {
            synchronized (state) {
                if (state.get() > RUNNING) return;
                state.set(TIMEOUT);
            }"
879,run,"                public void run() {
                    onCancel();
                    onDone();
                }"
880,cancel,"        public void cancel(boolean mayInterruptIfRunning) {
            synchronized (state) {
                if (state.get() > RUNNING) return;
                state.set(CANCELLED);
            }"
881,cancel,"        public void cancel() {
            cancel(true);
        }"
882,run,"                    public void run() {
                        onFail(throwable);
                        onDone();
                    }"
883,run,"                        public void run() {
                            onSuccess(result);
                            onDone();
                        }"
884,run,"                        public void run() {
                            onSuccess(result);
                        }"
885,run,"                        public void run() {
                            if (!isDone() && mTimeoutListener != null) {
                                timeout();"
886,run,"        public void run() {
            if (isSchedule) {
                if (runner == null) {
                    if (!state.compareAndSet(NEW, RUNNING)) return;"
887,onFail,"        public abstract void onFail(Throwable t);
"
889,onSuccess,"        public abstract void onSuccess(T result);
"
890,doInBackground,"        public abstract T doInBackground() throws Throwable;
"
891,onFail,"        public void onFail(Throwable t) {
            Log.e(""ThreadUtils"", ""onFail: "", t);
        }"
892,onCancel,"        public void onCancel() {
            Log.e(""ThreadUtils"", ""onCancel: "" + Thread.currentThread());
        }"
893,uncaughtException,"                public void uncaughtException(Thread t, Throwable e) {
                    System.out.println(e);
                }"
894,run,"                public void run() {
                    try {
                        super.run();"
895,newThread,"        public Thread newThread(@NonNull Runnable r) {
            Thread t = new Thread(r, namePrefix + getAndIncrement()) {
                @Override
                public void run() {
                    try {
                        super.run();
                    } catch (Throwable t) {"
897,execute,"        public void execute(@NonNull Runnable command) {
            if (this.isShutdown()) return;
            mSubmittedCount.incrementAndGet();
            try {
                super.execute(command);"
898,afterExecute,"        protected void afterExecute(Runnable r, Throwable t) {
            mSubmittedCount.decrementAndGet();
            super.afterExecute(r, t);
        }"
899,getSubmittedCount,"        private int getSubmittedCount() {
            return mSubmittedCount.get();
        }"
900,createPool,"        private static ExecutorService createPool(final int type, final int priority) {
            switch (type) {
                case TYPE_SINGLE:"
901,getPoolByTypeAndPriority,"    private static ExecutorService getPoolByTypeAndPriority(final int type, final int priority) {
        synchronized (TYPE_PRIORITY_POOLS) {
            ExecutorService pool;"
902,getPoolByTypeAndPriority,"    private static ExecutorService getPoolByTypeAndPriority(final int type) {
        return getPoolByTypeAndPriority(type, Thread.NORM_PRIORITY);
    }"
903,run,"                public void run() {
                    pool.execute(task);
                }"
904,run,"                    public void run() {
                        pool.execute(task);
                    }"
905,execute,"    private static <T> void execute(final ExecutorService pool, final Task<T> task,
                                    long delay, final long period, final TimeUnit unit) {
        synchronized (TASK_POOL_MAP) {
            if (TASK_POOL_MAP.get(task) != null) {"
906,executeAtFixedRate,"    private static <T> void executeAtFixedRate(final ExecutorService pool,
                                               final Task<T> task,
                                               long delay,"
907,executeWithDelay,"    private static <T> void executeWithDelay(final ExecutorService pool,
                                             final Task<T> task,
                                             final long delay,"
908,execute,"    private static <T> void execute(final ExecutorService pool, final Task<T> task) {
        execute(pool, task, 0, 0, null);
    }"
909,setDeliver,"    public static void setDeliver(final Executor deliver) {
        sDeliver = deliver;
    }"
910,cancel,"    public static void cancel(ExecutorService executorService) {
        if (executorService instanceof ThreadPoolExecutor4Util) {
            for (Map.Entry<Task, ExecutorService> taskTaskInfoEntry : TASK_POOL_MAP.entrySet()) {"
911,cancel,"    public static void cancel(final List<Task> tasks) {
        if (tasks == null || tasks.size() == 0) return;
        for (Task task : tasks) {
            if (task == null) continue;"
912,cancel,"    public static void cancel(final Task... tasks) {
        if (tasks == null || tasks.length == 0) return;
        for (Task task : tasks) {
            if (task == null) continue;"
913,cancel,"    public static void cancel(final Task task) {
        if (task == null) return;
        task.cancel();
    }"
914,executeByCustomAtFixRate,"    public static <T> void executeByCustomAtFixRate(final ExecutorService pool,
                                                    final Task<T> task,
                                                    long initialDelay,"
915,executeByCustomAtFixRate,"    public static <T> void executeByCustomAtFixRate(final ExecutorService pool,
                                                    final Task<T> task,
                                                    final long period,"
916,executeByCustomWithDelay,"    public static <T> void executeByCustomWithDelay(final ExecutorService pool,
                                                    final Task<T> task,
                                                    final long delay,"
917,executeByCustom,"    public static <T> void executeByCustom(final ExecutorService pool, final Task<T> task) {
        execute(pool, task);
    }"
918,executeByCpuAtFixRate,"    public static <T> void executeByCpuAtFixRate(final Task<T> task,
                                                 long initialDelay,
                                                 final long period,"
920,executeByCpuAtFixRate,"    public static <T> void executeByCpuAtFixRate(final Task<T> task,
                                                 final long period,
                                                 final TimeUnit unit,"
921,executeByCpuAtFixRate,"    public static <T> void executeByCpuAtFixRate(final Task<T> task,
                                                 final long period,
                                                 final TimeUnit unit) {"
922,executeByCpuWithDelay,"    public static <T> void executeByCpuWithDelay(final Task<T> task,
                                                 final long delay,
                                                 final TimeUnit unit,"
923,executeByCpuWithDelay,"    public static <T> void executeByCpuWithDelay(final Task<T> task,
                                                 final long delay,
                                                 final TimeUnit unit) {"
924,executeByCpu,"    public static <T> void executeByCpu(final Task<T> task,
                                        @IntRange(from = 1, to = 10) final int priority) {
        execute(getPoolByTypeAndPriority(TYPE_CPU, priority), task);"
925,executeByCpu,"    public static <T> void executeByCpu(final Task<T> task) {
        execute(getPoolByTypeAndPriority(TYPE_CPU), task);
    }"
926,executeByIoAtFixRate,"    public static <T> void executeByIoAtFixRate(final Task<T> task,
                                                long initialDelay,
                                                final long period,"
928,executeByIoAtFixRate,"    public static <T> void executeByIoAtFixRate(final Task<T> task,
                                                final long period,
                                                final TimeUnit unit,"
929,executeByIoAtFixRate,"    public static <T> void executeByIoAtFixRate(final Task<T> task,
                                                final long period,
                                                final TimeUnit unit) {"
930,executeByIoWithDelay,"    public static <T> void executeByIoWithDelay(final Task<T> task,
                                                final long delay,
                                                final TimeUnit unit,"
931,executeByIoWithDelay,"    public static <T> void executeByIoWithDelay(final Task<T> task,
                                                final long delay,
                                                final TimeUnit unit) {"
932,executeByIo,"    public static <T> void executeByIo(final Task<T> task,
                                       @IntRange(from = 1, to = 10) final int priority) {
        execute(getPoolByTypeAndPriority(TYPE_IO, priority), task);"
933,executeByIo,"    public static <T> void executeByIo(final Task<T> task) {
        execute(getPoolByTypeAndPriority(TYPE_IO), task);
    }"
934,executeByCachedAtFixRate,"    public static <T> void executeByCachedAtFixRate(final Task<T> task,
                                                    long initialDelay,
                                                    final long period,"
936,executeByCachedAtFixRate,"    public static <T> void executeByCachedAtFixRate(final Task<T> task,
                                                    final long period,
                                                    final TimeUnit unit,"
937,executeByCachedAtFixRate,"    public static <T> void executeByCachedAtFixRate(final Task<T> task,
                                                    final long period,
                                                    final TimeUnit unit) {"
938,executeByCachedWithDelay,"    public static <T> void executeByCachedWithDelay(final Task<T> task,
                                                    final long delay,
                                                    final TimeUnit unit,"
939,executeByCachedWithDelay,"    public static <T> void executeByCachedWithDelay(final Task<T> task,
                                                    final long delay,
                                                    final TimeUnit unit) {"
940,executeByCached,"    public static <T> void executeByCached(final Task<T> task,
                                           @IntRange(from = 1, to = 10) final int priority) {
        execute(getPoolByTypeAndPriority(TYPE_CACHED, priority), task);"
941,executeByCached,"    public static <T> void executeByCached(final Task<T> task) {
        execute(getPoolByTypeAndPriority(TYPE_CACHED), task);
    }"
942,executeBySingleAtFixRate,"    public static <T> void executeBySingleAtFixRate(final Task<T> task,
                                                    long initialDelay,
                                                    final long period,"
944,executeBySingleAtFixRate,"    public static <T> void executeBySingleAtFixRate(final Task<T> task,
                                                    final long period,
                                                    final TimeUnit unit,"
945,executeBySingleAtFixRate,"    public static <T> void executeBySingleAtFixRate(final Task<T> task,
                                                    final long period,
                                                    final TimeUnit unit) {"
946,executeBySingleWithDelay,"    public static <T> void executeBySingleWithDelay(final Task<T> task,
                                                    final long delay,
                                                    final TimeUnit unit,"
947,executeBySingleWithDelay,"    public static <T> void executeBySingleWithDelay(final Task<T> task,
                                                    final long delay,
                                                    final TimeUnit unit) {"
948,executeBySingle,"    public static <T> void executeBySingle(final Task<T> task,
                                           @IntRange(from = 1, to = 10) final int priority) {
        execute(getPoolByTypeAndPriority(TYPE_SINGLE, priority), task);"
949,executeBySingle,"    public static <T> void executeBySingle(final Task<T> task) {
        execute(getPoolByTypeAndPriority(TYPE_SINGLE), task);
    }"
950,executeByFixedAtFixRate,"    public static <T> void executeByFixedAtFixRate(@IntRange(from = 1) final int size,
                                                   final Task<T> task,
                                                   long initialDelay,"
952,executeByFixedAtFixRate,"    public static <T> void executeByFixedAtFixRate(@IntRange(from = 1) final int size,
                                                   final Task<T> task,
                                                   final long period,"
954,executeByFixedWithDelay,"    public static <T> void executeByFixedWithDelay(@IntRange(from = 1) final int size,
                                                   final Task<T> task,
                                                   final long delay,"
956,executeByFixed,"    public static <T> void executeByFixed(@IntRange(from = 1) final int size,
                                          final Task<T> task,
                                          @IntRange(from = 1, to = 10) final int priority) {"
957,executeByFixed,"    public static <T> void executeByFixed(@IntRange(from = 1) final int size, final Task<T> task) {
        execute(getPoolByTypeAndPriority(size), task);
    }"
958,getCpuPool,"    public static ExecutorService getCpuPool(@IntRange(from = 1, to = 10) final int priority) {
        return getPoolByTypeAndPriority(TYPE_CPU, priority);
    }"
959,getCpuPool,"    public static ExecutorService getCpuPool() {
        return getPoolByTypeAndPriority(TYPE_CPU);
    }"
960,getIoPool,"    public static ExecutorService getIoPool(@IntRange(from = 1, to = 10) final int priority) {
        return getPoolByTypeAndPriority(TYPE_IO, priority);
    }"
961,getIoPool,"    public static ExecutorService getIoPool() {
        return getPoolByTypeAndPriority(TYPE_IO);
    }"
962,getCachedPool,"    public static ExecutorService getCachedPool(@IntRange(from = 1, to = 10) final int priority) {
        return getPoolByTypeAndPriority(TYPE_CACHED, priority);
    }"
963,getCachedPool,"    public static ExecutorService getCachedPool() {
        return getPoolByTypeAndPriority(TYPE_CACHED);
    }"
964,getSinglePool,"    public static ExecutorService getSinglePool(@IntRange(from = 1, to = 10) final int priority) {
        return getPoolByTypeAndPriority(TYPE_SINGLE, priority);
    }"
965,getSinglePool,"    public static ExecutorService getSinglePool() {
        return getPoolByTypeAndPriority(TYPE_SINGLE);
    }"
966,getFixedPool,"    public static ExecutorService getFixedPool(@IntRange(from = 1) final int size,
                                               @IntRange(from = 1, to = 10) final int priority) {
        return getPoolByTypeAndPriority(size, priority);"
967,getFixedPool,"    public static ExecutorService getFixedPool(@IntRange(from = 1) final int size) {
        return getPoolByTypeAndPriority(size);
    }"
968,runOnUiThreadDelayed,"    public static void runOnUiThreadDelayed(final Runnable runnable, long delayMillis) {
        HANDLER.postDelayed(runnable, delayMillis);
    }"
969,runOnUiThread,"    public static void runOnUiThread(final Runnable runnable) {
        if (Looper.myLooper() == Looper.getMainLooper()) {
            runnable.run();"
970,getMainHandler,"    public static Handler getMainHandler() {
        return HANDLER;
    }"
971,isMainThread,"    public static boolean isMainThread() {
        return Looper.myLooper() == Looper.getMainLooper();
    }"
972,apply,"        public static void apply(SharedPreferences.Editor editor) {
            try {
                if (sApplyMethod != null) {
                    sApplyMethod.invoke(editor);"
973,findApplyMethod,"        private static Method findApplyMethod() {
            try {
                Class clz = SharedPreferences.Editor.class;
                return clz.getMethod(""apply"");"
974,getAll,"    public static Map<String, ?> getAll(Context context) {
        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,
                Context.MODE_PRIVATE);
        return sp.getAll();"
975,contains,"    public static boolean contains(Context context, String key) {
        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,
                Context.MODE_PRIVATE);
        return sp.contains(key);"
976,clear,"    public static void clear(Context context) {
        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,
                Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();
        editor.clear();
        SharedPreferencesCompat.apply(editor);"
977,remove,"    public static void remove(Context context, String key) {
        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,
                Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();
        editor.remove(key);
        SharedPreferencesCompat.apply(editor);"
978,get,"    public static Object get(Context context, String key, Object defaultObject) {
        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,
                Context.MODE_PRIVATE);

        if (defaultObject instanceof String) {"
979,put,"    public static void put(Context context, String key, Object object) {

        SharedPreferences sp = context.getSharedPreferences(FILE_NAME,
                Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = sp.edit();
"
980,onError,"            public void onError(@NonNull Throwable t) {
"
981,onSuccess,"            public void onSuccess(@NonNull ApiResponse<List<ProjectListRes>> response) {
                projectListLiveData().postValue(response.getData());
            }"
982,onStart,"            public void onStart() {
            }"
983,listProjectsTab,"    public void listProjectsTab() {
        model.listProjectsTab(new ApiCallback<List<ProjectListRes>>() {
            @Override"
984,projectListLiveData,"    public MutableLiveData<List<ProjectListRes>> projectListLiveData() {
        if (projectListLiveData == null) {
            projectListLiveData = new MutableLiveData<>();
        }"
985,listProjectsTab,"    public void listProjectsTab(ApiCallback<List<ProjectListRes>> callback) {
        ApiUtil.getProjectApi().listProjectsTab().enqueue(callback);
    }"
986,initVariableId,"    public int initVariableId() {
        return BR.viewModel;
    }"
987,initContentView,"    public int initContentView(Bundle savedInstanceState) {
        return R.layout.ac_splash_layout;
    }"
988,initViews,"    public void initViews() {
        super.initViews();
        viewModel.projectListLiveData().observe(this, projectListRes -> {
            if (projectListRes.size() > 0) {
                MMkvHelper.getInstance().saveProjectTabs(projectListRes);
            }
        });"
989,onTouchEvent,"    public boolean onTouchEvent(MotionEvent motionEvent) {
        if (!enable) {
            return super.onTouchEvent(motionEvent);
        }

        float currentX = motionEvent.getRawX();"
990,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
        if (!enable) {
            return false;
        }
"
991,setSlideViewY,"    private void setSlideViewY(SlideBackView view, int y) {
        if (!view.getSlideView().scrollVertical()) {
            scrollTo(0, 0);
            return;"
992,onBack,"    private void onBack() {
        if (onSlide == null) {
            Utils.getActivityContext(getContext()).onBackPressed();"
993,attachToActivity,"    SlideControlLayout attachToActivity(@NonNull Activity activity) {
        ViewParent parent = getParent();
        if (parent instanceof ViewGroup) {
            ((ViewGroup) parent).removeView(this);
        }
        ViewGroup decor = (ViewGroup) activity.getWindow().getDecorView();
"
994,onDetachedFromWindow,"    protected void onDetachedFromWindow() {
        cancelAnim();
        if (rate != 0) {
            rate = 0;
            invalidate();"
995,cancelAnim,"    private void cancelAnim() {
        if (animator != null && animator.isRunning()) {
            animator.cancel();"
996,updateRate,"    public void updateRate(float updateRate, boolean hasAnim) {
        if (updateRate > getWidth()) {
            updateRate = getWidth();
        }
        if (rate == updateRate) {
            return;
        }
        cancelAnim();
        if (!hasAnim) {
            rate = updateRate;
            invalidate();"
997,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        slideView.onDraw(canvas, rate);
    }"
998,getSlideView,"    public ISlideView getSlideView() {
        return slideView;
    }"
999,setSlideView,"    public SlideBackView setSlideView(@NonNull ISlideView slideView) {
        this.slideView = slideView;
        setLayoutParams(new SlideControlLayout.LayoutParams(slideView.getWidth(), slideView.getHeight()));
        return this;
    }"
1000,attachToActivity,"    public SlideControlLayout attachToActivity(@NonNull Activity activity) {
        if (slideView == null) {
            slideView = new DefaultSlideView(activity);
        }
"
1001,onSlide,"    public SlideBack onSlide(OnSlide onSlide) {
        this.onSlide = onSlide;
        return this;
    }"
1002,canSlideWidth,"    public SlideBack canSlideWidth(int canSlideWidth) {
        this.canSlideWidth = canSlideWidth;
        return this;
    }"
1003,slideView,"    public SlideBack slideView(ISlideView slideView) {
        this.slideView = slideView;
        return this;
    }"
1004,create,"    public static SlideBack create() {
        return new SlideBack();
    }"
1006,measureView,"    public static int[] measureView(final View view) {
        ViewGroup.LayoutParams lp = view.getLayoutParams();
        if (lp == null) {
            lp = new ViewGroup.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.WRAP_CONTENT
            );
        }
        int widthSpec = ViewGroup.getChildMeasureSpec(0, 0, lp.width);
        int lpHeight = lp.height;"
1007,getMeasuredHeight,"    public static int getMeasuredHeight(final View view) {
        return measureView(view)[1];
    }"
1008,getMeasuredWidth,"    public static int getMeasuredWidth(final View view) {
        return measureView(view)[0];
    }"
1009,run,"            public void run() {
                if (listener != null) {
                    listener.onGetSize(view);"
1010,forceGetViewSize,"    public static void forceGetViewSize(final View view, final OnGetSizeListener listener) {
        view.post(new Runnable() {
            @Override"
1011,applyDimension,"    public static float applyDimension(final float value, final int unit) {
        DisplayMetrics metrics = Resources.getSystem().getDisplayMetrics();
        switch (unit) {
            case TypedValue.COMPLEX_UNIT_PX:
                return value;"
1012,px2sp,"    public static int px2sp(final float pxValue) {
        final float fontScale = Resources.getSystem().getDisplayMetrics().scaledDensity;
        return (int) (pxValue / fontScale + 0.5f);
    }"
1013,sp2px,"    public static int sp2px(final float spValue) {
        final float fontScale = Resources.getSystem().getDisplayMetrics().scaledDensity;
        return (int) (spValue * fontScale + 0.5f);
    }"
1014,px2dp,"    public static int px2dp(final float pxValue) {
        final float scale = Resources.getSystem().getDisplayMetrics().density;
        return (int) (pxValue / scale + 0.5f);
    }"
1015,dp2px,"    public static int dp2px(final float dpValue) {
        final float scale = Resources.getSystem().getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);
    }"
1017,getThirdLength,"    private double getThirdLength(int btnHeight, int btnWidth) {
        int all = btnHeight * btnHeight + btnWidth * btnWidth;
        return Math.sqrt(all);
    }"
1018,getConfigPaint,"    private Paint getConfigPaint(Paint paint) {
        if (enableFlashing) {
            paint.setColor(colorRandom[random.nextInt(colorCount - 1)]);
        }"
1022,onAnimationEnd,"            public void onAnimationEnd(Animator animator) {
                shineButton.removeView(ShineView.this);
            }"
1023,onAnimationEnd,"            public void onAnimationEnd(Animator animator) {
                clickValue = 0;
                invalidate();
            }"
1024,onAnimationUpdate,"            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                clickValue = (float) valueAnimator.getAnimatedValue();
                invalidate();
            }"
1025,onCheckedChanged,"        void onCheckedChanged(View view, boolean checked);
    }"
1026,onClick,"        public void onClick(View view) {
            if (!isChecked) {
                isChecked = true;
                showAnim();
            } else {"
1027,setListener,"        public void setListener(View.OnClickListener listener) {
            this.listener = listener;
        }"
1028,calPixels,"    private void calPixels() {
        if (activity != null && metrics != null) {
            activity.getWindowManager().getDefaultDisplay().getMetrics(metrics);"
1029,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    }"
1030,onAnimationCancel,"            public void onAnimationCancel(Animator animator) {
                setSrcColor(btnColor);
            }"
1031,onAnimationEnd,"            public void onAnimationEnd(Animator animator) {
                setSrcColor(isChecked ? btnFillColor : btnColor);
            }"
1032,onAnimationStart,"            public void onAnimationStart(Animator animator) {
                setSrcColor(btnFillColor);
            }"
1033,onAnimationUpdate,"            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                setScaleX((float) valueAnimator.getAnimatedValue());
                setScaleY((float) valueAnimator.getAnimatedValue());
            }"
1035,setShapeResource,"    public void setShapeResource(int raw) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            setShape(getResources().getDrawable(raw, null));"
1036,removeView,"    public void removeView(View view) {
        if (activity != null) {
            final ViewGroup rootView = (ViewGroup) activity.findViewById(Window.ID_ANDROID_CONTENT);"
1037,showAnim,"    public void showAnim() {
        if (activity != null) {
            shineView = new ShineView(activity, this, shineParams);"
1038,onAttachedToWindow,"    protected void onAttachedToWindow() {
        super.onAttachedToWindow();
"
1039,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        calPixels();
    }"
1040,init,"    public void init(Activity activity) {
        this.activity = activity;
        onButtonClickListener = new OnButtonClickListener();
        setOnClickListener(onButtonClickListener);
"
1041,setOnCheckStateChangeListener,"    public void setOnCheckStateChangeListener(OnCheckedChangeListener listener) {
        this.listener = listener;
    }"
1042,setOnClickListener,"    public void setOnClickListener(View.OnClickListener l) {
        if (l instanceof OnButtonClickListener) {
            super.setOnClickListener(l);"
1043,setShineSize,"    public void setShineSize(int size) {
        shineParams.shineSize = size;
    }"
1044,setSmallShineOffAngle,"    public void setSmallShineOffAngle(float angle) {
        shineParams.smallShineOffsetAngle = angle;
    }"
1045,setSmallShineColor,"    public void setSmallShineColor(int color) {
        shineParams.smallShineColor = color;
    }"
1046,setShineTurnAngle,"    public void setShineTurnAngle(float angle) {
        shineParams.shineTurnAngle = angle;
    }"
1047,setShineDistanceMultiple,"    public void setShineDistanceMultiple(float multiple) {
        shineParams.shineDistanceMultiple = multiple;
    }"
1048,setShineCount,"    public void setShineCount(int count) {
        shineParams.shineCount = count;
    }"
1049,enableFlashing,"    public void enableFlashing(boolean enable) {
        shineParams.enableFlashing = enable;
    }"
1050,setClickAnimDuration,"    public void setClickAnimDuration(int durationMs) {
        shineParams.clickAnimDuration = durationMs;
    }"
1051,setBigShineColor,"    public void setBigShineColor(int color) {
        shineParams.bigShineColor = color;
    }"
1052,setAnimDuration,"    public void setAnimDuration(int durationMs) {
        shineParams.animDuration = durationMs;
    }"
1053,setAllowRandomColor,"    public void setAllowRandomColor(boolean allowRandomColor) {
        shineParams.allowRandomColor = allowRandomColor;
    }"
1054,setCancel,"    public void setCancel() {
        setSrcColor(btnColor);
        if (shakeAnimator != null) {
            shakeAnimator.end();"
1055,onListenerUpdate,"    private void onListenerUpdate(boolean checked) {
        if (listener != null) {
            listener.onCheckedChanged(this, checked);"
1056,setChecked,"    public void setChecked(boolean checked) {
        setChecked(checked, false, false);
    }"
1057,setChecked,"    private void setChecked(boolean checked, boolean anim, boolean callBack) {
        isChecked = checked;
        if (checked) {
            setSrcColor(btnFillColor);
            isChecked = true;"
1058,setChecked,"    public void setChecked(boolean checked, boolean anim) {
        setChecked(checked, anim, true);
    }"
1059,setBtnFillColor,"    public void setBtnFillColor(int btnFillColor) {
        this.btnFillColor = btnFillColor;
    }"
1060,setBtnColor,"    public void setBtnColor(int btnColor) {
        this.btnColor = btnColor;
        setSrcColor(this.btnColor);
    }"
1061,isChecked,"    public boolean isChecked() {
        return isChecked;
    }"
1062,getColor,"    public int getColor() {
        return btnFillColor;
    }"
1063,getBottomHeight,"    public int getBottomHeight(boolean real) {
        if (real) {
            return realBottomHeight;
        }"
1064,setFixDialog,"    public void setFixDialog(Dialog fixDialog) {
        mFixDialog = fixDialog;
    }"
1066,setCanvas,"    public void setCanvas(Canvas canvas) {
        this.canvas = canvas;
    }"
1074,setLink,"    public void setLink(String link) {
        this.link = link;
    }"
1075,getLink,"    public String getLink() {
        return link;
    }"
1076,setId,"    public void setId(int id) {
        this.id = id;
    }"
1077,getId,"    public int getId() {
        return id;
    }"
1078,launchLogin,"    public static void launchLogin() {
        ARouter.getInstance().build(RouterActivityPath.Login.PAGER_LOGIN).navigation();
    }"
1079,launchArticleList,"    public static void launchArticleList(String id, String title) {
        ARouter.getInstance().build(RouterActivityPath.Square.PAGER_SQUARE_LIST).withString(""id"", id).withString(""title"", title).navigation();
    }"
1080,launchWeb,"    public static void launchWeb(String webUrl) {
        ARouter.getInstance().build(RouterActivityPath.Web.PAGER_WEB).withString(""webUrl"", webUrl).navigation();
    }"
1081,launchMain,"    public static void launchMain() {
        ARouter.getInstance().build(RouterActivityPath.Main.PAGER_MAIN).navigation();
    }"
1082,canRetry,"    private boolean canRetry(Wrapper wrapper) {
        return (wrapper.throwable instanceof ConnectException || wrapper.throwable instanceof SocketTimeoutException ||
                wrapper.throwable instanceof UnknownHostException ||"
1083,apply,"                    public Wrapper apply(Throwable throwable, Integer integer)
                            throws Exception {
                        return new Wrapper(throwable, integer);"
1085,apply,"    public Observable apply(Observable<Throwable> throwableObservable) {
        return throwableObservable.zipWith(Observable.range(1, retryCount + 1),
                new BiFunction<Throwable, Integer, Wrapper>() {"
1086,getCookieJar,"    public ClearableCookieJar getCookieJar() {
        if (cookieJar == null) {
            cookieJar = new PersistentCookieJar(new SetCookieCache(), new SharedPrefsCookiePersistor(AppProvider.getInstance().getApp()));
        }"
1088,initRetrofitWithLiveData,"    private Retrofit initRetrofitWithLiveData(String baseURL,OkHttpClient client) {
        return new Retrofit.Builder()
                .client(client)"
1089,create,"    public <T> T create(String baseURL, Class<T> service) {
        return initRetrofitWithLiveData(baseURL, initOkHttp()).create(service);
    }"
1090,getInstance,"    public static RetrofitCreateLiveDataHelper getInstance() {
        if (instance == null) {
            synchronized (RetrofitCreateLiveDataHelper.class) {
                instance = new RetrofitCreateLiveDataHelper();"
1093,initRetrofit,"    private Retrofit initRetrofit(String baseURL, OkHttpClient client) {
        return new Retrofit.Builder()
                .client(client)"
1094,create,"    public <T> T create(String baseURL, Class<T> service) {
        return initRetrofit(baseURL, initOkHttp()).create(service);
    }"
1095,getInstance,"    public static RetrofitCreateHelper getInstance() {
        if (instance == null) {
            synchronized (RetrofitCreateHelper.class) {
                instance = new RetrofitCreateHelper();"
1096,getResId,"    public static int getResId(String variableName, Class<?> c) {
        try {
            Field idField = c.getDeclaredField(variableName);"
1097,setDatas,"    public void setDatas(List<RankBean> datas) {
        this.datas = datas;
    }"
1098,getDatas,"    public List<RankBean> getDatas() {
        return datas;
    }"
1099,setTotal,"    public void setTotal(int total) {
        this.total = total;
    }"
1100,getTotal,"    public int getTotal() {
        return total;
    }"
1101,setSize,"    public void setSize(int size) {
        this.size = size;
    }"
1102,getSize,"    public int getSize() {
        return size;
    }"
1103,setPageCount,"    public void setPageCount(int pageCount) {
        this.pageCount = pageCount;
    }"
1104,getPageCount,"    public int getPageCount() {
        return pageCount;
    }"
1105,setOver,"    public void setOver(boolean over) {
        this.over = over;
    }"
1106,isOver,"    public boolean isOver() {
        return over;
    }"
1107,setOffset,"    public void setOffset(int offset) {
        this.offset = offset;
    }"
1108,getOffset,"    public int getOffset() {
        return offset;
    }"
1109,setCurPage,"    public void setCurPage(int curPage) {
        this.curPage = curPage;
    }"
1110,getCurPage,"    public int getCurPage() {
        return curPage;
    }"
1115,setType,"    public void setType(int type) {
        this.type = type;
    }"
1116,getType,"    public int getType() {
        return type;
    }"
1117,setUserName,"    public void setUserName(String userName) {
        this.userName = userName;
    }"
1118,getUserName,"    public String getUserName() {
        return userName;
    }"
1127,setDate,"    public void setDate(long date) {
        this.date = date;
    }"
1128,getDate,"    public long getDate() {
        return date;
    }"
1133,setChildren,"    public void setChildren(List<?> children) {
        this.children = children;
    }"
1134,getChildren,"    public List<?> getChildren() {
        return children;
    }"
1139,setParentChapterId,"    public void setParentChapterId(String parentChapterId) {
        this.parentChapterId = parentChapterId;
    }"
1140,getParentChapterId,"    public String getParentChapterId() {
        return parentChapterId;
    }"
1165,listProjects,"    ApiCall<ArticleListRes> listProjects(@Path(""page"") int page, @Query(""cid"") String id);
"
1166,listProjectsTab,"    ApiCall<List<ProjectListRes>> listProjectsTab();
"
1167,run,"                public void run() {
                    loadService.showSuccess();
                }"
1168,postSuccessDelayed,"        public static void postSuccessDelayed(final LoadService loadService, long delay) {
            new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
                @Override"
1169,postSuccessDelayed,"        public static void postSuccessDelayed(final LoadService loadService) {
            postSuccessDelayed(loadService, DELAY_TIME);
        }"
1170,run,"                public void run() {
                    loadService.showCallback(clazz);
                }"
1171,postCallbackDelayed,"        public static void postCallbackDelayed(final LoadService loadService, final Class<? extends Callback> clazz, long
                delay) {
            new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {"
1172,postCallbackDelayed,"        public static void postCallbackDelayed(final LoadService loadService, final Class<? extends Callback> clazz) {
            postCallbackDelayed(loadService, clazz, DELAY_TIME);
        }"
1173,configureBitmapBounds,"    private void configureBitmapBounds(int viewWidth, int viewHeight) {
        drawMatrix = null;
        int drawableWidth = shape.getIntrinsicWidth();
        int drawableHeight = shape.getIntrinsicHeight();
        boolean fits = viewWidth == drawableWidth && viewHeight == drawableHeight;

        if (drawableWidth > 0 && drawableHeight > 0 && !fits) {"
1174,paintMaskCanvas,"    protected void paintMaskCanvas(Canvas maskCanvas, Paint maskPaint, int width, int height) {
        if(shape != null) {
            if (shape instanceof BitmapDrawable) {"
1175,setShape,"    public void setShape(Drawable drawable) {
        shape = drawable;
        invalidate();
    }"
1176,setup,"    private void setup(Context context, AttributeSet attrs, int defStyle) {
        if(attrs != null){
            TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.PorterImageView, defStyle, 0);
            shape = typedArray.getDrawable(R.styleable.PorterImageView_siShape);"
1177,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        if (widthMeasureSpec == 0) {
            widthMeasureSpec = 50;
        }
        if (heightMeasureSpec == 0) {"
1178,onDraw,"    protected void onDraw(Canvas canvas) {
        if (!isInEditMode()) {
            int saveCount = canvas.saveLayer(0.0f, 0.0f, getWidth(), getHeight(), null, Canvas.ALL_SAVE_FLAG);"
1179,paintMaskCanvas,"    protected abstract void paintMaskCanvas(Canvas maskCanvas, Paint maskPaint, int width, int height);
"
1180,createMaskCanvas,"    private void createMaskCanvas(int width, int height, int oldw, int oldh) {
        boolean sizeChanged = width != oldw || height != oldh;
        boolean isValid = width > 0 && height > 0;
        if(isValid && (maskCanvas == null || sizeChanged)) {
            maskCanvas = new Canvas();"
1181,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        createMaskCanvas(w, h, oldw, oldh);
    }"
1182,invalidate,"    public void invalidate() {
        invalidated = true;
        super.invalidate();
    }"
1183,setSrcColor,"    public void setSrcColor(int color){
        paintColor = color;
        setImageDrawable(new ColorDrawable(color));
        if(drawablePaint!=null){
            drawablePaint.setColor(color);"
1184,setup,"    private void setup(Context context, AttributeSet attrs, int defStyle) {
        if(getScaleType() == ScaleType.FIT_CENTER) {
            setScaleType(ScaleType.CENTER_CROP);
        }
"
1185,hashCode,"    public int hashCode() {
        int result = actualTypeArguments != null ? Arrays.hashCode(actualTypeArguments) : 0;
        result = 31 * result + (ownerType != null ? ownerType.hashCode() : 0);
        result = 31 * result + (rawType != null ? rawType.hashCode() : 0);
        return result;
    }"
1186,equals,"    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ParameterizedTypeImpl that = (ParameterizedTypeImpl) o;
"
1187,getRawType,"    public Type getRawType() {
        return rawType;
    }"
1188,getOwnerType,"    public Type getOwnerType() {
        return ownerType;
    }"
1189,getActualTypeArguments,"    public Type[] getActualTypeArguments() {
        return actualTypeArguments;
    }"
1190,isZeroPage,"    public boolean isZeroPage() {
        return zeroPage == 0;
    }"
1191,resetZero,"    public void resetZero() {
        zeroPage = 0;
    }"
1192,nextZeroPage,"    public void nextZeroPage() {
        zeroPage++;
    }"
1193,isFirstPage,"    public boolean isFirstPage() {
        return page == 1;
    }"
1194,reset,"    public void reset() {
        page = 1;
    }"
1195,nextPage,"    public void nextPage() {
        page++;
    }"
1198,getManager,"    public NotificationManager getManager() {
        return this.notificationManager;
    }"
1199,cancel,"    public void cancel(int notifyId) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            notificationManager.cancel(notifyId);"
1200,completeProgress,"    public void completeProgress(String title, String content) {
        notifyProgress(0, 0, title, content);
    }"
1201,notifyProgress,"    public void notifyProgress(int max, int progress, String title, String content) {
        if (builder != null && progress > 0) {
            builder.setContentTitle(title);"
1202,getNotificationManagerCompat,"    private void getNotificationManagerCompat() {
        notificationManagerCompat = NotificationManagerCompat.from(getApplicationContext());
    }"
1203,getNotificationManager,"    private void getNotificationManager() {
        notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            int importance = NotificationManager.IMPORTANCE_DEFAULT;"
1204,notify,"    private void notify(NotificationCompat.Builder builder) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            getNotificationManager();"
1205,notified,"    public void notified(Intent intent) {
        PendingIntent pendingIntent = PendingIntent.getActivity(getApplicationContext(), 0, intent, 0);
        notify(builder.setContentIntent(pendingIntent));
    }"
1206,notified,"    public void notified() {
        notify(builder);
    }"
1207,getBuilder,"    public NotificationCompat.Builder getBuilder() {
        return builder;
    }"
1208,getBuilder,"    private NotificationCompat.Builder getBuilder(Context context) {
        return (builder = new NotificationCompat.Builder(context));
    }"
1209,getBuilder,"    private NotificationCompat.Builder getBuilder(Context context, String channelId) {
        return (builder = new NotificationCompat.Builder(context, channelId));
    }"
1210,baseNotification,"    private void baseNotification() {
        builder = getBuilder(getApplicationContext(), channelId)
                .setSmallIcon(smallIcon)"
1211,uncaughtException,"        void uncaughtException(Thread t, Throwable e);
    }"
1213,run,"            public void run() {
                for (; ; ) {
                    try {"
1214,setCrashHandler,"    private void setCrashHandler(CrashHandler crashHandler) {
        mCrashHandler = crashHandler;
        new Handler(Looper.getMainLooper()).post(new Runnable() {
            @Override
            public void run() {"
1215,init,"    public static void init(CrashHandler crashHandler) {
        getInstance().setCrashHandler(crashHandler);
    }"
1216,getInstance,"    private static NeverCrashHelper getInstance() {
        if (mInstance == null) {
            synchronized (NeverCrashHelper.class) {
                if (mInstance == null) {"
1219,onNext,"    public void onNext(@NonNull T t) {
        try {
            if (mCallback != null) {"
1220,onSubscribe,"    public void onSubscribe(@NonNull Disposable d) {
        if (mCallback != null) {
            mCallback.onSubscribe(d);"
1221,onSubscribe,"    protected void onSubscribe(@NonNull Disposable d) {
    }"
1222,onError,"    protected void onError(String msg) {
    }"
1224,onSuccess,"    protected void onSuccess(T response) {
    }"
1225,setGravity,"    public void setGravity(int gravity, int xOffset, int yOffset) {
        if (mToast != null) {
            mToast.setGravity(gravity, xOffset, yOffset);"
1226,run,"                public void run() {
                    mToast.cancel();
                    timer.cancel();
                }"
1227,run,"                public void run() {
                    mToast.show();
                }"
1228,show,"    public void show() {
        if (mToast != null) {
            mToast.setGravity(Gravity.CENTER,0,0);"
1229,makeText,"    public static MyToast makeText(Context context, CharSequence text) {
        return new MyToast(context, text);
    }"
1230,setShareArticles,"    public void setShareArticles(ArticleListRes shareArticles) {
        this.shareArticles = shareArticles;
    }"
1231,getShareArticles,"    public ArticleListRes getShareArticles() {
        return shareArticles;
    }"
1232,setCoinInfo,"    public void setCoinInfo(UserInfo coinInfo) {
        this.coinInfo = coinInfo;
    }"
1233,getCoinInfo,"    public UserInfo getCoinInfo() {
        return coinInfo;
    }"
1234,w,"    public static void w(String message) {
        if (!isDebuggable())
            return;
        getMethodNames(new Throwable().getStackTrace());
        Log.w(className, createLog(message));"
1235,v,"    public static void v(String message) {
        if (!isDebuggable())
            return;
        getMethodNames(new Throwable().getStackTrace());
        Log.v(className, createLog(message));"
1236,d,"    public static void d(String message) {
        if (!isDebuggable())
            return;
        getMethodNames(new Throwable().getStackTrace());
        Log.d(className, createLog(message));"
1237,i,"    public static void i(String message) {
        if (!isDebuggable())
            return;
        getMethodNames(new Throwable().getStackTrace());
        Log.i(className,createLog(message));"
1238,e,"    public static void e(String message) {
        if (!isDebuggable())
            return;
        getMethodNames(new Throwable().getStackTrace());
        Log.e(className, createLog(message));"
1239,getMethodNames,"    private static void getMethodNames(StackTraceElement[] sElements) {
        className = sElements[1].getFileName();
        methodName = sElements[1].getMethodName();
        lineNumber = sElements[1].getLineNumber();
    }"
1240,createLog,"    private static String createLog(String log) {
        StringBuffer buffer = new StringBuffer();
        buffer.append(""=="").append(methodName);
        buffer.append(""("").append(className).append("":"").append(lineNumber).append("")==:"");
        buffer.append(log);
        return buffer.toString();
    }"
1241,isDebuggable,"    public static boolean isDebuggable() {
        return BuildConfig.DEBUG;
    }"
1243,register,"    ApiCall<UserInfo> register(@Field(""username"") String username, @Field(""password"") String password, @Field(""repassword"") String repassword);
"
1244,login,"    ApiCall<UserInfo> login(@Field(""username"") String username, @Field(""password"") String password);
"
1245,onReloadEvent,"    protected boolean onReloadEvent(Context context, View view) {
        return true;
    }"
1246,onDetach,"    public void onDetach() {
        super.onDetach();
    }"
1247,onAttach,"    public void onAttach(Context context, View view) {
        super.onAttach(context, view);
    }"
1248,getSuccessVisible,"    public boolean getSuccessVisible() {
        return true;
    }"
1249,onCreateView,"    protected int onCreateView() {
        return R.layout.base_layout_loading;
    }"
1252,onResponse,"                    public void onResponse(Call<T> call, Response<T> response) {
                        T body = response.body();
                        postValue(body);
                    }"
1254,adapt,"    public LiveData<T> adapt(Call<T> call) {
        return new MyLiveData<T>(call, isApiResponse);
    }"
1255,responseType,"    public Type responseType() {
        return mResponseType;
    }"
1256,updateResources,"    private static Context updateResources(Context context, Locale locale) {
        Resources resources = context.getResources();
        Configuration configuration = resources.getConfiguration();
        configuration.setLocale(locale);
        configuration.setLocales(new LocaleList(locale));
        return context.createConfigurationContext(configuration);
    }"
1257,attachBaseContext,"    public static Context attachBaseContext(Context context) {
        Locale locale = LanguageUtil.getCurrentLanguage();
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            return updateResources(context, locale);"
1259,changeLanguage,"    private static void changeLanguage(Locale locale) {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
            LanguageUtil.setConfiguration(AppProvider.getInstance().getApp(), locale);
        }"
1260,switchLanguage,"    public static void switchLanguage(Locale locale) {
        changeLanguage(locale);
    }"
1261,switchEnglish,"    public static void switchEnglish() {
        changeLanguage(Locale.US);
    }"
1262,switchChinese,"    public static void switchChinese() {
        changeLanguage(Locale.SIMPLIFIED_CHINESE);
    }"
1263,getCurrentLanguage,"    public static Locale getCurrentLanguage() {
        Locale locale = MMkvHelper.getInstance().getLanguage();
        if (locale == null) {
            locale = Locale.getDefault();
        }"
1264,getSystemLanguage,"    public static String getSystemLanguage() {
        String language = Locale.getDefault().getLanguage() + ""-"" + Locale.getDefault().getCountry();
        return language;
    }"
1265,onDraw,"        void onDraw(Canvas canvas, float currentWidth);
    }"
1270,toggleSoftInput,"    private static void toggleSoftInput(View view) {
        try {
            view.setFocusable(true);"
1271,showSoftInput,"    public static void showSoftInput(View view){
        new Handler().postDelayed(() -> {
            toggleSoftInput(view);"
1272,hideInputMethod,"    public static void hideInputMethod(EditText editText, Context context) {
        InputMethodManager imm = (InputMethodManager) context.getApplicationContext().getSystemService(Context.INPUT_METHOD_SERVICE);
        try {
            imm.hideSoftInputFromWindow(editText.getWindowToken(), InputMethodManager.RESULT_UNCHANGED_SHOWN);"
1273,hideInputMethod,"    public static void hideInputMethod(Activity activity) {
        View a = activity.getCurrentFocus();
        if (a != null) {
            InputMethodManager imm = (InputMethodManager) activity.getApplicationContext().getSystemService(Context.INPUT_METHOD_SERVICE);"
1274,isShouldHideKeyboard,"    public static boolean isShouldHideKeyboard(View v, MotionEvent event) {
        if (v != null && (v instanceof EditText)) {
            int[] l = {0, 0};
            v.getLocationInWindow(l);"
1275,hideInputMethod,"    public static boolean hideInputMethod(View view, MotionEvent event, Activity activity) {
        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            if (isShouldHideKeyboard(view, event)) {
                hideInputMethod(activity);"
1283,onAny,"    void onAny(LifecycleOwner owner, Lifecycle.Event event);
"
1284,loadCircleImage,"    public void loadCircleImage(ImageView iv, String url) {
        Glide.with(iv.getContext())
                .load(url)"
1285,loadRoundImage,"    public void loadRoundImage(ImageView iv, String url, int round) {
        Glide.with(iv.getContext())
                .load(url)"
1286,loadImage,"    public void loadImage(ImageView iv, String url, int drawable) {
        Glide.with(iv.getContext())
                .load(url)"
1287,loadImage,"    public void loadImage(ImageView iv, String url, Drawable drawable) {
        Glide.with(iv.getContext())
                .load(url)"
1288,loadImage,"    public void loadImage(ImageView iv, String url) {
        Glide.with(iv.getContext())
                .load(url)"
1289,getInstance,"    public static GlideUtil getInstance() {
        return GlideUtilHolder.instance;
    }"
1291,delete,"    public static boolean delete(File file) {
        if (file == null) {
            return false;
        }
        if (file.isDirectory()) {"
1293,getSize,"    public static long getSize(File file) {
        long size = 0;
        try {
            File[] fileList = file.listFiles();
            for (File f : fileList) {"
1294,isSDCardAlive,"    public static boolean isSDCardAlive() {
        return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);
    }"
1295,onCreateView,"    protected int onCreateView()
    {
        return R.layout.base_layout_error;"
1296,onReloadEvent,"    protected boolean onReloadEvent(Context context, View view) {
        return false;
    }"
1297,onCreateView,"    protected int onCreateView() {
        return R.layout.base_layout_empty;
    }"
1298,getElasticInOut,"    private static float getElasticInOut(float elapsedTimeRate, double amplitude, double period) {
        double pi2 = Math.PI * 2;

        double s = period / pi2 * Math.asin(1 / amplitude);
        if ((elapsedTimeRate *= 2) < 1) {
            return (float) (-0.5f * (amplitude * Math.pow(2, 10 * (elapsedTimeRate -= 1f)) * Math.sin((elapsedTimeRate - s) * pi2 / period)));"
1299,getElasticOut,"    private static float getElasticOut(float elapsedTimeRate, double amplitude, double period) {
        if (elapsedTimeRate == 0 || elapsedTimeRate == 1) return elapsedTimeRate;

        double pi2 = Math.PI * 2;
        double s = period / pi2 * Math.asin(1 / amplitude);
        return (float) (amplitude * Math.pow(2, -10 * elapsedTimeRate) * Math.sin((elapsedTimeRate - s) * pi2 / period) + 1);"
1300,getElasticIn,"    private static float getElasticIn(float elapsedTimeRate, double amplitude, double period) {
        if (elapsedTimeRate == 0 || elapsedTimeRate == 1) return elapsedTimeRate;
        double pi2 = Math.PI * 2;
        double s = period / pi2 * Math.asin(1 / amplitude);
        return (float) -(amplitude * Math.pow(2f, 10f * (elapsedTimeRate -= 1f)) * Math.sin((elapsedTimeRate - s) * pi2 / period));
    }"
1301,getBounceOut,"    private static float getBounceOut(float elapsedTimeRate) {
        if (elapsedTimeRate < 1 / 2.75) {
            return (float) (7.5625 * elapsedTimeRate * elapsedTimeRate);"
1302,getBounceIn,"    private static float getBounceIn(float elapsedTimeRate) {
        return 1f - getBounceOut(1f - elapsedTimeRate);
    }"
1303,getBackInOut,"    private static float getBackInOut(float elapsedTimeRate, float amount) {
        amount *= 1.525;
        if ((elapsedTimeRate *= 2) < 1) {
            return (float) (0.5 * (elapsedTimeRate * elapsedTimeRate * ((amount + 1) * elapsedTimeRate - amount)));
        }"
1304,getPowInOut,"    private static float getPowInOut(float elapsedTimeRate, double pow) {
        if ((elapsedTimeRate *= 2) < 1) {
            return (float) (0.5 * Math.pow(elapsedTimeRate, pow));
        }"
1305,getPowOut,"    private static float getPowOut(float elapsedTimeRate, double pow) {
        return (float) ((float) 1 - Math.pow(1 - elapsedTimeRate, pow));
    }"
1306,getPowIn,"    private static float getPowIn(float elapsedTimeRate, double pow) {
        return (float) Math.pow(elapsedTimeRate, pow);
    }"
1307,get,"    static float get(@NonNull Ease ease, float elapsedTimeRate) {
        switch (ease) {
            case LINEAR:"
1308,getEase,"    public Ease getEase() {
        return ease;
    }"
1309,getInterpolation,"    public float getInterpolation(float input) {
        return EasingProvider.get(this.ease, input);
    }"
1310,setHintMessage,"    public void setHintMessage(String hintMessage) {
        this.hintMessage = hintMessage;
    }"
1311,setEffectiveIntervalTime,"    public void setEffectiveIntervalTime(int effectiveIntervalTime) {
        this.effectiveIntervalTime = effectiveIntervalTime;
    }"
1312,click,"    public boolean click() {
        long currentTime = System.currentTimeMillis();
        boolean result = (currentTime - lastClickTime) < effectiveIntervalTime;
        lastClickTime = currentTime;
        if (!result) {
            Toast.makeText(context, hintMessage, Toast.LENGTH_SHORT).show();
        }"
1314,getHeight,"    public int getHeight() {
        return height;
    }"
1315,getWidth,"    public int getWidth() {
        return width;
    }"
1316,scrollVertical,"    public boolean scrollVertical() {
        return true;
    }"
1318,setArrowColor,"    public void setArrowColor(int arrowColor) {
        this.arrowColor = arrowColor;
    }"
1319,setBackViewColor,"    public void setBackViewColor(int backViewColor) {
        this.backViewColor = backViewColor;
    }"
1320,createFile,"    private static void createFile(String path) {
        File file = new File(path);
        if (!file.exists()) {
            file.mkdirs();"
1321,getPath,"    public static String getPath() {
        return FILE_SAVE_DIR + File.separator + System.currentTimeMillis() + "".png"";
    }"
1322,getDecryptPath,"    public static String getDecryptPath() {
        return Config.FILE_DECRYPTED + File.separator + System.currentTimeMillis() + "".png"";
    }"
1323,getEnCryptPath,"    public static String getEnCryptPath() {
        return FILE_ENCRYPTED + File.separator + System.currentTimeMillis() + "".png"";
    }"
1324,getIntent,"    public static Intent getIntent(Context context) {
        ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
        ClipData clip = clipboard.getPrimaryClip();
        if (clip != null && clip.getItemCount() > 0) {
            return clip.getItemAt(0).getIntent();
        }"
1325,copyIntent,"    public static void copyIntent(Intent intent, Context context) {
        ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
        clipboard.setPrimaryClip(ClipData.newIntent(""intent"", intent));
    }"
1326,getUri,"    public static Uri getUri(Context context) {
        ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
        ClipData clip = clipboard.getPrimaryClip();
        if (clip != null && clip.getItemCount() > 0) {
            return clip.getItemAt(0).getUri();
        }"
1327,copyUri,"    public static void copyUri(Uri uri, Context context) {
        ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
        clipboard.setPrimaryClip(ClipData.newUri(context.getContentResolver(), ""uri"", uri));
    }"
1328,getText,"    public static CharSequence getText(Context context) {
        ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
        ClipData clip = clipboard.getPrimaryClip();
        if (clip != null && clip.getItemCount() > 0) {
            return clip.getItemAt(0).coerceToText(context);
        }"
1329,copyText,"    public static void copyText(CharSequence text, Context context) {
        ClipboardManager clipboard = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);
        clipboard.setPrimaryClip(ClipData.newPlainText(""text"", text));
    }"
1330,isDisposed,"        public boolean isDisposed() {
            return disposed;
        }"
1331,dispose,"        public void dispose() {
            disposed = true;
            call.cancel();
        }"
1332,onFailure,"        public void onFailure(Call<T> call, Throwable t) {
            if (call.isCanceled()) {
                return;
            }"
1333,onResponse,"        public void onResponse(Call<T> call, Response<T> response) {
            if (disposed) {
                return;
            }"
1335,clearAllCache,"    public static void clearAllCache() {
        FileUtils.delete(BaseApplication.getInstance().getCacheDir());
        if (FileUtils.isSDCardAlive()) {
            FileUtils.delete(BaseApplication.getInstance().getExternalCacheDir());"
1336,getTotalCacheSize,"    public static String getTotalCacheSize() {
        long cacheSize = FileUtils.getSize(BaseApplication.getInstance().getCacheDir());
        if (FileUtils.isSDCardAlive()) {
            cacheSize += FileUtils.getSize(BaseApplication.getInstance().getExternalCacheDir());
        }"
1337,createLiveData,"        private <T> SingleLiveEvent<T> createLiveData(SingleLiveEvent<T> liveData) {
            if (liveData == null) {
                liveData = new SingleLiveEvent<>();
            }"
1338,onBackPressedEvent,"        public SingleLiveEvent<Void> onBackPressedEvent() {
            return onBackPressedEvent = createLiveData(onBackPressedEvent);
        }"
1339,onBackPressed,"    public void onBackPressed() {
        uiChangeLiveData.onBackPressedEvent.call();
    }"
1340,accept,"    public void accept(Disposable disposable) throws Exception {
        addDisposable(disposable);
    }"
1347,onAny,"    public void onAny(LifecycleOwner owner, Lifecycle.Event event) {
"
1348,onCleared,"    protected void onCleared() {
        super.onCleared();
        if (mCompositeDisposable != null && !mCompositeDisposable.isDisposed()) {
            mCompositeDisposable.clear();
        }"
1349,uiChangeLiveData,"    public UiChangeLiveData uiChangeLiveData() {
        if (uiChangeLiveData == null) {
            uiChangeLiveData = new UiChangeLiveData();
        }"
1350,addDisposable,"    protected void addDisposable(Disposable disposable) {
        if (this.mCompositeDisposable == null) {
            this.mCompositeDisposable = new CompositeDisposable();
        }"
1351,getRawType,"    private Class<?> getRawType(Type type) {
        if (type instanceof Class) {
            return (Class) type;"
1352,createModel,"    private M createModel() {
        try {
            Type superClass = getClass().getGenericSuperclass();
            Type type = ((ParameterizedType) superClass).getActualTypeArguments()[0];"
1353,setOnClickListener,"    public BaseViewHolder setOnClickListener(int view_id, View.OnClickListener listener) {
        View view = getView(view_id);
        view.setOnClickListener(listener);
        return this;
    }"
1354,getView,"    public <T extends View> T getView(int id) {
        View view = mViewMap.get(id);
        if (view == null) {
            view = itemView.findViewById(id);
            mViewMap.put(id, view);"
1355,getItemView,"    public View getItemView() {
        return itemView;
    }"
1356,setTitleText,"    public void setTitleText(String title) {
        titleText.set(title);
    }"
1357,setOnClickListener,"        public BaseViewHolder setOnClickListener(int view_id, View.OnClickListener listener) {
            View view = getView(view_id);
            view.setOnClickListener(listener);
            return this;
        }"
1358,getView,"        public <T extends View> T getView(int id) {
            View view = mViewMap.get(id);
            if (view == null) {
                view = itemView.findViewById(id);
                mViewMap.put(id, view);"
1359,getItemView,"        public View getItemView() {
            return itemView;
        }"
1360,swipeToFirst,"    public void swipeToFirst(int pos) {
        T t = datas.get(pos);
        datas.remove(pos);
        datas.add(0, t);
        notifyDataSetChanged();
    }"
1361,getItemCount,"    public int getItemCount() {

        return datas == null ? 0 : datas.size();"
1362,getContext,"    public Context getContext() {
        return context;
    }"
1363,removeData," public void removeData(T datas) {
        this.datas.remove(datas);
        notifyDataSetChanged();
    }"
1364,addData,"    public void addData(T datas) {
        this.datas.add(datas);
        notifyDataSetChanged();
    }"
1365,addData,"    public void addData(int pos, T datas) {
        this.datas.add(0, datas);
        notifyDataSetChanged();
    }"
1366,addData,"    public void addData(int pos, List<T> datas) {
        this.datas.addAll(0, datas);
        notifyDataSetChanged();
    }"
1367,addData,"    public void addData(List<T> datas) {
        this.datas.addAll(datas);
        notifyDataSetChanged();
    }"
1368,clear,"    public void clear() {
        this.datas.clear();
        notifyDataSetChanged();
    }"
1369,delete,"    public void delete(int pos) {
        this.datas.remove(pos);
        this.notifyItemRemoved(pos);
    }"
1370,refresh,"    public void refresh(List<T> list) {
        this.datas.clear();
        if (list != null && list.size() > 0) {
            this.datas.addAll(list);
        }"
1371,bindData,"    protected abstract void bindData(BaseRecycleAdapter.BaseViewHolder holder, T t, int position);
"
1372,onBindViewHolder,"    public void onBindViewHolder(BaseRecycleAdapter.BaseViewHolder holder, int position) {
        bindData(holder, datas.get(position), position);
    }"
1373,isVertical,"    protected boolean isVertical() {
        return true;
    }"
1374,onCreateViewHolder,"    public BaseViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        context = parent.getContext();
        View view = LayoutInflater.from(context).inflate(getLayoutId(), parent, false);
        ViewGroup.LayoutParams params = view.getLayoutParams();

        if (params instanceof FlexboxLayoutManager.LayoutParams) {
            FlexboxLayoutManager.LayoutParams layoutParams = (FlexboxLayoutManager.LayoutParams) params;"
1375,getDatas,"    public List<T> getDatas() {
        return datas;
    }"
1379,showErrorMsg,"    public boolean showErrorMsg() {
        return false;
    }"
1381,onChanged,"    public void onChanged(T t) {
        if (t instanceof ApiResponse) {
            ApiResponse apiResponse = (ApiResponse) t;
            if (apiResponse.isSuccess()) {"
1382,onDestroyView,"    public void onDestroyView() {
        super.onDestroyView();
        unbinder.unbind();
    }"
1383,getView,"    public View getView() {
        return view;
    }"
1384,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        context = getContext();
    }"
1387,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        LogUtils.e(""--------"" + (view == null));
        if (view == null) {
            view = inflater.inflate(getLayoutId(), container, false);
        }
        parent = (ViewGroup) view.getParent();
        if (parent != null) {
            parent.removeView(view);
        }"
1388,initVariableId,"    protected abstract int initVariableId();
}"
1389,initContentView,"    protected abstract int initContentView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState);
"
1390,initViewDataBinding,"    private void initViewDataBinding() {

        if (viewModel == null) {
            Class modelClass;
            Type type = getClass().getGenericSuperclass();"
1391,onDestroyView,"    public void onDestroyView() {
        super.onDestroyView();
        if (binding != null) {
            binding.unbind();"
1393,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        initViewDataBinding();
        getLifecycle().addObserver(viewModel);
        initViews();
    }"
1394,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        binding = DataBindingUtil.inflate(inflater, initContentView(inflater, container, savedInstanceState), container, false);
        initImmersionBar();
        return binding.getRoot();
    }"
1397,initContentView,"    protected abstract int initContentView(Bundle savedInstanceState);
"
1398,initViewDataBinding,"    private void initViewDataBinding(Bundle savedInstanceState) {
        binding = DataBindingUtil.setContentView(this, initContentView(savedInstanceState));

        if (viewModel == null) {
            Class modelClass;
            Type type = getClass().getGenericSuperclass();"
1399,afterOnCreate,"    public void afterOnCreate(Bundle savedInstanceState) {
        super.afterOnCreate(savedInstanceState);
        initViewDataBinding(savedInstanceState);
        getLifecycle().addObserver(viewModel);
    }"
1401,onDestroyView,"    public void onDestroyView() {
        super.onDestroyView();
        if (unbinder != null) {
            unbinder.unbind();"
1403,getLayoutId,"    protected  int getLayoutId(){
        return 0;
    }"
1404,immersionBar,"    protected boolean immersionBar() {
        return false;
    }"
1405,showSuccess,"    protected void showSuccess() {
        if (loadService != null) {
            loadService.showSuccess();"
1407,showLoading,"    protected void showLoading(View view) {

        if (loadService == null) {
            loadService = LoadSir.getDefault().register(view, new Callback.OnReloadListener() {"
1408,initImmersionBar,"    protected void initImmersionBar() {
        if (immersionBar()) {
            ImmersionBar.with(this)"
1410,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
    }"
1411,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        if (view == null) {
            view = inflater.inflate(getLayoutId(), container, false);
        }
        parent = (ViewGroup) view.getParent();
        if (parent != null) {
            parent.removeView(view);
        }
        unbinder = ButterKnife.bind(this, view);"
1412,onPause,"    protected void onPause() {
        super.onPause();
        InputTools.hideInputMethod(this);
    }"
1413,onBackPressed,"    public void onBackPressed() {
        if (isDoubleClickExit()) {
            boolean isExit = doubleClickExitDetector.click();"
1414,isDoubleClickExit,"    public boolean isDoubleClickExit() {
        return false;
    }"
1415,getPermissionFailured,"    public void getPermissionFailured() {
        LogUtils.i(""Base--->getPermissionFail"");
    }"
1416,getPermissionSuccess,"    public void getPermissionSuccess() {
        LogUtils.i(""Base--->getPermissionSuccess"");
    }"
1417,requestPermissions,"    public void requestPermissions(String... permissions) {

        rxPermissions.request(permissions)"
1418,getMTheme,"    protected int getMTheme() {
        return R.style.AppTheme;
    }"
1421,canSwipeBack,"    protected boolean canSwipeBack() {
        return true;
    }"
1422,setSuspension,"    private void setSuspension() {
        WindowManager.LayoutParams mParams = getWindow().getAttributes();
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            mParams.type = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY;"
1423,hideKeyboard,"    private void hideKeyboard(IBinder token) {
        if (token != null) {
            InputMethodManager im = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);"
1424,isShouldHideKeyboard,"    private boolean isShouldHideKeyboard(View v, MotionEvent event) {
        if (v != null && (v instanceof EditText)) {
            int[] l = {0, 0};
            v.getLocationInWindow(l);"
1425,touchHideSoft,"    protected boolean touchHideSoft() {
        return true;
    }"
1426,dispatchTouchEvent,"    public boolean dispatchTouchEvent(MotionEvent ev) {
        if (touchHideSoft()) {
            if (ev.getAction() == MotionEvent.ACTION_DOWN) {
                View v = getCurrentFocus();"
1427,setAcTitle,"    protected void setAcTitle(String title) {
        if (tvTitle != null) {
            tvTitle.setText(title);"
1428,fullScreen,"    protected boolean fullScreen() {
        return false;
    }"
1429,initImmersionBar,"    public void initImmersionBar() {
        if (!fullScreen()) {
            ImmersionBar.with(this)"
1430,setLeftImg,"    protected void setLeftImg(int bg) {
        if (ivLeft != null) {
            if (bg <= 0) {"
1431,setRightImg,"    protected void setRightImg(int bg) {
        if (ivRight != null) {
            if (bg <= 0) {"
1432,shouldSupportMultiLanguage,"    protected boolean shouldSupportMultiLanguage() {
        return true;
    }"
1433,applyOverrideConfiguration,"                public void applyOverrideConfiguration(Configuration overrideConfiguration) {
                    if (overrideConfiguration != null) {
                        overrideConfiguration.setTo(configuration);
                    }"
1434,attachBaseContext,"    protected void attachBaseContext(Context newBase) {
        if (shouldSupportMultiLanguage()) {
            Context context = LanguageUtil.attachBaseContext(newBase);"
1436,showSuccess,"    public void showSuccess() {
        if (loadService == null) {
            loadService = LoadSir.getDefault().register(this, v -> onRetryBtnClick());
        }"
1437,showEmpty,"    public void showEmpty() {
        if (loadService == null) {
            loadService = LoadSir.getDefault().register(this, v -> onRetryBtnClick());
        }"
1438,showLoading,"    public void showLoading(View view) {
        if (loadService == null) {
            loadService = LoadSir.getDefault().register(view, v -> onRetryBtnClick());
        }"
1439,showLoading,"    public void showLoading() {
        if (loadService == null) {
            loadService = LoadSir.getDefault().register(this, v -> onRetryBtnClick());
        }"
1440,setOnRightImgClickListener,"    protected void setOnRightImgClickListener(View.OnClickListener listener) {
        if (ivRight != null) {
            ivRight.setOnClickListener(listener);"
1441,initEvents,"    public void initEvents() {
        tvTitle = (TextView) findViewById(R.id.tvTitle);
        ivLeft = (ImageView) findViewById(R.id.ivLeft);
        ivRight = (ImageView) findViewById(R.id.ivRight);
        if (ivLeft != null) {
            ivLeft.setOnClickListener(view -> finish());"
1442,afterOnCreate,"    public void afterOnCreate(Bundle savedInstanceState) {
"
1445,setUrl,"    public void setUrl(String url) {
        this.url = url;
    }"
1446,getUrl,"    public String getUrl() {
        return url;
    }"
1449,setTitle,"    public void setTitle(String title) {
        this.title = title;
    }"
1450,getTitle,"    public String getTitle() {
        return title;
    }"
1453,setIsVisible,"    public void setIsVisible(int isVisible) {
        this.isVisible = isVisible;
    }"
1454,getIsVisible,"    public int getIsVisible() {
        return isVisible;
    }"
1455,setImagePath,"    public void setImagePath(String imagePath) {
        this.imagePath = imagePath;
    }"
1456,getImagePath,"    public String getImagePath() {
        return imagePath;
    }"
1461,setDatas,"    public void setDatas(List<ArticleBean> datas) {
        this.datas = datas;
    }"
1462,getDatas,"    public List<ArticleBean> getDatas() {
        return datas;
    }"
1475,getItemType,"    public int getItemType() {
        if (TextUtils.isEmpty(envelopePic)) {
            return C.ARTICLE_ITEM_TEXT;
        }"
1476,setTags,"    public void setTags(List<?> tags) {
        this.tags = tags;
    }"
1477,getTags,"    public List<?> getTags() {
        return tags;
    }"
1478,setZan,"    public void setZan(int zan) {
        this.zan = zan;
    }"
1479,getZan,"    public int getZan() {
        return zan;
    }"
1482,setUserId,"    public void setUserId(int userId) {
        this.userId = userId;
    }"
1483,getUserId,"    public int getUserId() {
        return userId;
    }"
1488,setSuperChapterName,"    public void setSuperChapterName(String superChapterName) {
        this.superChapterName = superChapterName;
    }"
1489,getSuperChapterName,"    public String getSuperChapterName() {
        return superChapterName;
    }"
1490,setSuperChapterId,"    public void setSuperChapterId(int superChapterId) {
        this.superChapterId = superChapterId;
    }"
1491,getSuperChapterId,"    public int getSuperChapterId() {
        return superChapterId;
    }"
1492,setShareUser,"    public void setShareUser(String shareUser) {
        this.shareUser = shareUser;
    }"
1493,getShareUser,"    public String getShareUser() {
        return shareUser;
    }"
1494,setShareDate,"    public void setShareDate(Object shareDate) {
        this.shareDate = shareDate;
    }"
1495,getShareDate,"    public Object getShareDate() {
        return shareDate;
    }"
1496,setSelfVisible,"    public void setSelfVisible(int selfVisible) {
        this.selfVisible = selfVisible;
    }"
1497,getSelfVisible,"    public int getSelfVisible() {
        return selfVisible;
    }"
1498,setRealSuperChapterId,"    public void setRealSuperChapterId(int realSuperChapterId) {
        this.realSuperChapterId = realSuperChapterId;
    }"
1499,getRealSuperChapterId,"    public int getRealSuperChapterId() {
        return realSuperChapterId;
    }"
1500,setPublishTime,"    public void setPublishTime(long publishTime) {
        this.publishTime = publishTime;
    }"
1501,getPublishTime,"    public long getPublishTime() {
        return publishTime;
    }"
1502,setProjectLink,"    public void setProjectLink(String projectLink) {
        this.projectLink = projectLink;
    }"
1503,getProjectLink,"    public String getProjectLink() {
        return projectLink;
    }"
1504,setPrefix,"    public void setPrefix(String prefix) {
        this.prefix = prefix;
    }"
1505,getPrefix,"    public String getPrefix() {
        return prefix;
    }"
1506,setOrigin,"    public void setOrigin(String origin) {
        this.origin = origin;
    }"
1507,getOrigin,"    public String getOrigin() {
        return origin;
    }"
1508,setNiceShareDate,"    public void setNiceShareDate(String niceShareDate) {
        this.niceShareDate = niceShareDate;
    }"
1509,getNiceShareDate,"    public String getNiceShareDate() {
        return niceShareDate;
    }"
1510,setNiceDate,"    public void setNiceDate(String niceDate) {
        this.niceDate = niceDate;
    }"
1511,getNiceDate,"    public String getNiceDate() {
        return niceDate;
    }"
1516,setFresh,"    public void setFresh(boolean fresh) {
        this.fresh = fresh;
    }"
1517,isFresh,"    public boolean isFresh() {
        return fresh;
    }"
1518,setEnvelopePic,"    public void setEnvelopePic(String envelopePic) {
        this.envelopePic = envelopePic;
    }"
1519,getEnvelopePic,"    public String getEnvelopePic() {
        return envelopePic;
    }"
1520,setDescMd,"    public void setDescMd(String descMd) {
        this.descMd = descMd;
    }"
1521,getDescMd,"    public String getDescMd() {
        return descMd;
    }"
1526,setCollect,"    public void setCollect(boolean collect) {
        this.collect = collect;
    }"
1527,isCollect,"    public boolean isCollect() {
        return collect;
    }"
1528,setChapterName,"    public void setChapterName(String chapterName) {
        this.chapterName = chapterName;
    }"
1529,getChapterName,"    public String getChapterName() {
        return chapterName;
    }"
1530,setChapterId,"    public void setChapterId(String chapterId) {
        this.chapterId = chapterId;
    }"
1531,getChapterId,"    public String getChapterId() {
        return chapterId;
    }"
1532,setCanEdit,"    public void setCanEdit(boolean canEdit) {
        this.canEdit = canEdit;
    }"
1533,isCanEdit,"    public boolean isCanEdit() {
        return canEdit;
    }"
1534,setAuthor,"    public void setAuthor(String author) {
        this.author = author;
    }"
1535,getAuthor,"    public String getAuthor() {
        return author;
    }"
1536,setAudit,"    public void setAudit(int audit) {
        this.audit = audit;
    }"
1537,getAudit,"    public int getAudit() {
        return audit;
    }"
1538,setApkLink,"    public void setApkLink(String apkLink) {
        this.apkLink = apkLink;
    }"
1539,getApkLink,"    public String getApkLink() {
        return apkLink;
    }"
1540,deleteArticle,"    ApiCall<Object> deleteArticle(@Path(""id"") String id);
}"
1541,shareArticle,"    ApiCall<Object> shareArticle(@Query(""title"") String title, @Query(""link"") String link);
"
1542,listMyShare,"    ApiCall<MyShareBean> listMyShare(@Path(""page"") int page);
"
1543,search,"    ApiCall<ArticleListRes> search(@Path(""page"") int pageNo, @Query(""k"") String k);
"
1544,hotSearch,"    ApiCall<List<SearchBeanRes>> hotSearch();
"
1545,unCollect,"    ApiCall<Object> unCollect(@Path(""id"") String id);
"
1546,collect,"    ApiCall<Object> collect(@Path(""id"") String id);
"
1547,listMyCollect,"    ApiCall<ArticleListRes> listMyCollect(@Path(""page"") int page);
"
1548,listArticle,"    ApiCall<ArticleListRes> listArticle(@Path(""page"") int page, @Query(""cid"") String id);
"
1549,listPublicAuthor,"    ApiCall<List<PublicAuthorListRes>> listPublicAuthor();
"
1550,listArticle,"    LiveData<ApiResponse<ArticleListRes>> listArticle(@Path(""id"") String id, @Path(""page"") int page);
"
1551,listArticle,"    ApiCall<ArticleListRes> listArticle(@Path(""page"") int page);
"
1553,getVersion,"    public static String getVersion(Context context) {
        try {
            PackageManager manager = context.getPackageManager();"
1554,getApp,"    public Application getApp() {
        return app;
    }"
1557,update,"    public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs) {
        return 0;
    }"
1558,delete,"    public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {
        return 0;
    }"
1559,insert,"    public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {
        return null;
    }"
1560,getType,"    public String getType(@NonNull Uri uri) {
        return null;
    }"
1561,query,"    public Cursor query(@NonNull Uri uri,
                        @Nullable String[] projection,
                        @Nullable String selection,"
1562,onCreate,"    public boolean onCreate() {
        Context context = getContext();
        if (context == null) return false;
        context = context.getApplicationContext();
        if (context instanceof Application) {
            AppProvider.init((Application) context);"
1563,getApplicationByReflect,"    public static Application getApplicationByReflect() {
        return ActivityLifecycleImpl.INSTANCE.getApplicationByReflect();
    }"
1566,onSuccess,"    void onSuccess(@NonNull ApiResponse<T> response);
"
1568,adapt,"        public ApiCall<R> adapt(@NonNull Call<ApiResponse<R>> call) {
            return new ApiCall<>(mAnnotations, call);
        }"
1569,responseType,"        public Type responseType() {
            return new ParameterizedTypeImpl(new Type[]{responseType}, null, ApiResponse.class);
        }"
1570,get,"    public CallAdapter<?, ?> get(@NonNull Type returnType, @NonNull final Annotation[] annotations,
                                 @NonNull Retrofit retrofit) {
        Class<?> rawType = getRawType(returnType);
        if (rawType != ApiCall.class) {
            return null;
        }
        if (!(returnType instanceof ParameterizedType)) {"
1571,create,"    public static ApiCallAdapterFactory create() {
        return new ApiCallAdapterFactory();
    }"
1572,cancel,"    public void cancel() {
        if (mDisposable != null) {
            mDisposable.dispose();"
1573,onError,"    private void onError(ApiCallback<R> callback, Throwable throwable, boolean toast) {
        callback.onError(throwable);
    }"
1574,exectue,"    public Response<ApiResponse<R>> exectue() throws IOException {
        return mCall.clone().execute();
    }"
1575,accept,"                    public void accept(Throwable throwable) throws Exception {
                        onError(callback, throwable, toastError);
                        cancel();
                    }"
1576,accept,"                    public void accept(Response<ApiResponse<R>> response) throws Exception {
                        ApiResponse<R> body = response.body();
                        if (!response.isSuccessful() || body == null) {
                            onError(callback, new HttpException(response), toastError);
                            cancel();
                            return;"
1577,accept,"                    public void accept(Disposable disposable) throws Exception {
                        callback.onStart();
                    }"
1578,enqueue,"    public void enqueue(Context activity, ProgressType progressType, final boolean toastError,
                        final ApiCallback<R> callback) {
        Observable<Response<ApiResponse<R>>> observable;
        /*if (activity instanceof RxAppCompatActivity) {
            RxAppCompatActivity rxAppCompatActivity = (RxAppCompatActivity) activity;"
1579,enqueue,"    public void enqueue(Context activity, boolean toastError, final ApiCallback<R> callback) {
        enqueue(activity, ProgressType.NONE, toastError, callback);
    }"
1580,enqueue,"    public void enqueue(Context activity, ProgressType progressType, final ApiCallback<R> callback) {
        enqueue(activity, progressType, false, callback);
    }"
1581,enqueue2,"    public void enqueue2(Context activity, final ApiCallback<R> callback) {
        enqueue(activity, ProgressType.CANCELABLE, true, callback);
    }"
1582,enqueue,"    public void enqueue(Context activity, final ApiCallback<R> callback) {
        enqueue(activity, ProgressType.NONE, false, callback);
    }"
1583,enqueue,"    public <T extends ApiCallback<R>> void enqueue(T callback, ProgressType type) {
        enqueue(null, type, false, callback);
    }"
1584,enqueue,"    public <T extends ApiCallback<R>> void enqueue(T callback) {
        enqueue(null, ProgressType.NONE, false, callback);
    }"
1585,getActivityThreadInLoadedApkField,"    private Object getActivityThreadInLoadedApkField() {
        try {
            Field mLoadedApkField = Application.class.getDeclaredField(""mLoadedApk"");"
1586,getActivityThreadInActivityThreadStaticMethod,"    private Object getActivityThreadInActivityThreadStaticMethod() {
        try {
            Class activityThreadClass = Class.forName(""android.app.ActivityThread"");"
1587,getActivityThreadInActivityThreadStaticField,"    private Object getActivityThreadInActivityThreadStaticField() {
        try {
            Class activityThreadClass = Class.forName(""android.app.ActivityThread"");"
1588,getActivityThread,"    private Object getActivityThread() {
        Object activityThread = getActivityThreadInActivityThreadStaticField();
        if (activityThread != null) return activityThread;
        activityThread = getActivityThreadInActivityThreadStaticMethod();
        if (activityThread != null) return activityThread;
        return getActivityThreadInLoadedApkField();
    }"
1589,getApplicationByReflect,"    Application getApplicationByReflect() {
        try {
            Class activityThreadClass = Class.forName(""android.app.ActivityThread"");
            Object thread = getActivityThread();"
1590,setGravity,"    public void setGravity(VGravity gravity) {
        VIDEO_GRAVITY = gravity.getValue();
    }"
1591,setIsLoop,"    public void setIsLoop(boolean IS_LOOP) {
        this.IS_LOOP = IS_LOOP;
    }"
1593,getVideoSurface,"    public TextureView getVideoSurface() {
        return videoSurface;
    }"
1594,getMediaPlayer,"    public MediaPlayer getMediaPlayer() {
        return mMediaPlayer;
    }"
1595,onPauseVideoLayout,"    public void onPauseVideoLayout() {
        if (mMediaPlayer != null && mMediaPlayer.isPlaying())
            try {"
1596,onResumeVideoLayout,"    public void onResumeVideoLayout() {
        if (mMediaPlayer != null && !mMediaPlayer.isPlaying())
            try {"
1597,onDestroyVideoLayout,"    public void onDestroyVideoLayout() {
        if (mMediaPlayer != null) {
            try {"
1598,onSurfaceTextureUpdated,"    public void onSurfaceTextureUpdated(SurfaceTexture surface) {
    }"
1599,onSurfaceTextureDestroyed,"    public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
        return false;
    }"
1600,onSurfaceTextureSizeChanged,"    public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
    }"
1601,onSurfaceTextureAvailable,"    public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
        surfaceAvailableWorkers(surface);
    }"
1602,changeVideo,"    private void changeVideo() {
        try {
            onDestroyVideoLayout();"
1603,surfaceAvailableWorkers,"    private void surfaceAvailableWorkers(SurfaceTexture surfaceTexture) {
        Surface surface = new Surface(surfaceTexture);

        try {"
1604,surfaceSetup,"    private void surfaceSetup() {
        int screenHeight = getResources().getDisplayMetrics().heightPixels;
        int screenWidth = getResources().getDisplayMetrics().widthPixels;

        if (ADJUSTVIEWBOUNDS) {"
1605,updateTextureViewSize,"    private void updateTextureViewSize(int viewWidth, int viewHeight) {
        float scaleX = 1.0f;
        float scaleY = 1.0f;

        int pivotPointX = (VIDEO_GRAVITY == 0) ? 0 : (VIDEO_GRAVITY == 1) ? viewWidth : viewWidth / 2;
        int pivotPointY = viewHeight / 2;

        Matrix matrix = new Matrix();

        if (VIDEO_GRAVITY == 4) {"
1606,calculateVideoSize,"    private void calculateVideoSize() {
        try {
            MediaMetadataRetriever metaRetriever = new MediaMetadataRetriever();"
1607,setListeners,"    private void setListeners() {
        videoSurface.setSurfaceTextureListener(this);
    }"
1608,initViews,"    private void initViews() {
        videoSurface = new TextureView(getContext());
    }"
1609,setAdjustViewBounds,"    public void setAdjustViewBounds(boolean b) {
        this.ADJUSTVIEWBOUNDS = b;
    }"
1610,setSound,"    public void setSound(boolean sound) {
        this.SOUND = sound;
        if (mMediaPlayer != null)
            try {"
1611,getValue,"        public int getValue() {
            switch (this) {
                case end:"
1612,onCreate,"    public void onCreate() {
        super.onCreate();
        InjectorHelper.initializeApplicationComponent(this);

        if (BuildConfig.DEBUG) {"
1613,go_to_custom_impl,"    public void go_to_custom_impl(View view) {
        startActivity(new Intent(this, CustomActivity.class));
    }"
1614,notification_custom,"    public void notification_custom(View view) {
        UpdateChecker checker = new UpdateChecker(this);
        checker.setNotice(Notice.NOTIFICATION);
        checker.setNoticeIcon(R.drawable.ic_action_info);
        checker.start();
    }"
1615,notification,"    public void notification(View view) {
        UpdateChecker checker = new UpdateChecker(this);
        checker.setNotice(Notice.NOTIFICATION);
        checker.start();
    }"
1616,dialog_custom,"    public void dialog_custom(View view) {
        UpdateChecker checker = new UpdateChecker(this);
        checker.setNoticeIcon(R.drawable.ic_launcher);
        checker.start();
    }"
1617,dialog,"    public void dialog(View view) {
        UpdateChecker checker = new UpdateChecker(this);
        checker.start();
    }"
1618,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        startActivity(new Intent(this, Infos.class));
        return super.onOptionsItemSelected(item);
"
1619,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.xml.activity_menu, menu);
        return true;
    }"
1620,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.standard_activity);
        getActionBar().setSubtitle(R.string.standard);
    }"
1622,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        finish();
        return super.onOptionsItemSelected(item);
    }"
1623,createLink,"    private String createLink(String url, String title) {
        return String.format(""<a href=\""%s\"">%s</a>"", url, title);
    }"
1625,goToMarket,"    private static void goToMarket(Context mContext) {
        mContext.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(UpdateChecker.ROOT_PLAY_STORE_DEVICE + mContext.getPackageName())));
"
1626,userHasTappedToNotShowNoticeAgain,"    private static void userHasTappedToNotShowNoticeAgain(Context mContext, String mVersionDownloadable) {
        SharedPreferences prefs = mContext.getSharedPreferences(UpdateChecker.PREFS_FILENAME, 0);
        SharedPreferences.Editor editor = prefs.edit();
        editor.putBoolean(UpdateChecker.DONT_SHOW_AGAIN_PREF_KEY + mVersionDownloadable, true);
        editor.commit();
    }"
1627,onClick,"                        public void onClick(DialogInterface dialog, int which) {
                            userHasTappedToNotShowNoticeAgain(context, versionDownloadable);
                            dialog.cancel();
                        }"
1628,onClick,"                        public void onClick(DialogInterface dialog, int which) {
                            dialog.cancel();
                        }"
1629,onClick,"                        public void onClick(DialogInterface dialog, int which) {
                            goToMarket(context);
                            dialog.cancel();
                        }"
1630,show,"    public static void show(final Context context, final Store store, final String versionDownloadable, final int dialogIconResId) {
        try {
            String storeName = null;"
1631,getVersionInstalled,"    public String getVersionInstalled() {
        try {
            return getPackageManager().getPackageInfo(getPackageName(), 0).versionName;
        } catch (PackageManager.NameNotFoundException ignored) {"
1632,returnStoreError,"    public void returnStoreError() {
        result.setText(""Store Error"");
    }"
1633,returnAppUnpublished,"    public void returnAppUnpublished() {
        result.setText(""App unpublished"");
    }"
1634,returnNetworkError,"    public void returnNetworkError() {
        result.setText(""Network Error"");
    }"
1635,returnMultipleApksPublished,"    public void returnMultipleApksPublished() {
        result.setText(""Error #1"");
    }"
1636,returnUpToDate,"    public void returnUpToDate(String versionDownloadable) {
        result.setText(""Updated\n"" + ""Version downloadable: "" + versionDownloadable + ""\nVersion installed: "" + getVersionInstalled());
    }"
1637,foundUpdateAndDontShowIt,"    public void foundUpdateAndDontShowIt(String versionDownloadable) {
        result.setText(""Already Shown\n"" + ""Version downloadable: "" + versionDownloadable + ""\nVersion installed: "" + getVersionInstalled());
    }"
1638,foundUpdateAndShowIt,"    public void foundUpdateAndShowIt(String versionDownloadable) {
        result.setText(""Update available\n"" + ""Version downloadable: "" + versionDownloadable + ""\nVersion installed: "" + getVersionInstalled());
    }"
1639,custom_impl,"    public void custom_impl(View view) {
        UpdateChecker checker = new UpdateChecker(this, this);
        checker.setSuccessfulChecksRequired(2);
        checker.start();
        result.setText(R.string.loading);
    }"
1640,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();"
1642,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.custom_activity);
        getActionBar().setDisplayHomeAsUpEnabled(true);
        getActionBar().setSubtitle(R.string.custom);
        result = (TextView) findViewById(R.id.result);
    }"
1644,getScriptVersion,"    static void getScriptVersion(Context context, NetCallBack back) {
        new HTTPS_GET(context, scriptUrl, null, false, false, back);
    }"
1645,getAppVersion,"    static void getAppVersion(Context context, NetCallBack back) {
        new HTTPS_GET(context, appUrl, null, false, false, back);
    }"
1646,convertHashToString,"    private static String convertHashToString(byte[] hashBytes) {
        StringBuilder returnVal = new StringBuilder();
        for (byte hashByte : hashBytes) {
            returnVal.append(Integer.toString((hashByte & 0xff) + 0x100, 16).substring(1));
        }"
1648,filterList,"    static List<String> filterList(List<String> list, String start, String end) {
        return Stream.of(list)
                .filter(s -> TextUtils.isEmpty(start) || s.startsWith(start))"
1649,filterList,"    static List<String> filterList(List<String> list, Pattern pattern) {
        return Stream.of(list)
                .filter(s -> pattern.matcher(s).find())"
1650,getSLLContext,"    static SSLContext getSLLContext(String caPath) {
        SSLContext sslContext = null;
        try {
            CertificateFactory certificateFactory = CertificateFactory.getInstance(""X.509"");
            File ca = new File(caPath);"
1651,deleteFile,"    static boolean deleteFile(String filePath) {
        File file = new File(filePath);
        if (file.isFile() && file.exists()) {
            return file.delete();
        }"
1653,shell,"    static void shell(Context context, Command command) {
        try {
            RootTools.closeAllShells();"
1654,run,"                public void run() {
                    Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
                }"
1655,showToastOnLooper,"    static void showToastOnLooper(final Context context, String message) {
        try {
            Handler handler = new Handler(Looper.getMainLooper());"
1656,is64BitImpl,"    static boolean is64BitImpl() {
        try {
            Class<?> clzVMRuntime = Class.forName(""dalvik.system.VMRuntime"");
            if (clzVMRuntime == null) {"
1658,writeFileFromSD,"    static void writeFileFromSD(String path, String content) {
        BufferedWriter out = null;
        try {
            File file = new File(path);"
1659,readFileFromSD,"    static String readFileFromSD(String path) {
        StringBuilder stringBuilder = new StringBuilder();
        File file = new File(path);
        if (!file.isDirectory()) {
            try {
                InputStream inputStream = new FileInputStream(file);"
1660,copyFilesFromSD,"    static void copyFilesFromSD(String oldPath, String newPath) {
        try {
            File newFile = new File(newPath);"
1662,getCurrentProcessName,"    static String getCurrentProcessName(Context context) {
        int pid = android.os.Process.myPid();
        ActivityManager mActivityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
        if (mActivityManager != null) {
            for (ActivityManager.RunningAppProcessInfo appProcess : mActivityManager.getRunningAppProcesses()) {
                if (appProcess.pid == pid) {"
1663,getLog,"    static boolean getLog() {
        return getModuleSharedPreferences().getBoolean(""log"", false);
    }"
1664,getEnable,"    static boolean getEnable() {
        return getModuleSharedPreferences().getBoolean(""enable"", true);
    }"
1666,getNodejs,"    static String getNodejs() {
        return getModuleSharedPreferences().getString(""nodejs"", Tools.Start + Tools.origin[0]);
    }"
1667,getModuleSharedPreferences,"    private static XSharedPreferences getModuleSharedPreferences() {
        if (preferences == null) {
            preferences = new XSharedPreferences(BuildConfig.APPLICATION_ID, ""share"");
            preferences.makeWorldReadable();"
1668,PermissionsRequest,"    private static void PermissionsRequest(OnPermissionResultListener b, boolean get) {
        if (b != null)
            b.onResult(get);"
1670,onRequestPermissionsResult,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        if (requestCode == REQUEST_CODE_ASK_PERMISSIONS) {
            if (grantResults.length <= 0) {"
1671,onActivityResult,"    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK && requestCode == REQUEST_CODE_ASK_PERMISSIONS) {
            PermissionsRequest(back, true);"
1674,handleLoadPackage,"    public void handleLoadPackage(final LoadPackageParam lpparam) throws Throwable {
        if (lpparam.packageName.equals(Tools.HOOK_NAME)) {
            HotXposed.hook(HTTPHook.class, lpparam);"
1676,error,"                        public void error(int i, String s) {
                            ErrorCode.showError(context, i);
                        }"
1677,finish,"                        public void finish(JSONObject jsonObject) throws JSONException {
                            if (update.downloadUrl.length() == 0) {
                                iv_script.setVisibility(View.GONE);"
1678,showUpdateDialog,"    private void showUpdateDialog(final String title, final String extra, final Update update) {
        String log = update.log;
        if (extra != null && extra.length() != 0)
            log = log + ""\n\n"" + extra;
        new AlertDialog.Builder(this)"
1679,showMessageDialog,"    private void showMessageDialog(final String title, final String message, final boolean finish) {
        new AlertDialog.Builder(this)
                .setCancelable(false)"
1680,isVXP,"    private boolean isVXP() {
        return System.getProperty(""vxp"") != null;
    }"
1681,isModuleActive,"    private static boolean isModuleActive() {
        return false;
    }"
1682,isExpModuleActive,"    private boolean isExpModuleActive() {
        boolean isExp = false;

        try {
            ContentResolver contentResolver = getContentResolver();"
1684,checkState,"    private void checkState() {
        String method = null;

        if (isModuleActive()) {
            method = ""Xposed / EdXposed"";"
1686,error,"            public void error(int i, String s) {
                ErrorCode.showError(context, i);
            }"
1687,finish,"            public void finish(JSONObject jsonObject) throws JSONException {
                scriptUpdate = Update.getUpdate(context, jsonObject);
                if (!scriptUpdate.version.equals(Tools.nowVersion.replace(""-high"", """")))
                    iv_script.setVisibility(View.VISIBLE);"
1690,finish,"            public void finish(JSONObject jsonObject) throws JSONException {
                versionUpdate = Update.getUpdate(context, jsonObject);
                if (!versionUpdate.version.equals(BuildConfig.VERSION_NAME))
                    iv_version.setVisibility(View.VISIBLE);"
1691,checkUpdate,"    private void checkUpdate() {
        Update.getAppVersion(context, new NetCallBack() {
            @Override
            public void finish(JSONObject jsonObject) throws JSONException {"
1692,listener,"    private void listener() {
        rg_origin.setOnCheckedChangeListener((radioGroup, i) -> {
            switch (i) {
                case R.id.rb_a:
                    originIndex = 0;
                    break;
                case R.id.rb_b:
                    originIndex = 1;
                    break;
                case R.id.rb_c:
                    originIndex = 2;
                    break;"
1695,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        context = this;

        checkState();
        initView();
        listener();"
1696,handleMessage,"        public void handleMessage(Message msg) {
            if (msg.what == 0) {
                getPackageManager().setComponentEnabledSetting(new ComponentName(MainActivity.this, ""com.raincat.unblockmusicpro.MainAlias""),"
1698,logText,"    private static void logText(String name, Object object) {
        Field[] fields = object.getClass().getDeclaredFields();
        for (Field field : fields) {
            try {"
1700,beforeHookedMethod,"                                        protected void beforeHookedMethod(MethodHookParam param) {
                                            if (param.args.length >= 9) {
                                                param.args[8] = proxy;"
1701,commandOutput,"                                        public void commandOutput(int id, String line) {
                                            if (showLog)
                                                XposedBridge.log(line);
                                            if (firstToastShow) {"
1704,showError,"    public static void showError(Context context, int errorCode) {
            switch (errorCode) {
                case 1:"
1705,getJsonDouble,"    protected static double getJsonDouble(JSONObject obj, String key) {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                try {
                    return obj.getDouble(key);"
1706,getJsonBoolean,"    protected static boolean getJsonBoolean(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getBoolean(key);
            }"
1707,getJsonLong,"    protected static long getJsonLong(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getLong(key);
            }"
1708,getJsonInt,"    protected static int getJsonInt(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getInt(key);
            }"
1709,getJsonString,"    static String getJsonString(JSONObject obj, String key) throws JSONException {
        if (obj != null && obj.length() != 0) {
            if (!obj.isNull(key)) {
                return obj.getString(key);
            }"
1711,setBlock,"    public void setBlock(boolean block) {
        this.block = block;
    }"
1712,isBlock,"    public boolean isBlock() {
        return block;
    }"
1713,run,"    public DefaultExecutor run(){
        DefaultExecutor executor = new DefaultExecutor();

        if (REAL_PATH_PARENT.exists()&&REAL_PATH_PARENT.isFile()){
            executor.setWorkingDirectory(REAL_PATH_PARENT.getParentFile());
        }
        if (!setOutfileFlag)"
1714,setOutfile,"    public void setOutfile(File outfile) {
        this.outfile = outfile;
    }"
1715,getOutfile,"    public File getOutfile() {
        return outfile;
    }"
1716,output,"    private void output(String type , String filename){
        setOutfileFlag = true;
        File output = new File(tempdir.concat(""xray/""));
        outfile = new File(output, filename);
        command.add(""--""+type+""-output ""+outfile.getAbsolutePath());
    }"
1717,outputHTML,"    public XRay outputHTML(String filename){
        output(""html"",filename);
        return this;
    }"
1718,outputTEXT,"    public XRay outputTEXT(String filename){
        output(""text"",filename);
        return this;
    }"
1719,outputJSON,"    public XRay outputJSON(String filename){
        output(""json"",filename);
        return this;
    }"
1720,setUrl,"    public XRay setUrl(String url){
        url = url.replaceAll(""\\&"",""%26"");
        url = url.replaceAll(""\"""",""\\\"""");
        url = url.replaceAll(""\\|"",""%7C"");

        command.add(""--url ""+ ""\"""" + url + ""\"""");
        return this;"
1721,setPlugins,"    public XRay setPlugins(String... plugins){
        command.add(""--plugins ""+String.join("","",plugins));
        return this;
    }"
1722,setBasicCrawler,"    public XRay setBasicCrawler(String url) {
        command.add(""--basic-crawler ""+url);
        return this;
    }"
1723,setListen,"    public XRay setListen(String ip , int port) {
        String host = (ip+"":""+port);
        command.add(""--listen ""+host);
        return this;
    }"
1724,setCommand,"        public XRay setCommand(String command){
        this.command.add(command);
        return this;
    }"
1725,isPortUsing,"    public static boolean isPortUsing(String host,int port)  {
        boolean flag = false;
        Socket socket = null;
        try {

            InetAddress Address = InetAddress.getByName(host);"
1726,isLocalPortUsing,"    public  boolean isLocalPortUsing(int port){
        boolean flag = false;
        try {
            flag = isPortUsing(""127.0.0.1"", port);
        } catch (Exception e) {"
1727,process,"    public void process() {
        result = this;
        command.add(REAL_PATH);
        command.add(""webscan"");

        outputDir = new File(tempdir.concat(""xray/""));
"
1728,getOutputDir,"    public File getOutputDir() {
        return new File(tempdir.concat(""xray/""));
    }"
1729,check,"    public boolean check(Map param) {
        String content = """";
        if (Constant.TRACKRAY_SYSTEMOS == Constant.WINDOWS){
            Shell block = shell().block(true);
            if (REAL_PATH_PARENT.exists()&&REAL_PATH_PARENT.isFile()){
                block.workdir(REAL_PATH_PARENT.getParentFile());"
1731,getLevel,"        public int getLevel() {
            return level;
        }"
1732,getId,"        public int getId() {
            return id;
        }"
1734,getType,"        public int getType() {
            return type;
        }"
1735,clone,"    public Object clone()  {
        try {
            return super.clone();
        } catch (CloneNotSupportedException e) {"
1736,getTarget,"    public Target getTarget() {
        if (target==null){
            target = new Target();
            if(targetStr.matches(""(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)){3}"")){"
1737,toJSON,"    public JSONObject toJSON(){
        return JSONObject.fromObject(this);
    }"
1738,toString,"    public String toString() {
        return toJSON().toString();
    }"
1739,setData,"    public void setData(Object data) {
        this.data = data;
    }"
1740,getData,"    public Object getData() {
        return data;
    }"
1741,setMsg,"    public void setMsg(String msg) {
        this.msg = msg;
    }"
1742,getMsg,"    public String getMsg() {
        return msg;
    }"
1743,setCode,"    public void setCode(int code) {
        this.code = code;
    }"
1744,getCode,"    public int getCode() {
        return code;
    }"
1748,WARN,"    public static ResultCode WARN(String obj){
        return getInstance(400,obj);
    }"
1749,ERROR,"    public static ResultCode ERROR(String obj){
        return getInstance(500,obj);
    }"
1750,SUCCESS,"    public static ResultCode SUCCESS(String obj){
        return getInstance(200,obj);
    }"
1751,getInstance,"    public static ResultCode getInstance(int code, String msg){
        return new ResultCode(code,msg,null);
    }"
1752,getInstance,"    public static ResultCode getInstance(int code, String msg, Object data){
        return new ResultCode(code,msg,data);
    }"
1754,finalize,"    protected void finalize() throws Throwable {
        if (logind)
        {
            logout();"
1755,arr,"    public String[] arr(String command ,String... param){
        return param;
    }"
1756,list,"    public List<String> list(String... param){
        return Arrays.asList(param);
    }"
1757,format,"    private final String format() {
        return String.format(this.format,host);
    }"
1758,unpack,"    public Value unpack(byte[] obj) {
        try {
            return MessagePack.unpack(obj);
        } catch (IOException e) {"
1759,pack,"    public byte[] pack(Object obj) {
        try {
            return MessagePack.pack( obj );
        } catch (IOException e) {"
1760,sendList,"    public Map sendList(List list){
        try {
            byte[] result= send(pack(list));
            Value unpack = unpack(result);"
1761,send,"    public byte[] send(byte[] p){
        byte[] result= Requests.post(format())
                .timeout(callTimeout)
                .headers(header)"
1762,readResult,"    public Map readResult(){
        Map map = sendList(list(Command.ConsoleRead, token, String.valueOf(consoleID)));
        return map;
    }"
1763,executeCommand,"    public Map executeCommand(List<String> commands){
        StringBuffer buff = new StringBuffer();
        for (String command : commands) {
            buff.append(command).append(""\n"");
        }
        Map map = sendList(list(Command.ConsoleWrite, token, String.valueOf(consoleID), buff.toString()));"
1764,execute,"    public String execute(List<String> commands){
        executeCommand(commands);
        Map map = readResult();
        if (map!=null && map.containsKey(""data"") && map.containsKey(""prompt"") && map.containsKey(""busy""))
        {
            String response = StrUtils.unicodeToString(map.get(""data"").toString());"
1765,destroyConsole,"    public void destroyConsole(){
        Map map = sendList(list(Command.ConsoleDestroy, token , String.valueOf(consoleID)));
    }"
1766,banner,"    public String banner(){
        String banner = execute(Arrays.asList(""""));
        return banner;
    }"
1767,createConsole,"    public int createConsole(){
        Map map = sendList(list(Command.ConsoleCreate, token));
        if (map.containsKey(""id"")){
            consoleID = Integer.parseInt( map.get(""id"").toString());
            return consoleID;"
1768,logout,"    public void logout(){
        destroyConsole();
        Map map = sendList(list(Command.AuthLogout, token));
    }"
1769,close,"    public void close(){
        logout();
    }"
1770,login,"    public boolean login(){
        try {
            Map send = sendList(list(Command.AuthLogin, username, password));
            if (send.containsKey(""token"")){"
1771,per,"        protected void per(char[] buf, char[] chs, int len , ArrayList<String> strs){
            if(len == -1){
                String tmp="""";
                for(int i=buf.length-1; i>=0; --i)"
1772,numbers4,"        public List<String> numbers4(){
            char[] chars = {'0', '1', '2', '3', '4', '5', '6','7','8','9'};
            ArrayList<String> integers = new ArrayList<>();
            per(new char[4],chars,4-1,integers);
            return integers;
        }"
1774,decode,"            public String decode (String str){
                return StrUtils.unicodeToString(str);
            }"
1775,encode,"            public String encode (String str){
                return StrUtils.stringToUnicode(str);
            }"
1776,decode,"            public String decode(String obj,String code) throws UnsupportedEncodingException { return java.net.URLDecoder.decode(obj,code); }
        }
"
1778,decode,"            public  byte[] decode(String str) throws Exception {
                byte[] data = str.getBytes(""GBK"");
                int len = data.length;
                ByteArrayOutputStream buf = new ByteArrayOutputStream(len);
                int i = 0;
                int b1, b2, b3, b4;

                while (i < len) {
"
1779,encode,"            public  String encode(byte[] data) {
                StringBuffer sb = new StringBuffer();
                int len = data.length;
                int i = 0;
                int b1, b2, b3;

                while (i < len) {
                    b1 = data[i++] & 0xff;"
1780,MD5,"            public  String MD5(String source) {
                return byte2HexStr(MD5Bit(source.getBytes()));
            }"
1782,SHA1,"            public  String SHA1(String source) {
                return byte2HexStr(SHA1Bit(source.getBytes()));
            }"
1783,SHA1Bit,"            public  byte[] SHA1Bit(byte[] source) {
                try {
                    MessageDigest sha1Digest = MessageDigest.getInstance(""SHA-1"");"
1784,setMd5,"    public void setMd5(String md5) {
        this.md5 = md5;
    }"
1785,getMd5,"    public String getMd5() {
        return md5;
    }"
1788,setMatch,"    public void setMatch(String match) {
        this.match = match;
    }"
1789,getMatch,"    public String getMatch() {
        return match;
    }"
1790,setVersion,"    public void setVersion(String version) {
        this.version = version;
    }"
1791,getVersion,"    public String getVersion() {
        return version;
    }"
1792,isMatch,"    public boolean isMatch(){
        if (StringUtils.isNotBlank(match) && StringUtils.isBlank(md5))
            return true;
        return false;"
1793,toInt,"    private String toInt(int i) {
        StringBuffer result = new StringBuffer();
        int temp = String.valueOf(i).length();
        String flag = "" "";
        switch (temp){
            case 1:
                result.append(i).append(flag+flag+flag);"
1794,jsonPluginCount,"    public int jsonPluginCount(){
        String jsonPath = Constant.RESOURCES_INCLUDE_PATH.concat(""/json/"");

        File file = new File(jsonPath);
        if (file.isDirectory()){
            String[] list = file.list();"
1795,crawlerCount,"    public int crawlerCount() {
        return dispatchController.getAppContext().getBeansOfType(CrawlerPlugin.class).size();
    }"
1796,pluginCount,"    public int pluginCount() {
        return dispatchController.getAppContext().getBeansOfType(AbstractPlugin.class).size();
    }"
1797,pocCount,"    public int pocCount() {
        return dispatchController.getAppContext().getBeansOfType(AbstractPOC.class).size();
    }"
1798,auxiliaryCount,"    public int auxiliaryCount() {
        int auxiliary = 0;
        for (AbstractPlugin a : dispatchController.getAppContext().getBeansOfType(AbstractPlugin.class).values()) {
            if (a.getClass().getPackage().getName().contains(""auxiliary"")){
                auxiliary++;"
1799,count,"    public int count(){
        return auxiliaryCount()+crawlerCount()+pocCount()+jsonPluginCount()+pluginCount();
    }"
1800,generate,"    public String generate(){


        int crawler = crawlerCount();
        int plugin = pluginCount()+jsonPluginCount();
        int exploit = pocCount();
        int auxiliary = auxiliaryCount();


        String c = toInt(crawler);
        String p = toInt(plugin);
        String e = toInt(exploit);
        String a = toInt(auxiliary);

        String format = String.format(template,version, e, a, p, c);
        IMG[] imgs = IMG.values();"
1801,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Vulndetail) == false) {
            return false;"
1802,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(vulnId).append(severity).append(criticality).append(vtId).append(cvss2).append(tags).append(affectsDetail).append(affectsUrl).append(cvss3).append(cvssScore).append(targetId).append(vtName).append(locId).append(source).append(status).append(request).append(additionalProperties).toHashCode();
    }"
1803,setAdditionalProperty,"    public void setAdditionalProperty(String name, Object value) {
        this.additionalProperties.put(name, value);
    }"
1804,getAdditionalProperties,"    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }"
1805,toString,"    public String toString() {
        return ToStringBuilder.reflectionToString(this);
    }"
1806,setRequest,"    public void setRequest(String request) {
        this.request = request;
    }"
1807,getRequest,"    public String getRequest() {
        return request;
    }"
1808,setStatus,"    public void setStatus(String status) {
        this.status = status;
    }"
1809,getStatus,"    public String getStatus() {
        return status;
    }"
1810,setSource,"    public void setSource(String source) {
        this.source = source;
    }"
1811,getSource,"    public String getSource() {
        return source;
    }"
1812,setLocId,"    public void setLocId(Integer locId) {
        this.locId = locId;
    }"
1813,getLocId,"    public Integer getLocId() {
        return locId;
    }"
1814,setVtName,"    public void setVtName(String vtName) {
        this.vtName = vtName;
    }"
1815,getVtName,"    public String getVtName() {
        return vtName;
    }"
1816,setTargetId,"    public void setTargetId(String targetId) {
        this.targetId = targetId;
    }"
1817,getTargetId,"    public String getTargetId() {
        return targetId;
    }"
1818,setCvssScore,"    public void setCvssScore(Double cvssScore) {
        this.cvssScore = cvssScore;
    }"
1819,getCvssScore,"    public Double getCvssScore() {
        return cvssScore;
    }"
1820,setCvss3,"    public void setCvss3(String cvss3) {
        this.cvss3 = cvss3;
    }"
1821,getCvss3,"    public String getCvss3() {
        return cvss3;
    }"
1822,setAffectsUrl,"    public void setAffectsUrl(String affectsUrl) {
        this.affectsUrl = affectsUrl;
    }"
1823,getAffectsUrl,"    public String getAffectsUrl() {
        return affectsUrl;
    }"
1824,setAffectsDetail,"    public void setAffectsDetail(String affectsDetail) {
        this.affectsDetail = affectsDetail;
    }"
1825,getAffectsDetail,"    public String getAffectsDetail() {
        return affectsDetail;
    }"
1826,setTags,"    public void setTags(List<String> tags) {
        this.tags = tags;
    }"
1827,getTags,"    public List<String> getTags() {
        return tags;
    }"
1828,setCvss2,"    public void setCvss2(String cvss2) {
        this.cvss2 = cvss2;
    }"
1829,getCvss2,"    public String getCvss2() {
        return cvss2;
    }"
1830,setVtId,"    public void setVtId(String vtId) {
        this.vtId = vtId;
    }"
1831,getVtId,"    public String getVtId() {
        return vtId;
    }"
1832,setCriticality,"    public void setCriticality(Integer criticality) {
        this.criticality = criticality;
    }"
1833,getCriticality,"    public Integer getCriticality() {
        return criticality;
    }"
1834,setSeverity,"    public void setSeverity(Integer severity) {
        this.severity = severity;
    }"
1835,getSeverity,"    public Integer getSeverity() {
        return severity;
    }"
1836,setVulnId,"    public void setVulnId(String vulnId) {
        this.vulnId = vulnId;
    }"
1837,getVulnId,"    public String getVulnId() {
        return vulnId;
    }"
1838,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Vulnerabilities) == false) {
            return false;"
1839,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(vulnId).toHashCode();
    }"
1861,setLastSeen,"    public void setLastSeen(Object lastSeen) {
        this.lastSeen = lastSeen;
    }"
1862,getLastSeen,"    public Object getLastSeen() {
        return lastSeen;
    }"
1867,setVuln,"    public void setVuln(Vulndetail vuln) {
        this.vuln = vuln;
    }"
1868,getVuln,"    public Vulndetail getVuln() {
        return vuln;
    }"
1869,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Scan) == false) {
            return false;"
1870,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(nextRun).append(currentSession).append(targetId).append(profileName).append(profileId).append(criticality).append(reportTemplateId).append(scanId).append(additionalProperties).toHashCode();
    }"
1874,setScanId,"    public void setScanId(String scanId) {
        this.scanId = scanId;
    }"
1875,getScanId,"    public String getScanId() {
        return scanId;
    }"
1876,setReportTemplateId,"    public void setReportTemplateId(Object reportTemplateId) {
        this.reportTemplateId = reportTemplateId;
    }"
1877,getReportTemplateId,"    public Object getReportTemplateId() {
        return reportTemplateId;
    }"
1880,setProfileId,"    public void setProfileId(String profileId) {
        this.profileId = profileId;
    }"
1881,getProfileId,"    public String getProfileId() {
        return profileId;
    }"
1882,setProfileName,"    public void setProfileName(String profileName) {
        this.profileName = profileName;
    }"
1883,getProfileName,"    public String getProfileName() {
        return profileName;
    }"
1886,setCurrentSession,"    public void setCurrentSession(CurrentSession currentSession) {
        this.currentSession = currentSession;
    }"
1887,getCurrentSession,"    public CurrentSession getCurrentSession() {
        return currentSession;
    }"
1888,setNextRun,"    public void setNextRun(Object nextRun) {
        this.nextRun = nextRun;
    }"
1889,getNextRun,"    public Object getNextRun() {
        return nextRun;
    }"
1890,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof CurrentSession) == false) {
            return false;"
1891,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(eventLevel).append(progress).append(startDate).append(severityCounts).append(status).append(threat).append(scanSessionId).append(additionalProperties).toHashCode();
    }"
1895,setScanSessionId,"    public void setScanSessionId(String scanSessionId) {
        this.scanSessionId = scanSessionId;
    }"
1896,getScanSessionId,"    public String getScanSessionId() {
        return scanSessionId;
    }"
1897,setThreat,"    public void setThreat(Integer threat) {
        this.threat = threat;
    }"
1898,getThreat,"    public Integer getThreat() {
        return threat;
    }"
1901,setSeverityCounts,"    public void setSeverityCounts(SeverityCounts severityCounts) {
        this.severityCounts = severityCounts;
    }"
1902,getSeverityCounts,"    public SeverityCounts getSeverityCounts() {
        return severityCounts;
    }"
1903,setStartDate,"    public void setStartDate(String startDate) {
        this.startDate = startDate;
    }"
1904,getStartDate,"    public String getStartDate() {
        return startDate;
    }"
1905,setProgress,"    public void setProgress(Integer progress) {
        this.progress = progress;
    }"
1906,getProgress,"    public Integer getProgress() {
        return progress;
    }"
1907,setEventLevel,"    public void setEventLevel(Integer eventLevel) {
        this.eventLevel = eventLevel;
    }"
1908,getEventLevel,"    public Integer getEventLevel() {
        return eventLevel;
    }"
1909,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof SeverityCounts) == false) {
            return false;"
1910,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(high).append(medium).append(info).append(low).append(additionalProperties).toHashCode();
    }"
1914,setLow,"    public void setLow(Integer low) {
        this.low = low;
    }"
1915,getLow,"    public Integer getLow() {
        return low;
    }"
1916,setInfo,"    public void setInfo(Integer info) {
        this.info = info;
    }"
1917,getInfo,"    public Integer getInfo() {
        return info;
    }"
1918,setMedium,"    public void setMedium(Integer medium) {
        this.medium = medium;
    }"
1919,getMedium,"    public Integer getMedium() {
        return medium;
    }"
1920,setHigh,"    public void setHigh(Integer high) {
        this.high = high;
    }"
1921,getHigh,"    public Integer getHigh() {
        return high;
    }"
1922,equals,"    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Target) == false) {
            return false;"
1923,hashCode,"    public int hashCode() {
        return new HashCodeBuilder().append(address).append(severityCounts).append(lastScanDate).append(threat).append(criticality).append(manualIntervention).append(lastScanSessionId).append(targetId).append(continuousMode).append(lastScanId).append(lastScanSessionStatus).append(description).append(additionalProperties).toHashCode();
    }"
1927,setDescription,"    public void setDescription(String description) {
        this.description = description;
    }"
1928,getDescription,"    public String getDescription() {
        return description;
    }"
1929,setLastScanSessionStatus,"    public void setLastScanSessionStatus(String lastScanSessionStatus) {
        this.lastScanSessionStatus = lastScanSessionStatus;
    }"
1930,getLastScanSessionStatus,"    public String getLastScanSessionStatus() {
        return lastScanSessionStatus;
    }"
1931,setLastScanId,"    public void setLastScanId(String lastScanId) {
        this.lastScanId = lastScanId;
    }"
1932,getLastScanId,"    public String getLastScanId() {
        return lastScanId;
    }"
1933,setContinuousMode,"    public void setContinuousMode(Boolean continuousMode) {
        this.continuousMode = continuousMode;
    }"
1934,getContinuousMode,"    public Boolean getContinuousMode() {
        return continuousMode;
    }"
1937,setLastScanSessionId,"    public void setLastScanSessionId(String lastScanSessionId) {
        this.lastScanSessionId = lastScanSessionId;
    }"
1938,getLastScanSessionId,"    public String getLastScanSessionId() {
        return lastScanSessionId;
    }"
1939,setManualIntervention,"    public void setManualIntervention(Object manualIntervention) {
        this.manualIntervention = manualIntervention;
    }"
1940,getManualIntervention,"    public Object getManualIntervention() {
        return manualIntervention;
    }"
1945,setLastScanDate,"    public void setLastScanDate(String lastScanDate) {
        this.lastScanDate = lastScanDate;
    }"
1946,getLastScanDate,"    public String getLastScanDate() {
        return lastScanDate;
    }"
1949,setAddress,"    public void setAddress(String address) {
        this.address = address;
    }"
1950,getAddress,"    public String getAddress() {
        return address;
    }"
1951,stopScan,"    public boolean stopScan(String scanid){
        try {
            send(String.format(""/api/v1/scans/%s/abort"", scanid), HttpMethod.POST);
        }catch (Exception e){"
1953,vuln,"    public Vulndetail vuln(String vulnid){
        String url = String.format(""/api/v1/vulnerabilities/%s"", vulnid);
        String resp = send( url, HttpMethod.GET);
        try {
            return toBean(resp,Vulndetail.class);"
1954,vuln,"    public Vulndetail vuln(String scanid,String sessionid ,String vid){
        String resp = send(String.format(""/api/v1/scans/%s/results/%s/vulnerabilities/%s"", scanid, sessionid , vid), HttpMethod.GET);
        try {
            return toBean(resp,Vulndetail.class);"
1955,vulns,"    public List<Vulnerabilities> vulns(String sessionId,String scanId){
        ArrayList<Vulnerabilities> obj = new ArrayList<>();
        JSONObject jsonObject = vulnsJSON(sessionId, scanId);
        if (jsonObject.containsKey(""vulnerabilities"")){
            JSONArray vulnerabilities = jsonObject.getJSONArray(""vulnerabilities"");
            for (int i = 0; i < vulnerabilities.size(); i++) {"
1956,vulnsJSON,"    public JSONObject vulnsJSON(String sessionid , String scanid){
        String resp = send(String.format(""/api/v1/scans/%s/results/%s/vulnerabilities"", scanid, sessionid), HttpMethod.GET);
        JSONObject obj = JSONObject.fromObject(resp);
        return obj;
    }"
1957,createTarget,"    public String createTarget(String url){
        JSONObject json = new JSONObject();
        json.put(""address"",url);
        json.put(""description"",url);
        json.put(""criticality"",""10"");

        String resp = send(""/api/v1/targets"", json.toString(), HttpMethod.POST);
        JSONObject obj = JSONObject.fromObject(resp);
        return obj.getString(""target_id"");"
1958,targets,"    public List<Target> targets(){
        JSONObject obj = targetsJSON();
        List <Target> list = new ArrayList<>();
        if (obj.containsKey(""targets"")){
            JSONArray scans = obj.getJSONArray(""targets"");
            for (int i = 0; i < scans.size(); i++) {"
1959,toBean,"    protected <T> T toBean (String json ,  Class <T> clazz) throws IOException {
        return new ObjectMapper().readValue(json,clazz);
    }"
1960,targetsJSON,"    public JSONObject targetsJSON(){
        String scans = send(""/api/v1/targets"", HttpMethod.GET);
        return JSONObject.fromObject(scans);
    }"
1961,scan,"    public Scan scan(String scanId){
        String scan = send(String.format(""/api/v1/scans/%s"",scanId), HttpMethod.GET);
        try {
            return toBean(scan,Scan.class);"
1962,scans,"    public List<Scan> scans(){
        List <Scan> list = new ArrayList<>();
        JSONObject obj = scansJSON();
        if (obj.containsKey(""scans"")){
            JSONArray scans = obj.getJSONArray(""scans"");
            for (int i = 0; i < scans.size(); i++) {"
1963,scansJSON,"    public JSONObject scansJSON(){
        String scans = send(""/api/v1/scans"", HttpMethod.GET);
        return JSONObject.fromObject(scans);
    }"
1964,send,"    String send(String url , String data , HttpMethod method){
        CrawlerPage page = new CrawlerPage();
        page.getRequest().setUrl(host+url);
        page.getRequest().setHttpHeaders(headers);
        page.getRequest().setParamStr(data);
        page.getRequest().setHttpMethod(method);
        f.run(page);
        return page.getResponse().getStatus().getContentString();
    }"
1965,send,"    String send(String url , HttpMethod method){
        return send(url,"""",method);
    }"
1966,initCheck,"    public void initCheck(){
        headers = new Header[]{
                new BasicHeader(""X-Auth"",apikey),
                new BasicHeader(""content-type"",""application/json""),
        };

        CrawlerPage page = new CrawlerPage();
        page.getRequest().setUrl(host+""/api/v1/scans"");
        page.getRequest().setHttpHeaders(headers);
        page.getRequest().setHttpMethod(HttpMethod.GET);"
1969,createView,"    private TooltipView createView() {
        Context context = Robolectric.buildActivity(Activity.class).create().get();
        return new TooltipView(context);
    }"
1970,getDimension,"    private int getDimension(TypedArray a, @StyleableRes int styleableId,
            @DimenRes int defaultDimension) {
        int result = a.getDimensionPixelSize(styleableId, NOT_PRESENT);
        if (result == NOT_PRESENT) {
            result = getResources().getDimensionPixelSize(defaultDimension);"
1971,setAlignmentOffsetResource,"    public void setAlignmentOffsetResource(@DimenRes int resId) {
        this.alignmentOffset = getResources().getDimensionPixelSize(resId);
        invalidate();
    }"
1972,setAlignmentOffset,"    public void setAlignmentOffset(int offset) {
        this.alignmentOffset = offset;
        invalidate();
    }"
1973,getAlignmentOffset,"    public int getAlignmentOffset() {
        return alignmentOffset;
    }"
1974,setArrowAlignment,"    public void setArrowAlignment(ArrowAlignment arrowAlignment) {
        this.arrowAlignment = arrowAlignment;
        invalidate();
    }"
1975,getArrowAlignment,"    public ArrowAlignment getArrowAlignment() {
        return arrowAlignment;
    }"
1976,setArrowPositioning,"    public void setArrowPositioning(int arrowPositioning) {
        this.arrowPositioning = arrowPositioning;
        invalidate();
    }"
1977,setTooltipColor,"    public void setTooltipColor(int tooltipColor) {
        this.tooltipColor = tooltipColor;
        invalidate();
    }"
1978,getTooltipColor,"    public int getTooltipColor() {
        return tooltipColor;
    }"
1979,setAnchoredViewId,"    public void setAnchoredViewId(@IdRes int anchoredViewId) {
        this.anchoredViewId = anchoredViewId;
        invalidate();
    }"
1980,getAnchoredViewId,"    public int getAnchoredViewId() {
        return anchoredViewId;
    }"
1981,setCornerRadiusResource,"    public void setCornerRadiusResource(@DimenRes int resId) {
        cornerRadius = getResources().getDimensionPixelSize(resId);
        invalidate();
    }"
1982,setCornerRadius,"    public void setCornerRadius(int cornerRadius) {
        this.cornerRadius = cornerRadius;
        invalidate();
    }"
1983,getCornerRadius,"    public int getCornerRadius() {
        return cornerRadius;
    }"
1984,setArrowWidthResource,"    public void setArrowWidthResource(@DimenRes int resId) {
        arrowWidth = getResources().getDimensionPixelSize(resId);
        invalidate();
    }"
1985,setArrowWidth,"    public void setArrowWidth(int arrowWidth) {
        this.arrowWidth = arrowWidth;
        invalidate();
    }"
1986,getArrowWidth,"    public int getArrowWidth() {
        return arrowWidth;
    }"
1987,setArrowHeightResource,"    public void setArrowHeightResource(@DimenRes int resId) {
        arrowHeight = getResources().getDimensionPixelSize(resId);
        invalidate();
    }"
1988,setArrowHeight,"    public void setArrowHeight(int arrowHeight) {
        this.arrowHeight = arrowHeight;
        invalidate();
    }"
1989,getArrowHeight,"    public int getArrowHeight() {
        return arrowHeight;
    }"
1990,setTooltipPath,"    void setTooltipPath(Path tooltipPath) {
        this.tooltipPath = tooltipPath;
    }"
1991,getTooltipPath,"    Path getTooltipPath() {
        return tooltipPath;
    }"
1992,setPaint,"    void setPaint(Paint paint) {
        this.paint = paint;
    }"
1993,getTooltipPaint,"    Paint getTooltipPaint() {
        return paint;
    }"
1994,onDraw,"    protected void onDraw(@NonNull Canvas canvas) {
        if (tooltipPath == null || paint == null) {
            arrowLocation.configureDraw(this, canvas);
        }
        canvas.drawPath(tooltipPath, paint);"
1995,invalidate,"    public void invalidate() {
        super.invalidate();
        tooltipPath = null;
        paint = null;
    }"
1996,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        setMeasuredDimension(getMeasuredWidth(), getMeasuredHeight() + arrowHeight);
    }"
1997,init,"    private void init(AttributeSet attrs, int defStyle) {
        Resources res = getResources();
        TypedArray a = getContext().obtainStyledAttributes(
                attrs, R.styleable.TooltipView, defStyle, 0);
        try {"
1999,assertThat,"    public static ShadowViewAssert assertThat(ShadowView actual) {
        return new ShadowViewAssert(actual);
    }"
2000,configureDraw,"    void configureDraw(TooltipView view, Canvas canvas);
}"
2001,calculateArrowMidPoint,"    public static float calculateArrowMidPoint(TooltipView view, RectF rectF) {
        int offset = view.getAlignmentOffset();
        float middle = 0f;

        switch (view.getArrowAlignment()) {
            case START:"
2002,getValue,"    public int getValue() {
        return value;
    }"
2003,getAlignment,"    public static ArrowAlignment getAlignment(int value) {
        for (ArrowAlignment alignment : values()) {
            if (value == alignment.getValue()) {
                return alignment;"
2004,wasInvalidated,"    public S wasInvalidated() {
        isNotNull();
        assertThat(actual.wasInvalidated())
                .overridingErrorMessage(""Expected view to be invalidated but was not"")
                .isTrue();"
2005,filterRGB,"	public abstract int filterRGB(int x, int y, int rgb);
}"
2006,setDimensions,"	public void setDimensions(int width, int height) {
	}"
2007,filter,"    public BufferedImage filter( BufferedImage src, BufferedImage dst ) {
        int width = src.getWidth();
        int height = src.getHeight();
		int type = src.getType();
		WritableRaster srcRaster = src.getRaster();

        if ( dst == null )
            dst = createCompatibleDestImage( src, null );
		WritableRaster dstRaster = dst.getRaster();

        setDimensions( width, height);
"
2008,combinePixels,"	public static int combinePixels(int rgb1, int rgb2, int op, int extraAlpha) {
		if (op == REPLACE)
			return rgb1;
		int a1 = (rgb1 >> 24) & 0xff;
		int r1 = (rgb1 >> 16) & 0xff;
		int g1 = (rgb1 >> 8) & 0xff;
		int b1 = rgb1 & 0xff;
		int a2 = (rgb2 >> 24) & 0xff;
		int r2 = (rgb2 >> 16) & 0xff;
		int g2 = (rgb2 >> 8) & 0xff;
		int b2 = rgb2 & 0xff;

		switch (op) {
		case NORMAL:"
2009,combinePixels,"	public static int combinePixels(int rgb1, int rgb2, int op, int extraAlpha, int channelMask) {
		return (rgb2 & ~channelMask) | combinePixels(rgb1 & channelMask, rgb2, op, extraAlpha);
	}"
2010,combinePixels,"	public static int combinePixels(int rgb1, int rgb2, int op) {
		return combinePixels(rgb1, rgb2, op, 0xff);
	}"
2011,nearColors,"	public static boolean nearColors(int rgb1, int rgb2, int tolerance) {
		int r1 = (rgb1 >> 16) & 0xff;
		int g1 = (rgb1 >> 8) & 0xff;
		int b1 = rgb1 & 0xff;
		int r2 = (rgb2 >> 16) & 0xff;
		int g2 = (rgb2 >> 8) & 0xff;
		int b2 = rgb2 & 0xff;
		return Math.abs(r1-r2) <= tolerance && Math.abs(g1-g2) <= tolerance && Math.abs(b1-b2) <= tolerance;
	}"
2012,brightness,"	public static int brightness(int rgb) {
		int r = (rgb >> 16) & 0xff;
		int g = (rgb >> 8) & 0xff;
		int b = rgb & 0xff;
		return (r+g+b)/3;
	}"
2013,interpolate,"	public static int interpolate(int v1, int v2, float f) {
		return clamp((int)(v1+f*(v2-v1)));
	}"
2014,clamp,"	public static int clamp(int c) {
		if (c < 0)
			return 0;
		if (c > 255)
			return 255;"
2015,toString,"	public String toString() {
		return ""Stylize/Add Noise..."";
	}"
2016,filterRGB,"	public int filterRGB(int x, int y, int rgb) {
		if ( randomNumbers.nextFloat() <= density ) {
			int a = rgb & 0xff000000;
			int r = (rgb >> 16) & 0xff;"
2017,random,"	private int random(int x) {
		x += (int)(((distribution == GAUSSIAN ? randomNumbers.nextGaussian() : 2*randomNumbers.nextFloat() - 1)) * amount);
		if (x < 0)
			x = 0;
		else if (x > 0xff)"
2018,getDensity,"	public float getDensity() {
		return density;
	}"
2019,setDensity,"	public void setDensity( float density ) {
		this.density = density;
	}"
2020,getMonochrome,"	public boolean getMonochrome() {
		return monochrome;
	}"
2021,setMonochrome,"	public void setMonochrome(boolean monochrome) {
		this.monochrome = monochrome;
	}"
2022,getDistribution,"	public int getDistribution() {
		return distribution;
	}"
2023,setDistribution,"	public void setDistribution( int distribution ) {
		this.distribution = distribution;
	}"
2025,setAmount,"	public void setAmount(int amount) {
		this.amount = amount;
	}"
2026,setRGB,"	public void setRGB( BufferedImage image, int x, int y, int width, int height, int[] pixels ) {
		int type = image.getType();
		if ( type == BufferedImage.TYPE_INT_ARGB || type == BufferedImage.TYPE_INT_RGB )
			image.getRaster().setDataElements( x, y, width, height, pixels );"
2027,getRenderingHints,"    public RenderingHints getRenderingHints() {
        return null;
    }"
2028,getPoint2D,"    public Point2D getPoint2D( Point2D srcPt, Point2D dstPt ) {
        if ( dstPt == null )
            dstPt = new Point2D.Double();
        dstPt.setLocation( srcPt.getX(), srcPt.getY() );
        return dstPt;"
2029,getBounds2D,"    public Rectangle2D getBounds2D( BufferedImage src ) {
        return new Rectangle(0, 0, src.getWidth(), src.getHeight());
    }"
2030,createCompatibleDestImage,"    public BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel dstCM) {
        if ( dstCM == null )
            dstCM = src.getColorModel();
        return new BufferedImage(dstCM, dstCM.createCompatibleWritableRaster(src.getWidth(), src.getHeight()), dstCM.isAlphaPremultiplied(), null);"
2032,setShine,"	public void setShine( float shine ) {
		this.shine = shine;
	}"
2036,setColor,"	public void setColor(int color) {
		this.color = color;
	}"
2037,getAmount,"	public float getAmount() {
		return amount;
	}"
2038,setAmount,"	public void setAmount(float amount) {
		this.amount = amount;
	}"
2040,setRadius,"	public void setRadius(int radius) {
		this.radius = radius;
	}"
2041,blur,"    public void blur( int[] in, int[] out, int width, int radius ) {
        int widthMinus1 = width-1;
        int r2 = 2*radius+1;
        int tr = 0, tg = 0, tb = 0;

        for ( int i = -radius; i <= radius; i++ ) {
            int rgb = in[mod(i, width)];"
2042,mod,"	private static int mod(int a, int b) {
		int n = a/b;
		
		a -= n*b;
		if (a < 0)
			return a + b;"
2043,clamp,"	private static int clamp(int c) {
		if (c < 0)
			return 0;
		if (c > 255)
			return 255;"
2044,random,"	private int random(int x) {
		x += (int)(255*(2*randomNumbers.nextFloat() - 1) * amount);
		if (x < 0)
			x = 0;
		else if (x > 0xff)"
2046,clone,"	public Object clone() {
		try {
			return super.clone();"
2048,getRGB,"	public int[] getRGB( BufferedImage image, int x, int y, int width, int height, int[] pixels ) {
		int type = image.getType();
		if ( type == BufferedImage.TYPE_INT_ARGB || type == BufferedImage.TYPE_INT_RGB )
			return (int [])image.getRaster().getDataElements( x, y, width, height, pixels );
		return image.getRGB( x, y, width, height, pixels, 0, width );"
2053,measureText,"    public static float measureText(TextPaint paint,
                                    TextPaint workPaint,
                                    CharSequence text, int start, int end,"
2054,drawText,"    public static float drawText(Canvas canvas,
                                 CharSequence text, int start, int end,
                                 int direction,
                                 float x, int top, int y, int bottom,"
2055,drawText,"    static float drawText(Canvas canvas,
                          CharSequence text, int start, int end,
                          int dir, boolean runIsRtl,
                          float x, int top, int y, int bottom,"
2057,getTextWidths,"    public static int getTextWidths(TextPaint paint,
                                    TextPaint workPaint,
                                    Spanned text, int start, int end,
                                    float[] widths, Paint.FontMetricsInt fmi) {
        MetricAffectingSpan[] spans =
                text.getSpans(start, end, MetricAffectingSpan.class);

        ReplacementSpan replacement = null;"
2059,toString,"        public String toString() {
            return ""\n"";
        }"
2060,draw,"        void draw(Canvas canvas, float offsetY, Paint paint, LayoutParams params) {
        }"
2061,toString,"        public String toString() {
            return unit;
        }"
2062,draw,"        void draw(Canvas canvas, float offsetY, Paint paint, LayoutParams params) {
            canvas.drawText(unit, x + params.getOffsetX(), y + params.getOffsetY() + offsetY, paint);
        }"
2063,draw,"        abstract void draw(Canvas canvas, float offsetY, Paint paint, LayoutParams params);
    }"
2064,getLineNumber,"        public int getLineNumber() {
            return lineNumber;
        }"
2065,getY,"        public float getY() {
            return y;
        }"
2066,fit,"    private LineAnalysis fit(ListIterator<Unit> iterator, int startIndex, float spaceOffset,
                             float availableWidth) {

        int i = startIndex;
"
2067,getTrimmedLength,"    protected int getTrimmedLength(CharSequence s, int start, int end) {
        while (start < end && s.charAt(start) <= ' ') {
            start++;
        }

        int endCpy = end;"
2069,isTokenized,"    public boolean isTokenized() {
        return tokens != null;
    }"
2070,getTokenTextAt,"    public CharSequence getTokenTextAt(int index) {
        return tokens[index].toString();
    }"
2071,getTokenTopAt,"    public float getTokenTopAt(int tokenIndex) {
        return tokens[tokenIndex].getY();
    }"
2072,getTokenEnd,"    public int getTokenEnd(int tokenIndex) {
        throw new RuntimeException(""Use SpannableDocumentLayout for now. Method under construction."");
    }"
2073,getTokenStart,"    public int getTokenStart(int tokenIndex) {
        throw new RuntimeException(""Use SpannableDocumentLayout for now. Method under construction."");
    }"
2074,getLineForToken,"    public int getLineForToken(int tokenIndex) {
        throw new RuntimeException(""Use SpannableDocumentLayout for now. Method under construction."");
    }"
2075,getTokenForVertical,"    public int getTokenForVertical(float y, TokenPosition position) {
        int high = Math.max(0, tokens.length - 1);
        int low = 0;

        while (low + 1 < high) {
            int mid = (high + low) / 2;"
2076,getTokenDescent,"    public float getTokenDescent(int tokenIndex) {
        return paint.descent() * params.lineHeightMultiplier;
    }"
2077,getTokenAscent,"    public float getTokenAscent(int tokenIndex) {
        return -paint.ascent() * params.lineHeightMultiplier;
    }"
2078,onDraw,"    public void onDraw(Canvas canvas, int startTop, int startBottom) {

        int tokenStart = getTokenForVertical(startTop, TokenPosition.START_OF_LINE);
        int tokenEnd = getTokenForVertical(startBottom, TokenPosition.END_OF_LINE);
"
2081,getTokenTextAt,"    public CharSequence getTokenTextAt(int index) {
        return text.subSequence(tokens[index + TOKEN_START], tokens[index + TOKEN_END]);
    }"
2082,getTokenTopAt,"    public float getTokenTopAt(int tokenIndex) {
        return tokens[tokenIndex + TOKEN_Y];
    }"
2083,getTokenEnd,"    public int getTokenEnd(int tokenIndex) {
        return tokens[tokenIndex + TOKEN_END];
    }"
2084,getTokenStart,"    public int getTokenStart(int tokenIndex) {
        return tokens[tokenIndex + TOKEN_START];
    }"
2085,getLineForToken,"    public int getLineForToken(int tokenIndex) {
        return tokens[tokenIndex + TOKEN_LINE];
    }"
2087,getTokenDescent,"    public float getTokenDescent(int tokenIndex) {
        return tokens[tokenIndex + TOKEN_DESCENT];
    }"
2088,getTokenAscent,"    public float getTokenAscent(int tokenIndex) {
        return tokens[tokenIndex + TOKEN_ASCENT];
    }"
2089,onDraw,"    public void onDraw(Canvas canvas, int scrollTop, int scrollBottom) {

        if (tokens.length < TOKEN_LENGTH) {
            return;
        }

        Spannable textCpy = (Spannable) this.text;
        int startIndex = getTokenForVertical(scrollTop, TokenPosition.START_OF_LINE);
        int endIndex = getTokenForVertical(scrollBottom, TokenPosition.END_OF_LINE);

        boolean defIsReverse = false;
"
2092,tokenize,"    private static LinkedList<Integer> tokenize(CharSequence source,
                                                int start,
                                                int end) {

        LinkedList<Integer> units = new LinkedList<>();

        if (start >= end) {"
2093,ammortizeArray,"    private static int[] ammortizeArray(int[] array, int index) {
        if (index >= array.length) {
            int[] newArray = new int[array.length * 2];
            Arrays.fill(newArray, Integer.MAX_VALUE);"
2095,setAntialias,"        public void setAntialias(boolean antialias) {

            if (this.antialias.equals(antialias)) {
                return;"
2096,isAntiAlias,"        public boolean isAntiAlias() {
            return antialias;
        }"
2097,setTextSubPixel,"        public void setTextSubPixel(boolean subpixelText) {

            if (this.subpixelText.equals(subpixelText)) {
                return;"
2098,isTextSubPixel,"        public boolean isTextSubPixel() {
            return subpixelText;
        }"
2099,setDebugging,"        public void setDebugging(Boolean debugging) {
            if (this.debugging.equals(debugging)) {
                return;
            }
"
2100,isDebugging,"        public boolean isDebugging() {
            return debugging;
        }"
2101,setTextColor,"        public void setTextColor(int textColor) {
            if (this.textColor.equals(textColor)) {
                return;
            }
"
2102,getTextColor,"        public int getTextColor() {
            return textColor;
        }"
2103,setRawTextSize,"        public void setRawTextSize(float textSize) {
            if (this.rawTextSize.equals(textSize)) {
                return;
            }
"
2104,setTextSize,"        public void setTextSize(float size) {
            setTextSize(TypedValue.COMPLEX_UNIT_SP, size);
        }"
2105,getTextSize,"        public float getTextSize() {
            return rawTextSize;
        }"
2106,setTextSize,"        public void setTextSize(int unit, float size) {
            setRawTextSize(TypedValue.applyDimension(unit, size, displayMetrics));
        }"
2107,setTextTypeface,"        public void setTextTypeface(Typeface typeface) {
            if (this.textTypeface.equals(typeface)) {
                return;
            }
"
2108,getTextTypeface,"        public Typeface getTextTypeface() {
            return textTypeface;
        }"
2109,setTextFakeBold,"        public void setTextFakeBold(boolean fakeBold) {
            if (this.textFakeBold.equals(fakeBold)) {
                return;
            }
"
2110,isTextFakeBold,"        public boolean isTextFakeBold() {
            return textFakeBold;
        }"
2111,setTextStrikeThru,"        public void setTextStrikeThru(boolean strikeThru) {
            if (this.textStrikeThru.equals(strikeThru)) {
                return;
            }
"
2112,isTextStrikeThru,"        public boolean isTextStrikeThru() {
            return textStrikeThru;
        }"
2113,setTextUnderline,"        public void setTextUnderline(boolean underline) {
            if (this.textUnderline.equals(underline)) {
                return;
            }
"
2114,isTextUnderline,"        public boolean isTextUnderline() {
            return textUnderline;
        }"
2115,invalidate,"        public void invalidate() {
            this.changed = true;
            onLayoutParamsChange();
        }"
2116,hasChanged,"        public boolean hasChanged() {
            return this.changed;
        }"
2118,getHyphen,"        public String getHyphen() {
            return hyphen;
        }"
2119,setMaxLines,"        public void setMaxLines(int maxLines) {
            if (this.maxLines.equals(maxLines)) {
                return;
            }
"
2120,getMaxLines,"        public int getMaxLines() {
            return maxLines;
        }"
2121,setReverse,"        public void setReverse(boolean reverse) {
            if (this.reverse.equals(reverse)) {
                return;
            }
"
2122,isReverse,"        public boolean isReverse() {
            return reverse;
        }"
2123,setHyphenated,"        public void setHyphenated(boolean hyphenated) {
            if (this.hyphenated.equals(hyphenated)) {
                return;
            }
"
2124,isHyphenated,"        public boolean isHyphenated() {
            return hyphenated;
        }"
2125,setLineHeightMultiplier,"        public void setLineHeightMultiplier(float lineHeightMultiplier) {
            if (this.lineHeightMultiplier.equals(lineHeightMultiplier)) {
                return;
            }
"
2126,getLineHeightMultiplier,"        public float getLineHeightMultiplier() {
            return lineHeightMultiplier;
        }"
2127,setOffsetY,"        public void setOffsetY(float offsetY) {
            this.offsetY = offsetY;
        }"
2128,getOffsetY,"        public float getOffsetY() {
            return offsetY;
        }"
2129,setOffsetX,"        public void setOffsetX(float offsetX) {
            this.offsetX = offsetX;
        }"
2130,getOffsetX,"        public float getOffsetX() {
            return offsetX;
        }"
2131,setParentWidth,"        public void setParentWidth(float parentWidth) {
            if (this.parentWidth.equals(parentWidth)) {
                return;
            }
"
2132,getParentWidth,"        public float getParentWidth() {
            return parentWidth;
        }"
2133,setInsetPaddingRight,"        public void setInsetPaddingRight(float insetPaddingRight) {
            if (this.insetPaddingRight.equals(insetPaddingRight)) {
                return;
            }
"
2134,getInsetPaddingRight,"        public float getInsetPaddingRight() {
            return insetPaddingRight;
        }"
2135,setInsetPaddingBottom,"        public void setInsetPaddingBottom(float insetPaddingBottom) {
            if (this.insetPaddingBottom.equals(insetPaddingBottom)) {
                return;
            }
"
2136,getInsetPaddingBottom,"        public float getInsetPaddingBottom() {
            return insetPaddingBottom;
        }"
2137,setInsetPaddingTop,"        public void setInsetPaddingTop(float insetPaddingTop) {
            if (this.insetPaddingTop.equals(insetPaddingTop)) {
                return;
            }
"
2138,getInsetPaddingTop,"        public float getInsetPaddingTop() {
            return insetPaddingTop;
        }"
2139,setInsetPaddingLeft,"        public void setInsetPaddingLeft(float insetPaddingLeft) {
            if (this.insetPaddingLeft.equals(insetPaddingLeft)) {
                return;
            }
"
2140,getInsetPaddingLeft,"        public float getInsetPaddingLeft() {
            return insetPaddingLeft;
        }"
2141,setHyphenator,"        public void setHyphenator(IHyphenator hyphenator) {
            if (hyphenator == null) {
                return;
            }

            if (this.hyphenator != null && this.hyphenator.equals(hyphenator)) {"
2142,getHyphenator,"        public IHyphenator getHyphenator() {
            return hyphenator;
        }"
2144,getTextAlignment,"        public TextAlignment getTextAlignment() {
            return textAlignment;
        }"
2145,setWordSpacingMultiplier,"        public void setWordSpacingMultiplier(float wordSpacingMultiplier) {
            if (this.wordSpacingMultiplier.equals(wordSpacingMultiplier)) {
                return;
            }
"
2146,getWordSpacingMultiplier,"        public Float getWordSpacingMultiplier() {
            return wordSpacingMultiplier;
        }"
2147,loadToPaint,"        public void loadToPaint(Paint paint) {
            paint.setTextSize(rawTextSize);
            paint.setFakeBoldText(textFakeBold);
            paint.setStrikeThruText(textStrikeThru);
            paint.setColor(textColor);
            paint.setTypeface(textTypeface);
            paint.setUnderlineText(textUnderline);
            paint.setAntiAlias(antialias);
            paint.setSubpixelText(subpixelText);
        }"
2148,setTextLinkColor,"        public void setTextLinkColor(Integer textLinkColor) {
            this.textLinkColor = textLinkColor;
        }"
2149,getTextLinkColor,"        public Integer getTextLinkColor() {
            return textLinkColor;
        }"
2153,onLayoutParamsChange,"    public abstract void onLayoutParamsChange();
"
2155,getTokenTextAt,"    public abstract CharSequence getTokenTextAt(int index);
"
2156,getTokenTopAt,"    public abstract float getTokenTopAt(int tokenIndex);
"
2157,getTokenEnd,"    public abstract int getTokenEnd(int tokenIndex);
"
2158,getTokenStart,"    public abstract int getTokenStart(int tokenIndex);
"
2159,getLineForToken,"    public abstract int getLineForToken(int tokenIndex);
"
2160,getTokenForVertical,"    public abstract int getTokenForVertical(float y, TokenPosition position);
"
2161,getTokenDescent,"    public abstract float getTokenDescent(int tokenIndex);
"
2162,getTokenAscent,"    public abstract float getTokenAscent(int tokenIndex);
"
2163,onDraw,"    protected abstract void onDraw(Canvas canvas, int startTop, int startBottom);
"
2164,draw,"    public void draw(Canvas canvas, int startTop, int startBottom) {

        params.loadToPaint(paint);
"
2165,onMeasure,"    protected abstract boolean onMeasure(IProgress<Float> progress, ICancel<Boolean> cancelled);
"
2166,measure,"    public boolean measure(IProgress<Float> progress, ICancel<Boolean> cancelled) {

        if (!params.changed && !textChange) {
            return true;
        }
"
2167,getLineCount,"    public int getLineCount() {
        return lineCount;
    }"
2168,onTextNull,"    protected void onTextNull() {
        params.changed = false;
        measuredHeight = (int) (params.insetPaddingTop + params.insetPaddingBottom);
    }"
2169,getMeasuredHeight,"    public int getMeasuredHeight() {
        return measuredHeight;
    }"
2170,setText,"    public void setText(CharSequence text) {
        text = text == null ? new SpannableString("""") : new SpannableString(text);

        if (this.text.equals(text)) {
            return;
        }
"
2171,getText,"    public CharSequence getText() {
        return this.text;
    }"
2172,getLayoutParams,"    public LayoutParams getLayoutParams() {
        return params;
    }"
2173,getPaint,"    public Paint getPaint() {
        return paint;
    }"
2174,showToast,"    protected void showToast(String s) {
        toast.setText(s);
        toast.show();
    }"
2175,onPostExecute,"            protected void onPostExecute(Void aVoid) {
                drawFadeInStartTime = System.currentTimeMillis();
                drawCompleted = true;
                invalidate();
            }"
2176,doInBackground,"            protected Void doInBackground(Void... params) {
                drawRunnable.run();
                return null;
            }"
2177,onPreExecute,"            protected void onPreExecute() {
                super.onPreExecute();
            }"
2178,recycle,"        public void recycle() {
            if (drawTask != null) {
                drawTask.cancel(true);
                drawTask = null;"
2179,isReady,"        public boolean isReady() {
            return drawCompleted;
        }"
2180,setStart,"        public void setStart(int start) {
            this.start = start;
        }"
2181,getStart,"        public int getStart() {
            return start;
        }"
2182,setBitmap,"        public void setBitmap(Bitmap bitmap) {
            this.bitmap = bitmap;
        }"
2183,getBitmap,"        public Bitmap getBitmap() {
            return bitmap;
        }"
2184,drawInBackground,"        public void drawInBackground(Runnable runnable) {
            if (drawTask != null) {
                drawTask.cancel(true);
                drawTask = null;
            }

            drawCompleted = false;"
2185,getAlpha,"        public int getAlpha() {
            return (int) Math.min(fadeInTween.get(System.currentTimeMillis() - drawFadeInStartTime, 0, 255f, fadeInDuration), 255f);
        }"
2186,onCancelled,"        protected void onCancelled() {
            super.onCancelled();
            if (layoutProgressListener != null) {
                layoutProgressListener.onCancelled();"
2187,onPostExecute,"        protected void onPostExecute(Boolean done) {
            if (!done || isCancelled()) {
                if (layoutProgressListener != null) {
                    layoutProgressListener.onCancelled();
                }
                return;
            }"
2188,onPreExecute,"        protected void onPreExecute() {
            if (layoutProgressListener != null) {
                layoutProgressListener.onStart();"
2189,doInBackground,"        protected Boolean doInBackground(Void... params) {
            try {
                return layout.measure(progress, cancelled);"
2190,isCancelled,"                public Boolean isCancelled() {
                    return MeasureTask.this.isCancelled();
                }"
2191,onUpdate,"                public void onUpdate(Float progress) {
                    if (layoutProgressListener != null) {
                        layoutProgressListener.onProgressUpdate(progress);"
2192,get,"        public float get(float t, float b, float c, float d);
    }"
2193,onProgressUpdate,"        public void onProgressUpdate(float progress);
    }"
2197,getId,"        public int getId() {
            return mId;
        }"
2198,getConfig,"        private Config getConfig() {
            return mConfig;
        }"
2199,getById,"        public static CacheConfig getById(int id) {
            switch (id) {
                default:"
2200,destroyCache,"    public void destroyCache() {
        if (cacheBitmapTop != null) {
            cacheBitmapTop.recycle();
            cacheBitmapTop = null;"
2201,freeResources,"    protected void freeResources() {
        viewportView.setMinimumHeight(minimumHeight);

        if (measureTask != null) {
            measureTask.cancel(true);"
2203,allocateResources,"    public void allocateResources() {
        if (cacheBitmapTop == null) {
            cacheBitmapTop = new CacheBitmap(getWidth(), eglBitmapHeight, cacheConfig.getConfig());
        }"
2204,setMinimumHeight,"    public void setMinimumHeight(int minHeight) {
        minimumHeight = minHeight;
        viewportView.setMinimumHeight(minimumHeight);
    }"
2205,run,"                        public void run() {
                            drawLayout(new Canvas(bottom.getBitmap()), startBottom, startBottom + eglBitmapHeight, true);
                        }"
2206,run,"                        public void run() {
                            drawLayout(new Canvas(top.getBitmap()), startTop, startTop + eglBitmapHeight, true);
                        }"
2207,run,"                        public void run() {
                            drawLayout(new Canvas(bottom.getBitmap()), startTop, startTop + eglBitmapHeight, true);
                        }"
2209,onConfigurationChanged,"    protected void onConfigurationChanged(Configuration newConfig) {
        if (orientation != newConfig.orientation) {
            orientation = newConfig.orientation;
            freeResources();"
2210,onProgressUpdate,"            public void onProgressUpdate(float progress) {
                progressBar.setProgress((int) (progress * (float) progressBar.getMax()));
            }"
2211,onStart,"            public void onStart() {
                progressBar.setProgress(0);
            }"
2212,onFinish,"            public void onFinish() {
                progressBar.setProgress(progressBar.getMax());
            }"
2213,onCancelled,"            public void onCancelled() {
                progressBar.setProgress(progressBar.getMax());
            }"
2214,setProgressBar,"    public void setProgressBar(final ProgressBar progressBar) {
        setOnLayoutProgressListener(new DocumentView.ILayoutProgressListener() {
            @Override"
2215,onDetachedFromWindow,"    protected void onDetachedFromWindow() {
        freeResources();
        super.onDetachedFromWindow();
    }"
2216,requestLayout,"    public void requestLayout() {
        measureState = MeasureTaskState.START;
        super.requestLayout();
    }"
2217,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        requestDisallowInterceptTouchEvent(disallowInterceptTouch);
        return super.onTouchEvent(ev);
    }"
2218,onMeasure,"    protected void onMeasure(final int widthMeasureSpec, final int heightMeasureSpec) {
        final int width = MeasureSpec.getSize(widthMeasureSpec);

        switch (measureState) {
            case FINISH_AWAIT:"
2219,setCacheConfig,"    public void setCacheConfig(CacheConfig quality) {
        cacheConfig = quality;
    }"
2220,getCacheConfig,"    public CacheConfig getCacheConfig() {
        return cacheConfig;
    }"
2221,getLayout,"    public IDocumentLayout getLayout() {
        return this.layout;
    }"
2222,getDocumentLayoutParams,"    public StringDocumentLayout.LayoutParams getDocumentLayoutParams() {
        return this.layout.getLayoutParams();
    }"
2223,setText,"    public void setText(CharSequence text) {
        this.layout.setText(text);
        requestLayout();
    }"
2224,getText,"    public CharSequence getText() {
        return this.layout.getText();
    }"
2225,setOnLayoutProgressListener,"    public void setOnLayoutProgressListener(ILayoutProgressListener listener) {
        layoutProgressListener = listener;
    }"
2227,onStart,"            public void onStart() {
                progressBar = (ProgressBar) ((Activity) getContext()).getWindow().getDecorView().findViewById(progressBarId);
                progressBar.setProgress(0);
            }"
2228,onFinish,"            public void onFinish() {
                progressBar.setProgress(progressBar.getMax());
                progressBar = null;
            }"
2229,onCancelled,"            public void onCancelled() {
                progressBar.setProgress(progressBar.getMax());
                progressBar = null;
            }"
2230,setProgressBar,"    public void setProgressBar(final int progressBarId) {
        setOnLayoutProgressListener(new DocumentView.ILayoutProgressListener() {
"
2231,getViewportView,"    public View getViewportView(){
        return viewportView;
    }"
2232,invalidateCache,"    public void invalidateCache() {
        if (cacheBitmapTop != null) {
            cacheBitmapTop.setStart(-1);
        }"
2233,onTextChange,"                    public void onTextChange() {
                        invalidateCache();
                        requestLayout();
                    }"
2234,onLayoutParamsChange,"                    public void onLayoutParamsChange() {
                        invalidateCache();
                        postInvalidate();
                    }"
2237,getDocumentLayoutInstance,"    public IDocumentLayout getDocumentLayoutInstance(int type, TextPaint paint) {
        switch (type) {
            case FORMATTED_TEXT:"
2238,onAttachedToWindow,"    protected void onAttachedToWindow() {
        orientation = getResources().getConfiguration().orientation;
        super.onAttachedToWindow();
    }"
2239,initPaint,"    protected void initPaint(Paint paint) {
        paint.setTypeface(Typeface.defaultFromStyle(Typeface.NORMAL));
        paint.setTextSize(34);
        paint.setAntiAlias(true);
    }"
2241,setFadeInTween,"    public void setFadeInTween(ITween tween) {
        fadeInTween = tween;
    }"
2242,getFadeInTween,"    public ITween getFadeInTween() {
        return fadeInTween;
    }"
2243,setFadeInDuration,"    public void setFadeInDuration(int duration) {
        fadeInDuration = duration;
    }"
2244,getFadeInDuration,"    public int getFadeInDuration() {
        return fadeInDuration;
    }"
2245,setFadeInAnimationStepDelay,"    public void setFadeInAnimationStepDelay(int delay) {
        fadeInAnimationStepDelay = delay;
    }"
2246,getFadeInAnimationStepDelay,"    public int getFadeInAnimationStepDelay() {
        return fadeInAnimationStepDelay;
    }"
2248,setDisallowInterceptTouch,"    public void setDisallowInterceptTouch(boolean disallowInterceptTouch) {
        this.disallowInterceptTouch = disallowInterceptTouch;
    }"
2249,isDisallowInterceptTouch,"    public boolean isDisallowInterceptTouch() {
        return disallowInterceptTouch;
    }"
2251,get,"            public float get(float t, float b, float c, float d) {
                return c * t / d + b;
            }"
2252,log,"    public static <T> void log(T s) {
        android.util.Log.d("""", s == null ? ""null"" : s.toString());
    }"
2253,log,"    public static void log(boolean s) {
        android.util.Log.d("""", s + """");
    }"
2254,log,"    public static void log(float s) {
        android.util.Log.d("""", s + """");
    }"
2255,log,"    public static void log(double s) {
        android.util.Log.d("""", s + """");
    }"
2256,log,"    public static void log(long s) {
        android.util.Log.d("""", s + """");
    }"
2257,log,"    public static void log(int s) {
        android.util.Log.d("""", s + """");
    }"
2258,log,"    public static void log(String s) {
        android.util.Log.d("""", s);
    }"
2259,log,"    public static void log(String tag, boolean s) {
        android.util.Log.d(tag, s + """");
    }"
2260,log,"    public static void log(String tag, float s) {
        android.util.Log.d(tag, s + """");
    }"
2261,log,"    public static void log(String tag, double s) {
        android.util.Log.d(tag, s + """");
    }"
2262,log,"    public static void log(String tag, long s) {
        android.util.Log.d(tag, s + """");
    }"
2263,log,"    public static void log(String tag, int s) {
        android.util.Log.d(tag, s + """");
    }"
2264,log,"    public static void log(String tag, String s) {
        android.util.Log.d(tag, s);
    }"
2265,remove,"        public void remove() {
            itr.remove();
        }"
2266,next,"        public E next() {
            return itr.previous();
        }"
2267,hasNext,"        public boolean hasNext() {
            return itr.hasPrevious();
        }"
2268,set,"        public void set(E e) {
            if (lastReturned == header)
                throw new IllegalStateException();
            lastReturned.element = e;"
2269,remove,"        public void remove() {
            Entry<E> lastNext = lastReturned.next;
            try {
                ConcurrentModifiableLinkedList.this.remove(lastReturned);
            } catch (NoSuchElementException e) {
                throw new IllegalStateException();"
2270,previousIndex,"        public int previousIndex() {
            return nextIndex - 1;
        }"
2271,previous,"        public E previous() {
            if (nextIndex == 0)
                throw new NoSuchElementException();

            lastReturned = next = next.previous;
            nextIndex--;"
2272,nextIndex,"        public int nextIndex() {
            return nextIndex;
        }"
2273,next,"        public E next() {
            if (nextIndex == size)
                throw new NoSuchElementException();

            lastReturned = next;
            next = next.next;
            nextIndex++;"
2274,hasPrevious,"        public boolean hasPrevious() {
            return nextIndex != 0;
        }"
2275,hasNext,"        public boolean hasNext() {
            return nextIndex != size;
        }"
2276,add,"        public void add(E e) {
            lastReturned = header;
            addBefore(e, next);
            nextIndex++;
        }"
2280,descendingIterator,"    public Iterator<E> descendingIterator() {
        return new DescendingIterator();
    }"
2281,remove,"    private E remove(Entry<E> e) {
        if (e == header)
            throw new NoSuchElementException();

        E result = e.element;
        e.previous.next = e.next;
        e.next.previous = e.previous;
        e.next = e.previous = null;
        e.element = null;
        size--;
        modCount++;"
2282,addBefore,"    private Entry<E> addBefore(E e, Entry<E> entry) {
        Entry<E> newEntry = new Entry<E>(e, entry, entry.previous);
        newEntry.previous.next = newEntry;
        newEntry.next.previous = newEntry;
        size++;
        modCount++;
        return newEntry;
    }"
2283,removeLastOccurrence,"    public boolean removeLastOccurrence(Object o) {
        if (o == null) {
            for (Entry<E> e = header.previous; e != header; e = e.previous) {
                if (e.element == null) {"
2284,removeFirstOccurrence,"    public boolean removeFirstOccurrence(Object o) {
        return remove(o);
    }"
2285,pop,"    public E pop() {
        return removeFirst();
    }"
2286,push,"    public void push(E e) {
        addFirst(e);
    }"
2287,pollLast,"    public E pollLast() {
        if (size == 0)
            return null;
        return removeLast();"
2288,pollFirst,"    public E pollFirst() {
        if (size == 0)
            return null;
        return removeFirst();"
2289,peekLast,"    public E peekLast() {
        if (size == 0)
            return null;
        return getLast();"
2290,peekFirst,"    public E peekFirst() {
        if (size == 0)
            return null;
        return getFirst();"
2291,offerLast,"    public boolean offerLast(E e) {
        addLast(e);
        return true;
    }"
2292,offerFirst,"    public boolean offerFirst(E e) {
        addFirst(e);
        return true;
    }"
2293,offer,"    public boolean offer(E e) {
        return add(e);
    }"
2294,remove,"    public E remove() {
        return removeFirst();
    }"
2295,poll,"    public E poll() {
        if (size == 0)
            return null;
        return removeFirst();"
2296,element,"    public E element() {
        return getFirst();
    }"
2297,peek,"    public E peek() {
        if (size == 0)
            return null;
        return getFirst();"
2298,entry,"    private Entry<E> entry(int index) {
        if (index < 0 || index >= size)
            throw new IndexOutOfBoundsException(""Index: "" + index +
                    "", Size: "" + size);
        Entry<E> e = header;
        if (index < (size >> 1)) {"
2299,set,"    public E set(int index, E element) {
        Entry<E> e = entry(index);
        E oldVal = e.element;
        e.element = element;
        return oldVal;
    }"
2300,remove,"    public E remove(int index) {
        return remove(entry(index));
    }"
2301,listIterator,"    public ListIterator<E> listIterator(int index) {
        return new ListItr(index);
    }"
2302,get,"    public E get(int index) {
        return entry(index).element;
    }"
2304,add,"    public void add(int index, E element) {
        addBefore(element, (index == size ? header : entry(index)));
    }"
2305,toArray,"    public <T> T[] toArray(T[] a) {
        if (a.length < size)
            a = (T[]) java.lang.reflect.Array.newInstance(
                    a.getClass().getComponentType(), size);
        int i = 0;
        Object[] result = a;
        for (Entry<E> e = header.next; e != header; e = e.next)
            result[i++] = e.element;"
2306,toArray,"    public Object[] toArray() {
        Object[] result = new Object[size];
        int i = 0;
        for (Entry<E> e = header.next; e != header; e = e.next)
            result[i++] = e.element;
        return result;"
2307,size,"    public int size() {
        return size;
    }"
2308,remove,"    public boolean remove(Object o) {
        if (o == null) {
            for (Entry<E> e = header.next; e != header; e = e.next) {
                if (e.element == null) {"
2309,contains,"    public boolean contains(Object o) {
        return indexOf(o) != -1;
    }"
2310,addAll,"    public boolean addAll(Collection<? extends E> c) {
        return addAll(size, c);
    }"
2311,lastIndexOf,"    public int lastIndexOf(Object o) {
        int index = size;
        if (o == null) {
            for (Entry e = header.previous; e != header; e = e.previous) {
                index--;"
2312,indexOf,"    public int indexOf(Object o) {
        int index = 0;
        if (o == null) {
            for (Entry e = header.next; e != header; e = e.next) {
                if (e.element == null)"
2313,clear,"    public void clear() {
        Entry<E> e = header.next;
        while (e != header) {
            Entry<E> next = e.next;
            e.next = e.previous = null;
            e.element = null;
            e = next;"
2314,add,"    public boolean add(E e) {
        addBefore(e, header);
        return true;
    }"
2315,addLast,"    public void addLast(E e) {
        addBefore(e, header);
    }"
2316,addFirst,"    public void addFirst(E e) {
        addBefore(e, header.next);
    }"
2317,removeLast,"    public E removeLast() {
        return remove(header.previous);
    }"
2318,removeFirst,"    public E removeFirst() {
        return remove(header.next);
    }"
2319,getLast,"    public E getLast() {
        if (size == 0)
            throw new NoSuchElementException();
"
2320,getFirst,"    public E getFirst() {
        if (size == 0)
            throw new NoSuchElementException();
"
2321,setUserInterruptKey,"    public void setUserInterruptKey(int code, boolean ctrl, boolean shift, boolean alt) {
        dataLock.lock();
        try {
            this.userInterruptKeyCode = code;"
2322,addSettings,"    public void addSettings(KeyValue... keyValues) {
        logger.debug(""Adding settings: {}"", Arrays.asList(keyValues));
        dataLock.lock();
        try {
            for(KeyValue keyVal : keyValues) {"
2323,addSetting,"    public void addSetting(String key, Object value) {
        addSettings(new KeyValue(key, value));
    }"
2324,setUserInterruptKey,"    public void setUserInterruptKey(String keyStroke) {
        KeyCombination kc = KeyCombination.of(keyStroke);
        if(kc == null) {
            logger.warn(""Invalid keyStroke: {}"", keyStroke);"
2325,postHandlerCall,"    public void postHandlerCall(String handlerId, String partialInput) {
        postUserInput(partialInput, false, handlerId);
    }"
2326,postUserInterrupt,"    public void postUserInterrupt(String partialInput) {
        postUserInput(partialInput, true, null);
    }"
2327,postUserInput,"    public void postUserInput(String newInput) {
        postUserInput(newInput, false, null);
    }"
2328,postUserInput,"    public void postUserInput(String newInput, boolean userInterrupt, String handlerId) {
        inputLock.lock();
        try {
            this.userInterruptedInput = userInterrupt;"
2329,getTextTerminalData,"    public TextTerminalData getTextTerminalData() {
        dataLock.lock();
        try {
            try {"
2330,registerHandler,"    public boolean registerHandler(String keyStroke, Function<WebTextTerminal, ReadHandlerData> handler) {
        KeyCombination kc = KeyCombination.of(keyStroke);
        if(kc == null) return false;

        dataLock.lock();
        try {
            String key = data.addKey(keyStroke);"
2331,registerUserInterruptHandler,"    public boolean registerUserInterruptHandler(Consumer<WebTextTerminal> handler, boolean abortRead) {
        this.userInterruptHandler = handler;
        this.abortRead = abortRead;
        return true;
    }"
2332,println,"    public void println() {
        setAction(FLUSH);
        rawPrint(""\n"");
    }"
2333,rawPrint,"    public void rawPrint(String message) {
        dataLock.lock();
        try {
            if(data.getAction() != ABORT) {"
2334,setAction,"    protected void setAction(TextTerminalData.Action action, String actionData) {
        if(action == NONE || action == null) {
            logger.error(""Not a proper action: {}"", action);
            return;
        }"
2335,setAction,"    protected void setAction(TextTerminalData.Action action) {
        setAction(action, null);
    }"
2336,read,"    public String read(boolean masking) {
        inputLock.lock();
        try {
            if(data.getAction() != ABORT) {"
2337,setOnAbort,"    public void setOnAbort(Runnable onAbort) {
        this.onAbort = onAbort;
    }"
2338,setOnDispose,"    public void setOnDispose(Runnable onDispose) {
        this.onDispose = onDispose;
    }"
2339,waitForDataCleared,"    private void waitForDataCleared() {
        dataLock.lock();
        try {
            try {"
2340,resetToBookmark,"    public boolean resetToBookmark(String bookmark) {
        setAction(VIRTUAL);
        waitForDataCleared();
        data.setResetToBookmark(bookmark);
        return true;
    }"
2341,setBookmark,"    public boolean setBookmark(String bookmark) {
        setAction(VIRTUAL);
        waitForDataCleared();
        data.setBookmark(bookmark);
        return true;
    }"
2342,moveToLineStart,"    public boolean moveToLineStart() {
        setAction(VIRTUAL);
        waitForDataCleared();
        data.setMoveToLineStartRequired(true);
        return true;
    }"
2343,resetLine,"    public boolean resetLine() {
        setAction(VIRTUAL);
        waitForDataCleared();
        data.setLineResetRequired(true);
        setAction(VIRTUAL);
        return true;
    }"
2344,abort,"    public void abort() {
        if(onAbort != null) onAbort.run();
        setAction(ABORT);
    }"
2345,dispose,"    public void dispose(String resultData) {
        if(onDispose != null) onDispose.run();
        setAction(DISPOSE, resultData);
    }"
2347,setTimeoutDataCleared,"    public void setTimeoutDataCleared(long timeoutDataCleared) {
        this.timeoutDataCleared = timeoutDataCleared;
    }"
2348,setTimeoutHasAction,"    public void setTimeoutHasAction(long timeoutHasAction) {
        this.timeoutHasAction = timeoutHasAction;
    }"
2349,setTimeoutNotEmpty,"    public void setTimeoutNotEmpty(long timeoutNotEmpty) {
        this.timeoutNotEmpty = timeoutNotEmpty;
    }"
2350,execute,"    public void execute(TextIoApp<?> app) {
        Consumer<String> stopServer = sessionId -> Executors.newSingleThreadScheduledExecutor().schedule(() -> {
            System.exit(0);
        }, 2, TimeUnit.SECONDS);

        app.withOnDispose(stopServer)
            .withOnAbort(stopServer)
            .withPort(port)"
2351,withPort,"    public WebTextIoExecutor withPort(int port) {
        this.port = port;
        return this;
    }"
2352,toString,"    public String toString() {
        return getClass().getSimpleName() + "": displaying weather data.\n"" +
                ""(Illustrates line resetting, moving to line start, bookmarking and resetting to a bookmark.)"";"
2353,delay,"    public static void delay(long millis) {
        try {
            Thread.sleep(millis);"
2356,main,"    public static void main(String[] args) {
        TextIO textIO = TextIoFactory.getTextIO();
        new Weather().accept(textIO, null);
    }"
2357,toString,"    public String toString() {
        return getClass().getSimpleName() + "": reading personal data.\n"" +
                ""(Properties are initialized at start-up.\n"" +"
2359,main,"    public static void main(String[] args) {
        TextIO textIO = TextIoFactory.getTextIO();
        new UserDataCollector().accept(textIO, null);
    }"
2361,toString,"    public String toString() {
        return ""resetRequired: "" + resetRequired +
                "", lineResetRequired: "" + lineResetRequired +"
2362,clear,"    public void clear() {
        messageGroups.clear();
        action = Action.NONE;
        actionData = null;
        resetRequired = false;
        lineResetRequired = false;
        moveToLineStartRequired = false;
        bookmark = null;
        resetToBookmark = null;
        handlerKeys.clear();
    }"
2363,addKey,"    public String addKey(String keyStroke) {
        Key key = Key.of(keyStroke);
        if(key == null) return null;
        addKey(key);
        return key.id;
    }"
2364,addKey,"    public void addKey(Key key) {
        for(int i=0; i<handlerKeys.size(); i++) {
            Key k = handlerKeys.get(i);
            if(k.id.equals(key.id)) {"
2365,getHandlerKeys,"    public List<Key> getHandlerKeys() {
        return handlerKeys;
    }"
2366,hasAction,"    public boolean hasAction() {
        return (action != Action.NONE);
    }"
2367,isEmpty,"    public boolean isEmpty() {
        return messageGroups.isEmpty() && (action == Action.NONE);
    }"
2368,setResetToBookmark,"    public void setResetToBookmark(String resetToBookmark) {
        this.resetToBookmark = resetToBookmark;
    }"
2369,getResetToBookmark,"    public String getResetToBookmark() {
        return resetToBookmark;
    }"
2370,setBookmark,"    public void setBookmark(String bookmark) {
        this.bookmark = bookmark;
    }"
2371,getBookmark,"    public String getBookmark() {
        return bookmark;
    }"
2372,setMoveToLineStartRequired,"    public void setMoveToLineStartRequired(boolean moveToLineStartRequired) {
        this.moveToLineStartRequired = moveToLineStartRequired;
    }"
2373,isMoveToLineStartRequired,"    public boolean isMoveToLineStartRequired() {
        return moveToLineStartRequired;
    }"
2374,setLineResetRequired,"    public void setLineResetRequired(boolean lineResetRequired) {
        this.lineResetRequired = lineResetRequired;
    }"
2375,isLineResetRequired,"    public boolean isLineResetRequired() {
        return lineResetRequired;
    }"
2376,setResetRequired,"    public void setResetRequired(boolean resetRequired) {
        this.resetRequired = resetRequired;
    }"
2377,isResetRequired,"    public boolean isResetRequired() {
        return resetRequired;
    }"
2378,setActionData,"    public void setActionData(String actionData) {
        this.actionData = actionData;
    }"
2379,getActionData,"    public String getActionData() {
        return actionData;
    }"
2380,setAction,"    public void setAction(Action action) {
        this.action = action;
    }"
2381,getAction,"    public Action getAction() {
        return action;
    }"
2382,addMessage,"    public String addMessage(String message) {
        String escapedMessage = StringEscapeUtils.escapeHtml4(message);
        escapedMessage = Arrays.stream(escapedMessage.split(""\\R"", -1))
                .map(line -> line.replaceAll(""\t"", ""    ""))
                .map(line -> {
                    int count = 0;"
2383,addRawMessage,"    public void addRawMessage(String message) {
        MessageGroup group = (messageGroups.isEmpty()) ? newMessageGroup() : messageGroups.get(messageGroups.size() - 1);
        group.messages.add(message);
    }"
2384,addSetting,"    public void addSetting(KeyValue keyVal) {
        MessageGroup group = (isNewGroupRequiredForSetting()) ? newMessageGroup() : messageGroups.get(messageGroups.size() - 1);
        int size = group.settings.size();
        for(int i = 0; i < size; i++) {
            if(group.settings.get(i).key.equals(keyVal.key)) {
                group.settings.set(i, keyVal);"
2385,addSetting,"    public void addSetting(String key, Object value) {
        addSetting(new KeyValue(key, value));
    }"
2386,isNewGroupRequiredForSetting,"    public boolean isNewGroupRequiredForSetting() {
        if(messageGroups.isEmpty()) return true;
        return !messageGroups.get(messageGroups.size() - 1).messages.isEmpty();
    }"
2387,newMessageGroup,"    public MessageGroup newMessageGroup() {
        MessageGroup group = new MessageGroup();
        messageGroups.add(group);
        return group;
    }"
2388,getMessageGroups,"    public List<MessageGroup> getMessageGroups() {
        return messageGroups;
    }"
2390,of,"        public static Key of(String s) {
            KeyCombination kc = KeyCombination.of(s);
            if(kc == null) return null;
            String id = s.replaceAll(""\\s"", ""-"");
            String key = String.valueOf((char)kc.getCharOrCode()).toLowerCase();
            return new Key(id, key, kc.getCode(), kc.isCtrlDown(), kc.isShiftDown(), kc.isAltDown());
        }"
2391,toString,"        public String toString() {
            return ""settings: "" + settings + "", messages: "" + messages;
        }"
2392,toString,"        public String toString() {
            return key + "": "" + value;
        }"
2393,executeWithPropertiesPrefix,"    default void executeWithPropertiesPrefix(String prefix, Consumer<TextTerminal<T>> action) {
        executeWithPropertiesConfigurator(t -> {
            Set<String> keys = t.getMatchingKeys(key -> key.startsWith(prefix + "".""));"
2394,executeWithPropertiesConfigurator,"    default void executeWithPropertiesConfigurator(Consumer<TerminalProperties<?>> propertiesConfigurator,
                                                    Consumer<TextTerminal<T>> action) {
        applyWithPropertiesConfigurator(propertiesConfigurator, t -> {action.accept(t); return null;});"
2396,printf,"    default void printf(Locale l, String format, Object... args) {
        print(String.format(l, format, args));
    }"
2397,printf,"    default void printf(String format, Object... args) {
        print(String.format(format, args));
    }"
2398,println,"    default void println(List<String> messages) {
        print(messages);
        println();
    }"
2399,print,"    default void print(List<String> messages) {
        if(messages == null) return;
        List<String> rawMessages = messages.stream().flatMap(msg -> Arrays.stream(msg.split(""\\R"", -1))).collect(Collectors.toList());
        rawPrint(rawMessages);
    }"
2400,separateLineWithDecorator,"    default void separateLineWithDecorator(String decorator, int length) {
        String separator = """";
        for (int i = 0; i < length; i++){
            separator = separator + decorator;
        }
        print(separator);"
2401,println,"    default void println(String message) {
        print(message);
        println();
    }"
2402,print,"    default void print(String message) {
        List<String> messages = Arrays.asList(message.split(""\\R"", -1));
        rawPrint(messages);
    }"
2403,rawPrint,"    default void rawPrint(List<String> messages) {
        if(messages != null && !messages.isEmpty()) {
            rawPrint(messages.get(0));"
2404,resetToBookmark,"    default boolean resetToBookmark(String bookmark) {
        println();
        return false;
    }"
2405,setBookmark,"    default boolean setBookmark(String bookmark) {
        return false;
    }"
2406,moveToLineStart,"    default boolean moveToLineStart() {
        println();
        return false;
    }"
2407,resetLine,"    default boolean resetLine() {
        println();
        return false;
    }"
2409,dispose,"    default void dispose() {
        dispose(null);
    }"
2410,dispose,"    default void dispose(String resultData) {}
"
2412,registerHandler,"    default boolean registerHandler(String keyStroke, Function<T, ReadHandlerData> handler) {
        return false;
    }"
2413,registerUserInterruptHandler,"    default boolean registerUserInterruptHandler(Consumer<T> handler, boolean abortRead) {
        return false;
    }"
2418,getTextIO,"    public static TextIO getTextIO() {
        return Holder.INSTANCE.textIO;
    }"
2419,getTextTerminal,"    public static TextTerminal<?> getTextTerminal() {
        return Holder.INSTANCE.terminal;
    }"
2421,getTerminalFromService,"        private TextTerminal<?> getTerminalFromService() {
            ServiceLoader<TextTerminalProvider> svcLoader = ServiceLoader.load(TextTerminalProvider.class);
            Iterator<TextTerminalProvider> it = svcLoader.iterator();
            while(it.hasNext()) {
                TextTerminal<?> t = it.next().getTextTerminal();
                if(t != null) return t;"
2422,getTerminalFromProperty,"        private TextTerminal<?> getTerminalFromProperty() {
            String clsName = System.getProperty(TEXT_TERMINAL_CLASS_PROPERTY, """").trim();
            if(clsName.isEmpty()) return null;
            try {
                Class<?> cls = Class.forName(clsName);"
2423,chooseTextIO,"    private static TextIO chooseTextIO() {
        SystemTextTerminal terminal = new SystemTextTerminal();
        TextIO textIO = new TextIO(terminal);
        while(true) {
            TextTerminalProvider terminalProvider = textIO.<TextTerminalProvider>newGenericInputReader(null)"
2424,chooseApp,"    private static BiConsumer<TextIO, RunnerData> chooseApp(TextIO textIO) {
        List<BiConsumer<TextIO, RunnerData>> apps = Arrays.asList(
                new UserDataCollector(),
                new ECommerce(),
                new Cuboid(),
                new Weather(),
                new ShoppingList(),"
2425,configurePort,"    private static void configurePort(TextIO textIO, WebTextIoExecutor webTextIoExecutor, int defaultPort) {
        int port = textIO.newIntInputReader()
                .withDefaultValue(defaultPort)
                .read(""Server port number"");"
2426,toString,"            public String toString() {
                return name;
            }"
2427,createTextIoApp,"    private static TextIoApp<?> createTextIoApp(TextIO textIO, BiConsumer<TextIO, RunnerData> app, WebTextTerminal webTextTerm) {
        class Provider {
            private final String name;
            private final Supplier<TextIoApp<?>> supplier;
"
2428,main,"    public static void main(String[] args) {
        SystemTextTerminal sysTerminal = new SystemTextTerminal();
        TextIO sysTextIO = new TextIO(sysTerminal);

        BiConsumer<TextIO, RunnerData> app = chooseApp(sysTextIO);
        TextIO textIO = chooseTextIO();
"
2429,toString,"        public String toString() {
            return name;
        }"
2430,getTextTerminal,"        public TextTerminal<?> getTextTerminal() {
            return supplier.get();
        }"
2432,withPort,"    APP withPort(Integer portNumber);
    int getPort();"
2433,withStaticFilesLocation,"    APP withStaticFilesLocation(String location);
    APP withPort(Integer portNumber);"
2434,withMaxInactiveSeconds,"    APP withMaxInactiveSeconds(Integer maxInactiveSeconds);
    APP withStaticFilesLocation(String location);"
2435,withOnAbort,"    APP withOnAbort(Consumer<String> onAbort);
    APP withMaxInactiveSeconds(Integer maxInactiveSeconds);"
2436,withOnDispose,"    APP withOnDispose(Consumer<String> onDispose);
    APP withOnAbort(Consumer<String> onAbort);"
2438,newGenericInputReader,"    public <T> GenericInputReader<T> newGenericInputReader(Function<String, InputReader.ParseResult<T>> parser) {
        return new GenericInputReader<T>(textTerminalSupplier, parser);
    }"
2439,newEnumInputReader,"    public <T extends Enum<T>> EnumInputReader<T> newEnumInputReader(Class<T> enumClass) {
        return new EnumInputReader<T>(textTerminalSupplier, enumClass);
    }"
2440,newStringInputReader,"    public StringInputReader newStringInputReader() {
        return new StringInputReader(textTerminalSupplier);
    }"
2441,newShortInputReader,"    public ShortInputReader newShortInputReader() {
        return new ShortInputReader(textTerminalSupplier);
    }"
2442,newLongInputReader,"    public LongInputReader newLongInputReader() {
        return new LongInputReader(textTerminalSupplier);
    }"
2443,newIntInputReader,"    public IntInputReader newIntInputReader() {
        return new IntInputReader(textTerminalSupplier);
    }"
2444,newFloatInputReader,"    public FloatInputReader newFloatInputReader() {
        return new FloatInputReader(textTerminalSupplier);
    }"
2445,newDoubleInputReader,"    public DoubleInputReader newDoubleInputReader() {
        return new DoubleInputReader(textTerminalSupplier);
    }"
2446,newCharInputReader,"    public CharInputReader newCharInputReader() {
        return new CharInputReader(textTerminalSupplier);
    }"
2447,newByteInputReader,"    public ByteInputReader newByteInputReader() {
        return new ByteInputReader(textTerminalSupplier);
    }"
2448,newBooleanInputReader,"    public BooleanInputReader newBooleanInputReader() {
        return new BooleanInputReader(textTerminalSupplier);
    }"
2449,dispose,"    public void dispose() {
        textTerminal.dispose();
    }"
2450,dispose,"    public void dispose(String resultData) {
        textTerminal.dispose(resultData);
    }"
2451,getTextTerminal,"    public TextTerminal<?> getTextTerminal() {
        return textTerminal;
    }"
2452,setPaneDimension,"    public void setPaneDimension(int width, int height) {
        put(PROP_PANE_WIDTH, width);
        put(PROP_PANE_HEIGHT, height);
    }"
2453,setPaneHeight,"    public void setPaneHeight(int height) {
        put(PROP_PANE_HEIGHT, height);
    }"
2454,setPaneWidth,"    public void setPaneWidth(int width) {
        put(PROP_PANE_WIDTH, width);
    }"
2455,setPaneBackgroundColor,"    public void setPaneBackgroundColor(Color bgcolor) {
        put(PROP_PANE_BGCOLOR, toHex(bgcolor));
    }"
2456,setPaneBackgroundColor,"    public void setPaneBackgroundColor(String bgcolor) {
        put(PROP_PANE_BGCOLOR, bgcolor);
    }"
2457,setInputUnderline,"    public void setInputUnderline(boolean underline) {
        put(PROP_INPUT_UNDERLINE, underline);
    }"
2458,setInputItalic,"    public void setInputItalic(boolean italic) {
        put(PROP_INPUT_ITALIC, italic);
    }"
2459,setInputBold,"    public void setInputBold(boolean bold) {
        put(PROP_INPUT_BOLD, bold);
    }"
2460,setInputBackgroundColor,"    public void setInputBackgroundColor(Color bgcolor) {
        put(PROP_INPUT_BGCOLOR, toHex(bgcolor));
    }"
2461,setInputBackgroundColor,"    public void setInputBackgroundColor(String bgcolor) {
        put(PROP_INPUT_BGCOLOR, bgcolor);
    }"
2462,setInputColor,"    public void setInputColor(Color color) {
        put(PROP_INPUT_COLOR, toHex(color));
    }"
2463,setInputColor,"    public void setInputColor(String color) {
        put(PROP_INPUT_COLOR, color);
    }"
2464,setPromptUnderline,"    public void setPromptUnderline(boolean underline) {
        put(PROP_PROMPT_UNDERLINE, underline);
    }"
2465,setPromptItalic,"    public void setPromptItalic(boolean italic) {
        put(PROP_PROMPT_ITALIC, italic);
    }"
2466,setPromptBold,"    public void setPromptBold(boolean bold) {
        put(PROP_PROMPT_BOLD, bold);
    }"
2467,setPromptBackgroundColor,"    public void setPromptBackgroundColor(Color bgcolor) {
        put(PROP_PROMPT_BGCOLOR, toHex(bgcolor));
    }"
2468,setPromptBackgroundColor,"    public void setPromptBackgroundColor(String bgcolor) {
        put(PROP_PROMPT_BGCOLOR, bgcolor);
    }"
2469,setPromptColor,"    public void setPromptColor(Color color) {
        put(PROP_PROMPT_COLOR, toHex(color));
    }"
2470,setPromptColor,"    public void setPromptColor(String color) {
        put(PROP_PROMPT_COLOR, color);
    }"
2471,toHex,"    private static String toHex(Color color) {
        return String.format(""#%02x%02x%02x"", color.getRed(), color.getGreen(), color.getBlue());
    }"
2472,addBooleanListener,"    public void addBooleanListener(String key, boolean defaultValue, BooleanChangeListener<T> listener) {
        listeners.add(new ChangeListenerForKey<>(key, defaultValue, Boolean::parseBoolean, listener.get()));
    }"
2473,addDoubleListener,"    public void addDoubleListener(String key, double defaultValue, DoubleChangeListener<T> listener) {
        listeners.add(new ChangeListenerForKey<>(key, defaultValue, Double::parseDouble, listener.get()));
    }"
2474,addLongListener,"    public void addLongListener(String key, long defaultValue, LongChangeListener<T> listener) {
        listeners.add(new ChangeListenerForKey<>(key, defaultValue, Long::parseLong, listener.get()));
    }"
2475,addIntListener,"    public void addIntListener(String key, int defaultValue, IntChangeListener<T> listener) {
        listeners.add(new ChangeListenerForKey<>(key, defaultValue, Integer::parseInt, listener.get()));
    }"
2476,addStringListener,"    public void addStringListener(String key, String defaultValue, StringChangeListener<T> listener) {
        listeners.add(new ChangeListenerForKey<>(key, defaultValue, Function.identity(), listener.get()));
    }"
2477,removeListener,"    public boolean removeListener(ExtendedChangeListener<T> listener) {
        return listeners.remove(listener);
    }"
2478,addListener,"    public void addListener(ExtendedChangeListener<T> listener) {
        listeners.add(listener);
    }"
2479,getBoolean,"    public boolean getBoolean(String key, boolean defaultValue) {
        String sVal = props.get(key);
        if(sVal == null) return defaultValue;
        return Boolean.parseBoolean(sVal);
    }"
2480,getDouble,"    public double getDouble(String key, double defaultValue) {
        String sVal = props.get(key);
        if(sVal == null) return defaultValue;
        try {
            return Double.parseDouble(sVal);"
2481,getLong,"    public long getLong(String key, long defaultValue) {
        String sVal = props.get(key);
        if(sVal == null) return defaultValue;
        try {
            return Long.parseLong(sVal);"
2482,getInt,"    public int getInt(String key, int defaultValue) {
        String sVal = props.get(key);
        if(sVal == null) return defaultValue;
        try {
            return Integer.parseInt(sVal);"
2483,getString,"    public String getString(String key, String defaultValue) {
        String value = props.get(key);
        if(value == null || value.isEmpty()) {
            value = defaultValue;
        }"
2484,getString,"    public String getString(String key) {
        return props.get(key);
    }"
2485,getMatchingKeys,"    public Set<String> getMatchingKeys(Predicate<String> keyFilter) {
        return props.keySet().stream().filter(keyFilter).collect(Collectors.toSet());
    }"
2486,getMatchingKeys,"    public Set<String> getMatchingKeys(String regex) {
        return getMatchingKeys(key -> key.matches(regex));
    }"
2487,getAllKeys,"    public Set<String> getAllKeys() {
        return props.keySet();
    }"
2488,putAll,"    public void putAll(Map<String, ? extends Object> map) {
        if(map == null) return;
        map.entrySet().forEach(entry -> put(entry.getKey(), entry.getValue()));
    }"
2489,put,"    public Object put(String key, Object value) {
        if(key == null) return null;
        String newVal = (value == null) ? null : String.valueOf((value));
        String oldVal = props.put(key, newVal);
        listeners.forEach(listener -> listener.changed(textTerminal, key, oldVal, newVal));
        return oldVal;
    }"
2490,remove,"    public Object remove(String key) {
        if(key == null) return null;
        String oldVal = props.remove(key);
        listeners.forEach(listener -> listener.changed(textTerminal, key, oldVal, null));
        return oldVal;
    }"
2491,getListeners,"    public List<ExtendedChangeListener<T>> getListeners() {
        return listeners;
    }"
2492,changed,"        public void changed(TT textTerminal, String changedKey, String sOldVal, String sNewVal) {
            if(changedKey.equals(key)) {
                V newVal = defaultValue;"
2493,changed,"        void changed(TT textTerminal, String key, String oldVal, String newVal);
    }"
2494,get,"        default ChangeListener<TT, Boolean> get() {
            return (term, newVal) -> changed(term, newVal);
        }"
2495,changed,"        void changed(TT textTerminal, Boolean newVal);
        default ChangeListener<TT, Boolean> get() {"
2496,get,"        default ChangeListener<TT, Double> get() {
            return (term, newVal) -> changed(term, newVal);
        }"
2497,changed,"        void changed(TT textTerminal, Double newVal);
        default ChangeListener<TT, Double> get() {"
2498,get,"        default ChangeListener<TT, Long> get() {
            return (term, newVal) -> changed(term, newVal);
        }"
2499,changed,"        void changed(TT textTerminal, Long newVal);
        default ChangeListener<TT, Long> get() {"
2500,get,"        default ChangeListener<TT, Integer> get() {
            return (term, newVal) -> changed(term, newVal);
        }"
2501,changed,"        void changed(TT textTerminal, Integer newVal);
        default ChangeListener<TT, Integer> get() {"
2502,get,"        default ChangeListener<TT, String> get() {
            return (term, newVal) -> changed(term, newVal);
        }"
2503,changed,"        void changed(TT textTerminal, String newVal);
        default ChangeListener<TT, String> get() {"
2504,changed,"        void changed(TT textTerminal, V newVal);
    }"
2505,toString,"    public String toString() {
        return ""System terminal"";
    }"
2506,getTextTerminal,"    public SystemTextTerminal getTextTerminal() {
        return new SystemTextTerminal();
    }"
2507,println,"    public void println() {
        out.println();
        out.flush();
    }"
2508,rawPrint,"    public void rawPrint(String message) {
        out.print(message);
        out.flush();
    }"
2509,read,"    public String read(boolean masking) {
        return scanner.nextLine();
    }"
2510,toString,"    public String toString() {
        return ""Swing terminal"";
    }"
2511,isHeadless,"    private static boolean isHeadless() {
        if (GraphicsEnvironment.isHeadless()) return true;
        try {
            GraphicsDevice[] screenDevices = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();"
2512,getTextTerminal,"    public SwingTextTerminal getTextTerminal() {
        if (isHeadless()) return null;
        try {
            return new SwingTextTerminal();"
2513,getColor,"    public static Optional<Color> getColor(String colorName) {
        if(colorName == null || colorName.isEmpty()) return Optional.empty();
        try {
            return Optional.of(ColorFactory.web(colorName));"
2514,updateScrollPaneSize,"    protected void updateScrollPaneSize(boolean pack) {
        TerminalProperties<SwingTextTerminal> props = getProperties();
        int w = props.getInt(PROP_PANE_WIDTH, 640);
        int h = props.getInt(PROP_PANE_HEIGHT, 480);
        scrollPane.setPreferredSize(new Dimension(w, h));
        if(pack) frame.pack();
    }"
2515,setPaneIconResource,"    public void setPaneIconResource(String res) {
        InputStream istream = getClass().getResourceAsStream(res);
        if(istream == null) {
            logger.warn(""Cannot find icon resource "" + res);"
2516,setPaneIconFile,"    public void setPaneIconFile(String filePath) {
        try {
            frame.setIconImage(ImageIO.read(new File(filePath)));"
2517,setPaneIconUrl,"    public void setPaneIconUrl(String url) {
        try {
            frame.setIconImage(ImageIO.read(new URL(url)));"
2518,setPaneTitle,"    public void setPaneTitle(String newTitle) {
        frame.setTitle(newTitle);
    }"
2519,setPaneBackgroundColor,"    public void setPaneBackgroundColor(String colorName) {
        getColor(colorName).ifPresent(textPane::setBackground);
    }"
2520,setInputSuperscript,"    public void setInputSuperscript(boolean superscript) {
        inputStyleData.superscript = superscript;
    }"
2521,setInputSubscript,"    public void setInputSubscript(boolean subscript) {
        inputStyleData.subscript = subscript;
    }"
2522,setInputUnderline,"    public void setInputUnderline(boolean underline) {
        inputStyleData.underline = underline;
    }"
2523,setInputItalic,"    public void setInputItalic(boolean italic) {
        inputStyleData.italic = italic;
    }"
2524,setInputBold,"    public void setInputBold(boolean bold) {
        inputStyleData.bold = bold;
    }"
2525,setInputFontSize,"    public void setInputFontSize(int fontSize) {
        inputStyleData.fontSize = fontSize;
    }"
2526,setInputFontFamily,"    public void setInputFontFamily(String fontFamily) {
        inputStyleData.fontFamily = fontFamily;
    }"
2527,setInputBackgroundColor,"    public void setInputBackgroundColor(String colorName) {
        getColor(colorName).ifPresent(col -> inputStyleData.bgColor = col);
    }"
2528,setInputColor,"    public void setInputColor(String colorName) {
        getColor(colorName).ifPresent(col -> {
            inputStyleData.color = col;"
2529,setPromptSuperscript,"    public void setPromptSuperscript(boolean superscript) {
        promptStyleData.superscript = superscript;
    }"
2530,setPromptSubscript,"    public void setPromptSubscript(boolean subscript) {
        promptStyleData.subscript = subscript;
    }"
2531,setPromptUnderline,"    public void setPromptUnderline(boolean underline) {
        promptStyleData.underline = underline;
    }"
2532,setPromptItalic,"    public void setPromptItalic(boolean italic) {
        promptStyleData.italic = italic;
    }"
2533,setPromptBold,"    public void setPromptBold(boolean bold) {
        promptStyleData.bold = bold;
    }"
2534,setPromptFontSize,"    public void setPromptFontSize(int fontSize) {
        promptStyleData.fontSize = fontSize;
    }"
2535,setPromptFontFamily,"    public void setPromptFontFamily(String fontFamily) {
        promptStyleData.fontFamily = fontFamily;
    }"
2536,setPromptBackgroundColor,"    public void setPromptBackgroundColor(String colorName) {
        getColor(colorName).ifPresent(col -> promptStyleData.bgColor = col);
    }"
2537,setPromptColor,"    public void setPromptColor(String colorName) {
        getColor(colorName).ifPresent(col -> promptStyleData.color = col);
    }"
2539,registerHandler,"    public boolean registerHandler(String keyStroke, Function<SwingTextTerminal, ReadHandlerData> handler) {
        KeyStroke ks = KeyStroke.getKeyStroke(keyStroke);
        if(ks == null) {
            logger.warn(""Invalid keyStroke: "" + keyStroke);
            return false;
        }
        String actionKey = ""SwingTextTerminal.handler."" + keyStroke.replaceAll(""\\s"", ""-"");
        textPane.getInputMap().put(ks, actionKey);"
2540,actionPerformed,"        public void actionPerformed(ActionEvent e) {
            synchronized (textTerminal.editLock) {
                textTerminal.activatedHandler = handler;"
2541,setUserInterruptKey,"    public void setUserInterruptKey(String keyStroke) {
        setUserInterruptKey(KeyStroke.getKeyStroke(keyStroke));
    }"
2542,setUserInterruptKey,"    public void setUserInterruptKey(KeyStroke keyStroke) {
        String userInterruptActionKey = ""SwingTextTerminal.userInterrupt"";
        textPane.getInputMap().put(keyStroke, userInterruptActionKey);
        textPane.getActionMap().put(userInterruptActionKey, userInterruptAction);
    }"
2543,registerUserInterruptHandler,"    public boolean registerUserInterruptHandler(Consumer<SwingTextTerminal> handler, boolean abortRead) {
        this.userInterruptHandler = handler;
        return true;
    }"
2544,abort,"    public void abort() {
        frame.dispose();
    }"
2545,dispose,"    public void dispose(String resultData) {
        frame.dispose();
        if(resultData != null && !resultData.isEmpty()) {
            logger.info(""Disposed with resultData: {}."", resultData);"
2546,display,"    public void display() {
        if(!initialized) {
            initialized = true;
            frame.pack();"
2547,resetToOffset,"    public boolean resetToOffset(int offset) {
        if(offset < 0) return false;
        display();
        synchronized (editLock) {
            boolean result = true;"
2548,getBookmarkOffset,"    public int getBookmarkOffset(String bookmark) {
        return bookmarkOffsets.getOrDefault(bookmark, -1);
    }"
2549,resetToBookmark,"    public boolean resetToBookmark(String bookmark) {
        int offset = getBookmarkOffset(bookmark);
        return resetToOffset(offset);
    }"
2550,setBookmark,"    public boolean setBookmark(String bookmark) {
        bookmarkOffsets.put(bookmark, document.getLength());
        return true;
    }"
2551,moveToLineStart,"    public boolean moveToLineStart() {
        overwriteOffset = startLineOffset;
        return true;
    }"
2552,resetLine,"    public boolean resetLine() {
        return resetToOffset(startLineOffset);
    }"
2553,plainInsertMessage,"    private boolean plainInsertMessage(String message, StyleData styleData) {
        String styleName = getStyle(styleData);
        try {
            if(overwriteOffset >= document.getLength()) {
                overwriteOffset = -1;"
2554,plainRemoveFromOffset,"    private boolean plainRemoveFromOffset(int offset, int maxLen) {
        int len = (offset < 0) ? -1 : (document.getLength() - offset);
        if(len > maxLen) len = maxLen;
        if(len > 0) {
            int oldStartReadLen = startReadLen;
            if(startReadLen > offset) {"
2555,plainReplaceText,"    private boolean plainReplaceText(String message, StyleData styleData) {
        if(overwriteOffset >= document.getLength()) {
            overwriteOffset = -1;
        }
        if(overwriteOffset < 0) return plainInsertMessage(message, styleData);
        String styleName = getStyle(styleData);
        int oldStartReadLen = startReadLen;
        if(startReadLen > overwriteOffset) {
            startReadLen = overwriteOffset;
        }"
2556,plainOverwriteCurrentLine,"    private boolean plainOverwriteCurrentLine(String message, StyleData styleData) {
        boolean result;
        if(document instanceof AbstractDocument) {
            result = plainReplaceText(message, styleData);
        } else {
            boolean resultRemove = plainRemoveFromOffset(overwriteOffset, message.length());"
2557,getMaskedInput,"    private String getMaskedInput() {
        StringBuilder maskedSb = new StringBuilder();
        int maskedLen = unmaskedInput.length();
        for(int i=0; i<maskedLen; i++) maskedSb.append('*');
        return maskedSb.toString();
    }"
2558,rawPrint,"    private void rawPrint(String message, StyleData styleData) {
        display();
        synchronized (editLock) {
            overwriteOffset = -1;"
2559,rawPrint,"    public void rawPrint(String message) {
        display();
        synchronized (editLock) {
            plainOverwriteCurrentLine(message, promptStyleData);"
2560,println,"    public void println() {
        overwriteOffset = -1;
        rawPrint(""\n"");
        startLineOffset = document.getLength();
    }"
2561,read,"    public String read(boolean masking) {
        rawPrint(ZERO_WIDTH_SPACE, inputStyleData);
        display();
        try {
            synchronized (editLock) {"
2562,getPartialInput,"    public String getPartialInput() {
        try {
            return document.getText(startReadLen, document.getLength() - startReadLen);"
2563,replaceInput,"    public void replaceInput(String message, boolean preserveCaretPosition) {
        int oldCaretPosition = textPane.getCaretPosition();
        try {
            document.remove(startReadLen, document.getLength() - startReadLen);
            document.insertString(document.getLength(), message, textPane.getInputAttributes().copyAttributes());
        } catch (BadLocationException e) {"
2564,appendToInput,"    public void appendToInput(String message, boolean preserveCaretPosition) {
        try {
            document.insertString(document.getLength(), message, textPane.getInputAttributes().copyAttributes());
        } catch (BadLocationException e) {"
2565,getDocument,"    public StyledDocument getDocument() {
        return document;
    }"
2566,getScrollPane,"    public JScrollPane getScrollPane() {
        return scrollPane;
    }"
2567,getTextPane,"    public JTextPane getTextPane() {
        return textPane;
    }"
2568,getFrame,"    public JFrame getFrame() {
        return frame;
    }"
2569,windowClosing,"            public void windowClosing(WindowEvent e) {
                if(userInterruptHandler != null) {
                    userInterruptHandler.accept(SwingTextTerminal.this);"
2570,isEditAllowedAt,"        private boolean isEditAllowedAt(int offset) {
            return offset >= startReadLen;
        }"
2571,maskContent,"        private void maskContent(FilterBypass fb, AttributeSet attrs) throws BadLocationException {
            String maskedInput = getMaskedInput();
            fb.replace(startReadLen, maskedInput.length(), maskedInput, attrs);
        }"
2572,changeText,"        private void changeText(DocumentFilter.FilterBypass fb, AttributeSet attrs, int offset, String text, TextChanger textChanger) throws BadLocationException {
            synchronized (editLock) {
                if (isEditAllowedAt(offset)) {"
2573,fixCaretPosition,"        private OffsetAttrs fixCaretPosition(int offset, AttributeSet attrs) {
            if (!isEditAllowedAt(offset) && (readMode || fakeReadMode)) {
                textPane.setCaretPosition(document.getLength());
                return new OffsetAttrs(document.getLength(), textPane.getInputAttributes().copyAttributes());"
2574,remove,"        public void remove(DocumentFilter.FilterBypass fb, int offset, int length) throws BadLocationException {
            OffsetAttrs fixed = fixCaretPosition(offset, null);
            if(offset == fixed.offset) {
                changeText(fb, null, offset, null, t -> super.remove(fb, offset, length));"
2575,replace,"        public void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
            OffsetAttrs fixed = fixCaretPosition(offset, attrs);
            if(fixed.offset == offset) {
                changeText(fb, attrs, fixed.offset, text, t -> super.replace(fb, fixed.offset, length, t, fixed.attrs));"
2576,insertString,"        public void insertString(DocumentFilter.FilterBypass fb, int offset, String text, AttributeSet attrs) throws BadLocationException {
            OffsetAttrs fixed = fixCaretPosition(offset, attrs);
            changeText(fb, attrs, fixed.offset, text, t -> super.insertString(fb, fixed.offset, t, fixed.attrs));
        }"
2577,changeText,"        void changeText(String text) throws BadLocationException;
    }"
2578,id,"        private static String id(boolean b) {
            return b ? ""1"" : ""0"";
        }"
2579,id,"        private static String id(Color color) {
            return (color == null) ? ""*"" : ("""" + color.getRGB());
        }"
2580,getStyleName,"        public String getStyleName() {
            return Stream.of(id(color), id(bgColor), id(bold), id(italic), id(underline),
                    id(strikeThrough), id(subscript), id(superscript), fontFamily, """" + fontSize)"
2581,actionPerformed,"        public void actionPerformed(ActionEvent e) {
            if(userInterruptHandler != null) {
                userInterruptHandler.accept(SwingTextTerminal.this);"
2582,getPatternValidationErrors,"    protected List<String> getPatternValidationErrors(String s) {
        if((pattern != null) && !pattern.matcher(s).matches()) return Collections.singletonList(""Expected format: "" + pattern.pattern());
        return null;
    }"
2584,checkConfiguration,"    protected void checkConfiguration() throws IllegalArgumentException {
        super.checkConfiguration();
        if(minLength > 0 && maxLength > 0 && minLength > maxLength) throw new IllegalArgumentException(""minLength = "" + minLength + "", maxLength = "" + maxLength);
    }"
2585,parse,"    protected ParseResult<String> parse(String s) {
        return new ParseResult<>(s);
    }"
2586,withIgnoreCase,"    public StringInputReader withIgnoreCase() {
        return withEqualsFunc((s1, s2) -> s1.equalsIgnoreCase(s2));
    }"
2587,withMaxLength,"    public StringInputReader withMaxLength(int maxLength) {
        this.maxLength = maxLength;
        return this;
    }"
2588,withMinLength,"    public StringInputReader withMinLength(int minLength) {
        this.minLength = minLength;
        return this;
    }"
2589,withPattern,"    public StringInputReader withPattern(String regex, int flags) {
        this.pattern = (regex == null) ? null : Pattern.compile(regex, flags);
        return this;
    }"
2590,withPattern,"    public StringInputReader withPattern(String regex) {
        this.pattern = (regex == null) ? null : Pattern.compile(regex);
        return this;
    }"
2591,getSessionIdAttribute,"    private String getSessionIdAttribute(String sessionId) {
        return ""web-text-terminal-"" + sessionId;
    }"
2593,createRunnerData,"    private RunnerData createRunnerData(String initData, SessionHolder sessionHolder) {
        RunnerData runnerData = new RunnerData(initData);
        Session session = sessionHolder.session;
        Map<String, String> sessionData = sessionDataProvider.apply(session);
        runnerData.setSessionData(sessionData);
        return runnerData;
    }"
2595,withSessionDataProvider,"    public SparkTextIoApp withSessionDataProvider(Function<Session, Map<String,String>> provider) {
        this.sessionDataProvider = provider;
        return this;
    }"
2596,getPort,"    public int getPort() {
        return server.getPort();
    }"
2597,withPort,"    public SparkTextIoApp withPort(Integer portNumber) {
        if(portNumber != null) {
            server.withPort(portNumber);
        }"
2598,withStaticFilesLocation,"    public SparkTextIoApp withStaticFilesLocation(String location) {
        staticFiles.location(location);
        return this;
    }"
2599,withMaxInactiveSeconds,"    public SparkTextIoApp withMaxInactiveSeconds(Integer maxInactiveSeconds) {
        this.maxInactiveSeconds = maxInactiveSeconds;
        return this;
    }"
2600,withOnAbort,"    public SparkTextIoApp withOnAbort(Consumer<String> onAbort) {
        this.onAbort = onAbort;
        return this;
    }"
2601,withOnDispose,"    public SparkTextIoApp withOnDispose(Consumer<String> onDispose) {
        this.onDispose = onDispose;
        return this;
    }"
2602,init,"    public void init() {
        server.init();
    }"
2603,getServer,"    public SparkDataServer getServer() {
        return server;
    }"
2604,init,"    public void init() {
        post(""/"" + getPathForPostInit(), (request, response) -> {
            logger.trace(""Received INIT"");
            String initData = new String(request.bodyAsBytes(), StandardCharsets.UTF_8);
            return configureResponseData(response, handleInit(request, initData));"
2605,configureResponseData,"    protected String configureResponseData(Response response, ResponseData r) {
        response.status(r.status);
        response.type(r.contentType);
        response.body(r.text);
        return r.text;
    }"
2606,getId,"    protected static String getId(Request request) {
        Session session = request.session();
        String id = session.id();
        String uuid = request.headers(""uuid"");
        if(uuid != null) {
            id += ""-"" + uuid;
        }
        logger.trace(""id: {}"", id);"
2607,getPort,"    public int getPort() {
        return port();
    }"
2608,withPort,"    public SparkDataServer withPort(int portNumber) {
        port(portNumber);
        return this;
    }"
2609,getDataApiProvider,"    public DataApiProvider<Request> getDataApiProvider() {
        return dataApiProvider;
    }"
2610,getSessionHolder,"    private static SessionHolder getSessionHolder(Request r) {
        return new SessionHolder(getId(r), r.session());
    }"
2611,get,"        public DataApi get(Request request) {
            return dataApiGetter.apply(getSessionHolder(request));
        }"
2612,create,"        public DataApi create(Request request, String initData) {
            return dataApiCreator.apply(getSessionHolder(request), initData);
        }"
2613,parse,"    protected ParseResult<Short> parse(String s) {
        try {
            return new ParseResult<>(Short.parseShort(s));"
2614,typeNameWithIndefiniteArticle,"    protected String typeNameWithIndefiniteArticle() {
        return ""a short"";
    }"
2615,toString,"    public String toString() {
        return getClass().getSimpleName() + "": creating a shopping list.\n"" +
                ""(Illustrates how to use read handlers.)"";"
2617,main,"    public static void main(String[] args) {
        TextIO textIO = TextIoFactory.getTextIO();
        new ShoppingList().accept(textIO, null);
    }"
2618,setSessionData,"    public void setSessionData(Map<String, String> sessionData) {
        this.sessionData = sessionData;
    }"
2619,getSessionData,"    public Map<String, String> getSessionData() {
        return sessionData;
    }"
2620,getInitData,"    public String getInitData() {
        return initData;
    }"
2621,toString,"    public String toString() {
        return ""action: "" + action
                + "", redrawRequired: "" + redrawRequired"
2622,getPayload,"    public String getPayload() {
        return payload;
"
2623,withPayload,"    public T withPayload(String payload) {
        this.payload = payload;
        return (T)this;
    }"
2624,isRedrawRequired,"    public boolean isRedrawRequired() {
        return redrawRequired;
    }"
2625,withRedrawRequired,"    public T withRedrawRequired(boolean redrawRequired) {
        this.redrawRequired = redrawRequired;
        return (T)this;
    }"
2627,getPartialInput,"    public String getPartialInput() {
        return partialInput;
    }"
2628,getReadInterruptionData,"    public ReadInterruptionData getReadInterruptionData() {
        return readInterruptionData;
    }"
2629,toString,"    public String toString() {
        return super.toString() + "", returnValue: "" + returnValue;
    }"
2630,getReturnValue,"    public String getReturnValue() {
        return returnValue;
    }"
2631,withReturnValue,"    public ReadInterruptionData withReturnValue(String returnValue) {
        this.returnValue = returnValue;
        return this;
    }"
2632,from,"    public static ReadInterruptionData from(ReadHandlerData handlerData, String partialInput) {
        Function<String, String> valueProvider = handlerData.getReturnValueProvider();
        String retVal = (valueProvider == null) ? null : valueProvider.apply(partialInput);
        return new ReadInterruptionData(handlerData.getAction())
                .withRedrawRequired(handlerData.isRedrawRequired())"
2633,getReturnValueProvider,"    public Function<String, String> getReturnValueProvider() {
        return returnValueProvider;
    }"
2634,withReturnValueProvider,"    public ReadHandlerData withReturnValueProvider(Function<String, String> returnValueProvider) {
        this.returnValueProvider = returnValueProvider;
        return this;
    }"
2636,getPayload,"    public String getPayload() {
        return payload;
    }"
2637,getSessionIdMapKey,"    private static String getSessionIdMapKey(String textTermSessionId) {
        return ""web-text-terminal-"" + textTermSessionId;
    }"
2638,get,"    protected DataApi get(ContextHolder ctxHolder) {
        String textTermSessionId = ctxHolder.contextId;
        String mapKey = getSessionIdMapKey(textTermSessionId);
        WebTextTerminal terminal = webTextTerminalCache.getIfPresent(mapKey);
        if(terminal == null) {
            throw new DataApiProviderException(""Unknown session: "" + textTermSessionId);
        }
        webTextTerminalCache.cleanUp();"
2639,createRunnerData,"    private RunnerData createRunnerData(String initData, ContextHolder ctxHolder) {
        RunnerData runnerData = new RunnerData(initData);
        Session session = ctxHolder.context.get(Session.class);
        Map<String, String> sessionData = sessionDataProvider.apply(session);
        runnerData.setSessionData(sessionData);
        return runnerData;
    }"
2641,withSessionDataProvider,"    public RatpackTextIoApp withSessionDataProvider(Function<Session, Map<String,String>> provider) {
        this.sessionDataProvider = provider;
        return this;
    }"
2643,withPort,"    public RatpackTextIoApp withPort(Integer portNumber) {
        if(portNumber != null) {
            server.withPort(portNumber);
        }"
2644,withStaticFilesLocation,"    public RatpackTextIoApp withStaticFilesLocation(String location) {
        server.withBaseDir(location);
        return this;
    }"
2645,withMaxInactiveSeconds,"    public RatpackTextIoApp withMaxInactiveSeconds(Integer maxInactiveSeconds) {
        if(maxInactiveSeconds != null) {
            this.maxInactiveSeconds = maxInactiveSeconds;
        }"
2646,withOnAbort,"    public RatpackTextIoApp withOnAbort(Consumer<String> onAbort) {
        this.onAbort = onAbort;
        return this;
    }"
2647,withOnDispose,"    public RatpackTextIoApp withOnDispose(Consumer<String> onDispose) {
        this.onDispose = onDispose;
        return this;
    }"
2648,init,"    public void init() {
        webTextTerminalCache  =
                CacheBuilder.newBuilder()
                .expireAfterAccess(maxInactiveSeconds, TimeUnit.SECONDS)"
2649,getServer,"    public RatpackDataServer getServer() {
        return server;
    }"
2650,getId,"    protected static String getId(Context ctx) {
        String id = ctx.get(Session.class).getId();
        String uuid = ctx.getRequest().getHeaders().get(""uuid"");
        if(uuid != null) {
            id += ""-"" + uuid;
        }
        logger.trace(""id: {}"", id);"
2651,getUrlContent,"    protected Optional<String> getUrlContent(URL url) {
        try(Scanner scanner = new Scanner(url.openStream(), StandardCharsets.UTF_8.name())) {
            return Optional.of(scanner.useDelimiter(""\\A"").next());"
2652,getResourceContent,"    protected Optional<String> getResourceContent(String resourceName) {
        URL url = getClass().getResource(resourceName);
        if(url == null) return Optional.empty();
        return getUrlContent(url);
    }"
2653,sendResponseData,"    protected void sendResponseData(Context ctx, ResponseData r) {
        ctx.getResponse()
                .status(r.status)"
2654,init,"    public void init() {
        try {
            RatpackServer.start(server -> {"
2655,getPort,"    public int getPort() {
        return port;
    }"
2656,withPort,"    public RatpackDataServer withPort(int portNumber) {
        this.port = portNumber;
        return this;
    }"
2657,withBaseDir,"    public RatpackDataServer withBaseDir(String baseDir) {
        this.baseDir = baseDir;
        return this;
    }"
2658,getConfigurators,"    public List<Action<ServerConfigBuilder>> getConfigurators() {
        return configurators;
    }"
2659,getBindings,"    public List<Action<BindingsSpec>> getBindings() {
        return bindings;
    }"
2660,getHandlers,"    public List<Action<Chain>> getHandlers() {
        return handlers;
    }"
2661,getDataApiProvider,"    public DataApiProvider<Context> getDataApiProvider() {
        return dataApiProvider;
    }"
2662,getContextHolder,"    private static ContextHolder getContextHolder(Context ctx) {
        return new ContextHolder(getId(ctx), ctx);
    }"
2663,get,"        public DataApi get(Context context) {
            return dataApiGetter.apply(getContextHolder(context));
        }"
2664,create,"        public DataApi create(Context context, String initData) {
            return dataApiCreator.apply(getContextHolder(context), initData);
        }"
2665,parse,"    protected ParseResult<Long> parse(String s) {
        try {
            return new ParseResult<>(Long.parseLong(s));"
2666,typeNameWithIndefiniteArticle,"    protected String typeNameWithIndefiniteArticle() {
        return ""a long"";
    }"
2667,isAltDown,"    public boolean isAltDown() {
        return (keyStroke.getModifiers() & (KeyEvent.ALT_DOWN_MASK | KeyEvent.ALT_MASK)) != 0;
    }"
2668,isCtrlDown,"    public boolean isCtrlDown() {
        return (keyStroke.getModifiers() & (KeyEvent.CTRL_DOWN_MASK | KeyEvent.CTRL_MASK)) != 0;
    }"
2669,isShiftDown,"    public boolean isShiftDown() {
        return (keyStroke.getModifiers() & (KeyEvent.SHIFT_DOWN_MASK | KeyEvent.SHIFT_MASK)) != 0;
    }"
2670,getCharOrCode,"    public int getCharOrCode() {
        return isTyped() ? getChar() : getCode();
    }"
2671,isTyped,"    public boolean isTyped() {
        return (keyStroke.getKeyEventType() == KeyEvent.KEY_TYPED);
    }"
2672,getChar,"    public char getChar() {
        return keyStroke.getKeyChar();
    }"
2673,getCode,"    public int getCode() {
        return keyStroke.getKeyCode();
    }"
2674,of,"    public static KeyCombination of(String s) {
        KeyStroke keyStroke = KeyStroke.getKeyStroke(s);
        if(keyStroke == null) return null;
        return new KeyCombination(keyStroke);
    }"
2675,toString,"    public String toString() {
        return ""JLine terminal"";
    }"
2676,getTextTerminal,"    public JLineTextTerminal getTextTerminal() {
        if(System.console() == null) return null;
        try {
            ConsoleReader reader = new ConsoleReader();"
2677,getKeySequence,"    public static String getKeySequence(String keyStroke) {
        KeyCombination kc = KeyCombination.of(keyStroke);
        if(kc == null) return null;
        if(kc.isTyped()) return String.valueOf(kc.getChar());
        int code = kc.getCode();
        if(code < 'A' || code > 'Z') return null;
        if(kc.isCtrlDown()) {
            if(kc.isAltDown()) return null;
            return String.valueOf((char)(code + 1 -'A'));"
2678,setAnsiColorMode,"    public void setAnsiColorMode(String mode) {
        if(mode == null || mode.isEmpty()) {
            ansiColorMode = AnsiColorMode.STANDARD;
            return;"
2682,setInputBackgroundColor,"    public void setInputBackgroundColor(String colorName) {
        inputStyleData.ansiBackgroundColor = getAnsiBackgroundColor(colorName);
    }"
2683,setInputColor,"    public void setInputColor(String colorName) {
        inputStyleData.ansiColor = getAnsiColor(colorName);
    }"
2687,setPromptBackgroundColor,"    public void setPromptBackgroundColor(String colorName) {
        promptStyleData.ansiBackgroundColor = getAnsiBackgroundColor(colorName);
    }"
2688,setPromptColor,"    public void setPromptColor(String colorName) {
        promptStyleData.ansiColor = getAnsiColor(colorName);
    }"
2689,getReader,"    public ConsoleReader getReader() {
        return reader;
    }"
2690,abort,"    public void abort() {
        printAnsi(ANSI_RESET);
        reader.close();
    }"
2691,dispose,"    public void dispose(String resultData) {
        printAnsi(ANSI_RESET);
        reader.close();
    }"
2692,registerHandler,"    public boolean registerHandler(String keyStroke, Function<JLineTextTerminal, ReadHandlerData> handler) {
        String keySeq = getKeySequence(keyStroke);
        if(keySeq == null) return false;
        reader.getKeys().bind(keySeq, new UserHandler(this, handler));
        return true;
    }"
2693,actionPerformed,"        public void actionPerformed(ActionEvent e) {
            CursorBuffer buf = textTerminal.reader.getCursorBuffer();
            String partialInput = buf.buffer.toString();
            buf.clear();

            ReadHandlerData handlerData = handler.apply(textTerminal);
            ReadInterruptionStrategy.Action action = handlerData.getAction();
            if(action == CONTINUE) {"
2694,registerUserInterruptHandler,"    public boolean registerUserInterruptHandler(Consumer<JLineTextTerminal> handler, boolean abortRead) {
        this.userInterruptHandler = (handler != null) ? handler : DEFAULT_USER_INTERRUPT_HANDLER;
        this.abortRead = abortRead;
        return true;
    }"
2695,moveToLineStart,"    public boolean moveToLineStart() {
        moveToLineStartRequired = true;
        return true;
    }"
2696,resetLine,"    public boolean resetLine() {
        try {
            reader.resetPromptLine("""", """", 0);"
2697,println,"    public void println() {
        try {
            reader.println();"
2698,getAnsiPrefix,"    public String getAnsiPrefix(StyleData styleData) {
        return styleData.ansiColor +
                styleData.ansiBackgroundColor +"
2699,printAnsi,"    public void printAnsi(String message) {
        try {
            reader.setPrompt(message);"
2700,rawPrint,"    public void rawPrint(String message) {
        String msgPrefix = """";
        if(moveToLineStartRequired) {
            moveToLineStartRequired = false;
            msgPrefix = ""\r"";"
2701,read,"    public String read(boolean masking) {
        printAnsi(getAnsiPrefix(inputStyleData));
        try {
            String prefix = """";"
2702,createReader,"    public static ConsoleReader createReader() {
        try {
            if(System.console() == null) throw new IllegalArgumentException(""Console not available."");"
2703,getAnsiBackgroundColor,"    public String getAnsiBackgroundColor(String colorName) {
        return getAnsiColorWithPrefix(4, colorName);
    }"
2704,getAnsiColor,"    public String getAnsiColor(String colorName) {
        return getAnsiColorWithPrefix(3, colorName);
    }"
2705,getAnsiColorWithPrefix,"    private String getAnsiColorWithPrefix(int prefix, String colorName) {
        String ansiCode = getColorCode(colorName).map(col -> ""\u001B[1;"" + prefix + col + ""m"").orElse("""");
        logger.debug(""ansiColor({}, {}) = {}"", prefix , colorName, ansiCode);
        return ansiCode;
    }"
2706,mapTo6,"    private static int mapTo6(double val) {
        if(val < 0) val = 0;
        if(val > 255) val = 255;
        return (int)(val * 6.0 / 256.0);
    }"
2707,getColorCode,"    public Optional<String> getColorCode(String colorName) {
        if(colorName == null || colorName.isEmpty()) return Optional.empty();
        try {
            int code = getStandardColorCode(colorName);
            if(code >= 0) {
                return Optional.of("""" + code);"
2708,getStandardColorCode,"    public static int getStandardColorCode(String colorName) {
        return ANSI_COLOR_MAP.getOrDefault(colorName.toLowerCase(), -1);
    }"
2709,getRGBColorCode,"    private static String getRGBColorCode(Color color) {
        int r = color.getRed();
        int g = color.getGreen();
        int b = color.getBlue();
        return ""8;2;"" + r + "";"" + g + "";"" + b;
    }"
2710,getIndexedColorCode,"    private static String getIndexedColorCode(Color color) {
        double r = color.getRed();
        double g = color.getGreen();
        double b = color.getBlue();
        int val = 16 + 36 * mapTo6(r) + 6 * mapTo6(g) + mapTo6(b);
        return ""8;5;"" + val;
    }"
2712,getStandardColorCode,"    private static String getStandardColorCode(Color color) {
        double bestDist = Double.MAX_VALUE;
        int bestIndex = -1;
        for(int i = 0; i < STANDARD_COLORS.length; i++) {
            double dist =  getColorDistance(color, STANDARD_COLORS[i]);
            if(dist < bestDist) {"
2713,getAnsiColorCode,"        String getAnsiColorCode(Color color) {
            return colorCodeProvider.apply(color);
        }"
2714,parse,"    protected ParseResult<Integer> parse(String s) {
        try {
            return new ParseResult<>(Integer.parseInt(s));"
2715,typeNameWithIndefiniteArticle,"    protected String typeNameWithIndefiniteArticle() {
        return ""an integer"";
    }"
2716,noDuplicatesChecker,"    public static <T> ValueChecker<List<T>> noDuplicatesChecker() {
        return (list, propName) -> {
            if(list == null || list.size() < 2) return null;"
2717,nonEmptyListChecker,"    public static <T> ValueChecker<List<T>> nonEmptyListChecker() {
        return (list, propName) -> {
            if(list == null || list.isEmpty()) return Collections.singletonList(""Expected at least one element."");"
2718,shouldappendColon,"    private static boolean shouldappendColon(String s) {
        if(s == null || s.isEmpty()) return false;
        char lastChar = s.charAt(s.length() - 1);
        return ""()[]{}"".indexOf(lastChar) > 0 || Character.isJavaIdentifierPart(lastChar);
    }"
2719,printPrompt,"    protected void printPrompt(List<String> prompt, TextTerminal<?> textTerminal) {
        textTerminal.print(prompt);
        boolean useColon = false;
        if(promptAdjustments && prompt != null && !prompt.isEmpty()) {
            String lastLine = prompt.get(prompt.size() - 1);
            useColon = shouldappendColon(lastLine);"
2720,checkConfiguration,"    protected void checkConfiguration() throws java.lang.IllegalArgumentException {
        if(defaultValue != null && !isPossibleValue(defaultValue)) {
            throw new IllegalArgumentException(""Invalid default value: "" + valueFormatter.apply(defaultValue) + "". Allowed values: "" + possibleValues);
        }"
2721,getPossibleValue,"    protected Optional<T> getPossibleValue(T val) {
        if(possibleValues == null) return Optional.of(val);
        for(T pVal : possibleValues) {
            if(equalsFunc.apply(pVal, val)) return Optional.of(pVal);
        }"
2722,isPossibleValue,"    protected boolean isPossibleValue(T val) {
        if(possibleValues == null) return true;
        for(T pVal : possibleValues) {
            if(equalsFunc.apply(pVal, val)) return true;
        }"
2723,getValueFromIndex,"    private T getValueFromIndex(String sVal, TextTerminal<?> textTerminal) {
        try {
            int optIndex = Integer.parseInt(sVal);
            if(optIndex > 0 && optIndex <= possibleValues.size()) {
                return possibleValues.get(optIndex - 1);
            }"
2724,getValueFromString,"    private T getValueFromString(String sVal, TextTerminal<?> textTerminal) {
        ParseResult<T> result = parseAndCheck(sVal);
        List<String> errMessages = result.getErrorMessages();
        if(errMessages == null) {
            Optional<T> value = getPossibleValue(result.getValue());
            if(value.isPresent()) return value.get();"
2725,getValueFromStringOrIndex,"    private T getValueFromStringOrIndex(String sVal, TextTerminal<?> textTerminal) {
        if(possibleValues == null || !numberedPossibleValues) return getValueFromString(sVal, textTerminal);
        else return getValueFromIndex(sVal, textTerminal);"
2726,executeWithTerminal,"    protected <V> V executeWithTerminal(Function<TextTerminal<?>, V> action) {
        TextTerminal textTerminal = textTerminalSupplier.get();
        return (V)textTerminal.applyWithPropertiesConfigurator(propertiesConfigurator, action);
    }"
2727,readWithPrompt,"    protected String readWithPrompt(TextTerminal<?> textTerminal, List<String> prompt) {
        printPrompt(prompt, textTerminal);
        while(true) {
            String sInput = null;"
2728,readList,"    public List<T> readList(List<String> prompt) {
        valueListMode = true;
        checkConfiguration();
        return executeWithTerminal(textTerminal -> {
            mainLoop:"
2729,readList,"    public List<T> readList(String... prompt) {
        return readList(Arrays.asList(prompt));
    }"
2730,read,"    public T read(List<String> prompt) {
        valueListMode = false;
        checkConfiguration();
        return executeWithTerminal(textTerminal -> {
            while(true) {"
2731,read,"    public T read(String... prompt) {
        return read(Arrays.asList(prompt));
    }"
2732,parseAndCheck,"    protected ParseResult<T> parseAndCheck(String s) {
        ParseResult<T> res = parse(s);
        if(res.errorMessages == null) {
            List<String> allErrors = new ArrayList<>();
            for(ValueChecker<T> checker : valueCheckers) {"
2733,getErrorMessages,"    protected final List<String> getErrorMessages(String s) {
        if(parseErrorMessagesProvider != null) return parseErrorMessagesProvider.getErrorMessages(s, itemName);
        return getDefaultErrorMessages(s);
    }"
2734,getDefaultErrorMessages,"    protected List<String> getDefaultErrorMessages(String s) {
        return new ArrayList<>(Collections.singleton(getDefaultErrorMessage(s)));
    }"
2735,getDefaultErrorMessage,"    protected String getDefaultErrorMessage(String sVal) {
        StringBuilder errBuilder = new StringBuilder(""Invalid value"");
        if(valueListMode) {
            errBuilder.append("" in the comma-separated list"");
            if(itemName != null) errBuilder.append("" of '"").append(itemName).append(""'"");
            if(sVal != null && !sVal.isEmpty()) errBuilder.append("": "").append(sVal);"
2736,isValueListMode,"    public boolean isValueListMode() {
        return valueListMode;
    }"
2737,withPropertiesPrefix,"    public B withPropertiesPrefix(String prefix) {
        return withPropertiesConfigurator(t -> {
            Set<String> keys = t.getMatchingKeys(key -> key.startsWith(prefix + "".""));"
2738,withPropertiesConfigurator,"    public B withPropertiesConfigurator(Consumer<TerminalProperties<?>> propertiesConfigurator) {
        this.propertiesConfigurator = propertiesConfigurator;
        return (B)this;
    }"
2739,withValueListChecker,"    public B withValueListChecker(ValueChecker<List<T>> valueListChecker) {
        this.valueListCheckers.add(valueListChecker);
        return (B)this;
    }"
2740,withValueChecker,"    public B withValueChecker(ValueChecker<T> valueChecker) {
        this.valueCheckers.add(valueChecker);
        return (B)this;
    }"
2741,withInvalidIndexErrorMessagesProvider,"    public B withInvalidIndexErrorMessagesProvider(InvalidIndexErrorMessagesProvider invalidIndexErrorMessagesProvider) {
        this.invalidIndexErrorMessagesProvider = invalidIndexErrorMessagesProvider;
        return (B)this;
    }"
2742,withParseErrorMessagesProvider,"    public B withParseErrorMessagesProvider(ErrorMessagesProvider parseErrorMessagesProvider) {
        this.parseErrorMessagesProvider = parseErrorMessagesProvider;
        return (B)this;
    }"
2743,withEqualsFunc,"    public B withEqualsFunc(BiFunction<T, T, Boolean> equalsFunc) {
        this.equalsFunc = equalsFunc;
        return (B)this;
    }"
2744,withValueFormatter,"    public B withValueFormatter(Function<T, String> valueFormatter) {
        this.valueFormatter = valueFormatter;
        return (B)this;
    }"
2745,withItemName,"    public B withItemName(String itemName) {
        this.itemName = """".equals(itemName) ? null : itemName;
        return (B)this;
    }"
2746,withPromptAdjustments,"    public B withPromptAdjustments(boolean promptAdjustment) {
        this.promptAdjustments = promptAdjustment;
        return (B)this;
    }"
2747,withInputTrimming,"    public B withInputTrimming(boolean inputTrimming) {
        this.inputTrimming = inputTrimming;
        return (B)this;
    }"
2748,withInputMasking,"    public B withInputMasking(boolean inputMasking) {
        this.inputMasking = inputMasking;
        return (B)this;
    }"
2749,withInlinePossibleValues,"    public B withInlinePossibleValues(List<T> possibleValues) {
        withPossibleValues(possibleValues);
        this.inlinePossibleValues = true;
        return (B)this;
    }"
2750,withInlinePossibleValues,"    public B withInlinePossibleValues(T... possibleValues) {
        withPossibleValues(possibleValues);
        this.inlinePossibleValues = true;
        return (B)this;
    }"
2751,withNumberedPossibleValues,"    public B withNumberedPossibleValues(List<T> possibleValues) {
        withPossibleValues(possibleValues);
        this.numberedPossibleValues = true;
        return (B)this;
    }"
2752,withNumberedPossibleValues,"    public B withNumberedPossibleValues(T... possibleValues) {
        withPossibleValues(possibleValues);
        this.numberedPossibleValues = true;
        return (B)this;
    }"
2753,withPossibleValues,"    public B withPossibleValues(List<T> possibleValues) {
        this.possibleValues = (possibleValues != null && possibleValues.isEmpty()) ? null : possibleValues;
        this.numberedPossibleValues = false;
        this.inlinePossibleValues = false;
        return (B)this;
    }"
2754,withPossibleValues,"    public B withPossibleValues(T... possibleValues) {
        this.possibleValues = null;
        if(possibleValues.length > 0) {
            this.possibleValues = Arrays.asList(possibleValues);
        }"
2755,withDefaultValue,"    public B withDefaultValue(T defaultValue) {
        this.defaultValue = defaultValue;
        return (B)this;
    }"
2756,parse,"    protected abstract ParseResult<T> parse(String s);
"
2757,getErrorMessages,"        public List<String> getErrorMessages() {
            return errorMessages;
        }"
2758,getValue,"        public T getValue() {
            return value;
        }"
2759,getErrorMessages,"        List<String> getErrorMessages(T val, String itemName);
    }"
2760,getErrorMessages,"        List<String> getErrorMessages(String sVal, String itemName, int minIndex, int maxIndex);
    }"
2761,getErrorMessages,"        List<String> getErrorMessages(String sVal, String itemName);
    }"
2762,parse,"    protected ParseResult<T> parse(String s) {
        return parser.apply(s);
    }"
2763,parse,"    protected ParseResult<Float> parse(String s) {
        try {
            return new ParseResult<>(Float.parseFloat(s));"
2764,typeNameWithIndefiniteArticle,"    protected String typeNameWithIndefiniteArticle() {
        return ""a float"";
    }"
2765,parse,"    protected ParseResult<T> parse(String s) {
        T value = enumValues.get(s);
        if(value != null) return new ParseResult<>(value);
        return new ParseResult<T>(null, getErrorMessages(s));
    }"
2766,withAllValuesInline,"    public EnumInputReader<T> withAllValuesInline() {
        return withInlinePossibleValues(new ArrayList<>(enumValues.values()));
    }"
2767,withAllValuesNumbered,"    public EnumInputReader<T> withAllValuesNumbered() {
        return withNumberedPossibleValues(new ArrayList<>(enumValues.values()));
    }"
2768,withAllValues,"    public EnumInputReader<T> withAllValues() {
        return withPossibleValues(new ArrayList<>(enumValues.values()));
    }"
2769,toString,"    public String toString() {
        return ""E-Commerce: placing an online order.\n"" +
                ""(Properties are dynamically changed at runtime using hard-coded values.\n"" +"
2771,main,"    public static void main(String[] args) {
        TextIO textIO = TextIoFactory.getTextIO();
        new ECommerce().accept(textIO, null);
    }"
2772,parse,"    protected ParseResult<Double> parse(String s) {
        try {
            return new ParseResult<>(Double.parseDouble(s));"
2773,typeNameWithIndefiniteArticle,"    protected String typeNameWithIndefiniteArticle() {
        return ""a double"";
    }"
2776,withPort,"    public DataServer withPort(int portNumber);
    public int getPort();"
2777,withPathForPostInput,"    public DataServer withPathForPostInput(String pathForPostInput);
"
2778,withPathForGetData,"    public DataServer withPathForGetData(String pathForGetData);
    public DataServer withPathForPostInput(String pathForPostInput);"
2779,withPathForInitData,"    public DataServer withPathForInitData(String pathForInitData);
    public DataServer withPathForGetData(String pathForGetData);"
2781,create,"    DataApi create(CTX ctx, String initData);
    DataApi get(CTX ctx);"
2782,postHandlerCall,"    void postHandlerCall(String handlerId, String partialInput);
}"
2783,postUserInterrupt,"    void postUserInterrupt(String partialInput);
"
2786,toString,"    public String toString() {
        return getClass().getSimpleName() + "": computing the volume of a cuboid.\n"" +
                ""(Properties are dynamically changed at runtime using custom properties values.\n"" +"
2788,main,"    public static void main(String[] args) {
        TextIO textIO = TextIoFactory.getTextIO();
        new Cuboid().accept(textIO, null);
    }"
2789,toString,"    public String toString() {
        return getClass().getSimpleName() + "": reading contact info.\n"" +
                ""(Illustrates how to use read handlers to allow going back to a previous field.)"";"
2790,addTask,"    private void addTask(TextIO textIO, String prompt, Supplier<String> defaultValueSupplier, Consumer<String> valueSetter) {
        operations.add(() -> valueSetter.accept(textIO.newStringInputReader()
                .withDefaultValue(defaultValueSupplier.get())"
2792,main,"    public static void main(String[] args) {
        TextIO textIO = TextIoFactory.getTextIO();
        new ContactInfo().accept(textIO, null);
    }"
2793,toString,"        public String toString() {
            return ""\n\tfirstName: "" + firstName +
                    ""\n\tlastName: "" + lastName +"
2794,toString,"    public String toString() {
        return ""Console terminal"";
    }"
2795,getTextTerminal,"    public TextTerminal<?> getTextTerminal() {
        if(System.console() == null) return null;
        return new ConsoleTextTerminal(System.console());
    }"
2796,println,"    public void println() {
        console.printf(""\n"");
        console.flush();
    }"
2797,rawPrint,"    public void rawPrint(String message) {
        console.printf(message);
        console.flush();
    }"
2798,read,"    public String read(boolean masking) {
        if(masking) {
            char[] chars = console.readPassword();"
2799,isInRange,"    public boolean isInRange(T val) {
        return (minVal == null || minVal.compareTo(val) <= 0) && (maxVal == null || maxVal.compareTo(val) >= 0);
    }"
2800,checkConfiguration,"    public void checkConfiguration() throws IllegalArgumentException {
        super.checkConfiguration();
        if(minVal != null && maxVal != null && minVal.compareTo(maxVal) > 0) throw new IllegalArgumentException(""minVal = "" + minVal + "", maxVal = "" + maxVal);
    }"
2802,getMinMaxErrorMessage,"    protected List<String> getMinMaxErrorMessage(T val) {
        if(isInRange(val)) return null;
        return Collections.singletonList(getStandardMinMaxErrorMessage());
    }"
2803,withMaxVal,"    public B withMaxVal(T maxVal) {
        this.maxVal = maxVal;
        return (B)this;
    }"
2804,withMinVal,"    public B withMinVal(T minVal) {
        this.minVal = minVal;
        return (B)this;
    }"
2805,typeNameWithIndefiniteArticle,"    protected abstract String typeNameWithIndefiniteArticle();
"
2806,parse,"    protected ParseResult<Character> parse(String s) {
        if(s == null || s.length() != 1) return new ParseResult<>(null, getErrorMessages(s));
        return new ParseResult<>(s.charAt(0));
    }"
2807,typeNameWithIndefiniteArticle,"    protected String typeNameWithIndefiniteArticle() {
        return ""a single character"";
    }"
2808,parse,"    protected ParseResult<Byte> parse(String s) {
        try {
            return new ParseResult<>(Byte.parseByte(s));"
2809,typeNameWithIndefiniteArticle,"    protected String typeNameWithIndefiniteArticle() {
        return ""a byte"";
    }"
2810,printPrompt,"    protected void printPrompt(List<String> prompt, TextTerminal<?> textTerminal) {
        List<String> boolPrompt = prompt;
        if(promptAdjustments && prompt != null && !prompt.isEmpty()) {
            String lastLine = prompt.get(prompt.size() - 1) + "" ("" + trueInput + ""/"" + falseInput + "")"";
            boolPrompt = new ArrayList<>(prompt);"
2811,parse,"    protected ParseResult<Boolean> parse(String s) {
        if(trueInput.equalsIgnoreCase(s)) return new ParseResult<>(true);
        if(falseInput.equalsIgnoreCase(s)) return new ParseResult<>(false);
        return new ParseResult<>(null, getErrorMessages(s));
    }"
2812,getDefaultErrorMessages,"    protected List<String> getDefaultErrorMessages(String s) {
        List<String> errList = super.getDefaultErrorMessages(s);
        errList.add(""Expected: "" + trueInput + "" / "" + falseInput);
        return errList;
    }"
2813,withFalseInput,"    public BooleanInputReader withFalseInput(String falseInput) {
        if(falseInput == null || falseInput.trim().isEmpty()) throw new IllegalArgumentException(""falseInput is empty"");
        this.falseInput = falseInput;
        return this;
    }"
2814,withTrueInput,"    public BooleanInputReader withTrueInput(String trueInput) {
        if(trueInput == null || trueInput.trim().isEmpty()) throw new IllegalArgumentException(""trueInput is empty"");
        this.trueInput = trueInput;
        return this;
    }"
2815,printGsonMessage,"    public static void printGsonMessage(TextTerminal<?> terminal, String initData) {
        if(initData != null && !initData.isEmpty()) {
            String message = new Gson().fromJson(initData, String.class);"
2816,initProperties,"    public void initProperties(Properties rawProps) {
        Map<String,String> props = new HashMap<>(defaultProperties);
        for(String pp : getPropertiesPrefixes()) {
            String prefix = pp + ""."";
            int prefixLen = prefix.length();"
2817,initProperties,"    public void initProperties(Reader propsReader) {
        Properties rawProps = new Properties();
        if(propsReader != null) {
            try {
                rawProps.load(propsReader);"
2819,initProperties,"    public void initProperties() {
        initProperties(getPropertiesReader().orElse(null));
    }"
2820,addDefaultProperty,"    public final String addDefaultProperty(String key, String value) {
        return defaultProperties.put(key, value);
    }"
2821,getDefaultProperties,"    public final Map<String,String> getDefaultProperties() {
        return defaultProperties;
    }"
2823,getPropertiesPrefixes,"    public List<String> getPropertiesPrefixes() {
        return getPropertiesPrefixes(getClass());
    }"
2824,init,"    public void init() {
        if(initialized) return;
        initialized = true;
        initProperties();
    }"
2825,getProperties,"    public TerminalProperties<T> getProperties() {
        return properties;
    }"
2826,handlePostInput,"    protected ResponseData handlePostInput(CTX ctx, String input, boolean userInterrupt, String handlerId) {
        return handle(() -> {
            DataApi dataApi = getDataApiProvider().get(ctx);"
2827,handleGetData,"    protected ResponseData handleGetData(CTX ctx) {
        logger.trace(""Retrieving terminal data..."");
        return handle(() -> {
            DataApi dataApi = getDataApiProvider().get(ctx);"
2828,handleInit,"    protected ResponseData handleInit(CTX ctx, String initData) {
        logger.trace(""Initializing terminal..."");
        return handle(() -> {
            DataApi dataApi = getDataApiProvider().create(ctx, initData);"
2829,handle,"    protected ResponseData handle(Supplier<String> textSupplier) {
        try {
            return new ResponseData(200, ""application/json"", textSupplier.get());"
2830,getPathForPostInput,"    public String getPathForPostInput() {
        return pathForPostInput;
    }"
2831,withPathForPostInput,"    public AbstractDataServer<CTX> withPathForPostInput(String pathForPostInput) {
        this.pathForPostInput = pathForPostInput;
        return this;
    }"
2832,getPathForGetData,"    public String getPathForGetData() {
        return pathForGetData;
    }"
2833,withPathForGetData,"    public AbstractDataServer<CTX> withPathForGetData(String pathForGetData) {
        this.pathForGetData = pathForGetData;
        return this;
    }"
2834,getPathForPostInit,"    public String getPathForPostInit() {
        return pathForInitData;
    }"
2835,withPathForInitData,"    public AbstractDataServer<CTX> withPathForInitData(String pathForInitData) {
        this.pathForInitData = pathForInitData;
        return this;
    }"
2836,getDataApiProvider,"    public abstract DataApiProvider<CTX> getDataApiProvider();
"
2837,setButtonClickListener,"    private void setButtonClickListener(@IdRes int id) {
        findViewById(id).setOnClickListener(this);
    }"
2839,onTagsChanged,"    public void onTagsChanged(Collection<String> tags) {
        Log.d(TAG, ""Tags changed: "");
        Log.d(TAG, Arrays.toString(tags.toArray()));
    }"
2840,onClick,"    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.btnChangeTags: {"
2841,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        if (hasFocus) {
            mTagsEditText.showDropDown();"
2843,getCount,"    public int getCount() {
        return mTitles.size();
    }"
2844,getPageTitle,"    public CharSequence getPageTitle(int position) {
        return mTitles.get(position);
    }"
2845,getItem,"    public BaseFragment getItem(int position) {
        return fragments.get(position);
"
2846,willChangeBounds,"        public boolean willChangeBounds() {
            return true;
        }"
2847,applyTransformation,"        protected void applyTransformation(float interpolatedTime, Transformation t) {
            mView.getLayoutParams().width = mStartWidth + (int) ((mWidth - mStartWidth) * interpolatedTime);
            mView.requestLayout();
        }"
2848,unSelect,"    public void unSelect(boolean setActiveColor, int animationDuration) {
        super.unSelect(setActiveColor, animationDuration);

        ResizeWidthAnimation anim = new ResizeWidthAnimation(this, mInActiveWidth);
        anim.setDuration(animationDuration);
        this.startAnimation(anim);
"
2849,select,"    public void select(boolean setActiveColor, int animationDuration) {
        super.select(setActiveColor, animationDuration);

        ResizeWidthAnimation anim = new ResizeWidthAnimation(this, mActiveWidth);
        anim.setDuration(animationDuration);
        this.startAnimation(anim);
"
2852,convert,"    protected void convert(BaseViewHolder holder, final CatagoryInfoVo catagoryInfoVo, int position, List payloads) {
        ImageView categroyIcon = holder.getView(R.id.iv_classify);
        TextView categroyName = holder.getView(R.id.tv_classify);
        Glide.with(getContext())
                .load(catagoryInfoVo.resId)
                .into(categroyIcon);"
2853,unSelect,"    public void unSelect(boolean setActiveColor, int animationDuration) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
                labelView.animate().scaleX(labelScale).scaleY(labelScale).setDuration(animationDuration).start();
            }"
2854,select,"    public void select(boolean setActiveColor, int animationDuration) {

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
                labelView.animate().scaleX(1).scaleY(1).setDuration(animationDuration).start();"
2856,initialise,"    public void initialise(boolean setActiveColor) {
        iconView.setSelected(false);
        if (isInActiveIconSet) {
            StateListDrawable states = new StateListDrawable();"
2857,onAnimationUpdate,"                public void onAnimationUpdate(ValueAnimator valueAnimator) {
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                        containerView.setPadding(containerView.getPaddingLeft(),"
2858,unSelect,"    public void unSelect(boolean setActiveColor, int animationDuration) {
        isActive = false;

        ValueAnimator animator = null;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
            animator = ValueAnimator.ofInt(containerView.getPaddingTop(), paddingTopInActive);
            animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                @Override"
2860,select,"    public void select(boolean setActiveColor, int animationDuration) {
        isActive = true;

        ValueAnimator animator = null;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
            animator = ValueAnimator.ofInt(containerView.getPaddingTop(), paddingTopActive);
            animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
                @Override"
2861,getPosition,"    public int getPosition() {
        return mPosition;
    }"
2862,setBadgeItem,"    public void setBadgeItem(com.bottomnavigation.BadgeItem badgeItem) {
        this.badgeItem = badgeItem;
    }"
2863,setPosition,"    public void setPosition(int position) {
        mPosition = position;
    }"
2864,setItemBackgroundColor,"    public void setItemBackgroundColor(int backgroundColor) {
        mBackgroundColor = backgroundColor;
    }"
2865,setInactiveColor,"    public void setInactiveColor(int inActiveColor) {
        mInActiveColor = inActiveColor;
        labelView.setTextColor(inActiveColor);
    }"
2866,getActiveColor,"    public int getActiveColor() {
        return mActiveColor;
    }"
2867,setActiveColor,"    public void setActiveColor(int activeColor) {
        mActiveColor = activeColor;
    }"
2868,setLabel,"    public void setLabel(String label) {
        mLabel = label;
        labelView.setText(label);
    }"
2869,setInactiveIcon,"    public void setInactiveIcon(Drawable icon) {
        mCompactInActiveIcon = DrawableCompat.wrap(icon);
        isInActiveIconSet = true;
    }"
2870,setIcon,"    public void setIcon(Drawable icon) {
        mCompactIcon = DrawableCompat.wrap(icon);
    }"
2871,setInactiveWidth,"    public void setInactiveWidth(int inactiveWidth) {
        mInActiveWidth = inactiveWidth;
        ViewGroup.LayoutParams params = getLayoutParams();
        params.width = mInActiveWidth;
        setLayoutParams(params);
    }"
2872,setActiveWidth,"    public void setActiveWidth(int activeWidth) {
        mActiveWidth = activeWidth;
    }"
2873,init,"    void init() {
        setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
    }"
2874,getBadgeItem,"    protected com.bottomnavigation.BadgeItem getBadgeItem() {
        return mBadgeItem;
    }"
2875,getInActiveColor,"    protected int getInActiveColor(Context context) {
        if (this.mInActiveColorResource != 0) {
            return ContextCompat.getColor(context, mInActiveColorResource);"
2876,getActiveColor,"    protected int getActiveColor(Context context) {
        if (this.mActiveColorResource != 0) {
            return ContextCompat.getColor(context, mActiveColorResource);"
2877,isInActiveIconAvailable,"    protected boolean isInActiveIconAvailable() {
        return inActiveIconAvailable;
    }"
2878,getInactiveIcon,"    protected Drawable getInactiveIcon(Context context) {
        if (this.mInactiveIconResource != 0) {
            return ContextCompat.getDrawable(context, this.mInactiveIconResource);"
2879,getTitle,"    protected String getTitle(Context context) {
        if (this.mTitleResource != 0) {
            return context.getString(this.mTitleResource);"
2880,getIcon,"    protected Drawable getIcon(Context context) {
        if (this.mIconResource != 0) {
            return ContextCompat.getDrawable(context, this.mIconResource);"
2881,setBadgeItem,"    public BottomNavigationItem setBadgeItem(@Nullable com.bottomnavigation.BadgeItem badgeItem) {
        this.mBadgeItem = badgeItem;
        return this;
    }"
2882,setInActiveColor,"    public BottomNavigationItem setInActiveColor(int color) {
        this.mInActiveColor = color;
        return this;
    }"
2883,setInActiveColor,"    public BottomNavigationItem setInActiveColor(@Nullable String colorCode) {
        this.mInActiveColorCode = colorCode;
        return this;
    }"
2884,setInActiveColorResource,"    public BottomNavigationItem setInActiveColorResource(@ColorRes int colorResource) {
        this.mInActiveColorResource = colorResource;
        return this;
    }"
2885,setActiveColor,"    public BottomNavigationItem setActiveColor(int color) {
        this.mActiveColor = color;
        return this;
    }"
2886,setActiveColor,"    public BottomNavigationItem setActiveColor(@Nullable String colorCode) {
        this.mActiveColorCode = colorCode;
        return this;
    }"
2887,setActiveColorResource,"    public BottomNavigationItem setActiveColorResource(@ColorRes int colorResource) {
        this.mActiveColorResource = colorResource;
        return this;
    }"
2888,setInactiveIconResource,"    public BottomNavigationItem setInactiveIconResource(@DrawableRes int mInactiveIconResource) {
        this.mInactiveIconResource = mInactiveIconResource;
        inActiveIconAvailable = true;
        return this;
    }"
2889,setInactiveIcon,"    public BottomNavigationItem setInactiveIcon(Drawable mInactiveIcon) {
        if (mInactiveIcon != null) {
            this.mInactiveIcon = mInactiveIcon;
            inActiveIconAvailable = true;"
2890,onCancel,"                private void onCancel() {
                    backgroundView.setBackgroundColor(newColor);
                    bgOverlay.setVisibility(View.GONE);
                }"
2891,onAnimationCancel,"                public void onAnimationCancel(Animator animation) {
                    onCancel();
                }"
2892,onAnimationEnd,"                public void onAnimationEnd(Animator animation) {
                    onCancel();
                }"
2895,setBadgeForTab,"    private static void setBadgeForTab(com.bottomnavigation.BadgeItem badgeItem, BottomNavigationTab bottomNavigationTab) {
        if (badgeItem != null) {
"
2898,getMeasurementsForFixedMode,"    public static int[] getMeasurementsForFixedMode(Context context, int screenWidth, int noOfTabs, boolean scrollable) {

        int[] result = new int[2];

        int minWidth = (int) context.getResources().getDimension(R.dimen.fixed_min_width_small_views);
        int maxWidth = (int) context.getResources().getDimension(R.dimen.fixed_min_width);

        int itemWidth = screenWidth / noOfTabs;
"
2899,onTabReselected,"        public void onTabReselected(int position) {
        }"
2900,onTabUnselected,"        public void onTabUnselected(int position) {
        }"
2901,onTabSelected,"        public void onTabSelected(int position) {
        }"
2902,onTabReselected,"        void onTabReselected(int position);
    }"
2905,getAnimationDuration,"    public int getAnimationDuration() {
        return mAnimationDuration;
    }"
2906,getCurrentSelectedPosition,"    public int getCurrentSelectedPosition() {
        return mSelectedPosition;
    }"
2907,getBackgroundColor,"    public int getBackgroundColor() {
        return mBackgroundColor;
    }"
2908,getInActiveColor,"    public int getInActiveColor() {
        return mInActiveColor;
    }"
2910,setFab,"    private void setFab(FloatingActionButton fab, @FabBehaviour int fabBehaviour) {
        ViewGroup.LayoutParams layoutParams = fab.getLayoutParams();
        if (layoutParams != null && layoutParams instanceof CoordinatorLayout.LayoutParams) {
            CoordinatorLayout.LayoutParams coLayoutParams = (CoordinatorLayout.LayoutParams) layoutParams;"
2911,setFab,"    public void setFab(FloatingActionButton fab) {
        ViewGroup.LayoutParams layoutParams = fab.getLayoutParams();
        if (layoutParams != null && layoutParams instanceof CoordinatorLayout.LayoutParams) {
            CoordinatorLayout.LayoutParams coLayoutParams = (CoordinatorLayout.LayoutParams) layoutParams;"
2912,setAutoHideEnabled,"    public void setAutoHideEnabled(boolean mAutoHideEnabled) {
        this.mAutoHideEnabled = mAutoHideEnabled;
    }"
2913,isAutoHideEnabled,"    public boolean isAutoHideEnabled() {
        return mAutoHideEnabled;
    }"
2914,isHidden,"    public boolean isHidden() {
        return mIsHidden;
    }"
2915,animateOffset,"    private void animateOffset(final int offset) {
        if (mTranslationAnimator == null) {
            mTranslationAnimator = ViewCompat.animate(this);
            mTranslationAnimator.setDuration(mRippleAnimationDuration);"
2916,setTranslationY,"    private void setTranslationY(int offset, boolean animate) {
        if (animate) {
            animateOffset(offset);"
2917,show,"    public void show(boolean animate) {
        mIsHidden = false;
        setTranslationY(0, animate);
    }"
2918,show,"    public void show() {
        show(true);
    }"
2919,hide,"    public void hide(boolean animate) {
        mIsHidden = true;
        setTranslationY(this.getHeight(), animate);
    }"
2920,hide,"    public void hide() {
        hide(true);
    }"
2921,toggle,"    public void toggle(boolean animate) {
        if (mIsHidden) {
            show(animate);"
2922,toggle,"    public void toggle() {
        toggle(true);
    }"
2925,selectTabInternal,"    private void selectTabInternal(int newPosition, boolean firstTab, boolean callListener, boolean forcedSelection) {
        int oldPosition = mSelectedPosition;
        if (mSelectedPosition != newPosition) {
            if (mBackgroundStyle == BACKGROUND_STYLE_STATIC) {
                if (mSelectedPosition != -1)"
2926,onClick,"            public void onClick(View v) {
                BottomNavigationTab bottomNavigationTabView = (BottomNavigationTab) v;
                selectTabInternal(bottomNavigationTabView.getPosition(), false, true, false);
            }"
2928,selectTab,"    public void selectTab(int newPosition, boolean callListener) {
        selectTabInternal(newPosition, false, callListener, callListener);
    }"
2929,selectTab,"    public void selectTab(int newPosition) {
        selectTab(newPosition, true);
    }"
2930,clearAll,"    public void clearAll() {
        mTabContainer.removeAllViews();
        mBottomNavigationTabs.clear();
        mBottomNavigationItems.clear();
        mBackgroundOverlay.setVisibility(View.GONE);
        mContainer.setBackgroundColor(Color.TRANSPARENT);
        mSelectedPosition = DEFAULT_SELECTED_POSITION;
    }"
2931,setAnimationDuration,"    public BottomNavigationBar setAnimationDuration(int animationDuration) {
        this.mAnimationDuration = animationDuration;
        this.mRippleAnimationDuration = (int) (animationDuration * 2.5);
        return this;
    }"
2932,setTabSelectedListener,"    public BottomNavigationBar setTabSelectedListener(OnTabSelectedListener tabSelectedListener) {
        this.mTabSelectedListener = tabSelectedListener;
        return this;
    }"
2933,initialise,"    public void initialise() {
        mSelectedPosition = DEFAULT_SELECTED_POSITION;
        mBottomNavigationTabs.clear();

        if (!mBottomNavigationItems.isEmpty()) {"
2934,setScrollable,"    private BottomNavigationBar setScrollable(boolean scrollable) {
        mScrollable = scrollable;
        return this;
    }"
2935,setFirstSelectedPosition,"    public BottomNavigationBar setFirstSelectedPosition(int firstSelectedPosition) {
        this.mFirstSelectedPosition = firstSelectedPosition;
        return this;
    }"
2936,setBarBackgroundColor,"    public BottomNavigationBar setBarBackgroundColor(String backgroundColorCode) {
        this.mBackgroundColor = Color.parseColor(backgroundColorCode);
        return this;
    }"
2937,setBarBackgroundColor,"    public BottomNavigationBar setBarBackgroundColor(@ColorRes int backgroundColor) {
        this.mBackgroundColor = ContextCompat.getColor(getContext(), backgroundColor);
        return this;
    }"
2938,setInActiveColor,"    public BottomNavigationBar setInActiveColor(String inActiveColorCode) {
        this.mInActiveColor = Color.parseColor(inActiveColorCode);
        return this;
    }"
2939,setInActiveColor,"    public BottomNavigationBar setInActiveColor(@ColorRes int inActiveColor) {
        this.mInActiveColor = ContextCompat.getColor(getContext(), inActiveColor);
        return this;
    }"
2940,setActiveColor,"    public BottomNavigationBar setActiveColor(String activeColorCode) {
        this.mActiveColor = Color.parseColor(activeColorCode);
        return this;
    }"
2941,setActiveColor,"    public BottomNavigationBar setActiveColor(@ColorRes int activeColor) {
        this.mActiveColor = ContextCompat.getColor(getContext(), activeColor);
        return this;
    }"
2942,setBackgroundStyle,"    public BottomNavigationBar setBackgroundStyle(@BackgroundStyle int backgroundStyle) {
        this.mBackgroundStyle = backgroundStyle;
        return this;
    }"
2943,setMode,"    public BottomNavigationBar setMode(@Mode int mode) {
        this.mMode = mode;
        return this;
    }"
2944,removeItem,"    public BottomNavigationBar removeItem(BottomNavigationItem item) {
        mBottomNavigationItems.remove(item);
        return this;
    }"
2945,addItem,"    public BottomNavigationBar addItem(BottomNavigationItem item) {
        mBottomNavigationItems.add(item);
        return this;
    }"
2947,parseAttrs,"    private void parseAttrs(Context context, AttributeSet attrs) {
        if (attrs != null) {
            TypedArray typedArray = context.getTheme().obtainStyledAttributes(attrs, R.styleable.BottomNavigationBar, 0, 0);"
2948,setTitle,"    protected void setTitle(String titleName) {
        mTitleBar.setVisibility(View.VISIBLE);
        mTitle.setText(titleName);
    }"
2949,createFragments,"    protected abstract List<BaseFragment> createFragments();
"
2950,createPageTitle,"    protected abstract String[] createPageTitle();
"
2951,setAdapter,"    protected void setAdapter() {
        mTitles.addAll(Arrays.asList(createPageTitle()));
        adapter = new ViewPagerAdapter(getChildFragmentManager(), createFragments(), mTitles);
        mViewPager.setAdapter(adapter);
        mViewPager.setOffscreenPageLimit(mTitles.size());
        mTabLayout.setViewPager(mViewPager, mTitles.toArray(createPageTitle()));
    }"
2952,initView,"    public void initView(Bundle state) {
        super.initView(state);
        loadManager.showStateView(LoadingState.class);
        mTabLayout = getViewById(R.id.tab_layout);
        mViewPager = getViewById(R.id.view_pager);
        mTitleBar = getViewById(R.id.rl_title_bar);
        mTitle = getViewById(R.id.tv_title);
        mTitles = new ArrayList<>();
        mFragments = new ArrayList<>();
    }"
2953,getContentResId,"    public int getContentResId(){
        return R.id.content_layout;
    }"
2954,getLayoutResId,"    public int getLayoutResId() {
        return R.layout.fragment_viewpager;
    }"
2955,getView,"    public <T extends View> T getView(@IdRes int viewId) {
        View view = views.get(viewId);
        if (view == null) {
            view = itemView.findViewById(viewId);
            views.put(viewId, view);"
2956,onItemLongClickListener,"        void onItemLongClickListener(View v, int position);
    }"
2957,onItemClickListener,"        void onItemClickListener(View v, int position);
    }"
2958,setOnItemLongClickListener,"    public void setOnItemLongClickListener(OnItemLongClickListener onItemLongClickListener) {
        this.onItemLongClickListener = onItemLongClickListener;
    }"
2959,setOnItemClickListener,"    public void setOnItemClickListener(OnItemClickListener onItemClickListener) {
        this.onItemClickListener = onItemClickListener;
    }"
2960,getItemCount,"    public int getItemCount() {
        return dataList != null ? dataList.size() : 0;
    }"
2961,convert,"    protected abstract void convert(BaseViewHolder holder, T t, int position, List<Object> payloads);
"
2962,onLongClick,"            public boolean onLongClick(View v) {
                if (onItemLongClickListener != null) {
                    onItemLongClickListener.onItemLongClickListener(v, position);
                }"
2963,onClick,"            public void onClick(View v) {
                if (onItemClickListener != null) {
                    onItemClickListener.onItemClickListener(v, position);"
2964,onBindViewHolder,"    public void onBindViewHolder(BaseViewHolder holder, final int position) {
        List list = new ArrayList();
        convert(holder, dataList.get(position), position, list);
        holder.itemView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {"
2965,onBindViewHolder,"    public void onBindViewHolder(BaseViewHolder holder, final int position, List<Object> payloads) {
        if (payloads.isEmpty()) {
            onBindViewHolder(holder, position);"
2966,onCreateViewHolder,"    public BaseViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = layoutInflater.inflate(mItemLayoutId, parent, false);
        return new BaseViewHolder(view);
"
2967,setList,"    public void setList(List<T> dataList) {
        this.dataList = dataList;
    }"
2968,getList,"    public List<T> getList() {
        return dataList;
    }"
2969,getContext,"    protected Context getContext() {
        return context;
    }"
2970,onScrollStateChanged,"        public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
            super.onScrollStateChanged(recyclerView, newState);
            if (newState == RecyclerView.SCROLL_STATE_IDLE) {
                if (activity != null) {"
2971,onRefresh,"    public void onRefresh(boolean isRefresh) {
        this.isRefresh = isRefresh;
        lastId = null;
        getRemoteData();
    }"
2972,onLoadMore,"    public void onLoadMore(boolean isLoadMore, int pageIndex) {
        this.isLoadMore = isLoadMore;
    }"
2974,createLayoutManager,"    protected abstract RecyclerView.LayoutManager createLayoutManager();
"
2975,createAdapter,"    protected abstract DelegateAdapter createAdapter();
"
2976,setMoreData,"    protected void setMoreData() {
        adapter.notifyDataSetChanged();
        if (isLoadMore) {
            refreshHelper.loadMoreComplete();
        }"
2977,setData,"    protected void setData() {
        adapter.setDatas(mItems);
        adapter.notifyDataSetChanged();
        if (isRefresh) {
            refreshHelper.refreshComplete();"
2978,setUiData,"    protected void setUiData(Collection<?> data) {
        if (!isLoadMore) {
            mItems.clear();"
2979,onStateRefresh,"    protected void onStateRefresh() {
        super.onStateRefresh();
    }"
2980,lazyLoad,"    protected void lazyLoad() {
        getRemoteData();
    }"
2982,getContentResId,"    public int getContentResId() {
        return R.id.refresh_layout;
    }"
2983,getLayoutResId,"    public int getLayoutResId() {
        return R.layout.fragment_list_common;
    }"
2985,onAnimationCancel,"                    public void onAnimationCancel(View view) {
                        view.setVisibility(View.GONE);
                    }"
2986,onAnimationEnd,"                    public void onAnimationEnd(View view) {
                        view.setVisibility(View.GONE);
                    }"
2988,hide,"    public BadgeItem hide(boolean animate) {
        mIsHidden = true;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            if (animate) {"
2989,hide,"    public BadgeItem hide() {
        return hide(true);
    }"
2990,show,"    public BadgeItem show(boolean animate) {
        mIsHidden = false;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            if (animate) {"
2991,show,"    public BadgeItem show() {
        return show(true);
    }"
2992,toggle,"    public BadgeItem toggle(boolean animate) {
        if (mIsHidden) {
            return show(animate);"
2993,toggle,"    public BadgeItem toggle() {
        return toggle(true);
    }"
2994,unSelect,"    void unSelect() {
        if (mHideOnSelect) {
            show(true);"
2995,select,"    void select() {
        if (mHideOnSelect) {
            hide(true);"
2996,isWeakReferenceValid,"    private boolean isWeakReferenceValid() {
        return mTextViewRef != null && mTextViewRef.get() != null;
    }"
2997,setTextColor,"    private void setTextColor() {
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();"
2998,refreshDrawable,"    private void refreshDrawable() {
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();"
2999,getTextView,"    protected WeakReference<TextView> getTextView() {
        return mTextViewRef;
    }"
3000,isHideOnSelect,"    protected boolean isHideOnSelect() {
        return mHideOnSelect;
    }"
3001,getGravity,"    protected int getGravity() {
        return mGravity;
    }"
3002,getBorderWidth,"    protected int getBorderWidth() {
        return mBorderWidth;
    }"
3003,getBorderColor,"    protected int getBorderColor(Context context) {
        if (this.mBorderColorResource != 0) {
            return ContextCompat.getColor(context, mBorderColorResource);"
3004,getText,"    protected CharSequence getText() {
        return mText;
    }"
3005,getTextColor,"    protected int getTextColor(Context context) {
        if (this.mTextColorResource != 0) {
            return ContextCompat.getColor(context, mTextColorResource);"
3006,getBackgroundColor,"    protected int getBackgroundColor(Context context) {
        if (this.mBackgroundColorResource != 0) {
            return ContextCompat.getColor(context, mBackgroundColorResource);"
3007,setTextView,"    protected BadgeItem setTextView(TextView mTextView) {
        this.mTextViewRef = new WeakReference<>(mTextView);
        return this;
    }"
3008,setAnimationDuration,"    public BadgeItem setAnimationDuration(int animationDuration) {
        this.mAnimationDuration = animationDuration;
        return this;
    }"
3009,setHideOnSelect,"    public BadgeItem setHideOnSelect(boolean hideOnSelect) {
        this.mHideOnSelect = hideOnSelect;
        return this;
    }"
3010,setGravity,"    public BadgeItem setGravity(int gravity) {
        this.mGravity = gravity;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) textView.getLayoutParams();"
3011,setBorderWidth,"    public BadgeItem setBorderWidth(int borderWidth) {
        this.mBorderWidth = borderWidth;
        refreshDrawable();
        return this;
    }"
3012,setBorderColor,"    public BadgeItem setBorderColor(int color) {
        this.mBorderColor = color;
        refreshDrawable();
        return this;
    }"
3013,setBorderColor,"    public BadgeItem setBorderColor(@Nullable String colorCode) {
        this.mBorderColorCode = colorCode;
        refreshDrawable();
        return this;
    }"
3014,setBorderColorResource,"    public BadgeItem setBorderColorResource(@ColorRes int colorResource) {
        this.mBorderColorResource = colorResource;
        refreshDrawable();
        return this;
    }"
3015,setText,"    public BadgeItem setText(@Nullable CharSequence text) {
        this.mText = text;
        if (isWeakReferenceValid()) {
            TextView textView = mTextViewRef.get();
            if (!TextUtils.isEmpty(text)) {"
3016,setTextColor,"    public BadgeItem setTextColor(int color) {
        this.mTextColor = color;
        setTextColor();
        return this;
    }"
3017,setTextColor,"    public BadgeItem setTextColor(@Nullable String colorCode) {
        this.mTextColorCode = colorCode;
        setTextColor();
        return this;
    }"
3018,setTextColorResource,"    public BadgeItem setTextColorResource(@ColorRes int colorResource) {
        this.mTextColorResource = colorResource;
        setTextColor();
        return this;
    }"
3019,setBackgroundColor,"    public BadgeItem setBackgroundColor(int color) {
        this.mBackgroundColor = color;
        refreshDrawable();
        return this;
    }"
3020,setBackgroundColor,"    public BadgeItem setBackgroundColor(@Nullable String colorCode) {
        this.mBackgroundColorCode = colorCode;
        refreshDrawable();
        return this;
    }"
3021,setBackgroundColorResource,"    public BadgeItem setBackgroundColorResource(@ColorRes int colorResource) {
        this.mBackgroundColorResource = colorResource;
        refreshDrawable();
        return this;
    }"
3022,onPageScrolled,"			public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
				mPagerPosition = position;
				mPagerOffsetPixels = positionOffsetPixels;
			}"
3023,isViewDraggable,"					public boolean isViewDraggable(View v, int dx,
							int x, int y) {
						if (v == mViewPager) {
							return !(mPagerPosition == 0 && mPagerOffsetPixels == 0)"
3024,onCreate,"	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		SwipeBack.attach(this, Position.LEFT)
		.setContentView(R.layout.activity_view_pager)
		.setSwipeBackView(R.layout.swipeback_default)
		.setDividerAsSolidColor(Color.WHITE)
		.setDividerSize(2)"
3025,getLayoutDirection,"    public static int getLayoutDirection(View v) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
            return v.getLayoutDirection();
        }"
3026,getBottom,"    public static int getBottom(View v) {
        if (SwipeBack.USE_TRANSLATIONS) {
            return (int) (v.getBottom() + v.getTranslationY());
        }"
3027,getRight,"    public static int getRight(View v) {
        if (SwipeBack.USE_TRANSLATIONS) {
            return (int) (v.getRight() + v.getTranslationX());
        }"
3028,getTop,"    public static int getTop(View v) {
        if (SwipeBack.USE_TRANSLATIONS) {
            return (int) (v.getTop() + v.getTranslationY());
        }"
3029,getLeft,"    public static int getLeft(View v) {
        if (SwipeBack.USE_TRANSLATIONS) {
            return (int) (v.getLeft() + v.getTranslationX());
        }"
3030,onDraw,"    protected void onDraw(Canvas canvas){
        TextPaint textPaint = getPaint();
        textPaint.setColor(getCurrentTextColor());
        textPaint.drawableState = getDrawableState();

        canvas.save();

        if(topDown){
            canvas.translate(getWidth(), 0);
            canvas.rotate(90);"
3031,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec){
        super.onMeasure(heightMeasureSpec, widthMeasureSpec);
        setMeasuredDimension(getMeasuredHeight(), getMeasuredWidth());
    }"
3032,onSwiping,"	public void onSwiping(SwipeBack swipeBack, float openRatio, int pixelOffset);
"
3033,onSwipeBackReseted,"	public void onSwipeBackReseted(SwipeBack swipeBack, Activity activity);
"
3034,onSwipeBackCompleted,"	public void onSwipeBackCompleted(SwipeBack swipeBack, Activity activity);
"
3035,onSwipeBackViewCreated,"	public void onSwipeBackViewCreated(SwipeBack swipeBack, Activity activity, View swipeBackView);
"
3036,dispatchOnDrawerSlide,"	protected void dispatchOnDrawerSlide(float openRatio, int offsetPixels) {
		if (mOnStateChangeListener != null) {
			mOnStateChangeListener.onSlide(openRatio, offsetPixels);"
3037,fitSystemWindows,"	protected boolean fitSystemWindows(Rect insets) {
		if (mDragMode == DRAG_WINDOW && mPosition != Position.BOTTOM) {
			mSwipeBackContainer.setPadding(0, insets.top, 0, 0);
		}"
3038,postOnAnimation,"	public void postOnAnimation(Runnable action) {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
			super.postOnAnimation(action);"
3039,setOnStateChangeListener,"	public SwipeBack setOnStateChangeListener(OnStateChangeListener listener) {
		this.mAdditionalOnStateChangeListener = listener;
		return this;
	}"
3040,getSwipeBackTransformer,"	public SwipeBackTransformer getSwipeBackTransformer() {
		return mSwipeBackTransformer;
	}"
3041,setSwipeBackTransformer,"	public SwipeBack setSwipeBackTransformer(SwipeBackTransformer transformer) {
		mSwipeBackTransformer = transformer;
		if (mSwipeBackView != null) {
			notifySwipeBackViewCreated(mSwipeBackView);
		}"
3044,setTouchBezelSize,"	public abstract SwipeBack setTouchBezelSize(int size);
"
3045,setTouchMode,"	public abstract SwipeBack setTouchMode(int mode);
"
3047,logDrawerState,"	protected SwipeBack logDrawerState(int state) {
		switch (state) {
		case STATE_CLOSED:
			Log.d(TAG, ""[DrawerState] STATE_CLOSED"");"
3048,setDrawerState,"	protected SwipeBack setDrawerState(int state) {
		if (state != mDrawerState) {
			final int oldState = mDrawerState;
			mDrawerState = state;"
3049,setContentView,"	public SwipeBack setContentView(View view, LayoutParams params) {
		switch (mDragMode) {
		case SwipeBack.DRAG_CONTENT:
			mContentContainer.removeAllViews();"
3050,setContentView,"	public SwipeBack setContentView(View view) {
		setContentView(view, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
		return this;
	}"
3051,setContentView,"	public SwipeBack setContentView(int layoutResId) {
		switch (mDragMode) {
		case SwipeBack.DRAG_CONTENT:
			mContentContainer.removeAllViews();"
3052,getSwipeBackView,"	public View getSwipeBackView() {
		return mSwipeBackView;
	}"
3053,notifySwipeBackViewCreated,"	private void notifySwipeBackViewCreated(View view) {

		if (mSwipeBackTransformer != null) {"
3054,setSwipeBackView,"	public SwipeBack setSwipeBackView(View view, LayoutParams params) {
		mSwipeBackView = view;
		mSwipeBackContainer.removeAllViews();
		mSwipeBackContainer.addView(view, params);

		notifySwipeBackViewCreated(mSwipeBackView);
"
3055,setSwipeBackView,"	public SwipeBack setSwipeBackView(View view) {
		setSwipeBackView(view, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
		return this;
	}"
3056,setSwipeBackView,"	public SwipeBack setSwipeBackView(int layoutResId) {
		mSwipeBackContainer.removeAllViews();
		mSwipeBackView = LayoutInflater.from(getContext()).inflate(layoutResId,
				mSwipeBackContainer, false);
		mSwipeBackContainer.addView(mSwipeBackView);

		notifySwipeBackViewCreated(mSwipeBackView);"
3057,getContentContainer,"	public ViewGroup getContentContainer() {
		if (mDragMode == DRAG_CONTENT) {
			return mContentContainer;"
3058,getSwipeBackContainer,"	public ViewGroup getSwipeBackContainer() {
		return mSwipeBackContainer;
	}"
3059,getDrawOverlay,"	public boolean getDrawOverlay() {
		return mDrawOverlay;
	}"
3060,setDrawOverlay,"	public SwipeBack setDrawOverlay(boolean drawOverlay) {
		mDrawOverlay = drawOverlay;
		return this;
	}"
3061,setMaxAnimationDuration,"	public SwipeBack setMaxAnimationDuration(int duration) {

		mMaxAnimationDuration = duration;
		return this;"
3062,setHardwareLayerEnabled,"	public abstract SwipeBack setHardwareLayerEnabled(boolean enabled);
"
3063,peekSwipeBack,"	public abstract SwipeBack peekSwipeBack(long startDelay, long delay);
"
3064,peekSwipeBack,"	public abstract SwipeBack peekSwipeBack(long delay);
"
3066,setDividerAsSolidColor,"	public SwipeBack setDividerAsSolidColor(int color) {

		setDivider(new ColorDrawable(color));
		return this;"
3067,setDividerSizeInPixel,"	public SwipeBack setDividerSizeInPixel(int pixel) {
		mDividerSize = pixel;
		invalidate();
		return this;
	}"
3068,setDividerSize,"	public SwipeBack setDividerSize(int dp) {
		mDividerSize = dpToPx(dp);
		invalidate();

		return this;"
3069,getDivider,"	public Drawable getDivider() {
		return mDividerDrawable;
	}"
3070,setDivider,"	public SwipeBack setDivider(int resId) {
		return setDivider(getResources().getDrawable(resId));
	}"
3071,setDivider,"	public SwipeBack setDivider(Drawable drawable) {
		mDividerDrawable = drawable;
		mCustomDivider = drawable != null;
		invalidate();
		return this;
	}"
3072,setDividerAsShadowColor,"	public SwipeBack setDividerAsShadowColor(int color) {
		GradientDrawable.Orientation orientation = getDividerOrientation();

		final int endColor = color & 0x00FFFFFF;
		GradientDrawable gradient = new GradientDrawable(orientation,
				new int[] {
				color,"
3074,setDividerEnabled,"	public SwipeBack setDividerEnabled(boolean enabled) {
		mDividerEnabled = enabled;
		invalidate();

		return this;"
3075,setOnInterceptMoveEventListener,"	public void setOnInterceptMoveEventListener(OnInterceptMoveEventListener listener) {
		mOnInterceptMoveEventListener = listener;
	}"
3076,getState,"	public int getState() {
		return mDrawerState;
	}"
3077,getOffsetSwipeBackEnabled,"	public abstract boolean getOffsetSwipeBackEnabled();
"
3078,setOffsetSwipeBackViewEnabled,"	public abstract void setOffsetSwipeBackViewEnabled(boolean offsetEnabled);
"
3079,updateTouchAreaSize,"	protected void updateTouchAreaSize() {
		if (mTouchMode == TOUCH_MODE_BEZEL) {
			mTouchSize = mTouchBezelSize;"
3080,onScrollChanged,"		public void onScrollChanged() {
			if (mActiveView != null && isViewDescendant(mActiveView)) {
				mActiveView.getDrawingRect(mTempRect);"
3081,getSize,"	public int getSize() {
		return mSwipeBackViewSize;
	}"
3082,setSize,"	public abstract SwipeBack setSize(int size);
"
3084,close,"	public abstract SwipeBack close(boolean animate);
"
3085,close,"	public SwipeBack close() {
		return close(true);
	}"
3086,setSwipeBackContainerBackgroundDrawable,"	public SwipeBack setSwipeBackContainerBackgroundDrawable(int resId) {
		return setSwipeBackContainerBackgroundDrawable(getResources()
				.getDrawable(resId));"
3087,setSwipeBackContainerBackgroundDrawable,"	public SwipeBack setSwipeBackContainerBackgroundDrawable(Drawable d) {
		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
			mSwipeBackContainer.setBackgroundDrawable(d);
		} else {"
3088,setSwipeBackContainerBackgroundColor,"	public SwipeBack setSwipeBackContainerBackgroundColor(int color) {
		mSwipeBackContainer.setBackgroundColor(color);
		return this;
	}"
3089,open,"	public abstract SwipeBack open(boolean animate);
"
3090,open,"	public SwipeBack open() {
		return open(true);
	}"
3091,toggle,"	public abstract SwipeBack toggle(boolean animate);
"
3092,toggle,"	public SwipeBack toggle() {
		return toggle(true);
	}"
3093,onOffsetPixelsChanged,"	protected abstract void onOffsetPixelsChanged(int offsetPixels);
"
3094,setOffsetPixels,"	protected void setOffsetPixels(float offsetPixels) {
		final int oldOffset = (int) mOffsetPixels;
		final int newOffset = (int) offsetPixels;

		mOffsetPixels = offsetPixels;
"
3095,onRtlPropertiesChanged,"	public void onRtlPropertiesChanged(int layoutDirection) {
		super.onRtlPropertiesChanged(layoutDirection);

		if (!mCustomDivider) {
			setDividerAsShadowColor(mDividerAsShadowColor);
		}
"
3096,getPosition,"	protected Position getPosition() {
		final int layoutDirection = ViewHelper.getLayoutDirection(this);

		switch (mPosition) {
		case START:"
3097,setTouchEnabled,"	public void setTouchEnabled(boolean enabled) {

		if (enabled) {"
3098,setPosition,"	private void setPosition(Position position) {
		mPosition = position;
		mResolvedPosition = getPosition();
	}"
3101,drawOverlay,"	protected abstract void drawOverlay(Canvas canvas);
"
3102,dispatchDraw,"	protected void dispatchDraw(Canvas canvas) {
		super.dispatchDraw(canvas);
		final int offsetPixels = (int) mOffsetPixels;

		if (mDrawOverlay && offsetPixels != 0) {
			drawOverlay(canvas);"
3103,onDetachedFromWindow,"	protected void onDetachedFromWindow() {
		Log.d(TAG, ""detach from window"");
		getViewTreeObserver().removeOnScrollChangedListener(mScrollListener);
		super.onDetachedFromWindow();
	}"
3104,onAttachedToWindow,"	protected void onAttachedToWindow() {
		super.onAttachedToWindow();
		getViewTreeObserver().addOnScrollChangedListener(mScrollListener);
	}"
3105,isViewDescendant,"	protected boolean isViewDescendant(View v) {
		ViewParent parent = v.getParent();
		while (parent != null) {
			if (parent == this) {
				return true;"
3106,dpToPx,"	public int dpToPx(int dp) {
		return (int) (getResources().getDisplayMetrics().density * dp + 0.5f);
	}"
3107,onFinishInflate,"	protected void onFinishInflate() {
		super.onFinishInflate();
		View swipeBackView = findViewById(R.id.sbSwipeBackView);
		if (swipeBackView != null) {
			removeView(swipeBackView);
			setSwipeBackView(swipeBackView);
		}
"
3109,attachToDecor,"	private static void attachToDecor(Activity activity, SwipeBack swipeBack) {
		ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();
		ViewGroup decorChild = (ViewGroup) decorView.getChildAt(0);

		decorView.removeAllViews();
		decorView.addView(swipeBack, LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
"
3110,attachToContent,"	private static void attachToContent(Activity activity, SwipeBack swipeBack) {
		/**
		 * Do not call mActivity#setContentView.
		 * E.g. if using with a ListActivity, Activity#setContentView is overridden and dispatched to
		 * SwipeBack#setContentView, which then again would call Activity#setContentView."
3111,onSlide,"			public void onSlide(float openRatio, int offsetPixels) {

				if (!isActivitiyDestroyed()) {"
3112,onStateChanged,"			public void onStateChanged(int oldState, int newState) {

				if (!isActivitiyDestroyed()) {"
3113,initSwipeListener,"	private void initSwipeListener() {
		mOnStateChangeListener = new OnStateChangeListener() {
"
3114,isActivitiyDestroyed,"	protected boolean isActivitiyDestroyed() {

		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {"
3115,createSwipeBack,"	private static SwipeBack createSwipeBack(Activity activity, int dragMode, Position position, Type type, SwipeBackTransformer transformer) {

		SwipeBack drawerHelper;

		if (type == Type.OVERLAY) {
			drawerHelper = new OverlaySwipeBack(activity, dragMode);


		} else {
			drawerHelper = new SlidingSwipeBack(activity, dragMode);"
3116,attach,"	public static SwipeBack attach(Activity activity, Type type, Position position, int dragMode, SwipeBackTransformer transformer) {

		SwipeBack swipeBack = createSwipeBack(activity, dragMode, position, type, transformer);
		swipeBack.setId(R.id.sb__swipeBack);

"
3117,attach,"	public static SwipeBack attach(Activity activity, Type type,
			Position position) {
		return attach(activity, type, position, DRAG_WINDOW);"
3118,attach,"	public static SwipeBack attach(Activity activity, Type type,
			Position position, int dragMode) {
		return attach(activity, type, position, dragMode,"
3119,attach,"	public static SwipeBack attach(Activity activity, Type type, Position position, SwipeBackTransformer transformer) {
		return attach(activity, type, position, DRAG_WINDOW, transformer);
	}"
3120,attach,"	public static SwipeBack attach(Activity activity, Position position) {
		return attach(activity, Type.BEHIND, position);
	}"
3121,attach,"	public static SwipeBack attach(Activity activity, Position position, SwipeBackTransformer transformer) {
		return attach(activity, Type.BEHIND, position, transformer);
	}"
3122,attach,"	public static SwipeBack attach(Activity activity, Type type, SwipeBackTransformer transformer) {
		return attach(activity, type, Position.START);
	}"
3123,attach,"	public static SwipeBack attach(Activity activity, Type type) {
		return attach(activity, type, Position.START);
	}"
3124,attach,"	public static SwipeBack attach(Activity activity, SwipeBackTransformer transformer) {
		return attach(activity, Type.BEHIND, transformer);
	}"
3125,attach,"	public static SwipeBack attach(Activity activity) {
		return attach(activity, Type.BEHIND);
	}"
3126,isViewDraggable,"		boolean isViewDraggable(View v, int delta, int x, int y);
	}"
3127,onSlide,"		void onSlide(float openRatio, int offsetPixels);
	}"
3128,onStateChanged,"		void onStateChanged(int oldState, int newState);
"
3129,getInterpolation,"    public float getInterpolation(float t) {
        t -= 1.0f;
        return t * t * t * t * t + 1.0f;
    }"
3130,onPointerUp,"	 private void onPointerUp(MotionEvent ev) {
		 final int pointerIndex = ev.getActionIndex();
		 final int pointerId = ev.getPointerId(pointerIndex);
		 if (pointerId == mActivePointerId) {
			 final int newPointerIndex = pointerIndex == 0 ? 1 : 0;"
3131,onTouchEvent,"	 public boolean onTouchEvent(MotionEvent ev) {
		 if (!mSwipeBackViewVisible && !mIsDragging && mTouchMode == TOUCH_MODE_NONE) {
			 return false;
		 }
		 final int action = ev.getAction() & MotionEvent.ACTION_MASK;

		 if (mVelocityTracker == null) {
			 mVelocityTracker = VelocityTracker.obtain();"
3132,onInterceptTouchEvent,"	 public boolean onInterceptTouchEvent(MotionEvent ev) {
		 final int action = ev.getAction() & MotionEvent.ACTION_MASK;

		 if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
			 mActivePointerId = INVALID_POINTER;
			 mIsDragging = false;
			 if (mVelocityTracker != null) {
				 mVelocityTracker.recycle();
				 mVelocityTracker = null;
			 }

			 if (Math.abs(mOffsetPixels) > mSwipeBackViewSize / 2) {"
3133,checkTouchSlop,"	 protected boolean checkTouchSlop(float dx, float dy) {
		 switch (getPosition()) {
		 case TOP:"
3134,onUpEvent,"	 protected void onUpEvent(int x, int y) {
		 final int offsetPixels = (int) mOffsetPixels;

		 switch (getPosition()) {"
3135,onMoveEvent,"	 protected void onMoveEvent(float dx, float dy) {
		 switch (getPosition()) {
		 case LEFT:"
3136,onMoveAllowDrag,"	 protected boolean onMoveAllowDrag(int x, int y, float dx, float dy) {
		 switch (getPosition()) {
		 case LEFT:
			 return (!mSwipeBackViewVisible && mInitialMotionX <= mTouchSize && (dx > 0))"
3137,onDownAllowDrag,"	 protected boolean onDownAllowDrag(int x, int y) {
		 switch (getPosition()) {
		 case LEFT:
			 return (!mSwipeBackViewVisible && mInitialMotionX <= mTouchSize)"
3138,isContentTouch,"	 private boolean isContentTouch(int x, int y) {
		 boolean contentTouch = false;

		 switch (getPosition()) {
		 case LEFT:"
3140,offsetMenu,"	private void offsetMenu(int offsetPixels) {
		 if (!mOffsetMenu || mSwipeBackViewSize == 0) {
			 return;
		 }

		 final int width = getWidth();
		 final int height = getHeight();

		 final int menuSize = mSwipeBackViewSize;
		 final int sign = (int) (mOffsetPixels / Math.abs(mOffsetPixels));"
3141,onLayout,"	protected void onLayout(boolean changed, int l, int t, int r, int b) {
		final int width = r - l;
		final int height = b - t;

		if (USE_TRANSLATIONS) {
			mContentContainer.layout(0, 0, width, height);"
3142,drawOverlay,"	protected void drawOverlay(Canvas canvas) {
		final int width = getWidth();
		final int height = getHeight();
		final int offsetPixels = (int) mOffsetPixels;
		final float openRatio = Math.abs(mOffsetPixels) / mSwipeBackViewSize;

		switch (getPosition()) {
		case LEFT:
			mSwipeBackOverlay.setBounds(0, 0, offsetPixels, height);"
3143,onSizeChanged,"	protected void onSizeChanged(int w, int h, int oldw, int oldh) {
		super.onSizeChanged(w, h, oldw, oldh);
		onOffsetPixelsChanged((int) mOffsetPixels);
	}"
3144,initPeekScroller,"	protected void initPeekScroller() {
		switch (getPosition()) {
		case RIGHT:"
3145,onOffsetPixelsChanged,"	protected void onOffsetPixelsChanged(int offsetPixels) {
		if (USE_TRANSLATIONS) {
			switch (getPosition()) {
			case TOP:
			case BOTTOM:"
3146,close,"	public SwipeBack close(boolean animate) {
		animateOffsetTo(0, 0, animate);
		return this;
	}"
3147,open,"	public SwipeBack open(boolean animate) {
		int animateTo = 0;
		switch (getPosition()) {
		case LEFT:
		case TOP:
			animateTo = mSwipeBackViewSize;"
3148,init,"	protected void init(Context context, AttributeSet attrs, int defStyle) {
		super.init(context, attrs, defStyle);
		super.addView(mSwipeBackContainer, -1, new LayoutParams(
				LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
		super.addView(mContentContainer, -1, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));"
3151,onSwipeBackCompleted,"	public void onSwipeBackCompleted(SwipeBack swipeBack, Activity activity){
		activity.finish();
		activity.overridePendingTransition(R.anim.swipeback_slide_left_in, R.anim.swipeback_slide_right_out);
	}"
3152,onSwipeBackViewCreated,"	public void onSwipeBackViewCreated(SwipeBack swipeBack, Activity activity,
			final View swipeBackView) {

		arrowTop = swipeBackView.findViewById(R.id.arrowTop);
		arrowBottom = swipeBackView.findViewById(R.id.arrowBottom);
		textView = (TextView) swipeBackView.findViewById(R.id.text);"
3153,unscheduleDrawable,"    public void unscheduleDrawable(Drawable who, Runnable what) {
        if (who == mWrapped) {
            unscheduleSelf(what);"
3154,scheduleDrawable,"    public void scheduleDrawable(Drawable who, Runnable what, long when) {
        if (who == mWrapped) {
            scheduleSelf(what, when);"
3155,invalidateDrawable,"    public void invalidateDrawable(Drawable who) {
        if (who == mWrapped) {
            invalidateSelf();"
3156,getConstantState,"    public ConstantState getConstantState() {
        return super.getConstantState();
    }"
3157,getPadding,"    public boolean getPadding(Rect padding) {
        return mWrapped.getPadding(padding);
    }"
3158,getMinimumHeight,"    public int getMinimumHeight() {
        return mWrapped.getMinimumHeight();
    }"
3159,getMinimumWidth,"    public int getMinimumWidth() {
        return mWrapped.getMinimumWidth();
    }"
3160,getIntrinsicHeight,"    public int getIntrinsicHeight() {
        return mWrapped.getIntrinsicHeight();
    }"
3161,getIntrinsicWidth,"    public int getIntrinsicWidth() {
        return mWrapped.getIntrinsicWidth();
    }"
3162,onBoundsChange,"    protected void onBoundsChange(Rect bounds) {
        super.onBoundsChange(bounds);
        mWrapped.setBounds(bounds);
    }"
3163,onStateChange,"    protected boolean onStateChange(int[] state) {
        mWrapped.setState(state);
        return super.onStateChange(state);
    }"
3164,getTransparentRegion,"    public Region getTransparentRegion() {
        return mWrapped.getTransparentRegion();
    }"
3165,getOpacity,"    public int getOpacity() {
        return mWrapped.getOpacity();
    }"
3166,setVisible,"    public boolean setVisible(boolean visible, boolean restart) {
        return super.setVisible(visible, restart);
    }"
3167,getCurrent,"    public Drawable getCurrent() {
        return mWrapped.getCurrent();
    }"
3168,getState,"    public int[] getState() {
        return mWrapped.getState();
    }"
3169,setState,"    public boolean setState(int[] stateSet) {
        return mWrapped.setState(stateSet);
    }"
3170,isStateful,"    public boolean isStateful() {
        return mWrapped.isStateful();
    }"
3171,clearColorFilter,"    public void clearColorFilter() {
        mWrapped.clearColorFilter();
    }"
3172,setColorFilter,"    public void setColorFilter(int color, PorterDuff.Mode mode) {
        mWrapped.setColorFilter(color, mode);
    }"
3173,setColorFilter,"    public void setColorFilter(ColorFilter cf) {
        mWrapped.setColorFilter(cf);
    }"
3174,setAlpha,"    public void setAlpha(int alpha) {
        mWrapped.setAlpha(alpha);
    }"
3175,setFilterBitmap,"    public void setFilterBitmap(boolean filter) {
        mWrapped.setFilterBitmap(filter);
    }"
3176,setDither,"    public void setDither(boolean dither) {
        mWrapped.setDither(dither);
    }"
3177,getChangingConfigurations,"    public int getChangingConfigurations() {
        return mWrapped.getChangingConfigurations();
    }"
3178,setChangingConfigurations,"    public void setChangingConfigurations(int configs) {
        mWrapped.setChangingConfigurations(configs);
    }"
3179,draw,"    public void draw(Canvas canvas) {
        mWrapped.copyBounds(mTmpRect);
        canvas.save();
        if (mIsRtl) {
            canvas.translate(1.f / 3 * mTmpRect.width() * mOffset, 0);
        } else {
            canvas.translate(1.f / 3 * mTmpRect.width() * -mOffset, 0);"
3180,setIsRtl,"    void setIsRtl(boolean isRtl) {
        mIsRtl = isRtl;
        invalidateSelf();
    }"
3181,getOffset,"    public float getOffset() {
        return mOffset;
    }"
3182,setOffset,"    public void setOffset(float offset) {
        mOffset = offset;
        invalidateSelf();
    }"
3183,getInterpolation,"    public float getInterpolation(float input) {
        return (float) (0.5f + 0.5f * Math.sin(input * Math.PI - Math.PI / 2.f));
    }"
3184,onCreateView,"	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {

		View v = inflater.inflate(R.layout.fragment_simple, container, false);

		textView = (TextView) v.findViewById(R.id.textView);
"
3185,newInstance,"	public static SimpleFragment newInstance(String text, int backgroundColor) {
		SimpleFragment f = new SimpleFragment();
		f.text = text;
		f.backgroundColor = backgroundColor;
		return f;
	}"
3186,isScrollingInDirection,"    public boolean isScrollingInDirection(float xvel, float yvel) {
        return !mFinished && Math.signum(xvel) == Math.signum(mFinalX - mStartX)
                && Math.signum(yvel) == Math.signum(mFinalY - mStartY);"
3187,setFinalY,"    public void setFinalY(int newY) {
        mFinalY = newY;
        mDeltaY = mFinalY - mStartY;
        mFinished = false;
    }"
3188,setFinalX,"    public void setFinalX(int newX) {
        mFinalX = newX;
        mDeltaX = mFinalX - mStartX;
        mFinished = false;
    }"
3189,timePassed,"    public int timePassed() {
        return (int) (AnimationUtils.currentAnimationTimeMillis() - mStartTime);
    }"
3190,extendDuration,"    public void extendDuration(int extend) {
        int passed = timePassed();
        mDuration = passed + extend;
        mDurationReciprocal = 1.0f / mDuration;
        mFinished = false;
    }"
3191,abortAnimation,"    public void abortAnimation() {
        mCurrX = mFinalX;
        mCurrY = mFinalY;
        mFinished = true;
    }"
3195,startScroll,"    public void startScroll(int startX, int startY, int dx, int dy) {
        startScroll(startX, startY, dx, dy, DEFAULT_DURATION);
    }"
3196,computeScrollOffset,"    public boolean computeScrollOffset() {
        if (mFinished) {
            return false;
        }

        int timePassed = (int) (AnimationUtils.currentAnimationTimeMillis() - mStartTime);"
3197,getFinalY,"    public final int getFinalY() {
        return mFinalY;
    }"
3198,getFinalX,"    public final int getFinalX() {
        return mFinalX;
    }"
3199,getStartY,"    public final int getStartY() {
        return mStartY;
    }"
3200,getStartX,"    public final int getStartX() {
        return mStartX;
    }"
3201,getCurrVelocity,"    public float getCurrVelocity() {
        return mVelocity - mDeceleration * timePassed() / 2000.0f;
    }"
3202,getCurrY,"    public final int getCurrY() {
        return mCurrY;
    }"
3203,getCurrX,"    public final int getCurrX() {
        return mCurrX;
    }"
3204,getDuration,"    public final int getDuration() {
        return mDuration;
    }"
3205,forceFinished,"    public final void forceFinished(boolean finished) {
        mFinished = finished;
    }"
3206,isFinished,"    public final boolean isFinished() {
        return mFinished;
    }"
3208,setFriction,"    public final void setFriction(float friction) {
        mDeceleration = computeDeceleration(friction);
    }"
3209,fromValue,"    public static Position fromValue(int value) {
        return STRING_MAPPING.get(value);
    }"
3210,getInterpolation,"    public float getInterpolation(float input) {
        float result;

        if (input < 1.f / 3.f) {
            result = SINUSOIDAL_INTERPOLATOR.getInterpolation(input * 3);"
3211,onPointerUp,"  private void onPointerUp(MotionEvent ev) {
    final int pointerIndex = ev.getActionIndex();
    final int pointerId = ev.getPointerId(pointerIndex);
    if (pointerId == mActivePointerId) {
      final int newPointerIndex = pointerIndex == 0 ? 1 : 0;"
3212,onTouchEvent,"  @Override public boolean onTouchEvent(MotionEvent ev) {
    if (!mSwipeBackViewVisible && !mIsDragging && mTouchMode == TOUCH_MODE_NONE) {
      return false;
    }
    final int action = ev.getAction() & MotionEvent.ACTION_MASK;

    if (mVelocityTracker == null) {
      mVelocityTracker = VelocityTracker.obtain();"
3213,onInterceptTouchEvent,"  @Override public boolean onInterceptTouchEvent(MotionEvent ev) {
    final int action = ev.getAction() & MotionEvent.ACTION_MASK;

    if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
      removeCallbacks(mRevealRunnable);
      mActivePointerId = INVALID_POINTER;
      mIsDragging = false;
      if (mVelocityTracker != null) {
        mVelocityTracker.recycle();
        mVelocityTracker = null;
      }
"
3214,stopAnimation,"  @Override protected void stopAnimation() {
    super.stopAnimation();
    removeCallbacks(mRevealRunnable);
  }"
3215,checkTouchSlop,"  protected boolean checkTouchSlop(float dx, float dy) {
    switch (getPosition()) {
      case TOP:"
3216,onUpEvent,"  protected void onUpEvent(int x, int y) {
    final int offsetPixels = (int) mOffsetPixels;

    switch (getPosition()) {"
3217,onMoveEvent,"  protected void onMoveEvent(float dx, float dy) {
    switch (getPosition()) {
      case LEFT:"
3218,onMoveAllowDrag,"  protected boolean onMoveAllowDrag(int x, int y, float dx, float dy) {
    if (mSwipeBackViewVisible && mTouchMode == TOUCH_MODE_FULLSCREEN) {
      return true;
    }
"
3219,onDownAllowDrag,"  protected boolean onDownAllowDrag(int x, int y) {
    switch (getPosition()) {
      case LEFT:
        return (!mSwipeBackViewVisible && mInitialMotionX <= mTouchSize) || (mSwipeBackViewVisible"
3220,isContentTouch,"  private boolean isContentTouch(int x, int y) {
    boolean contentTouch = false;

    switch (getPosition()) {
      case LEFT:"
3222,onLayout,"  @Override protected void onLayout(boolean changed, int l, int t, int r, int b) {
    final int width = r - l;
    final int height = b - t;

    mContentContainer.layout(0, 0, width, height);
"
3223,stopLayerTranslation,"  @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override protected void stopLayerTranslation() {
    if (mLayerTypeHardware) {
      mLayerTypeHardware = false;"
3224,startLayerTranslation,"  @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override protected void startLayerTranslation() {
    if (USE_TRANSLATIONS && mHardwareLayersEnabled && !mLayerTypeHardware) {
      mLayerTypeHardware = true;"
3225,updateDividerRect,"  @Override protected void updateDividerRect() {
    final float openRatio = Math.abs(mOffsetPixels) / mSwipeBackViewSize;
    final int dropShadowSize = (int) (mDividerSize * openRatio);

    switch (getPosition()) {"
3226,getDividerOrientation,"  @Override protected GradientDrawable.Orientation getDividerOrientation() {
    switch (getPosition()) {
      case TOP:"
3227,onSizeChanged,"  @Override protected void onSizeChanged(int w, int h, int oldw, int oldh) {
    super.onSizeChanged(w, h, oldw, oldh);
    onOffsetPixelsChanged((int) mOffsetPixels);
  }"
3228,initPeekScroller,"  @Override protected void initPeekScroller() {
    switch (getPosition()) {
      case RIGHT:"
3229,onOffsetPixelsChanged,"  protected void onOffsetPixelsChanged(int offsetPixels) {
    if (USE_TRANSLATIONS) {
      switch (getPosition()) {
        case LEFT:"
3230,close,"  @Override public SwipeBack close(boolean animate) {
    animateOffsetTo(0, 0, animate);
    return this;
  }"
3231,open,"  @Override public SwipeBack open(boolean animate) {
    int animateTo = 0;
    switch (getPosition()) {
      case LEFT:
      case TOP:
        animateTo = mSwipeBackViewSize;"
3232,drawOverlay,"  @Override protected void drawOverlay(Canvas canvas) {
    final int width = getWidth();
    final int height = getHeight();
    final int offsetPixels = (int) mOffsetPixels;
    final float openRatio = Math.abs(mOffsetPixels) / mSwipeBackViewSize;

    switch (getPosition()) {
      case LEFT:
        mSwipeBackOverlay.setBounds(offsetPixels, 0, width, height);"
3233,init,"  protected void init(Context context, AttributeSet attrs, int defStyle) {
    super.init(context, attrs, defStyle);
    super.addView(mContentContainer, -1,
        new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
    if (USE_TRANSLATIONS) {
      mContentContainer.setLayerType(View.LAYER_TYPE_NONE, null);
    }
    mContentContainer.setHardwareLayersEnabled(false);"
3234,run,"    @Override public void run() {
      cancelContentTouch();
      int animateTo = 0;
      switch (getPosition()) {
        case RIGHT:
        case BOTTOM:"
3235,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        return true;
    }"
3237,getItem,"	public Fragment getItem(int i) {
		return SimpleFragment.newInstance(""Fragment "" + i, colors[i]);
	}"
3238,setFinal,"    public void setFinal(float newVal) {
        mFinal = newVal;
        mDeltaX = mFinal - mStart;
        mFinished = false;
    }"
3241,abortAnimation,"    public void abortAnimation() {
        mCurr = mFinal;
        mFinished = true;
    }"
3242,startScroll,"    public void startScroll(float start, float delta, int duration) {
        mFinished = false;
        mDuration = duration;
        mStartTime = AnimationUtils.currentAnimationTimeMillis();
        mStart = start;
        mFinal = start + delta;
        mDeltaX = delta;
        mDurationReciprocal = 1.0f / (float) mDuration;
    }"
3244,getFinal,"    public final float getFinal() {
        return mFinal;
    }"
3245,getStart,"    public final float getStart() {
        return mStart;
    }"
3246,getCurr,"    public final float getCurr() {
        return mCurr;
    }"
3250,safeGetY,"	protected float safeGetY(MotionEvent ev) {
		try {
			return ev.getY(ev.findPointerIndex(mActivePointerId));"
3251,safeGetX,"	protected float safeGetX(MotionEvent ev) {
		try {
			return ev.getX(ev.findPointerIndex(mActivePointerId));"
3252,supportGetTranslationX,"	private int supportGetTranslationX(View v) {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			return (int) v.getTranslationX();
		}"
3253,supportGetTranslationY,"	private int supportGetTranslationY(View v) {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			return (int) v.getTranslationY();
		}"
3254,getYVelocity,"	protected float getYVelocity(VelocityTracker velocityTracker) {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {
			return velocityTracker.getYVelocity(mActivePointerId);
		}"
3255,getXVelocity,"	protected float getXVelocity(VelocityTracker velocityTracker) {
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO) {
			return velocityTracker.getXVelocity(mActivePointerId);
		}"
3256,canChildScrollVertically,"	protected boolean canChildScrollVertically(View v, boolean checkV, int dx, int x, int y) {
		if (v instanceof ViewGroup) {
			final ViewGroup group = (ViewGroup) v;
"
3257,canChildScrollHorizontally,"	protected boolean canChildScrollHorizontally(View v, boolean checkV, int dx, int x, int y) {
		if (v instanceof ViewGroup) {
			final ViewGroup group = (ViewGroup) v;
"
3258,canChildrenScroll,"	protected boolean canChildrenScroll(int dx, int dy, int x, int y) {
		boolean canScroll = false;

		switch (getPosition()) {
		case LEFT:"
3259,isCloseEnough,"	protected boolean isCloseEnough() {
		return Math.abs(mOffsetPixels) <= mCloseEnough;
	}"
3260,endPeek,"	protected void endPeek() {
		removeCallbacks(mPeekStartRunnable);
		removeCallbacks(mPeekRunnable);
		stopLayerTranslation();
	}"
3261,completePeek,"	private void completePeek() {
		mPeekScroller.abortAnimation();

		setOffsetPixels(0);

		setDrawerState(STATE_CLOSED);"
3262,run,"					public void run() {
						startPeek();
					}"
3263,peekDrawerInvalidate,"	private void peekDrawerInvalidate() {
		if (mPeekScroller.computeScrollOffset()) {
			final int oldX = (int) mOffsetPixels;
			final int x = mPeekScroller.getCurrX();"
3265,startPeek,"	protected void startPeek() {
		initPeekScroller();

		startLayerTranslation();
		peekDrawerInvalidate();"
3266,postAnimationInvalidate,"	private void postAnimationInvalidate() {
		if (mScroller.computeScrollOffset()) {
			final int oldX = (int) mOffsetPixels;
			final int x = mScroller.getCurrX();"
3267,animateOffsetTo,"	protected void animateOffsetTo(int position, int duration) {
		final int startX = (int) mOffsetPixels;
		final int dx = position - startX;

		if (dx > 0) {
			setDrawerState(STATE_OPENING);
			mScroller.startScroll(startX, 0, dx, 0, duration);"
3268,animateOffsetTo,"	protected void animateOffsetTo(int position, int velocity, boolean animate) {
		endDrag();
		endPeek();

		final int startX = (int) mOffsetPixels;
		final int dx = position - startX;
		if (dx == 0 || !animate) {
			setOffsetPixels(position);
			setDrawerState(position == 0 ? STATE_CLOSED : STATE_OPEN);
			stopLayerTranslation();
			return;
		}"
3269,cancelContentTouch,"	protected void cancelContentTouch() {
		final long now = SystemClock.uptimeMillis();
		final MotionEvent cancelEvent = MotionEvent.obtain(now, now, MotionEvent.ACTION_CANCEL, 0.0f, 0.0f, 0);
		final int childCount = getChildCount();
		for (int i = 0; i < childCount; i++) {
			getChildAt(i).dispatchTouchEvent(cancelEvent);
		}
		mContentContainer.dispatchTouchEvent(cancelEvent);"
3270,completeAnimation,"	private void completeAnimation() {
		mScroller.abortAnimation();
		final int finalX = mScroller.getFinalX();
		setOffsetPixels(finalX);
		setDrawerState(finalX == 0 ? STATE_CLOSED : STATE_OPEN);
		stopLayerTranslation();
	}"
3271,stopAnimation,"	protected void stopAnimation() {
		removeCallbacks(mDragRunnable);
		mScroller.abortAnimation();
		stopLayerTranslation();
	}"
3272,endDrag,"	protected void endDrag() {
		mIsDragging = false;

		if (mVelocityTracker != null) {"
3273,stopLayerTranslation,"	protected void stopLayerTranslation() {
		if (mLayerTypeHardware) {
			mLayerTypeHardware = false;"
3274,startLayerTranslation,"	protected void startLayerTranslation() {
		if (USE_TRANSLATIONS && mHardwareLayersEnabled && !mLayerTypeHardware) {
			mLayerTypeHardware = true;"
3275,getTouchBezelSize,"	public int getTouchBezelSize() {
		return mTouchBezelSize;
	}"
3276,setTouchBezelSize,"	public SwipeBack setTouchBezelSize(int size) {
		mTouchBezelSize = size;
		return this;
	}"
3277,setTouchMode,"	public SwipeBack setTouchMode(int mode) {
		if (mTouchMode != mode) {
			mTouchMode = mode;
			updateTouchAreaSize();"
3278,getTouchMode,"	public int getTouchMode() {
		return mTouchMode;
	}"
3279,setHardwareLayerEnabled,"	public SwipeBack setHardwareLayerEnabled(boolean enabled) {
		if (enabled != mHardwareLayersEnabled) {
			mHardwareLayersEnabled = enabled;
			mSwipeBackContainer.setHardwareLayersEnabled(enabled);"
3281,peekSwipeBack,"	public SwipeBack peekSwipeBack(final long startDelay, final long delay) {
		if (startDelay < 0) {
			throw new IllegalArgumentException(""startDelay must be zero or larger."");
		}
		if (delay < 0) {
			throw new IllegalArgumentException(""delay must be zero or larger"");
		}

		removeCallbacks(mPeekRunnable);
		removeCallbacks(mPeekStartRunnable);"
3282,peekSwipeBack,"	public SwipeBack peekSwipeBack(long delay) {
		peekSwipeBack(DEFAULT_PEEK_START_DELAY, delay);
		return this;
	}"
3283,peekSwipeBack,"	public SwipeBack peekSwipeBack() {
		peekSwipeBack(DEFAULT_PEEK_START_DELAY, DEFAULT_PEEK_DELAY);
		return this;
	}"
3284,getOffsetSwipeBackEnabled,"	public boolean getOffsetSwipeBackEnabled() {
		return mOffsetMenu;
	}"
3285,setOffsetSwipeBackViewEnabled,"	public void setOffsetSwipeBackViewEnabled(boolean offsetMenu) {
		if (offsetMenu != mOffsetMenu) {
			mOffsetMenu = offsetMenu;"
3286,setSize,"	public SwipeBack setSize(final int size) {
		mSwipeBackViewSize = size;
		if (mDrawerState == STATE_OPEN || mDrawerState == STATE_OPENING) {
			setOffsetPixels(mSwipeBackViewSize);
		}
		requestLayout();
		invalidate();"
3287,isVisible,"	public boolean isVisible() {
		return mSwipeBackViewVisible;
	}"
3288,toggle,"	public SwipeBack toggle(boolean animate) {
		if (mDrawerState == STATE_OPEN || mDrawerState == STATE_OPENING) {
			close(animate);
		} else if (mDrawerState == STATE_CLOSED || mDrawerState == STATE_CLOSING) {"
3290,run,"		public void run() {
			postAnimationInvalidate();
		}"
3291,run,"		public void run() {
			peekDrawerInvalidate();
		}"
3294,onSwipeBackCompleted,"	public void onSwipeBackCompleted(SwipeBack swipeBack, Activity activity) {
		activity.finish();
		activity.overridePendingTransition(R.anim.swipeback_stack_to_front,
				R.anim.swipeback_stack_right_out);"
3296,getChangingConfigurations,"        public int getChangingConfigurations() {
            return mChangingConfigurations;
        }"
3297,newDrawable,"        public Drawable newDrawable(Resources res) {
            return new ColorDrawable(this);
        }"
3298,newDrawable,"        public Drawable newDrawable() {
            return new ColorDrawable(this);
        }"
3299,getConstantState,"    public ConstantState getConstantState() {
        mState.mChangingConfigurations = getChangingConfigurations();
        return mState;
    }"
3300,getOpacity,"    public int getOpacity() {
        switch (mState.mUseColor >>> 24) {
            case 255:
                return PixelFormat.OPAQUE;"
3301,setColorFilter,"    public void setColorFilter(ColorFilter colorFilter) {
    }"
3303,getAlpha,"    public int getAlpha() {
        return mState.mUseColor >>> 24;
    }"
3304,setColor,"    public void setColor(int color) {
        if (mState.mBaseColor != color || mState.mUseColor != color) {
            invalidateSelf();"
3305,getColor,"    public int getColor() {
        return mState.mUseColor;
    }"
3306,draw,"    public void draw(Canvas canvas) {
        if ((mState.mUseColor >>> 24) != 0) {
            mPaint.setColor(mState.mUseColor);"
3307,getChangingConfigurations,"    public int getChangingConfigurations() {
        return super.getChangingConfigurations() | mState.mChangingConfigurations;
    }"
3308,run,"                public void run() {
                    if (mAttached) {
                        final int layerType = getLayerType();"
3309,dispatchDraw,"    protected void dispatchDraw(Canvas canvas) {
        super.dispatchDraw(canvas);

        if (mChanged && SwipeBack.USE_TRANSLATIONS) {"
3310,run,"                public void run() {
                    mChanged = true;
                    invalidate();
                }"
3311,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);

        if (SwipeBack.USE_TRANSLATIONS && mHardwareLayersEnabled) {"
3312,onDetachedFromWindow,"    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        mAttached = false;
    }"
3313,onAttachedToWindow,"    protected void onAttachedToWindow() {
        super.onAttachedToWindow();
        mAttached = true;
    }"
3314,setHardwareLayersEnabled,"    void setHardwareLayersEnabled(boolean enabled) {
        mHardwareLayersEnabled = enabled;
    }"
3315,onAnimationUpdate,"            public void onAnimationUpdate(ValueAnimator valueAnimator) {
                lp.height = (Integer) valueAnimator.getAnimatedValue();
                mView.setLayoutParams(lp);
            }"
3318,onAnimationEnd,"                                public void onAnimationEnd(Animator animation) {
                                    performDismiss();
                                }"
3320,onDismiss,"        void onDismiss(View view, Object token);
    }"
3322,onAttachedToRecyclerView,"    public void onAttachedToRecyclerView(RecyclerView recyclerView) {
        super.onAttachedToRecyclerView(recyclerView);
    }"
3323,onClick,"            public void onClick(View v) {
                animationCardUp(cardViewHolder.card, cardViewHolder.toolbar, duration);
            }"
3324,onClick,"            public void onClick(View v) {
                animationCardDown(cardViewHolder.card, cardViewHolder.toolbar, duration);
            }"
3325,onClick,"                    public void onClick(View v) {
                        if (!back) {
                            cardViewHolder.creditCardView.showBack();"
3331,getScreenSize,"    private Point getScreenSize(Context context)
    {
        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        Display display = wm.getDefaultDisplay();
        Point size = new Point();
        display.getSize(size);
        return new Point(size.x, size.y);"
3332,getItemCount,"    public int getItemCount() {
        return optionsView.size();
    }"
3333,onFinish,"            public void onFinish() {
                card.animate()
                        .translationY(height - (card.getHeight() + toolbar.getHeight()))"
3334,onTick,"            public void onTick(long millisUntilFinished) {
            }"
3335,animationCardUp,"    public void animationCardUp(@NotNull final CardView card,  final Toolbar toolbar, final long duration){
        new CountDownTimer(1, 1) {
            public void onTick(long millisUntilFinished) {"
3336,onFinish,"            public void onFinish() {
                card.animate()
                        .translationY(height - ((int)(toolbar.getHeight() * 1.7)))"
3338,animationCardDown,"    public void animationCardDown(@NotNull final CardView card, @NotNull final Toolbar toolbar, final long duration){
        new CountDownTimer(1, 1) {
            public void onTick(long millisUntilFinished) {"
3339,onAnimationEnd,"                            public void onAnimationEnd(Animator animation) {
                                super.onAnimationEnd(animation);
                                card.setVisibility(View.VISIBLE);
                            }"
3340,onFinish,"            public void onFinish() {
                card.animate()
                        .translationY(height - ((int) (toolbar.getHeight() * 1.7)))"
3342,animationCardStart,"    public void animationCardStart(@NotNull final CardView card, @NotNull final Toolbar toolbar){
        new CountDownTimer(1, 1) {
            public void onTick(long millisUntilFinished) {"
3343,getStreetNameFromLatLong,"    public String getStreetNameFromLatLong(double lat, double lon, Context context)
    {
        String streetName = null;
        Geocoder geocoder = new Geocoder(context, Locale.getDefault());

        try {"
3344,setMapLocation,"    public void setMapLocation(OptionView mOptionView)
    {
        if (mGoogleMap != null) {"
3345,setMapLocation,"    public void setMapLocation(double lat, double lon, OptionView mOptionView) {
        mMapLocation = new LatLng(lat, lon);
        if (mGoogleMap != null) {
            updateMapContents(mOptionView);"
3346,updateMapContents,"    protected void updateMapContents(OptionView mOptionView) {
        mGoogleMap.clear();
        if(mOptionView.isMultipleMarker() && !mOptionView.isSingleMarker()) {
            LatLngBounds.Builder builder = new LatLngBounds.Builder();"
3347,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {

        if (!mOptionView.isAutoAnimation()) {"
3348,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent ev) {
        if(!mOptionView.isAutoAnimation()) {
            if (isLocked) {"
3351,setMapLocation,"    public void setMapLocation()
    {
        if (mGoogleMap != null) {"
3352,setMapLocation,"    public void setMapLocation(double lat, double lon) {
        mMapLocation = new LatLng(lat, lon);
        if (mGoogleMap != null) {
            updateMapContents();"
3353,updateMapContents,"    protected void updateMapContents() {
        mGoogleMap.clear();
        if(mOptionView.isMultipleMarker() && !mOptionView.isSingleMarker()) {
            LatLngBounds.Builder builder = new LatLngBounds.Builder();"
3354,onClick,"    public void onClick(View v) {
        animationCardUp(card, toolbar, duration);
    }"
3355,onFinish,"            public void onFinish() {
                card.animate()
                        .translationY(height - (card.getHeight() + toolbar.getHeight()))
                        .setDuration(duration).start();"
3357,animationCardUp,"    public void animationCardUp(@NotNull final CardView card, @NotNull final Toolbar toolbar, final long duration){
        new CountDownTimer(1, 1) {
            public void onTick(long millisUntilFinished) {"
3358,onFinish,"            public void onFinish() {
                card.animate()
                        .translationY(height - ((int)(toolbar.getHeight() * 1.7)))
                        .setDuration(duration).start();"
3361,onFinish,"            public void onFinish() {
                card.setTranslationY(height - ((int)(toolbar.getHeight() * 1.7)));
                fab.setTranslationY((height - ((int) (toolbar.getHeight() * 1.7))) + card.getHeight() - (fab.getHeight() - fab.getHeight() / 4));
            }"
3362,onTick,"            public void onTick(long millisUntilFinished) {
                card.setTranslationY(height - ((int)(toolbar.getHeight() * 1.7)));
                fab.setTranslationY((height - ((int) (toolbar.getHeight() * 1.7))) + card.getHeight() - (fab.getHeight() - fab.getHeight() / 4));
            }"
3363,animationCardStart,"    public void animationCardStart(@NotNull final CardView card, @NotNull final Toolbar toolbar){
        new CountDownTimer(300, 1) {
            public void onTick(long millisUntilFinished) {"
3364,onFinishInflate,"    protected void onFinishInflate() {
        super.onFinishInflate();
    }"
3365,initToolbar,"    private void initToolbar(Context context, OptionView option)
    {
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        toolbar.setTitle(titleAttr);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if(colorTitleAttr == 0)"
3366,getScreenSize,"    private int getScreenSize(Context context)
    {
        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        Display display = wm.getDefaultDisplay();
        Point size = new Point();
        display.getSize(size);
        return size.y;"
3367,onClick,"                                                public void onClick(View v) {
                                                    setVisibility(View.VISIBLE);
                                                }"
3368,onDismiss,"                            public void onDismiss(View view, Object token) {
                                setVisibility(View.GONE);
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
                                    Snackbar.make(SwipeableCard.this, ""Deleted!"", Snackbar.LENGTH_LONG)"
3369,canDismiss,"                            public boolean canDismiss(Object token) {
                                return true;
                            }"
3370,onClick,"                public void onClick(View v) {
                    animationCardDown(card, toolbar, duration);
                }"
3371,onClick,"                        public void onClick(View v) {
                            if (!back) {
                                creditCardView.showBack();"
3372,onClick,"                        public void onClick(View v) {
                            ActivityCardCreation.setCreditCardView(creditCardView, option, newCreditCard, relativeCreditCardCreation, relativeCreditCard);
                            Intent intent = new Intent(option.getActivity(), ActivityCardCreation.class);
                            option.getActivity().startActivityForResult(intent, 1);
                        }"
3373,init,"    public void init(@NotNull final Context context, @NotNull final OptionView option){
        if(option != null)
        {"
3374,getOnClickListenerFab,"    public View.OnClickListener getOnClickListenerFab() {
        return mOnClickListenerFab;
    }"
3375,getFabIcon,"    public int getFabIcon() {
        return mFabIcon;
    }"
3376,getFabBackgroundColor,"    public int getFabBackgroundColor() {
        return mFabBackgroundColor;
    }"
3377,getOnClickListenerIconBtn3,"    public View.OnClickListener getOnClickListenerIconBtn3() {
        return mOnClickListenerIconBtn3;
    }"
3378,getOnClickListenerTextBtn2,"    public View.OnClickListener getOnClickListenerTextBtn2() {
        return mOnClickListenerTextBtn2;
    }"
3379,getOnClickListenerTextBtn1,"    public View.OnClickListener getOnClickListenerTextBtn1() {
        return mOnClickListenerTextBtn1;
    }"
3380,getOnClickListenerIconBtn2,"    public View.OnClickListener getOnClickListenerIconBtn2() {
        return mOnClickListenerIconBtn2;
    }"
3381,getOnClickListenerIconBtn1,"    public View.OnClickListener getOnClickListenerIconBtn1() {
        return mOnClickListenerIconBtn1;
    }"
3382,getTextSizeBtn2,"    public float getTextSizeBtn2() {
        return mTextSizeBtn2;
    }"
3383,getTextSizeBtn1,"    public float getTextSizeBtn1() {
        return mTextSizeBtn1;
    }"
3384,getTextColorBtn2,"    public int getTextColorBtn2() {
        return mTextColorBtn2;
    }"
3385,getTextColorBtn1,"    public int getTextColorBtn1() {
        return mTextColorBtn1;
    }"
3386,getTextBtn2,"    public String getTextBtn2() {
        return mTextBtn2;
    }"
3387,getTextBtn1,"    public String getTextBtn1() {
        return mTextBtn1;
    }"
3388,getIconBtn3,"    public int getIconBtn3() {
        return mIconBtn3;
    }"
3389,getIconBtn2,"    public int getIconBtn2() {
        return mIconBtn2;
    }"
3390,getIconBtn1,"    public int getIconBtn1() {
        return mIconBtn1;
    }"
3391,isTextBtn2,"    public boolean isTextBtn2() {
        return isTextBtn2;
    }"
3392,isTextBtn1,"    public boolean isTextBtn1() {
        return isTextBtn1;
    }"
3393,isIconBtn3,"    public boolean isIconBtn3() {
        return isIconBtn3;
    }"
3394,isIconBtn2,"    public boolean isIconBtn2() {
        return isIconBtn2;
    }"
3395,isIconBtn1,"    public boolean isIconBtn1() {
        return isIconBtn1;
    }"
3396,build,"        public OptionViewAdditional build() {
            return new OptionViewAdditional(this);
        }"
3397,textButton,"        public Builder textButton(@NotNull String... text)
        {
            if(text.length > 2)
            {
                Log.e(""TextColorButton"", ""Impossible to set Text Button value more than 2! Please Check it"");
                throw new IllegalArgumentException(""Impossible to set Text Button value more than 2! Please Check it"");"
3398,iconButton,"        public Builder iconButton(@DrawableRes int... icon)
        {
            if(icon.length > 3)
            {
                Log.e(""TextColorButton"", ""Impossible to set Icon Button value more than 3! Please Check it"");
                throw new IllegalArgumentException(""Impossible to set Icon Button value more than 3! Please Check it"");
            }"
3399,textColorButton,"        public Builder textColorButton(@ColorRes int... color)
        {
            if(color.length > 2)
            {
                Log.e(""TextColorButton"", ""Impossible to set Text Color Button value more than 2! Please Check it"");
                throw new IllegalArgumentException(""Impossible to set Text Color Button value more than 2! Please Check it"");"
3400,textSize,"        public Builder textSize(float... size)
        {
            if(size.length > 2)
            {
                Log.e(""TextSizeButton"", ""Impossible to set Text Size value more than 2! Please Check it"");
                throw new IllegalArgumentException(""Impossible to set Text Size value more than 2! Please Check it"");"
3401,setOnClickListenerIconButton,"        public Builder setOnClickListenerIconButton(@NotNull View.OnClickListener... listeners)
        {
            if(listeners.length > 3)
            {
                Log.e(""ListenerIconButton"", ""Impossible to set Listener Button value more than 3! Please Check it"");
                throw new IllegalArgumentException(""Impossible to set Listener Icon Button value more than 2! Please Check it"");
            }"
3402,setOnClickListenerTextButton,"        public Builder setOnClickListenerTextButton(@NotNull View.OnClickListener... listeners)
        {
            if(listeners.length > 2)
            {
                Log.e(""ListenerTextButton"", ""Impossible to set Listener Button value more than 2! Please Check it"");
                throw new IllegalArgumentException(""Impossible to set Listener Icon Button value more than 2! Please Check it"");"
3403,setFabColor,"        public Builder setFabColor(@ColorRes int color)
        {
            if(color <= 0)
            {"
3404,setFabIcon,"        public Builder setFabIcon(@DrawableRes int icon)
        {
            if(icon <= 0)
            {"
3405,setOnClickListenerFab,"        public Builder setOnClickListenerFab(@NotNull View.OnClickListener listener)
        {
            mOnClickListenerFab = listener;
            return this;"
3406,build,"        public OptionView build() {
            return new OptionView(this);
        }"
3407,toolbarColor,"        public NormalCard toolbarColor(@ColorRes int toolbarColor) {

            if(toolbarColor == 0)
            {"
3408,image,"        public NormalCard image(@DrawableRes int image) {
            mImage = image;
            isImage = true;
            isText = false;
            return this;
        }"
3409,subTitle,"        public NormalCard subTitle(@NotNull String subTitle) {
            mSubTitle = subTitle;
            isSubTitle = true;
            return this;
        }"
3410,text,"        public NormalCard text(@NotNull String text) {
            mText = text;
            isImage = false;
            isText = true;
            return this;
        }"
3411,title,"        public NormalCard title(@NotNull String title) {
            mTitle = title;
            return this;
        }"
3412,menuItem,"        public NormalCard menuItem(@AnyRes int menuItem) {

            if(menuItem == 0)
            {"
3413,colorTitle,"        public NormalCard colorTitle(@ColorRes int colorTitle) {
            mColorTitle = colorTitle;
            return this;
        }"
3414,toolbarListener,"        public NormalCard toolbarListener(@NotNull Toolbar.OnMenuItemClickListener toolbarListener)
        {
            mToolbarListener = toolbarListener;
            return this;"
3415,setDuration,"        public NormalCard setDuration(long durationInMillis)
        {
            if(durationInMillis <= 0)
            {"
3416,setAdditionalItem,"        public NormalCard setAdditionalItem(@NotNull OptionViewAdditional option)
        {
            optionViewAdditional = option;
            return this;"
3417,setCardRadius,"        public NormalCard setCardRadius(float radius)
        {
            if(radius <= 0)
            {"
3418,setSwipeToDismiss,"        public NormalCard setSwipeToDismiss(boolean isSwipe)
        {
            isSwipeLeftRight = isSwipe;
            return this;"
3419,setAutoAnimation,"        public NormalCard setAutoAnimation(boolean autoAnimation)
        {
            this.autoAnimation = autoAnimation;
            return this;"
3421,toolbarColor,"        public MapsCard toolbarColor(@ColorRes int toolbarColor) {

            if(toolbarColor == 0)
            {"
3422,subTitle,"        public MapsCard subTitle(@NotNull String subTitle) {
            mSubTitle = subTitle;
            isSubTitle = true;
            return this;
        }"
3423,title,"        public MapsCard title(@NotNull String title) {
            mTitle = title;
            return this;
        }"
3424,menuItem,"        public MapsCard menuItem(@AnyRes int menuItem) {

            if(menuItem == 0)
            {"
3425,colorTitle,"        public MapsCard colorTitle(@ColorRes int colorTitle) {
            mColorTitle = colorTitle;
            return this;
        }"
3426,toolbarListener,"        public MapsCard toolbarListener(@NotNull Toolbar.OnMenuItemClickListener toolbarListener)
        {
            mToolbarListener = toolbarListener;
            return this;"
3427,setDuration,"        public MapsCard setDuration(long durationInMillis)
        {
            if(durationInMillis <= 0)
            {"
3428,setAdditionalItem,"        public MapsCard setAdditionalItem(@NotNull OptionViewAdditional option)
        {
            optionViewAdditional = option;
            return this;"
3429,setCardRadius,"        public MapsCard setCardRadius(float radius)
        {
            if(radius <= 0)
            {"
3430,setSwipeToDismiss,"        public MapsCard setSwipeToDismiss(boolean isSwipe)
        {
            isSwipeLeftRight = isSwipe;
            return this;"
3431,withStreetName,"        public MapsCard withStreetName(boolean isStreetName)
        {
            this.isStreetName = isStreetName;
            return this;"
3432,setZoom,"        public MapsCard setZoom(float zoom)
        {
            mZoom = zoom;
            return this;"
3433,setLocation,"        public MapsCard setLocation(double lat, double lon, @NotNull String title, @DrawableRes int icon)
        {
            singleMarker = true;
            multipleMarker = false;
            latitude = lat;
            longitude = lon;
            markerTitle = title;
            markerIcon = icon;
            return this;"
3434,setLocation,"        public MapsCard setLocation(double lat, double lon,  @DrawableRes int icon)
        {
            singleMarker = true;
            multipleMarker = false;
            latitude = lat;
            longitude = lon;
            markerIcon = icon;
            return this;"
3435,setLocation,"        public MapsCard setLocation(double lat, double lon, @NotNull String title)
        {
            singleMarker = true;
            multipleMarker = false;
            latitude = lat;
            longitude = lon;
            markerTitle = title;
            return this;"
3436,setLocation,"        public MapsCard setLocation(double lat, double lon)
        {
            singleMarker = true;
            multipleMarker = false;
            latitude = lat;
            longitude = lon;
            return this;"
3437,setLocation,"        public MapsCard setLocation(LatLng[] latLngs, @DrawableRes int ... icon)
        {
            multipleMarker = true;
            singleMarker = false;
            latLngArray = latLngs;
            markerIconArray = icon;
            return this;"
3438,setLocation,"        public MapsCard setLocation(LatLng ... latLngs)
        {
            multipleMarker = true;
            singleMarker = false;
            latLngArray = latLngs;
            return this;"
3439,setLocation,"        public MapsCard setLocation(LatLng[] latLngs, @NotNull String[] titles, @DrawableRes int ... icon)
        {
            multipleMarker = true;
            singleMarker = false;
            latLngArray = latLngs;
            markerTitleArray = titles;
            markerIconArray = icon;
            return this;"
3440,setLocation,"        public MapsCard setLocation(LatLng[] latLngs, @NotNull String ... titles)
        {
            multipleMarker = true;
            singleMarker = false;
            latLngArray = latLngs;
            markerTitleArray = titles;
            return this;"
3441,setLocation,"        public MapsCard setLocation(List<LatLng> latLngs, List<String> titles, List<Integer> icon)
        {
            multipleMarker = true;
            singleMarker = false;
            latLngList = latLngs;
            markerTitleList = titles;
            markerIconList = icon;
            return this;"
3442,setLocation,"        public MapsCard setLocation(List<LatLng> latLngs, List<String> titles)
        {
            multipleMarker = true;
            singleMarker = false;
            latLngList = new ArrayList<>(latLngs);
            markerTitleList = new ArrayList<>(titles);
            return this;"
3443,setAutoAnimation,"        public MapsCard setAutoAnimation(boolean autoAnimation)
        {
         this.autoAnimation = autoAnimation;
         return this;"
3445,toolbarColor,"        public CreditCard toolbarColor(@ColorRes int toolbarColor) {

            if(toolbarColor == 0)
            {"
3446,subTitle,"        public CreditCard subTitle(@NotNull String subTitle) {
            mSubTitle = subTitle;
            isSubTitle = true;
            return this;
        }"
3447,title,"        public CreditCard title(@NotNull String title) {
            mTitle = title;
            return this;
        }"
3448,menuItem,"        public CreditCard menuItem(@AnyRes int menuItem) {

            if(menuItem == 0)
            {"
3449,colorTitle,"        public CreditCard colorTitle(@ColorRes int colorTitle) {
            mColorTitle = colorTitle;
            return this;
        }"
3450,toolbarListener,"        public CreditCard toolbarListener(@NotNull Toolbar.OnMenuItemClickListener toolbarListener)
        {
            mToolbarListener = toolbarListener;
            return this;"
3451,setDuration,"        public CreditCard setDuration(long durationInMillis)
        {
            if(durationInMillis <= 0)
            {"
3452,setAdditionalItem,"        public CreditCard setAdditionalItem(@NotNull OptionViewAdditional option)
        {
            optionViewAdditional = option;
            return this;"
3453,setCardRadius,"        public CreditCard setCardRadius(float radius)
        {
            if(radius <= 0)
            {"
3454,setSwipeToDismiss,"        public CreditCard setSwipeToDismiss(boolean isSwipe)
        {
            isSwipeLeftRight = isSwipe;
            return this;"
3455,setAutoAnimation,"        public CreditCard setAutoAnimation(boolean autoAnimation)
        {
            this.autoAnimation = autoAnimation;
            return this;"
3456,setCardNumber,"        public CreditCard setCardNumber(@Nullable String cardNumber)
        {
            this.rawCardNumber = cardNumber;
            return this;"
3457,setCardHolderName,"        public CreditCard setCardHolderName(@Nullable String cardHolderName)
        {
            this.cardHolderName = cardHolderName;
            return this;"
3458,setCardExpiry,"        public CreditCard setCardExpiry(@Nullable String dateYear)
        {
            this.dateYear = dateYear;
            return this;"
3459,setCVV,"        public CreditCard setCVV(String cvv)
        {
            this.cvv = cvv;
            return this;"
3460,setCVV,"        public CreditCard setCVV(int cvv)
        {
            intCvv = cvv;
            return this;"
3461,setCardCreation,"        public CreditCard setCardCreation(AppCompatActivity activity)
        {
            this.activity = activity;
            createCard = true;
            return this;"
3462,getActivity,"    public AppCompatActivity getActivity() {
        return activity;
    }"
3463,isCreateCreditCard,"    public boolean isCreateCreditCard() {
        return createCreditCard;
    }"
3464,getRawCardNumber,"    public String getRawCardNumber() {
        return rawCardNumber;
    }"
3465,getCardHolderName,"    public String getCardHolderName() {
        return cardHolderName;
    }"
3466,getDateYear,"    public String getDateYear() {
        return dateYear;
    }"
3467,getCvv,"    public String getCvv() {
        return cvv;
    }"
3468,getIntCvv,"    public int getIntCvv() {
        return intCvv;
    }"
3469,isAutoAnimation,"    public boolean isAutoAnimation() {
        return autoAnimation;
    }"
3470,getMapsZoom,"    public float getMapsZoom() {
        return mapsZoom;
    }"
3471,getMarkerIconList,"    public List<Integer> getMarkerIconList() {
        return markerIconList;
    }"
3472,getMarkerIconArray,"    public int[] getMarkerIconArray() {
        return markerIconArray;
    }"
3473,getMarkerIcon,"    public int getMarkerIcon() {
        return markerIcon;
    }"
3474,getMarkerTitleList,"    public List<String> getMarkerTitleList() {
        return markerTitleList;
    }"
3475,getLatLngList,"    public List<LatLng> getLatLngList() {
        return latLngList;
    }"
3476,getMarkerTitleArray,"    public String[] getMarkerTitleArray() {
        return markerTitleArray;
    }"
3477,isSingleMarker,"    public boolean isSingleMarker() {
        return singleMarker;
    }"
3478,isMultipleMarker,"    public boolean isMultipleMarker() {
        return multipleMarker;
    }"
3479,isStreetName,"    public boolean isStreetName() {
        return isStreetName;
    }"
3480,getMarkerTitle,"    public String getMarkerTitle() {
        return markerTitle;
    }"
3481,getLatLngArray,"    public LatLng[] getLatLngArray() {
        return latLngArray;
    }"
3482,isTypeCardCredit,"    public boolean isTypeCardCredit() {
        return TYPE_CARD_CREDIT;
    }"
3483,isTypeCardMaps,"    public boolean isTypeCardMaps() {
        return TYPE_CARD_MAPS;
    }"
3484,isTypeCardNormal,"    public boolean isTypeCardNormal() {
        return TYPE_CARD_NORMAL;
    }"
3485,getLongitude,"    public double getLongitude() {
        return longitude;
    }"
3486,getLatitude,"    public double getLatitude() {
        return latitude;
    }"
3487,isSubTitle,"    public boolean isSubTitle()
    {
        return isSubTitle;"
3488,isText,"    public boolean isText()
    {
        return isText;"
3489,isImage,"    public boolean isImage()
    {
        return isImage;"
3490,isMenuItem,"    public boolean isMenuItem()
    {
        return isMenuItem;"
3491,isSwipeToDismiss,"    public boolean isSwipeToDismiss()
    {
        return isSwipeLeftRight;"
3492,getOptionViewAdditional,"    public OptionViewAdditional getOptionViewAdditional() {
        return optionViewAdditional;
    }"
3493,getCardRadius,"    public float getCardRadius() {
        return mCardRadius;
    }"
3494,getDuration,"    public long getDuration()
    {
        return mDuration;"
3495,getOptionView,"    public static OptionView getOptionView()
    {
        return optionView;"
3496,setOptionView,"    public static void setOptionView(@NotNull OptionView optionViews)
    {
        optionView = optionViews;"
3497,getColorTitle,"    public int getColorTitle()
    {
        return mColorTitle;"
3498,getMenuItem,"    public int getMenuItem()
    {
        return mMenuItem;"
3499,getTitle,"    public String getTitle() {
        return mTitle;
    }"
3500,getImage,"    public int getImage() {
        return mImage;
    }"
3501,getText,"    public String getText() {
        return mText;
    }"
3502,getSubTitle,"    public String getSubTitle() {
        return mSubTitle;
    }"
3503,getColorToolbar,"    public int getColorToolbar() {
        return mToolbarColor;
    }"
3504,getToolbarListener,"    public Toolbar.OnMenuItemClickListener getToolbarListener() {
        return mToolbarListener;
    }"
3505,creditCard,"        public CreditCard creditCard() {
            return new CreditCard();
        }"
3506,mapsCard,"        public MapsCard mapsCard()
        {
            return new MapsCard();"
3507,normalCard,"        public NormalCard normalCard()
        {
            return new NormalCard();"
3509,onFinish,"                    public void onFinish() {
                        mCardView.animate()
                                .translationY(height - (mCardView.getHeight() + mStartCardPosition))"
3511,animationCustomCardUp,"    public void animationCustomCardUp()
    {
        final int height = getScreenSize(mContext);
        new CountDownTimer(1, 1) {"
3512,onFinish,"                    public void onFinish() {
                        mCardView.animate()
                                .translationY(height - ((int) (mStartCardPosition * 1.7)))"
3513,onTick,"                    public void onTick(long millisUntilFinished) {
                    }"
3514,animationCustomCardDown,"    public void animationCustomCardDown()
    {
        final int height = getScreenSize(mContext);
                new CountDownTimer(1, 1) {"
3515,onFinish,"            public void onFinish() {
                mCardView.setTranslationY(height - ((int)(mStartCardPosition * 1.7)));
            }"
3516,onTick,"            public void onTick(long millisUntilFinished) {
                mCardView.setTranslationY(height - ((int)(mStartCardPosition * 1.7)));
            }"
3517,animationCustomCardStart,"    private void animationCustomCardStart()
    {
        final int height = getScreenSize(mContext);
        new CountDownTimer(300, 1) {"
3518,setAutoAnimation,"    Card setAutoAnimation(boolean autoAnimation);
}"
3520,setAdditionalItem,"    Card setAdditionalItem(@NotNull OptionViewAdditional option);
"
3522,toolbarListener,"    Card toolbarListener(@NotNull Toolbar.OnMenuItemClickListener toolbarListener);
"
3523,colorTitle,"    Card colorTitle(@ColorRes int colorTitle);
"
3528,toolbarColor,"    Card toolbarColor(@ColorRes int toolbarColor);
"
3530,animationCardUp,"    void animationCardUp(final CardView card, final Toolbar toolbar, long duration);
}"
3531,animationCardDown,"    void animationCardDown(final CardView card, final Toolbar toolbar, long duration);
"
3532,animationCardStart,"    void animationCardStart(final CardView card, final Toolbar toolbar);
"
3533,onBackPressed,"    public void onBackPressed() {
        this.finish();
    }"
3534,onClick,"                public void onClick(View v) {
                    if (!back) {
                        creditCardView.showBack();"
3535,onActivityResult,"    public void onActivityResult(int reqCode, int resultCode, Intent data) {

        if(resultCode == RESULT_OK) {"
3536,onCreate,"    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        Intent intent = new Intent(ActivityCardCreation.this, CardEditActivity.class);
        startActivityForResult(intent, 1);"
3537,setCreditCardView,"    public static void setCreditCardView(CreditCardView creditCard, OptionView optionView, Button newCreditCardLayout,
                                         RelativeLayout relativeCreditCardCreationLayout, RelativeLayout relativeCreditCardLayout)
    {
        newCreditCard = newCreditCardLayout;
        relativeCreditCardCreation = relativeCreditCardCreationLayout;
        relativeCreditCard = relativeCreditCardLayout;"
3538,endElement,"		public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
			if (localName.equals(""svg"")) {
				if (canvasRestoreCount != null) {"
3539,characters,"		public void characters(char ch[], int start, int length) {
			if (this.drawCharacters) {
				if (length == 1 && ch[0] == '\n') {"
3540,currentLayerAttributes,"		public LayerAttributes currentLayerAttributes() {
			return layerAttributeStack.getLast();
		}"
3542,popTransform,"		private void popTransform() {
			if (transformStack.removeLast()) {
				canvas.restore();"
3543,pushTransform,"		private void pushTransform(Attributes atts) {
			final String transform = getStringAttr(""transform"", atts);
			boolean pushed = transform != null;
			transformStack.addLast(pushed);
			if (pushed) {
				final Matrix matrix = parseTransform(transform);"
3544,doLimits,"		private void doLimits(RectF box) {
			doLimits(box, null);
		}"
3545,doLimits,"		private void doLimits(RectF box, Paint paint) {
			Matrix m = matrixStack.getLast();
			m.mapRect(tmpLimitRect, box);
			float width2 = (paint == null) ? 0 : paint.getStrokeWidth() / 2;
			doLimits2(tmpLimitRect.left - width2, tmpLimitRect.top - width2);
			doLimits2(tmpLimitRect.right + width2, tmpLimitRect.bottom + width2);
		}"
3546,doLimits2,"		private void doLimits2(float x, float y) {
			if (x < limits.left) {
				limits.left = x;
			}
			if (x > limits.right) {
				limits.right = x;"
3547,toFloat,"		private static float toFloat(String s, float dflt) {
			float result = dflt;
			try {
				result = Float.parseFloat(s);
			} catch (NumberFormatException e) {"
3548,pathStyleHelper,"		private void pathStyleHelper(String style, String offset) {
			if (style == null) {
				return;
			}

			if (style.equals(""none"")) {
				strokePaint.setPathEffect(null);
				return;
			}

			StringTokenizer st = new StringTokenizer(style, "" ,"");
			int count = st.countTokens();
			float[] intervals = new float[(count & 1) == 1 ? count * 2 : count];
			float max = 0;
			float current = 1f;"
3549,doColor,"        private void doColor(Properties atts, Integer color, boolean fillMode, Paint paint) {
			int c = (0xFFFFFF & color) | 0xFF000000;
			if (searchColor != null && searchColor.intValue() == c) {
				c = replaceColor;
			}
			paint.setShader(null);
			paint.setColor(c);
			Float opacityAttr = atts.getFloat(""opacity"");
			if (opacityAttr == null) {
				opacityAttr = atts.getFloat(fillMode ? ""fill-opacity"" : ""stroke-opacity"");
			}
"
3550,finishGradients,"        private void finishGradients() {
        	for(Gradient gradient : gradientMap.values()) {
                if (gradient.xlink != null) {"
3553,doFill,"		private boolean doFill(Properties atts, RectF bounding_box) {
			if (""none"".equals(atts.getString(""display""))) {
				return false;
			}
			if (whiteMode) {
				fillPaint.setShader(null);
				fillPaint.setColor(Color.WHITE);"
3556,setWhiteMode,"		public void setWhiteMode(boolean whiteMode) {
			this.whiteMode = whiteMode;
		}"
3557,setColorSwap,"		public void setColorSwap(Integer searchColor, Integer replaceColor, boolean overideOpacity) {
			this.searchColor = searchColor;
			this.replaceColor = replaceColor;
			if (replaceColor != null && overideOpacity) {
				opacityMultiplier = ((replaceColor >> 24) & 0x000000FF) / 255f;"
3558,setPicture,"		void setPicture(Picture picture) {
			this.picture = picture;
		}"
3559,getFloat,"		public Float getFloat(String name) {
			return getFloat(name, null);
		}"
3560,getFloat,"		public Float getFloat(String name, Float defaultValue) {
			String v = getAttr(name);
			if (v == null) {
				return defaultValue;"
3561,getFloat,"		public float getFloat(String name, float defaultValue) {
			String v = getAttr(name);
			if (v == null) {
				return defaultValue;"
3562,hex3Tohex6,"		private int hex3Tohex6(int x) {
			return (x & 0xF00) << 8 | (x & 0xF00) << 12 | (x & 0xF0) << 4 | (x & 0xF0) << 8 | (x & 0xF) << 4
					| (x & 0xF);"
3563,getColor,"		public Integer getColor(String name) {
            String v = name;
			if (v == null) {
				return null;"
3564,parseNum,"		private int parseNum(String v) throws NumberFormatException {
			if (v.endsWith(""%"")) {
				v = v.substring(0, v.length() - 1);
				return Math.round(Float.parseFloat(v) / 100 * 255);"
3565,rgb,"		private Integer rgb(int r, int g, int b) {
			return ((r & 0xff) << 16) | ((g & 0xff) << 8) | (b & 0xff);
		}"
3566,getString,"		public String getString(String name) {
			return getAttr(name);
		}"
3567,getAttr,"		public String getAttr(String name) {
			String v = null;
			if (styles != null) {
				v = styles.getStyle(name);
			}
			if (v == null) {"
3568,getStyle,"		public String getStyle(String name) {
			return styleMap.get(name);
		}"
3569,inherit,"        public void inherit(Gradient parent) {
            Gradient child = this;
            child.xlink = parent.id;
            child.positions = parent.positions;
            child.colors = parent.colors;
            if (child.matrix == null) {
                child.matrix = parent.matrix;"
3570,getNumber,"		public float getNumber(int index) {
			return numbers.get(index);
		}"
3571,getNextCmd,"		public int getNextCmd() {
			return nextCmd;
		}"
3572,parseFloatValue,"	private static Float parseFloatValue(String str, Float defaultValue) {
		if (str == null) {
			return defaultValue;
		} else if (str.endsWith(""px"")) {"
3573,getFloatAttr,"	private static float getFloatAttr(String name, Attributes attributes, float defaultValue) {
		String v = getStringAttr(name, attributes);
		return parseFloatValue(v, defaultValue);
	}"
3574,getFloatAttr,"	private static Float getFloatAttr(String name, Attributes attributes, Float defaultValue) {
		String v = getStringAttr(name, attributes);
		return parseFloatValue(v, defaultValue);
	}"
3575,getFloatAttr,"	private static Float getFloatAttr(String name, Attributes attributes) {
		return getFloatAttr(name, attributes, null);
	}"
3576,getStringAttr,"	private static String getStringAttr(String name, Attributes attributes) {
		int n = attributes.getLength();
		for (int i = 0; i < n; i++) {
			if (attributes.getLocalName(i).equals(name)) {
				return attributes.getValue(i);"
3577,getNumberParseAttr,"	private static NumberParse getNumberParseAttr(String name, Attributes attributes) {
		int n = attributes.getLength();
		for (int i = 0; i < n; i++) {
			if (attributes.getLocalName(i).equals(name)) {
				return parseNumbers(attributes.getValue(i));"
3579,angle,"	private static float angle(float x1, float y1, float x2, float y2) {

		return (float) Math.toDegrees(Math.atan2(x1, y1) - Math.atan2(x2, y2)) % 360;"
3580,doPath,"	private static Path doPath(String s) {
		int n = s.length();
		ParserHelper ph = new ParserHelper(s, 0);
		ph.skipWhitespace();
		Path p = new Path();
		float lastX = 0;
		float lastY = 0;
		float lastX1 = 0;
		float lastY1 = 0;
		float subPathStartX = 0;
		float subPathStartY = 0;
		char prevCmd = 0;
		while (ph.pos < n) {
			char cmd = s.charAt(ph.pos);
			switch (cmd) {"
3581,parseTransformItem,"	private static Matrix parseTransformItem(String s, Matrix matrix) {
		if (s.startsWith(""matrix("")) {
			NumberParse np = parseNumbers(s.substring(""matrix("".length()));
			if (np.numbers.size() == 6) {"
3584,parse,"	static SVG parse(InputSource data, SVGHandler handler) throws SVGParseException {
		try {
			final Picture picture = new Picture();"
3585,parsePath,"	public static Path parsePath(String pathString) {
		return doPath(pathString);
	}"
3586,getChangingConfigurations,"		public int getChangingConfigurations() {

			return mChangingConfigurations;"
3587,newDrawable,"		public Drawable newDrawable() {

			return new SVGDrawable(mSvg);"
3588,getConstantState,"	public ConstantState getConstantState() {

		mSvgState.mChangingConfigurations = super.getChangingConfigurations();
"
3589,getChangingConfigurations,"	public int getChangingConfigurations() {

		int c = super.getChangingConfigurations() | mSvgState.mChangingConfigurations;

		Log.e(TAG, ""CC = "" + c);"
3590,draw,"	public void draw(Canvas canvas) {

		if (getPicture() != null) {"
3591,onBoundsChange,"	protected void onBoundsChange(Rect bounds) {

		super.onBoundsChange(bounds);"
3592,mapColour,"	public static Integer mapColour(String colour) {
		return COLOURS.get(colour);
	}"
3593,build,"	public SVG build() throws SVGParseException {
		if (data == null) {
			throw new IllegalStateException(""SVG input not specified. Call one of the readFrom...() methods first."");
		}"
3594,setCloseInputStreamWhenDone,"	public SVGBuilder setCloseInputStreamWhenDone(boolean closeInputStream) {
		this.closeInputStream = closeInputStream;
		return this;
	}"
3595,setFillColorFilter,"	public SVGBuilder setFillColorFilter(ColorFilter colorFilter) {
		this.fillColorFilter = colorFilter;
		return this;
	}"
3596,setStrokeColorFilter,"	public SVGBuilder setStrokeColorFilter(ColorFilter colorFilter) {
		this.strokeColorFilter = colorFilter;
		return this;
	}"
3597,setColorFilter,"	public SVGBuilder setColorFilter(ColorFilter colorFilter) {
		this.strokeColorFilter = this.fillColorFilter = colorFilter;
		return this;
	}"
3598,setWhiteMode,"	public SVGBuilder setWhiteMode(boolean whiteMode) {
		this.whiteMode = whiteMode;
		return this;
	}"
3599,setColorSwap,"	public SVGBuilder setColorSwap(int searchColor, int replaceColor, boolean overideOpacity) {
		this.searchColor = searchColor;
		this.replaceColor = replaceColor;
		this.overideOpacity = overideOpacity;
		return this;
	}"
3600,setColorSwap,"	public SVGBuilder setColorSwap(int searchColor, int replaceColor) {
		return setColorSwap(searchColor, replaceColor, false);
	}"
3601,clearColorSwap,"	public SVGBuilder clearColorSwap() {
		searchColor = replaceColor = null;
		return this;
	}"
3602,readFromAsset,"	public SVGBuilder readFromAsset(AssetManager assetMngr, String svgPath) throws IOException {
		this.data = assetMngr.open(svgPath);
		return this;
	}"
3603,readFromResource,"	public SVGBuilder readFromResource(Resources resources, int resId) {
		this.data = resources.openRawResource(resId);
		return this;
	}"
3604,readFromString,"	public SVGBuilder readFromString(String svgData) {
		this.data = new ByteArrayInputStream(svgData.getBytes());
		return this;
	}"
3605,readFromInputStream,"	public SVGBuilder readFromInputStream(InputStream svgData) {
		this.data = svgData;
		return this;
	}"
3606,getLimits,"	public RectF getLimits() {
		return limits;
	}"
3607,getBounds,"	public RectF getBounds() {
		return bounds;
	}"
3608,getPicture,"	public Picture getPicture() {
		return picture;
	}"
3609,getDrawable,"	public PictureDrawable getDrawable() {
		if (drawable == null) {
			drawable = new PictureDrawable(picture);
		}"
3610,setLimits,"	void setLimits(RectF limits) {
		this.limits = limits;
	}"
3611,nextFlag,"	public int nextFlag() {
		skipWhitespace();
		int flag = current - '0';
		current = read();
		skipNumberSeparator();
		return flag;
	}"
3612,nextFloat,"	public float nextFloat() {
		skipWhitespace();
		float f = parseFloat();
		skipNumberSeparator();
		return f;
	}"
3613,buildFloat,"	public static float buildFloat(int mant, int exp) {
		if (exp < -125 || mant == 0) {
			return 0.0f;
		}

		if (exp >= 128) {
			return (mant > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;"
3614,reportUnexpectedCharacterError,"	private void reportUnexpectedCharacterError(char c) {
		throw new RuntimeException(""Unexpected char '"" + c + ""'."");
	}"
3616,advance,"	public void advance() {
		current = read();
	}"
3617,skipNumberSeparator,"	public void skipNumberSeparator() {
		while (pos < n) {
			char c = s[pos];"
3618,skipWhitespace,"	public void skipWhitespace() {
		while (pos < n) {
			if (Character.isWhitespace(s[pos])) {"
3619,read,"	private char read() {
		if (pos < n) {
			pos++;
		}"
3620,postEvent,"    public boolean postEvent(Event event) {

        if (eventQueue == null)

            return false;"
3621,removeEventQueue,"    public void removeEventQueue() {

        eventQueue = null;"
3622,setEventQueue,"    public void setEventQueue(EventQueue queue) {

        if (this.eventQueue != null)
"
3623,getEventQueue,"    public EventQueue getEventQueue() {

        return eventQueue;"
3625,unshift,"    private synchronized Event unshift() {

        

        if (bufferLength == 0)

            return null;"
3626,poll,"    public Event poll() {

        

        Event event;"
3629,getDate,"    public Date getDate() {

        return date;"
3630,getSource,"    public Object getSource() {

        return source;"
3631,getType,"    public int getType() {

        return type;"
3632,stop,"    public void stop() {

        runs = true;"
3633,runs,"    public boolean runs() {

        return runs;"
3634,run,"    public void run() {

        while (runs) {"
3635,start,"    public void start() {

        runs = true;
"
3636,countListeners,"    public int countListeners() {

        return listeners.size();"
3637,removeListener,"    public void removeListener(EventListener listener) {

        listeners.remove(listener);"
3638,addListener,"    public void addListener(EventListener listener) {

        listeners.add(listener);"
3642,main,"  public static void main(String[] args) throws Exception {

    TopologyBuilder builder = new TopologyBuilder();

    builder.setSpout(""spout"", new RandomSentenceSpout(), 5);

    builder.setBolt(""split"", new SplitSentence(), 8).shuffleGrouping(""spout"");
    builder.setBolt(""count"", new WordCount(), 12).fieldsGrouping(""split"", new Fields(""word""));
"
3643,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""word"", ""count""));
    }"
3644,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      String word = tuple.getString(0);
      Integer count = counts.get(word);
      if (count == null)
        count = 0;
      count++;
      counts.put(word, count);
      collector.emit(new Values(word, count));"
3645,getComponentConfiguration,"    public Map<String, Object> getComponentConfiguration() {
      return null;
    }"
3646,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""word""));
    }"
3648,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""bucket"", ""count""));
    }"
3649,finishBatch,"    public void finishBatch() {
      for (Integer bucket : _accum.keySet()) {
        BucketValue currVal = BUCKET_DATABASE.get(bucket);"
3650,execute,"    public void execute(Tuple tuple) {
      Integer bucket = tuple.getInteger(1);
      Integer delta = tuple.getInteger(2);
      Integer curr = _accum.get(bucket);
      if (curr == null)
        curr = 0;
      _accum.put(bucket, curr + delta);"
3651,prepare,"    public void prepare(Map conf, TopologyContext context, BatchOutputCollector collector, TransactionAttempt attempt) {
      _collector = collector;
      _attempt = attempt;
    }"
3652,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""attempt"", ""bucket"", ""delta""));
    }"
3653,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      TransactionAttempt attempt = (TransactionAttempt) tuple.getValue(0);
      int curr = tuple.getInteger(2);
      Integer prev = tuple.getInteger(3);

      int currBucket = curr / BUCKET_SIZE;
      Integer prevBucket = null;
      if (prev != null) {
        prevBucket = prev / BUCKET_SIZE;"
3654,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""key"", ""count"", ""prev-count""));
    }"
3655,finishBatch,"    public void finishBatch() {
      for (String key : _counts.keySet()) {
        CountValue val = COUNT_DATABASE.get(key);"
3656,execute,"    public void execute(Tuple tuple) {
      String key = tuple.getString(1);
      Integer curr = _counts.get(key);
      if (curr == null)
        curr = 0;
      _counts.put(key, curr + 1);"
3657,prepare,"    public void prepare(Map conf, TopologyContext context, BatchOutputCollector collector, TransactionAttempt id) {
      _collector = collector;
      _id = id;
    }"
3659,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""sum""));
    }"
3660,finishBatch,"    public void finishBatch() {
      Value val = DATABASE.get(GLOBAL_COUNT_KEY);
      Value newval;
      if (val == null || !val.txid.equals(_attempt.getTransactionId())) {
        newval = new Value();
        newval.txid = _attempt.getTransactionId();"
3661,execute,"    public void execute(Tuple tuple) {
      _sum += tuple.getInteger(1);
    }"
3663,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""count""));
    }"
3664,finishBatch,"    public void finishBatch() {
      _collector.emit(new Values(_id, _count));
    }"
3665,execute,"    public void execute(Tuple tuple) {
      _count++;
    }"
3666,prepare,"    public void prepare(Map conf, TopologyContext context, BatchOutputCollector collector, Object id) {
      _collector = collector;
      _id = id;
    }"
3668,updateRankingsWithTuple,"  void updateRankingsWithTuple(Tuple tuple) {
    Rankings rankingsToBeMerged = (Rankings) tuple.getValue(0);
    super.getRankings().updateWith(rankingsToBeMerged);
    super.getRankings().pruneZeroCounts();
  }"
3674,incrementCountData,"  public Object[][] incrementCountData() {
    return new Object[][]{ { new String[]{ ""foo"", ""bar"" }, new int[]{ 3, 2 } } };
  }"
3677,positiveNumSlotsShouldBeOk,"  public void positiveNumSlotsShouldBeOk(int numSlots) {
    new SlotBasedCounter<Object>(numSlots);
  }"
3678,legalNumSlotsData,"  public Object[][] legalNumSlotsData() {
    return new Object[][]{ { 1 }, { 2 }, { 3 }, { 20 } };
  }"
3679,negativeOrZeroNumSlotsShouldThrowIAE,"  public void negativeOrZeroNumSlotsShouldThrowIAE(int numSlots) {
    new SlotBasedCounter<Object>(numSlots);
  }"
3680,illegalNumSlotsData,"  public Object[][] illegalNumSlotsData() {
    return new Object[][]{ { -10 }, { -3 }, { -2 }, { -1 }, { 0 } };
  }"
3681,wipeZeros,"  public void wipeZeros() {
    Set<T> objToBeRemoved = new HashSet<T>();
    for (T obj : objToCounts.keySet()) {
      if (shouldBeRemovedFromCounter(obj)) {
        objToBeRemoved.add(obj);"
3682,shouldBeRemovedFromCounter,"  private boolean shouldBeRemovedFromCounter(T obj) {
    return computeTotalCount(obj) == 0;
  }"
3683,resetSlotCountToZero,"  private void resetSlotCountToZero(T obj, int slot) {
    long[] counts = objToCounts.get(obj);
    counts[slot] = 0;
  }"
3684,wipeSlot,"  public void wipeSlot(int slot) {
    for (T obj : objToCounts.keySet()) {
      resetSlotCountToZero(obj, slot);"
3685,computeTotalCount,"  private long computeTotalCount(T obj) {
    long[] curr = objToCounts.get(obj);
    long total = 0;
    for (long l : curr) {
      total += l;
    }"
3686,getCounts,"  public Map<T, Long> getCounts() {
    Map<T, Long> result = new HashMap<T, Long>();
    for (T obj : objToCounts.keySet()) {
      result.put(obj, computeTotalCount(obj));
    }"
3687,getCount,"  public long getCount(T obj, int slot) {
    long[] counts = objToCounts.get(obj);
    if (counts == null) {
      return 0;"
3688,incrementCount,"  public void incrementCount(T obj, int slot) {
    long[] counts = objToCounts.get(obj);
    if (counts == null) {
      counts = new long[this.numSlots];
      objToCounts.put(obj, counts);"
3690,simulatedCounterIterations,"  public Object[][] simulatedCounterIterations() {
    return new Object[][]{ { 2, new int[]{ 3, 2, 0, 0, 1, 0, 0, 0 }, new long[]{ 3, 5, 2, 0, 1, 1, 0, 0 } },
        { 3, new int[]{ 3, 2, 0, 0, 1, 0, 0, 0 }, new long[]{ 3, 5, 5, 2, 1, 1, 1, 0 } },"
3692,twoOrMoreSlotsShouldBeValid,"  public void twoOrMoreSlotsShouldBeValid(int windowLengthInSlots) {
    new SlidingWindowCounter<Object>(windowLengthInSlots);
  }"
3693,legalWindowLengths,"  public Object[][] legalWindowLengths() {
    return new Object[][]{ { 2 }, { 3 }, { 20 } };
  }"
3694,lessThanTwoSlotsShouldThrowIAE,"  public void lessThanTwoSlotsShouldThrowIAE(int windowLengthInSlots) {
    new SlidingWindowCounter<Object>(windowLengthInSlots);
  }"
3695,illegalWindowLengths,"  public Object[][] illegalWindowLengths() {
    return new Object[][]{ { -10 }, { -3 }, { -2 }, { -1 }, { 0 }, { 1 } };
  }"
3696,slotAfter,"  private int slotAfter(int slot) {
    return (slot + 1) % windowLengthInSlots;
  }"
3697,advanceHead,"  private void advanceHead() {
    headSlot = tailSlot;
    tailSlot = slotAfter(tailSlot);
  }"
3698,getCountsThenAdvanceWindow,"  public Map<T, Long> getCountsThenAdvanceWindow() {
    Map<T, Long> counts = objCounter.getCounts();
    objCounter.wipeZeros();
    objCounter.wipeSlot(tailSlot);
    advanceHead();
    return counts;
  }"
3699,incrementCount,"  public void incrementCount(T obj) {
    objCounter.incrementCount(obj, headSlot);
  }"
3701,expire,"    public void expire(List<Object> id, Map<GlobalStreamId, Tuple> tuples) {
      for (Tuple tuple : tuples.values()) {
        _collector.fail(tuple);"
3702,declareOutputFields,"  public void declareOutputFields(OutputFieldsDeclarer declarer) {
    declarer.declare(_outFields);
  }"
3705,main,"  public static void main(String[] args) throws Exception {
    new RollingTopWords().run();
  }"
3706,run,"  public void run() throws InterruptedException {
    StormRunner.runTopologyLocally(builder.createTopology(), topologyName, topologyConfig, runtimeInSeconds);
  }"
3708,createTopologyConfiguration,"  private static Config createTopologyConfiguration() {
    Config conf = new Config();
    conf.setDebug(true);
    return conf;
  }"
3709,getComponentConfiguration,"  public Map<String, Object> getComponentConfiguration() {
    Map<String, Object> conf = new HashMap<String, Object>();
    conf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, emitFrequencyInSeconds);
    return conf;
  }"
3710,declareOutputFields,"  public void declareOutputFields(OutputFieldsDeclarer declarer) {
    declarer.declare(new Fields(""obj"", ""count"", ""actualWindowLengthInSeconds""));
  }"
3711,countObjAndAck,"  private void countObjAndAck(Tuple tuple) {
    Object obj = tuple.getValue(0);
    counter.incrementCount(obj);
    collector.ack(tuple);
  }"
3712,emit,"  private void emit(Map<Object, Long> counts, int actualWindowLengthInSeconds) {
    for (Entry<Object, Long> entry : counts.entrySet()) {
      Object obj = entry.getKey();"
3713,emitCurrentWindowCounts,"  private void emitCurrentWindowCounts() {
    Map<Object, Long> counts = counter.getCountsThenAdvanceWindow();
    int actualWindowLengthInSeconds = lastModifiedTracker.secondsSinceOldestModification();
    lastModifiedTracker.markAsModified();
    if (actualWindowLengthInSeconds != windowLengthInSeconds) {
      LOG.warn(String.format(WINDOW_LENGTH_WARNING_TEMPLATE, actualWindowLengthInSeconds, windowLengthInSeconds));
    }"
3714,execute,"  public void execute(Tuple tuple) {
    if (TupleHelpers.isTickTuple(tuple)) {
      LOG.debug(""Received tick tuple, triggering emit of current window counts"");"
3715,prepare,"  public void prepare(Map stormConf, TopologyContext context, OutputCollector collector) {
    this.collector = collector;
    lastModifiedTracker = new NthLastModifiedTimeTracker(deriveNumWindowChunksFrom(this.windowLengthInSeconds,
        this.emitFrequencyInSeconds));"
3716,deriveNumWindowChunksFrom,"  private int deriveNumWindowChunksFrom(int windowLengthInSeconds, int windowUpdateFrequencyInSeconds) {
    return windowLengthInSeconds / windowUpdateFrequencyInSeconds;
  }"
3717,main,"  public static void main(String[] args) throws Exception {
    LinearDRPCTopologyBuilder builder = construct();


    Config conf = new Config();"
3718,construct,"  public static LinearDRPCTopologyBuilder construct() {
    LinearDRPCTopologyBuilder builder = new LinearDRPCTopologyBuilder(""reach"");
    builder.addBolt(new GetTweeters(), 4);
    builder.addBolt(new GetFollowers(), 12).shuffleGrouping();
    builder.addBolt(new PartialUniquer(), 6).fieldsGrouping(new Fields(""id"", ""follower""));
    builder.addBolt(new CountAggregator(), 3).fieldsGrouping(new Fields(""id""));
    return builder;
  }"
3719,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""reach""));
    }"
3721,execute,"    public void execute(Tuple tuple) {
      _count += tuple.getInteger(1);
    }"
3723,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""partial-count""));
    }"
3724,finishBatch,"    public void finishBatch() {
      _collector.emit(new Values(_id, _followers.size()));
    }"
3725,execute,"    public void execute(Tuple tuple) {
      _followers.add(tuple.getString(1));
    }"
3727,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""follower""));
    }"
3728,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      Object id = tuple.getValue(0);
      String tweeter = tuple.getString(1);
      List<String> followers = FOLLOWERS_DB.get(tweeter);
      if (followers != null) {
        for (String follower : followers) {"
3729,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""tweeter""));
    }"
3730,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      Object id = tuple.getValue(0);
      String url = tuple.getString(1);
      List<String> tweeters = TWEETERS_DB.get(url);
      if (tweeters != null) {
        for (String tweeter : tweeters) {"
3733,run,"      public void run() {
        for (Rankable r : entries) {
          try {"
3736,removeZeroRankingsData,"  public Object[][] removeZeroRankingsData() {
    return new Object[][]{ { Lists.newArrayList(A, ZERO), Lists.newArrayList(A) }, { Lists.newArrayList(A),
        Lists.newArrayList(A) }, { Lists.newArrayList(ZERO, A), Lists.newArrayList(A) }, { Lists.newArrayList(ZERO),"
3738,duplicatesData,"  public Object[][] duplicatesData() {
    Rankable A1 = new RankableObjectWithFields(""A"", 1);
    Rankable A2 = new RankableObjectWithFields(""A"", 2);
    Rankable A3 = new RankableObjectWithFields(""A"", 3);
    return new Object[][]{ { Lists.newArrayList(ANY_RANKABLE, ANY_RANKABLE, ANY_RANKABLE) }, { Lists.newArrayList(A1,
        A2, A3) }, };"
3740,simulatedRankingsAndOtherRankingsData,"  public Object[][] simulatedRankingsAndOtherRankingsData() {
    return new Object[][]{ { Lists.newArrayList(A), Lists.newArrayList(A), Lists.newArrayList(A) },
        { Lists.newArrayList(A, C), Lists.newArrayList(B, D), Lists.newArrayList(D, C, B, A) }, { Lists.newArrayList(B,"
3744,simulatedRankingsData,"  public Object[][] simulatedRankingsData() {
    return new Object[][]{ { Lists.newArrayList(A), Lists.newArrayList(A) }, { Lists.newArrayList(B, D, A, C),
        Lists.newArrayList(D, C, B, A) }, { Lists.newArrayList(B, F, A, C, D, E), Lists.newArrayList(F, E, D, C, B,"
3746,rankingsGrowData,"  public Object[][] rankingsGrowData() {
    return new Object[][]{ { 2, Lists.newArrayList(new RankableObjectWithFields(""A"", 1), new RankableObjectWithFields(
        ""B"", 2), new RankableObjectWithFields(""C"", 3)) }, { 2, Lists.newArrayList(new RankableObjectWithFields(""A"", 1),"
3748,shouldHaveDefaultConstructor,"  public void shouldHaveDefaultConstructor() {
    new Rankings();
  }"
3750,legalTopNData,"  public Object[][] legalTopNData() {
    return new Object[][]{ { 1 }, { 2 }, { 1000 }, { 1000000 } };
  }"
3752,defensiveCopyRankingsData,"  public Object[][] defensiveCopyRankingsData() {
    return new Object[][]{ { 5, Lists.newArrayList(A, B, C), Lists.newArrayList(D) }, { 2, Lists.newArrayList(A, B, C,
        D), Lists.newArrayList(E, F) }, { 1, Lists.newArrayList(), Lists.newArrayList(A) }, { 1, Lists.newArrayList(A),"
3754,copyRankingsData,"  public Object[][] copyRankingsData() {
    return new Object[][]{ { 5, Lists.newArrayList(A, B, C) }, { 2, Lists.newArrayList(A, B, C, D) },
        { 1, Lists.newArrayList() }, { 1, Lists.newArrayList(A) }, { 1, Lists.newArrayList(A, B) } };"
3755,constructorWithNegativeOrZeroTopNShouldThrowIAE,"  public void constructorWithNegativeOrZeroTopNShouldThrowIAE(int topN) {
    new Rankings(topN);
  }"
3756,illegalTopNData,"  public Object[][] illegalTopNData() {
    return new Object[][]{ { 0 }, { -1 }, { -2 }, { -10 } };
  }"
3757,copy,"  public Rankings copy() {
    return new Rankings(this);
  }"
3758,toString,"  public String toString() {
    return rankedItems.toString();
  }"
3759,pruneZeroCounts,"  public void pruneZeroCounts() {
    int i = 0;
    while (i < rankedItems.size()) {
      if (rankedItems.get(i).getCount() == 0) {"
3760,shrinkRankingsIfNeeded,"  private void shrinkRankingsIfNeeded() {
    if (rankedItems.size() > maxSize) {
      rankedItems.remove(maxSize);"
3761,rerank,"  private void rerank() {
    Collections.sort(rankedItems);
    Collections.reverse(rankedItems);
  }"
3762,findRankOf,"  private Integer findRankOf(Rankable r) {
    Object tag = r.getObject();
    for (int rank = 0; rank < rankedItems.size(); rank++) {
      Object cur = rankedItems.get(rank).getObject();
      if (cur.equals(tag)) {"
3763,addOrReplace,"  private void addOrReplace(Rankable r) {
    Integer rank = findRankOf(r);
    if (rank != null) {
      rankedItems.set(rank, r);"
3764,updateWith,"  public void updateWith(Rankable r) {
    synchronized(rankedItems) {
      addOrReplace(r);"
3765,updateWith,"  public void updateWith(Rankings other) {
    for (Rankable r : other.getRankings()) {
      updateWith(r);"
3766,getRankings,"  public List<Rankable> getRankings() {
    List<Rankable> copy = Lists.newLinkedList();
    for (Rankable r: rankedItems) {
      copy.add(r.copy());
    }"
3767,size,"  public int size() {
    return rankedItems.size();
  }"
3768,maxSize,"  public int maxSize() {
    return maxSize;
  }"
3770,copyData,"  public Object[][] copyData() {
    return new Object[][]{ { new RankableObjectWithFields(""foo"", 0) }, { new RankableObjectWithFields(""foo"", 3,
        ""someOtherField"") }, { new RankableObjectWithFields(""foo"", 0, ""someField"") } };"
3774,fieldsData,"  public Object[][] fieldsData() {
    return new Object[][]{ { ANY_OBJECT, ANY_COUNT, new Object[]{ ANY_FIELD } },
        { ""quux"", 42L, new Object[]{ ""one"", ""two"", ""three"" } } };"
3778,toStringData,"  public Object[][] toStringData() {
    return new Object[][]{ { new String(""foo""), 0L }, { new String(""BAR""), 8L } };
  }"
3779,verifyCompareTo,"  public void verifyCompareTo(RankableObjectWithFields first, RankableObjectWithFields second, int expCompareToValue) {
    assertThat(first.compareTo(second)).isEqualTo(expCompareToValue);
  }"
3780,compareToData,"  public Object[][] compareToData() {
    return new Object[][]{ { new RankableObjectWithFields(""foo"", 1000), new RankableObjectWithFields(""foo"", 0),
        GREATER_THAN }, { new RankableObjectWithFields(""foo"", 1), new RankableObjectWithFields(""foo"", 0),"
3781,shouldHaveSameHashCodeAsTrueDuplicates,"  public void shouldHaveSameHashCodeAsTrueDuplicates(RankableObjectWithFields r,
      RankableObjectWithFields trueDuplicate) {
    assertThat(r.hashCode()).isEqualTo(trueDuplicate.hashCode());"
3782,shouldBeEqualToTrueDuplicates,"  public void shouldBeEqualToTrueDuplicates(RankableObjectWithFields r, RankableObjectWithFields trueDuplicate) {
    assertTrue(r.equals(trueDuplicate), r + "" is not equal to "" + trueDuplicate + "" but it should be"");
  }"
3783,trueDuplicatesData,"  public Object[][] trueDuplicatesData() {
    return new Object[][]{ { new RankableObjectWithFields(""foo"", 0), new RankableObjectWithFields(""foo"", 0) },
        { new RankableObjectWithFields(""foo"", 0), new RankableObjectWithFields(""foo"", 0, ""someOtherField"") },"
3784,shouldHaveDifferentHashCodeThanFalseDuplicates,"  public void shouldHaveDifferentHashCodeThanFalseDuplicates(RankableObjectWithFields r,
      RankableObjectWithFields falseDuplicate) {
    assertThat(r.hashCode()).isNotEqualTo(falseDuplicate.hashCode());"
3785,shouldNotBeEqualToFalseDuplicates,"  public void shouldNotBeEqualToFalseDuplicates(RankableObjectWithFields r, RankableObjectWithFields falseDuplicate) {
    assertFalse(r.equals(falseDuplicate), r + "" is equal to "" + falseDuplicate + "" but it should not be"");
  }"
3786,falseDuplicatesData,"  public Object[][] falseDuplicatesData() {
    return new Object[][]{ { new RankableObjectWithFields(""foo"", 0), new RankableObjectWithFields(""foo"", 1) },
        { new RankableObjectWithFields(""foo"", 1), new RankableObjectWithFields(""Foo"", 1) },"
3787,shouldNotBeEqualToInstancesOfOtherClasses,"  public void shouldNotBeEqualToInstancesOfOtherClasses(Object notARankable) {
    RankableObjectWithFields r = new RankableObjectWithFields(ANY_OBJECT, ANY_COUNT);
    assertFalse(r.equals(notARankable), r + "" is equal to "" + notARankable + "" but it should not be"");
  }"
3788,otherClassesData,"  public Object[][] otherClassesData() {
    return new Object[][]{ { new String(""foo"") }, { new Object() }, { Integer.valueOf(4) }, { Lists.newArrayList(7, 8,
        9) } };"
3789,shouldBeEqualToItself,"  public void shouldBeEqualToItself() {
    RankableObjectWithFields r = new RankableObjectWithFields(ANY_OBJECT, ANY_COUNT);
    assertThat(r).isEqualTo(r);
  }"
3790,constructorWithNegativeCountAndFieldsShouldThrowIAE,"  public void constructorWithNegativeCountAndFieldsShouldThrowIAE() {
    Object someAdditionalField = new Object();
    new RankableObjectWithFields(ANY_OBJECT, -1, someAdditionalField);
  }"
3791,constructorWithNegativeCountAndNoFieldsShouldThrowIAE,"  public void constructorWithNegativeCountAndNoFieldsShouldThrowIAE() {
    new RankableObjectWithFields(ANY_OBJECT, -1);
  }"
3792,constructorWithNullObjectAndFieldsShouldThrowIAE,"  public void constructorWithNullObjectAndFieldsShouldThrowIAE() {
    Object someAdditionalField = new Object();
    new RankableObjectWithFields(null, ANY_COUNT, someAdditionalField);
  }"
3793,constructorWithNullObjectAndNoFieldsShouldThrowIAE,"  public void constructorWithNullObjectAndNoFieldsShouldThrowIAE() {
    new RankableObjectWithFields(null, ANY_COUNT);
  }"
3794,copy,"  public Rankable copy() {
    List<Object> shallowCopyOfFields = ImmutableList.copyOf(getFields());
    return new RankableObjectWithFields(getObject(), getCount(), shallowCopyOfFields);
  }"
3795,toString,"  public String toString() {
    StringBuffer buf = new StringBuffer();
    buf.append(""["");
    buf.append(obj);
    buf.append(toStringSeparator);
    buf.append(count);
    for (Object field : fields) {
      buf.append(toStringSeparator);
      buf.append(field);
    }"
3796,hashCode,"  public int hashCode() {
    int result = 17;
    int countHash = (int) (count ^ (count >>> 32));
    result = 31 * result + countHash;
    result = 31 * result + obj.hashCode();
    return result;
  }"
3797,equals,"  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof RankableObjectWithFields)) {
      return false;"
3798,compareTo,"  public int compareTo(Rankable other) {
    long delta = this.getCount() - other.getCount();
    if (delta > 0) {
      return 1;"
3799,getFields,"  public List<Object> getFields() {
    return fields;
  }"
3800,getCount,"  public long getCount() {
    return count;
  }"
3801,getObject,"  public Object getObject() {
    return obj;
  }"
3802,from,"  public static RankableObjectWithFields from(Tuple tuple) {
    List<Object> otherFields = Lists.newArrayList(tuple.getValues());
    Object obj = otherFields.remove(0);
    Long count = (Long) otherFields.remove(0);
    return new RankableObjectWithFields(obj, count, otherFields.toArray());
  }"
3806,declareOutputFields,"  public void declareOutputFields(OutputFieldsDeclarer ofd) {
  }"
3807,execute,"  public void execute(Tuple tuple, BasicOutputCollector collector) {
    System.out.println(tuple);
  }"
3808,advanceSimulatedTimeBy,"  private void advanceSimulatedTimeBy(int seconds) {
    Time.advanceTime(seconds * MILLIS_IN_SEC);
  }"
3810,simulatedTrackerIterations,"  public Object[][] simulatedTrackerIterations() {
    return new Object[][]{ { 1, new int[]{ 0, 1 }, new int[]{ 0, 0 } }, { 1, new int[]{ 0, 2 }, new int[]{ 0, 0 } },
        { 2, new int[]{ 2, 2 }, new int[]{ 2, 2 } }, { 2, new int[]{ 0, 4 }, new int[]{ 0, 4 } },"
3812,whenNotYetMarkedAsModifiedData,"  public Object[][] whenNotYetMarkedAsModifiedData() {
    return new Object[][]{ { 0 }, { 1 }, { 2 }, { 3 }, { 4 }, { 5 }, { 8 }, { 10 } };
  }"
3813,positiveNumTimesToTrackShouldBeOk,"  public void positiveNumTimesToTrackShouldBeOk(int numTimesToTrack) {
    new NthLastModifiedTimeTracker(numTimesToTrack);
  }"
3814,legalNumTimesData,"  public Object[][] legalNumTimesData() {
    return new Object[][]{ { 1 }, { 2 }, { 3 }, { 20 } };
  }"
3815,negativeOrZeroNumTimesToTrackShouldThrowIAE,"  public void negativeOrZeroNumTimesToTrackShouldThrowIAE(int numTimesToTrack) {
    new NthLastModifiedTimeTracker(numTimesToTrack);
  }"
3816,illegalNumTimesData,"  public Object[][] illegalNumTimesData() {
    return new Object[][]{ { -10 }, { -3 }, { -2 }, { -1 }, { 0 } };
  }"
3817,updateLastModifiedTime,"  private void updateLastModifiedTime() {
    lastModifiedTimesMillis.add(now());
  }"
3818,markAsModified,"  public void markAsModified() {
    updateLastModifiedTime();
  }"
3819,secondsSinceOldestModification,"  public int secondsSinceOldestModification() {
    long modifiedTimeMillis = ((Long) lastModifiedTimesMillis.get()).longValue();
    return (int) ((now() - modifiedTimeMillis) / MILLIS_IN_SEC);
  }"
3820,now,"  private long now() {
    return Time.currentTimeMillis();
  }"
3821,initLastModifiedTimesMillis,"  private void initLastModifiedTimesMillis() {
    long nowCached = now();
    for (int i = 0; i < lastModifiedTimesMillis.maxSize(); i++) {
      lastModifiedTimesMillis.add(Long.valueOf(nowCached));"
3822,mockTuple,"  public static Tuple mockTuple(String componentId, String streamId) {
    Tuple tuple = mock(Tuple.class);
    when(tuple.getSourceComponent()).thenReturn(componentId);
    when(tuple.getSourceStreamId()).thenReturn(streamId);
    return tuple;
  }"
3823,mockTickTuple,"  public static Tuple mockTickTuple() {
    return mockTuple(Constants.SYSTEM_COMPONENT_ID, Constants.SYSTEM_TICK_STREAM_ID);
  }"
3825,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      String arg = tuple.getString(0);
      Object retInfo = tuple.getValue(1);
      collector.emit(new Values(arg + ""!!!"", retInfo));
    }"
3826,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""result"", ""return-info""));
    }"
3828,updateRankingsWithTuple,"  void updateRankingsWithTuple(Tuple tuple) {
    Rankable rankable = RankableObjectWithFields.from(tuple);
    super.getRankings().updateWith(rankable);
  }"
3829,main,"  public static void main(String[] args) throws Exception {
    TopologyBuilder builder = new TopologyBuilder();

    builder.setSpout(""word"", new TestWordSpout(), 10);
    builder.setBolt(""exclaim1"", new ExclamationBolt(), 3).shuffleGrouping(""word"");
    builder.setBolt(""exclaim2"", new ExclamationBolt(), 2).shuffleGrouping(""exclaim1"");

    Config conf = new Config();
    conf.setDebug(true);"
3831,execute,"    public void execute(Tuple tuple) {
      _collector.emit(tuple, new Values(tuple.getString(0) + ""!!!""));
      _collector.ack(tuple);
    }"
3832,prepare,"    public void prepare(Map conf, TopologyContext context, OutputCollector collector) {
      _collector = collector;
    }"
3833,main,"  public static void main(String[] args) throws Exception {
    LinearDRPCTopologyBuilder builder = new LinearDRPCTopologyBuilder(""exclamation"");
    builder.addBolt(new ExclaimBolt(), 3);

    Config conf = new Config();
"
3834,declareOutputFields,"    public void declareOutputFields(OutputFieldsDeclarer declarer) {
      declarer.declare(new Fields(""id"", ""result""));
    }"
3835,execute,"    public void execute(Tuple tuple, BasicOutputCollector collector) {
      String input = tuple.getString(1);
      collector.emit(new Values(tuple.getValue(0), input + ""!""));
    }"
3838,declareOutputFields,"  public void declareOutputFields(OutputFieldsDeclarer declarer) {
    declarer.declare(new Fields(""rankings""));
  }"
3839,emitRankings,"  private void emitRankings(BasicOutputCollector collector) {
    collector.emit(new Values(rankings.copy()));
    getLogger().debug(""Rankings: "" + rankings);
  }"
3840,updateRankingsWithTuple,"  abstract void updateRankingsWithTuple(Tuple tuple);
"
3841,execute,"  public final void execute(Tuple tuple, BasicOutputCollector collector) {
    if (TupleHelpers.isTickTuple(tuple)) {
      getLogger().debug(""Received tick tuple, triggering emit of current rankings"");"
3842,getRankings,"  protected Rankings getRankings() {
    return rankings;
  }"
3845,setScaling,"    public void setScaling(float scaling) {
        this.scaling = scaling;
    }"
3846,getScaling,"    public float getScaling() {
        return scaling;
    }"
3847,setDegree,"    public void setDegree(float degree) {
        this.degree = degree;
    }"
3848,getDegree,"    public float getDegree() {
        return degree;
    }"
3849,setyLocation,"    public void setyLocation(float yLocation) {
        this.yLocation = yLocation;
    }"
3850,getyLocation,"    public float getyLocation() {
        return yLocation;
    }"
3851,setxLocation,"    public void setxLocation(float xLocation) {
        this.xLocation = xLocation;
    }"
3852,getxLocation,"    public float getxLocation() {
        return xLocation;
    }"
3853,setText,"    public void setText(String text) {
        this.text = text;
    }"
3854,getText,"    public String getText() {
        return text;
    }"
3855,setStickerId,"    public void setStickerId(long stickerId) {
        this.stickerId = stickerId;
    }"
3856,getStickerId,"    public long getStickerId() {
        return stickerId;
    }"
3857,setStickerURL,"    public void setStickerURL(String stickerURL) {
        this.stickerURL = stickerURL;
    }"
3858,getStickerURL,"    public String getStickerURL() {
        return stickerURL;
    }"
3859,setHorizonMirror,"    public void setHorizonMirror(int horizonMirror) {
        this.horizonMirror = horizonMirror;
    }"
3860,getHorizonMirror,"    public int getHorizonMirror() {
        return horizonMirror;
    }"
3873,setBubbleId,"    public void setBubbleId(long bubbleId) {
        this.bubbleId = bubbleId;
    }"
3874,getBubbleId,"    public long getBubbleId() {
        return bubbleId;
    }"
3875,findUserByProvince,"    List<User> findUserByProvince(String province);
"
3882,findUserByProvince,"    List<User> findUserByProvince(@Param(""province"") String province);
}"
3892,setSex,"    public void setSex(String sex) {
        this.sex = sex;
    }"
3893,getSex,"    public String getSex() {
        return sex;
    }"
3894,setProvince,"    public void setProvince(String province) {
        this.province = province;
    }"
3895,getProvince,"    public String getProvince() {
        return province;
    }"
3896,setLongitude,"    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }"
3897,getLongitude,"    public Double getLongitude() {
        return longitude;
    }"
3898,setLatitude,"    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }"
3899,getLatitude,"    public Double getLatitude() {
        return latitude;
    }"
3900,setScore,"    public void setScore(Long score) {
        this.score = score;
    }"
3901,getScore,"    public Long getScore() {
        return score;
    }"
3902,setCreateTime,"    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }"
3903,getCreateTime,"    public Date getCreateTime() {
        return createTime;
    }"
3904,setCountry,"    public void setCountry(String country) {
        this.country = country;
    }"
3905,getCountry,"    public String getCountry() {
        return country;
    }"
3906,setPayMoney,"    public void setPayMoney(Long payMoney) {
        this.payMoney = payMoney;
    }"
3907,getPayMoney,"    public Long getPayMoney() {
        return payMoney;
    }"
3908,setAvatar,"    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }"
3909,getAvatar,"    public String getAvatar() {
        return avatar;
    }"
3910,setAccount,"    public void setAccount(String account) {
        this.account = account;
    }"
3911,getAccount,"    public String getAccount() {
        return account;
    }"
3912,setId,"    public void setId(Long id) {
        this.id = id;
    }"
3913,getId,"    public Long getId() {
        return id;
    }"
3914,testQuery,"    public void testQuery() throws IOException, ParseException {
        LuceneTest luceneTest = new LuceneTest();
        luceneTest.query();
    }"
3915,testSearch,"    public void testSearch(){
        LuceneTest luceneTest = new LuceneTest();
        luceneTest.search();
    }"
3916,testIndex,"    public void testIndex(){
        LuceneTest luceneTest = new LuceneTest();
        luceneTest.index();
    }"
3917,displayTokens,"    public static String displayTokens(TokenStream ts) throws IOException
    {
        StringBuffer sb = new StringBuffer();
        CharTermAttribute termAttr = ts.addAttribute(CharTermAttribute.class);
        ts.reset();
        while (ts.incrementToken())
        {
            String token = termAttr.toString();
            sb.append(token).append("" "");
            System.out.print(token+""|"");"
3926,queryLimit,"    List<Score> queryLimit(int offset, int limit);
}"
3927,updateScore,"    void updateScore(User user, int scoreCount);
    /**"
3930,queryLimit,"    List<Score> queryLimit(@Param(""offset"") int offset, @Param(""limit"") int limit);
}"
3933,setUser,"    public void setUser(User user) {
        this.user = user;
    }"
3934,getUser,"    public User getUser() {
        return user;
    }"
3935,setScore,"    public void setScore(Integer score) {
        this.score = score;
    }"
3936,getScore,"    public Integer getScore() {
        return score;
    }"
3939,setChangeType,"    public void setChangeType(String changeType) {
        this.changeType = changeType;
    }"
3940,getChangeType,"    public String getChangeType() {
        return changeType;
    }"
3945,main,"    public static void main(String [] args){
        writeInExcel();
    }"
3946,parseExcel,"    List<GoodDetails> parseExcel(File xlsFile, String filename);
}"
3947,afterCompletion,"    public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception {

        System.out.println(""afterCompletion run!"");"
3948,postHandle,"    public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception {

        System.out.println(""postHandle run!"");"
3949,preHandle,"    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception {
        System.out.println(""preHandle run!"");
        return true;
    }"
3951,testRedisData,"    public void testRedisData() {
        User user = new User();
        user.setId(Long.valueOf(1));
        user.setAccount(String.valueOf(89564));
        Gag gag = new Gag();
        gag.setGagTime(new Date());
        gag.setUser(user);
        int insertSuccess = gagDao.insertGag(gag);
        System.out.print(""insert :"" + insertSuccess);
    }"
3954,send,"	public boolean send(String acceptorLoginId, String context){
		if(acceptorLoginId == null || """".equals(acceptorLoginId)){
			return false;
		}
		try {"
3955,send,"	public boolean send(Long acceptorUserId, String context){
		if(acceptorUserId == null ){
			return false;
		}
		try {"
3956,send,"	public boolean[] send(String acceptorName, String[] acceptors, String context) {
		if(acceptors == null || acceptors.length == 0){
			return null;
		}
		boolean[] result = new boolean[acceptors.length];
		int i = 0;
		for(String acceptor : acceptors){"
3960,checkAcceptor,"	protected boolean checkAcceptor(String acceptor){
		if(acceptor == null || """".equals(acceptor)){
			return false;
		}
"
3962,getType,"			public String getType() {
				return MessageServiceSupport.PHONO_MESSAGE_TYPE;
			}"
3963,getMobileMessageService,"	public static MessageService getMobileMessageService(){
		return new MessageServiceSupport(){
			public String getType() {"
3964,send,"	public boolean send(String acceptorLoginId, String context);
"
3965,send,"	public boolean send(Long acceptorUserId, String context);
	"
3966,send,"	public boolean send(String acceptorName, String acceptor, String context, String title);
	"
3967,send,"	public boolean[] send(String acceptorName, String[] acceptor, String context);
	"
3968,send,"	public boolean send(String acceptorName, String acceptor, String context);
	"
3969,getAnalyzer,"    public static Analyzer getAnalyzer() {
        return analyzer;
    }"
3970,getMatchVersion,"    public static Version getMatchVersion() {
        return matchVersion;
    }"
3971,getIndexSearcherOfSP,"    public static IndexSearcher getIndexSearcherOfSP() throws IOException {

        System.out.println(""directory_sp    "" + directory_sp);
        IndexReader indexReader = DirectoryReader.open(ramDirectory);

        IndexSearcher indexSearcher = new IndexSearcher(indexReader);"
3972,getIndexWriterOfSP,"    public static IndexWriter getIndexWriterOfSP() throws IOException {

        IndexWriter indexWriter = new IndexWriter(directory_sp, config);
"
3981,updateIndex,"    public void updateIndex(String fieldName,String fieldValue,GoodDetails goodDetails) throws IOException {

        IndexWriter indexWriter = LuceneUtils.getIndexWriterOfSP();

        Term term = new Term(fieldName,fieldValue);

        Document document = GoodDetailsUtils.GoodDetailsToDocument(goodDetails);"
3985,postHandle,"    public void postHandle(HttpServletRequest request, HttpServletResponse response,
                           Object obj, ModelAndView mav) throws Exception {"
3986,afterCompletion,"    public void afterCompletion(HttpServletRequest request,
                                HttpServletResponse response, Object obj, Exception err)"
3990,jsonObjectToUser,"    public static User jsonObjectToUser(String userString) {
        User user = JSONObject.parseObject(userString.toString(),User.class);
        return user;
    }"
3991,objectToJson,"    public static String objectToJson(Object data) {
        String json = JSONArray.toJSONString(data);
        return json;
    }"
3992,getTopLast,"    public Set<String> getTopLast(String key, long start, long end);
}"
3995,zadd,"    public long zadd(String key, double score, User user);
    public Set<String> zgetAll(String key, long start, long end);"
3996,hdel,"    public long hdel(String hkey, String key);
    public long zadd(String key, double score, User user);"
3997,del,"    public long del(String key);
    public long hdel(String hkey, String key);"
3998,ttl,"    public long ttl(String key);
    public long del(String key);"
3999,expire,"    public long expire(String key, int second);
    public long ttl(String key);"
4000,incr,"    public long incr(String key);
    public long expire(String key, int second);"
4001,hset,"    public long hset(String hkey, String key, String value);
    public long incr(String key);"
4002,hget,"    public String hget(String hkey, String key);
    public long hset(String hkey, String key, String value);"
4003,set,"    public String set(String key, String value);
    public String hget(String hkey, String key);"
4004,get,"    public String get(String key);
    public String set(String key, String value);"
4005,verifyJavaWebToken,"    public static Map<String, Object> verifyJavaWebToken(String jwt) {
        try {
            Map<String, Object> jwtClaims ="
4006,createJavaWebToken,"    public static String createJavaWebToken(Map<String, Object> claims) {
        return Jwts.builder().setClaims(claims).signWith(SignatureAlgorithm.HS256, getKeyInstance()).compact();
    }"
4011,send,"    void send(String hisEmail, String subject, String content);
}"
4012,methodOfWarn,"    public List<Integer> methodOfWarn(List<GoodDetails> goodDetailsList) throws Exception;
"
4013,getGoodList,"    public List<GoodDetails> getGoodList(String location);
"
4014,findGoodAllDetailsById,"    public GoodDetails findGoodAllDetailsById(String realGoodid);
"
4015,findIndex,"    public List<GoodDetails> findIndex(String keyword, int start, int row);
"
4016,findGoodByClassifyName,"    public List<GoodDetails> findGoodByClassifyName(String ClassifyName) throws Exception;
"
4018,GoodDetailsToDocument,"    public static Document GoodDetailsToDocument(GoodDetails goodDetails) {

        Document document = new Document();

        StringField idfield = new StringField(""id"", goodDetails.getGoodId(), Store.YES);

        TextField goodNamefield = new TextField(""goodName"", goodDetails.getGoodName(),Store.YES);
        document.add(idfield);"
4019,findGoods,"    public List<GoodDetails> findGoods(@Param(""location"") String location);
}"
4020,fingGoodsByFeatureIds,"    public List<GoodDetails> fingGoodsByFeatureIds(List<String> ids);
"
4021,findGoodDetailsById,"    public GoodDetails findGoodDetailsById(String id);
"
4022,findGoodAllDetailsByDetailId,"    public GoodDetails findGoodAllDetailsByDetailId(String goodId);
    public GoodDetails findGoodDetailsById(String id);"
4023,findGoodDetailsByClassifyId,"    public List<GoodDetails> findGoodDetailsByClassifyId(int goodClassifyId);
"
4024,toString,"    public String toString() {
        return ""GoodDetails{"" +
                ""goodId='"" + goodId + '\'' +"
4025,setPicPathList,"    public void setPicPathList(List<String> picPathList) {
        this.picPathList = picPathList;
    }"
4026,getPicPathList,"    public List<String> getPicPathList() {
        return picPathList;
    }"
4027,setColorClassification,"    public void setColorClassification(String colorClassification) {
        this.colorClassification = colorClassification;
    }"
4028,getColorClassification,"    public String getColorClassification() {
        return colorClassification;
    }"
4029,setLogisticsService,"    public void setLogisticsService(BigDecimal logisticsService) {
        this.logisticsService = logisticsService;
    }"
4030,getLogisticsService,"    public BigDecimal getLogisticsService() {
        return logisticsService;
    }"
4031,setServiceAttitude,"    public void setServiceAttitude(BigDecimal serviceAttitude) {
        this.serviceAttitude = serviceAttitude;
    }"
4032,getServiceAttitude,"    public BigDecimal getServiceAttitude() {
        return serviceAttitude;
    }"
4033,setDescriptionSituation,"    public void setDescriptionSituation(BigDecimal descriptionSituation) {
        this.descriptionSituation = descriptionSituation;
    }"
4034,getDescriptionSituation,"    public BigDecimal getDescriptionSituation() {
        return descriptionSituation;
    }"
4035,setStoreLink,"    public void setStoreLink(String storeLink) {
        this.storeLink = storeLink;
    }"
4036,getStoreLink,"    public String getStoreLink() {
        return storeLink;
    }"
4037,setGoodLink,"    public void setGoodLink(String goodLink) {
        this.goodLink = goodLink;
    }"
4038,getGoodLink,"    public String getGoodLink() {
        return goodLink;
    }"
4039,setIndustryCompare,"    public void setIndustryCompare(String industryCompare) {
        this.industryCompare = industryCompare;
    }"
4040,getIndustryCompare,"    public String getIndustryCompare() {
        return industryCompare;
    }"
4041,setGoodAfterRate,"    public void setGoodAfterRate(String goodAfterRate) {
        this.goodAfterRate = goodAfterRate;
    }"
4042,getGoodAfterRate,"    public String getGoodAfterRate() {
        return goodAfterRate;
    }"
4043,setIshasLicense,"    public void setIshasLicense(Integer ishasLicense) {
        this.ishasLicense = ishasLicense;
    }"
4044,getIshasLicense,"    public Integer getIshasLicense() {
        return ishasLicense;
    }"
4045,setCommentNum,"    public void setCommentNum(Integer commentNum) {
        this.commentNum = commentNum;
    }"
4046,getCommentNum,"    public Integer getCommentNum() {
        return commentNum;
    }"
4047,setSellerCredit,"    public void setSellerCredit(String sellerCredit) {
        this.sellerCredit = sellerCredit;
    }"
4048,getSellerCredit,"    public String getSellerCredit() {
        return sellerCredit;
    }"
4049,setGoodHot,"    public void setGoodHot(Integer goodHot) {
        this.goodHot = goodHot;
    }"
4050,getGoodHot,"    public Integer getGoodHot() {
        return goodHot;
    }"
4051,setStoreAdd,"    public void setStoreAdd(String storeAdd) {
        this.storeAdd = storeAdd;
    }"
4052,getStoreAdd,"    public String getStoreAdd() {
        return storeAdd;
    }"
4053,setMonthsaleNum,"    public void setMonthsaleNum(Integer monthsaleNum) {
        this.monthsaleNum = monthsaleNum;
    }"
4054,getMonthsaleNum,"    public Integer getMonthsaleNum() {
        return monthsaleNum;
    }"
4055,setGoodPrice,"    public void setGoodPrice(String goodPrice) {
        if (goodPrice.contains(""-"")) {
            String[] ary_price = goodPrice.split(""\\-"");"
4056,getGoodPrice,"    public String getGoodPrice() {
        return goodPrice;
    }"
4057,setGoodBrand,"    public void setGoodBrand(String goodBrand) {

        this.goodBrand = goodBrand;"
4058,getGoodBrand,"    public String getGoodBrand() {
        return goodBrand;
    }"
4059,setStoreName,"    public void setStoreName(String storeName) {
        this.storeName = storeName;
    }"
4060,getStoreName,"    public String getStoreName() {
        return storeName;
    }"
4061,setGoodName,"    public void setGoodName(String goodName) {
        this.goodName = goodName;
    }"
4062,getGoodName,"    public String getGoodName() {
        return goodName;
    }"
4063,setGoodId,"    public void setGoodId(String goodId) {
        this.goodId = goodId;
    }"
4064,getGoodId,"    public String getGoodId() {
        return goodId;
    }"
4065,findGoodDetailsByClassifyID,"    public List<GoodDetails> findGoodDetailsByClassifyID(int goodClassifyID);
}"
4066,findGoodDetailsByClassifyName,"    public List<GoodDetails> findGoodDetailsByClassifyName(String goodClassifyName);
"
4067,findClassifyIdByClassifyName,"    public int findClassifyIdByClassifyName(String goodClassifyName);
"
4070,setUpperName,"    public void setUpperName(String upperName) {
        this.upperName = upperName;
    }"
4071,getUpperName,"    public String getUpperName() {
        return upperName;
    }"
4072,setUpperID,"    public void setUpperID(Integer upperID) {
        this.upperID = upperID;
    }"
4073,getUpperID,"    public Integer getUpperID() {
        return upperID;
    }"
4074,setGoodkindsName,"    public void setGoodkindsName(String goodkindsName) {
        this.goodkindsName = goodkindsName;
    }"
4075,getGoodkindsName,"    public String getGoodkindsName() {
        return goodkindsName;
    }"
4076,setClassifyId,"    public void setClassifyId(Integer classifyId) {
        this.classifyId = classifyId;
    }"
4077,getClassifyId,"    public Integer getClassifyId() {
        return classifyId;
    }"
4079,insertGag,"    public int insertGag(Gag gag);
    List<Gag> findByUserId(Long id);"
4084,setGagTime,"    public void setGagTime(Date gagTime) {
        this.gagTime = gagTime;
    }"
4085,getGagTime,"    public Date getGagTime() {
        return gagTime;
    }"
4101,getPasswordAuthentication,"                protected PasswordAuthentication getPasswordAuthentication() {
                    String userName = props.getProperty(""mail.user"");
                    String password = props.getProperty(""mail.password"");
                    return new PasswordAuthentication(userName, password);
                }"
4103,getEmailService,"	public static EmailService getEmailService(){
		return new EmailServiceImpl();
	}"
4104,sendEmail,"	void sendEmail(String hisEmail, String subject, String content);
	"
4105,getByName,"    public static String getByName(HttpServletRequest request, String cookieName) {
        String value = null;
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (cookieName.equals(cookie.getName())) {"
4106,deleteCookie,"    public static void deleteCookie(HttpServletResponse response,
                                    String cookieName) {
        Cookie cookie = new Cookie(cookieName, null);
        cookie.setPath(""/"");
        cookie.setMaxAge(0);
        response.addCookie(cookie);"
4107,addCookie,"    public static void addCookie(HttpServletResponse response,
                                 String cookieName, String value) {
        Cookie cookie = new Cookie(cookieName, value);
        cookie.setPath(""/"");
        cookie.setMaxAge(TIME);
        response.addCookie(cookie);"
4108,readConfigFile,"    public static Properties readConfigFile(String configFileName) throws Exception {
        if (StringUtils.isBlank(configFileName)) {
            throw new Exception(""Config file ["" + configFileName + ""] is not exist or null!"");
        }

        Properties p = null;
        try {"
4109,flush,"    private static void flush()
    {
        if ((System.currentTimeMillis()-lastFlushTime)>1000*60*10)"
4110,getConfigValue_,"    public static String getConfigValue_(String key){
        try {
            return getPropertyValue(key);
        } catch (Exception e) {"
4111,getConfigValue,"    public static String getConfigValue(String key) throws Exception{
        return getPropertyValue(key);
    }"
4112,getPropertyValue,"    public static String getPropertyValue(String key) throws Exception{
        flush();
        return getInstance().getProperty(key);
    }"
4113,init,"    public static void init() throws Exception{
        instance = ConfigReader.readConfigFile(PROTAL_CONFIG_FILE);
    }"
4114,getInstance,"    public static Properties getInstance() throws Exception{
        if(null == instance || instance.size() == 0){
            init();
        }"
4115,setRecordstatus,"	public void setRecordstatus(Integer recordstatus) {
		this.recordstatus = recordstatus;
	}"
4116,getRecordstatus,"	public Integer getRecordstatus() {
		return recordstatus;
	}"
4117,setCreateuserid,"	public void setCreateuserid(Long createuserid) {
		this.createuserid = createuserid;
	}"
4118,getCreateuserid,"	public Long getCreateuserid() {
		return this.createuserid;
	}"
4119,setCreatetime,"	public void setCreatetime(Date createtime) {
		this.createtime = createtime;
	}"
4120,getCreatetime,"	public Date getCreatetime() {
		return this.createtime;
	}"
4121,setEndtime,"	public void setEndtime(Date endtime) {
		this.endtime = endtime;
	}"
4122,getEndtime,"	public Date getEndtime() {
		return this.endtime;
	}"
4123,setStarttime,"	public void setStarttime(Date starttime) {
		this.starttime = starttime;
	}"
4124,getStarttime,"	public Date getStarttime() {
		return this.starttime;
	}"
4125,setContext,"	public void setContext(String context) {
		this.context = context;
	}"
4126,getContext,"	public String getContext() {
		return this.context;
	}"
4127,setTitle,"	public void setTitle(String title) {
		this.title = title;
	}"
4128,getTitle,"	public String getTitle() {
		return this.title;
	}"
4129,setType,"	public void setType(String type) {
		this.type = type;
	}"
4130,getType,"	public String getType() {
		return this.type;
	}"
4131,setAcceptorname,"	public void setAcceptorname(String acceptorname) {
		this.acceptorname = acceptorname;
	}"
4132,getAcceptorname,"	public String getAcceptorname() {
		return this.acceptorname;
	}"
4133,setAcceptor,"	public void setAcceptor(String acceptor) {
		this.acceptor = acceptor;
	}"
4134,getAcceptor,"	public String getAcceptor() {
		return this.acceptor;
	}"
4135,setId,"	public void setId(Long id) {
		this.id = id;
	}"
4137,decodeSession,"    public static Map<String, Object> decodeSession(String sessionId) {
        try {
            return verifyJavaWebToken(sessionId);"
4138,getUserId,"    public static Long getUserId(HttpServletRequest request) throws Exception {
        return  Long.valueOf((Integer)getClientLoginInfo(request).get(""userId""));
"
4139,getClientLoginInfo,"    private static Map<String, Object> getClientLoginInfo(HttpServletRequest request) throws Exception {
        Map<String, Object> r = new HashMap<>();
        String sessionId = request.getHeader(""sessionId"");
        if (sessionId != null) {
            r = decodeSession(sessionId);
            return r;"
4140,AfterReturning,"    public User AfterReturning(JoinPoint joinPoint,Object returnVal){
        User user = (User) returnVal;
        user.setAccount(DigestUtils.md5DigestAsHex(user.getAccount().getBytes()));
        return user;
    }"
4142,main,"    public static void main(String[] args) {
        new SpringApplicationBuilder(DiscoveryBootcwenaoApplication.class).web(true).run(args);
    }"
4143,serverEndpointExporter,"    public ServerEndpointExporter serverEndpointExporter() {  

        return new ServerEndpointExporter();  "
4144,calculateFare,"    public BigDecimal calculateFare(TaxiRide taxiRide, TaxiFare rideFare) {
        KieSession kieSession = kieContainer.newKieSession();
        kieSession.setGlobal(""rideFare"", rideFare);
        kieSession.insert(taxiRide);
        kieSession.fireAllRules();
        kieSession.dispose();
        return rideFare.total();
    }"
4145,total,"    public BigDecimal  total() {
        return this.nightSurcharge.add(this.rideFare);
    }"
4146,apiInfo,"    private ApiInfo apiInfo() {

        return new ApiInfoBuilder()"
4147,createRestApi,"    public Docket createRestApi() {

        return new Docket(DocumentationType.SWAGGER_2)"
4148,subOnlineCount,"    public static synchronized void subOnlineCount() {

        DemoSocketServer.onlineCount--;"
4149,addOnlineCount,"    public static synchronized void addOnlineCount() {

        DemoSocketServer.onlineCount++;"
4150,getOnlineCount,"    public static synchronized int getOnlineCount() {

        return onlineCount;"
4152,sendMessage,"    public void sendMessage(String message) throws IOException {

        this.session.getBasicRemote().sendText(message);"
4157,getData,"	public ApiReturnObject getData(@PathVariable String uid,String data){

		System.out.println(""#spring-cloud-study-demo#"");

		System.out.println(""uid->""+uid+"",data->""+data);

		Map<String,String> map=new HashMap<String,String>();

		map.put(uid,data);"
4158,basePath,"	public ApiReturnObject  basePath(HttpServletRequest request){

		return ApiReturnUtil.success(BasePath.getBasePath(request));"
4159,sockethtml,"	public ModelAndView  sockethtml(@PathVariable String cid){

		ModelAndView mav=new ModelAndView(""socket"");

		mav.addObject(""cid"", cid);"
4160,index,"	public ApiReturnObject  index(String data){

		if(StringUtils.isEmpty(data)) {
"
4161,getMyRealPath,"	public static String getMyRealPath(HttpServletRequest request, String path) {

		ServletContext context = request.getSession().getServletContext();

		realPath = context.getRealPath(path);
"
4162,getRealPath,"	public static String getRealPath(HttpServletRequest request, String path) {

		ServletContext context = request.getSession().getServletContext();

		realPath = context.getRealPath(path);
"
4185,createExpensiveGraphAsync,"    private CompletableFuture<Object> createExpensiveGraphAsync(String key, Executor executor) {
        CompletableFuture<Object> objectCompletableFuture = new CompletableFuture<>();
        return objectCompletableFuture;
    }"
4186,evit,"    public String evit(Long id) {

        personService.remove(id);
        return ""ok"";"
4187,cacheable3,"    public Person cacheable3(Person person) {

        return personService.findOne3(person);"
4188,cacheable2,"    public Person cacheable2(Person person) {

        return personService.findOne2(person);"
4189,cacheable1,"    public Person cacheable1(Person person) {
        String a = ""a"";
        String[] b = {""1"", ""2""};
        List<Long> c = new ArrayList<>();
        c.add(3L);
        c.add(4L);
        c.add(5L);
        return personService.findOne1(person, a, b, c);
    }"
4190,cacheable,"    public Person cacheable(Person person) {
        return personService.findOne();
    }"
4191,put,"    public long put(@RequestBody Person person) {
        Person p = personService.save(person);
        return p.getId();
    }"
4192,lb,"    public String lb() {
        return echoService.lb();
    }"
4193,echo,"    public String echo() {
        return echoService.echo(username);
    }"
4194,echo,"    public String echo(@PathVariable String str) {
        return echoService.echo(str);
    }"
4196,delete,"    public int delete(Long id) {
        return tbContentMapper.deleteByPrimaryKey(id);
    }"
4197,update,"    public int update(TbContent tbContent) {
        return tbContentMapper.updateByPrimaryKey(tbContent);
    }"
4198,insert,"    public int insert(TbContent tbContent) {
        return tbContentMapper.insert(tbContent);
    }"
4199,selectAll,"    public List<TbContent> selectAll() {
        return tbContentMapper.selectAll();
    }"
4200,getById,"    public TbContent getById(Long id) {
        return tbContentMapper.selectByPrimaryKey(id);
    }"
4201,delete,"    default int delete(Long id) {
        return 0;
    }"
4202,update,"    default int update(TbContent tbContent) {
        return 0;
    }"
4203,insert,"    default int insert(TbContent tbContent) {
        return 0;
    }"
4204,selectAll,"    default List<TbContent> selectAll() {
        return null;
    }"
4205,getById,"    default TbContent getById(Long id) {
        return null;
    }"
4206,testDelete,"    public void testDelete() throws Exception {
        int status = this.mockMvc
                .perform(MockMvcRequestBuilders
                        .delete(""/delete/43"")
                        .header(""Authorization"", ""Bearer 91317816-5036-4b76-86b7-05d96d55774d""))"
4209,testGetById,"    public void testGetById() throws Exception {
        int status = this.mockMvc
                .perform(MockMvcRequestBuilders
                        .get(""/view/28"")
                        .header(""Authorization"", ""Bearer 91317816-5036-4b76-86b7-05d96d55774d""))"
4210,testSelectAll,"    public void testSelectAll() throws Exception {
        int status = this.mockMvc
                .perform(MockMvcRequestBuilders
                        .get(""/"")
                        .header(""Authorization"", ""Bearer 91317816-5036-4b76-86b7-05d96d55774d""))"
4211,main,"    public static void main(String[] args) {
        SpringApplication.run(DubboConsumerApplication.class, args);
    }"
4212,onCreateView,"	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_card,container,false);
        ButterKnife.inject(this, rootView);
        ViewCompat.setElevation(rootView,50);
        textView.setText(""CARD ""+position);
		return rootView;
	}"
4213,onCreate,"	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		position = getArguments().getInt(ARG_POSITION);
	}"
4214,newInstance,"	public static SuperAwesomeCardFragment newInstance(int position) {
		SuperAwesomeCardFragment f = new SuperAwesomeCardFragment();
		Bundle b = new Bundle();
		b.putInt(ARG_POSITION, position);
		f.setArguments(b);
		return f;
	}"
4215,getCustomTabView,"        public View getCustomTabView(ViewGroup parent, int position) {
            MaterialRippleLayout materialRippleLayout = (MaterialRippleLayout) LayoutInflater.from(mContext).inflate(R.layout.custom_tab, parent, false);
            ((ImageView)materialRippleLayout.findViewById(R.id.image)).setImageResource(ICONS[position]);
            return materialRippleLayout;
        }"
4216,isViewFromObject,"        public boolean isViewFromObject(View v, Object o) {
            return v == o;
        }"
4217,destroyItem,"        public void destroyItem(ViewGroup container, int position, Object view) {
            container.removeView((View) view);
        }"
4218,instantiateItem,"        public Object instantiateItem(ViewGroup container, int position) {
            TextView textview= (TextView) LayoutInflater.from(mContext).inflate(R.layout.fragment_quickcontact,container,false);
            textview.setText(""PAGE ""+position);
            container.addView(textview);
            return textview;
        }"
4219,getPageTitle,"        public CharSequence getPageTitle(int position) {
            return super.getPageTitle(position);
        }"
4220,getCount,"        public int getCount() {
            return ICONS.length;
        }"
4223,newInstance,"    public static QuickContactFragment newInstance() {
        QuickContactFragment quickContactFragment = new QuickContactFragment();
        return quickContactFragment;
    }"
4224,getItem,"        public Fragment getItem(int position) {
            return SuperAwesomeCardFragment.newInstance(position);
        }"
4225,getCount,"        public int getCount() {
            return TITLES.length;
        }"
4226,getPageTitle,"        public CharSequence getPageTitle(int position) {
            return TITLES[position];
        }"
4227,onRestoreInstanceState,"    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        currentColor = savedInstanceState.getInt(""currentColor"");
        changeColor(currentColor);
    }"
4228,onSaveInstanceState,"    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt(""currentColor"", currentColor);
    }"
4229,onColorClicked,"    public void onColorClicked(View v) {
        int color = Color.parseColor(v.getTag().toString());
        changeColor(color);
    }"
4231,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_contact:
                QuickContactFragment.newInstance().show(getSupportFragmentManager(), ""QuickContactFragment"");"
4232,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }"
4233,onTabReselected,"            public void onTabReselected(int position) {
                Toast.makeText(MainActivity.this, ""Tab reselected: "" + position, Toast.LENGTH_SHORT).show();
            }"
4235,postToMainThread,"    private static void postToMainThread(final Runnable run) {
        if (run == null) {
            return;
        }
"
4236,doAsSyncJob,"    public void doAsSyncJob(final long blockTime, final Runnable r) {
        SLogger.i(TAG, ""doAsSyncJob"");
        if (r == null) {
            return;
        }
        countDownWait = new CountDownLatch(1);
"
4237,countDown,"    public void countDown(){
        if (countDownWait != null) {
            countDownWait.countDown();"
4238,reportError,"   public static void reportError(int errCode, String errMsg, Exception e) {
      if (reporter != null) {
         SLogger.i(TAG, ""reporter errCode:%s errMsg:%s exception:%s"", errCode, errMsg, e.getMessage());"
4239,reportError,"   public static void reportError(int errCode, String errMsg) {
      if (reporter != null) {
         SLogger.i(TAG, ""reporter errCode:%s errMsg:%s"", errCode, errMsg);"
4240,setReporterImp,"   public static void setReporterImp(ISoterReporter reporterImp) {
      if (reporterImp == null) {
         throw new RuntimeException(""logInstance can not be null"");
      }"
4241,newArray,"        public SoterSignResult[] newArray(int size) {
            return new SoterSignResult[size];
        }"
4242,createFromParcel,"        public SoterSignResult createFromParcel(Parcel in) {
            return new SoterSignResult(in);
        }"
4244,writeToParcel,"    public void writeToParcel(Parcel dest, int flags) {
        dest.writeInt(resultCode);
        dest.writeByteArray(exportData);
        dest.writeInt(exportDataLength);
    }"
4245,getSaltLen,"    public int getSaltLen() {
        return saltLen;
    }"
4246,getCpuId,"    public String getCpuId() {
        return cpuId;
    }"
4247,getFpVersion,"    public String getFpVersion() {
        return FpVersion;
    }"
4248,getFpName,"    public String getFpName() {
        return FpName;
    }"
4249,getTEEVersion,"    public String getTEEVersion() {
        return TEEVersion;
    }"
4250,getTEEName,"    public String getTEEName() {
        return TEEName;
    }"
4251,getCounter,"    public long getCounter() {
        return counter;
    }"
4252,getFid,"    public String getFid() {
        return fid;
    }"
4253,getRawValue,"    public String getRawValue() {

        return rawValue;"
4254,setSaltLen,"    private void setSaltLen(int saltLen) {
        this.saltLen = saltLen;
    }"
4255,setFpVersion,"    private void setFpVersion(String fpVersion) {
        FpVersion = fpVersion;
    }"
4256,setFpName,"    private void setFpName(String fpName) {
        FpName = fpName;
    }"
4257,setTEEVersion,"    private void setTEEVersion(String TEEVersion) {
        this.TEEVersion = TEEVersion;
    }"
4258,setTEEName,"    private void setTEEName(String TEEName) {
        this.TEEName = TEEName;
    }"
4259,setCounter,"    private void setCounter(long counter) {
        this.counter = counter;
    }"
4260,setFid,"    private void setFid(String fid) {
        this.fid = fid;
    }"
4261,setRawValue,"    private void setRawValue(String rawValue) {
        this.rawValue = rawValue;
    }"
4263,toString,"    public String toString() {
        return ""SoterSignatureResult{"" +
                ""rawValue='"" + rawValue + '\'' +"
4264,setCpuId,"    public void setCpuId(String cpuId) {
        this.cpuId = cpuId;
    }"
4265,setSignature,"    public void setSignature(String signature) {
        this.signature = signature;
    }"
4266,getSignature,"    public String getSignature() {
        return signature;
    }"
4267,setJsonValue,"    private void setJsonValue(String jsonValue) {
        this.jsonValue = jsonValue;
    }"
4268,getJsonValue,"    public String getJsonValue() {
        return jsonValue;
    }"
4269,newArray,"        public SoterSessionResult[] newArray(int size) {
            return new SoterSessionResult[size];
        }"
4270,createFromParcel,"        public SoterSessionResult createFromParcel(Parcel in) {
            return new SoterSessionResult(in);
        }"
4272,writeToParcel,"    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(session);
        dest.writeInt(resultCode);
    }"
4273,setRawJson,"    public void setRawJson(String rawJson) {
        this.rawJson = rawJson;
    }"
4274,getRawJson,"    public String getRawJson() {
        return rawJson;
    }"
4276,getPub_key_in_x509,"    public String getPub_key_in_x509() {
        return pub_key_in_x509;
    }"
4277,getCpu_id,"    public String getCpu_id() {
        return cpu_id;
    }"
4278,getUid,"    public int getUid() {
        return uid;
    }"
4281,setPub_key_in_x509,"    public void setPub_key_in_x509(String pub_key_in_x509) {
        this.pub_key_in_x509 = pub_key_in_x509;
    }"
4282,setCpu_id,"    public void setCpu_id(String cpu_id) {
        this.cpu_id = cpu_id;
    }"
4283,setUid,"    public void setUid(int uid) {
        this.uid = uid;
    }"
4284,setCounter,"    public void setCounter(long counter) {
        this.counter = counter;
    }"
4285,loadDeviceInfo,"    private void loadDeviceInfo(X509Certificate attestationCert) {
        try{
            CertUtil.extractAttestationSequence(attestationCert,this);"
4286,toString,"    public String toString() {
        return ""SoterPubKeyModel{"" +
                ""counter="" + counter +"
4287,writeToParcel,"    public void writeToParcel(Parcel dest, int flags) {
        dest.writeValue(result);
    }"
4289,newArray,"        public SoterExtraParam[] newArray(int size) {
            return new SoterExtraParam[size];
        }"
4290,createFromParcel,"        public SoterExtraParam createFromParcel(Parcel in) {
            return new SoterExtraParam(in);
        }"
4291,newArray,"        public SoterExportResult[] newArray(int size) {
            return new SoterExportResult[size];
        }"
4292,createFromParcel,"        public SoterExportResult createFromParcel(Parcel in) {
            return new SoterExportResult(in);
        }"
4295,setParam,"    public static void setParam(@NonNull String key, Object value) {
        synchronized (SoterExParametersTrebleImpl.class) {
            if (FINGERPRINT_TYPE.equals(key)) {"
4296,getParam,"    public Object getParam(@NonNull String key, Object defVal) {
        synchronized (SoterExParametersTrebleImpl.class) {
            if (FINGERPRINT_TYPE.equals(key)) {"
4297,getFingerprintHardwarePosition,"    public int[] getFingerprintHardwarePosition() {
        Object result = getParam(ISoterExParameters.FINGERPRINT_HARDWARE_POSITION, null);
        if (result instanceof int[]) {
            return (int[]) result;"
4298,getFingerprintType,"    public int getFingerprintType() {
        Object result = getParam(ISoterExParameters.FINGERPRINT_TYPE, ISoterExParameters.FINGERPRINT_TYPE_UNDEFINE);
        if (result instanceof Integer) {
            return (int) result;"
4299,getParam,"    public Object getParam(String key, Object defVal) {
        if (impl != null) {
            return impl.getParam(key, defVal);
        }"
4300,getInstance,"    public static SoterExParameters getInstance() {
        if(instance == null) {
            synchronized (SoterExParameters.class) {"
4301,newArray,"        public SoterDeviceResult[] newArray(int size) {
            return new SoterDeviceResult[size];
        }"
4302,createFromParcel,"        public SoterDeviceResult createFromParcel(Parcel in) {
            return new SoterDeviceResult(in);
        }"
4305,getIsBiometricPayOpened,"    public boolean getIsBiometricPayOpened(int biometricType) {
        switch (biometricType){
            case ConstantsSoter.FINGERPRINT_AUTH:
                return isFingerprintPayOpened;"
4306,setIsBiometricPayOpened,"    public void setIsBiometricPayOpened(Context context, boolean isOpened, int biometricType) {
        switch (biometricType){
            case ConstantsSoter.FINGERPRINT_AUTH:{"
4307,init,"    public void init(@NonNull Context context) {
        isFingerprintPayOpened = context.getSharedPreferences(DEMO_DISK_CACHE_SP,
                Context.MODE_PRIVATE).getBoolean(KEY_IS_FINGERPRINT_PAY_OPENED, false);
        isFaceidPayOpened = context.getSharedPreferences(DEMO_DISK_CACHE_SP,"
4308,getInstance,"    public static SoterDemoData getInstance() {
        if(sInstance == null) {
            synchronized (SoterDemoData.class) {"
4309,reset,"    public static void reset() {
        sSoterDelegateImp.reset();
    }"
4310,isTriggeredOOM,"    public static boolean isTriggeredOOM() {
        return sSoterDelegateImp.isTriggeredOOM();
    }"
4311,onTriggerOOM,"    public static void onTriggerOOM() {
        sSoterDelegateImp.onTriggeredOOM();
    }"
4312,setImplement,"    public static void setImplement(@NonNull ISoterDelegate instance) {
        sSoterDelegateImp = instance;
    }"
4313,reset,"        public void reset() {
            isTriggeredOOM = false;
        }"
4314,isTriggeredOOM,"        public boolean isTriggeredOOM() {
            return isTriggeredOOM;
        }"
4315,onTriggeredOOM,"        public void onTriggeredOOM() {
            SLogger.e(TAG, ""soter: triggered OOM. using default imp, just record the flag"");
            this.isTriggeredOOM = true;
        }"
4317,isTriggeredOOM,"        boolean isTriggeredOOM();
        void reset();"
4318,onTriggeredOOM,"        void onTriggeredOOM();
        boolean isTriggeredOOM();"
4319,getMessageDigest,"    public static String getMessageDigest(byte[] buffer) {
        char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
        try {
            MessageDigest mdTemp = MessageDigest.getInstance(""MD5"");"
4320,ticksToNowInMs,"    public static long ticksToNowInMs(long beforeTicks) {
        return (System.nanoTime() - beforeTicks) / 1000 / 1000;
    }"
4321,getCurrentTicks,"    public static long getCurrentTicks() {
        return System.nanoTime();
    }"
4322,nullAsNil,"    public static String nullAsNil(String object) {
        return object == null ? """" : object;
    }"
4323,isNullOrNil,"    public static boolean isNullOrNil(final int[] object) {
        return (object == null) || (object.length <= 0);
    }"
4324,isNullOrNil,"    public static boolean isNullOrNil(final byte[] object) {
        return (object == null) || (object.length <= 0);
    }"
4325,isNullOrNil,"    public static boolean isNullOrNil(final String object) {
        return (object == null) || (object.length() <= 0);
    }"
4331,getFib,"    private static long getFib(long n){
        if(n < 0){
            return -1;"
4332,run,"                public void run() {
                    try {
                        if (mSoterService == null) {"
4333,updateExtraParam,"    public void updateExtraParam() {
        try {
            Thread thread = new Thread(new Runnable() {"
4334,getVersion,"    public int getVersion() {
        SLogger.i(TAG,""soter: getVersion in"");

        if(!isNativeSupportSoter()){
            return 0;
        }

        if(mContext == null) {
            SLogger.w(TAG, ""soter: context is null"");"
4335,finishSign,"    public byte[] finishSign(long signSession) throws Exception{

        SLogger.i(TAG, ""soter: finishSign in"");

        if(!isNativeSupportSoter()){
            return null;
        }

        if(mContext == null) {
            SLogger.w(TAG, ""soter: context is null"");
            return null;"
4336,initSigh,"    public SoterSessionResult initSigh(String kname, String challenge) {

        SLogger.i(TAG, ""soter: initSigh in"");

        if(!isNativeSupportSoter()){
            return null;
        }

        if(mContext == null) {
            SLogger.w(TAG, ""soter: context is null"");"
4337,hasAuthKey,"    public boolean hasAuthKey(String authKeyName) {

        SLogger.i(TAG, ""soter: hasAuthKey in"");

        if(!isNativeSupportSoter()){
            return false;
        }
"
4338,getAuthInitAndSign,"    public Signature getAuthInitAndSign(String useKeyAlias) {
        return null;
    }"
4339,getAuthKeyModel,"    public SoterPubKeyModel getAuthKeyModel(String authKeyName) {
        SLogger.i(TAG,""soter: getAuthKeyModel in"");

        if(!isNativeSupportSoter()){
            return null;
        }

        if(mContext == null) {
            SLogger.w(TAG, ""soter: context is null"");
            return null;"
4341,initAuthKeySignature,"    public Signature initAuthKeySignature(String useKeyAlias) throws InvalidKeyException, NoSuchProviderException,
            NoSuchAlgorithmException, KeyStoreException, IOException,
            CertificateException, UnrecoverableEntryException {"
4342,removeAuthKey,"    public SoterCoreResult removeAuthKey(String authKeyName, boolean isAutoDeleteASK) {
        SLogger.i(TAG,""soter: removeAuthKey in"");

        if(!isNativeSupportSoter()){
            return new SoterCoreResult(ERR_REMOVE_AUTH_KEY);
        }

        if(mContext == null) {
            SLogger.w(TAG, ""soter: context is null"");"
4343,generateAuthKey,"    public SoterCoreResult generateAuthKey(String authKeyName) {
        SLogger.i(TAG,""soter: generateAuthKey in"");

        if(!isNativeSupportSoter()){
            return new SoterCoreResult(ERR_AUTH_KEY_GEN_FAILED);
        }

        if(mContext == null) {
            SLogger.w(TAG, ""soter: context is null"");"
4344,getAppGlobalSecureKeyModel,"    public SoterPubKeyModel getAppGlobalSecureKeyModel() {
        SLogger.i(TAG,""soter: getAppGlobalSecureKeyModel in"");


        if(!isNativeSupportSoter()){
            return null;
        }

        if(mContext == null) {
            SLogger.w(TAG, ""soter: context is null"");"
4345,isAppGlobalSecureKeyValid,"    public boolean isAppGlobalSecureKeyValid() {
        SLogger.i(TAG,""soter: isAppGlobalSecureKeyValid in"");
        return hasAppGlobalSecureKey() && getAppGlobalSecureKeyModel() != null;
    }"
4346,hasAppGlobalSecureKey,"    public boolean hasAppGlobalSecureKey() {
        SLogger.i(TAG, ""soter: hasAppGlobalSecureKey in"");

        if(!isNativeSupportSoter()){
            return false;
        }

        if(mContext == null) {"
4347,removeAppGlobalSecureKey,"    public SoterCoreResult removeAppGlobalSecureKey() {
        SLogger.i(TAG, ""soter: removeAppGlobalSecureKey in"");

        if(!isNativeSupportSoter()){
            return new SoterCoreResult(ERR_REMOVE_ASK);
        }

        if(mContext == null) {
            SLogger.w(TAG, ""soter: context is null"");"
4348,generateAppGlobalSecureKey,"    public SoterCoreResult generateAppGlobalSecureKey() {
        SLogger.i(TAG,""soter: generateAppSecureKey in"");

        if(!isNativeSupportSoter()){
            return new SoterCoreResult(ERR_ASK_GEN_FAILED);
        }

        if(mContext == null) {
            SLogger.w(TAG, ""soter: context is null"");"
4349,checkIfServiceNull,"    private boolean checkIfServiceNull() {
        if(mSoterService == null) {
            SLogger.w(TAG, ""soter: soter service not found"");
            if (serviceListener != null) {"
4350,isNativeSupportSoter,"    public boolean isNativeSupportSoter() {

        if(SoterDelegate.isTriggeredOOM()) {
            SLogger.w(TAG, ""soter: the device has already triggered OOM. mark as not support"");"
4351,unbindService,"    public void unbindService(){
        if (hasBind) {
            try {"
4352,scheduleTimeoutTask,"    private void scheduleTimeoutTask(boolean isCycle) {
        final long checkDelay = getFib(noResponseCount);
        SLogger.i(TAG, ""soter: scheduleTimeoutTask isCycle:%b noResponseCount:%d checkDelay:%d "", isCycle, noResponseCount, checkDelay);
        if (isCycle || noResponseCount <= INITIAL_FIB_VALUE) {
            mMainLooperHandler.postDelayed(retryFunc, checkDelay * 1000);"
4353,run,"        public void run() {
            if (!canRetry || !isInitializeSuccessed) {
                SLogger.i(TAG, ""soter: retryFunc stop, canRetry:%b isInitializeSuccessed:%b"", canRetry, isInitializeSuccessed);
                return;
            }"
4354,bindService,"    private void bindService(boolean isCycle) {
        Intent intent = new Intent();
        intent.setAction(""com.tencent.soter.soterserver.ISoterService"");
        intent.setPackage(""com.tencent.soter.soterserver"");

        if(mContext == null) {
            SLogger.e(TAG, ""soter: bindService context is null "");
            return;
        }
        connectState = CONNECTING;

        if (serviceListener != null) {"
4355,bindService,"    public void bindService() {
        bindService(false);
    }"
4356,bindServiceIfNeeded,"    public void bindServiceIfNeeded() {
        try {
            if (connectState != CONNECTED || mSoterService == null || mSoterService.asBinder() == null || !mSoterService.asBinder().isBinderAlive() || !mSoterService.asBinder().pingBinder()) {"
4357,setTrebleServiceListener,"    public void setTrebleServiceListener(SoterCoreTrebleServiceListener listener) {
        serviceListener = listener;
    }"
4358,releaseTrebleServiceConnection,"    public void releaseTrebleServiceConnection() {
        canRetry = false;
        unbindService();
    }"
4359,triggerTrebleServiceConnecting,"    public void triggerTrebleServiceConnecting() {
        resetDisconnectCount();
        bindServiceIfNeeded();
    }"
4360,isTrebleServiceConnected,"    public boolean isTrebleServiceConnected() {
        return connectState == CONNECTED;
    }"
4361,isInitializing,"    public static boolean isInitializing() {
        return isInitializing;
    }"
4362,run,"            public void run() {
                bindServiceIfNeeded();
                SLogger.i(TAG, ""soter: initSoter binding"");
            }"
4363,initSoter,"    public boolean initSoter(Context context) {
        mContext = context;
        SLogger.i(TAG, ""soter: initSoter in"");
        isInitializing = true;
        
        syncJob.doAsSyncJob(DEFAULT_BLOCK_TIME, new Runnable() {
            @Override
            public void run() {"
4364,resetDisconnectCount,"    private void resetDisconnectCount() {
        disconnectCount = 0;
    }"
4365,run,"                public void run() {
                    bindServiceIfNeeded();
                }"
4366,rebindService,"    private void rebindService() {
        if (!canRetry) {
            return;
        }
        disconnectCount++;
        long duration = (SystemClock.elapsedRealtime() - lastBindTime) / 1000;
        long fib = getFib(disconnectCount);
        long delay = fib - duration;
        SLogger.i(TAG, ""fib: %s, rebind delay: %sS"", fib, delay);"
4368,onServiceDisconnected,"        public void onServiceDisconnected(ComponentName className) {
            synchronized (lock) {
                SLogger.i(TAG, ""soter: unBinding is done - Service disconnected"");"
4371,toString,"    public String toString() {
        return ""SoterCoreResult{"" +
                ""errCode="" + errCode +"
4372,setErrMsg,"    public void setErrMsg(String errMsg) {
        this.errMsg = errMsg;
    }"
4373,getErrMsg,"    public String getErrMsg() {
        return errMsg;
    }"
4374,setErrCode,"    public void setErrCode(int errCode) {
        this.errCode = errCode;
    }"
4375,getErrCode,"    public int getErrCode() {
        return errCode;
    }"
4376,equals,"    public boolean equals(Object obj) {
        return obj instanceof SoterCoreResult && ((SoterCoreResult) obj).errCode == errCode;
    }"
4377,isSuccess,"    public boolean isSuccess() {
        return errCode == ERR_OK;
    }"
4378,setAskName,"    public void setAskName(String AskName) {
        this.mAskName = AskName;
    }"
4379,getAskName,"    public String getAskName() {
        return mAskName;
    }"
4380,getInstance,"    public static SoterCoreData getInstance() {
        if(instance == null) {
            synchronized (SoterCoreData.class) {"
4381,initAuthKeySignature,"    public Signature initAuthKeySignature(String useKeyAlias) throws InvalidKeyException, NoSuchProviderException,
            NoSuchAlgorithmException,
            KeyStoreException,
            IOException,
            CertificateException,
            UnrecoverableEntryException {
        if (SoterCoreUtil.isNullOrNil(useKeyAlias)) {
            SLogger.e(TAG, ""soter: auth key name is null or nil. abort."");"
4382,getAuthInitAndSign,"    public Signature getAuthInitAndSign(String useKeyAlias) {
        if (SoterCoreUtil.isNullOrNil(useKeyAlias)) {
            SLogger.e(TAG, ""soter: auth key name is null or nil. abort."");
            return null;"
4383,getAuthKeyModel,"    public SoterPubKeyModel getAuthKeyModel(String authKeyName) {
        if (SoterCoreUtil.isNullOrNil(authKeyName)) {
            SLogger.e(TAG, ""soter: auth key name is null or nil. abort."");
            return null;
        }"
4384,isAuthKeyValid,"    public boolean isAuthKeyValid(String authKeyName, @SuppressWarnings(""SameParameterValue"") boolean autoDelIfNotValid) {
        SLogger.i(TAG, String.format(""soter: checking key valid: auth key name: %s, autoDelIfNotValid: %b "", authKeyName, autoDelIfNotValid));
        if (SoterCoreUtil.isNullOrNil(authKeyName)) {
            SLogger.e(TAG, ""soter: checking key valid: authkey name not correct"");
            return false;"
4385,finishSign,"    public byte[] finishSign(long signSession) throws Exception {
        return new byte[0];
    }"
4386,initSigh,"    public SoterSessionResult initSigh(String kname, String challenge) {
        return null;
    }"
4387,hasAuthKey,"    public boolean hasAuthKey(String authKeyName) {
        if (SoterCoreUtil.isNullOrNil(authKeyName)) {
            SLogger.e(TAG, ""soter: authkey name not correct"");
            return false;
        }"
4388,removeAuthKey,"    public SoterCoreResult removeAuthKey(String authKeyName, boolean isAutoDeleteASK) {
        if (SoterCoreUtil.isNullOrNil(authKeyName)) {
            SLogger.e(TAG, ""soter: auth key name is null or nil. abort."");
            return new SoterCoreResult(ERR_PARAMERROR, ""no authKeyName"");
        }
        SLogger.i(TAG, ""soter: start remove key: "" + authKeyName);"
4389,generateAuthKey,"    public SoterCoreResult generateAuthKey(String authKeyName) {
        if (SoterCoreUtil.isNullOrNil(authKeyName)) {
            SLogger.e(TAG, ""soter: auth key name is null or nil. abort."");
            return new SoterCoreResult(ERR_PARAMERROR, ""no authKeyName"");
        }"
4390,getAppGlobalSecureKeyModel,"    public SoterPubKeyModel getAppGlobalSecureKeyModel() {
        SLogger.i(TAG, ""soter: start get app global secure key pub"");
        if (isNativeSupportSoter()) {
            KeyStore keyStore;
            try {"
4391,isAppGlobalSecureKeyValid,"    public boolean isAppGlobalSecureKeyValid() {
        return hasAppGlobalSecureKey() && getAppGlobalSecureKeyModel() != null;
    }"
4392,hasAppGlobalSecureKey,"    public boolean hasAppGlobalSecureKey() {
        try {
            KeyStore keyStore = KeyStore.getInstance(providerName);
            keyStore.load(null);"
4393,removeAppGlobalSecureKey,"    public SoterCoreResult removeAppGlobalSecureKey() {
        SLogger.i(TAG, ""soter: start remove app global secure key"");
        if (isNativeSupportSoter()) {
            try {
                KeyStore keyStore = KeyStore.getInstance(providerName);"
4394,generateAppGlobalSecureKey,"    public SoterCoreResult generateAppGlobalSecureKey() {
        SLogger.i(TAG, ""soter: start generate ask"");
        if (isNativeSupportSoter()) {
            try {
                KeyStore keyStore = KeyStore.getInstance(providerName);"
4395,isNativeSupportSoter,"    public boolean isNativeSupportSoter() {
        if(!isAlreadyCheckedSetUp) {
            setUp();
        }
        if(SoterDelegate.isTriggeredOOM()) {
            SLogger.w(TAG, ""hy: the device has already triggered OOM. mark as not support"");
            return false;
        }
        Provider[] providers = Security.getProviders();"
4396,initSoter,"    public boolean initSoter(Context context) {
        setUp();
        return true;
    }"
4397,setUp,"    public static void setUp() {
        Class<?> clazz;
        try {
            clazz = Class.forName(""android.security.keystore.SoterKeyStoreProvider"");"
4399,toInt,"    protected static int toInt(byte[] bRefArr) {
        int iOutcome = 0;
        byte bLoop;

        for (int i = 0; i < bRefArr.length; i++) {
            bLoop = bRefArr[i];"
4400,initAuthKeySignature,"    public abstract Signature initAuthKeySignature(String useKeyAlias) throws InvalidKeyException, NoSuchProviderException,
            NoSuchAlgorithmException,"
4402,setTrebleServiceListener,"    public void setTrebleServiceListener(SoterCoreTrebleServiceListener listener) {
"
4403,releaseTrebleServiceConnection,"    public void releaseTrebleServiceConnection() {
"
4404,triggerTrebleServiceConnecting,"    public void triggerTrebleServiceConnecting() {
"
4405,isTrebleServiceConnected,"    public boolean isTrebleServiceConnected() {
        return true;
    }"
4406,finishSign,"    public abstract byte[] finishSign(long signSession) throws Exception;
"
4407,initSigh,"    public abstract SoterSessionResult initSigh(String kname, String challenge) ;
"
4408,hasAuthKey,"    public abstract boolean hasAuthKey(String authKeyName);
"
4409,getAuthInitAndSign,"    public abstract Signature getAuthInitAndSign(String useKeyAlias);
"
4410,getAuthKeyModel,"    public abstract SoterPubKeyModel getAuthKeyModel(String authKeyName);
"
4411,isAuthKeyValid,"    public abstract boolean isAuthKeyValid(String authKeyName,  boolean autoDelIfNotValid);
"
4412,removeAuthKey,"    public abstract SoterCoreResult removeAuthKey(String authKeyName, boolean isAutoDeleteASK);
"
4413,generateAuthKey,"    public abstract SoterCoreResult generateAuthKey(String authKeyName);
"
4414,getAppGlobalSecureKeyModel,"    public abstract SoterPubKeyModel getAppGlobalSecureKeyModel();
"
4415,isAppGlobalSecureKeyValid,"    public abstract boolean isAppGlobalSecureKeyValid();
"
4416,hasAppGlobalSecureKey,"    public abstract boolean hasAppGlobalSecureKey();
"
4417,removeAppGlobalSecureKey,"    public abstract SoterCoreResult removeAppGlobalSecureKey();
"
4418,generateAppGlobalSecureKey,"    public abstract SoterCoreResult generateAppGlobalSecureKey();
"
4419,isNativeSupportSoter,"    public abstract boolean isNativeSupportSoter() ;
"
4420,initSoter,"    public abstract boolean initSoter(Context context);
"
4421,setLastFreezeTimeInDB,"    private static void setLastFreezeTimeInDB(Context context, long lastFreezeTime) {
        if(context == null) {
            SLogger.e(TAG, ""soter: context is null"");
            return;
        }
        SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();"
4422,getLastFreezeTimeInDB,"    private static long getLastFreezeTimeInDB(Context context) {
        return PreferenceManager.getDefaultSharedPreferences(context).getLong(KEY_LAST_FREEZE_TIME, -1);
    }"
4423,getCurrentFailTimeInDB,"    private static int getCurrentFailTimeInDB(Context context) {
        return PreferenceManager.getDefaultSharedPreferences(context).getInt(KEY_FAIL_TIMES, 0);
    }"
4424,setCurrentFailTimeInDB,"    private static void setCurrentFailTimeInDB(Context context, int currentFailTime) {
        if(context == null) {
            SLogger.e(TAG, ""soter: context is null"");
            return;
        }
        SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();"
4425,isCurrentFailTimeAvailable,"    static boolean isCurrentFailTimeAvailable(Context context) {
        if(getCurrentFailTime(context) < MAX_FAIL_NUM) {
            SLogger.i(TAG, ""soter: fail time available"");
            return true;"
4426,isCurrentTweenTimeAvailable,"    static boolean isCurrentTweenTimeAvailable(Context context) {
        int tweenSec = (int)((System.currentTimeMillis()- getLastFreezeTime(context)) / 1000);
        SLogger.i(TAG, ""soter: tween sec after last freeze: "" + tweenSec);
        if(tweenSec > FREEZE_SECOND) {
            SLogger.d(TAG, ""soter: after last freeze"");
            return true;"
4427,addFailTime,"    static void addFailTime(Context context) {
        Integer currentFailTime = getCurrentFailTime(context);
        setCurrentFailTime(context, ++currentFailTime);
    }"
4428,unFreeze,"    static void unFreeze(Context context) {
        setLastFreezeTime(context, DEFAULT_FREEZE_TIME);
        setCurrentFailTime(context, 0);
    }"
4430,setLastFreezeTime,"    private static void setLastFreezeTime(Context context, long lastFreezeTime) {
        SLogger.i(TAG, ""soter: setting last freeze time: "" + lastFreezeTime);
        if(lastFreezeTime < -1L) {
            SLogger.w(TAG, ""soter: illegal setLastFreezeTime"");
            return;"
4432,setCurrentFailTime,"    private static void setCurrentFailTime(Context context, int currentFailTime) {
        SLogger.i(TAG, ""soter: setting to time: "" + currentFailTime);
        if(currentFailTime < 0) {
            SLogger.w(TAG, ""soter: illegal fail time"");
            return;"
4434,isSystemHasAntiBruteForce,"    static boolean isSystemHasAntiBruteForce() {
        return android.os.Build.VERSION.SDK_INT >= 23;
    }"
4439,isCurrentFailTimeAvailable,"    public static boolean isCurrentFailTimeAvailable(Context context) {
        if(getCurrentFailTime(context) < MAX_FAIL_NUM) {
            SLogger.i(TAG, ""soter: fail time available"");
            return true;"
4440,isCurrentTweenTimeAvailable,"    public static boolean isCurrentTweenTimeAvailable(Context context) {
        int tweenSec = (int)((System.currentTimeMillis()- getLastFreezeTime(context)) / 1000);
        SLogger.i(TAG, ""soter: tween sec after last freeze: "" + tweenSec);
        if(tweenSec > FREEZE_SECOND) {
            SLogger.d(TAG, ""soter: after last freeze"");
            return true;"
4449,printErrStackTrace,"        public void printErrStackTrace(String TAG, Throwable e, String errMsg) {
            e.printStackTrace();
        }"
4450,e,"        public void e(String TAG, String msg, Object... args) {
            try {
                Log.e(TAG, String.format(msg, args));"
4451,w,"        public void w(String TAG, String msg, Object... args) {
            try {
                Log.w(TAG, String.format(msg, args));"
4452,i,"        public void i(String TAG, String msg, Object... args) {
            try {
                Log.i(TAG, String.format(msg, args));"
4453,d,"        public void d(String TAG, String msg, Object... args) {
            try {
                Log.d(TAG, String.format(msg, args));"
4454,v,"        public void v(String TAG, String msg, Object... args) {
            try {
                Log.v(TAG, String.format(msg, args));"
4455,printErrStackTrace,"    public static void printErrStackTrace(String TAG, Throwable e, String errMsg) {
        mLoggerImp.printErrStackTrace(TAG, e, errMsg);
    }"
4456,e,"    public static void e(String TAG, String msg, Object... args) {
        mLoggerImp.e(TAG, msg, args);
    }"
4457,w,"    public static void w(String TAG, String msg, Object... args) {
        mLoggerImp.w(TAG, msg, args);
    }"
4458,i,"    public static void i(String TAG, String msg, Object... args) {
        mLoggerImp.i(TAG, msg, args);
    }"
4459,d,"    public static void d(String TAG, String msg, Object... args) {
        mLoggerImp.d(TAG, msg, args);
    }"
4460,v,"    public static void v(String TAG, String msg, Object... args) {
        mLoggerImp.v(TAG, msg, args);
    }"
4461,setLogImp,"    public static void setLogImp(ISoterLogger logInstance) {
        if (logInstance == null) {
            throw new RuntimeException(""logInstance can not be null"");
        }"
4462,setExtraJson,"    void setExtraJson(JSONObject requestJson) {
        if(requestJson != null) {
            try {"
4463,getNetUrl,"    protected String getNetUrl() {
        return BASE_URL + ""/upload_pay_auth_key"";
    }"
4464,setExtraJson,"    abstract void setExtraJson(JSONObject requestJson);
}"
4465,onNetworkEnd,"    void onNetworkEnd(JSONObject resultJson) {
        if(mCallback != null) {
            mCallback.onNetEnd(new UploadResult(resultJson != null && resultJson.optBoolean(KEY_RESULT, false)));"
4466,execute,"    public void execute() {
        super.execute();
    }"
4467,getSimulateJsonResult,"    JSONObject getSimulateJsonResult(JSONObject requestJson) {
        JSONObject resultJson = new JSONObject();
        try {
            resultJson.put(KEY_RESULT, true);
        } catch (JSONException e) {"
4468,setCallback,"    public void setCallback(ISoterNetCallback<UploadResult> callback) {
        this.mCallback = callback;
    }"
4469,retrievePublicKeyFromJson,"    private String retrievePublicKeyFromJson(String jsonStr) {
        try {
            JSONObject jsonObject = new JSONObject(jsonStr);"
4471,getNetUrl,"    protected String getNetUrl() {
        return BASE_URL + ""/upload_ask_key"";
    }"
4474,setRequest,"    public void setRequest(@NonNull UploadRequest requestDataModel) {
        JSONObject requestJson = new JSONObject();
        try {
            requestJson.put(KEY_REQUEST_KEY_JSON, requestDataModel.mKeyJson);
            requestJson.put(KEY_REQUEST_SIGNATURE, requestDataModel.mKeyJsonSignature);"
4475,onNetworkEnd,"    void onNetworkEnd(JSONObject resultJson) {
        if(mCallback != null) {
            if(resultJson == null) {"
4478,getNetUrl,"    protected String getNetUrl() {
        return BASE_URL + ""/open_fingerprintpay"";
    }"
4479,onNetworkEnd,"    void onNetworkEnd(JSONObject resultJson) {
        if(mCallback != null) {
            if(resultJson != null) {"
4480,getSimulateJsonResult,"    JSONObject getSimulateJsonResult(JSONObject requestJson) {
        JSONObject resultJson = new JSONObject();
        try {
            resultJson.put(KEY_RESULT_IS_OPEN_SUCCESS, true);
        } catch (JSONException e) {"
4482,setCallback,"    public void setCallback(ISoterNetCallback<UploadSignatureResult> callback) {
        this.mCallback = callback;
    }"
4483,setRequest,"    public void setRequest(@NonNull UploadSignatureRequest requestDataModel) {
        JSONObject requestJson = new JSONObject();
        try {
            requestJson.put(KEY_REQUEST_SIGNATURE_JSON, requestDataModel.signatureJson);
            requestJson.put(KEY_REQUEST_SIGNATURE, requestDataModel.signatureData);"
4484,getNetUrl,"    protected String getNetUrl() {
        return BASE_URL + ""/get_is_support"";
    }"
4487,getSimulateJsonResult,"    JSONObject getSimulateJsonResult(JSONObject requestJson) {
        JSONObject result = new JSONObject();
        try {
            result.put(KEY_RESULT_IS_SUPPORT, true);
        } catch (JSONException e) {"
4488,setCallback,"    public void setCallback(ISoterNetCallback<GetSupportResult> callback) {
        mCallback = callback;
    }"
4489,setRequest,"    public void setRequest(@NonNull GetSupportRequest requestDataModel) {
        JSONObject request = new JSONObject();
        try {
            request.put(KEY_REQUEST_DEVICE_REQUEST_JSON, requestDataModel.requestJson);
        } catch (JSONException e) {"
4490,getNetUrl,"    protected String getNetUrl() {
        return BASE_URL + ""/get_challenge"";
    }"
4493,getSimulateJsonResult,"    JSONObject getSimulateJsonResult(JSONObject requestJson) {
        JSONObject jsonObject = new JSONObject();
        try {
            jsonObject.put(KEY_RESULT_CHALLENGE, DEMO_CHALLENGE);
        } catch (JSONException e) {"
4494,setCallback,"    public void setCallback(ISoterNetCallback<GetChallengeResult> callback) {
        this.mCallback = callback;
    }"
4497,onNetworkEnd,"    abstract void onNetworkEnd(JSONObject resultJson);
"
4498,getSimulateJsonResult,"    abstract JSONObject getSimulateJsonResult(JSONObject requestJson);
"
4499,setRequestJson,"    protected void setRequestJson(JSONObject requestJson) {
        if(requestJson != null) {
            mRequestJson = requestJson;"
4500,getAcceptedIssuers,"                        public X509Certificate[] getAcceptedIssuers() {
                            return new X509Certificate[0];
                        }"
4501,checkServerTrusted,"                        public void checkServerTrusted(X509Certificate[] chain,
                                                       String authType) throws CertificateException {"
4502,checkClientTrusted,"                        public void checkClientTrusted(X509Certificate[] chain,
                                                       String authType) throws CertificateException {"
4503,verify,"                        public boolean verify(String hostname, SSLSession session) {
                            return true;
                        }"
4505,execute,"    public void execute() {
        DemoLogger.i(TAG, ""soterdemo: simulate execute"");
        JSONObject result = getSimulateJsonResult(mRequestJson);
        if(result == null) {
            DemoLogger.w(TAG, ""soterdemo: %s no result. regard as network error"", getClass().getSimpleName());
            mResultJson = null;
        } else {
            mResultJson = getSimulateJsonResult(mRequestJson);"
4506,onPayEnd,"        void onPayEnd(boolean isSuccess);
    }"
4507,getNetUrl,"    protected String getNetUrl() {
        return BASE_URL + ""/authentication"";
    }"
4508,onNetworkEnd,"    void onNetworkEnd(JSONObject resultJson) {
        if (resultJson != null) {
            boolean isVerified = resultJson.optBoolean(KEY_RESULT_IS_AUTHENTICATED, false);"
4509,getSimulateJsonResult,"    JSONObject getSimulateJsonResult(JSONObject requestJson) {
        JSONObject resultJson = new JSONObject();
        try {
            resultJson.put(KEY_RESULT_IS_AUTHENTICATED, true);
        } catch (JSONException e) {"
4510,setCallback,"    public void setCallback(ISoterNetCallback<UploadSignatureResult> callback) {
        this.mFingerprintPayCallback = callback;
    }"
4511,setRequest,"    public void setRequest(@NonNull UploadSignatureRequest requestDataModel) {
        JSONObject requestJson = new JSONObject();
        try {
            requestJson.put(KEY_REQUEST_SIGNATURE_JSON, requestDataModel.signatureJson);
            requestJson.put(KEY_REQUEST_SIGNATURE_DATA, requestDataModel.signatureData);"
4512,cloneIfNotEmpty,"    public static byte[] cloneIfNotEmpty(byte[] array) {
        return ((array != null) && (array.length > 0)) ? array.clone() : array;
    }"
4513,cloneIfNotEmpty,"    public static String[] cloneIfNotEmpty(String[] array) {
        return ((array != null) && (array.length > 0)) ? array.clone() : array;
    }"
4514,cloneIfNotNull,"    static Date cloneIfNotNull(Date value) {
        return (value != null) ? (Date) value.clone() : null;
    }"
4515,setUserAuthenticationValidityDurationSeconds,"        public KeyGenParameterSpecCompatBuilder setUserAuthenticationValidityDurationSeconds(int seconds) {
            return null;
        }"
4516,setUserAuthenticationRequired,"        public KeyGenParameterSpecCompatBuilder setUserAuthenticationRequired(boolean required) {
            return null;
        }"
4517,setRandomizedEncryptionRequired,"        public KeyGenParameterSpecCompatBuilder setRandomizedEncryptionRequired(boolean required) {
            return null;
        }"
4518,setBlockModes,"        public KeyGenParameterSpecCompatBuilder setBlockModes(String... blockModes) {
            return null;
        }"
4519,setEncryptionPaddings,"        public KeyGenParameterSpecCompatBuilder setEncryptionPaddings(String... paddings) {
            return null;
        }"
4520,setSignaturePaddings,"        public KeyGenParameterSpecCompatBuilder setSignaturePaddings(String... paddings) {
            return null;
        }"
4521,setDigests,"        public KeyGenParameterSpecCompatBuilder setDigests(String... digests) {
            return null;
        }"
4522,setKeyValidityEnd,"        public KeyGenParameterSpecCompatBuilder setKeyValidityEnd(Date endDate) {
            return null;
        }"
4523,setKeyValidityStart,"        public KeyGenParameterSpecCompatBuilder setKeyValidityStart(Date startDate) {
            return null;
        }"
4524,setCertificateNotAfter,"        public KeyGenParameterSpecCompatBuilder setCertificateNotAfter(Date date) {
            return null;
        }"
4525,setCertificateNotBefore,"        public KeyGenParameterSpecCompatBuilder setCertificateNotBefore(Date date) {
            return null;
        }"
4526,setCertificateSerialNumber,"        public KeyGenParameterSpecCompatBuilder setCertificateSerialNumber(BigInteger serialNumber) {
            return null;
        }"
4527,setCertificateSubject,"        public KeyGenParameterSpecCompatBuilder setCertificateSubject(X500Principal subject) {
            return null;
        }"
4528,setAlgorithmParameterSpec,"        public KeyGenParameterSpecCompatBuilder setAlgorithmParameterSpec(AlgorithmParameterSpec spec) {
            return null;
        }"
4529,setKeySize,"        public KeyGenParameterSpecCompatBuilder setKeySize(int keySize) {
            return null;
        }"
4530,build,"        public AlgorithmParameterSpec build() {
            return null;
        }"
4531,build,"        public AlgorithmParameterSpec build() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
            Class<?> clazz = Class.forName(CLASSNAME);
            Constructor<?> ctor = clazz.getConstructor(String.class,
                    Integer.TYPE,
                    AlgorithmParameterSpec.class,"
4532,setUserAuthenticationValidityDurationSeconds,"        public KeyGenParameterSpecCompatBuilder setUserAuthenticationValidityDurationSeconds(
                int seconds) {
            if (seconds < -1) {
                throw new IllegalArgumentException(""seconds must be -1 or larger"");
            }"
4533,setUserAuthenticationRequired,"        public KeyGenParameterSpecCompatBuilder setUserAuthenticationRequired(boolean required) {
            mUserAuthenticationRequired = required;
            return this;
        }"
4534,setRandomizedEncryptionRequired,"        public KeyGenParameterSpecCompatBuilder setRandomizedEncryptionRequired(boolean required) {
            mRandomizedEncryptionRequired = required;
            return this;
        }"
4535,setBlockModes,"        public KeyGenParameterSpecCompatBuilder setBlockModes(String... blockModes) {
            mBlockModes = cloneIfNotEmpty(blockModes);
            return this;
        }"
4536,setSignaturePaddings,"        public KeyGenParameterSpecCompatBuilder setSignaturePaddings(
                String... paddings) {
            mSignaturePaddings = cloneIfNotEmpty(paddings);
            return this;"
4537,setEncryptionPaddings,"        public KeyGenParameterSpecCompatBuilder setEncryptionPaddings(
                String... paddings) {
            mEncryptionPaddings = cloneIfNotEmpty(paddings);
            return this;"
4538,setDigests,"        public KeyGenParameterSpecCompatBuilder setDigests(String... digests) {
            mDigests = cloneIfNotEmpty(digests);
            return this;
        }"
4539,setKeyValidityForConsumptionEnd,"        public KeyGenParameterSpecCompatBuilder setKeyValidityForConsumptionEnd(Date endDate) {
            mKeyValidityForConsumptionEnd = cloneIfNotNull(endDate);
            return this;
        }"
4540,setKeyValidityForOriginationEnd,"        public KeyGenParameterSpecCompatBuilder setKeyValidityForOriginationEnd(Date endDate) {
            mKeyValidityForOriginationEnd = cloneIfNotNull(endDate);
            return this;
        }"
4541,setKeyValidityEnd,"        public KeyGenParameterSpecCompatBuilder setKeyValidityEnd(Date endDate) {
            setKeyValidityForOriginationEnd(endDate);
            setKeyValidityForConsumptionEnd(endDate);
            return this;
        }"
4542,setKeyValidityStart,"        public KeyGenParameterSpecCompatBuilder setKeyValidityStart(Date startDate) {
            mKeyValidityStart = cloneIfNotNull(startDate);
            return this;
        }"
4543,setCertificateNotAfter,"        public KeyGenParameterSpecCompatBuilder setCertificateNotAfter(Date date) {
            if (date == null) {
                throw new NullPointerException(""date == null"");
            }
            mCertificateNotAfter = cloneIfNotNull(date);"
4544,setCertificateNotBefore,"        public KeyGenParameterSpecCompatBuilder setCertificateNotBefore(Date date) {
            if (date == null) {
                throw new NullPointerException(""date == null"");
            }
            mCertificateNotBefore = cloneIfNotNull(date);"
4545,setCertificateSerialNumber,"        public KeyGenParameterSpecCompatBuilder setCertificateSerialNumber(BigInteger serialNumber) {
            if (serialNumber == null) {
                throw new NullPointerException(""serialNumber == null"");
            }
            mCertificateSerialNumber = serialNumber;"
4546,setCertificateSubject,"        public KeyGenParameterSpecCompatBuilder setCertificateSubject(X500Principal subject) {
            if (subject == null) {
                throw new NullPointerException(""subject == null"");
            }
            mCertificateSubject = subject;"
4547,setAlgorithmParameterSpec,"        public KeyGenParameterSpecCompatBuilder setAlgorithmParameterSpec(AlgorithmParameterSpec spec) {
            if (spec == null) {
                throw new NullPointerException(""spec == null"");
            }
            mSpec = spec;"
4548,setKeySize,"        public KeyGenParameterSpecCompatBuilder setKeySize(int keySize) {
            if (keySize < 0) {
                throw new IllegalArgumentException(""keySize < 0"");
            }
            mKeySize = keySize;"
4549,setUserAuthenticationValidityDurationSeconds,"        public KeyGenParameterSpecCompatBuilder setUserAuthenticationValidityDurationSeconds(int seconds) {
            builder.setUserAuthenticationValidityDurationSeconds(seconds);
            return this;
        }"
4550,setUserAuthenticationRequired,"        public KeyGenParameterSpecCompatBuilder setUserAuthenticationRequired(boolean required) {
            builder.setUserAuthenticationRequired(required);
            return this;
        }"
4551,setRandomizedEncryptionRequired,"        public KeyGenParameterSpecCompatBuilder setRandomizedEncryptionRequired(boolean required) {
            builder.setRandomizedEncryptionRequired(required);
            return this;
        }"
4552,setBlockModes,"        public KeyGenParameterSpecCompatBuilder setBlockModes(String... blockModes) {
            builder.setBlockModes(blockModes);
            return this;
        }"
4553,setEncryptionPaddings,"        public KeyGenParameterSpecCompatBuilder setEncryptionPaddings(String... paddings) {
            builder.setEncryptionPaddings(paddings);
            return this;
        }"
4554,setSignaturePaddings,"        public KeyGenParameterSpecCompatBuilder setSignaturePaddings(String... paddings) {
            builder.setSignaturePaddings(paddings);
            return this;
        }"
4555,setDigests,"        public KeyGenParameterSpecCompatBuilder setDigests(String... digests) {
            builder.setDigests(digests);
            return this;
        }"
4556,setKeyValidityEnd,"        public KeyGenParameterSpecCompatBuilder setKeyValidityEnd(Date endDate) {
            builder.setKeyValidityEnd(endDate);
            return this;
        }"
4557,setKeyValidityStart,"        public KeyGenParameterSpecCompatBuilder setKeyValidityStart(Date startDate) {
            builder.setKeyValidityStart(startDate);
            return this;
        }"
4558,setCertificateNotAfter,"        public KeyGenParameterSpecCompatBuilder setCertificateNotAfter(Date date) {
            builder.setCertificateNotAfter(date);
            return this;
        }"
4559,setCertificateNotBefore,"        public KeyGenParameterSpecCompatBuilder setCertificateNotBefore(Date date) {
            builder.setCertificateNotBefore(date);
            return this;
        }"
4560,setCertificateSerialNumber,"        public KeyGenParameterSpecCompatBuilder setCertificateSerialNumber(BigInteger serialNumber) {
            builder.setCertificateSerialNumber(serialNumber);
            return this;
        }"
4561,setCertificateSubject,"        public KeyGenParameterSpecCompatBuilder setCertificateSubject(X500Principal subject) {
            builder.setCertificateSubject(subject);
            return this;
        }"
4562,setAlgorithmParameterSpec,"        public KeyGenParameterSpecCompatBuilder setAlgorithmParameterSpec(AlgorithmParameterSpec spec) {
            builder.setAlgorithmParameterSpec(spec);
            return this;
        }"
4563,setKeySize,"        public KeyGenParameterSpecCompatBuilder setKeySize(int keySize) {
            builder.setKeySize(keySize);
            return this;
        }"
4564,build,"        public AlgorithmParameterSpec build() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
            return builder.build();
        }"
4565,setUserAuthenticationValidityDurationSeconds,"    public abstract KeyGenParameterSpecCompatBuilder setUserAuthenticationValidityDurationSeconds(
            int seconds);"
4566,setUserAuthenticationRequired,"    public abstract KeyGenParameterSpecCompatBuilder setUserAuthenticationRequired(boolean required);
"
4567,setRandomizedEncryptionRequired,"    public abstract KeyGenParameterSpecCompatBuilder setRandomizedEncryptionRequired(boolean required);
"
4568,setBlockModes,"    public abstract KeyGenParameterSpecCompatBuilder setBlockModes(String... blockModes);
"
4569,setEncryptionPaddings,"    public abstract KeyGenParameterSpecCompatBuilder setEncryptionPaddings(
            String... paddings);"
4570,setSignaturePaddings,"    public abstract KeyGenParameterSpecCompatBuilder setSignaturePaddings(
            String... paddings);"
4571,setDigests,"    public abstract KeyGenParameterSpecCompatBuilder setDigests(String... digests);
"
4572,setKeyValidityEnd,"    public abstract KeyGenParameterSpecCompatBuilder setKeyValidityEnd(Date endDate);
"
4573,setKeyValidityStart,"    public abstract KeyGenParameterSpecCompatBuilder setKeyValidityStart(Date startDate);
"
4574,setCertificateNotAfter,"    public abstract KeyGenParameterSpecCompatBuilder setCertificateNotAfter(Date date);
"
4575,setCertificateNotBefore,"    public abstract KeyGenParameterSpecCompatBuilder setCertificateNotBefore(Date date);
"
4576,setCertificateSerialNumber,"    public abstract KeyGenParameterSpecCompatBuilder setCertificateSerialNumber(BigInteger serialNumber);
"
4577,setCertificateSubject,"    public abstract KeyGenParameterSpecCompatBuilder setCertificateSubject(X500Principal subject);
"
4578,setAlgorithmParameterSpec,"    public abstract KeyGenParameterSpecCompatBuilder setAlgorithmParameterSpec(AlgorithmParameterSpec spec);
"
4579,setKeySize,"    public abstract KeyGenParameterSpecCompatBuilder setKeySize(int keySize);
"
4580,build,"    public abstract AlgorithmParameterSpec build() throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException;
"
4581,newInstance,"    public static KeyGenParameterSpecCompatBuilder newInstance(String keyName, int purpose) {
        if(SoterCore.isNativeSupportSoter()) {
            if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {"
4582,reportError,"    void reportError(int errCode, String errMsg);
}"
4583,printErrStackTrace,"    void printErrStackTrace(String TAG, Throwable e, String errMsg);
}"
4584,e,"    void e(String TAG, String msg, Object... args);
    void printErrStackTrace(String TAG, Throwable e, String errMsg);"
4585,w,"    void w(String TAG, String msg, Object... args);
    void e(String TAG, String msg, Object... args);"
4586,i,"    void i(String TAG, String msg, Object... args);
    void w(String TAG, String msg, Object... args);"
4587,d,"    void d(String TAG, String msg, Object... args);
    void i(String TAG, String msg, Object... args);"
4588,v,"    void v(String TAG, String msg, Object... args);
    void d(String TAG, String msg, Object... args);"
4589,getParam,"    Object getParam(@NonNull String key, Object defVal);
"
4590,onAuthenticationFailed,"        public void onAuthenticationFailed() { }
    }"
4591,onAuthenticationSucceeded,"        public void onAuthenticationSucceeded(AuthenticationResultInternal result) { }
        public void onAuthenticationFailed() { }"
4592,onAuthenticationHelp,"        public void onAuthenticationHelp(int helpMsgId, CharSequence helpString) { }
        public void onAuthenticationSucceeded(AuthenticationResultInternal result) { }"
4593,onAuthenticationError,"        public void onAuthenticationError(int errMsgId, CharSequence errString) { }
        public void onAuthenticationHelp(int helpMsgId, CharSequence helpString) { }"
4594,getCryptoObject,"        public CryptoObject getCryptoObject() { return mCryptoObject; }
    }
"
4595,getMac,"        public Mac getMac() { return mMac; }
    }
"
4596,getCipher,"        public Cipher getCipher() { return mCipher; }
        public Mac getMac() { return mMac; }
    }"
4597,getSignature,"        public Signature getSignature() { return mSignature; }
        public Cipher getCipher() { return mCipher; }
        public Mac getMac() { return mMac; }"
4598,onAuthenticationFailed,"            public void onAuthenticationFailed() {
                callback.onAuthenticationFailed();
            }"
4599,onAuthenticationSucceeded,"            public void onAuthenticationSucceeded(BiometricPrompt.AuthenticationResult result) {
                callback.onAuthenticationSucceeded(new AuthenticationResultInternal(unwrapCryptoObject(result.getCryptoObject())));
            }"
4600,onAuthenticationHelp,"            public void onAuthenticationHelp(int helpCode, CharSequence helpString) {
                callback.onAuthenticationHelp(helpCode, helpString);
            }"
4601,onAuthenticationError,"            public void onAuthenticationError(int errorCode, CharSequence errString) {
                callback.onAuthenticationError(errorCode, errString);
            }"
4602,wrapCallback2,"    private static BiometricPrompt.AuthenticationCallback wrapCallback2(final AuthenticationCallback callback) {
        return new BiometricPrompt.AuthenticationCallback() {
            @Override"
4603,onAuthenticationFailed,"            public void onAuthenticationFailed() {
                SLogger.d(TAG, ""hy: lowest level return onAuthenticationFailed"");
                callback.onAuthenticationFailed();
            }"
4604,onAuthenticationSucceeded,"            public void onAuthenticationSucceeded(FingerprintManager.AuthenticationResult result) {
                SLogger.d(TAG, ""hy: lowest level return onAuthenticationSucceeded"");
                callback.onAuthenticationSucceeded(new AuthenticationResultInternal(
                        unwrapCryptoObject(result.getCryptoObject())));"
4605,onAuthenticationHelp,"            public void onAuthenticationHelp(int helpMsgId, CharSequence helpString) {
                SLogger.d(TAG, ""hy: lowest level return onAuthenticationHelp"");
                callback.onAuthenticationHelp(helpMsgId, helpString);
            }"
4606,onAuthenticationError,"            public void onAuthenticationError(int errMsgId, CharSequence errString) {
                SLogger.d(TAG, ""hy: lowest level return onAuthenticationError"");
                callback.onAuthenticationError(errMsgId, errString);
            }"
4607,wrapCallback,"    private static FingerprintManager.AuthenticationCallback wrapCallback(
            final AuthenticationCallback callback) {
        return new FingerprintManager.AuthenticationCallback() {"
4608,unwrapCryptoObject,"    private static CryptoObject unwrapCryptoObject(BiometricPrompt.CryptoObject cryptoObject) {
        if (cryptoObject == null) {
            return null;"
4609,unwrapCryptoObject,"    private static CryptoObject unwrapCryptoObject(FingerprintManager.CryptoObject cryptoObject) {
        if (cryptoObject == null) {
            return null;"
4610,wrapCryptoObject,"    private static FingerprintManager.CryptoObject wrapCryptoObject(CryptoObject cryptoObject) {
        if (cryptoObject == null) {
            return null;"
4611,onClick,"            public void onClick(DialogInterface dialog, int which) {
                callback.onAuthenticationError(ConstantsSoter.ERR_NEGATIVE_BUTTON, ""click negative button"");
            }"
4613,authenticateLegacy,"    private static void authenticateLegacy(Context context, CryptoObject crypto, int flags, Object cancel,
                                           AuthenticationCallback callback, Handler handler) {
        if (checkSelfPermission(context, Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {
            SLogger.e(TAG, ""soter: permission check failed: authenticate"");"
4615,isHardwareDetected,"    public static boolean isHardwareDetected(Context context) {
        if (checkSelfPermission(context, Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {
            SLogger.e(TAG, ""soter: permission check failed: isHardwareDetected"");
            return false;"
4616,checkSelfPermission,"    private static int checkSelfPermission(Context context, String permission) {
        if(context == null) {
            SLogger.e(TAG, ""soter: check self permission: context is null"");
            return -1;
        }
        if(SoterCoreUtil.isNullOrNil(permission)) {"
4617,hasEnrolledFingerprints,"    public static boolean hasEnrolledFingerprints(Context context) {
        if (checkSelfPermission(context, Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {
            SLogger.e(TAG, ""soter: permission check failed: hasEnrolledBiometric"");
            return false;"
4618,getFingerprintManager,"    private static FingerprintManager getFingerprintManager(Context ctx) {
        return (FingerprintManager) ctx.getSystemService(FINGERPRINT_SERVICE);
    }"
4634,authenticate,"    public static void authenticate(Context context, CryptoObject crypto, int flags, Object cancel,
                                    AuthenticationCallback callback, Handler handler) {
        if (checkSelfPermission(context, Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {
            SLogger.e(TAG, ""soter: permission check failed: authenticate"");"
4637,hasEnrolledFingerprints,"    public static boolean hasEnrolledFingerprints(Context context) {
        if (checkSelfPermission(context, Manifest.permission.USE_FINGERPRINT) != PackageManager.PERMISSION_GRANTED) {
            SLogger.e(TAG, ""soter: permission check failed: hasEnrolledFingerprints"");
            return false;"
4639,informTooManyTrial,"        private static void informTooManyTrial(FingerprintManagerCompatApi23.AuthenticationCallback callback) {
            SLogger.w(TAG, ""soter: too many fail fingerprint callback. inform it."");
            callback.onAuthenticationError(ConstantsSoter.ERR_FINGERPRINT_FAIL_MAX, ConstantsSoter.SOTER_FINGERPRINT_ERR_FAIL_MAX_MSG);
        }"
4640,checkBruteForce,"        private static boolean checkBruteForce(FingerprintManagerCompatApi23.AuthenticationCallback callback, Context context) {
            if(SoterAntiBruteForceStrategy.isSystemHasAntiBruteForce()) {
                SLogger.v(TAG, ""soter: using system anti brute force strategy"");
                return false;"
4641,onAuthenticationFailed,"                public void onAuthenticationFailed() {
                    SLogger.d(TAG, ""soter: basic onAuthenticationFailed"");
                    if(mMarkPermanentlyCallbacked) {
                        return;
                    }"
4642,onAuthenticationSucceeded,"                public void onAuthenticationSucceeded(
                        FingerprintManagerCompatApi23.AuthenticationResultInternal result) {
                    SLogger.d(TAG, ""soter: basic onAuthenticationSucceeded"");
                    if(mMarkPermanentlyCallbacked) {
                        return;"
4643,onAuthenticationHelp,"                public void onAuthenticationHelp(int helpMsgId, CharSequence helpString) {
                    SLogger.d(TAG, ""soter: basic onAuthenticationHelp"");
                    if(mMarkPermanentlyCallbacked) {
                        return;
                    }"
4645,wrapCallback,"        private static FingerprintManagerCompatApi23.AuthenticationCallback wrapCallback(final Context context,
                final AuthenticationCallback callback) {
            return new FingerprintManagerCompatApi23.AuthenticationCallback() {"
4646,unwrapCryptoObject,"        private static CryptoObject unwrapCryptoObject(
                FingerprintManagerCompatApi23.CryptoObject cryptoObject) {
            if (cryptoObject == null) {"
4647,wrapCryptoObject,"        private static FingerprintManagerCompatApi23.CryptoObject wrapCryptoObject(
                CryptoObject cryptoObject) {
            if (cryptoObject == null) {"
4648,authenticate,"        public void authenticate(Context context, CryptoObject crypto, int flags,
                                 CancellationSignal cancel, AuthenticationCallback callback, Handler handler) {
            FingerprintManagerCompatApi23.authenticate(context, wrapCryptoObject(crypto), flags,"
4651,authenticate,"        public void authenticate(Context context, CryptoObject crypto, int flags,
                                 CancellationSignal cancel, AuthenticationCallback callback, Handler handler) {"
4652,isHardwareDetected,"        public boolean isHardwareDetected(Context context) {
            return false;
        }"
4653,hasEnrolledFingerprints,"        public boolean hasEnrolledFingerprints(Context context) {
            return false;
        }"
4654,authenticate,"        void authenticate(Context context, CryptoObject crypto, int flags,
                          CancellationSignal cancel, AuthenticationCallback callback, Handler handler);"
4655,isHardwareDetected,"        boolean isHardwareDetected(Context context);
"
4656,hasEnrolledFingerprints,"        boolean hasEnrolledFingerprints(Context context);
"
4657,onAuthenticationCancelled,"        public void onAuthenticationCancelled() {
        }"
4658,onAuthenticationFailed,"        public void onAuthenticationFailed() {
        }"
4659,onAuthenticationSucceeded,"        public void onAuthenticationSucceeded(AuthenticationResult result) {
        }"
4660,onAuthenticationHelp,"        public void onAuthenticationHelp(int helpMsgId, CharSequence helpString) {
        }"
4661,onAuthenticationError,"        public void onAuthenticationError(int errMsgId, CharSequence errString) {
        }"
4662,getCryptoObject,"        public CryptoObject getCryptoObject() {
            return mCryptoObject;
        }"
4663,getMac,"        public Mac getMac() {
            return mMac;
        }"
4664,getCipher,"        public Cipher getCipher() {
            return mCipher;
        }"
4665,getSignature,"        public Signature getSignature() {
            return mSignature;
        }"
4666,authenticate,"    public void authenticate(CryptoObject crypto, int flags,
                             CancellationSignal cancel, AuthenticationCallback callback,
                             Handler handler) {"
4667,isCurrentTweenTimeAvailable,"    public boolean isCurrentTweenTimeAvailable(Context context) {
        return SoterAntiBruteForceStrategy.isCurrentTweenTimeAvailable(mContext);
    }"
4668,isCurrentFailTimeAvailable,"    public boolean isCurrentFailTimeAvailable() {
        return SoterAntiBruteForceStrategy.isCurrentFailTimeAvailable(mContext);
    }"
4669,isHardwareDetected,"    public boolean isHardwareDetected() {
        return IMPL.isHardwareDetected(mContext);
    }"
4670,hasEnrolledFingerprints,"    public boolean hasEnrolledFingerprints() {
        return IMPL.hasEnrolledFingerprints(mContext);
    }"
4671,from,"    public static FingerprintManagerCompat from(Context context) {
        return new FingerprintManagerCompat(context);
    }"
4672,authenticate,"    public abstract void authenticate(CryptoObject crypto,
                             CancellationSignal cancel,"
4673,isHardwareDetected,"    public abstract boolean isHardwareDetected();
"
4674,hasEnrolledFaces,"    public abstract boolean hasEnrolledFaces();
"
4675,getBiometricName,"    public abstract String getBiometricName(Context context);
"
4676,onAuthenticationFailed,"        public void onAuthenticationFailed() { }
"
4677,onAuthenticationSucceeded,"        public void onAuthenticationSucceeded(AuthenticationResult result) { }
"
4678,onAuthenticationHelp,"        public void onAuthenticationHelp(int helpCode, CharSequence helpString) { }
"
4679,onAuthenticationError,"        public void onAuthenticationError(int errorCode, CharSequence errString) { }
"
4680,getCryptoObject,"        public CryptoObject getCryptoObject() { return mCryptoObject; }

    };"
4681,getMac,"        public Mac getMac() {
            return mCrypto instanceof Mac ? (Mac) mCrypto : null;
        }"
4682,getCipher,"        public Cipher getCipher() {
            return mCrypto instanceof Cipher ? (Cipher) mCrypto : null;
        }"
4683,getSignature,"        public Signature getSignature() {
            return mCrypto instanceof Signature ? (Signature) mCrypto : null;
        }"
4685,onAuthenticationSucceeded,"        public void onAuthenticationSucceeded(AuthenticationResult result) { }
        public void onAuthenticationFailed() { }"
4686,onAuthenticationHelp,"        public void onAuthenticationHelp(int helpMsgId, CharSequence helpString) { }
        public void onAuthenticationSucceeded(AuthenticationResult result) { }"
4692,getBiometricName,"    public static String getBiometricName(Context context) {
        try {
            FaceManager mgr = getFaceManager(context);"
4694,onAuthenticationSucceeded,"            public void onAuthenticationSucceeded(FaceManager.AuthenticationResult result) {
                SLogger.d(TAG, ""hy: lowest level return onAuthenticationSucceeded"");
                callback.onAuthenticationSucceeded(new AuthenticationResult(
                        unwrapCryptoObject(result.getCryptoObject())));"
4697,wrapCallback,"    private static FaceManager.AuthenticationCallback wrapCallback(
            final AuthenticationCallback callback) {
        return new FaceManager.AuthenticationCallback() {"
4698,unwrapCryptoObject,"    private static CryptoObject unwrapCryptoObject(FaceManager.CryptoObject cryptoObject) {
        if (cryptoObject == null) {
            return null;"
4699,wrapCryptoObject,"    private static FaceManager.CryptoObject wrapCryptoObject(CryptoObject cryptoObject) {
        if (cryptoObject == null) {
            return null;"
4700,authenticate,"    public static void authenticate(Context context, CryptoObject crypto, int flags, Object cancel,
                                    AuthenticationCallback callback, Handler handler) {
        try {"
4701,isHardwareDetected,"    public static boolean isHardwareDetected(Context context) {
        try {
            FaceManager mgr = getFaceManager(context);"
4702,hasEnrolledFaceids,"    public static boolean hasEnrolledFaceids(Context context) {
        try {
            FaceManager mgr = getFaceManager(context);"
4703,getFaceManager,"    private static FaceManager getFaceManager(Context ctx) {
        FaceManager faceManager = null;
        try {
            faceManager = (FaceManager)Class.forName(FACEMANAGER_FACTORY_CLASS_NAME).getDeclaredMethod(""getFaceManager"", new Class[]{Context.class}).invoke((Object) null, new Object[]{ctx});
        } catch (Exception e) {"
4704,saveBinaryToFile,"    public static boolean saveBinaryToFile(byte[] bin, String fileName) {
        DemoLogger.d(TAG, ""hy: saving binary"");
        if (isNullOrNil(fileName)) {
            return false;
        }
        if (isNullOrNil(bin)) {
            return false;
        }
        File file = new File(fileName);
        if (file.exists()) {"
4705,saveTextToFile,"    public static boolean saveTextToFile(String content, String fileName) {
        DemoLogger.d(TAG, ""hy: saving text"");
        if (isNullOrNil(fileName)) {
            return false;
        }
        if (isNullOrNil(content)) {
            return false;
        }
        File file = new File(fileName);
        if (file.exists()) {"
4710,postTaskDelayed,"    void postTaskDelayed(final Runnable task, long delay) {
        synchronized (DemoNetworkThread.class) {
            mWorkerHandler.postDelayed(task, delay);"
4711,postTask,"    void postTask(final Runnable task) {
        synchronized (DemoNetworkThread.class) {
            mWorkerHandler.post(task);"
4712,getInstance,"    static DemoNetworkThread getInstance() {
        if(mInstance == null) {
            synchronized (DemoNetworkThread.class) {"
4713,e,"    public static void e(String TAG, String msg, Object... args) {
        Log.e(TAG, String.format(msg, args));
    }"
4714,w,"    public static void w(String TAG, String msg, Object... args) {
        Log.w(TAG, String.format(msg, args));
    }"
4715,i,"    public static void i(String TAG, String msg, Object... args) {
        Log.i(TAG, String.format(msg, args));
    }"
4716,d,"    public static void d(String TAG, String msg, Object... args) {
        Log.d(TAG, String.format(msg, args));
    }"
4719,writePostEncapsulationBoundary,"    private static void writePostEncapsulationBoundary(BufferedWriter writer, String type) throws IOException
    {
        writer.write(""-----END "" + type + ""-----"");
        writer.write(LINE_SEPARATOR);"
4720,writePreEncapsulationBoundary,"    private static void writePreEncapsulationBoundary(BufferedWriter writer, String type) throws IOException
    {
        writer.write(""-----BEGIN "" + type + ""-----"");
        writer.write(LINE_SEPARATOR);"
4721,writeEncoded,"    private static void writeEncoded(BufferedWriter writer, byte[] bytes)  throws IOException
    {
        char[]  buf = new char[LINE_LENGTH];
        for (int i = 0; i < bytes.length; i += buf.length)"
4723,getAppGlobalSecureKeyModel,"    public SoterPubKeyModel getAppGlobalSecureKeyModel() {
        SLogger.i(TAG, ""soter: start get app global secure key pub"");
        if (isNativeSupportSoter()) {

            KeyStore keyStore;"
4724,generateAppGlobalSecureKey,"    public SoterCoreResult generateAppGlobalSecureKey() {

        SLogger.i(TAG, ""soter: start generate ask"");
        if (isNativeSupportSoter()) {
            try {"
4725,informTooManyTrial,"        private static void informTooManyTrial(FaceidManagerProxy.AuthenticationCallback callback) {
            SLogger.w(TAG, ""soter: too many fail callback. inform it."");
            callback.onAuthenticationError(ConstantsSoter.ERR_BIOMETRIC_FAIL_MAX, ConstantsSoter.SOTER_BIOMETRIC_ERR_FAIL_MAX_MSG);
        }"
4726,shouldInformTooManyTrial,"        private static boolean shouldInformTooManyTrial(FaceidManagerProxy.AuthenticationCallback callback, Context context) {
            if(SoterBiometricAntiBruteForceStrategy.isSystemHasAntiBruteForce()) {
                SLogger.v(TAG, ""soter: using system anti brute force strategy"");
                return false;"
4727,onAuthenticationFailed,"                public void onAuthenticationFailed() {
                    SLogger.d(TAG, ""soter: basic onAuthenticationFailed"");
                    if(mMarkPermanentlyCallbacked) {
                        return;
                    }
                    mMarkPermanentlyCallbacked = true;
                    if(!shouldInformTooManyTrial(this, context)) {"
4728,onAuthenticationSucceeded,"                public void onAuthenticationSucceeded(FaceidManagerProxy.AuthenticationResult result) {
                    SLogger.d(TAG, ""soter: basic onAuthenticationSucceeded"");
                    if(mMarkPermanentlyCallbacked) {
                        return;
                    }
                    mMarkPermanentlyCallbacked = true;"
4729,onAuthenticationHelp,"                public void onAuthenticationHelp(int helpMsgId, CharSequence helpString) {
                    SLogger.d(TAG, ""soter: basic onAuthenticationHelp helpMsgId[%d], helpString[%s]"", helpMsgId, helpString);
                    long checkTime = System.currentTimeMillis();
                    if(mMarkPermanentlyCallbacked) {
                        return;
                    }"
4731,wrapCallback,"        private static FaceidManagerProxy.AuthenticationCallback wrapCallback(final Context context,
                                                                                         final AuthenticationCallback callback) {
            return new FaceidManagerProxy.AuthenticationCallback() {"
4732,unwrapCryptoObject,"        private static CryptoObject unwrapCryptoObject(FaceidManagerProxy.CryptoObject cryptoObject) {
            if (cryptoObject == null) {
                return null;"
4733,wrapCryptoObject,"        private static FaceidManagerProxy.CryptoObject wrapCryptoObject(
                CryptoObject cryptoObject) {
            if (cryptoObject == null) {"
4734,authenticate,"        public void authenticate(Context context,
                                 CryptoObject crypto,
                                 int flags,"
4735,getBiometricName,"        public String getBiometricName(Context context) {
            return FaceidManagerProxy.getBiometricName(context);
        }"
4736,isHardwareDetected,"        public boolean isHardwareDetected(Context context) {
            return FaceidManagerProxy.isHardwareDetected(context);
        }"
4737,hasEnrolledBiometric,"        public boolean hasEnrolledBiometric(Context context) {
            return FaceidManagerProxy.hasEnrolledFaceids(context);
        }"
4738,informTooManyTrial,"        private static void informTooManyTrial(FingerprintManagerProxy.AuthenticationCallback callback) {
            SLogger.w(TAG, ""soter: too many fail fingerprint callback. inform it."");
            callback.onAuthenticationError(ConstantsSoter.ERR_BIOMETRIC_FAIL_MAX, ConstantsSoter.SOTER_BIOMETRIC_ERR_FAIL_MAX_MSG);
        }"
4739,shouldInformTooManyTrial,"        private static boolean shouldInformTooManyTrial(FingerprintManagerProxy.AuthenticationCallback callback, Context context) {
            if(SoterBiometricAntiBruteForceStrategy.isSystemHasAntiBruteForce()) {
                SLogger.v(TAG, ""soter: using system anti brute force strategy"");
                return false;"
4741,onAuthenticationSucceeded,"                public void onAuthenticationSucceeded(
                        FingerprintManagerProxy.AuthenticationResultInternal result) {
                    SLogger.d(TAG, ""soter: basic onAuthenticationSucceeded"");
                    if(mMarkPermanentlyCallbacked) {
                        return;"
4744,wrapCallback,"        private static FingerprintManagerProxy.AuthenticationCallback wrapCallback(
                final Context context,
                final AuthenticationCallback callback) {"
4745,unwrapCryptoObject,"        private static CryptoObject unwrapCryptoObject(FingerprintManagerProxy.CryptoObject cryptoObject) {
            if (cryptoObject == null) {
                return null;"
4746,wrapCryptoObject,"        private static FingerprintManagerProxy.CryptoObject wrapCryptoObject(CryptoObject cryptoObject) {
            if (cryptoObject == null) {
                return null;"
4747,authenticate,"        public void authenticate(Context context,
                                 CryptoObject crypto, int flags,
                                 CancellationSignal cancel,"
4748,getBiometricName,"        public String getBiometricName(Context context) {
            return ""fingerprint"";
        }"
4749,isHardwareDetected,"        public boolean isHardwareDetected(Context context) {
            return FingerprintManagerProxy.isHardwareDetected(context);
        }"
4750,hasEnrolledBiometric,"        public boolean hasEnrolledBiometric(Context context) {
            return FingerprintManagerProxy.hasEnrolledFingerprints(context);
        }"
4751,authenticate,"        public void authenticate(Context context,
                                 CryptoObject crypto, int flags,"
4752,getBiometricName,"        public String getBiometricName(Context context) {
            return null;
        }"
4753,isHardwareDetected,"        public boolean isHardwareDetected(Context context) {
            SReporter.reportError(ConstantsSoter.ERR_SOTER_INNER, ""LegacyFingerprintManagerImpl.isHardwareDetected return false"");
            return false;
        }"
4754,hasEnrolledBiometric,"        public boolean hasEnrolledBiometric(Context context) {
            return false;
        }"
4755,authenticate,"        void authenticate(Context context,
                          CryptoObject crypto, int flags,"
4756,getBiometricName,"        String getBiometricName(Context context);
"
4758,hasEnrolledBiometric,"        boolean hasEnrolledBiometric(Context context);
"
4768,authenticate,"    public void authenticate(CryptoObject crypto, int flags,
                             CancellationSignal cancel, AuthenticationCallback callback,
                             Handler handler, Bundle extra) {
        IBiometricManager IMPL = IMPL_PROVIDER.get(mBiometricType);
        if (IMPL == null){"
4769,isCurrentTweenTimeAvailable,"    public boolean isCurrentTweenTimeAvailable(Context context) {
        return SoterBiometricAntiBruteForceStrategy.isCurrentTweenTimeAvailable(mContext);
    }"
4770,isCurrentFailTimeAvailable,"    public boolean isCurrentFailTimeAvailable() {
        return SoterBiometricAntiBruteForceStrategy.isCurrentFailTimeAvailable(mContext);
    }"
4771,isHardwareDetected,"    public boolean isHardwareDetected() {
        IBiometricManager IMPL = IMPL_PROVIDER.get(mBiometricType);
        if (IMPL == null){
            SLogger.i(TAG, ""soter: Biometric provider not initialized type[""+ mBiometricType +""]"");
            return false;"
4772,getBiometricName,"    public String getBiometricName(){
        IBiometricManager IMPL = IMPL_PROVIDER.get(mBiometricType);
        if (IMPL == null){
            SLogger.i(TAG, ""soter: Biometric provider not initialized type[""+ mBiometricType +""]"");
            return null;"
4773,hasEnrolledBiometric,"    public boolean hasEnrolledBiometric() {
        IBiometricManager IMPL = IMPL_PROVIDER.get(mBiometricType);
        if (IMPL == null){
            SLogger.i(TAG, ""soter: Biometric provider not initialized type[""+ mBiometricType +""]"");
            return false;"
4774,isNativeSupportFaceid,"    public static boolean isNativeSupportFaceid(){
        try {
            Class t = Class.forName(FaceidManagerProxy.FACEMANAGER_FACTORY_CLASS_NAME);"
4775,from,"    public static BiometricManagerCompat from(Context context, Integer biometricType) {
        return new BiometricManagerCompat(context, biometricType);
    }"
4785,extractId,"    private String extractId(String uri) {
        return Url.parse(URI.create(uri)).id;
    }"
4786,parse,"    private URI parse(String uri) {
        return Url.parse(URI.create(uri)).uri;
    }"
4787,extractHostFromAuthorityPart,"    private static String extractHostFromAuthorityPart(String authority)
    {
        if (authority == null) {
            throw new RuntimeException(""unable to parse the host from the authority"");
        }
"
4789,call,"                    public void call(Object... args) {
                        values.offer(""done"");
                    }"
4790,call,"            public void call(Object... objects) {
                socket.emit(""echo"");
                socket.on(""echoBack"", new Emitter.Listener() {
                    @Override"
4795,tearDown,"    public void tearDown() {
        IO.setDefaultOkHttpCallFactory(null);
        IO.setDefaultOkHttpWebSocketFactory(null);
    }"
4796,verify,"                    public boolean verify(String hostname, SSLSession sslSession) {
                        return hostname.equals(""localhost"");
                    }"
4798,createEnv,"    String[] createEnv() {
        return new String[] {""DEBUG=socket.io:*"", ""PORT="" + PORT, ""SSL=1""};
    }"
4799,createOptions,"    IO.Options createOptions() {
        IO.Options opts = super.createOptions();
        opts.secure = true;
        return opts;
    }"
4801,call,"            public void call(Object... args) {
                values.offer((String) args[0]);
            }"
4802,call,"                    public void call(Object... args) {
                        values.offer((String) args[0]);
                    }"
4803,call,"            public void call(Object... objects) {
                socket.emit(""ack"", ""second"", new Ack() {
                    @Override"
4804,shouldEmitEventsInOrder,"    public void shouldEmitEventsInOrder() throws InterruptedException {
        final BlockingQueue<String> values = new LinkedBlockingQueue<>();

        socket = client();

        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... objects) {
                socket.emit(""ack"", ""second"", new Ack() {"
4805,shouldThrowOnReservedEvent,"    public void shouldThrowOnReservedEvent() {
        final BlockingQueue<Optional> values = new LinkedBlockingQueue<>();

        socket = client(""/no"");
        try {
            socket.emit(""disconnecting"", ""goodbye"");"
4806,call,"            public void call(Object... args) {
                values.offer(Optional.ofNullable(args[0]));
            }"
4808,call,"            public void call(Object... args) {
                JSONObject handshake = (JSONObject)args[0];
                values.offer(Optional.ofNullable(handshake));
            }"
4814,call,"                    public void call(Object... objects) {
                        values.offer(Optional.ofNullable(socket.id()));
                    }"
4816,call,"            public void call(Object... objects) {
                values.offer(Optional.ofNullable(socket.id()));

                socket.io().on(Manager.EVENT_RECONNECT_ATTEMPT, new Emitter.Listener() {
                    @Override
                    public void call(Object... objects) {"
4818,run,"            public void run() {
                values.offer(Optional.empty());
            }"
4819,call,"            public void call(Object... args) {
                values.offer(Optional.of(new Error(""Unexpected"")));
            }"
4821,call,"                    public void call(Object... args) {
                        values.offer(Optional.ofNullable(socket.id()));
                    }"
4822,call,"            public void call(Object... objects) {
                socket.on(Socket.EVENT_DISCONNECT, new Emitter.Listener() {
                    @Override
                    public void call(Object... args) {"
4823,clearsSocketIdUponDisconnection,"    public void clearsSocketIdUponDisconnection() throws InterruptedException {
        final BlockingQueue<Optional> values = new LinkedBlockingQueue<>();
        socket = client();
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... objects) {
                socket.on(Socket.EVENT_DISCONNECT, new Emitter.Listener() {
                    @Override"
4824,call,"            public void call(Object... objects) {
                values.offer(Optional.ofNullable(socket.id()));
            }"
4828,build,"    public IO.Options build() {
        return this.options;
    }"
4829,setExtraHeaders,"    public SocketOptionBuilder setExtraHeaders(Map<String, List<String>> extraHeaders) {
        this.options.extraHeaders = extraHeaders;
        return this;
    }"
4830,setAuth,"    public SocketOptionBuilder setAuth(Map<String, String> auth) {
        this.options.auth = auth;
        return this;
    }"
4831,setPath,"    public SocketOptionBuilder setPath(String path) {
        this.options.path = path;
        return this;
    }"
4832,setSecure,"    public SocketOptionBuilder setSecure(boolean secure) {
        this.options.secure = secure;
        return this;
    }"
4833,setQuery,"    public SocketOptionBuilder setQuery(String query) {
        this.options.query = query;
        return this;
    }"
4834,setPolicyPort,"    public SocketOptionBuilder setPolicyPort(int policyPort) {
        this.options.policyPort = policyPort;
        return this;
    }"
4835,setPort,"    public SocketOptionBuilder setPort(int port) {
        this.options.port = port;
        return this;
    }"
4836,setHostname,"    public SocketOptionBuilder setHostname(String hostname) {
        this.options.hostname = hostname;
        return this;
    }"
4837,setHost,"    public SocketOptionBuilder setHost(String host) {
        this.options.host = host;
        return this;
    }"
4838,setRememberUpgrade,"    public SocketOptionBuilder setRememberUpgrade(boolean rememberUpgrade) {
        this.options.rememberUpgrade = rememberUpgrade;
        return this;
    }"
4839,setUpgrade,"    public SocketOptionBuilder setUpgrade(boolean upgrade) {
        this.options.upgrade = upgrade;
        return this;
    }"
4840,setTransports,"    public SocketOptionBuilder setTransports(String[] transports) {
        this.options.transports = transports;
        return this;
    }"
4841,setTimeout,"    public SocketOptionBuilder setTimeout(long timeout) {
        this.options.timeout = timeout;
        return this;
    }"
4842,setRandomizationFactor,"    public SocketOptionBuilder setRandomizationFactor(double randomizationFactor) {
        this.options.randomizationFactor = randomizationFactor;
        return this;
    }"
4843,setReconnectionDelayMax,"    public SocketOptionBuilder setReconnectionDelayMax(long reconnectionDelayMax) {
        this.options.reconnectionDelayMax = reconnectionDelayMax;
        return this;
    }"
4844,setReconnectionDelay,"    public SocketOptionBuilder setReconnectionDelay(long reconnectionDelay) {
        this.options.reconnectionDelay = reconnectionDelay;
        return this;
    }"
4845,setReconnectionAttempts,"    public SocketOptionBuilder setReconnectionAttempts(int reconnectionAttempts) {
        this.options.reconnectionAttempts = reconnectionAttempts;
        return this;
    }"
4846,setReconnection,"    public SocketOptionBuilder setReconnection(boolean reconnection) {
        this.options.reconnection = reconnection;
        return this;
    }"
4847,setMultiplex,"    public SocketOptionBuilder setMultiplex(boolean multiplex) {
        this.options.multiplex = multiplex;
        return this;
    }"
4848,setForceNew,"    public SocketOptionBuilder setForceNew(boolean forceNew) {
        this.options.forceNew = forceNew;
        return this;
    }"
4849,builder,"    public static SocketOptionBuilder builder(IO.Options options) {
        return new SocketOptionBuilder(options);
    }"
4850,builder,"    public static SocketOptionBuilder builder() {
        return new SocketOptionBuilder();
    }"
4851,toArray,"    private static Object[] toArray(JSONArray array) {
        int length = array.length();
        Object[] data = new Object[length];
        for (int i = 0; i < length; i++) {
            Object v;
            try {"
4852,id,"    public String id() {
        return this.id;
    }"
4853,connected,"    public boolean connected() {
        return this.connected;
    }"
4854,io,"    public Manager io() {
        return this.io;
    }"
4855,disconnect,"    public Socket disconnect() {
        return this.close();
    }"
4856,run,"            public void run() {
                if (Socket.this.connected) {
                    if (logger.isLoggable(Level.FINE)) {
                        logger.fine(String.format(""performing disconnect (%s)"", Socket.this.nsp));
                    }"
4857,close,"    public Socket close() {
        EventThread.exec(new Runnable() {
            @Override
            public void run() {"
4859,ondisconnect,"    private void ondisconnect() {
        if (logger.isLoggable(Level.FINE)) {
            logger.fine(String.format(""server disconnect (%s)"", this.nsp));
        }
        this.destroy();"
4860,emitBuffered,"    private void emitBuffered() {
        List<Object> data;
        while ((data = this.receiveBuffer.poll()) != null) {
            if (data.isEmpty()) {
                continue;
            }
            String event = data.remove(0).toString();
            super.emit(event, data.toArray());"
4861,onconnect,"    private void onconnect(String id) {
        this.connected = true;
        this.id = id;
        this.emitBuffered();
        super.emit(EVENT_CONNECT);
    }"
4862,onack,"    private void onack(Packet<JSONArray> packet) {
        Ack fn = this.acks.remove(packet.id);
        if (fn != null) {
            if (logger.isLoggable(Level.FINE)) {"
4864,call,"            public void call(final Object... args) {
                EventThread.exec(new Runnable() {
                    @Override"
4865,ack,"    private Ack ack(final int id) {
        final Socket self = this;
        final boolean[] sent = new boolean[] {false};
        return new Ack() {
            @Override"
4866,onevent,"    private void onevent(Packet<JSONArray> packet) {
        List<Object> args = new ArrayList<>(Arrays.asList(toArray(packet.data)));
        if (logger.isLoggable(Level.FINE)) {
            logger.fine(String.format(""emitting event %s"", args));
        }
"
4867,onpacket,"    private void onpacket(Packet<?> packet) {
        if (!this.nsp.equals(packet.nsp)) return;

        switch (packet.type) {"
4868,onclose,"    private void onclose(String reason) {
        if (logger.isLoggable(Level.FINE)) {
            logger.fine(String.format(""close (%s)"", reason));
        }
        this.connected = false;
        this.id = null;"
4869,onopen,"    private void onopen() {
        logger.fine(""transport is open - connecting"");

        if (this.auth != null) {"
4870,packet,"    private void packet(Packet packet) {
        packet.nsp = this.nsp;
        this.io.packet(packet);
    }"
4871,run,"            public void run() {
                JSONArray jsonArgs = new JSONArray();
                jsonArgs.put(event);

                if (args != null) {
                    for (Object arg : args) {
                        jsonArgs.put(arg);
                    }"
4872,emit,"    public Emitter emit(final String event, final Object[] args, final Ack ack) {
        EventThread.exec(new Runnable() {
            @Override
            public void run() {"
4873,run,"            public void run() {
                Ack ack;
                Object[] _args;
                int lastIndex = args.length - 1;

                if (args.length > 0 && args[lastIndex] instanceof Ack) {
                    _args = new Object[lastIndex];"
4874,emit,"    public Emitter emit(final String event, final Object... args) {
        if (RESERVED_EVENTS.containsKey(event)) {
            throw new RuntimeException(""'"" + event + ""' is a reserved event name"");
        }
"
4875,run,"            public void run() {
                Socket.this.emit(EVENT_MESSAGE, args);
            }"
4876,send,"    public Socket send(final Object... args) {
        EventThread.exec(new Runnable() {
            @Override
            public void run() {"
4877,connect,"    public Socket connect() {
        return this.open();
    }"
4879,open,"    public Socket open() {
        EventThread.exec(new Runnable() {
            @Override
            public void run() {"
4880,isActive,"    public boolean isActive() {
        return this.subs != null;
    }"
4881,call,"                public void call(Object... args) {
                    Socket.this.onclose(args.length > 0 ? (String) args[0] : null);
                }"
4882,call,"                public void call(Object... args) {
                    if (!Socket.this.connected) {
                        Socket.super.emit(EVENT_CONNECT_ERROR, args[0]);"
4883,call,"                public void call(Object... args) {
                    Socket.this.onpacket((Packet<?>) args[0]);
                }"
4884,call,"                public void call(Object... args) {
                    Socket.this.onopen();
                }"
4885,subEvents,"    private void subEvents() {
        if (this.subs != null) return;

        final Manager io = Socket.this.io;
        Socket.this.subs = new LinkedList<On.Handle>() {{"
4886,call,"            public void call(Object... args) {
                socket.emit(""requestDisconnect"");
            }"
4887,call,"            public void call(Object... args) {
                values.offer(""disconnected"");
            }"
4888,disconnectFromServer,"    public void disconnectFromServer() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();

        socket = client();
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... args) {"
4889,call,"                    public void call(Object... args) {
                        @SuppressWarnings(""unchecked"")
                        Map<String, List<String>> headers = (Map<String, List<String>>)args[0];
                        headers.put(""X-SocketIO"", Arrays.asList(""hi""));"
4890,call,"                    public void call(Object... args) {
                        @SuppressWarnings(""unchecked"")
                        Map<String, List<String>> headers = (Map<String, List<String>>)args[0];
                        List<String> value = headers.get(""X-SocketIO"");
                        values.offer(value != null ? value.get(0) : """");"
4891,call,"            public void call(Object... args) {
                Transport transport = (Transport)args[0];
                transport.on(Transport.EVENT_REQUEST_HEADERS, new Emitter.Listener() {
                    @Override"
4897,call,"            public void call(Object... objects) {
                socket.emit(""room"", ""hi"");
            }"
4898,call,"            public void call(Object... args) {
                values.offer(args);
            }"
4899,room,"    public void room() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();

        socket = client();
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... objects) {
                socket.emit(""room"", ""hi"");
            }
        }).on(""roomBack"", new Emitter.Listener() {"
4900,call,"                    public void call(Object... objects) {
                        socket2.emit(""broadcast"", ""hi"");
                    }"
4901,call,"            public void call(Object... objects) {
                socket2 = client();

                socket2.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
                    @Override"
4903,broadcast,"    public void broadcast() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();

        socket = client();
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... objects) {
                socket2 = client();

                socket2.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
                    @Override"
4904,call,"                    public void call(Object... objects) {
                        values.offer(""done"");
                    }"
4905,call,"            public void call(Object... args) {
                socket.io().engine.on(io.socket.engineio.client.Socket.EVENT_CLOSE, new Emitter.Listener() {
                    @Override
                    public void call(Object... objects) {"
4906,closeEngineConnection,"    public void closeEngineConnection() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();

        socket = client();
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... args) {"
4907,call,"                    public void call(Object... args) {
                        values.offer(args);
                        Ack ack = (Ack)args[0];
                        ack.call();
                    }"
4908,call,"                    public void call(Object... args) {
                        values.offer(args);
                        socket.disconnect();
                    }"
4909,call,"            public void call(Object... objects) {
                socket.on(""ack"", new Emitter.Listener() {
                    @Override
                    public void call(Object... args) {"
4911,call,"                    public void call(Object... args) {
                        values.offer(args.length);
                    }"
4912,call,"            public void call(Object... objects) {
                socket.emit(""ack"", null, new Ack() {
                    @Override"
4913,ackWithoutArgs,"    public void ackWithoutArgs() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();

        socket = client();
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... objects) {
                socket.emit(""ack"", null, new Ack() {"
4914,call,"                    public void call(Object... args) {
                        values.offer(args);
                    }"
4915,call,"            public void call(Object... objects) {
                socket.emit(""ack"", new Object[] {obj, ""bar""}, new Ack() {
                    @Override"
4917,call,"            public void call(Object... objects) {
                socket.emit(""echo"", obj, null, ""bar"");
            }"
4920,call,"            public void call(Object... objects) {
                socket.send(""foo"", ""bar"");
            }"
4922,message,"    public void message() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();

        socket = client();
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... objects) {
                socket.send(""foo"", ""bar"");
            }"
4923,call,"            public void call(Object... args) {
                values.offer(args);
                socket.disconnect();
            }"
4925,openAndClose,"    public void openAndClose() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();

        socket = client();
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... args) {
                values.offer(args);
                socket.disconnect();
            }"
4926,nsp,"    protected String nsp() {
        return ""/foo"";
    }"
4928,encodeAck,"    public void encodeAck() throws JSONException {
        Packet<JSONArray> packet = new Packet<>(Parser.ACK);
        packet.data = new JSONArray(""[\""a\"", 1, {}]"");
        packet.id = 123;
        packet.nsp = ""/"";
        Helpers.test(packet);
    }"
4929,encodeEvent,"    public void encodeEvent() throws JSONException {
        Packet<JSONArray> packet1 = new Packet<>(Parser.EVENT);
        packet1.data = new JSONArray(""[\""a\"", 1, {}]"");
        packet1.nsp = ""/"";
        Helpers.test(packet1);

        Packet<JSONArray> packet2 = new Packet<>(Parser.EVENT);
        packet2.data = new JSONArray(""[\""a\"", 1, {}]"");
        packet2.nsp = ""/test"";
        Helpers.test(packet2);"
4930,encodeDisconnection,"    public void encodeDisconnection() {
        Packet packet = new Packet(Parser.DISCONNECT);
        packet.nsp = ""/woot"";
        Helpers.test(packet);
    }"
4931,encodeConnection,"    public void encodeConnection() {
        Packet packet = new Packet(Parser.CONNECT);
        packet.nsp = ""/woot"";
        Helpers.test(packet);
    }"
4932,call,"            void call(Packet packet);
        }"
4937,call,"            void call(Object[] data);
        }"
4938,encode,"        void encode(Packet obj, Callback callback);
"
4940,destroy,"            public void destroy() {
                obj.off(ev, fn);
            }"
4941,on,"    public static Handle on(final Emitter obj, final String ev, final Emitter.Listener fn) {
        obj.on(ev, fn);
        return new Handle() {
            @Override"
4943,onreconnect,"    private void onreconnect() {
        int attempts = this.backoff.getAttempts();
        this.reconnecting = false;
        this.backoff.reset();
        this.emit(EVENT_RECONNECT, attempts);
    }"
4944,destroy,"                public void destroy() {
                    timer.cancel();
                }"
4945,call,"                                public void call(Exception err) {
                                    if (err != null) {
                                        logger.fine(""reconnect attempt error"");"
4947,run,"                public void run() {
                    EventThread.exec(new Runnable() {
                        @Override"
4948,reconnect,"    private void reconnect() {
        if (this.reconnecting || this.skipReconnect) return;

        final Manager self = this;
"
4949,onclose,"    private void onclose(String reason) {
        logger.fine(""onclose"");
        this.cleanup();
        this.backoff.reset();
        this.readyState = ReadyState.CLOSED;
        this.emit(EVENT_CLOSE, reason);

        if (this._reconnection && !this.skipReconnect) {"
4951,cleanup,"    private void cleanup() {
        logger.fine(""cleanup"");

        On.Handle sub;
        while ((sub = this.subs.poll()) != null) sub.destroy();
        this.decoder.onDecoded(null);

        this.packetBuffer.clear();
        this.encoding = false;"
4952,processPacketQueue,"    private void processPacketQueue() {
        if (!this.packetBuffer.isEmpty() && !this.encoding) {
            Packet pack = this.packetBuffer.remove(0);"
4953,call,"                public void call(Object[] encodedPackets) {
                    for (Object packet : encodedPackets) {
                        if (packet instanceof String) {
                            self.engine.write((String)packet);
                        } else if (packet instanceof byte[]) {"
4956,socket,"    public Socket socket(String nsp) {
        return socket(nsp, null);
    }"
4957,socket,"    public Socket socket(final String nsp, Options opts) {
        synchronized (this.nsps) {
            Socket socket = this.nsps.get(nsp);"
4958,onerror,"    private void onerror(Exception err) {
        logger.log(Level.FINE, ""error"", err);
        this.emit(EVENT_ERROR, err);
    }"
4959,ondecoded,"    private void ondecoded(Packet packet) {
        this.emit(EVENT_PACKET, packet);
    }"
4960,call,"            public void call (Packet packet) {
                Manager.this.ondecoded(packet);
            }"
4961,call,"            public void call(Object... objects) {
                Manager.this.onclose((String)objects[0]);
            }"
4962,call,"            public void call(Object... objects) {
                Manager.this.onerror((Exception)objects[0]);
            }"
4963,call,"            public void call(Object... objects) {
                Object data = objects[0];
                try {
                    if (data instanceof String) {"
4964,onopen,"    private void onopen() {
        logger.fine(""open"");

        this.cleanup();

        this.readyState = ReadyState.OPEN;
        this.emit(EVENT_OPEN);

        final io.socket.engineio.client.Socket socket = this.engine;
        this.subs.add(On.on(socket, Engine.EVENT_DATA, new Listener() {
            @Override"
4965,destroy,"                        public void destroy() {
                            timer.cancel();
                        }"
4966,run,"                        public void run() {
                            EventThread.exec(onTimeout);
                        }"
4967,run,"                    public void run() {
                        logger.fine(String.format(""connect attempt timed out after %d"", timeout));
                        openSub.destroy();
                        socket.close();
                        socket.emit(Engine.EVENT_ERROR, new SocketIOException(""timeout""));
                    }"
4969,call,"                    public void call(Object... objects) {
                        self.onopen();
                        if (fn != null) fn.call(null);
                    }"
4970,call,"                    public void call(Object... args) {
                        self.emit(Manager.EVENT_TRANSPORT, args);
                    }"
4972,open,"    public Manager open(final OpenCallback fn) {
        EventThread.exec(new Runnable() {
            @Override
            public void run() {"
4973,open,"    public Manager open(){
        return open(null);
    }"
4975,timeout,"    public Manager timeout(long v) {
        this._timeout = v;
        return this;
    }"
4976,timeout,"    public long timeout() {
        return this._timeout;
    }"
4977,reconnectionDelayMax,"    public Manager reconnectionDelayMax(long v) {
        this._reconnectionDelayMax = v;
        if (this.backoff != null) {
            this.backoff.setMax(v);
        }"
4978,reconnectionDelayMax,"    public final long reconnectionDelayMax() {
        return this._reconnectionDelayMax;
    }"
4979,randomizationFactor,"    public Manager randomizationFactor(double v) {
        this._randomizationFactor = v;
        if (this.backoff != null) {
            this.backoff.setJitter(v);
        }"
4980,randomizationFactor,"    public final double randomizationFactor() {
        return this._randomizationFactor;
    }"
4981,reconnectionDelay,"    public Manager reconnectionDelay(long v) {
        this._reconnectionDelay = v;
        if (this.backoff != null) {
            this.backoff.setMin(v);
        }"
4982,reconnectionDelay,"    public final long reconnectionDelay() {
        return this._reconnectionDelay;
    }"
4983,reconnectionAttempts,"    public Manager reconnectionAttempts(int v) {
        this._reconnectionAttempts = v;
        return this;
    }"
4984,reconnectionAttempts,"    public int reconnectionAttempts() {
        return this._reconnectionAttempts;
    }"
4985,isReconnecting,"    public boolean isReconnecting() {
        return reconnecting;
    }"
4986,reconnection,"    public Manager reconnection(boolean v) {
        this._reconnection = v;
        return this;
    }"
4987,reconnection,"    public boolean reconnection() {
        return this._reconnection;
    }"
4988,finishReconstruction,"        public void finishReconstruction () {
            this.reconPack = null;
            this.buffers = new ArrayList<>();
        }"
4989,takeBinaryData,"        public Packet takeBinaryData(byte[] binData) {
            this.buffers.add(binData);
            if (this.buffers.size() == this.reconPack.attachments) {
                Packet packet = Binary.reconstructPacket(this.reconPack,
                        this.buffers.toArray(new byte[this.buffers.size()][]));"
4990,onDecoded,"        public void onDecoded (Callback callback) {
            this.onDecodedCallback = callback;
        }"
4991,destroy,"        public void destroy() {
            if (this.reconstructor != null) {
                this.reconstructor.finishReconstruction();
            }"
4992,isPayloadValid,"        private static boolean isPayloadValid(int type, Object payload) {
            switch (type) {
                case Parser.CONNECT:"
4994,add,"        public void add(byte[] obj) {
            if (this.reconstructor == null) {
                throw new RuntimeException(""got binary data when not reconstructing a packet"");"
4995,add,"        public void add(String obj) {
            Packet packet = decodeString(obj);
            if (BINARY_EVENT == packet.type || BINARY_ACK == packet.type) {
                this.reconstructor = new BinaryReconstructor(packet);"
4996,encodeAsBinary,"        private void encodeAsBinary(Packet obj, Callback callback) {
            Binary.DeconstructedPacket deconstruction = Binary.deconstructPacket(obj);
            String pack = encodeAsString(deconstruction.packet);
            List<Object> buffers = new ArrayList<Object>(Arrays.asList(deconstruction.buffers));

            buffers.add(0, pack);
            callback.call(buffers.toArray());"
4997,encodeAsString,"        private String encodeAsString(Packet obj) {
            StringBuilder str = new StringBuilder("""" + obj.type);

            if (BINARY_EVENT == obj.type || BINARY_ACK == obj.type) {
                str.append(obj.attachments);
                str.append(""-"");
            }

            if (obj.nsp != null && obj.nsp.length() != 0 && !""/"".equals(obj.nsp)) {"
4998,encode,"        public void encode(Packet obj, Callback callback) {
            if ((obj.type == EVENT || obj.type == ACK) && HasBinary.hasBinary(obj.data)) {
                obj.type = obj.type == EVENT ? BINARY_EVENT : BINARY_ACK;
            }
"
4999,builder,"        public static SocketOptionBuilder builder() {
            return SocketOptionBuilder.builder();
        }"
5001,socket,"    public static Socket socket(URI uri) {
        return socket(uri, null);
    }"
5002,socket,"    public static Socket socket(String uri, Options opts) throws URISyntaxException {
        return socket(new URI(uri), opts);
    }"
5003,socket,"    public static Socket socket(String uri) throws URISyntaxException {
        return socket(uri, null);
    }"
5004,setDefaultOkHttpCallFactory,"    public static void setDefaultOkHttpCallFactory(Call.Factory factory) {
        Manager.defaultCallFactory = factory;
    }"
5005,setDefaultOkHttpWebSocketFactory,"    public static void setDefaultOkHttpWebSocketFactory(WebSocket.Factory factory) {
        Manager.defaultWebSocketFactory = factory;
    }"
5006,call,"            public void call(Object... args) {
                System.out.println(""engine close"");
                client.dispatcher().executorService().shutdown();
            }"
5007,call,"            public void call(Object... args) {
                System.out.println(""connect"");
            }"
5008,call,"            public void call(Object... args) {
                System.out.println(""disconnect"");
            }"
5010,assertPacket,"    public static void assertPacket(Packet expected, Packet actual) {
        assertThat(actual.type, is(expected.type));
        assertThat(actual.id, is(expected.id));
        assertThat(actual.nsp, is(expected.nsp));
        assertThat(actual.attachments, is(expected.attachments));

        if (expected.data instanceof JSONArray) {"
5011,call,"                    public void call(Packet packet) {
                        obj.data = originalData;
                        obj.attachments = -1;
                        assertPacket(packet, obj);
                    }"
5012,call,"            public void call(Object[] encodedPackets) {
                Parser.Decoder decoder = new IOParser.Decoder();
                decoder.onDecoded(new Parser.Decoder.Callback() {
                    @Override
                    public void call(Packet packet) {"
5013,testBin,"    public static void testBin(final Packet obj) {
        final Object originalData = obj.data;
        encoder.encode(obj, new Parser.Encoder.Callback() {
            @Override"
5014,testDecodeError,"    public static void testDecodeError(final String errorMessage) {
        Parser.Decoder decoder = new IOParser.Decoder();
        try {
            decoder.add(errorMessage);"
5015,call,"                    public void call(Packet packet) {
                        assertPacket(packet, obj);
                    }"
5017,test,"    public static void test(final Packet obj) {
        encoder.encode(obj, new Parser.Encoder.Callback() {
            @Override"
5019,execImmediateClose,"    public void execImmediateClose() throws InterruptedException, IOException {
        exec(""io.socket.client.executions.ImmediateClose"");
    }"
5020,execConnectionFailure,"    public void execConnectionFailure() throws InterruptedException, IOException {
        exec(""io.socket.client.executions.ConnectionFailure"");
    }"
5021,execConnection,"    public void execConnection() throws InterruptedException, IOException {
        exec(""io.socket.client.executions.Connection"");
    }"
5022,call,"                    public void call(Object... args) {
                        values.offer(args[0]);
                    }"
5023,call,"            public void call(Object... args) {
                socket.emit(""echo"", buf);
                socket.emit(""echo"", ""please arrive second"");

                socket.on(""echoBack"", new Emitter.Listener() {"
5026,call,"            public void call(Object... args) {
                JSONObject data = new JSONObject();
                try {
                    data.put(""hello"", ""lol"");
                    data.put(""message"", buf);
                    data.put(""goodbye"", ""gotcha"");"
5029,call,"            public void call(Object... args) {
                socket.emit(""echo"", buf);
                socket.on(""echoBack"", new Emitter.Listener() {
                    @Override"
5032,call,"            public void call(Object... objects) {
                JSONObject data = new JSONObject();
                try {
                    data.put(""date"", new Date());
                } catch (JSONException e) {
                    throw new AssertionError(e);"
5034,call,"                    public void call(Object... args) {
                        socket.close();
                        values.offer(args[0]);
                    }"
5035,call,"            public void call(Object... objects) {
                socket.emit(""echo"", new Date());
                socket.on(""echoBack"", new Emitter.Listener() {
                    @Override"
5036,emitDateAsString,"    public void emitDateAsString() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();
        socket = client();
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... objects) {
                socket.emit(""echo"", new Date());"
5037,call,"            public void call(Object... objects) {
                socket.close();
                manager.close();
                values.offer(reconnects[0]);
            }"
5038,call,"            public void call(Object... args) {
                reconnects[0]++;
                values.offer(args[0]);
            }"
5043,run,"                    public void run() {
                        socket.close();
                        manager.close();
                        values.offer(""done"");
                    }"
5044,call,"            public void call(Object... objects) {
                Timer timer = new Timer();
                timer.schedule(new TimerTask() {
                    @Override"
5045,call,"            public void call(Object... objects) {
                socket.close();
                throw new RuntimeException();
            }"
5048,call,"            public void call(Object... objects) {
                reconnects[0]++;
            }"
5050,call,"            public void call(Object... objects) {
                values.offer(reconnects[0]);
            }"
5053,call,"                    public void call(Object... args) {
                        values.offer(""done"");
                        socket2.disconnect();
                    }"
5054,call,"            public void call(Object... args) {
                final Socket socket2 = manager.socket(""/asd"");
                socket2.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
                    @Override
                    public void call(Object... args) {
                        values.offer(""done"");"
5056,run,"            public void run() {
                manager.engine.close();
            }"
5057,run,"                            public void run() {
                                socket2.disconnect();
                                manager.close();
                                values.offer(true);
                            }"
5058,call,"                    public void call(Object... args) {
                        new Timer().schedule(new TimerTask() {
                            @Override"
5059,call,"                    public void call(Object... args) {
                        values.offer(false);
                    }"
5060,call,"            public void call(Object... args) {
                socket1.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
                    @Override
                    public void call(Object... args) {
                        values.offer(false);"
5063,call,"            public void call(Object... args) {
                socket.io().once(Manager.EVENT_RECONNECT_ATTEMPT, new Emitter.Listener() {
                    @Override
                    public void call(Object... args) {
                        values.offer(""done"");"
5065,run,"                    public void run() {
                        values.offer(true);
                    }"
5067,call,"            public void call(Object... args) {
                socket.io().on(Manager.EVENT_RECONNECT_ATTEMPT, new Emitter.Listener() {
                    @Override
                    public void call(Object... args) {
                        values.offer(false);"
5073,call,"            public void call(Object... args) {
                values.offer(true);
            }"
5074,call,"            public void call(Object... args) {
                reconnects[0]++;
                long currentTime = new Date().getTime();
                long delay = currentTime - startTime[0];
                if (delay <= prevDelay[0]) {
                    increasingDelay[0] = false;
                }"
5075,call,"            public void call(Object... args) {
                startTime[0] = new Date().getTime();
            }"
5077,call,"                    public void call(Object... args) {
                        values.offer(reconnects[0]);
                    }"
5078,call,"                    public void call(Object... args) {
                        reconnects[0]++;
                    }"
5079,call,"            public void call(Object... args) {
                final int[] reconnects = new int[] {0};
                Emitter.Listener reconnectCb = new Emitter.Listener() {
                    @Override
                    public void call(Object... args) {
                        reconnects[0]++;
                    }"
5081,call,"            public void call(Object... args) {
                socket.disconnect();
            }"
5082,run,"                    public void run() {
                        socket.io().engine.close();
                    }"
5083,call,"                    public void call(Object... args) {
                        socket.disconnect();
                        values.offer(""done"");
                    }"
5084,call,"            public void call(Object... args) {
                socket.io().on(Manager.EVENT_RECONNECT, new Emitter.Listener() {
                    @Override
                    public void call(Object... args) {
                        socket.disconnect();"
5085,reconnectAutomaticallyAfterReconnectingManually,"    public void reconnectAutomaticallyAfterReconnectingManually() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();
        socket = client();
        socket.once(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... args) {
                socket.disconnect();"
5088,call,"            public void call(Object... args) {
                socket.once(Socket.EVENT_CONNECT, new Emitter.Listener() {
                    @Override
                    public void call(Object... args) {"
5089,reconnectManually,"    public void reconnectManually() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();
        socket = client();
        socket.once(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... args) {
                socket.disconnect();"
5090,run,"            public void run() {
                socket.io().engine.close();
            }"
5091,call,"            public void call(Object... objects) {
                socket.close();
                values.offer(""done"");
            }"
5092,reconnectByDefault,"    public void reconnectByDefault() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();
        socket = client();
        socket.io().on(Manager.EVENT_RECONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... objects) {
                socket.close();
                values.offer(""done"");"
5093,call,"            public void call(Object... objects) {
                socket.close();
            }"
5094,call,"                    public void call(Object... args) {
                        foo.close();
                        manager.close();
                        values.offer(""done"");
                    }"
5095,call,"            public void call(Object... objects) {
                final Socket foo = manager.socket(""/foo"");
                foo.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
                    @Override
                    public void call(Object... args) {"
5096,connectToNamespaceAfterConnectionGetsClosed,"    public void connectToNamespaceAfterConnectionGetsClosed() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();
        final Manager manager = new Manager(uri());
        socket = manager.socket(""/"");
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... objects) {
                socket.close();"
5097,call,"                    public void call(Object... args) {
                        foo.close();
                        socket.close();
                        manager.close();
                        values.offer(""done"");
                    }"
5101,call,"            public void call(Object... objects) {
                socket.on(""echoBack"", new Emitter.Listener() {
                    @Override
                    public void call(Object... args) {"
5104,call,"            public void call(Object... objects) {
                socket.emit(""echo"", false);
                socket.on(""echoBack"", new Emitter.Listener() {
                    @Override"
5105,workWithFalse,"    public void workWithFalse() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();
        socket = client();
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... objects) {
                socket.emit(""echo"", false);
                socket.on(""echoBack"", new Emitter.Listener() {"
5106,call,"                    public void call(Object... args) {
                       values.offer(args[0]);
                    }"
5107,call,"            public void call(Object... objects) {
                socket.emit(""getAckBinary"", """", new Ack() {
"
5108,receiveBinaryDataWithAck,"    public void receiveBinaryDataWithAck() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();
        final byte[] buf = ""huehue"".getBytes(Charset.forName(""UTF-8""));

        socket = client();
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... objects) {
                socket.emit(""getAckBinary"", """", new Ack() {"
5109,call,"                    public void call(Object... args) {
                        byte[] data = (byte[])args[0];
                        values.offer(data);
                    }"
5110,call,"                    public void call(Object... args) {
                        Ack fn = (Ack) args[0];
                        fn.call(buf);
                    }"
5111,call,"            public void call(Object... objects) {
                socket.emit(""callAckBinary"");
                socket.on(""ack"", new Emitter.Listener() {
                    @Override
                    public void call(Object... args) {"
5112,sendBinaryAck,"    public void sendBinaryAck() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();
        final byte[] buf = ""huehue"".getBytes(Charset.forName(""UTF-8""));

        socket = client();
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... objects) {
                socket.emit(""callAckBinary"");"
5113,call,"                        public void call(Object... args) {
                            values.offer(args[0]);
                        }"
5114,call,"            public void call(Object... objects) {
                try {
                    socket.emit(""getAckDate"", new JSONObject(""{test: true}""), new Ack() {"
5115,receiveDateWithAck,"    public void receiveDateWithAck() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();

        socket = client();
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... objects) {
                try {"
5116,call,"                    public void call(Object... args) {
                        JSONObject data = (JSONObject)args[1];
                        try {
                            if ((Integer)args[0] == 5 && data.getBoolean(""test"")) {"
5117,call,"                    public void call(Object... args) {
                        Ack fn = (Ack) args[0];
                        JSONObject data = new JSONObject();
                        try {
                            data.put(""test"", true);
                        } catch (JSONException e) {"
5118,call,"            public void call(Object... objects) {
                socket.emit(""callAck"");
                socket.on(""ack"", new Emitter.Listener() {
                    @Override
                    public void call(Object... args) {"
5119,workWithAcks,"    public void workWithAcks() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();
        socket = client();
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... objects) {
                socket.emit(""callAck"");
                socket.on(""ack"", new Emitter.Listener() {"
5120,startTwoConnectionsWithSamePathAndDifferentQuerystrings,"    public void startTwoConnectionsWithSamePathAndDifferentQuerystrings() throws InterruptedException {
        Socket s1 = client(""/?woot"");
        Socket s2 = client(""/"");

        assertThat(s1.io(), not(equalTo(s2.io())));
        s1.close();
        s2.close();"
5121,startTwoConnectionsWithSamePath,"    public void startTwoConnectionsWithSamePath() throws InterruptedException {
        Socket s1 = client(""/"");
        Socket s2 = client(""/"");

        assertThat(s1.io(), not(equalTo(s2.io())));
        s1.close();
        s2.close();"
5124,connectToLocalhost,"    public void connectToLocalhost() throws InterruptedException {
        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();
        socket = client();
        socket.on(Socket.EVENT_CONNECT, new Emitter.Listener() {
            @Override
            public void call(Object... objects) {
                socket.emit(""echo"");
                socket.on(""echoBack"", new Emitter.Listener() {"
5125,call,"            public void call(Object... args) {
                System.out.println(""connect error"");
                client.dispatcher().executorService().shutdown();
            }"
5128,call,"                    public void call(Packet packet) {
                        throw new RuntimeException(""received a packet when not all binary data was sent."");
                    }"
5129,call,"            public void call(final Object[] encodedPackets) {
                final IOParser.Decoder decoder = new IOParser.Decoder();
                decoder.onDecoded(new Parser.Decoder.Callback() {
                    @Override
                    public void call(Packet packet) {
                        throw new RuntimeException(""received a packet when not all binary data was sent."");
                    }
                });"
5130,cleanItselfUpOnClose,"    public void cleanItselfUpOnClose() {
        JSONArray data = new JSONArray();
        data.put(new byte[2]);
        data.put(new byte[3]);

        Packet<JSONArray> packet = new Packet<>(Parser.BINARY_EVENT);
        packet.data = data;
        packet.id = 0;
        packet.nsp = ""/"";
"
5131,encodeBinaryAckWithByteArray,"    public void encodeBinaryAckWithByteArray() throws JSONException {
        JSONArray data = new JSONArray(""[a, null, {}]"");
        data.put(1, ""xxx"".getBytes(Charset.forName(""UTF-8"")));

        Packet<JSONArray> packet = new Packet<>(Parser.BINARY_ACK);
        packet.data = data;
        packet.id = 127;
        packet.nsp = ""/back"";
        Helpers.testBin(packet);"
5132,encodeDeepBinaryJSONWithNullValue,"    public void encodeDeepBinaryJSONWithNullValue() throws JSONException {
        JSONArray data = new JSONArray(""[{a: \""b\"", c: 4, e: {g: null}, h: null}]"");
        data.getJSONObject(0).put(""h"", new byte[9]);

        Packet<JSONArray> packet = new Packet<>(Parser.BINARY_EVENT);
        packet.data = data;
        packet.nsp = ""/"";
        packet.id = 600;
        Helpers.testBin(packet);"
5134,encodeByteArray2,"    public void encodeByteArray2() {
        Packet<JSONArray> packet = new Packet<>(Parser.BINARY_EVENT);
        packet.data = new JSONArray(asList(""2"", new byte[] { 0, 1 }));
        packet.id = 0;
        packet.nsp = ""/"";
        Helpers.testBin(packet);
    }"
5135,encodeByteArray,"    public void encodeByteArray() throws JSONException {
        Packet<JSONArray> packet = new Packet<>(Parser.BINARY_EVENT);
        packet.data = new JSONArray(asList(""abc"", ""abc"".getBytes(StandardCharsets.UTF_8)));
        packet.id = 23;
        packet.nsp = ""/cool"";
        Helpers.testBin(packet);
    }"
5136,_reconstructPacket,"    private static Object _reconstructPacket(Object data, byte[][] buffers) {
        if (data instanceof JSONArray) {
            JSONArray _data = (JSONArray)data;
            int len = _data.length();"
5137,reconstructPacket,"    public static Packet reconstructPacket(Packet packet, byte[][] buffers) {
        packet.data = _reconstructPacket(packet.data, buffers);
        packet.attachments = -1;
       return packet;
    }"
5138,_deconstructPacket,"    private static Object _deconstructPacket(Object data, List<byte[]> buffers) {
        if (data == null) return null;

        if (data instanceof byte[]) {
            JSONObject placeholder = new JSONObject();"
5139,deconstructPacket,"    public static DeconstructedPacket deconstructPacket(Packet packet) {
        List<byte[]> buffers = new ArrayList<>();

        packet.data = _deconstructPacket(packet.data, buffers);
        packet.attachments = buffers.size();

        DeconstructedPacket result = new DeconstructedPacket();
        result.packet = packet;
        result.buffers = buffers.toArray(new byte[buffers.size()][]);"
5141,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
        if (mWebView != null) {
            mWebView.removeAllViews();
            ((ViewGroup) mWebView.getParent()).removeView(mWebView);"
5142,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithWebViewActivity.this, MainActivity.class));
        finish();
    }"
5143,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        menu.add(Menu.NONE, Menu.FIRST, Menu.NONE, R.string.auto_refresh_func_demo);
        return super.onCreateOptionsMenu(menu);
    }"
5144,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:"
5145,onPageFinished,"                    public void onPageFinished(WebView view, String url) {
                        mRefreshLayout.refreshComplete();
                    }"
5148,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
        mHandler.removeCallbacksAndMessages(null);
    }"
5149,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithViewPagerActivity.this, MainActivity.class));
        finish();
    }"
5151,run,"                                    public void run() {
                                        mViewPager.setCurrentItem(0, true);
                                        mRefreshLayout.refreshComplete();
                                        Toast.makeText(
                                                        WithViewPagerActivity.this,"
5152,onRefreshing,"                    public void onRefreshing() {
                        mHandler.postDelayed(
                                new Runnable() {"
5155,onBackPressed,"    public void onBackPressed() {
        startActivity(
                new Intent(WithRecyclerViewInCoordinatorLayoutActivity.this, MainActivity.class));
        finish();"
5156,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 20);
                                        mCount += list.size();
                                        mAdapter.appendData(list);
                                        mRefreshLayout.refreshComplete();
                                    }"
5157,onLoadingMore,"                    public void onLoadingMore() {
                        mHandler.postDelayed(
                                new Runnable() {"
5158,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 20);
                                        mCount = list.size();
                                        mAdapter.updateData(list);
                                        mRefreshLayout.refreshComplete();
                                    }"
5160,onClick,"                    public void onClick(View v) {
                        onBackPressed();
                    }"
5163,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithRecyclerViewActivity.this, MainActivity.class));
        finish();
    }"
5164,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        menu.add(Menu.NONE, Menu.FIRST, Menu.NONE, R.string.change_style);
        return super.onCreateOptionsMenu(menu);
    }"
5166,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 15);
                                        mCount += list.size();
                                        mAdapter.appendData(list);
                                        mRefreshLayout.refreshComplete();
                                    }"
5167,onLoadingMore,"                    public void onLoadingMore() {
                        Toast.makeText(
                                        WithRecyclerViewActivity.this,
                                        R.string.has_been_triggered_to_load_more,"
5168,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 60);
                                        mCount = list.size();
                                        mAdapter.insertData(list);
                                        mRefreshLayout.refreshComplete();
                                    }"
5172,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithListViewActivity.this, MainActivity.class));
        finish();
    }"
5175,onClick,"    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.button_with_listView_disable_refresh:"
5176,onStatusChanged,"                    public void onStatusChanged(byte old, byte now) {
                        if (old == SmoothRefreshLayout.SR_STATUS_LOADING_MORE
                                && now == SmoothRefreshLayout.SR_STATUS_COMPLETE) {"
5177,run,"                                    public void run() {
                                        if (mCount >= 50) {
                                            mRefreshLayout.setEnableNoMoreDataAndNoSpringBack(true);
                                        }"
5179,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 30);
                                        mCount = list.size();
                                        mAdapter.updateData(list);
                                        mRefreshLayout.refreshComplete(1200);
                                    }"
5181,onClick,"                    public void onClick(View v) {
                        mRefreshLayout.setEnableNoMoreData(false);
                        mRefreshLayout.forceLoadMore();
                    }"
5184,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithGridViewActivity.this, MainActivity.class));
        finish();
    }"
5186,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 15);
                                        mCount += list.size();
                                        mAdapter.appendData(list);
                                        mRefreshLayout.refreshComplete(100);
                                    }"
5188,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 60);
                                        mCount = list.size();
                                        mAdapter.updateData(list);
                                        mRefreshLayout.refreshComplete();
                                    }"
5192,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(WithFrameLayoutActivity.this, MainActivity.class));
        finish();
    }"
5194,onStatusChanged,"                    public void onStatusChanged(byte old, byte now) {
                        if (now == SmoothRefreshLayout.SR_STATUS_INIT
                                && old == SmoothRefreshLayout.SR_STATUS_COMPLETE) {"
5195,run,"                                    public void run() {
                                        mRefreshLayout.refreshComplete();
                                        String times =
                                                getString(R.string.number_of_refresh) + mCount;
                                        mTextView.setText(times);"
5196,onRefreshing,"                    public void onRefreshing() {
                        mCount++;
                        mHandler.postDelayed(
                                new Runnable() {"
5197,onLongClick,"                    public boolean onLongClick(View v) {
                        Toast.makeText(
                                        WithFrameLayoutActivity.this,
                                        ""LongClicked"","
5198,onClick,"                    public void onClick(View v) {
                        Toast.makeText(WithFrameLayoutActivity.this, ""Clicked"", Toast.LENGTH_SHORT)
                                .show();"
5200,onPureScrollPositionChanged,"    public void onPureScrollPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        mProgress = Math.min(1, indicator.getCurrentPercentOfRefreshOffset());
        mProgress = mProgress * mProgress * mProgress;
        mOffsetY = (mTextRectF.height() + mAmplitude * 2) * (1 - mProgress) + getPaddingTop();
        invalidate();"
5201,onRefreshPositionChanged,"    public void onRefreshPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        if (status == SmoothRefreshLayout.SR_STATUS_PREPARE) {"
5202,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout layout, boolean isSuccessful) {
        mStatus = SmoothRefreshLayout.SR_STATUS_COMPLETE;
    }"
5203,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout layout, IIndicator indicator) {
        if (layout.isRefreshing()) mStatus = SmoothRefreshLayout.SR_STATUS_REFRESHING;
        else mStatus = SmoothRefreshLayout.SR_STATUS_LOADING_MORE;"
5204,onRefreshPrepare,"    public void onRefreshPrepare(SmoothRefreshLayout layout) {
        mStatus = SmoothRefreshLayout.SR_STATUS_PREPARE;
    }"
5205,onReset,"    public void onReset(SmoothRefreshLayout layout) {
        mStatus = SmoothRefreshLayout.SR_STATUS_INIT;
        mProgress = 0;
    }"
5206,onFingerUp,"    public void onFingerUp(SmoothRefreshLayout layout, IIndicator indicator) {}
"
5207,getView,"    public View getView() {
        return this;
    }"
5208,getCustomHeight,"    public int getCustomHeight() {
        return 0;
    }"
5209,getStyle,"    public int getStyle() {
        return STYLE_DEFAULT;
    }"
5210,setType,"    public void setType(@RefreshViewType int type) {
        mType = type;
    }"
5211,getType,"    public int getType() {
        return mType;
    }"
5214,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        mTextPaint.getTextBounds(mText, 0, mText.length(), mTextRect);
        heightMeasureSpec =
                MeasureSpec.makeMeasureSpec(
                        mTextRect.height() + getPaddingTop() + getPaddingBottom(),"
5215,setTypeface,"    public void setTypeface(Typeface typeface) {
        mTextPaint.setTypeface(typeface);
        requestLayout();
    }"
5216,setWaveLength,"    public void setWaveLength(float waveLength) {
        mWaveLength = waveLength;
        requestLayout();
    }"
5217,setAmplitude,"    public void setAmplitude(float amplitude) {
        mAmplitude = amplitude;
        requestLayout();
    }"
5218,setWaveColor,"    public void setWaveColor(@ColorInt int color) {
        mWavePaint.setColor(color);
    }"
5219,setTextColor,"    public void setTextColor(@ColorInt int color) {
        mTextPaint.setColor(color);
    }"
5220,setTextSize,"    public void setTextSize(int unit, float size) {
        mTextPaint.setTextSize(
                (TypedValue.applyDimension("
5221,setTextSize,"    public void setTextSize(float size) {
        setTextSize(TypedValue.COMPLEX_UNIT_SP, size);
    }"
5222,setTextPaint,"    public void setTextPaint(TextPaint paint) {
        mTextPaint = paint;
        requestLayout();
    }"
5223,setTextTypeface,"    public void setTextTypeface(Typeface typeface) {
        mTextPaint.setTypeface(typeface);
        requestLayout();
    }"
5224,setText,"    public void setText(String text) {
        mText = text;
        requestLayout();
    }"
5225,setTextSpacing,"    public void setTextSpacing(float textSpacing) {
        mTextSpacing = textSpacing;
    }"
5226,setIncrementalX,"    public void setIncrementalX(float incrementalX) {
        mIncrementalX = incrementalX;
    }"
5227,setIncrementalY,"    public void setIncrementalY(float incrementalY) {
        mIncrementalY = incrementalY;
    }"
5228,reset,"    private void reset() {
        mMaxY = 0;
        mProgress = 0;
        mLastDrawProgressTime = 0;
        mBarExtraLength = 0;
        mGrowingTime = 0;
        mCurrentPosY = 0;
        mLastPoint[0] = 0;
        mLastPoint[1] = 0;
        mPath.reset();
    }"
5229,updateProgressBounds,"    private void updateProgressBounds() {
        final int width = getWidth();
        mProgressBounds.setEmpty();
        mProgressBounds.set(
                width / 2f - mCircleRadius - mBarWidth,
                mCurrentPosY - mCircleRadius * 2 - mDip2 * 5 - mBarWidth * 2,
                width / 2f + mCircleRadius + mBarWidth,"
5230,onPureScrollPositionChanged,"    public void onPureScrollPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        final int width = getWidth();
        if (indicator.hasTouched()) {
            mLastPoint = new float[] {indicator.getLastMovePoint()[0], mCurrentPosY};
        } else mLastPoint[0] = width / 2f;"
5232,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout layout, boolean isSuccessful) {
        mStatus = SmoothRefreshLayout.SR_STATUS_COMPLETE;
        if (layout.isRefreshSuccessful()) {
            mText =
                    getContext()
                            .getString("
5233,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout layout, IIndicator indicator) {
        mStatus = SmoothRefreshLayout.SR_STATUS_REFRESHING;
        layout.resetScrollerInterpolator();
        updateProgressBounds();
        invalidate();
    }"
5234,onRefreshPrepare,"    public void onRefreshPrepare(SmoothRefreshLayout layout) {
        layout.resetScrollerInterpolator();
        mStatus = SmoothRefreshLayout.SR_STATUS_PREPARE;
        reset();
        invalidate();
    }"
5235,onReset,"    public void onReset(SmoothRefreshLayout layout) {
        layout.resetScrollerInterpolator();
        mStatus = SmoothRefreshLayout.SR_STATUS_INIT;
        reset();
        invalidate();
    }"
5238,drawText,"    private void drawText(Canvas canvas) {
        canvas.save();
        canvas.restore();
        float textCenterY =
                mCurrentPosY + ((mTextPaint.descent() + mTextPaint.ascent()) / 2f) - mDip2 * 5;
        canvas.drawText(mText, getWidth() / 2f, textCenterY, mTextPaint);
        canvas.save();"
5240,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        mPath.reset();
        mPath.moveTo(0, 0);
        mPath.quadTo(mLastPoint[0], mLastPoint[1] * 2, getWidth(), 0);
        mPath.lineTo(0, 0);
        canvas.drawPath(mPath, mWavePaint);
        if (mStatus == SmoothRefreshLayout.SR_STATUS_REFRESHING) {
            drawProgress(canvas);"
5241,setCustomHeight,"    public void setCustomHeight(int height) {
        mDefaultHeight = height;
        requestLayout();
    }"
5242,getCustomHeight,"    public int getCustomHeight() {
        return mDefaultHeight;
    }"
5243,setStyle,"    public void setStyle(@RefreshViewStyle int style) {
        if (mStyle.mStyle != style) {
            mStyle.mStyle = style;"
5244,getStyle,"    public int getStyle() {
        return mStyle.mStyle;
    }"
5245,getType,"    public int getType() {
        return TYPE_HEADER;
    }"
5246,setProgressBarColor,"    public void setProgressBarColor(@ColorInt int color) {
        mBarPaint.setColor(color);
        invalidate();
    }"
5247,setProgressBarWidth,"    public void setProgressBarWidth(int width) {
        mBarWidth = width;
        mBarPaint.setStrokeWidth(mBarWidth);
        invalidate();
    }"
5248,setTextSize,"    public void setTextSize(float size) {
        mTextPaint.setTextSize(size);
        invalidate();
    }"
5249,setTextColor,"    public void setTextColor(@ColorInt int color) {
        mTextPaint.setColor(color);
        invalidate();
    }"
5250,setWaveColor,"    public void setWaveColor(@ColorInt int color) {
        mWavePaint.setColor(color);
        invalidate();
    }"
5251,setDefaultHeight,"    public void setDefaultHeight(int height) {
        mDefaultHeight = height;
        requestLayout();
    }"
5252,getCount,"    public int getCount() {
        return mViewPagerFragments.size();
    }"
5253,getItem,"    public Fragment getItem(int position) {
        return mViewPagerFragments.get(position);
    }"
5255,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestTwoLevelRefreshActivity.this, MainActivity.class));
        finish();
    }"
5256,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        menu.add(Menu.NONE, Menu.FIRST, Menu.NONE, R.string.disable_two_level_refresh);
        return super.onCreateOptionsMenu(menu);
    }"
5258,onStatusChanged,"                    public void onStatusChanged(byte old, byte now) {
                        if (now == SmoothRefreshLayout.SR_STATUS_COMPLETE) {
                            mRefreshLayout.setEnableInterceptEventWhileLoading(false);"
5259,run,"                                    public void run() {
                                        String times =
                                                getString(R.string.number_of_one_level_refresh)
                                                        + mCount;
                                        mRefreshLayout.refreshComplete();"
5261,run,"                                    public void run() {
                                        startActivity(
                                                new Intent(
                                                        getApplicationContext(),"
5262,onTwoLevelRefreshing,"                    public void onTwoLevelRefreshing() {
                        mRefreshLayout.setEnableInterceptEventWhileLoading(true);
                        mTwoLevelCount++;
                        mHandler.postDelayed(
                                new Runnable() {"
5264,onClick,"    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.button_test_scroll_to_auto_refresh_left:"
5266,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestScrollToAutoRefreshActivity.this, MainActivity.class));
        finish();
    }"
5274,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestScaleEffectActivity.this, MainActivity.class));
        finish();
    }"
5276,getInterpolation,"                    public float getInterpolation(float input) {
                        return (float) (--input * input * ((1.7 + 1f) * input + 1.7) + 1f);
                    }"
5279,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestReleaseToRefreshActivity.this, MainActivity.class));
        finish();
    }"
5283,onLoadingMore,"                    public void onLoadingMore() {
                        mCount++;
                        mHandler.postDelayed(
                                new Runnable() {"
5288,onBackPressed,"    public void onBackPressed() {
        startActivity(
                new Intent(
                        TestRecyclerViewInNestedScrollViewInSrlActivity.this, MainActivity.class));"
5289,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        menu.add(Menu.NONE, Menu.FIRST, Menu.NONE, getString(R.string.expand_or_collapse));
        return super.onCreateOptionsMenu(menu);
    }"
5291,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 15);
                                        mCount += list.size();
                                        mAdapter.appendData(list);
                                        mRefreshLayout.refreshComplete(500);
                                    }"
5293,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 60);
                                        mCount = list.size();
                                        mAdapter.updateData(list);
                                        mRefreshLayout.refreshComplete(500);
                                    }"
5298,onBackPressed,"    public void onBackPressed() {
        startActivity(
                new Intent(TestRecyclerViewInNestedScrollViewActivity.this, MainActivity.class));
        finish();"
5308,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestQQWebStyleActivity.this, MainActivity.class));
        finish();
    }"
5313,onCheckedChanged,"    public void onCheckedChanged(RadioGroup group, @IdRes int checkedId) {
        switch (checkedId) {
            case R.id.radioButton_test_qq_activity_style_activity:"
5315,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestQQActivityStyleActivity.this, MainActivity.class));
        finish();
    }"
5317,onChanged,"                    public void onChanged(byte status, IIndicator indicator) {
                        if (mRefreshLayout.getIndicator().isAlreadyHere(IIndicator.START_POS)) {
                            mRadioGroup.setEnabled(true);"
5323,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
    }"
5324,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestOverScrollActivity.this, MainActivity.class));
        finish();
    }"
5327,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
        mFragments.clear();
        mHandler.removeCallbacksAndMessages(null);
    }"
5328,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestNestedWithViewPagerActivity.this, MainActivity.class));
        finish();
    }"
5330,run,"                                    public void run() {
                                        for (int i = 0; i < mFragments.size(); i++) {
                                            NestedPageFragment fragment = mFragments.get(i);
                                            fragment.appendData();"
5332,run,"                                    public void run() {
                                        for (int i = 0; i < mFragments.size(); i++) {
                                            NestedPageFragment fragment = mFragments.get(i);
                                            fragment.updateData();"
5337,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestNestedViewPagerActivity.this, MainActivity.class));
        finish();
    }"
5342,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestNestedHorizontalViewsActivity.this, MainActivity.class));
        finish();
    }"
5344,run,"                                    public void run() {
                                        mViewPager.setCurrentItem(0, true);
                                        mRefreshLayout.refreshComplete();
                                        Toast.makeText(
                                                        TestNestedHorizontalViewsActivity.this,"
5348,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestNestedActivity.this, MainActivity.class));
        finish();
    }"
5357,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestMultiDirectionViewsActivity.this, MainActivity.class));
        finish();
    }"
5360,onRefreshing,"                    public void onRefreshing() {}
"
5361,run,"                                    public void run() {
                                        mViewPager.setCurrentItem(0, true);
                                        mRefreshLayout.refreshComplete();
                                    }"
5366,run,"                                    public void run() {
                                        mRefreshLayout.refreshComplete();
                                    }"
5368,isNotYetInEdgeCannotMoveHeader,"                    public boolean isNotYetInEdgeCannotMoveHeader(
                            SmoothRefreshLayout parent,
                            @Nullable View child,"
5371,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestMaterialStyleActivity.this, MainActivity.class));
        finish();
    }"
5382,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestHorizontalScaleEffectActivity.this, MainActivity.class));
        finish();
    }"
5387,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestHorizontalRefreshActivity.this, MainActivity.class));
        finish();
    }"
5388,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        return super.onCreateOptionsMenu(menu);
    }"
5390,run,"                                    public void run() {
                                        mRefreshLayout.refreshComplete();
                                        Toast.makeText(
                                                        TestHorizontalRefreshActivity.this,"
5396,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestHorizontalRecyclerViewActivity.this, MainActivity.class));
        finish();
    }"
5400,onLoadingMore,"                    public void onLoadingMore() {
                        Toast.makeText(
                                        TestHorizontalRecyclerViewActivity.this,
                                        R.string.has_been_triggered_to_load_more,"
5405,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestBottomSheetDialogActivity.this, MainActivity.class));
        finish();
    }"
5409,onClick,"                            public void onClick(View v) {
                                if (mSheetDialog == null) {
                                    mSheetDialog = new BottomSheetDialog(v.getContext());
                                    mSheetDialog.setContentView(mRootView);"
5412,onBackPressed,"    public void onBackPressed() {
        startActivity(new Intent(TestBaseRecyclerViewAdapterActivity.this, MainActivity.class));
        finish();
    }"
5415,onLoadMoreRequested,"                    public void onLoadMoreRequested() {
                        mHandler.postDelayed(
                                new Runnable() {"
5416,run,"                                    public void run() {
                                        List<String> list = DataUtil.createList(mCount, 20);
                                        mCount = list.size();
                                        mAdapter.setNewData(list);
                                        mRefreshLayout.refreshComplete();
                                    }"
5419,stop,"        private void stop() {
            mRunning = false;
            StoreHouseHeader.this.removeCallbacks(this);
        }"
5420,run,"        public void run() {
            StoreHouseHeader.this.invalidate();
            int pos = mTick % mCountPerSeg;
            for (int i = 0; i < mSegCount; i++) {
                int index = i * mCountPerSeg + pos;
                if (index > mTick) {
                    continue;"
5421,start,"        private void start() {
            mRunning = true;
            mTick = 0;
            mInterval =
                    StoreHouseHeader.this.mLoadingAniDuration
                            / StoreHouseHeader.this.mAnimations.size();
            mCountPerSeg = StoreHouseHeader.this.mLoadingAniSegDuration / mInterval;
            mSegCount = StoreHouseHeader.this.mAnimations.size() / mCountPerSeg + 1;"
5422,calculate,"    private void calculate(IIndicator indicator) {
        mOffsetX = (getWidth() - mDrawZoneWidth) / 2;
        if (mStyle.mStyle != STYLE_SCALE && mStyle.mStyle != STYLE_FOLLOW_SCALE) {
            mOffsetY = getTopOffset();
        } else {"
5423,onPureScrollPositionChanged,"    public void onPureScrollPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        calculate(indicator);
        float currentPercent = Math.min(1f, indicator.getCurrentPercentOfRefreshOffset());
        setProgress(currentPercent);
        invalidate();"
5424,onRefreshPositionChanged,"    public void onRefreshPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        calculate(indicator);
        if (status == SmoothRefreshLayout.SR_STATUS_PREPARE"
5425,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout layout, boolean isSuccessful) {
        loadFinish();
    }"
5426,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout layout, IIndicator indicator) {
        beginLoading();
    }"
5427,onRefreshPrepare,"    public void onRefreshPrepare(SmoothRefreshLayout layout) {}
"
5428,onReset,"    public void onReset(SmoothRefreshLayout layout) {
        loadFinish();
        for (int i = 0; i < mAnimations.size(); i++) {
            mAnimations.get(i).resetPos(mHorizontalRandomness);"
5431,getCustomHeight,"    public int getCustomHeight() {
        return mDrawZoneHeight + getTopOffset() + getBottomOffset();
    }"
5435,onDraw,"    public void onDraw(Canvas canvas) {
        float progress = mProgress;
        int c1 = canvas.save();
        int len = mAnimations.size();
        for (int i = 0; i < len; i++) {
            canvas.save();
            StoreHouseBarItemAnimation storeHouseBarItem = mAnimations.get(i);"
5436,loadFinish,"    private void loadFinish() {
        mAniController.stop();
    }"
5437,beginLoading,"    private void beginLoading() {
        mAniController.start();
        invalidate();
    }"
5439,setScale,"    public void setScale(float scale) {
        mScale = scale;
    }"
5440,getScale,"    public float getScale() {
        return mScale;
    }"
5441,initPathWithStringRes,"    public void initPathWithStringRes(int id) {
        String[] points = getResources().getStringArray(id);
        ArrayList<float[]> pointList = new ArrayList<>(points.length);
        for (String point : points) {
            String[] x = point.split("","");
            float[] f = new float[4];"
5442,initPathWithString,"    public void initPathWithString(String str, float fontWidthInPixel, float fontHeightInPixel) {
        ArrayList<float[]> pointList =
                StoreHousePath.parsePath(str, fontWidthInPixel, fontHeightInPixel, 22);
        initPathWithPointList(pointList);"
5443,initPathWithString,"    public void initPathWithString(String str) {
        initPathWithString(str, 62, 86);
    }"
5444,setBottomOffset,"    public void setBottomOffset(float offsetInDip) {
        mBottomOffset = offsetInDip;
    }"
5445,getBottomOffset,"    private int getBottomOffset() {
        return getPaddingBottom() + PixelUtl.dp2px(getContext(), mBottomOffset);
    }"
5446,setTopOffset,"    public void setTopOffset(float offsetInDip) {
        mTopOffset = offsetInDip;
    }"
5447,getTopOffset,"    public int getTopOffset() {
        return getPaddingTop() + PixelUtl.dp2px(getContext(), mTopOffset);
    }"
5448,onDetachedFromWindow,"    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
        mAniController.stop();
        mAnimations.clear();
    }"
5449,setTextColor,"    public void setTextColor(int color) {
        mTextColor = color;
        for (int i = 0; i < mAnimations.size(); i++) {
            mAnimations.get(i).setColor(color);"
5450,setLineWidth,"    public void setLineWidth(int width) {
        mLineWidth = width;
        for (int i = 0; i < mAnimations.size(); i++) {
            mAnimations.get(i).setLineWidth(width);"
5451,setLoadingAniDuration,"    public void setLoadingAniDuration(int duration) {
        mLoadingAniDuration = duration;
        mLoadingAniSegDuration = duration;
    }"
5452,getLoadingAniDuration,"    public int getLoadingAniDuration() {
        return mLoadingAniDuration;
    }"
5453,setProgress,"    private void setProgress(float progress) {
        mProgress = progress;
    }"
5455,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second_floor);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setDisplayShowHomeEnabled(true);
        getSupportActionBar().setTitle(R.string.second_floor);
    }"
5456,onLongClick,"                        public boolean onLongClick(View v) {
                            Toast.makeText(
                                            v.getContext(),
                                            ""LongClick:"" + getAdapterPosition(),"
5457,onClick,"                        public void onClick(View v) {
                            Toast.makeText(
                                            v.getContext(),"
5458,getItemCount,"    public int getItemCount() {
        return mList.size();
    }"
5459,onBindViewHolder,"    public void onBindViewHolder(@NonNull RecyclerViewHolder holder, int position) {
        holder.mTextView.setText(String.valueOf(position));
        Glide.with(mContext).asBitmap().load(mList.get(position)).into(holder.mImageView);
    }"
5460,onCreateViewHolder,"    public RecyclerViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = mInflater.inflate(R.layout.layout_list_view_item, parent, false);
        return new RecyclerViewHolder(view);
    }"
5461,appendData,"    public void appendData(List<String> list) {
        int size = mList.size();
        mList.addAll(list);
        notifyItemInserted(size);
    }"
5462,insertData,"    public void insertData(List<String> list) {
        mList.addAll(0, list);
        notifyItemRangeInserted(0, list.size());
    }"
5463,updateData,"    public void updateData(List<String> list) {
        mList.clear();
        mList.addAll(list);
        notifyDataSetChanged();
    }"
5464,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == Menu.FIRST) {
            if (mRefreshLayout.getDefaultHeader().getStyle() == IRefreshView.STYLE_SCALE)
                mRefreshLayout.getDefaultHeader().setStyle(IRefreshView.STYLE_PIN);"
5466,onClick,"    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.button_main_with_frameLayout:"
5468,run,"                    public void run() {
                        mRefreshLayout.autoRefresh(ACTION_NOTIFY, true);
                    }"
5469,run,"                                    public void run() {
                                        mRefreshLayout.refreshComplete(800);
                                    }"
5472,convert,"    protected void convert(BaseViewHolder helper, String item) {
        helper.setText(R.id.textView_list_item, String.valueOf(helper.getAdapterPosition()));
        ImageView view = helper.getView(R.id.imageView_list_item);
        Glide.with(mContext).asBitmap().load(item).into(view);
    }"
5473,onLongClick,"                        public boolean onLongClick(View v) {
                            Object obj = mTextView.getTag();
                            if (obj instanceof Integer) {
                                Toast.makeText(
                                                v.getContext(),"
5474,onClick,"                        public void onClick(View v) {
                            Object obj = mTextView.getTag();
                            if (obj instanceof Integer) {
                                Toast.makeText(v.getContext(), ""Click:"" + obj, Toast.LENGTH_SHORT)"
5475,getView,"    public View getView(int position, View convertView, ViewGroup parent) {
        ListViewHolder holder;
        if (convertView == null) {
            convertView = mInflater.inflate(R.layout.layout_list_view_item, parent, false);
            holder = new ListViewHolder(convertView);
            convertView.setTag(holder);
        } else {
            holder = (ListViewHolder) convertView.getTag();"
5476,getItemId,"    public long getItemId(int position) {
        return position;
    }"
5477,getItem,"    public Object getItem(int position) {
        return mList.get(position);
    }"
5478,getCount,"    public int getCount() {
        return mList.size();
    }"
5479,appendData,"    public void appendData(List<String> list) {
        mList.addAll(list);
        notifyDataSetChanged();
    }"
5484,onBindViewHolder,"    public void onBindViewHolder(RecyclerViewHolder holder, int position) {
        holder.mTextView.setText(String.valueOf(position));
        Glide.with(mContext).asBitmap().load(mList.get(position)).into(holder.mImageView);
    }"
5485,onCreateViewHolder,"    public RecyclerViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = mInflater.inflate(R.layout.layout_horizontal_list_view_item, parent, false);
        return new RecyclerViewHolder(view);
    }"
5488,onTwoLevelRefreshBegin,"    public void onTwoLevelRefreshBegin(
            TwoLevelSmoothRefreshLayout layout, ITwoLevelIndicator twoLevelIndicator) {
        mTextViewTitle.setText(R.string.welcome_to_secondary_menu);"
5489,onPureScrollPositionChanged,"    public void onPureScrollPositionChanged(
            SmoothRefreshLayout layout, byte status, ITwoLevelIndicator indicator) {
        if (indicator.hasJustLeftStartPosition()) mTextViewTitle.setVisibility(GONE);"
5490,onRefreshPositionChanged,"    public void onRefreshPositionChanged(
            SmoothRefreshLayout layout, byte status, ITwoLevelIndicator indicator) {
        final int currentPos = indicator.getCurrentPos();
        if (layout instanceof TwoLevelSmoothRefreshLayout) {
            TwoLevelSmoothRefreshLayout refreshLayout = (TwoLevelSmoothRefreshLayout) layout;
            if (!refreshLayout.isDisabledTwoLevelRefresh()"
5491,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout frame, boolean isSuccessful) {
        mTextViewTitle.setVisibility(VISIBLE);
        mTextViewTitle.setText(me.dkzwm.widget.srl.ext.classic.R.string.sr_refresh_complete);
    }"
5492,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout frame, ITwoLevelIndicator indicator) {
        mTextViewTitle.setText(me.dkzwm.widget.srl.ext.classic.R.string.sr_refreshing);
    }"
5493,onFingerUp,"    public void onFingerUp(SmoothRefreshLayout layout, ITwoLevelIndicator indicator) {}
"
5494,onRefreshPrepare,"    public void onRefreshPrepare(SmoothRefreshLayout frame) {
        mTextViewTitle.setVisibility(VISIBLE);
        if (frame.isEnabledPullToRefresh()) {
            mTextViewTitle.setText("
5495,onReset,"    public void onReset(SmoothRefreshLayout frame) {
        mTextViewTitle.setVisibility(VISIBLE);
        if (frame.isEnabledPullToRefresh()) {
            mTextViewTitle.setText("
5497,getCustomHeight,"    public int getCustomHeight() {
        return ViewGroup.LayoutParams.MATCH_PARENT;
    }"
5500,onPureScrollPositionChanged,"    public void onPureScrollPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {}"
5501,onRefreshPositionChanged,"    public void onRefreshPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {}"
5502,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout layout, boolean isSuccessful) {}
"
5503,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout layout, IIndicator indicator) {}
"
5505,onReset,"    public void onReset(SmoothRefreshLayout layout) {}
"
5509,getStyle,"    public int getStyle() {
        return STYLE_PIN;
    }"
5512,onRefreshPositionChanged,"    public void onRefreshPositionChanged(
            SmoothRefreshLayout layout, byte status, IIndicator indicator) {
        final int mOffsetToRefresh = indicator.getOffsetToRefresh();
        final int currentPos = indicator.getCurrentPos();
"
5516,onReset,"    public void onReset(SmoothRefreshLayout layout) {
        mTextViewTitle.setText(R.string.brush);
        mStartedCounter = false;
        mCount = 0;
    }"
5517,onFingerUp,"    public void onFingerUp(SmoothRefreshLayout layout, IIndicator indicator) {
        final int mOffsetToRefresh = indicator.getOffsetToRefresh();
        final int currentPos = indicator.getCurrentPos();

        if (currentPos > mOffsetToRefresh) {"
5524,onRefreshComplete,"    public void onRefreshComplete(SmoothRefreshLayout layout, boolean isSuccessful) {
        pauseAnimation();
    }"
5525,onRefreshBegin,"    public void onRefreshBegin(SmoothRefreshLayout layout, IIndicator indicator) {
        setRenderMode(RenderMode.HARDWARE);
        setRepeatMode(LottieDrawable.RESTART);
        setRepeatCount(LottieDrawable.INFINITE);
        playAnimation();
    }"
5533,reg,"    private void reg(int samplingPointCount) {
        if (!mIsBeginning) {
            if (!mStartingDet) {"
5534,preReg,"    private int preReg(int samplingPointCount) {
        switch (samplingPointCount) {
        case 8:
        case 9:"
5535,process,"    private void process(BufferData data) {
        int size = data.getFilledSize() - 1;
        short sh = 0;
        for (int i = 0; i < size; i++) {
            short sh1 = data.mData[i];"
5536,stop,"    public void stop() {
        if (STATE_START == mState) {
            mState = STATE_STOP;"
5537,start,"    public void start() {
        if (STATE_STOP == mState) {
"
5538,setListener,"    public void setListener(Listener listener) {
        mListener = listener;
    }"
5539,freeRecognitionBuffer,"        void freeRecognitionBuffer(BufferData buffer);
    }"
5544,onStopRecognition,"    public void onStopRecognition() {
        LogHelper.d(TAG, ""stop recognition"");
    }"
5545,onRecognition,"    public void onRecognition(int index) {
        LogHelper.d(TAG, ""recognition:"" + index);
        if (null != mListener) {
            if (Common.START_TOKEN == index) {"
5546,onStartRecognition,"    public void onStartRecognition() {
        LogHelper.d(TAG, ""start recognition"");
    }"
5547,freeRecognitionBuffer,"    public void freeRecognitionBuffer(BufferData buffer) {
        if (null != buffer) {
            if (!mBuffer.putEmpty(buffer)) {"
5548,getRecognitionBuffer,"    public BufferData getRecognitionBuffer() {
        BufferData buffer = mBuffer.getFull();
        if (null == buffer) {
            LogHelper.e(TAG, ""get null full buffer"");
        }"
5549,freeRecordBuffer,"    public void freeRecordBuffer(BufferData buffer) {
        if (null != buffer) {
            if (!mBuffer.putFull(buffer)) {"
5550,getRecordBuffer,"    public BufferData getRecordBuffer() {
        BufferData buffer = mBuffer.getEmpty();
        if (null == buffer) {
            LogHelper.e(TAG, ""get null empty buffer"");
        }"
5551,onStopRecord,"    public void onStopRecord() {
        LogHelper.d(TAG, ""stop record"");
    }"
5552,onStartRecord,"    public void onStartRecord() {
        LogHelper.d(TAG, ""start record"");
    }"
5553,stop,"    public void stop() {
        if (STATE_START == mState) {
            mState = STATE_PENDING;"
5555,run,"                public void run() {
                    mRecord.start();

                    LogHelper.d(TAG, ""record thread end"");

                    LogHelper.d(TAG, ""stop recognition start"");
                    stopRecognition();"
5556,run,"                public void run() {
                    mRecognition.start();
                }"
5557,start,"    public void start() {
        if (STATE_STOP == mState) {
            mState = STATE_PENDING;"
5558,setCodeBook,"    public void setCodeBook(String codeBook) {
        if (!TextUtils.isEmpty(codeBook) && codeBook.length() <= mMaxCodeIndex) {
            mCodeBook = codeBook;"
5563,onPlayStop,"    public void onPlayStop() {
        if (null != mListener) {
            mListener.onPlayEnd();"
5564,onPlayStart,"    public void onPlayStart() {
        if (null != mListener) {
            mListener.onPlayStart();"
5565,freePlayData,"    public void freePlayData(BufferData data) {
        mBuffer.putEmpty(data);
    }"
5566,getPlayBuffer,"    public BufferData getPlayBuffer() {
        return mBuffer.getFull();
    }"
5568,getEncodeBuffer,"    public BufferData getEncodeBuffer() {
        return mBuffer.getEmpty();
    }"
5569,freeEncodeBuffer,"    public void freeEncodeBuffer(BufferData buffer) {
        if (null != buffer) {
            mBuffer.putFull(buffer);"
5570,onStartEncode,"    public void onStartEncode() {
        LogHelper.d(TAG, ""onStartGen"");
    }"
5573,run,"                public void run() {
                    do {
                        LogHelper.d(TAG, ""encode start"");
                        mEncoder.encode(mCodes, DEFAULT_GEN_DURATION, muteInterval);"
5574,run,"                public void run() {
                    mPlayer.start();
                }"
5575,play,"    public void play(final String text, final boolean repeat, final int muteInterval) {
        if (STATE_STOP == mState && null != mCodeBook && convertTextToCodes(text)) {
            mState = STATE_PENDING;"
5576,play,"    public void play(final String text) {
        play(text, false, 0);
    }"
5577,convertTextToCodes,"    private boolean convertTextToCodes(String text) {
        boolean ret = true;

        if (!TextUtils.isEmpty(text)) {
            mCodes.clear();"
5578,setCodeBook,"    public void setCodeBook(String codeBook) {
        if (!TextUtils.isEmpty(codeBook) && codeBook.length() < Encoder.getMaxCodeCount() - 1) {
            mCodeBook = codeBook;"
5582,gen,"    public void gen(int genRate, int duration) {
        if (STATE_START == mState) {
            mGenRate = genRate;"
5583,start,"    public void start() {
        if (STATE_STOP == mState) {
            mState = STATE_START;"
5586,freeGenBuffer,"        void freeGenBuffer(BufferData buffer);
    }"
5591,getState,"    public int getState() {
        return mState;
    }"
5592,start,"    public void start() {
        if (STATE_STOP == mState) {
            switch (mChannel) {"
5594,freeRecordBuffer,"        void freeRecordBuffer(BufferData buffer);
    }"
5598,stop,"    public void stop() {
        if (STATE_START == mState && null != mAudio) {
            mState = STATE_STOP;"
5599,start,"    public void start() {
        LogHelper.d(TAG, ""start"");
        if (STATE_STOP == mState && null != mAudio) {
            mPlayedLen = 0;"
5601,freePlayData,"        void freePlayData(BufferData data);
    }"
5605,v,"    public static final int v(String classTag, String msg) {
        return v(classTag, """", msg);
    }"
5606,v,"    public static final int v(String classTag, String privateTag, String msg) {
        return Log.v(String.format(""%s %s %s"", ROOT_TAG, classTag, privateTag), msg);
    }"
5607,e,"    public static final int e(String classTag, String msg) {
        return e(classTag, """", msg);
    }"
5608,e,"    public static final int e(String classTag, String privateTag, String msg) {
        return Log.e(String.format(""%s %s %s"", ROOT_TAG, classTag, privateTag), msg);
    }"
5609,i,"    public static final int i(String classTag, String msg) {
        return i(classTag, """", msg);
    }"
5610,i,"    public static final int i(String classTag, String privateTag, String msg) {
        return Log.i(String.format(""%s %s %s"", ROOT_TAG, classTag, privateTag), msg);
    }"
5611,d,"    public static final int d(String classTag, String msg) {
        return d(classTag, """", msg);
    }"
5612,d,"    public static final int d(String classTag, String privateTag, String msg) {
        return Log.d(String.format(""%s %s %s"", ROOT_TAG, classTag, privateTag), msg);
    }"
5613,freeGenBuffer,"    public void freeGenBuffer(BufferData buffer) {
        if (null != mCallback) {
            mCallback.freeEncodeBuffer(buffer);"
5614,getGenBuffer,"    public BufferData getGenBuffer() {
        if (null != mCallback) {
            return mCallback.getEncodeBuffer();
        }"
5615,onStopGen,"    public void onStopGen() {
        LogHelper.d(TAG, ""end gen codes"");
    }"
5616,onStartGen,"    public void onStartGen() {
        LogHelper.d(TAG, ""start gen codes"");
    }"
5617,stop,"    public void stop() {
        if (STATE_ENCODING == mState) {
            mState = STATE_STOPED;"
5618,encode,"    public void encode(List<Integer> codes, int duration, int muteInterval) {
        if (STATE_STOPED == mState) {
            mState = STATE_ENCODING;"
5619,encode,"    public void encode(List<Integer> codes, int duration) {
        encode(codes, duration, 0);
    }"
5620,isStoped,"    public final boolean isStoped() {
        return (STATE_STOPED == mState);
    }"
5621,getMaxCodeCount,"    public final static int getMaxCodeCount() {
        return CODE_FREQUENCY.length;
    }"
5624,freeEncodeBuffer,"        void freeEncodeBuffer(BufferData buffer);
"
5627,putImpl,"    private boolean putImpl(BufferData data, BlockingQueue<BufferData> queue) {
        if (null != queue && null != data) {
            try {
                queue.put(data);"
5628,getImpl,"    private BufferData getImpl(BlockingQueue<BufferData> queue) {
        if (null != queue) {
            try {
                return queue.take();"
5629,putFull,"    public boolean putFull(BufferData data) {
        return putImpl(data, mConsumeQueue);
    }"
5630,getFull,"    public BufferData getFull() {
        return getImpl(mConsumeQueue);
    }"
5631,putEmpty,"    public boolean putEmpty(BufferData data) {
        return putImpl(data, mProducerQueue);
    }"
5632,getEmpty,"    public BufferData getEmpty() {
        return getImpl(mProducerQueue);
    }"
5633,getFullCount,"    final public int getFullCount() {
        return mConsumeQueue.size();
    }"
5634,getEmptyCount,"    final public int getEmptyCount() {
        return mProducerQueue.size();
    }"
5635,reset,"    public void reset() {
        int size = mProducerQueue.size();
        for (int i = 0; i < size; ++i) {
            BufferData data = mProducerQueue.peek();
            if (null == data || null == data.mData) {
                mProducerQueue.poll();
            }"
5636,getFilledSize,"        final public int getFilledSize() {
            return mFilledSize;
        }"
5637,setFilledSize,"        final public void setFilledSize(int size) {
            mFilledSize = size;
        }"
5638,getMaxBufferSize,"        final public int getMaxBufferSize() {
            return mMaxBufferSize;
        }"
5639,reset,"        final public void reset() {
            mFilledSize = 0;
        }"
5640,getEmptyBuffer,"        public static BufferData getEmptyBuffer() {
            return sEmptyBuffer;
        }"
5641,onDestroyView,"  @Override public void onDestroyView() {
    super.onDestroyView();
    unbinder.unbind();
  }"
5642,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_step_size_and_gravity, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
5645,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_stars_separation, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
5648,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_size_of_stars, container, false);
    unbinder = ButterKnife.bind(this, view);
    setHasOptionsMenu(true);
"
5649,onClick,"  public void onClick(View view) {
    Toast.makeText(getContext(), ""Clicked!"", Toast.LENGTH_SHORT).show();
  }"
5650,onRatingChanged,"  public void onRatingChanged(SimpleRatingBar simpleRatingBar, float rating, boolean fromUser) {
    String text = String.format(""%.2f"", rating);
    if (simpleRatingBar == ratingBar1) {
      rating1.setText(text);"
5652,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_rating_changed_listener, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);
"
5655,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_number_of_stars, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
5658,onCreateOptionsMenu,"  public boolean onCreateOptionsMenu(Menu menu) {
    MenuInflater inflater = getMenuInflater();
    inflater.inflate(R.menu.menu_main, menu);
    return true;
  }"
5659,getPageTitle,"      @Override public CharSequence getPageTitle(int position) {
        switch (position) {
          case 0:"
5660,getCount,"      @Override public int getCount() {
        return 9;
      }"
5661,getItem,"      @Override public Fragment getItem(int position) {
        switch (position) {
          case 0:"
5662,onCreate,"  @Override protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    ButterKnife.bind(this);

    viewpager.setAdapter(new FragmentStatePagerAdapter(getSupportFragmentManager()) {
      @Override public Fragment getItem(int position) {
        switch (position) {"
5665,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_corner_radius, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
5668,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_border_width, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
5670,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_background_colors, container, false);
    unbinder = ButterKnife.bind(this, view);

    setHasOptionsMenu(true);"
5672,startAnimations,"  private void startAnimations() {
    ratingBar1.getAnimationBuilder()
        .setRepeatCount(ValueAnimator.INFINITE)
        .setRepeatMode(ValueAnimator.REVERSE)
        .setInterpolator(new LinearInterpolator())
        .setRatingTarget(4)
        .start();"
5673,onCreateView,"  public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
      @Nullable Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fragment_animated, container, false);
    unbinder = ButterKnife.bind(this, view);

    startAnimations();"
5674,onDoubleTap,"        public boolean onDoubleTap(int fingers);
    }"
5675,onUnpinch,"        public boolean onUnpinch(int fingers, long gestureDuration, double gestureDistance);
"
5676,onPinch,"        public boolean onPinch(int fingers, long gestureDuration, double gestureDistance);
"
5677,onSwipeRight,"        public boolean onSwipeRight(int fingers, long gestureDuration, double gestureDistance);
"
5678,onSwipeLeft,"        public boolean onSwipeLeft(int fingers, long gestureDuration, double gestureDistance);
"
5679,onSwipeDown,"        public boolean onSwipeDown(int fingers, long gestureDuration, double gestureDistance);
"
5680,onSwipeUp,"        public boolean onSwipeUp(int fingers, long gestureDuration, double gestureDistance);
"
5681,stopTracking,"    private void stopTracking(int nthPointer) {
        for (int i = nthPointer; i < tracking.length; i++) {
            tracking[i] = false;"
5682,startTracking,"    private void startTracking(int nthPointer) {
        for (int i = 0; i <= nthPointer; i++) {
            tracking[i] = true;"
5683,doCallBack,"    private void doCallBack(GestureAnalyser.GestureType mGt) {
        switch (mGt.getGestureFlag()) {
            case GestureAnalyser.SWIPE_1_UP:"
5684,onTouch,"    public boolean onTouch(View view, MotionEvent ev) {
        if (debug) Log.d(TAG, ""onTouch"");
        switch (ev.getAction() & MotionEvent.ACTION_MASK) {
            case MotionEvent.ACTION_DOWN:
                if (debug) Log.d(TAG, ""ACTION_DOWN"");"
5685,setOnFingerGestureListener,"    public void setOnFingerGestureListener(OnFingerGestureListener omfgl) {
        onFingerGestureListener = omfgl;
    }"
5686,setConsumeTouchEvents,"    public void setConsumeTouchEvents(boolean consumeTouchEvents) {
        this.consumeTouchEvents = consumeTouchEvents;
    }"
5687,getConsumeTouchEvents,"    public boolean getConsumeTouchEvents() {
        return consumeTouchEvents;
    }"
5688,setDebug,"    public void setDebug(boolean debug) {
        this.debug = debug;
    }"
5689,onDoubleTap,"            public boolean onDoubleTap(int fingers) {
                grtv.setText(""You double tapped"");
                return false;
            }"
5690,onUnpinch,"            public boolean onUnpinch(int fingers, long gestureDuration, double gestureDistance) {
                grtv.setText(""You unpinched "" + fingers + ""fingers""  + gestureDuration + "" milliseconds "" + gestureDistance + "" pixels far"");
                return false;
            }"
5691,onPinch,"            public boolean onPinch(int fingers, long gestureDuration, double gestureDistance) {
                grtv.setText(""You pinched "" + fingers + "" fingers "" + gestureDuration + "" milliseconds "" + gestureDistance + "" pixels far"");
                return false;
            }"
5692,onSwipeRight,"            public boolean onSwipeRight(int fingers, long gestureDuration, double gestureDistance) {
                grtv.setText(""You swiped "" + fingers + "" fingers  right "" + gestureDuration + "" milliseconds "" + gestureDistance + "" pixels far"");
                return false;
            }"
5693,onSwipeLeft,"            public boolean onSwipeLeft(int fingers, long gestureDuration, double gestureDistance) {
                grtv.setText(""You swiped "" + fingers + "" fingers  left "" + gestureDuration + "" milliseconds "" + gestureDistance + "" pixels far"");
                return false;
            }"
5694,onSwipeDown,"            public boolean onSwipeDown(int fingers, long gestureDuration, double gestureDistance) {
                grtv.setText(""You swiped "" + fingers + "" fingers  down "" + gestureDuration + "" milliseconds "" + gestureDistance + "" pixels far"");
                return false;
            }"
5695,onSwipeUp,"            public boolean onSwipeUp(int fingers, long gestureDuration, double gestureDistance) {
                grtv.setText(""You swiped "" + fingers + "" fingers  up "" + gestureDuration + "" milliseconds "" + gestureDistance + "" pixels far"");
                return false;
            }"
5697,setGestureDistance,"        public void setGestureDistance(double gestureDistance) {
            this.gestureDistance = gestureDistance;
        }"
5698,getGestureDistance,"        public double getGestureDistance() {
            return gestureDistance;
        }"
5699,setGestureFlag,"        public void setGestureFlag(int gestureFlag) {
            this.gestureFlag = gestureFlag;
        }"
5700,getGestureFlag,"        public int getGestureFlag() {
            return gestureFlag;
        }"
5701,setGestureDuration,"        public void setGestureDuration(long gestureDuration) {
            this.gestureDuration = gestureDuration;
        }"
5702,getGestureDuration,"        public long getGestureDuration() {
            return gestureDuration;
        }"
5703,isDoubleTap,"    public boolean isDoubleTap() {
        if (initialT - prevFinalT < doubleTapMaxDelayMillis && finalT - initialT < doubleTapMaxDownMillis && prevFinalT - prevInitialT < doubleTapMaxDownMillis) {
            return true;"
5704,finalFingDist,"    private double finalFingDist(int fingNum1, int fingNum2) {

        return Math.sqrt(Math.pow((finalX[fingNum1] - finalX[fingNum2]), 2)"
5705,initialFingDist,"    private double initialFingDist(int fingNum1, int fingNum2) {

        return Math.sqrt(Math.pow((initialX[fingNum1] - initialX[fingNum2]), 2)"
5706,calcGesture,"    private int calcGesture() {
        if (isDoubleTap()) {
            return DOUBLE_TAP_1;
        }

        if (numFingers == 1) {
            if ((-(delY[0])) > (swipeSlopeIntolerance * (Math.abs(delX[0])))) {
                return SWIPE_1_UP;"
5707,getOngoingGesture,"    public int getOngoingGesture(MotionEvent ev) {
        for (int i = 0; i < numFingers; i++) {
            currentX[i] = ev.getX(i);
            currentY[i] = ev.getY(i);
            delX[i] = finalX[i] - initialX[i];"
5709,untrackGesture,"    public void untrackGesture() {
        numFingers = 0;
        prevFinalT = SystemClock.uptimeMillis();
        prevInitialT = initialT;
    }"
5710,trackGesture,"    public void trackGesture(MotionEvent ev) {
        int n = ev.getPointerCount();
        for (int i = 0; i < n; i++) {
            initialX[i] = ev.getX(i);
            initialY[i] = ev.getY(i);
        }"
5711,onSecondaryPointerUp,"    private void onSecondaryPointerUp(MotionEvent ev) {
        final int pointerIndex = MotionEventCompat.getActionIndex(ev);
        final int pointerId = MotionEventCompat.getPointerId(ev, pointerIndex);
        if (pointerId == mActivePointerId) {
            final int newPointerIndex = pointerIndex == 0 ? 1 : 0;"
5712,getMotionEventY,"    private float getMotionEventY(MotionEvent ev, int activePointerId) {
        final int index = MotionEventCompat.findPointerIndex(ev, activePointerId);
        if (index < 0) {
            return -1;
        }"
5713,dip2px,"    private int dip2px(int dipValue) {
        return (int) (dipValue * mDensity + 0.5f);
    }"
5714,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        for (int i = 0; i < getLettersSize(); i++) {
            float letterPosY = mLetterHeight * (i + 1) + getPaddingTop();
            float diff, diffY, diffX;"
5715,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        mHalfWidth = w - dip2px(16);
        mHalfHeight = h - getPaddingTop() - getPaddingBottom();

        float lettersLen = getLettersSize();

        mLetterHeight = mHalfHeight / lettersLen;
        int textSize = (int) (mHalfHeight * 0.7f / lettersLen);
        this.mPaint.setTextSize(textSize);"
5716,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        final int action = MotionEventCompat.getActionMasked(ev);
        switch (action) {
            case MotionEvent.ACTION_DOWN:
                mActivePointerId = MotionEventCompat.getPointerId(ev, 0);"
5717,getLettersSize,"    private int getLettersSize() {
        return mLetters.length;
    }"
5718,setOnTouchingLetterChangedListener,"    public void setOnTouchingLetterChangedListener(OnTouchingLetterChangedListener listener) {
        this.mOnTouchingLetterChangedListener = listener;
    }"
5719,onTouchingLetterChanged,"        void onTouchingLetterChanged(String s);
    }"
5720,onClick,"            public void onClick(View v) {
                textView.setText(""OnClick "");
            }"
5721,onTouchingLetterChanged,"            public void onTouchingLetterChanged(String s) {
                Log.d(TAG, ""select "" + s);
                textView.setText(""select "" + s);
            }"
5722,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        textView = (TextView) findViewById(R.id.textView);


        SideBar sideBar = (SideBar) findViewById(R.id.sideBar);
        sideBar.setOnTouchingLetterChangedListener(new SideBar.OnTouchingLetterChangedListener() {"
5724,showFragmentPage,"    private void showFragmentPage() {
        new FragmentDemo().showFragment(getSupportFragmentManager());
    }"
5725,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.fragment_page:
                showFragmentPage();"
5726,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main_menu, menu);
        return true;
    }"
5729,getItemId,"        public long getItemId(int i) {
            return 0;
        }"
5730,getItem,"        public Object getItem(int i) {
            return dataList.get(i);
        }"
5731,getCount,"        public int getCount() {
            return dataList.size();
        }"
5732,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_list_demo);
        listView = findViewById(R.id.list);
        listView.setAdapter(new ListAdapter());
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS, WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS);
"
5733,hideFragment,"    public void hideFragment() {
        fragmentManager.popBackStack();
    }"
5734,showFragment,"    public void showFragment(final FragmentManager fragmentManager) {
        this.fragmentManager = fragmentManager;
        FragmentTransaction transaction = fragmentManager.beginTransaction();
        transaction.setCustomAnimations(
                R.anim.fragmentv_slide_bottom_enter,
                0,
                0,
                R.anim.fragmentv_slide_top_exit);"
5736,onResume,"    public void onResume() {
        initData();
        super.onResume();
    }"
5737,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        rootView = inflater.inflate(R.layout.common_fragment, null);
        return rootView;
    }"
5738,clearStaticAnimationProgress,"  public void clearStaticAnimationProgress() {
    mShimmerDrawable.clearStaticAnimationProgress();
  }"
5739,setStaticAnimationProgress,"  public void setStaticAnimationProgress(float value) {
    mShimmerDrawable.setStaticAnimationProgress(value);
  }"
5740,verifyDrawable,"  protected boolean verifyDrawable(@NonNull Drawable who) {
    return super.verifyDrawable(who) || who == mShimmerDrawable;
  }"
5741,dispatchDraw,"  public void dispatchDraw(Canvas canvas) {
    super.dispatchDraw(canvas);
    if (mShowShimmer) {
      mShimmerDrawable.draw(canvas);"
5742,onDetachedFromWindow,"  public void onDetachedFromWindow() {
    super.onDetachedFromWindow();
    stopShimmer();
  }"
5743,onAttachedToWindow,"  public void onAttachedToWindow() {
    super.onAttachedToWindow();
    mShimmerDrawable.maybeStartShimmer();
  }"
5745,onLayout,"  public void onLayout(boolean changed, int left, int top, int right, int bottom) {
    super.onLayout(changed, left, top, right, bottom);
    final int width = getWidth();
    final int height = getHeight();
    mShimmerDrawable.setBounds(0, 0, width, height);
  }"
5746,isShimmerRunning,"  public boolean isShimmerRunning() {
    return mShimmerDrawable.isShimmerRunning();
  }"
5747,isShimmerVisible,"  public boolean isShimmerVisible() {
    return mShowShimmer;
  }"
5748,hideShimmer,"  public void hideShimmer() {
    stopShimmer();
    mShowShimmer = false;
    invalidate();
  }"
5749,showShimmer,"  public void showShimmer(boolean startShimmer) {
    mShowShimmer = true;
    if (startShimmer) {
      startShimmer();
    }"
5750,isShimmerStarted,"  public boolean isShimmerStarted() {
    return mShimmerDrawable.isShimmerStarted();
  }"
5751,stopShimmer,"  public void stopShimmer() {
    mStoppedShimmerBecauseVisibility = false;
    mShimmerDrawable.stopShimmer();
  }"
5752,startShimmer,"  public void startShimmer() {
    if (isAttachedToWindow()) {
      mShimmerDrawable.startShimmer();"
5753,getShimmer,"  public @Nullable Shimmer getShimmer() {
    return mShimmerDrawable.getShimmer();
  }"
5754,setShimmer,"  public ShimmerFrameLayout setShimmer(@Nullable Shimmer shimmer) {
    mShimmerDrawable.setShimmer(shimmer);
    if (shimmer != null && shimmer.clipToChildren) {
      setLayerType(LAYER_TYPE_HARDWARE, mContentPaint);
    } else {"
5755,init,"  private void init(Context context, @Nullable AttributeSet attrs) {
    setWillNotDraw(false);
    mShimmerDrawable.setCallback(this);

    if (attrs == null) {
      setShimmer(new Shimmer.AlphaHighlightBuilder().build());
      return;"
5756,updateShader,"  private void updateShader() {
    final Rect bounds = getBounds();
    final int boundsWidth = bounds.width();
    final int boundsHeight = bounds.height();
    if (boundsWidth == 0 || boundsHeight == 0 || mShimmer == null) {
      return;
    }
    final int width = mShimmer.width(boundsWidth);
    final int height = mShimmer.height(boundsHeight);

    final Shader shader;"
5757,maybeStartShimmer,"  void maybeStartShimmer() {
    if (mValueAnimator != null
        && !mValueAnimator.isStarted()"
5758,updateValueAnimator,"  private void updateValueAnimator() {
    if (mShimmer == null) {
      return;
    }

    final boolean started;
    if (mValueAnimator != null) {
      started = mValueAnimator.isStarted();
      mValueAnimator.cancel();
      mValueAnimator.removeAllUpdateListeners();
    } else {
      started = false;
    }"
5759,offset,"  private float offset(float start, float end, float percent) {
    return start + (end - start) * percent;
  }"
5760,getOpacity,"  public int getOpacity() {
    return mShimmer != null && (mShimmer.clipToChildren || mShimmer.alphaShimmer)
        ? PixelFormat.TRANSLUCENT"
5764,clearStaticAnimationProgress,"  public void clearStaticAnimationProgress() {
    setStaticAnimationProgress(-1f);
  }"
5765,setStaticAnimationProgress,"  public void setStaticAnimationProgress(float value) {
    if (Float.compare(value, mStaticAnimationProgress) == 0
        || (value < 0f && mStaticAnimationProgress < 0f)) {
      return;
    }"
5766,onBoundsChange,"  public void onBoundsChange(Rect bounds) {
    super.onBoundsChange(bounds);
    mDrawRect.set(bounds);
    updateShader();
    maybeStartShimmer();
  }"
5767,isShimmerRunning,"  public boolean isShimmerRunning() {
    return mValueAnimator != null && mValueAnimator.isRunning();
  }"
5768,isShimmerStarted,"  public boolean isShimmerStarted() {
    return mValueAnimator != null && mValueAnimator.isStarted();
  }"
5769,stopShimmer,"  public void stopShimmer() {
    if (mValueAnimator != null && isShimmerStarted()) {
      mValueAnimator.cancel();"
5770,startShimmer,"  public void startShimmer() {
    if (mValueAnimator != null && !isShimmerStarted() && getCallback() != null) {
      mValueAnimator.start();"
5771,getShimmer,"  public @Nullable Shimmer getShimmer() {
    return mShimmer;
  }"
5772,setShimmer,"  public void setShimmer(@Nullable Shimmer shimmer) {
    mShimmer = shimmer;
    if (mShimmer != null) {
      mShimmerPaint.setXfermode(
          new PorterDuffXfermode(
              mShimmer.alphaShimmer ? PorterDuff.Mode.DST_IN : PorterDuff.Mode.SRC_IN));
    }"
5773,onAnimationUpdate,"        public void onAnimationUpdate(ValueAnimator animation) {
          invalidateSelf();
        }"
5774,getThis,"    protected ColorHighlightBuilder getThis() {
      return this;
    }"
5775,consumeAttributes,"    ColorHighlightBuilder consumeAttributes(TypedArray a) {
      super.consumeAttributes(a);
      if (a.hasValue(R.styleable.ShimmerFrameLayout_shimmer_base_color)) {
        setBaseColor(
            a.getColor(R.styleable.ShimmerFrameLayout_shimmer_base_color, mShimmer.baseColor));
      }"
5776,setBaseColor,"    public ColorHighlightBuilder setBaseColor(@ColorInt int color) {
      mShimmer.baseColor = (mShimmer.baseColor & 0xFF000000) | (color & 0x00FFFFFF);
      return getThis();
    }"
5777,setHighlightColor,"    public ColorHighlightBuilder setHighlightColor(@ColorInt int color) {
      mShimmer.highlightColor = color;
      return getThis();
    }"
5778,getThis,"    protected AlphaHighlightBuilder getThis() {
      return this;
    }"
5779,clamp,"    private static float clamp(float min, float max, float value) {
      return Math.min(max, Math.max(min, value));
    }"
5780,build,"    public Shimmer build() {
      mShimmer.updateColors();
      mShimmer.updatePositions();
      return mShimmer;
    }"
5781,setDuration,"    public T setDuration(long millis) {
      if (millis < 0) {
        throw new IllegalArgumentException(""Given a negative duration: "" + millis);
      }
      mShimmer.animationDuration = millis;"
5782,setStartDelay,"    public T setStartDelay(long millis) {
      if (millis < 0) {
        throw new IllegalArgumentException(""Given a negative start delay: "" + millis);
      }
      mShimmer.startDelay = millis;"
5783,setRepeatDelay,"    public T setRepeatDelay(long millis) {
      if (millis < 0) {
        throw new IllegalArgumentException(""Given a negative repeat delay: "" + millis);
      }
      mShimmer.repeatDelay = millis;"
5784,setRepeatMode,"    public T setRepeatMode(int mode) {
      mShimmer.repeatMode = mode;
      return getThis();
    }"
5785,setRepeatCount,"    public T setRepeatCount(int repeatCount) {
      mShimmer.repeatCount = repeatCount;
      return getThis();
    }"
5786,setAutoStart,"    public T setAutoStart(boolean status) {
      mShimmer.autoStart = status;
      return getThis();
    }"
5787,setClipToChildren,"    public T setClipToChildren(boolean status) {
      mShimmer.clipToChildren = status;
      return getThis();
    }"
5788,setHighlightAlpha,"    public T setHighlightAlpha(@FloatRange(from = 0, to = 1) float alpha) {
      int intAlpha = (int) (clamp(0f, 1f, alpha) * 255f);
      mShimmer.highlightColor = intAlpha << 24 | (mShimmer.highlightColor & 0x00FFFFFF);
      return getThis();
    }"
5789,setBaseAlpha,"    public T setBaseAlpha(@FloatRange(from = 0, to = 1) float alpha) {
      int intAlpha = (int) (clamp(0f, 1f, alpha) * 255f);
      mShimmer.baseColor = intAlpha << 24 | (mShimmer.baseColor & 0x00FFFFFF);
      return getThis();
    }"
5790,setTilt,"    public T setTilt(float tilt) {
      mShimmer.tilt = tilt;
      return getThis();
    }"
5791,setDropoff,"    public T setDropoff(float dropoff) {
      if (dropoff < 0f) {
        throw new IllegalArgumentException(""Given invalid dropoff value: "" + dropoff);
      }
      mShimmer.dropoff = dropoff;"
5792,setIntensity,"    public T setIntensity(float intensity) {
      if (intensity < 0f) {
        throw new IllegalArgumentException(""Given invalid intensity value: "" + intensity);
      }
      mShimmer.intensity = intensity;"
5793,setHeightRatio,"    public T setHeightRatio(float heightRatio) {
      if (heightRatio < 0f) {
        throw new IllegalArgumentException(""Given invalid height ratio: "" + heightRatio);
      }
      mShimmer.heightRatio = heightRatio;"
5794,setWidthRatio,"    public T setWidthRatio(float widthRatio) {
      if (widthRatio < 0f) {
        throw new IllegalArgumentException(""Given invalid width ratio: "" + widthRatio);
      }
      mShimmer.widthRatio = widthRatio;"
5795,setFixedHeight,"    public T setFixedHeight(@Px int fixedHeight) {
      if (fixedHeight < 0) {
        throw new IllegalArgumentException(""Given invalid height: "" + fixedHeight);
      }
      mShimmer.fixedHeight = fixedHeight;"
5796,setFixedWidth,"    public T setFixedWidth(@Px int fixedWidth) {
      if (fixedWidth < 0) {
        throw new IllegalArgumentException(""Given invalid width: "" + fixedWidth);
      }
      mShimmer.fixedWidth = fixedWidth;"
5797,setShape,"    public T setShape(@Shape int shape) {
      mShimmer.shape = shape;
      return getThis();
    }"
5798,setDirection,"    public T setDirection(@Direction int direction) {
      mShimmer.direction = direction;
      return getThis();
    }"
5801,consumeAttributes,"    public T consumeAttributes(Context context, AttributeSet attrs) {
      TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ShimmerFrameLayout, 0, 0);
      return consumeAttributes(a);
    }"
5803,updateBounds,"  void updateBounds(int viewWidth, int viewHeight) {
    int magnitude = Math.max(viewWidth, viewHeight);
    double rad = Math.PI / 2f - Math.toRadians(tilt % 90f);
    double hyp = magnitude / Math.sin(rad);
    int padding = 3 * Math.round((float) (hyp - magnitude) / 2f);
    bounds.set(-padding, -padding, width(viewWidth) + padding, height(viewHeight) + padding);
  }"
5804,updatePositions,"  void updatePositions() {
    switch (shape) {
      default:"
5805,updateColors,"  void updateColors() {
    switch (shape) {
      default:"
5806,height,"  int height(int height) {
    return fixedHeight > 0 ? fixedHeight : Math.round(heightRatio * height);
  }"
5807,width,"  int width(int width) {
    return fixedWidth > 0 ? fixedWidth : Math.round(widthRatio * width);
  }"
5808,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }"
5809,onClick,"            public void onClick(View v) {
                mScrollLayout.setToOpen();
            }"
5810,onClick,"            public void onClick(View v) {
                mScrollLayout.scrollToExit();
            }"
5812,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_three);
        initView();
    }"
5813,onChildScroll,"        public void onChildScroll(int top) {
        }"
5814,onScrollFinished,"        public void onScrollFinished(ScrollLayout.Status currentStatus) {
            if (currentStatus.equals(ScrollLayout.Status.EXIT)) {
                text_foot.setVisibility(View.VISIBLE);"
5815,onScrollProgressChanged,"        public void onScrollProgressChanged(float currentProgress) {
            if (currentProgress >= 0) {
                float precent = 255 * currentProgress;
                if (precent > 255) {"
5816,initGirlUrl,"    private void initGirlUrl() {
        mAllAddressList = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            Address address = new Address();"
5817,onClick,"            public void onClick(View v) {
                onBackPressed();
            }"
5819,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second);
        initGirlUrl();
        initView();
    }"
5820,onPageScrollStateChanged,"        public void onPageScrollStateChanged(int state) {
"
5821,onPageSelected,"        public void onPageSelected(int position) {
            mGirlDesText.setText(mAllAddressList.get(position).getDesContent());
        }"
5822,onPageScrolled,"        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
"
5824,onScrollFinished,"        public void onScrollFinished(ScrollLayout.Status currentStatus) {
            if (currentStatus.equals(ScrollLayout.Status.EXIT)) {
                finish();"
5825,onScrollProgressChanged,"        public void onScrollProgressChanged(float currentProgress) {
            if (currentProgress >= 0) {
                float precent = 255 * currentProgress;"
5826,onClickItem,"        public void onClickItem(View item, int position) {
            if (mScrollLayout.getCurrentStatus() == ScrollLayout.Status.OPENED) {
                mScrollLayout.scrollToClose();"
5828,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, SecondActivity.class));
            }"
5831,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();
    }"
5835,onPrepared,"            public void onPrepared(MediaPlayer mp) {
                View progress = findViewById(R.id.videoProgress);
                progress.setVisibility(View.GONE);

                videoView.requestFocus();
                MediaController vidControl = new MediaController(VideoPlayerActivity.this);
                vidControl.setAnchorView(videoView);
                videoView.setMediaController(vidControl);
                videoView.start();"
5837,calculateInSampleSize,"    private int calculateInSampleSize(int imgWidth, int imgHeight, int maxWidth, int maxHeight) {
        int inSampleSize = 1;
        while (imgWidth / inSampleSize > maxWidth || imgHeight / inSampleSize > maxHeight) {
            inSampleSize *= 2;
        }"
5838,scroll,"    private void scroll(View thumbnail) {
        int thumbnailCoords[] = new int[2];
        thumbnail.getLocationOnScreen(thumbnailCoords);

        int thumbnailCenterX = thumbnailCoords[0] + thumbnailSize / 2;
        int thumbnailDelta = displayProps.x / 2 - thumbnailCenterX;
"
5839,initializeViewPager,"    private void initializeViewPager() {
        viewPager = (HackyViewPager) findViewById(R.id.viewPager);

        pagerAdapter = new ScreenSlidePagerAdapter(
                fragmentManager, 
                mListOfMedia, "
5840,createThumbnail,"    private Bitmap createThumbnail(Bitmap image) {
        return ThumbnailUtils.extractThumbnail(image, thumbnailSize, thumbnailSize);
    }"
5842,addThumbnail,"    private ImageView addThumbnail(Bitmap image) {
        LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(thumbnailSize, thumbnailSize);
        lp.setMargins(10, 10, 10, 10);
        Bitmap thumbnail = createThumbnail(image);

        ImageView thumbnailView = createThumbnailView(lp, thumbnail);
        thumbnailsContainer.addView(thumbnailView);
        return thumbnailView;"
5843,removeThumbnail,"    private void removeThumbnail(int position) {
        View thumbnail = thumbnailsContainer.getChildAt(position);
        if (thumbnail == null) {
            return;
        }"
5844,getDisplaySize,"    private Point getDisplaySize() {
        WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        Display display = windowManager.getDefaultDisplay();
        Point point = new Point();
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
            display.getSize(point);
        } else {"
5845,getDefaultThumbnail,"    private Bitmap getDefaultThumbnail() {
        return ((BitmapDrawable) getContext().getResources().getDrawable(R.drawable.placeholder_image)).getBitmap();
    }"
5846,setThumbnailsTransition,"    private void setThumbnailsTransition() {
        if (thumbnailsTransition == null && useDefaultThumbnailsTransition) {
            TransitionManager.beginDelayedTransition(horizontalScrollView);"
5847,run,"            public void run() {
                hideThumbnails();
                isThumbnailsHidden = !isThumbnailsHidden;
            }"
5848,hideThumbnailsAfterDelay,"    private void hideThumbnailsAfterDelay(int delay) {
        horizontalScrollView.postDelayed(new Runnable() {
            @Override"
5849,from,"    public static GalleryBuilder from(ScrollGalleryView galleryView) {
        return new GalleryBuilderImpl(galleryView);
    }"
5850,removeMedia,"    public void removeMedia(int position) {
        if (position >= mListOfMedia.size() || position < 0) {
            return;
        }
        pagerAdapter.removeItem(position);"
5852,hideThumbnails,"    public void hideThumbnails() {
        setThumbnailsTransition();
        horizontalScrollView.setVisibility(GONE);
    }"
5854,hideThumbnailsAfter,"    public ScrollGalleryView hideThumbnailsAfter(int hideThumbnailsAfterDelay) {
        if (!isThumbnailsHidden) {
            this.hideThumbnailsAfterDelay = hideThumbnailsAfterDelay;
        }"
5855,hideThumbnailsOnClick,"    public ScrollGalleryView hideThumbnailsOnClick(boolean hideThumbnailsOnClick, Transition thumbnailsTransition) {
        if (!isThumbnailsHidden) {
            this.hideThumbnailsOnClick = hideThumbnailsOnClick;
            this.thumbnailsTransition = thumbnailsTransition;"
5856,hideThumbnailsOnClick,"    public ScrollGalleryView hideThumbnailsOnClick(boolean hideThumbnailsOnClick) {
        if (!isThumbnailsHidden) {
            this.hideThumbnailsOnClick = hideThumbnailsOnClick;
            if (hideThumbnailsOnClick) this.useDefaultThumbnailsTransition = true;"
5857,withHiddenThumbnails,"    public ScrollGalleryView withHiddenThumbnails(boolean isThumbnailsHidden) {
        if (this.isThumbnailsHidden && !isThumbnailsHidden) {
            showThumbnails();
        } else if (!this.isThumbnailsHidden && isThumbnailsHidden) {
            hideThumbnails();"
5858,setZoom,"    public ScrollGalleryView setZoom(boolean zoomEnabled) {
        this.zoomEnabled = zoomEnabled;
        return this;
    }"
5859,setThumbnailSize,"    public ScrollGalleryView setThumbnailSize(int thumbnailSize) {
        this.thumbnailSize = thumbnailSize;
        return this;
    }"
5860,getCurrentItem,"    public int getCurrentItem() {
        return viewPager.getCurrentItem();
    }"
5861,setCurrentItem,"    public ScrollGalleryView setCurrentItem(int i) {
        viewPager.setCurrentItem(i, false);
        return this;
    }"
5862,onSuccess,"                public void onSuccess() {
                    thumbnail.setScaleType(ImageView.ScaleType.FIT_CENTER);
                }"
5863,addMedia,"    public ScrollGalleryView addMedia(List<MediaInfo> infos) {
        if (infos == null) {
            throw new NullPointerException(""Infos may not be null!"");
        }
"
5864,addMedia,"    public ScrollGalleryView addMedia(MediaInfo mediaInfo) {
        if (mediaInfo == null) {
            throw new NullPointerException(""Infos may not be null!"");
        }"
5865,onPageScrollStateChanged,"            @Override public void onPageScrollStateChanged(int state) {
                listener.onPageScrollStateChanged(state);
            }"
5866,onPageSelected,"            @Override public void onPageSelected(int position) {
                scroll(thumbnailsContainer.getChildAt(position));
                listener.onPageSelected(position);
            }"
5867,onPageScrolled,"            @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
                listener.onPageScrolled(position, positionOffset, positionOffsetPixels);
            }"
5868,addOnPageChangeListener,"    public void addOnPageChangeListener(final ViewPager.OnPageChangeListener listener) {
        viewPager.clearOnPageChangeListeners();
        viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
            @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {"
5869,addOnImageLongClickListener,"    public ScrollGalleryView addOnImageLongClickListener(OnImageLongClickListener onImageLongClickListener) {
        this.onImageLongClickListener = onImageLongClickListener;
        return this;
    }"
5870,addOnImageClickListener,"    public ScrollGalleryView addOnImageClickListener(OnImageClickListener onImageClickListener) {
        this.onImageClickListener = onImageClickListener;
        return this;
    }"
5871,getViewPager,"    public ViewPager getViewPager() {
        return viewPager;
    }"
5872,setFragmentManager,"    public ScrollGalleryView setFragmentManager(FragmentManager fragmentManager) {
        this.fragmentManager = fragmentManager;
        initializeViewPager();

        if (hideThumbnailsAfterDelay != null) hideThumbnailsAfterDelay(hideThumbnailsAfterDelay);
"
5875,onClick,"        public void onClick(int position) {
            if (onImageLongClickListener != null) onImageLongClickListener.onClick(position);
        }"
5876,onClick,"        public void onClick(int position) {
            if (hideThumbnailsOnClick) {
                if (isThumbnailsHidden) {
                    showThumbnails();"
5877,onClick,"        @Override public void onClick(View v) {
            scroll(v);
            viewPager.setCurrentItem((int) v.getId(), true);
        }"
5878,onPageSelected,"        @Override public void onPageSelected(int position) {
            scroll(thumbnailsContainer.getChildAt(position));
        }"
5879,getItemPosition,"    public int getItemPosition(Object object) {
        return PagerAdapter.POSITION_NONE;
    }"
5880,getCount,"    public int getCount() {
        return mListOfMedia.size();
    }"
5881,removeItem,"    public void removeItem(int position) {
        mListOfMedia.remove(position);
        notifyDataSetChanged();
    }"
5883,getItem,"    public Fragment getItem(int position) {
        Fragment fragment = null;
        if (position < mListOfMedia.size()) {
            MediaInfo mediaInfo = mListOfMedia.get(position);
            fragment = loadImageFragment(mediaInfo, position);"
5884,setLoader,"    public MediaInfo setLoader(MediaLoader loader) {
        mLoader = loader;
        return this;
    }"
5885,getLoader,"    public MediaLoader getLoader() {
        return mLoader;
    }"
5886,mediaLoader,"    public static MediaInfo mediaLoader(MediaLoader mediaLoader) {
        return new MediaInfo().setLoader(mediaLoader);
    }"
5887,isBackgroundImageActive,"    private boolean isBackgroundImageActive() {
        return photoView != null && photoView.getDrawable() != null;
    }"
5888,isViewPagerActive,"    private boolean isViewPagerActive() {
        return viewPager != null;
    }"
5889,onSaveInstanceState,"    public void onSaveInstanceState(@NonNull Bundle outState) {
        if (isViewPagerActive()) {
            outState.putBoolean(Constants.IS_LOCKED, viewPager.isLocked());
        }"
5890,onSuccess,"                public void onSuccess() {}
            });"
5891,loadImageToView,"    private void loadImageToView() {
        if (mMediaInfo != null) {
            mMediaInfo.getLoader().loadMedia(getActivity(), photoView, new MediaLoader.SuccessCallback() {"
5892,getPosition,"    private int getPosition() {
        return getArguments().getInt(Constants.POSITION);
    }"
5893,onLongClick,"                public boolean onLongClick(View v) {
                    onImageLongClickListener.onClick(getPosition());
                    return true;
                }"
5894,onClick,"                public void onClick(View view) {
                    onImageClickListener.onClick(getPosition());
                }"
5896,setMediaInfo,"    public void setMediaInfo(MediaInfo mediaInfo) {
        mMediaInfo = mediaInfo;
    }"
5897,setOnImageLongClickListener,"    public void setOnImageLongClickListener(ScrollGalleryView.OnImageLongClickListener onImageLongClickListener) {
        this.onImageLongClickListener = onImageLongClickListener;
    }"
5898,setOnImageClickListener,"    public void setOnImageClickListener(ScrollGalleryView.OnImageClickListener onImageClickListener) {
        this.onImageClickListener = onImageClickListener;
    }"
5899,setTransitionName,"    public void setTransitionName(String transitionName) {
        this.transitionName = transitionName;
    }"
5900,isLocked,"    public boolean isLocked() {
        return isLocked;
    }"
5901,setLocked,"    public void setLocked(boolean isLocked) {
        this.isLocked = isLocked;
    }"
5902,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        return !isLocked && super.onTouchEvent(ev);
    }"
5903,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent ev) {
        if(!isLocked) {
            try {
                return super.onInterceptTouchEvent(ev);"
5904,showToast,"    private void showToast(String msg) {
        Toast.makeText(this, msg, Toast.LENGTH_SHORT).show();
    }"
5905,onError,"                    public void onError(ApiException e) {
                        super.onError(e);
                        showToast(e.getMessage());
                    }"
5906,onSuccess,"                    public void onSuccess(String s) {
                        showToast(s);
                    }"
5908,onUploadOne,"    public void onUploadOne(View view) {
        File file = new File(Environment.getExternalStorageDirectory().getPath()+""/1.jpg"");
        UIProgressResponseCallBack mUIProgressResponseCallBack = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {"
5910,onSuccess,"                    public void onSuccess(String response) {
                        showToast(response);
                    }"
5912,onUploadFileMaps2,"    public void onUploadFileMaps2(View view) {
        File file = new File(Environment.getExternalStorageDirectory().getPath()+""/1.jpg"");
        UIProgressResponseCallBack mUIProgressResponseCallBack = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {"
5916,onUploadFileMaps,"    public void onUploadFileMaps(View view) {
        File file = new File(Environment.getExternalStorageDirectory().getPath()+""/1.jpg"");
        UIProgressResponseCallBack mUIProgressResponseCallBack = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {"
5924,onUploadInputStream,"    public void onUploadInputStream(View view) throws Exception {
        final UIProgressResponseCallBack listener = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {
                int progress = (int) (bytesRead * 100 / contentLength);"
5928,onUploadFile,"    public void onUploadFile(View view) throws Exception {
        final UIProgressResponseCallBack listener = new UIProgressResponseCallBack() {
            @Override
            public void onUIResponseProgress(long bytesRead, long contentLength, boolean done) {
                int progress = (int) (bytesRead * 100 / contentLength);"
5930,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_upload);
    }"
5931,onDestroy,"    protected void onDestroy() {
        EasyHttp.cancelSubscription(mDisposable);
        super.onDestroy();
    }"
5932,onNext,"                    public void onNext(@NonNull Content2 content) {
                        mTextView.setText(content.toString());
                    }"
5933,onError,"                    public void onError(ApiException e) {
                        mTextView.setText(e.getMessage());
                    }"
5934,onStart,"                    protected void onStart() {
                    }"
5938,findView,"    protected <T extends View> T findView(@IdRes int id) {
        return (T) findViewById(id);
    }"
5939,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_search);
        mEditText = findView(R.id.edit_text);
        mTextView = findView(R.id.content_text);
        search();
    }"
5940,showToast,"    private void showToast(String msg) {
        Toast.makeText(this, msg, Toast.LENGTH_LONG).show();
    }"
5941,onFrequentlyRquest,"    public void onFrequentlyRquest(View view) {
        Intent intent = new Intent(SceneActivity.this, SearchActivity.class);
        startActivity(intent);
    }"
5943,onNext,"            public void onNext(@NonNull ResultBean resultBean) {
                showToast(resultBean.toString());
            }"
5944,onError,"            public void onError(ApiException e) {
                showToast(e.getMessage());
            }"
5952,onNext,"            public void onNext(@NonNull List<Object> objects) {
                showToast(objects.toString());
            }"
5956,onNext,"            public void onNext(SkinTestResult skinTestResult) {
                showToast(skinTestResult.toString());
            }"
5957,onError,"            public void onError(ApiException e) {
                super.onError(e);
                showToast(e.getMessage());
            }"
5959,onPoll,"    public void onPoll(View view) {
        Intent intent = new Intent(SceneActivity.this, PollActivity.class);
        startActivity(intent);
    }"
5960,onNext,"            public void onNext(@NonNull SkinTestResult skinTestResult) {
                showToast(skinTestResult.toString());
            }"
5963,apply,"            public ObservableSource<SkinTestResult> apply(@NonNull Long aLong) throws Exception {
                Log.i(""test"", ""====="" + aLong);
                return EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                        .timeStamp(true)"
5966,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scene);
    }"
5968,onDestroy,"    protected void onDestroy() {
        EasyHttp.cancelSubscription(polldisposable);
        EasyHttp.cancelSubscription(countdisposable);
        EasyHttp.cancelSubscription(ifdisposable);
        EasyHttp.cancelSubscription(filterdisposable);
        super.onDestroy();
    }"
5969,onNext,"            public void onNext(@NonNull Content content) {
                showToast(content.toString());
            }"
5973,onPollFilter,"    public void onPollFilter(View view) {
        filterdisposable = Observable.interval(0, 5, TimeUnit.SECONDS).flatMap(new Function<Long, ObservableSource<Content>>() {
            @Override"
5985,apply,"                                    public ObservableSource<? extends Content> apply(@NonNull Throwable throwable) throws Exception {
                                        return Observable.empty();
                                    }"
5987,apply,"            public ObservableSource<Content> apply(@NonNull Long aLong) throws Exception {
                return Observable.timer(5, TimeUnit.SECONDS).flatMap(new Function<Long, ObservableSource<Content>>() {
                    @Override"
5989,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_poll);
    }"
5990,getAppContext,"    public static Context getAppContext() {
        if (app == null)
            return null;
        return app.getApplicationContext();"
5991,verify,"        public boolean verify(String hostname, SSLSession session) {
            HttpLog.i(""############### verify "" + hostname + "" "" + this.host);
            if (this.host == null || """".equals(this.host) || !this.host.contains(hostname))
                return false;
            return true;"
5995,onScene,"    public void onScene(View view) {
        Intent intent = new Intent(MainActivity.this, SceneActivity.class);
        startActivity(intent);
    }"
5996,onNext,"            public void onNext(List<SectionItem> sectionItems) {
                showToast(sectionItems.toString());
            }"
5999,onCustomApiResult,"    public void onCustomApiResult(View view) {
        Intent intent = new Intent(this, CustomApiActivity.class);
        startActivity(intent);
    }"
6000,accept,"            public void accept(@NonNull Throwable throwable) throws Exception {
                showToast(throwable.getMessage());
            }"
6001,accept,"            public void accept(@NonNull AuthModel authModel) throws Exception {
                showToast(authModel.toString());
            }"
6002,onCustomApiCall,"    public void onCustomApiCall(View view) {
        final String name = ""18688994275"";
        final String pass = ""123456"";
        final CustomRequest request = EasyHttp.custom()
                .addConverterFactory(GsonConverterFactory.create(new Gson()))
                .sign(true)
                .timeStamp(true)
                .params(ComParamContact.Login.ACCOUNT, name)"
6004,accept,"            public void accept(@NonNull ApiResult<AuthModel> result) throws Exception {
                showToast(result.toString());
            }"
6006,onCache,"    public void onCache(View view) {
        Intent intent = new Intent(this, CacheActivity.class);
        startActivity(intent);
    }"
6007,run,"                                    public void run() {
                                        if (response != null) showToast(response.toString());
                                    }"
6009,run,"                                    public void run() {
                                        showToast(e.getMessage());
                                    }"
6010,onError,"                            public void onError(final ApiException e) {
                                mHandler.post(new Runnable() {
                                    @Override"
6016,onSync,"    public void onSync(View view) {
        new Thread(new Runnable() {
            @Override"
6017,onDownloadFile,"    public void onDownloadFile(View view) {
        Intent intent = new Intent(this, DownloadActivity.class);
        startActivity(intent);
    }"
6018,onUploadFile,"    public void onUploadFile(View view) {
        Intent intent = new Intent(this, UploadActivity.class);
        startActivity(intent);
    }"
6021,onProgressSubscriber,"    public void onProgressSubscriber(View view) {
        Observable<SkinTestResult> observable = EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)
                .execute(SkinTestResult.class);"
6024,onObservable,"    public void onObservable(View view) {
        Observable<SkinTestResult> observable = EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)
                .execute(SkinTestResult.class);"
6025,onSuccess,"                    public void onSuccess(SkinTestResult response) {
                        showToast(response.toString());
                    }"
6026,onError,"                    public void onError(ApiException e) {
                        showToast(e.getMessage());
                    }"
6027,onSubscription,"    public void onSubscription(View view) {
        Disposable disposable = EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)"
6030,onProgressDialogCallBack,"    public void onProgressDialogCallBack(View view) {
        EasyHttp.get(""/v1/app/chairdressing/skinAnalyzePower/skinTestResult"")
                .timeStamp(true)"
6050,onError,"                    public void onError(ApiException e) {
                        showToast(e.getMessage() + ""  "" + e.getCode());
                    }"
6054,onPost,"    public void onPost(View view) {
        EasyHttp.post(""v1/app/chairdressing/news/favorite"")
                .params(""newsId"", ""552"")"
6055,onSuccess,"                    public void onSuccess(SkinTestResult response) {
                        if (response != null) showToast(response.toString());
                    }"
6058,onLogin,"    public void onLogin(View view) {
        Intent intent = new Intent(MainActivity.this, LoginActivity.class);
        startActivity(intent);
    }"
6059,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        switch (id) {
            case R.id.adout_layout:
                Intent intent = new Intent(MainActivity.this, AboutActivity.class);"
6060,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }"
6061,subscribe,"            public void subscribe(@NonNull ObservableEmitter<String> e) throws Exception {
                FileUtils.getFileFromAsset(MainActivity.this, ""1.jpg"");
            }"
6062,accept,"            public void accept(@NonNull String s) throws Exception {
"
6064,showToast,"    private void showToast(String msg) {
        Toast.makeText(LoginActivity.this, msg, Toast.LENGTH_SHORT).show();
    }"
6065,startAppSettings,"    public void startAppSettings() {
        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
        intent.setData(Uri.parse(""package:"" + getPackageName()));
        startActivity(intent);
    }"
6066,onClick,"            public void onClick(DialogInterface dialog, int which) {
                startAppSettings();
            }"
6067,onClick,"            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }"
6070,getPermissions,"    public void getPermissions(final String name, final String pass) {
       rxPermissions.request(Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.WRITE_EXTERNAL_STORAGE)
               .subscribe(new Consumer<Boolean>() {"
6071,onClick,"                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }"
6073,autoLogin,"    private void autoLogin() {
        LoginInfo loginCache = LoginCache.getInstance().get();
        if (loginCache != null) {
            final String user = loginCache.getUsername();"
6077,onLogin,"    public void onLogin(final String name, final String pass) {
        IProgressDialog mProgressDialog = new IProgressDialog() {
            @Override
            public Dialog getDialog() {"
6078,isPasswordValid,"    private boolean isPasswordValid(String password) {
        return Validator.isPassword(password);
    }"
6079,isEmailValid,"    private boolean isEmailValid(String email) {
        return Validator.isMobile(email) || Validator.isEmail(email);
    }"
6080,attemptLogin,"    private void attemptLogin() {
        mEmailView.setError(null);
        mPasswordView.setError(null);

        String email = mEmailView.getText().toString();
        String password = mPasswordView.getText().toString();

        boolean cancel = false;
        View focusView = null;

        if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {"
6081,onClick,"            public void onClick(View view) {
                attemptLogin();
            }"
6082,onEditorAction,"            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {
                if (id == R.id.login || id == EditorInfo.IME_NULL) {
                    attemptLogin();
                    return true;"
6085,onError,"                    public void onError(ApiException e) {
                        showToast(e.getMessage());
                        dialog.dismiss();
                    }"
6087,onStart,"                    public void onStart() {
                        dialog.show();
                    }"
6090,onError,"                    public void onError(final ApiException e) {
                        HttpLog.i(""======""+Thread.currentThread().getName());
                        showToast(e.getMessage());
                        dialog.dismiss();
                    }"
6092,onStart,"                    public void onStart() {
                        HttpLog.i(""======""+Thread.currentThread().getName());
                        dialog.show();
                    }"
6097,onSuccess,"                    public void onSuccess(Result result) {
                        if (result != null) showToast(result.toString());
                    }"
6100,onSuccess,"                    public void onSuccess(ArticleBean result) {
                        if (result != null) showToast(result.toString());
                    }"
6103,onSuccess,"                    public void onSuccess(List<FriendsListBean> result) {
                        if (result != null) showToast(result.toString());
                    }"
6109,onSuccess,"                    public void onSuccess(List<String> result) {
                        if (result != null) showToast(result.toString());
                    }"
6115,onSuccess,"                    public void onSuccess(ResultBean response) {
                        if (response != null) showToast(response.toString());
                    }"
6119,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_custom_api);
    }"
6124,onClearCache,"    public void onClearCache(View view) {
        EasyHttp.clearCache();
    }"
6125,onRemoveCache,"    public void onRemoveCache(View view) {
        EasyHttp.removeCache(this.getClass().getSimpleName());
    }"
6126,onComplete,"                    public void onComplete() {
"
6127,onError,"                    public void onError(@NonNull Throwable e) {
                        showToast(e.getMessage());
                    }"
6128,onNext,"                    public void onNext(@NonNull SkinTestResult skinTestResult) {
                        showToast(skinTestResult.toString());
                    }"
6129,onSubscribe,"                    public void onSubscribe(@NonNull Disposable d) {
"
6139,schedule,"    public Completable schedule() {
        return Completable.create(this);
    }"
6140,onAnimationEnd,"            public void onAnimationEnd(final Animator animation) {
                valueAnimator.removeAllListeners();
                completableSubscriber.onCompleted();
            }"
6141,onAnimationCancel,"            public void onAnimationCancel(final Animator animation) {
                animationCancelAction.call(valueAnimator);
            }"
6142,call,"    public void call(final CompletableSubscriber completableSubscriber) {
        completableSubscriber.onSubscribe(new ClearSubscription(valueAnimator::end));
        valueAnimator.addUpdateListener(valueUpdateAction::call);
        valueAnimator.start();
        valueAnimator.addListener(new AnimatorListenerAdapter() {
"
6143,from,"    public static RxValueAnimator from(final ValueAnimator valueAnimator, final Action1<ValueAnimator> valueUpdateAction,
                                       final Action1<ValueAnimator> animationCancelAction) {
        return new RxValueAnimator(valueAnimator, valueUpdateAction, animationCancelAction);"
6144,from,"    public static RxValueAnimator from(final ValueAnimator valueAnimator, final Action1<ValueAnimator> valueUpdateAction) {
        return new RxValueAnimator(valueAnimator, valueUpdateAction, aValueAnimator -> {});
    }"
6145,end,"    public void end() {
        valueAnimator.end();
        valueUpdateSubject.onCompleted();
    }"
6146,getAnimatedFraction,"    public float getAnimatedFraction() {
        return valueAnimator.getAnimatedFraction();
    }"
6147,checkSubject,"    private void checkSubject() {
        if (valueUpdateSubject.hasCompleted() || valueUpdateSubject.hasThrowable()) {
            valueUpdateSubject = BehaviorSubject.create();"
6148,scheduleReversed,"    public Observable<Object> scheduleReversed() {
        checkSubject();
        valueAnimator.reverse();
        return valueUpdateSubject;
    }"
6149,schedule,"    public Observable<Object> schedule() {
        checkSubject();
        valueAnimator.start();
        return valueUpdateSubject;
    }"
6150,onAnimationEnd,"            public void onAnimationEnd(final Animator animation) {
                valueUpdateSubject.onCompleted();
            }"
6151,from,"    public static RxObservableValueAnimator from(final ValueAnimator valueAnimator) {
        return new RxObservableValueAnimator(valueAnimator);
    }"
6152,set,"    public static void set(final View view, final float x, final float y, final float alpha, final float rotation) {
        set(view, x, y, alpha);
        view.setRotation(rotation);
    }"
6153,set,"    public static void set(final View view, final float x, final float y, final float alpha) {
        view.setAlpha(alpha);
        view.setX(x);
        view.setY(y);
    }"
6154,doAfterDelay,"    public static Completable doAfterDelay(final int delay, final Action0 action) {
        return Completable.timer(delay, TimeUnit.MILLISECONDS)
                          .observeOn(AndroidSchedulers.mainThread())"
6155,fadeOut,"    public static Completable fadeOut(final View view, final int duration, final int delay) {
        return animate(view, duration, delay)
                .interpolator(new AccelerateInterpolator())"
6156,fadeOut,"    public static Completable fadeOut(final View view, final int duration) {
        return animate(view, new AccelerateInterpolator())
                .duration(duration)"
6157,fadeOut,"    public static Completable fadeOut(final View view) {
        return animate(view, new AccelerateInterpolator())
                .fadeOut()"
6158,leave,"    public static Completable leave(final View view, final int xOffset, final int yOffset) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, new AccelerateInterpolator())
                .fadeOut()"
6159,enterWithRotation,"    public static Completable enterWithRotation(final View view, final int duration, final int xOffset, final int yOffset, final int delay, final int rotation) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        final float startRotation = view.getRotation();
        return animate(view, duration, delay)
                .fadeIn()"
6160,enterViewsWithDelay,"    public static Completable enterViewsWithDelay(final int initialDelay, final int delay, final int duration, final int xOffset, final View... views) {
        return Observable.range(0, views.length)
                         .flatMap(i -> enter(views[i], duration, xOffset, 0, i * delay + initialDelay).toObservable())"
6161,enterViewsWithDelay,"    public static Completable enterViewsWithDelay(final int delay, final int duration, final int xOffset, final View... views) {
        return enterViewsWithDelay(0, delay, duration, xOffset, views);
    }"
6162,enterTogether,"    public static Completable enterTogether(final int delay, final int xOffset, final View... views) {
        return Observable.from(views)
                         .flatMap(view -> enter(view, xOffset, 0).toObservable())"
6163,enter,"    public static Completable enter(final View view, final int duration, final int xOffset, final int yOffset, final int delay) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, duration, delay)
                .interpolator(new DecelerateInterpolator())"
6164,enter,"    public static Completable enter(final View view, final int delay, final int xOffset, final int yOffset) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, new DecelerateInterpolator())
                .delay(delay)"
6165,enter,"    public static Completable enter(final View view, final int xOffset, final int yOffset) {
        final float startingX = view.getX();
        final float startingY = view.getY();
        return animate(view, new DecelerateInterpolator())
                .fadeIn()"
6166,slideVertical,"    public static Completable slideVertical(final View view, final int duration, final int yOffset) {
        final float endingY = view.getY() + yOffset;
        return animate(view, new AccelerateDecelerateInterpolator())
                .duration(duration)"
6167,slideHorizontal,"    public static Completable slideHorizontal(final View view, final int duration, final int xOffset) {
        final float endingX = view.getX() + xOffset;
        return animate(view, new AccelerateDecelerateInterpolator())
                .duration(duration)"
6168,fadeInWithDelay,"    public static Completable fadeInWithDelay(final int delay, final int duration, final View... views) {
        return Observable.range(0, views.length)
                         .flatMap(i -> animate(views[i], new LinearInterpolator())"
6169,fadeIn,"    public static Completable fadeIn(final View view, final int duration, final int delay) {
        return animate(view, duration, delay)
                .interpolator(new DecelerateInterpolator())"
6170,fadeIn,"    public static Completable fadeIn(final View view, final int duration) {
        return animate(view, new DecelerateInterpolator())
                .duration(duration)"
6171,fadeIn,"    public static Completable fadeIn(final View view) {
        return animate(view).fadeIn()
                            .onAnimationCancel(aView -> aView.setAlpha(OPAQUE))"
6172,show,"    public static Completable show(final View view) {
        return animate(view, IMMEDIATE).fadeIn().schedule();
    }"
6173,hideViewGroup,"    private static void hideViewGroup(final ViewGroup viewGroup) {
        for (int i = 0, childCount = viewGroup.getChildCount(); i < childCount; i++) {
            final View child = viewGroup.getChildAt(i);"
6174,hideViewGroupChildren,"    public static Completable hideViewGroupChildren(final ViewGroup... viewGroups) {
        return Observable.from(viewGroups)
                         .flatMap(viewGroup -> hideViewGroupChildren(viewGroup).toObservable())"
6175,hideViewGroupChildren,"    public static Completable hideViewGroupChildren(final ViewGroup viewGroup) {
        return Completable.fromAction(() -> hideViewGroup(viewGroup));
    }"
6176,hide,"    public static Completable hide(final View... views) {
        return Observable.from(views)
                         .flatMap(view -> hide(view).toObservable())"
6177,hide,"    public static Completable hide(final View view) {
        return animate(view, IMMEDIATE).fadeOut().schedule();
    }"
6178,animateTogether,"    public static Completable animateTogether(final Completable... completables) {
        return Completable.merge(completables);
    }"
6179,defaultInterpolator,"    private static Interpolator defaultInterpolator() {
        return new AccelerateDecelerateInterpolator();
    }"
6180,schedule,"    public Completable schedule(final boolean preTransform) {
        return Completable.create(new AnimateOnSubscribe(viewWeakRef,
                                                         preTransform ? preTransformActions : null,"
6181,schedule,"    public Completable schedule() {
        return Completable.create(new AnimateOnSubscribe(viewWeakRef, preTransformActions, animateActions, onAnimationCancelAction));
    }"
6182,onAnimationCancel,"    public RxAnimationBuilder onAnimationCancel(final Action1<View> onAnimationCancelAction) {
        this.onAnimationCancelAction = onAnimationCancelAction;
        return this;
    }"
6183,scale,"    public RxAnimationBuilder scale(final float dX, final float dY) {
        animateActions.add(animate -> animate.scaleXBy(dX).scaleYBy(dY));
        return this;
    }"
6184,scaleY,"    public RxAnimationBuilder scaleY(final float dY) {
        animateActions.add(animate -> animate.scaleYBy(dY));
        return this;
    }"
6185,scaleX,"    public RxAnimationBuilder scaleX(final float dX) {
        animateActions.add(animate -> animate.scaleXBy(dX));
        return this;
    }"
6186,translateBy,"    public RxAnimationBuilder translateBy(final int dX, final int dY, final int dZ) {
        preTransformActions.add(preTransform -> preTransform.xBy(-dX).yBy(-dY).zBy(-dZ));
        animateActions.add(animate -> animate.xBy(dX).yBy(dY).zBy(dZ));
        return this;
    }"
6187,translateBy,"    public RxAnimationBuilder translateBy(final int dX, final int dY) {
        preTransformActions.add(preTransform -> preTransform.xBy(-dX).yBy(-dY));
        animateActions.add(animate -> animate.xBy(dX).yBy(dY));
        return this;
    }"
6188,elevationBy,"    public RxAnimationBuilder elevationBy(final int dZ) {
        preTransformActions.add(preTransform -> preTransform.zBy(-dZ));
        animateActions.add(animate -> animate.zBy(dZ));
        return this;
    }"
6189,translateY,"    public RxAnimationBuilder translateY(final int dY) {
        preTransformActions.add(preTransform -> preTransform.yBy(-dY));
        animateActions.add(animate -> animate.yBy(dY));
        return this;
    }"
6190,translateX,"    public RxAnimationBuilder translateX(final int dX) {
        preTransformActions.add(preTransform -> preTransform.xBy(-dX));
        animateActions.add(animate -> animate.xBy(dX));
        return this;
    }"
6191,counterRotateBy,"    public RxAnimationBuilder counterRotateBy(final float rotation) {
        preTransformActions.add(preTransform -> preTransform.rotationBy(-rotation));
        animateActions.add(animate -> animate.rotationBy(rotation));
        return this;
    }"
6192,rotateBy,"    public RxAnimationBuilder rotateBy(final float rotation) {
        animateActions.add(animate -> animate.rotationBy(rotation));
        return this;
    }"
6193,rotate,"    public RxAnimationBuilder rotate(final float rotation) {
        animateActions.add(animate -> animate.rotation(rotation));
        return this;
    }"
6194,fadeOut,"    public RxAnimationBuilder fadeOut() {
        animateActions.add(animate -> animate.alpha(TRANSPARENT));
        return this;
    }"
6195,fadeIn,"    public RxAnimationBuilder fadeIn() {
        preTransformActions.add(preTransform -> preTransform.alpha(0f));
        animateActions.add(animate -> animate.alpha(OPAQUE));
        return this;
    }"
6196,interpolator,"    public RxAnimationBuilder interpolator(final Interpolator interpolator) {
        animateActions.add(animate -> animate.setInterpolator(interpolator));
        return this;
    }"
6197,delay,"    public RxAnimationBuilder delay(final int delay) {
        animateActions.add(animate -> animate.setStartDelay(delay));
        return this;
    }"
6198,duration,"    public RxAnimationBuilder duration(final int duration) {
        animateActions.add(animate -> animate.setDuration(duration));
        return this;
    }"
6199,animate,"    public static RxAnimationBuilder animate(final View view, final int duration, final int delay, final Interpolator interpolator) {
        return new RxAnimationBuilder(view, duration, delay, interpolator);
    }"
6200,animate,"    public static RxAnimationBuilder animate(final View view, final Interpolator interpolator) {
        return new RxAnimationBuilder(view, DEFAULT_DURATION, DEFAULT_DELAY, interpolator);
    }"
6201,animate,"    public static RxAnimationBuilder animate(final View view, final int duration, final int delay) {
        return new RxAnimationBuilder(view, duration, delay, new AccelerateDecelerateInterpolator());
    }"
6202,animate,"    public static RxAnimationBuilder animate(final int delay, final View view) {
        return new RxAnimationBuilder(view, DEFAULT_DURATION, delay, new AccelerateDecelerateInterpolator());
    }"
6203,animate,"    public static RxAnimationBuilder animate(final View view, final int duration) {
        return new RxAnimationBuilder(view, duration, DEFAULT_DELAY, new AccelerateDecelerateInterpolator());
    }"
6204,animate,"    public static RxAnimationBuilder animate(final View view) {
        return new RxAnimationBuilder(view, DEFAULT_DURATION, DEFAULT_DELAY, defaultInterpolator());
    }"
6205,isUnsubscribed,"    public boolean isUnsubscribed() {
        return isUnsubscribed;
    }"
6206,unsubscribe,"    public void unsubscribe() {
        isUnsubscribed = true;
        clearAction.call();
    }"
6207,onAnimationCancel,"                public void onAnimationCancel(final View view) {
                    onAnimationCancelAction.call(view);
                }"
6208,createClearSubscription,"    private Subscription createClearSubscription(final ViewPropertyAnimatorCompat animator) {
        return new ClearSubscription(() -> {
            animator.setListener(new ViewPropertyAnimatorListenerAdapter() {"
6209,runAnimation,"    private void runAnimation(final CompletableSubscriber completableSubscriber, final ViewPropertyAnimatorCompat animator) {
        applyActions(animationActions, animator);
        animator.withEndAction(completableSubscriber::onCompleted)
                .start();"
6210,applyActions,"    private void applyActions(final List<Action1<ViewPropertyAnimatorCompat>> actions, final ViewPropertyAnimatorCompat animator) {
        for (final Action1<ViewPropertyAnimatorCompat> action : actions) {
            action.call(animator);"
6211,call,"    public void call(final CompletableSubscriber completableSubscriber) {
        final View view = viewWeakRef.get();
        if (view == null) {
            completableSubscriber.onCompleted();
            return;
        }
"
6212,set,"  @Override public void set(@NonNull String key, @NonNull Set<String> value,
      @NonNull SharedPreferences.Editor editor) {
    editor.putStringSet(key, value);"
6213,get,"  @NonNull @Override public Set<String> get(@NonNull String key,
      @NonNull SharedPreferences preferences, @NonNull Set<String> defaultValue) {
    return unmodifiableSet(preferences.getStringSet(key, defaultValue));"
6214,set,"  @Override public void set(@NonNull String key, @NonNull String value,
      @NonNull SharedPreferences.Editor editor) {
    editor.putString(key, value);"
6216,stringSetNullDefaultValueThrows,"  @Test public void stringSetNullDefaultValueThrows() {
    try {
      rxPreferences.getStringSet(""key"", null);"
6217,stringSetNullKeyThrows,"  @Test public void stringSetNullKeyThrows() {
    try {
      rxPreferences.getStringSet(null);
      fail();"
6218,stringNullDefaultValueThrows,"  @Test public void stringNullDefaultValueThrows() {
    try {
      rxPreferences.getString(""key"", null);"
6219,stringNullKeyThrows,"  @Test public void stringNullKeyThrows() {
    try {
      rxPreferences.getString(null);
      fail();"
6220,objectNullDefaultValueThrows,"  @Test public void objectNullDefaultValueThrows() {
    try {
      rxPreferences.getObject(""key"", null, new PointPreferenceConverter());"
6221,objectNullAdapterThrows,"  @Test public void objectNullAdapterThrows() {
    try {
      rxPreferences.getObject(""key"", new Point(1, 2), null);"
6222,objectNullKeyThrows,"  @Test public void objectNullKeyThrows() {
    try {
      rxPreferences.getObject(null, new Point(1, 2), new PointPreferenceConverter());"
6223,longNullDefaultValueThrows,"  @Test public void longNullDefaultValueThrows() {
    try {
      rxPreferences.getLong(""key"", null);"
6224,longNullKeyThrows,"  @Test public void longNullKeyThrows() {
    try {
      rxPreferences.getLong(null);
      fail();"
6225,integerNullDefaultValueThrows,"  @Test public void integerNullDefaultValueThrows() {
    try {
      rxPreferences.getInteger(""key"", null);"
6226,integerNullKeyThrows,"  @Test public void integerNullKeyThrows() {
    try {
      rxPreferences.getInteger(null);
      fail();"
6227,floatNullDefaultValueThrows,"  @Test public void floatNullDefaultValueThrows() {
    try {
      rxPreferences.getFloat(""key"", null);"
6228,floatNullKeyThrows,"  @Test public void floatNullKeyThrows() {
    try {
      rxPreferences.getFloat(null);
      fail();"
6229,enumNullDefaultValueThrows,"  @Test public void enumNullDefaultValueThrows() {
    try {
      rxPreferences.getEnum(""key"", null, Roshambo.class);"
6230,enumNullClassThrows,"  @Test public void enumNullClassThrows() {
    try {
      rxPreferences.getEnum(""key"", Roshambo.ROCK, null);"
6231,enumNullKeyThrows,"  @Test public void enumNullKeyThrows() {
    try {
      rxPreferences.getEnum(null, Roshambo.ROCK, Roshambo.class);"
6232,booleanNullDefaultValueThrows,"  @Test public void booleanNullDefaultValueThrows() {
    try {
      rxPreferences.getBoolean(""key"", null);"
6233,booleanNullKeyThrows,"  @Test public void booleanNullKeyThrows() {
    try {
      rxPreferences.getBoolean(null);
      fail();"
6234,createWithNullThrows,"  @Test public void createWithNullThrows() {
    try {
      RxSharedPreferences.create(null);"
6235,clearRemovesAllPreferences,"  @Test public void clearRemovesAllPreferences() {
    Preference<String> preference = rxPreferences.getString(""key"", ""default"");
    preference.set(""foo"");
    rxPreferences.clear();
    assertThat(preference.get()).isEqualTo(""default"");
  }"
6236,setUp,"  @Before public void setUp() {
    SharedPreferences preferences = getDefaultSharedPreferences(ApplicationProvider.getApplicationContext());
    preferences.edit().clear().commit();
    rxPreferences = RxSharedPreferences.create(preferences);
  }"
6237,clear,"  public void clear() {
    preferences.edit().clear().apply();
  }"
6238,getStringSet,"  public Preference<Set<String>> getStringSet(@NonNull String key,
      @NonNull Set<String> defaultValue) {
    checkNotNull(key, ""key == null"");
    checkNotNull(defaultValue, ""defaultValue == null"");
    return new RealPreference<>(preferences, key, defaultValue, StringSetAdapter.INSTANCE, keyChanges);"
6239,getStringSet,"  public Preference<Set<String>> getStringSet(@NonNull String key) {
    return getStringSet(key, Collections.<String>emptySet());
  }"
6240,getString,"  public Preference<String> getString(@NonNull String key, @NonNull String defaultValue) {
    checkNotNull(key, ""key == null"");
    checkNotNull(defaultValue, ""defaultValue == null"");
    return new RealPreference<>(preferences, key, defaultValue, StringAdapter.INSTANCE, keyChanges);
  }"
6241,getString,"  public Preference<String> getString(@NonNull String key) {
    return getString(key, DEFAULT_STRING);
  }"
6242,getObject,"  @CheckResult @NonNull public <T> Preference<T> getObject(@NonNull String key,
      @NonNull T defaultValue, @NonNull Preference.Converter<T> converter) {
    checkNotNull(key, ""key == null"");
    checkNotNull(defaultValue, ""defaultValue == null"");
    checkNotNull(converter, ""converter == null"");
    return new RealPreference<>(preferences, key, defaultValue,"
6243,getLong,"  public Preference<Long> getLong(@NonNull String key, @NonNull Long defaultValue) {
    checkNotNull(key, ""key == null"");
    checkNotNull(defaultValue, ""defaultValue == null"");
    return new RealPreference<>(preferences, key, defaultValue, LongAdapter.INSTANCE, keyChanges);
  }"
6244,getLong,"  public Preference<Long> getLong(@NonNull String key) {
    return getLong(key, DEFAULT_LONG);
  }"
6245,getInteger,"  public Preference<Integer> getInteger(@NonNull String key, @NonNull Integer defaultValue) {
    checkNotNull(key, ""key == null"");
    checkNotNull(defaultValue, ""defaultValue == null"");
    return new RealPreference<>(preferences, key, defaultValue, IntegerAdapter.INSTANCE, keyChanges);
  }"
6246,getInteger,"  public Preference<Integer> getInteger(@NonNull String key) {
    return getInteger(key, DEFAULT_INTEGER);
  }"
6247,getFloat,"  public Preference<Float> getFloat(@NonNull String key, @NonNull Float defaultValue) {
    checkNotNull(key, ""key == null"");
    checkNotNull(defaultValue, ""defaultValue == null"");
    return new RealPreference<>(preferences, key, defaultValue, FloatAdapter.INSTANCE, keyChanges);
  }"
6248,getFloat,"  public Preference<Float> getFloat(@NonNull String key) {
    return getFloat(key, DEFAULT_FLOAT);
  }"
6249,getEnum,"  public <T extends Enum<T>> Preference<T> getEnum(@NonNull String key, @NonNull T defaultValue,
      @NonNull Class<T> enumClass) {
    checkNotNull(key, ""key == null"");
    checkNotNull(defaultValue, ""defaultValue == null"");
    checkNotNull(enumClass, ""enumClass == null"");
    return new RealPreference<>(preferences, key, defaultValue, new EnumAdapter<>(enumClass), keyChanges);"
6250,getBoolean,"  public Preference<Boolean> getBoolean(@NonNull String key, @NonNull Boolean defaultValue) {
    checkNotNull(key, ""key == null"");
    checkNotNull(defaultValue, ""defaultValue == null"");
    return new RealPreference<>(preferences, key, defaultValue, BooleanAdapter.INSTANCE, keyChanges);
  }"
6251,getBoolean,"  public Preference<Boolean> getBoolean(@NonNull String key) {
    return getBoolean(key, DEFAULT_BOOLEAN);
  }"
6252,cancel,"          @Override public void cancel() {
            preferences.unregisterOnSharedPreferenceChangeListener(listener);
          }"
6253,onSharedPreferenceChanged,"          public void onSharedPreferenceChanged(SharedPreferences preferences, String key) {
            if (key == null) {
              emitter.onNext(NULL_KEY_EMISSION);"
6254,subscribe,"      @Override public void subscribe(final ObservableEmitter<String> emitter) {
        final OnSharedPreferenceChangeListener listener = new OnSharedPreferenceChangeListener() {
          @Override
          public void onSharedPreferenceChanged(SharedPreferences preferences, String key) {
            if (key == null) {"
6255,create,"  public static RxSharedPreferences create(@NonNull SharedPreferences preferences) {
    checkNotNull(preferences, ""preferences == null"");
    return new RxSharedPreferences(preferences);
  }"
6256,evaluate,"        @Override public void evaluate() throws Throwable {
          base.evaluate();
          for (RecordingObserver<?> subscriber : subscribers) {
            subscriber.assertNoEvents();"
6257,apply,"    @Override public Statement apply(final Statement base, Description description) {
      return new Statement() {
        @Override public void evaluate() throws Throwable {"
6258,create,"    public <T> RecordingObserver<T> create() {
      RecordingObserver<T> subscriber = new RecordingObserver<>();
      subscribers.add(subscriber);
      return subscriber;
    }"
6259,assertNoEvents,"  public void assertNoEvents() {
    assertThat(events).isEmpty();
  }"
6260,assertValue,"  public RecordingObserver<T> assertValue(T value) {
    assertThat(takeValue()).isEqualTo(value);
    return this;
  }"
6261,takeValue,"  public T takeValue() {
    Notification<T> notification = takeNotification();
    assertThat(notification.isOnNext()).isTrue();
    return notification.getValue();
  }"
6262,takeNotification,"  private Notification<T> takeNotification() {
    Notification<T> notification = events.pollFirst();
    if (notification == null) {
      throw new AssertionError(""No event found!"");
    }"
6263,onError,"  @Override public void onError(Throwable e) {
    events.add(Notification.<T>createOnError(e));
  }"
6264,onComplete,"  @Override public void onComplete() {
    events.add(Notification.<T>createOnComplete());
  }"
6265,onNext,"  @Override public void onNext(T value) {
    events.add(Notification.createOnNext(value));
  }"
6266,onSubscribe,"  @Override public void onSubscribe(Disposable disposable) {
  }"
6267,accept,"      @Override public void accept(T value) {
        set(value);
      }"
6268,asConsumer,"  @Override @CheckResult @NonNull public Consumer<? super T> asConsumer() {
    return new Consumer<T>() {
      @Override public void accept(T value) {"
6269,asObservable,"  @Override @CheckResult @NonNull public Observable<T> asObservable() {
    return values;
  }"
6270,delete,"  @Override public synchronized void delete() {
    preferences.edit().remove(key).apply();
  }"
6271,isSet,"  @Override public boolean isSet() {
    return preferences.contains(key);
  }"
6272,set,"  @Override public void set(@NonNull T value) {
    checkNotNull(value, ""value == null"");
    SharedPreferences.Editor editor = preferences.edit();
    adapter.set(key, value, editor);
    editor.apply();
  }"
6273,get,"  @Override @NonNull public synchronized T get() {
    return adapter.get(key, preferences, defaultValue);
  }"
6274,defaultValue,"  @Override @NonNull public T defaultValue() {
    return defaultValue;
  }"
6275,key,"  @Override @NonNull public String key() {
    return key;
  }"
6276,test,"          @Override public boolean test(String changedKey) {
            return key.equals(changedKey);
          }"
6277,apply,"          @Override public T apply(String s) {
            if(s.equals(RxSharedPreferences.NULL_KEY_EMISSION)) {
              return defaultValue;"
6278,set,"    void set(@NonNull String key, @NonNull T value, @NonNull SharedPreferences.Editor editor);
  }"
6279,get,"    @NonNull T get(@NonNull String key, @NonNull SharedPreferences preferences,
        @NonNull T defaultValue);"
6280,nullValue,"  private void nullValue(String key) {
    preferences.edit()
        .putString(key, null)"
6281,legacyNullSet,"  @Test public void legacyNullSet() {
    nullValue(""set"");
    List<String> strings = asList(""able"", ""baker"", ""charlie"");
    HashSet<String> defaultSet = new HashSet<>(strings);
    HashSet<String> expectedSet = new HashSet<>(strings);
    assertThat(rxPreferences.getStringSet(""key"", defaultSet).get()).isEqualTo(expectedSet);
  }"
6282,legacyNullObject,"  @Test public void legacyNullObject() {
    nullValue(""obj"");
    assertThat(rxPreferences.getObject(""obj"", new Point(10, 11), pointConverter).get())
        .isEqualTo(new Point(10, 11));"
6283,legacyNullLong,"  @Test public void legacyNullLong() {
    nullValue(""long"");
    assertThat(rxPreferences.getLong(""long"", 12345L).get()).isEqualTo(12345L);
  }"
6284,legacyNullInteger,"  @Test public void legacyNullInteger() {
    nullValue(""int"");
    assertThat(rxPreferences.getInteger(""int"", 12345).get()).isEqualTo(12345);
  }"
6285,legacyNullFloat,"  @Test public void legacyNullFloat() {
    nullValue(""float"");
    assertThat(rxPreferences.getFloat(""float"", 123.45f).get()).isEqualTo(123.45f);
  }"
6286,legacyNullEnum,"  @Test public void legacyNullEnum() {
    nullValue(""enum"");
    assertThat(rxPreferences.getEnum(""enum"", PAPER, Roshambo.class).get()).isEqualTo(PAPER);
  }"
6287,legacyNullBoolean,"  @Test public void legacyNullBoolean() {
    nullValue(""bool"");
    assertThat(rxPreferences.getBoolean(""bool"", true).get()).isEqualTo(true);
  }"
6288,legacyNullString,"  @Test public void legacyNullString() {
    nullValue(""string"");
    assertThat(rxPreferences.getString(""string"", ""default"").get()).isEqualTo(""default"");
  }"
6289,asConsumer,"  @Test public void asConsumer() throws Exception {
    Preference<String> preference = rxPreferences.getString(""foo"");
    Consumer<? super String> consumer = preference.asConsumer();

    consumer.accept(""bar"");
    assertThat(preferences.getString(""foo"", null)).isEqualTo(""bar"");

    consumer.accept(""baz"");
    assertThat(preferences.getString(""foo"", null)).isEqualTo(""baz"");"
6290,asObservableWhenBackingPrefsCleared,"  @Test public void asObservableWhenBackingPrefsCleared() {
    Preference<String> preference = rxPreferences.getString(""foo"", ""bar"");

    RecordingObserver<String> observer = observerRule.create();
    preference.asObservable().subscribe(observer);
    observer.assertValue(""bar"");

    preferences.edit().putString(""foo"", ""baz"").commit();
    observer.assertValue(""baz"");
"
6291,asObservable,"  @Test public void asObservable() {
    Preference<String> preference = rxPreferences.getString(""foo"", ""bar"");

    RecordingObserver<String> observer = observerRule.create();
    preference.asObservable().subscribe(observer);
    observer.assertValue(""bar"");

    preferences.edit().putString(""foo"", ""baz"").commit();
    observer.assertValue(""baz"");
"
6292,stringSetIsUnmodifiable,"  @Test public void stringSetIsUnmodifiable() {
    Preference<Set<String>> preference = rxPreferences.getStringSet(""foo"");
    preference.set(new LinkedHashSet<String>());
    Set<String> stringSet = preference.get();
    try {
      stringSet.add("""");"
6293,stringSetDefaultIsUnmodifiable,"  @Test public void stringSetDefaultIsUnmodifiable() {
    Preference<Set<String>> preference = rxPreferences.getStringSet(""foo"");
    Set<String> stringSet = preference.get();
    try {
      stringSet.add("""");"
6294,serialize,"          @NonNull @Override public String serialize(@NonNull Point value) {
            return null;
          }"
6295,deserialize,"          @NonNull @Override public Point deserialize(@NonNull String serialized) {
            return null;
          }"
6296,converterMayNotReturnNull,"  @Test public void converterMayNotReturnNull() {
    Preference<Point> preference =
        rxPreferences.getObject(""foo"", new Point(0, 0), new Preference.Converter<Point>() {
          @SuppressWarnings(""ConstantConditions"")
          @NonNull @Override public Point deserialize(@NonNull String serialized) {
            return null;"
6297,delete,"  @Test public void delete() {
    Preference<String> preference = rxPreferences.getString(""foo"");

    preferences.edit().putBoolean(""foo"", true).commit();
    assertThat(preferences.contains(""foo"")).isTrue();

    preference.delete();"
6298,isSet,"  @Test public void isSet() {
    Preference<String> preference = rxPreferences.getString(""foo"");

    assertThat(preferences.contains(""foo"")).isFalse();
    assertThat(preference.isSet()).isFalse();

    preferences.edit().putString(""foo"", ""2,3"").commit();
    assertThat(preference.isSet()).isTrue();
"
6299,setNullThrows,"  @Test public void setNullThrows() {
    try {
      rxPreferences.getBoolean(""foo1"").set(null);
      fail(""Disallow setting null."");
    } catch (NullPointerException e) {
      assertThat(e).hasMessage(""value == null"");
    }

    try {
      rxPreferences.getEnum(""foo2"", ROCK, Roshambo.class).set(null);"
6305,key,"  @Test public void key() {
    Preference<String> preference = rxPreferences.getString(""foo"");
    assertThat(preference.key()).isEqualTo(""foo"");
  }"
6306,setUp,"  @Before public void setUp() {
    preferences = getDefaultSharedPreferences(ApplicationProvider.getApplicationContext());
    preferences.edit().clear().commit();
    rxPreferences = RxSharedPreferences.create(preferences);
  }"
6307,asConsumer,"  @CheckResult @NonNull Consumer<? super T> asConsumer();
}"
6308,asObservable,"  @CheckResult @NonNull Observable<T> asObservable();
"
6315,serialize,"    @NonNull String serialize(@NonNull T value);
  }"
6316,deserialize,"    @NonNull T deserialize(@NonNull String serialized);
"
6317,checkNotNull,"  static void checkNotNull(Object o, String message) {
    if (o == null) {
      throw new NullPointerException(message);"
6318,serialize,"  @NonNull @Override public String serialize(@NonNull Point value) {
    return value.x + "","" + value.y;
  }"
6319,deserialize,"  @NonNull @Override public Point deserialize(@NonNull String serialized) {
    String[] parts = serialized.split("","", -1);
    if (parts.length != 2) {
      throw new IllegalStateException(""Malformed point value: '"" + serialized + ""'"");
    }"
6320,toString,"  @Override public String toString() {
    return ""Point{x="" + x + "", y="" + y + '}';
  }"
6321,hashCode,"  @Override public int hashCode() {
    return 31 * x + y;
  }"
6322,equals,"  @Override public boolean equals(Object o) {
    if (this == o) return true;
    if (!(o instanceof Point)) return false;
    Point point = (Point) o;
    return x == point.x && y == point.y;
  }"
6323,set,"  @Override public void set(@NonNull String key, @NonNull Long value,
      @NonNull SharedPreferences.Editor editor) {
    editor.putLong(key, value);"
6324,get,"  @NonNull @Override public Long get(@NonNull String key, @NonNull SharedPreferences preferences,
      @NonNull Long defaultValue) {
    return preferences.getLong(key, defaultValue);"
6325,set,"  @Override public void set(@NonNull String key, @NonNull Integer value,
      @NonNull SharedPreferences.Editor editor) {
    editor.putInt(key, value);"
6326,get,"  @NonNull @Override public Integer get(@NonNull String key, @NonNull SharedPreferences preferences,
      @NonNull Integer defaultValue) {
    return preferences.getInt(key, defaultValue);"
6327,set,"  @Override public void set(@NonNull String key, @NonNull Float value,
      @NonNull SharedPreferences.Editor editor) {
    editor.putFloat(key, value);"
6328,get,"  @NonNull @Override public Float get(@NonNull String key, @NonNull SharedPreferences preferences,
      @NonNull Float defaultValue) {
    return preferences.getFloat(key, defaultValue);"
6329,set,"  public void set(@NonNull String key, @NonNull T value, @NonNull SharedPreferences.Editor editor) {
    editor.putString(key, value.name());
  }"
6330,get,"  @NonNull @Override public T get(@NonNull String key, @NonNull SharedPreferences preferences,
      @NonNull T defaultValue) {
    String value = preferences.getString(key, null);
    if (value == null) return defaultValue;
    return Enum.valueOf(enumClass, value);"
6331,set,"  public void set(@NonNull String key, @NonNull T value, @NonNull SharedPreferences.Editor editor) {
    String serialized = converter.serialize(value);
    checkNotNull(serialized, ""Serialized string must not be null from value: "" + value);
    editor.putString(key, serialized);
  }"
6332,get,"  @NonNull @Override public T get(@NonNull String key, @NonNull SharedPreferences preferences,
      @NonNull T defaultValue) {
    String serialized = preferences.getString(key, null);
    if (serialized == null) return defaultValue;

    T value = converter.deserialize(serialized);
    checkNotNull(value, ""Deserialized value must not be null from string: "" + serialized);"
6333,set,"  @Override public void set(@NonNull String key, @NonNull Boolean value,
      @NonNull SharedPreferences.Editor editor) {
    editor.putBoolean(key, value);"
6334,get,"  @NonNull @Override public Boolean get(@NonNull String key, @NonNull SharedPreferences preferences,
      @NonNull Boolean defaultValue) {
    return preferences.getBoolean(key, defaultValue);"
6336,md5HashCode,"    public static String md5HashCode(InputStream fis) {
        try {
            MessageDigest MD5 = MessageDigest.getInstance(""MD5"");"
6347,sha256Sign,"    public final static String sha256Sign(Map<String, Object> paramMap, String key) {
        try {
            String payParam = getSignTemp(paramMap, key);"
6349,getCityNameByNo,"    public static String getCityNameByNo(String cityNo) {
        List list = getList();
        String cityName = null;
        for (int i = 0; i < list.size(); i++) {
            Map map = (HashMap) list.get(i);
            if (cityNo.equals(map.get(""name""))) {"
6350,getList,"    public static List getList() {
        List strList = new ArrayList();
        InputStreamReader read = null;
        BufferedReader reader = null;
        try {
            read = new InputStreamReader(new ClassPathResource(""WxCityNo.txt"").getInputStream(), ""utf-8"");
            reader = new BufferedReader(read);"
6353,getJsonStr,"    public static String getJsonStr() {
        WeiXinTradeTypeEnum[] enums = WeiXinTradeTypeEnum.values();
        StringBuffer jsonStr = new StringBuffer(""["");
        for (WeiXinTradeTypeEnum senum : enums) {
            if (!""["".equals(jsonStr.toString())) {
                jsonStr.append("","");
            }"
6354,getEnum,"    public static WeiXinTradeTypeEnum getEnum(String name) {
        WeiXinTradeTypeEnum[] arry = WeiXinTradeTypeEnum.values();
        for (int i = 0; i < arry.length; i++) {
            if (arry[i].name().equalsIgnoreCase(name)) {
                return arry[i];"
6355,toList,"    public static List toList() {
        WeiXinTradeTypeEnum[] ary = WeiXinTradeTypeEnum.values();
        List list = new ArrayList();
        for (int i = 0; i < ary.length; i++) {
            Map<String, String> map = new HashMap<String, String>();
            map.put(""desc"", ary[i].getDesc());"
6356,toMap,"    public static Map<String, Map<String, Object>> toMap() {
        WeiXinTradeTypeEnum[] ary = WeiXinTradeTypeEnum.values();
        Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
        for (int num = 0; num < ary.length; num++) {
            Map<String, Object> map = new HashMap<String, Object>();
            String key = ary[num].name();"
6359,getJsonStr,"    public static String getJsonStr() {
        WeixinTradeStateEnum[] enums = WeixinTradeStateEnum.values();
        StringBuffer jsonStr = new StringBuffer(""["");
        for (WeixinTradeStateEnum senum : enums) {
            if (!""["".equals(jsonStr.toString())) {
                jsonStr.append("","");
            }"
6360,getEnum,"    public static WeixinTradeStateEnum getEnum(String name) {
        WeixinTradeStateEnum[] arry = WeixinTradeStateEnum.values();
        for (int i = 0; i < arry.length; i++) {
            if (arry[i].name().equalsIgnoreCase(name)) {
                return arry[i];"
6361,toList,"    public static List toList() {
        WeixinTradeStateEnum[] ary = WeixinTradeStateEnum.values();
        List list = new ArrayList();
        for (int i = 0; i < ary.length; i++) {
            Map<String, String> map = new HashMap<String, String>();
            map.put(""desc"", ary[i].getDesc());"
6362,toMap,"    public static Map<String, Map<String, Object>> toMap() {
        WeixinTradeStateEnum[] ary = WeixinTradeStateEnum.values();
        Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
        for (int num = 0; num < ary.length; num++) {
            Map<String, Object> map = new HashMap<String, Object>();
            String key = ary[num].name();"
6367,getStringByStringMap,"    public static String getStringByStringMap(Map<String, String> map) {
        SortedMap<String, Object> smap = new TreeMap<String, Object>(map);
        StringBuffer sb = new StringBuffer();
        for (Map.Entry<String, Object> m : smap.entrySet()) {
            sb.append(m.getKey()).append(""="").append(m.getValue()).append(""&"");
        }
        sb.delete(sb.length() - 1, sb.length());"
6368,getStringByMap,"    public static String getStringByMap(Map<String, Object> map) {
        SortedMap<String, Object> smap = new TreeMap<String, Object>(map);
        StringBuffer sb = new StringBuffer();
        for (Map.Entry<String, Object> m : smap.entrySet()) {
            sb.append(m.getKey()).append(""="").append(m.getValue()).append(""&"");
        }
        sb.delete(sb.length() - 1, sb.length());"
6370,notifySign,"    public static boolean notifySign(Map<String, String> result, String sign, String partnerKey) {
        String argNotifySign = getStringByStringMap(result) + ""&key="" + partnerKey;
        String notifySign = MD5Util.encode(argNotifySign).toUpperCase();
        if (notifySign.equals(sign)) {
            return true;"
6379,readConfig,"    public static String readConfig(String key) {
        return (String) properties.get(key);
    }"
6380,isNumeric,"	private static boolean isNumeric(String str) {
		if (str.matches(""\\d *"")) {
			return true;"
6381,arrayToXml,"	public static String arrayToXml(HashMap<String, String> arr) {
		String xml = ""<xml>"";

		Iterator<Entry<String, String>> iter = arr.entrySet().iterator();
		while (iter.hasNext()) {
			Entry<String, String> entry = iter.next();
			String key = entry.getKey();"
6382,createNoncestr,"	private static String createNoncestr(int length) {
		StringBuilder sb = new StringBuilder();
		Random rd = new Random();
		int clength = chars.length();
		for (int i = 0; i < length; i++) {
			sb.append(chars.charAt(rd.nextInt(clength - 1)));
		}"
6383,createNoncestr,"	public static String createNoncestr() {
		return createNoncestr(16);
	}"
6384,print,"    public UserBizException print() {
        LOG.info(""==>BizException, code:"" + this.code + "", msg:"" + this.msg);
        return this;
    }"
6385,deleteFile,"    public static void deleteFile(File... files) {
        for (File file : files) {
            if (file.exists()) {"
6387,getJsonStr,"	public static String getJsonStr() {
		TrxTypeEnum[] enums = TrxTypeEnum.values();
		StringBuffer jsonStr = new StringBuffer(""["");
		for (TrxTypeEnum senum : enums) {
			if (!""["".equals(jsonStr.toString())) {
				jsonStr.append("","");
			}"
6388,getEnum,"	public static TrxTypeEnum getEnum(String name) {
		TrxTypeEnum[] arry = TrxTypeEnum.values();
		for (int i = 0; i < arry.length; i++) {
			if (arry[i].name().equalsIgnoreCase(name)) {
				return arry[i];"
6389,toList,"	public static List toList() {
		TrxTypeEnum[] ary = TrxTypeEnum.values();
		List list = new ArrayList();
		for (int i = 0; i < ary.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put(""desc"", ary[i].getDesc());"
6390,toMap,"	public static Map<String, Map<String, Object>> toMap() {
		TrxTypeEnum[] ary = TrxTypeEnum.values();
		Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
		for (int num = 0; num < ary.length; num++) {
			Map<String, Object> map = new HashMap<String, Object>();
			String key = ary[num].name();"
6391,setDesc,"	public void setDesc(String desc) {
		this.desc = desc;
	}"
6393,getTrustManagerFactory,"	TrustManagerFactory getTrustManagerFactory(){
		return trustManagerFactory;
	}"
6394,getJsonStr,"	public static String getJsonStr() {
		TradeStatusEnum[] enums = TradeStatusEnum.values();
		StringBuffer jsonStr = new StringBuffer(""["");
		for (TradeStatusEnum senum : enums) {
			if (!""["".equals(jsonStr.toString())) {
				jsonStr.append("","");
			}"
6395,getEnum,"	public static TradeStatusEnum getEnum(String name) {
		TradeStatusEnum[] arry = TradeStatusEnum.values();
		for (int i = 0; i < arry.length; i++) {
			if (arry[i].name().equalsIgnoreCase(name)) {
				return arry[i];"
6396,toList,"	public static List toList() {
		TradeStatusEnum[] ary = TradeStatusEnum.values();
		List list = new ArrayList();
		for (int i = 0; i < ary.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put(""desc"", ary[i].getDesc());"
6397,toMap,"	public static Map<String, Map<String, Object>> toMap() {
		TradeStatusEnum[] ary = TradeStatusEnum.values();
		Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
		for (int num = 0; num < ary.length; num++) {
			Map<String, Object> map = new HashMap<String, Object>();
			String key = ary[num].name();"
6400,isNotNull,"    public static boolean isNotNull(Object obj) {
        if (obj != null && obj.toString() != null && !"""".equals(obj.toString().trim())) {
            return true;"
6401,getInParam,"    public static List<String> getInParam(String param) {
        boolean flag = param.contains("","");
        List<String> list = new ArrayList<String>();
        if (flag) {
            list = Arrays.asList(param.split("",""));
        } else {"
6403,isNumeric,"    public static boolean isNumeric(String str) {
        if (StringUtils.isBlank(str)) {
            return false;"
6404,get36UUID,"    public static String get36UUID() {
        return UUID.randomUUID().toString();
    }"
6405,get32UUID,"    public static String get32UUID() {
        return UUID.randomUUID().toString().replace(""-"", """");
    }"
6406,getExt,"    public static String getExt(String fileName) {
        return fileName.substring(fileName.lastIndexOf(""."") + 1);
    }"
6407,isEmpty,"    public static boolean isEmpty(Map<?, ?> obj) {
        return null == obj || obj.isEmpty();
    }"
6408,isEmpty,"    public static boolean isEmpty(List<?> obj) {
        return null == obj || obj.isEmpty();
    }"
6409,isEmpty,"    public static boolean isEmpty(Object obj) {
        if (null == obj) {
            return true;
        }
        if (obj instanceof String) {"
6410,isEmpty,"    public static boolean isEmpty(Object[] obj) {
        return null == obj || 0 == obj.length;
    }"
6411,isEmpty,"    public static boolean isEmpty(String str) {
        return null == str || """".equals(str);
    }"
6412,getBean,"	public static Object getBean(String name) throws BeansException {
		return applicationContext.getBean(name);
	}"
6413,getApplicationContext,"	public static ApplicationContext getApplicationContext() {
		return applicationContext;
	}"
6414,setApplicationContext,"	public void setApplicationContext(ApplicationContext applicationContext) {
		SpringContextUtil.applicationContext = applicationContext;
	}"
6415,loadTrustKeyStore,"    public static TrustKeyStore loadTrustKeyStore(InputStream keyStoreStream, String keyStorePass){
    	try{
    		TrustManagerFactory tmf = TrustManagerFactory.getInstance(""SunX509"");"
6416,loadTrustKeyStore,"    public static TrustKeyStore loadTrustKeyStore(String keyStorePath, String keyStorePass){
    	try{
    		return loadTrustKeyStore(new FileInputStream(keyStorePath), keyStorePass);"
6417,loadClientKeyStore,"    public static ClientKeyStore loadClientKeyStore(InputStream keyStoreStream, String keyStorePass, String privateKeyPass){
    	try{
    		KeyManagerFactory kmf = KeyManagerFactory.getInstance(""SunX509"");"
6418,loadClientKeyStore,"    public static ClientKeyStore loadClientKeyStore(String keyStorePath, String keyStorePass, String privateKeyPass){
    	try{
    		return loadClientKeyStore(new FileInputStream(keyStorePath), keyStorePass, privateKeyPass);"
6419,verify,"		public boolean verify(String arg0, String arg1) {
			return true;
		}"
6420,verify,"        public boolean verify(String hostname, SSLSession session) {
            return true;
        }"
6421,getAcceptedIssuers,"        public X509Certificate[] getAcceptedIssuers() {
            return new X509Certificate[]{};
        }"
6422,checkServerTrusted,"        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        }"
6423,checkClientTrusted,"        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        }"
6424,makeStringList,"	private static List<String> makeStringList(Object value){
    	if (value == null) {
    		value = """";
        }
    	List<String> result = new ArrayList<String>();
    	if (value.getClass().isArray()) {
            for (int j = 0; j < Array.getLength(value); j++) {
            	Object obj = Array.get(value, j);
            	result.add(obj!=null?obj.toString():"""");
            }"
6425,setSSLSocketFactory,"	private static void setSSLSocketFactory(HttpURLConnection urlConn, boolean sslVerify, boolean hostnameVerify, TrustKeyStore trustCertFactory, ClientKeyStore clientKeyFactory){
		try{
			SSLSocketFactory socketFactory = null;"
6426,queryStringToMap,"	public static Map queryStringToMap(String queryString, String charSet) {
		if (queryString == null) {
			throw new IllegalArgumentException(""queryString must be specified"");
		}

		int index = queryString.indexOf(""?"");
		if (index > 0) {
			queryString = queryString.substring(index + 1);
		}"
6427,mapToQueryString,"	public static String mapToQueryString(Map parameters, String charSet) {
		String queryString = """";
		if (parameters!=null && !parameters.isEmpty()) {
			Set<Entry> entrySet = parameters.entrySet();
			for(Entry entry : entrySet){"
6428,urlEncode,"	public static String urlEncode(String url, String charSet){
		if(url==null || url.trim().length()==0){
			return url;
		}
		int splitIndex = url.indexOf(""?"");
		if(splitIndex <= 0){
			return url;
		}
		String serviceUrl = url.substring(0, splitIndex);
		String queryString = url.substring(splitIndex+1, url.length());"
6430,httpRequest,"	public static String httpRequest(String url, Map<String,String> params, String method,
			String charSet, Map<String,String> headers) {
		SimpleHttpParam param = new SimpleHttpParam(url);
		if(null != param){
			param.setParameters(params);
		}
		if(null != headers){
			param.setHeaders(headers);
		}"
6431,httpGet,"	public static String httpGet(String url, Map params) {
		return httpRequest(url, params, HTTP_METHOD_GET, DEFAULT_CHARSET, null);
	}"
6432,httpPost,"	public static String httpPost(String url, Map params) {
		return httpRequest(url, params, HTTP_METHOD_POST, DEFAULT_CHARSET, null);
	}"
6433,setContentType,"	public void setContentType(String contentType) {
		this.contentType = contentType;
	}"
6434,isError,"	public boolean isError(){
		return exception!=null;
	}"
6435,isSuccess,"	public boolean isSuccess(){
		return statusCode==200;
	}"
6436,getException,"	public Exception getException() {
		return exception;
	}"
6437,getExceptionMsg,"	public String getExceptionMsg() {
		return exceptionMsg;
	}"
6438,setContent,"	public void setContent(String content) {
		this.content = content;
	}"
6439,getContent,"	public String getContent() {
		return content;
	}"
6440,setHeaders,"	public void setHeaders(Map<String, List<String>> headers) {
		this.headers = headers;
	}"
6441,getHeaders,"	public Map<String, List<String>> getHeaders() {
		return headers;
	}"
6442,getStatusCode,"	public int getStatusCode() {
		return statusCode;
	}"
6443,getContentType,"	public String getContentType(){
		return contentType;
	}"
6444,getHeaderField,"	public String getHeaderField(String key){
		if(headers==null){
			return null;
		}
		List<String> headerValues = headers.get(key);
		if(headerValues==null || headerValues.isEmpty()){"
6445,setHostnameVerify,"	public void setHostnameVerify(boolean hostnameVerify) {
		this.hostnameVerify = hostnameVerify;
	}"
6446,isHostnameVerify,"	public boolean isHostnameVerify() {
		return hostnameVerify;
	}"
6447,setTrustKeyStore,"	public void setTrustKeyStore(com.roncoo.pay.trade.utils.httpclient.TrustKeyStore trustKeyStore) {
		TrustKeyStore = trustKeyStore;
	}"
6448,getTrustKeyStore,"	public com.roncoo.pay.trade.utils.httpclient.TrustKeyStore getTrustKeyStore() {
		return TrustKeyStore;
	}"
6449,setClientKeyStore,"	public void setClientKeyStore(ClientKeyStore clientKeyStore) {
		this.clientKeyStore = clientKeyStore;
	}"
6450,getClientKeyStore,"	public ClientKeyStore getClientKeyStore() {
		return clientKeyStore;
	}"
6451,setPostData,"	public void setPostData(String postData) {
		this.postData = postData;
	}"
6452,getPostData,"	public String getPostData() {
		return postData;
	}"
6453,setIgnoreContentIfUnsuccess,"	public void setIgnoreContentIfUnsuccess(boolean ignoreContentIfUnsuccess) {
		this.ignoreContentIfUnsuccess = ignoreContentIfUnsuccess;
	}"
6454,isIgnoreContentIfUnsuccess,"	public boolean isIgnoreContentIfUnsuccess() {
		return ignoreContentIfUnsuccess;
	}"
6455,setConnectTimeout,"	public void setConnectTimeout(int connectTimeout) {
		this.connectTimeout = connectTimeout;
	}"
6456,getConnectTimeout,"	public int getConnectTimeout() {
		return connectTimeout;
	}"
6457,setReadTimeout,"	public void setReadTimeout(int readTimeout) {
		this.readTimeout = readTimeout;
	}"
6458,getReadTimeout,"	public int getReadTimeout() {
		return readTimeout;
	}"
6459,setHeaders,"	public void setHeaders(Map _headers) {
		this.headers.putAll(_headers);
	}"
6460,addHeaders,"	public void addHeaders(String key, Collection<String> values){
		this.headers.put(key, values);
	}"
6461,addHeader,"	public void addHeader(String key, String value){
		this.headers.put(key, value);
	}"
6462,getHeaders,"	public Map getHeaders() {
		return headers;
	}"
6463,setMaxResultSize,"	public void setMaxResultSize(int maxResultSize) {
		this.maxResultSize = maxResultSize;
	}"
6464,getMaxResultSize,"	public int getMaxResultSize() {
		return maxResultSize;
	}"
6465,setSslVerify,"	public void setSslVerify(boolean sslVerify) {
		this.sslVerify = sslVerify;
	}"
6466,isSslVerify,"	public boolean isSslVerify() {
		return sslVerify;
	}"
6467,setCharSet,"	public void setCharSet(String charSet) {
		this.charSet = charSet;
	}"
6468,getCharSet,"	public String getCharSet() {
		return charSet;
	}"
6469,setMethod,"	public void setMethod(String method) {
		this.method = method;
	}"
6470,getMethod,"	public String getMethod() {
		return method;
	}"
6471,setParameters,"	public void setParameters(Map _parameters) {
		this.parameters.putAll(_parameters);
	}"
6472,addParameters,"	public void addParameters(String key, Collection<String> values){
		this.parameters.put(key, values);
	}"
6473,addParameter,"	public void addParameter(String key, String value){
		this.parameters.put(key, value);
	}"
6474,getParameters,"	public Map getParameters() {
		return parameters;
	}"
6476,byteToHexString,"    private static String byteToHexString(byte b) {
        int n = b;
        if (n < 0) {
            n += 256;
        }
        int d1 = n / 16;
        int d2 = n % 16;"
6477,byteArrayToHexString,"    private static String byteArrayToHexString(byte b[]) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < b.length; i++) {
            sb.append(byteToHexString(b[i]));
        }"
6478,md5Encode,"    private static String md5Encode(String origin, String charsetname) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        if (StringUtils.isBlank(charsetname)) {
            return byteArrayToHexString(md.digest(new String(origin).getBytes()));"
6479,compare,"            public int compare(Entry<String, String> o1, Entry<String, String> o2) {
                return (o1.getKey()).toString().compareTo(o2.getKey());
            }"
6481,getSign,"    public static String getSign(Map<String, String> map, String keyValue) {
        return getSign(map, WX_SIGN_KEY, keyValue);
    }"
6482,validate,"    public static boolean validate(Map<String, String> map, String keyName, String keyValue, String sign) {
        if (StringUtils.isBlank(sign)) {
            return false;
        }
        String resultSign = getSign(map, keyName, keyValue);
        if (sign.toUpperCase().equals(resultSign.toUpperCase())) {"
6483,validate,"    public static boolean validate(Map<String, String> map, String keyValue, String sign) {
        return validate(map, WX_SIGN_KEY, keyValue, sign);
    }"
6484,checkRemit,"	public static boolean checkRemit(String enumName) {
		SettRecordStatusEnum[] enumAry = { SettRecordStatusEnum.REMIT_FAIL, SettRecordStatusEnum.REMIT_SUCCESS };
		for (int i = 0; i < enumAry.length; i++) {
			if (enumAry[i].name().equals(enumName)) {
				return true;"
6485,checkConfirm,"	public static boolean checkConfirm(String enumName) {
		SettRecordStatusEnum[] enumAry = { SettRecordStatusEnum.CANCEL, SettRecordStatusEnum.CONFIRMED };
		for (int i = 0; i < enumAry.length; i++) {
			if (enumAry[i].name().equals(enumName)) {
				return true;"
6486,toList,"	public static List toList() {
		SettRecordStatusEnum[] ary = SettRecordStatusEnum.values();
		List list = new ArrayList();
		for (int i = 0; i < ary.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put(""desc"", ary[i].getDesc());"
6487,toMap,"	public static Map<String, Map<String, Object>> toMap() {
		SettRecordStatusEnum[] ary = SettRecordStatusEnum.values();
		Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
		for (int num = 0; num < ary.length; num++) {
			Map<String, Object> map = new HashMap<String, Object>();
			String key = ary[num].name();"
6488,getEnum,"	public static SettRecordStatusEnum getEnum(String enumName) {
		SettRecordStatusEnum resultEnum = null;
		SettRecordStatusEnum[] enumAry = SettRecordStatusEnum.values();
		for (int i = 0; i < enumAry.length; i++) {
			if (enumAry[i].name().equals(enumName)) {
				resultEnum = enumAry[i];"
6491,toList,"	public static List toList() {
		SettModeTypeEnum[] ary = SettModeTypeEnum.values();
		List list = new ArrayList();
		for (int i = 0; i < ary.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put(""desc"", ary[i].getDesc());"
6492,toMap,"	public static Map<String, Map<String, Object>> toMap() {
		SettModeTypeEnum[] ary = SettModeTypeEnum.values();
		Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
		for (int num = 0; num < ary.length; num++) {
			Map<String, Object> map = new HashMap<String, Object>();
			String key = ary[num].name();"
6493,getEnum,"	public static SettModeTypeEnum getEnum(String enumName) {
		SettModeTypeEnum resultEnum = null;
		SettModeTypeEnum[] enumAry = SettModeTypeEnum.values();
		for (int i = 0; i < enumAry.length; i++) {
			if (enumAry[i].name().equals(enumName)) {
				resultEnum = enumAry[i];"
6496,toList,"	public static List toList() {
		SettDailyCollectTypeEnum[] ary = SettDailyCollectTypeEnum.values();
		List list = new ArrayList();
		for (int i = 0; i < ary.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put(""desc"", ary[i].getDesc());"
6497,toMap,"	public static Map<String, Map<String, Object>> toMap() {
		SettDailyCollectTypeEnum[] ary = SettDailyCollectTypeEnum.values();
		Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
		for (int num = 0; num < ary.length; num++) {
			Map<String, Object> map = new HashMap<String, Object>();
			String key = ary[num].name();"
6498,getEnum,"	public static SettDailyCollectTypeEnum getEnum(String enumName) {
		SettDailyCollectTypeEnum resultEnum = null;
		SettDailyCollectTypeEnum[] enumAry = SettDailyCollectTypeEnum.values();
		for (int i = 0; i < enumAry.length; i++) {
			if (enumAry[i].name().equals(enumName)) {
				resultEnum = enumAry[i];"
6501,toList,"	public static List toList() {
		SettDailyCollectStatusEnum[] ary = SettDailyCollectStatusEnum.values();
		List list = new ArrayList();
		for (int i = 0; i < ary.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put(""value"", String.valueOf(ary[i].name()));"
6502,toMap,"	public static Map<String, Map<String, Object>> toMap() {
		SettDailyCollectStatusEnum[] ary = SettDailyCollectStatusEnum.values();
		Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
		for (int num = 0; num < ary.length; num++) {
			Map<String, Object> map = new HashMap<String, Object>();
			String key = String.valueOf(getEnum(ary[num].name()));"
6503,getEnum,"	public static SettDailyCollectStatusEnum getEnum(String enumName) {
		SettDailyCollectStatusEnum resultEnum = null;
		SettDailyCollectStatusEnum[] enumAry = SettDailyCollectStatusEnum.values();
		for (int i = 0; i < enumAry.length; i++) {
			if (enumAry[i].name().equals(enumName)) {
				resultEnum = enumAry[i];"
6506,print,"	public SettBizException print() {
		LOG.info(""==>BizException, code:"" + this.code + "", msg:"" + this.msg);
		return this;
	}"
6507,newInstance,"	public SettBizException newInstance(String msgFormat, Object... args) {
		return new SettBizException(this.code, msgFormat, args);
	}"
6508,launchAutoSett,"	public void launchAutoSett(List<RpAccount> accountList) {
		if (accountList == null || accountList.isEmpty()) {
			return;
		}"
6509,launchDailySettCollect,"	public void launchDailySettCollect(List<RpAccount> accountList, Date endDate) {

		if (accountList == null || accountList.isEmpty()) {
			return;"
6510,setSeqName,"	public void setSeqName(String seqName) {
		this.seqName = seqName;
	}"
6511,getSeqName,"	public String getSeqName() {
		return seqName;
	}"
6512,getJsonStr,"	public static String getJsonStr() {
		SecurityRatingEnum[] enums = SecurityRatingEnum.values();
		StringBuffer jsonStr = new StringBuffer(""["");
		for (SecurityRatingEnum senum : enums) {
			if (!""["".equals(jsonStr.toString())) {
				jsonStr.append("","");
			}"
6513,toList,"	public static List toList() {
		SecurityRatingEnum[] ary = SecurityRatingEnum.values();
		List list = new ArrayList();
		for (int i = 0; i < ary.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put(""name"", ary[i].name());"
6514,toMap,"	public static Map<String, Map<String, Object>> toMap() {
		SecurityRatingEnum[] ary = SecurityRatingEnum.values();
		Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
		for (int num = 0; num < ary.length; num++) {
			Map<String, Object> map = new HashMap<String, Object>();
			String key = ary[num].name();"
6515,getEnum,"	public static SecurityRatingEnum getEnum(String enumName) {
		SecurityRatingEnum resultEnum = null;
		SecurityRatingEnum[] enumAry = SecurityRatingEnum.values();
		for (int i = 0; i < enumAry.length; i++) {
			if (enumAry[i].name().equals(enumName)) {
				resultEnum = enumAry[i];"
6518,setProductName,"    public void setProductName(String productName) {
        this.productName = productName;
    }"
6519,getProductName,"    public String getProductName() {
        return productName;
    }"
6520,setOrderAmount,"    public void setOrderAmount(BigDecimal orderAmount) {
        this.orderAmount = orderAmount;
    }"
6521,getOrderAmount,"    public BigDecimal getOrderAmount() {
        return orderAmount;
    }"
6522,setPayWayCode,"    public void setPayWayCode(String payWayCode) {
        this.payWayCode = payWayCode;
    }"
6523,getPayWayCode,"    public String getPayWayCode() {
        return payWayCode;
    }"
6524,setCodeUrl,"    public void setCodeUrl(String codeUrl) {
        this.codeUrl = codeUrl;
    }"
6525,getCodeUrl,"    public String getCodeUrl() {
        return codeUrl;
    }"
6526,toString,"    public String toString() {
        return ""ScanPayRequestBo{"" +
                ""payKey='"" + payKey + '\'' +"
6527,setNumberOfStages,"    public void setNumberOfStages(Integer numberOfStages) {
        this.numberOfStages = numberOfStages;
    }"
6528,getNumberOfStages,"    public Integer getNumberOfStages() {
        return numberOfStages;
    }"
6529,setPayType,"    public void setPayType(String payType) {
        this.payType = payType;
    }"
6530,getPayType,"    public String getPayType() {
        return payType;
    }"
6531,setRemark,"    public void setRemark(String remark) {
        this.remark = remark;
    }"
6532,getRemark,"    public String getRemark() {
        return remark;
    }"
6533,setSign,"    public void setSign(String sign) {
        this.sign = sign;
    }"
6534,getSign,"    public String getSign() {
        return sign;
    }"
6535,setNotifyUrl,"    public void setNotifyUrl(String notifyUrl) {
        this.notifyUrl = notifyUrl;
    }"
6536,getNotifyUrl,"    public String getNotifyUrl() {
        return notifyUrl;
    }"
6537,setReturnUrl,"    public void setReturnUrl(String returnUrl) {
        this.returnUrl = returnUrl;
    }"
6538,getReturnUrl,"    public String getReturnUrl() {
        return returnUrl;
    }"
6539,setOrderPeriod,"    public void setOrderPeriod(Integer orderPeriod) {
        this.orderPeriod = orderPeriod;
    }"
6540,getOrderPeriod,"    public Integer getOrderPeriod() {
        return orderPeriod;
    }"
6541,setOrderTime,"    public void setOrderTime(String orderTime) {
        this.orderTime = orderTime;
    }"
6542,getOrderTime,"    public String getOrderTime() {
        return orderTime;
    }"
6543,setOrderDate,"    public void setOrderDate(String orderDate) {
        this.orderDate = orderDate;
    }"
6544,getOrderDate,"    public String getOrderDate() {
        return orderDate;
    }"
6545,setOrderIp,"    public void setOrderIp(String orderIp) {
        this.orderIp = orderIp;
    }"
6546,getOrderIp,"    public String getOrderIp() {
        return orderIp;
    }"
6547,setOrderPrice,"    public void setOrderPrice(BigDecimal orderPrice) {
        this.orderPrice = orderPrice;
    }"
6548,getOrderPrice,"    public BigDecimal getOrderPrice() {
        return orderPrice;
    }"
6549,setOrderNo,"    public void setOrderNo(String orderNo) {
        this.orderNo = orderNo;
    }"
6550,getOrderNo,"    public String getOrderNo() {
        return orderNo;
    }"
6553,setPayKey,"    public void setPayKey(String payKey) {
        this.payKey = payKey;
    }"
6554,getPayKey,"    public String getPayKey() {
        return payKey;
    }"
6555,getStatusDesc,"	public String getStatusDesc() {
		if (StringUtil.isEmpty(this.getStatus())) {
			return """";"
6556,setIsAuth,"	public void setIsAuth(String isAuth) {
		this.isAuth = isAuth;
	}"
6557,getIsAuth,"	public String getIsAuth() {
		return isAuth;
	}"
6558,setIsDefault,"	public void setIsDefault(String isDefault) {
		this.isDefault = isDefault;
	}"
6559,getIsDefault,"	public String getIsDefault() {
		return isDefault;
	}"
6560,setExpDate,"	public void setExpDate(String expDate) {
		this.expDate = expDate;
	}"
6561,getExpDate,"	public String getExpDate() {
		return expDate;
	}"
6562,setCvn2,"	public void setCvn2(String cvn2) {
		this.cvn2 = cvn2;
	}"
6564,setUserNo,"	public void setUserNo(String userNo) {
		this.userNo = userNo;
	}"
6565,getUserNo,"	public String getUserNo() {
		return userNo;
	}"
6566,setBankCode,"	public void setBankCode(String bankCode) {
		this.bankCode = bankCode;
	}"
6567,getBankCode,"	public String getBankCode() {
		return bankCode;
	}"
6568,setBankName,"	public void setBankName(String bankName) {
		this.bankName = bankName;
	}"
6569,getBankName,"	public String getBankName() {
		return bankName;
	}"
6570,setMobileNo,"	public void setMobileNo(String mobileNo) {
		this.mobileNo = mobileNo;
	}"
6571,getMobileNo,"	public String getMobileNo() {
		return mobileNo;
	}"
6572,setCardNo,"	public void setCardNo(String cardNo) {
		this.cardNo = cardNo;
	}"
6573,getCardNo,"	public String getCardNo() {
		return cardNo;
	}"
6574,setCardType,"	public void setCardType(String cardType) {
		this.cardType = cardType;
	}"
6575,getCardType,"	public String getCardType() {
		return cardType;
	}"
6576,setBankAccountType,"	public void setBankAccountType(String bankAccountType) {
		this.bankAccountType = bankAccountType;
	}"
6577,getBankAccountType,"	public String getBankAccountType() {
		return bankAccountType;
	}"
6578,setBankAccountNo,"	public void setBankAccountNo(String bankAccountNo) {
		this.bankAccountNo = bankAccountNo;
	}"
6579,getBankAccountNo,"	public String getBankAccountNo() {
		return bankAccountNo;
	}"
6580,setBankAccountName,"	public void setBankAccountName(String bankAccountName) {
		this.bankAccountName = bankAccountName;
	}"
6581,getBankAccountName,"	public String getBankAccountName() {
		return bankAccountName;
	}"
6582,setAreas,"	public void setAreas(String areas) {
		this.areas = areas;
	}"
6583,getAreas,"	public String getAreas() {
		return areas;
	}"
6584,setCity,"	public void setCity(String city) {
		this.city = city;
	}"
6586,setProvince,"	public void setProvince(String province) {
		this.province = province;
	}"
6587,getProvince,"	public String getProvince() {
		return province;
	}"
6588,getByUserNo,"	public RpUserPayInfo getByUserNo(String userNo, String payWayCode) {
		return rpUserPayInfoDao.getByUserNo(userNo, payWayCode);
	}"
6589,listPage,"	public PageBean listPage(PageParam pageParam, RpUserPayInfo rpUserPayInfo) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		return rpUserPayInfoDao.listPage(pageParam, paramMap);
	}"
6590,getDataById,"	public RpUserPayInfo getDataById(String id) {
		return rpUserPayInfoDao.getById(id);
	}"
6591,updateData,"	public void updateData(RpUserPayInfo rpUserPayInfo) {
		rpUserPayInfoDao.update(rpUserPayInfo);
	}"
6592,saveData,"	public void saveData(RpUserPayInfo rpUserPayInfo) {
		rpUserPayInfoDao.insert(rpUserPayInfo);
	}"
6593,getByUserNo,"	public RpUserPayInfo getByUserNo(String userNo, String payWayCode);
	"
6594,listPage,"	PageBean listPage(PageParam pageParam, RpUserPayInfo rpUserPayInfo);
"
6596,updateData,"	void updateData(RpUserPayInfo rpUserPayInfo);
"
6598,getByUserNo,"    public RpUserPayInfo getByUserNo(String userNo, String payWayCode) {
        Map<String , Object> paramMap = new HashMap<String , Object>();
        paramMap.put(""userNo"",userNo);
        paramMap.put(""payWayCode"",payWayCode);
        return super.getBy(paramMap);
    }"
6599,getByUserNo,"    public  RpUserPayInfo getByUserNo(String userNo, String payWayCode);
"
6600,setUserName,"    public void setUserName(String userName) {
        this.userName = userName == null ? null : userName.trim();
    }"
6602,setUserNo,"    public void setUserNo(String userNo) {
        this.userNo = userNo == null ? null : userNo.trim();
    }"
6603,getUserNo,"    public String getUserNo() {
        return userNo;
    }"
6604,setAppType,"    public void setAppType(String appType) {
        this.appType = appType == null ? null : appType.trim();
    }"
6605,getAppType,"    public String getAppType() {
        return appType;
    }"
6606,setMerchantId,"    public void setMerchantId(String merchantId) {
        this.merchantId = merchantId == null ? null : merchantId.trim();
    }"
6607,getMerchantId,"    public String getMerchantId() {
        return merchantId;
    }"
6608,setAppSectet,"    public void setAppSectet(String appSectet) {
        this.appSectet = appSectet == null ? null : appSectet.trim();
    }"
6609,getAppSectet,"    public String getAppSectet() {
        return appSectet;
    }"
6610,setAppId,"    public void setAppId(String appId) {
        this.appId = appId == null ? null : appId.trim();
    }"
6611,getAppId,"    public String getAppId() {
        return appId;
    }"
6612,setPartnerKey,"	public void setPartnerKey(String partnerKey) {
		this.partnerKey = partnerKey;
	}"
6613,getPartnerKey,"	public String getPartnerKey() {
		return partnerKey;
	}"
6614,setPayWayName,"	public void setPayWayName(String payWayName) {
		this.payWayName = payWayName;
	}"
6615,getPayWayName,"	public String getPayWayName() {
		return payWayName;
	}"
6616,setPayWayCode,"	public void setPayWayCode(String payWayCode) {
		this.payWayCode = payWayCode;
	}"
6617,getPayWayCode,"	public String getPayWayCode() {
		return payWayCode;
	}"
6618,setRsaPublicKey,"	public void setRsaPublicKey(String rsaPublicKey) {
		this.rsaPublicKey = rsaPublicKey;
	}"
6619,getRsaPublicKey,"	public String getRsaPublicKey() {
		return rsaPublicKey;
	}"
6620,setRsaPrivateKey,"	public void setRsaPrivateKey(String rsaPrivateKey) {
		this.rsaPrivateKey = rsaPrivateKey;
	}"
6621,getRsaPrivateKey,"	public String getRsaPrivateKey() {
		return rsaPrivateKey;
	}"
6622,setOfflineAppId,"	public void setOfflineAppId(String offlineAppId) {
		this.offlineAppId = offlineAppId;
	}"
6623,getOfflineAppId,"    public String getOfflineAppId() {
		return offlineAppId;
	}"
6624,getByPayKey,"	public RpUserPayConfig getByPayKey(String payKey){
	    Map<String , Object> paramMap = new HashMap<String , Object>();
	    paramMap.put(""payKey"", payKey);
	    paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
	    paramMap.put(""auditStatus"", PublicEnum.YES.name());
	    return rpUserPayConfigDao.getBy(paramMap);
	}"
6627,updateUserPayConfig,"	public void updateUserPayConfig(String userNo, String productCode, String productName, Integer riskDay, String fundIntoType,
			String isAutoSett, String appId, String merchantId, String partnerKey,
			String ali_partner, String ali_sellerId, String ali_key, String ali_appid, String ali_rsaPrivateKey, String ali_rsaPublicKey)  throws PayBizException{"
6630,createUserPayConfig,"	public void createUserPayConfig(String userNo, String userName, String productCode, String productName, Integer riskDay,
			String fundIntoType, String isAutoSett, String appId, String merchantId, String partnerKey,
			String ali_partner, String ali_sellerId, String ali_key, String ali_appid, String ali_rsaPrivateKey, String ali_rsaPublicKey)  throws PayBizException{"
6631,listByProductCode,"	public List<RpUserPayConfig> listByProductCode(String productCode, String auditStatus){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""productCode"", productCode);
		paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
		paramMap.put(""auditStatus"", auditStatus);
		return rpUserPayConfigDao.listBy(paramMap);
	}"
6632,listByProductCode,"	public List<RpUserPayConfig> listByProductCode(String productCode){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""productCode"", productCode);
		paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
		paramMap.put(""auditStatus"", PublicEnum.YES.name());
		return rpUserPayConfigDao.listBy(paramMap);
	}"
6633,getByUserNo,"	public RpUserPayConfig getByUserNo(String userNo, String auditStatus){
		return rpUserPayConfigDao.getByUserNo(userNo, auditStatus);
	}"
6634,getByUserNo,"	public RpUserPayConfig getByUserNo(String userNo) {
		return rpUserPayConfigDao.getByUserNo(userNo, PublicEnum.YES.name());
	}"
6636,getDataById,"	public RpUserPayConfig getDataById(String id) {
		return rpUserPayConfigDao.getById(id);
	}"
6637,updateData,"	public void updateData(RpUserPayConfig rpUserPayConfig) {
		rpUserPayConfigDao.update(rpUserPayConfig);
	}"
6638,saveData,"	public void saveData(RpUserPayConfig rpUserPayConfig) {
		rpUserPayConfigDao.insert(rpUserPayConfig);
	}"
6639,getByPayKey,"	RpUserPayConfig getByPayKey(String payKey);
	"
6640,audit,"	void audit(String userNo, String auditStatus);
	"
6641,updateUserPayConfig,"	void updateUserPayConfig(String userNo, String productCode, String productName, Integer riskDay, String fundIntoType,
                             String isAutoSett, String appId, String merchantId, String partnerKey, String ali_partner, String ali_sellerId, String ali_key,"
6643,deleteUserPayConfig,"	void deleteUserPayConfig(String userNo) throws PayBizException;
"
6644,createUserPayConfig,"	void createUserPayConfig(String userNo, String userName, String productCode, String productName, Integer riskDay, String fundIntoType,
                             String isAutoSett, String appId, String merchantId, String partnerKey, String ali_partner, String ali_sellerId, String ali_key,"
6646,listByProductCode,"	List<RpUserPayConfig> listByProductCode(String productCode, String auditStatus);
	"
6647,listByProductCode,"	List<RpUserPayConfig> listByProductCode(String productCode);
	"
6648,getByUserNo,"	RpUserPayConfig getByUserNo(String userNo, String auditStatus);
	"
6649,getByUserNo,"	RpUserPayConfig getByUserNo(String userNo);
	"
6650,listPage,"	PageBean listPage(PageParam pageParam, RpUserPayConfig rpUserPayConfig);
"
6652,updateData,"	void updateData(RpUserPayConfig rpUserPayConfig);
"
6653,saveData,"	void saveData(RpUserPayConfig rpUserPayConfig);
"
6654,getByUserNo,"    public RpUserPayConfig getByUserNo(String userNo, String auditStatus) {
        Map<String , Object> paramMap = new HashMap<String , Object>();
        paramMap.put(""userNo"",userNo);
        paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
        paramMap.put(""auditStatus"", auditStatus);
        return super.getBy(paramMap);
    }"
6655,getByUserNo,"    RpUserPayConfig getByUserNo(String userNo, String auditStatus);
"
6656,setMerchantServerIp,"    public void setMerchantServerIp(String merchantServerIp) {
        this.merchantServerIp = merchantServerIp;
    }"
6657,getMerchantServerIp,"    public String getMerchantServerIp() {
        return merchantServerIp;
    }"
6658,setSecurityRating,"    public void setSecurityRating(String securityRating) {
        this.securityRating = securityRating;
    }"
6659,getSecurityRating,"    public String getSecurityRating() {
        return securityRating;
    }"
6660,getFundIntoTypeDesc,"    public String getFundIntoTypeDesc() {
    	return FundInfoTypeEnum.getEnum(this.getFundIntoType()).getDesc();
    }"
6661,getAuditStatusDesc,"    public String getAuditStatusDesc() {
    	return PublicEnum.getEnum(this.getAuditStatus()).getDesc();
    }"
6662,setRiskDay,"    public void setRiskDay(Integer riskDay) {
        this.riskDay = riskDay;
    }"
6663,getRiskDay,"    public Integer getRiskDay() {
        return riskDay;
    }"
6668,setProductName,"    public void setProductName(String productName) {
        this.productName = productName == null ? null : productName.trim();
    }"
6670,setProductCode,"    public void setProductCode(String productCode) {
        this.productCode = productCode == null ? null : productCode.trim();
    }"
6671,getProductCode,"    public String getProductCode() {
        return productCode;
    }"
6672,setPayKey,"	public void setPayKey(String payKey) {
		this.payKey = payKey;
	}"
6673,getPayKey,"    public String getPayKey() {
		return payKey;
	}"
6674,setIsAutoSett,"    public void setIsAutoSett(String isAutoSett) {
        this.isAutoSett = isAutoSett == null ? null : isAutoSett.trim();
    }"
6675,getIsAutoSett,"    public String getIsAutoSett() {
        return isAutoSett;
    }"
6676,setAuditStatus,"    public void setAuditStatus(String auditStatus) {
        this.auditStatus = auditStatus == null ? null : auditStatus.trim();
    }"
6677,getAuditStatus,"    public String getAuditStatus() {
        return auditStatus;
    }"
6678,setFundIntoType,"    public void setFundIntoType(String fundIntoType) {
        this.fundIntoType = fundIntoType;
    }"
6679,getFundIntoType,"    public String getFundIntoType() {
        return fundIntoType;
    }"
6680,setPaySecret,"    public void setPaySecret(String paySecret) {
        this.paySecret = paySecret;
    }"
6681,getPaySecret,"    public String getPaySecret() {
        return paySecret;
    }"
6682,listAll,"    public List<RpUserInfo> listAll(){
    	Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
		return rpUserInfoDao.listBy(paramMap);
	}"
6683,getDataByMobile,"    public RpUserInfo getDataByMobile(String mobile){
    	Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""mobile"", mobile);
		paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
		return rpUserInfoDao.getBy(paramMap);
    }"
6684,getDataByMerchentNo,"    public RpUserInfo getDataByMerchentNo(String merchantNo) {
        Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""userNo"", merchantNo);
		paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
		return rpUserInfoDao.getBy(paramMap);
    }"
6686,listPage,"	public PageBean listPage(PageParam pageParam, RpUserInfo rpUserInfo) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""userNo"", rpUserInfo.getUserNo());
		return rpUserInfoDao.listPage(pageParam, paramMap);
	}"
6687,getDataById,"	public RpUserInfo getDataById(String id) {
		return rpUserInfoDao.getById(id);
	}"
6688,updateData,"	public void updateData(RpUserInfo rpUserInfo) {
		rpUserInfoDao.update(rpUserInfo);
	}"
6689,saveData,"	public void saveData(RpUserInfo rpUserInfo) {
		rpUserInfoDao.insert(rpUserInfo);
	}"
6692,getDataByMerchentNo,"	RpUserInfo getDataByMerchentNo(String merchantNo);
	"
6693,registerOffline,"    void registerOffline(String userName, String mobile, String password) ;
"
6694,listPage,"	PageBean listPage(PageParam pageParam, RpUserInfo rpUserInfo);
	"
6698,getStatusDesc,"    public String getStatusDesc() {
        return PublicStatusEnum.getEnum(this.getStatus()).getDesc();
    }"
6699,setAccountNo,"    public void setAccountNo(String accountNo) {
        this.accountNo = accountNo == null ? null : accountNo.trim();
    }"
6700,getAccountNo,"    public String getAccountNo() {
        return accountNo;
    }"
6704,getUserNo,"	public String getUserNo() {
        return userNo;
    }"
6705,setPassword,"	public void setPassword(String password) {
		this.password = password;
	}"
6706,getPassword,"	public String getPassword() {
		return password;
	}"
6707,setMobile,"	public void setMobile(String mobile) {
		this.mobile = mobile;
	}"
6708,getMobile,"	public String getMobile() {
		return mobile;
	}"
6709,setPayPwd,"	public void setPayPwd(String payPwd) {
		this.payPwd = payPwd;
	}"
6710,getPayPwd,"    public String getPayPwd() {
		return payPwd;
	}"
6711,updateByKey,"    public void updateByKey(RpUserBankAuth userBankAuth) {
        userBankAuthDao.update(userBankAuth);
    }"
6712,findByMerchantNoAndPayOrderNo,"    public RpUserBankAuth findByMerchantNoAndPayOrderNo(String merchantNo, String payOrderNo) {
        return userBankAuthDao.findByMerchantNoAndPayOrderNo(merchantNo, payOrderNo);
    }"
6713,updateByKey,"    void updateByKey(RpUserBankAuth userBankAuth);
"
6714,findByMerchantNoAndPayOrderNo,"    RpUserBankAuth findByMerchantNoAndPayOrderNo(String merchantNo, String payOrderNo);
"
6715,listByUserInfo,"    public List<RpUserBankAuth> listByUserInfo(String userName, String phone, String idNo, String bankAccountNo) {
        Map<String, Object> paramMap = new HashMap<>();
        paramMap.put(""userName"", userName);
        paramMap.put(""phone"", phone);
        paramMap.put(""idNo"", idNo);
        paramMap.put(""bankAccountNo"", bankAccountNo);
        return super.listBy(paramMap);
    }"
6716,findByMerchantNoAndPayOrderNo,"    public RpUserBankAuth findByMerchantNoAndPayOrderNo(String merchantNo, String payOrderNo) {
        Map<String, Object> paramMap = new HashMap<>();
        paramMap.put(""merchantNo"", merchantNo);
        paramMap.put(""payOrderNo"", payOrderNo);
        System.out.println(paramMap.toString());
        return super.getByColumn(paramMap);
    }"
6717,listByUserInfo,"    List<RpUserBankAuth> listByUserInfo(String userName, String phone, String idNo, String bankAccountNo);
}"
6718,findByMerchantNoAndPayOrderNo,"    RpUserBankAuth findByMerchantNoAndPayOrderNo(String merchantNo,String payOrderNo);
"
6719,setBankAccountNo,"    public void setBankAccountNo(String bankAccountNo) {
        this.bankAccountNo = bankAccountNo;
    }"
6720,getBankAccountNo,"    public String getBankAccountNo() {
        return bankAccountNo;
    }"
6721,setIdNo,"    public void setIdNo(String idNo) {
        this.idNo = idNo;
    }"
6722,getIdNo,"    public String getIdNo() {
        return idNo;
    }"
6723,setPhone,"    public void setPhone(String phone) {
        this.phone = phone;
    }"
6724,getPhone,"    public String getPhone() {
        return phone;
    }"
6727,setPayOrderNo,"    public void setPayOrderNo(String payOrderNo) {
        this.payOrderNo = payOrderNo;
    }"
6728,getPayOrderNo,"    public String getPayOrderNo() {
        return payOrderNo;
    }"
6729,setMerchantNo,"    public void setMerchantNo(String merchantNo) {
        this.merchantNo = merchantNo;
    }"
6730,getMerchantNo,"    public String getMerchantNo() {
        return merchantNo;
    }"
6731,createOrUpdate,"	public void createOrUpdate(RpUserBankAccount rpUserBankAccount){
		RpUserBankAccount bankAccount = getByUserNo(rpUserBankAccount.getUserNo());
		if(bankAccount == null){
			bankAccount = new RpUserBankAccount();"
6732,getByUserNo,"	public RpUserBankAccount getByUserNo(String userNo){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""userNo"", userNo);
		paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
		return rpUserBankAccountDao.getBy(paramMap);
	}"
6733,updateData,"	public void updateData(RpUserBankAccount rpUserBankAccount) {
		rpUserBankAccountDao.update(rpUserBankAccount);
	}"
6734,saveData,"	public void saveData(RpUserBankAccount rpUserBankAccount) {
		rpUserBankAccountDao.insert(rpUserBankAccount);
	}"
6735,createOrUpdate,"	void createOrUpdate(RpUserBankAccount rpUserBankAccount);
}"
6736,getByUserNo,"	RpUserBankAccount getByUserNo(String userNo);
"
6737,updateData,"	void updateData(RpUserBankAccount rpUserBankAccount);
"
6738,saveData,"	void saveData(RpUserBankAccount rpUserBankAccount);
"
6759,setStreet,"	public void setStreet(String street) {
		this.street = street;
	}"
6760,getStreet,"	public String getStreet() {
		return street;
	}"
6771,handleFeeMistake,"	public void handleFeeMistake(RpAccountCheckMistake mistake);
"
6772,handleAmountMistake,"	public void handleAmountMistake(RpAccountCheckMistake mistake, boolean isBankMore) ;
"
6773,platFailBankSuccess,"	public void platFailBankSuccess(String trxNo, String bankTrxNo);
"
6774,bankMissOrBankFailBaseBank,"	public void bankMissOrBankFailBaseBank(String trxNo);
"
6775,getPayWayReport,"	public List<Map<String, String>> getPayWayReport(String merchantNo){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""status"", TradeStatusEnum.SUCCESS.name());
		paramMap.put(""merchantNo"", merchantNo);
		return super.getSessionTemplate().selectList(getStatement(""getPayWayReport""),paramMap);
	}"
6776,getPaymentReport,"	public List<Map<String, String>> getPaymentReport(String merchantNo){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""status"", TradeStatusEnum.SUCCESS.name());
		paramMap.put(""merchantNo"", merchantNo);
		return super.getSessionTemplate().selectList(getStatement(""getPaymentReport""),paramMap);
	}"
6777,getByTrxNo,"	public RpTradePaymentRecord getByTrxNo(String trxNo) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""trxNo"", trxNo);
		return super.getBy(paramMap);
	}"
6778,getSuccessRecordByMerchantNoAndMerchantOrderNo,"	public RpTradePaymentRecord getSuccessRecordByMerchantNoAndMerchantOrderNo(String merchantNo, String merchantOrderNo) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""status"", TradeStatusEnum.SUCCESS.name());
		paramMap.put(""merchantNo"", merchantNo);
		paramMap.put(""merchantOrderNo"", merchantOrderNo);
		return super.getBy(paramMap);
	}"
6779,getByBankOrderNo,"	public RpTradePaymentRecord getByBankOrderNo(String bankOrderNo) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""bankOrderNo"", bankOrderNo);
		return super.getBy(paramMap);
	}"
6780,getPayWayReport,"	List<Map<String, String>> getPayWayReport(String merchantNo);
"
6781,getPaymentReport,"	List<Map<String, String>> getPaymentReport(String merchantNo);
"
6782,getByTrxNo,"	RpTradePaymentRecord getByTrxNo(String trxNo);
"
6783,getSuccessRecordByMerchantNoAndMerchantOrderNo,"    RpTradePaymentRecord getSuccessRecordByMerchantNoAndMerchantOrderNo(String merchantNo, String merchantOrderNo);
"
6784,getByBankOrderNo,"    RpTradePaymentRecord getByBankOrderNo(String bankOrderNo);
"
6786,getCreateTimeDesc,"    public String getCreateTimeDesc() {
    	return DateUtils.formatDate(this.getCreateTime(), ""yyyy-MM-dd HH:mm"");
    }"
6787,getStatusDesc,"    public String getStatusDesc() {
    	return TradeStatusEnum.getEnum(this.getStatus()).getDesc();
    }"
6788,getPayWayNameDesc,"    public String getPayWayNameDesc() {
    	return PayWayEnum.getEnum(this.getPayWayCode()).getDesc()+""-""+ PayTypeEnum.getEnum(this.getPayTypeCode()).getDesc();
    }"
6789,getTrxTypeDesc,"    public String getTrxTypeDesc() {
    	return TrxTypeEnum.getEnum(this.getTrxType()).getDesc();
    }"
6790,setBankReturnMsg,"    public void setBankReturnMsg(String bankReturnMsg) {
        this.bankReturnMsg = bankReturnMsg;
    }"
6791,getBankReturnMsg,"    public String getBankReturnMsg() {
        return bankReturnMsg;
    }"
6792,setTrxType,"    public void setTrxType(String trxType) {
        this.trxType = trxType;
    }"
6793,getTrxType,"    public String getTrxType() {
        return trxType;
    }"
6794,setRefundTimes,"    public void setRefundTimes(Integer refundTimes) {
        this.refundTimes = refundTimes;
    }"
6795,getRefundTimes,"    public Integer getRefundTimes() {
        return refundTimes;
    }"
6796,setField5,"    public void setField5(String field5) {
        this.field5 = field5 == null ? null : field5.trim();
    }"
6797,getField5,"    public String getField5() {
        return field5;
    }"
6798,setField4,"    public void setField4(String field4) {
        this.field4 = field4 == null ? null : field4.trim();
    }"
6799,getField4,"    public String getField4() {
        return field4;
    }"
6800,setField3,"    public void setField3(String field3) {
        this.field3 = field3 == null ? null : field3.trim();
    }"
6801,getField3,"    public String getField3() {
        return field3;
    }"
6802,setField2,"    public void setField2(String field2) {
        this.field2 = field2 == null ? null : field2.trim();
    }"
6803,getField2,"    public String getField2() {
        return field2;
    }"
6804,setField1,"    public void setField1(String field1) {
        this.field1 = field1 == null ? null : field1.trim();
    }"
6805,getField1,"    public String getField1() {
        return field1;
    }"
6806,setRemark,"    public void setRemark(String remark) {
        this.remark = remark == null ? null : remark.trim();
    }"
6808,setFundIntoType,"    public void setFundIntoType(String fundIntoType) {
        this.fundIntoType = fundIntoType == null ? null : fundIntoType.trim();
    }"
6810,setPayTypeName,"    public void setPayTypeName(String payTypeName) {
        this.payTypeName = payTypeName == null ? null : payTypeName.trim();
    }"
6811,getPayTypeName,"    public String getPayTypeName() {
        return payTypeName;
    }"
6812,setPayTypeCode,"    public void setPayTypeCode(String payTypeCode) {
        this.payTypeCode = payTypeCode == null ? null : payTypeCode.trim();
    }"
6813,getPayTypeCode,"    public String getPayTypeCode() {
        return payTypeCode;
    }"
6814,setOrderFrom,"    public void setOrderFrom(String orderFrom) {
        this.orderFrom = orderFrom == null ? null : orderFrom.trim();
    }"
6815,getOrderFrom,"    public String getOrderFrom() {
        return orderFrom;
    }"
6816,setSuccessRefundAmount,"    public void setSuccessRefundAmount(BigDecimal successRefundAmount) {
        this.successRefundAmount = successRefundAmount;
    }"
6817,getSuccessRefundAmount,"    public BigDecimal getSuccessRefundAmount() {
        return successRefundAmount;
    }"
6818,setIsRefund,"    public void setIsRefund(String isRefund) {
        this.isRefund = isRefund == null ? null : isRefund.trim();
    }"
6819,getIsRefund,"    public String getIsRefund() {
        return isRefund;
    }"
6820,setCompleteTime,"    public void setCompleteTime(Date completeTime) {
        this.completeTime = completeTime;
    }"
6821,getCompleteTime,"    public Date getCompleteTime() {
        return completeTime;
    }"
6822,setPaySuccessTime,"    public void setPaySuccessTime(Date paySuccessTime) {
        this.paySuccessTime = paySuccessTime;
    }"
6823,getPaySuccessTime,"    public Date getPaySuccessTime() {
        return paySuccessTime;
    }"
6824,setPayWayName,"    public void setPayWayName(String payWayName) {
        this.payWayName = payWayName == null ? null : payWayName.trim();
    }"
6825,getPayWayName,"    public String getPayWayName() {
        return payWayName;
    }"
6826,setPayWayCode,"    public void setPayWayCode(String payWayCode) {
        this.payWayCode = payWayCode == null ? null : payWayCode.trim();
    }"
6828,setNotifyUrl,"    public void setNotifyUrl(String notifyUrl) {
        this.notifyUrl = notifyUrl == null ? null : notifyUrl.trim();
    }"
6830,setReturnUrl,"    public void setReturnUrl(String returnUrl) {
        this.returnUrl = returnUrl == null ? null : returnUrl.trim();
    }"
6832,setPlatProfit,"    public void setPlatProfit(BigDecimal platProfit) {
        this.platProfit = platProfit;
    }"
6833,getPlatProfit,"    public BigDecimal getPlatProfit() {
        return platProfit;
    }"
6834,setPlatCost,"    public void setPlatCost(BigDecimal platCost) {
        this.platCost = platCost;
    }"
6835,getPlatCost,"    public BigDecimal getPlatCost() {
        return platCost;
    }"
6836,setFeeRate,"    public void setFeeRate(BigDecimal feeRate) {
        this.feeRate = feeRate;
    }"
6837,getFeeRate,"    public BigDecimal getFeeRate() {
        return feeRate;
    }"
6838,setPlatIncome,"    public void setPlatIncome(BigDecimal platIncome) {
        this.platIncome = platIncome;
    }"
6839,getPlatIncome,"    public BigDecimal getPlatIncome() {
        return platIncome;
    }"
6842,setOrderRefererUrl,"    public void setOrderRefererUrl(String orderRefererUrl) {
        this.orderRefererUrl = orderRefererUrl == null ? null : orderRefererUrl.trim();
    }"
6843,getOrderRefererUrl,"    public String getOrderRefererUrl() {
        return orderRefererUrl;
    }"
6844,setOrderIp,"    public void setOrderIp(String orderIp) {
        this.orderIp = orderIp == null ? null : orderIp.trim();
    }"
6846,setReceiverAccountType,"    public void setReceiverAccountType(String receiverAccountType) {
        this.receiverAccountType = receiverAccountType == null ? null : receiverAccountType.trim();
    }"
6847,getReceiverAccountType,"    public String getReceiverAccountType() {
        return receiverAccountType;
    }"
6848,setReceiverFee,"    public void setReceiverFee(BigDecimal receiverFee) {
        this.receiverFee = receiverFee;
    }"
6849,getReceiverFee,"    public BigDecimal getReceiverFee() {
        return receiverFee;
    }"
6850,setReceiverPayAmount,"    public void setReceiverPayAmount(BigDecimal receiverPayAmount) {
        this.receiverPayAmount = receiverPayAmount;
    }"
6851,getReceiverPayAmount,"    public BigDecimal getReceiverPayAmount() {
        return receiverPayAmount;
    }"
6852,setReceiverName,"    public void setReceiverName(String receiverName) {
        this.receiverName = receiverName == null ? null : receiverName.trim();
    }"
6853,getReceiverName,"    public String getReceiverName() {
        return receiverName;
    }"
6854,setReceiverUserNo,"    public void setReceiverUserNo(String receiverUserNo) {
        this.receiverUserNo = receiverUserNo == null ? null : receiverUserNo.trim();
    }"
6855,getReceiverUserNo,"    public String getReceiverUserNo() {
        return receiverUserNo;
    }"
6856,setPayerAccountType,"    public void setPayerAccountType(String payerAccountType) {
        this.payerAccountType = payerAccountType == null ? null : payerAccountType.trim();
    }"
6857,getPayerAccountType,"    public String getPayerAccountType() {
        return payerAccountType;
    }"
6858,setPayerFee,"    public void setPayerFee(BigDecimal payerFee) {
        this.payerFee = payerFee;
    }"
6859,getPayerFee,"    public BigDecimal getPayerFee() {
        return payerFee;
    }"
6860,setPayerPayAmount,"    public void setPayerPayAmount(BigDecimal payerPayAmount) {
        this.payerPayAmount = payerPayAmount;
    }"
6861,getPayerPayAmount,"    public BigDecimal getPayerPayAmount() {
        return payerPayAmount;
    }"
6862,setPayerName,"    public void setPayerName(String payerName) {
        this.payerName = payerName == null ? null : payerName.trim();
    }"
6863,getPayerName,"    public String getPayerName() {
        return payerName;
    }"
6864,setPayerUserNo,"    public void setPayerUserNo(String payerUserNo) {
        this.payerUserNo = payerUserNo == null ? null : payerUserNo.trim();
    }"
6865,getPayerUserNo,"    public String getPayerUserNo() {
        return payerUserNo;
    }"
6866,setMerchantNo,"    public void setMerchantNo(String merchantNo) {
        this.merchantNo = merchantNo == null ? null : merchantNo.trim();
    }"
6868,setMerchantName,"    public void setMerchantName(String merchantName) {
        this.merchantName = merchantName == null ? null : merchantName.trim();
    }"
6869,getMerchantName,"    public String getMerchantName() {
        return merchantName;
    }"
6870,setBankTrxNo,"    public void setBankTrxNo(String bankTrxNo) {
        this.bankTrxNo = bankTrxNo == null ? null : bankTrxNo.trim();
    }"
6871,getBankTrxNo,"    public String getBankTrxNo() {
        return bankTrxNo;
    }"
6872,setBankOrderNo,"    public void setBankOrderNo(String bankOrderNo) {
        this.bankOrderNo = bankOrderNo == null ? null : bankOrderNo.trim();
    }"
6873,getBankOrderNo,"    public String getBankOrderNo() {
        return bankOrderNo;
    }"
6874,setTrxNo,"    public void setTrxNo(String trxNo) {
        this.trxNo = trxNo == null ? null : trxNo.trim();
    }"
6875,getTrxNo,"    public String getTrxNo() {
        return trxNo;
    }"
6876,setMerchantOrderNo,"    public void setMerchantOrderNo(String merchantOrderNo) {
        this.merchantOrderNo = merchantOrderNo == null ? null : merchantOrderNo.trim();
    }"
6877,getMerchantOrderNo,"    public String getMerchantOrderNo() {
        return merchantOrderNo;
    }"
6880,getPayWayReport,"	public List<Map<String, String>> getPayWayReport(String merchantNo){
		return rpTradePaymentRecordDao.getPayWayReport(merchantNo);
	}"
6881,getPaymentReport,"	public List<Map<String, String>> getPaymentReport(String merchantNo){
		return rpTradePaymentRecordDao.getPaymentReport(merchantNo);
	}"
6884,getRecordByTrxNo,"	public RpTradePaymentRecord getRecordByTrxNo(String trxNo){
		return rpTradePaymentRecordDao.getByTrxNo(trxNo);
	}"
6885,getRecordByBankOrderNo,"	public RpTradePaymentRecord getRecordByBankOrderNo(String bankOrderNo) {
		return rpTradePaymentRecordDao.getByBankOrderNo(bankOrderNo);
	}"
6888,listPaymentRecord,"	public List<RpTradePaymentRecord> listPaymentRecord(Map<String, Object> paramMap) {
		return rpTradePaymentRecordDao.listByColumn(paramMap);
	}"
6889,getPayWayReport,"	public List<Map<String, String>> getPayWayReport(String merchantNo);
"
6890,getPaymentReport,"	public List<Map<String, String>> getPaymentReport(String merchantNo);
	"
6891,listPaymentRecordPage,"	public PageBean<RpTradePaymentRecord> listPaymentRecordPage(PageParam pageParam, PaymentOrderQueryParam paymentOrderQueryParam);
	"
6892,listPaymentOrderPage,"	public PageBean<RpTradePaymentOrder> listPaymentOrderPage(PageParam pageParam, PaymentOrderQueryParam paymentOrderQueryParam);
"
6893,getRecordByTrxNo,"	public RpTradePaymentRecord getRecordByTrxNo(String trxNo);
"
6894,getRecordByBankOrderNo,"	public RpTradePaymentRecord getRecordByBankOrderNo(String bankOrderNo);
"
6895,getPayResult,"	public OrderPayResultVo getPayResult(String payKey, String orderNo);
"
6896,listPaymentRecord,"	public List<RpTradePaymentRecord> listPaymentRecord(Map<String, Object> paremMap);
"
6897,selectByMerchantNoAndMerchantOrderNo,"    public RpTradePaymentOrder selectByMerchantNoAndMerchantOrderNo(String merchantNo, String merchantOrderNo) {
        Map<String , Object> paramMap = new HashMap<String , Object>();
        paramMap.put(""merchantNo"",merchantNo);
        paramMap.put(""merchantOrderNo"",merchantOrderNo);
        return super.getBy(paramMap);
    }"
6898,selectByMerchantNoAndMerchantOrderNo,"    RpTradePaymentOrder selectByMerchantNoAndMerchantOrderNo(String merchantNo, String merchantOrderNo);
"
6910,setTrxNo,"    public void setTrxNo(String trxNo) {
        this.trxNo = trxNo;
    }"
6914,setRefundTimes,"    public void setRefundTimes(Short refundTimes) {
        this.refundTimes = refundTimes;
    }"
6915,getRefundTimes,"    public Short getRefundTimes() {
        return refundTimes;
    }"
6924,setTrxType,"    public void setTrxType(String trxType) {
        this.trxType = trxType == null ? null : trxType.trim();
    }"
6932,setExpireTime,"    public void setExpireTime(Date expireTime) {
        this.expireTime = expireTime;
    }"
6933,getExpireTime,"    public Date getExpireTime() {
        return expireTime;
    }"
6936,setCancelReason,"    public void setCancelReason(String cancelReason) {
        this.cancelReason = cancelReason == null ? null : cancelReason.trim();
    }"
6937,getCancelReason,"    public String getCancelReason() {
        return cancelReason;
    }"
6946,setOrderDate,"    public void setOrderDate(Date orderDate) {
        this.orderDate = orderDate;
    }"
6947,getOrderDate,"    public Date getOrderDate() {
        return orderDate;
    }"
6948,setOrderTime,"    public void setOrderTime(Date orderTime) {
        this.orderTime = orderTime;
    }"
6949,getOrderTime,"    public Date getOrderTime() {
        return orderTime;
    }"
6972,sealRpTradePaymentOrder,"    private RpTradePaymentOrder sealRpTradePaymentOrder(String merchantNo, String merchantName, String productName, String orderNo, Date orderDate, Date orderTime, BigDecimal orderPrice, String payWay, String payWayName, PayTypeEnum payType, String fundIntoType, String orderIp, Integer orderPeriod, String returnUrl, String notifyUrl, String remark, String field1, String field2, String field3, String field4, String field5) {

    return null;"
6985,userAuth,"    AuthResultVo userAuth(String merchantNo, String orderNo);
}"
6986,initProgramDirectAuth,"    AuthProgramInitResultVo initProgramDirectAuth(String productName, BigDecimal orderPrice, String orderIp, AuthProgramInitParamVo paramVo, RpUserPayConfig userPayConfig);
"
6987,initDirectAuth,"    AuthInitResultVo initDirectAuth(String productName, BigDecimal orderPrice, String orderIp, AuthParamVo paramVo, RpUserPayConfig userPayConfig);
"
6988,programPay,"    ProgramPayResultVo programPay(RpUserPayConfig rpUserPayConfig , ProgramPayRequestBo programPayRequestBo);
"
6989,processingTradeRecord,"    public boolean processingTradeRecord(String bankOrderNo);
"
6990,toNonDirectScanPay,"    public ScanPayResultVo toNonDirectScanPay(String payKey, String orderNo, String payType ,Integer numberOfStages);
"
6991,initNonDirectScanPay,"    public RpPayGateWayPageShowVo initNonDirectScanPay(RpUserPayConfig rpUserPayConfig , ScanPayRequestBo scanPayRequestBo);
"
6992,completeScanPayByResult,"    public OrderPayResultVo completeScanPayByResult(String payWayCode, Map<String, String> resultMap);
"
6993,completeScanPay,"    public String completeScanPay(String payWayCode, Map<String, String> notifyMap);
"
6994,f2fPay,"    public F2FPayResultVo f2fPay(RpUserPayConfig rpUserPayConfig , F2FPayRequestBo f2FPayRequestBo);
"
6995,initDirectScanPay,"    public ScanPayResultVo initDirectScanPay(RpUserPayConfig rpUserPayConfig , ScanPayRequestBo scanPayRequestBo);
"
6996,setSettlementId,"	public void setSettlementId(String settlementId) {
		this.settlementId = settlementId;
	}"
6997,getSettlementId,"	public String getSettlementId() {
		return settlementId;
	}"
6998,setAnnexAddress,"	public void setAnnexAddress(String annexAddress) {
		this.annexAddress = annexAddress == null ? null : annexAddress.trim();
	}"
6999,getAnnexAddress,"	public String getAnnexAddress() {
		return annexAddress;
	}"
7000,setAnnexName,"	public void setAnnexName(String annexName) {
		this.annexName = annexName == null ? null : annexName.trim();
	}"
7001,getAnnexName,"	public String getAnnexName() {
		return annexName;
	}"
7002,setIsDelete,"	public void setIsDelete(String isDelete) {
		this.isDelete = isDelete == null ? null : isDelete.trim();
	}"
7003,getIsDelete,"	public String getIsDelete() {
		return isDelete;
	}"
7004,getCreateTimeDesc,"    public String getCreateTimeDesc() {
    	return DateUtils.formatDate(this.getCreateTime(), ""yyyy-MM-dd HH:mm:ss"");
    }"
7005,getSettStatusDesc,"    public String getSettStatusDesc() {
    	return SettRecordStatusEnum.getEnum(this.getSettStatus()).getDesc();
    }"
7006,setOperatorRealname,"	public void setOperatorRealname(String operatorRealname) {
		this.operatorRealname = operatorRealname == null ? null : operatorRealname.trim();
	}"
7007,getOperatorRealname,"	public String getOperatorRealname() {
		return operatorRealname;
	}"
7008,setOperatorLoginname,"	public void setOperatorLoginname(String operatorLoginname) {
		this.operatorLoginname = operatorLoginname == null ? null : operatorLoginname.trim();
	}"
7009,getOperatorLoginname,"	public String getOperatorLoginname() {
		return operatorLoginname;
	}"
7010,setRemitRemark,"	public void setRemitRemark(String remitRemark) {
		this.remitRemark = remitRemark == null ? null : remitRemark.trim();
	}"
7011,getRemitRemark,"	public String getRemitRemark() {
		return remitRemark;
	}"
7012,setRemitConfirmTime,"	public void setRemitConfirmTime(Date remitConfirmTime) {
		this.remitConfirmTime = remitConfirmTime;
	}"
7013,getRemitConfirmTime,"	public Date getRemitConfirmTime() {
		return remitConfirmTime;
	}"
7014,setRemitRequestTime,"	public void setRemitRequestTime(Date remitRequestTime) {
		this.remitRequestTime = remitRequestTime;
	}"
7015,getRemitRequestTime,"	public Date getRemitRequestTime() {
		return remitRequestTime;
	}"
7016,setSettStatus,"	public void setSettStatus(String settStatus) {
		this.settStatus = settStatus;
	}"
7017,getSettStatus,"	public String getSettStatus() {
		return settStatus;
	}"
7018,setRemitAmount,"	public void setRemitAmount(BigDecimal remitAmount) {
		this.remitAmount = remitAmount;
	}"
7019,getRemitAmount,"	public BigDecimal getRemitAmount() {
		return remitAmount;
	}"
7020,setSettFee,"	public void setSettFee(BigDecimal settFee) {
		this.settFee = settFee;
	}"
7021,getSettFee,"	public BigDecimal getSettFee() {
		return settFee;
	}"
7022,setSettAmount,"	public void setSettAmount(BigDecimal settAmount) {
		this.settAmount = settAmount;
	}"
7023,getSettAmount,"	public BigDecimal getSettAmount() {
		return settAmount;
	}"
7024,setBankAccountAddress,"	public void setBankAccountAddress(String bankAccountAddress) {
		this.bankAccountAddress = bankAccountAddress == null ? null : bankAccountAddress.trim();
	}"
7025,getBankAccountAddress,"	public String getBankAccountAddress() {
		return bankAccountAddress;
	}"
7026,setAreas,"	public void setAreas(String areas) {
		this.areas = areas == null ? null : areas.trim();
	}"
7028,setCity,"	public void setCity(String city) {
		this.city = city == null ? null : city.trim();
	}"
7030,setProvince,"	public void setProvince(String province) {
		this.province = province == null ? null : province.trim();
	}"
7032,setCountry,"	public void setCountry(String country) {
		this.country = country == null ? null : country.trim();
	}"
7033,getCountry,"	public String getCountry() {
		return country;
	}"
7034,getBankAccountTypeDesc,"	public String getBankAccountTypeDesc(){
		return BankAccountTypeEnum.getEnum(this.getBankAccountType()).getDesc();
	}"
7037,setBankAccountNo,"	public void setBankAccountNo(String bankAccountNo) {
		this.bankAccountNo = bankAccountNo == null ? null : bankAccountNo.trim();
	}"
7039,setBankAccountName,"	public void setBankAccountName(String bankAccountName) {
		this.bankAccountName = bankAccountName == null ? null : bankAccountName.trim();
	}"
7043,setBankCode,"	public void setBankCode(String bankCode) {
		this.bankCode = bankCode == null ? null : bankCode.trim();
	}"
7045,setSettDate,"	public void setSettDate(Date settDate) {
		this.settDate = settDate;
	}"
7046,getSettDate,"	public Date getSettDate() {
		return settDate;
	}"
7047,setUserName,"	public void setUserName(String userName) {
		this.userName = userName == null ? null : userName.trim();
	}"
7048,getUserName,"	public String getUserName() {
		return userName;
	}"
7049,setUserNo,"	public void setUserNo(String userNo) {
		this.userNo = userNo == null ? null : userNo.trim();
	}"
7051,setUserType,"	public void setUserType(String userType) {
		this.userType = userType;
	}"
7052,getUserType,"	public String getUserType() {
		return userType;
	}"
7053,setAccountNo,"	public void setAccountNo(String accountNo) {
		this.accountNo = accountNo == null ? null : accountNo.trim();
	}"
7054,getAccountNo,"	public String getAccountNo() {
		return accountNo;
	}"
7057,getSettModeDesc,"	public String getSettModeDesc(){
		return SettModeTypeEnum.getEnum(this.getSettMode()).getDesc();
	}"
7058,setSettMode,"	public void setSettMode(String settMode) {
		this.settMode = settMode;
	}"
7059,getSettMode,"	public String getSettMode() {
		return settMode;
	}"
7060,getDataById,"	public RpSettRecord getDataById(String id){
		return rpSettRecordDao.getById(id);
	}"
7061,querySettDailyCollectListPage,"	public PageBean querySettDailyCollectListPage(PageParam pageParam, Map<String, Object> params) throws BizException {
		return settDailyCollectMapper.listPage(pageParam, params);
	}"
7062,querySettRecordListPage,"	public PageBean querySettRecordListPage(PageParam pageParam, Map<String, Object> params) throws BizException {
		return rpSettRecordDao.listPage(pageParam, params);
	}"
7063,getDataById,"	public RpSettRecord getDataById(String id);
}"
7064,querySettDailyCollectListPage,"	public PageBean querySettDailyCollectListPage(PageParam pageParam, Map<String, Object> params) throws BizException;
	"
7065,querySettRecordListPage,"	public PageBean querySettRecordListPage(PageParam pageParam, Map<String, Object> params) throws BizException;
"
7067,audit,"	public void audit(String settId, String settStatus, String remark){
		RpSettRecord settRecord = rpSettRecordDao.getById(settId);
		if(!settRecord.getSettStatus().equals(SettRecordStatusEnum.WAIT_CONFIRM.name())){
			throw SettBizException.SETT_STATUS_ERROR;
		}
		settRecord.setSettStatus(settStatus);
		settRecord.setEditTime(new Date());
		settRecord.setRemark(remark);
		rpSettRecordDao.update(settRecord);"
7072,remit,"	public void remit(String settId, String settStatus, String remark);
	"
7073,audit,"	public void audit(String settId, String settStatus, String remark);
	"
7075,launchSett,"	public void launchSett(String userNo, BigDecimal settAmount);
"
7076,dailySettlementCollect,"	public void dailySettlementCollect(String userNo, Date endDate, int riskDay, String userName);
"
7077,setRiskDay,"	public void setRiskDay(Integer riskDay) {
		this.riskDay = riskDay;
	}"
7078,getRiskDay,"	public Integer getRiskDay() {
		return riskDay;
	}"
7081,setTotalCount,"	public void setTotalCount(Integer totalCount) {
		this.totalCount = totalCount;
	}"
7082,getTotalCount,"	public Integer getTotalCount() {
		return totalCount;
	}"
7083,setTotalAmount,"	public void setTotalAmount(BigDecimal totalAmount) {
		this.totalAmount = totalAmount;
	}"
7084,getTotalAmount,"	public BigDecimal getTotalAmount() {
		return totalAmount;
	}"
7085,setBatchNo,"	public void setBatchNo(String batchNo) {
		this.batchNo = batchNo == null ? null : batchNo.trim();
	}"
7086,getBatchNo,"	public String getBatchNo() {
		return batchNo;
	}"
7087,setCollectType,"	public void setCollectType(String collectType) {
		this.collectType = collectType;
	}"
7088,getCollectType,"	public String getCollectType() {
		return collectType;
	}"
7089,setCollectDate,"	public void setCollectDate(Date collectDate) {
		this.collectDate = collectDate;
	}"
7090,getCollectDate,"	public Date getCollectDate() {
		return collectDate;
	}"
7091,setUserName,"	public void setUserName(String userName) {
		this.userName = userName;
	}"
7095,listAll,"	public List<RpPayWay> listAll(){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
		return rpPayWayDao.listBy(paramMap);
	}"
7096,listByProductCode,"	public List<RpPayWay> listByProductCode(String payProductCode){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""payProductCode"", payProductCode);
		paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
		return rpPayWayDao.listBy(paramMap);
	}"
7098,getByPayWayTypeCode,"	public RpPayWay getByPayWayTypeCode(String payProductCode, String payWayCode, String payTypeCode){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""payProductCode"", payProductCode);
		paramMap.put(""payTypeCode"", payTypeCode);
		paramMap.put(""payWayCode"", payWayCode);
		paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
		return rpPayWayDao.getBy(paramMap);
	}"
7099,listPage,"	public PageBean listPage(PageParam pageParam, RpPayWay rpPayWay) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
		paramMap.put(""payProductCode"", rpPayWay.getPayProductCode());
		paramMap.put(""payWayName"", rpPayWay.getPayWayName());
		paramMap.put(""payTypeName"", rpPayWay.getPayTypeName());
		return rpPayWayDao.listPage(pageParam, paramMap);
	}"
7100,getDataById,"	public RpPayWay getDataById(String id) {
		return rpPayWayDao.getById(id);
	}"
7101,updateData,"	public void updateData(RpPayWay rpPayWay) {
		rpPayWayDao.update(rpPayWay);
	}"
7102,saveData,"	public void saveData(RpPayWay rpPayWay) {
		rpPayWayDao.insert(rpPayWay);
	}"
7104,listByProductCode,"	List<RpPayWay> listByProductCode(String payProductCode);
	"
7105,createPayWay,"	void createPayWay(String payProductCode, String payWayCode, String payTypeCode, Double payRate)  throws PayBizException;
	"
7106,listPage,"	PageBean listPage(PageParam pageParam, RpPayWay rpPayWay);
	"
7107,getByPayWayTypeCode,"	RpPayWay getByPayWayTypeCode(String payProductCode, String payWayCode, String rpTypeCode);
	"
7111,setPayRate,"    public void setPayRate(Double payRate) {
        this.payRate = payRate;
    }"
7112,getPayRate,"    public Double getPayRate() {
        return payRate;
    }"
7113,setSorts,"    public void setSorts(Integer sorts) {
        this.sorts = sorts;
    }"
7114,getSorts,"    public Integer getSorts() {
        return sorts;
    }"
7115,setPayProductCode,"    public void setPayProductCode(String payProductCode) {
        this.payProductCode = payProductCode == null ? null : payProductCode.trim();
    }"
7116,getPayProductCode,"    public String getPayProductCode() {
        return payProductCode;
    }"
7126,listAll,"	public List<RpPayProduct> listAll(){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
		return rpPayProductDao.listBy(paramMap);
	}"
7129,getByProductCode,"	public RpPayProduct getByProductCode(String productCode, String auditStatus){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""productCode"", productCode);
		paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
		paramMap.put(""auditStatus"", auditStatus);
		return rpPayProductDao.getBy(paramMap);
	}"
7130,listPage,"	public PageBean listPage(PageParam pageParam, RpPayProduct rpPayProduct) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
		paramMap.put(""auditStatus"", rpPayProduct.getAuditStatus());
		paramMap.put(""productName"", rpPayProduct.getProductName());
		return rpPayProductDao.listPage(pageParam, paramMap);
	}"
7131,getDataById,"	public RpPayProduct getDataById(String id) {
		return rpPayProductDao.getById(id);
	}"
7132,updateData,"	public void updateData(RpPayProduct rpPayProduct) {
		rpPayProductDao.update(rpPayProduct);
	}"
7133,saveData,"	public void saveData(RpPayProduct rpPayProduct) {
		rpPayProductDao.insert(rpPayProduct);
	}"
7134,audit,"	void audit(String productCode, String auditStatus) throws PayBizException;
	"
7136,deletePayProduct,"	void deletePayProduct(String productCode) throws PayBizException;
	"
7137,createPayProduct,"	void createPayProduct(String productCode, String productName) throws PayBizException;
	"
7138,getByProductCode,"	RpPayProduct getByProductCode(String productCode, String auditStatus);
	"
7139,listPage,"	PageBean listPage(PageParam pageParam, RpPayProduct rpPayProduct);
	"
7150,setPayTypeEnumMap,"    public void setPayTypeEnumMap(Map<String, PayTypeEnum> payTypeEnumMap) {
        this.payTypeEnumMap = payTypeEnumMap;
    }"
7151,getPayTypeEnumMap,"    public Map<String, PayTypeEnum> getPayTypeEnumMap() {
        return payTypeEnumMap;
    }"
7154,setMerchantOrderNo,"    public void setMerchantOrderNo(String merchantOrderNo) {
        this.merchantOrderNo = merchantOrderNo;
    }"
7156,setMerchantName,"    public void setMerchantName(String merchantName) {
        this.merchantName = merchantName;
    }"
7162,setBankOrderNo,"    public void setBankOrderNo(String bankOrderNo) {
        this.bankOrderNo = bankOrderNo;
    }"
7164,setLimitNotifyTimes,"    public void setLimitNotifyTimes(Integer limitNotifyTimes) {
        this.limitNotifyTimes = limitNotifyTimes;
    }"
7165,getLimitNotifyTimes,"    public Integer getLimitNotifyTimes() {
        return limitNotifyTimes;
    }"
7168,setNotifyTimes,"    public void setNotifyTimes(Integer notifyTimes) {
        this.notifyTimes = notifyTimes;
    }"
7169,getNotifyTimes,"    public Integer getNotifyTimes() {
        return notifyTimes;
    }"
7170,setLastNotifyTime,"    public void setLastNotifyTime(Date lastNotifyTime) {
        this.lastNotifyTime = lastNotifyTime;
    }"
7171,getLastNotifyTime,"    public Date getLastNotifyTime() {
        return lastNotifyTime;
    }"
7172,getNotifyRuleMap,"    public Map<Integer, Integer> getNotifyRuleMap(){
        return (Map) JSONObject.parseObject(getNotifyRule());
    }"
7173,setNotifyRule,"    public void setNotifyRule(String notifyRule) {
        this.notifyRule = notifyRule;
    }"
7174,getNotifyRule,"    public String getNotifyRule() {
        return notifyRule;
    }"
7175,updateByPrimaryKey,"    public int updateByPrimaryKey(RpNotifyRecordLog record) {
        return 0;
    }"
7176,selectByPrimaryKey,"    public RpNotifyRecordLog selectByPrimaryKey(String id) {
        return null;
    }"
7177,insertSelective,"    public int insertSelective(RpNotifyRecordLog record) {
        return 0;
    }"
7178,deleteByPrimaryKey,"    public int deleteByPrimaryKey(String id) {
        return 0;
    }"
7179,updateByPrimaryKey,"    int updateByPrimaryKey(RpNotifyRecordLog record);
}"
7180,selectByPrimaryKey,"    RpNotifyRecordLog selectByPrimaryKey(String id);
"
7181,insertSelective,"    int insertSelective(RpNotifyRecordLog record);
"
7183,setHttpStatus,"    public void setHttpStatus(Integer httpStatus) {
        this.httpStatus = httpStatus;
    }"
7184,getHttpStatus,"    public Integer getHttpStatus() {
        return httpStatus;
    }"
7189,setResponse,"    public void setResponse(String response) {
        this.response = response == null ? null : response.trim();
    }"
7190,getResponse,"    public String getResponse() {
        return response;
    }"
7191,setRequest,"    public void setRequest(String request) {
        this.request = request == null ? null : request.trim();
    }"
7193,setNotifyId,"    public void setNotifyId(String notifyId) {
        this.notifyId = notifyId;
    }"
7194,getNotifyId,"    public String getNotifyId() {
        return notifyId;
    }"
7197,updateByPrimaryKey,"    public int updateByPrimaryKey(RpNotifyRecord record) {
        return 0;
    }"
7198,selectByPrimaryKey,"    public RpNotifyRecord selectByPrimaryKey(String id) {
        return null;
    }"
7199,insertSelective,"    public int insertSelective(RpNotifyRecord record) {
        return 0;
    }"
7201,getNotifyByMerchantNoAndMerchantOrderNoAndNotifyType,"    public RpNotifyRecord getNotifyByMerchantNoAndMerchantOrderNoAndNotifyType(String merchantNo, String merchantOrderNo, String notifyType) {
        Map<String , Object> paramMap = new HashMap<String , Object>();
        paramMap.put(""merchantNo"",merchantNo);
        paramMap.put(""merchantOrderNo"",merchantOrderNo);
        paramMap.put(""notifyType"",notifyType);

        return super.getBy(paramMap);"
7202,updateByPrimaryKey,"    int updateByPrimaryKey(RpNotifyRecord record);
}"
7203,selectByPrimaryKey,"    RpNotifyRecord selectByPrimaryKey(String id);
"
7204,insertSelective,"    int insertSelective(RpNotifyRecord record);
"
7206,getNotifyByMerchantNoAndMerchantOrderNoAndNotifyType,"    RpNotifyRecord getNotifyByMerchantNoAndMerchantOrderNoAndNotifyType(String merchantNo, String merchantOrderNo, String notifyType);
"
7207,setNotifyType,"    public void setNotifyType(String notifyType) {
        this.notifyType = notifyType;
    }"
7208,getNotifyType,"    public String getNotifyType() {
        return notifyType;
    }"
7213,setUrl,"    public void setUrl(String url) {
        this.url = url == null ? null : url.trim();
    }"
7225,saveData,"    public void saveData(RpMicroSubmitRecord rpMicroSubmitRecord) {
        rpMicroSubmitRecord.setEditTime(new Date());
        if (StringUtil.isEmpty(rpMicroSubmitRecord.getStatus())) {
            rpMicroSubmitRecord.setStatus(PublicEnum.YES.name());
        }"
7226,listPage,"    public PageBean listPage(PageParam pageParam, RpMicroSubmitRecord rpMicroSubmitRecord) {
        Map<String, Object> paramMap = new HashMap<>();
        paramMap.put(""storeName"", rpMicroSubmitRecord.getStoreName());
        paramMap.put(""businessCode"", rpMicroSubmitRecord.getBusinessCode());
        paramMap.put(""dCardName"", rpMicroSubmitRecord.getIdCardName());
        return rpMicroSubmitRecordDao.listPage(pageParam, paramMap);
    }"
7227,microQuery,"    Map<String, Object> microQuery(String businessCode);
"
7228,microSubmit,"    Map<String, Object> microSubmit(RpMicroSubmitRecord rpMicroSubmitRecord);
"
7229,saveData,"    void saveData(RpMicroSubmitRecord rpMicroSubmitRecord);
"
7230,listPage,"    PageBean listPage(PageParam pageParam, RpMicroSubmitRecord rpMicroSubmitRecord);
"
7231,toString,"    public String toString() {
        return ""RpMicroSubmitRecord{"" +
                ""businessCode='"" + businessCode + '\'' +"
7232,setContactPhone,"    public void setContactPhone(String contactPhone) {
        this.contactPhone = contactPhone;
    }"
7233,getContactPhone,"    public String getContactPhone() {
        return contactPhone;
    }"
7234,setRate,"    public void setRate(String rate) {
        this.rate = rate;
    }"
7235,getRate,"    public String getRate() {
        return rate;
    }"
7236,setProductDesc,"    public void setProductDesc(String productDesc) {
        this.productDesc = productDesc;
    }"
7237,getProductDesc,"    public String getProductDesc() {
        return productDesc;
    }"
7238,setServicePhone,"    public void setServicePhone(String servicePhone) {
        this.servicePhone = servicePhone;
    }"
7239,getServicePhone,"    public String getServicePhone() {
        return servicePhone;
    }"
7240,setMerchantShortname,"    public void setMerchantShortname(String merchantShortname) {
        this.merchantShortname = merchantShortname;
    }"
7241,getMerchantShortname,"    public String getMerchantShortname() {
        return merchantShortname;
    }"
7242,setIndoorPic,"    public void setIndoorPic(String indoorPic) {
        this.indoorPic = indoorPic;
    }"
7243,getIndoorPic,"    public String getIndoorPic() {
        return indoorPic;
    }"
7244,setStoreEntrancePic,"    public void setStoreEntrancePic(String storeEntrancePic) {
        this.storeEntrancePic = storeEntrancePic;
    }"
7245,getStoreEntrancePic,"    public String getStoreEntrancePic() {
        return storeEntrancePic;
    }"
7246,setStoreStreet,"    public void setStoreStreet(String storeStreet) {
        this.storeStreet = storeStreet;
    }"
7247,getStoreStreet,"    public String getStoreStreet() {
        return storeStreet;
    }"
7248,setStoreAddressCode,"    public void setStoreAddressCode(String storeAddressCode) {
        this.storeAddressCode = storeAddressCode;
    }"
7249,getStoreAddressCode,"    public String getStoreAddressCode() {
        return storeAddressCode;
    }"
7252,setAccountNumber,"    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }"
7253,getAccountNumber,"    public String getAccountNumber() {
        return accountNumber;
    }"
7254,setBankAddressCode,"    public void setBankAddressCode(String bankAddressCode) {
        this.bankAddressCode = bankAddressCode;
    }"
7255,getBankAddressCode,"    public String getBankAddressCode() {
        return bankAddressCode;
    }"
7256,setAccountBank,"    public void setAccountBank(String accountBank) {
        this.accountBank = accountBank;
    }"
7257,getAccountBank,"    public String getAccountBank() {
        return accountBank;
    }"
7258,setIdCardValidTime,"    public void setIdCardValidTime(String idCardValidTime) {
        this.idCardValidTime = idCardValidTime;
    }"
7259,getIdCardValidTime,"    public String getIdCardValidTime() {
        return idCardValidTime;
    }"
7260,setIdCardNumber,"    public void setIdCardNumber(String idCardNumber) {
        this.idCardNumber = idCardNumber;
    }"
7261,getIdCardNumber,"    public String getIdCardNumber() {
        return idCardNumber;
    }"
7262,setIdCardName,"    public void setIdCardName(String idCardName) {
        this.idCardName = idCardName;
    }"
7263,getIdCardName,"    public String getIdCardName() {
        return idCardName;
    }"
7264,setIdCardNational,"    public void setIdCardNational(String idCardNational) {
        this.idCardNational = idCardNational;
    }"
7265,getIdCardNational,"    public String getIdCardNational() {
        return idCardNational;
    }"
7266,setIdCardCopy,"    public void setIdCardCopy(String idCardCopy) {
        this.idCardCopy = idCardCopy;
    }"
7267,getIdCardCopy,"    public String getIdCardCopy() {
        return idCardCopy;
    }"
7268,setSubMchId,"    public void setSubMchId(String subMchId) {
        this.subMchId = subMchId;
    }"
7269,getSubMchId,"    public String getSubMchId() {
        return subMchId;
    }"
7270,setBusinessCode,"    public void setBusinessCode(String businessCode) {
        this.businessCode = businessCode;
    }"
7271,getBusinessCode,"    public String getBusinessCode() {
        return businessCode;
    }"
7272,setIdCardValidTimeEnd,"    public void setIdCardValidTimeEnd(String idCardValidTimeEnd) {
        this.idCardValidTimeEnd = idCardValidTimeEnd;
    }"
7273,getIdCardValidTimeEnd,"    public String getIdCardValidTimeEnd() {
        return idCardValidTimeEnd;
    }"
7274,setIdCardValidTimeBegin,"    public void setIdCardValidTimeBegin(String idCardValidTimeBegin) {
        this.idCardValidTimeBegin = idCardValidTimeBegin;
    }"
7275,getIdCardValidTimeBegin,"    public String getIdCardValidTimeBegin() {
        return idCardValidTimeBegin;
    }"
7281,debitToAccount,"	public RpAccount debitToAccount(String userNo, BigDecimal amount, String requestNo, String trxType, String remark){
		return this.debitToAccount(userNo, amount, requestNo, null, trxType, remark);
	}"
7283,creditToAccount,"	public RpAccount creditToAccount(String userNo, BigDecimal amount, String requestNo, String trxType, String remark){

		return this.creditToAccount(userNo, amount, requestNo, null, trxType, remark);"
7284,getByUserNo_IsPessimist,"	private RpAccount getByUserNo_IsPessimist(String userNo, boolean isPessimist) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(""userNo"", userNo);
		map.put(""isPessimist"", isPessimist);
		return rpAccountDao.getByUserNo(map);
	}"
7285,settCollectSuccess,"	void settCollectSuccess(String accountNo, String collectDate, int riskDay, BigDecimal totalAmount) throws BizException;
"
7286,unFreezeSettAmount,"	RpAccount unFreezeSettAmount(String userNo, BigDecimal amount) throws BizException;
"
7287,unFreezeAmount,"	RpAccount unFreezeAmount(String userNo, BigDecimal amount, String requestNo, String trxType, String remark) throws BizException;
	"
7288,freezeAmount,"	RpAccount freezeAmount(String userNo, BigDecimal freezeAmount) throws BizException;
"
7289,debitToAccount,"	RpAccount debitToAccount(String userNo, BigDecimal amount, String requestNo, String trxType, String remark) throws BizException;
"
7290,creditToAccount,"	RpAccount creditToAccount(String userNo, BigDecimal amount, String requestNo, String trxType, String remark) throws BizException;
"
7291,debitToAccount,"	RpAccount debitToAccount(String userNo, BigDecimal amount, String requestNo, String bankTrxNo, String trxType, String remark) throws BizException;
	"
7292,creditToAccount,"	RpAccount creditToAccount(String userNo, BigDecimal amount, String requestNo, String bankTrxNo, String trxType, String remark) throws BizException;
"
7293,getDataByUserNo,"	public RpAccount getDataByUserNo(String userNo){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""userNo"", userNo);
		return rpAccountDao.getBy(paramMap);
	}"
7294,listPage,"	public PageBean listPage(PageParam pageParam, RpAccount rpAccount) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""accountNo"", rpAccount.getAccountNo());
		return rpAccountDao.listPage(pageParam, paramMap);
	}"
7295,getDataById,"	public RpAccount getDataById(String id) {
		return rpAccountDao.getById(id);
	}"
7296,updateData,"	public void updateData(RpAccount rpAccount) {
		rpAccountDao.update(rpAccount);
	}"
7297,saveData,"	public void saveData(RpAccount rpAccount) {
		rpAccountDao.insert(rpAccount);
	}"
7299,listPage,"	PageBean listPage(PageParam pageParam, RpAccount rpAccount);
	"
7303,listAll,"    public List<RpAccount> listAll(){
    	Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
		return rpAccountDao.listBy(paramMap);
	}"
7304,queryAccountHistoryListPage,"	public PageBean queryAccountHistoryListPage(PageParam pageParam, Map<String, Object> params) {

		return rpAccountHistoryDao.listPage(pageParam, params);"
7305,queryAccountListPage,"	public PageBean queryAccountListPage(PageParam pageParam, Map<String, Object> params) {

		return rpAccountDao.listPage(pageParam, params);"
7306,listDailyCollectAccountHistoryVo,"	public List<DailyCollectAccountHistoryVo> listDailyCollectAccountHistoryVo(String accountNo, String statDate, Integer riskDay, Integer fundDirection) {

		Map<String, Object> params = new HashMap<String, Object>();
		params.put(""accountNo"", accountNo);
		params.put(""statDate"", statDate);
		params.put(""riskDay"", riskDay);
		params.put(""fundDirection"", fundDirection);
		return rpAccountHistoryDao.listDailyCollectAccountHistoryVo(params);"
7307,getAccountHistoryByAccountNo_requestNo_trxType,"	public RpAccountHistory getAccountHistoryByAccountNo_requestNo_trxType(String accountNo, String requestNo, Integer trxType) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put(""accountNo"", accountNo);
		map.put(""requestNo"", requestNo);
		map.put(""trxType"", trxType);
		return rpAccountHistoryDao.getBy(map);
	}"
7308,queryAccountHistoryListPageByRole,"	public PageBean queryAccountHistoryListPageByRole(PageParam pageParam, Map<String, Object> params){
		String accountType = (String) params.get(""accountType"");
		if (StringUtils.isBlank(accountType)) {
			throw AccountBizException.ACCOUNT_TYPE_IS_NULL;
		}"
7309,queryAccountHistoryListPage,"	public PageBean queryAccountHistoryListPage(PageParam pageParam, String accountNo){
		Map<String, Object> params = new HashMap<String, Object>();
		params.put(""accountNo"", accountNo);
		return rpAccountDao.listPage(pageParam, params);
	}"
7312,listAll,"	List<RpAccount> listAll() throws BizException;
}"
7313,queryAccountHistoryListPage,"	PageBean queryAccountHistoryListPage(PageParam pageParam, Map<String, Object> params) throws BizException;
	"
7314,queryAccountListPage,"	PageBean queryAccountListPage(PageParam pageParam, Map<String, Object> params) throws BizException;
	"
7315,listDailyCollectAccountHistoryVo,"	List<DailyCollectAccountHistoryVo> listDailyCollectAccountHistoryVo(String accountNo, String statDate, Integer riskDay, Integer fundDirection) throws BizException;
"
7316,getAccountHistoryByAccountNo_requestNo_trxType,"	RpAccountHistory getAccountHistoryByAccountNo_requestNo_trxType(String accountNo, String requestNo, Integer trxType) throws BizException;
"
7317,queryAccountHistoryListPageByRole,"	PageBean queryAccountHistoryListPageByRole(PageParam pageParam, Map<String, Object> params) throws BizException;
	"
7318,queryAccountHistoryListPage,"	PageBean queryAccountHistoryListPage(PageParam pageParam, String accountNo) throws BizException;
"
7319,getAccountByUserNo,"	RpAccount getAccountByUserNo(String userNo) throws BizException;
"
7320,getAccountByAccountNo,"	RpAccount getAccountByAccountNo(String accountNo) throws BizException;
"
7321,listPage,"	public PageBean listPage(PageParam pageParam, RpAccountHistory rpAccountHistory) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""accountNo"", rpAccountHistory.getAccountNo());
		paramMap.put(""userNo"", rpAccountHistory.getUserNo());
		return rpAccountHistoryDao.listPage(pageParam, paramMap);
	}"
7322,getDataById,"	public RpAccountHistory getDataById(String id) {
		return rpAccountHistoryDao.getById(id);
	}"
7323,updateData,"	public void updateData(RpAccountHistory rpAccountHistory) {
		rpAccountHistoryDao.update(rpAccountHistory);
	}"
7324,saveData,"	public void saveData(RpAccountHistory rpAccountHistory) {
		rpAccountHistoryDao.insert(rpAccountHistory);
	}"
7325,listPage,"	PageBean listPage(PageParam pageParam, RpAccountHistory rpAccountHistory);
	"
7327,updateData,"	void updateData(RpAccountHistory rpAccountHistory);
"
7328,saveData,"	void saveData(RpAccountHistory rpAccountHistory);
"
7329,updateCompleteSettTo100,"	public void updateCompleteSettTo100(Map<String, Object> params){
		this.getSessionTemplate().update(getStatement(""updateCompleteSettTo100""), params);
	}"
7330,listDailyCollectAccountHistoryVo,"	public List<DailyCollectAccountHistoryVo> listDailyCollectAccountHistoryVo(Map<String, Object> params){
		return this.getSessionTemplate().selectList(getStatement(""listDailyCollectAccountHistoryVo""), params);
	}"
7331,listPageByParams,"	public List<RpAccountHistory> listPageByParams(Map<String, Object> params){
		return this.listBy(params);
	}"
7332,updateCompleteSettTo100,"	void updateCompleteSettTo100(Map<String, Object> params);
}"
7333,listDailyCollectAccountHistoryVo,"	List<DailyCollectAccountHistoryVo> listDailyCollectAccountHistoryVo(Map<String, Object> params);
"
7334,listPageByParams,"	List<RpAccountHistory> listPageByParams(Map<String, Object> params);
	"
7336,getAmountDesc,"    public String getAmountDesc() {
    	if(this.getFundDirection().equals(AccountFundDirectionEnum.ADD.name())){
    		return ""<span style=\""color: blue;\"">+""+this.amount.doubleValue()+""</span>"";"
7346,setRequestNo,"    public void setRequestNo(String requestNo) {
        this.requestNo = requestNo == null ? null : requestNo.trim();
    }"
7347,getRequestNo,"    public String getRequestNo() {
        return requestNo;
    }"
7348,setIsCompleteSett,"    public void setIsCompleteSett(String isCompleteSett) {
        this.isCompleteSett = isCompleteSett == null ? null : isCompleteSett.trim();
    }"
7349,getIsCompleteSett,"    public String getIsCompleteSett() {
        return isCompleteSett;
    }"
7350,setIsAllowSett,"    public void setIsAllowSett(String isAllowSett) {
        this.isAllowSett = isAllowSett == null ? null : isAllowSett.trim();
    }"
7351,getIsAllowSett,"    public String getIsAllowSett() {
        return isAllowSett;
    }"
7352,getFundDirectionDesc,"    public String getFundDirectionDesc() {
    	return AccountFundDirectionEnum.getEnum(this.getFundDirection()).getLabel();
    }"
7353,setFundDirection,"    public void setFundDirection(String fundDirection) {
        this.fundDirection = fundDirection;
    }"
7354,getFundDirection,"    public String getFundDirection() {
        return fundDirection;
    }"
7355,setBalance,"    public void setBalance(BigDecimal balance) {
        this.balance = balance;
    }"
7356,getBalance,"    public BigDecimal getBalance() {
        return balance;
    }"
7357,setAmount,"    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }"
7358,getAmount,"    public BigDecimal getAmount() {
        return amount;
    }"
7360,getAccountNo,"	public String getAccountNo() {
        return accountNo;
    }"
7362,getUserName,"    public String getUserName() {
		return userName;
	}"
7363,getByUserNo,"	public RpAccount getByUserNo(Map<String, Object> map){
		return this.getSessionTemplate().selectOne(getStatement(""getByUserNo""), map);
	}"
7364,getByAccountNo,"	public RpAccount getByAccountNo(String accountNo){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""accountNo"", accountNo);
		paramMap.put(""status"", PublicStatusEnum.ACTIVE.name());
		return this.getBy(paramMap);
	}"
7365,getByUserNo,"	RpAccount getByUserNo(Map<String, Object> map);
}"
7370,handle,"	void handle(String id, String handleType, String handleRemark);
"
7371,removeDateFromPool,"	void removeDateFromPool(List<RpAccountCheckMistakeScratchPool> list, List<RpAccountCheckMistake> mistakeList);
"
7372,saveDatasaveDate,"	void saveDatasaveDate(RpAccountCheckBatch batch, List<RpAccountCheckMistake> mistakeList, List<RpAccountCheckMistakeScratchPool> insertScreatchRecordList, List<RpAccountCheckMistakeScratchPool> removeScreatchRecordList);
"
7373,saveListDate,"	public void saveListDate(List<RpAccountCheckMistake> mistakeList) {
		for (RpAccountCheckMistake mistake : mistakeList) {
			rpAccountCheckMistakeDao.insert(mistake);"
7374,listPage,"	public PageBean listPage(PageParam pageParam, Map<String, Object> paramMap) {
		return rpAccountCheckMistakeDao.listPage(pageParam, paramMap);
	}"
7375,getDataById,"	public RpAccountCheckMistake getDataById(String id) {
		return rpAccountCheckMistakeDao.getById(id);
	}"
7376,updateData,"	public void updateData(RpAccountCheckMistake rpAccountCheckMistake) {
		rpAccountCheckMistakeDao.update(rpAccountCheckMistake);
	}"
7377,saveData,"	public void saveData(RpAccountCheckMistake rpAccountCheckMistake) {
		rpAccountCheckMistakeDao.insert(rpAccountCheckMistake);
	}"
7378,saveListDate,"	void saveListDate(List<RpAccountCheckMistake> mistakeList);
"
7379,listPage,"	PageBean listPage(PageParam pageParam, Map<String, Object> paramMap);
"
7380,getDataById,"	RpAccountCheckMistake getDataById(String id);
"
7381,updateData,"	void updateData(RpAccountCheckMistake rpAccountCheckMistake);
"
7382,saveData,"	void saveData(RpAccountCheckMistake rpAccountCheckMistake);
"
7383,listScratchPoolRecord,"	public List<RpAccountCheckMistakeScratchPool> listScratchPoolRecord(Map<String, Object> paramMap) {
		if (paramMap == null) {
			paramMap = new HashMap<String, Object>();
		}"
7384,deleteFromPool,"	public void deleteFromPool(List<RpAccountCheckMistakeScratchPool> scratchPoolList) {
		for (RpAccountCheckMistakeScratchPool record : scratchPoolList) {
			rpAccountCheckMistakeScratchPoolDao.delete(record.getId());"
7385,listPage,"	public PageBean listPage(PageParam pageParam, RpAccountCheckMistakeScratchPool rpAccountCheckMistakeScratchPool) {

		Map<String, Object> paramMap = new HashMap<String, Object>();
"
7386,getDataById,"	public RpAccountCheckMistakeScratchPool getDataById(String id) {
		return rpAccountCheckMistakeScratchPoolDao.getById(id);
	}"
7387,updateData,"	public void updateData(RpAccountCheckMistakeScratchPool RpAccountCheckMistakeScratchPool) {
		rpAccountCheckMistakeScratchPoolDao.update(RpAccountCheckMistakeScratchPool);
	}"
7388,savaListDate,"	public void savaListDate(List<RpAccountCheckMistakeScratchPool> scratchPoolList) {
		for (RpAccountCheckMistakeScratchPool record : scratchPoolList) {
			rpAccountCheckMistakeScratchPoolDao.insert(record);"
7389,saveData,"	public void saveData(RpAccountCheckMistakeScratchPool RpAccountCheckMistakeScratchPool) {
		rpAccountCheckMistakeScratchPoolDao.insert(RpAccountCheckMistakeScratchPool);
	}"
7390,listScratchPoolRecord,"	List<RpAccountCheckMistakeScratchPool> listScratchPoolRecord(Map<String, Object> paramMap);
"
7391,deleteFromPool,"	void deleteFromPool(List<RpAccountCheckMistakeScratchPool> scratchPoolList);
"
7392,listPage,"	PageBean listPage(PageParam pageParam, RpAccountCheckMistakeScratchPool rpAccountCheckMistakeScratchPool);
"
7393,getDataById,"	RpAccountCheckMistakeScratchPool getDataById(String id);
"
7394,updateData,"	void updateData(RpAccountCheckMistakeScratchPool rpAccountCheckMistakeScratchPool);
"
7395,savaListDate,"	public void savaListDate(List<RpAccountCheckMistakeScratchPool> scratchPoolList);
"
7396,saveData,"	void saveData(RpAccountCheckMistakeScratchPool rpAccountCheckMistakeScratchPool);
"
7397,setSuccessRefundAmount,"	public void setSuccessRefundAmount(BigDecimal successRefundAmount) {
		this.successRefundAmount = successRefundAmount;
	}"
7398,getSuccessRefundAmount,"	public BigDecimal getSuccessRefundAmount() {
		return successRefundAmount;
	}"
7399,setRefundTimes,"	public void setRefundTimes(Short refundTimes) {
		this.refundTimes = refundTimes;
	}"
7400,getRefundTimes,"	public Short getRefundTimes() {
		return refundTimes;
	}"
7401,setIsRefund,"	public void setIsRefund(String isRefund) {
		this.isRefund = isRefund == null ? null : isRefund.trim();
	}"
7402,getIsRefund,"	public String getIsRefund() {
		return isRefund;
	}"
7403,setCompleteTime,"	public void setCompleteTime(Date completeTime) {
		this.completeTime = completeTime;
	}"
7404,getCompleteTime,"	public Date getCompleteTime() {
		return completeTime;
	}"
7405,setPaySuccessTime,"	public void setPaySuccessTime(Date paySuccessTime) {
		this.paySuccessTime = paySuccessTime;
	}"
7406,getPaySuccessTime,"	public Date getPaySuccessTime() {
		return paySuccessTime;
	}"
7407,setPayWayName,"	public void setPayWayName(String payWayName) {
		this.payWayName = payWayName == null ? null : payWayName.trim();
	}"
7409,setPayWayCode,"	public void setPayWayCode(String payWayCode) {
		this.payWayCode = payWayCode == null ? null : payWayCode.trim();
	}"
7411,setPlatProfit,"	public void setPlatProfit(BigDecimal platProfit) {
		this.platProfit = platProfit;
	}"
7412,getPlatProfit,"	public BigDecimal getPlatProfit() {
		return platProfit;
	}"
7413,setPlatCost,"	public void setPlatCost(BigDecimal platCost) {
		this.platCost = platCost;
	}"
7414,getPlatCost,"	public BigDecimal getPlatCost() {
		return platCost;
	}"
7415,setFeeRate,"	public void setFeeRate(BigDecimal feeRate) {
		this.feeRate = feeRate;
	}"
7416,getFeeRate,"	public BigDecimal getFeeRate() {
		return feeRate;
	}"
7417,setPlatIncome,"	public void setPlatIncome(BigDecimal platIncome) {
		this.platIncome = platIncome;
	}"
7418,getPlatIncome,"	public BigDecimal getPlatIncome() {
		return platIncome;
	}"
7419,setOrderAmount,"	public void setOrderAmount(BigDecimal orderAmount) {
		this.orderAmount = orderAmount;
	}"
7420,getOrderAmount,"	public BigDecimal getOrderAmount() {
		return orderAmount;
	}"
7421,setBankTrxNo,"	public void setBankTrxNo(String bankTrxNo) {
		this.bankTrxNo = bankTrxNo == null ? null : bankTrxNo.trim();
	}"
7422,getBankTrxNo,"	public String getBankTrxNo() {
		return bankTrxNo;
	}"
7423,setBankOrderNo,"	public void setBankOrderNo(String bankOrderNo) {
		this.bankOrderNo = bankOrderNo == null ? null : bankOrderNo.trim();
	}"
7424,getBankOrderNo,"	public String getBankOrderNo() {
		return bankOrderNo;
	}"
7425,setTrxNo,"	public void setTrxNo(String trxNo) {
		this.trxNo = trxNo == null ? null : trxNo.trim();
	}"
7426,getTrxNo,"	public String getTrxNo() {
		return trxNo;
	}"
7427,setMerchantOrderNo,"	public void setMerchantOrderNo(String merchantOrderNo) {
		this.merchantOrderNo = merchantOrderNo == null ? null : merchantOrderNo.trim();
	}"
7428,getMerchantOrderNo,"	public String getMerchantOrderNo() {
		return merchantOrderNo;
	}"
7429,setProductName,"	public void setProductName(String productName) {
		this.productName = productName == null ? null : productName.trim();
	}"
7430,getProductName,"	public String getProductName() {
		return productName;
	}"
7431,setBillDate,"	public void setBillDate(Date billDate) {
		this.billDate = billDate;
	}"
7432,getBillDate,"	public Date getBillDate() {
		return billDate;
	}"
7433,setBatchNo,"	public void setBatchNo(String batchNo) {
		this.batchNo = batchNo;
	}"
7435,setOperatorAccountNo,"	public void setOperatorAccountNo(String operatorAccountNo) {
		this.operatorAccountNo = operatorAccountNo == null ? null : operatorAccountNo.trim();
	}"
7436,getOperatorAccountNo,"	public String getOperatorAccountNo() {
		return operatorAccountNo;
	}"
7437,setOperatorName,"	public void setOperatorName(String operatorName) {
		this.operatorName = operatorName == null ? null : operatorName.trim();
	}"
7438,getOperatorName,"	public String getOperatorName() {
		return operatorName;
	}"
7439,setHandleRemark,"	public void setHandleRemark(String handleRemark) {
		this.handleRemark = handleRemark == null ? null : handleRemark.trim();
	}"
7440,getHandleRemark,"	public String getHandleRemark() {
		return handleRemark;
	}"
7441,setHandleValue,"	public void setHandleValue(String handleValue) {
		this.handleValue = handleValue == null ? null : handleValue.trim();
	}"
7442,getHandleValue,"	public String getHandleValue() {
		return handleValue;
	}"
7443,setHandleStatus,"	public void setHandleStatus(String handleStatus) {
		this.handleStatus = handleStatus == null ? null : handleStatus.trim();
	}"
7444,getHandleStatus,"	public String getHandleStatus() {
		return handleStatus;
	}"
7445,setErrType,"	public void setErrType(String errType) {
		this.errType = errType == null ? null : errType.trim();
	}"
7446,getErrType,"	public String getErrType() {
		return errType;
	}"
7447,setBankFee,"	public void setBankFee(BigDecimal bankFee) {
		this.bankFee = bankFee;
	}"
7448,getBankFee,"	public BigDecimal getBankFee() {
		return bankFee;
	}"
7449,setBankRefundAmount,"	public void setBankRefundAmount(BigDecimal bankRefundAmount) {
		this.bankRefundAmount = bankRefundAmount;
	}"
7450,getBankRefundAmount,"	public BigDecimal getBankRefundAmount() {
		return bankRefundAmount;
	}"
7451,setBankAmount,"	public void setBankAmount(BigDecimal bankAmount) {
		this.bankAmount = bankAmount;
	}"
7452,getBankAmount,"	public BigDecimal getBankAmount() {
		return bankAmount;
	}"
7453,setBankTradeStatus,"	public void setBankTradeStatus(String bankTradeStatus) {
		this.bankTradeStatus = bankTradeStatus == null ? null : bankTradeStatus.trim();
	}"
7454,getBankTradeStatus,"	public String getBankTradeStatus() {
		return bankTradeStatus;
	}"
7459,setBankTradeTime,"	public void setBankTradeTime(Date bankTradeTime) {
		this.bankTradeTime = bankTradeTime;
	}"
7460,getBankTradeTime,"	public Date getBankTradeTime() {
		return bankTradeTime;
	}"
7461,setFee,"	public void setFee(BigDecimal fee) {
		this.fee = fee;
	}"
7462,getFee,"	public BigDecimal getFee() {
		return fee;
	}"
7463,setTradeStatus,"	public void setTradeStatus(String tradeStatus) {
		this.tradeStatus = tradeStatus == null ? null : tradeStatus.trim();
	}"
7464,getTradeStatus,"	public String getTradeStatus() {
		return tradeStatus;
	}"
7465,setRefundAmount,"	public void setRefundAmount(BigDecimal refundAmount) {
		this.refundAmount = refundAmount;
	}"
7466,getRefundAmount,"	public BigDecimal getRefundAmount() {
		return refundAmount;
	}"
7471,setTradeTime,"	public void setTradeTime(Date tradeTime) {
		this.tradeTime = tradeTime;
	}"
7472,getTradeTime,"	public Date getTradeTime() {
		return tradeTime;
	}"
7473,setOrderNo,"	public void setOrderNo(String orderNo) {
		this.orderNo = orderNo == null ? null : orderNo.trim();
	}"
7474,getOrderNo,"	public String getOrderNo() {
		return orderNo;
	}"
7475,setMerchantNo,"	public void setMerchantNo(String merchantNo) {
		this.merchantNo = merchantNo == null ? null : merchantNo.trim();
	}"
7476,getMerchantNo,"	public String getMerchantNo() {
		return merchantNo;
	}"
7477,setMerchantName,"	public void setMerchantName(String merchantName) {
		this.merchantName = merchantName == null ? null : merchantName.trim();
	}"
7478,getMerchantName,"	public String getMerchantName() {
		return merchantName;
	}"
7479,setOrderTime,"	public void setOrderTime(Date orderTime) {
		this.orderTime = orderTime;
	}"
7480,getOrderTime,"	public Date getOrderTime() {
		return orderTime;
	}"
7481,setBankType,"	public void setBankType(String bankType) {
		this.bankType = bankType == null ? null : bankType.trim();
	}"
7482,getBankType,"	public String getBankType() {
		return bankType;
	}"
7485,setAccountCheckBatchNo,"	public void setAccountCheckBatchNo(String accountCheckBatchNo) {
		this.accountCheckBatchNo = accountCheckBatchNo == null ? null : accountCheckBatchNo.trim();
	}"
7486,getAccountCheckBatchNo,"	public String getAccountCheckBatchNo() {
		return accountCheckBatchNo;
	}"
7487,listBy,"	public List<RpAccountCheckBatch> listBy(Map<String, Object> paramMap) {
		return rpAccountCheckBatchDao.listBy(paramMap);
	}"
7488,listPage,"	public PageBean listPage(PageParam pageParam, Map<String, Object> paramMap) {

		return rpAccountCheckBatchDao.listPage(pageParam, paramMap);"
7489,getDataById,"	public RpAccountCheckBatch getDataById(String id) {
		return rpAccountCheckBatchDao.getById(id);
	}"
7490,updateData,"	public void updateData(RpAccountCheckBatch rpAccountCheckBatch) {
		rpAccountCheckBatchDao.update(rpAccountCheckBatch);
	}"
7491,saveData,"	public void saveData(RpAccountCheckBatch rpAccountCheckBatch) {
		rpAccountCheckBatchDao.insert(rpAccountCheckBatch);
	}"
7492,listBy,"	public List<RpAccountCheckBatch> listBy(Map<String, Object> paramMap);
"
7495,updateData,"	void updateData(RpAccountCheckBatch rpAccountCheckBatch);
"
7496,saveData,"	void saveData(RpAccountCheckBatch rpAccountCheckBatch);
"
7497,setBankErrMsg,"	public void setBankErrMsg(String bankErrMsg) {
		this.bankErrMsg = bankErrMsg;
	}"
7498,getBankErrMsg,"	public String getBankErrMsg() {
		return bankErrMsg;
	}"
7499,setCheckFailMsg,"	public void setCheckFailMsg(String checkFailMsg) {
		this.checkFailMsg = checkFailMsg;
	}"
7500,getCheckFailMsg,"	public String getCheckFailMsg() {
		return checkFailMsg;
	}"
7503,setReleaseStatus,"	public void setReleaseStatus(String releaseStatus) {
		this.releaseStatus = releaseStatus == null ? null : releaseStatus.trim();
	}"
7504,getReleaseStatus,"	public String getReleaseStatus() {
		return releaseStatus;
	}"
7505,setReleaseCheckFilePath,"	public void setReleaseCheckFilePath(String releaseCheckFilePath) {
		this.releaseCheckFilePath = releaseCheckFilePath == null ? null : releaseCheckFilePath.trim();
	}"
7506,getReleaseCheckFilePath,"	public String getReleaseCheckFilePath() {
		return releaseCheckFilePath;
	}"
7507,setOrgCheckFilePath,"	public void setOrgCheckFilePath(String orgCheckFilePath) {
		this.orgCheckFilePath = orgCheckFilePath == null ? null : orgCheckFilePath.trim();
	}"
7508,getOrgCheckFilePath,"	public String getOrgCheckFilePath() {
		return orgCheckFilePath;
	}"
7515,setBankTradeAmount,"	public void setBankTradeAmount(BigDecimal bankTradeAmount) {
		this.bankTradeAmount = bankTradeAmount;
	}"
7516,getBankTradeAmount,"	public BigDecimal getBankTradeAmount() {
		return bankTradeAmount;
	}"
7517,setTradeAmount,"	public void setTradeAmount(BigDecimal tradeAmount) {
		this.tradeAmount = tradeAmount;
	}"
7518,getTradeAmount,"	public BigDecimal getTradeAmount() {
		return tradeAmount;
	}"
7519,setBankTradeCount,"	public void setBankTradeCount(Integer bankTradeCount) {
		this.bankTradeCount = bankTradeCount;
	}"
7520,getBankTradeCount,"	public Integer getBankTradeCount() {
		return bankTradeCount;
	}"
7521,setTradeCount,"	public void setTradeCount(Integer tradeCount) {
		this.tradeCount = tradeCount;
	}"
7522,getTradeCount,"	public Integer getTradeCount() {
		return tradeCount;
	}"
7523,setUnhandleMistakeCount,"	public void setUnhandleMistakeCount(Integer unhandleMistakeCount) {
		this.unhandleMistakeCount = unhandleMistakeCount;
	}"
7524,getUnhandleMistakeCount,"	public Integer getUnhandleMistakeCount() {
		return unhandleMistakeCount;
	}"
7525,setMistakeCount,"	public void setMistakeCount(Integer mistakeCount) {
		this.mistakeCount = mistakeCount;
	}"
7526,getMistakeCount,"	public Integer getMistakeCount() {
		return mistakeCount;
	}"
7531,setBillType,"	public void setBillType(String billType) {
		this.billType = billType == null ? null : billType.trim();
	}"
7532,getBillType,"	public String getBillType() {
		return billType;
	}"
7539,setSettAmount,"    public void setSettAmount(BigDecimal settAmount) {
        this.settAmount = settAmount;
    }"
7540,getSettAmount,"    public BigDecimal getSettAmount() {
        return settAmount;
    }"
7541,setAccountType,"    public void setAccountType(String accountType) {
        this.accountType = accountType == null ? null : accountType.trim();
    }"
7542,getAccountType,"    public String getAccountType() {
        return accountType;
    }"
7543,setTodayExpend,"    public void setTodayExpend(BigDecimal todayExpend) {
        this.todayExpend = todayExpend;
    }"
7544,getTodayExpend,"    public BigDecimal getTodayExpend() {
        return todayExpend;
    }"
7545,setTodayIncome,"    public void setTodayIncome(BigDecimal todayIncome) {
        this.todayIncome = todayIncome;
    }"
7546,getTodayIncome,"    public BigDecimal getTodayIncome() {
        return todayIncome;
    }"
7547,setTotalExpend,"    public void setTotalExpend(BigDecimal totalExpend) {
        this.totalExpend = totalExpend;
    }"
7548,getTotalExpend,"    public BigDecimal getTotalExpend() {
        return totalExpend;
    }"
7549,setTotalIncome,"    public void setTotalIncome(BigDecimal totalIncome) {
        this.totalIncome = totalIncome;
    }"
7550,getTotalIncome,"    public BigDecimal getTotalIncome() {
        return totalIncome;
    }"
7551,setSecurityMoney,"    public void setSecurityMoney(BigDecimal securityMoney) {
        this.securityMoney = securityMoney;
    }"
7552,getSecurityMoney,"    public BigDecimal getSecurityMoney() {
        return securityMoney;
    }"
7553,setUnbalance,"    public void setUnbalance(BigDecimal unbalance) {
        this.unbalance = unbalance;
    }"
7554,getUnbalance,"    public BigDecimal getUnbalance() {
        return unbalance;
    }"
7559,availableBalanceIsEnough,"	public boolean availableBalanceIsEnough(BigDecimal amount) {

		return this.getAvailableBalance().compareTo(amount) >= 0;"
7560,getAvailableSettAmount,"	public BigDecimal getAvailableSettAmount() {
		BigDecimal subSettAmount = this.settAmount.subtract(unbalance);
		if (getAvailableBalance().compareTo(subSettAmount) == -1) {
			return getAvailableBalance();
		}"
7561,getAvailableBalance,"	public BigDecimal getAvailableBalance() {
		return this.balance.subtract(unbalance);
	}"
7564,setNums,"    public void setNums(Integer nums) {
        this.nums = nums;
    }"
7565,getNums,"    public Integer getNums() {
        return nums;
    }"
7566,setSinglePrice,"    public void setSinglePrice(Long singlePrice) {
        this.singlePrice = singlePrice;
    }"
7567,getSinglePrice,"    public Long getSinglePrice() {
        return singlePrice;
    }"
7568,setGoodsName,"    public void setGoodsName(String goodsName) {
        this.goodsName = goodsName;
    }"
7569,getGoodsName,"    public String getGoodsName() {
        return goodsName;
    }"
7570,setGoodsId,"    public void setGoodsId(String goodsId) {
        this.goodsId = goodsId;
    }"
7571,getGoodsId,"    public String getGoodsId() {
        return goodsId;
    }"
7574,getJsonStr,"	public static String getJsonStr() {
		ReconciliationMistakeTypeEnum[] enums = ReconciliationMistakeTypeEnum.values();
		StringBuffer jsonStr = new StringBuffer(""["");
		for (ReconciliationMistakeTypeEnum senum : enums) {
			if (!""["".equals(jsonStr.toString())) {
				jsonStr.append("","");
			}"
7575,getEnum,"	public static ReconciliationMistakeTypeEnum getEnum(String name) {
		ReconciliationMistakeTypeEnum[] arry = ReconciliationMistakeTypeEnum.values();
		for (int i = 0; i < arry.length; i++) {
			if (arry[i].name().equalsIgnoreCase(name)) {
				return arry[i];"
7576,toList,"	public static List toList() {
		ReconciliationMistakeTypeEnum[] ary = ReconciliationMistakeTypeEnum.values();
		List list = new ArrayList();
		for (int i = 0; i < ary.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put(""desc"", ary[i].getDesc());"
7577,toMap,"	public static Map<String, Map<String, Object>> toMap() {
		ReconciliationMistakeTypeEnum[] ary = ReconciliationMistakeTypeEnum.values();
		Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
		for (int num = 0; num < ary.length; num++) {
			Map<String, Object> map = new HashMap<String, Object>();
			String key = ary[num].name();"
7581,setBillDay,"	public void setBillDay(int billDay) {
		this.billDay = billDay;
	}"
7582,getBillDay,"	public int getBillDay() {
		return billDay;
	}"
7583,setStatus,"	public void setStatus(String status) {
		this.status = status;
	}"
7584,getStatus,"	public String getStatus() {
		return status;
	}"
7585,setInterfaceDesc,"	public void setInterfaceDesc(String interfaceDesc) {
		this.interfaceDesc = interfaceDesc;
	}"
7586,getInterfaceDesc,"	public String getInterfaceDesc() {
		return interfaceDesc;
	}"
7587,setInterfaceCode,"	public void setInterfaceCode(String interfaceCode) {
		this.interfaceCode = interfaceCode;
	}"
7588,getInterfaceCode,"	public String getInterfaceCode() {
		return interfaceCode;
	}"
7589,setInterfaceName,"	public void setInterfaceName(String interfaceName) {
		this.interfaceName = interfaceName;
	}"
7590,getInterfaceName,"	public String getInterfaceName() {
		return interfaceName;
	}"
7592,setBeanFactory,"	public void setBeanFactory(BeanFactory beanFactory) {
		this.beanFactory = beanFactory;
	}"
7593,getService,"	public Object getService(String payInterface) {
		return beanFactory.getBean(payInterface);
	}"
7596,setApplicationContext,"	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		this.applicationContext = applicationContext;
	}"
7598,getService,"	public Object getService(String payInterface) {
		return applicationContext.getBean(payInterface);
	}"
7599,fileDown,"	File fileDown(String payInterface, Date billDate) throws Exception;
"
7602,readConfig,"	public static String readConfig(String key) {
		return (String) properties.get(key);
	}"
7608,getJsonStr,"	public static String getJsonStr() {
		PublicStatusEnum[] enums = PublicStatusEnum.values();
		StringBuffer jsonStr = new StringBuffer(""["");
		for (PublicStatusEnum senum : enums) {
			if (!""["".equals(jsonStr.toString())) {
				jsonStr.append("","");
			}"
7609,getEnum,"	public static PublicStatusEnum getEnum(String name) {
		PublicStatusEnum[] arry = PublicStatusEnum.values();
		for (int i = 0; i < arry.length; i++) {
			if (arry[i].name().equalsIgnoreCase(name)) {
				return arry[i];"
7610,toList,"	public static List toList() {
		PublicStatusEnum[] ary = PublicStatusEnum.values();
		List list = new ArrayList();
		for (int i = 0; i < ary.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put(""desc"", ary[i].getDesc());"
7611,toMap,"	public static Map<String, Map<String, Object>> toMap() {
		PublicStatusEnum[] ary = PublicStatusEnum.values();
		Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
		for (int num = 0; num < ary.length; num++) {
			Map<String, Object> map = new HashMap<String, Object>();
			String key = ary[num].name();"
7614,getJsonStr,"	public static String getJsonStr() {
		PublicEnum[] enums = PublicEnum.values();
		StringBuffer jsonStr = new StringBuffer(""["");
		for (PublicEnum senum : enums) {
			if (!""["".equals(jsonStr.toString())) {
				jsonStr.append("","");
			}"
7615,getEnum,"    public static PublicEnum getEnum(String name) {
        PublicEnum[] arry = PublicEnum.values();
        for (int i = 0; i < arry.length; i++) {
            if (arry[i].name().equalsIgnoreCase(name)) {
                return arry[i];"
7616,toList,"	public static List toList() {
		PublicEnum[] ary = PublicEnum.values();
		List list = new ArrayList();
		for (int i = 0; i < ary.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put(""desc"", ary[i].getDesc());"
7617,toMap,"	public static Map<String, Map<String, Object>> toMap() {
		PublicEnum[] ary = PublicEnum.values();
		Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
		for (int num = 0; num < ary.length; num++) {
			Map<String, Object> map = new HashMap<String, Object>();
			String key = ary[num].name();"
7624,setPayMessage,"    public void setPayMessage(String payMessage) {
        this.payMessage = payMessage;
    }"
7625,getPayMessage,"    public String getPayMessage() {
        return payMessage;
    }"
7628,toString,"    public String toString() {
        return ""ProgramPayRequestBo{"" +
                ""payKey='"" + payKey + '\'' +"
7631,setOpenId,"    public void setOpenId(String openId) {
        this.openId = openId;
    }"
7632,getOpenId,"    public String getOpenId() {
        return openId;
    }"
7653,run,"    public void run() {
        pollingPersist.getOrderResult(rpOrderResultQueryVo);
    }"
7654,getDelay,"    public long getDelay(TimeUnit unit) {
        return unit.convert(executeTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);
    }"
7655,compareTo,"    public int compareTo(Delayed o) {
        PollingTask task = (PollingTask) o;
        return executeTime > task.executeTime ? 1 : (executeTime < task.executeTime ? -1 : 0);
    }"
7660,threadPoolTaskExecutor,"    public ThreadPoolTaskExecutor threadPoolTaskExecutor() {
        ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();
        threadPoolTaskExecutor.setCorePoolSize(2);
        threadPoolTaskExecutor.setKeepAliveSeconds(10000);
        threadPoolTaskExecutor.setMaxPoolSize(5);
        threadPoolTaskExecutor.setQueueCapacity(50);
        return threadPoolTaskExecutor;
    }"
7661,delete,"	public void delete(Long roleId) {
		pmsRoleDao.delete(roleId);
	}"
7662,getByRoleNameOrRoleCode,"	public PmsRole getByRoleNameOrRoleCode(String roleName, String roleCode) {
		return pmsRoleDao.getByRoleNameOrRoleCode(roleName, roleCode);
	}"
7663,listByPermissionId,"	public List<PmsRole> listByPermissionId(Long permissionId) {
		return pmsRoleDao.listByPermissionId(permissionId);
	}"
7664,listAllRole,"	public List<PmsRole> listAllRole() {
		return pmsRoleDao.listAll();
	}"
7666,getDataById,"	public PmsRole getDataById(Long id) {
		return pmsRoleDao.getById(id);
"
7667,updateData,"	public void updateData(PmsRole pmsRole) {
		pmsRoleDao.update(pmsRole);
	}"
7668,saveData,"	public void saveData(PmsRole pmsRole) {
		pmsRoleDao.insert(pmsRole);
	}"
7670,getByRoleNameOrRoleCode,"	PmsRole getByRoleNameOrRoleCode(String roleName, String roleCode);
"
7671,listByPermissionId,"	List<PmsRole> listByPermissionId(Long permissionId);
"
7673,listPage,"	PageBean listPage(PageParam pageParam, PmsRole pmsRole);
"
7678,listPage,"	public PageBean listPage(PageParam pageParam, PmsRolePermission pmsRolePermission) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		return pmsRolePermissionDao.listPage(pageParam, paramMap);
	}"
7679,getDataById,"	public PmsRolePermission getDataById(Long id) {
		return pmsRolePermissionDao.getById(id);
"
7680,updateData,"	public void updateData(PmsRolePermission pmsRolePermission) {
		pmsRolePermissionDao.update(pmsRolePermission);
	}"
7681,saveData,"	public void saveData(PmsRolePermission pmsRolePermission) {
		pmsRolePermissionDao.insert(pmsRolePermission);
	}"
7684,saveRolePermission,"	void saveRolePermission(Long roleId, String rolePermissionStr);
"
7685,listPage,"	PageBean listPage(PageParam pageParam, PmsRolePermission pmsRolePermission);
	"
7687,updateData,"	void updateData(PmsRolePermission pmsRolePermission);
"
7688,saveData,"	void saveData(PmsRolePermission pmsRolePermission);
"
7689,getPermissionsByOperatorId,"	public Set<String> getPermissionsByOperatorId(Long operatorId);
"
7690,deleteByRoleId,"	public void deleteByRoleId(Long roleId){
		super.getSessionTemplate().delete(getStatement(""deleteByRoleId""), roleId);
	}"
7691,deleteByRoleIdAndPermissionId,"	public void deleteByRoleIdAndPermissionId(Long roleId, Long permissionId){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""roleId"", roleId);
		paramMap.put(""permissionId"", permissionId);
		super.getSessionTemplate().delete(getStatement(""deleteByRoleIdAndPermissionId""), paramMap);
	}"
7692,listByRoleIds,"	public List<PmsRolePermission> listByRoleIds(String roleIdsStr) {
		List<String> roldIds = Arrays.asList(roleIdsStr.split("",""));
		return super.getSessionTemplate().selectList(getStatement(""listByRoleIds""), roldIds);
	}"
7693,listByRoleId,"	public List<PmsRolePermission> listByRoleId(final long roleId) {
		return super.getSessionTemplate().selectList(getStatement(""listByRoleId""), roleId);
	}"
7695,deleteByRoleIdAndPermissionId,"	public void deleteByRoleIdAndPermissionId(Long roleId, Long permissionId);
	"
7696,listByRoleIds,"	public List<PmsRolePermission> listByRoleIds(String roleIdsStr);
"
7697,listByRoleId,"	public List<PmsRolePermission> listByRoleId(final long roleId);
"
7698,setPermissionId,"	public void setPermissionId(Long permissionId) {
		this.permissionId = permissionId;
	}"
7699,getPermissionId,"	public Long getPermissionId() {
		return permissionId;
	}"
7700,setRoleId,"	public void setRoleId(Long roleId) {
		this.roleId = roleId;
	}"
7701,getRoleId,"	public Long getRoleId() {
		return roleId;
	}"
7702,getByRoleNameOrRoleCode,"	public PmsRole getByRoleNameOrRoleCode(String roleName, String roleCode) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""roleName"", roleName);
		paramMap.put(""roleCode"", roleCode);
		return super.getSessionTemplate().selectOne(getStatement(""getByRoleNameOrRoleCode""), paramMap);
	}"
7703,listByPermissionId,"	public List<PmsRole> listByPermissionId(Long permissionId) {
		return super.getSessionTemplate().selectList(getStatement(""listByPermissionId""), permissionId);
	}"
7704,listAll,"	public List<PmsRole> listAll() {
		return super.getSessionTemplate().selectList(getStatement(""listAll""));
	}"
7705,getByRoleNameOrRoleCode,"	public PmsRole getByRoleNameOrRoleCode(String roleName, String roleCode);
"
7706,listByPermissionId,"	public List<PmsRole> listByPermissionId(Long permissionId);
"
7708,setRoleName,"	public void setRoleName(String roleName) {
		this.roleName = roleName;
	}"
7709,getRoleName,"	public String getRoleName() {
		return roleName;
	}"
7710,setRoleCode,"	public void setRoleCode(String roleCode) {
		this.roleCode = roleCode;
	}"
7711,getRoleCode,"	public String getRoleCode() {
		return roleCode;
	}"
7712,listAll,"	public List<PmsPermission> listAll() {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		return pmsPermissionDao.listBy(paramMap);
	}"
7713,getPermissionIdsByRoleId,"	public String getPermissionIdsByRoleId(Long roleId) {
		List<PmsRolePermission> rmList = pmsRolePermissionDao.listByRoleId(roleId);
		StringBuffer actionIds = new StringBuffer();
		if (rmList != null && !rmList.isEmpty()) {
			for (PmsRolePermission rm : rmList) {
				actionIds.append(rm.getPermissionId()).append("","");"
7714,delete,"	public void delete(Long permissionId) {
		pmsPermissionDao.delete(permissionId);
	}"
7715,getByPermissionNameNotEqId,"	public PmsPermission getByPermissionNameNotEqId(String permissionName, Long id) {
		return pmsPermissionDao.getByPermissionNameNotEqId(permissionName, id);
	}"
7716,getByPermission,"	public PmsPermission getByPermission(String permission) {
		return pmsPermissionDao.getByPermission(permission);
	}"
7717,getByPermissionName,"	public PmsPermission getByPermissionName(String permissionName) {
		return pmsPermissionDao.getByPermissionName(permissionName);
	}"
7719,getDataById,"	public PmsPermission getDataById(Long id) {
		return pmsPermissionDao.getById(id);
"
7720,updateData,"	public void updateData(PmsPermission pmsPermission) {
		pmsPermissionDao.update(pmsPermission);
	}"
7721,saveData,"	public void saveData(PmsPermission pmsPermission) {
		pmsPermissionDao.insert(pmsPermission);
	}"
7723,getPermissionIdsByRoleId,"	String getPermissionIdsByRoleId(Long roleId);
	"
7725,getByPermissionNameNotEqId,"	PmsPermission getByPermissionNameNotEqId(String permissionName, Long id);
"
7726,getByPermission,"	PmsPermission getByPermission(String permission);
"
7727,getByPermissionName,"	PmsPermission getByPermissionName(String permissionName);
"
7728,listPage,"	PageBean listPage(PageParam pageParam, PmsPermission pmsPermission);
"
7730,updateData,"	void updateData(PmsPermission pmsPermission);
"
7732,listAllByMenuId,"	public List<PmsPermission> listAllByMenuId(Long menuId) {
		Map<String, Object> param = new HashMap<String, Object>();
		param.put(""menuId"", menuId);
		return this.getSessionTemplate().selectList(getStatement(""listAllByMenuId""), param);
	}"
7733,getByPermissionNameNotEqId,"	public PmsPermission getByPermissionNameNotEqId(String permissionName, Long id) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""permissionName"", permissionName);
		paramMap.put(""id"", id);
		return this.getSessionTemplate().selectOne(getStatement(""getByPermissionNameNotEqId""), paramMap);
	}"
7734,getByPermission,"	public PmsPermission getByPermission(String permission) {
		return this.getSessionTemplate().selectOne(getStatement(""getByPermission""), permission);
	}"
7735,getByPermissionName,"	public PmsPermission getByPermissionName(String permissionName) {
		return this.getSessionTemplate().selectOne(getStatement(""getByPermissionName""), permissionName);
"
7736,findByIds,"	public List<PmsPermission> findByIds(String idStr) {
		List<String> ids = Arrays.asList(idStr.split("",""));
		return this.getSessionTemplate().selectList(getStatement(""findByIds""), ids);
	}"
7737,listAllByMenuId,"	List<PmsPermission> listAllByMenuId(Long menuId);
"
7742,setPermission,"	public void setPermission(String permission) {
		this.permission = permission;
	}"
7743,getPermission,"	public String getPermission() {
		return permission;
	}"
7744,setPermissionName,"	public void setPermissionName(String permissionName) {
		this.permissionName = permissionName;
	}"
7745,getPermissionName,"	public String getPermissionName() {
		return permissionName;
	}"
7749,findOperatorByLoginName,"	public PmsOperator findOperatorByLoginName(String loginName) {
		return pmsOperatorDao.findByLoginName(loginName);
	}"
7750,updateOperatorPwd,"	public void updateOperatorPwd(Long operatorId, String newPwd) {
		PmsOperator pmsOperator = pmsOperatorDao.getById(operatorId);
		pmsOperator.setLoginPwd(newPwd);
		pmsOperatorDao.update(pmsOperator);
	}"
7751,update,"	public void update(PmsOperator operator) {
		pmsOperatorDao.update(operator);
"
7752,deleteOperatorById,"	public void deleteOperatorById(Long operatorId) {
		PmsOperator pmsOperator = pmsOperatorDao.getById(operatorId);
		if (pmsOperator != null) {
			if (""admin"".equals(pmsOperator.getType())) {"
7754,getDataById,"	public PmsOperator getDataById(Long id) {
		return pmsOperatorDao.getById(id);
"
7755,updateData,"	public void updateData(PmsOperator pmsOperator) {
		pmsOperatorDao.update(pmsOperator);
	}"
7756,saveData,"	public void saveData(PmsOperator pmsOperator) {
		pmsOperatorDao.insert(pmsOperator);
	}"
7757,updateOperator,"	void updateOperator(PmsOperator pmsOperator, String roleOperatorStr);
"
7758,saveOperator,"	public void saveOperator(PmsOperator pmsOperator, String roleOperatorStr);
"
7759,updateOperatorPwd,"	public void updateOperatorPwd(Long operatorId, String newPwd);
"
7760,deleteOperatorById,"	public void deleteOperatorById(Long operatorId);
"
7761,listPage,"	PageBean listPage(PageParam pageParam, PmsOperator pmsOperator);
"
7762,findOperatorByLoginName,"	public PmsOperator findOperatorByLoginName(String loginName);
"
7768,listOperatorByRoleId,"	public List<PmsOperator> listOperatorByRoleId(Long roleId) {
		return pmsOperatorDao.listByRoleId(roleId);
	}"
7770,listOperatorRoleByOperatorId,"	public List<PmsOperatorRole> listOperatorRoleByOperatorId(Long operatorId) {
		return pmsOperatorRoleDao.listByOperatorId(operatorId);
	}"
7771,countOperatorByRoleId,"	public int countOperatorByRoleId(Long roleId) {
		List<PmsOperatorRole> operatorList = pmsOperatorRoleDao.listByRoleId(roleId);
		if (operatorList == null || operatorList.isEmpty()) {
			return 0;"
7774,listOperatorRoleByOperatorId,"	public List<PmsOperatorRole> listOperatorRoleByOperatorId(Long operatorId);
	"
7775,countOperatorByRoleId,"	public int countOperatorByRoleId(Long roleId);
"
7776,updateOperator,"	public void updateOperator(PmsOperator pmsOperator, String roleOperatorStr);
"
7778,listOperatorByRoleId,"	public List<PmsOperator> listOperatorByRoleId(Long roleId);
"
7779,getRoleCodeByOperatorId,"	public Set<String> getRoleCodeByOperatorId(Long operatorId);
"
7780,getRoleIdsByOperatorId,"	public String getRoleIdsByOperatorId(Long operatorId);
"
7781,deleteByRoleIdAndOperatorId,"	public void deleteByRoleIdAndOperatorId(Long roleId, Long operatorId) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put(""roleId"", roleId);
		paramMap.put(""operatorId"", operatorId);
		super.getSessionTemplate().delete(getStatement(""deleteByRoleIdAndOperatorId""), paramMap);
	}"
7782,deleteByRoleId,"	public void deleteByRoleId(Long roleId) {
		super.getSessionTemplate().delete(getStatement(""deleteByRoleId""), roleId);
	}"
7783,deleteByOperatorId,"	public void deleteByOperatorId(Long operatorId) {

		super.getSessionTemplate().delete(getStatement(""deleteByOperatorId""), operatorId);"
7784,listByRoleId,"	public List<PmsOperatorRole> listByRoleId(Long roleId) {
		return super.getSessionTemplate().selectList(getStatement(""listByRoleId""), roleId);
	}"
7785,listByOperatorId,"	public List<PmsOperatorRole> listByOperatorId(Long operatorId) {
		return super.getSessionTemplate().selectList(getStatement(""listByOperatorId""), operatorId);
	}"
7786,deleteByRoleIdAndOperatorId,"	void deleteByRoleIdAndOperatorId(Long roleId, Long operatorId);
"
7789,listByRoleId,"	List<PmsOperatorRole> listByRoleId(Long roleId);
"
7790,listByOperatorId,"	List<PmsOperatorRole> listByOperatorId(Long operatorId);
"
7791,setOperatorId,"	public void setOperatorId(Long operatorId) {
		this.operatorId = operatorId;
	}"
7792,getOperatorId,"	public Long getOperatorId() {
		return operatorId;
	}"
7795,listPage,"	public PageBean listPage(PageParam pageParam, PmsOperatorLog pmsOperatorLog) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		return pmsOperatorLogDao.listPage(pageParam, paramMap);
	}"
7796,getDataById,"	public PmsOperatorLog getDataById(Long id) {
		return pmsOperatorLogDao.getById(id);
"
7797,updateData,"	public void updateData(PmsOperatorLog pmsOperatorLog) {
		pmsOperatorLogDao.update(pmsOperatorLog);
	}"
7798,saveData,"	public void saveData(PmsOperatorLog pmsOperatorLog) {
		pmsOperatorLogDao.insert(pmsOperatorLog);
	}"
7799,listPage,"	PageBean listPage(PageParam pageParam, PmsOperatorLog pmsOperatorLog);
"
7801,updateData,"	void updateData(PmsOperatorLog pmsOperatorLog);
"
7802,saveData,"	void saveData(PmsOperatorLog pmsOperatorLog);
"
7805,setIp,"	public void setIp(String ip) {
		this.ip = ip;
	}"
7807,setOperateType,"	public void setOperateType(String operateType) {
		this.operateType = operateType;
	}"
7808,getOperateType,"	public String getOperateType() {
		return operateType;
	}"
7809,setOperatorName,"	public void setOperatorName(String operatorName) {
		this.operatorName = operatorName;
	}"
7813,listByRoleId,"	public List<PmsOperator> listByRoleId(Long roleId) {
		return super.getSessionTemplate().selectList(getStatement(""listByRoleId""), roleId);
	}"
7814,findByLoginName,"	public PmsOperator findByLoginName(String loginName) {
		return super.getSessionTemplate().selectOne(getStatement(""findByLoginName""), loginName);
	}"
7815,listByRoleId,"	List<PmsOperator> listByRoleId(Long roleId);
}"
7816,findByLoginName,"	PmsOperator findByLoginName(String loginName);
"
7817,getCredentialsSalt,"	public String getCredentialsSalt() {
		return loginName + salt;
	}"
7818,setsalt,"	public void setsalt(String salt) {
		this.salt = salt;
	}"
7824,setRealName,"	public void setRealName(String realName) {
		this.realName = realName;
	}"
7825,getRealName,"	public String getRealName() {
		return realName;
	}"
7826,setLoginPwd,"	public void setLoginPwd(String loginPwd) {
		this.loginPwd = loginPwd;
	}"
7827,getLoginPwd,"	public String getLoginPwd() {
		return loginPwd;
	}"
7828,setLoginName,"	public void setLoginName(String loginName) {
		this.loginName = loginName;
	}"
7829,getLoginName,"	public String getLoginName() {
		return loginName;
	}"
7830,getMenuIdsByRoleId,"	public String getMenuIdsByRoleId(Long roleId) {
		List<PmsMenuRole> menuList = pmsMenuRoleDao.listByRoleId(roleId);
		StringBuffer menuIds = new StringBuffer("""");
		if (menuList != null && !menuList.isEmpty()) {
			for (PmsMenuRole rm : menuList) {
				menuIds.append(rm.getMenuId()).append("","");"
7831,update,"	public void update(PmsMenu menu) {
		pmsMenuDao.update(menu);
"
7832,getById,"	public PmsMenu getById(Long pid) {
		return pmsMenuDao.getById(pid);
	}"
7833,getMenuByNameAndIsLeaf,"	public List<PmsMenu> getMenuByNameAndIsLeaf(Map<String, Object> map) {
		return pmsMenuDao.getMenuByNameAndIsLeaf(map);
	}"
7834,listByParentId,"	public List<PmsMenu> listByParentId(Long parentId) {
		return pmsMenuDao.listByParentId(parentId);
	}"
7835,listByRoleIds,"	public List listByRoleIds(String roleIdsStr) {
		return this.pmsMenuDao.listByRoleIds(roleIdsStr);
	}"
7836,delete,"	public void delete(Long id) {
		this.pmsMenuDao.delete(id);
	}"
7837,getListByParent,"	public List getListByParent(Long parentId) {
		return pmsMenuDao.listByParent(parentId);
	}"
7838,savaMenu,"	public void savaMenu(PmsMenu menu) {
		pmsMenuDao.insert(menu);
	}"
7839,getMenuIdsByRoleId,"	public String getMenuIdsByRoleId(Long roleId);
"
7842,getMenuByNameAndIsLeaf,"	public List<PmsMenu> getMenuByNameAndIsLeaf(Map<String, Object> map);
"
7843,listByParentId,"	public List<PmsMenu> listByParentId(Long parentId);
"
7844,listByRoleIds,"	public List listByRoleIds(String roleIdsStr);
"
7849,deleteByRoleId,"	public void deleteByRoleId(Long roleId) {
		pmsMenuRoleDao.deleteByRoleId(roleId);
	}"
7850,countMenuByRoleId,"	public int countMenuByRoleId(Long roleId) {
		List<PmsMenuRole> meunList = pmsMenuRoleDao.listByRoleId(roleId);
		if (meunList == null || meunList.isEmpty()) {
			return 0;"
7851,saveRoleMenu,"	public void saveRoleMenu(Long roleId, String roleMenuStr);
"
7854,listByRoleId,"	public List<PmsMenuRole> listByRoleId(Long roleId) {
		return super.getSessionTemplate().selectList(getStatement(""listByRoleId""), roleId);
	}"
7856,listByRoleId,"	List<PmsMenuRole> listByRoleId(Long roleId);
}"
7858,setMenuId,"	public void setMenuId(Long menuId) {
		this.menuId = menuId;
	}"
7859,getMenuId,"	public Long getMenuId() {
		return menuId;
	}"
7862,getMenuByNameAndIsLeaf,"	public List<PmsMenu> getMenuByNameAndIsLeaf(Map<String, Object> map) {
		return super.getSessionTemplate().selectList(getStatement(""listBy""), map);
	}"
7863,listByParentId,"	public List<PmsMenu> listByParentId(Long parentId) {
		return super.getSessionTemplate().selectList(getStatement(""listByParentId""), parentId);
	}"
7864,listByParent,"	public List listByParent(Long parentId) {
		return super.getSessionTemplate().selectList(getStatement(""listByParent""), parentId);
	}"
7865,listByRoleIds,"	public List listByRoleIds(String roleIdsStr) {
		List<String> roldIds = Arrays.asList(roleIdsStr.split("",""));
		return super.getSessionTemplate().selectList(getStatement(""listByRoleIds""), roldIds);
	}"
7870,setTargetName,"	public void setTargetName(String targetName) {
		this.targetName = targetName;
	}"
7871,getTargetName,"	public String getTargetName() {
		return targetName;
	}"
7872,setParent,"	public void setParent(PmsMenu parent) {
		this.parent = parent;
	}"
7873,getParent,"	public PmsMenu getParent() {
		return parent;
	}"
7874,setLevel,"	public void setLevel(Long level) {
		this.level = level;
	}"
7876,setIsLeaf,"	public void setIsLeaf(String isLeaf) {
		this.isLeaf = isLeaf;
	}"
7877,getIsLeaf,"	public String getIsLeaf() {
		return isLeaf;
	}"
7878,setNumber,"	public void setNumber(String number) {
		this.number = number;
	}"
7879,getNumber,"	public String getNumber() {
		return number;
	}"
7880,setUrl,"	public void setUrl(String url) {
		this.url = url;
	}"
7882,setName,"	public void setName(String name) {
		this.name = name;
	}"
7884,setRemark,"	public void setRemark(String remark) {
		this.remark = remark;
	}"
7885,getRemark,"	public String getRemark() {
		return remark;
	}"
7886,setEditTime,"	public void setEditTime(Date editTime) {
		this.editTime = editTime;
	}"
7887,getEditTime,"	public Date getEditTime() {
		return editTime;
	}"
7888,setEditor,"	public void setEditor(String editor) {
		this.editor = editor;
	}"
7889,getEditor,"	public String getEditor() {
		return editor;
	}"
7890,setCreateTime,"	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}"
7891,getCreateTime,"	public Date getCreateTime() {
		return createTime;
	}"
7892,setCreater,"	public void setCreater(String creater) {
		this.creater = creater;
	}"
7893,getCreater,"	public String getCreater() {
		return creater;
	}"
7896,setVersion,"	public void setVersion(Integer version) {
		this.version = version;
	}"
7897,getVersion,"	public Integer getVersion() {
		return version;
	}"
7902,delete,"	public int delete(Map<String, Object> paramMap) {
		if (paramMap == null) {
			return 0;"
7903,delete,"	public int delete(List<T> list) {
		if (list.isEmpty() || list.size() <= 0) {
			return 0;"
7904,delete,"	public int delete(Long id) {
		return (int) sessionTemplate.delete(getStatement(SQL_DELETE_BY_ID), id);
	}"
7905,getCountByColumn,"	public Long getCountByColumn(Map<String, Object> paramMap) {
		if (paramMap == null) {
			return null;
		}"
7906,listByColumn,"	public List<T> listByColumn(Map<String, Object> paramMap) {
		if (paramMap == null) {
			return null;
		}"
7907,listBy,"	public List<T> listBy(Map<String, Object> paramMap) {
		if (paramMap == null) {
			return null;
		}"
7908,getBy,"	public T getBy(Map<String, Object> paramMap) {
		if (paramMap == null) {
			return null;
		}"
7909,getByColumn,"	public T getByColumn(Map<String, Object> paramMap) {
		if (paramMap == null) {
			return null;
		}"
7910,getById,"	public T getById(Long id) {
		return sessionTemplate.selectOne(getStatement(SQL_SELECT_BY_ID), id);
	}"
7911,update,"	public int update(Map<String, Object> paramMap) {
		if (paramMap == null) {
			return 0;
		}
		int result = sessionTemplate.update(getStatement(SQL_BATCH_UPDATE_BY_COLUMN), paramMap);
		if (result <= 0) {"
7912,update,"	public int update(List<T> list) {
		if (list.isEmpty() || list.size() <= 0) {
			return 0;
		}
		int result = sessionTemplate.update(getStatement(SQL_BATCH_UPDATE_BY_IDS), list);
		if (result <= 0) {"
7914,insert,"	public int insert(List<T> list) {
		if (list.isEmpty() || list.size() <= 0) {
			return 0;
		}
		int result = sessionTemplate.insert(getStatement(SQL_BATCH_INSERT), list);
		if (result <= 0) {"
7916,setSessionTemplate,"	public void setSessionTemplate(SqlSessionTemplate sessionTemplate) {
		this.sessionTemplate = sessionTemplate;
	}"
7917,getSessionTemplate,"	public SqlSessionTemplate getSessionTemplate() {
		return sessionTemplate;
	}"
7923,getCountByColumn,"	Long getCountByColumn(Map<String, Object> paramMap);
"
7924,listByColumn,"	public List<T> listByColumn(Map<String, Object> paramMap);
"
7925,listBy,"	public List<T> listBy(Map<String, Object> paramMap);
"
7926,getBy,"	public T getBy(Map<String, Object> paramMap);
"
7927,getByColumn,"	public T getByColumn(Map<String, Object> paramMap);
"
7934,getJsonStr,"	public static String getJsonStr() {
		PayWayEnum[] enums = PayWayEnum.values();
		StringBuffer jsonStr = new StringBuffer(""["");
		for (PayWayEnum senum : enums) {
			if (!""["".equals(jsonStr.toString())) {
				jsonStr.append("","");
			}"
7935,getEnum,"	public static PayWayEnum getEnum(String name) {
		PayWayEnum[] arry = PayWayEnum.values();
		for (int i = 0; i < arry.length; i++) {
			if (arry[i].name().equalsIgnoreCase(name)) {
				return arry[i];"
7936,toList,"	public static List toList() {
		PayWayEnum[] ary = PayWayEnum.values();
		List list = new ArrayList();
		for (int i = 0; i < ary.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put(""desc"", ary[i].getDesc());"
7937,toMap,"	public static Map<String, Map<String, Object>> toMap() {
		PayWayEnum[] ary = PayWayEnum.values();
		Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
		for (int num = 0; num < ary.length; num++) {
			Map<String, Object> map = new HashMap<String, Object>();
			String key = ary[num].name();"
7940,getJsonStr,"    public static String getJsonStr() {
        PayTypeEnum[] enums = PayTypeEnum.values();
        StringBuffer jsonStr = new StringBuffer(""["");
        for (PayTypeEnum senum : enums) {
            if (!""["".equals(jsonStr.toString())) {
                jsonStr.append("","");
            }"
7941,getWayList,"    public static List getWayList(String way) {
    	PayTypeEnum[] ary = PayTypeEnum.values();
        List list = new ArrayList();
        for (int i = 0; i < ary.length; i++) {
        	if(ary[i].way.equals(way)){
        		Map<String, String> map = new HashMap<String, String>();"
7942,getEnum,"    public static PayTypeEnum getEnum(String name) {
        PayTypeEnum[] arry = PayTypeEnum.values();
        for (int i = 0; i < arry.length; i++) {
            if (arry[i].name().equalsIgnoreCase(name)) {
                return arry[i];"
7943,toList,"    public static List toList() {
        PayTypeEnum[] ary = PayTypeEnum.values();
        List list = new ArrayList();
        for (int i = 0; i < ary.length; i++) {
            Map<String, String> map = new HashMap<String, String>();
            map.put(""desc"", ary[i].getDesc());"
7944,toMap,"    public static Map<String, Map<String, Object>> toMap() {
        PayTypeEnum[] ary = PayTypeEnum.values();
        Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
        for (int num = 0; num < ary.length; num++) {
            Map<String, Object> map = new HashMap<String, Object>();
            String key = ary[num].name();"
7947,setWay,"	public void setWay(String way) {
		this.way = way;
	}"
7949,setOrderDateEnd,"    public void setOrderDateEnd(String orderDateEnd) {
        this.orderDateEnd = orderDateEnd;
    }"
7950,getOrderDateEnd,"    public String getOrderDateEnd() {
        return orderDateEnd;
    }"
7951,setOrderDateBegin,"    public void setOrderDateBegin(String orderDateBegin) {
        this.orderDateBegin = orderDateBegin;
    }"
7952,getOrderDateBegin,"    public String getOrderDateBegin() {
        return orderDateBegin;
    }"
7959,setPayTypeName,"    public void setPayTypeName(String payTypeName) {
        this.payTypeName = payTypeName;
    }"
7961,setPayWayName,"    public void setPayWayName(String payWayName) {
        this.payWayName = payWayName;
    }"
7967,print,"    public PayBizException print() {
        LOG.info(""==>BizException, code:"" + this.code + "", msg:"" + this.msg);
        return this;
    }"
7968,parser,"	public List<ReconciliationEntityVo> parser(File file, Date billDate, RpAccountCheckBatch batch) throws IOException;
"
7969,setNumPerPage,"    public void setNumPerPage(int numPerPage) {
        this.numPerPage = numPerPage;
    }"
7970,getNumPerPage,"    public int getNumPerPage() {
        return numPerPage > 0 ? numPerPage : DEFAULT_NUM_PER_PAGE;
    }"
7971,setPageNum,"    public void setPageNum(int pageNum) {
        this.pageNum = pageNum;
    }"
7972,getPageNum,"    public int getPageNum() {
        return pageNum;
    }"
7973,getPageData,"    public List getPageData() {
        return pageData;
    }"
7974,getPageSize,"    public int getPageSize() {
        return pageSize;
    }"
7975,getPage,"    public int getPage() {
        return page;
    }"
7976,getTotal,"    public long getTotal() {
        return total;
    }"
7977,setPageData,"    public void setPageData(List pageData) {
        this.pageData = pageData;
    }"
7978,setPageSize,"    public void setPageSize(int pageSize) {
        this.pageSize = pageSize;
    }"
7979,setPage,"    public void setPage(int page) {
        this.page = page;
    }"
7981,setSummary,"	public void setSummary(Object summary) {
		this.summary = summary;
	}"
7982,getSummary,"    public Object getSummary() {
		return summary;
	}"
7983,setCountResultMap,"    public void setCountResultMap(Map<String, Object> countResultMap) {
        this.countResultMap = countResultMap;
    }"
7984,getCountResultMap,"    public Map<String, Object> getCountResultMap() {
        return countResultMap;
    }"
7985,setEndPageIndex,"    public void setEndPageIndex(int endPageIndex) {
        this.endPageIndex = endPageIndex;
    }"
7986,getEndPageIndex,"    public int getEndPageIndex() {
        return endPageIndex;
    }"
7987,setBeginPageIndex,"    public void setBeginPageIndex(int beginPageIndex) {
        this.beginPageIndex = beginPageIndex;
    }"
7988,getBeginPageIndex,"    public int getBeginPageIndex() {
        return beginPageIndex;
    }"
7989,setTotalCount,"    public void setTotalCount(int totalCount) {
        this.totalCount = totalCount;
    }"
7990,getTotalCount,"    public int getTotalCount() {
        return totalCount;
    }"
7992,getNumPerPage,"    public int getNumPerPage() {
        return numPerPage;
    }"
7993,setTotalPage,"    public void setTotalPage(int totalPage) {
        this.totalPage = totalPage;
    }"
7994,getTotalPage,"    public int getTotalPage() {
        return totalPage;
    }"
7995,setCurrentPage,"    public void setCurrentPage(int currentPage) {
        this.currentPage = currentPage;
    }"
7996,getCurrentPage,"    public int getCurrentPage() {
        return currentPage;
    }"
7997,setRecordList,"    public void setRecordList(List<T> recordList) {
        this.recordList = recordList;
    }"
7998,getRecordList,"    public List<T> getRecordList() {
        return recordList;
    }"
7999,checkNumPerPage,"    public static int checkNumPerPage(int numPerPage) {
        if (numPerPage > PageParam.MAX_PAGE_SIZE) {
            return PageParam.MAX_PAGE_SIZE;"
8011,getJsonStr,"    public static String getJsonStr() {
        OrderFromEnum[] enums = OrderFromEnum.values();
        StringBuffer jsonStr = new StringBuffer(""["");
        for (OrderFromEnum senum : enums) {
            if (!""["".equals(jsonStr.toString())) {
                jsonStr.append("","");
            }"
8012,getEnum,"    public static OrderFromEnum getEnum(String name) {
        OrderFromEnum[] arry = OrderFromEnum.values();
        for (int i = 0; i < arry.length; i++) {
            if (arry[i].name().equalsIgnoreCase(name)) {
                return arry[i];"
8013,toList,"    public static List toList() {
        OrderFromEnum[] ary = OrderFromEnum.values();
        List list = new ArrayList();
        for (int i = 0; i < ary.length; i++) {
            Map<String, String> map = new HashMap<String, String>();
            map.put(""desc"", ary[i].getDesc());"
8014,toMap,"    public static Map<String, Map<String, Object>> toMap() {
        OrderFromEnum[] ary = OrderFromEnum.values();
        Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
        for (int num = 0; num < ary.length; num++) {
            Map<String, Object> map = new HashMap<String, Object>();
            String key = ary[num].name();"
8017,getJsonStr,"    public static String getJsonStr() {
        NotifyTypeEnum[] enums = NotifyTypeEnum.values();
        StringBuffer jsonStr = new StringBuffer(""["");
        for (NotifyTypeEnum senum : enums) {
            if (!""["".equals(jsonStr.toString())) {
                jsonStr.append("","");
            }"
8018,getEnum,"    public static NotifyTypeEnum getEnum(String name) {
        NotifyTypeEnum[] arry = NotifyTypeEnum.values();
        for (int i = 0; i < arry.length; i++) {
            if (arry[i].name().equalsIgnoreCase(name)) {
                return arry[i];"
8019,toList,"    public static List toList() {
        NotifyTypeEnum[] ary = NotifyTypeEnum.values();
        List list = new ArrayList();
        for (int i = 0; i < ary.length; i++) {
            Map<String, String> map = new HashMap<String, String>();
            map.put(""desc"", ary[i].getDesc());"
8020,toMap,"    public static Map<String, Map<String, Object>> toMap() {
        NotifyTypeEnum[] ary = NotifyTypeEnum.values();
        Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
        for (int num = 0; num < ary.length; num++) {
            Map<String, Object> map = new HashMap<String, Object>();
            String key = ary[num].name();"
8024,getDelay,"    public long getDelay(TimeUnit unit) {
        return unit.convert(executeTime - System.currentTimeMillis(), unit.SECONDS);
    }"
8025,compareTo,"    public int compareTo(Delayed o) {
        NotifyTask task = (NotifyTask) o;
        return executeTime > task.executeTime ? 1 : (executeTime < task.executeTime ? -1 : 0);
    }"
8026,getExecuteTime,"    private long getExecuteTime(RpNotifyRecord record) {
        long lastTime = record.getLastNotifyTime().getTime();
        Integer nextNotifyTime = notifyParam.getNotifyParams().get(record.getNotifyTimes());
        return (nextNotifyTime == null ? 0 : nextNotifyTime * 1000) + lastTime;
    }"
8027,getJsonStr,"    public static String getJsonStr() {
        NotifyStatusEnum[] enums = NotifyStatusEnum.values();
        StringBuffer jsonStr = new StringBuffer(""["");
        for (NotifyStatusEnum senum : enums) {
            if (!""["".equals(jsonStr.toString())) {
                jsonStr.append("","");
            }"
8028,getEnum,"    public static NotifyStatusEnum getEnum(String name) {
        NotifyStatusEnum[] arry = NotifyStatusEnum.values();
        for (int i = 0; i < arry.length; i++) {
            if (arry[i].name().equalsIgnoreCase(name)) {
                return arry[i];"
8029,toList,"    public static List toList() {
        NotifyStatusEnum[] ary = NotifyStatusEnum.values();
        List list = new ArrayList();
        for (int i = 0; i < ary.length; i++) {
            Map<String, String> map = new HashMap<String, String>();
            map.put(""desc"", ary[i].getDesc());"
8030,toMap,"    public static Map<String, Map<String, Object>> toMap() {
        NotifyStatusEnum[] ary = NotifyStatusEnum.values();
        Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
        for (int num = 0; num < ary.length; num++) {
            Map<String, Object> map = new HashMap<String, Object>();
            String key = ary[num].name();"
8035,updateNotifyRord,"    public  void updateNotifyRord(String id, int notifyTimes, String status) {
        RpNotifyRecord notifyRecord = rpNotifyService.getNotifyRecordById(id);
        notifyRecord.setNotifyTimes(notifyTimes);
        notifyRecord.setStatus(status);
        notifyRecord.setLastNotifyTime(new Date());
        rpNotifyService.updateNotifyRecord(notifyRecord);
    }"
8036,saveNotifyRecord,"    public long saveNotifyRecord(RpNotifyRecord notifyRecord) {
        return rpNotifyService.createNotifyRecord(notifyRecord);
    }"
8037,notifyParam,"    public NotifyParam notifyParam() {
        NotifyParam notifyParam = new NotifyParam();
        Map<Integer, Integer> notifyParams = new HashMap<>();
        notifyParams.put(1, 0);
        notifyParams.put(2, 1);
        notifyParams.put(3, 2);
        notifyParams.put(4, 5);
        notifyParams.put(5, 15);
        notifyParam.setNotifyParams(notifyParams);
        notifyParam.setSuccessValue(""success"");
        return notifyParam;
    }"
8039,getAcceptedIssuers,"	public X509Certificate[] getAcceptedIssuers() {
		return null;
	}"
8040,checkServerTrusted,"	public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
	}"
8041,checkClientTrusted,"	public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
	}"
8042,toList,"	public static List toList() {
		MistakeHandleStatusEnum[] ary = MistakeHandleStatusEnum.values();
		List list = new ArrayList();
		for (int i = 0; i < ary.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put(""desc"", ary[i].getDesc());"
8043,getEnum,"	public static MistakeHandleStatusEnum getEnum(String name) {
		MistakeHandleStatusEnum[] arry = MistakeHandleStatusEnum.values();
		for (int i = 0; i < arry.length; i++) {
			if (arry[i].name().equals(name)) {
				return arry[i];"
8045,isRightSign,"    public static boolean isRightSign(Map<String , Object> paramMap , String paySecret ,String signStr){

        if (StringUtils.isBlank(signStr)){
            return false;
        }"
8048,getContentBytes,"    private static byte[] getContentBytes(String content, String charset) {
        if (charset == null || """".equals(charset)) {
            return content.getBytes();
        }"
8049,verify,"    public static boolean verify(String text, String sign, String key, String input_charset) {
    	text = text + key;
    	String mysign = DigestUtils.md5Hex(getContentBytes(text, input_charset));
    	if(mysign.equals(sign)) {
    		return true;"
8050,sign,"    public static String sign(String text, String key, String input_charset) {
    	text = text + key;
        return DigestUtils.md5Hex(getContentBytes(text, input_charset));
    }"
8051,processResponse,"	public void processResponse(InputStream responseBody) throws IOException;
}"
8052,doRequest,"	public void doRequest(HttpResponseCallBack callback, MethodType method,
                          String url, String charset) throws HttpException, IOException;"
8053,doRequest,"	public void doRequest(HttpResponseCallBack callback, MethodType method,
                          String url, Map<String, String> params, String charset)"
8054,doRequest,"	public String doRequest(MethodType method, String url, String charset)
			throws HttpException, IOException;"
8055,doRequest,"	public String doRequest(MethodType method, String url,
                            Map<String, String> params, String charset) throws HttpException,"
8057,addCookies,"	public void addCookies(Cookie[] cookies);
   /**"
8059,addHttpHeader,"	public void addHttpHeader(Map<String, String> headers);
		"
8060,getJsonStr,"    public static String getJsonStr() {
        FundInfoTypeEnum[] enums = FundInfoTypeEnum.values();
        StringBuffer jsonStr = new StringBuffer(""["");
        for (FundInfoTypeEnum senum : enums) {
            if (!""["".equals(jsonStr.toString())) {
                jsonStr.append("","");
            }"
8061,getEnum,"    public static FundInfoTypeEnum getEnum(String name) {
        FundInfoTypeEnum[] arry = FundInfoTypeEnum.values();
        for (int i = 0; i < arry.length; i++) {
            if (arry[i].name().equalsIgnoreCase(name)) {
                return arry[i];"
8062,toList,"    public static List toList() {
        FundInfoTypeEnum[] ary = FundInfoTypeEnum.values();
        List list = new ArrayList();
        for (int i = 0; i < ary.length; i++) {
            Map<String, String> map = new HashMap<String, String>();
            map.put(""desc"", ary[i].getDesc());"
8063,toMap,"    public static Map<String, Map<String, Object>> toMap() {
        FundInfoTypeEnum[] ary = FundInfoTypeEnum.values();
        Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
        for (int num = 0; num < ary.length; num++) {
            Map<String, Object> map = new HashMap<String, Object>();
            String key = ary[num].name();"
8067,unZipFiles,"	public static List<String> unZipFiles(File zipFile, String descDir) throws IOException {
		List<String> result = new ArrayList<String>();
		File pathFile = new File(descDir);
		if (!pathFile.exists()) {
			pathFile.mkdirs();
		}
		Charset charset = Charset.forName(""GBK"");
		ZipFile zip = new ZipFile(zipFile, charset);
		for (Enumeration entries = zip.entries(); entries.hasMoreElements();) {"
8068,unZipFiles,"	public static List<String> unZipFiles(String zipPath, String descDir) throws IOException {
		return unZipFiles(new File(zipPath), descDir);
	}"
8070,fileDown,"	File fileDown(Date fileDate, String dir) throws IOException, Exception;
"
8073,setField5,"    public void setField5(String field5) {
        this.field5 = field5;
    }"
8075,setField4,"    public void setField4(String field4) {
        this.field4 = field4;
    }"
8077,setField3,"    public void setField3(String field3) {
        this.field3 = field3;
    }"
8079,setField2,"    public void setField2(String field2) {
        this.field2 = field2;
    }"
8081,setField1,"    public void setField1(String field1) {
        this.field1 = field1;
    }"
8097,toString,"    public String toString() {
        return ""F2FPayRequestBo{"" +
                ""payKey='"" + payKey + '\'' +"
8098,setAuthCode,"    public void setAuthCode(String authCode) {
        this.authCode = authCode;
    }"
8099,getAuthCode,"    public String getAuthCode() {
        return authCode;
    }"
8121,decodeBase64String,"	public static String decodeBase64String(String str) throws IOException {
		BASE64Decoder encoder = new BASE64Decoder();
		return new String(encoder.decodeBuffer(str));
	}"
8122,encodeBase64String,"	public static String encodeBase64String(String str) {
		BASE64Encoder encoder = new BASE64Encoder();
		return encoder.encode(str.getBytes());
	}"
8123,encodeSHAString,"	public static String encodeSHAString(String str) {
		return encode(str, ""SHA"");
	}"
8124,encodeMD5String,"	public static String encodeMD5String(String str) {
		return encode(str, ""MD5"");
	}"
8125,setForwardUrl,"    public final void setForwardUrl(final String argForwardUrl) {
        this.forwardUrl = argForwardUrl;
    }"
8126,getForwardUrl,"    public final String getForwardUrl() {
        return forwardUrl;
    }"
8127,setCallbackType,"    public final void setCallbackType(final String argCallbackType) {
        this.callbackType = argCallbackType;
    }"
8128,getCallbackType,"    public final String getCallbackType() {
        return callbackType;
    }"
8129,setNavTabId,"    public final void setNavTabId(final String argNavTabId) {
        this.navTabId = argNavTabId;
    }"
8130,getNavTabId,"    public final String getNavTabId() {
        return navTabId;
    }"
8131,setMessage,"    public final void setMessage(final String argMessage) {
        this.message = argMessage;
    }"
8132,getMessage,"    public final String getMessage() {
        return message;
    }"
8133,setStatusCode,"    public final void setStatusCode(final String argStatusCode) {
        this.statusCode = argStatusCode;
    }"
8134,getStatusCode,"    public final String getStatusCode() {
        return statusCode;
    }"
8136,isSameDayWithToday,"	public static boolean isSameDayWithToday(Date date) {

		if (date == null) {
			return false;
		}

		Calendar todayCal = Calendar.getInstance();
		Calendar dateCal = Calendar.getInstance();

		todayCal.setTime(new Date());
		dateCal.setTime(date);
		int subYear = todayCal.get(Calendar.YEAR) - dateCal.get(Calendar.YEAR);"
8137,dateFormat,"	public static Date dateFormat(Date date) {
		SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd"");
		Date value = new Date();

		try {
			value = sdf.parse(sdf.format(date));"
8138,getLastDays,"	public static List<String> getLastDays(int countDay) {
		List<String> listDate = new ArrayList<String>();
		for (int i = 0; i < countDay; i++) {
			listDate.add(DateUtils.getReqDateyyyyMMdd(DateUtils.getDate(-i)));
		}"
8139,getStrFormTime,"	public static String getStrFormTime(String form, Date date) {
		SimpleDateFormat sdf = new SimpleDateFormat(form);
		return sdf.format(date);
	}"
8141,getTimeDiff,"	public static long getTimeDiff(Date date1, Date date2){
		if (date1 == null || date1 == null) {
			return 0L;
		}
		long diff = (date1.getTime() - date2.getTime()) > 0 ? (date1.getTime() - date2"
8142,getYearDiff,"	public static int getYearDiff(Date date1, Date date2){
		if (date1 == null || date2 == null) {
			return 0;
		}

		Calendar calendar1 = Calendar.getInstance();
		calendar1.setTime(date1);
		int year1 = calendar1.get(Calendar.YEAR);

		Calendar calendar2 = Calendar.getInstance();"
8143,getDateDiff,"	public static long getDateDiff(Date date1, Date date2) {
		if (date1 == null || date2 == null) {
			return 0L;
		}
		long diff = (date1.getTime() - date2.getTime()) / (24 * 60 * 60 * 1000) > 0 ? (date1.getTime() - date2"
8144,getDateDiff,"	public static long getDateDiff(String startDate, String endDate) {
		long diff = 0;
		try {
			Date date1 = new SimpleDateFormat(""yyyy-MM-dd"").parse(startDate);
			Date date2 = new SimpleDateFormat(""yyyy-MM-dd"").parse(endDate);"
8147,getFirstDayOfMonth,"	public static Date getFirstDayOfMonth(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.set(Calendar.DATE, calendar.getActualMinimum(Calendar.DATE));
		return calendar.getTime();
	}"
8148,getLastDayOfMonth,"	public static Date getLastDayOfMonth(Date date) {
		Calendar cDay1 = Calendar.getInstance();
		cDay1.setTime(date);
		int lastDay = cDay1.getActualMaximum(Calendar.DAY_OF_MONTH);
		Date lastDate = cDay1.getTime();
		lastDate.setDate(lastDay);
		return lastDate;
	}"
8149,getMinTime,"	public static Date getMinTime(Date dt) {
		Date dt1 = null;
		dt1 = DateUtils.getDateByStr(DateUtils.formatDate(dt, ""yyyy-MM-dd""));
		return dt1;
	}"
8150,getMaxTime,"	public static Date getMaxTime(Date dt) {

		Date dt1 = null;
		Calendar ca = Calendar.getInstance();
		ca.setTime(dt);
		ca.add(Calendar.DAY_OF_MONTH, 1);
		dt1 = ca.getTime();
		dt1 = DateUtils.getMinTime(dt1);
		ca.setTime(dt1);
		ca.add(Calendar.SECOND, -1);
		dt1 = ca.getTime();
		return dt1;"
8151,getDate,"	public static Date getDate(int days) {
		Calendar calendar = Calendar.getInstance();
		calendar.add(Calendar.DATE, days);
		return calendar.getTime();
	}"
8152,getDateByStr,"	public static Date getDateByStr(String dateStr) {
		SimpleDateFormat formatter = null;
		if (dateStr == null) {
			return null;
		} else if (dateStr.length() == 10) {"
8153,isInBetweenTimes,"	public static boolean isInBetweenTimes(String startTime, String endTime) {
		Date nowTime = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat(""HH:mm:ss"");
		String time = sdf.format(nowTime);
		if (time.compareTo(startTime) >= 0 && time.compareTo(endTime) <= 0) {
			return true;"
8154,getYesterday,"	public static String getYesterday() {
		Calendar calendar = Calendar.getInstance();
		calendar.add(Calendar.DATE, -1);
		return formatDate(calendar.getTime(), ""yyyy-MM-dd"");
	}"
8155,formatDate,"	public static String formatDate(Date date, String format) {
		SimpleDateFormat dateFormat = new SimpleDateFormat(format);
		return dateFormat.format(date);
	}"
8156,currentTime,"	public static String currentTime() {
		return formatDate(new Date(), ""yyyyMMddhhmmssSSS"");
	}"
8157,today,"	public static String today() {
		return formatDate(new Date(), ""yyyy-MM-dd"");
	}"
8158,formatDate,"	public static String formatDate(Date date) {
		if (date == null) {
			return """";
		}
		SimpleDateFormat dateFormat = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");"
8159,getQuarter,"	public static int getQuarter(Date date) {
		if (date.getMonth() == 0 || date.getMonth() == 1 || date.getMonth() == 2) {
			return 1;"
8160,getDateFromString,"	public static Date getDateFromString(String src, String pattern) {
		SimpleDateFormat f = new SimpleDateFormat(pattern);
		try {
			return f.parse(src);"
8161,isOverIntervalLimit,"	public static boolean isOverIntervalLimit(String startDateStr, String endDateStr, int interval) {
		Date startDate = null;
		Date endDate = null;
		startDate = DateUtils.parseDate(startDateStr, DateUtils.DATE_FORMAT_DATEONLY);
		endDate = DateUtils.parseDate(endDateStr, DateUtils.DATE_FORMAT_DATEONLY);
		if (startDate == null || endDate == null){
			return true;
		}"
8162,isOverIntervalLimit,"	public static boolean isOverIntervalLimit(Date startDate, Date endDate, int interval) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date());
		cal.add(Calendar.DAY_OF_MONTH, interval * (-1));
		Date curDate = getDayStart(cal.getTime());
		if (getDayStart(startDate).compareTo(curDate) < 0 || getDayStart(endDate).compareTo(curDate) < 0) {
			return true;
		}"
8163,isOverIntervalLimit,"	public static boolean isOverIntervalLimit(Date startDate, Date endDate, int interval, int dateUnit) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date());
		cal.add(dateUnit, interval * (-1));
		Date curDate = getDayStart(cal.getTime());
		if (getDayStart(startDate).compareTo(curDate) < 0 || getDayStart(endDate).compareTo(curDate) < 0) {
			return true;
		}"
8164,subDays,"	public static Date subDays(int days) {
		Date date = addDay(new Date(), -days);
		String dateStr = getReqDate(date);
		Date date1 = null;
		SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd"");
		try {
			date1 = sdf.parse(dateStr);
		} catch (ParseException e) {"
8165,getWeekIndex,"	public static int getWeekIndex(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		return calendar.get(Calendar.DAY_OF_WEEK);
	}"
8166,StringToDate,"	public static Date StringToDate(String dateString) {
		SimpleDateFormat sdf = new SimpleDateFormat(""yyyy/MM/dd"");
		Date date = null;
		try {
			date = sdf.parse(dateString);
		} catch (ParseException e) {"
8167,getSeason,"	public static int getSeason(Date date) {

		int season = 0;

		Calendar c = Calendar.getInstance();
		c.setTime(date);
		int month = c.get(Calendar.MONTH);
		switch (month) {"
8169,getSeasonEnd,"	public static Date getSeasonEnd(Date date) {
		return getDayEnd(getLastDateOfMonth(getSeasonDate(date)[2]));
	}"
8170,getSeasonStart,"	public static Date getSeasonStart(Date date) {
		return getDayStart(getFirstDateOfMonth(getSeasonDate(date)[0]));
	}"
8171,getLastDateOfMonth,"	public static Date getLastDateOfMonth(Date date) {
		Calendar c = Calendar.getInstance();
		c.setTime(date);
		c.set(Calendar.DAY_OF_MONTH, c.getActualMaximum(Calendar.DAY_OF_MONTH));
		return c.getTime();
	}"
8172,getFirstDateOfMonth,"	public static Date getFirstDateOfMonth(Date date) {
		Calendar c = Calendar.getInstance();
		c.setTime(date);
		c.set(Calendar.DAY_OF_MONTH, c.getActualMinimum(Calendar.DAY_OF_MONTH));
		return c.getTime();
	}"
8173,getDayOfMonth,"	public static int getDayOfMonth(Date date) {
		Calendar c = Calendar.getInstance();
		c.setTime(date);
		return c.getActualMaximum(Calendar.DAY_OF_MONTH);
	}"
8174,getYearEnd,"	public static Date getYearEnd(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR));
		calendar.set(Calendar.MONTH, 11);
		calendar.set(Calendar.DAY_OF_MONTH, 31);
		calendar.set(Calendar.HOUR_OF_DAY, 23);
		calendar.set(Calendar.MINUTE, 59);
		calendar.set(Calendar.SECOND, 59);
		calendar.set(Calendar.MILLISECOND, 0);
		return calendar.getTime();
	}"
8175,getYearStart,"	public static Date getYearStart(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR));
		calendar.set(Calendar.MONTH, 0);
		calendar.set(Calendar.DAY_OF_MONTH, 1);
		calendar.set(Calendar.HOUR_OF_DAY, 0);
		calendar.set(Calendar.MINUTE, 0);
		calendar.set(Calendar.SECOND, 0);
		calendar.set(Calendar.MILLISECOND, 0);
		return calendar.getTime();
	}"
8176,getMonthStart,"	public static Date getMonthStart(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.set(Calendar.DAY_OF_MONTH, 1);
		calendar.set(Calendar.HOUR_OF_DAY, 0);
		calendar.set(Calendar.MINUTE, 0);
		calendar.set(Calendar.SECOND, 0);
		calendar.set(Calendar.MILLISECOND, 0);
		return calendar.getTime();
	}"
8177,getWeekEnd,"	public static Date getWeekEnd(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.get(Calendar.WEEK_OF_YEAR);
		int firstDay = calendar.getFirstDayOfWeek();
		calendar.set(Calendar.DAY_OF_WEEK, 8 - firstDay);
		calendar.set(Calendar.HOUR_OF_DAY, 23);
		calendar.set(Calendar.MINUTE, 59);
		calendar.set(Calendar.SECOND, 59);
		calendar.set(Calendar.MILLISECOND, 0);
		return calendar.getTime();
	}"
8178,getWeekStart,"	public static Date getWeekStart(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.get(Calendar.WEEK_OF_YEAR);
		int firstDay = calendar.getFirstDayOfWeek();
		calendar.set(Calendar.DAY_OF_WEEK, firstDay);
		calendar.set(Calendar.HOUR_OF_DAY, 0);
		calendar.set(Calendar.MINUTE, 0);
		calendar.set(Calendar.SECOND, 0);
		calendar.set(Calendar.MILLISECOND, 0);
		return calendar.getTime();
	}"
8180,isBetween,"	public static boolean isBetween(Date now, Date start, Date end, int model) {
		return isBetween(now, start, end, model, LEFT_OPEN_RIGHT_OPEN);
	}"
8181,timestampToStringYMD,"	public static String timestampToStringYMD(Timestamp timestamp) {
		SimpleDateFormat sdf = new SimpleDateFormat(DateUtils.DATE_FORMAT_DATEONLY);
		String createTimeStr = sdf.format(timestamp);
		return createTimeStr;
	}"
8182,getWeek,"	public static int getWeek() {
		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date());
		int w = cal.get(Calendar.DAY_OF_WEEK);
		return w;
	}"
8184,toString,"	public static String toString(Timestamp dt) {
		return dt == null ? """" : toSqlTimestampString2(dt);
	}"
8185,toSqlTimestampString2,"	public static String toSqlTimestampString2(Timestamp dt) {
		if (dt == null) {
			return null;
		}
		String temp = toSqlTimestampString(dt, DateUtils.DATE_FORMAT_DATETIME);"
8186,toString,"	private static String toString(Date dt, SimpleDateFormat formatter) {
		String sRet = null;

		try {
			sRet = formatter.format(dt).toString();"
8187,toString,"	public static String toString(Date dt, String sFmt) {
		if (dt == null || sFmt == null || """".equals(sFmt)) {
			return """";
		}"
8188,getSysDateTimeString,"	public static String getSysDateTimeString() {
		return toString(new Date(System.currentTimeMillis()), DateUtils.sdfDateTime);
	}"
8189,toSqlTimestamp,"	public static Timestamp toSqlTimestamp(String sDate, String sFmt) {
		String temp = null;
		if (sDate == null || sFmt == null) {
			return null;
		}
		if (sDate.length() != sFmt.length()) {
			return null;"
8190,toSqlTimestamp,"	public static Timestamp toSqlTimestamp(String sDate) {
		if (sDate == null) {
			return null;
		}
		if (sDate.length() != DateUtils.DATE_FORMAT_DATEONLY.length()"
8191,getSysDateTimestamp,"	public static Timestamp getSysDateTimestamp() {
		return new Timestamp(System.currentTimeMillis());
	}"
8192,daysBetween,"	public static long daysBetween(Timestamp t1, Timestamp t2) {
		return (t2.getTime() - t1.getTime()) / DAY_MILLI;
	}"
8193,getCurTimestamp,"	public static Timestamp getCurTimestamp() {
		return Timestamp.valueOf(formatTimestamp.format(new Date()));
	}"
8194,strToTimestamp,"	public static Timestamp strToTimestamp(Date date) {
		return Timestamp.valueOf(formatTimestamp.format(date));
	}"
8195,strToTimestamp,"	public static Timestamp strToTimestamp(String dateStr) {
		return Timestamp.valueOf(dateStr);
	}"
8196,addYear,"	public static Date addYear(Date date, int year) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.DAY_OF_YEAR, 365 * year);
		return calendar.getTime();
	}"
8197,getMonthEnd,"	public static Date getMonthEnd(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.set(Calendar.DAY_OF_MONTH, 1);
		calendar.set(Calendar.HOUR_OF_DAY, 0);
		calendar.set(Calendar.MINUTE, 0);
		calendar.set(Calendar.SECOND, 0);
		calendar.set(Calendar.MILLISECOND, 0);
		calendar.add(Calendar.MONTH, 1);
		calendar.add(Calendar.MILLISECOND, -1);
		return calendar.getTime();
	}"
8198,addDay,"	public static Date addDay(Date date, int day) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.DAY_OF_MONTH, day);
		return calendar.getTime();
	}"
8199,getDayEnd,"	public static Date getDayEnd(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.set(Calendar.HOUR_OF_DAY, 0);
		calendar.set(Calendar.MINUTE, 0);
		calendar.set(Calendar.SECOND, 0);
		calendar.set(Calendar.MILLISECOND, 0);
		calendar.add(Calendar.DAY_OF_MONTH, 1);
		calendar.add(Calendar.MILLISECOND, -1);
		return calendar.getTime();
	}"
8200,getDayStart,"	public static Date getDayStart(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.set(Calendar.HOUR_OF_DAY, 0);
		calendar.set(Calendar.MINUTE, 0);
		calendar.set(Calendar.SECOND, 0);
		calendar.set(Calendar.MILLISECOND, 0);
		return calendar.getTime();
	}"
8201,addHour,"	public static Date addHour(Date date, int hour) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.HOUR, hour);
		return calendar.getTime();
	}"
8202,addMinute,"	public static Date addMinute(Date date, int minute) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.MINUTE, minute);
		return calendar.getTime();
	}"
8203,addSecond,"	public static Date addSecond(Date date, int second) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		;
		calendar.add(Calendar.SECOND, second);
		return calendar.getTime();
	}"
8204,getShortDateStr,"	public static String getShortDateStr() {
		return SHORT_DATE_FORMAT.format(new Date());
	}"
8205,getShortDateStr,"	public static String getShortDateStr(Date date) {
		return SHORT_DATE_FORMAT.format(date);
	}"
8206,getLongDateStr,"	public static String getLongDateStr(Timestamp time) {
		return LONG_DATE_FORMAT.format(time);
	}"
8207,getLongDateStr,"	public static String getLongDateStr() {
		return LONG_DATE_FORMAT.format(new Date());
	}"
8208,getTimeStampStr,"	public static String getTimeStampStr(Date date) {
		return LONG_DATE_FORMAT.format(date);
	}"
8209,getReqTime,"	public static String getReqTime() {
		return HMS_FORMAT.format(new Date());
	}"
8210,TimestampToDateStr,"	public static String TimestampToDateStr(Timestamp tmp) {
		return SHORT_DATE_FORMAT.format(tmp);
	}"
8211,getReqDateyyyyMMdd,"	public static String getReqDateyyyyMMdd(Date date) {
		return SHORTDATEFORMAT.format(date);
	}"
8212,getReqDate,"	public static String getReqDate(Date date) {
		return SHORT_DATE_FORMAT.format(date);
	}"
8213,getReqDate,"	public static String getReqDate() {
		return SHORTDATEFORMAT.format(new Date());
	}"
8214,nowTimeStamp,"	public static Timestamp nowTimeStamp() {
		return new Timestamp(nowTimeMillis());
	}"
8215,nowTimeMillis,"	public static long nowTimeMillis() {
		return System.currentTimeMillis();
	}"
8217,compareDate,"	public static int compareDate(Date date, Date otherDate, int withUnit) {
		Calendar dateCal = Calendar.getInstance();
		dateCal.setTime(date);
		Calendar otherDateCal = Calendar.getInstance();
		otherDateCal.setTime(otherDate);

		switch (withUnit) {
		case Calendar.YEAR:"
8218,parseDate,"	public static Date parseDate(String str, String parsePatterns) {
		try {
			return parseDate(str, new String[] { parsePatterns });"
8220,getDateByDayNum,"	public static String getDateByDayNum(int dayNum) {
		SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd"");
		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date());
		cal.add(Calendar.DAY_OF_MONTH, -dayNum);
		String result = sdf.format(cal.getTime());
		return result;
	}"
8224,getKeyManagerFactory,"	KeyManagerFactory getKeyManagerFactory(){
		return keyManagerFactory;
	}"
8225,getEnum,"    public static CardTypeEnum getEnum(String enumName) {
		CardTypeEnum resultEnum = null;
		CardTypeEnum[] enumAry = CardTypeEnum.values();
		for (int i = 0; i < enumAry.length; i++) {
			if (enumAry[i].name().equals(enumName)) {
				resultEnum = enumAry[i];"
8226,toList,"    public static List toList() {
        CardTypeEnum[] ary = CardTypeEnum.values();
        List list = new ArrayList();
        for (int i = 0; i < ary.length; i++) {
            Map<String, String> map = new HashMap<String, String>();
            map.put(""desc"", ary[i].getDesc());"
8227,toMap,"    public static Map<String, Map<String, Object>> toMap() {
        CardTypeEnum[] ary = CardTypeEnum.values();
        Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
        for (int num = 0; num < ary.length; num++) {
            Map<String, Object> map = new HashMap<String, Object>();
            String key = ary[num].name();"
8230,getJsonStr,"	public static String getJsonStr() {
		BusCategoryEnum[] enums = BusCategoryEnum.values();
		StringBuffer jsonStr = new StringBuffer(""["");
		for (BusCategoryEnum senum : enums) {
			if (!""["".equals(jsonStr.toString())) {
				jsonStr.append("","");
			}"
8231,toList,"	public static List toList() {
		BusCategoryEnum[] ary = BusCategoryEnum.values();
		List list = new ArrayList();
		for (int i = 0; i < ary.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put(""name"", ary[i].name());"
8232,toMap,"	public static Map<String, Map<String, Object>> toMap() {
		BusCategoryEnum[] ary = BusCategoryEnum.values();
		Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
		for (int num = 0; num < ary.length; num++) {
			Map<String, Object> map = new HashMap<String, Object>();
			String key = ary[num].name();"
8233,getEnum,"	public static BusCategoryEnum getEnum(String enumName) {
		BusCategoryEnum resultEnum = null;
		BusCategoryEnum[] enumAry = BusCategoryEnum.values();
		for (int i = 0; i < enumAry.length; i++) {
			if (enumAry[i].name().equals(enumName)) {
				resultEnum = enumAry[i];"
8236,setCode,"	public void setCode(String code) {
		this.code = code;
	}"
8238,setEndTime,"	public void setEndTime(String endTime) {
		this.endTime = endTime;
	}"
8239,getEndTime,"	public String getEndTime() {
		return endTime;
	}"
8240,setBeginTime,"	public void setBeginTime(String beginTime) {
		this.beginTime = beginTime;
	}"
8241,getBeginTime,"	public String getBeginTime() {
		return beginTime;
	}"
8242,setMaxAmount,"	public void setMaxAmount(String maxAmount) {
		this.maxAmount = maxAmount;
	}"
8243,getMaxAmount,"	public String getMaxAmount() {
		return maxAmount;
	}"
8244,setMinAmount,"	public void setMinAmount(String minAmount) {
		this.minAmount = minAmount;
	}"
8245,getMinAmount,"	public String getMinAmount() {
		return minAmount;
	}"
8246,buildReconciliationNo,"	public String buildReconciliationNo() {
		String batchNo = RECONCILIATION_BATCH_NO + IdWorker.getId();
		return batchNo;
	}"
8247,buildBankOrderNo,"	public String buildBankOrderNo() {
		String bankOrderNo = BANK_ORDER_NO_PREFIX + IdWorker.getId();
		return bankOrderNo;
	}"
8248,buildTrxNo,"	public String buildTrxNo() {
		String trxNo = TRX_NO_PREFIX + IdWorker.getId();
		return trxNo;
	}"
8249,buildAccountNo,"	public String buildAccountNo() {
		String accountNo = ACCOUNT_NO_PREFIX + IdWorker.getId();
		return accountNo;
	}"
8250,buildUserNo,"	public String buildUserNo() {
		String userNo = USER_NO_PREFIX + IdWorker.getId() ;
		return userNo;
	}"
8257,getEnum,"	public static BatchStatusEnum getEnum(String name) {
		BatchStatusEnum[] arry = BatchStatusEnum.values();
		for (int i = 0; i < arry.length; i++) {
			if (arry[i].name().equals(name)) {
				return arry[i];"
8273,setId,"	public void setId(String id) {
		this.id = id;
	}"
8275,removeWhiteSpace,"    private static int removeWhiteSpace(char[] data)
    {
        if (data == null)
        {
            return 0;
        }
"
8278,isData,"    private static boolean isData(char octect)
    {
        return (octect < BASELENGTH && base64Alphabet[octect] != -1);"
8279,isPad,"    private static boolean isPad(char octect)
    {
        return (octect == PAD);"
8280,isWhiteSpace,"    private static boolean isWhiteSpace(char octect)
    {
        return (octect == 0x20 || octect == 0xd || octect == 0xa || octect == 0x9);"
8281,getJsonStr,"	public static String getJsonStr() {
		BankCodeEnum[] enums = BankCodeEnum.values();
		StringBuffer jsonStr = new StringBuffer(""["");
		for (BankCodeEnum senum : enums) {
			if (!""["".equals(jsonStr.toString())) {
				jsonStr.append("","");
			}"
8282,toList,"	public static List toList() {
		BankCodeEnum[] ary = BankCodeEnum.values();
		List list = new ArrayList();
		for (int i = 0; i < ary.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put(""name"", ary[i].name());"
8283,toMap,"	public static Map<String, Map<String, Object>> toMap() {
		BankCodeEnum[] ary = BankCodeEnum.values();
		Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
		for (int num = 0; num < ary.length; num++) {
			Map<String, Object> map = new HashMap<String, Object>();
			String key = ary[num].name();"
8284,getEnum,"	public static BankCodeEnum getEnum(String enumName) {
		BankCodeEnum resultEnum = null;
		BankCodeEnum[] enumAry = BankCodeEnum.values();
		for (int i = 0; i < enumAry.length; i++) {
			if (enumAry[i].name().equals(enumName)) {
				resultEnum = enumAry[i];"
8287,getEnum,"    public static BankAccountTypeEnum getEnum(String enumName) {
		BankAccountTypeEnum resultEnum = null;
		BankAccountTypeEnum[] enumAry = BankAccountTypeEnum.values();
		for (int i = 0; i < enumAry.length; i++) {
			if (enumAry[i].name().equals(enumName)) {
				resultEnum = enumAry[i];"
8288,toList,"    public static List toList() {
        BankAccountTypeEnum[] ary = BankAccountTypeEnum.values();
        List list = new ArrayList();
        for (int i = 0; i < ary.length; i++) {
            Map<String, String> map = new HashMap<String, String>();
            map.put(""desc"", ary[i].getDesc());"
8289,toMap,"    public static Map<String, Map<String, Object>> toMap() {
        BankAccountTypeEnum[] ary = BankAccountTypeEnum.values();
        Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
        for (int num = 0; num < ary.length; num++) {
            Map<String, Object> map = new HashMap<String, Object>();
            String key = ary[num].name();"
8296,setAuthMsg,"    public void setAuthMsg(String authMsg) {
        this.authMsg = authMsg;
    }"
8297,getAuthMsg,"    public String getAuthMsg() {
        return authMsg;
    }"
8298,setAuthStatusEnum,"    public void setAuthStatusEnum(AuthStatusEnum authStatusEnum) {
        this.authStatusEnum = authStatusEnum;
    }"
8299,getAuthStatusEnum,"    public AuthStatusEnum getAuthStatusEnum() {
        return authStatusEnum;
    }"
8314,setAuth,"    public void setAuth(boolean auth) {
        isAuth = auth;
    }"
8315,isAuth,"    public boolean isAuth() {
        return isAuth;
    }"
8316,setTradeStatus,"    public void setTradeStatus(TradeStatusEnum tradeStatus) {
        this.tradeStatus = tradeStatus;
    }"
8317,getTradeStatus,"    public TradeStatusEnum getTradeStatus() {
        return tradeStatus;
    }"
8322,setErrCode,"    public void setErrCode(String errCode) {
        this.errCode = errCode;
    }"
8323,getErrCode,"    public String getErrCode() {
        return errCode;
    }"
8324,setMchOrderNo,"    public void setMchOrderNo(String mchOrderNo) {
        this.mchOrderNo = mchOrderNo;
    }"
8325,getMchOrderNo,"    public String getMchOrderNo() {
        return mchOrderNo;
    }"
8380,init,"    private static void init() {
        PAYKEY = properties.getProperty(""pay_key"");
        PAYSECRET = properties.getProperty(""pay_secret"");
        AUTHURL = properties.getProperty(""auth_url"");
        AUTH_ORDER_QUERY_URL = properties.getProperty(""auth_order_query_url"");
        AUTH_AMOUNT = properties.getProperty(""auth_amount"");
    }"
8382,getData,"    public PageListVO getData() {
        return data;
    }"
8385,setData,"    public void setData(PageListVO data) {
        this.data = data;
    }"
8388,main,"	public static void main(String[] args) {
		System.out.println(JSONObject.toJSONString(new ApiCommonResultVo(-1, """", null)));
	}"
8392,setData,"	public void setData(Object data) {
		this.data = data;
	}"
8393,setMsg,"	public void setMsg(String msg) {
		this.msg = msg;
	}"
8394,setCode,"	public void setCode(int code) {
		this.code = code;
	}"
8395,parseNotifyMsg,"    public static Map<String , String> parseNotifyMsg(Map<String, String[]> requestParams){

        Map<String,String> params = new HashMap<String,String>();

        for (Iterator iter = requestParams.keySet().iterator(); iter.hasNext();) {"
8403,setTransDate,"	public void setTransDate(Date transDate) {
		this.transDate = transDate;
	}"
8404,getTransDate,"	public Date getTransDate() {
		return transDate;
	}"
8405,setTransType,"	public void setTransType(String transType) {
		this.transType = transType;
	}"
8406,getTransType,"	public String getTransType() {
		return transType;
	}"
8407,setTradeNo,"	public void setTradeNo(String tradeNo) {
		this.tradeNo = tradeNo;
	}"
8408,getTradeNo,"	public String getTradeNo() {
		return tradeNo;
	}"
8409,setTotalFee,"	public void setTotalFee(BigDecimal totalFee) {
		this.totalFee = totalFee;
	}"
8410,getTotalFee,"	public BigDecimal getTotalFee() {
		return totalFee;
	}"
8411,setBankRate,"	public void setBankRate(BigDecimal bankRate) {
		this.bankRate = bankRate;
	}"
8412,getBankRate,"	public BigDecimal getBankRate() {
		return bankRate;
	}"
8413,setMerchantOrderNo,"	public void setMerchantOrderNo(String merchantOrderNo) {
		this.merchantOrderNo = merchantOrderNo;
	}"
8415,setOutcome,"	public void setOutcome(BigDecimal outcome) {
		this.outcome = outcome;
	}"
8416,getOutcome,"	public BigDecimal getOutcome() {
		return outcome;
	}"
8417,setIncome,"	public void setIncome(BigDecimal income) {
		this.income = income;
	}"
8418,getIncome,"	public BigDecimal getIncome() {
		return income;
	}"
8419,setGoodsTitle,"	public void setGoodsTitle(String goodsTitle) {
		this.goodsTitle = goodsTitle;
	}"
8420,getGoodsTitle,"	public String getGoodsTitle() {
		return goodsTitle;
	}"
8421,setBuyerAccount,"	public void setBuyerAccount(String buyerAccount) {
		this.buyerAccount = buyerAccount;
	}"
8422,getBuyerAccount,"	public String getBuyerAccount() {
		return buyerAccount;
	}"
8423,setBalance,"	public void setBalance(BigDecimal balance) {
		this.balance = balance;
	}"
8424,getBalance,"	public BigDecimal getBalance() {
		return balance;
	}"
8425,jmsTemplate,"    public JmsTemplate jmsTemplate(@Qualifier(""connectionFactory"") SingleConnectionFactory singleConnectionFactory) {
        JmsTemplate notifyJmsTemplate = new JmsTemplate();
        notifyJmsTemplate.setConnectionFactory(singleConnectionFactory);
        notifyJmsTemplate.setDefaultDestinationName(orderQueryDestinationName);
        return notifyJmsTemplate;
    }"
8426,notifyJmsTemplate,"    public JmsTemplate notifyJmsTemplate(@Qualifier(""connectionFactory"") SingleConnectionFactory singleConnectionFactory) {
        JmsTemplate notifyJmsTemplate = new JmsTemplate();
        notifyJmsTemplate.setConnectionFactory(singleConnectionFactory);
        notifyJmsTemplate.setDefaultDestinationName(tradeQueueDestinationName);
        return notifyJmsTemplate;
    }"
8427,pooledConnectionFactory,"    public PooledConnectionFactory pooledConnectionFactory(@Qualifier(""targetConnectionFactory"") ActiveMQConnectionFactory activeMQConnectionFactory) {
        PooledConnectionFactory pooledConnectionFactory = new PooledConnectionFactory();
        pooledConnectionFactory.setConnectionFactory(activeMQConnectionFactory);
        pooledConnectionFactory.setMaxConnections(maxConnections);
        return pooledConnectionFactory;
    }"
8428,singleConnectionFactory,"    public SingleConnectionFactory singleConnectionFactory(@Qualifier(""pooledConnectionFactory"") PooledConnectionFactory pooledConnectionFactory) {
        SingleConnectionFactory singleConnectionFactory = new SingleConnectionFactory();
        singleConnectionFactory.setTargetConnectionFactory(pooledConnectionFactory);
        return singleConnectionFactory;
    }"
8429,activeMQConnectionFactory,"    public ActiveMQConnectionFactory activeMQConnectionFactory() {
        ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory();
        activeMQConnectionFactory.setBrokerURL(mqBrokerURL);
        activeMQConnectionFactory.setUserName(mqUserName);
        activeMQConnectionFactory.setPassword(mqPassword);
        return activeMQConnectionFactory;
    }"
8430,toList,"	public static List toList() {
		AccountTypeEnum[] ary = AccountTypeEnum.values();
		List list = new ArrayList();
		for (int i = 0; i < ary.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put(""desc"", ary[i].getDesc());"
8431,toMap,"	public static Map<String, Map<String, Object>> toMap() {
		AccountTypeEnum[] ary = AccountTypeEnum.values();
		Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
		for (int num = 0; num < ary.length; num++) {
			Map<String, Object> map = new HashMap<String, Object>();
			String key = ary[num].name();"
8432,getEnum,"	public static AccountTypeEnum getEnum(String enumName) {
		AccountTypeEnum resultEnum = null;
		AccountTypeEnum[] enumAry = AccountTypeEnum.values();
		for (int i = 0; i < enumAry.length; i++) {
			if (enumAry[i].name().equals(enumName)) {
				resultEnum = enumAry[i];"
8435,getEnum,"	public static AccountFundDirectionEnum getEnum(String name) {
		AccountFundDirectionEnum resultEnum = null;
		AccountFundDirectionEnum[] enumAry = AccountFundDirectionEnum.values();
		for (int i = 0; i < enumAry.length; i++) {
			if (enumAry[i].name().equals(name)) {
				resultEnum = enumAry[i];"
8436,getList,"	public static List<Map<String, Object>> getList() {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		AccountFundDirectionEnum[] val = AccountFundDirectionEnum.values();
		for (AccountFundDirectionEnum e : val) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put(""label"", e.getLabel());"
8437,setLabel,"	public void setLabel(String label) {
		this.label = label;
	}"
8438,getLabel,"	public String getLabel() {
		return label;
	}"
8439,print,"	public AccountBizException print() {
		logger.info(""==>BizException, code:"" + this.code + "", msg:"" + this.msg);
		return this;
	}"
8440,newInstance,"	public AccountBizException newInstance(String msgFormat, Object... args) {
		return new AccountBizException(this.code, msgFormat, args);
	}"
8442,toQualifiedClassName,"	private String toQualifiedClassName(JPackage pkg, String fileName) {
		int suffixPosition = fileName.lastIndexOf('.');
		String className = fileName.substring(0, suffixPosition);
		String qualifiedClassName = pkg.name() + ""."" + className;
		return qualifiedClassName;
	}"
8443,openBinary,"	public OutputStream openBinary(JPackage pkg, String fileName) throws IOException {
		String qualifiedClassName = toQualifiedClassName(pkg, fileName);

		JavaFileObject sourceFile = filer.createSourceFile(qualifiedClassName);
"
8444,writeTo,"	void writeTo(AbstractCodeWriter output) throws IOException;
}"
8451,dependentProperties,"	public Set<String> dependentProperties() {

		return dependentProperties;"
8452,property,"	public String property() {

		return property;"
8454,defineFields,"	public void defineFields() {
		JFieldVar var = definedClass.field(JMod.FINAL, presentationModelClass, ""presentationModel"");
		presentationModelField = JExpr.refthis(var.name());
		presentationModelFieldWithoutThis = JExpr.ref(var.name());
	}"
8455,getPresentationModelObjectTypeName,"	public String getPresentationModelObjectTypeName() {

		return presentationModelObjectTypeName;"
8456,getPresentationModelTypeName,"	public String getPresentationModelTypeName() {

		return presentationModelTypeName;"
8457,eventMethods,"	public Set<EventMethodInfo> eventMethods() {

		return Collections.unmodifiableSet(eventMethods);"
8458,propertyDependencies,"	public Set<PropertyDependencyInfo> propertyDependencies() {

		return Collections.unmodifiableSet(propertyDependencies);"
8459,dataSetProperties,"	public Set<DataSetPropertyInfo> dataSetProperties() {

		return Collections.unmodifiableSet(dataSetProperties);"
8460,dataSetPropertyNames,"	public Set<String> dataSetPropertyNames() {

		Set<String> names = new TreeSet<String>();

		for(DataSetPropertyInfo propertyInfo : dataSetProperties()) {"
8461,properties,"	public Set<PropertyInfo> properties() {

		return Collections.unmodifiableSet(properties);"
8462,propertyNames,"	public Set<String> propertyNames() {

		Set<String> names = new TreeSet<String>();

		for(PropertyInfo propertyInfo : properties()) {"
8464,defineFields,"	public void defineFields() {
		JFieldVar var = definedClass.field(JMod.FINAL, presentationModelClass, ""itemPresentationModel"");
		presentationModelField = JExpr.refthis(var.name());
		presentationModelFieldWithoutThis = JExpr.ref(var.name());
	}"
8470,preInitializingViews,"	PreInitializingViews preInitializingViews();
"
8474,isCreatedByFactoryMethodWithoutArg,"	boolean isCreatedByFactoryMethodWithoutArg();
"
8476,itemPresentationModelObjectTypeName,"	String itemPresentationModelObjectTypeName();
"
8479,dataSetImplementationType,"	Class<? extends AbstractDataSet> dataSetImplementationType();
"
8483,defineTryToCreateFunction,"	public void defineTryToCreateFunction() {

		JMethod method = declarePublicMethodOverride(""tryToCreateFunction"", Function.class);

		JVar methodDescriptorParam = method.param(MethodDescriptor.class, ""methodDescriptor"");

		"
8484,defineTryToCreateDataSetProperty,"	public void defineTryToCreateDataSetProperty() {

		JMethod method = declarePublicMethodOverride(""tryToCreateDataSetProperty"", DataSetProperty.class);

		JVar nameParam = method.param(String.class, ""name"");

		"
8485,declarePublicMethodOverride,"	private static JMethod declarePublicMethodOverride(JDefinedClass definedClass, String methodName, Class<?> returnType) {

		JMethod method = definedClass.method(JMod.PUBLIC, returnType, methodName);

		method.annotate(Override.class);"
8486,declarePublicMethodOverride,"	private JMethod declarePublicMethodOverride(String methodName, Class<?> returnType) {

		return declarePublicMethodOverride(definedClass, methodName, returnType);"
8487,defineTryToCreateProperty,"	public void defineTryToCreateProperty() {

		try{"
8488,defineEventMethods,"	public void defineEventMethods() {

		JMethod method = declarePublicMethodOverride(""eventMethods"", setClassWithMethodDescriptor);

		
"
8489,definePropertyDependencies,"	public void definePropertyDependencies() {

		JMethod method = declarePublicMethodOverride(""propertyDependencies"", mapClassWithStringAndStringSet);

		

		JBlock body = method.body();"
8490,defineDataSetPropertyNames,"	public void defineDataSetPropertyNames() {

		JMethod method = declarePublicMethodOverride(""dataSetPropertyNames"", setClassWithString);
"
8491,newHashSetInvocation,"	private JInvocation newHashSetInvocation(Set<String> stringSet) {

		JInvocation invocation = codeModel.ref(Sets.class).staticInvoke(""newHashSet"");

		for(String str : stringSet) {"
8492,declarePublicMethodOverride,"	private static JMethod declarePublicMethodOverride(JDefinedClass definedClass, String methodName, AbstractJClass returnType) {

		JMethod method = definedClass.method(JMod.PUBLIC, returnType, methodName);

		method.annotate(Override.class);"
8493,declarePublicMethodOverride,"	private JMethod declarePublicMethodOverride(String methodName, AbstractJClass returnType) {

		return declarePublicMethodOverride(definedClass, methodName, returnType);"
8494,definePropertyNames,"	public void definePropertyNames() {

		JMethod method = declarePublicMethodOverride(""propertyNames"", setClassWithString);
"
8497,writeTo,"	public void writeTo(AbstractCodeWriter output) throws IOException {

		codeModel.build(output);"
8498,countdown,"    public void countdown(View v) {
        Intent i = new Intent();
        i.setClass(this, Test2Activity.class);
        startActivity(i);
"
8499,automatic,"    public void automatic(View v) {
        setData();
"
8500,setData,"    private void setData() {
        mlistRing.clear();
        for (int i = 0; i < data.length; i++) {

            Ring r = new Ring();"
8502,onCheckedChanged,"            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {
                mRingProgress.setCorner(b);
"
8504,onStopTrackingTouch,"            public void onStopTrackingTouch(SeekBar seekBar) {
"
8505,onStartTrackingTouch,"            public void onStartTrackingTouch(SeekBar seekBar) {
"
8506,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
                mRingProgress.setSweepAngle((int) (360f * (i / 100f)));
            }"
8509,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
                mRingProgress.setRotateAngle((int) (360f * (i / 100f)));
            }"
8512,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
                mRingProgress.setRingWidthScale(i / 100f);
            }"
8513,Selected,"            public void Selected(Ring r) {
                Toast.makeText(TestActivity.this, r.getName(), Toast.LENGTH_SHORT).show();
            }"
8515,onDestroy,"    protected void onDestroy() {
        super.onDestroy();
        if (mTimerLVRingProgress != null) {
            mTimerLVRingProgress.cancel();"
8517,stopProgressAnim,"    private void stopProgressAnim() {
        if (mTimerLVRingProgress != null) {
            mTimerLVRingProgress.cancel();"
8518,startProgressAnim,"    private void startProgressAnim() {
        if (mValueLVRingProgress == 100)
            mValueLVRingProgress = 0;

        if (mTimerLVRingProgress != null) {
            mTimerLVRingProgress.cancel();"
8519,run,"            public void run() {
                if (mValueLVRingProgress < maxTime) {
"
8520,timerTaskLVRingProgress,"    public void timerTaskLVRingProgress() {
        mTimerLVRingProgress.schedule(new TimerTask() {
            @Override"
8521,stop,"    public void stop(View v) {
        stopProgressAnim();
    }"
8522,start,"    public void start(View v) {
        mRingProgress.stopAnim();
        startProgressAnim();
    }"
8525,unmodifiable,"		static <T> Trie<T> unmodifiable(Trie<T> toWrap)
		{
			return new Unmodifiable<T>(toWrap);"
8526,entrySet,"    		public Set<Entry<CharSequence,T>> entrySet()
		{
			return Collections.unmodifiableSet(super.entrySet());"
8527,values,"    		public Collection<T> values()
		{
			return Collections.unmodifiableCollection(super.values());"
8528,keySet,"    		public Set<CharSequence> keySet()
		{
			return Collections.unmodifiableSet(super.keySet());"
8529,clear,"    		public void clear()
		{
			throw new UnsupportedOperationException(""Unmodifiable Trie"");"
8530,putAll,"    		public void putAll(Map<? extends CharSequence,? extends T> t)
		{
			throw new UnsupportedOperationException(""Unmodifiable Trie"");"
8531,remove,"    		public T remove(CharSequence key)
		{
			throw new UnsupportedOperationException(""Unmodifiable Trie"");"
8532,put,"    		public T put(CharSequence key, T value)
		{
			throw new UnsupportedOperationException(""Unmodifiable Trie"");"
8533,hashCode,"    		public int hashCode()
		{
			return wrapped.hashCode();"
8534,equals,"    		public boolean equals(Object other)
		{
			return wrapped.equals(other);"
8535,entrySet,"    		public Set<Entry<CharSequence,T>> entrySet()
		{
			return wrapped.entrySet();"
8536,values,"    		public Collection<T> values()
		{
			return wrapped.values();"
8537,keySet,"    		public Set<CharSequence> keySet()
		{
			return wrapped.keySet();"
8538,clear,"    		public void clear()
		{
			wrapped.clear();"
8539,putAll,"    		public void putAll(Map<? extends CharSequence,? extends T> t)
		{
			wrapped.putAll(t);"
8540,remove,"    		public T remove(Object key)
		{
			return wrapped.remove(key);"
8541,put,"    		public T put(CharSequence key, T value)
		{
			return wrapped.put(key, value);"
8542,get,"    		public T get(Object key)
		{
			return wrapped.get(key);"
8543,containsValue,"    		public boolean containsValue(Object val)
		{
			return wrapped.containsValue(val);"
8544,containsKey,"    		public boolean containsKey(Object key)
		{
			return wrapped.containsKey(key);"
8545,isEmpty,"    		public boolean isEmpty()
		{
			return wrapped.isEmpty();"
8546,size,"    		public int size()
		{
			return wrapped.size();"
8547,getMaxKeyLength,"		public int getMaxKeyLength()
		{
			return wrapped.getMaxKeyLength();"
8548,getLongestMatch,"		public Map.Entry<CharSequence,T> getLongestMatch(PushbackReader keyIn) throws IOException
		{
			return wrapped.getLongestMatch(keyIn);"
8549,getLongestMatch,"		public Map.Entry<CharSequence,T> getLongestMatch(CharSequence key)
		{
			return wrapped.getLongestMatch(key);"
8550,getWrapped,"		protected Trie<T> getWrapped()
		{
			return wrapped;"
8552,getLongestMatch,"	public Map.Entry<CharSequence,T> getLongestMatch(PushbackReader keyIn) throws IOException;
	public int getMaxKeyLength();"
8553,getLongestMatch,"	public Map.Entry<CharSequence,T> getLongestMatch(CharSequence key);
	public Map.Entry<CharSequence,T> getLongestMatch(PushbackReader keyIn) throws IOException;"
8554,remainder,"    public String remainder() {
        String output = input.substring(index);
        if (pushback != null) {
            output = pushback + output;
        }"
8555,reset,"    public void reset() {
        pushback = temp;
        index = mark;
    }"
8556,mark,"    public void mark() {
        temp = pushback;
        mark = index;
    }"
8557,peek,"    public boolean peek(Character c) {
        if (pushback != null && pushback.charValue() == c) {
            return true;
        }
        if (input == null) {
            return false;
        }"
8558,peek,"    public Character peek() {
        if (pushback != null) {
            return pushback;
        }
        if (input == null) {
            return null;
        }"
8559,nextOctal,"    public Character nextOctal() {
        Character c = next();
        if (c == null) {
            return null;
        }
        if (isOctalDigit(c)) {"
8560,nextHex,"    public Character nextHex() {
        Character c = next();
        if (c == null) {
            return null;
        }
        if (isHexDigit(c)) {"
8561,next,"    public Character next() {
        if (pushback != null) {
            Character save = pushback;
            pushback = null;
            return save;
        }
        if (input == null) {"
8562,hasNext,"    public boolean hasNext() {
        if (pushback != null) {
            return true;
        }
        if (input == null) {
            return false;
        }"
8563,index,"    public int index() {
        return index;
    }"
8564,isOctalDigit,"    public static boolean isOctalDigit(Character c) {
        if (c == null) {
            return false;
        }
        char ch = c.charValue();"
8565,isHexDigit,"    public static boolean isHexDigit(Character c) {
        if (c == null) {
            return false;
        }
        char ch = c.charValue();"
8569,peek,"    public boolean peek(Integer c) {
        if (pushback != null && pushback.intValue() == c) {
            return true;
        }
        if (input == null) {
            return false;
        }"
8570,peek,"    public Integer peek() {
        if (pushback != null) {
            return pushback;
        }
        if (input == null) {
            return null;
        }"
8571,nextOctal,"    public Integer nextOctal() {
        Integer c = next();
        if (c == null) {
            return null;
        }
        if (isOctalDigit(c)) {"
8572,nextHex,"    public Integer nextHex() {
        Integer c = next();
        if (c == null) {
            return null;
        }
        if (isHexDigit(c)) {"
8573,next,"    public Integer next() {
        if (pushback != null) {
            Integer save = pushback;
            pushback = null;
            return save;
        }
        if (input == null) {
            return null;
        }"
8574,isOctalDigit,"    public static boolean isOctalDigit(Integer c) {
        if (c == null) {
            return false;
        }
        Integer ch = Integer.valueOf(c);"
8575,isHexDigit,"    public static boolean isHexDigit(Integer c) {
        if (c == null) {
            return false;
        }
        Integer ch = Integer.valueOf(c);"
8588,encodeCharacter,"    public String encodeCharacter(char[] immune, Character c) {
        if (c.charValue() == '\'') {
            return ""\'\'"";
        }"
8589,getInstance,"    public static OracleCodec getInstance() {
        return instance;
    }"
8590,findByKey,"        static Mode findByKey(int key) {
            for (Mode m : values()) {
                if (m.key == key) {
                    return m;"
8593,decodeCharacter,"    public Character decodeCharacter(PushbackSequence<Character> input) {
        switch (mode) {
            case ANSI:
                return decodeCharacterANSI(input);"
8594,encodeCharacterMySQL,"    private String encodeCharacterMySQL(Character c) {
        char ch = c.charValue();
        if (ch == 0x00) {
            return ""\\0"";
        }
        if (ch == 0x08) {
            return ""\\b"";
        }
        if (ch == 0x09) {
            return ""\\t"";
        }
        if (ch == 0x0a) {
            return ""\\n"";
        }
        if (ch == 0x0d) {"
8595,encodeCharacterANSI,"    private String encodeCharacterANSI(Character c) {
        if (c == '\'') {
            return ""\'\'"";
        }
        if (c == '\""') {"
8597,getInstance,"    public static MySQLCodec getInstance() {
        return instance;
    }"
8600,mkEntityToCharacterTrie,"	private static synchronized Trie<Integer> mkEntityToCharacterTrie()
	{
		Trie<Integer> trie = new HashTrie<Integer>();

		for(Map.Entry<Integer, String> entry : characterToEntityMap.entrySet())"
8605,getNumericEntity,"	private Integer getNumericEntity(PushbackSequence<Integer> input ) {
		Integer first = input.peek();
		if ( first == null ) return null;

		if (first == 'x' || first == 'X' ) {
			input.next();"
8608,encode,"	public String encode(char[] immune, String input) {
		StringBuilder sb = new StringBuilder();
		for(int offset  = 0; offset < input.length(); ){
			final int point = input.codePointAt(offset);
			if(Character.isValidCodePoint(point)){"
8609,isEmpty,"	public boolean isEmpty()
	{
		return(size() == 0);"
8610,toString,"	public String toString()
	{
		StringBuilder sb;
		boolean first;

		if(isEmpty())
			return ""{}"";
		sb = new StringBuilder();
		first = true;
		sb.append(""{ "");
		for(Map.Entry<CharSequence,T> entry : entrySet())"
8612,equals,"	public boolean equals(Object other)
	{
		if(other == null)
			return false;
		if(!(other instanceof Map))"
8614,get,"	public T get(Object key)
	{
		if(root == null || key == null)
			return null;
		if(!(key instanceof CharSequence))"
8615,entrySet,"	public Set<Map.Entry<CharSequence,T>> entrySet()
	{
		Set<Map.Entry<CharSequence,T>> entries = new HashSet<Map.Entry<CharSequence,T>>(size());

		if(root == null)"
8616,values,"	public Collection<T> values()
	{
		ArrayList<T> values = new ArrayList<T>(size());

		if(root == null)"
8617,keySet,"	public Set<CharSequence> keySet()
	{
		Set<CharSequence> keys = new HashSet<CharSequence>(size);
		
		if(root == null)"
8618,putAll,"	public void putAll(Map<? extends CharSequence, ? extends T> map)
	{
		for(Map.Entry<? extends CharSequence, ? extends T> entry : map.entrySet())"
8619,remove,"	public T remove(Object key) throws UnsupportedOperationException
	{
		throw new UnsupportedOperationException();"
8620,put,"	public T put(CharSequence key, T value) throws NullPointerException
	{
		int len;
		T old;

		if(key == null)
			throw new NullPointerException(""Null keys are not handled"");
		if(value == null)
			throw new NullPointerException(""Null values are not handled"");
		if(root == null)
			root = new Node<T>();"
8621,containsValue,"	public boolean containsValue(Object value)
	{
		if(root == null)
			return false;"
8622,containsKey,"	public boolean containsKey(Object key)
	{
		return (get(key) != null);"
8623,clear,"	public void clear()
	{
		root = null;
		maxKeyLen = -1;
		size = 0;"
8624,getMaxKeyLength,"	public int getMaxKeyLength()
	{
		return maxKeyLen;"
8625,getLongestMatch,"	public Map.Entry<CharSequence,T> getLongestMatch(PushbackReader keyIn) throws IOException
	{
		if(root == null || keyIn == null)
			return null;"
8626,getLongestMatch,"	public Map.Entry<CharSequence,T> getLongestMatch(CharSequence key)
	{
		if(root == null || key == null)
			return null;"
8629,values,"		Collection<T> values(Collection<T> values)
		{
			if(value != null)
				values.add(value);
			if(nextMap == null)
				return values;"
8630,containsValue,"		boolean containsValue(Object toFind)
		{
			if(value != null && toFind.equals(value))
				return true;
			if(nextMap == null)
				return false;"
8631,remap,"		void remap()
		{
			if(nextMap == null)
				return;
			nextMap = newNodeMap(nextMap);"
8636,getNextNode,"		Node<T> getNextNode(Character ch)
		{
			if(nextMap == null)
				return null;"
8637,setValue,"		void setValue(T value)
		{
			this.value = value;"
8638,newNodeMap,"		private static <T> Map<Character,Node<T>> newNodeMap(Map<Character,Node<T>> prev)
		{
			return new HashMap<Character,Node<T>>(prev);"
8639,newNodeMap,"		private static <T> Map<Character,Node<T>> newNodeMap()
		{
			return new HashMap<Character,Node<T>>();"
8640,toString,"		public String toString()
		{
			return NullSafe.toString(key) + "" => "" + NullSafe.toString(value);"
8641,hashCode,"		public int hashCode()
		{
			return NullSafe.hashCode(key) ^ NullSafe.hashCode(value);"
8642,equals,"		public boolean equals(Object o)
		{
			if(o instanceof Map.Entry)
				return equals((Map.Entry)o);"
8643,equals,"		public boolean equals(Map.Entry other)
		{
			return (NullSafe.equals(key, other.getKey()) && NullSafe.equals(value, other.getValue()));"
8644,setValue,"		public T setValue(T value)
		{
			throw new UnsupportedOperationException();"
8646,getKey,"		public CharSequence getKey()
		{
			return key;"
8647,newInstanceIfNeeded,"		static <T> Entry<T> newInstanceIfNeeded(CharSequence key, T value)
		{
			if(value == null || key == null)
				return null;"
8648,newInstanceIfNeeded,"		static <T> Entry<T> newInstanceIfNeeded(CharSequence key, int keyLength, T value)
		{
			if(value == null || key == null)
				return null;
			if(key.length() > keyLength)"
8649,decodeCharacter,"    public Character decodeCharacter(PushbackString input) {

        input.mark();
        Character first = input.next();

        if (first == null) {
            input.reset();
            return null;
        }
"
8650,encodeCharacter,"    public String encodeCharacter(char[] immune, Character c) {

        if (c.charValue() == '\'') {
            return ""\'\'"";
        }"
8651,getInstance,"    public static DB2Codec getInstance() {
        return instance;
    }"
8652,containsCharacter,"	public boolean containsCharacter( char c, char[] array );
"
8656,getHexForNonAlphanumeric,"	public String getHexForNonAlphanumeric(int c);
"
8657,getHexForNonAlphanumeric,"	public String getHexForNonAlphanumeric(char c);
	"
8658,decodeCharacter,"	public T decodeCharacter( PushbackSequence<T> input );
"
8660,encodeCharacter,"	public String encodeCharacter( char[] immune, int codePoint );
"
8661,encodeCharacter,"	public String encodeCharacter( char[] immune, Character c );
	"
8662,encode,"	public String encode(char[] immune, String input);
"
8665,pushback,"    public void pushback(T c) {
        pushback = c;
    }"
8666,decode,"	public String decode(String input) {
		StringBuilder sb = new StringBuilder();
		PushbackSequence<Integer> pbs = new PushBackSequenceImpl(input);
		while (pbs.hasNext()) {
			Integer c = decodeCharacter(pbs);
			boolean isValid = null == c ? false:Character.isValidCodePoint(c);"
8667,containsCharacter,"    public boolean containsCharacter(char c, char[] array) {
        for (char ch : array) {
            if (c == ch) {
                return true;"
8668,toHex,"    public String toHex(int c) {
        return Integer.toHexString(c);
    }"
8669,toHex,"    public String toHex(char c) {
        return Integer.toHexString(c);
    }"
8670,toOctal,"    public String toOctal(char c) {
        return Integer.toOctalString(c);
    }"
8671,getHexForNonAlphanumeric,"    public String getHexForNonAlphanumeric(int c) {
        if (c < 0xFF) {
            return hex[c];"
8672,getHexForNonAlphanumeric,"    public String getHexForNonAlphanumeric(char c) {
        if (c < 0xFF){
            return hex[c];
        }"
8673,decodeCharacter,"	public T decodeCharacter( PushbackSequence<T> input ) {
		return input.next();
	}"
8674,encodeCharacter,"    public String encodeCharacter(char[] immune, int codePoint) {
        String rval = """";
        if (Character.isValidCodePoint(codePoint)) {
            rval = new StringBuilder().appendCodePoint(codePoint).toString();
        }"
8675,encodeCharacter,"    public String encodeCharacter(char[] immune, char c) {
        throw new IllegalArgumentException(""You tried to call encodeCharacter with a char.  Nope.  Use Character instead!"");
    }"
8676,encodeCharacter,"    public String encodeCharacter(char[] immune, Character c) {
        return """" + c;
    }"
8677,encode,"    public String encode(char[] immune, String input) {
        StringBuilder sb = new StringBuilder();
        for (int offset = 0; offset < input.length(); ) {
            final int point = input.codePointAt(offset);
            if (isBmpCodePoint(point)) {"
8679,decode,"	public String decode(String input) {
		StringBuilder sb = new StringBuilder();
		PushbackSequence<Character> pbs = new PushbackString(input);
		while (pbs.hasNext()) {
			Character c = decodeCharacter(pbs);
			if (c != null) {"
8680,hashCode,"  public int hashCode() {
    return thumbnail.hashCode();
  }"
8681,equals,"  @Override public boolean equals(Object obj) {
    if (obj instanceof Video) {
      Video other = (Video) obj;"
8682,setLive,"  public void setLive(boolean live) {
    this.live = live;
  }"
8683,isLive,"  public boolean isLive() {
    return live;
  }"
8684,setTitle,"  public void setTitle(String title) {
    this.title = title;
  }"
8685,getTitle,"  public String getTitle() {
    return title;
  }"
8686,setThumbnail,"  public void setThumbnail(String resourceThumbnail) {
    this.thumbnail = resourceThumbnail;
  }"
8687,getThumbnail,"  public String getThumbnail() {
    return thumbnail;
  }"
8688,setLiked,"  public void setLiked(boolean liked) {
    this.liked = liked;
  }"
8689,isLiked,"  public boolean isLiked() {
    return liked;
  }"
8690,setFavorite,"  public void setFavorite(boolean favorite) {
    this.favorite = favorite;
  }"
8691,isFavorite,"  public boolean isFavorite() {
    return favorite;
  }"
8692,getValueForIndex,"  private String getValueForIndex(int randomIndex) {
    int i = 0;
    for (String index : VIDEO_INFO.keySet()) {
      if (i == randomIndex) {
        return VIDEO_INFO.get(index);"
8693,getKeyForIndex,"  private String getKeyForIndex(int randomIndex) {
    int i = 0;
    for (String index : VIDEO_INFO.keySet()) {
      if (i == randomIndex) {
        return index;"
8694,configureTitleAndThumbnail,"  private void configureTitleAndThumbnail(final Video video) {
    int maxInt = VIDEO_INFO.size();
    int randomIndex = random.nextInt(maxInt);
    String title = getKeyForIndex(randomIndex);
    video.setTitle(title);
    String thumbnail = getValueForIndex(randomIndex);
    video.setThumbnail(thumbnail);
  }"
8695,configureLiveStatus,"  private void configureLiveStatus(final Video video) {
    boolean live = random.nextBoolean();
    video.setLive(live);
  }"
8696,configureFavoriteStatus,"  private void configureFavoriteStatus(final Video video) {
    boolean favorite = random.nextBoolean();
    video.setFavorite(favorite);
  }"
8697,configureLikeStatus,"  private void configureLikeStatus(final Video video) {
    boolean liked = random.nextBoolean();
    video.setLiked(liked);
  }"
8698,generateRandomVideo,"  private Video generateRandomVideo() {
    Video video = new Video();
    configureFavoriteStatus(video);
    configureLikeStatus(video);
    configureLiveStatus(video);
    configureTitleAndThumbnail(video);
    return video;
  }"
8700,generate,"  public List<Video> generate(final int videoCount) {
    List<Video> videos = new LinkedList<Video>();
    for (int i = 0; i < videoCount; i++) {
      Video video = generateRandomVideo();
      videos.add(video);"
8702,getReactNativeHost,"  public ReactNativeHost getReactNativeHost() {
    return mReactNativeHost;
  }"
8703,getJSMainModuleName,"    protected String getJSMainModuleName() {
      return ""index"";
    }"
8704,getPackages,"    protected List<ReactPackage> getPackages() {
      return Arrays.<ReactPackage>asList(
          new MainReactPackage()"
8705,getUseDeveloperSupport,"    public boolean getUseDeveloperSupport() {
      return BuildConfig.DEBUG;
    }"
8706,getMainComponentName,"    protected String getMainComponentName() {
        return ""PickerTest"";
    }"
8707,getScreenOrientation,"    public static int getScreenOrientation(Context context)
    {
        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        Display display = wm.getDefaultDisplay();

        int orientation;
        if(display.getWidth()==display.getHeight()){"
8708,getScreenResolution,"    public static Point getScreenResolution(Context context) {
        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        Display display = wm.getDefaultDisplay();
        Point screenResolution = new Point();
        if (android.os.Build.VERSION.SDK_INT >= 13) {
            display.getSize(screenResolution);
        } else {"
8709,setFlash,"    public void setFlash(boolean flag) {
        if(mCamera != null && mCameraManager.isFlashSupported(mCamera)) {
            Camera.Parameters parameters = mCamera.getParameters();"
8710,onResume,"    public void onResume() {
        startCameraPreview();
    }"
8711,onPause,"    public void onPause() {
        stopCameraPreview();
    }"
8712,surfaceChanged,"    public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
        if(holder.getSurface() == null) {
            return;
        }"
8713,surfaceDestroyed,"    public void surfaceDestroyed(SurfaceHolder holder) {
        stopCamera();
    }"
8714,surfaceCreated,"    public void surfaceCreated(SurfaceHolder holder) {
        mSurfaceCreated = true;
        startCamera();
    }"
8715,scheduleAutoFocus,"    private void scheduleAutoFocus() {
        mAutoFocusHandler.postDelayed(doAutoFocus, 1000);
    }"
8716,onAutoFocus,"        public void onAutoFocus(boolean success, Camera camera) {
            scheduleAutoFocus();
        }"
8717,run,"        public void run() {
            if(mCamera != null && mPreviewing && mAutoFocus && mSurfaceCreated) {
                safeAutoFocus();"
8718,setAutoFocus,"    public void setAutoFocus(boolean state) {
        if(mCamera != null && mPreviewing) {
            if(state == mAutoFocus) {"
8719,safeAutoFocus,"    public void safeAutoFocus() {
        try {
            mCamera.autoFocus(autoFocusCB);"
8721,stopCameraPreview,"    public void stopCameraPreview() {
        if(mCamera != null) {
            try {"
8722,startCameraPreview,"    public void startCameraPreview() {
        if(mCamera != null) {
            try {"
8723,setCameraType,"    public void setCameraType(String cameraType) {
        mCameraType = cameraType;
        stopCamera();
        startCamera();
    }"
8724,stopCamera,"    public void stopCamera() {
        stopCameraPreview();
        mCameraManager.releaseCamera();
    }"
8725,startCamera,"    public void startCamera() {
        mCamera = mCameraManager.getCamera(mCameraType);
        startCameraPreview();
    }"
8728,getCameraInstance,"    public Camera getCameraInstance(String cameraType) {
        mCameraId = -1;

        Camera.CameraInfo cameraInfo = new Camera.CameraInfo();

        for (int cameraId = 0; cameraId < Camera.getNumberOfCameras(); cameraId++) {"
8729,getCameraInstance,"    public Camera getCameraInstance() {
        return getCameraInstance(-1);
    }"
8731,getCamera,"    public Camera getCamera(String cameraType) {
        if (mCamera == null) {
            mCamera = getCameraInstance(cameraType);
        }"
8732,getCamera,"    public Camera getCamera() {
        if (mCamera == null) {
            mCamera = getCameraInstance();
        }"
8733,onPreviewFrame,"    public void onPreviewFrame(byte[] data, Camera camera) {
        try {
            Camera.Parameters parameters = camera.getParameters();"
8734,stopCamera,"    public void stopCamera() {
        mPreview.stopCamera();
    }"
8735,setFlash,"    public void setFlash(boolean flag) {
        mPreview.setFlash(flag);
    }"
8736,setCameraType,"    public void setCameraType(String cameraType) {
        mPreview.setCameraType(cameraType);
    }"
8739,createViewManagers,"    public List<ViewManager> createViewManagers(
            ReactApplicationContext reactContext) {
        return Arrays.<ViewManager>asList("
8740,createJSModules,"    public List<Class<? extends JavaScriptModule>> createJSModules() {
        return Collections.emptyList();
    }"
8741,createNativeModules,"    public List<NativeModule> createNativeModules(
            ReactApplicationContext reactContext) {
        return Collections.emptyList();"
8743,onHostDestroy,"    public void onHostDestroy() {
        mScannerView.stopCamera();
    }"
8744,onHostPause,"    public void onHostPause() {
        mScannerView.onPause();
    }"
8745,onHostResume,"    public void onHostResume() {
        mScannerView.onResume();
    }"
8746,createViewInstance,"    public BarcodeScannerView createViewInstance(ThemedReactContext context) {
        context.addLifecycleEventListener(this);
        mScannerView = new BarcodeScannerView(context);
        mScannerView.setCameraType(DEFAULT_CAMERA_TYPE);
        mScannerView.setFlash(DEFAULT_TORCH_MODE.equals(""on""));
        mScannerViewVisible = true;
        return mScannerView;
    }"
8747,setTorchMode,"    public void setTorchMode(BarcodeScannerView view, @Nullable String torchMode) {
        if (torchMode != null) {
            view.setFlash(torchMode.equals(""on""));"
8748,setCameraType,"    public void setCameraType(BarcodeScannerView view, @Nullable String cameraType) {
      if (cameraType != null) {
          view.setCameraType(cameraType);"
8749,getName,"    public String getName() {
        return REACT_CLASS;
    }"
8750,getComputedScrollY,"	public int getComputedScrollY() {
		int pos, nScrollY, nItemY;
		View view = null;
		pos = getFirstVisiblePosition();
		view = getChildAt(0);
		nItemY = view.getTop();
		nScrollY = mItemOffsetY[pos] - nItemY;
		return nScrollY;
	}"
8751,scrollYIsComputed,"	public boolean scrollYIsComputed() {
		return scrollIsComputed;
	}"
8752,computeScrollY,"	public void computeScrollY() {
		mHeight = 0;
		mItemCount = getAdapter().getCount();
		if (mItemOffsetY == null) {
			mItemOffsetY = new int[mItemCount];
		}
		for (int i = 0; i < mItemCount; ++i) {"
8753,getListHeight,"	public int getListHeight() {
		return mHeight;
	}"
8754,onTabReselected,"    public void onTabReselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
    }"
8755,onTabUnselected,"    public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
    }"
8756,onTabSelected,"    public void onTabSelected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
        mPager.setCurrentItem(tab.getPosition());
    }"
8757,onPageSelected,"            public void onPageSelected(int position) {
                getActionBar().setSelectedNavigationItem(position);
            }"
8758,getPageTitle,"            public CharSequence getPageTitle(int position) {
                switch (position) {
                    case 0:
                        return getString(R.string.default_fragment);"
8759,getCount,"            public int getCount() {
                return 3;
            }"
8760,getItem,"            public Fragment getItem(int position) {
                switch (position) {
                    case 0:
                        return new DefaultFragment();"
8762,onScrollStateChanged,"			public void onScrollStateChanged(AbsListView view, int scrollState) {
			}"
8763,onScroll,"			public void onScroll(AbsListView view, int firstVisibleItem,
					int visibleItemCount, int totalItemCount) {
				
				mScrollY = 0;
				int translationY = 0;
				
				if (mListView.scrollYIsComputed()) {
					mScrollY = mListView.getComputedScrollY();"
8764,onGlobalLayout,"					public void onGlobalLayout() {
						mQuickReturnHeight = mQuickReturnView.getHeight();
						mListView.computeScrollY();
						mCachedVerticalScrollRange = mListView.getListHeight();
					}"
8765,onActivityCreated,"	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		
		mListView = (QuickReturnListView) getListView();
		
		mQuickReturnView.setText(""Default"");
		mListView.addHeaderView(mHeader);
		
		String[] array = new String[] { ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"","
8766,onCreateView,"	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.fragment, null);
		mHeader = inflater.inflate(R.layout.header, null);
		mQuickReturnView = (TextView) view.findViewById(R.id.sticky);
		mPlaceHolder = mHeader.findViewById(R.id.placeholder);
		return view;"
8768,onScroll,"			public void onScroll(AbsListView view, int firstVisibleItem,
					int visibleItemCount, int totalItemCount) {

				mScrollY = 0;
				int translationY = 0;

				if (mListView.scrollYIsComputed()) {
					mScrollY = mListView.getComputedScrollY();"
8769,onGlobalLayout,"					public void onGlobalLayout() {
						mQuickReturnHeight = mQuickReturnView.getHeight();
						mListView.computeScrollY();
					}"
8770,onActivityCreated,"	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);

		mListView = (QuickReturnListView) getListView();

		String[] array = new String[] { ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"","
8771,onCreateView,"	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.footer_fragment, null);
		mQuickReturnView = (TextView) view.findViewById(R.id.footer);
		return view;"
8773,onAnimationEnd,"							public void onAnimationEnd(Animation animation) {
								noAnimation = false;
								mState = STATE_OFFSCREEN;
							}"
8774,onAnimationRepeat,"							public void onAnimationRepeat(Animation animation) {
"
8775,onAnimationStart,"							public void onAnimationStart(Animation animation) {
							}"
8776,onAnimationEnd,"							public void onAnimationEnd(Animation animation) {
								noAnimation = false;
								mMinRawY = rawY;
								mState = STATE_EXPANDED;
							}"
8781,onActivityCreated,"	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);

		mListView = (QuickReturnListView) getListView();

		mQuickReturnView.setText(""Animation"");
		mListView.addHeaderView(mHeader);

		String[] array = new String[] { ""Android"", ""Android"", ""Android"",
				""Android"", ""Android"", ""Android"", ""Android"", ""Android"","
8783,getOpList,"    protected List<Op> getOpList() {
        return opList;
    }"
8784,getFormat,"    protected Format getFormat() {
        return format;
    }"
8785,getMode,"    protected int getMode() {
        return mode;
    }"
8786,getH,"    protected int getH() {
        return h;
    }"
8787,getW,"    protected int getW() {
        return w;
    }"
8788,getOriUrl,"    protected String getOriUrl() {
        return oriUrl;
    }"
8789,getImageView,"    protected ImageView getImageView() {
        return imageView;
    }"
8790,fetch,"    public void fetch() {
        throw new UnsupportedOperationException(
                ""Required method instantiateItem was not overridden"");"
8791,attachWithNoClear,"    public void attachWithNoClear() {
        throw new UnsupportedOperationException(
                ""Required method instantiateItem was not overridden"");"
8792,attach,"    public void attach() {
        attachWithNoClear();
        clear();
    }"
8793,getMaxHeight,"    private int getMaxHeight() {
        return getContext().getResources().getDisplayMetrics().heightPixels;
    }"
8794,getScreenWith,"    private int getScreenWith() {
        return getContext().getResources().getDisplayMetrics().widthPixels;
    }"
8795,formatWebp,"    public T formatWebp() {
        this.format = Format.webp;
        return (T) this;
    }"
8796,formatPng,"    public T formatPng() {
        this.format = Format.png;
        return (T) this;
    }"
8797,formatOrigin,"    public T formatOrigin() {
        this.format = Format.origin;
        return (T) this;
    }"
8798,formatJpg,"    public T formatJpg() {
        this.format = Format.jpg;
        return (T) this;
    }"
8799,addOpRotate,"    public T addOpRotate(final int rotateDegree) {
        opList.add(new Op().rotate(rotateDegree));
        return (T) this;
    }"
8800,addOpBlur,"    public T addOpBlur(final int radius, final int sigma) {
        opList.add(new Op().blur(radius, sigma));
        return (T) this;
    }"
8801,getOpUrlParam,"        public String getOpUrlParam() {
            switch (name) {
                case none:
                    return """";"
8802,rotate,"        public Op rotate(final int rotateDegree) {
            this.name = OpName.rotate;
            this.val1 = rotateDegree;
            return this;
        }"
8803,blur,"        public Op blur(final int radius, final int sigma) {
            this.name = OpName.blur;
            this.val1 = radius;
            this.val2 = sigma;
            return this;
        }"
8804,getContext,"    protected Context getContext() {
        Context context = this.context;

        if (context == null) {
            context = this.imageView == null ? null : this.imageView.getContext();"
8805,isUrl,"    private static boolean isUrl(final String url) {
        return !TextUtils.isEmpty(url) && url.startsWith(""http"");
    }"
8806,wTimesN2H,"    public T wTimesN2H(final float n) {
        this.h = (int) (this.w * n);
        return (T) this;
    }"
8807,halfScreenW,"    public T halfScreenW() {
        if (getContext() == null) {
            return (T) this;
        }
        this.w = getScreenWith() / 2;"
8808,screenW,"    public T screenW() {
        if (getContext() == null) {
            return (T) this;
        }
        this.w = getScreenWith();"
8809,clear,"    public void clear() {
        this.context = null;
        this.imageView = null;
        this.mode = MODE_FIT_XY;
        this.w = 0;
        this.h = 0;
        this.opList.clear();
    }"
8811,forceOrigin,"    public T forceOrigin() {
        return mode(MODE_FORCE_ORIGIN);
    }"
8812,centerCrop,"    public T centerCrop() {
        return mode(MODE_CENTER_CROP);
    }"
8813,fitXY,"    public T fitXY() {
        return mode(MODE_FIT_XY);
    }"
8814,mode,"    public T mode(final int mode) {
        this.mode = mode;
        return (T) this;
    }"
8815,hR,"    public T hR(final int hResource) {
        if (getContext() == null) {
            return (T) this;
        }
"
8816,h,"    public T h(final int h) {
        this.h = h;
        return (T) this;
    }"
8817,sizeR,"    public T sizeR(final int sizeResource) {
        if (getContext() == null) {
            return (T) this;
        }

        final int size = getContext().getResources().getDimensionPixelSize(sizeResource);"
8818,size,"    public T size(final int size) {
        w(size);
        h(size);
        return (T) this;
    }"
8819,wR,"    public T wR(final int wResource) {
        if (getContext() == null) {
            return (T) this;
        }
        this.w = getContext().getResources().getDimensionPixelSize(wResource);"
8820,w,"    public T w(final int w) {
        this.w = w;
        return (T) this;
    }"
8821,clear,"    public void clear() {
        super.clear();
        this.attachCallback = null;
        this.transformation = null;
    }"
8822,fetch,"    public void fetch() {
        if (getContext() == null) {
            throw new InvalidParameterException(String.format(""can't get context ?? url[%s]"", getOriUrl()));
        }"
8823,attachCallback,"    public PicassoQiniuImageLoader attachCallback(final Callback attachCallback) {
        this.attachCallback = attachCallback;
        return this;
    }"
8824,transformation,"    public PicassoQiniuImageLoader transformation(final Transformation transformation) {
        this.transformation = transformation;
        return this;
    }"
8825,target,"    public PicassoQiniuImageLoader target(final Target target) {
        this.target = target;
        return this;
    }"
8826,getDrawable,"    protected Drawable getDrawable(final ImageView imageView, final int resourceId) {
        if (resourceId == 0) {
            return null;
        }

        Drawable drawable = null;"
8827,defaultD,"    public PicassoQiniuImageLoader defaultD(final Drawable defaultDrawable) {
        this.defaultDrawable = defaultDrawable;
        return this;
    }"
8828,defaultD,"    public PicassoQiniuImageLoader defaultD(final int defaultDrawable) {
        this.defaultDrawable = getDrawable(getImageView(), defaultDrawable);
        return this;
    }"
8829,findTarget,"    private Target findTarget() {
        if (this.target != null) {
            return this.target;
        }
"
8830,attachWithNoClear,"    public void attachWithNoClear() {
        if (getImageView() == null) {
            throw new InvalidParameterException(String.format(""imageView must not be null! %s"", getOriUrl()));
        }

        String u = createQiniuUrl();
"
8831,avatar,"    public PicassoQiniuImageLoader avatar() {
        this.isAvatar = true;
        return this;
    }"
8832,get,"        Target get(final String originUrl, final Context context);
    }"
8833,attach,"    static RequestCreator attach(final Context context, String url, final Drawable placeHolder) {
        if (context == null) {
            return null;
        }
"
8834,attach,"    static RequestCreator attach(final Context context, String url) {
        return attach(context, url, null);
    }"
8835,attachToImage,"    static void attachToImage(final ImageView imageView, final String url, final Drawable placeHolder, final Transformation transformation, final Target target, final Callback callback) {
        if (imageView == null) {
            return;
        }

        final RequestCreator creator = attach(imageView.getContext(), url, placeHolder);
        if (creator == null) {
            return;"
8836,fetch,"    static void fetch(final Context context, String url, Target callback) {
        RequestCreator creator = attach(context, url);

        if (creator == null) {
            Log.e(TAG, String.format(""creator == null : url[%s], context[%s]"", url, context));"
8837,display,"    static void display(ImageView imageView, String url, Drawable drawable, final Transformation transformation, Target target, Callback callback) {
        if (imageView == null) {
            return;
        }"
8838,createLoader,"    public static PicassoQiniuImageLoader createLoader(final Context context, final String oriUrl) {
        return new PicassoQiniuImageLoader(context, oriUrl);
    }"
8839,createLoader,"    public static PicassoQiniuImageLoader createLoader(final ImageView imageView, final String oriUrl) {
        return new PicassoQiniuImageLoader(imageView, oriUrl);
    }"
8840,setGlobalTargetProvider,"    public static void setGlobalTargetProvider(final TargetProvider provider) {
        PicassoQiniuImageLoader.DEFAULT_TARGET_PROVIDER = provider;
    }"
8841,setGlobalPlaceHolder,"    public static void setGlobalPlaceHolder(final int defaultPlaceHolder, final int defaultAvatarPlaceHolder) {
        PicassoQiniuImageLoader.DEFAULT_PLACE_HOLDER = defaultPlaceHolder;
        PicassoQiniuImageLoader.DEFAULT_AVATAR_PLACE_HOLDER = defaultAvatarPlaceHolder;
    }"
8842,openGitHub,"    private void openGitHub() {
        Uri uri = Uri.parse(getString(R.string.app_github_url));
        Intent intent = new Intent(Intent.ACTION_VIEW, uri);
        startActivity(intent);
    }"
8843,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.menu_github:"
8844,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return super.onCreateOptionsMenu(menu);
    }"
8845,assignViews,"    private void assignViews() {
        image1 = (ImageView) findViewById(R.id.image_1);
        image2 = (ImageView) findViewById(R.id.image_2);
        image3 = (ImageView) findViewById(R.id.image_3);
        image4 = (ImageView) findViewById(R.id.image_4);
        image5 = (ImageView) findViewById(R.id.image_5);
    }"
8846,dp2px,"    public int dp2px(float dpValue) {
        final float scale = getResources().getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);
    }"
8847,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        assignViews();

        PicassoLoader.createLoader(image1, MOCK_DATA_URL)
                .attach();

        PicassoLoader.createLoader(image2, MOCK_DATA_URL)
                .centerCrop()"
8848,onShare,"	public void onShare(Platform platform, ShareParams paramsToShare);
"
8851,onError,"	public final void onError(Platform platform, int action, Throwable t) {
		t.printStackTrace();

		Message msg = new Message();
		msg.arg1 = 2;
		msg.arg2 = action;
		msg.obj = t;
		UIHandler.sendMessage(msg, this);
"
8852,onComplete,"	public final void onComplete(Platform platform, int action,
			HashMap<String, Object> res) {
		Message msg = new Message();
		msg.arg1 = 1;
		msg.arg2 = action;
		msg.obj = platform;
		UIHandler.sendMessage(msg, this);"
8853,showEditPage,"	protected abstract void showEditPage(Context context, Platform platform, ShareParams sp);
"
8854,showPlatformPage,"	protected abstract void showPlatformPage(Context context);
"
8855,handleMessage,"			public boolean handleMessage(Message msg) {
				int resId = ResHelper.getStringRes(context, resOrName);
				if (resId > 0) {
					Toast.makeText(context, resId, Toast.LENGTH_SHORT).show();
				} else {"
8856,toast,"	private void toast(final String resOrName) {
		UIHandler.sendEmptyMessage(0, new Callback() {
			public boolean handleMessage(Message msg) {"
8857,shareDataToShareParams,"	final ShareParams shareDataToShareParams(Platform plat) {
		if (plat == null || shareParamsMap == null) {
			toast(""ssdk_oks_share_failed"");
			return null;
		}"
8859,prepareForEditPage,"	private void prepareForEditPage(Platform platform) {
		if (formateShareData(platform)) {
			ShareParams sp = shareDataToShareParams(platform);"
8860,shareSilently,"	final void shareSilently(Platform platform) {
		if (formateShareData(platform)) {
			ShareParams sp = shareDataToShareParams(platform);"
8861,isUseClientToShare,"	final boolean isUseClientToShare(Platform platform) {
		String name = platform.getName();
		if (""Wechat"".equals(name) || ""WechatMoments"".equals(name)
				|| ""WechatFavorite"".equals(name) || ""ShortMessage"".equals(name)
				|| ""Email"".equals(name) || ""Qzone"".equals(name)"
8863,disableSSO,"	public final void disableSSO() {
		disableSSO = true;
	}"
8864,setShareContentCustomizeCallback,"	public final void setShareContentCustomizeCallback(ShareContentCustomizeCallback customizeCallback) {
		this.customizeCallback = customizeCallback;
	}"
8865,setPlatformActionListener,"	public final void setPlatformActionListener(PlatformActionListener callback) {
		this.callback = callback == null ? this : callback;
	}"
8866,setHiddenPlatforms,"	public final void setHiddenPlatforms(HashMap<String, String> hiddenPlatforms) {
		this.hiddenPlatforms = hiddenPlatforms;
	}"
8867,setCustomerLogos,"	public final void setCustomerLogos(ArrayList<CustomerLogo> customerLogos) {
		this.customerLogos = customerLogos;
	}"
8868,setSilent,"	public final void setSilent(boolean silent) {
		this.silent = silent;
	}"
8869,setShareParamsMap,"	public final void setShareParamsMap(HashMap<String, Object> shareParamsMap) {
		this.shareParamsMap = shareParamsMap;
	}"
8870,setDialogMode,"	public final void setDialogMode(boolean dialogMode) {
		this.dialogMode = dialogMode;
	}"
8871,fromValue,"	public static OnekeyShareTheme fromValue(int value) {
		for (OnekeyShareTheme theme : OnekeyShareTheme.values()) {
			if (theme.value == value) {
				return theme;"
8872,getImpl,"	public OnekeyShareThemeImpl getImpl() {
		return impl;
	}"
8874,isUseClientToShare,"	protected final boolean isUseClientToShare(Platform platform) {
		return impl.isUseClientToShare(platform);
	}"
8875,formateShareData,"	protected final ShareParams formateShareData(Platform platform) {
		if (impl.formateShareData(platform)) {
			return impl.shareDataToShareParams(platform);
		}"
8876,shareSilently,"	protected final void shareSilently(Platform platform) {
		impl.shareSilently(platform);
	}"
8877,isDisableSSO,"	protected final boolean isDisableSSO() {
		return impl.disableSSO;
	}"
8878,getCustomizeCallback,"	protected final ShareContentCustomizeCallback getCustomizeCallback() {
		return impl.customizeCallback;
	}"
8879,getCallback,"	protected final PlatformActionListener getCallback() {
		return impl.callback;
	}"
8880,getHiddenPlatforms,"	protected final HashMap<String, String> getHiddenPlatforms() {
		return impl.hiddenPlatforms;
	}"
8881,getCustomerLogos,"	protected final ArrayList<CustomerLogo> getCustomerLogos() {
		return impl.customerLogos;
	}"
8882,isSilent,"	protected final boolean isSilent() {
		return impl.silent;
	}"
8883,getShareParamsMap,"	protected final HashMap<String, Object> getShareParamsMap() {
		return impl.shareParamsMap;
	}"
8884,isDialogMode,"	protected final boolean isDialogMode() {
		return impl.dialogMode;
	}"
8886,setTheme,"	public void setTheme(OnekeyShareTheme theme) {
		params.put(""theme"", theme.getValue());
	}"
8887,setShareToTencentWeiboWhenPerformingQQOrQZoneSharing,"	public void setShareToTencentWeiboWhenPerformingQQOrQZoneSharing() {
		params.put(""isShareTencentWeibo"", true);
	}"
8888,setImageArray,"	public void setImageArray(String[] imageArray) {
		params.put(""imageArray"", imageArray);
	}"
8889,setViewToShare,"	public void setViewToShare(View viewToShare) {
		try {
			Bitmap bm = BitmapHelper.captureView(viewToShare, viewToShare.getWidth(), viewToShare.getHeight());"
8890,addHiddenPlatform,"	public void addHiddenPlatform(String platform) {
		HashMap<String, String> hiddenPlatforms = ResHelper.forceCast(params.get(""hiddenPlatforms""));
		hiddenPlatforms.put(platform, platform);
	}"
8891,setDialogMode,"	public void setDialogMode() {
		params.put(""dialogMode"", true);
	}"
8892,setVideoUrl,"	public void setVideoUrl(String url) {
		params.put(""url"", url);
		params.put(""shareType"", Platform.SHARE_VIDEO);
	}"
8893,disableSSOWhenAuthorize,"	public void disableSSOWhenAuthorize() {
		params.put(""disableSSO"", true);
	}"
8894,setCustomerLogo,"	public void setCustomerLogo(Bitmap logo, String label, OnClickListener ocl) {
		CustomerLogo cl = new CustomerLogo();
		cl.logo = logo;
		cl.label = label;
		cl.listener = ocl;
		ArrayList<CustomerLogo> customers = ResHelper.forceCast(params.get(""customers""));
		customers.add(cl);
	}"
8895,getShareContentCustomizeCallback,"	public ShareContentCustomizeCallback getShareContentCustomizeCallback() {
		return ResHelper.forceCast(params.get(""customizeCallback""));
	}"
8896,setShareContentCustomizeCallback,"	public void setShareContentCustomizeCallback(ShareContentCustomizeCallback callback) {
		params.put(""customizeCallback"", callback);
	}"
8897,getCallback,"	public PlatformActionListener getCallback() {
		return ResHelper.forceCast(params.get(""callback""));
	}"
8898,setCallback,"	public void setCallback(PlatformActionListener callback) {
		params.put(""callback"", callback);
	}"
8899,setMusicUrl,"	public void setMusicUrl(String musicUrl) {
		params.put(""musicUrl"", musicUrl);
	}"
8900,setExecuteUrl,"	public void setExecuteUrl(String executeurl) {
		params.put(""executeurl"", executeurl);
	}"
8901,setInstallUrl,"	public void setInstallUrl(String installurl) {
		params.put(""installurl"", installurl);
	}"
8902,setPlatform,"	public void setPlatform(String platform) {
		params.put(""platform"", platform);
	}"
8903,setSilent,"	public void setSilent(boolean silent) {
		params.put(""silent"", silent);
	}"
8904,setLongitude,"	public void setLongitude(float longitude) {
		params.put(""longitude"", longitude);
	}"
8905,setLatitude,"	public void setLatitude(float latitude) {
		params.put(""latitude"", latitude);
	}"
8906,setVenueDescription,"	public void setVenueDescription(String venueDescription) {
		params.put(""venueDescription"", venueDescription);
	}"
8907,setVenueName,"	public void setVenueName(String venueName) {
		params.put(""venueName"", venueName);
	}"
8908,setSiteUrl,"	public void setSiteUrl(String siteUrl) {
		params.put(""siteUrl"", siteUrl);
	}"
8909,setSite,"	public void setSite(String site) {
		params.put(""site"", site);
	}"
8910,setComment,"	public void setComment(String comment) {
		params.put(""comment"", comment);
	}"
8911,setFilePath,"	public void setFilePath(String filePath) {
		params.put(""filePath"", filePath);
	}"
8912,setUrl,"	public void setUrl(String url) {
		params.put(""url"", url);
	}"
8913,setImageUrl,"	public void setImageUrl(String imageUrl) {
		if (!TextUtils.isEmpty(imageUrl)) {
			params.put(""imageUrl"", imageUrl);"
8914,setImagePath,"	public void setImagePath(String imagePath) {
		if(!TextUtils.isEmpty(imagePath)) {
			params.put(""imagePath"", imagePath);"
8915,getText,"	public String getText() {
		return params.containsKey(""text"") ? String.valueOf(params.get(""text"")) : null;
	}"
8916,setText,"	public void setText(String text) {
		params.put(""text"", text);
	}"
8917,setTitleUrl,"	public void setTitleUrl(String titleUrl) {
		params.put(""titleUrl"", titleUrl);
	}"
8918,setTitle,"	public void setTitle(String title) {
		params.put(""title"", title);
	}"
8919,setAddress,"	public void setAddress(String address) {
		params.put(""address"", address);
	}"
8920,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
"
8933,onClick,"			@Override public void onClick(View view) {
				mPopField.popView(imageView1);
			}"
8934,onClick,"			@Override public void onClick(View view) {
				LayoutInflater layoutInflater = (LayoutInflater) getApplicationContext()
					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				final View addView = layoutInflater.inflate(R.layout.sampletextview, null);
				TextView newTextView = (TextView) addView.findViewById(R.id.sampletextview);
				newTextView.setText(""New Sample text"");
				mPopField.popView(sampleTextView, addView, true);"
8936,toRadians,"    private static double toRadians(final double degrees) {
        return 2 * PI * degrees / 360;
    }"
8937,constructRoundedPolygonPath,"    private void constructRoundedPolygonPath(
            @NonNull final Path path,
            @IntRange(from = 3) final int sideCount,
            final float centerX,
            final float centerY,
            @FloatRange(from = 0, fromInclusive = false) final float outerRadius,
            @FloatRange(from = 0) final float cornerRadius) {"
8938,constructNonRoundedPolygonPath,"    private void constructNonRoundedPolygonPath(
            @NonNull final Path path,
            @IntRange(from = 3) final int sideCount,
            final float centerX,"
8939,constructPolygonPath,"    public void constructPolygonPath(
            @NonNull final Path path,
            @IntRange(from = 3) final int sideCount,
            final float centerX,
            final float centerY,"
8940,drawPolygon,"    public void drawPolygon(
            @NonNull final Canvas canvas,
            @IntRange(from = 3) final int sideCount,
            final float centerX,"
8941,internalGetSectionCount,"    private int internalGetSectionCount() {
        if (mSectionCount >= 0) {
            return mSectionCount;
        }
        mSectionCount = getSectionCount();"
8942,internalGetCountForSection,"    private int internalGetCountForSection(int section) {
        Integer cachedSectionCount = mSectionCountCache.get(section);
        if (cachedSectionCount != null) {
            return cachedSectionCount;
        }
        int sectionCount = getCountForSection(section);
        mSectionCountCache.put(section, sectionCount);"
8943,getSectionHeaderView,"    public abstract View getSectionHeaderView(int section, View convertView, ViewGroup parent);
"
8944,getItemView,"    public abstract View getItemView(int section, int position, View convertView, ViewGroup parent);
"
8945,getCountForSection,"    public abstract int getCountForSection(int section);
"
8947,getItemId,"    public abstract long getItemId(int section, int position);
"
8948,getItem,"    public abstract Object getItem(int section, int position);
"
8949,getSectionHeaderViewTypeCount,"    public int getSectionHeaderViewTypeCount() {
        return 1;
    }"
8950,getSectionHeaderViewType,"    public int getSectionHeaderViewType(int section) {
        return HEADER_VIEW_TYPE;
    }"
8951,getItemViewTypeCount,"    public int getItemViewTypeCount() {
        return 1;
    }"
8952,getItemViewType,"    public int getItemViewType(int section, int position) {
        return ITEM_VIEW_TYPE;
    }"
8953,isSectionHeader,"    public final boolean isSectionHeader(int position) {
        int sectionStart = 0;
        for (int i = 0; i < internalGetSectionCount(); i++) {
            if (position == sectionStart) {
                return true;"
8956,getViewTypeCount,"    public final int getViewTypeCount() {
        return getItemViewTypeCount() + getSectionHeaderViewTypeCount();
    }"
8957,getItemViewType,"    public final int getItemViewType(int position) {
        if (isSectionHeader(position)) {
            return getItemViewTypeCount() + getSectionHeaderViewType(getSectionForPosition(position));
        }"
8958,getView,"    public final View getView(int position, View convertView, ViewGroup parent) {
        if (isSectionHeader(position)) {
            return getSectionHeaderView(getSectionForPosition(position), convertView, parent);
        }"
8959,getItemId,"    public final long getItemId(int position) {
        return getItemId(getSectionForPosition(position), getPositionInSectionForPosition(position));
    }"
8960,getItem,"    public final Object getItem(int position) {
        return getItem(getSectionForPosition(position), getPositionInSectionForPosition(position));
    }"
8961,getCount,"    public final int getCount() {
        if (mCount >= 0) {
            return mCount;
        }
        int count = 0;
        for (int i = 0; i < internalGetSectionCount(); i++) {
            count += internalGetCountForSection(i);"
8962,notifyDataSetInvalidated,"    public void notifyDataSetInvalidated() {
        mSectionCache.clear();
        mSectionPositionCache.clear();
        mSectionCountCache.clear();
        mCount = -1;
        mSectionCount = -1;
        super.notifyDataSetInvalidated();
    }"
8963,notifyDataSetChanged,"    public void notifyDataSetChanged() {
        mSectionCache.clear();
        mSectionPositionCache.clear();
        mSectionCountCache.clear();
        mCount = -1;
        mSectionCount = -1;
        super.notifyDataSetChanged();
    }"
8964,onSectionClick,"        public abstract void onSectionClick(AdapterView<?> adapterView, View view, int section, long id);
"
8965,onItemClick,"        public abstract void onItemClick(AdapterView<?> adapterView, View view, int section, int position, long id);
"
8967,setOnItemClickListener,"    public void setOnItemClickListener(PinnedHeaderListView.OnItemClickListener listener) {
        super.setOnItemClickListener(listener);
    }"
8968,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);

        mWidthMode = MeasureSpec.getMode(widthMeasureSpec);
        mHeightMode = MeasureSpec.getMode(heightMeasureSpec);"
8969,setOnScrollListener,"    public void setOnScrollListener(OnScrollListener l) {
        mOnScrollListener = l;
    }"
8971,ensurePinnedHeaderLayout,"    private void ensurePinnedHeaderLayout(View header) {
        if (header.isLayoutRequested()) {
            int widthSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth(), mWidthMode);"
8973,onScrollStateChanged,"    public void onScrollStateChanged(AbsListView view, int scrollState) {
        if (mOnScrollListener != null) {
            mOnScrollListener.onScrollStateChanged(view, scrollState);"
8975,setAdapter,"    public void setAdapter(ListAdapter adapter) {
        mCurrentHeader = null;
        mAdapter = (PinnedSectionedHeaderAdapter) adapter;
        super.setAdapter(adapter);
    }"
8976,setPinHeaders,"    public void setPinHeaders(boolean shouldPin) {
        mShouldPin = shouldPin;
    }"
8978,getSectionHeaderViewType,"        public int getSectionHeaderViewType(int section);
"
8979,getSectionHeaderView,"        public View getSectionHeaderView(int section, View convertView, ViewGroup parent);
"
8980,getSectionForPosition,"        public int getSectionForPosition(int position);
"
8981,isSectionHeader,"        public boolean isSectionHeader(int position);
"
8983,unregisterDataSetObserver,"	void unregisterDataSetObserver(DataSetObserver observer);
}"
8984,registerDataSetObserver,"	public void registerDataSetObserver(DataSetObserver observer);
	"
8985,getEmptyItem,"	public View getEmptyItem(View convertView, ViewGroup parent);
	"
8986,getItem,"	public View getItem(int index, View convertView, ViewGroup parent);
"
8988,stopScrolling,"	public void stopScrolling() {
		scroller.stopScrolling();
	}"
8989,getItemView,"	private View getItemView(int index) {
		if (viewAdapter == null || viewAdapter.getItemsCount() == 0) {
			return null;
		}
		int count = viewAdapter.getItemsCount();
		if (!isValidItemIndex(index)) {
			return viewAdapter.getEmptyItem(recycle.getEmptyItem(), itemsLayout);"
8990,isValidItemIndex,"	private boolean isValidItemIndex(int index) {
		return viewAdapter != null && viewAdapter.getItemsCount() > 0 && (isCyclic || index >= 0 && index < viewAdapter.getItemsCount());
	}"
8991,addViewItem,"	private boolean addViewItem(int index, boolean first) {
		View view = getItemView(index);
		refreshTextStatus(view,index);

		if (view != null) {
			if (first) {"
8993,createItemsLayout,"	private void createItemsLayout() {
		if (itemsLayout == null) {
			itemsLayout = new LinearLayout(getContext());"
8994,updateView,"	private void updateView() {
		if (rebuildItems()) {
			calculateLayoutWidth(getWidth(), MeasureSpec.EXACTLY);"
8995,rebuildItems,"	private boolean rebuildItems() {
		boolean updated = false;
		ItemsRange range = getItemsRange();
		if (itemsLayout != null) {
			int first = recycle.recycleItems(itemsLayout, firstItem, range);
			updated = firstItem != first;
			firstItem = first;
		} else {
			createItemsLayout();
			updated = true;
		}"
8996,getItemsRange,"	private ItemsRange getItemsRange() {
		if (getItemHeight() == 0) {
			return null;
		}

		int first = currentItem;
		int count = 1;
"
8997,scroll,"	public void scroll(int itemsToScroll, int time) {
		int distance = itemsToScroll * getItemHeight() - scrollingOffset;
		scroller.scroll(distance, time);
	}"
8998,doScroll,"	private void doScroll(int delta) {
		scrollingOffset += delta;

		int itemHeight = getItemHeight();
		int count = scrollingOffset / itemHeight;

		int pos = currentItem - count;
		int itemCount = viewAdapter.getItemsCount();

		int fixPos = scrollingOffset % itemHeight;
		if (Math.abs(fixPos) <= itemHeight / 2) {
			fixPos = 0;
		}
		if (isCyclic && itemCount > 0) {"
8999,onTouchEvent,"	public boolean onTouchEvent(MotionEvent event) {
		if (!isEnabled() || getViewAdapter() == null) {
			return true;
		}
"
9001,drawItems,"	private void drawItems(Canvas canvas) {
		canvas.save();

		int top = (currentItem - firstItem) * getItemHeight() + (getItemHeight() - getHeight()) / 2;
		canvas.translate(PADDING, -top + scrollingOffset);

		itemsLayout.draw(canvas);"
9002,drawShadows,"	private void drawShadows(Canvas canvas) {
		int height = (int) (1.5 * getItemHeight());
		topShadow.setBounds(0, 0, getWidth(), height);
		topShadow.draw(canvas);

		bottomShadow.setBounds(0, getHeight() - height, getWidth(), getHeight());
		bottomShadow.draw(canvas);"
9003,onDraw,"	protected void onDraw(Canvas canvas) {
		super.onDraw(canvas);

		if (viewAdapter != null && viewAdapter.getItemsCount() > 0) {"
9004,layout,"	private void layout(int width, int height) {
		int itemsWidth = width - 2 * PADDING;

		itemsLayout.layout(0, 0, itemsWidth, height);"
9005,onLayout,"	protected void onLayout(boolean changed, int l, int t, int r, int b) {
		layout(r - l, b - t);
	}"
9006,onMeasure,"	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		int widthMode = MeasureSpec.getMode(widthMeasureSpec);
		int heightMode = MeasureSpec.getMode(heightMeasureSpec);
		int widthSize = MeasureSpec.getSize(widthMeasureSpec);
		int heightSize = MeasureSpec.getSize(heightMeasureSpec);

		buildViewForMeasuring();

		int width = calculateLayoutWidth(widthSize, widthMode);

		int height;"
9008,getItemHeight,"	public int getItemHeight() {
		if (itemHeight != 0) {
			return itemHeight;
		}
"
9009,getDesiredHeight,"	private int getDesiredHeight(LinearLayout layout) {
		if (layout != null && layout.getChildAt(0) != null) {
			itemHeight = layout.getChildAt(0).getMeasuredHeight();
		}
"
9011,invalidateWheel,"	public void invalidateWheel(boolean clearCaches) {
		if (clearCaches) {
			recycle.clearAll();
			if (itemsLayout != null) {"
9012,setCyclic,"	public void setCyclic(boolean isCyclic) {
		this.isCyclic = isCyclic;
		invalidateWheel(false);
	}"
9013,isCyclic,"	public boolean isCyclic() {
		return isCyclic;
	}"
9014,setCurrentItem,"	public void setCurrentItem(int index) {
		setCurrentItem(index, false);
	}"
9015,refreshTextStatus,"	private void refreshTextStatus(View oldView, int old) {
		if(oldView==null){
			return;
		}
		TextView textview= (TextView) oldView.findViewById(R.id.text);"
9017,getCurrentItem,"	public int getCurrentItem() {
		return currentItem;
	}"
9018,notifyClickListenersAboutClick,"	protected void notifyClickListenersAboutClick(int item) {
		for (OnWheelClickedListener listener : clickingListeners) {
			listener.onItemClicked(this, item);"
9019,removeClickingListener,"	public void removeClickingListener(OnWheelClickedListener listener) {
		clickingListeners.remove(listener);
	}"
9020,addClickingListener,"	public void addClickingListener(OnWheelClickedListener listener) {
		clickingListeners.add(listener);
	}"
9021,notifyScrollingListenersAboutEnd,"	protected void notifyScrollingListenersAboutEnd() {
		for (OnWheelScrollListener listener : scrollingListeners) {
			listener.onScrollingFinished(this);"
9022,notifyScrollingListenersAboutStart,"	protected void notifyScrollingListenersAboutStart() {
		for (OnWheelScrollListener listener : scrollingListeners) {
			listener.onScrollingStarted(this);"
9023,removeScrollingListener,"	public void removeScrollingListener(OnWheelScrollListener listener) {
		scrollingListeners.remove(listener);
	}"
9024,addScrollingListener,"	public void addScrollingListener(OnWheelScrollListener listener) {
		scrollingListeners.add(listener);
	}"
9025,notifyChangingListeners,"	protected void notifyChangingListeners(int oldValue, int newValue) {
		for (OnWheelChangedListener listener : changingListeners) {
			listener.onChanged(this, oldValue, newValue);
		}

		if (oldValue < 0 || newValue < 0 || itemsLayout == null)
			return;
"
9026,removeChangingListener,"	public void removeChangingListener(OnWheelChangedListener listener) {
		changingListeners.remove(listener);
	}"
9027,addChangingListener,"	public void addChangingListener(OnWheelChangedListener listener) {
		changingListeners.add(listener);
	}"
9028,setSelectTextColor,"	public void setSelectTextColor(int textColor,int selectTextColor){
		this.selectTextColor=selectTextColor;
		this.textColor=textColor;
	}"
9029,setViewAdapter,"	public void setViewAdapter(WheelViewAdapter viewAdapter) {
		if (this.viewAdapter != null) {
			this.viewAdapter.unregisterDataSetObserver(dataObserver);
		}
		this.viewAdapter = viewAdapter;
		if (this.viewAdapter != null) {"
9030,onInvalidated,"		public void onInvalidated() {
			invalidateWheel(true);
		}"
9031,onChanged,"		public void onChanged() {
			invalidateWheel(false);
		}"
9032,getViewAdapter,"	public WheelViewAdapter getViewAdapter() {
		return viewAdapter;
	}"
9033,setVisibleItems,"	public void setVisibleItems(int count) {
		visibleItems = count;
	}"
9034,getVisibleItems,"	public int getVisibleItems() {
		return visibleItems;
	}"
9035,setInterpolator,"	public void setInterpolator(Interpolator interpolator) {
		scroller.setInterpolator(interpolator);
	}"
9036,onJustify,"		public void onJustify() {
			if (Math.abs(scrollingOffset) > WheelScroller.MIN_DELTA_FOR_SCROLLING) {
				scroller.scroll(scrollingOffset, 0);"
9037,onFinished,"		public void onFinished() {
			if (isScrollingPerformed) {
				notifyScrollingListenersAboutEnd();
				isScrollingPerformed = false;
			}"
9038,onScroll,"		public void onScroll(int distance) {
			doScroll(distance);

			int height = getHeight();
			if (scrollingOffset > height) {"
9039,onStarted,"		public void onStarted() {
			isScrollingPerformed = true;
			notifyScrollingListenersAboutStart();
		}"
9040,initData,"	private void initData(Context context) {
		scroller = new WheelScroller(getContext(), scrollingListener);
	}"
9041,isScrollingPerformed,"	public boolean isScrollingPerformed() {
		return isScrollingPerformed;
	}"
9042,finishScrolling,"	void finishScrolling() {
		if (isScrollingPerformed) {
			listener.onFinished();"
9043,startScrolling,"	private void startScrolling() {
		if (!isScrollingPerformed) {
			isScrollingPerformed = true;"
9044,justify,"	private void justify() {
		listener.onJustify();
		setNextMessage(MESSAGE_JUSTIFY);
	}"
9045,handleMessage,"		public void handleMessage(Message msg) {
			scroller.computeScrollOffset();
			int currY = scroller.getCurrY();
			int delta = lastScrollY - currY;
			lastScrollY = currY;
			if (delta != 0) {
				listener.onScroll(delta);
			}
"
9046,clearMessages,"	private void clearMessages() {
		animationHandler.removeMessages(MESSAGE_SCROLL);
		animationHandler.removeMessages(MESSAGE_JUSTIFY);
	}"
9047,setNextMessage,"	private void setNextMessage(int message) {
		clearMessages();
		animationHandler.sendEmptyMessage(message);
	}"
9048,onFling,"		public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
			lastScrollY = 0;
			final int maxY = 0x7FFFFFFF;
			final int minY = -maxY;
			scroller.fling(0, lastScrollY, 0, (int) -velocityY, 0, 0, minY, maxY);
			setNextMessage(MESSAGE_SCROLL);
			return true;
		}"
9050,onTouchEvent,"	public boolean onTouchEvent(MotionEvent event) {
		switch (event.getAction()) {
		case MotionEvent.ACTION_DOWN:
			lastTouchedY = event.getY();
			scroller.forceFinished(true);"
9051,stopScrolling,"	public void stopScrolling() {
		scroller.forceFinished(true);
	}"
9052,scroll,"	public void scroll(int distance, int time) {
		scroller.forceFinished(true);

		lastScrollY = 0;

		scroller.startScroll(0, 0, 0, distance, time != 0 ? time : SCROLLING_DURATION);
		setNextMessage(MESSAGE_SCROLL);"
9053,setInterpolator,"	public void setInterpolator(Interpolator interpolator) {
		scroller.forceFinished(true);
		scroller = new Scroller(context, interpolator);
	}"
9058,getCachedView,"	private View getCachedView(List<View> cache) {
		if (cache != null && cache.size() > 0) {
			View view = cache.get(0);
			cache.remove(0);"
9059,recycleView,"	private void recycleView(View view, int index) {
		int count = wheel.getViewAdapter().getItemsCount();

		if ((index < 0 || index >= count) && !wheel.isCyclic()) {"
9060,addView,"	private List<View> addView(View view, List<View> cache) {
		if (cache == null) {
			cache = new LinkedList<View>();
		}
		"
9061,clearAll,"	public void clearAll() {
		if (items != null) {
			items.clear();
		}"
9062,getEmptyItem,"	public View getEmptyItem() {
		return getCachedView(emptyItems);
	}"
9063,getItem,"	public View getItem() {
		return getCachedView(items);
	}"
9064,recycleItems,"	public int recycleItems(LinearLayout layout, int firstItem, ItemsRange range) {
		int index = firstItem;
		for (int i = 0; i < layout.getChildCount();) {
			if (!range.contains(index)) {
				recycleView(layout.getChildAt(i), index);"
9065,onSelect,"     void onSelect(DateType type, DateBean bean);
}"
9066,getItem,"	public View getItem(int position, View convertView, ViewGroup parent) {
		return generator.setup(context, position, convertView, parent, data);
	}"
9067,getItemsCount,"	public int getItemsCount() {
		switch (dataType) {
		case ARRAYLIST:"
9068,getCountWithoutHeader,"	public int getCountWithoutHeader() {
		int count = 0;
		switch (dataType) {
		case ARRAYLIST:
			count = ((ArrayList<?>) data).size();"
9069,setData,"	public void setData(LinkedList<?> object) {
		dataType = DataType.LINKEDLIST;
		data = object;
	}"
9070,setData,"	public void setData(SparseArray<?> object) {
		dataType = DataType.SPARSE_ARRAY;
		data = object;
	}"
9071,setData,"	public void setData(Vector<?> object) {
		dataType = DataType.VECTOR;
		data = object;
	}"
9072,setData,"	public void setData(ArrayList<?> object) {
		dataType = DataType.ARRAYLIST;
		data = object;
	}"
9073,setData,"	public void setData(Object[] object) {
		dataType = DataType.OBJECT_ARRAY;
		data = object;
	}"
9076,getDataType,"	public DataType getDataType() {
		return dataType;
	}"
9080,getError,"    public String getError() {
        return mistake;
    }"
9083,onItemClicked,"    void onItemClicked(WheelView wheel, int itemIndex);
}"
9084,onChanged,"	void onChanged(WheelView wheel, int oldValue, int newValue);
}"
9087,getItemsCount,"    public int getItemsCount() {
        return maxValue - minValue + 1;
    }    "
9088,getItemText,"    public CharSequence getItemText(int index) {
        if (index >= 0 && index < getItemsCount()) {
            int value = minValue + index;
            return format != null ? String.format(format, value) : Integer.toString(value);"
9089,contains,"	public boolean contains(int index) {
		return index >= getFirst() && index <= getLast();
	}"
9091,getLast,"	public int getLast() {
		return getFirst() + getCount() - 1;
	}"
9093,setup,"    public View setup(Context context, int position, View convertView, ViewGroup parent, Object data);
}"
9094,setup,"	public View setup(Context context, int position, View convertView, ViewGroup parent, Object data) {
		if (data instanceof Object[]) {
			return genBody(context, convertView, ((Object[]) data)[position], position);"
9095,genBody,"	protected abstract View genBody(Context context, View convertView, Object element, int position);
"
9099,main,"    public static void main(String[] args) {
        SimpleDateFormat format=new SimpleDateFormat(""yyyy-MM-dd HH"");
        try {
            Date date=format.parse(""2016-12-15 12"");"
9100,getScreenWidth,"    public static int getScreenWidth(Context context) {
        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        DisplayMetrics outMetrics = new DisplayMetrics();
        wm.getDefaultDisplay().getMetrics(outMetrics);
        return outMetrics.widthPixels;
    }"
9101,getDate,"    public static Date getDate(int year, int moth, int day,int hour,int minute) {
        Calendar calendar = Calendar.getInstance();
        calendar.set(year, moth - 1, day, hour, minute);
        return calendar.getTime();
    }"
9102,getDay,"    public static int getDay(Date date) {
        Calendar calendar=Calendar.getInstance();
        calendar.setTime(date);
        return calendar.get(calendar.DATE);
    }"
9103,getMoth,"    public static int getMoth(Date date) {
        Calendar calendar=Calendar.getInstance();
        calendar.setTime(date);
        return calendar.get(calendar.MONTH)+1;
    }"
9104,getYear,"    public static int getYear(Date date) {
        Calendar calendar=Calendar.getInstance();
        calendar.setTime(date);
        return calendar.get(calendar.YEAR);
    }"
9105,getWeek,"    public static int getWeek(int year,int moth,int day) {
        Calendar calendar = Calendar.getInstance();
        calendar.set(year,moth-1,day);
        return calendar.get(Calendar.DAY_OF_WEEK);
    }"
9106,getWeek,"    public static int getWeek(Date date) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        return calendar.get(Calendar.DAY_OF_WEEK);
    }"
9107,getMinute,"    public static int getMinute(Date date) {
        Calendar calendar=Calendar.getInstance();
        calendar.setTime(date);
        return calendar.get(calendar.MINUTE);
    }"
9108,getHour,"    public static int getHour(Date date) {
        Calendar calendar=Calendar.getInstance();
        calendar.setTime(date);
        return calendar.get(calendar.HOUR_OF_DAY);
    }"
9109,getFormat,"    public String getFormat() {
        return format;
    }"
9110,main,"    public static void main(String[] args) {
        System.out.println(Arrays.toString(new DatePickerHelper().genDay(2016,2)));
"
9111,getDisplayStartWeek,"    public String getDisplayStartWeek(){
          return getDisplayWeek(YEAR_START,MONTH_START,DAY_START);
    }"
9112,getDisplayWeek,"    public String getDisplayWeek(int year, int moth, int day) {
        return weeks[ DateUtils.getWeek(year,moth,day) - 1];
    }"
9113,findIndextByValue,"    public int findIndextByValue(int value, Integer[] arr) {
        for (int i = 0; i < arr.length; i++) {
            if (value == arr[i]) {
                return i;"
9114,genDay,"    public  Integer[] genDay() {
       return genDay(YEAR_START,MONTH_START);
    }"
9115,genDay,"    public  Integer[] genDay(int year,int moth) {
        Calendar calendar = Calendar.getInstance();
        calendar.set(year,moth,1);
        calendar.add(Calendar.DATE, -1);
        int day = Integer.parseInt(new SimpleDateFormat(""d"").format(calendar.getTime()));
        return genArr(day, false);
    }"
9116,genYear,"    public Integer[] genYear() {
        tem.clear();
        for (int i = YEAR_START - yearLimt; i < YEAR_START; i++) {
            tem.add(i);
        }
        tem.add(YEAR_START);
"
9117,genArr,"    public Integer[] genArr(int size, boolean isZero) {
        tem.clear();
        for (int i = isZero ? 0 : 1; i < (isZero ? size : size + 1); i++) {
            tem.add(i);
        }"
9118,genMinut,"    public Integer[] genMinut() {
        return genArr(60, true);
    }"
9119,genHour,"    public Integer[] genHour() {
        return genArr(24, true);
    }"
9120,genMonth,"    public Integer[] genMonth() {
        return new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
    }"
9121,getDisplayValue,"    public String[] getDisplayValue(Integer[] arr, String per) {
        dispalyTem.clear();
        for (Integer i : arr) {
            String value = i < 10 ? (""0"" + i) : """" + i;
            dispalyTem.add(value + per);"
9122,getToady,"    public int getToady(Type type) {
        switch (type) {
            case YEAR:
                return YEAR_START;"
9123,setStartDate,"    public void setStartDate(Date date, int yearLimt) {

        this.startDate = date;
        this.yearLimt = yearLimt;

        if (this.startDate == null) {"
9125,getSelectDate,"    public Date getSelectDate() {

        int year = yearArr[yearView.getCurrentItem()];
        int moth = mothArr[monthView.getCurrentItem()];
        int day = dayArr[dayView.getCurrentItem()];
        int hour = hourArr[hourView.getCurrentItem()];
        int minut = minutArr[minuteView.getCurrentItem()];
"
9126,onScrollingFinished,"    public void onScrollingFinished(WheelView wheel) {
    }"
9127,onScrollingStarted,"    public void onScrollingStarted(WheelView wheel) {
    }"
9128,onChanged,"    public void onChanged(WheelView wheel, int oldValue, int newValue) {

        int year = yearArr[yearView.getCurrentItem()];
        int moth = mothArr[monthView.getCurrentItem()];
        int day = dayArr[dayView.getCurrentItem()];
        int hour = hourArr[hourView.getCurrentItem()];
        int minut = minutArr[minuteView.getCurrentItem()];

        if (wheel == yearView || wheel == monthView) {
            setChangeDaySelect(year, moth);"
9129,setChangeDaySelect,"    private void setChangeDaySelect(int year, int moth) {
        dayArr = datePicker.genDay(year, moth);
        WheelGeneralAdapter adapter= (WheelGeneralAdapter) dayView.getViewAdapter();
        adapter.setData(convertData(dayView,  dayArr));

        int indxt = datePicker.findIndextByValue(selectDay, dayArr);
        if (indxt == -1) {"
9130,setData,"    protected void setData(Object[] datas) {
    }"
9131,getItemHeight,"    protected int getItemHeight() {
        return dayView.getItemHeight();
    }"
9132,getLayout,"    protected int getLayout() {
        return R.layout.cbk_wheel_picker;
    }"
9135,setYearLimt,"    public void setYearLimt(int yearLimt) {
        this.yearLimt = yearLimt;
    }"
9136,setStartDate,"    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }"
9137,setOnChangeLisener,"    public void setOnChangeLisener(OnChangeLisener onChangeLisener) {
        this.onChangeLisener = onChangeLisener;
    }"
9138,onChanged,"    public void onChanged(Date date) {

        if (onChangeLisener != null) {
            onChangeLisener.onChanged(date);"
9139,initParas,"    private void initParas() {
        WindowManager.LayoutParams params = getWindow().getAttributes();
        params.gravity = Gravity.BOTTOM;
        params.width = DateUtils.getScreenWidth(getContext());
        getWindow().setAttributes(params);
    }"
9140,onClick,"            public void onClick(View v) {
                dismiss();
                if (onSureLisener != null) {
                    onSureLisener.onSure(mDatePicker.getSelectDate());"
9141,onClick,"            public void onClick(View v) {
                dismiss();
            }"
9143,getDatePicker,"    private DatePicker getDatePicker() {
        DatePicker picker = new DatePicker(getContext(), type);
        picker.setStartDate(startDate);
        picker.setYearLimt(yearLimt);
        picker.setOnChangeLisener(this);
        picker.init();
        return picker;
    }"
9144,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.cbk_dialog_pick_time);

        initView();
        initParas();"
9145,setOnSureLisener,"    public void setOnSureLisener(OnSureLisener onSureLisener) {
        this.onSureLisener = onSureLisener;
    }"
9149,setMessageFormat,"    public void setMessageFormat(String format) {
        this.format = format;
    }"
9150,setType,"    public void setType(DateType type) {
        this.type = type;
    }"
9151,setTitle,"    public void setTitle(String title) {
       this.title=title;
    }"
9152,getDisplayDate,"    public String getDisplayDate(DateType type){
        String date="""";
        switch(type){
            case TYPE_ALL:
                date=year+""-""+makeZero(moth)+""-""+makeZero(day)+"" ""+makeZero(hour)+"":""+makeZero(minute);"
9153,makeZero,"    private String makeZero(int m){

         if(m>9){
             return  """"+m;
         }"
9154,setMinute,"    public void setMinute(int minute) {
        this.minute = minute;
    }"
9155,getMinute,"    public int getMinute() {
        return minute;
    }"
9156,setHour,"    public void setHour(int hour) {
        this.hour = hour;
    }"
9157,getHour,"    public int getHour() {
        return hour;
    }"
9158,setDay,"    public void setDay(int day) {
        this.day = day;
    }"
9159,getDay,"    public int getDay() {
        return day;
    }"
9160,setMoth,"    public void setMoth(int moth) {
        this.moth = moth;
    }"
9161,getMoth,"    public int getMoth() {
        return moth;
    }"
9162,setYear,"    public void setYear(int year) {
        this.year = year;
    }"
9163,getYear,"    public int getYear() {
        return year;
    }"
9164,onChanged,"    public void onChanged(WheelView wheel, int oldValue, int newValue) {
"
9165,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        Paint paint = new Paint();
        paint.setStrokeWidth(splitHeight);
        paint.setColor(split);
        paint.setAntiAlias(true);
        paint.setStyle(Paint.Style.FILL);
        int itemHeight = getItemHeight();

        for (int i = 0; i < 5; i++) {"
9166,setData,"    protected abstract void setData(Object[] datas);
"
9169,convertData,"    protected String[] convertData(WheelView wheelView, Integer[] data) {
        return new String[0];
    }"
9171,init,"    private void init(Context context) {
        genView = new GenWheelText(textColor);
        this.ctx = context;
        LayoutInflater.from(context).inflate(getLayout(), this);
    }"
9172,getItemsCount,"    public int getItemsCount() {
        return items.length;
    }"
9173,getItemText,"    public CharSequence getItemText(int index) {
        if (index >= 0 && index < items.length) {
            T item = items[index];
            if (item instanceof CharSequence) {"
9174,getItemText,"    protected CharSequence getItemText(int index) {
        return adapter.getItem(index);
    }"
9175,getItemsCount,"    public int getItemsCount() {
        return adapter.getItemsCount();
    }"
9176,getAdapter,"    public WheelAdapter getAdapter() {
        return adapter;
    }"
9177,getView,"    private View getView(int resource, ViewGroup parent) {
        switch (resource) {
        case NO_RESOURCE:"
9178,getTextView,"    private TextView getTextView(View view, int textResource) {
    	TextView text = null;
    	try {
            if (textResource == NO_RESOURCE && view instanceof TextView) {
                text = (TextView) view;"
9179,configureTextView,"    protected void configureTextView(TextView view, int txtGravity) {
        view.setTextColor(textColor);
        view.setGravity(txtGravity);
        view.setTextSize(textSize);
        view.setLines(1);
        view.setTypeface(Typeface.SANS_SERIF, Typeface.BOLD);
    }    "
9180,configureTextView,"    protected void configureTextView(TextView view) {
        view.setTextColor(textColor);
        view.setGravity(Gravity.CENTER);
        view.setTextSize(textSize);
        view.setLines(1);
        view.setTypeface(Typeface.SANS_SERIF, Typeface.BOLD);
    }"
9181,getEmptyItem,"    public View getEmptyItem(View convertView, ViewGroup parent) {
        if (convertView == null) {
            convertView = getView(emptyItemResourceId, parent);
        }
        if (emptyItemResourceId == TEXT_VIEW_ITEM_RESOURCE && convertView instanceof TextView) {"
9182,getItem,"    public View getItem(int index, View convertView, ViewGroup parent) {
        if (index >= 0 && index < getItemsCount()) {
            if (convertView == null) {
                convertView = getView(itemResourceId, parent);"
9183,getItemText,"    protected abstract CharSequence getItemText(int index);
"
9184,setEmptyItemResource,"    public void setEmptyItemResource(int emptyItemResourceId) {
        this.emptyItemResourceId = emptyItemResourceId;
    }"
9185,getEmptyItemResource,"    public int getEmptyItemResource() {
        return emptyItemResourceId;
    }"
9186,setItemTextResource,"    public void setItemTextResource(int itemTextResourceId) {
        this.itemTextResourceId = itemTextResourceId;
    }"
9187,getItemTextResource,"    public int getItemTextResource() {
        return itemTextResourceId;
    }"
9188,setItemResource,"    public void setItemResource(int itemResourceId) {
        this.itemResourceId = itemResourceId;
    }"
9189,getItemResource,"    public int getItemResource() {
        return itemResourceId;
    }"
9190,setTextSize,"    public void setTextSize(int textSize) {
        this.textSize = textSize;
    }"
9191,getTextSize,"    public int getTextSize() {
        return textSize;
    }"
9192,setTextColor,"    public void setTextColor(int textColor) {
        this.textColor = textColor;
    }"
9193,getTextColor,"    public int getTextColor() {
        return textColor;
    }"
9194,notifyDataInvalidatedEvent,"    protected void notifyDataInvalidatedEvent() {
        if (datasetObservers != null) {
            for (DataSetObserver observer : datasetObservers) {"
9195,notifyDataChangedEvent,"    protected void notifyDataChangedEvent() {
        if (datasetObservers != null) {
            for (DataSetObserver observer : datasetObservers) {"
9196,unregisterDataSetObserver,"    public void unregisterDataSetObserver(DataSetObserver observer) {
        if (datasetObservers != null) {
            datasetObservers.remove(observer);"
9197,registerDataSetObserver,"    public void registerDataSetObserver(DataSetObserver observer) {
        if (datasetObservers == null) {
            datasetObservers = new LinkedList<DataSetObserver>();
        }"
9198,getEmptyItem,"    public View getEmptyItem(View convertView, ViewGroup parent) {
        return null;
    }"
9199,onUserDeclinePermission,"    @Override protected void onUserDeclinePermission(@NonNull String permissionName) {
        Log.w(""Warning"", ""Permission ( "" + permissionName + "" ) is skipped you can request it again by calling doing such\n "" +
                ""if (permissionHelper.isExplanationNeeded(permissionName)) {\n"" +"
9201,backPressIsEnabled,"    @Override protected boolean backPressIsEnabled() {
        return false;
    }"
9204,theme,"    @Override protected int theme() {
        return R.style.noActionBar;
    }"
9206,onCreate,"    @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.fragment_activity_layout);
    }"
9207,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionFragmentHelper.requestAfterExplanation(permission);
            }"
9208,getAlertDialog,"    public AlertDialog getAlertDialog(final String permission) {
        if (builder == null) {
            builder = new AlertDialog.Builder(this.getContext())
                    .setTitle(""Permission Needs Explanation"")
                    .create();
        }"
9209,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionFragmentHelper.requestAfterExplanation(permissions);
            }"
9210,getAlertDialog,"    public AlertDialog getAlertDialog(final String[] permissions, final String permissionName) {
        if (builder == null) {
            builder = new AlertDialog.Builder(this.getContext())
                    .setTitle(""Permission Needs Explanation"")
                    .create();
        }"
9211,onClick,"    @Override public void onClick(View v) {
        if (v.getId() == R.id.single || v.getId() == R.id.multi) {
            isSingle = v.getId() == R.id.single;"
9212,onNoPermissionNeeded,"    @Override public void onNoPermissionNeeded() {
        result.setText(""Permission(s) not needed"");
        Log.i(""onNoPermissionNeeded"", ""Permission(s) not needed"");
    }"
9214,onPermissionNeedExplanation,"    @Override public void onPermissionNeedExplanation(@NonNull String permissionName) {
        Log.i(""NeedExplanation"", ""Permission( "" + permissionName + "" ) needs Explanation"");
        if (!isSingle) {
            neededPermission = PermissionFragmentHelper.declinedPermissions(this, MULTI_PERMISSIONS);"
9215,onPermissionPreGranted,"    @Override public void onPermissionPreGranted(@NonNull String permissionsName) {
        result.setText(""Permission( "" + permissionsName + "" ) preGranted"");
        Log.i(""onPermissionPreGranted"", ""Permission( "" + permissionsName + "" ) preGranted"");
    }"
9216,onPermissionDeclined,"    @Override public void onPermissionDeclined(@NonNull String[] permissionName) {
        result.setText(""Permission(s) "" + Arrays.toString(permissionName) + "" Declined"");
        Log.i(""onPermissionDeclined"", ""Permission(s) "" + Arrays.toString(permissionName) + "" Declined"");
    }"
9217,onPermissionGranted,"    @Override public void onPermissionGranted(@NonNull String[] permissionName) {
        result.setText(""Permission(s) "" + Arrays.toString(permissionName) + "" Granted"");
        Log.i(""onPermissionGranted"", ""Permission(s) "" + Arrays.toString(permissionName) + "" Granted"");
    }"
9218,onRequestPermissionsResult,"    @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        permissionFragmentHelper.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }"
9219,onActivityResult,"    @Override public void onActivityResult(int requestCode, int resultCode, Intent data) {
        permissionFragmentHelper.onActivityForResult(requestCode);
    }"
9221,onCreate,"    @Override public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        permissionFragmentHelper = PermissionFragmentHelper.getInstance(this);
    }"
9222,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionHelper.requestAfterExplanation(permission);
            }"
9223,getAlertDialog,"    public AlertDialog getAlertDialog(final String permission) {
        if (builder == null) {
            builder = new AlertDialog.Builder(this)
                    .setTitle(""Permission Needs Explanation"")
                    .create();
        }"
9224,onClick,"            public void onClick(DialogInterface dialog, int which) {
                permissionHelper.requestAfterExplanation(permissions);
            }"
9225,getAlertDialog,"    public AlertDialog getAlertDialog(final String[] permissions, final String permissionName) {
        if (builder == null) {
            builder = new AlertDialog.Builder(this)
                    .setTitle(""Permission Needs Explanation"")
                    .create();
        }"
9229,onPermissionNeedExplanation,"    @Override public void onPermissionNeedExplanation(@NonNull String permissionName) {
        Log.i(""NeedExplanation"", ""Permission( "" + permissionName + "" ) needs Explanation"");
        if (!isSingle) {
            neededPermission = PermissionHelper.declinedPermissions(this, MULTI_PERMISSIONS);"
9233,onRequestPermissionsResult,"    @Override public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        permissionHelper.onRequestPermissionsResult(requestCode, permissions, grantResults);
    }"
9234,onActivityResult,"    @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        permissionHelper.onActivityForResult(requestCode);
    }"
9236,onClick,"    @Override public void onClick(View v) {
        boolean isBadAss = v.getId() == R.id.badAss;
        Intent intent;
        if (isBadAss) {
            intent = new Intent(this, SampleActivity.class);
        } else {
            intent = new Intent(this, SamplePagerActivity.class);"
9237,onCreate,"    @Override protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main_activity);
        findViewById(R.id.badAss).setOnClickListener(this);
        findViewById(R.id.pagerActivity).setOnClickListener(this);
    }"
9238,addRequestPermissionsStatement,"    public void addRequestPermissionsStatement(MethodSpec.Builder builder, String activityVar, String requestCodeField) {
        builder.addStatement(""$T intent = new $T($T.ACTION_MANAGE_WRITE_SETTINGS, $T.parse(\""package:\"" + $N.getPackageName()))"",
                INTENT, INTENT, SETTINGS, URI, activityVar);
        builder.addStatement(""$N.startActivityForResult(intent, $N)"", activityVar, requestCodeField);"
9239,addHasSelfPermissionsCondition,"    public void addHasSelfPermissionsCondition(MethodSpec.Builder builder, String activityVar, String permissionField) {
        builder.beginControlFlow(""if ($T.hasSelfPermissions($N, $N) || $T.System.canWrite($N))"",
                PERMISSION_UTILS, activityVar, permissionField, SETTINGS, activityVar);"
9240,checkMixPermissionType,"    public static void checkMixPermissionType(List<ExecutableElement> elements, Class clazz) {
        for (ExecutableElement element : elements) {
"
9241,checkMethodParameters,"    public static void checkMethodParameters(List<ExecutableElement> elements, int methodCount,
                                             String clazz, TypeResolver classType) {
        for (ExecutableElement element : elements) {"
9242,checkDuplicatedValue,"    public static void checkDuplicatedValue(List<ExecutableElement> elements, Class clazz) {
        Set<String> values = new HashSet<>();
        for (ExecutableElement method : elements) {
            List<String> value = getValueFromAnnotation(method, clazz);"
9244,checkPrivateMethods,"    public static void checkPrivateMethods(List<ExecutableElement> elements, Class clazz) {
        for (ExecutableElement element : elements) {
            if (element.getModifiers().contains(Modifier.PRIVATE)) {"
9245,checkNotEmpty,"    public static void checkNotEmpty(List<ExecutableElement> elements, RuntimePermissionsElement element,
                                     Class clazz) {
        if (isEmpty(elements)) {"
9246,checkActivity,"    public static ClassType checkActivity(TypeElement element, TypeResolver resolver) {
        ClassType classType = getClassType(element.getQualifiedName().toString(), resolver);

        if (classType == null) {
            throw new WrongClassException(element);"
9247,typeMirrorOf,"    TypeMirror typeMirrorOf(String className);
}"
9248,isSameType,"    boolean isSameType(TypeMirror t1, TypeMirror t2);
"
9249,isSubTypeOf,"    boolean isSubTypeOf(String subTypeClass, String superTypeClass);
"
9250,addRequestPermissionsStatement,"    public void addRequestPermissionsStatement(MethodSpec.Builder builder, String activityVar, String requestCodeField) {
        builder.addStatement(""$T intent = new $T($T.ACTION_MANAGE_OVERLAY_PERMISSION, $T.parse(\""package:\"" + $N.getPackageName()))"",
                INTENT, INTENT, SETTINGS, URI, activityVar);
        builder.addStatement(""$N.startActivityForResult(intent, $N)"", activityVar, requestCodeField);"
9251,addHasSelfPermissionsCondition,"    public void addHasSelfPermissionsCondition(MethodSpec.Builder builder, String activityVar, String permissionField) {
        builder.beginControlFlow(""if ($T.hasSelfPermissions($N, $N) || $T.canDrawOverlays($N))"",
                PERMISSION_UTILS, activityVar, permissionField, SETTINGS, activityVar);"
9252,addRequestPermissionsStatement,"    void addRequestPermissionsStatement(MethodSpec.Builder builder, String activityVar, String requestCodeField);
}"
9253,addHasSelfPermissionsCondition,"    void addHasSelfPermissionsCondition(MethodSpec.Builder builder, String activityVar, String permissionField);
"
9254,getTypeVariables,"    public List<TypeVariableName> getTypeVariables() {
        return typeVariables;
    }"
9255,getTypeName,"    public TypeName getTypeName() {
        return mTypeName;
    }"
9256,getNeverAskMethods,"    public List<ExecutableElement> getNeverAskMethods() {
        return neverAskMethods;
    }"
9257,getDeniedPermissionMethods,"    public List<ExecutableElement> getDeniedPermissionMethods() {
        return deniedPermissionMethods;
    }"
9258,getShowsRationaleMethods,"    public List<ExecutableElement> getShowsRationaleMethods() {
        return showsRationaleMethods;
    }"
9259,getTypeResolver,"    public TypeResolver getTypeResolver() {
        return mTypeResolver;
    }"
9260,getNeedsPermissionsMethods,"    public List<ExecutableElement> getNeedsPermissionsMethods() {
        return needsPermissionsMethods;
    }"
9261,getGeneratedClassName,"    public String getGeneratedClassName() {
        return generatedClassName;
    }"
9262,getClassType,"    public ClassType getClassType() {
        return classType;
    }"
9263,getClassName,"    public String getClassName() {
        return className;
    }"
9264,getPackageName,"    public String getPackageName() {
        return packageName;
    }"
9265,findOnNeverAskForNeeds,"    public ExecutableElement findOnNeverAskForNeeds(String[] value) {
        return findOnNeverAskMatchingMethod(value, neverAskMethods);
    }"
9266,findOnDeniedForNeeds,"    public ExecutableElement findOnDeniedForNeeds(String[] value) {
        return findOnDeniedMatchingMethod(value, deniedPermissionMethods);
    }"
9267,findOnRationaleForNeeds,"    public ExecutableElement findOnRationaleForNeeds(String[] value) {
        return findOnRationaleMatchingMethod(value, showsRationaleMethods);
    }"
9268,validateNeverAskMethods,"    public void validateNeverAskMethods() {
        checkDuplicatedValue(neverAskMethods, OnNeverAskAgain.class);
        checkPrivateMethods(neverAskMethods, OnNeverAskAgain.class);
        checkMethodSignature(neverAskMethods);
        checkMethodParameters(neverAskMethods, 0, """", mTypeResolver);
    }"
9269,validateDeniedMethods,"    private void validateDeniedMethods() {
        checkDuplicatedValue(deniedPermissionMethods, OnPermissionDenied.class);
        checkPrivateMethods(deniedPermissionMethods, OnPermissionDenied.class);
        checkMethodSignature(deniedPermissionMethods);
        checkMethodParameters(deniedPermissionMethods, 0, """", mTypeResolver);
    }"
9270,validateRationaleMethods,"    private void validateRationaleMethods() {
        checkDuplicatedValue(showsRationaleMethods, OnShowRationale.class);
        checkPrivateMethods(showsRationaleMethods, OnShowRationale.class);
        checkMethodSignature(showsRationaleMethods);
        checkMethodParameters(showsRationaleMethods, 1,
                ""org.jokar.permissiondispatcher.library.PermissionRequest"", mTypeResolver);"
9271,validateNeedsMethods,"    private void validateNeedsMethods() {
        checkNotEmpty(needsPermissionsMethods, this, NeedsPermission.class);
        checkPrivateMethods(needsPermissionsMethods, NeedsPermission.class);
        checkMethodSignature(needsPermissionsMethods);
        checkMixPermissionType(needsPermissionsMethods, NeedsPermission.class);
    }"
9272,getSensitivePermission,"    public static SensitivePermissionInterface getSensitivePermission(List<String[]> ADD_WITH_CHECK_BODY_MAP,
                                                                      String[] value) {
        if (containsKey(ADD_WITH_CHECK_BODY_MAP, value)) {
            SensitivePermissionInterface permissionInterface;"
9273,containsKey,"    public static boolean containsKey(List<String[]> ADD_WITH_CHECK_BODY_MAP, String[] value) {
        for(String[] strings: ADD_WITH_CHECK_BODY_MAP){
            if(Arrays.equals(strings,value)){
                return true;"
9274,withCheckMethodName,"    public static String withCheckMethodName(ExecutableElement element) {
        return element.getSimpleName().toString() + ConstantsProvider.METHOD_SUFFIX;
    }"
9275,varargsParametersCodeBlock,"    public static CodeBlock varargsParametersCodeBlock(ExecutableElement needsElement) {
        CodeBlock.Builder varargsCall = CodeBlock.builder();
        List<? extends VariableElement> parameters = needsElement.getParameters();
        for (int i = 0; i < parameters.size(); i++) {
            VariableElement variableElement = parameters.get(i);
            varargsCall.add(""$L"", variableElement.getSimpleName().toString());"
9276,toUpperCaseFirstOne,"    private static String toUpperCaseFirstOne(String s) {
        if (Character.isUpperCase(s.charAt(0)))
            return s;"
9277,permissionRequestTypeName,"    public static String permissionRequestTypeName(ExecutableElement element) {
        return toUpperCaseFirstOne(element.getSimpleName().toString()) + ConstantsProvider.GEN_PERMISSIONREQUEST_SUFFIX;
    }"
9278,pendingRequestFieldName,"    public static String pendingRequestFieldName(ExecutableElement element) {
        return ConstantsProvider.GEN_PENDING_PREFIX + element.getSimpleName().toString().toUpperCase();
    }"
9279,permissionFieldName,"    public static String permissionFieldName(ExecutableElement element) {

        return ConstantsProvider.PERMISSION_PREFIX + element.getSimpleName().toString().toUpperCase();"
9280,requestCodeFieldName,"    public static String requestCodeFieldName(ExecutableElement element) {

        return ConstantsProvider.REQUEST_CODE_PREFIX + element.getSimpleName().toString().toUpperCase();"
9281,toString,"    public static String toString(String... array) {
        if (array == null) {
            return null;
        }
        int max = array.length - 1;
        StringBuilder b = new StringBuilder();
        b.append('{');"
9282,findOnNeverAskMatchingMethod,"    public static ExecutableElement findOnNeverAskMatchingMethod(String[] value1,
                                                                 List<ExecutableElement> elements) {
        for (ExecutableElement element : elements) {
            String[] value = element.getAnnotation(OnNeverAskAgain.class).value();"
9283,findOnDeniedMatchingMethod,"    public static ExecutableElement findOnDeniedMatchingMethod(String[] value,
                                                               List<ExecutableElement> elements) {
        for (ExecutableElement element : elements) {
            String[] value2 = element.getAnnotation(OnPermissionDenied.class).value();"
9284,findOnRationaleMatchingMethod,"    public static ExecutableElement findOnRationaleMatchingMethod(String[] annotation1,
                                                                  List<ExecutableElement> otherElements) {

        for (ExecutableElement element : otherElements) {"
9285,isEmpty,"    public static boolean isEmpty(Collection collection) {
        return collection == null || collection.isEmpty();
    }"
9286,getValueFromAnnotation,"    public static <A extends Annotation> List<String> getValueFromAnnotation(ExecutableElement element, Class<A> clazz) {

        if (Objects.equals(clazz, NeedsPermission.class)) {"
9287,findMethods,"    public static List<ExecutableElement> findMethods(Element element, Class<? extends Annotation> clazz) {
        List<ExecutableElement> methods = new ArrayList<>();
        for (Element enclosedElement : element.getEnclosedElements()) {
            Annotation annotation = enclosedElement.getAnnotation(clazz);
            if (annotation != null) {"
9288,getClassName,"    public static String getClassName(String name) {
        return name.substring(name.lastIndexOf(""."") + 1);
    }"
9289,getPackageName,"    public static String getPackageName(String name) {
        return name.substring(0, name.lastIndexOf("".""));
    }"
9291,getTargetSdkVersion,"    public static int getTargetSdkVersion(Context context) {
        if (targetSdkVersion != -1) {
            return targetSdkVersion;
        }
        try {"
9292,shouldShowRequestPermissionRationale,"    public static boolean shouldShowRequestPermissionRationale(Activity activity, String... permissions) {
        for (String permission : permissions) {
            if (ActivityCompat.shouldShowRequestPermissionRationale(activity, permission)) {
                return true;"
9293,checkSelfPermissionForXiaomi,"    private static boolean checkSelfPermissionForXiaomi(Context context, String permission) {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
            try {
                return checkSelfPermission(context, permission) == PackageManager.PERMISSION_GRANTED;
            } catch (RuntimeException t) {
                return false;
            }
        }
        int auth = ActivityCompat.checkSelfPermission(context, permission);"
9294,hasSelfPermission,"    private static boolean hasSelfPermission(Context context, String permission) {
        switch (Build.MANUFACTURER) {
            case ""Xiaomi"": {"
9295,hasSelfPermissions,"    public static boolean hasSelfPermissions(Context context, String... permissions) {
        for (String permission : permissions) {
            if (permissionExists(permission) && !hasSelfPermission(context, permission)) {
                return false;"
9297,verifyPermissions,"    public static boolean verifyPermissions(int... grantResults) {
        if (grantResults.length == 0) {
            return false;
        }
        for (int result : grantResults) {"
9298,error,"    private void error(String msg, Object... args) {
        mMessager.printMessage(Diagnostic.Kind.ERROR, String.format(msg, args));
    }"
9299,typeMirrorOf,"    public TypeMirror typeMirrorOf(String className) {

        return mElements.getTypeElement(className).asType();"
9300,isSameType,"    public boolean isSameType(TypeMirror t1, TypeMirror t2) {

        return mTypes.isSameType(t1, t2);"
9301,isSubTypeOf,"    public boolean isSubTypeOf(String subTypeClass, String superTypeClass) {
        Types types = processingEnv.getTypeUtils();
        Elements elements = processingEnv.getElementUtils();
        TypeMirror subType = types.getDeclaredType(elements.getTypeElement(subTypeClass));
        TypeMirror superType = types.getDeclaredType(elements.getTypeElement(superTypeClass));
        return types.isSubtype(subType, superType);
    }"
9302,getSupportedSourceVersion,"    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }"
9303,getSupportedAnnotationTypes,"    public Set<String> getSupportedAnnotationTypes() {
        return ImmutableSet.of(RuntimePermissions.class.getCanonicalName());
    }"
9304,process,"    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        List<RuntimePermissionsElement> elements = getAnnotatedClasses(roundEnv, this);
        for (RuntimePermissionsElement element : elements) {
            JavaFile javaFile = JavaFileBuilder.createJavaFile(element, this);
            try {"
9305,init,"    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        mTypes = processingEnv.getTypeUtils();
        mElements = processingEnv.getElementUtils();
        mFiler = processingEnv.getFiler();
        mMessager = processingEnv.getMessager();
    }"
9308,isDefinePermission,"    private static boolean isDefinePermission(RuntimePermissionsElement rpe, String[] permissionName) {
        List<ExecutableElement> needsPermissionsMethods = rpe.getNeedsPermissionsMethods();
        for (ExecutableElement executableElement : needsPermissionsMethods) {
            List<String> permissionValue = getValueFromAnnotation(executableElement, NeedsPermission.class);
            if (permissionValue.contains(permissionName)) {"
9309,hasWriteSettingPermission,"    private static boolean hasWriteSettingPermission(RuntimePermissionsElement rpe) {

        return isDefinePermission(rpe, MANIFEST_WRITE_SETTING);"
9310,hasSystemAlertWindowPermission,"    private static boolean hasSystemAlertWindowPermission(RuntimePermissionsElement rpe) {
        return isDefinePermission(rpe, MANIFEST_SYSTEM_ALERT_WINDOW);
    }"
9311,hasNormalPermission,"    private static boolean hasNormalPermission(RuntimePermissionsElement element) {

        List<ExecutableElement> needsPermissionsMethods = element.getNeedsPermissionsMethods();
        for (ExecutableElement executableElement : needsPermissionsMethods) {
            List<String> permissionValue = getValueFromAnnotation(executableElement, NeedsPermission.class);"
9312,addRequestPermissionsStatement,"    private static void addRequestPermissionsStatement(MethodSpec.Builder builder, String targetParam,
                                                       String permissionField, String requestCodeField,
                                                       ClassType classType) {"
9313,addShouldShowRequestPermissionRationaleCondition,"    private static void addShouldShowRequestPermissionRationaleCondition(MethodSpec.Builder builder,
                                                                         String targetParam,
                                                                         String permissionField,"
9314,createPermissionField,"    private static FieldSpec createPermissionField(String name, String... value) {
        return FieldSpec
                .builder(String[].class, name)"
9315,createRequestCodeField,"    private static FieldSpec createRequestCodeField(String name, int index) {
        return FieldSpec
                .builder(int.class, name, Modifier.PRIVATE, Modifier.STATIC, Modifier.FINAL)"
9316,createPendingRequestField,"    private static FieldSpec createPendingRequestField(ExecutableElement element) {

        return FieldSpec.builder(ClassName.get(""org.jokar.permissiondispatcher.library"", ""GrantableRequest""),"
9319,createWithCheckMethod,"    private static MethodSpec createWithCheckMethod(RuntimePermissionsElement element,
                                                    ExecutableElement method) {
        String targetParam = ""target"";

        MethodSpec.Builder builder = MethodSpec.methodBuilder(withCheckMethodName(method))
                .addTypeVariables(element.getTypeVariables())
                .addModifiers(Modifier.STATIC)
                .returns(TypeName.VOID)"
9325,createPermissionHandlingMethods,"    private static List<MethodSpec> createPermissionHandlingMethods(RuntimePermissionsElement element) {
        List<MethodSpec> methods = new ArrayList<>();
        if (hasNormalPermission(element)) {
            methods.add(createPermissionResultMethod(element));
        }
"
9327,createConstructor,"    private static MethodSpec createConstructor() {
        return MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PRIVATE)"
9328,createTypeSpec,"    private static TypeSpec createTypeSpec(RuntimePermissionsElement element,
                                           TypeResolver typeResolver) {
        return TypeSpec.classBuilder(element.getGeneratedClassName())"
9329,createJavaFile,"    public static JavaFile createJavaFile(RuntimePermissionsElement element, TypeResolver typeResolver) {

        return JavaFile.builder(element.getPackageName(), createTypeSpec(element, typeResolver))"
9331,getClassType,"    public static ClassType getClassType(String className, TypeResolver resolver) {
        if (resolver.isSubTypeOf(className, ConstantsProvider.ACTIVITY)) {
            return ACTIVITY;
        } else if (resolver.isSubTypeOf(className, ConstantsProvider.V4FRAGMENT)) {"
9332,getActivity,"    public String getActivity() {
        return activity;
    }"
9334,padl,"    public static final String padl(final String s, final int size, final char c)

    {

        final StringBuilder sb = new StringBuilder(size);"
9335,padl,"    public static final String padl(final Number num, final int size)

    {"
9336,cast,"    public static <T> T cast(Object obj)

    {"
9337,isMatch,"    public static boolean isMatch(String pattern, String url)

    {
"
9338,matches,"    public static boolean matches(String str, List<String> strs)

    {

        if (isEmpty(str) || isEmpty(strs))"
9339,toCamelCase,"    public static String toCamelCase(String s)

    {

        if (s == null)

        {
"
9341,inStringIgnoreCase,"    public static boolean inStringIgnoreCase(String str, String... strs)

    {
"
9342,toUnderScoreCase,"    public static String toUnderScoreCase(String str)

    {

        if (str == null)

        {

            return null;"
9343,ishttp,"    public static boolean ishttp(String link)

    {"
9344,format,"    public static String format(String template, Object... params)

    {
"
9345,containsText,"    private static boolean containsText(CharSequence str)

    {

        int strLen = str.length();"
9346,hasText,"    public static boolean hasText(String str)

    {"
9347,substring,"    public static String substring(final String str, int start, int end)

    {

        if (str == null)

        {

            return NULLSTR;
"
9348,substring,"    public static String substring(final String str, int start)

    {

        if (str == null)

        {"
9349,trim,"    public static String trim(String str)

    {"
9350,isArray,"    public static boolean isArray(Object object)

    {"
9351,isNotNull,"    public static boolean isNotNull(Object object)

    {"
9352,isNull,"    public static boolean isNull(Object object)

    {"
9353,isNotEmpty,"    public static boolean isNotEmpty(String str)

    {"
9354,isEmpty,"    public static boolean isEmpty(String str)

    {"
9355,isNotEmpty,"    public static boolean isNotEmpty(Map<?, ?> map)

    {"
9356,isEmpty,"    public static boolean isEmpty(Map<?, ?> map)

    {"
9357,isNotEmpty,"    public static boolean isNotEmpty(Object[] objects)

    {"
9358,isEmpty,"    public static boolean isEmpty(Object[] objects)

    {"
9359,isNotEmpty,"    public static boolean isNotEmpty(Collection<?> coll)

    {"
9360,isEmpty,"    public static boolean isEmpty(Collection<?> coll)

    {"
9361,nvl,"    public static <T> T nvl(T value, T defaultValue)

    {"
9362,format,"    public static String format(final String strPattern, final Object... argArray)

    {

        if (StringUtils.isEmpty(strPattern) || StringUtils.isEmpty(argArray))

        {

            return strPattern;
"
9364,toString,"    public String toString() {
        return ""Snowflake Settings [EPOCH_BITS="" + EPOCH_BITS + "", NODE_ID_BITS="" + NODE_ID_BITS
                + "", SEQUENCE_BITS="" + SEQUENCE_BITS + "", CUSTOM_EPOCH="" + customEpoch"
9365,parse,"    public long[] parse(long id) {
        long maskNodeId = ((1L << NODE_ID_BITS) - 1) << SEQUENCE_BITS;
        long maskSequence = (1L << SEQUENCE_BITS) - 1;

        long timestamp = (id >> (NODE_ID_BITS + SEQUENCE_BITS)) + customEpoch;
        long nodeId = (id & maskNodeId) >> SEQUENCE_BITS;
        long sequence = id & maskSequence;
"
9366,createNodeId,"    private long createNodeId() {
        long nodeId;
        try {
            StringBuilder sb = new StringBuilder();
            Enumeration<NetworkInterface> networkInterfaces = NetworkInterface.getNetworkInterfaces();
            while (networkInterfaces.hasMoreElements()) {"
9367,waitNextMillis,"    private long waitNextMillis(long currentTimestamp) {
        while (currentTimestamp == lastTimestamp) {
            currentTimestamp = timestamp();
        }"
9368,timestamp,"    private long timestamp() {
        return Instant.now().toEpochMilli() - customEpoch;
    }"
9370,getNewStmp,"    private long getNewStmp() {
        return System.currentTimeMillis();
    }"
9371,getNextMill,"    private long getNextMill() {
        long mill = getNewStmp();
        while (mill <= lastStmp) {
            mill = getNewStmp();
        }"
9373,getRequestAttributes,"    public static ServletRequestAttributes getRequestAttributes()
    {
        RequestAttributes attributes = RequestContextHolder.getRequestAttributes();
        return (ServletRequestAttributes) attributes;"
9374,getResponse,"    public static HttpServletResponse getResponse()
    {
        return getRequestAttributes().getResponse();"
9375,urlDecode,"    public static String urlDecode(String str)
    {
        try"
9376,getHeader,"    public static String getHeader(HttpServletRequest request, String name)
    {
        String value = request.getHeader(name);
        if (StringUtils.isEmpty(value))
        {"
9377,getRequest,"    public static HttpServletRequest getRequest()
    {
        return getRequestAttributes().getRequest();"
9378,matchesPassword,"    public static boolean matchesPassword(String rawPassword, String encodedPassword) {
        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
        return passwordEncoder.matches(rawPassword, encodedPassword);
    }"
9379,encryptPassword,"    public static String encryptPassword(String password) {
        BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
        return passwordEncoder.encode(password);
    }"
9380,isAdmin,"    public static boolean isAdmin(Long userId)
    {
        return userId != null && 1L == userId;"
9383,getUserName,"    public static String getUserName()
    {
        return SecurityContextHolder.getUserName();"
9384,getUserId,"    public static String getUserId()
    {
        return SecurityContextHolder.getUserId();"
9385,testLocalConfig,"    public R testLocalConfig() {
        return R.ok().put(""nickname"", nickname).put(""age"", age);
    }"
9390,setData,"    public void setData(T data) {
        this.data = data;
    }"
9391,getData,"    public T getData() {
        return data;
    }"
9394,setCode,"    public void setCode(String code) {
        this.code = code;
    }"
9395,getCode,"    public String getCode() {
        return code;
    }"
9396,isSuccess,"    public boolean isSuccess() {
        return Objects.equals(code, ""0"");
    }"
9397,error,"    public static <T> ResponseResult<T> error(String code, String msg, T data) {
        return new ResponseResult<>(code, msg, data);
    }"
9398,error,"    public static <T> ResponseResult<T>  error(String code, String msg) {
        return new ResponseResult<>(code, msg);
    }"
9399,success,"    public static <T> ResponseResult<T> success(T data) {
        return new ResponseResult<>(ResponseCodeEnum.SUCCESS.getCode(), ResponseCodeEnum.SUCCESS.getMessage(), data);
    }"
9400,success,"    public static <T> ResponseResult<T> success() {
        return new ResponseResult<>(ResponseCodeEnum.SUCCESS.getCode(), ResponseCodeEnum.SUCCESS.getMessage());
    }"
9401,getMessage,"    public String getMessage() {
    return message;
    }"
9402,getCode,"    public String getCode() {
    return code;
    }"
9403,put,"	public R put(String key, Object value) {
		super.put(key, value);
		return this;
	}"
9405,ok,"	public static R ok(Map<String, Object> map) {
		R r = new R();
		r.putAll(map);
		return r;
	}"
9406,ok,"	public static R ok(String msg) {
		R r = new R();
		r.put(""msg"", msg);
		return r;
	}"
9407,error,"	public static R error(int code, String msg) {
		R r = new R();
		r.put(""code"", code);
		r.put(""msg"", msg);
		return r;
	}"
9408,error,"	public static R error(String msg) {
		return error(HttpStatus.SC_INTERNAL_SERVER_ERROR, msg);
	}"
9411,getPage,"    public IPage<T> getPage(Map<String, Object> params) {
        return this.getPage(params, null, false);
    }"
9413,passwordEncoder,"    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }"
9416,setList,"	public void setList(List<?> list) {
		this.list = list;
	}"
9418,setCurrPage,"	public void setCurrPage(int currPage) {
		this.currPage = currPage;
	}"
9419,getCurrPage,"	public int getCurrPage() {
		return currPage;
	}"
9420,setTotalPage,"	public void setTotalPage(int totalPage) {
		this.totalPage = totalPage;
	}"
9421,getTotalPage,"	public int getTotalPage() {
		return totalPage;
	}"
9422,setPageSize,"	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}"
9423,getPageSize,"	public int getPageSize() {
		return pageSize;
	}"
9424,setTotalCount,"	public void setTotalCount(int totalCount) {
		this.totalCount = totalCount;
	}"
9425,getTotalCount,"	public int getTotalCount() {
		return totalCount;
	}"
9426,queryPage,"    public PageUtils queryPage(Map<String, Object> params) {
        IPage<NewsEntity> page = this.page(
                new Query<NewsEntity>().getPage(params),
                new QueryWrapper<NewsEntity>()"
9427,queryPage,"    PageUtils queryPage(Map<String, Object> params);
}"
9428,delete,"    public R delete(@RequestBody Long[] ids){
		newsService.removeByIds(Arrays.asList(ids));

        return R.ok();"
9429,update,"    public R update(@RequestBody NewsEntity news){
		newsService.updateById(news);

        return R.ok();"
9430,save,"    public R save(@RequestBody NewsEntity news){
		newsService.save(news);

        return R.ok();"
9431,info,"    public R info(@PathVariable(""id"") Long id){
		NewsEntity news = newsService.getById(id);

        return R.ok().put(""news"", news);"
9432,list,"    public R list(@RequestParam Map<String, Object> params){
        PageUtils page = newsService.queryPage(params);

        return R.ok().put(""page"", page);"
9433,getMemberByUserId,"    public MemberEntity getMemberByUserId(String userId) {
        return baseMapper.getMemberByUserId(userId);
    }"
9435,queryPage,"    public PageUtils queryPage(Map<String, Object> params) {
        IPage<MemberEntity> page = this.page(
                new Query<MemberEntity>().getPage(params),
                new QueryWrapper<MemberEntity>()"
9436,getMemberByUserId,"    MemberEntity getMemberByUserId(String userId);
}"
9437,sendCoupon,"    String sendCoupon(int num) throws Exception;
"
9438,queryPage,"    PageUtils queryPage(Map<String, Object> params);
"
9441,delete,"    public R delete(@RequestBody Long[] ids){
		memberService.removeByIds(Arrays.asList(ids));

        return R.ok();"
9442,update,"    public R update(@RequestBody MemberEntity member){
		memberService.updateById(member);

        return R.ok();"
9443,save,"    public R save(@RequestBody MemberEntity member){
		memberService.save(member);

        return R.ok();"
9444,info,"    public R info(@PathVariable(""id"") Long id){
		MemberEntity member = memberService.getById(id);

        return R.ok().put(""member"", member);"
9445,list,"    public R list(@RequestParam Map<String, Object> params){
        PageUtils page = memberService.queryPage(params);

        return R.ok().put(""page"", page);"
9450,urlEncode,"    public static String urlEncode(String str) {
        try {
            return URLEncoder.encode(str, Constants.UTF8);"
9451,removeHeader,"    private void removeHeader(ServerHttpRequest.Builder mutate, String name) {
        mutate.headers(httpHeaders -> httpHeaders.remove(name)).build();
    }"
9452,addHeader,"    private void addHeader(ServerHttpRequest.Builder mutate, String name, Object value) {
        if (value == null) {
            return;
        }
        String valueStr = value.toString();
        String valueEncode = urlEncode(valueStr);"
9453,jwtAuthGlobalFilter,"    public GlobalFilter jwtAuthGlobalFilter() {
        return (exchange, chain) -> {
"
9454,allowedAttribute,"    private boolean allowedAttribute(final String name, final String paramName) {
        return allowed(name) && (vAllowed.isEmpty() || vAllowed.get(name).contains(paramName));
    }"
9455,allowed,"    private boolean allowed(final String name) {
        return (vAllowed.isEmpty() || vAllowed.containsKey(name)) && !inArray(name, vDisallowed);
    }"
9456,inArray,"    private static boolean inArray(final String s, final String[] array) {
        for (String item : array) {
            if (item != null && item.equals(s)) {
                return true;"
9457,isValidEntity,"    private boolean isValidEntity(final String entity) {
        return inArray(entity, vAllowedEntities);
    }"
9458,checkEntity,"    private String checkEntity(final String preamble, final String term) {

        return "";"".equals(term) && isValidEntity(preamble)"
9459,encodeQuotes,"    private String encodeQuotes(final String s){
        if(encodeQuotes){
            StringBuffer buf = new StringBuffer();"
9462,processParamProtocol,"    private String processParamProtocol(String s) {
        s = decodeEntities(s);
        final Matcher m = P_PROTOCOL.matcher(s);
        if (m.find()) {
            final String protocol = m.group(1);
            if (!inArray(protocol, vAllowedProtocols)) {"
9464,regexReplace,"    private static String regexReplace(final Pattern regex_pattern, final String replacement, final String s) {
        Matcher m = regex_pattern.matcher(s);
        return m.replaceAll(replacement);
    }"
9465,processRemoveBlanks,"    private String processRemoveBlanks(final String s) {
        String result = s;
        for (String tag : vRemoveBlanks) {
            if(!P_REMOVE_PAIR_BLANKS.containsKey(tag)){
                P_REMOVE_PAIR_BLANKS.putIfAbsent(tag, Pattern.compile(""<"" + tag + ""(\\s[^>]*)?></"" + tag + "">""));"
9466,checkTags,"    private String checkTags(String s) {
        Matcher m = P_TAGS.matcher(s);

        final StringBuffer buf = new StringBuffer();
        while (m.find()) {
            String replaceStr = m.group(1);
            replaceStr = processTag(replaceStr);
            m.appendReplacement(buf, Matcher.quoteReplacement(replaceStr));
        }"
9469,isStripComments,"    public boolean isStripComments(){
        return stripComment;
    }"
9470,isAlwaysMakeTags,"    public boolean isAlwaysMakeTags(){
        return alwaysMakeTags;
    }"
9472,htmlSpecialChars,"    public static String htmlSpecialChars(final String s) {
        String result = s;
        result = regexReplace(P_AMP, ""&amp;"", result);
        result = regexReplace(P_QUOTE, ""&quot;"", result);
        result = regexReplace(P_LEFT_ARROW, ""&lt;"", result);
        result = regexReplace(P_RIGHT_ARROW, ""&gt;"", result);
        return result;
    }"
9473,chr,"    public static String chr(final int decimal) {
        return String.valueOf((char) decimal);
    }"
9474,debug,"    private void debug(final String msg) {
        if (vDebug) {
            Logger.getAnonymousLogger().info(msg);"
9475,reset,"    private void reset() {
        vTagCounts.clear();
    }"
9476,queryPage,"    public PageUtils queryPage(Map<String, Object> params) {
        IPage<GrowthChangeHistoryEntity> page = this.page(
                new Query<GrowthChangeHistoryEntity>().getPage(params),
                new QueryWrapper<GrowthChangeHistoryEntity>()"
9478,delete,"    public R delete(@RequestBody Long[] ids){
		growthChangeHistoryService.removeByIds(Arrays.asList(ids));

        return R.ok();"
9479,update,"    public R update(@RequestBody GrowthChangeHistoryEntity growthChangeHistory){
		growthChangeHistoryService.updateById(growthChangeHistory);

        return R.ok();"
9480,save,"    public R save(@RequestBody GrowthChangeHistoryEntity growthChangeHistory){
		growthChangeHistoryService.save(growthChangeHistory);

        return R.ok();"
9481,info,"    public R info(@PathVariable(""id"") Long id){
		GrowthChangeHistoryEntity growthChangeHistory = growthChangeHistoryService.getById(id);

        return R.ok().put(""growthChangeHistory"", growthChangeHistory);"
9482,list,"    public R list(@RequestParam Map<String, Object> params){
        PageUtils page = growthChangeHistoryService.queryPage(params);

        return R.ok().put(""page"", page);"
9483,getOrder,"    public int getOrder() {
        return 0;
    }"
9484,filter,"    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {

        return chain.filter(exchange);"
9486,toDBC,"    public static String toDBC(String text, Set<Character> notConvertSet)

    {

        char[] c = text.toCharArray();
"
9487,toDBC,"    public static String toDBC(String input)

    {"
9488,toSBC,"    public static String toSBC(String input, Set<Character> notConvertSet)

    {

        char[] c = input.toCharArray();"
9489,toSBC,"    public static String toSBC(String input)

    {"
9490,str,"    public static String str(ByteBuffer data, Charset charset)

    {
"
9491,str,"    public static String str(ByteBuffer data, String charset)

    {
"
9492,str,"    public static String str(byte[] data, Charset charset)

    {

        if (data == null)"
9493,str,"    public static String str(byte[] bytes, String charset)

    {"
9494,str,"    public static String str(Object obj, Charset charset)

    {

        if (null == obj)"
9495,str,"    public static String str(Object obj, String charsetName)

    {"
9496,utf8Str,"    public static String utf8Str(Object obj)

    {"
9497,toBigDecimal,"    public static BigDecimal toBigDecimal(Object value)

    {"
9498,toBigDecimal,"    public static BigDecimal toBigDecimal(Object value, BigDecimal defaultValue)

    {

        if (value == null)

        {

            return defaultValue;
"
9499,toBigInteger,"    public static BigInteger toBigInteger(Object value)

    {"
9500,toBigInteger,"    public static BigInteger toBigInteger(Object value, BigInteger defaultValue)

    {

        if (value == null)

        {
"
9501,toEnum,"    public static <E extends Enum<E>> E toEnum(Class<E> clazz, Object value)

    {"
9502,toEnum,"    public static <E extends Enum<E>> E toEnum(Class<E> clazz, Object value, E defaultValue)

    {

        if (value == null)

        {"
9503,toBool,"    public static Boolean toBool(Object value)

    {"
9504,toBool,"    public static Boolean toBool(Object value, Boolean defaultValue)

    {

        if (value == null)

        {
"
9505,toFloat,"    public static Float toFloat(Object value)

    {"
9506,toFloat,"    public static Float toFloat(Object value, Float defaultValue)

    {

        if (value == null)

        {
"
9507,toDouble,"    public static Double toDouble(Object value)

    {"
9508,toDouble,"    public static Double toDouble(Object value, Double defaultValue)

    {

        if (value == null)

        {
"
9509,toLong,"    public static Long toLong(Object value)

    {"
9510,toLong,"    public static Long toLong(Object value, Long defaultValue)

    {

        if (value == null)

        {
"
9511,toStrArray,"    public static String[] toStrArray(String split, String str)

    {"
9512,toStrArray,"    public static String[] toStrArray(String str)

    {"
9513,toLongArray,"    public static Long[] toLongArray(String split, String str)

    {

        if (StringUtils.isEmpty(str))

        {"
9514,toIntArray,"    public static Integer[] toIntArray(String split, String str)

    {

        if (StringUtils.isEmpty(str))

        {"
9515,toLongArray,"    public static Long[] toLongArray(String str)

    {"
9516,toIntArray,"    public static Integer[] toIntArray(String str)

    {"
9517,toInt,"    public static Integer toInt(Object value)

    {"
9518,toInt,"    public static Integer toInt(Object value, Integer defaultValue)

    {

        if (value == null)

        {
"
9519,toNumber,"    public static Number toNumber(Object value)

    {"
9520,toNumber,"    public static Number toNumber(Object value, Number defaultValue)

    {

        if (value == null)

        {"
9521,toShort,"    public static Short toShort(Object value)

    {"
9522,toShort,"    public static Short toShort(Object value, Short defaultValue)

    {

        if (value == null)

        {
"
9523,toByte,"    public static Byte toByte(Object value)

    {"
9524,toByte,"    public static Byte toByte(Object value, Byte defaultValue)

    {

        if (value == null)

        {
"
9525,toChar,"    public static Character toChar(Object value)

    {"
9526,toChar,"    public static Character toChar(Object value, Character defaultValue)

    {

        if (null == value)
"
9527,toStr,"    public static String toStr(Object value)

    {"
9528,toStr,"    public static String toStr(Object value, String defaultValue)

    {

        if (null == value)"
9529,getValue,"        public int getValue() {
            return value;
        }"
9532,systemCharset,"    public static String systemCharset()

    {"
9533,convert,"    public static String convert(String source, Charset srcCharset, Charset destCharset)

    {

        if (null == srcCharset)
"
9534,convert,"    public static String convert(String source, String srcCharset, String destCharset)

    {"
9535,charset,"    public static Charset charset(String charset)

    {"
9537,delete,"    public R delete(@RequestBody Long[] ids){
		channelService.removeByIds(Arrays.asList(ids));

        return R.ok();"
9538,update,"    public R update(@RequestBody ChannelEntity channel){
		channelService.updateById(channel);

        return R.ok();"
9539,save,"    public R save(@RequestBody ChannelEntity channel){
		channelService.save(channel);

        return R.ok();"
9540,info,"    public R info(@PathVariable(""id"") Long id){
		ChannelEntity channel = channelService.getById(id);

        return R.ok().put(""channel"", channel);"
9541,list,"    public R list(@RequestParam Map<String, Object> params){
        PageUtils page = channelService.queryPage(params);

        return R.ok().put(""page"", page);"
9542,queryPage,"    public PageUtils queryPage(Map<String, Object> params) {
        IPage<BannerEntity> page = this.page(
                new Query<BannerEntity>().getPage(params),
                new QueryWrapper<BannerEntity>()"
9544,delete,"    public R delete(@RequestBody Long[] ids){
		bannerService.removeByIds(Arrays.asList(ids));

        return R.ok();"
9545,update,"    public R update(@RequestBody BannerEntity banner){
		bannerService.updateById(banner);

        return R.ok();"
9546,save,"    public R save(@RequestBody BannerEntity banner){
		bannerService.save(banner);

        return R.ok();"
9547,info,"    public R info(@PathVariable(""id"") Long id){
		BannerEntity banner = bannerService.getById(id);

        return R.ok().put(""banner"", banner);"
9548,list,"    public R list(@RequestParam Map<String, Object> params){
        PageUtils page = bannerService.queryPage(params);

        return R.ok().put(""page"", page);"
9550,delete,"    public R delete(@RequestBody Long[] ids){
		accessTokenService.removeByIds(Arrays.asList(ids));

        return R.ok();"
9551,update,"    public R update(@RequestBody AccessTokenEntity accessToken){
		accessTokenService.updateById(accessToken);

        return R.ok();"
9552,save,"    public R save(@RequestBody AccessTokenEntity accessToken){
		accessTokenService.save(accessToken);

        return R.ok();"
9553,info,"    public R info(@PathVariable(""id"") Long id){
		AccessTokenEntity accessToken = accessTokenService.getById(id);

        return R.ok().put(""accessToken"", accessToken);"
9554,list,"    public R list(@RequestParam Map<String, Object> params){
        PageUtils page = accessTokenService.queryPage(params);

        return R.ok().put(""page"", page);"
9555,setBlockParallaxY,"    public void setBlockParallaxY(boolean blockParallaxY) {
        this.blockParallaxY = blockParallaxY;
    }"
9556,isBlockParallaxY,"    public boolean isBlockParallaxY() {
        return blockParallaxY;
    }"
9557,setBlockParallaxX,"    public void setBlockParallaxX(boolean blockParallaxX) {
        this.blockParallaxX = blockParallaxX;
    }"
9558,isBlockParallaxX,"    public boolean isBlockParallaxX() {
        return blockParallaxX;
    }"
9559,setScrollSpaceY,"    public void setScrollSpaceY(int scrollSpaceY) {
        this.scrollSpaceY = scrollSpaceY;
    }"
9560,getScrollSpaceY,"    public int getScrollSpaceY() {
        return scrollSpaceY;
    }"
9561,setScrollSpaceX,"    public void setScrollSpaceX(int scrollSpaceX) {
        this.scrollSpaceX = scrollSpaceX;
    }"
9562,getScrollSpaceX,"    public int getScrollSpaceX() {
        return scrollSpaceX;
    }"
9563,setReverseY,"    public void setReverseY(boolean reverseY) {
        this.reverseY = reverseY;
    }"
9564,isReverseY,"    public boolean isReverseY() {
        return reverseY;
    }"
9565,setReverseX,"    public void setReverseX(boolean reverseX) {
        this.reverseX = reverseX;
    }"
9566,isReverseX,"    public boolean isReverseX() {
        return reverseX;
    }"
9567,setInterpolator,"    public void setInterpolator(Interpolator interpol) {
        interpolator = interpol;
    }"
9568,setMyScrollY,"    private void setMyScrollY(int value) {
        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
            setScrollY(value);"
9569,setMyScrollX,"    private void setMyScrollX(int value) {
        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
            setScrollX(value);"
9570,applyParallax,"    private void applyParallax() {
        int[] location = new int[2];
        getLocationOnScreen(location);

        if (scrollSpaceY != 0
                && !blockParallaxY) {"
9571,initSizeScreen,"    private void initSizeScreen() {
        WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
        Display display = wm.getDefaultDisplay();
        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
            Point size = new Point();"
9572,parallaxAnimation,"    private void parallaxAnimation() {
        initSizeScreen();

        applyParallax();"
9573,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        applyParallax();
    }"
9575,onDraw,"                public void onDraw() {
                    applyParallax();
                }"
9576,onGlobalLayout,"            public void onGlobalLayout() {
                heightView = (float) getHeight();
                widthView = (float) getWidth();

                applyParallax();"
9577,onScrollChanged,"            public void onScrollChanged() {
                applyParallax();
            }"
9578,onAttachedToWindow,"    protected void onAttachedToWindow() {
        super.onAttachedToWindow();

        mOnScrollChangedListener = new ViewTreeObserver.OnScrollChangedListener() {
            @Override
            public void onScrollChanged() {
                applyParallax();
            }
        };
"
9591,applyParallax,"    private void applyParallax() {
        int[] location = new int[2];
        getLocationOnScreen(location);

        if (scrollSpaceY != 0 && !blockParallaxY) {
            float locationY = (float) location[1];"
9594,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);

        if (getDrawable() != null) {
"
9596,checkScale,"    private boolean checkScale() {
        switch (getScaleType()) {
            case CENTER:
            case CENTER_CROP:"
9599,onGlobalLayout,"            public void onGlobalLayout() {
                heightImageView = (float) getHeight();
                widthImageView = (float) getWidth();

                applyParallax();"
9602,onCreateView,"        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            int anInt = getArguments().getInt(ARG_SECTION_NUMBER);
            int resource;
            switch (anInt) {
                case 0:
                default:"
9603,newInstance,"        public static PlaceholderFragment newInstance(int sectionNumber) {
            PlaceholderFragment fragment = new PlaceholderFragment();
            Bundle args = new Bundle();
            args.putInt(ARG_SECTION_NUMBER, sectionNumber);
            fragment.setArguments(args);
            return fragment;
        }"
9604,getPageTitle,"        public CharSequence getPageTitle(int position) {
            Locale l = Locale.getDefault();
            switch (position) {
                case 0:
                    return getString(R.string.title_section1).toUpperCase(l);"
9612,onPageSelected,"            public void onPageSelected(int position) {
                actionBar.setSelectedNavigationItem(position);
            }"
9614,interpolatorId,"    public static Interpolator interpolatorId(int interpolationId) {
        switch (interpolationId) {
            case LINEAR:"
9615,createIntent,"    public static Intent createIntent(Context context) {
        return new Intent(context, AboutActivity.class);
    }"
9616,onClick,"            public void onClick(View v) {
                finish();
            }"
9617,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_parallax_everywhere_about);

        findViewById(R.id.about_background).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                finish();"
9619,onRepeat,"            public void onRepeat(int index) {
                Log.i(""asd"", ""onRepeat selected: "" + index);
            }"
9620,onSelected,"            public void onSelected(int index, int old) {
                Log.i(""asd"", ""selected: "" + index + "" old: "" + old);
            }"
9622,showToast,"    private void showToast(String text) {
        Toast.makeText(TestControllerActivity.this, text, Toast.LENGTH_SHORT).show();
    }"
9623,onClick,"            public void onClick(View v) {
                String text = mEdtIndex.getText().toString();
                if (TextUtils.isEmpty(text)) {
                    showToast(""input index"");
                    return;"
9624,onClick,"            public void onClick(View v) {
                String text = mEdtIndex.getText().toString();
                if (TextUtils.isEmpty(text)) {
                    showToast(""input index"");
                    return;
                }"
9629,initView,"    private void initView() {
        mEdtIndex = findViewById(R.id.edt_index);
        mBtnAddMessageNumber = findViewById(R.id.btn_addMessageNumber);
        mBtnSubtraMessageNumber = findViewById(R.id.btn_subtraMessageNumber);
        mBtnRemoveItem = findViewById(R.id.btn_remove_item);
        mBtnAddItem = findViewById(R.id.btn_add_item);
        mViewPager = findViewById(R.id.viewPager);
        mTab = findViewById(R.id.tab);
    }"
9630,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_test_controller);

        initView();

        initNavigation();"
9631,newRoundItem,"    private BaseTabItem newRoundItem(int drawable,int checkedDrawable,String text){
        SpecialTabRound mainTab = new SpecialTabRound(this);
        mainTab.initialize(drawable,checkedDrawable,text);
        mainTab.setTextDefaultColor(0xFF888888);
        mainTab.setTextCheckedColor(0xFF009688);
        return mainTab;
    }"
9632,newItem,"    private BaseTabItem newItem(int drawable, int checkedDrawable, String text){
        SpecialTab mainTab = new SpecialTab(this);
        mainTab.initialize(drawable,checkedDrawable,text);
        mainTab.setTextDefaultColor(0xFF888888);
        mainTab.setTextCheckedColor(0xFF009688);
        return mainTab;
    }"
9634,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mTvText.setText(""C"");
    }"
9635,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mTvText.setText(""B"");
    }"
9636,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mTvText.setText(""A"");
    }"
9637,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        mTvText = view.findViewById(R.id.tv_text);
    }"
9638,onCreateView,"    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_navigation_page, container, false);
    }"
9639,onSupportNavigateUp,"    public boolean onSupportNavigateUp() {
        return mNavController.navigateUp();
    }"
9640,initBottomNavigation,"    private void initBottomNavigation(PageNavigationView pageNavigationView) {
        NavigationController navigationController = pageNavigationView.material()
                .addItem(R.drawable.ic_favorite_gray_24dp, ""A"")
                .addItem(R.drawable.ic_favorite_gray_24dp, ""B"")"
9641,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_navigation_component);
        mNavigation = findViewById(R.id.navigation);

        mNavController = Navigation.findNavController(this, R.id.nav_host_fragment);
"
9645,navigationArchitectureComponent,"    public void navigationArchitectureComponent(View view) {
        startActivity(new Intent(this, NavigationComponentActivity.class));
    }"
9646,toTestController,"    public void toTestController(View view) {
        startActivity(new Intent(this, TestControllerActivity.class));
    }"
9647,toCsutomVertical,"    public void toCsutomVertical(View view) {
        startActivity(new Intent(this, VerticalCustomActivity.class));
    }"
9648,toVertical,"    public void toVertical(View view) {
        startActivity(new Intent(this, VerticalActivity.class));
    }"
9649,toSpecial,"    public void toSpecial(View view) {
        startActivity(new Intent(this, SpecialActivity.class));
    }"
9650,toHide,"    public void toHide(View view) {
        startActivity(new Intent(this, HideActivity.class));
    }"
9651,toBehavior,"    public void toBehavior(View view) {
        startActivity(new Intent(this, BehaviorActivity.class));
    }"
9652,toCustom2,"    public void toCustom2(View view) {
        startActivity(new Intent(this, Custom2Activity.class));
    }"
9653,toCustom,"    public void toCustom(View view) {
        startActivity(new Intent(this, CustomActivity.class));
    }"
9654,toMaterialdesign,"    public void toMaterialdesign(View view) {
        startActivity(new Intent(this, MaterialDesignActivity.class));
    }"
9655,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }"
9656,getItemCount,"        public int getItemCount() {
            return 100;
        }"
9657,onBindViewHolder,"        public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {

            if (holder.itemView instanceof TextView) {"
9659,onViewCreated,"        public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
            RecyclerView recyclerView = view.findViewById(R.id.recyclerView);
            recyclerView.setAdapter(new TestAdapter());
            recyclerView.addItemDecoration(new DividerItemDecoration(view.getContext(), DividerItemDecoration.VERTICAL));
            recyclerView.addOnScrollListener(new ListScrollListener());
        }"
9660,onCreateView,"        public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
            return inflater.inflate(R.layout.recyclerview, container, false);
        }"
9661,getCount,"        public int getCount() {
            return mNavigationController.getItemCount();
        }"
9662,getItem,"        public Fragment getItem(int position) {
            return new TestFragment();
        }"
9664,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_hide);

        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        PageNavigationView pageBottomTabLayout = findViewById(tab);

        mNavigationController = pageBottomTabLayout.material()
                .addItem(R.drawable.ic_restore_teal_24dp, ""Recents"")"
9665,newItem,"    private BaseTabItem newItem(int drawable, int checkedDrawable, String text) {
        NormalItemView normalItemView = new NormalItemView(this);
        normalItemView.initialize(drawable, checkedDrawable, text);
        normalItemView.setTextDefaultColor(Color.GRAY);
        normalItemView.setTextCheckedColor(0xFF009688);
        return normalItemView;
    }"
9667,newItem_test,"    private BaseTabItem newItem_test(int drawable, int checkedDrawable) {
        TestRepeatTab testRepeatTab = new TestRepeatTab(this);
        testRepeatTab.initialize(drawable, checkedDrawable);
        return testRepeatTab;
    }"
9668,newItem,"    private BaseTabItem newItem(int drawable, int checkedDrawable) {
        OnlyIconItemView onlyIconItemView = new OnlyIconItemView(this);
        onlyIconItemView.initialize(drawable, checkedDrawable);
        return onlyIconItemView;
    }"
9673,onViewCreated,"        public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
            RecyclerView recyclerView = view.findViewById(R.id.recyclerView);
            recyclerView.setAdapter(new TestAdapter());
            recyclerView.addItemDecoration(new DividerItemDecoration(view.getContext(), DividerItemDecoration.VERTICAL));
        }"
9677,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_behavior);

        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        PageNavigationView pageBottomTabLayout = findViewById(tab);

        mNavigationController = pageBottomTabLayout.material()
                .addItem(R.drawable.ic_restore_teal_24dp, ""Recents"")"
9683,willHit,"    boolean willHit(IDanmakuItem runningItem);
"
9691,fps,"    private double fps() {
        long lastTime = System.nanoTime();
        times.addLast(lastTime);
        double NANOS = 1000000000.0;
        double difference = (lastTime - times.getFirst()) / NANOS;
        int size = times.size();
        int MAX_SIZE = 100;
        if (size > MAX_SIZE) {
            times.removeFirst();
        }"
9692,run,"                public void run() {
                    synchronized (mWaitingItems) {
                        mWaitingItems.addAll(list);
                    }"
9693,addItem,"    public void addItem(final List<IDanmakuItem> list, boolean backgroundLoad) {
        if (backgroundLoad) {
            new Thread(){"
9694,addItemToHead,"    public void addItemToHead(IDanmakuItem item) {
        synchronized (mWaitingItems) {
            this.mWaitingItems.offerFirst(item);"
9695,addItem,"    public void addItem(IDanmakuItem item) {
        synchronized (mWaitingItems) {
            this.mWaitingItems.add(item);"
9696,setStartYOffset,"    public void setStartYOffset(float startYOffset, float endYOffset) {
        checkYOffset(startYOffset, endYOffset);
        clearRunning();
        this.mStartYOffset = startYOffset;
        this.mEndYOffset = endYOffset;
        calculation();
    }"
9697,setMaxRunningPerRow,"    public void setMaxRunningPerRow(int maxRunningPerRow) {
        this.mMaxRunningPerRow = maxRunningPerRow;
    }"
9698,setPickItemInterval,"    public void setPickItemInterval(int pickItemInterval) {
        this.mPickItemInterval = pickItemInterval;
    }"
9699,setMaxRow,"    public void setMaxRow(int maxRow) {
        this.mMaxRow = maxRow;
        calculation();
        clearRunning();
    }"
9700,clearWaiting,"    private void clearWaiting(){
        if (null != mWaitingItems && !mWaitingItems.isEmpty()) {
            mWaitingItems.clear();"
9701,clearRunning,"    private void clearRunning() {
        if (null != mChannelMap && !mChannelMap.isEmpty()) {
            mChannelMap.clear();"
9702,clearItems,"    private void clearItems() {
        clearRunning();
        clearWaiting();
    }"
9703,clear,"    public void clear() {
        status = STATUS_STOP;
        clearItems();
        invalidate();
    }"
9704,hide,"    public void hide() {
        status = STATUS_PAUSE;
        invalidate();
    }"
9705,show,"    public void show() {
        status = STATUS_RUNNING;
        invalidate();
    }"
9706,isPaused,"    public boolean isPaused() {
        return STATUS_PAUSE == status;
    }"
9708,clearPlayingItems,"    private void clearPlayingItems() {
        if (mChannelMap != null) {
            synchronized (mChannelMap) {"
9710,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (status == STATUS_RUNNING) {
            try {"
9711,initChannelY,"    private void initChannelY() {
        if (mChannelY == null){
            mChannelY = new int[mMaxRow];
        }

        float rowHeight = getHeight() * (mEndYOffset - mStartYOffset) / mMaxRow;
        float baseOffset = getHeight() * mStartYOffset;"
9712,initChannelMap,"    private void initChannelMap(){
        mChannelMap = new HashMap<>(mMaxRow);
        for (int i = 0; i < mMaxRow; i++) {
            ArrayList<IDanmakuItem> runningRow= new ArrayList<IDanmakuItem>(mMaxRunningPerRow);"
9713,calculation,"    private void calculation() {
        if (mShowDebug) {
            fpsPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
            fpsPaint.setColor(Color.YELLOW);
            fpsPaint.setTextSize(20);"
9714,init,"    private void init() {
        setBackgroundColor(Color.TRANSPARENT);
        setDrawingCacheBackgroundColor(Color.TRANSPARENT);
        calculation();
    }"
9715,checkYOffset,"    private void checkYOffset(float start, float end) {
        if (start >= end ){
            throw new IllegalArgumentException(""start_Y_offset must < end_Y_offset"");
        }"
9716,getFontHeight,"    private static int getFontHeight(TextPaint paint){
        Paint.FontMetrics fm = paint.getFontMetrics();
        return (int) Math.ceil(fm.descent - fm.top) + 2;
    }"
9717,dip2px,"    private static int dip2px(Context context, float dipValue) {
        final float scale = context.getResources().getDisplayMetrics().density;
        return (int) (dipValue * scale + 0.5f);
    }"
9718,setBaseSpeed,"    public static void setBaseSpeed(int baseSpeed) {
        DanmakuItem.sBaseSpeed = baseSpeed;
    }"
9719,getBaseSpeed,"    public static int getBaseSpeed() {
        return sBaseSpeed;
    }"
9720,willHit,"    public boolean willHit(IDanmakuItem runningItem) {
        if (runningItem.getWidth() + runningItem.getCurrX() > mContainerWidth) {
            return true;
        }

        if (runningItem.getSpeedFactor()>= mFactor) {
            return false;
        }"
9721,getCurrY,"    public int getCurrY() {
        return mCurrY;
    }"
9722,getCurrX,"    public int getCurrX() {
        return mCurrX;
    }"
9723,getHeight,"    public int getHeight() {
        return mContentHeight;
    }"
9724,getWidth,"    public int getWidth() {
        return mContentWidth;
    }"
9725,release,"    public void release() {
        mContext = null;
    }"
9726,isOut,"    public boolean isOut() {
        return mCurrX < 0 && Math.abs(mCurrX) > mContentWidth;
    }"
9727,getSpeedFactor,"    public float getSpeedFactor() {
        return mFactor;
    }"
9728,setSpeedFactor,"    public void setSpeedFactor(float factor) {
        this.mFactor = factor;
    }"
9729,setStartPosition,"    public void setStartPosition(int x, int y) {
        this.mCurrX = x;
        this.mCurrY = y;
    }"
9730,setTextColor,"    public void setTextColor(int textColorResId) {
        if (textColorResId > 0) {
            this.mTextColor = mContext.getResources().getColor(textColorResId);"
9731,setTextSize,"    public void setTextSize(int textSizeInDip) {
        if (textSizeInDip > 0) {
            this.mTextSize = dip2px(mContext, textSizeInDip);"
9734,create,"    public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {
        Provider<? extends ViewModel> creator = creators.get(modelClass);
        if (creator == null) {
            for (Map.Entry<Class<? extends ViewModel>, Provider<ViewModel>> entry : creators.entrySet()) {
                if (modelClass.isAssignableFrom(entry.getKey())) {
                    creator = entry.getValue();"
9736,build,"        public ModelLoader<GlideUrl, InputStream> build(MultiModelLoaderFactory multiFactory) {
            return new OkHttpUrlLoader(client);
        }"
9737,getInternalClient,"        private static Call.Factory getInternalClient() {
            if (internalClient == null) {
                synchronized (Factory.class) {
                    if (internalClient == null) {"
9738,buildLoadData,"    public LoadData<InputStream> buildLoadData(GlideUrl model, int width, int height,
                                               Options options) {
        return new LoadData<>(model, new OkHttpStreamFetcher(client, model));"
9739,handles,"    public boolean handles(GlideUrl url) {
        return true;
    }"
9740,getDataSource,"    public DataSource getDataSource() {
        return DataSource.REMOTE;
    }"
9741,getDataClass,"    public Class<InputStream> getDataClass() {
        return InputStream.class;
    }"
9742,cancel,"    public void cancel() {
        Call local = call;
        if (local != null) {
            local.cancel();"
9743,cleanup,"    public void cleanup() {
        try {
            if (stream != null) {
                stream.close();
            }"
9744,onResponse,"    public void onResponse(@NonNull Call call, @NonNull Response response) throws IOException {
        responseBody = response.body();
        if (response.isSuccessful()) {
            long contentLength = responseBody.contentLength();"
9745,onFailure,"    public void onFailure(@NonNull Call call, @NonNull IOException e) {
        if (Log.isLoggable(TAG, Log.DEBUG)) {
            Log.d(TAG, ""OkHttp failed to obtain result"", e);
        }"
9748,onFailure,"                        public void onFailure(@NonNull Call<R> call, @NonNull Throwable throwable) {
                            postValue(new ApiResponse<>(throwable));
                        }"
9749,onResponse,"                        public void onResponse(@NonNull Call<R> call, @NonNull Response<R> response) {
                            postValue(new ApiResponse<>(response));
                        }"
9750,onActive,"            protected void onActive() {
                super.onActive();
                if (started.compareAndSet(false, true)) {
                    call.enqueue(new Callback<R>() {"
9751,adapt,"    public LiveData<ApiResponse<R>> adapt(@NonNull Call<R> call) {
        return new LiveData<ApiResponse<R>>() {
            AtomicBoolean started = new AtomicBoolean(false);"
9752,responseType,"    public Type responseType() {
        return responseType;
    }"
9757,applyOptions,"    void applyOptions(Context context, ArmsConfigModule.Builder builder);
}"
9759,useEventBus,"    protected boolean useEventBus() {
        return true;
    }"
9762,unDisposeAll,"    protected void unDisposeAll() {
        if (mCompositeDisposable != null) {
            mCompositeDisposable.clear();"
9763,addDispose,"    protected void addDispose(Disposable disposable) {
        if (mCompositeDisposable == null) {
            mCompositeDisposable = new CompositeDisposable();
        }"
9764,onDestroy,"    public void onDestroy() {
        super.onDestroy();
        EventBus.getDefault().unregister(this);
        unDisposeAll();
        this.mCompositeDisposable = null;
    }"
9765,onCreate,"    public void onCreate() {
        super.onCreate();
        EventBus.getDefault().register(this);
        init();
    }"
9766,onBind,"    public IBinder onBind(Intent intent) {
        return null;
    }"
9767,onDestroy,"    public void onDestroy() {
        this.mRepositoryManager = null;
    }"
9769,onFragmentVisibleChange,"    protected void onFragmentVisibleChange(boolean isVisible) {
    }"
9770,setUserVisibleHint,"    public void setUserVisibleHint(boolean isVisibleToUser) {
        super.setUserVisibleHint(isVisibleToUser);
        mVisible = isVisibleToUser;
        if (mRootView == null) {
            return;
        }"
9771,useEventBus,"    public boolean useEventBus() {
        return true;
    }"
9774,getArmsModule,"    public ArmsModule getArmsModule() {
        return ((IArms) mAppDelegate).getArmsModule();
    }"
9775,getArmsComponent,"    public ArmsComponent getArmsComponent() {
        return ((IArms) mAppDelegate).getArmsComponent();
    }"
9776,getRepositoryModule,"    public RepositoryModule getRepositoryModule() {
        return ((IRepository) mAppDelegate).getRepositoryModule();
    }"
9777,getRepositoryComponent,"    public RepositoryComponent getRepositoryComponent() {
        return ((IRepository) mAppDelegate).getRepositoryComponent();
    }"
9778,getLifecycleModule,"    public LifecycleModule getLifecycleModule() {
        return ((ILifecycle) mAppDelegate).getLifecycleModule();
    }"
9779,getLifecycleComponent,"    public LifecycleComponent getLifecycleComponent() {
        return ((ILifecycle) mAppDelegate).getLifecycleComponent();
    }"
9780,supportFragmentInjector,"    public AndroidInjector<Fragment> supportFragmentInjector() {
        return this.mFragmentInjector;
    }"
9781,activityInjector,"    public AndroidInjector<Activity> activityInjector() {
        return this.mActivityInjector;
    }"
9782,onTerminate,"    public void onTerminate() {
        super.onTerminate();
        mAppDelegate.onTerminate(this);
    }"
9783,onCreate,"    public void onCreate() {
        super.onCreate();

        mAppDelegate.onCreate(this);"
9784,attachBaseContext,"    protected void attachBaseContext(Context context) {
        super.attachBaseContext(context);
        mAppDelegate = new AppDelegate(context);
        mAppDelegate.attachBaseContext(context);
    }"
9786,onSaveInstanceState,"    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        /**"
9787,injectable,"    public boolean injectable() {
        return true;
    }"
9788,useFragment,"    public boolean useFragment() {
        return true;
    }"
9792,onConfigurationChanged,"        public void onConfigurationChanged(Configuration newConfig) {
"
9794,getArmsModule,"    public ArmsModule getArmsModule() {
        Preconditions.checkNotNull(mArmsModule,
                ""%s cannot be null,first call %s#onCreate(Application) in %s#onCreate()"",
                ArmsModule.class.getName(), getClass().getName(), mApplication.getClass().getName());"
9795,getArmsComponent,"    public ArmsComponent getArmsComponent() {
        Preconditions.checkNotNull(mArmsComponent,
                ""%s cannot be null,first call %s#onCreate(Application) in %s#onCreate()"",
                ArmsComponent.class.getName(), getClass().getName(), mApplication.getClass().getName());"
9797,onTerminate,"    public void onTerminate(Application application) {
        if (mComponentCallback != null) {
            mApplication.unregisterComponentCallbacks(mComponentCallback);
        }"
9799,getArmsModule,"    public ArmsModule getArmsModule() {
        return mArmsInjector.getArmsModule();
    }"
9800,getArmsComponent,"    public ArmsComponent getArmsComponent() {
        return mArmsInjector.getArmsComponent();
    }"
9801,getRepositoryModule,"    public RepositoryModule getRepositoryModule() {
        return mRepositoryInjector.getRepositoryModule();
    }"
9802,getRepositoryComponent,"    public RepositoryComponent getRepositoryComponent() {
        return mRepositoryInjector.getRepositoryComponent();
    }"
9803,getLifecycleModule,"    public LifecycleModule getLifecycleModule() {
        return mLifecycleInjector.getLifecycleModule();
    }"
9804,getLifecycleComponent,"    public LifecycleComponent getLifecycleComponent() {
        return mLifecycleInjector.getLifecycleComponent();
    }"
9805,onTerminate,"    public void onTerminate(Application application) {
        mLifecycleInjector.onTerminate(application);
        this.mLifecycleInjector = null;
        mArmsInjector.onTerminate(application);
        this.mArmsInjector = null;
        mRepositoryInjector.onTerminate(application);
        this.mRepositoryInjector = null;
        this.mApplication = null;
    }"
9807,attachBaseContext,"    public void attachBaseContext(Context context) {
        mLifecycleInjector.attachBaseContext(context);
    }"
9808,getNextPage,"    public Integer getNextPage() {
        String next = links.get(NEXT_LINK);
        if (next == null) {
            return null;
        }
        Matcher matcher = PAGE_PATTERN.matcher(next);
        if (!matcher.find() || matcher.groupCount() != 1) {"
9809,isSuccessful,"    public boolean isSuccessful() {
        return code >= 200 && code < 300;
    }"
9811,writeToParcel,"    public void writeToParcel(Parcel dest, int flags) {
        dest.writeInt(what);
        dest.writeInt(arg1);
        dest.writeInt(arg2);
        dest.writeString(str);
        dest.writeString(presenter);
        if (obj != null) {
            try {
                Parcelable p = (Parcelable) obj;
                dest.writeInt(1);
                dest.writeParcelable(p, flags);
            } catch (ClassCastException e) {"
9813,newArray,"        public Message[] newArray(int size) {
            return new Message[size];
        }"
9814,createFromParcel,"        public Message createFromParcel(Parcel source) {
            Message msg = Message.obtain();
            msg.readFromParcel(source);
            return msg;
        }"
9815,toString,"    public String toString() {
        StringBuilder b = new StringBuilder();
        b.append(""{"");

        if (target != null) {

            b.append("" what="");"
9818,setAsynchronous,"    public void setAsynchronous(boolean async) {
        if (async) {
            flags |= FLAG_ASYNCHRONOUS;"
9819,isAsynchronous,"    public boolean isAsynchronous() {
        return (flags & FLAG_ASYNCHRONOUS) != 0;
    }"
9820,HandleMessageToTargetUnrecycle,"    public void HandleMessageToTargetUnrecycle() {
        if (target == null) throw new IllegalArgumentException(""target is null"");
        target.handleMessage(this);
    }"
9821,HandleMessageToTarget,"    public void HandleMessageToTarget() {
        if (target == null) throw new IllegalArgumentException(""target is null"");
        target.handleMessage(this);
        this.recycleUnchecked();
    }"
9822,setData,"    public void setData(Bundle data) {
        this.data = data;
    }"
9823,peekData,"    public Bundle peekData() {
        return data;
    }"
9824,getData,"    public Bundle getData() {
        if (data == null) {
            data = new Bundle();
        }"
9825,getTarget,"    public IView getTarget() {
        return target;
    }"
9826,setTarget,"    public void setTarget(IView target) {
        this.target = target;
    }"
9827,copyFrom,"    public void copyFrom(Message o) {
        this.flags = o.flags & ~FLAGS_TO_CLEAR_ON_COPY_FROM;
        this.what = o.what;
        this.str = o.str;
        this.presenter = o.presenter;
        this.arg1 = o.arg1;
        this.arg2 = o.arg2;
        this.obj = o.obj;
        this.objs = o.objs;
        this.replyTo = o.replyTo;
        this.sendingUid = o.sendingUid;

        if (o.data != null) {"
9829,recycle,"    public void recycle() {
        if (isInUse()) {
            if (gCheckRecycle) {
                throw new IllegalStateException(""This message cannot be recycled because it """
9830,updateCheckRecycle,"    public static void updateCheckRecycle(int targetSdkVersion) {
        if (targetSdkVersion < Build.VERSION_CODES.LOLLIPOP) {
            gCheckRecycle = false;"
9831,isFromThisPresenter,"    public boolean isFromThisPresenter(Class presenter) {
        return this.presenter.equals(presenter.getSimpleName());
    }"
9832,obtain,"    public static Message obtain(IView v, int what,
                                 int arg1, int arg2, Object obj) {
        Message m = obtain();
        m.target = v;
        m.what = what;
        m.arg1 = arg1;
        m.arg2 = arg2;
        m.obj = obj;
"
9833,obtain,"    public static Message obtain(IView v, int what, int arg1, int arg2) {
        Message m = obtain();
        m.target = v;
        m.what = what;
        m.arg1 = arg1;
        m.arg2 = arg2;

        return m;"
9834,obtain,"    public static Message obtain(IView v, int what, Object obj) {
        Message m = obtain();
        m.target = v;
        m.what = what;
        m.obj = obj;

        return m;"
9835,obtain,"    public static Message obtain(IView v, int what) {
        Message m = obtain();
        m.target = v;
        m.what = what;

        return m;"
9836,obtain,"    public static Message obtain(IView v, Object[] objs, Class presenter) {
        Message m = obtain();
        m.target = v;
        m.objs = objs;
        m.presenter = presenter.getSimpleName();
        return m;
    }"
9837,obtain,"    public static Message obtain(IView v, Object obj, Class presenter) {
        Message m = obtain();
        m.target = v;
        m.obj = obj;
        m.presenter = presenter.getSimpleName();
        return m;
    }"
9838,obtain,"    public static Message obtain(IView v, Class presenter) {
        Message m = obtain();
        m.target = v;
        m.presenter = presenter.getSimpleName();
        return m;
    }"
9839,obtain,"    public static Message obtain(IView v, Object[] objs) {
        Message m = obtain();
        m.target = v;
        m.objs = objs;
        return m;
    }"
9840,obtain,"    public static Message obtain(IView v, Object obj) {
        Message m = obtain();
        m.target = v;
        m.obj = obj;
        return m;
    }"
9841,obtain,"    public static Message obtain(IView v) {
        Message m = obtain();
        m.target = v;
        return m;
    }"
9843,obtain,"    public static Message obtain() {
        synchronized (sPoolSync) {
            if (sPool != null) {
                Message m = sPool;"
9851,addSubscribe,"    protected void addSubscribe(Subscription subscription) {
        if (mCompositeSubscription == null) {
            mCompositeSubscription = new CompositeSubscription();
        }"
9859,initView,"    protected abstract View initView(LayoutInflater inflater, ViewGroup container);
"
9860,useEventBus,"    protected boolean useEventBus() {

        return true;"
9862,onDestroyView,"    public void onDestroyView() {

        super.onDestroyView();
"
9863,onViewStateRestored,"    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {

        super.onViewStateRestored(savedInstanceState);
"
9866,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
"
9872,onRestoreInstanceState,"    protected void onRestoreInstanceState(Bundle savedInstanceState) {

        super.onRestoreInstanceState(savedInstanceState);
"
9874,call,"            public Observable<WelfarePhotoInfo> call(WelfarePhotoList welfarePhotoList) {
                if (welfarePhotoList.getResults().size() == 0) {
                    return Observable.empty();
                }"
9875,_flatMapWelfarePhotos,"    private static Func1<WelfarePhotoList, Observable<WelfarePhotoInfo>> _flatMapWelfarePhotos() {
        return new Func1<WelfarePhotoList, Observable<WelfarePhotoInfo>>() {
            @Override"
9877,_flatMapPhotos,"    private static Func1<Map<String, List<BeautyPhotoInfo>>, Observable<List<BeautyPhotoInfo>>> _flatMapPhotos() {
        return new Func1<Map<String, List<BeautyPhotoInfo>>, Observable<List<BeautyPhotoInfo>>>() {
            @Override"
9878,call,"            public Observable<SpecialInfo> call(Map<String, SpecialInfo> specialMap) {
                return Observable.just(specialMap.get(specialId));
            }"
9879,_flatMapSpecial,"    private static Func1<Map<String, SpecialInfo>, Observable<SpecialInfo>> _flatMapSpecial(final String specialId) {
        return new Func1<Map<String, SpecialInfo>, Observable<SpecialInfo>>() {
            @Override"
9880,call,"            public Observable<List<VideoInfo>> call(Map<String, List<VideoInfo>> newsListMap) {
                return Observable.just(newsListMap.get(typeStr));
            }"
9881,_flatMapVideo,"    private static Func1<Map<String, List<VideoInfo>>, Observable<List<VideoInfo>>> _flatMapVideo(final String typeStr) {
        return new Func1<Map<String, List<VideoInfo>>, Observable<List<VideoInfo>>>() {
            @Override"
9882,call,"            public Observable<NewsInfo> call(Map<String, List<NewsInfo>> newsListMap) {
                return Observable.from(newsListMap.get(typeStr));
            }"
9883,_flatMapNews,"    private static Func1<Map<String, List<NewsInfo>>, Observable<NewsInfo>> _flatMapNews(final String typeStr) {
        return new Func1<Map<String, List<NewsInfo>>, Observable<NewsInfo>>() {
            @Override"
9884,call,"                public Observable<T> call(Map<String, List<T>> stringListMap) {
                    if (TextUtils.isEmpty(mMapKey)) {
                        return Observable.error(new Throwable(""Map Key is empty""));
                    }"
9885,call,"        public Observable<T> call(Observable<Map<String, List<T>>> mapObservable) {
            return  mapObservable.flatMap(new Func1<Map<String, List<T>>, Observable<T>>() {
                @Override"
9886,setMapKey,"        public FlatMapTransformer<T> setMapKey(String mapKey) {
            mMapKey = mapKey;
            return this;
        }"
9887,getVideoList,"    public static Observable<List<VideoInfo>> getVideoList(String videoId, int page) {
        return sNewsService.getVideoList(videoId, page * INCREASE_PAGE / 2)
                .subscribeOn(Schedulers.io())"
9888,getWelfarePhoto,"    public static Observable<WelfarePhotoInfo> getWelfarePhoto(int page) {
        return sWelfareService.getWelfarePhoto(page)
                .subscribeOn(Schedulers.io())"
9889,getBeautyPhoto,"    public static Observable<List<BeautyPhotoInfo>> getBeautyPhoto(int page) {
        return sNewsService.getBeautyPhoto(page * INCREASE_PAGE)
                .subscribeOn(Schedulers.io())"
9890,getPhotoMoreList,"    public static Observable<List<PhotoInfo>> getPhotoMoreList(String setId) {
        return sNewsService.getPhotoMoreList(setId)
                .subscribeOn(Schedulers.io())"
9891,getPhotoList,"    public static Observable<List<PhotoInfo>> getPhotoList() {
        return sNewsService.getPhotoList()
                .subscribeOn(Schedulers.io())"
9892,getPhotoSet,"    public static Observable<PhotoSetInfo> getPhotoSet(String photoId) {
        return sNewsService.getPhotoSet(StringUtils.clipPhotoSetId(photoId))
                .subscribeOn(Schedulers.io())"
9893,call,"                    public Observable<NewsDetailInfo> call(Map<String, NewsDetailInfo> newsDetailMap) {
                        return Observable.just(newsDetailMap.get(newsId));
                    }"
9894,getNewsDetail,"    public static Observable<NewsDetailInfo> getNewsDetail(final String newsId) {
        return sNewsService.getNewsDetail(newsId)
                .subscribeOn(Schedulers.io())"
9895,getSpecial,"    public static Observable<SpecialInfo> getSpecial(String specialId) {
        return sNewsService.getSpecial(specialId)
                .subscribeOn(Schedulers.io())"
9896,getNewsList,"    public static Observable<NewsInfo> getNewsList(String newsId, int page) {
        String type;
        if (newsId.equals(HEAD_LINE_NEWS)) {
            type = ""headline"";
        } else {"
9897,_parseParams,"    private static String _parseParams(RequestBody body, Buffer requestBuffer) throws UnsupportedEncodingException {
        if (body.contentType() != null && !body.contentType().toString().contains(""multipart"")) {
            return URLDecoder.decode(requestBuffer.readUtf8(), ""UTF-8"");
        }"
9898,intercept,"        public Response intercept(Chain chain) throws IOException {
            final Request request = chain.request();
            Buffer requestBuffer = new Buffer();
            if (request.body() != null) {
                request.body().writeTo(requestBuffer);
            } else {
                Logger.d(""LogTAG"", ""request.body() == null"");
            }"
9899,intercept,"        public Response intercept(Chain chain) throws IOException {
            Request request = chain.request();
            if (!NetUtil.isNetworkAvailable(AndroidApplication.getContext())) {
                request = request.newBuilder().cacheControl(CacheControl.FORCE_CACHE).build();
                Logger.e(""no network"");
            }"
9901,isNewsPhotoSet,"    public static boolean isNewsPhotoSet(String skipType) {
        return NEWS_ITEM_PHOTO_SET.equals(skipType);
    }"
9902,isNewsSpecial,"    public static boolean isNewsSpecial(String skipType) {
        return NEWS_ITEM_SPECIAL.equals(skipType);
    }"
9903,clipNewsIdFromUrl,"    public static String clipNewsIdFromUrl(String url) {
        String newsId = null;
        int index = url.indexOf(NEWS_ID_PREFIX);
        if (index != -1) {
            newsId = url.substring(index, index + NEWS_ID_LENGTH);
        } else if (url.endsWith(NEWS_ID_SUFFIX)) {"
9904,isAbNews,"    public static boolean isAbNews(@NonNull NewsInfo newsBean) {
        return (newsBean.getHasHead() == HAS_HEAD &&
                newsBean.getAds() != null && newsBean.getAds().size() > 1);"
9905,getWelfarePhoto,"    Observable<WelfarePhotoList> getWelfarePhoto(@Path(""page"") int page);
"
9906,getVideoList,"    Observable<Map<String, List<VideoInfo>>> getVideoList(@Path(""id"") String id,
                                                          @Path(""startPage"") int startPage);"
9907,getBeautyPhoto,"    Observable<Map<String, List<BeautyPhotoInfo>>> getBeautyPhoto(@Query(""offset"") int offset);
"
9908,getPhotoMoreList,"    Observable<List<PhotoInfo>> getPhotoMoreList(@Path(""setId"") String setId);
"
9909,getPhotoList,"    Observable<List<PhotoInfo>> getPhotoList();
"
9910,getPhotoSet,"    Observable<PhotoSetInfo> getPhotoSet(@Path(""photoId"") String photoId);
"
9911,getNewsDetail,"    Observable<Map<String, NewsDetailInfo>> getNewsDetail(@Path(""newsId"") String newsId);
"
9912,getSpecial,"    Observable<Map<String, SpecialInfo>> getSpecial(@Path(""specialId"") String specialIde);
"
9913,getNewsList,"    Observable<Map<String, List<NewsInfo>>> getNewsList(@Path(""type"") String type, @Path(""id"") String id,
                                                        @Path(""startPage"") int startPage);"
9914,getViewImpl,"    protected View getViewImpl(int position, View convertView, ViewGroup parent) {

        return super.getView(position, convertView, parent);"
9915,getActionModeTitle,"    public String getActionModeTitle(int count) {

		return helper.getActionModeTitle(count);"
9916,isItemCheckable,"    public boolean isItemCheckable(int position) {

        return true;"
9917,getView,"    public final View getView(int position, View convertView, ViewGroup parent) {

        View viewWithoutSelection = getViewImpl(position, convertView, parent);
"
9918,onDestroyActionMode,"    public void onDestroyActionMode(ActionMode mode) {

        helper.onDestroyActionMode();"
9919,getContext,"    protected Context getContext() {

        return helper.getContext();"
9920,finishActionMode,"    protected void finishActionMode() {

        helper.finishActionMode();"
9921,getItemClickInActionModePolicy,"    public ItemClickInActionModePolicy getItemClickInActionModePolicy() {

        return helper.getItemClickInActionModePolicy();"
9922,setItemClickInActionModePolicy,"    public void setItemClickInActionModePolicy(ItemClickInActionModePolicy policy) {

        helper.setItemClickInActionModePolicy(policy);"
9923,setItemChecked,"    public void setItemChecked(int position, boolean checked) {

        helper.setItemChecked(position, checked);"
9924,isChecked,"    public boolean isChecked(long itemId) {

        return helper.isChecked(itemId);"
9925,getCheckedItemCount,"    public int getCheckedItemCount() {

        return helper.getCheckedItemCount();"
9926,getCheckedItems,"    public Set<Long> getCheckedItems() {

        return helper.getCheckedItems();"
9927,setItemChecked,"    public void setItemChecked(long itemId, boolean checked) {

        helper.setItemChecked(itemId, checked);"
9928,save,"    public void save(Bundle outState) {

        helper.save(outState);"
9929,setOnItemClickListener,"    public void setOnItemClickListener(OnItemClickListener listener) {

        helper.setOnItemClickListener(listener);"
9930,setAdapterView,"    public void setAdapterView(AdapterView<? super BaseAdapter> adapterView) {

        helper.setAdapterView(adapterView);"
9931,positionToSelectionHandle,"        protected long positionToSelectionHandle(int position) {

            return getItemId(position);"
9933,getActionModeTitle,"    public String getActionModeTitle(int count) {

    	return helper.getActionModeTitle(count);"
9938,getViewImpl,"    protected abstract View getViewImpl(int position, View convertView, ViewGroup parent);
"
9941,isChecked,"    public boolean isChecked(long position) {

        return helper.isChecked(position);"
9944,setItemChecked,"    public void setItemChecked(long position, boolean checked) {

        helper.setItemChecked(position, checked);"
9963,onCheckedChanged,"    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
        if (ignoreCheckedListener) {
            return;
        }
        int position = (Integer) buttonView.getTag();"
9964,initItemCheckbox,"    private void initItemCheckbox(int position, ViewGroup view) {
        CheckBox checkBox = (CheckBox) view.findViewById(android.R.id.checkbox);
        boolean checked = isChecked(position);
        checkBox.setTag(position);
        checkBox.setChecked(checked);
        checkBox.setOnCheckedChangeListener(this);
    }"
9965,itemIncludesCheckBox,"    private boolean itemIncludesCheckBox(View v) {
        if (itemIncludesCheckBox == null) {
            if (!(v instanceof ViewGroup)) {
                itemIncludesCheckBox = false;"
9966,getView,"    public View getView(int position, View viewWithoutSelection) {
        if (viewWithoutSelection instanceof Checkable) {
            long handle = positionToSelectionHandle(position);
            boolean selected = isChecked(handle);
            ignoreCheckedListener = true;"
9967,onItemClick,"    public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {
        if (isActionModeStarted()) {
            switch (itemClickInActionModePolicy) {
            case SELECT:"
9968,onDestroyActionMode,"    public void onDestroyActionMode() {
        checkedItems.clear();
        clearActionMode();
        owner.notifyDataSetChanged();
    }"
9969,positionToSelectionHandle,"    protected long positionToSelectionHandle(int position) {
        return position;
    }"
9970,correctPositionAccountingForHeader,"    private int correctPositionAccountingForHeader(AdapterView<?> adapterView, int position) {
        ListView listView = (adapterView instanceof ListView) ? (ListView) adapterView : null;
        int headersCount = listView == null ? 0 : listView.getHeaderViewsCount();
        if (headersCount > 0) {
            position -= listView.getHeaderViewsCount();
        }"
9973,clearActionMode,"    protected abstract void clearActionMode();
"
9974,finishActionMode,"    protected abstract void finishActionMode();
    protected abstract void clearActionMode();"
9975,startActionMode,"    protected abstract void startActionMode();
    protected abstract void finishActionMode();"
9976,isActionModeStarted,"    protected abstract boolean isActionModeStarted();
    protected abstract void startActionMode();"
9977,setActionModeTitle,"    protected abstract void setActionModeTitle(String title);
    protected abstract boolean isActionModeStarted();"
9978,onItemSelectedStateChanged,"    private void onItemSelectedStateChanged() {
        int count = getCheckedItemCount();
        if (count == 0) {
            finishActionMode();
            return;
        }"
9979,getActionModeTitle,"    public String getActionModeTitle(int count) {
        Resources res = getContext().getResources();
        return res.getQuantityString(R.plurals.selected_items, count, count);
    }"
9980,getItemClickInActionModePolicy,"    public ItemClickInActionModePolicy getItemClickInActionModePolicy() {
        return itemClickInActionModePolicy;
    }"
9981,setItemClickInActionModePolicy,"    public void setItemClickInActionModePolicy(ItemClickInActionModePolicy policy) {
        itemClickInActionModePolicy = policy;
    }"
9982,getContext,"    public Context getContext() {
        return adapterView.getContext();
    }"
9983,isChecked,"    public boolean isChecked(long handle) {
        return checkedItems.contains(handle);
    }"
9984,getCheckedItemCount,"    public int getCheckedItemCount() {
        return checkedItems.size();
    }"
9986,uncheckItem,"    public void uncheckItem(long handle) {
        boolean wasSelected = isChecked(handle);
        if (!wasSelected) {
            return;
        }
        checkedItems.remove(handle);
        if (getCheckedItemCount() == 0) {
            finishActionMode();"
9987,checkItem,"    public void checkItem(long handle) {
        boolean wasSelected = isChecked(handle);
        if (wasSelected) {
            return;
        }
        if (!isActionModeStarted()) {
            startActionMode();
        }"
9988,setItemChecked,"    public void setItemChecked(long handle, boolean checked) {
        if (checked) {
            checkItem(handle);"
9989,save,"    public void save(Bundle outState) {
        long[] array = new long[checkedItems.size()];
        int i = 0;
        for (Long id : checkedItems) {
            array[i++] = id;
        }"
9990,setOnItemClickListener,"    public void setOnItemClickListener(OnItemClickListener listener) {
        this.itemClickListener = listener;
    }"
9991,checkActivity,"    public void checkActivity() {
        Context context = getContext();
        if (context instanceof ListActivity) {
            throw new RuntimeException(""ListView cannot belong to an activity which subclasses ListActivity"");"
9992,setAdapterView,"    public void setAdapterView(AdapterView<? super BaseAdapter> adapterView) {
        this.adapterView = adapterView;
        checkActivity();
        adapterView.setOnItemLongClickListener(this);
        adapterView.setOnItemClickListener(this);
        adapterView.setAdapter(owner);
        parseAttrs();

        if (!checkedItems.isEmpty()) {"
9993,restoreSelectionFromSavedInstanceState,"    public void restoreSelectionFromSavedInstanceState(Bundle savedInstanceState) {
        if (savedInstanceState == null) {
            return;
        }
        long[] array = savedInstanceState.getLongArray(BUNDLE_KEY);
        checkedItems.clear();"
9994,clearActionMode,"    protected void clearActionMode() {
        actionMode = null;
    }"
9995,isActionModeStarted,"    protected boolean isActionModeStarted() {
        return actionMode != null;
    }"
9996,setActionModeTitle,"    protected void setActionModeTitle(String title) {
        actionMode.setTitle(title);
    }"
9997,finishActionMode,"    protected void finishActionMode() {
        if (actionMode != null) {
            actionMode.finish();"
9998,startActionMode,"    protected void startActionMode() {
        try {
            Activity activity = (Activity) adapterView.getContext();"
10000,isItemCheckable,"    boolean isItemCheckable(int position);
    String getActionModeTitle(int count);"
10001,getItemClickInActionModePolicy,"    ItemClickInActionModePolicy getItemClickInActionModePolicy();
    boolean isItemCheckable(int position);"
10002,setItemClickInActionModePolicy,"    void setItemClickInActionModePolicy(ItemClickInActionModePolicy policy);
    ItemClickInActionModePolicy getItemClickInActionModePolicy();"
10003,isChecked,"    boolean isChecked(long position);
    void setItemClickInActionModePolicy(ItemClickInActionModePolicy policy);"
10004,getCheckedItemCount,"    int getCheckedItemCount();
    boolean isChecked(long position);"
10005,getCheckedItems,"    Set<Long> getCheckedItems();
    int getCheckedItemCount();"
10006,setItemChecked,"    void setItemChecked(long position, boolean checked);
    Set<Long> getCheckedItems();"
10007,save,"    void save(Bundle outState);
    void setItemChecked(long position, boolean checked);"
10008,setOnItemClickListener,"    void setOnItemClickListener(OnItemClickListener listener);
    void save(Bundle outState);"
10009,setAdapterView,"    void setAdapterView(AdapterView<? super BaseAdapter> adapterView);
    void setOnItemClickListener(OnItemClickListener listener);"
10010,getText2,"    public TextView getText2() {
        return mText2;
    }"
10011,getText1,"    public TextView getText1() {
        return mText1;
    }"
10012,onFinishInflate,"    protected void onFinishInflate() {
        super.onFinishInflate();
        
        mText1 = (TextView) findViewById(android.R.id.text1);
        mText2 = (TextView) findViewById(android.R.id.text2);"
10013,drawableStateChanged,"    protected void drawableStateChanged() {
        super.drawableStateChanged();

        Drawable drawable = getBackground();
        if (drawable != null) {"
10014,onCreateDrawableState,"    protected int[] onCreateDrawableState(int extraSpace) {
        final int[] drawableState = super.onCreateDrawableState(extraSpace + 1);
        if (isChecked()) {
            mergeDrawableStates(drawableState, CHECKED_STATE_SET);
        }"
10015,setCheckedRecursive,"    private void setCheckedRecursive(ViewGroup parent, boolean checked) {
        int count = parent.getChildCount();
        for (int i = 0; i < count; i++) {
            View v = parent.getChildAt(i);"
10016,setChecked,"    public void setChecked(boolean checked) {
        if (mChecked != checked) {
            mChecked = checked;"
10017,isChecked,"    public boolean isChecked() {
        return mChecked;
    }"
10018,toggle,"    public void toggle() {
        setChecked(!mChecked);
    }"
10019,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent ev) {
        return onTouchEvent(ev);
    }"
10020,performClick,"    public boolean performClick() {
        toggle();
        return super.performClick();
    }"
10031,drawableStateChanged,"    protected void drawableStateChanged() {
        super.drawableStateChanged();

        if (stateList != null) {"
10032,onCreateDrawableState,"    public int[] onCreateDrawableState(int extraSpace) {
        final int[] drawableState = super.onCreateDrawableState(extraSpace + 1);
        if (isChecked()) {
            mergeDrawableStates(drawableState, CHECKED_STATE_SET);
        }"
10033,toggle,"    public void toggle() {
        setChecked(!isChecked());
    }"
10036,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (stateList != null) {
            stateList.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());"
10040,onCreateDrawableState,"    protected int[] onCreateDrawableState(int extraSpace) {
        final int[] drawableState = super.onCreateDrawableState(extraSpace + 2);

        if (mChecked) {
            mergeDrawableStates(drawableState, CHECKED_STATE_SET);"
10041,getRecordWriter,"    public RecordWriter<K, V> getRecordWriter(final TaskAttemptContext context) {
        return new MongoRecordWriter<K, V>(
          MongoConfigUtil.getOutputCollection(context.getConfiguration()),"
10042,getOutputCommitter,"    public OutputCommitter getOutputCommitter(final TaskAttemptContext context) {
        return new MongoOutputCommitter();
    }"
10043,checkOutputSpecs,"    public void checkOutputSpecs(final JobContext context) throws IOException {
        if (MongoConfigUtil.getOutputURIs(context.getConfiguration()).isEmpty()) {
            throw new IOException(""No output URI is specified. You must set mongo.output.uri."");"
10046,verifyConfiguration,"    public boolean verifyConfiguration(final Configuration conf) {
        return true;
    }"
10047,getSplits,"    public List<InputSplit> getSplits(final JobContext context) throws IOException {
        final Configuration conf = context.getConfiguration();
        try {
            MongoSplitter splitterImpl = MongoSplitterFactory.getSplitter(conf);"
10048,createRecordReader,"    public RecordReader<Object, BSONObject> createRecordReader(final InputSplit split, final TaskAttemptContext context) {
        if (!(split instanceof MongoInputSplit)) {
            throw new IllegalStateException(""Creation of a new RecordReader requires a MongoInputSplit instance."");
        }
"
10049,getBSONPathFilter,"    public Class<?> getBSONPathFilter() {
        return MongoConfigUtil.getBSONPathFilter(configuration);
    }"
10050,setBSONPathFilter,"    public void setBSONPathFilter(final Class<? extends PathFilter> val) {
        MongoConfigUtil.setBSONPathFilter(configuration, val);
    }"
10051,setBSONOutputBuildSplits,"    public void setBSONOutputBuildSplits(final boolean val) {
        MongoConfigUtil.setBSONOutputBuildSplits(configuration, val);
    }"
10052,getBSONOutputBuildSplits,"    public boolean getBSONOutputBuildSplits() {
        return MongoConfigUtil.getBSONOutputBuildSplits(configuration);
    }"
10053,setBSONWriteSplits,"    public void setBSONWriteSplits(final boolean val) {
        MongoConfigUtil.setBSONWriteSplits(configuration, val);
    }"
10054,getBSONWriteSplits,"    public boolean getBSONWriteSplits() {
        return MongoConfigUtil.getBSONWriteSplits(configuration);
    }"
10055,setBSONReadSplits,"    public void setBSONReadSplits(final boolean val) {
        MongoConfigUtil.setBSONReadSplits(configuration, val);
    }"
10056,getBSONReadSplits,"    public boolean getBSONReadSplits() {
        return MongoConfigUtil.getBSONReadSplits(configuration);
    }"
10057,setNoTimeout,"    public void setNoTimeout(final boolean value) {
        MongoConfigUtil.setNoTimeout(configuration, value);
    }"
10058,isNoTimeout,"    public boolean isNoTimeout() {
        return MongoConfigUtil.isNoTimeout(configuration);
    }"
10059,setInputKey,"    public void setInputKey(final String fieldName) {
        MongoConfigUtil.setInputKey(configuration, fieldName);
    }"
10060,getInputKey,"    public String getInputKey() {
        return MongoConfigUtil.getInputKey(configuration);
    }"
10061,setCreateInputSplits,"    public void setCreateInputSplits(final boolean value) {
        MongoConfigUtil.setCreateInputSplits(configuration, value);
    }"
10062,createInputSplits,"    public boolean createInputSplits() {
        return MongoConfigUtil.createInputSplits(configuration);
    }"
10063,setInputSplitKey,"    public void setInputSplitKey(final DBObject key) {
        MongoConfigUtil.setInputSplitKey(configuration, key);
    }"
10064,setInputSplitKeyPattern,"    public void setInputSplitKeyPattern(final String pattern) {
        MongoConfigUtil.setInputSplitKeyPattern(configuration, pattern);
    }"
10065,getInputSplitKey,"    public DBObject getInputSplitKey() {
        return MongoConfigUtil.getInputSplitKey(configuration);
    }"
10066,getInputSplitKeyPattern,"    public String getInputSplitKeyPattern() {
        return MongoConfigUtil.getInputSplitKeyPattern(configuration);
    }"
10067,setReadSplitsFromSecondary,"    public void setReadSplitsFromSecondary(final boolean value) {
        MongoConfigUtil.setReadSplitsFromSecondary(configuration, value);
    }"
10068,canReadSplitsFromSecondary,"    public boolean canReadSplitsFromSecondary() {
        return MongoConfigUtil.canReadSplitsFromSecondary(configuration);
    }"
10069,setRangeQueryEnabled,"    public void setRangeQueryEnabled(final boolean value) {
        MongoConfigUtil.setRangeQueryEnabled(configuration, value);
    }"
10070,isRangeQueryEnabled,"    public boolean isRangeQueryEnabled() {
        return MongoConfigUtil.isRangeQueryEnabled(configuration);
    }"
10071,setShardChunkSplittingEnabled,"    public void setShardChunkSplittingEnabled(final boolean value) {
        MongoConfigUtil.setShardChunkSplittingEnabled(configuration, value);
    }"
10072,isShardChunkedSplittingEnabled,"    public boolean isShardChunkedSplittingEnabled() {
        return MongoConfigUtil.isShardChunkedSplittingEnabled(configuration);
    }"
10073,setReadSplitsFromShards,"    public void setReadSplitsFromShards(final boolean value) {
        MongoConfigUtil.setReadSplitsFromShards(configuration, value);
    }"
10074,canReadSplitsFromShards,"    public boolean canReadSplitsFromShards() {
        return MongoConfigUtil.canReadSplitsFromShards(configuration);
    }"
10075,setSplitSize,"    public void setSplitSize(final int value) {
        MongoConfigUtil.setSplitSize(configuration, value);
    }"
10076,getSplitSize,"    public int getSplitSize() {
        return MongoConfigUtil.getSplitSize(configuration);
    }"
10077,setLazyBSON,"    public void setLazyBSON(final boolean lazy) {
        MongoConfigUtil.setLazyBSON(configuration, lazy);
    }"
10078,getLazyBSON,"    public boolean getLazyBSON() {
        return MongoConfigUtil.getLazyBSON(configuration);
    }"
10079,setSkip,"    public void setSkip(final int skip) {
        MongoConfigUtil.setSkip(configuration, skip);
    }"
10080,getSkip,"    public int getSkip() {
        return MongoConfigUtil.getSkip(configuration);
    }"
10081,setLimit,"    public void setLimit(final int limit) {
        MongoConfigUtil.setLimit(configuration, limit);
    }"
10082,getLimit,"    public int getLimit() {
        return MongoConfigUtil.getLimit(configuration);
    }"
10083,getSort,"    public DBObject getSort() {
        return MongoConfigUtil.getSort(configuration);
    }"
10084,setSort,"    public void setSort(final DBObject sort) {
        MongoConfigUtil.setSort(configuration, sort);
    }"
10085,setSort,"    public void setSort(final String sort) {
        MongoConfigUtil.setSort(configuration, sort);
    }"
10086,getFields,"    public DBObject getFields() {
        return MongoConfigUtil.getFields(configuration);
    }"
10087,setFields,"    public void setFields(final DBObject fields) {
        MongoConfigUtil.setFields(configuration, fields);
    }"
10088,setFields,"    public void setFields(final String fields) {
        MongoConfigUtil.setFields(configuration, fields);
    }"
10089,getQuery,"    public DBObject getQuery() {
        return MongoConfigUtil.getQuery(configuration);
    }"
10090,setQuery,"    public void setQuery(final DBObject query) {
        MongoConfigUtil.setQuery(configuration, query);
    }"
10091,setQuery,"    public void setQuery(final String query) {
        MongoConfigUtil.setQuery(configuration, query);
    }"
10092,setDBObject,"    public void setDBObject(final String key, final DBObject value) {
        MongoConfigUtil.setDBObject(configuration, key, value);
    }"
10093,getDBObject,"    public DBObject getDBObject(final String key) {
        return MongoConfigUtil.getDBObject(configuration, key);
    }"
10094,setJSON,"    public void setJSON(final String key, final String value) {
        MongoConfigUtil.setJSON(configuration, key, value);
    }"
10095,setOutputURI,"    public void setOutputURI(final MongoClientURI uri) {
        MongoConfigUtil.setOutputURI(configuration, uri);
    }"
10096,setOutputURI,"    public void setOutputURI(final MongoURI uri) {
        MongoConfigUtil.setOutputURI(configuration, uri);
    }"
10097,setOutputURI,"    public void setOutputURI(final String uri) {
        MongoConfigUtil.setOutputURI(configuration, uri);
    }"
10098,getOutputURI,"    public MongoClientURI getOutputURI() {
        return MongoConfigUtil.getOutputURI(configuration);
    }"
10099,setAuthUri,"    public void setAuthUri(final String uri) {
        MongoConfigUtil.setAuthURI(configuration, uri);
    }"
10100,setInputURI,"    public void setInputURI(final MongoClientURI uri) {
        MongoConfigUtil.setInputURI(configuration, uri);
    }"
10101,setInputURI,"    public void setInputURI(final MongoURI uri) {
        MongoConfigUtil.setInputURI(configuration, uri);
    }"
10102,setInputURI,"    public void setInputURI(final String uri) {
        MongoConfigUtil.setInputURI(configuration, uri);
    }"
10103,setMongoURIString,"    public void setMongoURIString(final String key, final String value) {
        MongoConfigUtil.setMongoURIString(configuration, key, value);
    }"
10104,setMongoURI,"    public void setMongoURI(final String key, final MongoClientURI value) {
        MongoConfigUtil.setMongoURI(configuration, key, value);
    }"
10105,setMongoURI,"    public void setMongoURI(final String key, final MongoURI value) {
        setMongoURI(key, new MongoClientURI(value.toString()));
    }"
10106,getInputCollection,"    public DBCollection getInputCollection() {
        return MongoConfigUtil.getInputCollection(configuration);
    }"
10107,getOutputCollection,"    public DBCollection getOutputCollection() {
        return MongoConfigUtil.getOutputCollection(configuration);
    }"
10108,getAuthURI,"    public MongoClientURI getAuthURI() {
        return MongoConfigUtil.getAuthURI(configuration);
    }"
10109,getInputURI,"    public MongoClientURI getInputURI() {
        return MongoConfigUtil.getInputURI(configuration);
    }"
10110,getMongoURI,"    public MongoClientURI getMongoURI(final String key) {
        return MongoConfigUtil.getMongoClientURI(configuration, key);
    }"
10111,setInputFormat,"    public void setInputFormat(final Class<? extends InputFormat> val) {
        MongoConfigUtil.setInputFormat(configuration, val);
    }"
10112,getInputFormat,"    public Class<? extends InputFormat> getInputFormat() {
        return MongoConfigUtil.getInputFormat(configuration);
    }"
10113,setOutputValue,"    public void setOutputValue(final Class<?> val) {
        MongoConfigUtil.setOutputValue(configuration, val);
    }"
10114,getOutputValue,"    public Class<?> getOutputValue() {
        return MongoConfigUtil.getOutputValue(configuration);
    }"
10115,setOutputKey,"    public void setOutputKey(final Class<?> val) {
        MongoConfigUtil.setOutputKey(configuration, val);
    }"
10116,getOutputKey,"    public Class<?> getOutputKey() {
        return MongoConfigUtil.getOutputKey(configuration);
    }"
10117,setOutputFormat,"    public void setOutputFormat(final Class<? extends OutputFormat> val) {
        MongoConfigUtil.setOutputFormat(configuration, val);
    }"
10118,getOutputFormat,"    public Class<? extends OutputFormat> getOutputFormat() {
        return MongoConfigUtil.getOutputFormat(configuration);
    }"
10119,setSortComparator,"    public void setSortComparator(final Class<? extends RawComparator> val) {
        MongoConfigUtil.setSortComparator(configuration, val);
    }"
10120,getSortComparator,"    public Class<? extends RawComparator> getSortComparator() {
        return MongoConfigUtil.getSortComparator(configuration);
    }"
10121,setPartitioner,"    public void setPartitioner(final Class<? extends Partitioner> val) {
        MongoConfigUtil.setPartitioner(configuration, val);
    }"
10122,getPartitioner,"    public Class<? extends Partitioner> getPartitioner() {
        return MongoConfigUtil.getPartitioner(configuration);
    }"
10123,setReducer,"    public void setReducer(final Class<? extends Reducer> val) {
        MongoConfigUtil.setReducer(configuration, val);
    }"
10124,getReducer,"    public Class<? extends Reducer> getReducer() {
        return MongoConfigUtil.getReducer(configuration);
    }"
10125,setCombiner,"    public void setCombiner(final Class<? extends Reducer> val) {
        MongoConfigUtil.setCombiner(configuration, val);
    }"
10126,getCombiner,"    public Class<? extends Reducer> getCombiner() {
        return MongoConfigUtil.getCombiner(configuration);
    }"
10127,setMapperOutputValue,"    public void setMapperOutputValue(final Class<?> val) {
        MongoConfigUtil.setMapperOutputValue(configuration, val);
    }"
10128,getMapperOutputValue,"    public Class<?> getMapperOutputValue() {
        return MongoConfigUtil.getMapperOutputValue(configuration);
    }"
10129,setMapperOutputKey,"    public void setMapperOutputKey(final Class<?> val) {
        MongoConfigUtil.setMapperOutputKey(configuration, val);
    }"
10130,getMapperOutputKey,"    public Class<?> getMapperOutputKey() {
        return MongoConfigUtil.getMapperOutputKey(configuration);
    }"
10131,setMapper,"    public void setMapper(final Class<? extends Mapper> val) {
        MongoConfigUtil.setMapper(configuration, val);
    }"
10132,getMapper,"    public Class<? extends Mapper> getMapper() {
        return MongoConfigUtil.getMapper(configuration);
    }"
10133,setJobBackground,"    public void setJobBackground(final boolean val) {
        MongoConfigUtil.setJobBackground(configuration, val);
    }"
10134,isJobBackground,"    public boolean isJobBackground() {
        return MongoConfigUtil.isJobBackground(configuration);
    }"
10135,setJobVerbose,"    public void setJobVerbose(final boolean val) {
        MongoConfigUtil.setJobVerbose(configuration, val);
    }"
10136,isJobVerbose,"    public boolean isJobVerbose() {
        return MongoConfigUtil.isJobVerbose(configuration);
    }"
10137,close,"        public void close() throws IOException {
            chunkData.close();
        }"
10138,getProgress,"        public float getProgress() throws IOException, InterruptedException {
            return (float) Math.min(
              previousMatchIndex / (float) chunkSize, 1.0);"
10139,getCurrentValue,"        public Text getCurrentValue() throws IOException, InterruptedException {
            return text;
        }"
10140,getCurrentKey,"        public NullWritable getCurrentKey()
          throws IOException, InterruptedException {
            return NullWritable.get();"
10141,nextKeyValue,"        public boolean nextKeyValue() throws IOException, InterruptedException {
            if (readLast) {
                LOG.debug(""skipping the rest of this chunk because we've ""
                    + ""read beyond the end: "" + previousMatchIndex
                    + ""; read "" + totalMatches + "" matches here."");
                return false;
            }"
10144,close,"        public void close() throws IOException {
            reader.close();
        }"
10145,fileContents,"        public CharSequence fileContents() {
            return subSequence(0, length);
        }"
10146,chunkContents,"        public CharSequence chunkContents() {
            return subSequence(0, Math.min(chunkSize, length));
        }"
10147,subSequence,"        public CharSequence subSequence(final int start, final int end) {
            try {
                advanceToIndex(end);
            } catch (IOException e) {"
10148,charAt,"        public char charAt(final int index) {
            try {
                advanceToIndex(index);
            } catch (IOException e) {"
10149,advanceToIndex,"        private void advanceToIndex(final int index) throws IOException {
            if (index >= builder.length()) {
                while (index >= builder.length()) {"
10150,length,"        public int length() {
            return length;
        }"
10151,close,"        public void close() throws IOException {
            stream.close();
        }"
10152,getProgress,"        public float getProgress() throws IOException, InterruptedException {
            return readLast ? 1.0f : 0.0f;
        }"
10153,getCurrentValue,"        public BytesWritable getCurrentValue()
          throws IOException, InterruptedException {
            return bw;"
10156,initialize,"        public void initialize(
          final InputSplit split, final TaskAttemptContext context)
          throws IOException, InterruptedException {
            this.split = (GridFSSplit) split;
            readLast = false;
            buff = new byte[1024 * 1024 * 16];"
10157,createRecordReader,"    public RecordReader<NullWritable, BinaryComparable>
    createRecordReader(final InputSplit split, final TaskAttemptContext context)
      throws IOException, InterruptedException {"
10158,getSplits,"    public List<InputSplit> getSplits(final JobContext context)
      throws IOException, InterruptedException {
        Configuration conf = context.getConfiguration();
        DBCollection inputCollection =
          MongoConfigUtil.getInputCollection(conf);
        MongoClientURI inputURI = MongoConfigUtil.getInputURI(conf);

        GridFS gridFS = new GridFS(
          inputCollection.getDB(),
          inputCollection.getName());
"
10159,accept,"    public boolean accept(final Path path) {
        String pathName = path.getName().toLowerCase();
        boolean acceptable = pathName.endsWith("".bson"") && !pathName.startsWith(""."");
        LOG.info(path.toString() + "" returning "" + acceptable);
        return acceptable;
    }"
10162,getInputPathFilter,"    public static PathFilter getInputPathFilter(final JobContext context) {
        Configuration conf = context.getConfiguration();
        Class<?> filterClass = conf.getClass(""bson.pathfilter.class"", null, PathFilter.class);
        return filterClass != null ? (PathFilter) ReflectionUtils.newInstance(filterClass, conf) : null;
    }"
10164,isSplitable,"    protected boolean isSplitable(
      final JobContext context, final Path filename) {
        CompressionCodec codec =
          new CompressionCodecFactory("
10165,onCreate,"  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_test);
  }"
10166,getCallingIntent,"  public static Intent getCallingIntent(Context context) {
    return new Intent(context, TestActivity.class);
  }"
10167,onCreate,"  @Override protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_loader1);
  }"
10168,onCreate,"  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_list_test);

    rvContacts = (RecyclerView)findViewById(R.id.rvContacts);

    adapter = new ContactsAdapter();
"
10169,bind,"    public void bind(String contact) {
      tvName.setText(contact);
    }"
10170,getItemCount,"  @Override public int getItemCount() {
    return contacts != null ? contacts.size() : 0;
  }"
10171,onBindViewHolder,"  @Override public void onBindViewHolder(ContactViewHolder holder, int position) {
    final String contact = contacts.get(position);
    holder.bind(contact);
  }"
10172,onCreateViewHolder,"  @Override public ContactViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
    final LayoutInflater inflater = LayoutInflater.from(parent.getContext());
    View itemView = inflater.inflate(R.layout.item_contact, parent, false);
    return new ContactViewHolder(itemView);
  }"
10173,onCreate,"  @Override public void onCreate() {
    super.onCreate();

    LeakCanary.install(this);"
10174,getDbEpisodes,"	public List<DbEpisode> getDbEpisodes() {
		if (mDbEpisode.size() == 0)
			setupDbEpisodes();
		return mDbEpisode;"
10175,setupDbEpisodes,"	private void setupDbEpisodes() {
		mDbEpisode.clear();

		DbAdapterTvShowEpisodes db = MizuuApplication.getTvEpisodeDbAdapter();

		ColumnIndexCache cache = new ColumnIndexCache();
		Cursor tempCursor = db.getAllEpisodes();"
10176,getLanguage,"	public String getLanguage(String language) {
		if (TextUtils.isEmpty(language))
			language = ""all"";
		return language;"
10177,getBackdrops,"	public abstract List<String> getBackdrops(String id);
	"
10178,getCovers,"	public abstract List<String> getCovers(String id);
	"
10179,getDbMovies,"	public List<DbMovie> getDbMovies() {
		if (mDbMovies.size() == 0)
			setupDbMovies();
		return mDbMovies;"
10181,getLanguage,"	public String getLanguage(String language) {
		if (TextUtils.isEmpty(language))
			language = ""en"";
		return language;"
10182,getSimilarMovies,"	public abstract List<WebMovie> getSimilarMovies(String id);
	"
10185,get,"	public abstract Movie get(String id, String json, String language);
	"
10186,getSubText,"	public String getSubText(int sort) {
        return getReleaseYear();
	}"
10187,getOfflineCopyFile,"	public File getOfflineCopyFile(Filepath path) {
		return FileUtils.getOfflineFile(mContext, path.getFilepath());
	}"
10188,getOfflineCopyUri,"	public String getOfflineCopyUri(Filepath path) {
		return getOfflineCopyFile(path).getAbsolutePath();
	}"
10189,hasOfflineCopy,"	public boolean hasOfflineCopy(Filepath path) {
		return getOfflineCopyFile(path).exists();
	}"
10190,isUnidentified,"	public boolean isUnidentified() {
		return 	getRuntime().equals(""0"") &&
				getReleaseYear().equals(mContext.getString(R.string.unknownYear)) &&"
10191,getCertification,"	public String getCertification() {
		return CERTIFICATION;
	}"
10192,setCertification,"	public void setCertification(String certification) {
		CERTIFICATION = certification;
	}"
10194,getGenres,"	public String getGenres() {
		return GENRES;
	}"
10195,getPrettyDateAdded,"	public String getPrettyDateAdded() {
		return mDateAdded;
	}"
10196,getDateAdded,"	public String getDateAdded() {
		if (TextUtils.isEmpty(DATE_ADDED) || !MizLib.isNumber(DATE_ADDED))
			return ""0"";
		return DATE_ADDED;"
10197,getReleaseYear,"	public String getReleaseYear() {
		return mGetReleaseYear;
	}"
10198,getPrettyReleaseDate,"	public String getPrettyReleaseDate() {
		return mReleaseDate;
	}"
10199,getReleasedate,"	public String getReleasedate() {
		return RELEASEDATE;
	}"
10200,setReleaseDate,"	public void setReleaseDate(int year, int month, int day) {
		RELEASEDATE = year + ""-"" + MizLib.addIndexZero(month) + ""-"" + MizLib.addIndexZero(day);
	}"
10201,hasWatched,"	public boolean hasWatched() {
		return (HAS_WATCHED.equals(""0"")) ? false : true;
	}"
10202,getPrettyRuntime,"	public String getPrettyRuntime() {
		return mRuntime;
	}"
10203,getRuntime,"	public String getRuntime() {
        if (TextUtils.isEmpty(RUNTIME))
            return ""0"";
		return RUNTIME;"
10204,setRuntime,"	public void setRuntime(int runtime) {
		RUNTIME = String.valueOf(runtime);
	}"
10205,isFavourite,"	public boolean isFavourite() {
        return FAVOURITE.equals(""1"");
    }"
10206,getWeightedCompatibility,"	public String getWeightedCompatibility() {
		return mWeightedCompatibility;
	}"
10207,getWeightedRating,"	public double getWeightedRating() {
		if (isFavourite())
			return (10 + getRawRating()) / 2;
		if (hasWatched())
			return (6 + getRawRating()) / 2;"
10208,getRawRating,"	public double getRawRating() {
		try {
			return Double.valueOf(RATING);"
10209,setRating,"	public void setRating(int rating) {
		RATING = String.valueOf(Double.valueOf((double) rating / 10));
	}"
10210,getCollectionPoster,"	public File getCollectionPoster() {
		File collectionImage = FileUtils.getMovieThumb(mContext, COLLECTION_ID);
		if (collectionImage.exists() && collectionImage.length() > 0)
			return collectionImage;
		return getThumbnail();"
10211,getCollectionId,"	public String getCollectionId() {
		return COLLECTION_ID;
	}"
10212,getCollection,"	public String getCollection() {
		return COLLECTION;
	}"
10213,toWatch,"	public boolean toWatch() {
		return (!TO_WATCH.equals(""0""));
	}"
10214,getAllFilepaths,"	public String getAllFilepaths() {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < getFilepaths().size(); i++)
			sb.append(getFilepaths().get(i).getFilepath()).append(""\n"");
		return sb.toString().trim();"
10215,getFilepaths,"	public ArrayList<Filepath> getFilepaths() {
		return mFilepaths;
	}"
10216,setFilepaths,"	public void setFilepaths(List<String> paths) {
		for (String path : paths)
			mFilepaths.add(new Filepath(path));"
10217,compareTo,"	public int compareTo(BaseMovie another) {
		return getTitle().compareToIgnoreCase(another.getTitle());
	}"
10218,getBackdrop,"	public File getBackdrop() {
		return FileUtils.getMovieBackdrop(mContext, mTmdbId);
	}"
10219,getTmdbId,"	public String getTmdbId() {
		return mTmdbId;
	}"
10220,getThumbnail,"	public File getThumbnail() {
		return FileUtils.getMovieThumb(mContext, mTmdbId);
	}"
10221,toString,"	public String toString() {
		try {
			return getTitle().substring(0, 1);"
10223,getActors,"	public abstract List<Actor> getActors(String id);
}"
10224,get,"	public abstract T get(String id, String language);
	"
10225,searchByImdbId,"	public abstract List<T> searchByImdbId(String imdbId, String language);
	"
10226,searchNgram,"	public abstract List<T> searchNgram(String query, String language);
	"
10227,search,"	public abstract List<T> search(String query, String year, String language);
	"
10228,search,"	public abstract List<T> search(String query, String language);
	"
10232,browse,"	public boolean browse(int index, boolean fromParent) {
		return browse(fromParent ? getCurrentParentFiles()[index] : getCurrentFiles()[index]);
	}"
10233,goUp,"	public boolean goUp() {
        return mParentFolder != null && browse(mParentFolder);
    }"
10234,setBrowserParentFiles,"	public void setBrowserParentFiles(List<BrowserFileObject> list) {
		mBrowserParentFiles = list;
	}"
10235,setBrowserFiles,"	public void setBrowserFiles(List<BrowserFileObject> list) {
		mBrowserFiles = list;
	}"
10236,getBrowserParentFiles,"	public List<BrowserFileObject> getBrowserParentFiles() {
		if (mBrowserParentFiles == null)
			mBrowserParentFiles = new ArrayList<BrowserFileObject>();
		return mBrowserParentFiles;"
10237,getBrowserFiles,"	public List<BrowserFileObject> getBrowserFiles() {
		if (mBrowserFiles == null)
			mBrowserFiles = new ArrayList<BrowserFileObject>();
		return mBrowserFiles;"
10238,getCurrentParentFiles,"	public T[] getCurrentParentFiles() {
		return mCurrentParentFiles;
	}"
10239,getCurrentFiles,"	public T[] getCurrentFiles() {
		return mCurrentFiles;
	}"
10240,setCurrentParentFiles,"	public void setCurrentParentFiles(T[] files) {
		mCurrentParentFiles = files;
	}"
10241,setCurrentFiles,"	public void setCurrentFiles(T[] files) {
		mCurrentFiles = files;
	}"
10242,getCurrentFolder,"	public T getCurrentFolder() {
		return mCurrentFolder;
	}"
10243,getParentFolder,"	public T getParentFolder() {
		return mParentFolder;
	}"
10244,setParentFolder,"	public void setParentFolder(T folder) {
		mParentFolder = folder;
	}"
10245,setCurrentFolder,"	public void setCurrentFolder(T folder) {
		mCurrentFolder = folder;
	}"
10248,addToResults,"	public abstract void addToResults(T folder, TreeSet<String> results);
"
10249,recursiveSearch,"	public abstract void recursiveSearch(T folder, TreeSet<String> results);
"
10250,searchFolder,"	public abstract List<String> searchFolder();
"
10251,removeUnavailableFiles,"	public abstract void removeUnavailableFiles();
"
10252,removeUnidentifiedFiles,"	public abstract void removeUnidentifiedFiles();
"
10253,getFileSizeLimit,"	public int getFileSizeLimit() {
		return mFileSizeLimit;
	}"
10254,clearLibrary,"	public boolean clearLibrary() {
		return mClearLibrary;
	}"
10255,getContext,"	public Context getContext() {
		return mContext;
	}"
10256,getFileSource,"	public FileSource getFileSource() {
		return mFileSource;
	}"
10257,getFiles,"	public List<String> getFiles() {
		return mFiles;
	}"
10259,setFolder,"	public void setFolder(T folder) {
		mFolder = folder;
	}"
10262,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        Content content = Content.deserialize(this);

        if(content == null){
            return;"
10263,parseResource,"    public static String  parseResource(Context context, int ressource) throws IOException {
        InputStream inputStream = context.getResources().openRawResource(ressource);
        StringBuilder sb= new StringBuilder();
        BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));
        String read = br.readLine();

        while(read!= null) {
            sb.append(read);"
10264,deserialize,"    public static Content deserialize(Context context){
        try {
            String jsonString = parseResource(context, R.raw.content);
            Content content = new Gson().fromJson(jsonString,Content.class);"
10265,getContent,"    public String getContent() {
        return content;
    }"
10266,read,"	public WorldDirectories read(JsonReader in) throws IOException {
		return null;
	}"
10267,write,"	public void write(JsonWriter out, WorldDirectories value) throws IOException {
		out.value(value == null ? null : value.toString());
	}"
10268,sharesDirectories,"	public boolean sharesDirectories(WorldDirectories other) {
		return region != null && region.equals(other.region) ||
				poi != null && poi.equals(other.poi) ||"
10269,toString,"	public String toString() {
		return ""<region="" + region + "", poi="" + poi + "", entities="" + entities + "">"";
	}"
10270,clone,"	public WorldDirectories clone() {
		try {
			return (WorldDirectories) super.clone();
		} catch (CloneNotSupportedException e) {"
10272,makeRegionDirectories,"	public RegionDirectories makeRegionDirectories(Point2i region) {
		RegionDirectories rd = new RegionDirectories();
		rd.setRegion(new File(this.region, FileHelper.createMCAFileName(region)));
		rd.setPoi(new File(this.poi, FileHelper.createMCAFileName(region)));
		rd.setEntities(new File(this.entities, FileHelper.createMCAFileName(region)));
		return rd;
	}"
10273,getEntities,"	public File getEntities() {
		return entities;
	}"
10275,getRegion,"	public File getRegion() {
		return region;
	}"
10276,setEntities,"	public void setEntities(File entities) {
		this.entities = entities;
	}"
10277,setPoi,"	public void setPoi(File poi) {
		this.poi = poi;
	}"
10278,setRegion,"	public void setRegion(File region) {
		this.region = region;
	}"
10279,toString,"	public String toString() {
		return toStringGsonInstance.toJson(this);
	}"
10281,save,"	public void save() {
		save(gsonInstance, new File(cacheDir, ""world_settings.json""));
	}"
10282,setShowNonexistentRegions,"	public void setShowNonexistentRegions(boolean showNonexistentRegions) {
		this.showNonexistentRegions = showNonexistentRegions;
	}"
10283,getShowNonexistentRegions,"	public boolean getShowNonexistentRegions() {
		return showNonexistentRegions;
	}"
10284,setTileMapBackground,"	public void setTileMapBackground(String tileMapBackground) {
		this.tileMapBackground = tileMapBackground;
	}"
10285,getTileMapBackground,"	public String getTileMapBackground() {
		return tileMapBackground;
	}"
10286,setSmoothOverlays,"	public void setSmoothOverlays(boolean smoothOverlays) {
		this.smoothOverlays = smoothOverlays;
	}"
10287,getSmoothOverlays,"	public boolean getSmoothOverlays() {
		return smoothOverlays;
	}"
10288,setSmoothRendering,"	public void setSmoothRendering(boolean smoothRendering) {
		this.smoothRendering = smoothRendering;
	}"
10289,getSmoothRendering,"	public boolean getSmoothRendering() {
		return smoothRendering;
	}"
10290,setShadeWater,"	public void setShadeWater(boolean shadeWater) {
		this.shadeWater = shadeWater;
	}"
10291,getShadeWater,"	public boolean getShadeWater() {
		return shadeWater;
	}"
10292,setShade,"	public void setShade(boolean shade) {
		this.shade = shade;
	}"
10293,getShade,"	public boolean getShade() {
		return shade;
	}"
10294,setRenderCaves,"	public void setRenderCaves(boolean renderCaves) {
		this.renderCaves = renderCaves;
	}"
10295,getRenderCaves,"	public boolean getRenderCaves() {
		return renderCaves;
	}"
10296,setRenderLayerOnly,"	public void setRenderLayerOnly(boolean renderLayerOnly) {
		this.renderLayerOnly = renderLayerOnly;
	}"
10297,getRenderLayerOnly,"	public boolean getRenderLayerOnly() {
		return renderLayerOnly;
	}"
10298,setRenderHeight,"	public void setRenderHeight(int renderHeight) {
		this.renderHeight = renderHeight;
	}"
10299,getRenderHeight,"	public int getRenderHeight() {
		return renderHeight;
	}"
10300,getDimensionDirectories,"	public List<File> getDimensionDirectories() {
		return dimensionDirectories;
	}"
10301,setCacheDir,"	public void setCacheDir(File cacheDir) {
		this.cacheDir = new File(cacheDir, worldUUID.toString().replace(""-"", """"));
	}"
10302,getCacheDirs,"	public File[] getCacheDirs() {
		return zoomLevelCacheDirs;
	}"
10303,getCacheDir,"	public File getCacheDir(int zoomLevel) {
		return zoomLevelCacheDirs[Bits.lsbPosition(zoomLevel)];
	}"
10304,getCacheDir,"	public File getCacheDir() {
		return cacheDir;
	}"
10305,getWorldUUID,"	public UUID getWorldUUID() {
		return worldUUID;
	}"
10306,getWorldDirs,"	public WorldDirectories getWorldDirs() {
		return worldDirs;
	}"
10308,getRegionDir,"	public File getRegionDir() {
		return regionDir;
	}"
10309,getTileMapBox,"	public TileMapBox getTileMapBox() {
		return tileMapBox;
	}"
10310,getPrimaryStage,"	public Stage getPrimaryStage() {
		return primaryStage;
	}"
10311,getOptionBar,"	public OptionBar getOptionBar() {
		return optionBar;
	}"
10312,isKeyPressed,"	public boolean isKeyPressed(KeyCode keyCode) {
		return pressedKeys.contains(keyCode);
	}"
10313,setTitleSuffix,"	public void setTitleSuffix(String suffix) {
		if (suffix == null || suffix.isEmpty()) {
			primaryStage.setTitle(title);"
10314,untrackDialog,"	public void untrackDialog(Dialog<?> dialog) {
		trackedDialogs.remove(dialog);
	}"
10315,trackDialog,"	public void trackDialog(Dialog<?> dialog) {
		trackedDialogs.add(dialog);
	}"
10317,match,"		static Mapping match(int dataVersion) {
			Mapping mapping = mappingCache.get(dataVersion);
			if (mapping == null) {
				for (Mapping m : Mapping.values()) {
					if (m.minVersion <= dataVersion && m.maxVersion >= dataVersion) {"
10318,getColorMapping,"		ColorMapping getColorMapping() {
			return colorMappingInstances.computeIfAbsent(colorMapping, Supplier::get);
		}"
10319,getChunkRenderer,"		ChunkRenderer getChunkRenderer() {
			return chunkRendererInstances.computeIfAbsent(chunkRenderer, Supplier::get);
		}"
10320,getHeightmapCalculator,"		HeightmapCalculator getHeightmapCalculator() {
			return heightmapCalculatorInstances.computeIfAbsent(heightmapCalculator, Supplier::get);
		}"
10321,getEntityFilter,"		EntityFilter getEntityFilter() {
			return entityFilterInstances.computeIfAbsent(entityFilter, Supplier::get);
		}"
10322,getEntityRelocator,"		ChunkRelocator getEntityRelocator() {
			return entityRelocatorInstances.computeIfAbsent(entityRelocator, Supplier::get);
		}"
10323,getPOIRelocator,"		ChunkRelocator getPOIRelocator() {
			return poiRelocatorInstances.computeIfAbsent(poiRelocator, Supplier::get);
		}"
10324,getChunkRelocator,"		ChunkRelocator getChunkRelocator() {
			return chunkRelocatorInstances.computeIfAbsent(chunkRelocator, Supplier::get);
		}"
10325,getEntityMerger,"		ChunkMerger getEntityMerger() {
			return entityMergerInstances.computeIfAbsent(entityMerger, Supplier::get);
		}"
10326,getPoiMerger,"		ChunkMerger getPoiMerger() {
			return poiMergerInstances.computeIfAbsent(poiMerger, Supplier::get);
		}"
10327,getChunkMerger,"		ChunkMerger getChunkMerger() {
			return chunkMergerInstances.computeIfAbsent(chunkMerger, Supplier::get);
		}"
10328,getChunkFilter,"		ChunkFilter getChunkFilter() {
			return chunkFilterInstances.computeIfAbsent(chunkFilter, Supplier::get);
		}"
10329,getHeightmapCalculator,"	public static HeightmapCalculator getHeightmapCalculator(int dataVersion) {
		return Mapping.match(dataVersion).getHeightmapCalculator();
	}"
10330,getEntityFilter,"	public static EntityFilter getEntityFilter(int dataVersion) {
		return Mapping.match(dataVersion).getEntityFilter();
	}"
10331,getEntityRelocator,"	public static ChunkRelocator getEntityRelocator(int dataVersion) {
		return Mapping.match(dataVersion).getEntityRelocator();
	}"
10332,getPoiRelocator,"	public static ChunkRelocator getPoiRelocator(int dataVersion) {
		return Mapping.match(dataVersion).getPOIRelocator();
	}"
10333,getColorMapping,"	public static ColorMapping getColorMapping(int dataVersion) {
		return Mapping.match(dataVersion).getColorMapping();
	}"
10334,getChunkRenderer,"	public static ChunkRenderer getChunkRenderer(int dataVersion) {
		return Mapping.match(dataVersion).getChunkRenderer();
	}"
10335,getChunkRelocator,"	public static ChunkRelocator getChunkRelocator(int dataVersion) {
		return Mapping.match(dataVersion).getChunkRelocator();
	}"
10336,getEntityMerger,"	public static ChunkMerger getEntityMerger(int dataVersion) {
		return Mapping.match(dataVersion).getEntityMerger();
	}"
10337,getPoiMerger,"	public static ChunkMerger getPoiMerger(int dataVersion) {
		return Mapping.match(dataVersion).getPoiMerger();
	}"
10338,getChunkMerger,"	public static ChunkMerger getChunkMerger(int dataVersion) {
		return Mapping.match(dataVersion).getChunkMerger();
	}"
10339,getChunkFilter,"	public static ChunkFilter getChunkFilter(int dataVersion) {
		return Mapping.match(dataVersion).getChunkFilter();
	}"
10340,catchClassCastException,"	public static <T> T catchClassCastException(Supplier<T> s) {
		try {
			return s.get();"
10341,silent,"	public static <T> T silent(Supplier<T> s, T def) {
		try {
			return s.get();"
10342,withDefault,"	public static <T> T withDefault(Supplier<T> s, T def) {
		try {
			return s.get();"
10343,explorerLink,"	public static Hyperlink explorerLink(Translation text, File file, Node graphic) {
		Hyperlink hyperlink;
		if (graphic == null) {
			hyperlink = new Hyperlink();
		} else {
			hyperlink = new Hyperlink("""", graphic);
		}"
10344,hyperlink,"	public static Hyperlink hyperlink(String text, String url, Node graphic) {
		Hyperlink hyperlink;
		if (graphic == null) {
			hyperlink = new Hyperlink(text);
		} else {
			hyperlink = new Hyperlink(text, graphic);"
10346,tab,"	public static Tab tab(Translation translation) {
		Tab tab = new Tab();
		tab.setClosable(false);
		tab.textProperty().bind(translation.getProperty());
		return tab;
	}"
10347,radio,"	public static RadioButton radio(Translation translation) {
		RadioButton radio = new RadioButton();
		radio.textProperty().bind(translation.getProperty());
		return radio;
	}"
10348,checkbox,"	public static CheckBox checkbox(Translation translation) {
		CheckBox checkbox = new CheckBox();
		checkbox.textProperty().bind(translation.getProperty());
		return checkbox;
	}"
10349,tooltip,"	public static Tooltip tooltip(Translation translation) {
		Tooltip tooltip = new Tooltip();
		tooltip.textProperty().bind(translation.getProperty());
		return tooltip;
	}"
10350,button,"	public static Button button(Translation translation) {
		Button button = new Button();
		button.textProperty().bind(translation.getProperty());
		return button;
	}"
10351,separator,"	public static SeparatorMenuItem separator() {
		return new SeparatorMenuItem();
	}"
10352,label,"	public static Label label(Translation translation) {
		Label label = new Label();
		label.textProperty().bind(translation.getProperty());
		return label;
	}"
10353,checkMenuItem,"	public static CheckMenuItem checkMenuItem(Translation translation, boolean selected) {
		CheckMenuItem item = new CheckMenuItem();
		item.textProperty().bind(translation.getProperty());
		item.setSelected(selected);
		return item;
	}"
10354,menuItem,"	public static MenuItem menuItem(Translation translation) {
		MenuItem item = new MenuItem();
		item.textProperty().bind(translation.getProperty());
		item.setMnemonicParsing(false);
		return item;
	}"
10355,menu,"	public static Menu menu(Translation translation) {
		Menu menu = new Menu();
		menu.textProperty().bind(translation.getProperty());
		return menu;
	}"
10356,setContent,"	public void setContent(Node node) {
		node.getStyleClass().add(""transparent-stage-content"");
		content.getChildren().add(node);
	}"
10357,printTranslationKeys,"	static void printTranslationKeys(FutureTask<Boolean> future) {
		for (Translation translation : Translation.values()) {
			System.out.println(translation.getKey() + "";"");
		}"
10358,printTranslation,"	static void printTranslation(CommandLine line, FutureTask<Boolean> future) throws ParseException {
		String l = line.getOptionValue(""locale"");
		if (l == null) {
			throw new ParseException(""no locale"");
		}
"
10359,printMissingTranslations,"	static void printMissingTranslations(FutureTask<Boolean> future) {
		Set<Locale> locales = Translation.getAvailableLanguages();
		for (Locale locale : locales) {
			Translation.load(locale);
			boolean printedLanguage = false;"
10360,getResourceListing,"	private static String[] getResourceListing(Class<?> clazz, String path) {
		URL dirURL = clazz.getClassLoader().getResource(path);
		if (dirURL != null && dirURL.getProtocol().equals(""file"")) {
			try {
				return new File(dirURL.toURI()).list();
			} catch (URISyntaxException ex) {
				LOGGER.error(""failed to list resources"", ex);"
10361,format,"	public String format(Object... values) {
		return translationProperty.format(values);
	}"
10362,load,"	public static void load(Locale locale) {
		if (!availableLanguages.contains(locale)) {
			throw new IllegalArgumentException(""unsupported locale "" + locale);
		}
"
10363,clearTranslations,"	private static void clearTranslations() {
		for (Translation t : Translation.values()) {
			t.translationProperty.setValue(null);"
10364,setTranslation,"	private static void setTranslation(String key, String translation) {
		for (Translation t : Translation.values()) {
			if (t.translationProperty.getKey().equals(key)) {"
10365,getAvailableLanguages,"	public static Set<Locale> getAvailableLanguages() {
		return availableLanguages;
	}"
10366,getProperty,"	public StringProperty getProperty() {
		return translationProperty;
	}"
10367,getKey,"	public String getKey() {
		return translationProperty.key;
	}"
10368,isTranslated,"	public boolean isTranslated() {
		return translationProperty.isTranslated();
	}"
10370,format,"		public String format(Object... values) {
			String value = super.getValue();
			if (value == null) {
				return ""["" + key + ""]"";
			}"
10371,isTranslated,"		public boolean isTranslated() {
			return super.getValue() != null;
		}"
10372,getValue,"		public String getValue() {
			if (super.getValue() == null) {
				return ""["" + key + ""]"";
			}"
10373,toString,"	public String toString() {
		return translationProperty.getValue();
	}"
10374,setMax,"	public boolean setMax(String raw) {
		setRawMax(raw);
		maxTimestamp = null;
		if (raw == null || raw.isEmpty()) {
			return setMaxInt(null);
		}"
10375,setMin,"	public boolean setMin(String raw) {
		setRawMin(raw);
		minTimestamp = null;
		if (raw == null || raw.isEmpty()) {
			return setMinInt(null);
		}"
10376,maxString,"	public String maxString() {
		return minTimestamp == null ? super.maxString() : maxTimestamp;
	}"
10377,minString,"	public String minString() {
		return minTimestamp == null ? super.minString() : minTimestamp;
	}"
10378,name,"	public String name() {
		return ""Timestamp"";
	}"
10379,parseValue,"	public int parseValue(ChunkData chunkData) {
		if (chunkData.region() == null) {
			return 0;
		}"
10380,force,"	public void force(ChunkData root) {
		change(root);
	}"
10381,change,"	public void change(ChunkData root) {
		if (root.region() != null) {
			root.region().setTimestamp(getNewValue());
		}
		if (root.poi() != null) {"
10382,parseNewValue,"	public boolean parseNewValue(String s) {
		try {
			setNewValue(Integer.parseInt(s));"
10383,getOldValue,"	public Integer getOldValue(ChunkData root) {
		return root.region().getTimestamp();
	}"
10384,formatNano,"	public static String formatNano(long nano) {
		return String.format(""%d.%06dms"", nano / 1_000_000, nano % 1_000_000);
	}"
10385,toString,"	public String toString() {
		return formatNano(getNano());
	}"
10386,reset,"	public void reset() {
		start = System.nanoTime();
	}"
10387,getNano,"	public long getNano() {
		return System.nanoTime() - start;
	}"
10388,getMillis,"	public long getMillis() {
		return getNano() / 1_000_000;
	}"
10389,getBackground,"		public Background getBackground() {
			return background;
		}"
10390,createBackgroundFromImage,"		private static Background createBackgroundFromImage(String resource) {
			return new Background(new BackgroundImage(FileHelper.getIconFromResources(resource),
				BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT, BackgroundPosition.DEFAULT,"
10391,getCssMetaData,"	public List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {
		return CLASS_CSS_META_DATA;
	}"
10393,getStyleableProperty,"		public StyleableProperty<Color> getStyleableProperty(TileMapBox styleable) {
			return styleable.emptyColorProperty;
		}"
10394,isSettable,"		public boolean isSettable(TileMapBox styleable) {
			return !styleable.emptyColorProperty.isBound();
		}"
10395,getStyleableProperty,"		public StyleableProperty<Number> getStyleableProperty(TileMapBox styleable) {
			return styleable.gridLineWidthProperty;
		}"
10396,isSettable,"		public boolean isSettable(TileMapBox styleable) {
			return !styleable.gridLineWidthProperty.isBound();
		}"
10397,getStyleableProperty,"		public StyleableProperty<Color> getStyleableProperty(TileMapBox styleable) {
			return styleable.coordinatesColorProperty;
		}"
10398,isSettable,"		public boolean isSettable(TileMapBox styleable) {
			return !styleable.coordinatesColorProperty.isBound();
		}"
10399,getStyleableProperty,"		public StyleableProperty<Color> getStyleableProperty(TileMapBox styleable) {
			return styleable.chunkGridColorProperty;
		}"
10400,isSettable,"		public boolean isSettable(TileMapBox styleable) {
			return !styleable.chunkGridColorProperty.isBound();
		}"
10401,getStyleableProperty,"		public StyleableProperty<Color> getStyleableProperty(TileMapBox styleable) {
			return styleable.regionGridColorProperty;
		}"
10402,isSettable,"		public boolean isSettable(TileMapBox styleable) {
			return !styleable.regionGridColorProperty.isBound();
		}"
10403,shade,"	private static void shade(int[] pixelBuffer, int[] waterPixels, short[] terrainHeights, short[] waterHeights, int scale) {
		if (!ConfigProvider.WORLD.getShadeWater() || !ConfigProvider.WORLD.getShade()) {
			waterHeights = terrainHeights;
		}

		int size = Tile.SIZE / scale;"
10404,flatShade,"	private static void flatShade(int[] pixelBuffer, short[] terrainHeights, int scale) {
		int size = Tile.SIZE / scale;
		int index = 0;
		for (int z = 0; z < size; z++) {
			for (int x = 0; x < size; x++, index++) {"
10405,drawChunkImage,"	private static void drawChunkImage(Chunk chunkData, int x, int z, int scale, int[] pixelBuffer, int[] waterPixels, short[] terrainHeights, short[] waterHeights) {

		if (chunkData.getData() == null) {
			return;
		}"
10406,generateImage,"	public static Image generateImage(RegionMCAFile mcaFile, int scale) {

		int size = Tile.SIZE / scale;
		int chunkSize = Tile.CHUNK_SIZE / scale;
		int pixels = Tile.PIXELS / (scale * scale);

		try {"
10407,createMarkedChunksImage,"	static void createMarkedChunksImage(Tile tile, ChunkSet selection) {
		if (selection == null) {
			tile.markedChunksImage = null;
			return;
		}
		WritableImage wImage = new WritableImage(32, 32);
		PixelWriter writer = wImage.getPixelWriter();
"
10408,draw,"	public static void draw(GraphicsContext ctx, Tile tile, float scale, Point2f offset, Selection selection, boolean overlay, boolean showNonexistentRegions) {
		if (tile == null || tile.image == null) {
			if (showNonexistentRegions) {
				ctx.drawImage(ImageHelper.getEmptyTileImage(), offset.getX(), offset.getY(), Tile.SIZE / scale, Tile.SIZE / scale);"
10409,name,"	public String name() {
		return ""TileEntityAmount"";
	}"
10410,parseValue,"	public int parseValue(ChunkData chunkData) {
		if (chunkData.region() == null) {
			return 0;
		}
		ChunkFilter chunkFilter = VersionController.getChunkFilter(chunkData.region().getData().getIntOrDefault(""DataVersion"", 0));
		ListTag tileEntities = chunkFilter.getTileEntities(chunkData.region().getData());"
10411,setImage,"	public void setImage(Image image) {
		this.image = image;
	}"
10412,getMCAFile,"	public File getMCAFile() {
		return FileHelper.createMCAFilePath(location);
	}"
10414,unload,"	public void unload(boolean overlay, boolean img) {
		if (image != null) {
			image.cancel();
			if (img) {
				image = null;
			}"
10415,getImageZoomLevel,"	public int getImageZoomLevel() {
		return (int) (Tile.SIZE / image.getWidth());
	}"
10416,matchesZoomLevel,"	public boolean matchesZoomLevel(int zoomLevel) {
		if (image == null) {
			return true;"
10417,setLoaded,"	public void setLoaded(boolean loaded) {
		this.loaded = loaded;
	}"
10418,isLoaded,"	public boolean isLoaded() {
		return loaded;
	}"
10419,isEmpty,"	public boolean isEmpty() {
		return image == null || image == ImageHelper.getEmptyTileImage();
	}"
10420,getLongLocation,"	public long getLongLocation() {
		return longLocation;
	}"
10421,getLocation,"	public Point2i getLocation() {
		return location;
	}"
10422,isOverlayLoaded,"	public boolean isOverlayLoaded() {
		return overlayLoaded;
	}"
10423,getOverlay,"	public Image getOverlay() {
		return overlay;
	}"
10425,isVisible,"	public boolean isVisible(TileMap tileMap, int threshold) {
		Point2i o = tileMap.getOffset().toPoint2i();
		Point2i min = o.sub(threshold * SIZE).blockToRegion().regionToBlock();
		Point2i max = new Point2i(
				(int) (o.getX() + tileMap.getWidth() * tileMap.getScale()),
				(int) (o.getZ() + tileMap.getHeight() * tileMap.getScale())).add(threshold * SIZE).blockToRegion().regionToBlock();"
10426,isVisible,"	public boolean isVisible(TileMap tileMap) {
		return isVisible(tileMap, 0);
	}"
10427,getZoomLevel,"	public static int getZoomLevel(float scale) {
		return Bits.getMsb((int) scale);
	}"
10428,splitWithEscaping,"	public static String[] splitWithEscaping(String input, char split, char escape) throws ParseException {
		List<String> result = new ArrayList<>();

		StringBuilder s = new StringBuilder(input);

		int start = 0;
		boolean escaped = false;
		for (int i = 0; i < s.length(); i++) {
			char current = s.charAt(i);"
10429,getStacktraceAsString,"	public static String getStacktraceAsString(Exception ex) {
		StringWriter sw = new StringWriter();
		PrintWriter pw = new PrintWriter(sw);
		ex.printStackTrace(pw);
		pw.flush();
		return sw.toString();
	}"
10430,longToBinaryString,"	public static String longToBinaryString(long l, int div) {
		StringBuilder s = new StringBuilder(Long.toBinaryString(l));
		for (int i = s.length(); i < 64; i++) {
			s.insert(0, ""0"");
		}
"
10431,longToBinaryString,"	public static String longToBinaryString(long l) {
		StringBuilder s = new StringBuilder(Long.toBinaryString(l));
		for (int i = s.length(); i < 64; i++) {
			s.insert(0, ""0"");
		}"
10432,intToBinaryString,"	public static String intToBinaryString(int n) {
		StringBuilder s = new StringBuilder(Integer.toBinaryString(n));
		for (int i = s.length(); i < 32; i++) {
			s.insert(0, ""0"");
		}"
10433,byteToBinaryString,"	public static String byteToBinaryString(byte b) {
		StringBuilder s = new StringBuilder(Integer.toBinaryString(b & 0xFF));
		for (int i = s.length(); i < 8; i++) {
			s.insert(0, ""0"");
		}"
10434,parseInt,"	public static Integer parseInt(String s, int radix) {
		try {
			return Integer.parseInt(s, radix);"
10435,parseTimestamp,"	public static int parseTimestamp(String t) {
		String trim = t.trim();
		try {
			LocalDateTime date = LocalDateTime.parse(trim, TIMESTAMP_FORMAT);"
10436,parseDuration,"	public static long parseDuration(String d) {
		boolean result = false;
		int duration = 0;
		List<String> elements = new ArrayList<>();
		for (Map.Entry<Pattern, Long> entry : DURATION_REGEXP.entrySet()) {
			Matcher m = entry.getKey().matcher(d);
			if (m.find()) {
				duration += Long.parseLong(m.group(""data"")) * entry.getValue();
				result = true;

				elements.add(d.substring(m.start(), m.end()));
			}"
10437,parseBlockName,"	public static String parseBlockName(String raw) {
		raw = raw.replace("" "", """");
		if (raw.startsWith(""minecraft:"")) {
			if (validBLockNames.contains(raw.substring(10))) {
				return raw;"
10438,isValidBlockChar,"	private static boolean isValidBlockChar(char c) {
		return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z'
				|| c >= '0' && c <= '9'"
10439,parseBlockNames,"	public static String[] parseBlockNames(String raw) {
		StringPointer sp = new StringPointer(raw);
		List<String> blocks = new ArrayList<>();
		try {
			while (sp.hasNext()) {
				sp.skipWhitespace();"
10440,onComparator,"	private void onComparator(TextFilter<?> filter) {
		filter.setComparator(comparator.getSelectionModel().getSelectedItem());
		callUpdateEvent();
	}"
10441,onTextInput,"	private void onTextInput(Filter<?> filter, String newValue) {
		filter.setFilterValue(newValue);
		pseudoClassStateChanged(invalid, !filter.isValid());
		callUpdateEvent();
	}"
10442,setText,"	public void setText(String text) {
		input.setText(text);
	}"
10443,getAlts,"	public static Set<String> getAlts(String name) {
		return alts.getOrDefault(name, Collections.singleton(name));
	}"
10444,isValidName,"	public static boolean isValidName(String name) {
		return valid.contains(name);
	}"
10445,containsUpperCase,"	private static boolean containsUpperCase(String s) {
		for (int i = 0; i < s.length(); i++) {
			char c = s.charAt(i);
			if (Character.isUpperCase(c)) {"
10446,parseException,"	public ParseException parseException(String msg) {
		return new ParseException(msg, value, index);
	}"
10447,lookAhead,"	public char lookAhead(int offset) {
		return value.charAt(index + offset);
	}"
10448,skip,"	public void skip(int offset) {
		index += offset;
	}"
10449,next,"	public char next() {
		return value.charAt(index++);
	}"
10450,size,"	public int size() {
		return value.length();
	}"
10452,currentChar,"	public char currentChar() {
		return value.charAt(index);
	}"
10453,hasCharsLeft,"	public boolean hasCharsLeft(int num) {
		return this.index + num < value.length();
	}"
10454,hasNext,"	public boolean hasNext() {
		return index < value.length();
	}"
10455,skipWhitespace,"	public void skipWhitespace() {
		while (hasNext() && Character.isWhitespace(currentChar())) {
			index++;"
10456,expectString,"	public void expectString(String s) throws ParseException {
		skipWhitespace();
		int index = 0;
		while (hasNext() && index < s.length() && currentChar() == s.charAt(index)) {
			index++;
			this.index++;"
10457,expectChar,"	public void expectChar(char c) throws ParseException {
		skipWhitespace();
		boolean hasNext = hasNext();
		if (hasNext && currentChar() == c) {
			index++;
			return;"
10458,nextArrayElement,"	public boolean nextArrayElement() {
		skipWhitespace();
		if (hasNext() && currentChar() == ',') {
			index++;
			skipWhitespace();"
10460,parseQuotedString,"	public String parseQuotedString() throws ParseException {
		return parseQuotedString('""');
	}"
10461,parseSimpleString,"	public String parseSimpleString(Function<Character, Boolean> valid) {
		int oldIndex = index;
		while (hasNext() && valid.apply(currentChar())) {
			index++;
		}"
10462,parseSimpleString,"	public String parseSimpleString() {
		int oldIndex = index;
		while (hasNext() && !Character.isWhitespace(currentChar())) {
			index++;
		}"
10463,equals,"		public boolean equals(String value) {
			if (value == null) {
				return false;
			}
			if (custom) {"
10464,getStatusWithNamespace,"		public String getStatusWithNamespace() {
			if (custom) {
				return name;
			}"
10465,getStatus,"		public String getStatus() {
			return name;
		}"
10466,initValid,"		private void initValid(String name) {if (name.startsWith(""minecraft:"")) {
				this.name = valid.get(name);
				this.nameWithNamespace = name;"
10467,isValidName,"	public static boolean isValidName(String name) {
		return valid.containsKey(name) || name != null && name.startsWith(""'"") && name.endsWith(""'"");
	}"
10468,valueToString,"	public String valueToString() {
		return getNewValue().getStatusWithNamespace();
	}"
10469,force,"	public void force(ChunkData data) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0));
		chunkFilter.setStatus(data.region().getData(), getNewValue());
	}"
10470,change,"	public void change(ChunkData data) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0));
		StringTag tag = chunkFilter.getStatus(data.region().getData());
		if (tag != null) {
			chunkFilter.setStatus(data.region().getData(), getNewValue());"
10471,parseNewValue,"	public boolean parseNewValue(String s) {
		if (StatusRegistry.isValidName(s)) {
			setNewValue(new StatusRegistry.StatusIdentifier(s));
			return true;"
10472,getOldValue,"	public StatusRegistry.StatusIdentifier getOldValue(ChunkData data) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0));
		StringTag status = chunkFilter.getStatus(data.region().getData());
		return status == null ? null : new StatusRegistry.StatusIdentifier(status.getValue(), true);
	}"
10473,updateOverlay,"	private void updateOverlay(TileMap tileMap, Point2i chunk) {
		if (tileMap.getOverlay() != null) {
			Overlay p = tileMap.getOverlay();"
10476,compareTo,"		public int compareTo(ShutdownJob o) {
			return Integer.compare(o.priority, priority);
		}"
10477,removeShutdownHook,"	public static boolean removeShutdownHook(ShutdownJob j) {
		return hooks.remove(j);
	}"
10478,addShutdownHook,"	public static ShutdownJob addShutdownHook(Runnable r, int priority) {
		ShutdownJob j = new ShutdownJob(r, priority);
		hooks.offer(j);
		return j;
	}"
10479,addShutdownHook,"	public static ShutdownJob addShutdownHook(Runnable r) {
		return addShutdownHook(r, Integer.MAX_VALUE);
	}"
10480,createSlider,"	private Slider createSlider(int min, int max, int steps, int init) {
		if (max < min) {
			max = min;
		}
		Slider slider = new Slider(min, max, init);
		int majorTicks = Math.max((int) Math.ceil(max - min) / 5, 1);
		slider.setMajorTickUnit(majorTicks);
		slider.setMinorTickCount(majorTicks - 1);
		slider.setBlockIncrement(steps);"
10481,addPairToGrid,"	private void addPairToGrid(GridPane grid, int y, Label key, Node... value) {
		if (value.length == 0 || value.length > 2) {
			throw new IllegalArgumentException(""invalid number of arguments ("" + value.length + "") for addPairToGrid"");
		}
		grid.add(key, 0, y, 1, 1);"
10482,createGrid,"	private GridPane createGrid() {
		GridPane grid = new GridPane();
		grid.getStyleClass().add(""slider-grid-pane"");
		return grid;
	}"
10483,createToggleButton,"	private ToggleButton createToggleButton(Tab tab, Translation name) {
		ToggleButton toggleButton = new ToggleButton();
		toggleButton.textProperty().bind(name.getProperty());
		toggleButton.setToggleGroup(toggleGroup);
		toggleButton.setUserData(tab);
		return toggleButton;
	}"
10484,withAlignment,"	private <T extends Node> T withAlignment(T node) {
		GridPane.setFillWidth(node, true);
		return node;
	}"
10485,updateIndex,"				public void updateIndex(int i) {
					super.updateIndex(i);
					TileMapBox.TileMapBoxBackground[] values = TileMapBox.TileMapBoxBackground.values();
					if (i < 0 || i >= values.length) {
						return;
					}"
10486,fromString,"			public Locale fromString(String string) {
				return cache.get(string);
			}"
10487,toString,"			public String toString(Locale locale) {
				String display = locale.getDisplayName(locale);
				cache.put(display, locale);
				return display;
			}"
10488,updateItem,"		protected void updateItem(File file, boolean empty) {
			super.updateItem(file, empty);
			if (empty || file == null) {
				setText(null);
			} else {"
10489,iterateChunks,"	private static void iterateChunks(ChunkSet chunks, Point2i region, Consumer<Point2i> chunkConsumer) {
		if (chunks == null) {
			Point2i regionChunk = region.regionToChunk();"
10490,getSize,"	private static int getSize(ChunkSet chunks){
		return chunks != null ? chunks.size() : Tile.CHUNKS;
	}"
10492,sumSelection,"	public static AtomicLong sumSelection(int selected, Selection data, Overlay overlay, Progress progressChannel) {
		AtomicLong answer = new AtomicLong();
		answer.set(0);

		JobHandler.clearQueues();

		progressChannel.setMax(selected);
		progressChannel.updateProgress(""0"", 0);

		LOGGER.debug(""creating counting jobs: {}"", data);
"
10495,exportSelectionImage,"	public static int[] exportSelectionImage(SelectionData data, OverlayPool overlayPool, Progress progressChannel) {
		JobHandler.clearQueues();

		progressChannel.setMax(data.size());
		progressChannel.updateProgress(FileHelper.createMCAFileName(data.getSelection().one()), 0);

		LOGGER.debug(""creating image generation jobs for image: {}"", data);

		int[] pixels = new int[(int) (data.getWidth() * 16 * data.getHeight() * 16)];
"
10496,execute,"		public void execute() {
			try {
				getData().deFragment(destinations);
			} catch (Exception ex) {"
10498,exportSelection,"	public static void exportSelection(Selection selection, WorldDirectories destination, Progress progressChannel) {
		if (selection.isEmpty()) {
			progressChannel.done(""no selection"");
			return;
		}

		JobHandler.clearQueues();

		Selection trueSelection = selection.getTrueSelection(destination);"
10499,execute,"		public void execute() {
			Timer t = new Timer();
			try {
				getData().deFragment();
			} catch (Exception ex) {
				LOGGER.warn(""failed to delete selected chunks from {}"", getRegionDirectories().getLocationAsFileName(), ex);"
10501,deleteSelection,"	public static void deleteSelection(Selection selection, Progress progressChannel) {
		if (selection.isEmpty()) {
			progressChannel.done(""no selection"");
			return;
		}

		JobHandler.clearQueues();

		progressChannel.setMessage(""preparing"");

		Selection trueSelection = selection.getTrueSelection(ConfigProvider.WORLD.getWorldDirs());"
10502,toString,"	public String toString() {
		return String.format(""SelectionData{min: %s, max: %s, width: %d, height: %d}"", min, max, getWidth(), getHeight());
	}"
10503,calculateMinMax,"	protected void calculateMinMax() {
		int minChunkX = 31;
		int minChunkZ = 31;
		int maxChunkX = 0;
		int maxChunkZ = 0;

		int minRegionX = Integer.MAX_VALUE;
		int minRegionZ = Integer.MAX_VALUE;
		int maxRegionX = Integer.MIN_VALUE;
		int maxRegionZ = Integer.MIN_VALUE;

		for (Long2ObjectMap.Entry<ChunkSet> entry : selection.selection.long2ObjectEntrySet()) {
			Point2i region = new Point2i(entry.getLongKey());"
10504,getWorld,"	public WorldDirectories getWorld() {
		return world;
	}"
10505,size,"	public int size() {
		return selection.size();
	}"
10506,getHeight,"	public long getHeight() {
		if (min == null || max == null) {
			calculateMinMax();
		}"
10507,getWidth,"	public long getWidth() {
		if (min == null || max == null) {
			calculateMinMax();
		}"
10508,getMax,"	public Point2i getMax() {
		if (max == null) {
			calculateMinMax();
		}"
10509,getMin,"	public Point2i getMin() {
		if (min == null) {
			calculateMinMax();
		}"
10510,isInverted,"	public boolean isInverted() {
		return selection.inverted;
	}"
10511,getSelection,"	public Selection getSelection() {
		return selection;
	}"
10512,toString,"	public String toString() {
		return getStats().toString();
	}"
10513,Stats,"	public record Stats(
		int totalSelectedChunks,"
10514,getStats,"	public Stats getStats() {
		int totalSelectedChunks = 0;
		int totalChunksOfPartiallySelectedRegions = 0;
		int partiallySelectedRegions = 0;
		int fullySelectedRegions = 0;
		int below64 = 0, below128 = 0, below256 = 0, below512 = 0;
		for (Long2ObjectMap.Entry<ChunkSet> entry : selection.long2ObjectEntrySet()) {
			if (entry.getValue() == null) {
				totalSelectedChunks += 1024;"
10515,iterator,"	public Iterator<Long2ObjectMap.Entry<ChunkSet>> iterator() {
		return selection.long2ObjectEntrySet().iterator();
	}"
10516,addRadius,"	private void addRadius(Point2i center, int radius, Selection bounds) {
		Point2i min = center.sub(radius);
		Point2i max = center.add(radius);
		double radiusSquared = ((double) radius + 0.3) * ((double) radius + 0.3);
		int distX, distZ;
		for (int x = min.getX(); x <= max.getX(); x++) {
			for (int z = min.getZ(); z <= max.getZ(); z++) {"
10518,addAll,"	public void addAll(Point2i region, ChunkSet chunks) {
		long r = region.asLong();
		if (inverted) {
			if (chunks == null || chunks.size() == 1024) {"
10519,addAll,"	public void addAll(LongOpenHashSet entries) {
		for (long entry : entries) {
			addChunk(entry);"
10520,add,"	private static ChunkSet add(ChunkSet source, ChunkSet target) {
		if (source == null || target == null) {
			return null;
		}
		source.or(target);"
10521,subtract,"	private static ChunkSet subtract(ChunkSet source, ChunkSet target) {
		if (source == null) {
			return invertChunks(target);
		}
		if (target == null) {
			return new ChunkSet();"
10522,union,"	private static ChunkSet union(ChunkSet a, ChunkSet b) {
		if (a == null) {
			return cloneValue(b);
		}
		if (b == null) {
			return a;
		}"
10523,cloneValue,"	private static ChunkSet cloneValue(ChunkSet v) {
		return v == null ? null : v.clone();
	}"
10524,merge,"	public void merge(Selection other) {
		if (!inverted && !other.inverted) {
"
10525,invertChunks,"	private static ChunkSet invertChunks(ChunkSet chunks) {
		if (chunks == null) {
			return new ChunkSet();
		}
		ChunkSet result = new ChunkSet();
		for (short i = 0; i < 1024; i++) {"
10526,invertAll,"	public void invertAll() {
		for (Long2ObjectMap.Entry<ChunkSet> entry : selection.long2ObjectEntrySet()) {
			if (entry.getValue() == null) {"
10527,getSelectedChunksIgnoreInverted,"	public ChunkSet getSelectedChunksIgnoreInverted(Point2i region) {
		if (selection.containsKey(region.asLong())) {
			return selection.get(region.asLong());"
10528,removeChunk,"	public void removeChunk(Point2i chunk) {
		long region = chunk.chunkToRegion().asLong();
		if (inverted) {
			if (selection.containsKey(region)) {"
10529,removeRegion,"	public int removeRegion(long region) {
		if (inverted) {
			if (selection.containsKey(region)) {"
10530,clear,"	public void clear() {
		selection = new Long2ObjectOpenHashMap<>();
		inverted = false;
	}"
10531,getSelectedChunks,"	public ChunkSet getSelectedChunks(Point2i region) {
		if (inverted) {
			if (selection.containsKey(region.asLong())) {
				return invertChunks(selection.get(region.asLong())).immutable();"
10532,isAnyChunkInRegionSelected,"	public boolean isAnyChunkInRegionSelected(Point2i region) {
		return isAnyChunkInRegionSelected(region.asLong());
	}"
10533,isAnyChunkInRegionSelected,"	public boolean isAnyChunkInRegionSelected(long region) {
		if (inverted) {
			return !selection.containsKey(region) || selection.get(region) != null;"
10534,isRegionSelected,"	public boolean isRegionSelected(long region) {
		if (inverted) {
			return !selection.containsKey(region);"
10535,addRegion,"	public int addRegion(long region) {
		if (inverted) {
			if (selection.containsKey(region)) {"
10536,addChunk,"	protected void addChunk(long region, short chunk) {
		if (inverted) {
			if (selection.containsKey(region)) {"
10537,setSelection,"	public void setSelection(Selection other) {
		this.selection = other.selection;
		this.inverted = other.inverted;
	}"
10538,addChunk,"	public void addChunk(long chunkCoords) {
		Point2i chunk = new Point2i(chunkCoords);
		addChunk(chunk.chunkToRegion().asLong(), chunk.asChunkIndex());
	}"
10540,addChunk,"	public void addChunk(Point2i chunk) {
		addChunk(chunk.chunkToRegion().asLong(), chunk.asChunkIndex());
	}"
10541,one,"	public Point2i one() {
		if (inverted || selection.isEmpty()) {
			return new Point2i();
		}"
10542,count,"	public int count() {
		int result = 0;
		for (Long2ObjectMap.Entry<ChunkSet> entry : selection.long2ObjectEntrySet()) {
			result += entry.getValue() == null ? 1024 : entry.getValue().size();
		}"
10543,size,"	public int size() {
		return inverted ? Integer.MAX_VALUE : selection.size();
	}"
10544,isEmpty,"	public boolean isEmpty() {
		return !inverted && selection.isEmpty();
	}"
10545,setInverted,"	public void setInverted(boolean inverted) {
		this.inverted = inverted;
	}"
10546,isInverted,"	public boolean isInverted() {
		return inverted;
	}"
10547,isChunkSelected,"	protected boolean isChunkSelected(long region, short chunk) {
		if (selection.containsKey(region)) {
			ChunkSet chunks = selection.get(region);"
10548,isChunkSelected,"	public boolean isChunkSelected(Point2i chunk) {
		return isChunkSelected(chunk.chunkToRegion().asLong(), chunk.asChunkIndex());
	}"
10549,isChunkSelected,"	public boolean isChunkSelected(int x, int z) {
		Point2i pChunk = new Point2i(x, z);
		Point2i pRegion = pChunk.chunkToRegion();
		return isChunkSelected(pRegion.asLong(), pChunk.asChunkIndex());
	}"
10550,parseInt,"	private static Integer parseInt(String s) {
		try {
			return Integer.parseInt(s);"
10551,ioException,"	private static IOException ioException(String msg, Object... format) {
		return new IOException(String.format(msg, format));
	}"
10552,writePoint,"	private static String writePoint(Point2i p) {
		return p.getX() + "";"" + p.getZ();
	}"
10553,writePoint,"	private static void writePoint(BufferedWriter bw, Point2i p) throws IOException {
		bw.write(Integer.toString(p.getX()));
		bw.write(';');
		bw.write(Integer.toString(p.getZ()));
	}"
10554,saveToString,"	public String saveToString() {
		StringBuilder sb = new StringBuilder();
		if (inverted) {
			sb.append(""inverted\n"");
		}
		for (Long2ObjectMap.Entry<ChunkSet> entry : selection.long2ObjectEntrySet()) {"
10555,saveToFile,"	public void saveToFile(File csvFile) throws IOException {
		try (BufferedWriter bw = new BufferedWriter(new FileWriter(csvFile))) {
			if (inverted) {"
10556,readFromFile,"	public static Selection readFromFile(File csvFile) throws IOException {
		Long2ObjectOpenHashMap<ChunkSet> sel = new Long2ObjectOpenHashMap<>();
		Selection selection = new Selection(sel, false);
		boolean inverted = false;
		try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {
			String line;
			int num = 0;
			while ((line = br.readLine()) != null) {"
10558,after,"	public void after() {
		try {
			engine.run(""after"");"
10559,before,"	public void before() {
		try {
			engine.run(""before"");"
10560,change,"	public void change(ChunkData root) {
		try {
			engine.run(""apply"", root);"
10561,parseNewValue,"	public boolean parseNewValue(String s) {
		try {
			engine.eval(s);"
10562,getOldValue,"	public String getOldValue(ChunkData root) {
		return null;
	}"
10563,canSkip,"	public boolean canSkip() {
		return false;
	}"
10567,escapeString,"	private String escapeString(String s) {
		return s.replace(""\\"", ""\\\\"").replace(""\"""", ""\\\"""");
	}"
10568,valueToString,"	public String valueToString() {
		StringBuilder sb = new StringBuilder();
		boolean first = true;
		for (Map.Entry<String, ChunkFilter.BlockReplaceData> entry : getNewValue().entrySet()) {
			if (first) {
				first = false;"
10569,toString,"	public String toString() {
		return getType().toString() + "" = \"""" + valueToString() + ""\"""";
	}"
10570,force,"	public void force(ChunkData data) {
		change(data);
	}"
10572,getOldValue,"	public Map<String, ChunkFilter.BlockReplaceData> getOldValue(ChunkData data) {
		return null;
	}"
10574,clone,"	public RegionMCAFile clone() {
		return clone(RegionMCAFile::new);
	}"
10575,minimizeForRendering,"	public RegionMCAFile minimizeForRendering() {
		RegionMCAFile min = new RegionMCAFile(getLocation());
		min.setFile(getFile());
		min.chunks = new RegionChunk[1024];

		for (int index = 0; index < 1024; index++) {
			RegionChunk chunk = getChunk(index);"
10577,newEmptyChunk,"	static RegionChunk newEmptyChunk(Point2i absoluteLocation, int dataVersion) {
		ChunkMerger chunkMerger = VersionController.getChunkMerger(dataVersion);
		CompoundTag root = chunkMerger.newEmptyChunk(absoluteLocation, dataVersion);
		RegionChunk chunk = new RegionChunk(absoluteLocation);
		chunk.data = root;
		chunk.compressionType = CompressionType.ZLIB;
		return chunk;
	}"
10579,canSkip,"		public boolean canSkip() {
			return canSkip;
		}"
10580,cancel,"		public void cancel() {
			if (progressChannel != null) {
				progressChannel.incrementProgress(FileHelper.createMCAFileName(tile.getLocation()));"
10582,getPriority,"		public int getPriority() {
			if (prioritySupplier == null) {
				return super.getPriority();
			}"
10584,cancel,"		public void cancel() {
			LOGGER.debug(""cancelling job {}, tile:{}, scale:{}, loading:{}, image:{}, loaded:{}"",
				MCAImageProcessJob.class.getSimpleName(), tile.getLocation(), zoomLevel, isLoading(tile), tile.getImage() == null ? ""null"" : tile.getImage().getHeight() + ""x"" + tile.getImage().getWidth(), tile.isLoaded());

			setLoading(tile, false);"
10585,execute,"		public boolean execute() {
			RegionMCAFile cachedRegion = getCachedRegionMCAFile(tile.getLocation());
			byte[] data = null;
			if (cachedRegion == null) {
				data = load(tile.getMCAFile());
			}
			if (data == null && cachedRegion == null) {
				callback.accept(null, uniqueID);
				if (progressChannel != null) {
					progressChannel.incrementProgress(FileHelper.createMCAFileName(tile.getLocation()));
				}
				return true;"
10586,matchesCurrentConfig,"		public boolean matchesCurrentConfig() {
			WorldConfig worldConfig = ConfigProvider.WORLD;
			return world.equals(worldConfig.getWorldUUID())
					&& height == worldConfig.getRenderHeight()"
10587,setLoading,"	public static void setLoading(Tile tile, boolean loading) {
		LOGGER.debug(""set loading from mca for {} to {}, image:{}, loaded:{}"",
			tile.getLocation(), loading, tile.getImage() == null ? ""null"" : tile.getImage().getHeight() + ""x"" + tile.getImage().getWidth(), tile.isLoaded());
"
10588,isLoading,"	public static boolean isLoading(Tile tile) {
		return loading.contains(tile.getLocation());
	}"
10589,invalidateCachedMCAFiles,"	public static void invalidateCachedMCAFiles() {
		synchronized (cacheLock) {
			cachedMCAFiles.clear();"
10590,setCacheEligibilityChecker,"	public static void setCacheEligibilityChecker(Function<Point2i, Boolean> checker) {
		RegionImageGenerator.cacheEligibilityChecker = checker;
	}"
10591,uncacheRegionMCAFile,"	public static void uncacheRegionMCAFile(Point2i region) {
		synchronized (cacheLock) {
			cachedMCAFiles.remove(region);"
10592,cacheRegionMCAFile,"	public static void cacheRegionMCAFile(RegionMCAFile regionMCAFile, UniqueID uniqueID) {
		synchronized (cacheLock) {
			if (!uniqueID.matchesCurrentConfig()) {"
10593,getCachedRegionMCAFile,"	public static RegionMCAFile getCachedRegionMCAFile(Point2i region) {
		synchronized (cacheLock) {
			return cachedMCAFiles.get(region);"
10595,clone,"	public RegionDirectories clone() throws CloneNotSupportedException {
		RegionDirectories clone = (RegionDirectories) super.clone();
		clone.location = location.clone();
		return clone;
	}"
10597,exists,"	public boolean exists() {
		return region.exists() || poi.exists() || entities.exists();
	}"
10598,fromWorldDirectories,"	public static RegionDirectories fromWorldDirectories(WorldDirectories wd, Point2i location) {
		String fileName = FileHelper.createMCAFileName(location);
		return new RegionDirectories(
				location,"
10599,getLocationAsFileName,"	public String getLocationAsFileName() {
		if (locationAsFileName == null) {
			return locationAsFileName = FileHelper.createMCAFileName(location);
		}"
10604,setEntities,"	public void setEntities(File entities) {
		if (location == null) {
			location = FileHelper.parseMCAFileName(entities);
		}"
10605,setPoi,"	public void setPoi(File poi) {
		if (location == null) {
			location = FileHelper.parseMCAFileName(poi);
		}"
10606,setRegion,"	public void setRegion(File region) {
		if (location == null) {
			location = FileHelper.parseMCAFileName(region);
		}"
10607,clone,"	public RegionChunk clone() {
		return clone(RegionChunk::new);
	}"
10608,getMCCFile,"	public File getMCCFile() {
		return FileHelper.createRegionMCCFilePath(absoluteLocation);
	}"
10609,merge,"	public void merge(CompoundTag destination, List<Range> ranges, int yOffset) {
		ChunkMerger merger = VersionController.getChunkMerger(data.getIntOrDefault(""DataVersion"", 0));
		merger.mergeChunks(data, destination, ranges, yOffset);
	}"
10610,relocate,"	public boolean relocate(Point3i offset) {
		ChunkRelocator relocator = VersionController.getChunkRelocator(data.getIntOrDefault(""DataVersion"", 0));
		return relocator.relocate(data, offset);
	}"
10611,clone,"	protected Region clone() throws CloneNotSupportedException {
		Region clone = (Region) super.clone();
		if (region != null) {
			clone.region = region.clone();
		}
		if (poi != null) {
			clone.poi = poi.clone();
		}
		if (entities != null) {"
10612,mergeInto,"	public void mergeInto(Region region, Point3i offset, boolean overwrite, ChunkSet sourceChunks, ChunkSet targetChunks, List<Range> ranges) {
		if (this.region != null) {
			this.region.mergeChunksInto(region.region, offset, overwrite, sourceChunks, targetChunks, ranges);
		}
		if (this.poi != null) {"
10613,applyFieldChanges,"	public void applyFieldChanges(List<Field<?>> fields, boolean force, Selection selection) {
		Timer t = new Timer();
		boolean selected = false;
		for (int x = 0; x < 32; x++) {
			for (int z = 0; z < 32; z++) {
				Point2i absoluteLocation = location.regionToChunk().add(x, z);"
10614,getFilteredChunks,"	public ChunkSet getFilteredChunks(Filter<?> filter, Selection selection) {
		ChunkSet chunks = new ChunkSet();

		for (int i = 0; i < 1024; i++) {
			RegionChunk regionChunk = this.region == null ? null : this.region.getChunk(i);"
10615,deleteChunkIndex,"	private void deleteChunkIndex(int index) {
		if (this.region != null) {
			this.region.deleteChunk(index);
		}
		if (this.entities != null) {"
10616,keepChunks,"	public boolean keepChunks(Filter<?> filter, Selection selection) {
		boolean deleted = false;
		for (int i = 0; i < 1024; i++) {
			RegionChunk region = this.region.getChunk(i);
			EntitiesChunk entities = this.entities == null ? null : this.entities.getChunk(i);"
10617,deleteChunks,"	public boolean deleteChunks(Filter<?> filter, Selection selection) {
		boolean deleted = false;
		for (int i = 0; i < 1024; i++) {
			RegionChunk region = this.region.getChunk(i);
			EntitiesChunk entities = this.entities == null ? null : this.entities.getChunk(i);"
10618,deleteChunks,"	public void deleteChunks(ChunkSet selection) {
		if (region != null) {
			region.deleteChunks(selection);
		}
		if (poi != null) {"
10619,deleteFiles,"	public void deleteFiles() {
		if (directories.getRegion() != null && directories.getRegion().exists()) {
			directories.getRegion().delete();
		}
		if (directories.getPoi() != null && directories.getPoi().exists()) {"
10620,deFragment,"	public void deFragment(RegionDirectories dest) throws IOException {
		if (region != null) {
			region.deFragment(dest.getRegion());
		}
		if (poi != null) {"
10621,deFragment,"	public void deFragment() throws IOException {
		if (region != null) {
			region.deFragment();
		}
		if (poi != null) {"
10622,saveWithTempFiles,"	public void saveWithTempFiles(RegionDirectories dest) throws IOException {
		if (region != null) {
			region.saveWithTempFile(dest.getRegion());
		}
		if (poi != null) {"
10623,saveWithTempFiles,"	public void saveWithTempFiles() throws IOException {
		if (region != null) {
			region.saveWithTempFile();
		}
		if (poi != null) {"
10624,save,"	public void save() throws IOException {
		if (region != null) {
			region.save();
		}
		if (poi != null) {"
10625,setChunkDataAt,"	public void setChunkDataAt(ChunkData chunkData, Point2i location) {
		if (region == null && directories.getRegion() != null) {
			region = new RegionMCAFile(directories.getRegion());
		}
		if (poi == null && directories.getPoi() != null) {
			poi = new PoiMCAFile(directories.getPoi());
		}
		if (entities == null && directories.getEntities() != null) {"
10626,getChunkData,"	public ChunkData getChunkData(int index, boolean selected) {
		RegionChunk regionChunk = null;
		PoiChunk poiChunk = null;
		EntitiesChunk entitiesChunk = null;
		if (region != null) {
			regionChunk = region.getChunk(index);
		}
		if (poi != null) {
			poiChunk = poi.getChunk(index);"
10627,getChunkDataAt,"	public ChunkData getChunkDataAt(Point2i location, boolean selected) {
		RegionChunk regionChunk = null;
		PoiChunk poiChunk = null;
		EntitiesChunk entitiesChunk = null;
		if (region != null) {
			regionChunk = region.getChunkAt(location);
		}
		if (poi != null) {
			poiChunk = poi.getChunkAt(location);"
10628,setDirectories,"	public void setDirectories(RegionDirectories dirs) {
		if (region != null) {
			region.setFile(dirs.getRegion());
		}
		if (poi != null) {"
10629,isEmpty,"	public boolean isEmpty() {
		boolean empty = true;
		if (region != null) {
			empty = region.isEmpty();
		}
		if (poi != null && empty) {
			empty = poi.isEmpty();"
10630,setEntities,"	public void setEntities(EntitiesMCAFile entities) {
		this.entities = entities;
	}"
10631,setPoi,"	public void setPoi(PoiMCAFile poi) {
		this.poi = poi;
	}"
10632,setRegion,"	public void setRegion(RegionMCAFile region) {
		this.region = region;
	}"
10633,getEntities,"	public EntitiesMCAFile getEntities() {
		return entities;
	}"
10634,getPoi,"	public PoiMCAFile getPoi() {
		return poi;
	}"
10635,getRegion,"	public RegionMCAFile getRegion() {
		return region;
	}"
10636,loadEntities,"	public void loadEntities(File src, ByteArrayPointer ptr) throws IOException {
		entities = new EntitiesMCAFile(src);
		entities.load(ptr);
	}"
10637,loadEntities,"	public void loadEntities(File src) throws IOException {
		entities = new EntitiesMCAFile(src);
		entities.load();
	}"
10638,loadPoi,"	public void loadPoi(File src, ByteArrayPointer ptr) throws IOException {
		poi = new PoiMCAFile(src);
		poi.load(ptr);
	}"
10639,loadPoi,"	public void loadPoi(File src) throws IOException {
		poi = new PoiMCAFile(src);
		poi.load();
	}"
10640,loadRegion,"	public void loadRegion(File src, ByteArrayPointer ptr) throws IOException {
		region = new RegionMCAFile(src);
		region.load(ptr);
	}"
10641,loadRegion,"	public void loadRegion(File src) throws IOException {
		region = new RegionMCAFile(src);
		region.load();
	}"
10642,loadOrCreateEmptyRegion,"	public static Region loadOrCreateEmptyRegion(RegionDirectories dirs) throws IOException {
		Region r = new Region();
		if (dirs.getRegion() != null) {
			if (dirs.getRegion().exists()) {
				r.loadRegion(dirs.getRegion());
			} else {
				r.region = new RegionMCAFile(dirs.getRegion());"
10643,loadRegionHeaders,"	public static Region loadRegionHeaders(RegionDirectories dirs, byte[] regionHeader, byte[] poiHeader, byte[] entitiesHeader) throws IOException {
		Region r = new Region();
		if (dirs.getRegion() != null && regionHeader != null) {
			r.region = new RegionMCAFile(dirs.getRegion());
			r.region.loadHeader(new ByteArrayPointer(regionHeader));
		}
		if (dirs.getPoi() != null && poiHeader != null) {
			r.poi = new PoiMCAFile(dirs.getPoi());"
10644,loadRegion,"	public static Region loadRegion(RegionDirectories dirs) throws IOException {
		Region r = new Region();
		if (dirs.getRegion() != null) {
			r.loadRegion(dirs.getRegion());
		}
		if (dirs.getPoi() != null) {
			r.loadPoi(dirs.getPoi());
		}
		if (dirs.getEntities() != null) {"
10648,getOldValue,"	public Boolean getOldValue(ChunkData data) {
		return null;
	}"
10649,parseNewValue,"	public boolean parseNewValue(String s) {
		setNewValue(Boolean.parseBoolean(s));
		return true;
	}"
10650,setHigh,"	public void setHigh(double high) {
		highProperty.set(high < getLow() ? getLow() : (Math.min(high, getMax())));
	}"
10651,setLow,"	public void setLow(double low) {
		lowProperty.set(low > getHigh() ? getHigh() : Math.max(low, getMin()));
	}"
10652,setMax,"	public void setMax(double max) {
		maxProperty.set(Math.max(max, getMin()));
	}"
10653,setMin,"	public void setMin(double min) {
		minProperty.set(Math.min(min, getMax()));
	}"
10654,getHigh,"	public double getHigh() {
		return highProperty.get();
	}"
10655,getLow,"	public double getLow() {
		return lowProperty.get();
	}"
10656,getMax,"	public double getMax() {
		return maxProperty.get();
	}"
10657,getMin,"	public double getMin() {
		return minProperty.get();
	}"
10658,highProperty,"	public DoubleProperty highProperty() {
		return highProperty;
	}"
10659,lowProperty,"	public DoubleProperty lowProperty() {
		return lowProperty;
	}"
10660,maxProperty,"	public DoubleProperty maxProperty() {
		return maxProperty;
	}"
10661,minProperty,"	public DoubleProperty minProperty() {
		return minProperty;
	}"
10662,onMouseReleased,"	private void onMouseReleased(MouseEvent e) {
		previousMouseLocation = null;
		pressedPane = null;
	}"
10663,onMousePressed,"	private void onMousePressed(MouseEvent e) {
		previousMouseLocation = new Point2f(e.getX(), e.getY());
		pressedPane = (Pane) e.getTarget();
	}"
10664,onMouseDragged,"	private void onMouseDragged(MouseEvent e) {
		double x = Math.max(Math.min(e.getX(), getWidth() + upperThumb.getWidth() / 2), -lowerThumb.getWidth() / 2);

		Point2f mouseLocation = new Point2f(x, e.getY());

		if (pressedPane == lowerThumb) {"
10666,parseRanges,"	public static List<Range> parseRanges(String ranges, String delimiter) {
		if (""true"".equals(ranges.trim())) {
			return new ArrayList<>(Collections.singletonList(new Range(Integer.MIN_VALUE, Integer.MAX_VALUE)));
		}

		String[] split = ranges.split(delimiter);
		List<Range> list = new ArrayList<>(split.length);"
10668,toString,"	public String toString() {
		if (from == to) {
			return from + """";
		}"
10669,forEach,"	public void forEach(Consumer<Integer> iteration, int min, int max) {
		int m = Math.min(to, max);
		for (int i = Math.max(from, min); i < m; i++) {
			iteration.accept(i);"
10670,isMaxRange,"	public boolean isMaxRange() {
		return from == Integer.MIN_VALUE && to == Integer.MAX_VALUE;
	}"
10671,contains,"	public boolean contains(int value) {
		return from <= value && to >= value;
	}"
10672,setTo,"	public void setTo(int to) {
		this.to = to;
	}"
10673,setFrom,"	public void setFrom(int from) {
		this.from = from;
	}"
10676,setOnFinish,"	public void setOnFinish(Runnable r) {
		onFinish = r;
	}"
10677,infoProperty,"	public StringProperty infoProperty() {
		return infoProperty;
	}"
10678,updateProgress,"	public void updateProgress(String info, double progress, int max) {
		if (!locked) {
			Platform.runLater(() -> infoProperty.setValue(info));"
10679,updateProgress,"	public void updateProgress(String info, int progress) {
		current.set(progress);
		updateProgress(info, progress, max);
	}"
10680,setIndeterminate,"	public void setIndeterminate(String info) {
		Platform.runLater(() -> infoProperty.setValue(info));
		updateProgress(-1, 0);
	}"
10681,setMessage,"	public void setMessage(String msg) {
		Platform.runLater(() -> infoProperty.setValue(msg));
	}"
10682,done,"	public void done(String info) {
		updateProgress(info, 1, 1);
	}"
10683,setLocked,"	public void setLocked(boolean locked) {
		this.locked = locked;
	}"
10684,incrementProgress,"	public void incrementProgress(String info, int count) {
		updateProgress(info, current.addAndGet(count), max);
	}"
10685,incrementProgress,"	public void incrementProgress(String info) {
		updateProgress(info, current.incrementAndGet(), max);
	}"
10686,setMax,"	public void setMax(int max) {
		this.max = max;
	}"
10687,taskCancelled,"	public boolean taskCancelled() {
		return cancelled;
	}"
10688,cancelTask,"	public void cancelTask() {
		cancelled = true;
		done("""");
	}"
10689,getCurrentTask,"	protected ProgressTask getCurrentTask() {
		return currentTask;
	}"
10691,updateProgress,"	public void updateProgress(String status, double progress) {
		progressBar.setProgress(progress);
		label.setText(status);
	}"
10692,call,"			protected Void call() {
				r.accept(this);
				return null;
			}"
10693,showProgressBar,"	public void showProgressBar(Consumer<ProgressTask> r) {
		JobHandler.setTrimSaveData(false);
		currentTask = new ProgressTask() {
			@Override
			protected Void call() {
				r.accept(this);
				return null;
			}
		};
		progressBar.progressProperty().bind(currentTask.progressProperty());
		label.textProperty().bind(currentTask.infoProperty());"
10695,incrementProgress,"	void incrementProgress(String msg, int progress);
"
10700,updateProgress,"	void updateProgress(String msg, int progress);
"
10703,run,"	public void run() {
		try {
			if (execute()) {"
10704,load,"	protected byte[] load(File file, int length) {
		if (file == null || !file.exists() || file.length() < length) {
			return null;
		}
		Timer t = new Timer();
		int read;
		byte[] data = new byte[length];
		try (InputStream is = Files.newInputStream(file.toPath(), StandardOpenOption.READ)) {
			read = is.read(data);"
10705,load,"	protected byte[] load(File file) {
		if (file == null) {
			return null;
		}
		long length = file.length();
		if (length > 0) {"
10706,loadRegionHeader,"	public byte[] loadRegionHeader() {
		return load(getRegionDirectories().getRegion(), FileHelper.HEADER_SIZE);
	}"
10707,loadEntitiesHeader,"	public byte[] loadEntitiesHeader() {
		return load(getRegionDirectories().getEntities(), FileHelper.HEADER_SIZE);
	}"
10708,loadPoiHeader,"	public byte[] loadPoiHeader() {
		return load(getRegionDirectories().getPoi(), FileHelper.HEADER_SIZE);
	}"
10709,loadRegion,"	public byte[] loadRegion() {
		return load(getRegionDirectories().getRegion());
	}"
10710,loadEntities,"	public byte[] loadEntities() {
		return load(getRegionDirectories().getEntities());
	}"
10711,loadPoi,"	public byte[] loadPoi() {
		return load(getRegionDirectories().getPoi());
	}"
10713,change,"	public void change(ChunkData data) {
		if (data.region() == null || data.region().getData() == null) {
			return;
		}
		data.region().getData().remove(""below_zero_retrogen"");"
10714,parseNewValue,"	public boolean parseNewValue(String s) {
		if (""1"".equals(s) || ""true"".equals(s)) {
			setNewValue(true);
			return true;"
10716,clone,"	public Point3i clone() {
		try {
			return (Point3i) super.clone();
		} catch (CloneNotSupportedException e) {"
10717,toString,"	public String toString() {
		return ""<"" + x + "", "" + y + "", "" + z + "">"";
	}"
10718,hashCode,"	public int hashCode() {
		return Objects.hash(x, y, z);
	}"
10719,blockToSection,"	public Point3i blockToSection() {
		return shiftRight(4);
	}"
10720,sectionToBlock,"	public Point3i sectionToBlock() {
		return shiftLeft(4);
	}"
10721,toPoint2i,"	public Point2i toPoint2i() {
		return new Point2i(x, z);
	}"
10722,chunkToRegion,"	public Point3i chunkToRegion() {
		return shift2Right(5);
	}"
10723,chunkToBlock,"	public Point3i chunkToBlock() {
		return shift2Left(4);
	}"
10724,blockToChunk,"	public Point3i blockToChunk() {
		return shift2Right(4);
	}"
10725,regionToChunk,"	public Point3i regionToChunk() {
		return shift2Left(5);
	}"
10726,regionToBlock,"	public Point3i regionToBlock() {
		return shift2Left(9);
	}"
10727,blockToRegion,"	public Point3i blockToRegion() {
		return shift2Right(9);
	}"
10728,equals,"	public boolean equals(Object other) {
		return other instanceof Point3i
				&& ((Point3i) other).x == x"
10729,shift2Left,"	private Point3i shift2Left(int i) {
		return new Point3i(x << i, y, z << i);
	}"
10730,shift2Right,"	private Point3i shift2Right(int i) {
		return new Point3i(x >> i, y, z >> i);
	}"
10731,shiftLeft,"	public Point3i shiftLeft(int i) {
		return new Point3i(x << i, y << i, z << i);
	}"
10732,shiftRight,"	public Point3i shiftRight(int i) {
		return new Point3i(x >> i, y >> i, z >> i);
	}"
10733,abs,"	public Point3i abs() {
		return new Point3i(x < 0 ? x * -1 : x, y < 0 ? y * -1 : y, z < 0 ? z * -1 : z);
	}"
10734,and,"	public Point3i and(int i) {
		return new Point3i(x & i, y & i, z & i);
	}"
10735,mod,"	public Point3i mod(float f) {
		return mod(f, f, f);
	}"
10736,mod,"	public Point3i mod(int i) {
		return mod(i, i, i);
	}"
10737,mod,"	public Point3i mod(Point3i p) {
		return mod(p.x, p.y, p.z);
	}"
10738,mod,"	public Point3i mod(float x, float y, float z) {
		return new Point3i((int) (this.x % x), (int) (this.y % y), (int) (this.z % z));
	}"
10739,mod,"	public Point3i mod(int x, int y, int z) {
		return new Point3i(this.x % x, this.y % y, this.z % z);
	}"
10740,div,"	public Point3i div(float f) {
		return div(f, f, f);
	}"
10741,div,"	public Point3i div(int i) {
		return div(i, i, i);
	}"
10742,div,"	public Point3i div(Point3i p) {
		return div(p.x, p. y, p.z);
	}"
10743,div,"	public Point3i div(float x, float y, float z) {
		return new Point3i((int) (this.x / x), (int) (this.y / y), (int) (this.z / z));
	}"
10744,div,"	public Point3i div(int x, int y, int z) {
		return new Point3i(this.x / x, this.y / y, this.z / z);
	}"
10745,mul,"	public Point3i mul(int i) {
		return mul(i, i, i);
	}"
10746,mul,"	public Point3i mul(Point3i p) {
		return mul(p.x, p.y, p.z);
	}"
10747,mul,"	public Point3i mul(int x, int y, int z) {
		return new Point3i(this.x * x, this.y * y, this.z * z);
	}"
10748,sub,"	public Point3i sub(int i) {
		return sub(i, i, i);
	}"
10749,sub,"	public Point3i sub(Point3i p) {
		return sub(p.x, p.y, p.z);
	}"
10750,sub,"	public Point3i sub(int x, int y, int z) {
		return new Point3i(this.x - x, this.y - y, this.z - z);
	}"
10751,add,"	public Point3i add(int i) {
		return add(i, i, i);
	}"
10752,add,"	public Point3i add(Point3i p) {
		return add(p.x, p.y, p.z);
	}"
10753,add,"	public Point3i add(int x, int y, int z) {
		return new Point3i(this.x + x, this.y + y, this.z + z);
	}"
10760,asChunkIndex,"	public short asChunkIndex() {
		Point2i n = asRelativeChunk();
		return (short) (n.z << 5 | n.x & 0x1F);
	}"
10761,asRelativeChunk,"	public Point2i asRelativeChunk() {
		return new Point2i(x & 0x1F, z & 0x1F);
	}"
10762,asLong,"	public long asLong() {
		return (long) x << 32 | z & 0xFFFFFFFFL;
	}"
10763,chunkToRegion,"	public Point2i chunkToRegion() {
		return shiftRight(5);
	}"
10764,chunkToBlock,"	public Point2i chunkToBlock() {
		return shiftLeft(4);
	}"
10765,blockToChunk,"	public Point2i blockToChunk() {
		return shiftRight(4);
	}"
10766,regionToChunk,"	public Point2i regionToChunk() {
		return shiftLeft(5);
	}"
10767,regionToBlock,"	public Point2i regionToBlock() {
		return shiftLeft(9);
	}"
10768,blockToRegion,"	public Point2i blockToRegion() {
		return shiftRight(9);
	}"
10769,clone,"	public Point2i clone() {
		try {
			return (Point2i) super.clone();
		} catch (CloneNotSupportedException e) {"
10770,toString,"	public String toString() {
		return ""<"" + x + "", "" + z + "">"";
	}"
10771,hashCode,"	public int hashCode() {
		return Objects.hash(x, z);
	}"
10772,equals,"	public boolean equals(Object other) {
		return other instanceof Point2i
				&& ((Point2i) other).x == x"
10773,toPoint3i,"	public Point3i toPoint3i(int y) {
		return new Point3i(x, y, z);
	}"
10774,toPoint3i,"	public Point3i toPoint3i() {
		return new Point3i(x, 0, z);
	}"
10775,toPoint2f,"	public Point2f toPoint2f() {
		return new Point2f((float) x, (float) z);
	}"
10776,shiftLeft,"	public Point2i shiftLeft(int i) {
		return new Point2i(x << i, z << i);
	}"
10777,shiftRight,"	public Point2i shiftRight(int i) {
		return new Point2i(x >> i, z >> i);
	}"
10778,abs,"	public Point2i abs() {
		return new Point2i(x < 0 ? x * -1 : x, z < 0 ? z * -1 : z);
	}"
10779,and,"	public Point2i and(int i) {
		return new Point2i(x & i, z & i);
	}"
10780,mod,"	public Point2i mod(float f) {
		return mod(f, f);
	}"
10781,mod,"	public Point2i mod(int i) {
		return mod(i, i);
	}"
10782,mod,"	public Point2i mod(Point2i p) {
		return mod(p.x, p.z);
	}"
10783,mod,"	public Point2i mod(float x, float z) {
		return new Point2i((int) (this.x % x), (int) (this.z % z));
	}"
10784,mod,"	public Point2i mod(int x, int z) {
		return new Point2i(this.x % x, this.z % z);
	}"
10785,div,"	public Point2i div(float f) {
		return div(f, f);
	}"
10786,div,"	public Point2i div(int i) {
		return div(i, i);
	}"
10787,div,"	public Point2i div(Point2i p) {
		return div(p.x, p.z);
	}"
10788,div,"	public Point2i div(float x, float z) {
		return new Point2i((int) (this.x / x), (int) (this.z / z));
	}"
10789,div,"	public Point2i div(int x, int z) {
		return new Point2i(this.x / x, this.z / z);
	}"
10790,mul,"	public Point2i mul(int i) {
		return mul(i, i);
	}"
10791,mul,"	public Point2i mul(Point2i p) {
		return mul(p.x, p.z);
	}"
10792,mul,"	public Point2i mul(int x, int z) {
		return new Point2i(this.x * x, this.z * z);
	}"
10793,sub,"	public Point2i sub(int i) {
		return sub(i, i);
	}"
10794,sub,"	public Point2i sub(Point2i p) {
		return sub(p.x, p.z);
	}"
10795,sub,"	public Point2i sub(int x, int z) {
		return new Point2i(this.x - x, this.z - z);
	}"
10796,add,"	public Point2i add(int i) {
		return add(i, i);
	}"
10797,add,"	public Point2i add(Point2i p) {
		return add(p.x, p.z);
	}"
10798,add,"	public Point2i add(int x, int z) {
		return new Point2i(this.x + x, this.z + z);
	}"
10803,clone,"	public Point2f clone() {
		try {
			return (Point2f) super.clone();
		} catch (CloneNotSupportedException e) {"
10804,toString,"	public String toString() {
		return ""<"" + x + "", "" + y + "">"";
	}"
10805,hashCode,"	public int hashCode() {
		return Objects.hash(x, y);
	}"
10806,equals,"	public boolean equals(Object other) {
		return other instanceof Point2f
				&& Float.compare(((Point2f) other).x, x) == 0"
10807,toPoint2i,"	public Point2i toPoint2i() {
		return new Point2i((int) x, (int) y);
	}"
10808,abs,"	public Point2f abs() {
		return new Point2f(x < 0 ? x * -1 : x, y < 0 ? y * -1 : y);
	}"
10809,div,"	public Point2f div(float i) {
		return div(i, i);
	}"
10810,div,"	public Point2f div(Point2f p) {
		return div(p.x, p.y);
	}"
10811,div,"	public Point2f div(float x, float y) {
		return new Point2f(this.x / x, this.y / y);
	}"
10812,mul,"	public Point2f mul(float i) {
		return mul(i, i);
	}"
10813,mul,"	public Point2f mul(Point2f p) {
		return mul(p.x, p.y);
	}"
10814,mul,"	public Point2f mul(float x, float y) {
		return new Point2f(this.x * x, this.y * y);
	}"
10815,sub,"	public Point2f sub(float i) {
		return sub(i, i);
	}"
10816,sub,"	public Point2f sub(Point2f p) {
		return sub(p.x, p.y);
	}"
10817,sub,"	public Point2f sub(float x, float y) {
		return new Point2f(this.x - x, this.y - y);
	}"
10818,add,"	public Point2f add(float i) {
		return add(i, i);
	}"
10819,add,"	public Point2f add(Point2f p) {
		return add(p.x, p.y);
	}"
10820,add,"	public Point2f add(float x, float y) {
		return new Point2f(this.x + x, this.y + y);
	}"
10825,clone,"	public PoiMCAFile clone() {
		return clone(PoiMCAFile::new);
	}"
10826,mergeChunksInto,"	public void mergeChunksInto(MCAFile<PoiChunk> destination, Point3i offset, boolean overwrite, ChunkSet sourceChunks, ChunkSet selection, List<Range> ranges) {
		mergeChunksInto(destination, offset, overwrite, sourceChunks, selection, ranges, PoiMCAFile::newEmptyChunk);
	}"
10827,newEmptyChunk,"	static PoiChunk newEmptyChunk(Point2i absoluteLocation, int dataVersion) {
		ChunkMerger chunkMerger = VersionController.getPoiMerger(dataVersion);
		CompoundTag root = chunkMerger.newEmptyChunk(absoluteLocation, dataVersion);
		PoiChunk chunk = new PoiChunk(absoluteLocation);
		chunk.data = root;
		chunk.compressionType = CompressionType.ZLIB;
		return chunk;
	}"
10828,clone,"	public PoiChunk clone() {
		return clone(PoiChunk::new);
	}"
10829,getMCCFile,"	public File getMCCFile() {
		return FileHelper.createPoiMCCFilePath(absoluteLocation);
	}"
10830,merge,"	public void merge(CompoundTag destination, List<Range> ranges, int yOffset) {
		ChunkMerger merger = VersionController.getPoiMerger(data.getIntOrDefault(""DataVersion"", 0));
		merger.mergeChunks(data, destination, ranges, yOffset);
	}"
10831,relocate,"	public boolean relocate(Point3i offset) {
		ChunkRelocator relocator = VersionController.getPoiRelocator(data.getIntOrDefault(""DataVersion"", 0));
		return relocator.relocate(data, offset);
	}"
10832,resume,"	public void resume(String msg) {
		pauseLock.lock();
		try {
			if (isPaused) {"
10833,pause,"	public void pause(String msg) {
		pauseLock.lock();
		try {
			if (!isPaused) {"
10835,beforeExecute,"	protected void beforeExecute(Thread t, Runnable r) {
		super.beforeExecute(t, r);
		pauseLock.lock();
		try {
			while (isPaused) {
				unpaused.await();"
10836,getPriority,"	public int getPriority() {
		if (prioritySupplier == null) {
			return super.getPriority();
		}"
10837,cancel,"	public void cancel() {
		setLoading(tile, false);
	}"
10841,setLoading,"	public static synchronized void setLoading(Tile tile, boolean loading) {
		if (loading) {
			ParseDataJob.loading.add(tile.getLocation());"
10843,getByName,"	public static OverlayType getByName(String name) {
		for (OverlayType t : OverlayType.values()) {
			if (t.name.equals(name)) {
				return t;"
10845,instance,"	public Overlay instance() {
		return supplier.get();
	}"
10846,getHoveredChunkValue,"	public void getHoveredChunkValue(Point2i chunk, Consumer<Integer> callback) {
		if (parser == null) {
			callback.accept(null);
		}
		Point2i region = chunk.chunkToRegion();
		Point2i normalizedChunk = chunk.asRelativeChunk();"
10847,discardData,"	public void discardData(Point2i region) {
		try {
			dataCache.deleteData(region);
			if (region.equals(hoveredRegion)) {"
10848,clear,"	public void clear() {
		try {
			dataCache.clear(tileMap.getOverlays());
			hoveredRegion = null;"
10849,switchTo,"	public void switchTo(String dbPath, List<Overlay> overlays) {
		try {
			dataCache.switchTo(dbPath, overlays);"
10850,push,"	public void push(Point2i location, int[] data) {
		try {
			dataCache.setData(tileMap.getOverlay(), location, data);"
10851,getColorGrade,"	private static int getColorGrade(int value, int min, int max, float minHue, float maxHue) {
		if (value <= min) {
			return Color.HSBtoRGB(minHue, 1, 1);
		}
		if (value >= max) {
			return Color.HSBtoRGB(maxHue, 1, 1);
		}"
10852,parseColorGrades,"	private static Image parseColorGrades(int[] data, int min, int max, float minHue, float maxHue) {
		int[] colors = new int[1024];
		for (int i = 0; i < 1024; i++) {
			colors[i] = getColorGrade(data[i], min, max, minHue, maxHue);
		}

		WritableImage image = new WritableImage(32, 32);"
10853,getImage,"	public Image getImage(Point2i location, RegionMCAFile region, PoiMCAFile poi, EntitiesMCAFile entities) {
		try {
			int[] data = dataCache.getData(parser, location);
			if (data != null) {
				return parseColorGrades(data, parser.min(), parser.max(), parser.getMinHue(), parser.getMaxHue());
			}"
10855,setParser,"	public void setParser(Overlay overlay) {
		this.parser = overlay;
		if (overlay != null && overlay.isValid() && overlay.isActive()) {
			try {"
10856,getParser,"	public Overlay getParser() {
		return parser;
	}"
10858,toString,"	public String toString() {
		return toStringGsonInstance.toJson(overlays);
	}"
10859,load,"	public static OverlayConfig load() {
		String json = loadString(BASE_OVERLAYS_FILE);
		if (json == null) {
			return new OverlayConfig();
		}
		Overlay[] overlays = gsonInstance.fromJson(json, Overlay[].class);
		OverlayConfig cfg = new OverlayConfig();
		cfg.overlays = Arrays.asList(overlays);"
10860,save,"	protected String save(Gson gson) {
		return gson.toJson(overlays);
	}"
10861,save,"	public void save() {
		save(gsonInstance, BASE_OVERLAYS_FILE);
	}"
10862,getOverlays,"	public List<Overlay> getOverlays() {
		return overlays;
	}"
10863,setOverlays,"	public void setOverlays(List<Overlay> overlays) {
		this.overlays = overlays;
	}"
10864,displayValid,"	private void displayValid(boolean valid) {
		pseudoClassStateChanged(invalid, !valid);
	}"
10865,onAdditionalDataInput,"	private void onAdditionalDataInput(String newValue) {
		displayValid(getValue().setMultiValuesString(newValue));
		if (onValuesChange != null) {
			onValuesChange.accept(getValue());"
10866,onMaximumInput,"	private void onMaximumInput(String newValue) {
		displayValid(getValue().setMax(newValue));
		if (onValuesChange != null) {
			onValuesChange.accept(getValue());"
10867,onMinimumInput,"	private void onMinimumInput(String newValue) {
		displayValid(getValue().setMin(newValue));
		if (onValuesChange != null) {
			onValuesChange.accept(getValue());"
10869,setOnDelete,"	public void setOnDelete(Consumer<Overlay> consumer) {
		onDelete = consumer;
	}"
10870,setOnValuesChange,"	public void setOnValuesChange(Consumer<Overlay> consumer) {
		onValuesChange = consumer;
	}"
10871,setOnTypeChange,"	public void setOnTypeChange(BiConsumer<Overlay, Overlay> consumer) {
		onTypeChange = consumer;
	}"
10872,setGradientBackground,"	private void setGradientBackground(HueRangeSlider hueSlider) {
		float min = (float) hueSlider.getLow();
		float max = (float) hueSlider.getHigh();

		if (hueSlider.isInverted()) {
			min = 0.85f - max;"
10873,getValue,"	private Overlay getValue() {
		return valueProperty.get();
	}"
10874,setSelected,"	public void setSelected(boolean selected) {
		pseudoClassStateChanged(OverlayBox.selected, selected);
	}"
10875,get,"	public static <T> T get(JsonObject obj, String name, T def, Function<JsonElement, T> parser) {
		JsonElement e = obj.get(name);
		if (e == null || e.isJsonNull()) {
			return def;
		}"
10878,setRenderHeight,"	public void setRenderHeight(int height) {
		hSlider.valueProperty().set(height);
	}"
10879,hasValidClipboardContent,"	private boolean hasValidClipboardContent(TileMap tileMap) {
		Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
		Transferable content = clipboard.getContents(tileMap);
		DataFlavor[] flavors = content.getTransferDataFlavors();
		return flavors.length == 1 && flavors[0].equals(ClipboardSelection.SELECTION_DATA_FLAVOR);
	}"
10881,setEditOverlaysEnabled,"	public void setEditOverlaysEnabled(boolean enabled) {
		editOverlays.setDisable(!enabled);
	}"
10884,checkForUpdateAsync,"	private void checkForUpdateAsync() {
		new Thread(() -> {
			String applicationVersion;"
10885,getValue,"	public int getValue() {
		return valueProperty.get();
	}"
10886,valueProperty,"	public IntegerProperty valueProperty() {
		return valueProperty;
	}"
10887,incrementAndGet,"	private int incrementAndGet(int inc) {
		int newValue = valueProperty.get() + inc;
		valueProperty.set(newValue);
		return newValue;
	}"
10888,setOnScrollEvent,"	public void setOnScrollEvent(EventHandler<? super ScrollEvent> value) {
		onScroll = value;
	}"
10889,onComparator,"	private void onComparator(NumberFilter<?> filter) {
		filter.setComparator(comparator.getSelectionModel().getSelectedItem());
		callUpdateEvent();
	}"
10892,getEntitiesData,"		public CompoundTag getEntitiesData() {
			return entitiesData;
		}"
10893,getPoiData,"		public CompoundTag getPoiData() {
			return poiData;
		}"
10894,getRegionData,"		public CompoundTag getRegionData() {
			return regionData;
		}"
10895,writeSingleChunk,"	private <T extends Chunk> void writeSingleChunk(MCAFile<T> mcaFile, T chunk, CompoundTag chunkData) throws IOException {
		if (chunkData != null) {
			chunk.setData(chunkData);
			chunk.setCompressionType(CompressionType.ZLIB);"
10896,readSingleChunkAsync,"	private <T extends Chunk> void readSingleChunkAsync(MCAFile<T> mcaFile, NBTTreeView treeView, BorderPane treeViewHolder, Map<Tag.Type, Label> addTagLabels, Consumer<CompoundTag> consumer) {
		new Thread(() -> {
			LOGGER.debug(""attempting to read single chunk from file: {}"", selectedChunk);"
10899,enableAddTagLabels,"	private void enableAddTagLabels(Tag.Type[] types, Map<Tag.Type, Label> addTagLabels) {
		for (Map.Entry<Tag.Type, Label> label : addTagLabels.entrySet()) {
			label.getValue().setDisable(true);
		}"
10901,getSelectedChunk,"	private Point2i getSelectedChunk(TileMap tileMap) {
		Selection selection = tileMap.getSelection();
		if (selection.size() != 1) {
			throw new RuntimeException(""only one chunk can be selected, but found selection of "" + selection.size() + "" regions"");
		}
		Point2i location = null;
		for (Long2ObjectMap.Entry<ChunkSet> entry : selection) {
			if (entry.getValue() == null) {"
10902,newThread,"	public Thread newThread(Runnable r) {
		return new Thread(r, name + ""-thread-"" + count++);
	}"
10903,clone,"	protected <V extends MCAFile<T>> V clone(Function<File, V> mcaFileConstructor) {
		V clone = mcaFileConstructor.apply(file);
		for (int i = 0; i < chunks.length; i++) {
			if (chunks[i] != null) {
				clone.chunks[i] = chunks[i].clone(clone.chunkConstructor);
			}"
10904,isEmpty,"	public boolean isEmpty() {
		for (T chunk : chunks) {
			if (chunk != null) {
				return false;"
10905,deleteChunk,"	public void deleteChunk(int index) {
		chunks[index] = null;
		timestamps[index] = 0;
		offsets[index] = 0;
		sectors[index] = 0;
	}"
10906,setChunk,"	public void setChunk(int index, T chunk) {
		chunks[index] = chunk;
	}"
10907,setChunkAt,"	public void setChunkAt(Point2i location, T chunk) {
		chunks[getChunkIndex(location)] = chunk;
	}"
10908,hasChunkIndex,"	public boolean hasChunkIndex(Point2i location) {
		return offsets[getChunkIndex(location)] != 0;
	}"
10909,getChunk,"	public T getChunk(int index) {
		return chunks[index];
	}"
10910,getChunkAt,"	public T getChunkAt(Point2i location) {
		return chunks[getChunkIndex(location)];
	}"
10911,getTimestamp,"	public int getTimestamp(int index) {
		return timestamps[index];
	}"
10912,setTimestamp,"	public void setTimestamp(int index, int timestamp) {
		timestamps[index] = timestamp;
	}"
10914,setFile,"	public void setFile(File file) {
		Point2i location = FileHelper.parseMCAFileName(file);
		if (this.location.equals(location)) {
			this.location = location;"
10916,getChunkIndex,"	private int getChunkIndex(Point2i chunkCoordinate) {
		return (chunkCoordinate.getX() & 0x1F) + (chunkCoordinate.getZ() & 0x1F) * 32;
	}"
10918,mergeChunksInto,"	public abstract void mergeChunksInto(MCAFile<T> destination, Point3i offset, boolean overwrite, ChunkSet sourceChunks, ChunkSet targetChunks, List<Range> ranges);
"
10919,deleteChunks,"	public void deleteChunks(ChunkSet selection) {
		for (int chunk : selection) {
			timestamps[chunk] = 0;"
10920,saveSingleChunk,"	public void saveSingleChunk(Point2i location, T chunk) throws IOException {
		if (file.exists() && file.length() > 0) {
			load();
		} else if (chunk == null || chunk.isEmpty()) {
			LOGGER.debug(""nothing to save and no existing file found for chunk {}"", location);
			return;
		}"
10921,loadChunk,"	private void loadChunk(ByteArrayPointer ptr, int index) throws IOException {
		try {
			if (offsets[index] == 0) {"
10924,loadHeader,"	public void loadHeader(ByteArrayPointer ptr) throws IOException {
		offsets = new int[1024];
		sectors = new byte[1024];

		try {"
10925,loadHeader,"	public void loadHeader(RandomAccessFile raf) throws IOException {
		offsets = new int[1024];
		sectors = new byte[1024];

		raf.seek(0);
		for (int i = 0; i < offsets.length; i++) {
			int offset = (raf.read()) << 16;"
10926,load,"	public int[] load(ByteArrayPointer ptr) throws IOException {
		loadHeader(ptr);

		Point2i origin = location.regionToChunk();

		for (short i = 0; i < 1024; i++) {"
10927,load,"	public int[] load() throws IOException {
		try (RandomAccessFile raf = new RandomAccessFile(file, ""r"")) {
			loadHeader(raf);"
10929,deFragment,"	public void deFragment() throws IOException {
		deFragment(file);
	}"
10930,save,"	public boolean save(RandomAccessFile raf) throws IOException {
		int globalOffset = 2;
		int lastWritten = 0;

		raf.seek(0);
		for (int i = 0; i < 1024; i++) {
			raf.seek(globalOffset * 4096L);
			T chunk = chunks[i];"
10931,saveWithTempFile,"	public boolean saveWithTempFile(File dest) throws IOException {
		File tempFile = File.createTempFile(dest.getName(), null, null);
		boolean result;
		try (RandomAccessFile raf = new RandomAccessFile(tempFile, ""rw"")) {
			result = save(raf);
		}
		if (!result) {"
10932,saveWithTempFile,"	public boolean saveWithTempFile() throws IOException {
		return saveWithTempFile(file);
	}"
10933,save,"	public boolean save(File dest) throws IOException {
		try (RandomAccessFile raf = new RandomAccessFile(dest, ""rw"")) {
			return save(raf);"
10934,save,"	public boolean save() throws IOException {
		return save(file);
	}"
10935,clamp,"	public static int clamp(int a, int min, int max) {
		return Math.max(min, Math.min(max, a));
	}"
10936,clamp,"	public static double clamp(double a, double min, double max) {
		return Math.max(min, Math.min(max, a));
	}"
10937,equals,"	public boolean equals(Object other) {
		if (!(other instanceof MappableExceptionInfo)) {
			return false;
		}
		MappableExceptionInfo ex = (MappableExceptionInfo) other;"
10938,hashCode,"	public int hashCode() {
		if (hashCode == 0) {
			return hashCode = Objects.hash(clazz, line, file);
		}"
10939,getExceptionOneLine,"	protected String getExceptionOneLine(Throwable t) {
		if (t.getStackTrace().length == 0) {
			return t.getMessage();
		}
		StackTraceElement element = t.getStackTrace()[0];
		String trace = String.format(""%s: %s %s %s L%d"","
10940,getFormatText,"	public String getFormatText() {
		return ""\u00B1long"";
	}"
10941,isSmallerEqual,"	protected boolean isSmallerEqual(Long a, Long b) {
		return a <= b;
	}"
10942,isLargerEqual,"	protected boolean isLargerEqual(Long a, Long b) {
		return a >= b;
	}"
10943,isSmallerThan,"	protected boolean isSmallerThan(Long a, Long b) {
		return a < b;
	}"
10944,isLargerThan,"	protected boolean isLargerThan(Long a, Long b) {
		return a > b;
	}"
10945,isNotEqual,"	protected boolean isNotEqual(Long a, Long b) {
		return a.longValue() != b.longValue();
	}"
10946,isEqual,"	protected boolean isEqual(Long a, Long b) {
		return a.longValue() == b.longValue();
	}"
10947,setFilterValue,"	public void setFilterValue(String raw) {
		if (raw == null) {
			setFilterNumber(0L);"
10948,setFilterNumber,"	protected void setFilterNumber(Long value) {
		this.value = value;
	}"
10949,getFilterNumber,"	protected Long getFilterNumber() {
		return value;
	}"
10950,setValue,"	private void setValue() {
		if (x == null || z == null) {
			value = null;"
10951,setOnValidityCheck,"	public void setOnValidityCheck(Consumer<Boolean> action) {
		validityCheckAction = action;
	}"
10952,getValue,"	public Point2i getValue() {
		return value;
	}"
10953,onZInput,"	private void onZInput(String o, String n) {
		if (emptyIsZero && (n.isEmpty() || ""-"".equals(n) || ""+"".equals(n))) {
			z = 0;
			setValue();
			return;"
10954,onXInput,"	private void onXInput(String o, String n) {
		if (emptyIsZero && (n.isEmpty() || ""-"".equals(n) || ""+"".equals(n))) {
			x = 0;
			setValue();
			return;"
10955,requestFocus,"	public void requestFocus() {
		xValue.requestFocus();
	}"
10956,setZ,"	public void setZ(Integer z) {
		this.z = z;
		if (z != null) {
			zValue.setText(z.toString());
		}"
10957,setX,"	public void setX(Integer x) {
		this.x = x;
		if (x != null) {
			xValue.setText(x.toString());
		}"
10958,emptyIsZero,"	public boolean emptyIsZero() {
		return emptyIsZero;
	}"
10959,read,"	public Locale read(JsonReader in) throws IOException {
		if (in.peek() == JsonToken.NULL) {
			return null;
		}
		String[] split = in.nextString().split(""_"");"
10960,write,"	public void write(JsonWriter out, Locale value) throws IOException {
		out.value(value == null ? null : value.toString());
	}"
10961,force,"	public void force(ChunkData data) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0));
		chunkFilter.setLightPopulated(data.region().getData(), getNewValue());
	}"
10962,change,"	public void change(ChunkData data) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0));
		ByteTag tag = chunkFilter.getLightPopulated(data.region().getData());
		if (tag != null) {
			chunkFilter.setLightPopulated(data.region().getData(), getNewValue());"
10963,parseNewValue,"	public boolean parseNewValue(String s) {
		if (""1"".equals(s)) {
			setNewValue((byte) 1);
			return true;"
10964,getOldValue,"	public Byte getOldValue(ChunkData data) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0));
		ByteTag lightPopulated = chunkFilter.getLightPopulated(data.region().getData());
		return lightPopulated == null ? null : lightPopulated.asByte();
	}"
10965,setIsLightOn,"	static void setIsLightOn(CompoundTag root, byte isLightOn, int dataVersion) {
		if (dataVersion > 2843) {
			if (root != null) {"
10966,getIsLightOn,"	static ByteTag getIsLightOn(CompoundTag data, int dataVersion) {
		if (dataVersion > 2843) {
			return Helper.tagFromCompound(data, ""isLightOn"");"
10967,getZPos,"	static IntTag getZPos(CompoundTag data, int dataVersion) {
		if (dataVersion > 2843) {
			return Helper.tagFromCompound(data, ""zPos"");"
10968,setHeightmaps,"	static void setHeightmaps(CompoundTag data, CompoundTag heightmaps, int dataVersion) {
		if (dataVersion > 2843) {
			data.put(""Heightmaps"", heightmaps);"
10969,getHeightmaps,"	static CompoundTag getHeightmaps(CompoundTag data, int dataVersion) {
		if (dataVersion > 2843) {
			return data.getCompoundTag(""Heightmaps"");"
10970,getYPos,"	static IntTag getYPos(CompoundTag data, int dataVersion) {
		if (dataVersion > 2843) {
			return Helper.tagFromCompound(data, ""yPos"");"
10971,getXPos,"	static IntTag getXPos(CompoundTag data, int dataVersion) {
		if (dataVersion > 2843) {
			return Helper.tagFromCompound(data, ""xPos"");"
10972,getStructureStartsFromStructures,"	static CompoundTag getStructureStartsFromStructures(CompoundTag structures, int dataVersion) {
		if (dataVersion < 2844) {
			return Helper.tagFromLevelFromRoot(structures, ""Starts"");"
10973,getStructures,"	static CompoundTag getStructures(CompoundTag root, int dataVersion) {
		if (dataVersion < 2844) {
			return Helper.tagFromLevelFromRoot(root, ""Structures"");"
10974,getStructureStarts,"	static CompoundTag getStructureStarts(CompoundTag root, int dataVersion) {
		if (dataVersion < 2844) {
			return Helper.tagFromCompound(Helper.tagFromLevelFromRoot(root, ""Structures"", new CompoundTag()), ""Starts"", new CompoundTag());"
10976,applyOffsetToChunkCoordinates,"	static void applyOffsetToChunkCoordinates(CompoundTag root, Point3i offset, int dataVersion) {
		if (dataVersion < 2844) {
			CompoundTag level = Helper.levelFromRoot(root);"
10977,getChunkCoordinates,"	static Point2i getChunkCoordinates(CompoundTag root, int dataVersion) {
		if (dataVersion < 2844) {
			return Helper.point2iFromCompound(Helper.tagFromCompound(root, ""Level""), ""xPos"", ""zPos"");"
10978,putTileEntities,"	static void putTileEntities(CompoundTag root, ListTag tileEntities, int dataVersion) {
		if (dataVersion < 2844) {
			root.getCompound(""Level"").put(""TileEntities"", tileEntities);"
10979,getLiquidTicks,"	static ListTag getLiquidTicks(CompoundTag root, int dataVersion) {
		if (dataVersion < 2844) {
			return Helper.tagFromLevelFromRoot(root, ""LiquidTicks"");"
10980,getTileTicks,"	static ListTag getTileTicks(CompoundTag root, int dataVersion) {
		if (dataVersion < 2844) {
			return Helper.tagFromLevelFromRoot(root, ""TileTicks"");"
10981,getTileEntities,"	static ListTag getTileEntities(CompoundTag root, int dataVersion) {
		if (dataVersion < 2844) {
			return Helper.tagFromLevelFromRoot(root, ""TileEntities"");"
10982,setStatus,"	static void setStatus(CompoundTag root, String status, int dataVersion) {
		if (dataVersion > 2843) {
			if (root != null) {"
10983,getStatus,"	static StringTag getStatus(CompoundTag root, int dataVersion) {
		if (dataVersion > 2843) {
			return Helper.tagFromCompound(root, ""Status"");"
10984,setLastUpdate,"	static void setLastUpdate(CompoundTag root, long lastUpdate, int dataVersion) {
		if (dataVersion > 2843) {
			if (root != null) {"
10986,setInhabitedTime,"	static void setInhabitedTime(CompoundTag root, long inhabitedTime, int dataVersion) {
		if (dataVersion > 2843) {
			if (root != null) {"
10988,getBlockStates,"	static long[] getBlockStates(CompoundTag section, int dataVersion) {
		if (dataVersion >= 2834) {
			return Helper.longArrayFromCompound(Helper.tagFromCompound(section, ""block_states""), ""data"");"
10989,getPalette,"	static ListTag getPalette(CompoundTag section, int dataVersion) {
		if (dataVersion >= 2834) {
			return Helper.tagFromCompound(Helper.tagFromCompound(section, ""block_states""), ""palette"");"
10992,getEntities,"	static ListTag getEntities(CompoundTag root, int dataVersion) {
		if (dataVersion > 2843) {
			return Helper.tagFromCompound(root, ""Entities"");"
10993,getProtoEntities,"	static ListTag getProtoEntities(CompoundTag root, int dataVersion) {
		if (dataVersion > 2843) {
			return Helper.tagFromCompound(root, ""entities"");"
10994,setMax,"	public boolean setMax(String raw) {
		setRawMax(raw);
		maxDuration = null;
		if (raw == null || raw.isEmpty()) {
			return setMaxInt(null);
		}"
10995,setMin,"	public boolean setMin(String raw) {
		setRawMin(raw);
		minDuration = null;
		if (raw == null || raw.isEmpty()) {
			return setMinInt(null);
		}"
10996,maxString,"	public String maxString() {
		return maxDuration == null ? super.maxString() : maxDuration;
	}"
10997,minString,"	public String minString() {
		return minDuration == null ? super.minString() : minDuration;
	}"
10998,name,"	public String name() {
		return ""LastUpdate"";
	}"
10999,parseValue,"	public int parseValue(ChunkData chunkData) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(chunkData.region().getData().getIntOrDefault(""DataVersion"", 0));
		LongTag tag = chunkFilter.getLastUpdate(chunkData.region().getData());
		return tag == null ? 0 : tag.asInt();
	}"
11000,force,"	public void force(ChunkData data) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0));
		chunkFilter.setLastUpdate(data.region().getData(), getNewValue());
	}"
11001,change,"	public void change(ChunkData data) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0));
		LongTag tag = chunkFilter.getLastUpdate(data.region().getData());
		if (tag != null) {
			chunkFilter.setLastUpdate(data.region().getData(), getNewValue());"
11002,parseNewValue,"	public boolean parseNewValue(String s) {
		try {
			setNewValue(Long.parseLong(s));"
11003,getOldValue,"	public Long getOldValue(ChunkData data) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0));
		LongTag lastUpdate = chunkFilter.getLastUpdate(data.region().getData());
		return lastUpdate == null ? null : lastUpdate.asLong();
	}"
11004,toString,"		public String toString() {
			return jobID + ""#"" + job.toString();
		}"
11005,compareTo,"		public int compareTo(WrapperJob o) {
			int a = job.getPriority();
			int b = o.job.getPriority();

			if (a == b) {
				return Long.compare(jobID, o.jobID);"
11006,cancel,"		public void cancel() {
			try {
				job.cancel();"
11008,getActiveJobs,"	public static int getActiveJobs() {
		return allTasks.get();
	}"
11009,flushExecutor,"	private static void flushExecutor() {
		while (allTasks.get() > 0) {
			Thread.onSpinWait();"
11010,cancelAllJobsAndFlush,"	public static void cancelAllJobsAndFlush() {
		Timer t = new Timer();
		clearQueues();
		flushExecutor();
		clearQueues();
		flushExecutor();
		LOGGER.debug(""took {} to cancel and flush all executors"", t);
	}"
11011,cancelAllJobsAndFlushAsync,"	public static void cancelAllJobsAndFlushAsync(Runnable callback) {
		Thread thread = new Thread(() -> {
			cancelAllJobsAndFlush();
			callback.run();"
11012,cancelExecutorQueue,"	private static int cancelExecutorQueue(ThreadPoolExecutor executor) {
		DataProperty<Integer> cancelled = new DataProperty<>(0);
		if (executor != null) {
			synchronized (executor.getQueue()) {
				executor.getQueue().removeIf(j -> {"
11013,cancelParserQueue,"	public static void cancelParserQueue() {
		if (parseExecutor != null) {
			synchronized (parseExecutor.getQueue()) {"
11014,clearQueues,"	public static void clearQueues() {
		int cancelledProcessJobs = cancelExecutorQueue(processExecutor);
		int cancelledSaveJobs = cancelExecutorQueue(saveExecutor);
		int cancelledParseJobs = cancelExecutorQueue(parseExecutor);

		LOGGER.debug(""cancelled {} jobs in process queue"", cancelledProcessJobs);
		LOGGER.debug(""cancelled {} jobs in save queue"", cancelledSaveJobs);
		LOGGER.debug(""cancelled {} jobs in parser queue"", cancelledParseJobs);"
11015,validateJobs,"	public static void validateJobs(Predicate<ProcessDataJob> p) {
		processExecutor.getQueue().removeIf(r -> {
			if (p.test((ProcessDataJob) ((WrapperJob) r).job)) {
				((WrapperJob) r).cancel();"
11016,executeParseData,"	public static void executeParseData(ParseDataJob job) {
		parseExecutor.execute(new WrapperJob(job));
	}"
11017,executeSaveData,"	public static void executeSaveData(SaveDataJob<?> job) {
		if (runningTasks.get() <= ConfigProvider.GLOBAL.getProcessThreads() + 1) {
			saveExecutor.execute(new WrapperJob(job));"
11018,addJob,"	public static void addJob(ProcessDataJob job) {
		LOGGER.debug(""adding job {} for {} to executor queue"", job.getClass().getSimpleName(), job.getRegionDirectories().getLocation());
		processExecutor.execute(new WrapperJob(job));
	}"
11020,setTrimSaveData,"	public static void setTrimSaveData(boolean trimSaveData) {
		LOGGER.debug(""{} trimming save data"", (trimSaveData ? ""enabled"" : ""disabled""));
		JobHandler.trimSaveData = trimSaveData;
	}"
11021,toString,"	public String toString() {
		return getClass().getSimpleName() + "": "" + rd.getLocation();
	}"
11022,getBasePriority,"	public int getBasePriority() {
		return priority;
	}"
11023,getPriority,"	public int getPriority() {
		return priority;
	}"
11027,getRegionDirectories,"	public RegionDirectories getRegionDirectories() {
		return rd;
	}"
11028,getFormatText,"	public String getFormatText() {
		return ""\u00B1int"";
	}"
11029,isSmallerEqual,"	protected boolean isSmallerEqual(Integer a, Integer b) {
		return a <= b;
	}"
11030,isLargerEqual,"	protected boolean isLargerEqual(Integer a, Integer b) {
		return a >= b;
	}"
11031,isSmallerThan,"	protected boolean isSmallerThan(Integer a, Integer b) {
		return a < b;
	}"
11032,isLargerThan,"	protected boolean isLargerThan(Integer a, Integer b) {
		return a > b;
	}"
11033,isNotEqual,"	protected boolean isNotEqual(Integer a, Integer b) {
		return a.intValue() != b.intValue();
	}"
11034,isEqual,"	protected boolean isEqual(Integer a, Integer b) {
		return a.intValue() == b.intValue();
	}"
11035,setFilterValue,"	public void setFilterValue(String raw) {
		if (raw == null) {
			value = 0;"
11036,setFilterNumber,"	protected void setFilterNumber(Integer value) {
		this.value = value;
	}"
11037,getFilterNumber,"	protected Integer getFilterNumber() {
		return value;
	}"
11042,name,"	public String name() {
		return ""InhabitedTime"";
	}"
11043,parseValue,"	public int parseValue(ChunkData chunkData) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(chunkData.region().getData().getIntOrDefault(""DataVersion"", 0));
		LongTag tag = chunkFilter.getInhabitedTime(chunkData.region().getData());
		return tag == null ? 0 : tag.asInt();
	}"
11044,force,"	public void force(ChunkData data) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0));
		chunkFilter.setInhabitedTime(data.region().getData(), getNewValue());
	}"
11045,change,"	public void change(ChunkData data) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0));
		LongTag tag = chunkFilter.getInhabitedTime(data.region().getData());
		if (tag != null) {
			chunkFilter.setInhabitedTime(data.region().getData(), getNewValue());"
11047,getOldValue,"	public Long getOldValue(ChunkData data) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0));
		LongTag inhabitedTime = chunkFilter.getInhabitedTime(data.region().getData());
		return inhabitedTime == null ? null : inhabitedTime.asLong();
	}"
11048,getRanges,"		public List<Range> getRanges() {
			return ranges;
		}"
11049,selectionOnly,"		public boolean selectionOnly() {
			return selectionOnly;
		}"
11050,overwrite,"		public boolean overwrite() {
			return overwrite;
		}"
11051,getOffset,"		public Point3i getOffset() {
			return new Point3i(xzOffset.getX(), yOffset, xzOffset.getZ());
		}"
11052,discardCachedImage,"	public void discardCachedImage(Point2i region) {
		discardImage(region);
		RegionImageGenerator.uncacheRegionMCAFile(region);
		for (int i = 1; i <= Config.MAX_ZOOM_LEVEL; i *= 2) {
			File png = FileHelper.createPNGFilePath(ConfigProvider.WORLD.getCacheDir(), i, region);"
11053,discardImage,"	public void discardImage(Point2i region) {
		synchronized (poolLock) {
			for (Int2ObjectMap.Entry<Long2ObjectLinkedOpenHashMap<Image>> scale : pool.int2ObjectEntrySet()) {
				scale.getValue().remove(region.asLong());
			}
		}"
11055,clear,"	public void clear(ProgressTask task) {
		synchronized (poolLock) {
			for (Int2ObjectMap.Entry<Long2ObjectLinkedOpenHashMap<Image>> scale : pool.int2ObjectEntrySet()) {
				scale.getValue().clear();
			}"
11056,trim,"	private void trim(int scale) {
		Long2ObjectLinkedOpenHashMap<Image> scaleEntry = pool.get(scale);
		if (scaleEntry.size() <= tileMap.getVisibleTiles() * poolSize) {
			return;
		}

		ObjectOpenHashSet<Point2i> l = tileMap.getVisibleRegions(scale * 2);"
11057,push,"	private void push(int scale, Point2i location, Image img) {
		synchronized (poolLock) {
			pool.get(scale).put(location.asLong(), img);"
11058,readLastModifiedDate,"	private long readLastModifiedDate(Point2i region) {
		try {
			Path path = FileHelper.createMCAFilePath(region).toPath();
			if (!path.toFile().exists()) {"
11059,isImageOutdated,"	public boolean isImageOutdated(Point2i region) {
		try {
			long time = cache.getFileTime(region);"
11062,getEmptyTileImage,"	public static Image getEmptyTileImage() {
		return empty;
	}"
11063,reloadEmpty,"	public static void reloadEmpty() {
		WritableImage wImage = new WritableImage(Tile.SIZE, Tile.SIZE);
		PixelWriter pWriter = wImage.getPixelWriter();
		for (int x = 0; x < Tile.SIZE; x++) {
			for (int y = 0; y < Tile.SIZE; y++) {
				pWriter.setColor(x, y, Tile.EMPTY_COLOR.makeJavaFXColor());"
11064,getHue,"	public static float getHue(float r, float g, float b) {
		float min = Math.min(Math.min(r, g), b);
		float max = Math.max(Math.max(r, g), b);

		if (min == max) {
			return 0f;
		}

		float hue;
		if (r == max) {"
11065,getHue,"	public static float getHue(int color) {
		return getHue(color >> 16 & 0xFF, color >> 8 & 0xFF, color & 0xFF);
	}"
11066,renderGradient,"	public static Image renderGradient(int width, float min, float max, float low, float high, boolean inverted) {
		WritableImage image = new WritableImage(width, 50);
		PixelWriter pixelWriter = image.getPixelWriter();
		for (int i = 0; i < width; i++) {
			float hue = (max - min) * ((float) i / width) + min;
			float saturation = 1, brightness = 1;"
11067,scaleDownFXImage,"	public static Image scaleDownFXImage(Image before, int newSize) {
		WritableImage after = new WritableImage(newSize, newSize);
		PixelReader reader = before.getPixelReader();
		PixelWriter writer = after.getPixelWriter();

		int scaleFactor = (int) (before.getWidth() / after.getWidth());

		for (int y = 0; y < newSize; y++) {"
11069,renderBackground,"	private void renderBackground() {
		Image bg = ImageHelper.renderGradient(width, 0, (float) getMax(), (float) getLow(), (float) getHigh(), invertedProperty.get());
		BackgroundImage bgi = new BackgroundImage(bg, BackgroundRepeat.NO_REPEAT, BackgroundRepeat.REPEAT, BackgroundPosition.DEFAULT, BackgroundSize.DEFAULT);
		setBackground(new Background(bgi));
	}"
11070,getMaxHue,"	public float getMaxHue() {
		if (invertedProperty.get()) {
			return (float) getMax() - (float) getHigh();
		}"
11071,getMinHue,"	public float getMinHue() {
		if (invertedProperty.get()) {
			return (float) getMax() - (float) getLow();
		}"
11072,isInverted,"	public boolean isInverted() {
		return invertedProperty.get();
	}"
11073,setInverted,"	public void setInverted(boolean inverted) {
		invertedProperty.set(inverted);
	}"
11074,findHighestSection,"	public static int findHighestSection(ListTag sections, int lowest) {
		int max = lowest;
		int current;
		for (CompoundTag section : sections.iterateType(CompoundTag.class)) {
			if ((current = section.getInt(""Y"")) > max) {
				max = current;"
11075,applyOffsetToListOfShortTagLists,"	public static void applyOffsetToListOfShortTagLists(CompoundTag root, String key, Point3i offset) {
		if (offset.getY() == 0 || !root.containsKey(key)) {
			return;
		}
"
11076,fixEntityUUID,"	public static void fixEntityUUID(CompoundTag entity) {
		if (entity.containsKey(""UUIDMost"")) {
			entity.putLong(""UUIDMost"", random.nextLong());
		}
		if (entity.containsKey(""UUIDLeast"")) {"
11077,applyOffsetToBB,"	public static void applyOffsetToBB(int[] bb, Point3i offset) {
		if (bb == null || bb.length != 6) {
			return;
		}
		bb[0] += offset.getX();
		bb[1] += offset.getY();
		bb[2] += offset.getZ();
		bb[3] += offset.getX();
		bb[4] += offset.getY();"
11078,applyOffsetToIntArrayPos,"	public static void applyOffsetToIntArrayPos(IntArrayTag pos, Point3i offset) {
		if (pos != null && pos.getValue().length == 3) {
			pos.getValue()[0] += offset.getX();"
11079,applyOffsetToIntArrayPos,"	public static void applyOffsetToIntArrayPos(int[] pos, Point3i offset) {
		if (pos != null && pos.length == 3) {
			pos[0] += offset.getX();"
11080,applyOffsetToIntListPos,"	public static void applyOffsetToIntListPos(ListTag pos, Point3i offset) {
		if (pos != null && pos.size() == 3) {
			pos.set(0, IntTag.valueOf(pos.getInt(0) + offset.getX()));"
11081,applyIntIfPresent,"	public static void applyIntIfPresent(CompoundTag root, String key, int offset) {
		Integer value;
		if ((value = intFromCompound(root, key)) != null) {
			root.putInt(key, value + offset);"
11082,applyIntOffsetIfRootPresent,"	public static void applyIntOffsetIfRootPresent(CompoundTag root, String xKey, String yKey, String zKey, Point3i offset) {
		if (root != null) {
			applyIntIfPresent(root, xKey, offset.getX());"
11083,stringFromCompound,"	public static String stringFromCompound(Tag compound, String key, String def) {
		StringTag tag = tagFromCompound(compound, key, null);
		if (tag != null) {
			return tag.getValue();
		}"
11084,stringFromCompound,"	public static String stringFromCompound(Tag compound, String key) {
		StringTag tag = tagFromCompound(compound, key, null);
		if (tag != null) {
			return tag.getValue();
		}"
11085,longArrayFromCompound,"	public static long[] longArrayFromCompound(Tag compound, String key) {
		LongArrayTag tag = tagFromCompound(compound, key, null);
		if (tag != null) {
			return tag.getValue();
		}"
11086,intArrayFromCompound,"	public static int[] intArrayFromCompound(Tag compound, String key) {
		IntArrayTag tag = tagFromCompound(compound, key, null);
		if (tag != null) {
			return tag.getValue();
		}"
11087,byteArrayFromCompound,"	public static byte[] byteArrayFromCompound(Tag compound, String key) {
		ByteArrayTag tag = tagFromCompound(compound, key, null);
		if (tag != null) {
			return tag.getValue();
		}"
11088,floatFromCompound,"	public static Float floatFromCompound(Tag compound, String key) {
		FloatTag tag = tagFromCompound(compound, key, null);
		if (tag != null) {
			return tag.asFloat();
		}"
11089,doubleFromCompound,"	public static Double doubleFromCompound(Tag compound, String key) {
		DoubleTag tag = tagFromCompound(compound, key, null);
		if (tag != null) {
			return tag.asDouble();
		}"
11090,longFromCompound,"	public static Long longFromCompound(Tag compound, String key) {
		LongTag tag = tagFromCompound(compound, key, null);
		if (tag != null) {
			return tag.asLong();
		}"
11091,intFromCompound,"	public static Integer intFromCompound(Tag compound, String key) {
		IntTag tag = tagFromCompound(compound, key, null);
		if (tag != null) {
			return tag.asInt();
		}"
11092,shortFromCompound,"	public static Short shortFromCompound(Tag compound, String key) {
		ShortTag tag = tagFromCompound(compound, key, null);
		if (tag != null) {
			return tag.asShort();
		}"
11093,byteFromCompound,"	public static Byte byteFromCompound(Tag compound, String key) {
		ByteTag tag = tagFromCompound(compound, key, null);
		if (tag != null) {
			return tag.asByte();
		}"
11094,numberFromCompound,"	public static Number numberFromCompound(Tag compound, String key, Number def) {
		NumberTag t = tagFromCompound(compound, key, null);
		if (t == null) {
			return def;
		}"
11095,point2iFromCompound,"	public static Point2i point2iFromCompound(Tag compound, String xKey, String zKey) {
		IntTag x = tagFromCompound(compound, xKey, null);
		IntTag z = tagFromCompound(compound, zKey, null);
		if (x == null || z == null) {
			return null;
		}"
11096,getSectionsFromLevelFromRoot,"	public static <T extends Tag> T getSectionsFromLevelFromRoot(Tag root, String name) {
		return getSectionsFromCompound(levelFromRoot(root), name);
	}"
11097,getSectionsFromCompound,"	public static <T extends Tag> T getSectionsFromCompound(Tag compound, String name) {
		Tag section = tagFromCompound(compound, name, null);
		if (section == null || section.getType() == Tag.Type.LONG_ARRAY) {
			return null;
		}"
11098,tagFromCompound,"	public static <T extends Tag> T tagFromCompound(Tag compound, String key, T def) {
		CompoundTag c;
		if (!(compound instanceof CompoundTag) || !(c = (CompoundTag) compound).containsKey(key)) {
			return def;
		}
		Tag tag = c.get(key);"
11099,tagFromCompound,"	public static <T extends Tag> T tagFromCompound(Tag compound, String key) {
		return tagFromCompound(compound, key, null);
	}"
11100,tagFromLevelFromRoot,"	public static <T extends Tag> T tagFromLevelFromRoot(Tag root, String key, T def) {
		CompoundTag level = levelFromRoot(root);
		return tagFromCompound(level, key, def);
	}"
11101,tagFromLevelFromRoot,"	public static <T extends Tag> T tagFromLevelFromRoot(Tag root, String key) {
		return tagFromLevelFromRoot(root, key, null);
	}"
11102,levelFromRoot,"	public static CompoundTag levelFromRoot(Tag root) {
		return tagFromCompound(root, ""Level"", null);
	}"
11103,setMajorTickUnit,"	public void setMajorTickUnit(int unit) {
		slider.setMajorTickUnit(unit);
	}"
11104,disable,"	public void disable(boolean disable) {
		slider.setDisable(disable);
		heightMinLabel.setDisable(disable);
		heightMaxLabel.setDisable(disable);
		heightField.setDisable(disable);
	}"
11107,fromString,"				public Double fromString(String string) {
					return null;
				}"
11108,toString,"				public String toString(Double object) {
					return null;
				}"
11109,translateName,"	public String translateName(Field f) {
		if ((f.getModifiers() & Modifier.TRANSIENT) > 0) {
			return ""t_"" + f.getName();
		}"
11110,test,"	public boolean test(String function, Object... args) throws ScriptException, NoSuchMethodException {
		Object result = ((Invocable) engine).invokeFunction(function, args);
		return result instanceof Boolean && (boolean) result;
	}"
11111,run,"	public void run(String function, Object... args) throws ScriptException, NoSuchMethodException {
		((Invocable) engine).invokeFunction(function, args);
	}"
11112,eval,"	public void eval(String script) throws ScriptException {
		engine.eval(script);
	}"
11113,init,"	public void init() {
		engine = new ScriptEngineManager().getEngineByName(""Groovy"");
	}"
11114,close,"	public void close() {
		highlightSubscription.unsubscribe();
		if (evalSubscription != null) {
			evalSubscription.unsubscribe();
		}"
11115,setText,"	public void setText(String text) {
		replaceText(0, 0, text);
	}"
11117,call,"			protected StyleSpans<Collection<String>> call() {
				return computeHighlighting(text);
			}"
11118,computeHighlightingAsync,"	private Task<StyleSpans<Collection<String>>> computeHighlightingAsync() {
		String text = getText();
		Task<StyleSpans<Collection<String>>> task = new Task<>() {
			@Override
			protected StyleSpans<Collection<String>> call() {
				return computeHighlighting(text);"
11119,readInfo,"	private String readInfo(ScriptException ex, String script) {
		Matcher m = infoPattern.matcher(ex.getMessage());
		if (m.find()) {
			String msg = m.group(1);
			int line = Integer.parseInt(m.group(2));"
11120,call,"			protected String call() {
				try {
					engine.eval(text);"
11121,evalAsync,"	private Task<String> evalAsync() {
		String text = getText();
		Task<String> task = new Task<>() {
			@Override
			protected String call() {
				try {"
11122,errorProperty,"	public ObservableValue<String> errorProperty() {
		return error;
	}"
11124,change,"	public void change(ChunkData root) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(root.region().getData().getIntOrDefault(""DataVersion"", 0));
		chunkFilter.forceBlending(root.region().getData());
	}"
11126,getOldValue,"	public Boolean getOldValue(ChunkData root) {
		return null;
	}"
11128,change,"	public void change(ChunkData data) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0));
		StringTag status = chunkFilter.getStatus(data.region().getData());

		if (empty.equals(status.getValue())) {"
11132,change,"	public void change(ChunkData data) {
		HeightmapCalculator heightmapCalculator = VersionController.getHeightmapCalculator(data.region().getData().getIntOrDefault(""DataVersion"", 0));
		heightmapCalculator.worldSurface(data.region().getData());
		heightmapCalculator.oceanFloor(data.region().getData());
		heightmapCalculator.motionBlocking(data.region().getData());
		heightmapCalculator.motionBlockingNoLeaves(data.region().getData());
	}"
11135,getByName,"	public static FilterType getByName(String name) {

		for (FilterType t : FilterType.values()) {
"
11137,create,"	public Filter<?> create() {

		return creator.get();"
11138,getFormat,"	public Format getFormat() {

		return format;"
11139,queuables,"	public static FilterType[] queuables() {

		return queuables;"
11140,unwrap,"	public static GroupFilter unwrap(GroupFilter filter) {
		GroupFilter current = filter;
		while (current.getFilterValue().size() == 1 && current.getFilterValue().get(0).getType().getFormat() == FilterType.Format.GROUP) {
			current = (GroupFilter) current.getFilterValue().get(0);
		}
"
11141,isValidCharacter,"	private boolean isValidCharacter(char c) {
		return c >= 'a' && c <= 'z'
				|| c >= 'A' && c <= 'Z'"
11142,parseOperator,"	private Operator parseOperator() throws ParseException {
		String op = ptr.parseSimpleString();
		Operator operator = Operator.getByName(op);
		if (operator == null) {
			throw ptr.parseException(""invalid operator "" + op);
		}"
11143,parseComparator,"	private Comparator parseComparator() throws ParseException {
		ptr.skipWhitespace();
		Comparator comparator = Comparator.fromQuery(ptr.parseSimpleString());
		if (comparator == null) {
			throw ptr.parseException(""invalid comparator"");
		}"
11144,parseFilterValue,"	private Filter<?> parseFilterValue(Filter<?> filter) throws ParseException {
		ptr.skipWhitespace();
		if (ptr.currentChar() == '""') {
			filter.setFilterValue(ptr.parseQuotedString());
		} else {
			filter.setFilterValue(ptr.parseSimpleString(this::isValidCharacter));"
11147,escape,"	protected static String escape(String value) {
		if (value == null) {
			return ""\""\"""";
		}"
11149,matches,"	public abstract boolean matches(ChunkData data);
"
11150,setComparator,"	public abstract void setComparator(Comparator comparator);
"
11152,getComparators,"	public abstract Comparator[] getComparators();
"
11153,setFilterValue,"	public abstract void setFilterValue(String raw);
"
11155,selectionOnly,"	public boolean selectionOnly() {
		return false;
	}"
11157,getParent,"	public Filter<?> getParent() {
		return parent;
	}"
11158,setParent,"	public void setParent(Filter<?> parent) {
		this.parent = parent;
	}"
11159,getType,"	public FilterType getType() {
		return type;
	}"
11160,setOperator,"	public void setOperator(Operator operator) {
		this.operator = operator;
	}"
11161,getOperator,"	public Operator getOperator() {
		return operator;
	}"
11162,setRawValue,"	public void setRawValue(String rawValue) {
		this.rawValue = rawValue;
	}"
11163,getRawValue,"	public String getRawValue() {
		return rawValue;
	}"
11164,setValid,"	protected void setValid(boolean valid) {
		this.valid = valid;
	}"
11165,isValid,"	public boolean isValid() {
		return valid;
	}"
11166,getFile,"	public File getFile() {
		String text = textField.getText();
		if (text == null || text.isEmpty()) {
			return null;
		}"
11167,setFile,"	public void setFile(File initFile) {
		if (initFile != null) {
			textField.setText(initFile + """");"
11168,onDragOver,"	private void onDragOver(DragEvent event) {
		if (event.getGestureSource() != this && event.getDragboard().hasFiles()) {
			Dragboard db = event.getDragboard();"
11169,onDragDropped,"	private void onDragDropped(DragEvent event) {
		Dragboard db = event.getDragboard();
		if (db.hasFiles()) {
			for (File file : db.getFiles()) {
				if (file.exists()) {"
11170,read,"	public File read(JsonReader in) throws IOException {
		return new File(in.nextString().replace(""{user.dir}"", userDir));
	}"
11171,write,"	public void write(JsonWriter out, File value) throws IOException {
		if (value == null) {
			out.value((String) null);
			return;
		}
		String absolutePath = value.getAbsolutePath();"
11172,uiValues,"	public static FieldType[] uiValues() {
		return uiValues;
	}"
11174,requiresClearCache,"	public boolean requiresClearCache() {
		return clearCache;
	}"
11175,getByName,"	public static FieldType getByName(String name) {
		for (FieldType f : FieldType.values()) {
			if (f.name.equals(name)) {
				return f;"
11176,newInstance,"	public Field<?> newInstance() {
		return constructor.get();
	}"
11177,execute,"		public void execute() {
			Timer t = new Timer();
			try {
				getData().saveWithTempFiles();
			} catch (Exception ex) {
				LOGGER.warn(""failed to save changed fields for {}"", getRegionDirectories().getLocationAsFileName(), ex);"
11178,execute,"		public boolean execute() {
			if (selection != null) {
				Point2i location = getRegionDirectories().getLocation();
				if (!selection.isAnyChunkInRegionSelected(location)) {
					LOGGER.debug(""will not apply nbt changes to {}"", getRegionDirectories().getLocationAsFileName());
					progressChannel.incrementProgress(getRegionDirectories().getLocationAsFileName());
					return true;
				}
			}"
11180,force,"	public abstract void force(ChunkData root);
}"
11181,change,"	public abstract void change(ChunkData root);
"
11182,parseNewValue,"	public boolean parseNewValue(String s) {
		setNewValue(null);
		return false;
	}"
11183,valueToString,"	public String valueToString() {
		return newValue.toString();
	}"
11184,toString,"	public String toString() {
		return type.toString() + "" = "" + valueToString();
	}"
11185,getOldValue,"	public abstract T getOldValue(ChunkData root);
"
11186,getType,"	public FieldType getType() {
		return type;
	}"
11187,getNewValue,"	public T getNewValue() {
		return newValue;
	}"
11188,setNewValueRaw,"	public void setNewValueRaw(Object newValue) {
		if (newValue == null) {
			this.newValue = null;"
11189,setNewValue,"	public void setNewValue(T newValue) {
		this.newValue = newValue;
	}"
11190,needsChange,"	public boolean needsChange() {
		return newValue != null;
	}"
11191,update,"	public void update() {
		timestamp = System.currentTimeMillis();
		count++;
	}"
11192,log,"	public void log(Logger logger) {
		if (count > 0) {
			logger.warn("" ... {} more of {}"", count, getExceptionOneLine(throwable));"
11193,close,"	private void close() {
		running = false;
		for (Map.Entry<MappableExceptionInfo, ExceptionInfo> e : lastExceptions.entrySet()) {
			e.getValue().log(LOGGER);
		}"
11194,repeatedFlush,"	private void repeatedFlush() {
		while (running) {
			try {"
11195,createFilter,"	public static ExceptionBurstFilter createFilter(@PluginAttribute(""duration"") Integer duration) {
		int actualDuration = duration == null ? defaultDuration : duration;
		return new ExceptionBurstFilter(actualDuration);
	}"
11196,filter,"	public Result filter(Logger logger, Level level, Marker marker, Object msg, Throwable t) {
		if (t == null) {
			return Result.NEUTRAL;
		}
		MappableExceptionInfo i = new MappableExceptionInfo(t);
		if (lastExceptions.containsKey(i)) {
			lastExceptions.get(i).update();"
11197,filter,"	public Result filter(Logger logger, Level level, Marker marker, Message msg, Throwable t) {
		if (t == null) {
			return Result.NEUTRAL;
		}
		MappableExceptionInfo i = new MappableExceptionInfo(t);
		if (lastExceptions.containsKey(i)) {
			lastExceptions.get(i).update();"
11198,showLabelTextForXSeconds,"	private void showLabelTextForXSeconds(Label label, String text, int seconds) {
		if (showingCopiedToClipboardText) {
			return;
		}
		showingCopiedToClipboardText = true;
		label.setText(text);
		Thread t = new Thread(() -> {"
11199,copyTextToClipboard,"	private void copyTextToClipboard(String text) {
		StringSelection stringSelection = new StringSelection(text);
		Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
		clipboard.setContents(stringSelection, null);
	}"
11200,init,"	private void init(Stage primaryStage) {
		initStyle(StageStyle.UTILITY);
		getDialogPane().getStyleClass().add(""error-dialog-pane"");
		titleProperty().bind(Translation.DIALOG_ERROR_TITLE.getProperty());
		headerTextProperty().bind(Translation.DIALOG_ERROR_HEADER.getProperty());
		getDialogPane().getStylesheets().addAll(primaryStage.getScene().getStylesheets());
	}"
11202,deleteEntities,"	void deleteEntities(ChunkData data, List<Range> ranges);
"
11203,name,"	public String name() {
		return ""EntityAmount"";
	}"
11204,parseValue,"	public int parseValue(ChunkData chunkData) {
		if (chunkData.region() == null || chunkData.region().getData() == null) {
			return 0;
		}
		EntityFilter entityFilter = VersionController.getEntityFilter(chunkData.region().getData().getIntOrDefault(""DataVersion"", 0));
		ListTag entities = entityFilter.getEntities(chunkData);"
11205,clone,"	public EntitiesMCAFile clone() {
		return clone(EntitiesMCAFile::new);
	}"
11206,mergeChunksInto,"	public void mergeChunksInto(MCAFile<EntitiesChunk> destination, Point3i offset, boolean overwrite, ChunkSet sourceChunks, ChunkSet targetChunks, List<Range> ranges) {
		mergeChunksInto(destination, offset, overwrite, sourceChunks, targetChunks, ranges, EntitiesMCAFile::newEmptyChunk);
	}"
11207,newEmptyChunk,"	static EntitiesChunk newEmptyChunk(Point2i absoluteLocation, int dataVersion) {
		ChunkMerger chunkMerger = VersionController.getEntityMerger(dataVersion);
		CompoundTag root = chunkMerger.newEmptyChunk(absoluteLocation, dataVersion);
		EntitiesChunk chunk = new EntitiesChunk(absoluteLocation);
		chunk.data = root;
		chunk.compressionType = CompressionType.ZLIB;
		return chunk;
	}"
11208,clone,"	public EntitiesChunk clone() {
		return clone(EntitiesChunk::new);
	}"
11209,getMCCFile,"	public File getMCCFile() {
		return FileHelper.createEntitiesMCCFilePath(absoluteLocation);
	}"
11210,merge,"	public void merge(CompoundTag destination, List<Range> ranges, int yOffset) {
		ChunkMerger merger = VersionController.getEntityMerger(data.getIntOrDefault(""DataVersion"", 0));
		merger.mergeChunks(data, destination, ranges, yOffset);
	}"
11211,relocate,"	public boolean relocate(Point3i offset) {
		ChunkRelocator relocator = VersionController.getEntityRelocator(data.getIntOrDefault(""DataVersion"", 0));
		return relocator.relocate(data, offset);
	}"
11212,next,"		public V next() {
			if (current == null) {
				throw new NoSuchElementException();
			}
			V e = current.element;
			current = current.next;"
11213,hasNext,"		public boolean hasNext() {
			return current != null;
		}"
11214,next,"		public Node<V> next() {
			if (current == null) {
				throw new NoSuchElementException();
			}
			Node<V> n = current;
			current = current.next;"
11216,remove,"		public void remove() {
			if (previous != null) {
				previous.next = next;
			}
			if (next != null) {
				next.previous = previous;
			}
			if (this == first) {
				first = (Node<E>) next;"
11217,compareTo,"		public int compareTo(Node<V> o) {
			return ((Comparable<V>) element).compareTo(o.element);
		}"
11219,clear,"	public void clear() {
		final ReentrantLock lock = this.lock;
		lock.lock();
		try {
			Iterator<Node<E>> itr = new NodeIterator<>(first);"
11220,peek,"	public E peek() {
		final ReentrantLock lock = this.lock;
		lock.lock();
		try {
			if (first == null) {"
11221,poll,"	public E poll() {
		final ReentrantLock lock = this.lock;
		lock.lock();
		try {
			return dequeue();"
11222,offer,"	public boolean offer(E e) {
		final ReentrantLock lock = this.lock;
		lock.lock();
		try {
			if (first == null) {
				first = new Node<>(e);"
11223,drainTo,"	public int drainTo(Collection<? super E> c, int maxElements) {
		final ReentrantLock lock = this.lock;
		lock.lock();
		try {
			int n = Math.min(size, maxElements);"
11224,drainTo,"	public int drainTo(Collection<? super E> c) {
		return drainTo(c, Integer.MAX_VALUE);
	}"
11225,remainingCapacity,"	public int remainingCapacity() {
		return Integer.MAX_VALUE;
	}"
11226,poll,"	public E poll(long timeout, TimeUnit unit) throws InterruptedException {
		long nanos = unit.toNanos(timeout);
		final ReentrantLock lock = this.lock;
		lock.lockInterruptibly();
		E result;
		try {
			while ((result = dequeue()) == null && nanos > 0) {
				nanos = notEmpty.awaitNanos(nanos);"
11227,take,"	public E take() throws InterruptedException {
		final ReentrantLock lock = this.lock;
		lock.lockInterruptibly();
		E result;
		try {
			while ((result = dequeue()) == null) {
				notEmpty.await();"
11228,offer,"	public boolean offer(E e, long timeout, TimeUnit unit) {
		return offer(e);
	}"
11229,put,"	public void put(E e) throws InterruptedException {
		offer(e);
	}"
11230,size,"	public int size() {
		final ReentrantLock lock = this.lock;
		lock.lock();
		try {
			return size;"
11231,removeIf,"	public boolean removeIf(Predicate<? super E> filter) {
		final ReentrantLock lock = this.lock;
		lock.lock();
		try {
			boolean removed = false;"
11232,iterator,"	public Iterator<E> iterator() {
		final ReentrantLock lock = this.lock;
		lock.lock();
		try {
			return new ElementIterator<>(first);"
11233,valueToString,"	public String valueToString() {
		StringJoiner sj = new StringJoiner("", "");
		getNewValue().forEach(s -> sj.add(StructureRegistry.isValidName(s) ? s : ""'"" + s + ""'""));
		return sj.toString();
	}"
11234,toString,"	public String toString() {
		StringJoiner sj = new StringJoiner("", "");
		getNewValue().forEach(s -> sj.add(StructureRegistry.isValidName(s) ? s : ""'"" + s + ""'""));
		return getType().toString() + "" = \"""" + sj + ""\"""";
	}"
11236,change,"	public void change(ChunkData data) {
		ChunkFilter chunkFilter = VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0));
		CompoundTag references = chunkFilter.getStructureReferences(data.region().getData());
		CompoundTag starts = chunkFilter.getStructureStarts(data.region().getData());
		for (String structure : getNewValue()) {
			for (String alt : StructureRegistry.getAlts(structure)) {"
11237,parseNewValue,"	public boolean parseNewValue(String s) {
		if (getNewValue() != null) {
			getNewValue().clear();
		}

		List<String> value = new ArrayList<>();

		String[] structures = s.split("","");
		for (String structure : structures) {"
11238,getOldValue,"	public List<String> getOldValue(ChunkData root) {
		return null;
	}"
11239,valueToString,"	public String valueToString() {
		if (getNewValue().size() == 1 && getNewValue().get(0).isMaxRange()) {
			return ""true"";
		}
		StringJoiner sj = new StringJoiner("", "");
		getNewValue().forEach(r -> sj.add(r.toString()));"
11240,toString,"	public String toString() {
		if (getNewValue().size() == 1 && getNewValue().get(0).isMaxRange()) {
			return getType().toString() + "" = true"";
		}
		StringJoiner sj = new StringJoiner("", "");
		getNewValue().forEach(r -> sj.add(r.toString()));"
11242,change,"	public void change(ChunkData data) {
		if (data.region() != null && data.region().getData() != null) {
			int dataVersion = data.region().getData().getIntOrDefault(""DataVersion"", 0);
			ChunkFilter chunkFilter = VersionController.getChunkFilter(dataVersion);"
11243,parseNewValue,"	public boolean parseNewValue(String s) {
		if (getNewValue() != null) {
			getNewValue().clear();
		}

		setNewValue(RangeParser.parseRanges(s, "",""));"
11244,getOldValue,"	public List<Range> getOldValue(ChunkData data) {
		return null;
	}"
11246,change,"	public void change(ChunkData data) {
		int dataVersion;
		if (data.region() != null) {
			dataVersion = data.region().getData().getIntOrDefault(""DataVersion"", 0);
		} else if (data.entities() != null) {
			dataVersion = data.entities().getData().getIntOrDefault(""DataVersion"", 0);"
11249,setMax,"	public boolean setMax(String raw) {
		setRawMax(raw);
		try {
			return setMaxInt(Integer.parseInt(raw));"
11250,setMin,"	public boolean setMin(String raw) {
		setRawMin(raw);
		try {
			return setMinInt(Integer.parseInt(raw));"
11251,name,"	public String name() {
		return ""DataVersion"";
	}"
11252,parseValue,"	public int parseValue(ChunkData chunkData) {
		if (chunkData.region() == null || chunkData.region().getData() == null) {
			return 0;
		}"
11253,force,"	public void force(ChunkData data) {
		data.region().getData().putInt(""DataVersion"", getNewValue());

		if (data.poi() != null) {
			data.poi().getData().putInt(""DataVersion"", getNewValue());"
11254,change,"	public void change(ChunkData data) {
		IntTag tag = data.region().getData().getIntTag(""DataVersion"");
		if (tag != null) {
			data.region().getData().putInt(""DataVersion"", getNewValue());
		}
"
11255,parseNewValue,"	public boolean parseNewValue(String s) {
		try {
			if (s.matches(""^[0-9]+$"")) {
				setNewValue(Integer.parseInt(s));"
11256,getOldValue,"	public Integer getOldValue(ChunkData data) {
		return ValidationHelper.withDefault(() -> data.region().getData().getInt(""DataVersion""), null);
	}"
11259,parseNewValue,"	public boolean parseNewValue(String s) {
		try {
			String script = String.format(baseScript, s);"
11261,parse,"	public String[] parse() throws ParseException {
		List<String> result = new ArrayList<>();
		ptr.skipWhitespace();
		while (ptr.hasNext()) {
			if (ptr.currentChar() == '""') {
				result.add(ptr.parseQuotedString());"
11262,saveAll,"	public static void saveAll() {
		if (GLOBAL != null) {
			GLOBAL.save();
		}
		if (OVERLAY != null) {"
11263,loadOverlayConfig,"	public static void loadOverlayConfig() {
		try {
			OVERLAY = OverlayConfig.load();"
11264,loadWorldConfig,"	public static void loadWorldConfig(WorldDirectories worldDirectories, List<File> dimensionDirectories) {
		try {
			WORLD = WorldConfig.load(worldDirectories, dimensionDirectories);"
11265,loadGlobalConfig,"	public static void loadGlobalConfig() {
		try {
			GLOBAL = GlobalConfig.load();"
11266,loadString,"	protected static String loadString(File file) {
		try {
			return Files.readString(file.toPath());
		} catch (IOException ex) {"
11267,save,"	protected void save(Gson gson, File file) {
		try {
			Files.writeString(file.toPath(), save(gson));"
11268,save,"	protected String save(Gson gson) {
		return gson.toJson(this);
	}"
11270,resolveHome,"	private static String resolveHome(String dir) {
		if (dir.startsWith(""~/"")) {
			return System.getProperty(""user.home"") + dir.substring(1);
		}"
11271,attemptCreateDirectory,"	private static boolean attemptCreateDirectory(File file) {
		File parent = file.getParentFile();
		if (parent == null) {
			return false;
		}"
11272,getEnvFilesWithDefault,"	private static File getEnvFilesWithDefault(String def, String suffix, char divider, String... envs) {
		File file;
		for (String env : envs) {
			String value = System.getenv(env);
			if (value != null && !value.isEmpty()) {
				String[] split = value.split("""" + divider);
				if (split.length > 1) {"
11273,createSlider,"	private Slider createSlider(int min, int max, int steps, int init) {
		Slider slider = new Slider(min, max, init);
		slider.setMajorTickUnit(steps);
		slider.setMinorTickCount(0);
		slider.setBlockIncrement(steps);
		return slider;
	}"
11274,onValueChange,"	private void onValueChange() {
		result = new Color(red.getValue() / 255, green.getValue() / 255, blue.getValue() / 255, opacity.getValue() / 255);
		preview.setBackground(new Background(new BackgroundFill(result, CornerRadii.EMPTY, Insets.EMPTY)));
	}"
11275,borderElement,"	private Region borderElement(String styleClass) {
		Region border = new Region();
		border.getStyleClass().add(styleClass);
		return border;
	}"
11276,label,"	private Label label(String name, String styleClass) {
		Label label = new Label(name);
		label.getStyleClass().add(styleClass);
		return label;
	}"
11277,showColorPicker,"	public Optional<Color> showColorPicker() {
		showAndWait();
		return Optional.ofNullable(result);
	}"
11278,applyTint,"	default int applyTint(int color, int tint) {
		int nr = (tint >> 16 & 0xFF) * (color >> 16 & 0xFF) >> 8;
		int ng = (tint >> 8 & 0xFF) * (color >> 8 & 0xFF) >> 8;
		int nb = (tint & 0xFF) * (color & 0xFF) >> 8;
		return color & 0xFF000000 | nr << 16 | ng << 8 | nb;
	}"
11282,read,"	public Color read(JsonReader in) throws IOException {
		if (in.peek() == JsonToken.NULL) {
			return Color.BLACK;
		}"
11283,write,"	public void write(JsonWriter out, Color value) throws IOException {
		out.value(value == null ? null : value.toString());
	}"
11284,toString,"	public String toString() {
		if (handle == null) {
			if (web != null) {
				return web;"
11285,blend,"	public static int blend(int color, int other, float ratio) {
		if (ratio > 1) {
			ratio = 1;
		} else if (ratio < 0) {
			ratio = 0;
		}

		float iRatio = 1.0f - ratio;

		int aA = color >> 24 & 0xFF;
		int aR = color >> 16 & 0xFF;
		int aG = color >> 8 & 0xFF;
		int aB = color & 0xFF;

		int bA = other >> 24 & 0xFF;
		int bR = other >> 16 & 0xFF;
		int bG = other >> 8 & 0xFF;"
11286,clampByte,"	private static int clampByte(int b) {
		if (b < 0) {
			return 0;
		}"
11287,shade,"	public static int shade(int color, int amount) {
		int a = (color >> 24) & 0xFF;
		int r = (color >> 16) & 0xFF;
		int g = (color >> 8) & 0xFF;
		int b = color & 0xFF;

		int r2 = clampByte(r + amount) << 16;
		int g2 = clampByte(g + amount) << 8;
		int b2 = clampByte(b + amount);
		return a << 24 | r2 | g2 | b2;"
11289,makeJavaFXColor,"	public javafx.scene.paint.Color makeJavaFXColor() {
		if (handle == null) {
			if (web != null) {
				handle = javafx.scene.paint.Color.web(web);"
11290,checkDone,"	private void checkDone() {
		if (progressBar.getCurrent() >= progressBar.getMax()) {
			progressBar.refresh();"
11291,onDone,"	public void onDone(Runnable doneAction) {
		this.doneAction = doneAction;
	}"
11292,setMessage,"	public void setMessage(String msg) {
		progressBar.setExtraMessage(msg);
	}"
11293,incrementProgress,"	public void incrementProgress(String msg, int progress) {
		progressBar.stepBy(progress);
		progressBar.setExtraMessage(msg);
		checkDone();
	}"
11294,incrementProgress,"	public void incrementProgress(String msg) {
		progressBar.stepBy(1);
		progressBar.setExtraMessage(msg);
		checkDone();
	}"
11295,cancelTask,"	public void cancelTask() {
		cancelled = true;
		progressBar.setExtraMessage(""cancelled"");
		progressBar.close();
	}"
11297,done,"	public void done(String msg) {
		progressBar.close();
		if (doneAction != null) {
			doneAction.run();"
11298,updateProgress,"	public void updateProgress(String msg, int progress) {
		progressBar.stepTo(progress);
		progressBar.setExtraMessage(msg);
		checkDone();
	}"
11299,setMax,"	public void setMax(int max) {
		progressBar.maxHint(max);
		progressBar.reset();
	}"
11300,hasJavaFX,"	public static boolean hasJavaFX() {
		try  {
			Class.forName(""javafx.scene.paint.Color"");"
11301,launch,"	public static void launch() throws ExecutionException, InterruptedException {
		CompletableFuture<Void> started = new CompletableFuture<>();
		javafx.application.Platform.startup(() -> started.complete(null));
		started.get();
	}"
11302,toString,"	public String toString() {
		StringBuilder sb = new StringBuilder(""   0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n"");
		for (int z = 0; z < 32; z++) {
			sb.append(z);
			sb.append(z > 9 ? """" : "" "");"
11303,or,"		public void or(ChunkSet other) {
			throw new UnsupportedOperationException(""cannot modify immutable ChunkSet"");
		}"
11304,removeIf,"		public void removeIf(ShortPredicate predicate) {
			throw new UnsupportedOperationException(""cannot modify immutable ChunkSet"");
		}"
11305,clear,"		public void clear() {
			throw new UnsupportedOperationException(""cannot modify immutable ChunkSet"");
		}"
11306,clear,"		public void clear(int index) {
			throw new UnsupportedOperationException(""cannot modify immutable ChunkSet"");
		}"
11307,set,"		public void set(int index) {
			throw new UnsupportedOperationException(""cannot modify immutable ChunkSet"");
		}"
11308,immutable,"	public ChunkSet immutable() {
		return new ImmutableChunkSet(this);
	}"
11309,forEachRemaining,"		public void forEachRemaining(IntConsumer action) {
			for (; index < 1024; index++) {
				if (get(index)) {"
11310,hasNext,"		public boolean hasNext() {
			while (index < 1024) {
				if (get(index++)) {
					return true;"
11311,nextInt,"		public int nextInt() {
			return index - 1;
		}"
11312,removeIf,"	public void removeIf(ShortPredicate predicate) {
		short c = 0, l = 64;
		for (int i = 0; i < 16; i++) {
			if (words[i] == 0) {"
11313,getMaxZ,"	public int getMaxZ(int min) {
		int l = min >> 1;
		for (int i = 15; i >= l; i--) {
			if (words[i] == 0) {
				continue;"
11314,getMinZ,"	public int getMinZ(int max) {
		int l = max >> 1;
		for (int i = 0; i <= l; i++) {
			if (words[i] == 0) {
				continue;"
11315,getMaxX,"	public int getMaxX(int min) {
		for (int x = 31; x > min; x--) {
			for (int z = 31; z >= 0; z--) {
				if (get(z << 5 | x)) {"
11316,getMinX,"	public int getMinX(int max) {
		for (int x = 0; x < max; x++) {
			for (int z = 0; z < 32; z++) {
				if (get(z << 5 | x)) {"
11317,forEachFromInverse,"	public void forEachFromInverse(short index, IntConsumer action) {
		for (int i = index >> 6; i >= 0; i--) {
			if (words[i] == 0) {"
11318,forEachFrom,"	public void forEachFrom(short index, IntConsumer action) {
		for (int i = index >> 6; i < 16; i++) {
			if (words[i] == 0) {"
11319,forEach,"	public void forEach(IntConsumer action) {
		for (int i = 0; i < 16; i++) {
			if (words[i] == 0L) {"
11320,iterator,"	public IntIterator iterator() {
		return new ChunkIterator();
	}"
11321,fill,"	public void fill() {
		for (int i = 0; i < 16; i++) {
			words[i] = 0xFFFFFFFFFFFFFFFFL;
		}"
11322,isEmpty,"	public boolean isEmpty() {
		return setBits == 0;
	}"
11324,clone,"	public ChunkSet clone() {
		ChunkSet clone;
		try {
			clone = (ChunkSet) super.clone();
		} catch (CloneNotSupportedException ex) {
			throw new RuntimeException(ex);
		}"
11325,flip,"	public ChunkSet flip() {
		ChunkSet result = new ChunkSet();
		for (int i = 0; i < 16; i++) {
			result.words[i] = ~words[i];
		}
		result.setBits = (short) (1024 - setBits);"
11326,otherNotAnd,"	public void otherNotAnd(ChunkSet other) {
		for (short i = 0; i < 1024; i++) {
			if (!get(i) || other.get(i)) {"
11327,or,"	public void or(ChunkSet other) {
		for (short i = 0; i < 1024; i++) {
			if (other.get(i)) {"
11328,get,"	public boolean get(int index) {
		return (words[index >> 6] & (1L << index)) != 0;
	}"
11329,clear,"	public void clear() {
		for (int i = 0; i < 16; i++) {
			words[i] = 0L;
		}"
11330,clear,"	public void clear(int index) {
		if (get(index)) {
			setBits--;
		}"
11331,set,"	public void set(int index) {
		if (!get(index)) {
			setBits++;
		}"
11332,minimizeChunk,"	CompoundTag minimizeChunk(CompoundTag root);
}"
11333,drawCaves,"	void drawCaves(CompoundTag root, ColorMapping colorMapping, int x, int z, int scale, int[] pixelBuffer, short[] terrainHeights, int height);
"
11334,drawLayer,"	void drawLayer(CompoundTag root, ColorMapping colorMapping, int x, int z, int scale, int[] pixelBuffer, int height);
"
11335,drawChunk,"	void drawChunk(CompoundTag root, ColorMapping colorMapping, int x, int z, int scale, int[] pixelBuffer, int[] waterPixels, short[] terrainHeights, short[] waterHeights, boolean water, int height);
"
11336,applyOffsetToSection,"	default boolean applyOffsetToSection(CompoundTag section, Point3i offset, int minY, int maxY) {
		NumberTag value;
		if ((value = Helper.tagFromCompound(section, ""Y"")) != null) {
			if (value.asByte() > maxY || value.asByte() < minY) {
				return false;"
11337,relocate,"	boolean relocate(CompoundTag root, Point3i offset);
"
11338,fixEntityUUID,"	private static void fixEntityUUID(CompoundTag entity) {
		Helper.fixEntityUUID(entity);
		if (entity.containsKey(""Passengers"")) {
			ListTag passengers = Helper.tagFromCompound(entity, ""Passengers"", null);"
11339,fixEntityUUIDs,"	default void fixEntityUUIDs(CompoundTag root) {
		ListTag entities = Helper.tagFromCompound(root, ""Entities"", null);
		if (entities != null) {
			entities.forEach(e -> fixEntityUUID((CompoundTag) e));"
11340,initLevel,"	default CompoundTag initLevel(CompoundTag c) {
		CompoundTag level = Helper.levelFromRoot(c);
		if (level == null) {
			c.put(""Level"", level = new CompoundTag());
		}"
11341,mergeCompoundTags,"	default void mergeCompoundTags(CompoundTag source, CompoundTag destination, List<Range> ranges, int yOffset, String name) {
		CompoundTag sourceElements = Helper.tagFromCompound(source, name, new CompoundTag());
		CompoundTag destinationElements = Helper.tagFromCompound(destination, name, new CompoundTag());

		for (Map.Entry<String, Tag> sourceElement : sourceElements) {"
11342,mergeCompoundTagLists,"	default void mergeCompoundTagLists(CompoundTag source, CompoundTag destination, List<Range> ranges, int yOffset, String name, Function<Tag, Integer> ySupplier) {
		ListTag sourceElements = Helper.tagFromCompound(source, name, new ListTag());
		ListTag destinationElements = Helper.tagFromCompound(destination, name, new ListTag());

		destination.put(name, mergeLists(sourceElements, destinationElements, ranges, ySupplier, yOffset));"
11344,mergeListTagLists,"	default void mergeListTagLists(CompoundTag source, CompoundTag destination, List<Range> ranges, int yOffset, String name) {
		ListTag sourceList = Helper.tagFromLevelFromRoot(source, name);
		ListTag destinationList = Helper.tagFromLevelFromRoot(destination, name, sourceList);

		if (sourceList == null || destinationList == null || sourceList.size() != destinationList.size()) {
			return;
		}"
11345,mergeLists,"	default ListTag mergeLists(ListTag source, ListTag destination, List<Range> ranges, Function<Tag, Integer> ySupplier, int yOffset) {
		ListTag result = new ListTag();
		for (Tag dest : destination) {
			int y = ySupplier.apply(dest);
			for (Range range : ranges) {
				if (!range.contains(y)) {"
11346,newEmptyChunk,"	CompoundTag newEmptyChunk(Point2i absoluteLocation, int dataVersion);
"
11347,mergeChunks,"	void mergeChunks(CompoundTag source, CompoundTag destination, List<Range> ranges, int yOffset);
"
11348,execute,"		public void execute() {
			Timer t = new Timer();
			try {
				getData().saveWithTempFiles();
			} catch (Exception ex) {
				LOGGER.warn(""failed to save imported chunks to {}"", getRegionDirectories().getLocationAsFileName(), ex);"
11350,addIfInSelection,"	private static void addIfInSelection(LongOpenHashSet set, Point2i p, Selection selection) {
		if (selection == null || selection.isAnyChunkInRegionSelected(p)) {
			set.add(p.asLong());"
11353,importChunks,"	public static void importChunks(WorldDirectories source, Progress progressChannel, boolean cli, boolean overwrite, Selection sourceSelection, Selection targetSelection, List<Range> ranges, Point3i offset, DataProperty<Map<Point2i, RegionDirectories>> tempFiles) {
		try {
			WorldDirectories wd = ConfigProvider.WORLD.getWorldDirs();"
11355,selectFilter,"	public static void selectFilter(GroupFilter filter, Selection selection, int radius, Consumer<Selection> callback, Progress progressChannel, boolean cli) {

		WorldDirectories wd = ConfigProvider.WORLD.getWorldDirs();

		RegionDirectories[] rd = wd.listRegions(selection);

		if (rd == null || rd.length == 0) {

			if (cli) {
"
11356,execute,"		public void execute() {
			Timer t = new Timer();
			try {
				getData().deFragment(to);
			} catch (Exception ex) {
				LOGGER.warn(""failed to save exported filtered chunks in {}"", getRegionDirectories().getLocationAsFileName(), ex);"
11359,execute,"		public void execute() {
			try {
				getData().deFragment();
			} catch (Exception ex) {"
11361,deleteFilter,"	public static void deleteFilter(GroupFilter filter, Selection selection, Progress progressChannel, boolean headless) {
		WorldDirectories wd = ConfigProvider.WORLD.getWorldDirs();
		RegionDirectories[] rd = wd.listRegions(selection);
		if (rd == null || rd.length == 0) {
			if (headless) {
				progressChannel.done(""no files"");
			} else {
				progressChannel.done(Translation.DIALOG_PROGRESS_NO_FILES.toString());
			}
			return;"
11362,toString,"		public String toString() {
			switch (type) {
				case NAME:"
11363,getTile,"		public CompoundTag getTile() {
			return tile;
		}"
11364,setTile,"		public void setTile(CompoundTag tile) {
			this.tile = tile;
		}"
11365,getState,"		public CompoundTag getState() {
			return state;
		}"
11366,setState,"		public void setState(CompoundTag state) {
			this.state = state;
		}"
11367,getName,"		public String getName() {
			return name;
		}"
11368,setName,"		public void setName(String name) {
			this.name = name;
		}"
11369,getType,"		public BlockReplaceType getType() {
			return type;
		}"
11371,setLightPopulated,"	void setLightPopulated(CompoundTag data, byte lightPopulated);
"
11372,getLightPopulated,"	ByteTag getLightPopulated(CompoundTag data);
"
11376,setLastUpdate,"	void setLastUpdate(CompoundTag data, long lastUpdate);
"
11378,matchStatus,"	boolean matchStatus(CompoundTag data, StatusRegistry.StatusIdentifier status);
"
11379,setStatus,"	void setStatus(CompoundTag data, StatusRegistry.StatusIdentifier status);
"
11381,setInhabitedTime,"	void setInhabitedTime(CompoundTag data, long inhabitedTime);
"
11383,deleteSections,"	void deleteSections(CompoundTag data, List<Range> ranges);
"
11385,getStructureReferences,"	CompoundTag getStructureReferences(CompoundTag data);
"
11386,getStructureStarts,"	CompoundTag getStructureStarts(CompoundTag data);
"
11388,getBlockAmount,"	int getBlockAmount(CompoundTag data, String[] blocks);
"
11390,replaceBlocks,"	void replaceBlocks(CompoundTag data, Map<String, BlockReplaceData> replace);
"
11391,forceBiome,"	void forceBiome(CompoundTag data, BiomeRegistry.BiomeIdentifier biome);
"
11392,changeBiome,"	void changeBiome(CompoundTag data, BiomeRegistry.BiomeIdentifier biome);
"
11393,matchAnyBiome,"	boolean matchAnyBiome(CompoundTag data, Collection<BiomeRegistry.BiomeIdentifier> biomes);
"
11394,paletteEquals,"	boolean paletteEquals(CompoundTag data, Collection<String> names);
"
11395,matchAnyBlockName,"	boolean matchAnyBlockName(CompoundTag data, Collection<String> names);
"
11396,matchBiomes,"	boolean matchBiomes(CompoundTag data, Collection<BiomeRegistry.BiomeIdentifier> biomes);
"
11397,matchBlockNames,"	boolean matchBlockNames(CompoundTag data, Collection<String> names);
"
11399,parse,"	public List<Field<?>> parse() throws ParseException {
		List<Field<?>> fields = new ArrayList<>();

		while (ptr.hasNext()) {
			ptr.skipWhitespace();"
11400,cancelled,"	public boolean cancelled() {
		return cancelled;
	}"
11402,readVersionFromFile,"	private static String readVersionFromFile(File file) {
		String version = null;
		try (BufferedReader br = new BufferedReader(new FileReader(file))) {
			version = br.readLine();
		} catch (IOException ex) {"
11404,clearSelectionCache,"	public static void clearSelectionCache(TileMap tileMap) {
		Selection selection = tileMap.getSelection().getTrueSelection(ConfigProvider.WORLD.getWorldDirs());

		for (Long2ObjectMap.Entry<ChunkSet> entry : selection) {
			Point2i region = new Point2i(entry.getLongKey());
			for (File cacheDir : ConfigProvider.WORLD.getCacheDirs()) {"
11405,clearViewCache,"	public static void clearViewCache(TileMap tileMap) {
		for (Point2i region : tileMap.getVisibleRegions()) {
			for (File cacheDir : ConfigProvider.WORLD.getCacheDirs()) {
				File file = FileHelper.createPNGFilePath(cacheDir, region);
				if (file.exists()) {"
11406,clearAllCacheAsync,"	public static void clearAllCacheAsync(TileMap tileMap, Runnable callback) {
		Thread clear = new Thread(() -> {
			JobHandler.cancelAllJobsAndFlush();
			for (File cacheDir : ConfigProvider.WORLD.getCacheDirs()) {"
11407,clearAllCache,"	public static void clearAllCache(TileMap tileMap) {
		JobHandler.cancelAllJobsAndFlush();
		for (File cacheDir : ConfigProvider.WORLD.getCacheDirs()) {
			FileHelper.deleteDirectory(cacheDir);
		}
		RegionImageGenerator.invalidateCachedMCAFiles();
		updateVersionFile();
		ConfigProvider.WORLD.save();
		tileMap.clear();"
11408,forceGenerateCache,"	public static void forceGenerateCache(Integer zoomLevel, Progress progressChannel) {
		File[] files = ConfigProvider.WORLD.getRegionDir().listFiles((d, n) -> FileHelper.MCA_FILE_PATTERN.matcher(n).matches());
		if (files == null || files.length == 0) {
			return;
		}

		progressChannel.setMax(files.length);"
11410,cancel,"	public void cancel() {
		CachedImageLoadJob.setLoading(tile, false);
	}"
11411,execute,"	public boolean execute() {
		Image cachedImg = loadImageFromDiskCache(cachedImageFile);
		if (cachedImg != null) {
			tile.setImage(cachedImg);
		}
		tile.setLoaded(true);
		callback.accept(cachedImg);"
11412,setLoading,"	public static void setLoading(Tile tile, boolean loading) {
		LOGGER.debug(""set loading from cache for {} to {}, image:{}, loaded:{}"",
			tile.getLocation(), loading, tile.getImage() == null ? ""null"" : tile.getImage().getHeight() + ""x"" + tile.getImage().getWidth(), tile.isLoaded());
"
11414,load,"	public static void load(Tile tile, File cachedImageFile, int loadZoomLevel, int targetZoomLevel, Consumer<Image> callback) {
		JobHandler.addJob(new CachedImageLoadJob(tile, cachedImageFile, loadZoomLevel, targetZoomLevel, callback));
	}"
11415,getFormatText,"	public String getFormatText() {
		return ""+/-byte"";
	}"
11416,isSmallerEqual,"	protected boolean isSmallerEqual(Byte a, Byte b) {
		return a <= b;
	}"
11417,isLargerEqual,"	protected boolean isLargerEqual(Byte a, Byte b) {
		return a >= b;
	}"
11418,isSmallerThan,"	protected boolean isSmallerThan(Byte a, Byte b) {
		return a < b;
	}"
11419,isLargerThan,"	protected boolean isLargerThan(Byte a, Byte b) {
		return a > b;
	}"
11420,isNotEqual,"	protected boolean isNotEqual(Byte a, Byte b) {
		return a.byteValue() != b.byteValue();
	}"
11421,isEqual,"	protected boolean isEqual(Byte a, Byte b) {
		return a.byteValue() == b.byteValue();
	}"
11423,setFilterNumber,"	protected void setFilterNumber(Byte value) {
		this.value = value;
	}"
11424,getFilterNumber,"	protected Byte getFilterNumber() {
		return value;
	}"
11425,read,"	public int read() throws IOException {
		try {
			return data[pointer++] & 0xFF;"
11426,readInt,"	public int readInt() throws ArrayIndexOutOfBoundsException {
		int i = (data[pointer++] & 0xFF) << 24;
		i |= (data[pointer++] & 0xFF) << 16;
		i |= (data[pointer++] & 0xFF) << 8;
		return i | data[pointer++] & 0xFF;
	}"
11427,readByte,"	public byte readByte() throws ArrayIndexOutOfBoundsException {
		return data[pointer++];
	}"
11428,seek,"	public void seek(long pointer) {
		this.pointer = (int) pointer;
	}"
11429,setMultiValuesString,"	public boolean setMultiValuesString(String raw) {
		if (raw == null) {
			setMultiValues(new String[0]);
			return false;
		}
		setRawMultiValues(raw);"
11430,setMax,"	public boolean setMax(String raw) {
		setRawMax(raw);
		try {
			int value = Integer.parseInt(raw);"
11431,setMin,"	public boolean setMin(String raw) {
		setRawMin(raw);
		try {
			int value = Integer.parseInt(raw);"
11433,parseValue,"	public int parseValue(ChunkData chunkData) {
		if (chunkData.region() == null || chunkData.region().getData() == null) {
			return 0;
		}
		ChunkFilter chunkFilter = VersionController.getChunkFilter(chunkData.region().getData().getIntOrDefault(""DataVersion"", 0));"
11434,lsbPosition,"	public static int lsbPosition(int i) {
		return multiplyDeBruijnBitPosition[((i & -i) * 0x077CB531) >> 27];
	}"
11435,getMsb,"	public static int getMsb(int i) {
		i |= i >> 1;
		i |= i >> 2;
		i |= i >> 4;
		i |= i >> 8;
		i |= i >> 16;
		i = (i >> 1) + 1;
		return i;
	}"
11436,fastNumberOfLeadingZeroes,"	public static int fastNumberOfLeadingZeroes(int i) {
		int n = 25;
		i <<= 24;
		if (i >>> 28 == 0) {
			n += 4;
			i <<= 4;
		}
		if (i >>> 30 == 0) {"
11437,bitRange,"	public static long bitRange(long value, int from, int to) {
		int waste = 64 - to;
		return (value << waste) >>> (waste + from);
	}"
11438,setBits,"	public static long setBits(long src, long dest, int from, int to) {
		return (to > 63 ? 0 : dest >>> to << to) + (src << from) + (dest & ((1L << from) - 1L));
	}"
11439,toString,"		public String toString() {
			if (name != null) {
				if (isValidName(name)) {
					return name;"
11440,matches,"		public boolean matches(int id) {
			return this.id == id;
		}"
11441,matches,"		public boolean matches(String name) {
			return this.name != null && this.name.equals(name);
		}"
11444,toID,"	public static Integer toID(String name) {
		return nameMapping.getOrDefault(name, null);
	}"
11445,toName,"	public static String toName(int id) {
		return idMapping.get(id);
	}"
11446,isValidID,"	public static boolean isValidID(int id) {
		return idMapping.containsKey(id);
	}"
11447,isValidName,"	public static boolean isValidName(String name) {
		return mapping.contains(name);
	}"
11448,force,"	public void force(ChunkData data) {
		VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0)).forceBiome(data.region().getData(), getNewValue());
	}"
11449,change,"	public void change(ChunkData data) {
		VersionController.getChunkFilter(data.region().getData().getIntOrDefault(""DataVersion"", 0)).changeBiome(data.region().getData(), getNewValue());
	}"
11450,getOldValue,"	public BiomeRegistry.BiomeIdentifier getOldValue(ChunkData data) {
		return null;
	}"
11452,toString,"	public String toString() {
		return ""Biome = "" + getNewValue();
	}"
11458,name,"	public String name() {
		return ""AverageHeight"";
	}"
11460,applyOffsetToItem,"	static void applyOffsetToItem(CompoundTag item, Point3i offset) {
		if (item == null) {
			return;
		}

		CompoundTag components = Helper.tagFromCompound(item, ""components"");
		if (components == null) {
			return;
		}"
11461,applyOffsetToTileEntity,"	static void applyOffsetToTileEntity(CompoundTag tileEntity, Point3i offset) {
		if (tileEntity == null) {
			return;
		}

		Helper.applyIntOffsetIfRootPresent(tileEntity, ""x"", ""y"", ""z"", offset);

		String id = Helper.stringFromCompound(tileEntity, ""id"", """");"
11462,applyOffsetToTick,"	private void applyOffsetToTick(CompoundTag tick, Point3i offset) {
		Helper.applyIntOffsetIfRootPresent(tick, ""x"", ""y"", ""z"", offset);
	}"
11465,applyOffsetToItem,"	static void applyOffsetToItem(CompoundTag item, Point3i offset, int dataVersion) {
		if (item == null) {
			return;
		}"
11466,applyOffsetToTileEntity,"	static void applyOffsetToTileEntity(CompoundTag tileEntity, Point3i offset, int dataVersion) {
		if (tileEntity == null) {
			return;
		}

		Helper.applyIntOffsetIfRootPresent(tileEntity, ""x"", ""y"", ""z"", offset);

		String id = Helper.stringFromCompound(tileEntity, ""id"", """");"
11470,matchStatus,"	public boolean matchStatus(CompoundTag data, StatusRegistry.StatusIdentifier status) {
		StringTag tag = getStatus(data);
		if (tag == null) {
			return false;
		}"
11471,setStatus,"	public void setStatus(CompoundTag data, StatusRegistry.StatusIdentifier status) {
		if (data != null) {
			data.putString(""Status"", status.getStatusWithNamespace());"
11472,getStatus,"	public StringTag getStatus(CompoundTag data) {
		return Helper.tagFromCompound(data, ""Status"");
	}"
11473,getHeightMap,"	protected long[] getHeightMap(CompoundTag root, Predicate<CompoundTag> matcher) {
		ListTag sections = root.getListTag(""sections"");
		if (sections == null) {
			return new long[37];
		}

		ListTag[] palettes = new ListTag[24];
		long[][] blockStatesArray = new long[24][];
		sections.forEach(s -> {
			ListTag p = Helper.tagFromCompound(Helper.tagFromCompound(s, ""block_states""), ""palette"");"
11474,setHeightMap,"	protected void setHeightMap(CompoundTag root, String name, long[] heightmap) {
		CompoundTag heightmaps = root.getCompoundOrDefault(""Heightmaps"", new CompoundTag());
		heightmaps.putLongArray(name, heightmap);
		root.put(""Heightmaps"", heightmaps);
	}"
11475,applyOffsetToItem,"	static void applyOffsetToItem(CompoundTag item, Point3i offset) {
		if (item == null) {
			return;
		}

		CompoundTag tag = Helper.tagFromCompound(item, ""tag"");
		if (tag == null) {
			return;
		}
"
11480,newEmptyChunk,"	public CompoundTag newEmptyChunk(Point2i absoluteLocation, int dataVersion) {
		CompoundTag root = new CompoundTag();
		root.putInt(""xPos"", absoluteLocation.getX());
		root.putInt(""yPos"", -4);
		root.putInt(""zPos"", absoluteLocation.getZ());
		root.putString(""Status"", ""full"");
		root.putInt(""DataVersion"", dataVersion);
		return root;
	}"
11483,getHeightMap,"	protected long[] getHeightMap(CompoundTag root, Predicate<CompoundTag> matcher) {
		Integer dataVersion = Helper.intFromCompound(root, ""DataVersion"");
		if (dataVersion == null) {
			return null;
		}

		ListTag sections = LegacyHelper.getSections(root, dataVersion);
		if (sections == null) {
			return new long[37];
		}

		ListTag[] palettes = new ListTag[24];"
11484,setHeightMap,"	protected void setHeightMap(CompoundTag root, String name, long[] heightmap) {
		if (heightmap == null) {
			return;
		}
		int dataVersion = root.getIntOrDefault(""DataVersion"", 0);
		CompoundTag heightmaps = LegacyHelper.getHeightmaps(root, dataVersion);
		if (heightmaps == null) {
			heightmaps = new CompoundTag();"
11485,applyOffsetToVillagerMemory,"	static void applyOffsetToVillagerMemory(CompoundTag memory, Point3i offset) {
		IntArrayTag mPos = Helper.tagFromCompound(memory, ""pos"");
		Helper.applyOffsetToIntArrayPos(mPos, offset);
		if (mPos == null) {
			ListTag lPos = Helper.tagFromCompound(memory, ""pos"");"
11487,relocate,"	public boolean relocate(CompoundTag root, Point3i offset) {
		int[] position = Helper.intArrayFromCompound(root, ""Position"");
		if (position == null || position.length != 2) {
			return false;
		}

		position[0] += offset.blockToChunk().getX();
		position[1] += offset.blockToChunk().getZ();
"
11488,deleteEntities,"	public void deleteEntities(ChunkData data, List<Range> ranges) {
		if (data.entities() != null) {
			ListTag entities = LegacyHelper.getEntities(data.entities().getData(), data.entities().getData().getIntOrDefault(""DataVersion"", 0));
			deleteEntities(entities, ranges);
		}"
11493,applyOffsetToBiomes,"	private void applyOffsetToBiomes(IntArrayTag biomes, Point3i offset) {
		if (biomes == null || biomes.getValue() == null || biomes.getValue().length != 1536) {
			return;
		}

		int[] biomesArray = biomes.getValue();
		int[] newBiomes = new int[1536];"
11495,newEmptyChunk,"	public CompoundTag newEmptyChunk(Point2i absoluteLocation, int dataVersion) {
		if (dataVersion < 2844) {
			CompoundTag root = new CompoundTag();"
11497,mergeChunks,"	public void mergeChunks(CompoundTag source, CompoundTag destination, List<Range> ranges, int yOffset) {
		Integer dataVersion = Helper.intFromCompound(source, ""DataVersion"");
		if (dataVersion == null) {
			return;
		}"
11498,forceBlending,"	public void forceBlending(CompoundTag data) {
		CompoundTag blendingData = new CompoundTag();
		blendingData.putByte(""old_noise"", (byte) 1);
		data.put(""blending_data"", blendingData);
		data.remove(""Heightmaps"");
		data.remove(""isLightOn"");
	}"
11499,setLightPopulated,"	public void setLightPopulated(CompoundTag data, byte lightPopulated) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return;
		}"
11500,getLightPopulated,"	public ByteTag getLightPopulated(CompoundTag data) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return null;
		}"
11501,getZPos,"	public IntTag getZPos(CompoundTag data) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return null;
		}"
11502,getYPos,"	public IntTag getYPos(CompoundTag data) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return null;
		}"
11503,getXPos,"	public IntTag getXPos(CompoundTag data) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return null;
		}"
11504,setLastUpdate,"	public void setLastUpdate(CompoundTag data, long lastUpdate) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return;
		}"
11505,getLastUpdate,"	public LongTag getLastUpdate(CompoundTag data) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return null;
		}"
11506,setStatus,"	public void setStatus(CompoundTag data, StatusRegistry.StatusIdentifier status) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return;
		}"
11507,getStatus,"	public StringTag getStatus(CompoundTag data) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return null;
		}"
11508,setInhabitedTime,"	public void setInhabitedTime(CompoundTag data, long inhabitedTime) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return;
		}"
11509,getInhabitedTime,"	public LongTag getInhabitedTime(CompoundTag data) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return null;
		}"
11510,deleteSection,"	private void deleteSection(CompoundTag section) {
		CompoundTag blockStates = section.getCompound(""block_states"");
		blockStates.remove(""data"");
		ListTag blockPalette = new ListTag();
		CompoundTag air = new CompoundTag();
		air.putString(""Name"", ""minecraft:air"");
		blockPalette.add(air);
		blockStates.put(""palette"", blockPalette);
		section.remove(""BlockLight"");
	}"
11511,deleteSections,"	public void deleteSections(CompoundTag data, List<Range> ranges) {
		switch (data.getString(""Status"")) {
			case ""light"":
			case ""spawn"":
			case ""heightmaps"":
			case ""full"":"
11512,getSections,"	public ListTag getSections(CompoundTag data) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return null;
		}"
11513,getStructureStarts,"	public CompoundTag getStructureStarts(CompoundTag data) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return null;
		}"
11514,getStructureReferences,"	public CompoundTag getStructureReferences(CompoundTag data) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return null;
		}
		CompoundTag structures = LegacyHelper.getStructures(data, dataVersion);"
11515,getTileEntities,"	public ListTag getTileEntities(CompoundTag data) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return null;
		}"
11516,getBlockAmount,"	public int getBlockAmount(CompoundTag data, String[] blocks) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return 0;
		}

		ListTag sections = LegacyHelper.getSections(data, dataVersion);
		if (sections == null) {
			return 0;"
11517,getAverageHeight,"	public int getAverageHeight(CompoundTag data) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return 0;
		}

		ListTag sections = LegacyHelper.getSections(data, dataVersion);
		if (sections == null) {
			return 0;
		}"
11519,getPaletteIndex,"	protected int getPaletteIndex(int blockIndex, long[] blockStates) {
		if (blockStates == null) {
			return 0;
		}"
11520,adjustBlockStateBits,"	protected long[] adjustBlockStateBits(ListTag palette, long[] blockStates, Map<Integer, Integer> oldToNewMapping) {
		if (palette.size() == 1) {
			return null;
		}"
11521,replaceBlocks,"	public void replaceBlocks(CompoundTag data, Map<String, BlockReplaceData> replace) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return;
		}

		ListTag sections = LegacyHelper.getSections(data, dataVersion);"
11522,forceBiome,"	public void forceBiome(CompoundTag data, BiomeRegistry.BiomeIdentifier biome) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return;
		}"
11523,changeBiome,"	public void changeBiome(CompoundTag data, BiomeRegistry.BiomeIdentifier biome) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return;
		}"
11524,matchAnyBiome,"	public boolean matchAnyBiome(CompoundTag data, Collection<BiomeRegistry.BiomeIdentifier> biomes) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return false;
		}"
11525,matchBiomes,"	public boolean matchBiomes(CompoundTag data, Collection<BiomeRegistry.BiomeIdentifier> biomes) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return false;
		}"
11526,paletteEquals,"	public boolean paletteEquals(CompoundTag data, Collection<String> names) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return false;
		}

		ListTag sections = LegacyHelper.getSections(data, dataVersion);
		if (sections == null) {
			return false;
		}
"
11527,matchAnyBlockName,"	public boolean matchAnyBlockName(CompoundTag data, Collection<String> names) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return false;
		}

		ListTag sections = LegacyHelper.getSections(data, dataVersion);
		if (sections == null) {"
11528,matchBlockNames,"	public boolean matchBlockNames(CompoundTag data, Collection<String> names) {
		Integer dataVersion = Helper.intFromCompound(data, ""DataVersion"");
		if (dataVersion == null) {
			return false;
		}

		ListTag sections = LegacyHelper.getSections(data, dataVersion);
		if (sections == null) {
			return false;"
11529,getHeightMap,"	protected long[] getHeightMap(CompoundTag root, Predicate<CompoundTag> matcher) {
		ListTag sections = Helper.getSectionsFromLevelFromRoot(root, ""Sections"");
		if (sections == null) {
			return new long[37];
		}

		ListTag[] palettes = new ListTag[24];
		long[][] blockStatesArray = new long[24][];
		sections.forEach(s -> {
			ListTag p = Helper.tagFromCompound(s, ""Palette"");"
11533,newEmptyChunk,"	public CompoundTag newEmptyChunk(Point2i absoluteLocation, int dataVersion) {
		CompoundTag root = new CompoundTag();
		int[] position = new int[]{
			absoluteLocation.getX(),
			absoluteLocation.getZ()
		};
		root.putIntArray(""Position"", position);
		root.putInt(""DataVersion"", dataVersion);"
11534,mergeChunks,"	public void mergeChunks(CompoundTag source, CompoundTag destination, List<Range> ranges, int yOffset) {
		mergeCompoundTagLists(source, destination, ranges, yOffset, ""Entities"", c -> ((CompoundTag) c).getList(""Pos"").getInt(1) >> 4);
	}"
11535,getEntities,"	public ListTag getEntities(ChunkData data) {
		if (data.entities() == null) {
			return null;
		}"
11536,deleteEntities,"	protected void deleteEntities(ListTag entities, List<Range> ranges) {
		if (entities == null) {
			return;
		}"
11542,applyOffsetToBiomes,"	private void applyOffsetToBiomes(IntArrayTag biomes, Point3i offset) {
		int[] biomesArray;
		if (biomes == null || (biomesArray = biomes.getValue()) == null || (biomesArray.length != 1024 && biomesArray.length != 1536)) {
			return;
		}

		int[] newBiomes = new int[biomesArray.length];
		int maxY = biomesArray.length / 16;"
11544,newEmptyChunk,"	public CompoundTag newEmptyChunk(Point2i absoluteLocation, int dataVersion) {
		CompoundTag root = new CompoundTag();
		CompoundTag level = new CompoundTag();
		level.putInt(""xPos"", absoluteLocation.getX());
		level.putInt(""zPos"", absoluteLocation.getZ());
		level.putString(""Status"", ""full"");
		root.put(""Level"", level);
		root.putInt(""DataVersion"", dataVersion);
		return root;
	}"
11547,forceBiome,"	public void forceBiome(CompoundTag data, BiomeRegistry.BiomeIdentifier biome) {
		CompoundTag level = Helper.levelFromRoot(data);
		if (level != null) {
			int[] biomes = Helper.intArrayFromCompound(level, ""Biomes"");"
11548,getPaletteIndex,"	protected int getPaletteIndex(int blockIndex, long[] blockStates) {
		int bits = blockStates.length >> 6;
		int indicesPerLong = (int) (64D / bits);
		int blockStatesIndex = blockIndex / indicesPerLong;
		int startBit = (blockIndex % indicesPerLong) * bits;
		return (int) Bits.bitRange(blockStates[blockStatesIndex], startBit, startBit + bits);
	}"
11549,applyHeightMap,"	protected long[] applyHeightMap(short[] rawHeightmap) {
		long[] data = new long[37];
		int index = 0;
		for (int i = 0; i < 37; i++) {
			long l = 0L;
			for (int j = 0; j < 7 && index < 256; j++, index++) {"
11550,getHeightMap,"	protected long[] getHeightMap(CompoundTag root, Predicate<CompoundTag> matcher) {
		ListTag sections = Helper.getSectionsFromLevelFromRoot(root, ""Sections"");
		if (sections == null) {
			return new long[37];
		}

		ListTag[] palettes = new ListTag[16];
		long[][] blockStatesArray = new long[16][];
		sections.forEach(s -> {
			ListTag p = Helper.tagFromCompound(s, ""Palette"");"
11551,applyOffsetToItem,"	private void applyOffsetToItem(CompoundTag item, Point3i offset) {
		if (item == null) {
			return;
		}

		CompoundTag tag = Helper.tagFromCompound(item, ""tag"");
		if (tag == null) {
			return;
		}
"
11552,applyOffsetToTileEntity,"	private void applyOffsetToTileEntity(CompoundTag tileEntity, Point3i offset) {
		if (tileEntity == null) {
			return;
		}

		Helper.applyIntOffsetIfRootPresent(tileEntity, ""x"", ""y"", ""z"", offset);

		String id = Helper.stringFromCompound(tileEntity, ""id"", """");"
11555,applyOffsetToVillagerMemory,"	private void applyOffsetToVillagerMemory(CompoundTag memory, Point3i offset) {
		IntArrayTag mPos = Helper.tagFromCompound(memory, ""pos"");
		Helper.applyOffsetToIntArrayPos(mPos, offset);
		if (mPos == null) {
			ListTag lPos = Helper.tagFromCompound(memory, ""pos"");"
11557,applyOffsetToBiomes,"	private void applyOffsetToBiomes(IntArrayTag biomes, Point3i offset) {
		if (biomes == null || biomes.getValue() == null || biomes.getValue().length != 1024) {
			return;
		}

		int[] biomesArray = biomes.getValue();
		int[] newBiomes = new int[1024];"
11559,adjustBlockStateBits,"	protected long[] adjustBlockStateBits(ListTag palette, long[] blockStates, Map<Integer, Integer> oldToNewMapping) {
		int newBits = 32 - Integer.numberOfLeadingZeros(palette.size() - 1);
		newBits = Math.max(newBits, 4);

		long[] newBlockStates;
		if (newBits == blockStates.length / 64) {
			newBlockStates = blockStates;
		} else {"
11560,setPaletteIndex,"	protected void setPaletteIndex(int blockIndex, int paletteIndex, long[] blockStates) {
		int bits = blockStates.length >> 6;
		int indicesPerLong = (int) (64D / bits);
		int blockStatesIndex = blockIndex / indicesPerLong;
		int startBit = (blockIndex % indicesPerLong) * bits;
		blockStates[blockStatesIndex] = Bits.setBits(paletteIndex, blockStates[blockStatesIndex], startBit, startBit + bits);
	}"
11562,applyOffsetToTileEntity,"	private void applyOffsetToTileEntity(CompoundTag tileEntity, Point3i offset) {
		if (tileEntity == null) {
			return;
		}

		Helper.applyIntOffsetIfRootPresent(tileEntity, ""x"", ""y"", ""z"", offset);"
11571,getBiomeIndex,"	private int getBiomeIndex(int x, int y, int z) {
		return y * 16 + z * 4 + x;
	}"
11572,setBiomeAt,"	private void setBiomeAt(int[] biomes, int biomeX, int biomeY, int biomeZ, int biomeID) {
		if (biomes == null || biomes.length != 1024) {
			biomes = new int[1024];
			Arrays.fill(biomes, -1);"
11573,getBiomeAt,"	private int getBiomeAt(int[] biomes, int biomeX, int biomeY, int biomeZ) {
		if (biomes == null || biomes.length != 1024) {
			return -1;
		}"
11574,setSectionBiomes,"	private void setSectionBiomes(int biome, int[] destinationBiomes, int sectionY) {
		for (int y = 0; y < 4; y++) {
			int biomeY = sectionY * 4 + y;"
11575,copySectionBiomes,"	private void copySectionBiomes(int[] sourceBiomes, int[] destinationBiomes, int sectionY) {
		for (int y = 0; y < 4; y++) {
			int biomeY = sectionY * 4 + y;"
11578,forceBiome,"	public void forceBiome(CompoundTag data, BiomeRegistry.BiomeIdentifier biome) {
		CompoundTag level = Helper.levelFromRoot(data);
		if (level != null) {
			int[] biomes = new int[1024];"
11579,relocate,"	public boolean relocate(CompoundTag root, Point3i offset) {
		CompoundTag sections = Helper.tagFromCompound(root, ""Sections"");
		if (sections == null) {
			return false;
		}

		CompoundTag newSections = new CompoundTag();
"
11580,newEmptyChunk,"	public CompoundTag newEmptyChunk(Point2i absoluteLocation, int dataVersion) {
		CompoundTag root = new CompoundTag();
		root.put(""Sections"", new CompoundTag());
		root.putInt(""DataVersion"", dataVersion);
		return root;
	}"
11581,mergeChunks,"	public void mergeChunks(CompoundTag source, CompoundTag destination, List<Range> ranges, int yOffset) {
		mergeCompoundTags(source, destination, ranges, yOffset, ""Sections"");
	}"
11591,setLightPopulated,"	public void setLightPopulated(CompoundTag data, byte lightPopulated) {
		CompoundTag level = Helper.levelFromRoot(data);
		if (level != null) {
			level.putLong(""isLightOn"", lightPopulated);"
11592,getLightPopulated,"	public ByteTag getLightPopulated(CompoundTag data) {
		return Helper.tagFromLevelFromRoot(data, ""isLightOn"");
	}"
11593,getPaletteIndex,"	protected int getPaletteIndex(int blockIndex, long[] blockStates) {
		int bits = blockStates.length >> 6;
		double blockStatesIndex = blockIndex / (4096D / blockStates.length);
		int longIndex = (int) blockStatesIndex;
		int startBit = (int) ((blockStatesIndex - Math.floor(blockStatesIndex)) * 64D);
		if (startBit + bits > 64) {
			long prev = Bits.bitRange(blockStates[longIndex], startBit, 64);"
11594,getBlockAt,"	protected CompoundTag getBlockAt(int index, long[] blockStates, ListTag palette) {
		return palette.getCompound(getPaletteIndex(index, blockStates));
	}"
11595,applyHeightMap,"	protected long[] applyHeightMap(short[] rawHeightmap) {
		long[] data = new long[36];
		int offset = 0;
		int index = 0;
		for (int i = 0; i < 36; i++) {
			long l = 0L;
			for (int j = 0; j < 8 && index < 256; j++, index++) {"
11596,getHeightMap,"	protected long[] getHeightMap(CompoundTag root, Predicate<CompoundTag> matcher) {
		ListTag sections = Helper.getSectionsFromLevelFromRoot(root, ""Sections"");
		if (sections == null) {
			return new long[36];
		}

		ListTag[] palettes = new ListTag[16];
		long[][] blockStatesArray = new long[16][];
		sections.forEach(s -> {
			ListTag p = Helper.tagFromCompound(s, ""Palette"");"
11597,setHeightMap,"	protected void setHeightMap(CompoundTag root, String name, long[] heightmap) {
		CompoundTag level = root.getCompoundTag(""Level"");
		if (level == null) {
			return;
		}
		CompoundTag heightmaps = level.getCompoundOrDefault(""Heightmaps"", new CompoundTag());
		heightmaps.putLongArray(name, heightmap);"
11598,motionBlockingNoLeaves,"	public void motionBlockingNoLeaves(CompoundTag root) {
		setHeightMap(root, ""MOTION_BLOCKING_NO_LEAVES"", getHeightMap(root, blockState -> {
			StringTag name = blockState.getStringTag(""Name"");"
11599,motionBlocking,"	public void motionBlocking(CompoundTag root) {
		setHeightMap(root, ""MOTION_BLOCKING"", getHeightMap(root, blockState -> {
			StringTag name = blockState.getStringTag(""Name"");"
11600,oceanFloor,"	public void oceanFloor(CompoundTag root) {
		setHeightMap(root, ""OCEAN_FLOOR"", getHeightMap(root, blockState -> {
			StringTag name = blockState.getStringTag(""Name"");"
11601,worldSurface,"	public void worldSurface(CompoundTag root) {
		setHeightMap(root, ""WORLD_SURFACE"", getHeightMap(root, blockState -> {
			StringTag name = blockState.getStringTag(""Name"");
			if (name == null) {"
11608,newEmptyChunk,"	public CompoundTag newEmptyChunk(Point2i absoluteLocation, int dataVersion) {
		CompoundTag root = new CompoundTag();
		CompoundTag level = new CompoundTag();
		level.putInt(""xPos"", absoluteLocation.getX());
		level.putInt(""zPos"", absoluteLocation.getZ());
		level.putString(""Status"", ""postprocessed"");
		root.put(""Level"", level);
		root.putInt(""DataVersion"", dataVersion);
		return root;
	}"
11614,getHeightMap,"	protected int[] getHeightMap(CompoundTag root, Predicate<Short> matcher) {
		ListTag sections = Helper.getSectionsFromLevelFromRoot(root, ""Sections"");
		if (sections == null) {
			return new int[256];
		}

		byte[][] blocksArray = new byte[16][];
		for (CompoundTag s : sections.iterateType(CompoundTag.class)) {
			if (!s.containsKey(""Blocks"")) {"
11615,setHeightMap,"	protected void setHeightMap(CompoundTag root, int[] heightmap) {
		CompoundTag level = root.getCompoundTag(""Level"");
		if (level == null) {
			return;
		}"
11619,worldSurface,"	public void worldSurface(CompoundTag root) {
		setHeightMap(root, getHeightMap(root, block -> !nonWorldSurfaceBlocks.contains(block)));
	}"
11623,getEntities,"	public ListTag getEntities(ChunkData data) {
		return Helper.tagFromLevelFromRoot(data.region().getData(), ""Entities"", null);
	}"
11624,deleteEntities,"	public void deleteEntities(ChunkData data, List<Range> ranges) {
		ListTag entities = Helper.tagFromLevelFromRoot(data.region().getData(), ""Entities"", null);
		if (ranges == null) {
			if (entities != null) {"
11628,setLightPopulated,"	public void setLightPopulated(CompoundTag data, byte lightPopulated) {
		CompoundTag level = Helper.levelFromRoot(data);
		if (level != null) {
			level.putLong(""LightPopulated"", lightPopulated);"
11629,getLightPopulated,"	public ByteTag getLightPopulated(CompoundTag data) {
		return Helper.tagFromLevelFromRoot(data, ""LightPopulated"");
	}"
11630,getZPos,"	public IntTag getZPos(CompoundTag data) {
		return Helper.tagFromLevelFromRoot(data, ""zPos"");
	}"
11631,getYPos,"	public IntTag getYPos(CompoundTag data) {
		return null;
	}"
11632,getXPos,"	public IntTag getXPos(CompoundTag data) {
		return Helper.tagFromLevelFromRoot(data, ""xPos"");
	}"
11633,setLastUpdate,"	public void setLastUpdate(CompoundTag data, long lastUpdate) {
		CompoundTag level = Helper.levelFromRoot(data);
		if (level != null) {
			level.putLong(""Status"", lastUpdate);"
11634,getLastUpdate,"	public LongTag getLastUpdate(CompoundTag data) {
		return Helper.tagFromLevelFromRoot(data, ""LastUpdate"");
	}"
11636,setStatus,"	public void setStatus(CompoundTag data, StatusRegistry.StatusIdentifier status) {
		CompoundTag level = Helper.levelFromRoot(data);
		if (level != null) {
			level.putString(""Status"", status.getStatus());"
11637,getStatus,"	public StringTag getStatus(CompoundTag data) {
		return Helper.tagFromLevelFromRoot(data, ""Status"");
	}"
11638,setInhabitedTime,"	public void setInhabitedTime(CompoundTag data, long inhabitedTime) {
		CompoundTag level = Helper.levelFromRoot(data);
		if (level != null) {
			level.putLong(""InhabitedTime"", inhabitedTime);"
11639,getInhabitedTime,"	public LongTag getInhabitedTime(CompoundTag data) {
		return Helper.tagFromLevelFromRoot(data, ""InhabitedTime"");
	}"
11640,deleteSections,"	public void deleteSections(CompoundTag data, List<Range> ranges) {
		ListTag sections = Helper.tagFromLevelFromRoot(data, ""Sections"");
		if (sections == null) {
			return;
		}"
11641,getSections,"	public ListTag getSections(CompoundTag data) {
		return Helper.tagFromLevelFromRoot(data, ""Sections"");
	}"
11642,getStructureStarts,"	public CompoundTag getStructureStarts(CompoundTag data) {
		CompoundTag structures = Helper.tagFromLevelFromRoot(data, ""Structures"");
		return Helper.tagFromCompound(structures, ""Starts"");
	}"
11643,getStructureReferences,"	public CompoundTag getStructureReferences(CompoundTag data) {
		CompoundTag structures = Helper.tagFromLevelFromRoot(data, ""Structures"");
		return Helper.tagFromCompound(structures, ""References"");
	}"
11644,getTileEntities,"	public ListTag getTileEntities(CompoundTag data) {
		return Helper.tagFromLevelFromRoot(data, ""TileEntities"");
	}"
11645,getBlockAmount,"	public int getBlockAmount(CompoundTag data, String[] blocks) {
		ListTag sections = Helper.tagFromLevelFromRoot(data, ""Sections"", null);
		if (sections == null) {
			return 0;
		}

		int result = 0;"
11646,filterSections,"	private int filterSections(Tag sectionA, Tag sectionB) {
		return Helper.numberFromCompound(sectionB, ""Y"", -1).intValue() - Helper.numberFromCompound(sectionA, ""Y"", -1).intValue();
	}"
11647,isEmpty,"	private boolean isEmpty(int blockID) {
		return blockID == 0 || blockID == 166 || blockID == 217;
	}"
11648,getAverageHeight,"	public int getAverageHeight(CompoundTag data) {
		ListTag sections = Helper.tagFromLevelFromRoot(data, ""Sections"", null);
		if (sections == null) {
			return 0;
		}

		sections.sort(this::filterSections);
"
11649,createEmptySection,"	protected CompoundTag createEmptySection(int y) {
		CompoundTag newSection = new CompoundTag();
		newSection.putByte(""Y"", (byte) y);
		newSection.putByteArray(""Blocks"", new byte[4096]);
		newSection.putByteArray(""Data"", new byte[2048]);
		return newSection;
	}"
11651,forceBiome,"	public void forceBiome(CompoundTag data, BiomeRegistry.BiomeIdentifier biome) {
		CompoundTag level = Helper.levelFromRoot(data);
		if (level != null) {
			byte[] biomes = new byte[256];"
11652,changeBiome,"	public void changeBiome(CompoundTag data, BiomeRegistry.BiomeIdentifier biome) {
		ByteArrayTag biomesTag = Helper.tagFromLevelFromRoot(data, ""Biomes"", null);
		if (biomesTag != null) {
			Arrays.fill(biomesTag.getValue(), (byte) biome.getID());"
11653,matchAnyBiome,"	public boolean matchAnyBiome(CompoundTag data, Collection<BiomeRegistry.BiomeIdentifier> biomes) {
		ByteArrayTag biomesTag = Helper.tagFromLevelFromRoot(data, ""Biomes"", null);
		if (biomesTag == null) {
			return false;
		}
"
11654,matchBiomes,"	public boolean matchBiomes(CompoundTag data, Collection<BiomeRegistry.BiomeIdentifier> biomes) {
		ByteArrayTag biomesTag = Helper.tagFromLevelFromRoot(data, ""Biomes"", null);
		if (biomesTag == null) {
			return false;
		}
"
11655,equals,"		public boolean equals(Object other) {
			return other instanceof Block && ((Block) other).id == id && ((Block) other).data == data;
		}"
11656,hashCode,"		public int hashCode() {
			return Objects.hash(id, data);
		}"
11657,toString,"		public String toString() {
			return ""{"" + id + "":"" + Arrays.toString(data.toArray()) + ""}"";
		}"
11658,paletteEquals,"	public boolean paletteEquals(CompoundTag data, Collection<String> names) {
		ListTag sections = Helper.tagFromLevelFromRoot(data, ""Sections"", null);
		if (sections == null) {
			return false;
		}

		Set<Block> blocks = new HashSet<>();
		List<BlockData> blockData = new ArrayList<>(names.size());
		for (String name : names) {
			BlockData[] bd = mapping.get(name);"
11659,matchAnyBlockName,"	public boolean matchAnyBlockName(CompoundTag data, Collection<String> names) {
		ListTag sections = Helper.tagFromLevelFromRoot(data, ""Sections"", null);
		if (sections == null) {
			return false;
		}
		for (String name : names) {"
11660,matchBlockNames,"	public boolean matchBlockNames(CompoundTag data, Collection<String> names) {
		ListTag sections = Helper.tagFromLevelFromRoot(data, ""Sections"", null);
		if (sections == null) {
			return false;
		}
		int c = 0;
		nameLoop:"
11661,setMax,"	public boolean setMax(String raw) {
		setRawMax(raw);
		if (raw == null || raw.isEmpty()) {
			return setMaxInt(null);
		}"
11662,setMin,"	public boolean setMin(String raw) {
		setRawMin(raw);
		if (raw == null || raw.isEmpty()) {
			return setMinInt(null);
		}"
11664,dpToPx,"  public static int dpToPx(float dp, Resources resources) {
    float px =
        TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, resources.getDisplayMetrics());
    return (int) px;"
11665,setType,"  public void setType(int type) {
    this.mType = type;
    setTheme(mColor, type);
  }"
11666,setColor,"  public void setColor(int color) {
    this.mColor = color;
    setTheme(color, mType);
  }"
11667,setBounceDuration,"  public void setBounceDuration(int bounceDuration) {
    this.mBounceDuration = bounceDuration;
  }"
11668,setRotationAngle,"  public void setRotationAngle(int rotationAngle) {
    this.mRotationAngle = rotationAngle;
  }"
11669,setRotationDuration,"  public void setRotationDuration(int rotationDuration) {
    this.mRotationDuration = rotationDuration;
  }"
11670,setNotFavoriteResource,"  public void setNotFavoriteResource(int notFavoriteResource) {
    this.mNotFavoriteResource = notFavoriteResource;
  }"
11671,setFavoriteResource,"  public void setFavoriteResource(int favoriteResource) {
    this.mFavoriteResource = favoriteResource;
  }"
11672,setAnimateUnfavorite,"  public void setAnimateUnfavorite(boolean animation) {
    this.mAnimateUnfavorite = animation;
  }"
11673,setAnimateFavorite,"  public void setAnimateFavorite(boolean animation) {
    this.mAnimateFavorite = animation;
  }"
11674,setPadding,"  public void setPadding(int padding) {
    this.mPadding = Utils.dpToPx(padding, getResources());
    setPadding(mPadding, mPadding, mPadding, mPadding);
  }"
11675,setSize,"  public void setSize(int size) {
    this.mButtonSize = Utils.dpToPx(size, getResources());
  }"
11677,type,"    public Builder type(int type) {
      this.mType = type;
      mCustomResources = false;
      return this;
    }"
11678,color,"    public Builder color(int color) {
      this.mColor = color;
      mCustomResources = false;
      return this;
    }"
11679,bounceDuration,"    public Builder bounceDuration(int bounceDuration) {
      this.mBounceDuration = bounceDuration;
      return this;
    }"
11680,rotationAngle,"    public Builder rotationAngle(int rotationAngle) {
      this.mRotationAngle = rotationAngle;
      return this;
    }"
11681,rotationDuration,"    public Builder rotationDuration(int rotationDuration) {
      this.mRotationDuration = rotationDuration;
      return this;
    }"
11682,notFavoriteResource,"    public Builder notFavoriteResource(int recsource) {
      this.mNotFavoriteResource = recsource;
      mCustomResources = true;
      return this;
    }"
11683,favoriteResource,"    public Builder favoriteResource(int resource) {
      this.mFavoriteResource = resource;
      mCustomResources = true;
      return this;
    }"
11684,animateUnfavorite,"    public Builder animateUnfavorite(boolean animation) {
      this.mAnimateUnfavorite = animation;
      return this;
    }"
11685,animateFavorite,"    public Builder animateFavorite(boolean animation) {
      this.mAnimateFavorite = animation;
      return this;
    }"
11686,favorite,"    public Builder favorite(boolean favorite) {
      this.mFavorite = favorite;
      return this;
    }"
11687,padding,"    public Builder padding(int padding) {
      this.mPadding = padding;
      return this;
    }"
11688,size,"    public Builder size(int size) {
      this.mButtonSize = size;
      return this;
    }"
11689,onAnimationEnd,"      @Override public void onAnimationEnd(Animator animation) {
        if (mOnFavoriteAnimationEndListener != null) {
          mOnFavoriteAnimationEndListener.onAnimationEnd(MaterialFavoriteButton.this, mFavorite);"
11690,onAnimationStart,"      @Override public void onAnimationStart(Animator animation) {
        if (mFavorite) {
          setImageResource(mFavoriteResource);"
11692,updateFavoriteButton,"  private void updateFavoriteButton(boolean favorite, boolean animate, boolean suppressOnChange) {
    if (mFavorite != favorite) {
      mFavorite = favorite;"
11693,toggleFavorite,"  public void toggleFavorite(boolean animated) {
    if (!mFavorite) {
      boolean orig = mAnimateFavorite;"
11694,toggleFavorite,"  public void toggleFavorite() {
    setFavorite(!mFavorite);
  }"
11695,setFavorite,"  @Deprecated public void setFavorite(boolean favorite, boolean animated) {
    updateFavoriteButton(favorite, animated, false);
  }"
11696,setFavoriteSuppressListener,"  public void setFavoriteSuppressListener(boolean favorite) {
    updateFavoriteButton(favorite, mAnimateFavorite, true);
  }"
11697,setFavoriteAnimated,"  public void setFavoriteAnimated(boolean favorite) {
    updateFavoriteButton(favorite, true, false);
  }"
11698,setFavorite,"  public void setFavorite(boolean favorite) {
    updateFavoriteButton(favorite, false, false);
  }"
11699,isFavorite,"  public boolean isFavorite() {
    return mFavorite;
  }"
11700,onMeasure,"  @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    setMeasuredDimension(mButtonSize, mButtonSize);
  }"
11701,setResources,"  private void setResources() {
    if (mFavorite) {
      setImageResource(mFavoriteResource);"
11702,setTheme,"  private void setTheme(int color, int type) {
    if (color == STYLE_BLACK) {
      if (type == STYLE_STAR) {"
11703,getTypedArray,"  private TypedArray getTypedArray(Context context, AttributeSet attributeSet, int[] attr) {
    return context.obtainStyledAttributes(attributeSet, attr, 0, 0);
  }"
11704,initAttributes,"  private void initAttributes(Context context, AttributeSet attributeSet) {
    TypedArray attr = getTypedArray(context, attributeSet, R.styleable.MaterialFavoriteButton);
    if (attr != null) {
      try {"
11705,onClick,"        @Override public void onClick(View v) {
          toggleFavorite();
        }"
11707,setOnFavoriteAnimationEndListener,"  public void setOnFavoriteAnimationEndListener(OnFavoriteAnimationEndListener listener) {
    mOnFavoriteAnimationEndListener = listener;
  }"
11708,onAnimationEnd,"    void onAnimationEnd(MaterialFavoriteButton buttonView, boolean favorite);
  }"
11709,setOnFavoriteChangeListener,"  public void setOnFavoriteChangeListener(OnFavoriteChangeListener listener) {
    mOnFavoriteChangeListener = listener;
  }"
11710,onFavoriteChanged,"    void onFavoriteChanged(MaterialFavoriteButton buttonView, boolean favorite);
  }"
11711,onStickerSelected,"    public void onStickerSelected(String categoryName, String stickerName, String stickerBitmapPath) {
        Toast.makeText(getApplicationContext(), stickerBitmapPath, Toast.LENGTH_SHORT).show();
        Log.e(""CSDN_LQR"", ""stickerBitmapPath : "" + stickerBitmapPath);
    }"
11712,onEmojiSelected,"    public void onEmojiSelected(String key) {
        Log.e(""CSDN_LQR"", ""onEmojiSelected : "" + key);
    }"
11713,onBackPressed,"    public void onBackPressed() {
        if (mElEmotion.isShown() || mLlMore.isShown()) {
            mEmotionKeyboard.interceptBackPress();"
11714,closeBottomAndKeyboard,"    private void closeBottomAndKeyboard() {
        mElEmotion.setVisibility(View.GONE);
        mLlMore.setVisibility(View.GONE);
        if (mEmotionKeyboard != null) {
            mEmotionKeyboard.interceptBackPress();"
11715,hideMoreLayout,"    private void hideMoreLayout() {
        mLlMore.setVisibility(View.GONE);
    }"
11716,showMoreLayout,"    private void showMoreLayout() {
        mLlMore.setVisibility(View.VISIBLE);
    }"
11717,hideEmotionLayout,"    private void hideEmotionLayout() {
        mElEmotion.setVisibility(View.GONE);
        mIvEmo.setImageResource(R.mipmap.ic_cheat_emo);
    }"
11718,showEmotionLayout,"    private void showEmotionLayout() {
        mElEmotion.setVisibility(View.VISIBLE);
        mIvEmo.setImageResource(R.mipmap.ic_cheat_keyboard);
    }"
11719,hideAudioButton,"    private void hideAudioButton() {
        mBtnAudio.setVisibility(View.GONE);
        mEtContent.setVisibility(View.VISIBLE);
        mIvAudio.setImageResource(R.mipmap.ic_cheat_voice);
    }"
11720,showAudioButton,"    private void showAudioButton() {
        mBtnAudio.setVisibility(View.VISIBLE);
        mEtContent.setVisibility(View.GONE);
        mIvAudio.setImageResource(R.mipmap.ic_cheat_keyboard);

        if (mFlEmotionView.isShown()) {"
11721,onEmotionButtonOnClickListener,"            public boolean onEmotionButtonOnClickListener(View view) {
                switch (view.getId()) {
                    case R.id.ivEmo:
                        if (!mElEmotion.isShown()) {"
11724,afterTextChanged,"            public void afterTextChanged(Editable s) {
"
11725,onTextChanged,"            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (mEtContent.getText().toString().trim().length() > 0) {
                    mBtnSend.setVisibility(View.VISIBLE);"
11726,beforeTextChanged,"            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
"
11727,onClick,"            public void onClick(View v) {
                if (mBtnAudio.isShown()) {
                    hideAudioButton();"
11728,onTouch,"            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        closeBottomAndKeyboard();"
11729,onEmotionSettingClick,"            public void onEmotionSettingClick(View view) {
                Toast.makeText(getApplicationContext(), ""setting"", Toast.LENGTH_SHORT).show();
            }"
11730,onEmotionAddClick,"            public void onEmotionAddClick(View view) {
                Toast.makeText(getApplicationContext(), ""add"", Toast.LENGTH_SHORT).show();
            }"
11731,initListener,"    public void initListener() {
        mElEmotion.setEmotionSelectedListener(this);
        mElEmotion.setEmotionAddVisiable(true);
        mElEmotion.setEmotionSettingVisiable(true);
        mElEmotion.setEmotionExtClickListener(new IEmotionExtClickListener() {
            @Override
            public void onEmotionAddClick(View view) {
                Toast.makeText(getApplicationContext(), ""add"", Toast.LENGTH_SHORT).show();
            }
"
11732,initView,"    public void initView() {
        mElEmotion.attachEditText(mEtContent);
        initEmotionKeyboard();
    }"
11733,onResume,"    protected void onResume() {
        super.onResume();
        mEtContent.clearFocus();
    }"
11734,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_wx_session);
        ButterKnife.bind(this);

        initView();
        initListener();"
11735,initEmotionKeyboard,"    private void initEmotionKeyboard() {
        mEmotionKeyboard = EmotionKeyboard.with(this);
        mEmotionKeyboard.bindToContent(mLlContent);
        mEmotionKeyboard.bindToEmotionButton(mIvEmo);
        mEmotionKeyboard.bindToEditText(mEtContent);
        mEmotionKeyboard.setEmotionLayout(mElEmotion);
    }"
11736,onStickerSelected,"            public void onStickerSelected(String categoryName, String stickerName, String stickerBitmapPath) {
                String stickerPath = stickerBitmapPath;
                Toast.makeText(getApplicationContext(), stickerPath, Toast.LENGTH_SHORT).show();
            }"
11737,onEmojiSelected,"            public void onEmojiSelected(String key) {
"
11740,initView,"    private void initView() {
        mElEmotion.attachEditText(mEtContent);
        mElEmotion.setEmotionAddVisiable(true);
        mElEmotion.setEmotionSettingVisiable(true);
        mElEmotion.setEmotionExtClickListener(new IEmotionExtClickListener() {
            @Override
            public void onEmotionAddClick(View view) {"
11741,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_simple_session);
        ButterKnife.bind(this);

        initEmotionKeyboard();
        initView();"
11742,onClick,"            public void onClick(View v) {
                Intent intent = new Intent(MainActivity.this, WxSessionActivity.class);
                startActivity(intent);
            }"
11743,onClick,"            public void onClick(View v) {
                Intent intent = new Intent(MainActivity.this, SimpleSessionActivity.class);
                startActivity(intent);
            }"
11744,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ButterKnife.bind(this);

        mBtnSimple.setOnClickListener(new View.OnClickListener() {
            @Override"
11745,displayImage,"            public void displayImage(Context context, String path, ImageView imageView) {
                Glide.with(context).load(path).centerCrop().diskCacheStrategy(DiskCacheStrategy.SOURCE).into(imageView);
            }"
11746,onCreate,"    public void onCreate() {
        super.onCreate();
        LQREmotionKit.init(this, new IImageLoader() {
            @Override"
11748,drawableStateChanged,"    protected void drawableStateChanged() {
        if (touchFeedbackDrawable != null) {
            touchFeedbackDrawable.setState(getDrawableState());
            invalidate();"
11749,dispatchDraw,"    protected void dispatchDraw(Canvas canvas) {
        super.dispatchDraw(canvas);
        if (touchFeedbackDrawable != null) {
            touchFeedbackDrawable.setBounds(0, 0, getWidth(), getHeight());"
11751,getColor,"    private Drawable getColor(TypedArray a) {
        return new ColorDrawable(
                a.getColor(R.styleable.SelectorOptions_selectorColor,"
11752,setSelector,"    private void setSelector(TypedArray a) {
        touchFeedbackDrawable = new StateListDrawable();
        touchFeedbackDrawable.addState(
                new int[]{android.R.attr.state_pressed},"
11753,onScrollChanged,"    protected void onScrollChanged(int l, int t, int oldl, int oldt) {
        super.onScrollChanged(l, t, oldl, oldt);

"
11754,setObserver,"    public void setObserver(ListViewObserverDelegate observer) {
        mObserver = observer;
    }"
11755,getChildInTheMiddle,"    private View getChildInTheMiddle() {
        return getChildAt(getChildCount() / 2);
    }"
11756,onListScroll,"        public void onListScroll(View view, float deltaY);
    }"
11757,getDivider,"    public Drawable getDivider() {
        return mDivider;
    }"
11758,getDividerHeight,"    public int getDividerHeight() {
        return mDividerHeight;
    }"
11759,getGap,"    public int getGap() {
        return mGap;
    }"
11760,getSpeed,"    public int getSpeed() {
        return mSpeed;
    }"
11761,getGapColor,"    public int getGapColor() {
        return mGapColor;
    }"
11762,getListViewRight,"    public ListView getListViewRight() {
        return mListViewRight;
    }"
11763,getListViewLeft,"    public ListView getListViewLeft() {
        return mListViewLeft;
    }"
11764,setAdapters,"    public void setAdapters(CircularLoopAdapter adapter, CircularLoopAdapter adapter2) {
        mListViewLeft.setAdapter(adapter);
        mListViewRight.setAdapter(adapter2);
        mListViewLeft.setSelection(Integer.MAX_VALUE / 2);
        mListViewRight.setSelection(Integer.MAX_VALUE / 2);
    }"
11765,setManualScrollFaster,"    public ListBuddiesLayout setManualScrollFaster(int option) {
        isManualScrollLeftListFaster = option == 1;
        return this;
    }"
11766,setAutoScrollFaster,"    public ListBuddiesLayout setAutoScrollFaster(int option) {
        isAutoScrollLeftListFaster = option == 1;
        calibrateSpeed();
        return this;
    }"
11767,setGapColor,"    public ListBuddiesLayout setGapColor(int color) {
        mGapColor = color;
        setGap();
        return this;
    }"
11768,setDivider,"    public ListBuddiesLayout setDivider(Drawable drawable) {
        mDivider = drawable;
        setDividerAndHeight(drawable, mDividerHeight);
        return this;
    }"
11769,setDividerHeight,"    public ListBuddiesLayout setDividerHeight(int value) {
        mDividerHeight = value;
        setDividerAndHeight(mDivider, value);
        return this;
    }"
11770,setSpeed,"    public ListBuddiesLayout setSpeed(int value) {
        mSpeed = value;
        calibrateSpeed();
        return this;
    }"
11771,setGap,"    public ListBuddiesLayout setGap(int value) {
        mGap = value;
        setGap();
        return this;
    }"
11772,setOnItemClickListener,"    public void setOnItemClickListener(OnBuddyItemClickListener listener) {
        mItemBuddyListener = listener;
    }"
11773,onBuddyItemClicked,"        void onBuddyItemClicked(AdapterView<?> parent, View view, int buddy, int position, long id);
    }"
11774,getSpeed,"    private int getSpeed(boolean isCalculationForLeft, float deltaY) {
        int speed;

        if (isManualScrollLeftListFaster && isCalculationForLeft || !isManualScrollLeftListFaster && !isCalculationForLeft) {
            speed = (int) -deltaY * 2;"
11775,onListScroll,"    public void onListScroll(View view, float deltaY) {
        int speed;
        if (view.getId() == mListViewLeft.getId() && !isLeftListEnabled) {
            speed = getSpeed(false, deltaY);"
11776,getPosition,"    private int getPosition(ListView list, int position) {
        return ((CircularLoopAdapter) list.getAdapter()).getCircularPosition(position);
    }"
11778,cancelClick,"    private void cancelClick(float eventY) {
        if (mDownView != null && (Math.abs(mDownEventY - eventY) > CANCEL_CLICK_LIMIT)) {
            mDownView.setPressed(false);"
11779,actionMove,"    private void actionMove(MotionEvent event) {
        cancelClick(event.getY());
    }"
11780,actionUp,"    private void actionUp(ListView list) {
        mActionDown = false;
        performClick(list);
    }"
11781,run,"                public void run() {
                    if (isUserInteracting) {
                        if (mDownView != null) {"
11782,setSelectorPressed,"    private void setSelectorPressed(ListView list) {
        if (mDownView != null) {
            mDownPosition = list.getPositionForView(mDownView);"
11783,findViewClicked,"    private void findViewClicked(MotionEvent event, float eventY, ListView list) {
        mChildCount = list.getChildCount();
        mListViewCoords = new int[2];
        list.getLocationOnScreen(mListViewCoords);
        int x = (int) event.getRawX() - mListViewCoords[0];
        int y = (int) event.getRawY() - mListViewCoords[1];
        View child;
        for (int i = 0; i < mChildCount; i++) {
            child = list.getChildAt(i);"
11784,startClickSelection,"    private void startClickSelection(MotionEvent event, ListView list, float eventY) {
        if (!isUserInteracting || mSpeed == 0) {
            findViewClicked(event, eventY, list);"
11785,toogleListView,"    private void toogleListView(View v) {
        if (mLastViewTouchId != v.getId()) {
            if (mLastViewTouchId == mListViewLeft.getId()) {"
11786,actionDown,"    private void actionDown(ListView list, MotionEvent event) {
        mActionDown = true;
        toogleListView(list);
        mLastViewTouchId = list.getId();
        startClickSelection(event, list, event.getY());
    }"
11787,onTouch,"    public boolean onTouch(View v, MotionEvent event) {
        ListView list = (ListView) v;
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                actionDown(list, event);"
11788,setGapWidth,"    private void setGapWidth(int width) {
        if (mGapView != null) {
            LinearLayout.LayoutParams params = (LayoutParams) mGapView.getLayoutParams();"
11789,createGap,"    private void createGap() {
        if (mViewStubGap == null) {
            mViewStubGap = (ViewStub) findViewById(R.id.gap);
        }
        if (mGapView == null) {
            mGapView = mViewStubGap.inflate();
        }"
11790,setLeftListMargin,"    private void setLeftListMargin(int marginRigth) {
        if (mListViewLeft != null) {
            LinearLayout.LayoutParams params = (LayoutParams) mListViewLeft.getLayoutParams();"
11791,emptyGap,"    private void emptyGap() {
        setLeftListMargin(mGap);
        if (mGapView != null) {
            mGapView.setVisibility(View.GONE);"
11792,setGapColor,"    private void setGapColor() {
        if (mGapView != null && mGapColor != ATTR_NOT_SET) {
            mGapView.setBackgroundColor(mGapColor);"
11793,setGap,"    private void setGap() {
        if (mGapColor != ATTR_NOT_SET) {
            createGap();"
11794,setHeightDivider,"    private void setHeightDivider(int dividerHeight) {
        if (dividerHeight > ATTR_NOT_SET) {
            mListViewLeft.setDividerHeight(dividerHeight);"
11795,setListsDivider,"    private void setListsDivider(Drawable drawable) {
        if (drawable != null) {
            mListViewLeft.setDivider(drawable);"
11796,setDividerAndHeight,"    private void setDividerAndHeight(Drawable drawable, int dividerHeight) {
        setListsDivider(drawable);
        setHeightDivider(dividerHeight);
    }"
11797,applyViewParams,"    private void applyViewParams() {
        setGap();
        setDividerAndHeight(mDivider, mDividerHeight);
    }"
11798,forceScroll,"    private void forceScroll() {
        MotionEvent event = MotionEvent.obtain(System.currentTimeMillis(), System.currentTimeMillis(), MotionEvent.ACTION_MOVE, 570, -1, 0);
        mScrollHelper.onTouch(mListViewLeft, event);
    }"
11799,run,"            public void run() {
                forceScroll();
            }"
11800,startAutoScroll,"    private void startAutoScroll() {
        mListViewLeft.post(new Runnable() {
            @Override"
11801,isEnable,"    private boolean isEnable() {
        return mSpeed != 0;
    }"
11802,canTargetScrollVertically,"            public boolean canTargetScrollVertically(int i) {
                return true;
            }"
11803,canTargetScrollHorizontally,"            public boolean canTargetScrollHorizontally(int i) {
                return false;
            }"
11804,scrollTargetBy,"            public void scrollTargetBy(int deltaX, int deltaY) {
                mListViewLeft.smoothScrollBy(mSpeedLeft, 0);
                mListViewRight.smoothScrollBy(mSpeedRight, 0);
            }"
11805,setScrollHelpers,"    private void setScrollHelpers() {
        mScrollHelper = new ListBuddiesAutoScrollHelper(mListViewLeft) {
            @Override
            public void scrollTargetBy(int deltaX, int deltaY) {
                mListViewLeft.smoothScrollBy(mSpeedLeft, 0);"
11806,setListState,"    private void setListState(boolean isEnabled, boolean isLeftList) {
        if (isLeftList) {
            isLeftListEnabled = isEnabled;"
11807,isOtherListEnable,"    private boolean isOtherListEnable(boolean isLeftList) {
        boolean result;
        if (isLeftList) {
            result = isRightListEnabled;
        } else {"
11808,forceScrollIfNeeded,"    private void forceScrollIfNeeded(boolean isListEnabled) {
        if (isUserInteracting && isListEnabled) {
            isUserInteracting = false;"
11809,onScroll,"            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount,
                                 int totalItemCount) {"
11810,onScrollStateChanged,"            public void onScrollStateChanged(AbsListView view, int state) {
                switch (state) {
                    case SCROLL_STATE_IDLE:"
11811,setOnListScrollListener,"    private void setOnListScrollListener(ObservableListView list, final boolean isLeftList) {
        list.setOnScrollListener(new AbsListView.OnScrollListener() {
            @Override"
11812,setListeners,"    private void setListeners() {
        mListViewLeft.setOnTouchListener(this);
        mListViewLeft.setObserver(this);
        setOnListScrollListener(mListViewLeft, true);
        mListViewRight.setOnTouchListener(this);
        mListViewRight.setObserver(this);
        setOnListScrollListener(mListViewRight, false);
    }"
11826,getNovelFullInfo,"	static public NovelFullInfo getNovelFullInfo(String xml) {
		try {
			XmlPullParserFactory factory = XmlPullParserFactory.newInstance();"
11827,getNovelShortInfoBySearching,"	static public NovelListWithInfo getNovelShortInfoBySearching(String xml) {
		try {
			XmlPullParserFactory factory = XmlPullParserFactory.newInstance();"
11829,getVolumeList,"	static public ArrayList<VolumeList> getVolumeList(String xml) {
		try {
			XmlPullParserFactory factory = XmlPullParserFactory.newInstance();"
11830,getNovelIntro,"	static public NovelIntro getNovelIntro(String xml) {
		try {
			XmlPullParserFactory factory = XmlPullParserFactory.newInstance();"
11831,getNovelListWithInfo,"	static public ArrayList<NovelListWithInfo> getNovelListWithInfo(String xml) {
		try {
			XmlPullParserFactory factory = XmlPullParserFactory.newInstance();"
11832,getNovelListWithInfoPageNum,"	static public int getNovelListWithInfoPageNum(String xml) {
		try {
			XmlPullParserFactory factory = XmlPullParserFactory.newInstance();
			XmlPullParser xmlPullParser = factory.newPullParser();"
11834,onProgressUpdate,"		protected void onProgressUpdate(Integer... values) {
			switch (values[0]) {
			case 0:"
11835,doInBackground,"		protected Integer doInBackground(List<NameValuePair>... params) {

			try {
				for (int j = 0; j < 3; j++) {"
11838,onPostExecute,"		protected void onPostExecute(byte[] result) {
			TextView ttt = (TextView) parentActivity
					.findViewById(R.id.textTestMain);
			if (ttt == null) {
				Log.v(""MewX-Main"", ""TextView ttt == null"");
				return;"
11841,onClick,"					public void onClick(View view) {
						resideMenu.openMenu(ResideMenu.DIRECTION_LEFT);
					}"
11845,onBackPressed,"    public void onBackPressed() {
        super.onBackPressed();
        overridePendingTransition(0, R.anim.fade_out);
    }"
11846,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem menuItem) {
        switch (menuItem.getItemId()) {
            case android.R.id.home:
                onBackPressed();"
11849,onResume,"    protected void onResume() {
        super.onResume();

        showNavigationBar();"
11857,onKeyDown,"    public boolean onKeyDown(int keyCode, KeyEvent event) {
        switch (keyCode) {
            case KeyEvent.KEYCODE_VOLUME_DOWN:
                TextListLayout.setBackgroundColor(getResources().getColor(R.color.reader_default_bg_black));"
11858,onDestroy,"    protected void onDestroy() {
        super.onDestroy();

        if (pDialog != null)
            pDialog.dismiss();"
11860,onPause,"    protected void onPause() {
        super.onPause();

        saveRecord();"
11862,doInBackground,"                                protected String doInBackground(String... params) {
                                    GlobalConfig.saveNovelContentImage(params[0]);
                                    String name = GlobalConfig.generateImageFileNameByURL(params[0]);
                                    return GlobalConfig.getAvailableNovelContentImagePath(name);
                                }"
11863,onPostExecute,"        protected void onPostExecute(Integer result) {
            if (result == -100) {
                    Toast.makeText(VerticalReaderActivity.this,
                            getResources().getString(R.string.system_network_error),
                            Toast.LENGTH_LONG).show();
                if (pDialog != null)"
11864,doInBackground,"        protected Integer doInBackground(ContentValues... params) {

            try {
                String xml;"
11865,getNovelContent,"    private void getNovelContent() {
        ContentValues cv = Wenku8API.getNovelContent(aid, cid, GlobalConfig.getCurrentLang());

        final asyncNovelContentTask ast = new asyncNovelContentTask();
        ast.execute(cv);

        pDialog = new MaterialDialog.Builder(this)
                .theme(Theme.LIGHT)
                .title(R.string.sorry_old_engine_preprocess)"
11867,onTouch,"            public boolean onTouch(View v, MotionEvent event) {
                return gestureDetector.onTouchEvent(event);
            }"
11868,onFling,"                public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
                    return false;
                }"
11869,onLongPress,"                public void onLongPress(MotionEvent e) {
"
11870,onScroll,"                public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
                    return false;
                }"
11872,onShowPress,"                public void onShowPress(MotionEvent e) {
                }"
11873,onDown,"                public boolean onDown(MotionEvent e) {
                    return false;
                }"
11875,run,"        public void run() {
            VerticalReaderActivity.this.findViewById(R.id.content_scrollview)
                    .scrollTo(0, GlobalConfig.getReadSavesRecord(cid, TextListLayout.getMeasuredHeight()));"
11876,newInstance,"    public static GestureDetector newInstance(Context context,
                                              OnGestureListener listener) {
        final int sdkVersion = Build.VERSION.SDK_INT;
        GestureDetector detector;

        if (sdkVersion < Build.VERSION_CODES.ECLAIR) {
            detector = new CupcakeGestureDetector(context);"
11877,createMatchWrapParams,"  public static final FrameLayout.LayoutParams createMatchWrapParams() {
    return createLayoutParams(
        ViewGroup.LayoutParams.MATCH_PARENT,"
11878,createWrapMatchParams,"  public static final FrameLayout.LayoutParams createWrapMatchParams() {
    return createLayoutParams(
        ViewGroup.LayoutParams.WRAP_CONTENT,"
11879,createWrapParams,"  public static final FrameLayout.LayoutParams createWrapParams() {
    return createLayoutParams(
        ViewGroup.LayoutParams.WRAP_CONTENT,"
11880,createMatchParams,"  public static final FrameLayout.LayoutParams createMatchParams() {
    return createLayoutParams(
        ViewGroup.LayoutParams.MATCH_PARENT,"
11881,createLayoutParams,"  public static final FrameLayout.LayoutParams createLayoutParams(int width, int height) {
    return new FrameLayout.LayoutParams(width, height);
  }"
11882,dpToPx,"  public static final int dpToPx(float dp, Resources res) {
    return (int) TypedValue.applyDimension(
        TypedValue.COMPLEX_UNIT_DIP,"
11883,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem menuItem) {
        if (menuItem.getItemId() == android.R.id.home) {
            onBackPressed();
        }"
11884,onPostExecute,"        protected void onPostExecute(Wenku8Error.ErrorCode i) {
            super.onPostExecute(i);

            md.dismiss();
            switch(i) {"
11886,onPreExecute,"        protected void onPreExecute() {
            super.onPreExecute();
            md = new MaterialDialog.Builder(UserLoginActivity.this)
                    .theme(Theme.LIGHT)"
11889,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_user_info, menu);

        return true;"
11890,onPostExecute,"        protected void onPostExecute(Wenku8Error.ErrorCode errorCode) {
            super.onPostExecute(errorCode);

            if(errorCode == Wenku8Error.ErrorCode.SYSTEM_1_SUCCEEDED || errorCode == Wenku8Error.ErrorCode.SYSTEM_4_NOT_LOGGED_IN) {
                LightUserSession.logOut();
                Toast.makeText(UserInfoActivity.this, ""Logged out!"", Toast.LENGTH_SHORT).show();"
11891,doInBackground,"        protected Wenku8Error.ErrorCode doInBackground(Integer... params) {

            byte[] b = LightNetwork.LightHttpPostConnection(Wenku8API.BASE_URL, Wenku8API.getUserLogoutParams());
            if(b == null) return Wenku8Error.ErrorCode.NETWORK_ERROR;
"
11892,onPreExecute,"        protected void onPreExecute() {
            super.onPreExecute();

            md = new MaterialDialog.Builder(UserInfoActivity.this)"
11893,onPositive,"                                    public void onPositive(MaterialDialog dialog) {
                                        super.onPositive(dialog);
                                        AsyncLogout al = new AsyncLogout();
                                        al.execute();
                                    }"
11894,onClick,"                    public void onClick(View v) {
                        new MaterialDialog.Builder(UserInfoActivity.this)
                                .callback(new MaterialDialog.ButtonCallback() {"
11899,stop,"  public void stop() {
    mRunning = false;
  }"
11900,start,"  public void start() {
    mRunning = true;
    while (!mSpringSystem.getIsIdle()) {
      if (mRunning == false) {"
11901,setTimeStep,"  public void setTimeStep(double timeStep) {
    mTimeStep = timeStep;
  }"
11902,getTimeStep,"  public double getTimeStep() {
    return mTimeStep;
  }"
11904,withPanLimited,"        private AnimationBuilder withPanLimited(boolean panLimited) {
            this.panLimited = panLimited;
            return this;
        }"
11905,withEasing,"        public AnimationBuilder withEasing(int easing) {
            if (!VALID_EASING_STYLES.contains(easing)) {
                throw new IllegalArgumentException(""Unknown easing type: "" + easing);
            }
            this.easing = easing;"
11906,withInterruptible,"        public AnimationBuilder withInterruptible(boolean interruptible) {
            this.interruptible = interruptible;
            return this;
        }"
11907,withDuration,"        public AnimationBuilder withDuration(long duration) {
            this.duration = duration;
            return this;
        }"
11908,animateScaleAndCenter,"    public AnimationBuilder animateScaleAndCenter(float scale, PointF sCenter) {
        if (!isImageReady()) {
            return null;
        }"
11909,animateScale,"    public AnimationBuilder animateScale(float scale) {
        if (!isImageReady()) {
            return null;
        }"
11910,animateCenter,"    public AnimationBuilder animateCenter(PointF sCenter) {
        if (!isImageReady()) {
            return null;
        }"
11911,setDebug,"    public final void setDebug(boolean debug) {
        this.debug = debug;
    }"
11912,setDoubleTapZoomStyle,"    public final void setDoubleTapZoomStyle(int doubleTapZoomStyle) {
        if (!VALID_ZOOM_STYLES.contains(doubleTapZoomStyle)) {
            throw new IllegalArgumentException(""Invalid zoom style: "" + doubleTapZoomStyle);
        }"
11913,setDoubleTapZoomDpi,"    public final void setDoubleTapZoomDpi(int dpi) {
        DisplayMetrics metrics = getResources().getDisplayMetrics();
        float averageDpi = (metrics.xdpi + metrics.ydpi)/2;
        setDoubleTapZoomScale(averageDpi/dpi);
    }"
11914,setDoubleTapZoomScale,"    public final void setDoubleTapZoomScale(float doubleTapZoomScale) {
        this.doubleTapZoomScale = doubleTapZoomScale;
    }"
11915,setTileBackgroundColor,"    public final void setTileBackgroundColor(int tileBgColor) {
        if (Color.alpha(tileBgColor) == 0) {
            tileBgPaint = null;
        } else {"
11916,setPanEnabled,"    public final void setPanEnabled(boolean panEnabled) {
        this.panEnabled = panEnabled;
        if (!panEnabled && vTranslate != null) {
            vTranslate.x = (getWidth()/2) - (scale * (sWidth()/2));"
11917,isPanEnabled,"    public final boolean isPanEnabled() {
        return panEnabled;
    }"
11918,setZoomEnabled,"    public final void setZoomEnabled(boolean zoomEnabled) {
        this.zoomEnabled = zoomEnabled;
    }"
11919,isZoomEnabled,"    public final boolean isZoomEnabled() {
        return zoomEnabled;
    }"
11920,getState,"    public final ImageViewState getState() {
        if (vTranslate != null && sWidth > 0 && sHeight > 0) {
            return new ImageViewState(getScale(), getCenter(), getOrientation());
        }"
11921,getAppliedOrientation,"    public final int getAppliedOrientation() {
        return getRequiredRotation();
    }"
11922,getOrientation,"    public final int getOrientation() {
        return orientation;
    }"
11923,getSHeight,"    public final int getSHeight() {
        return sHeight;
    }"
11924,getSWidth,"    public final int getSWidth() {
        return sWidth;
    }"
11925,isImageReady,"    public final boolean isImageReady() {
        return readySent && vTranslate != null && tileMap != null && sWidth > 0 && sHeight > 0;
    }"
11927,resetScaleAndCenter,"    public final void resetScaleAndCenter() {
        this.anim = null;
        this.pendingScale = limitedScale(0);
        if (isImageReady()) {
            this.sPendingCenter = new PointF(sWidth()/2, sHeight()/2);
        } else {"
11928,setScaleAndCenter,"    public final void setScaleAndCenter(float scale, PointF sCenter) {
        this.anim = null;
        this.pendingScale = scale;
        this.sPendingCenter = sCenter;
        this.sRequestedCenter = sCenter;
        invalidate();
    }"
11929,getScale,"    public final float getScale() {
        return scale;
    }"
11930,getCenter,"    public final PointF getCenter() {
        int mX = getWidth()/2;
        int mY = getHeight()/2;
        return viewToSourceCoord(mX, mY);
    }"
11931,setMinimumTileDpi,"    public void setMinimumTileDpi(int minimumTileDpi) {
        DisplayMetrics metrics = getResources().getDisplayMetrics();
        float averageDpi = (metrics.xdpi + metrics.ydpi)/2;
        this.minimumTileDpi = (int)Math.min(averageDpi, minimumTileDpi);
        if (isImageReady()) {
            reset(false);"
11932,getMinScale,"    public final float getMinScale() {
        return minScale();
    }"
11933,getMaxScale,"    public float getMaxScale() {
        return maxScale;
    }"
11934,setMaximumDpi,"    public final void setMaximumDpi(int dpi) {
        DisplayMetrics metrics = getResources().getDisplayMetrics();
        float averageDpi = (metrics.xdpi + metrics.ydpi)/2;
        setMinScale(averageDpi/dpi);
    }"
11935,setMinimumDpi,"    public final void setMinimumDpi(int dpi) {
        DisplayMetrics metrics = getResources().getDisplayMetrics();
        float averageDpi = (metrics.xdpi + metrics.ydpi)/2;
        setMaxScale(averageDpi/dpi);
    }"
11936,setMinScale,"    public final void setMinScale(float minScale) {
        this.minScale = minScale;
    }"
11937,setMaxScale,"    public final void setMaxScale(float maxScale) {
        this.maxScale = maxScale;
    }"
11938,setMinimumScaleType,"    public final void setMinimumScaleType(int scaleType) {
        if (!VALID_SCALE_TYPES.contains(scaleType)) {
            throw new IllegalArgumentException(""Invalid scale type: "" + scaleType);
        }
        this.minimumScaleType = scaleType;"
11939,setPanLimit,"    public final void setPanLimit(int panLimit) {
        if (!VALID_PAN_LIMITS.contains(panLimit)) {
            throw new IllegalArgumentException(""Invalid pan limit: "" + panLimit);
        }
        this.panLimit = panLimit;"
11940,easeInOutQuad,"    private float easeInOutQuad(long time, float from, float change, long duration) {
        float timeF = time/(duration/2f);
        if (timeF < 1) {
            return (change/2f * timeF * timeF) + from;"
11941,easeOutQuad,"    private float easeOutQuad(long time, float from, float change, long duration) {
        float progress = (float)time/(float)duration;
        return -change * progress*(progress-2) + from;
    }"
11942,ease,"    private float ease(int type, long time, float from, float change, long duration) {
        switch (type) {
            case EASE_IN_OUT_QUAD:"
11943,limitedScale,"    private float limitedScale(float targetScale) {
        targetScale = Math.max(minScale(), targetScale);
        targetScale = Math.min(maxScale, targetScale);
        return targetScale;
    }"
11944,minScale,"    private float minScale() {
        if (minimumScaleType == SCALE_TYPE_CENTER_INSIDE) {
            return Math.min(getWidth() / (float) sWidth(), getHeight() / (float) sHeight());"
11945,limitedSCenter,"    private PointF limitedSCenter(PointF sCenter, float scale) {
        PointF vTranslate = vTranslateForSCenter(sCenter, scale);
        int mY = getHeight()/2;
        float sx = ((getWidth()/2) - vTranslate.x)/scale;
        float sy = ((getHeight()/2) - vTranslate.y)/scale;
        return new PointF(sx, sy);
    }"
11946,vTranslateForSCenter,"    private PointF vTranslateForSCenter(PointF sCenter, float scale) {
        PointF vTranslate = new PointF((getWidth()/2) - (sCenter.x * scale), (getHeight()/2) - (sCenter.y * scale));
        ScaleAndTranslate sat = new ScaleAndTranslate(scale, vTranslate);
        fitToBounds(true, sat);
        return vTranslate;
    }"
11947,convertRect,"    private Rect convertRect(RectF rect) {
        return new Rect((int)rect.left, (int)rect.top, (int)rect.right, (int)rect.bottom);
    }"
11948,convertRect,"    private RectF convertRect(Rect rect) {
        return new RectF(rect.left, rect.top, rect.right, rect.bottom);
    }"
11949,viewToSourceRect,"    private RectF viewToSourceRect(RectF vRect) {
        PointF sLT = viewToSourceCoord(new PointF(vRect.left, vRect.top));
        PointF sRB = viewToSourceCoord(new PointF(vRect.right, vRect.bottom));
        return new RectF(sLT.x, sLT.y, sRB.x, sRB.y);
    }"
11950,sourceToViewRect,"    private RectF sourceToViewRect(RectF sRect) {
        PointF vLT = sourceToViewCoord(new PointF(sRect.left, sRect.top));
        PointF vRB = sourceToViewCoord(new PointF(sRect.right, sRect.bottom));
        return new RectF(vLT.x, vLT.y, vRB.x, vRB.y);
    }"
11951,sourceToViewRect,"    private RectF sourceToViewRect(Rect sRect) {
        return sourceToViewRect(convertRect(sRect));
    }"
11952,sourceToViewCoord,"    public final PointF sourceToViewCoord(float sx, float sy) {
        if (vTranslate == null) {
            return null;
        }
        float vx = (sx * scale) + vTranslate.x;
        float vy = (sy * scale) + vTranslate.y;"
11953,sourceToViewCoord,"    public final PointF sourceToViewCoord(PointF sxy) {
        return sourceToViewCoord(sxy.x, sxy.y);
    }"
11954,viewToSourceCoord,"    public final PointF viewToSourceCoord(float vx, float vy) {
        if (vTranslate == null) {
            return null;
        }
        float sx = (vx - vTranslate.x)/scale;
        float sy = (vy - vTranslate.y)/scale;"
11955,viewToSourceCoord,"    public final PointF viewToSourceCoord(PointF vxy) {
        return viewToSourceCoord(vxy.x, vxy.y);
    }"
11956,distance,"    private float distance(float x0, float x1, float y0, float y1) {
        float x = x0 - x1;
        float y = y0 - y1;
        return FloatMath.sqrt(x * x + y * y);
    }"
11957,getRequiredRotation,"    private int getRequiredRotation() {
        if (orientation == ORIENTATION_USE_EXIF) {
            return sOrientation;"
11958,fileSRect,"    private Rect fileSRect(Rect sRect) {
        if (getRequiredRotation() == 0) {
            return sRect;"
11959,sHeight,"    private int sHeight() {
        int rotation = getRequiredRotation();
        if (rotation == 90 || rotation == 270) {
            return sWidth;"
11960,sWidth,"    private int sWidth() {
        int rotation = getRequiredRotation();
        if (rotation == 90 || rotation == 270) {
            return sHeight;"
11961,getMaxBitmapDimensions,"    private Point getMaxBitmapDimensions(Canvas canvas) {
        if (VERSION.SDK_INT >= 14) {
            try {
                int maxWidth = (Integer)Canvas.class.getMethod(""getMaximumBitmapWidth"").invoke(canvas);"
11962,restoreState,"    private void restoreState(ImageViewState state) {
        if (state != null && state.getCenter() != null && VALID_ORIENTATIONS.contains(state.getOrientation())) {
            this.orientation = state.getOrientation();"
11963,onPostExecute,"        protected void onPostExecute(Bitmap bitmap) {
            if (viewRef != null && tileRef != null && bitmap != null) {
                final SubsamplingScaleImageView subsamplingScaleImageView = viewRef.get();"
11964,doInBackground,"        protected Bitmap doInBackground(Void... params) {
            try {
                if (decoderRef != null && tileRef != null && viewRef != null) {
                    final BitmapRegionDecoder decoder = decoderRef.get();"
11965,onPostExecute,"        protected void onPostExecute(int[] xyo) {
            if (viewRef != null && decoder != null) {
                final SubsamplingScaleImageView subsamplingScaleImageView = viewRef.get();"
11966,doInBackground,"        protected int[] doInBackground(Void... params) {
            try {
                if (viewRef != null && contextRef != null) {
                    Context context = contextRef.get();"
11967,onTileLoaded,"    private void onTileLoaded() {
        invalidate();
    }"
11968,onImageInited,"    private void onImageInited(BitmapRegionDecoder decoder, int sWidth, int sHeight, int sOrientation) {
        this.decoder = decoder;
        this.sWidth = sWidth;
        this.sHeight = sHeight;
        this.sOrientation = sOrientation;
        requestLayout();
        invalidate();
    }"
11969,initialiseTileMap,"    private void initialiseTileMap(Point maxTileDimensions) {
        this.tileMap = new LinkedHashMap<Integer, List<Tile>>();
        int sampleSize = fullImageSampleSize;
        int xTiles = 1;
        int yTiles = 1;
        while (true) {
            int sTileWidth = sWidth()/xTiles;"
11970,fitToBounds,"    private void fitToBounds(boolean center) {
        boolean init = false;
        if (vTranslate == null) {
            init = true;
            vTranslate = new PointF(0, 0);
        }
        ScaleAndTranslate input = new ScaleAndTranslate(scale, vTranslate);
        fitToBounds(center, input);"
11975,createPaints,"    private void createPaints() {
        if (bitmapPaint == null) {
            bitmapPaint = new Paint();
            bitmapPaint.setAntiAlias(true);"
11976,run,"                public void run() {
                    onImageReady();
                }"
11978,setOnLongClickListener,"    public void setOnLongClickListener(OnLongClickListener onLongClickListener) {
        this.onLongClickListener = onLongClickListener;
    }"
11981,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        if (readySent) {
            setScaleAndCenter(getScale(), getCenter());"
11982,onDoubleTap,"            public boolean onDoubleTap(MotionEvent e) {
                if (zoomEnabled && readySent && vTranslate != null) {
                    float doubleTapZoomScale = Math.min(maxScale, SubsamplingScaleImageView.this.doubleTapZoomScale);
                    boolean zoomIn = scale <= doubleTapZoomScale * 0.9;"
11983,onSingleTapConfirmed,"            public boolean onSingleTapConfirmed(MotionEvent e) {
                performClick();
                return true;
            }"
11985,setGestureDetector,"    private void setGestureDetector(final Context context) {
        this.detector = new GestureDetector(context, new GestureDetector.SimpleOnGestureListener() {
            @Override"
11987,setImageAsset,"    public final void setImageAsset(String assetName, ImageViewState state) {
        reset(true);
        restoreState(state);
        BitmapInitTask task = new BitmapInitTask(this, getContext(), assetName, true);
        task.execute();
        invalidate();
    }"
11988,setImageAsset,"    public final void setImageAsset(String assetName) {
        setImageAsset(assetName, null);
    }"
11989,setImageFile,"    public final void setImageFile(String extFile, ImageViewState state) {
        reset(true);
        restoreState(state);
        BitmapInitTask task = new BitmapInitTask(this, getContext(), extFile, false);
        task.execute();
        invalidate();
    }"
11990,setImageFile,"    public final void setImageFile(String extFile) {
        reset(true);
        BitmapInitTask task = new BitmapInitTask(this, getContext(), extFile, false);
        task.execute();
        invalidate();
    }"
11991,setOrientation,"    public final void setOrientation(int orientation) {
        if (!VALID_ORIENTATIONS.contains(orientation)) {
            throw new IllegalArgumentException(""Invalid orientation: "" + orientation);
        }
        this.orientation = orientation;
        reset(false);
        invalidate();"
11992,handleMessage,"            public boolean handleMessage(Message message) {
                if (message.what == MESSAGE_LONG_CLICK && onLongClickListener != null) {
                    maxTouchCount = 0;
                    SubsamplingScaleImageView.super.setOnLongClickListener(onLongClickListener);"
11993,stop,"  public void stop() {
    mStarted = false;
  }"
11994,step,"  public boolean step(long interval) {
    if (mSpringSystem == null || !mStarted) {
      return false;
    }
    long currentTime = mLastTime + interval;
    mSpringSystem.loop(currentTime);
    mLastTime = currentTime;"
11995,start,"  public void start() {
    mStarted = true;
    mLastTime = 0;
  }"
11998,onCreate,"	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);
		setContentView(R.layout.activity_startpage);
"
11999,clamp,"    public static int clamp(int value, int low, int high) {
	    return Math.min(Math.max(value, low), high);
	  }"
12000,clamp,"  public static double clamp(double value, double low, double high) {
    return Math.min(Math.max(value, low), high);
  }"
12001,mapValueFromRangeToRange,"  public static double mapValueFromRangeToRange(
      double value,
      double fromLow,
      double fromHigh,
      double toLow,
      double toHigh) {"
12002,onAfterIntegrate,"  void onAfterIntegrate(BaseSpringSystem springSystem);
}"
12003,onBeforeIntegrate,"  void onBeforeIntegrate(BaseSpringSystem springSystem);
"
12004,create,"  public static SpringSystem create() {
    return new SpringSystem(AndroidSpringLooperFactory.createSpringLooper());
  }"
12007,setSpringSystem,"  public void setSpringSystem(BaseSpringSystem springSystem) {
    mSpringSystem = springSystem;
  }"
12008,onSpringEndStateChange,"  void onSpringEndStateChange(Spring spring);
}"
12012,getView,"    public View getView(int position, View convertView, ViewGroup parent) {
      TextView textView;
      if (convertView == null) {
        textView = new TextView(mContext);
        AbsListView.LayoutParams params = new AbsListView.LayoutParams(
            ViewGroup.LayoutParams.MATCH_PARENT,"
12013,clear,"    public void clear() {
      mStrings.clear();
      notifyDataSetChanged();
    }"
12014,add,"    public void add(String string) {
      mStrings.add(string);
      notifyDataSetChanged();
    }"
12015,getItemId,"    public long getItemId(int position) {
      return position;
    }"
12016,getItem,"    public Object getItem(int position) {
      return mStrings.get(position);
    }"
12017,getCount,"    public int getCount() {
      return mStrings.size();
    }"
12018,onSpringEndStateChange,"    public void onSpringEndStateChange(Spring spring) {
    }"
12019,onSpringActivate,"    public void onSpringActivate(Spring spring) {
    }"
12020,onSpringAtRest,"    public void onSpringAtRest(Spring spring) {
    }"
12021,onSpringUpdate,"    public void onSpringUpdate(Spring spring) {
      float val = (float) spring.getCurrentValue();
      float minTranslate = mRevealPx;
      float maxTranslate = mStashPx;
      float range = maxTranslate - minTranslate;
      float yTranslate = (val * range) + minTranslate;
      SpringConfiguratorView.this.setTranslationY(yTranslate);
    }"
12022,togglePosition,"  private void togglePosition() {
    double currentValue = mRevealerSpring.getEndValue();
    mRevealerSpring
        .setEndValue(currentValue == 1 ? 0 : 1);"
12023,onTouch,"    public boolean onTouch(View view, MotionEvent motionEvent) {
      if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
        togglePosition();
      }"
12025,onStopTrackingTouch,"    public void onStopTrackingTouch(SeekBar seekBar) {
    }"
12026,onStartTrackingTouch,"    public void onStartTrackingTouch(SeekBar seekBar) {
    }"
12027,onProgressChanged,"    public void onProgressChanged(SeekBar seekBar, int val, boolean b) {
      float tensionRange = MAX_TENSION - MIN_TENSION;
      float frictionRange = MAX_FRICTION - MIN_FRICTION;

      if (seekBar == mTensionSeekBar) {
        float scaledTension = ((val) * tensionRange) / MAX_SEEKBAR_VAL + MIN_TENSION;"
12028,onNothingSelected,"    public void onNothingSelected(AdapterView<?> adapterView) {
    }"
12029,onItemSelected,"    public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
      mSelectedSpringConfig = mSpringConfigs.get(i);
      updateSeekBarsForSpringConfig(mSelectedSpringConfig);
    }"
12030,refreshSpringConfigurations,"  public void refreshSpringConfigurations() {
    Map<SpringConfig, String> springConfigMap = springConfigRegistry.getAllSpringConfig();

    spinnerAdapter.clear();
    mSpringConfigs.clear();

    for (Map.Entry<SpringConfig, String> entry : springConfigMap.entrySet()) {
      if (entry.getKey() == SpringConfig.defaultConfig) {
        continue;
      }"
12031,destroy,"  public void destroy() {
    ViewGroup parent = (ViewGroup) getParent();
    if (parent != null) {
      parent.removeView(this);
    }"
12033,removeAllSpringConfig,"  public void removeAllSpringConfig() {
    mSpringConfigMap.clear();
  }"
12034,getAllSpringConfig,"  public Map<SpringConfig, String> getAllSpringConfig() {
    return Collections.unmodifiableMap(mSpringConfigMap);
  }"
12035,removeSpringConfig,"  public boolean removeSpringConfig(SpringConfig springConfig) {
    if (springConfig == null) {
      throw new IllegalArgumentException(""springConfig is required"");
    }"
12036,addSpringConfig,"  public boolean addSpringConfig(SpringConfig springConfig, String configName) {
    if (springConfig == null) {
      throw new IllegalArgumentException(""springConfig is required"");
    }
    if (configName == null) {
      throw new IllegalArgumentException(""configName is required"");
    }"
12037,getInstance,"  public static SpringConfigRegistry getInstance() {
    return INSTANCE;
  }"
12038,fromOrigamiTensionAndFriction,"  public static SpringConfig fromOrigamiTensionAndFriction(double qcTension, double qcFriction) {
    return new SpringConfig(
        OrigamiValueConverter.tensionFromOrigamiValue(qcTension),"
12039,currentValueIsApproximately,"  public boolean currentValueIsApproximately(double value) {
    return Math.abs(getCurrentValue() - value) <= getRestDisplacementThreshold();
  }"
12040,removeAllListeners,"  public Spring removeAllListeners() {
    mListeners.clear();
    return this;
  }"
12041,removeListener,"  public Spring removeListener(SpringListener listenerToRemove) {
    if (listenerToRemove == null) {
      throw new IllegalArgumentException(""listenerToRemove is required"");
    }
    mListeners.remove(listenerToRemove);"
12042,addListener,"  public Spring addListener(SpringListener newListener) {
    if (newListener == null) {
      throw new IllegalArgumentException(""newListener is required"");
    }
    mListeners.add(newListener);"
12043,interpolate,"  private void interpolate(double alpha) {
    mCurrentState.position = mCurrentState.position * alpha + mPreviousState.position *(1-alpha);
    mCurrentState.velocity = mCurrentState.velocity * alpha + mPreviousState.velocity *(1-alpha);
  }"
12044,setAtRest,"  public Spring setAtRest() {
    mEndValue = mCurrentState.position;
    mTempState.position = mCurrentState.position;
    mCurrentState.velocity = 0;
    return this;
  }"
12045,isAtRest,"  public boolean isAtRest() {
    return Math.abs(mCurrentState.velocity) <= mRestSpeedThreshold &&
        getDisplacementDistanceForState(mCurrentState) <= mDisplacementFromRestThreshold;"
12046,wasAtRest,"  public boolean wasAtRest() {
    return mWasAtRest;
  }"
12047,systemShouldAdvance,"  public boolean systemShouldAdvance() {
    return !isAtRest() || !wasAtRest();
  }"
12049,isOvershooting,"  public boolean isOvershooting() {
    return (mStartValue < mEndValue && getCurrentValue() > mEndValue) ||
        (mStartValue > mEndValue && getCurrentValue() < mEndValue);"
12050,isOvershootClampingEnabled,"  public boolean isOvershootClampingEnabled() {
    return mOvershootClampingEnabled;
  }"
12051,setOvershootClampingEnabled,"  public Spring setOvershootClampingEnabled(boolean overshootClampingEnabled) {
    mOvershootClampingEnabled = overshootClampingEnabled;
    return this;
  }"
12052,getRestDisplacementThreshold,"  public double getRestDisplacementThreshold() {
    return mDisplacementFromRestThreshold;
  }"
12053,setRestDisplacementThreshold,"  public Spring setRestDisplacementThreshold(double displacementFromRestThreshold) {
    mDisplacementFromRestThreshold = displacementFromRestThreshold;
    return this;
  }"
12054,getRestSpeedThreshold,"  public double getRestSpeedThreshold() {
    return mRestSpeedThreshold;
  }"
12055,setRestSpeedThreshold,"  public Spring setRestSpeedThreshold(double restSpeedThreshold) {
    mRestSpeedThreshold = restSpeedThreshold;
    return this;
  }"
12056,getVelocity,"  public double getVelocity() {
    return mCurrentState.velocity;
  }"
12057,setVelocity,"  public Spring setVelocity(double velocity) {
    mCurrentState.velocity = velocity;
    mSpringSystem.activateSpring(this.getId());
    return this;
  }"
12058,getEndValue,"  public double getEndValue() {
    return mEndValue;
  }"
12059,setEndValue,"  public Spring setEndValue(double endValue) {
    if (mEndValue == endValue && isAtRest()) {
      return this;
    }
    mStartValue = getCurrentValue();
    mEndValue = endValue;
    mSpringSystem.activateSpring(this.getId());
    for (SpringListener listener : mListeners) {"
12060,getDisplacementDistanceForState,"  private double getDisplacementDistanceForState(PhysicsState state) {
    return Math.abs(mEndValue - state.position);
  }"
12061,getCurrentDisplacementDistance,"  public double getCurrentDisplacementDistance() {
    return getDisplacementDistanceForState(mCurrentState);
  }"
12062,getCurrentValue,"  public double getCurrentValue() {
    return mCurrentState.position;
  }"
12063,getStartValue,"  public double getStartValue() {
    return mStartValue;
  }"
12064,setCurrentValue,"  public Spring setCurrentValue(double currentValue) {
    mStartValue = currentValue;
    mCurrentState.position = currentValue;
    mSpringSystem.activateSpring(this.getId());
    for (SpringListener listener : mListeners) {
      listener.onSpringUpdate(this);
    }"
12065,getSpringConfig,"  public SpringConfig getSpringConfig() {
    return mSpringConfig;
  }"
12066,setSpringConfig,"  public Spring setSpringConfig(SpringConfig springConfig) {
    if (springConfig == null) {
      throw new IllegalArgumentException(""springConfig is required"");
    }
    mSpringConfig = springConfig;"
12068,destroy,"  public void destroy() {
    mListeners.clear();
    mSpringSystem.deregisterSpring(this);
  }"
12069,onSpringEndStateChange,"  public void onSpringEndStateChange(Spring spring) {
  }"
12070,onSpringActivate,"  public void onSpringActivate(Spring spring) {
  }"
12071,onSpringAtRest,"  public void onSpringAtRest(Spring spring) {
  }"
12072,onSpringUpdate,"  public void onSpringUpdate(Spring spring) {
  }"
12073,onPause,"	public void onPause() {
		super.onPause();
        MobclickAgent.onPageEnd(""Setting"");
	}"
12074,onResume,"	public void onResume() {
		super.onResume();
        MobclickAgent.onPageStart(""Bookshelf"");
	}"
12075,updateDrawState,"		public void updateDrawState(TextPaint paint) {
			paint.setStyle(Paint.Style.FILL);
			float width = paint.getTextSize() * colors.length;
			if (shader == null) {
				shader = new LinearGradient(0, 0, 0, width, colors, null,
						Shader.TileMode.MIRROR);
			}
			matrix.reset();
			matrix.setRotate(90);
			matrix.postTranslate(width * translateXPercentage, 0);"
12076,getTranslateXPercentage,"		public float getTranslateXPercentage() {
			return translateXPercentage;
		}"
12077,setTranslateXPercentage,"		public void setTranslateXPercentage(float percentage) {
			translateXPercentage = percentage;
		}"
12078,updateDrawState,"		public void updateDrawState(TextPaint paint) {
			paint.setStyle(Paint.Style.FILL);
			Shader shader = new LinearGradient(0, 0, 0, paint.getTextSize()
					* colors.length, colors, null, Shader.TileMode.MIRROR);
			Matrix matrix = new Matrix();
			matrix.setRotate(90);
			shader.setLocalMatrix(matrix);
			paint.setShader(shader);"
12079,highlight_mewx,"	private void highlight_mewx(String query) {
		String text = textView_MewX.getText().toString();
		SpannableString spannableString = new SpannableString(text);

		Pattern pattern = Pattern.compile(query.toLowerCase());
		Matcher matcher = pattern.matcher(text.toLowerCase());
		while (matcher.find()) {
			spannableString.setSpan(new StyleSpan(Typeface.BOLD),
					matcher.start(), matcher.end(), 0);"
12080,onAnimationUpdate,"						public void onAnimationUpdate(ValueAnimator animation) {
							textView.setText(spannableString);
						}"
12081,get,"				public Float get(AnimatedColorSpan span) {
					return span.getTranslateXPercentage();
				}"
12082,set,"				public void set(AnimatedColorSpan span, Float value) {
					span.setTranslateXPercentage(value);
				}"
12085,onClick,"			public void onClick(View v) {
				Intent intent = new Intent();
				intent.setClass(parentActivity, AboutActivity.class);
				startActivity(intent);
				parentActivity.overridePendingTransition(R.anim.in_from_right,
						R.anim.keep);"
12100,onItemLongClick,"    public void onItemLongClick(View view, final int position) {
        new MaterialDialog.Builder(this)
                .onPositive((ignored1, ignored2) -> {"
12108,forceFinished,"    public abstract void forceFinished(boolean finished);
"
12109,fling,"    public abstract void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY,
                               int maxY, int overX, int overY);"
12110,computeScrollOffset,"    public abstract boolean computeScrollOffset();
"
12111,getScroller,"    public static ScrollerProxy getScroller(Context context) {
        if (VERSION.SDK_INT < VERSION_CODES.GINGERBREAD) {
            return new PreGingerScroller(context);"
12134,isImageReady,"    public final boolean isImageReady() {
        return readySent && vTranslate != null && bitmap != null && sWidth > 0 && sHeight > 0;
    }"
12164,forceCenterOnNextDraw,"    private void forceCenterOnNextDraw() {
        this.sPendingCenter = new PointF(0, 0);
        this.scale = 0f;
    }"
12166,onPostExecute,"        protected void onPostExecute(int[] xyo) {
            if (bitmap != null) {
                final ScaleImageView scaleImageView = viewRef.get();"
12168,onImageInited,"    private void onImageInited(Bitmap bitmap, int sWidth, int sHeight, int sOrientation) {
        this.sWidth = sWidth;
        this.sHeight = sHeight;
        this.sOrientation = sOrientation;
        this.bitmap = bitmap;
        forceCenterOnNextDraw();
        requestLayout();
        invalidate();
    }"
12178,onDoubleTap,"            public boolean onDoubleTap(MotionEvent e) {
                if (zoomEnabled && readySent && vTranslate != null) {
                    float doubleTapZoomScale = Math.min(maxScale, ScaleImageView.this.doubleTapZoomScale);
                    boolean zoomIn = scale <= doubleTapZoomScale * 0.9;"
12185,setImageResource,"    public final void setImageResource(int resId, ImageViewState state) {
        reset(true);
        restoreState(state);
        BitmapInitTask task = new BitmapInitTask(this, getContext(), resId);
        task.execute();
        invalidate();
    }"
12186,setImageResource,"    public final void setImageResource(int resId) {
        setImageResource(resId, null);
    }"
12187,setImageBitmap,"    public final void setImageBitmap(Bitmap bitmap, ImageViewState state) {
        reset(true);
        restoreState(state);
        this.bitmap = bitmap;
        this.sWidth = bitmap.getWidth();
        this.sHeight = bitmap.getHeight();
        invalidate();
        requestLayout();
    }"
12188,setImageBitmap,"    public final void setImageBitmap(Bitmap bitmap) {
        setImageBitmap(bitmap, null);
    }"
12192,handleMessage,"            public boolean handleMessage(Message message) {
                if (message.what == MESSAGE_LONG_CLICK && onLongClickListener != null) {
                    maxTouchCount = 0;
                    ScaleImageView.super.setOnLongClickListener(onLongClickListener);"
12193,onInternalScrollChanged,"        public void onInternalScrollChanged(int left, int top, int oldLeft, int oldTop);
    }"
12194,onScrollChanged,"        protected void onScrollChanged(int l, int t, int oldl, int oldt) {
            super.onScrollChanged(l, t, oldl, oldt);
            if (onScrollViewChangedListener != null) {
                onScrollViewChangedListener.onInternalScrollChanged(l, t, oldl, oldt);"
12195,setOnScrollViewChangedListener,"        public void setOnScrollViewChangedListener(OnScrollViewChangedListener onScrollViewChangedListener) {
            this.onScrollViewChangedListener = onScrollViewChangedListener;
        }"
12196,startAnimation,"        public void startAnimation(long paramLong) {
            if (mZoomView != null) {
                mStartTime = SystemClock.currentThreadTimeMillis();"
12197,run,"        public void run() {
            if (mZoomView != null) {
                float f2;"
12198,isFinished,"        public boolean isFinished() {
            return mIsFinished;
        }"
12199,abortAnimation,"        public void abortAnimation() {
            mIsFinished = true;
        }"
12200,onLayout,"    protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2,
                            int paramInt3, int paramInt4) {
        super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
        Log.d(TAG, ""onLayout --> "");
        if (mHeaderHeight == 0 && mZoomView != null) {"
12201,setHeaderLayoutParams,"    public void setHeaderLayoutParams(LinearLayout.LayoutParams layoutParams) {
        if (mHeaderContainer != null) {
            mHeaderContainer.setLayoutParams(layoutParams);"
12202,setHeaderViewSize,"    public void setHeaderViewSize(int width, int height) {
        if (mHeaderContainer != null) {
            Object localObject = mHeaderContainer.getLayoutParams();"
12204,isReadyForPullStart,"    protected boolean isReadyForPullStart() {
        return mRootView.getScrollY() == 0;
    }"
12205,smoothScrollToTop,"    protected void smoothScrollToTop() {
        Log.d(TAG, ""smoothScrollToTop --> "");
        mScalingRunnable.startAnimation(200L);
    }"
12206,createRootView,"    protected ScrollView createRootView(Context context, AttributeSet attrs) {
        return new InternalScrollView(context, attrs);
    }"
12207,setZoomView,"    public void setZoomView(View zoomView) {
        if (mHeaderContainer != null && zoomView != null) {
            mHeaderContainer.removeAllViews();"
12208,setHeaderView,"    public void setHeaderView(View headerView) {
        if (mHeaderContainer != null && headerView != null) {
            mHeaderContainer.removeAllViews();"
12209,setHideHeader,"    public void setHideHeader(boolean isHideHeader) {
        if (isHideHeader != isHideHeader() && mHeaderContainer != null) {
            super.setHideHeader(isHideHeader);"
12211,getInterpolation,"        public float getInterpolation(float paramAnonymousFloat) {
            float f = paramAnonymousFloat - 1.0F;
            return 1.0F + f * (f * (f * (f * f)));
        }"
12214,onScrollChanged,"        public void onScrollChanged(int left, int top, int oldLeft, int oldTop);
    }"
12215,startAnimation,"        public void startAnimation(long paramLong) {
            mStartTime = SystemClock.currentThreadTimeMillis();
            mDuration = paramLong;
            mScale = ((float) (mZoomContainer.getBottom()) / mZoomHeight);
            mIsFinished = false;
            post(this);
        }"
12216,run,"        public void run() {
            float f2;
            FrameLayout.LayoutParams localLayoutParams;
            ViewGroup.LayoutParams headLayoutParams;
            if ((!mIsFinished) && (mScale > 1.0D)) {
                float f1 = ((float) SystemClock.currentThreadTimeMillis() - (float) mStartTime) / (float) mDuration;"
12219,reset,"    private void reset() {
        this.mActivePointerId = -1;
        this.mLastMotionY = -1.0F;
        this.mMaxScale = -1.0F;
        this.mLastScale = -1.0F;
    }"
12220,onSecondaryPointerUp,"    private void onSecondaryPointerUp(MotionEvent paramMotionEvent) {
        int i = (paramMotionEvent.getAction()) >> 8;
        if (paramMotionEvent.getPointerId(i) == mActivePointerId)
            if (i != 0) {"
12221,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        Log.d(TAG, ""onTouchEvent --> action = "" + (0xFF & ev.getAction()));
        if (isHeaderTop && isEnableZoom) {
            switch (0xFF & ev.getAction()) {
                case MotionEvent.ACTION_DOWN:"
12222,onScrollChanged,"    protected void onScrollChanged(int left, int top, int oldLeft, int oldTop) {
        super.onScrollChanged(left, top, oldLeft, oldTop);
        if (isEnableZoom) {
            isHeaderTop = getScrollY() <= 0;
"
12223,onLayout,"    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
        super.onLayout(changed, left, top, right, bottom);
        if (mZoomHeight == 0) {
            if (mZoomContainer != null) {"
12224,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent event) {
        return super.onInterceptTouchEvent(event);
    }"
12225,endScaling,"    private void endScaling() {
        if (mZoomContainer.getBottom() >= mZoomHeight) {
            Log.d(TAG, ""endScaling"");
        }"
12226,getRootContainer,"    public LinearLayout getRootContainer() {
        return mRootContainer;
    }"
12227,setZoomHeight,"    public void setZoomHeight(int mZoomHeight) {
        this.mZoomHeight = mZoomHeight;
    }"
12228,getHeadView,"    public View getHeadView() {
        return mHeadView;
    }"
12229,getContentView,"    public View getContentView() {
        return mContentView;
    }"
12230,getZoomView,"    public View getZoomView() {
        return mZoomView;
    }"
12231,getHeaderContainer,"    public FrameLayout getHeaderContainer() {
        return mHeaderContainer;
    }"
12232,getZoomContainer,"    public FrameLayout getZoomContainer() {
        return mZoomContainer;
    }"
12233,hideHeaderView,"    public void hideHeaderView() {
        if (mZoomView != null || mHeadView != null) {
            mHeaderContainer.setVisibility(GONE);"
12234,showHeaderView,"    public void showHeaderView() {
        if (mZoomView != null || mHeadView != null) {
            mHeaderContainer.setVisibility(VISIBLE);"
12235,setZoomView,"    public void setZoomView(View view) {
        if (mZoomContainer != null && view != null) {
            this.mZoomView = view;"
12236,setHeaderContainer,"    public void setHeaderContainer(View view) {
        if (mHeaderContainer != null && view != null) {
            mHeaderContainer.removeAllViews();"
12237,setContentContainerView,"    public void setContentContainerView(View view) {
        if (mContentContainer != null) {
            mContentContainer.removeAllViews();"
12238,setOnScrollViewZoomListener,"    public void setOnScrollViewZoomListener(OnScrollViewZoomListener onScrollViewZoomListener) {
        this.onScrollViewZoomListener = onScrollViewZoomListener;
    }"
12239,setOnScrollListener,"    public void setOnScrollListener(OnScrollViewChangedListener mOnScrollListener) {
        this.mOnScrollListener = mOnScrollListener;
    }"
12240,setParallax,"    public void setParallax(boolean isParallax) {
        this.isParallax = isParallax;
    }"
12241,setEnableZoom,"    public void setEnableZoom(boolean isEnableZoom) {
        this.isEnableZoom = isEnableZoom;
    }"
12249,onScroll,"    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
        if (mZoomView != null && !isHideHeader() && isPullToZoomEnabled()) {
            float f = mHeaderHeight - mHeaderContainer.getBottom();"
12250,onScrollStateChanged,"    public void onScrollStateChanged(AbsListView view, int scrollState) {
        Log.d(TAG, ""onScrollStateChanged --> "");
    }"
12251,onLayout,"    protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2,
                            int paramInt3, int paramInt4) {
        super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
        Log.d(TAG, ""onLayout --> "");
        if (mHeaderHeight == 0 && mHeaderContainer != null) {"
12252,setHeaderLayoutParams,"    public void setHeaderLayoutParams(AbsListView.LayoutParams layoutParams) {
        if (mHeaderContainer != null) {
            mHeaderContainer.setLayoutParams(layoutParams);"
12254,handleStyledAttributes,"    public void handleStyledAttributes(TypedArray a) {
        mHeaderContainer = new FrameLayout(getContext());
        if (mZoomView != null) {
            mHeaderContainer.addView(mZoomView);
        }
        if (mHeaderView != null) {"
12255,isFirstItemVisible,"    private boolean isFirstItemVisible() {
        final Adapter adapter = mRootView.getAdapter();

        if (null == adapter || adapter.isEmpty()) {
            return true;"
12256,isReadyForPullStart,"    protected boolean isReadyForPullStart() {
        return isFirstItemVisible();
    }"
12257,pullHeaderToZoom,"    protected void pullHeaderToZoom(int newScrollValue) {
        Log.d(TAG, ""pullHeaderToZoom --> newScrollValue = "" + newScrollValue);
        Log.d(TAG, ""pullHeaderToZoom --> mHeaderHeight = "" + mHeaderHeight);
        if (mScalingRunnable != null && !mScalingRunnable.isFinished()) {
            mScalingRunnable.abortAnimation();
        }

        ViewGroup.LayoutParams localLayoutParams = mHeaderContainer.getLayoutParams();"
12259,createRootView,"    protected ListView createRootView(Context context, AttributeSet attrs) {
        return new ListView(context, attrs);
    }"
12260,setOnItemClickListener,"    public void setOnItemClickListener(AdapterView.OnItemClickListener listener) {
        mRootView.setOnItemClickListener(listener);
    }"
12261,setAdapter,"    public void setAdapter(ListAdapter adapter) {
        mRootView.setAdapter(adapter);
    }"
12262,updateHeaderView,"    private void updateHeaderView() {
        if (mHeaderContainer != null) {
            mRootView.removeHeaderView(mHeaderContainer);"
12263,removeHeaderView,"    private void removeHeaderView() {
        if (mHeaderContainer != null) {
            mRootView.removeHeaderView(mHeaderContainer);"
12264,setZoomView,"    public void setZoomView(View zoomView) {
        if (zoomView != null) {
            this.mZoomView = zoomView;"
12265,setHeaderView,"    public void setHeaderView(View headerView) {
        if (headerView != null) {
            this.mHeaderView = headerView;"
12266,setHideHeader,"    public void setHideHeader(boolean isHideHeader) {
        if (isHideHeader != isHideHeader()) {
            super.setHideHeader(isHideHeader);"
12268,startAnimation,"        public void startAnimation(long paramLong) {
            if (mHeaderView != null) {
                mStartTime = SystemClock.currentThreadTimeMillis();"
12269,run,"        public void run() {
            if (mHeaderView != null) {
                float f2;"
12272,setOnScrollListener,"    public void setOnScrollListener(OnScrollListener paramOnScrollListener) {
        mOnScrollListener = paramOnScrollListener;
    }"
12273,setHeaderViewSize,"    public void setHeaderViewSize(int paramInt1, int paramInt2) {
        if (mHeaderView != null) {
            Object localObject = mHeaderContainer.getLayoutParams();"
12274,onTouchEvent,"    public boolean onTouchEvent(MotionEvent paramMotionEvent) {
        Log.d(TAG, ""action = "" + (0xFF & paramMotionEvent.getAction()));
        if (mHeaderView != null && !isHideHeader && isEnableZoom) {
            switch (0xFF & paramMotionEvent.getAction()) {
                case MotionEvent.ACTION_DOWN:"
12275,onScrollStateChanged,"    public void onScrollStateChanged(AbsListView paramAbsListView, int paramInt) {
        if (mOnScrollListener != null) {
            mOnScrollListener.onScrollStateChanged(paramAbsListView, paramInt);"
12276,onScroll,"    public void onScroll(AbsListView paramAbsListView, int paramInt1, int paramInt2, int paramInt3) {
        Log.d(TAG, ""onScroll"");
        if (mHeaderView != null && !isHideHeader && isEnableZoom) {
            float f = mHeaderHeight - mHeaderContainer.getBottom();
            Log.d(TAG, ""f = "" + f);"
12277,onLayout,"    protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2,
                            int paramInt3, int paramInt4) {
        super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
        if (mHeaderHeight == 0 && mHeaderView != null) {"
12278,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent paramMotionEvent) {
        return super.onInterceptTouchEvent(paramMotionEvent);
    }"
12279,reset,"    private void reset() {
        mActivePointerId = -1;
        mLastMotionY = -1.0F;
        mMaxScale = -1.0F;
        mLastScale = -1.0F;
    }"
12281,hideHeadView,"    public void hideHeadView() {
        if (mHeaderView != null && !isHideHeader) {
            isHideHeader = true;"
12282,showHeadView,"    public void showHeadView() {
        if (mHeaderView != null && isHideHeader) {
            isHideHeader = false;"
12283,isHideHeader,"    public boolean isHideHeader() {
        return isHideHeader;
    }"
12284,getHeaderView,"    public View getHeaderView() {
        return mHeaderView;
    }"
12285,updateHeaderView,"    private void updateHeaderView(View headerView) {
        if (headerView != null) {
            mHeaderContainer.removeAllViews();"
12286,setHeaderView,"    public void setHeaderView(View headerView) {
        if (mHeaderView != null) {
            removeHeaderView(mHeaderContainer);
        }
        this.mHeaderView = headerView;"
12290,endScaling,"    private void endScaling() {
        if (mHeaderContainer.getBottom() >= mHeaderHeight)
            Log.d(TAG, ""endScaling"");
        mScalingRunnable.startAnimation(200L);"
12293,onPullZooming,"        public void onPullZooming(int newScrollValue);
"
12294,isReadyForPullStart,"    protected abstract boolean isReadyForPullStart();
"
12295,smoothScrollToTop,"    protected abstract void smoothScrollToTop();
"
12296,createRootView,"    protected abstract T createRootView(Context context, AttributeSet attrs);
"
12297,setZoomView,"    public abstract void setZoomView(View zoomView);
"
12298,setHeaderView,"    public abstract void setHeaderView(View headerView);
"
12299,pullHeaderToZoom,"    protected abstract void pullHeaderToZoom(int newScrollValue);
"
12300,pullEvent,"    private void pullEvent() {
        final int newScrollValue;
        final float initialMotionValue, lastMotionValue;

        initialMotionValue = mInitialMotionY;
        lastMotionValue = mLastMotionY;

        newScrollValue = Math.round(Math.min(initialMotionValue - lastMotionValue, 0) / FRICTION);
"
12301,onTouchEvent,"    public boolean onTouchEvent(@NonNull MotionEvent event) {
        if (!isPullToZoomEnabled() || isHideHeader()) {
            return false;
        }

        if (event.getAction() == MotionEvent.ACTION_DOWN && event.getEdgeFlags() != 0) {"
12302,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent event) {
        if (!isPullToZoomEnabled() || isHideHeader()) {
            return false;
        }

        final int action = event.getAction();

        if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP) {"
12305,setZoomEnabled,"    public void setZoomEnabled(boolean isZoomEnabled) {
        this.isZoomEnabled = isZoomEnabled;
    }"
12307,isParallax,"    public boolean isParallax() {
        return isParallax;
    }"
12308,isZooming,"    public boolean isZooming() {
        return isZooming;
    }"
12309,isPullToZoomEnabled,"    public boolean isPullToZoomEnabled() {
        return isZoomEnabled;
    }"
12312,getRootView,"    public T getRootView() {
        return mRootView;
    }"
12313,setOnPullZoomListener,"    public void setOnPullZoomListener(OnPullZoomListener onPullZoomListener) {
        this.onPullZoomListener = onPullZoomListener;
    }"
12315,getCurrY,"    public int getCurrY() {
        return mScroller.getCurrY();
    }"
12316,getCurrX,"    public int getCurrX() {
        return mScroller.getCurrX();
    }"
12317,isFinished,"    public boolean isFinished() {
        return mScroller.isFinished();
    }"
12318,forceFinished,"    public void forceFinished(boolean finished) {
        mScroller.forceFinished(finished);
    }"
12319,fling,"    public void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY,
                      int overX, int overY) {
        mScroller.fling(startX, startY, velocityX, velocityY, minX, maxX, minY, maxY);"
12320,computeScrollOffset,"    public boolean computeScrollOffset() {
        return mScroller.computeScrollOffset();
    }"
12323,cancelFling,"        public void cancelFling() {
            if (DEBUG) {
                LogManager.getLogger().d(LOG_TAG, ""Cancel Fling"");
            }"
12324,interpolate,"        private float interpolate() {
            float t = 1f * (System.currentTimeMillis() - mStartTime) / ZOOM_DURATION;
            t = Math.min(1f, t);
            t = sInterpolator.getInterpolation(t);
            return t;
        }"
12325,run,"        public void run() {
            ImageView imageView = getImageView();
            if (imageView == null) {
                return;
            }

            float t = interpolate();
            float scale = mZoomStart + t * (mZoomEnd - mZoomStart);
            float deltaScale = scale / getScale();
"
12326,onViewTap,"        void onViewTap(View view, float x, float y);
    }"
12327,onPhotoTap,"        void onPhotoTap(View view, float x, float y);
    }"
12328,onMatrixChanged,"        void onMatrixChanged(RectF rect);
    }"
12329,getImageViewHeight,"    private int getImageViewHeight(ImageView imageView) {
        if (null == imageView)
            return 0;
        return imageView.getHeight() - imageView.getPaddingTop() - imageView.getPaddingBottom();"
12330,getImageViewWidth,"    private int getImageViewWidth(ImageView imageView) {
        if (null == imageView)
            return 0;
        return imageView.getWidth() - imageView.getPaddingLeft() - imageView.getPaddingRight();"
12331,updateBaseMatrix,"    private void updateBaseMatrix(Drawable d) {
        ImageView imageView = getImageView();
        if (null == imageView || null == d) {
            return;
        }

        final float viewWidth = getImageViewWidth(imageView);
        final float viewHeight = getImageViewHeight(imageView);
        final int drawableWidth = d.getIntrinsicWidth();
        final int drawableHeight = d.getIntrinsicHeight();

        mBaseMatrix.reset();
"
12332,setImageViewMatrix,"    private void setImageViewMatrix(Matrix matrix) {
        ImageView imageView = getImageView();
        if (null != imageView) {
"
12333,resetMatrix,"    private void resetMatrix() {
        mSuppMatrix.reset();
        setImageViewMatrix(getDrawMatrix());
        checkMatrixBounds();
    }"
12334,getValue,"    private float getValue(Matrix matrix, int whichValue) {
        matrix.getValues(mMatrixValues);
        return mMatrixValues[whichValue];
    }"
12335,getIPhotoViewImplementation,"    public IPhotoView getIPhotoViewImplementation() {
        return this;
    }"
12336,setZoomTransitionDuration,"    public void setZoomTransitionDuration(int milliseconds) {
        if (milliseconds < 0)
            milliseconds = DEFAULT_ZOOM_DURATION;
        this.ZOOM_DURATION = milliseconds;"
12337,getVisibleRectangleBitmap,"    public Bitmap getVisibleRectangleBitmap() {
        ImageView imageView = getImageView();
        return imageView == null ? null : imageView.getDrawingCache();
    }"
12338,getDisplayRect,"    private RectF getDisplayRect(Matrix matrix) {
        ImageView imageView = getImageView();

        if (null != imageView) {
            Drawable d = imageView.getDrawable();"
12339,checkMatrixBounds,"    private boolean checkMatrixBounds() {
        final ImageView imageView = getImageView();
        if (null == imageView) {
            return false;
        }

        final RectF rect = getDisplayRect(getDrawMatrix());
        if (null == rect) {
            return false;
        }

        final float height = rect.height(), width = rect.width();
        float deltaX = 0, deltaY = 0;
"
12340,checkImageViewScaleType,"    private void checkImageViewScaleType() {
        ImageView imageView = getImageView();

        /**"
12341,checkAndDisplayMatrix,"    private void checkAndDisplayMatrix() {
        if (checkMatrixBounds()) {
            setImageViewMatrix(getDrawMatrix());"
12342,cancelFling,"    private void cancelFling() {
        if (null != mCurrentFlingRunnable) {
            mCurrentFlingRunnable.cancelFling();"
12343,getDrawMatrix,"    public Matrix getDrawMatrix() {
        mDrawMatrix.set(mBaseMatrix);
        mDrawMatrix.postConcat(mSuppMatrix);
        return mDrawMatrix;
    }"
12344,getDisplayMatrix,"    public Matrix getDisplayMatrix() {
        return new Matrix(getDrawMatrix());
    }"
12345,update,"    public void update() {
        ImageView imageView = getImageView();

        if (null != imageView) {"
12346,setZoomable,"    public void setZoomable(boolean zoomable) {
        mZoomEnabled = zoomable;
        update();
    }"
12347,setScaleType,"    public void setScaleType(ScaleType scaleType) {
        if (isSupportedScaleType(scaleType) && scaleType != mScaleType) {
            mScaleType = scaleType;"
12348,setScale,"    public void setScale(float scale, float focalX, float focalY,
                         boolean animate) {
        ImageView imageView = getImageView();
"
12349,setScale,"    public void setScale(float scale, boolean animate) {
        ImageView imageView = getImageView();

        if (null != imageView) {"
12350,setScale,"    public void setScale(float scale) {
        setScale(scale, false);
    }"
12351,getOnViewTapListener,"    public OnViewTapListener getOnViewTapListener() {
        return mViewTapListener;
    }"
12352,setOnViewTapListener,"    public void setOnViewTapListener(OnViewTapListener listener) {
        mViewTapListener = listener;
    }"
12353,getOnPhotoTapListener,"    public OnPhotoTapListener getOnPhotoTapListener() {
        return mPhotoTapListener;
    }"
12354,setOnPhotoTapListener,"    public void setOnPhotoTapListener(OnPhotoTapListener listener) {
        mPhotoTapListener = listener;
    }"
12355,setOnMatrixChangeListener,"    public void setOnMatrixChangeListener(OnMatrixChangedListener listener) {
        mMatrixChangeListener = listener;
    }"
12356,setOnLongClickListener,"    public void setOnLongClickListener(OnLongClickListener listener) {
        mLongClickListener = listener;
    }"
12357,setMaximumScale,"    public void setMaximumScale(float maximumScale) {
        checkZoomLevels(mMinScale, mMidScale, maximumScale);
        mMaxScale = maximumScale;
    }"
12358,setMaxScale,"    public void setMaxScale(float maxScale) {
        setMaximumScale(maxScale);
    }"
12359,setMediumScale,"    public void setMediumScale(float mediumScale) {
        checkZoomLevels(mMinScale, mediumScale, mMaxScale);
        mMidScale = mediumScale;
    }"
12360,setMidScale,"    public void setMidScale(float midScale) {
        setMediumScale(midScale);
    }"
12361,setMinimumScale,"    public void setMinimumScale(float minimumScale) {
        checkZoomLevels(minimumScale, mMidScale, mMaxScale);
        mMinScale = minimumScale;
    }"
12362,setMinScale,"    public void setMinScale(float minScale) {
        setMinimumScale(minScale);
    }"
12363,setAllowParentInterceptOnEdge,"    public void setAllowParentInterceptOnEdge(boolean allow) {
        mAllowParentInterceptOnEdge = allow;
    }"
12364,onTouch,"    public boolean onTouch(View v, MotionEvent ev) {
        boolean handled = false;

        if (mZoomEnabled && hasDrawable((ImageView) v)) {
            ViewParent parent = v.getParent();"
12365,onScale,"    public void onScale(float scaleFactor, float focusX, float focusY) {
        if (DEBUG) {
            LogManager.getLogger().d(
                    LOG_TAG,"
12366,onGlobalLayout,"    public void onGlobalLayout() {
        ImageView imageView = getImageView();

        if (null != imageView) {"
12367,onFling,"    public void onFling(float startX, float startY, float velocityX,
                              float velocityY) {
        if (DEBUG) {
            LogManager.getLogger().d(
                    LOG_TAG,
                    ""onFling. sX: "" + startX + "" sY: "" + startY + "" Vx: ""
                            + velocityX + "" Vy: "" + velocityY);"
12369,getScaleType,"    public ScaleType getScaleType() {
        return mScaleType;
    }"
12370,getScale,"    public float getScale() {
        return FloatMath.sqrt((float) Math.pow(getValue(mSuppMatrix, Matrix.MSCALE_X), 2) + (float) Math.pow(getValue(mSuppMatrix, Matrix.MSKEW_Y), 2));
    }"
12371,getMaximumScale,"    public float getMaximumScale() {
        return mMaxScale;
    }"
12372,getMaxScale,"    public float getMaxScale() {
        return getMaximumScale();
    }"
12373,getMediumScale,"    public float getMediumScale() {
        return mMidScale;
    }"
12374,getMidScale,"    public float getMidScale() {
        return getMediumScale();
    }"
12375,getMinimumScale,"    public float getMinimumScale() {
        return mMinScale;
    }"
12376,getMinScale,"    public float getMinScale() {
        return getMinimumScale();
    }"
12377,getImageView,"    public ImageView getImageView() {
        ImageView imageView = null;

        if (null != mImageView) {
            imageView = mImageView.get();
        }"
12378,setRotationBy,"    public void setRotationBy(float degrees) {
        mSuppMatrix.postRotate(degrees % 360);
        checkAndDisplayMatrix();
    }"
12379,setRotationTo,"    public void setRotationTo(float degrees) {
        mSuppMatrix.setRotate(degrees % 360);
        checkAndDisplayMatrix();
    }"
12380,setPhotoViewRotation,"    public void setPhotoViewRotation(float degrees) {
        mSuppMatrix.setRotate(degrees % 360);
        checkAndDisplayMatrix();
    }"
12381,setDisplayMatrix,"    public boolean setDisplayMatrix(Matrix finalMatrix) {
        if (finalMatrix == null)
            throw new IllegalArgumentException(""Matrix cannot be null"");

        ImageView imageView = getImageView();
        if (null == imageView)
            return false;

        if (null == imageView.getDrawable())
            return false;"
12382,getDisplayRect,"    public RectF getDisplayRect() {
        checkMatrixBounds();
        return getDisplayRect(getDrawMatrix());
    }"
12384,canZoom,"    public boolean canZoom() {
        return mZoomEnabled;
    }"
12385,setOnDoubleTapListener,"    public void setOnDoubleTapListener(GestureDetector.OnDoubleTapListener newOnDoubleTapListener) {
        if (newOnDoubleTapListener != null)
            this.mGestureDetector.setOnDoubleTapListener(newOnDoubleTapListener);"
12386,onLongPress,"                    public void onLongPress(MotionEvent e) {
                        if (null != mLongClickListener) {
                            mLongClickListener.onLongClick(getImageView());"
12387,setImageViewScaleTypeMatrix,"    private static void setImageViewScaleTypeMatrix(ImageView imageView) {
        /**
         * PhotoView sets it's own ScaleType to Matrix, then diverts all calls"
12388,isSupportedScaleType,"    private static boolean isSupportedScaleType(final ScaleType scaleType) {
        if (null == scaleType) {
            return false;
        }"
12389,hasDrawable,"    private static boolean hasDrawable(ImageView imageView) {
        return null != imageView && null != imageView.getDrawable();
    }"
12390,checkZoomLevels,"    private static void checkZoomLevels(float minZoom, float midZoom,
                                        float maxZoom) {
        if (minZoom >= midZoom) {"
12391,onDetachedFromWindow,"    protected void onDetachedFromWindow() {
        mAttacher.cleanup();
        super.onDetachedFromWindow();
    }"
12392,setOnDoubleTapListener,"    public void setOnDoubleTapListener(GestureDetector.OnDoubleTapListener newOnDoubleTapListener) {
        mAttacher.setOnDoubleTapListener(newOnDoubleTapListener);
    }"
12393,getIPhotoViewImplementation,"    public IPhotoView getIPhotoViewImplementation() {
        return mAttacher;
    }"
12394,setZoomTransitionDuration,"    public void setZoomTransitionDuration(int milliseconds) {
        mAttacher.setZoomTransitionDuration(milliseconds);
    }"
12395,getVisibleRectangleBitmap,"    public Bitmap getVisibleRectangleBitmap() {
        return mAttacher.getVisibleRectangleBitmap();
    }"
12396,setZoomable,"    public void setZoomable(boolean zoomable) {
        mAttacher.setZoomable(zoomable);
    }"
12397,setScaleType,"    public void setScaleType(ScaleType scaleType) {
        if (null != mAttacher) {
            mAttacher.setScaleType(scaleType);"
12398,setScale,"    public void setScale(float scale, float focalX, float focalY, boolean animate) {
        mAttacher.setScale(scale, focalX, focalY, animate);
    }"
12399,setScale,"    public void setScale(float scale, boolean animate) {
        mAttacher.setScale(scale, animate);
    }"
12400,setScale,"    public void setScale(float scale) {
        mAttacher.setScale(scale);
    }"
12401,getOnViewTapListener,"    public OnViewTapListener getOnViewTapListener() {
        return mAttacher.getOnViewTapListener();
    }"
12402,setOnViewTapListener,"    public void setOnViewTapListener(OnViewTapListener listener) {
        mAttacher.setOnViewTapListener(listener);
    }"
12403,getOnPhotoTapListener,"    public OnPhotoTapListener getOnPhotoTapListener() {
        return mAttacher.getOnPhotoTapListener();
    }"
12404,setOnPhotoTapListener,"    public void setOnPhotoTapListener(OnPhotoTapListener listener) {
        mAttacher.setOnPhotoTapListener(listener);
    }"
12405,setOnLongClickListener,"    public void setOnLongClickListener(OnLongClickListener l) {
        mAttacher.setOnLongClickListener(l);
    }"
12406,setOnMatrixChangeListener,"    public void setOnMatrixChangeListener(OnMatrixChangedListener listener) {
        mAttacher.setOnMatrixChangeListener(listener);
    }"
12407,setImageURI,"    public void setImageURI(Uri uri) {
        super.setImageURI(uri);
        if (null != mAttacher) {
            mAttacher.update();"
12408,setImageResource,"    public void setImageResource(int resId) {
        super.setImageResource(resId);
        if (null != mAttacher) {
            mAttacher.update();"
12409,setImageDrawable,"    public void setImageDrawable(Drawable drawable) {
        super.setImageDrawable(drawable);
        if (null != mAttacher) {
            mAttacher.update();"
12410,setMaximumScale,"    public void setMaximumScale(float maximumScale) {
        mAttacher.setMaximumScale(maximumScale);
    }"
12412,setMediumScale,"    public void setMediumScale(float mediumScale) {
        mAttacher.setMediumScale(mediumScale);
    }"
12414,setMinimumScale,"    public void setMinimumScale(float minimumScale) {
        mAttacher.setMinimumScale(minimumScale);
    }"
12416,setAllowParentInterceptOnEdge,"    public void setAllowParentInterceptOnEdge(boolean allow) {
        mAttacher.setAllowParentInterceptOnEdge(allow);
    }"
12417,getScaleType,"    public ScaleType getScaleType() {
        return mAttacher.getScaleType();
    }"
12418,getScale,"    public float getScale() {
        return mAttacher.getScale();
    }"
12419,getMaximumScale,"    public float getMaximumScale() {
        return mAttacher.getMaximumScale();
    }"
12421,getMediumScale,"    public float getMediumScale() {
        return mAttacher.getMediumScale();
    }"
12423,getMinimumScale,"    public float getMinimumScale() {
        return mAttacher.getMinimumScale();
    }"
12425,setDisplayMatrix,"    public boolean setDisplayMatrix(Matrix finalRectangle) {
        return mAttacher.setDisplayMatrix(finalRectangle);
    }"
12426,getDisplayMatrix,"    public Matrix getDisplayMatrix() {
        return mAttacher.getDrawMatrix();
    }"
12427,getDisplayRect,"    public RectF getDisplayRect() {
        return mAttacher.getDisplayRect();
    }"
12428,canZoom,"    public boolean canZoom() {
        return mAttacher.canZoom();
    }"
12429,setRotationBy,"    public void setRotationBy(float rotationDegree) {
        mAttacher.setRotationBy(rotationDegree);
    }"
12430,setRotationTo,"    public void setRotationTo(float rotationDegree) {
        mAttacher.setRotationTo(rotationDegree);
    }"
12431,setPhotoViewRotation,"    public void setPhotoViewRotation(float rotationDegree) {
        mAttacher.setRotationTo(rotationDegree);
    }"
12432,origamiValueFromFriction,"  public static double origamiValueFromFriction(double friction) {
    return friction == 0 ? 0 : (friction - 25.0) / 3.0 + 8.0;
  }"
12433,frictionFromOrigamiValue,"  public static double frictionFromOrigamiValue(double oValue) {
    return oValue == 0 ? 0 : (oValue - 8.0) * 3.0 + 25.0;
  }"
12434,origamiValueFromTension,"  public static double origamiValueFromTension(double tension) {
    return tension == 0 ? 0 : (tension - 194.0) / 3.62 + 30.0;
  }"
12435,tensionFromOrigamiValue,"  public static double tensionFromOrigamiValue(double oValue) {
    return oValue == 0 ? 0 : (oValue - 30.0) * 3.62 + 194.0;
  }"
12436,onScale,"    public void onScale(float scaleFactor, float focusX, float focusY);
"
12437,onFling,"    public void onFling(float startX, float startY, float velocityX,
                        float velocityY);"
12439,onBackPressed,"	public void onBackPressed() {
		scrollToFinishActivity();
	}"
12440,onPause,"	public void onPause() {
		super.onPause();
		MobclickAgent.onPause(this);
	}"
12444,onNothingSelected,"			public void onNothingSelected(AdapterView<?> parent) {
				return;
			}"
12445,onItemSelected,"			public void onItemSelected(AdapterView<?> parent, View view,
					int position, long id) {
				return;"
12450,onPostExecute,"        protected void onPostExecute(Integer i) {
            if (runOrNot) {
                EditText editText = editTextWeakReference.get();"
12456,onScrolled,"        public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {
            super.onScrolled(recyclerView, dx, dy);

            visibleItemCount = mLayoutManager.getChildCount();
            totalItemCount = mLayoutManager.getItemCount();
            pastVisibleItems = mLayoutManager.findFirstVisibleItemPosition();
"
12457,onItemLongClick,"    public void onItemLongClick(View view, int position) {
        String content = reviewReplyList.getList().get(position).getContent();
        ClipboardManager clipboard = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);
        ClipData clip = ClipData.newPlainText(getResources().getString(R.string.app_name), content);
        if (clipboard != null) {
            clipboard.setPrimaryClip(clip);"
12458,hideListLoading,"    void hideListLoading() {
        hideRetryButton();
        mLoadingLayout.setVisibility(View.GONE);
    }"
12459,hideRetryButton,"    void hideRetryButton() {
        mLoadingStatusTextView.setText(getResources().getString(R.string.list_loading));
        mLoadingButton.setVisibility(View.GONE);
    }"
12460,showRetryButton,"    void showRetryButton() {
        mLoadingStatusTextView.setText(getResources().getString(R.string.system_parse_failed));
        mLoadingButton.setVisibility(View.VISIBLE);
    }"
12461,getRecyclerView,"    RecyclerView getRecyclerView() {
        return mRecyclerView;
    }"
12462,setAdapter,"    void setAdapter(ReviewReplyItemAdapter adapter) {
        this.mAdapter = adapter;
    }"
12463,getAdapter,"    ReviewReplyItemAdapter getAdapter() {
        return mAdapter;
    }"
12466,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        if (getSupportActionBar() != null && reviewTitle != null && !reviewTitle.isEmpty())
            getSupportActionBar().setTitle(reviewTitle);
        return true;"
12471,onPreExecute,"        protected void onPreExecute() {
            super.onPreExecute();

            if (!isSubmitting.getAndSet(true)) {"
12473,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem menuItem) {
        if (menuItem.getItemId() == android.R.id.home) {
            onBackPressed();
        } else if (menuItem.getItemId() == R.id.action_submit) {"
12474,hideIME,"    private void hideIME() {
        InputMethodManager imm = (InputMethodManager) getSystemService(Activity.INPUT_METHOD_SERVICE);
        View view = getCurrentFocus();
        if (view == null) view = new View(this);
        if (imm != null) imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
    }"
12475,noBadWords,"    private boolean noBadWords(String text) {
        String badWord = Wenku8API.searchBadWords(text);
        if (badWord != null) {
            Toast.makeText(getApplication(), String.format(getResources().getString(R.string.system_containing_bad_word), badWord), Toast.LENGTH_SHORT).show();
            return false;"
12476,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_review_new_post, menu);
        return true;
    }"
12482,onItemClick,"    public void onItemClick(View view, int position) {
        Intent intent = new Intent(NovelReviewListActivity.this, NovelReviewReplyListActivity.class);
        intent.putExtra(""rid"", reviewList.getList().get(position).getRid());
        intent.putExtra(""title"", reviewList.getList().get(position).getTitle());
        startActivity(intent);
    }"
12486,getAdapter,"    ReviewItemAdapter getAdapter() {
        return mAdapter;
    }"
12489,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_review_list, menu);
        return true;
    }"
12490,reloadAllReviews,"    private void reloadAllReviews() {
        reviewList.resetList();
        new AsyncReviewListLoader(this, mSwipeRefreshLayout, aid, reviewList).execute();
    }"
12493,onResume,"	public void onResume() {
		super.onResume();
		MobclickAgent.onResume(this);
	}"
12494,hideNavigatorBar,"	private void hideNavigatorBar(){
		if (Build.VERSION.SDK_INT >= 11)
			getWindow().getDecorView().setSystemUiVisibility(
					View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);"
12495,onKeyDown,"	public boolean onKeyDown(int keyCode, KeyEvent event) {
		LinearLayout TextListLayout = ((LinearLayout) parentActivity.findViewById(R.id.novel_content_layout));
		switch (keyCode) {
			case KeyEvent.KEYCODE_VOLUME_DOWN:
				TextListLayout.setBackgroundColor(getResources().getColor(R.color.reader_default_bg_black));"
12496,onDestroy,"	protected void onDestroy() {
		super.onDestroy();

		if (pDialog != null)
			pDialog.dismiss();
		pDialog = null;"
12498,onPause,"	protected void onPause() {
		super.onPause();
		MobclickAgent.onPause(this);

		saveRecord();
		return;"
12500,onClick,"									public void onClick(View v) {
										Intent intent = new Intent();
										intent.setClass(parentActivity,
												NovelImageActivity.class);
										intent.putExtra(""path"", result);
										startActivity(intent);
										parentActivity"
12502,doInBackground,"							protected String doInBackground(String... params) {
								GlobalConfig.saveNovelContentImage(params[0]);
								String name = GlobalConfig
										.generateImageFileNameByURL(params[0]);
								return GlobalConfig"
12504,onClick,"										public void onClick(
												DialogInterface dialog,
												int which) {"
12506,onPostExecute,"		protected void onPostExecute(Integer result) {
			if (result == -100) {
				if (from.equals(BookshelfFragment.fromid)) {
					Toast.makeText(
							parentActivity,
							getResources().getString(
									R.string.bookshelf_not_cached),
							Toast.LENGTH_LONG).show();"
12507,onProgressUpdate,"		protected void onProgressUpdate(Integer... values) {
			return;
		}"
12508,doInBackground,"		protected Integer doInBackground(List<NameValuePair>... params) {

			try {
				String xml;"
12512,run,"		public void run() {
			((ScrollView) parentActivity.findViewById(R.id.content_scrollview))
					.scrollTo(0, GlobalConfig.getReadSavesRecord(currentCid,"
12519,doInBackground,"		protected Integer doInBackground(List<NameValuePair>... params) {

			try {
				if (!isSearching)"
12520,onScroll,"					public void onScroll(AbsListView view,
							int firstVisibleItem, int visibleItemCount,"
12521,onScrollStateChanged,"					public void onScrollStateChanged(AbsListView view,
							int scrollState) {
						switch (scrollState) {"
12523,onPostExecute,"		protected void onPostExecute(Integer result) {
			if (result == -100) {
				Toast.makeText(parentActivity, R.string.network_error,
						Toast.LENGTH_LONG).show();
				Log.e(""MewX-Main"", ""getNullFromParser"");
				return;"
12525,doInBackground,"		protected Integer doInBackground(List<NameValuePair>... params) {

			try {
				byte[] tempXml = LightNetwork.LightHttpPost("
12526,loadSpecialResult,"	private void loadSpecialResult() {
		return;
	}"
12539,getImage,"	public byte[] getImage() {
		return image;
	}"
12540,getNumFav,"	public int getNumFav() {
		return num_fav;
	}"
12541,getNumPush,"	public int getNumPush() {
		return num_push;
	}"
12542,getNumHit,"	public int getNumHit() {
		return num_hit;
	}"
12545,addImgToList,"	private boolean addImgToList(int aid) {
		if (!imgList.isEmpty())
			for (int i = 0; i < imgList.size(); i++)
				if (imgList.get(i).equals(new Integer(aid))) {
					Log.v(""MewX"", ""----- Found \"""" + aid + ""\"" in LIST! -----"");"
12546,getItemId,"	public long getItemId(int position) {
		return position;
	}"
12547,getItem,"	public NovelElementSearch getItem(int position) {
		return (NovelElementSearch) this.ele.get(position);
	}"
12548,getCount,"	public int getCount() {
		return this.ele.size();
	}"
12552,setImgUrl,"	public void setImgUrl(String imgUrl) {
		this.imgUrl = imgUrl;
		return;
	}"
12553,getImgUrl,"	public String getImgUrl() {
		return imgUrl;
	}"
12554,getIntro,"	public String getIntro() {
		return intro;
	}"
12555,getUpdate,"	public String getUpdate() {
		return update;
	}"
12557,getTitle,"	public String getTitle() {
		return title;
	}"
12559,getAuthor,"	public String getAuthor() {
		return author;
	}"
12562,getItem,"	public NovelElement getItem(int position) {
		return (NovelElement) this.ele.get(position);
	}"
12572,getBookLen,"	public int getBookLen() {
		return bookLen;
	}"
12573,getPress,"	public String getPress() {
		return press;
	}"
12574,getWriter,"	public String getWriter() {
		return writer;
	}"
12580,getItem,"	public NovelContentParser.NovelContent getItem(int position) {
		return (NovelContentParser.NovelContent) this.ele.get(position);
	}"
12587,getContext,"	public static Context getContext( ) {
		return context;
	}"
12588,onCreate,"	public void onCreate( ) {
		context = getApplicationContext( );
		return;
	}"
12592,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_bg_selector, menu);
        Drawable drawable = menu.getItem(0).getIcon();
        if (drawable != null) {
            drawable.mutate();
            drawable.setColorFilter(getResources().getColor(R.color.default_white), PorterDuff.Mode.SRC_ATOP);"
12594,getLogger,"    public static Logger getLogger() {
        return logger;
    }"
12595,setLogger,"    public static void setLogger(Logger newLogger) {
        logger = newLogger;
    }"
12596,e,"    public int e(String tag, String msg, Throwable tr) {
        return Log.e(tag, msg, tr);
    }"
12597,e,"    public int e(String tag, String msg) {
        return Log.e(tag, msg);
    }"
12598,w,"    public int w(String tag, String msg, Throwable tr) {
        return Log.w(tag, msg, tr);
    }"
12599,w,"    public int w(String tag, String msg) {
        return Log.w(tag, msg);
    }"
12600,i,"    public int i(String tag, String msg, Throwable tr) {
        return Log.i(tag, msg, tr);
    }"
12601,i,"    public int i(String tag, String msg) {
        return Log.i(tag, msg);
    }"
12602,d,"    public int d(String tag, String msg, Throwable tr) {
        return Log.d(tag, msg, tr);
    }"
12603,d,"    public int d(String tag, String msg) {
        return Log.d(tag, msg);
    }"
12604,v,"    public int v(String tag, String msg, Throwable tr) {
        return Log.v(tag, msg, tr);
    }"
12605,v,"    public int v(String tag, String msg) {
        return Log.v(tag, msg);
    }"
12606,e,"    int e(String tag, String msg, Throwable tr);
}"
12608,w,"    int w(String tag, String msg, Throwable tr);
"
12610,i,"    int i(String tag, String msg, Throwable tr);
"
12612,d,"    int d(String tag, String msg, Throwable tr);
"
12614,v,"    int v(String tag, String msg, Throwable tr);
"
12618,encodeToHttp,"	public static String encodeToHttp(String str) {
		String enc;
		try {
			enc = URLEncoder.encode(str, ""UTF-8"");
		} catch (UnsupportedEncodingException e) {"
12619,deleteFile,"	public static boolean deleteFile(String path, String fileName) {
		Log.v(""MewX-File"",
				""Path: ""
						+ path
						+ (path.charAt(path.length() - 1) != File.separatorChar ? File.separator"
12622,testFileExist,"	public static boolean testFileExist(String path) {
		File file = new File(path);
		return file.exists();
	}"
12623,DecodeBase64,"	static public byte[ ] DecodeBase64( String s ) {
		byte[] b;
        b = Base64.decode( s, Base64.DEFAULT);
        return b;
	}"
12624,EncodeBase64,"	static public String EncodeBase64( String s ) {
        try {
			return EncodeBase64( s.getBytes(""UTF-8"") );"
12625,EncodeBase64,"	static public String EncodeBase64(byte[] b) {
        String str = Base64.encodeToString( b, Base64.DEFAULT);
        return str;
	}"
12626,onResume,"	public void onResume() {
		super.onResume();
		MobclickAgent.onPageStart(""Library"");
	}"
12627,onPause,"	public void onPause() {
		super.onPause();
		MobclickAgent.onPageEnd(""Library"");
	}"
12631,onItemClick,"			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				EntryElement ele = entryElementList.get(position);
				Log.v(""MewX"", ""lv clicked: position="" + position + ""; getName=""
						+ ele.getName());"
12635,handleStyledAttributes,"    public void handleStyledAttributes(TypedArray a);
}"
12643,setOnDoubleTapListener,"    public void setOnDoubleTapListener(GestureDetector.OnDoubleTapListener newOnDoubleTapListener);
}"
12644,getIPhotoViewImplementation,"    IPhotoView getIPhotoViewImplementation();
"
12645,setZoomTransitionDuration,"    void setZoomTransitionDuration(int milliseconds);
"
12647,setPhotoViewRotation,"    void setPhotoViewRotation(float rotationDegree);
"
12649,setScaleType,"    void setScaleType(ImageView.ScaleType scaleType);
"
12650,setScale,"    void setScale(float scale, float focalX, float focalY, boolean animate);
"
12651,setScale,"    void setScale(float scale, boolean animate);
"
12653,getOnViewTapListener,"    PhotoViewAttacher.OnViewTapListener getOnViewTapListener();
"
12654,setRotationBy,"    void setRotationBy(float rotationDegree);
"
12655,setRotationTo,"    void setRotationTo(float rotationDegree);
"
12656,setOnViewTapListener,"    void setOnViewTapListener(PhotoViewAttacher.OnViewTapListener listener);
"
12657,getOnPhotoTapListener,"    PhotoViewAttacher.OnPhotoTapListener getOnPhotoTapListener();
"
12658,setOnPhotoTapListener,"    void setOnPhotoTapListener(PhotoViewAttacher.OnPhotoTapListener listener);
"
12659,setOnMatrixChangeListener,"    void setOnMatrixChangeListener(PhotoViewAttacher.OnMatrixChangedListener listener);
"
12660,setOnLongClickListener,"    void setOnLongClickListener(View.OnLongClickListener listener);
"
12661,setMaximumScale,"    void setMaximumScale(float maximumScale);
"
12665,setMinimumScale,"    void setMinimumScale(float minimumScale);
"
12667,setAllowParentInterceptOnEdge,"    void setAllowParentInterceptOnEdge(boolean allow);
"
12677,setDisplayMatrix,"    boolean setDisplayMatrix(Matrix finalMatrix);
"
12680,getOrientation,"    public int getOrientation() {
        return orientation;
    }"
12681,getCenter,"    public PointF getCenter() {
        return new PointF(centerX, centerY);
    }"
12682,getScale,"    public float getScale() {
        return scale;
    }"
12684,getAvailableNovolContentImagePath,"	public static String getAvailableNovolContentImagePath(String fileName) {
		if (LightCache.testFileExist(getFirstFullSaveFilePath()
				+ imgsSaveFolderName + File.separator + fileName)) {"
12686,saveNovelContentImage,"	public static boolean saveNovelContentImage(String url) {
		String imgFileName = generateImageFileNameByURL(url);
		if (!LightCache.testFileExist(getFirstFullSaveFilePath()
				+ imgsSaveFolderName + File.separator + imgFileName)
				&& !LightCache.testFileExist(getSecondFullSaveFilePath()"
12687,accessToLocalBookshelf,"	public static void accessToLocalBookshelf(int aid) {
		int temp = bookshelf.indexOf(aid);
		if (aid == -1)
			return;

		bookshelf.remove(temp);
		bookshelf.add(0, aid);
"
12688,testInLocalBookshelf,"	public static boolean testInLocalBookshelf(int aid) {
		if (bookshelf == null)
			loadLocalBookShelf();
"
12689,getLocalBookshelfList,"	public static ArrayList<Integer> getLocalBookshelfList() {
		if (bookshelf == null)
			loadLocalBookShelf();
"
12690,removeFromLocalBookshelf,"	public static void removeFromLocalBookshelf(int aid) {
		if (bookshelf == null)
			loadLocalBookShelf();

		int i = bookshelf.indexOf(aid);
		if (i != -1)
			bookshelf.remove(i);"
12692,writeLocalBookShelf,"	public static void writeLocalBookShelf() {
		if (bookshelf == null)
			loadLocalBookShelf();

		String s = """";
		for (int i = 0; i < bookshelf.size(); i++) {
			if (i != 0)"
12694,getReadSavesRecord,"	public static int getReadSavesRecord(int c, int h) {
		if (readSaves == null)
			loadReadSaves();

		for (int i = 0; i < readSaves.size(); i++) {"
12696,writeReadSaves,"	public static void writeReadSaves() {
		if (readSaves == null)
			loadReadSaves();

		String t = """";
		for (int i = 0; i < readSaves.size(); i++) {
			if (i != 0)"
12699,onSearchClicked,"	public static void onSearchClicked(int index) {
		if (index >= searchHistory.size())
			return;

		String temp = searchHistory.get(index);
		searchHistory.remove(index);
		searchHistory.add(0, temp);
"
12701,getSearchHistory,"	public static ArrayList<String> getSearchHistory() {
		if (searchHistory == null)
			readSearchHistory();
		return searchHistory;"
12705,loadFullFileFromSaveFolder,"	public static String loadFullFileFromSaveFolder(String subFolderName,
			String fileName) {
		return loadFullSaveFileContent(subFolderName + File.separator"
12709,getSecondFullSaveFilePath,"	public static String getSecondFullSaveFilePath() {
		return getSecondStoragePath() + saveFolderName + File.separator;
	}"
12710,getFirstFullSaveFilePath,"	public static String getFirstFullSaveFilePath() {
		return getFirstStoragePath() + saveFolderName + File.separator;
	}"
12718,getSecondStoragePath,"	public static String getSecondStoragePath() {
		return MyApp.getContext().getFilesDir() + File.separator;
	}"
12719,getFirstStoragePath,"	public static String getFirstStoragePath() {
		return Environment.getExternalStorageDirectory() + File.separator
				+ ""wenku8"" + File.separator;"
12724,fling,"    public void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY,
                      int overX, int overY) {
        mScroller.fling(startX, startY, velocityX, velocityY, minX, maxX, minY, maxY, overX, overY);"
12726,setOnGestureListener,"    public void setOnGestureListener(OnGestureListener listener);
"
12728,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev);
"
12729,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        mDetector.onTouchEvent(ev);
        return super.onTouchEvent(ev);
    }"
12730,isScaling,"    public boolean isScaling() {
        return mDetector.isInProgress();
    }"
12732,onScaleBegin,"            public boolean onScaleBegin(ScaleGestureDetector detector) {
                return true;
            }"
12733,onScale,"            public boolean onScale(ScaleGestureDetector detector) {
                float scaleFactor = detector.getScaleFactor();

                if (Float.isNaN(scaleFactor) || Float.isInfinite(scaleFactor))
                    return false;
"
12735,getItem,"	public EntryElement getItem(int position) {
		return (EntryElement) this.ele.get(position);
	}"
12737,getView,"	public View getView(int position, View convertView, ViewGroup parent) {
		EntryElement e = getItem(position);
		if (convertView == null) {
			convertView = LayoutInflater.from(this.context).inflate(
					R.layout.layout_entry_button, parent, false);
		}
		
		TextView txt = (TextView) convertView.findViewById(R.id.entry_name);"
12741,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        final int action = ev.getAction();
        switch (action & MotionEvent.ACTION_MASK) {
            case MotionEvent.ACTION_DOWN:
                mActivePointerId = ev.getPointerId(0);
                break;"
12742,getActiveY,"    float getActiveY(MotionEvent ev) {
        try {
            return ev.getY(mActivePointerIndex);"
12743,getActiveX,"    float getActiveX(MotionEvent ev) {
        try {
            return ev.getX(mActivePointerIndex);"
12745,onDoubleTap,"    public boolean onDoubleTap(MotionEvent ev) {
        if (photoViewAttacher == null)
            return false;

        try {"
12746,onSingleTapConfirmed,"    public boolean onSingleTapConfirmed(MotionEvent e) {
        if (this.photoViewAttacher == null)
            return false;

        ImageView imageView = photoViewAttacher.getImageView();

        if (null != photoViewAttacher.getOnPhotoTapListener()) {"
12747,setPhotoViewAttacher,"    public void setPhotoViewAttacher(PhotoViewAttacher newPhotoViewAttacher) {
        this.photoViewAttacher = newPhotoViewAttacher;
    }"
12748,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        switch (ev.getAction()) {
            case MotionEvent.ACTION_DOWN: {
                mVelocityTracker = VelocityTracker.obtain();"
12749,isScaling,"    public boolean isScaling() {
        return false;
    }"
12750,getActiveY,"    float getActiveY(MotionEvent ev) {
        return ev.getY();
    }"
12751,getActiveX,"    float getActiveX(MotionEvent ev) {
        return ev.getX();
    }"
12752,setOnGestureListener,"    public void setOnGestureListener(OnGestureListener listener) {
        this.mListener = listener;
    }"
12753,getPointerIndexHoneyComb,"    private static int getPointerIndexHoneyComb(int action) {
        return (action & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
    }"
12754,getPointerIndexEclair,"    private static int getPointerIndexEclair(int action) {
        return (action & MotionEvent.ACTION_POINTER_ID_MASK) >> MotionEvent.ACTION_POINTER_ID_SHIFT;
    }"
12755,getPointerIndex,"    public static int getPointerIndex(int action) {
        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB)
            return getPointerIndexHoneyComb(action);"
12756,postOnAnimationJellyBean,"    private static void postOnAnimationJellyBean(View view, Runnable runnable) {
        view.postOnAnimation(runnable);
    }"
12757,postOnAnimation,"    public static void postOnAnimation(View view, Runnable runnable) {
        if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN) {
            postOnAnimationJellyBean(view, runnable);"
12772,onPause,"	public void onPause() {
		super.onPause();
		MobclickAgent.onPageEnd(""Bookshelf"");
	}"
12782,removeAllListeners,"  public void removeAllListeners() {
    mListeners.clear();
  }"
12783,removeListener,"  public void removeListener(SpringSystemListener listenerToRemove) {
    if (listenerToRemove == null) {
      throw new IllegalArgumentException(""listenerToRemove is required"");
    }"
12784,addListener,"  public void addListener(SpringSystemListener newListener) {
    if (newListener == null) {
      throw new IllegalArgumentException(""newListener is required"");
    }"
12785,activateSpring,"  void activateSpring(String springId) {
    Spring spring = mSpringRegistry.get(springId);
    if (spring == null) {
      throw new IllegalArgumentException(""springId "" + springId + "" does not reference a registered spring"");
    }
    mActiveSprings.add(spring);"
12786,loop,"  public void loop(double ellapsedMillis) {
    for (SpringSystemListener listener : mListeners) {
      listener.onBeforeIntegrate(this);
    }
    advance(ellapsedMillis);
    if (mActiveSprings.isEmpty()) {
      mIdle = true;"
12788,deregisterSpring,"  void deregisterSpring(Spring spring) {
    if (spring == null) {
      throw new IllegalArgumentException(""spring is required"");
    }
    mActiveSprings.remove(spring);"
12789,registerSpring,"  void registerSpring(Spring spring) {
    if (spring == null) {
      throw new IllegalArgumentException(""spring is required"");
    }
    if (mSpringRegistry.containsKey(spring.getId())) {"
12790,getAllSprings,"  public List<Spring> getAllSprings() {
    Collection<Spring> collection = mSpringRegistry.values();
    List<Spring> list;
    if (collection instanceof List) {
      list = (List<Spring>)collection;
    } else {"
12791,getSpringById,"  public Spring getSpringById(String id) {
    if (id == null) {
      throw new IllegalArgumentException(""id is required"");
    }"
12792,createSpring,"  public Spring createSpring() {
    Spring spring = new Spring(this);
    registerSpring(spring);
    return spring;
  }"
12793,getIsIdle,"  public boolean getIsIdle() {
    return mIdle;
  }"
12795,initMaterialStyle,"    protected void initMaterialStyle(int layoutId, StatusBarColor statusBarColor) {
        initMaterialStyle(layoutId, statusBarColor, HomeIndicatorStyle.ARROW);
    }"
12796,initMaterialStyle,"    protected void initMaterialStyle(int layoutId, HomeIndicatorStyle indicatorStyle) {
        initMaterialStyle(layoutId, StatusBarColor.PRIMARY, indicatorStyle);
    }"
12797,initMaterialStyle,"    protected void initMaterialStyle(int layoutId) {
        initMaterialStyle(layoutId, HomeIndicatorStyle.ARROW);
    }"
12798,getToolbar,"    protected Toolbar getToolbar() {
        if (toolbar == null) {
            toolbar = findViewById(R.id.toolbar_actionbar);
        }"
12799,getTintManager,"    protected SystemBarTintManager getTintManager() {
        if (tintManager == null) {
            tintManager = new SystemBarTintManager(this);
        }"
12800,stop,"    public void stop() {
      mStarted = false;
      mChoreographer.removeFrameCallback(mFrameCallback);
    }"
12801,start,"    public void start() {
      if (mStarted) {
        return;
      }
      mStarted = true;
      mLastTime = SystemClock.uptimeMillis();
      mChoreographer.removeFrameCallback(mFrameCallback);"
12802,doFrame,"        public void doFrame(long frameTimeNanos) {
          if (!mStarted || mSpringSystem == null) {
            return;
          }
          long currentTime = SystemClock.uptimeMillis();
          mSpringSystem.loop(currentTime - mLastTime);
          mLastTime = currentTime;"
12803,create,"    public static ChoreographerAndroidSpringLooper create() {
      return new ChoreographerAndroidSpringLooper(Choreographer.getInstance());
    }"
12804,stop,"    public void stop() {
      mStarted = false;
      mHandler.removeCallbacks(mLooperRunnable);
    }"
12805,start,"    public void start() {
      if (mStarted) {
        return;
      }
      mStarted = true;
      mLastTime = SystemClock.uptimeMillis();
      mHandler.removeCallbacks(mLooperRunnable);"
12806,run,"        public void run() {
          if (!mStarted || mSpringSystem == null) {
            return;
          }
          long currentTime = SystemClock.uptimeMillis();
          mSpringSystem.loop(currentTime - mLastTime);"
12807,create,"    public static SpringLooper create() {
      return new LegacyAndroidSpringLooper(new Handler());
    }"
12808,createSpringLooper,"  public static SpringLooper createSpringLooper() {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
      return ChoreographerAndroidSpringLooper.create();"
12809,getIntSize,"        public int getIntSize() {
            return 8;
        }"
12810,orderIntToByte,"        public byte[] orderIntToByte(int serial) {
            return ByteBuffer.allocate(4).order(PLATFORM_BYTE_ORDER).putInt(serial).array();
        }"
12811,orderLongToByte,"        public byte[] orderLongToByte(long serial, int length) {
            return ByteBuffer.allocate(length).order(PLATFORM_BYTE_ORDER).putLong(serial).array();
        }"
12812,orderByteToLong,"        public long orderByteToLong(byte[] data) {
            return ByteBuffer.wrap(data).order(PLATFORM_BYTE_ORDER).getLong();
        }"
12813,orderByteToInt,"        public int orderByteToInt(byte[] data) {
            return ByteBuffer.wrap(data).order(PLATFORM_BYTE_ORDER).getInt();
        }"
12814,getIntSize,"        public int getIntSize() {
            return 4;
        }"
12816,orderLongToByte,"        public byte[] orderLongToByte(long serial, int length) {
            return ByteBuffer.allocate(length).order(PLATFORM_BYTE_ORDER).putInt((int) serial).array();
        }"
12817,orderByteToLong,"        public long orderByteToLong(byte[] data) {
            return ByteBuffer.wrap(data).order(PLATFORM_BYTE_ORDER).getInt() & 0xFFFFFFFFL;
        }"
12820,orderIntToByte,"    public abstract byte[] orderIntToByte(int serial);
"
12821,orderLongToByte,"    public abstract byte[] orderLongToByte(long serial, int length);
"
12822,orderByteToLong,"    public abstract long orderByteToLong(byte[] data);
"
12823,orderByteToInt,"    public abstract int orderByteToInt(byte[] data);
"
12824,getPlatform,"    public static Platform getPlatform() {
        return PLATFORM_INTERNAL;
    }"
12825,types,"    private static Class<?>[] types(Object... values) {
        if (values == null) {
            return new Class[0];
        }

        Class<?>[] result = new Class[values.length];"
12826,wrap,"    private static Class<?> wrap(Class<?> type) {
        if (type == null) {
            return null;
        } else if (type.isPrimitive()) {"
12827,isSimilarSignature,"    private static boolean isSimilarSignature(Class<?>[] declaredTypes, Class<?>[] actualTypes) {
        if (declaredTypes.length == actualTypes.length) {
            for (int i = 0; i < actualTypes.length; i++) {"
12835,applyHooks,"    public void applyHooks(Class<?> holdClass) {
        for (Method hookMethod : holdClass.getDeclaredMethods()) {
            Hook hook = hookMethod.getAnnotation(Hook.class);"
12836,getDefault,"    public static HookManager getDefault() {
        return sDefault;
    }"
12837,run,"            public void run() {
                startActivity(new Intent(WelcomeActivity.this,MainActivity.class));
                finish();
            }"
12838,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_welcome);
        new Handler().postDelayed(new Runnable() {
            @Override"
12841,onItemClick,"            public void onItemClick(View view, int position) {
                switch (position){
                    case 0:"
12842,initListener,"    private void initListener() {
        homeAdapter.setOnRecyclerViewItemClickListener(new BaseQuickAdapter.OnRecyclerViewItemClickListener() {
            private Intent intent;"
12844,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        initView();
        initListener();
    }"
12845,CopyStream,"    public static void CopyStream(InputStream is, OutputStream os)
    {
        final int buffer_size=1024;
        try"
12846,getSizeInBytes,"    long getSizeInBytes(Bitmap bitmap) {

        if(bitmap==null)
"
12848,checkSize,"    private void checkSize() {

        Log.i(TAG, ""cache size=""+size+"" length=""+cache.size());
"
12849,put,"    public void put(String id, Bitmap bitmap){

        try{"
12850,get,"    public Bitmap get(String id){

        try{"
12851,setLimit,"    public void setLimit(long new_limit){

        limit=new_limit;
"
12852,onClick,"        public void onClick(View arg0) {
            adapter.imageLoader.clearCache();
            adapter.notifyDataSetChanged();
        }"
12853,onDestroy,"    public void onDestroy()
    {
        list.setAdapter(null);
        super.onDestroy();"
12854,onCreate,"    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        list=(ListView)findViewById(R.id.list);
        adapter=new LazyAdapter(this, mStrings);
        list.setAdapter(adapter);
        
        Button b=(Button)findViewById(R.id.button1);"
12855,getView,"    public View getView(int position, View convertView, ViewGroup parent) {
        View vi=convertView;
        if(convertView==null)
            vi = inflater.inflate(R.layout.item, null);

        TextView text=(TextView)vi.findViewById(R.id.text);;
        ImageView image=(ImageView)vi.findViewById(R.id.image);
        text.setText(""item ""+position);
        imageLoader.DisplayImage(data[position], image);
        return vi;"
12857,getItem,"    public Object getItem(int position) {
        return position;
    }"
12858,getCount,"    public int getCount() {
        return data.length;
    }"
12859,clearCache,"    public void clearCache() {

        memoryCache.clear();
"
12861,imageViewReused,"    boolean imageViewReused(PhotoToLoad photoToLoad){

        String tag=imageViews.get(photoToLoad.imageView);

        if(tag==null || !tag.equals(photoToLoad.url))"
12863,decodeFile,"    private Bitmap decodeFile(File f){

        try {
"
12864,getBitmap,"    private Bitmap getBitmap(String url) 

    {

        File f=fileCache.getFile(url);
"
12865,queuePhoto,"    private void queuePhoto(String url, ImageView imageView)

    {
"
12866,DisplayImage,"    public void DisplayImage(String url, ImageView imageView)

    {

        imageViews.put(imageView, url);"
12867,clear,"    public void clear(){

        File[] files=cacheDir.listFiles();

        if(files==null)"
12869,setMaxPage,"    public void setMaxPage(int maxPage) {
        this.maxPage = maxPage;
    }"
12870,getMaxPage,"    public int getMaxPage() {
        return maxPage;
    }"
12871,setMaxCount,"    public void setMaxCount(int maxCount) {
        this.maxCount = maxCount;
    }"
12872,getMaxCount,"    public int getMaxCount() {
        return maxCount;
    }"
12877,setObjList,"    public void setObjList(T objList) {
        this.objList = objList;
    }"
12878,getObjList,"    public T getObjList() {
        return objList;
    }"
12879,setObj,"    public void setObj(T obj) {
        this.obj = obj;
    }"
12880,getObj,"    public T getObj() {
        return obj;
    }"
12883,setEvent,"    public void setEvent(String event) {
        this.event = event;
    }"
12884,getEvent,"    public String getEvent() {
        return event;
    }"
12885,isSuccess,"    public boolean isSuccess() {
        return event.equals(""0"");
    }"
12889,sendSmsCode4Register,"    public ApiResponse<Void> sendSmsCode4Register(String phoneNum) {
        Map<String, String> paramMap = new HashMap<String, String>();
        paramMap.put(""appKey"", APP_KEY);
        paramMap.put(""method"", SEND_SMS_CODE);
        paramMap.put(""phoneNum"", phoneNum);

        Type type = new TypeToken<ApiResponse<Void>>(){}.getType();
        try {"
12890,listNewCoupon,"    public ApiResponse<List<CouponBO>> listNewCoupon(int currentPage, int pageSize);
}"
12891,loginByApp,"    public ApiResponse<Void> loginByApp(String loginName, String password, String imei, int loginOS);
"
12892,registerByPhone,"    public ApiResponse<Void> registerByPhone(String phoneNum, String code, String password);
"
12893,sendSmsCode4Register,"    public ApiResponse<Void> sendSmsCode4Register(String phoneNum);
"
12895,isLibPath,"	public static boolean isLibPath(String qualifiedName) {
		return qualifiedName.startsWith(LIBS_PACKAGE + ""."");
	}"
12896,isJDKPath,"	public static boolean isJDKPath(String qualifiedName) {
		return qualifiedName.startsWith(JAVA_PACKAGE + ""."");
	}"
12897,getObjectClassName,"	public static String getObjectClassName() {
		return OBJECT_CLASSNAME;
	}"
12898,isJDKReplacementMode,"	public static boolean isJDKReplacementMode() {
		return ""java.lang"".equals(LANG_PACKAGE);
	}"
12899,getStringTypesClassName,"	public static String getStringTypesClassName(String libModule) {
		return libModule + ""."" + STRING_TYPES_INTERFACE_NAME;
	}"
12900,toJsIdentifier,"	public static String toJsIdentifier(String identifier) {
		if (!identifier.isEmpty() && Character.isUpperCase(identifier.charAt(0))
				&& JSweetDefTranslatorConfig.JAVA_KEYWORDS.contains(identifier.toLowerCase())) {
			return identifier.toLowerCase();"
12901,getVersionNumber,"	public static String getVersionNumber() {
		return APPLICATION_PROPERTIES.getProperty(""application.version"").split(""-"")[0];
	}"
12903,main,"	public static void main(String[] args) throws Throwable {

		if (args.length < 1) {
			System.out.println(""usage: java -jar candy-tool.jar <command> [<args>]"");
			System.out.println();"
12904,onClick,"    public void onClick(View view) {
        JPTabBar tabBar = (JPTabBar) ((Activity)getContext()).findViewById(R.id.tabbar);
        tabBar.setTabTypeFace(""fonts/Jaden.ttf"");
    }"
12905,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.tab4,null);
        layout.findViewById(R.id.button1).setOnClickListener(this);
        return layout;
    }"
12906,onCheckedChanged,"    public void onCheckedChanged(RadioGroup group, @IdRes int checkedId) {
        switch (checkedId){
            case R.id.radioButton1:"
12907,init,"    private void init(View layout) {
        mTabBar = ((MainActivity)getActivity()).getTabbar();

        ((RadioGroup)layout.findViewById(R.id.radioGroup1)).setOnCheckedChangeListener(this);
        ((RadioGroup)layout.findViewById(R.id.radioGroup2)).setOnCheckedChangeListener(this);"
12908,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.tab3,null);
        init(layout);
        return layout;
    }"
12910,init,"    private void init(View layout) {
        mTabBar = ((MainActivity)getActivity()).getTabbar();
        mGroup = (RadioGroup) layout.findViewById(R.id.radioGroup);
        mGroup.setOnCheckedChangeListener(this);
    }"
12911,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout =inflater.inflate(R.layout.tab2,null);
        init(layout);
        return layout;
    }"
12913,afterTextChanged,"    public void afterTextChanged(Editable s) {
        if(s!=null&&s.toString().equals(""0"")){
            mTabBar.showBadge(0, """"+0,true);
            mTabBar.hideBadge(0);
            return;
        }"
12914,onTextChanged,"    public void onTextChanged(CharSequence s, int start, int before, int count) {
    }"
12915,beforeTextChanged,"    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
"
12916,onClick,"    public void onClick(View v) {
        int count = Integer.parseInt(mNumberEt.getText().toString());
        if (v == mMinusIb) {
            count--;"
12918,onCreateView,"    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View layout = inflater.inflate(R.layout.tab1, null);
        init(layout);
        return layout;
    }"
12919,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_say);
    }"
12920,setCurrentItem,"    public void setCurrentItem(int item) {
        super.setCurrentItem(item);
    }"
12921,setCurrentItem,"    public void setCurrentItem(int item, boolean smoothScroll) {
        super.setCurrentItem(item, smoothScroll);
    }"
12922,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent arg0) {
        if (noScroll)
            return false;"
12924,scrollTo,"    public void scrollTo(int x, int y) {
        super.scrollTo(x, y);
    }"
12925,setNoScroll,"    public ViewPager setNoScroll(boolean noScroll) {
        this.noScroll = noScroll;
        return null;
    }"
12926,getTabbar,"    public JPTabBar getTabbar() {
        return mTabbar;
    }"
12928,onTabSelect,"    public void onTabSelect(int index) {
        Toast.makeText(MainActivity.this,""choose the tab index is ""+index,Toast.LENGTH_SHORT).show();
    }"
12929,onDismiss,"    public void onDismiss(int position) {
            mTab1.clearCount();
    }"
12932,getCount,"    public int getCount() {
        return list.size();
    }"
12933,getItem,"    public Fragment getItem(int position) {
        return list.get(position);
    }"
12934,getTemplate,"            public Reader getTemplate(String name) throws Exception {
                if (""partial"".equals(name)) {
                    loadCount.incrementAndGet();
                    TimeUnit.MILLISECONDS.sleep(20);"
12938,counter,"        public int counter () {
            return counter.get();
        }"
12939,getTemplate,"        @Override public Reader getTemplate (String name) throws Exception {
            counter.incrementAndGet();
            if (!""templateB"".equals(name)) {
                throw new IllegalArgumentException();
            }"
12940,getTestsFromYaml,"    private static Iterable<Spec> getTestsFromYaml(String name, String ymlPath) {
        try {
            @SuppressWarnings(""unchecked"")"
12942,data,"    public static Collection<Object[]> data (String specPath, String[] groups) {
        List<Object[]> tuples = new ArrayList<>();
        int i = 0;
        for (String g : groups) {
            Iterable<Spec> specs = getTestsForGroup(specPath, g);
            for (Spec s : specs) {"
12943,uncrlf,"    private static String uncrlf (String text) {
        return (text == null) ? null : text.replace(""\r"", ""\\r"").replace(""\n"", ""\\n"");
    }"
12944,showWhitespace,"    public static String showWhitespace (String s) {
       s = s.replace(""\r\n"", ""\u240D"");
       s = s.replace('\t', '\u21E5');
       s = s.replace(""\n"", ""\u21B5\n"");
       s = s.replace(""\u240D"", ""\u240D\n"");
       return s;
    }"
12946,getTemplate,"    @Override public Reader getTemplate (String name) throws Exception {
        if (spec == null) return new StringReader(EMPTY_STRING);
        String partial = spec.getPartial(name);
        return new StringReader(partial == null ? EMPTY_STRING : partial);
    }"
12948,getPartial,"    public String getPartial (String name) {
        return partials == null ? null : partials.get(name);
    }"
12949,getData,"    public Object getData () {
        return map.get(""data"");
    }"
12950,getExpectedOutput,"    public String getExpectedOutput () {
        return (String) map.get(""expected"");
    }"
12951,getTemplate,"    public String getTemplate () {
        return (String) map.get(""template"");
    }"
12952,getDescription,"    public String getDescription () {
        return (String) map.get(""desc"");
    }"
12953,getName,"    public String getName () {
        return (String) map.get(""name"");
    }"
12954,context,"    protected static Object context (Object... data) {
        Map<String, Object> ctx = new HashMap<String, Object>();
        for (int ii = 0; ii < data.length; ii += 2) {
            ctx.put(data[ii].toString(), data[ii+1]);
        }"
12955,uncrlf,"    protected static String uncrlf (String text) {
        return text == null ? null : text.replace(""\r"", ""\\r"").replace(""\n"", ""\\n"");
    }"
12956,test,"    protected void test (String expected, String template, Object ctx) {
        test(Mustache.compiler(), expected, template, ctx);
    }"
12958,test,"    protected void test(Mustache.Compiler compiler, String expected, String template, Object ctx) {
        String actual = compiler.compile(template).execute(ctx);
        if (! Objects.equals(expected, actual)) {
            System.out.println("""");
            System.out.println(""----------------------------------------"");"
12959,starting,"       protected void starting(Description description) {
           name = description.getDisplayName();
       }"
12960,testNonStandardDefaultDelims,"    @Test public void testNonStandardDefaultDelims () {
        test(Mustache.compiler().withDelims(""<% %>""), ""bar"", ""<%foo%>"", context(""foo"", ""bar""));
    }"
12961,execute,"            public void execute (Template.Fragment frag, Writer out) {
                String which = frag.execute();
                if (which.equals(""A"")) {
                    frag.executeTemplate(a, out);"
12963,execute,"               public void execute (Template.Fragment frag, Writer out) throws IOException {
                   out.write(frag.decompile());
               }"
12967,testLambdaDecompile,"    @Test public void testLambdaDecompile () {
        test(""Foo {{a}}, Bar {{a}}"", ""{{#lam}}Foo {{a}}{{/lam}}, {{#lam}}Bar {{a}}{{/lam}}"",
             context(""lam"", new Mustache.Lambda() {
               public void execute (Template.Fragment frag, Writer out) throws IOException {
                   out.write(frag.decompile());
               }"
12968,execute,"                     public void execute (Template.Fragment frag, Writer out) throws IOException {
                         frag.execute(context(""a"", ""a in l2""), out);
                     }"
12969,execute,"                     public void execute (Template.Fragment frag, Writer out) throws IOException {
                         frag.execute(context(""a"", ""a in l1""), out);
                     }"
12970,testLambdaWithContext,"    @Test public void testLambdaWithContext () {
        test(""a in l1, a in l2"", ""{{#l1}}{{a}}{{/l1}}, {{#l2}}{{a}}{{/l2}}"", context(
                 ""l1"", new Mustache.Lambda() {"
12971,execute,"                 public void execute (Template.Fragment frag, Writer out) throws IOException {
                     frag.execute(out);
                 }"
12972,executeInverse,"                 public void executeInverse (Template.Fragment frag, Writer out) throws IOException {
                     out.write(""negative = "");
                     frag.execute(out);
                 }"
12973,execute,"                 public void execute (Template.Fragment frag, Writer out) throws IOException {
                     out.write(""positive = "");
                     frag.execute(out);
                 }"
12974,testInvertibleLambda,"    @Test public void testInvertibleLambda () {
        test(""positive = positive, negative = negative, simple lambdas do still work"",
             ""{{#invertible}}positive{{/invertible}}, {{^invertible}}negative{{/invertible}}, "" +"
12975,lookup,"                 protected String lookup (String contents) {
                     if (contents.equals(""1"")) return ""Slug"";
                     else if (contents.equals(""2"")) return ""bug"";"
12976,execute,"                 public void execute (Template.Fragment frag, Writer out) throws IOException {
                     out.write(lookup(frag.execute()));
                 }"
12977,testLambda2,"    @Test public void testLambda2 () {
        test(""Slug bug potato!"", ""{{#l}}1{{/l}} {{#l}}2{{/l}} {{#l}}{{three}}{{/l}}"",
             context(""three"", ""3"", ""l"", new Mustache.Lambda() {"
12978,execute,"                 public void execute (Template.Fragment frag, Writer out) throws IOException {
                     out.write(""<b>"");
                     frag.execute(out);
                     out.write(""</b>"");
                 }"
12979,testLambda1,"    @Test public void testLambda1 () {
        test(""<b>Willy is awesome.</b>"", ""{{#bold}}{{name}} is awesome.{{/bold}}"",
             context(""name"", ""Willy"", ""bold"", new Mustache.Lambda() {"
12980,testCompilingDoesntChangeCompilersDelimiters,"    @Test public void testCompilingDoesntChangeCompilersDelimiters() {
        Mustache.Compiler compiler = Mustache.compiler();
        Object ctx = context(""variable"", ""value"");
        test(compiler, ""value"", ""{{=<% %>=}}<% variable %>"", ctx);
        test(compiler, ""value"", ""{{=<% %>=}}<% variable %>"", ctx);
    }"
12981,testNullValueGetsNullDefault,"    @Test public void testNullValueGetsNullDefault () {
        test(Mustache.compiler().nullValue(""foo""),
             ""foobar"", ""{{nullvar}}{{nonnullvar}}"", context(""nonnullvar"", ""bar"", ""nullvar"", null));"
12982,testInvalidTripleMustache,"    @Test public void testInvalidTripleMustache () {
        try {
            Mustache.compiler().compile(""{{{foo}}"");
            fail(""Expected MustacheParseException"");"
12983,testMissingValueWithNullDefault,"    @Test public void testMissingValueWithNullDefault () {
        try {
            Object ctx = context(""notmissing"", ""bar"");"
12984,testNullValueGetsDefault,"    @Test public void testNullValueGetsDefault () {
        test(Mustache.compiler().defaultValue(""foo""),
             ""foobar"", ""{{nullvar}}{{nonnullvar}}"", context(""nonnullvar"", ""bar"", ""nullvar"", null));"
12985,testMissingValueWithDefaultSubstitution3,"    @Test public void testMissingValueWithDefaultSubstitution3 () {
        test(Mustache.compiler().defaultValue(""{{?{{name}}?}}""),
             ""{{?missing?}}bar"", ""{{missing}}{{notmissing}}"", context(""notmissing"", ""bar""));"
12986,testMissingValueWithDefaultSubstitution2,"    @Test public void testMissingValueWithDefaultSubstitution2 () {
        test(Mustache.compiler().defaultValue(""{{{{name}}}}""),
             ""{{missing}}bar"", ""{{missing}}{{notmissing}}"", context(""notmissing"", ""bar""));"
12987,testMissingValueWithDefaultSubstitution,"    @Test public void testMissingValueWithDefaultSubstitution () {
        test(Mustache.compiler().defaultValue(""?{{name}}?""),
             ""?missing?bar"", ""{{missing}}{{notmissing}}"", context(""notmissing"", ""bar""));"
12988,testMissingValueWithDefaultNonEmptyString,"    @Test public void testMissingValueWithDefaultNonEmptyString () {
        test(Mustache.compiler().defaultValue(""foo""),
             ""foobar"", ""{{missing}}{{notmissing}}"", context(""notmissing"", ""bar""));"
12989,testMissingValueWithDefault,"    @Test public void testMissingValueWithDefault () {
        test(Mustache.compiler().defaultValue(""""),
             ""bar"", ""{{missing}}{{notmissing}}"", context(""notmissing"", ""bar""));"
12990,testMissingValue,"    @Test public void testMissingValue () {
        try {
            test(""n/a"", ""{{missing}} {{notmissing}}"", context(""notmissing"", ""bar""));"
12991,testStandardsModeWithNoParentContextSearching,"    @Test public void testStandardsModeWithNoParentContextSearching () {
        try {
            String tmpl = ""{{#parent}}foo{{parentProperty}}bar{{/parent}}"";"
12992,testStandardsModeWithDotValue,"    @Test public void testStandardsModeWithDotValue () {
        String tmpl = ""{{#foo}}:{{.}}:{{/foo}}"";
        String result = Mustache.compiler().standardsMode(true).compile(tmpl).
            execute(Collections.singletonMap(""foo"", ""bar""));
        check("":bar:"", result);"
12993,testStandardsModeWithNullValuesInInverseLoop,"    @Test public void testStandardsModeWithNullValuesInInverseLoop () {
        test(""first line\nfoo \nsecond line"",
             ""first line\n{{^nullvalue}}foo{{/nullvalue}} \nsecond line"","
12994,testStandardsModeWithNullValuesInLoop,"    @Test public void testStandardsModeWithNullValuesInLoop () {
        test(""first line\nsecond line"",
             ""first line\n{{#nullvalue}}foo\n{{/nullvalue}}\nsecond line"","
12995,testLineReporting,"    @Test public void testLineReporting () {
        String tmpl = ""first line\n{{nonexistent}}\nsecond line"";
        try {
            Mustache.compiler().compile(tmpl).execute(EMPTY);"
12996,testNestedIndex,"    @Test public void testNestedIndex () {
        String tmpl =
            ""{{#fooList}}\n"" +
            ""{{#quantity}}|q{{-index}}={{quantity}}{{/quantity}}|{{name}}\n"" +"
12997,testIndex,"    @Test public void testIndex () {
        test(""123"", ""{{#things}}{{-index}}{{/things}}"",
             context(""things"", Arrays.asList(""foo"", ""bar"", ""baz"")));"
12998,testNotLast,"    @Test public void testNotLast () {
        test(""1,2,3"", ""{{#things}}{{this}}{{^-last}},{{/-last}}{{/things}}"",
             context(""things"", Arrays.asList(""1"", ""2"", ""3"")));"
12999,testNotFirst,"    @Test public void testNotFirst () {
        test(""1,2,3"", ""{{#things}}{{^-first}},{{/-first}}{{this}}{{/things}}"",
             context(""things"", Arrays.asList(""1"", ""2"", ""3"")));"
13000,testInverseFirstLastCombo,"    @Test public void testInverseFirstLastCombo () {
        test(""_and_"", ""{{#things}}{{^-first}}NOT-FIRST{{/-first}}{{this}}{{^-last}}NOT-LAST{{/-last}}{{/things}}"",
             context(""things"", Arrays.asList(""_and_"")));"
13001,testFirstLastCombo,"    @Test public void testFirstLastCombo () {
        test(""FIRST_and_LAST"", ""{{#things}}{{#-first}}FIRST{{/-first}}{{this}}{{#-last}}LAST{{/-last}}{{/things}}"",
             context(""things"", Arrays.asList(""_and_"")));"
13002,testFirstLast,"    @Test public void testFirstLast () {
        test(""[foo]"", ""{{#things}}{{#-first}}[{{/-first}}{{this}}{{#-last}}]{{/-last}}{{/things}}"",
             context(""things"", Arrays.asList(""foo"")));
        test(""foo"", ""{{#things}}{{this}}{{^-last}}|{{/-last}}{{/things}}"","
13003,testLast,"    @Test public void testLast () {
        test(""foo|bar|baz"", ""{{#things}}{{this}}{{^-last}}|{{/-last}}{{/things}}"",
             context(""things"", Arrays.asList(""foo"", ""bar"", ""baz"")));"
13004,testFirst,"    @Test public void testFirst () {
        test(""foo|bar|baz"", ""{{#things}}{{^-first}}|{{/-first}}{{this}}{{/things}}"",
             context(""things"", Arrays.asList(""foo"", ""bar"", ""baz"")));"
13005,testShadowedContext,"    @Test public void testShadowedContext () {
        test(""foo((bar)(baz))"", ""{{name}}({{#things}}({{name}}){{/things}})"",
             context(""name"", ""foo"","
13006,testNestedContexts,"    @Test public void testNestedContexts () {
        test(""foo((foobar)(foobaz))"", ""{{name}}({{#things}}({{name}}{{thing_name}}){{/things}})"",
             context(""name"", ""foo"","
13008,testNewlineSkipping,"    protected void testNewlineSkipping (String sep) {
        String tmpl = ""list:"" + sep +
            ""{{#items}}"" + sep +
            ""{{this}}"" + sep +
            ""{{/items}}"" + sep +
            ""{{^items}}"" + sep +
            ""no items"" + sep +
            ""{{/items}}"" + sep +"
13009,testVisitNested,"    @Test public void testVisitNested() {
        String template = ""{{#one}}1{{/one}} {{^two}}"" +
            ""2{{two_and_half}}{{#five}}{{three}}{{/five}}"" +
            ""{{/two}} {{#one}}{{three}}{{/one}} {{four}}{{! ignore me }}"";
        GetKeysVisitor viz = new GetKeysVisitor();
        Mustache.compiler().compile(template).visit(viz);
        List<String> expect = Arrays.asList(""one"", ""two"", ""three"", ""four"", ""two_and_half"", ""five"");"
13010,testVisit,"    @Test public void testVisit() {
        String template = ""{{#one}}1{{/one}} {{^two}}2{{three}}{{/two}}{{four}}"";
        GetKeysVisitor viz = new GetKeysVisitor();
        Mustache.compiler().compile(template).visit(viz);
        List<String> expect = Arrays.asList(""one"", ""two"", ""three"", ""four"");
        assertEquals(new HashSet<>(expect), viz.keys);
    }"
13011,visitInvertedSection,"        public boolean visitInvertedSection (String name) { keys.add(name); return true; }
    }

    @Test public void testVisit() {"
13012,visitSection,"        public boolean visitSection (String name) { keys.add(name); return true; }
        public boolean visitInvertedSection (String name) { keys.add(name); return true; }
    }
"
13013,visitInclude,"        public boolean visitInclude (String name) { keys.add(name); return true; }
        public boolean visitSection (String name) { keys.add(name); return true; }
        public boolean visitInvertedSection (String name) { keys.add(name); return true; }
    }"
13014,visitVariable,"        public void visitVariable (String name) { keys.add(name); }
        public boolean visitInclude (String name) { keys.add(name); return true; }
        public boolean visitSection (String name) { keys.add(name); return true; }"
13015,visitText,"        public void visitText (String text) {}
        public void visitVariable (String name) { keys.add(name); }"
13016,testTrimBlank,"    @Test public void testTrimBlank () {
        Mustache.StringSegment str = new Mustache.StringSegment(""  \r\n  "", false);
        check(""Text(  )-1/0"", str.trimLeadBlank().toString());
        check(""Text(  \\r\\n)3/-1"", str.trimTrailBlank().toString());
    }"
13017,testNoTrimNewlineFromNestedTagAt0,"    @Test public void testNoTrimNewlineFromNestedTagAt0 () {
        test("" | \n  | \n"", "" | {{^boolean}}{{! comment }}\n {{/boolean}} | \n"",
             context(""boolean"", false));"
13018,testNewlineSkippingDelimsTag,"    @Test public void testNewlineSkippingDelimsTag () {
        test(""Begin.\nEnd.\n"", ""Begin.\n{{=@ @=}}\nEnd.\n"", EMPTY);
    }"
13019,testNewlineSkippingCRLF,"    @Test public void testNewlineSkippingCRLF () {
        testNewlineSkipping(""\r\n"");
    }"
13020,testNewlineSkipping,"    @Test public void testNewlineSkipping () {
        testNewlineSkipping(""\n"");
    }"
13021,testNestedNullThis,"    @Test public void testNestedNullThis () {
        check(""bar!bif"", Mustache.compiler().defaultValue(""!"").
              compile(""{{#things}}{{.}}{{/things}}"")."
13022,testNestedThis,"    @Test public void testNestedThis () {
        check(""barbazbif"", Mustache.compiler().compile(""{{#things}}{{this}}{{/things}}"").
              execute(context(""things"", Arrays.asList(""bar"", ""baz"", ""bif""))));
        check(""barbazbif"", Mustache.compiler().compile(""{{#things}}{{.}}{{/things}}"")."
13023,testTopLevelThis,"    @Test public void testTopLevelThis () {
        check(""bar"", Mustache.compiler().compile(""{{this}}"").execute(""bar""));
        check(""bar"", Mustache.compiler().compile(""{{.}}"").execute(""bar""));
    }"
13024,testPartialDelimiterMatch,"    @Test public void testPartialDelimiterMatch () {
        check(""{bob}"", Mustache.compiler().compile(""{bob}"").execute(EMPTY));
        check(""bar"", Mustache.compiler().compile(""{{bob}bob}}"").execute(context(""bob}bob"", ""bar"")));
    }"
13025,testUserDefinedEscaping,"    @Test public void testUserDefinedEscaping() {
        Mustache.Escaper escaper = Escapers.simple(new String[][] {
            { ""["", "":BEGIN:"" },
            { ""]"", "":END:"" }"
13027,testInvalidUnescapeHTML,"    @Test public void testInvalidUnescapeHTML () {
        try {
            Mustache.compiler().escapeHTML(true).compile(""{{{a}}"").execute(context(""a"", ""<b>""));"
13029,testDanglingTag,"    @Test public void testDanglingTag () {
        test(""foo{"", ""foo{"", context(""a"", ""<b>""));
        test(""foo{{"", ""foo{{"", context(""a"", ""<b>""));
        test(""foo{{a"", ""foo{{a"", context(""a"", ""<b>""));
        test(""foo{{a}"", ""foo{{a}"", context(""a"", ""<b>""));
    }"
13031,testDelimiterChange,"    @Test public void testDelimiterChange () {
        test(""foo bar baz"", ""{{one}} {{=<% %>=}}<%two%><%={{ }}=%> {{three}}"",
             context(""one"", ""foo"", ""two"", ""bar"", ""three"", ""baz""));
        test(""baz bar foo"", ""{{three}} {{=% %=}}%two%%={{ }}=% {{one}}"","
13032,getTemplate,"            public Reader getTemplate (String name) {
                return new StringReader(template);
            }"
13033,testRecursivePartial,"    @Test public void testRecursivePartial () {
        String template = ""[{{name}}{{#properties}}, {{> schema.mustache}}{{/properties}}]"";
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
13034,getTemplate,"            public Reader getTemplate (String name) {
                if (name.equals(""nested"")) {
                    return new StringReader(""{{name}}{{thing_name}}"");"
13035,testPartialPlusNestedContext,"    @Test public void testPartialPlusNestedContext () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
13036,getTemplate,"            public Reader getTemplate (String name) {
                    return new StringReader(""line {{#show}}content{{/show}}\n"");
            }"
13037,testPartialIndentWithInlineBlock,"    @Test public void testPartialIndentWithInlineBlock () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
13038,getTemplate,"            public Reader getTemplate (String name) {
                    return new StringReader(""{{#show}}\n{{{content}}}{{/show}}\n|\n"");
            }"
13039,testPartialIndentWithBlockAtStart,"    @Test public void testPartialIndentWithBlockAtStart () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
13040,getTemplate,"            public Reader getTemplate (String name) {
                    return new StringReader(""content"");
            }"
13041,testPartialIndentInBlock,"    @Test public void testPartialIndentInBlock () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
13042,getTemplate,"            public Reader getTemplate (String name) {
                    return new StringReader(""|\n{{#show}}\n{{{content}}}{{/show}}\n|\n"");
            }"
13043,testPartialIndentWithBlock,"    @Test public void testPartialIndentWithBlock () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
13044,getTemplate,"            public Reader getTemplate (String name) {
                    return new StringReader(""{{{content}}}\n|\n"");
            }"
13045,testPartialIndentWithVariableAtTheStart,"    @Test public void testPartialIndentWithVariableAtTheStart () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
13046,testNestedPartialIndent,"    @Test public void testNestedPartialIndent () {
        Mustache.TemplateLoader loader = partials(entry(""partial"", ""1\n {{>nest}}\n1\n""), entry(""nest"", ""2\n{{{content}}}\n2\n""));
        test(Mustache.compiler().withLoader(loader),
                ""|\n 1\n  2\n  <\n->\n  2\n 1\n|\n"","
13047,getTemplate,"            public Reader getTemplate (String name) {
                if (name.equals(""partial"")) {
                    return new StringReader(""1\r\n\t{{>nest}}\r\n1\r\n"");"
13048,testNestedPartialBlankLinesCRLF,"    @Test public void testNestedPartialBlankLinesCRLF () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
13049,getTemplate,"            public Reader getTemplate (String name) {
                if (name.equals(""partial"")) {
                    return new StringReader(""1\n\t{{>nest}}\n1\n"");"
13050,testNestedPartialBlankLines,"    @Test public void testNestedPartialBlankLines () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
13051,getTemplate,"            public Reader getTemplate (String name) {
                return new StringReader(""|\na\n\nb\n|\n"");
            }"
13052,testPartialBlankLines,"    @Test public void testPartialBlankLines () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
13053,getTemplate,"            public Reader getTemplate (String name) {
                return new StringReader(""|\n{{{content}}}\n|\n"");
            }"
13054,testPartialIndent,"    @Test public void testPartialIndent () {
        test(Mustache.compiler().withLoader(new Mustache.TemplateLoader() {
            public Reader getTemplate (String name) {"
13055,testPartial,"    @Test public void testPartial () {
        test(Mustache.compiler().withLoader(
                partials(entry(""foo"", ""inside:{{bar}}""),"
13056,partials,"    protected final Mustache.TemplateLoader partials(Map.Entry<String, String> ... entries) {
        Map<String,String> templates = new LinkedHashMap<>();
        for (Entry<String, String> e : entries) {
            templates.put(e.getKey(), e.getValue());
        }
        partials = templates;"
13057,testPartialUseWhenUnconfigured,"    @Test public void testPartialUseWhenUnconfigured () {
        try {
            test(null, ""{{>foo}}"", null);"
13058,testCommentWithFunnyChars,"    @Test public void testCommentWithFunnyChars() {
        test(""foobar"", ""foo{{! {baz\n }}bar"", EMPTY);
    }"
13059,testComment,"    @Test public void testComment () {
        test(""foobar"", ""foo{{! nothing to see here}}bar"", EMPTY);
    }"
13061,testSectionWithNonFalseyEmptyString,"    @Test public void testSectionWithNonFalseyEmptyString () {
        test(Mustache.compiler(), ""test"", ""{{#foo}}test{{/foo}}"", context(""foo"", """"));
    }"
13064,testMissingStrictSection,"    @Test public void testMissingStrictSection () {
        try {
            test(Mustache.compiler().strictSections(true), """", ""{{#foo}}{{bar}}{{/foo}}"","
13066,testNullSection,"    @Test public void testNullSection () {
        Object ctx = context(""foo"", null);
        test("""", ""{{#foo}}{{bar}}{{/foo}}"", ctx);
        test(Mustache.compiler().defaultValue(""""), """", ""{{#foo}}{{bar}}{{/foo}}"", ctx);
        test(Mustache.compiler().nullValue(""""), """", ""{{#foo}}{{bar}}{{/foo}}"", ctx);
    }"
13067,testNestedListSection,"    @Test public void testNestedListSection () {
        test(""1234"", ""{{#a}}{{#b}}{{c}}{{/b}}{{#d}}{{e}}{{/d}}{{/a}}"",
             context(""a"", context(""b"", new Object[] { context(""c"", ""1""), context(""c"", ""2"") },"
13068,testFalseSection,"    @Test public void testFalseSection () {
        test("""", ""{{#foo}}{{bar}}{{/foo}}"", context(""foo"", false));
    }"
13069,testEmptyIteratorSection,"    @Test public void testEmptyIteratorSection () {
        test("""", ""{{#foo}}{{bar}}{{/foo}}"", context(""foo"", Collections.emptyList().iterator()));
    }"
13070,testEmptyArraySection,"    @Test public void testEmptyArraySection () {
        test("""", ""{{#foo}}{{bar}}{{/foo}}"", context(""foo"", new Object[0]));
    }"
13071,testEmptyListSection,"    @Test public void testEmptyListSection () {
        test("""", ""{{#foo}}{{bar}}{{/foo}}"", context(""foo"", Collections.emptyList()));
    }"
13072,testIteratorItemSection,"    @Test public void testIteratorItemSection () {
        test(""baz"", ""{{foo.0.bar}}"",
            context(""foo"", Arrays.asList(context(""bar"", ""baz""),"
13073,testIteratorIndexOutOfBoundsSection,"    @Test public void testIteratorIndexOutOfBoundsSection () {
        test("""", ""{{#foo.2}}{{bar}}{{/foo.2}}"",
             context(""foo"", Arrays.asList(context(""bar"", ""baz""),"
13074,testIteratorIndexSection,"    @Test public void testIteratorIndexSection () {
        test(""baz"", ""{{#foo.0}}{{bar}}{{/foo.0}}"",
            context(""foo"", Arrays.asList(context(""bar"", ""baz""),"
13075,testIteratorSection,"    @Test public void testIteratorSection () {
        test(""bazbif"", ""{{#foo}}{{bar}}{{/foo}}"",
             context(""foo"", Arrays.asList(context(""bar"", ""baz""),"
13076,testArrayItemSection,"    @Test public void testArrayItemSection () {
        test(""baz"", ""{{foo.0.bar}}"",
            context(""foo"", new Object[] {"
13077,testArrayIndexOutOfBoundsSection,"    @Test public void testArrayIndexOutOfBoundsSection () {
        test("""", ""{{#foo.2}}{{bar}}{{/foo.2}}"",
             context(""foo"", new Object[] {"
13078,testArrayIndexSection,"    @Test public void testArrayIndexSection () {
        test(""baz"", ""{{#foo.0}}{{bar}}{{/foo.0}}"",
            context(""foo"", new Object[] {"
13079,testArraySection,"    @Test public void testArraySection () {
        test(""bazbif"", ""{{#foo}}{{bar}}{{/foo}}"",
             context(""foo"", new Object[] { context(""bar"", ""baz""), context(""bar"", ""bif"") }));"
13080,testMapEntriesSection,"    @Test public void testMapEntriesSection () {
        Map<String,String> data = new HashMap<String,String>();
        data.put(""k1"", ""v1"");
        data.put(""k2"", ""v2"");
        test(Mustache.compiler().escapeHTML(false),
             ""k1=v1k2=v2"", ""{{#map.entrySet}}{{.}}{{/map.entrySet}}"","
13081,testListItemSection,"    @Test public void testListItemSection () {
        test(""baz"", ""{{foo.0.bar}}"", context(
            ""foo"", Arrays.asList(context(""bar"", ""baz""), context(""bar"", ""bif""))));"
13082,testListIndexOutOfBoundsSection,"    @Test public void testListIndexOutOfBoundsSection () {
        test("""", ""{{#foo.2}}{{bar}}{{/foo.2}}"", context(
                 ""foo"", Arrays.asList(context(""bar"", ""baz""), context(""bar"", ""bif""))));"
13083,testListIndexSection,"    @Test public void testListIndexSection() {
        test(""baz"", ""{{#foo.0}}{{bar}}{{/foo.0}}"", context(
            ""foo"", Arrays.asList(context(""bar"", ""baz""), context(""bar"", ""bif""))));"
13084,testListSection,"    @Test public void testListSection () {
        test(""bazbif"", ""{{#foo}}{{bar}}{{/foo}}"", context(
                 ""foo"", Arrays.asList(context(""bar"", ""baz""), context(""bar"", ""bif""))));"
13085,testOneShotSection,"    @Test public void testOneShotSection () {
        test(""baz"", ""{{#foo}}{{bar}}{{/foo}}"", context(""foo"", context(""bar"", ""baz"")));
    }"
13086,testPrimitiveArrayIndexOutOfBoundsVariable,"    @Test public void testPrimitiveArrayIndexOutOfBoundsVariable () {
        Mustache.Compiler comp = Mustache.compiler().defaultValue(""?"");
        test(comp, ""?"", ""{{foo.4}}"", context(""foo"", new int[] { 1, 2, 3, 4 }));
    }"
13087,testPrimitiveArrayIndexVariable,"    @Test public void testPrimitiveArrayIndexVariable () {
        test(""1"", ""{{foo.0}}"", context(""foo"", new int[] { 1, 2, 3, 4 }));
    }"
13088,testPrimitiveArrayVariable,"    @Test public void testPrimitiveArrayVariable () {
        test(""1234"", ""{{#foo}}{{this}}{{/foo}}"", context(""foo"", new int[] { 1, 2, 3, 4 }));
    }"
13089,testSimpleVariable,"    @Test public void testSimpleVariable () {
        test(""bar"", ""{{foo}}"", context(""foo"", ""bar""));
    }"
13090,data,"    public static Collection<Object[]> data () {
        String[] groups = new String[] {
            ""comments"",
            ""delimiters"","
13091,foo,"            public Object foo () {
                return new Object() {
                    public Object bar = new Object() {"
13092,testNoAccesCoercion,"    @Test public void testNoAccesCoercion () {
        Object ctx = new Object() {
            public Object foo () {
                return new Object() {
                    public Object bar = new Object() {
                        public String baz = ""hello"";"
13094,format,"            public String format (Object value) {
                if (value instanceof Date) return _fmt.format((Date)value);
                else return String.valueOf(value);"
13095,testCustomFormatter,"    @Test public void testCustomFormatter () {
        Mustache.Formatter fmt = new Mustache.Formatter() {
            public String format (Object value) {
                if (value instanceof Date) return _fmt.format((Date)value);"
13096,execute,"                     public void execute (Template.Fragment frag, Writer out) throws IOException {
                         Object ctx = frag.context();
                         if (ctx instanceof Foo) lfoo.execute(ctx, out);
                         else if (ctx instanceof Bar) lbar.execute(ctx, out);"
13097,testContextPokingLambda,"    @Test public void testContextPokingLambda () {
        Mustache.Compiler c = Mustache.compiler();

        class Foo { public int foo = 1; }
        final Template lfoo = c.compile(""{{foo}}"");
        check(""1"", lfoo.execute(new Foo()));

        class Bar { public String bar = ""one""; }
        final Template lbar = c.compile(""{{bar}}"");
        check(""one"", lbar.execute(new Bar()));"
13098,testShadowedContextWithNull,"    @Test public void testShadowedContextWithNull () {
        Mustache.Compiler comp = Mustache.compiler().nullValue(""(null)"");
        String tmpl = ""{{foo}}{{#inner}}{{foo}}{{/inner}}"", expect = ""outer(null)"";
        test(comp, expect, tmpl, new Object() {
            public String foo = ""outer"";
            public Object inner = new Object() {"
13101,testNullComponentInCompoundVariableWithDefault,"    @Test public void testNullComponentInCompoundVariableWithDefault () {
        test(Mustache.compiler().nullValue(""null""), ""null"", ""{{foo.bar.baz}}"", new Object() {
            Object foo = null;
        });"
13102,testMissingComponentInCompoundVariable,"    @Test public void testMissingComponentInCompoundVariable () {
        try {
            test(Mustache.compiler(), ""unused"", ""{{foo.bar.baz}}"", new Object() {"
13103,testNullComponentInCompoundVariable,"    @Test public void testNullComponentInCompoundVariable () {
        try {
            test(Mustache.compiler(), ""unused"", ""{{foo.bar.baz}}"", new Object() {"
13104,foo,"            Object foo () {
                return new Object() {
                    Object bar = new Object() {"
13105,testCompoundVariable,"    @Test public void testCompoundVariable () {
        test(""hello"", ""{{foo.bar.baz}}"", new Object() {
            Object foo () {"
13106,toIterator,"            public Iterator<?> toIterator (final Object value) {
                if (value instanceof Optional<?>) {
                    Optional<?> opt = (Optional<?>) value;"
13108,doublem,"                 double doublem () { return 0d; }
             });
    }"
13109,floatm,"                 float floatm () { return 0f; }
                 double doublem () { return 0d; }
             });"
13110,longm,"                 long longm () { return 0l; }
                 float floatm () { return 0f; }
                 double doublem () { return 0d; }"
13111,intm,"                 int intm () { return 0; }
                 long longm () { return 0l; }
                 float floatm () { return 0f; }"
13112,testSectionWithFalseyZero,"    @Test public void testSectionWithFalseyZero () {
        test(Mustache.compiler().zeroIsFalse(true), """",
             ""{{#intv}}intv{{/intv}}"" +"
13113,testSectionWithNonFalseyZero,"    @Test public void testSectionWithNonFalseyZero () {
        test(Mustache.compiler(), ""test"", ""{{#foo}}test{{/foo}}"", new Object() {
            Long foo = 0L;"
13114,getFoo,"            String getFoo () { return ""bar""; }
        }));
        check(""bar"", tmpl.execute(new Object() {"
13115,testCallSiteChange,"    @Test public void testCallSiteChange () {
        Template tmpl = Mustache.compiler().compile(""{{foo}}"");
        check(""bar"", tmpl.execute(new Object() {
            String getFoo () { return ""bar""; }
        }));"
13116,getFoo,"            String getFoo () { return ""bar""; }
        };
        for (int ii = 0; ii < 50; ii++) {"
13117,testCallSiteReuse,"    @Test public void testCallSiteReuse () {
        Template tmpl = Mustache.compiler().compile(""{{foo}}"");
        Object ctx = new Object() {
            String getFoo () { return ""bar""; }
        };"
13118,getFoo,"            String getFoo () { return ""bar""; }
        });
    }"
13119,foo,"            void foo () {}
            String getFoo () { return ""bar""; }"
13120,testSkipVoidReturn,"    @Test public void testSkipVoidReturn () {
        test(""bar"", ""{{foo}}"", new Object() {
            void foo () {}"
13121,isFoo,"            boolean isFoo () { return false; }
        });
    }"
13122,testPrimitiveBooleanPropertyVariable,"    @Test public void testPrimitiveBooleanPropertyVariable () {
        test(""false"", ""{{foo}}"", new Object() {
            boolean isFoo () { return false; }"
13123,isFoo,"            Boolean isFoo () { return true; }
        });
    }"
13124,testBooleanPropertyVariable,"    @Test public void testBooleanPropertyVariable () {
        test(""true"", ""{{foo}}"", new Object() {
            Boolean isFoo () { return true; }"
13125,getFoo,"            public String getFoo () { return ""bong""; }
        });
    }"
13126,testDefaultMethodVariable,"    @Test public void testDefaultMethodVariable () {
        test(""bar"", ""{{foo}}"", new HasDefault() {
        });
        test(""bang"", ""{{foo}}"", new Interloper() {
        });"
13127,getFoo,"        default String getFoo () { return ""bang""; }
    }
    @Test public void testDefaultMethodVariable () {"
13128,getFoo,"        default String getFoo () { return ""bar""; }
    }
    public interface Interloper extends HasDefault {"
13129,testCharSequenceVariable,"    @Test public void testCharSequenceVariable() {
        Map<String, CharSequence> ctx = new HashMap<>();
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append(""bar"");
        ctx.put(""foo"", stringBuffer);
        test(""bar"", ""{{foo}}"", ctx);
    }"
13130,get,"            public Object get(String name) {
                return ""foo"".equals(name) ? ""bar"" : null;
            }"
13131,testCustomContext,"    @Test public void testCustomContext() {
        test(""bar"", ""{{foo}}"", new Mustache.CustomContext() {
            @Override"
13133,testPropertyVariable,"    @Test public void testPropertyVariable () {
        test(""bar"", ""{{foo}}"", new Object() {
            String getFoo () { return ""bar""; }"
13134,foo,"            String foo () { return ""bar""; }
        });
    }"
13135,testMethodVariable,"    @Test public void testMethodVariable () {
        test(""bar"", ""{{foo}}"", new Object() {
            String foo () { return ""bar""; }"
13136,testFieldVariable,"    @Test public void testFieldVariable () {
        test(""bar"", ""{{foo}}"", new Object() {
            String foo = ""bar"";"
13137,data,"    public static Collection<Object[]> data () {
        String[] groups = new String[] {
            ""sections"",
            ""partials"","
13141,isNeedAnimation,"    private boolean isNeedAnimation() {
        return !mContentRect.isEmpty() && isMoving;
    }"
13143,applyTransformation,"        protected void applyTransformation(float interpolatedTime2, Transformation t) {
            super.applyTransformation(interpolatedTime2, t);
            interpolatedTime = interpolatedTime2;
            pullHeaderHeight = lastMoveHeaderHeight * (1 - interpolatedTime);
            if (mOnTurnListener != null) {
                mOnTurnListener.onUp(pullHeaderHeight);"
13146,doTouchEvent,"    private void doTouchEvent(MotionEvent event) {
        int action = event.getAction();

        switch (action) {"
13147,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        if (mContentView != null) {
            doTouchEvent(ev);
        }"
13148,onInterceptTouchEvent,"    public boolean onInterceptTouchEvent(MotionEvent ev) {
        if (ev.getAction() == MotionEvent.ACTION_DOWN) {
            mTouchDownY = ev.getY();
            mCurrentTop = mInitTop = mHeader.getTop();"
13149,onScrollChanged,"    protected void onScrollChanged(int l, int t, int oldl, int oldt) {
        super.onScrollChanged(l, t, oldl, oldt);

        if (getScrollY() == 0) {"
13150,onFinishInflate,"    protected void onFinishInflate() {
        if (getChildCount() > 0) {
            mContentView = getChildAt(0);
            LogUtil.m(""mContentView  "" + mContentView.getClass().getSimpleName());"
13151,setOnTurnListener,"    public void setOnTurnListener(OnTurnListener turnListener) {
        mOnTurnListener = turnListener;
    }"
13152,setHeader,"    public void setHeader(View view) {
        mHeader = view;
    }"
13154,onRefresh,"    public void onRefresh() {
        /*new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {"
13155,onUp,"    public void onUp(float y) {
        jellyBall.setUpHeight(y);
    }"
13156,onPull,"    public void onPull(float y) {
        jellyBall.setPullHeight(y);
    }"
13157,onClick,"                public void onClick(View v) {
                    Toast.makeText(MainActivity.this, ""Click item "" + n, Toast.LENGTH_SHORT).show();
                }"
13158,showTable,"    public void showTable() {
        TableRow.LayoutParams layoutParams = new TableRow.LayoutParams(
                TableRow.LayoutParams.MATCH_PARENT,
                TableRow.LayoutParams.WRAP_CONTENT);
        layoutParams.gravity = Gravity.CENTER;
        layoutParams.leftMargin = 30;
        layoutParams.bottomMargin = 10;
        layoutParams.topMargin = 10;"
13159,initView,"    protected void initView() {
        mScrollView = (PullScrollView) findViewById(R.id.scroll_view);
        mHeadImg = (ImageView) findViewById(R.id.background_img);

        mMainLayout = (TableLayout) findViewById(R.id.table_layout);
        jellyBall = (JellyBall) findViewById(R.id.cirle);
        mScrollView.setHeader(mHeadImg);
        mScrollView.setOnTurnListener(this);"
13160,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.act_pull_down);
        initView();
        showTable();
    }"
13161,e,"    public static void e(int msg) {
        LogUtil.e(msg + """");
    }"
13162,w,"    public static void w(int msg) {
        LogUtil.w(msg + """");
    }"
13163,i,"    public static void i(int msg) {
        LogUtil.i(msg + """");
    }"
13164,d,"    public static void d(int msg) {
        LogUtil.d(msg + """");
    }"
13165,v,"    public static void v(int msg) {
        LogUtil.v(msg + """");
    }"
13166,m,"    public static void m(){
        String methodName = new Exception().getStackTrace()[1].getMethodName();
        Log.v(defaultTag, methodName);
    }"
13167,m,"    public static void m(int msg){
        String methodName = new Exception().getStackTrace()[1].getMethodName();
        Log.v(defaultTag, methodName + "":    "" + msg + """");
    }"
13168,m,"    public static void m(String msg){
        String methodName = new Exception().getStackTrace()[1].getMethodName();
        Log.v(defaultTag, methodName + "":    "" + msg);
    }"
13169,e,"    public static void e(String msg) {
        if (LEVEL <= ERROR) {
            Log.e(defaultTag, msg);"
13170,w,"    public static void w(String msg) {
        if (LEVEL <= WARN) {
            Log.w(defaultTag, msg);"
13171,i,"    public static void i(String msg) {
        if (LEVEL <= INFO) {
            Log.i(defaultTag, msg);"
13172,d,"    public static void d(String msg) {
        if (LEVEL <= DEBUG) {
            Log.d(defaultTag, msg);"
13173,v,"    public static void v(String msg) {
        if (LEVEL <= VERBOSE) {
            Log.v(defaultTag, msg);"
13174,e,"    public static void e(String tag, String msg) {
        if (LEVEL <= ERROR) {
            Log.e(tag, msg);"
13175,w,"    public static void w(String tag, String msg) {
        if (LEVEL <= WARN) {
            Log.w(tag, msg);"
13176,i,"    public static void i(String tag, String msg) {
        if (LEVEL <= INFO) {
            Log.i(tag, msg);"
13177,d,"    public static void d(String tag, String msg) {
        if (LEVEL <= DEBUG) {
            Log.d(tag, msg);"
13178,v,"    public static void v(String tag, String msg) {
        if (LEVEL <= VERBOSE) {
            Log.v(tag, msg);"
13179,getRebounceVerticalPointY,"    private float getRebounceVerticalPointY(float y) {
        return (float) ((1 - Math.exp(-2 * (y + 0.052)) * Math.cos(20 * (y + 0.052))) - 1) * rebounceY;
    }"
13180,getRebounceHorizontalBottomY,"    private float getRebounceHorizontalBottomY(float y) {
        return (float) ((1 - Math.exp(-2 * (y + 0.052)) * Math.cos(20 * (y + 0.052))) - 1) * rebounceY / 2;
    }"
13181,getRebounceHorizontalX,"    private float getRebounceHorizontalX(float x) {
        return (float) ((1 - Math.exp(-2 * (x + 0.052)) * Math.cos(20 * (x + 0.052))) - 1) * rebounceX / 3 * 2;
    }"
13183,beginStopRefresh,"    public void beginStopRefresh() {
        stopRebounceAnim();
        setType(Type.REFRESHING_START);
    }"
13184,onAnimationRepeat,"            public void onAnimationRepeat(Animation animation) {
"
13185,onAnimationEnd,"            public void onAnimationEnd(Animation animation) {
                setType(type);
            }"
13186,onAnimationStart,"            public void onAnimationStart(Animation animation) {
"
13187,startRebounceAnim,"    private void startRebounceAnim(final Type type) {
        rebounceAnim = new RebounceAnim();
        rebounceAnim.setDuration(500);
        rebounceAnim.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {"
13188,applyTransformation,"        protected void applyTransformation(float interpolatedTime, Transformation t) {
            super.applyTransformation(interpolatedTime, t);
            rebounceInterpolatedTime = interpolatedTime;
            invalidate();
        }"
13189,setType,"    private void setType(Type type) {
        this.mType = type;
        switch (type) {
            case REBOUNCE_DOWN:
                startRebounceAnim(Type.REFRESHING_START);"
13190,adjustAllY,"        public void adjustAllY(float offset) {
            this.y += offset;
            this.top.y += offset;
            this.bottom.y += offset;
        }"
13191,adjustAllBottomY,"        public void adjustAllBottomY(float offset) {
            this.y += offset;
            this.bottom.y += offset;
            this.top.y += offset;
        }"
13192,adjustAllX,"        public void adjustAllX(float offset) {
            this.x += offset;
            this.top.x += offset;
            this.bottom.x += offset;
        }"
13193,setX,"        public void setX(float x) {
            this.x = x;
            top.x = bottom.x = x;
        }"
13194,adjustBottomX,"        public void adjustBottomX(float offset) {
            this.left.x -= offset;
            this.right.x += offset;
        }"
13195,adjustAllY,"        public void adjustAllY(float offset) {
            this.y += offset;
            this.left.y += offset;
            this.right.y += offset;
        }"
13196,setY,"        public void setY(float y) {
            this.y = y;
            left.y = right.y = y;
        }"
13200,circleModel1,"    private void circleModel1(float progress) {
        circleModel0();

        p1.setY(p1.y + radius * 1.5f * progress);
"
13201,lineModel1,"    private void lineModel1(float progress) {
        lineModel0();
        lineWidth = lineWidth * (1.0f - progress + 0.3f) * 0.8f;
    }"
13202,lineModel0,"    private void lineModel0() {
        lineStartY = circleStartY - 1;
        lineWidth = getResources().getDimension(R.dimen.jellyball_line_width);
    }"
13203,circleModel0,"    private void circleModel0() {
        p1.setY(radius);
        p3.setY(-radius);
        p1.x = p3.x = 0;
        p1.left.x = p3.left.x = -c;
        p1.right.x = p3.right.x = c;


        p2.setX(radius);
        p4.setX(-radius);
        p2.y = p4.y = 0;
        p2.top.y = p4.top.y = -c;"
13207,setPullHeight,"    public void setPullHeight(final float y) {
        if (y <= PULL_MAX) {
            pullProgress = y / PULL_MAX;"
13208,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        mWidth = getMeasuredWidth();
        mHeight = getMeasuredHeight();
        rebounceY = radius / 2;
        rebounceX = radius;
        circleStartX = (mWidth - 2 * radius) / 2;
        circleStartY = rebounceY;

        c = radius * blackMagic;
"
13211,addOffset,"    protected void

    addOffset(@Nullable String fileName) {

"
13212,setWarningHandler,"    @Override public void

    setWarningHandler(@Nullable WarningHandler warningHandler) { this.compiler.setWarningHandler(warningHandler); }"
13213,setCompileErrorHandler,"    @Override public void

    setCompileErrorHandler(@Nullable ErrorHandler compileErrorHandler) {"
13214,setParentClassLoader,"    @Deprecated public void

    setParentClassLoader(@Nullable ClassLoader parentClassLoader, Class<?>[] auxiliaryClasses) {"
13215,setParentClassLoader,"    @Override public void

    setParentClassLoader(@Nullable ClassLoader parentClassLoader) {"
13216,setDebuggingInformation,"    @Override public void

    setDebuggingInformation(boolean debugSource, boolean debugLines, boolean debugVars) {

        this.compiler.setDebugSource(debugSource);"
13218,run,"            @Override public ClassLoader

            run() {"
13219,getClassLoader,"    @Override public ClassLoader

    getClassLoader() {



        ClassLoader result = this.getClassLoaderCache;"
13222,setTargetVersion,"    @Override public void

    setTargetVersion(int version) { this.compiler.setTargetVersion(version); }"
13223,setSourceVersion,"    @Override public void

    setSourceVersion(int version) { this.compiler.setSourceVersion(version); }"
13224,compare,"        @Override @NotNullByDefault(false) public int

        compare(Location l1, Location l2) {"
13225,getBytecodes,"    @Override public Map<String, byte[]>

    getBytecodes() { return this.cbe.getBytecodes(); }"
13226,getClazz,"    @Override public Class<?>

    getClazz() { return this.cbe.getClazz(); }"
13228,getMethod,"    @Override public Method

    getMethod(int idx) {"
13229,getResult,"    @Override public Method[]

    getResult() { return this.getMethods(); }"
13230,evaluate,"    @Override @Nullable public Object

    evaluate(int idx, @Nullable Object[] arguments) throws InvocationTargetException {"
13231,createFastEvaluator,"    @Override public <T> T

    createFastEvaluator(

        Reader   r,

        Class<T> interfaceToImplement,

        String[] parameterNames

    ) throws CompileException, IOException {

        if (!interfaceToImplement.isInterface()) {

            throw new RuntimeException(""\"""" + interfaceToImplement + ""\"" is not an interface"");"
13232,createFastEvaluator,"    @Override public <T> T

    createFastEvaluator("
13233,getReturnType,"    protected final Class<?>

    getReturnType(int i) {
"
13234,getMethodName,"    private String

    getMethodName(int idx) {

"
13235,hashCode,"                @Override public int

                hashCode() { return this.name.hashCode() ^ Arrays.hashCode(this.parameterTypes); }"
13236,equals,"                @Override public boolean

                equals(@Nullable Object o) {

                    if (!(o instanceof MethodWrapper)) return false;"
13237,cook,"    protected final void

    cook(String[] fileNames, Reader[] readers, String[] imports)

    throws CompileException, IOException {



        this.setScriptCount(fileNames.length);

        this.setScriptCount(readers.length);"
13238,cook,"    @Override public void

    cook(String[] fileNames, Reader[] readers) throws CompileException, IOException {"
13239,cook,"    @Override public void

    cook(@Nullable String fileName, Reader reader) throws CompileException, IOException {

        String[] imports;
"
13240,setThrownExceptions,"    @Override public void

    setThrownExceptions(Class<?>[][] thrownExceptions) {
"
13241,setParameters,"    @Override public void

    setParameters(String[][] parameterNames, Class<?>[][] parameterTypes) {

"
13242,setMethodNames,"    @Override public void

    setMethodNames(String[] methodNames) {
"
13243,setReturnTypes,"    @Override public void

    setReturnTypes(Class<?>[] returnTypes) {
"
13244,setStaticMethod,"    @Override public void

    setStaticMethod(boolean[] staticMethod) {
"
13245,setOverrideMethod,"    @Override public void

    setOverrideMethod(boolean[] overrideMethod) {
"
13246,getMethod,"    @Override public Method

    getMethod() { return this.getMethod(0); }"
13247,evaluate,"    @Override @Nullable public Object

    evaluate(@Nullable Object[] arguments) throws InvocationTargetException { return this.evaluate(0, arguments); }"
13248,evaluate,"    @Override @Nullable public Object

    evaluate() throws InvocationTargetException { return this.evaluate(new Object[0]); }"
13249,setThrownExceptions,"    @Override public void

    setThrownExceptions(Class<?>[] thrownExceptions) {"
13250,setParameters,"    @Override public void

    setParameters(String[] names, Class<?>[] types) {"
13251,setMethodName,"    @Override public void

    setMethodName(@Nullable String methodName) { this.setMethodNames(new String[] { methodName }); }"
13252,setReturnType,"    @Override public void

    setReturnType(Class<?> returnType) { this.setReturnTypes(new Class<?>[] { returnType }); }"
13253,setStaticMethod,"    @Override public void

    setStaticMethod(final boolean staticMethod) { this.setStaticMethod(new boolean[] { staticMethod }); }"
13254,setOverrideMethod,"    @Override public void

    setOverrideMethod(boolean overrideMethod) { this.setOverrideMethod(new boolean[] { overrideMethod }); }"
13255,getDefaultImports,"    @Override public String[]

    getDefaultImports() { return this.cbe.getDefaultImports(); }"
13256,setDefaultImports,"    @Override public void

    setDefaultImports(String... defaultImports) { this.cbe.setDefaultImports(defaultImports); }"
13257,getDefaultReturnType,"    @Override public Class<?>

    getDefaultReturnType() { return this.defaultReturnType; }"
13258,setDefaultReturnType,"    @Override public void

    setDefaultReturnType(Class<?> defaultReturnType) { this.defaultReturnType = defaultReturnType; }"
13259,setExtendedClass,"    @Override public void

    setExtendedClass(@Nullable Class<?> extendedClass) { this.cbe.setExtendedClass(extendedClass); }"
13260,setImplementedInterfaces,"    @Override public void

    setImplementedInterfaces(Class<?>[] implementedInterfaces) {"
13261,setClassName,"    @Override public void

    setClassName(String className) {"
13262,getScript,"    private Script

    getScript(int index) {
"
13263,setScriptCount,"    public void

    setScriptCount(int count) {
"
13264,setWarningHandler,"    @Override public void

    setWarningHandler(@Nullable WarningHandler warningHandler) {"
13266,setTargetVersion,"    @Override public void

    setTargetVersion(int version) { this.cbe.setTargetVersion(version); }"
13267,setSourceVersion,"    @Override public void

    setSourceVersion(int version) { this.cbe.setSourceVersion(version); }"
13268,setDebuggingInformation,"    @Override public void

    setDebuggingInformation(boolean debugSource, boolean debugLines, boolean debugVars) {"
13269,setParentClassLoader,"    @Override public void

    setParentClassLoader(@Nullable ClassLoader parentClassLoader) { this.cbe.setParentClassLoader(parentClassLoader); }"
13270,getSourceResourceName,"    private static String

    getSourceResourceName(String className) {
"
13271,report,"                @Override public void

                report(@Nullable final Diagnostic<? extends JavaFileObject> diagnostic) {
"
13274,findClass,"    @NotNullByDefault(false) @Override protected Class<?>

    findClass(String className) throws ClassNotFoundException {"
13275,setCompilerOptions,"    public void

    setCompilerOptions(String[] compilerOptions) { this.compilerOptions = Arrays.asList(compilerOptions); }"
13276,setDebuggingInfo,"    @Override public void

    setDebuggingInfo(boolean lines, boolean vars, boolean source) {

        this.debuggingInfoLines  = lines;"
13277,setSourceCharset,"    @Override public void

    setSourceCharset(Charset charset) { this.sourceCharset = charset; }"
13278,setSourceFinder,"    @Override public void

    setSourceFinder(ResourceFinder sourceFinder) { this.sourceFinder = sourceFinder; }"
13279,setSourcePath,"    @Override public void

    setSourcePath(File[] sourcePath) { this.setSourceFinder(new PathResourceFinder(sourcePath)); }"
13280,getJavaFileManager,"    private JavaFileManager

    getJavaFileManager() {



        if (this.fileManager != null) return this.fileManager;"
13282,getSystemJavaCompiler,"    private static JavaCompiler

    getSystemJavaCompiler() {

        JavaCompiler c = ToolProvider.getSystemJavaCompiler();"
13283,createFastEvaluator,"    @Override public <T> T

    createFastEvaluator(Reader reader, Class<? extends T> interfaceToImplement, String... parameterNames)

    throws CompileException, IOException {



        if (!interfaceToImplement.isInterface()) {

            throw new InternalCompilerException(""\"""" + interfaceToImplement + ""\"" is not an interface"");

        }

"
13284,createFastEvaluator,"    @Override public <T> T

    createFastEvaluator(String expression, Class<? extends T> interfaceToImplement, String... parameterNames)"
13285,getBytecodes,"    @Override public Map<String, byte[]>

    getBytecodes() { return this.se.getBytecodes(); }"
13286,getResult,"    @Override public Method[]

    getResult() { return this.se.getResult(); }"
13287,getClazz,"    @Override public Class<?>

    getClazz() { return this.se.getClazz(); }"
13288,getMethod,"    @Override public Method

    getMethod(int idx) { return this.se.getMethod(idx); }"
13289,getMethod,"    @Override public Method

    getMethod() { return this.se.getMethod(); }"
13291,evaluate,"    @Override @Nullable public Object

    evaluate(@Nullable Object[] arguments) throws InvocationTargetException { return this.se.evaluate(arguments); }"
13294,cook,"    @Override public void

    cook(@Nullable String fileName, Reader reader) throws CompileException, IOException {



        this.se.setScriptCount(1);


"
13295,setThrownExceptions,"    @Override public void

    setThrownExceptions(Class<?>[][] thrownExceptions) { this.se.setThrownExceptions(thrownExceptions); }"
13296,setThrownExceptions,"    @Override public void

    setThrownExceptions(Class<?>[] thrownExceptions) { this.se.setThrownExceptions(thrownExceptions); }"
13297,setMethodNames,"    @Override public void

    setMethodNames(String[] methodNames) { this.se.setMethodNames(methodNames); }"
13298,setMethodName,"    @Override public void

    setMethodName(String methodName) { this.se.setMethodName(methodName); }"
13299,setStaticMethod,"    @Override public void

    setStaticMethod(boolean[] staticMethod) { this.se.setStaticMethod(staticMethod); }"
13300,setStaticMethod,"    @Override public void

    setStaticMethod(boolean staticMethod) { this.se.setStaticMethod(staticMethod); }"
13301,setExtendedClass,"    @Override public void

    setExtendedClass(@Nullable Class<?> extendedType) { this.se.setExtendedClass(extendedType); }"
13302,setClassName,"    @Override public void

    setClassName(String className) { this.se.setClassName(className); }"
13303,setParameters,"    @Override public void

    setParameters(String[][] parameterNames, Class<?>[][] parameterTypes) {"
13304,setParameters,"    @Override public void

    setParameters(String[] parameterNames, Class<?>[] parameterTypes) {"
13305,setOverrideMethod,"    @Override public void

    setOverrideMethod(boolean[] overrideMethod) { this.se.setOverrideMethod(overrideMethod); }"
13306,setOverrideMethod,"    @Override public void

    setOverrideMethod(boolean overrideMethod) { this.se.setOverrideMethod(overrideMethod); }"
13307,setExpressionTypes,"    @Override public void

    setExpressionTypes(Class<?>[] expressionTypes) { this.se.setReturnTypes(expressionTypes); }"
13308,setExpressionType,"    @Override public void

    setExpressionType(Class<?> expressionType) { this.se.setReturnType(expressionType); }"
13309,setReturnType,"    @Override public void

    setReturnType(Class<?> returnType) { this.se.setReturnType(returnType); }"
13310,setImplementedInterfaces,"    @Override public void

    setImplementedInterfaces(Class<?>[] implementedTypes) { this.se.setImplementedInterfaces(implementedTypes); }"
13311,getDefaultExpressionType,"    @Override public Class<?>

    getDefaultExpressionType() { return this.se.getDefaultReturnType(); }"
13312,setDefaultExpressionType,"    @Override public void

    setDefaultExpressionType(Class<?> defaultExpressionType) { this.se.setDefaultReturnType(defaultExpressionType); }"
13313,getDefaultImports,"    @Override public String[]

    getDefaultImports() { return this.se.getDefaultImports(); }"
13314,setDefaultImports,"    @Override public void

    setDefaultImports(String... defaultImports) { this.se.setDefaultImports(defaultImports); }"
13317,setTargetVersion,"    @Override public void

    setTargetVersion(int version) { this.se.setTargetVersion(version); }"
13318,setSourceVersion,"    @Override public void

    setSourceVersion(int version) { this.se.setSourceVersion(version); }"
13321,run,"            @Override public JavaSourceClassLoader run() { return new JavaSourceClassLoader(parentClassLoader); }

        });"
13322,newJavaSourceClassLoader,"    @Override public AbstractJavaSourceClassLoader

    newJavaSourceClassLoader(final ClassLoader parentClassLoader) {"
13323,run,"            @Override public JavaSourceClassLoader run() { return new JavaSourceClassLoader(); }

        });"
13324,newJavaSourceClassLoader,"    @Override public AbstractJavaSourceClassLoader

    newJavaSourceClassLoader() {"
13325,newCompiler,"    @Override public ICompiler

    newCompiler() { return new Compiler(); }"
13326,newSimpleCompiler,"    @Override public ISimpleCompiler

    newSimpleCompiler() { return new SimpleCompiler(); }"
13327,newClassBodyEvaluator,"    @Override public IClassBodyEvaluator

    newClassBodyEvaluator() { return new ClassBodyEvaluator(); }"
13328,newScriptEvaluator,"    @Override public IScriptEvaluator

    newScriptEvaluator() { return new ScriptEvaluator(); }"
13329,newExpressionEvaluator,"    @Override public IExpressionEvaluator

    newExpressionEvaluator() { return new ExpressionEvaluator(); }"
13330,getImplementationVersion,"    @Override public String

    getImplementationVersion() { return CompilerFactory.class.getPackage().getImplementationVersion(); }"
13331,toString,"    @Override public String

    toString() { return ""jdk""; }"
13332,getId,"    @Override public String

    getId() { return ""org.codehaus.commons.compiler.jdk""; }"
13333,filesToPath,"    private static String

    filesToPath(File[] files) {

        StringBuilder sb = new StringBuilder();"
13334,report,"            @Override public void

            report(@Nullable Diagnostic<? extends JavaFileObject> diagnostic) {

                assert diagnostic != null;


"
13335,compile,"    static void

    compile(

        JavaCompiler                        compiler,

        List<String>                        options,"
13336,getJavaFileManager,"    private static JavaFileManager

    getJavaFileManager(

        JavaCompiler    compiler,

        ResourceFinder  sourceFileFinder,"
13337,compile,"    static void

    compile(

        JavaCompiler                  compiler,
"
13339,compile,"    @Override public void

    compile(final Resource[] sourceResources) throws CompileException, IOException {"
13342,createInstance,"    @Override public Object

    createInstance(Reader reader) throws CompileException, IOException {
"
13343,parseImportDeclarations,"    protected static String[]

    parseImportDeclarations(Reader r) throws IOException {

        final CharBuffer cb = CharBuffer.allocate(10000);

        r.mark(cb.limit());

        r.read(cb);


"
13344,run,"            @Override public void run() { ClassBodyEvaluator.this.sc.addOffset(fileName); }

        });"
13345,newFileName,"    protected Reader

    newFileName(@Nullable final String fileName, Reader reader) {"
13346,getBytecodes,"    @Override public Map<String, byte[]>

    getBytecodes() { return this.sc.getBytecodes(); }"
13347,getClazz,"    @Override public Class<?>

    getClazz() {
"
13348,cook,"    protected void

    cook(@Nullable String fileName, String[] imports, Reader r) throws CompileException, IOException {

"
13349,cook,"    @Override public void

    cook(@Nullable String fileName, Reader r) throws CompileException, IOException {
"
13350,setWarningHandler,"    @Override public void

    setWarningHandler(@Nullable WarningHandler warningHandler) { this.sc.setWarningHandler(warningHandler); }"
13352,setTargetVersion,"    @Override public void

    setTargetVersion(int version) { this.sc.setTargetVersion(version); }"
13353,setSourceVersion,"    @Override public void

    setSourceVersion(int version) { this.sc.setSourceVersion(version); }"
13355,setParentClassLoader,"    @Override public void

    setParentClassLoader(@Nullable ClassLoader parentClassLoader) { this.sc.setParentClassLoader(parentClassLoader); }"
13356,setImplementedTypes,"    @Deprecated @Override public void

    setImplementedTypes(Class<?>[] implementedInterfaces) { this.setImplementedInterfaces(implementedInterfaces); }"
13357,setImplementedInterfaces,"    @Override public void

    setImplementedInterfaces(Class<?>[] implementedTypes) { this.implementedTypes = implementedTypes; }"
13358,setExtendedType,"    @Deprecated @Override public void

    setExtendedType(@Nullable Class<?> extendedClass) { this.setExtendedClass(extendedClass); }"
13359,setExtendedClass,"    @Override public void

    setExtendedClass(@Nullable Class<?> extendedType) { this.extendedType = extendedType; }"
13360,getDefaultImports,"    @Override public String[]

    getDefaultImports() { return this.defaultImports.clone(); }"
13361,setDefaultImports,"    @Override public void

    setDefaultImports(String... defaultImports) { this.defaultImports = defaultImports.clone(); }"
13362,setClassName,"    @Override public void

    setClassName(String className) { this.className = className; }"
13363,getSp,"	public static float getSp(Context context, float sp) {
		return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, sp, context.getResources().getDisplayMetrics());
	}"
13364,byteArrayToInt,"	public static int byteArrayToInt(byte[] b, int offset) {
		return b[3 + offset] & 0xFF | (b[2 + offset] & 0xFF) << 8 | (b[1 + offset] & 0xFF) << 16 | (b[offset] & 0xFF) << 24;
	}"
13365,putIntTo,"	public static void putIntTo(byte[] newArray, int i, int offset) {
		newArray[offset] = (byte) ((i >> 24) & 0xFF);
		newArray[1 + offset] = (byte) ((i >> 16) & 0xFF);
		newArray[2 + offset] = (byte) ((i >> 8) & 0xFF);
		newArray[3 + offset] = (byte) (i & 0xFF);
	}"
13366,closeSocket,"	private void closeSocket() {
		connected = false;
		if (socket != null && !socket.isClosed()) {
			socket.close();"
13367,interrupt,"	@Override public void interrupt() {
		super.interrupt();

		closeSocket();"
13369,add,"	public void add(MotionEvent event) {
		byte[] array = new byte[32 * Config.TOUCH_METADATA_SIZE];
		Utils.putIntTo(array, clientId, 0);
		Utils.putIntTo(array, event.getAction(), 32);
		Utils.putIntTo(array, (int) event.getX(), 64);
		Utils.putIntTo(array, (int) event.getY(), 96);
		try {
			queue.put(array);"
13371,interrupt,"	@Override public void interrupt() {
		closeSocket();
		super.interrupt();
	}"
13372,run,"	@Override public void run() {
		try {
			socket = new DatagramSocket(port);"
13373,config,"	public void config(int fullCanvasWidth, int fullCanvasHeight) {
		this.fullCanvasWidth = fullCanvasWidth;
		this.fullCanvasHeight = fullCanvasHeight;
	}"
13374,onDraw,"	@Override protected void onDraw(Canvas canvas) {
		if (picture != null) {
			canvas.translate(dx, dy);"
13375,onTouchEvent,"	@Override public boolean onTouchEvent(MotionEvent event) {
		if (touchHandler != null) {
			event.setLocation(event.getX() - dx, event.getY() - dy);"
13376,setPicture,"	public void setPicture(PictureWrapper wrapper) {
		this.picture = wrapper.picture;
		this.dx = wrapper.dx;
		this.dy = wrapper.dy;
		bounds.set(0, 0, fullCanvasWidth, fullCanvasHeight);
		invalidate();
	}"
13377,init,"	private void init() {

		setLayerType(View.LAYER_TYPE_SOFTWARE, null);

		textPaint.setStyle(Paint.Style.FILL);
		textPaint.setColor(Color.BLACK);
		textPaint.setAntiAlias(true);
		textPaint.setTextSize(Utils.getSp(getContext(), 24));
"
13378,setTouchHandler,"	public void setTouchHandler(ITouchEventHandler touchHandler) {
		this.touchHandler = touchHandler;
	}"
13379,showLose,"	public void showLose() {
		loseAlphaInterpolator = new LinearInterpolator(255, 0, 300);
	}"
13380,onDrag,"	public void onDrag(int y) {
		bounds.offsetTo(bounds.left, startDragTop + y - downY);
	}"
13382,startDrag,"	public void startDrag(int downX, int downY) {
		this.downX = downX;
		this.downY = downY;
		startDragTop = bounds.top;
	}"
13383,drawLoseEffect,"	private void drawLoseEffect(Canvas canvas, long currentTime) {
		if (loseAlphaInterpolator == null) return;
		final int alpha = loseAlphaInterpolator.getValue(currentTime);
		if (alpha >= 0) {
"
13384,onDraw,"	public void onDraw(Canvas canvas, long currentTime) {

		canvas.drawRect(bounds, playerPaint);
		drawLoseEffect(canvas, currentTime);"
13385,intersectsWith,"	public boolean intersectsWith(Rect rect) {
		return Rect.intersects(rect, bounds);
	}"
13386,contains,"	public boolean contains(int x, int y) {
		return bounds.contains(x, y);
	}"
13387,onTouchEvent,"	public void onTouchEvent(int action, int x, int y) {

		if (action == MotionEvent.ACTION_DOWN) {"
13388,turnBallX,"	private void turnBallX() {
		ball.vector.set(ball.vector.x * -1, ball.vector.y);
	}"
13389,turnBallY,"	private void turnBallY() {
		ball.vector.set(ball.vector.x, ball.vector.y * -1);
	}"
13390,update,"	public void update(Canvas canvas) {

		final int canvasWidth = canvas.getWidth();
		final int canvasHeight = canvas.getHeight();
"
13391,onDraw,"	@Override protected void onDraw(Canvas canvas) {

		final long currentTime = System.currentTimeMillis();
		long timeDiff = 0;

		if (frameTime == 0) {
			frameTime = currentTime;
		} else {
			timeDiff = currentTime - frameTime;
			frameTime = currentTime;
		}"
13392,onTouchEvent,"	@Override protected void onTouchEvent(int clientId, int action, int x, int y) {
		controller.onTouchEvent(action, x, y);
	}"
13393,destroyHost,"	private void destroyHost() {
		if (hostCanvas != null) {
			hostCanvas.destroy();"
13394,destroyClient,"	private void destroyClient() {
		if (pictureReceiver != null) {
			pictureReceiver.destroy();"
13395,onDestroy,"	@Override protected void onDestroy() {
		destroyHost();
		destroyClient();
		super.onDestroy();
	}"
13396,startClient,"	private void startClient(int clientId) {
		pictureReceiver = new PictureReceiver(clientId);
		pictureReceiver.config(PICTURES_PORT, HOST_ADDRESS, TOUCH_EVENTS_PORT);
		pictureReceiver.setReceiverView(receiverView);
		pictureReceiver.start();
	}"
13397,startHost,"	private void startHost(Screen[] screens, int screenWidth, int screenHeight) {
		hostCanvas = new PingPongCanvas(
				PingPongActivity.this,
				FRAME_RATE, screenWidth * screens.length,
				screenHeight"
13398,handleTouchEvent,"			@Override public void handleTouchEvent(MotionEvent event) {
				if (pictureReceiver != null) pictureReceiver.handleTouchEvent(event);
			}"
13399,config,"	private void config(final int screenWidth, final int screenHeight) {

		final Screen[] screens = new Screen[CLIENT_ADDRESSES.length];

		for (int i = 0; i < screens.length; i++) {
			screens[i] = new Screen(CLIENT_ADDRESSES[i], screenWidth * i * -1, 0);
"
13400,onGlobalLayout,"			@Override public void onGlobalLayout() {
				receiverView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
				config(receiverView.getWidth(), receiverView.getHeight());
			}"
13401,onCreate,"	@Override protected void onCreate(Bundle savedInstanceState) {
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		super.onCreate(savedInstanceState);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);

		setContentView(R.layout.activity_pingpong);

		InternalLogger.setLogger(new Logger());
"
13402,interrupt,"	@Override public void interrupt() {
		super.interrupt();
		closeSocket();
	}"
13404,run,"	@Override public void run() {

		while (connected) {"
13407,run,"	@Override public void run() {
		socket = null;
		try {
"
13408,addPicture,"	public void addPicture(Picture picture) {
		if (!connected) return;
		os.reset();
		picture.writeToStream(os);
		try {
			byte[] raw = os.toByteArray();"
13409,config,"	public void config(Screen[] screens, int picturesPort, int touchEventsPort) {
		this.picturesPort = picturesPort;
		this.screens = screens;
		this.touchEventsPort = touchEventsPort;
	}"
13410,destroy,"	public void destroy() {
		if (pictureSenderThread != null) pictureSenderThread.interrupt();
		if (touchEventsReceiverThread != null) touchEventsReceiverThread.interrupt();
	}"
13411,start,"	public void start() {
		pictureSenderThread = new PictureSenderThread(screens, picturesPort);
		pictureSenderThread.start();

		touchEventsReceiverThread = new TouchEventsReceiverThread(touchEventsPort, interactiveCanvas);
		touchEventsReceiverThread.start();"
13412,addPicture,"	public void addPicture(Picture picture) {
		pictureSenderThread.addPicture(picture);
	}"
13413,setInteractiveCanvas,"	public void setInteractiveCanvas(InteractiveCanvas interactiveCanvas) {
		this.interactiveCanvas = interactiveCanvas;
	}"
13414,handleTouchEvent,"	public void handleTouchEvent(MotionEvent event) {
		touchEventsSendThread.add(event);
	}"
13415,config,"	public void config(int picturesReceivePort, InetAddress hostAddress, int touchPort) {
		this.picturesPort = picturesReceivePort;
		this.hostAddress = hostAddress;
		this.touchPort = touchPort;
	}"
13416,run,"	@Override public void run() {
		try {
			receiverView.setPicture(picturesQueue.take());"
13417,setReceiverView,"	public void setReceiverView(ReceiverView receiverView) {
		this.receiverView = receiverView;
	}"
13418,destroy,"	public void destroy() {
		if (picturesReceiverThread != null) picturesReceiverThread.interrupt();
		if (touchEventsSendThread != null) touchEventsSendThread.interrupt();
	}"
13419,start,"	public void start() {
		picturesReceiverThread = new PicturesReceiverThread(picturesPort, receiverView, this, picturesQueue);
		picturesReceiverThread.start();
		touchEventsSendThread = new TouchEventsSendThread(hostAddress, touchPort, clientId);
		touchEventsSendThread.start();
	}"
13420,onDraw,"		void onDraw(Canvas canvas, Paint paint) {
			paint.setColor(color);
			canvas.save();
			canvas.translate(x, y);
			canvas.rotate(rotation);
			canvas.drawRect(-size / 2, -size / 2, size / 2, size / 2, paint);
			canvas.restore();
			rotation++;
		}"
13421,onDraw,"	@Override protected void onDraw(Canvas canvas) {
		canvas.drawColor(Color.BLACK);
		path.reset();
		for (int i = 0; i < markers.size(); i++) {
			Marker marker = markers.get(i);
			if (i == 0) path.moveTo(marker.x, marker.y);
			path.lineTo(marker.x, marker.y);
			marker.onDraw(canvas, paint);"
13422,onTouchEvent,"	@Override protected void onTouchEvent(int clientId, int action, int x, int y) {
		controller.onTouchEvent(action, x, y);
		if (action == MotionEvent.ACTION_DOWN) {
			markers.add(new Marker(x, y, radius, markersColors[clientId]));"
13424,destroyHost,"	private void destroyHost() {
		if (canvas != null) {
			canvas.destroy();"
13425,onDestroy,"	@Override protected void onDestroy() {
		destroyClient();
		destroyHost();
		super.onDestroy();
	}"
13426,startHost,"	private void startHost(Screen[] screens, int screenWidth, int screenHeight) {

		Random rnd = new Random();
		int[] markersColors = new int[screens.length];
		for (int i = 0; i < markersColors.length; i++)
			markersColors[i] = Color.argb(255, rnd.nextInt(256), rnd.nextInt(256), rnd.nextInt(256));

		canvas = new MirrorCanvas("
13429,config,"	private void config(final int screenWidth, final int screenHeight) {

		final Screen[] screens = new Screen[CLIENT_ADDRESSES.length];

		for (int i = 0; i < screens.length; i++) {
			screens[i] = new Screen(CLIENT_ADDRESSES[i], 0, 0);
"
13431,onCreate,"	protected void onCreate(Bundle savedInstanceState) {
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		super.onCreate(savedInstanceState);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);

		setContentView(R.layout.activity_mirror);

		InternalLogger.setLogger(new Logger());
"
13432,getValue,"	public int getValue(long currentTime) {
		if (startTime == -1) startTime = currentTime;
		float t = (currentTime - startTime) / (float) duration;
		if (t > 1) return to;
		return (int) ((1 - t) * from + t * to);
	}"
13433,handleTouchEvent,"	void handleTouchEvent(int action, int x, int y);
}"
13435,logException,"	public static void logException(Class src, Throwable e) {
		if (logger != null) logger.logException(src, e);
	}"
13436,setLogger,"	public static void setLogger(IInteractiveCanvasLogger logger) {
		InternalLogger.logger = logger;
	}"
13437,config,"	public final void config(Screen[] screens, int picturesPort, int touchEventsPort) {
		pictureSender.config(screens, picturesPort, touchEventsPort);
	}"
13438,destroy,"	public void destroy() {
		drawing = false;
		pictureSender.destroy();
	}"
13439,run,"			@Override public void run() {
				pictureSender.start();

				while (drawing) {
					begin();"
13440,start,"	public final void start() {
		new Thread(new Runnable() {
			@Override public void run() {"
13441,onTouchEvent,"	protected void onTouchEvent(int clientId, int action, int x, int y) {
"
13442,onDraw,"	protected void onDraw(Canvas canvas) {
		picture.endRecording();
		pictureSender.addPicture(picture);
	}"
13443,begin,"	public final void begin() {
		onDraw(picture.beginRecording(width, height));
	}"
13444,logException,"	void logException(Class src, Throwable throwable);
}"
13445,logException,"	void logException(Object msg);
	void logException(Class src, Throwable throwable);"
13446,logException,"	void logException(String msg);
	void logException(Object msg);"
13447,toByteArray,"	@Override public synchronized byte[] toByteArray() {
		byte[] newArray = new byte[count + extraBytes];
		System.arraycopy(buf, 0, newArray, extraBytes, count);
		return newArray;
	}"
13448,onTouchEvent,"	public void onTouchEvent(int action, int x, int y) {
"
13449,updatePosition,"	private void updatePosition(long timeDiff) {
		bounds.offset(
				(int) (SPEED * timeDiff * vector.x),"
13450,drawTail,"	private void drawTail(Canvas canvas, long timeDiff, long currentTime) {

		final int step = 255 / tail.length;
		int alpha = 255;
		for (Rect tailPoint : tail) {
			fillPaint.setAlpha(alpha);
			canvas.drawRect(bounds, fillPaint);
			canvas.drawRect(tailPoint, fillPaint);
			alpha -= step;
		}
		fillPaint.setAlpha(255);"
13451,onDraw,"	public void onDraw(Canvas canvas, long timeDiff, long currentTime) {
		updatePosition(timeDiff);

		canvas.drawRect(bounds, fillPaint);
		drawTail(canvas, timeDiff, currentTime);"
13452,setPosition,"	public void setPosition(int x, int y) {
		bounds.offsetTo(x, y);
	}"
13453,completeSecurityScopeNameValue,"  public boolean completeSecurityScopeNameValue() {
    return pathResolver.isSecurityScopeNameValue(psiElement);
  }"
13454,completeTagsValue,"  public boolean completeTagsValue() {
    return pathResolver.isTagsValue(psiElement);
  }"
13455,completeHeadersCollectionFormat,"  public boolean completeHeadersCollectionFormat() {
    return pathResolver.childOfHeadersCollectionFormat(psiElement);
  }"
13456,completeParametersCollectionFormat,"  public boolean completeParametersCollectionFormat() {
    return pathResolver.childOfParametersCollectionFormat(psiElement);
  }"
13457,completeItemsCollectionFormat,"  public boolean completeItemsCollectionFormat() {
    return pathResolver.childOfItemsCollectionFormat(psiElement);
  }"
13458,completeOperationSecurityKey,"  public boolean completeOperationSecurityKey() {
    return pathResolver.childOfOperationSecurityKey(psiElement);
  }"
13459,completeRootSecurityKey,"  public boolean completeRootSecurityKey() {
    return pathResolver.childOfRootSecurityKey(psiElement);
  }"
13460,completeResponseDefinition,"  public boolean completeResponseDefinition() {
    return pathResolver.childOfResponseDefinition(psiElement);
  }"
13461,completeResponseRefValue,"  public boolean completeResponseRefValue() {
    return pathResolver.isResponseRefValue(psiElement);
  }"
13462,completeInValue,"  public boolean completeInValue() {
    return pathResolver.isInValue(psiElement);
  }"
13463,completeFormatValue,"  public boolean completeFormatValue() {
    return pathResolver.isFormatValue(psiElement);
  }"
13464,completeTypeValue,"  public boolean completeTypeValue() {
    return pathResolver.isTypeValue(psiElement);
  }"
13465,completeBooleanValue,"  public boolean completeBooleanValue() {
    return pathResolver.isBooleanValue(psiElement);
  }"
13466,completeParameterRefValue,"  public boolean completeParameterRefValue() {
    return pathResolver.isParameterRefValue(psiElement);
  }"
13467,completeDefinitionRefValue,"  public boolean completeDefinitionRefValue() {
    return pathResolver.isDefinitionRefValue(psiElement);
  }"
13468,completeSchemesValue,"  public boolean completeSchemesValue() {
    return pathResolver.isSchemesValue(psiElement);
  }"
13469,completeMimeValue,"  public boolean completeMimeValue() {
    return pathResolver.isMimeValue(psiElement);
  }"
13470,completeParameterDefinitionKey,"  public boolean completeParameterDefinitionKey() {
    return pathResolver.childOfParameterDefinition(psiElement);
  }"
13471,completeDefinitionsKey,"  public boolean completeDefinitionsKey() {
    return pathResolver.childOfDefinitions(psiElement);
  }"
13472,completeXmlKey,"  public boolean completeXmlKey() {
    return pathResolver.childOfXml(psiElement);
  }"
13473,completeAdditionalPropertiesKey,"  public boolean completeAdditionalPropertiesKey() {
    return pathResolver.childOfAdditionalProperties(psiElement);
  }"
13474,completePropertiesSchemaKey,"  public boolean completePropertiesSchemaKey() {
    return pathResolver.childOfPropertiesSchema(psiElement);
  }"
13475,completeSchemaItemsKey,"  public boolean completeSchemaItemsKey() {
    return pathResolver.childOfSchemaItems(psiElement);
  }"
13476,completeSchemaKey,"  public boolean completeSchemaKey() {
    return pathResolver.childOfSchema(psiElement);
  }"
13477,completeSecurityDefinitionKey,"  public boolean completeSecurityDefinitionKey() {
    return pathResolver.childOfSecurityDefinition(psiElement);
  }"
13478,completeTagKey,"  public boolean completeTagKey() {
    return pathResolver.childOfTag(psiElement);
  }"
13479,completeHeadersKey,"  public boolean completeHeadersKey() {
    return pathResolver.childOfHeaders(psiElement);
  }"
13480,completeHeaderKey,"  public boolean completeHeaderKey() {
    return pathResolver.childOfHeader(psiElement);
  }"
13481,completeResponseKey,"  public boolean completeResponseKey() {
    return pathResolver.childOfResponse(psiElement);
  }"
13482,completeResponsesKey,"  public boolean completeResponsesKey() {
    return pathResolver.childOfResponses(psiElement);
  }"
13483,completeParameterItemsKey,"  public boolean completeParameterItemsKey() {
    return pathResolver.childOfParameterItems(psiElement);
  }"
13484,completeParametersKey,"  public boolean completeParametersKey() {
    return pathResolver.childOfParameters(psiElement);
  }"
13485,completeExternalDocsKey,"  public boolean completeExternalDocsKey() {
    return pathResolver.childOfExternalDocs(psiElement);
  }"
13486,completeOperationKey,"  public boolean completeOperationKey() {
    return pathResolver.childOfOperation(psiElement);
  }"
13487,completePathKey,"  public boolean completePathKey() {
    return pathResolver.childOfPath(psiElement);
  }"
13488,completeLicenseKey,"  public boolean completeLicenseKey() {
    return pathResolver.childOfLicense(psiElement);
  }"
13489,completeContactKey,"  public boolean completeContactKey() {
    return pathResolver.childOfContact(psiElement);
  }"
13490,completeInfoKey,"  public boolean completeInfoKey() {
    return pathResolver.childOfInfo(psiElement);
  }"
13491,completeRootKey,"  public boolean completeRootKey() {
    return pathResolver.childOfRoot(psiElement);
  }"
13492,completeDiscriminatorKey,"  public boolean completeDiscriminatorKey() {
    return pathResolver.childOfDiscriminator(psiElement);
  }"
13493,completeContentKey,"  public boolean completeContentKey() {
    return pathResolver.childOfContent(psiElement);
  }"
13494,completeSecuritySchemeKey,"  public boolean completeSecuritySchemeKey() {
    return pathResolver.childOfSecurityScheme(psiElement);
  }"
13495,completeCallbackKey,"  public boolean completeCallbackKey() {
    return pathResolver.childOfCallback(psiElement);
  }"
13496,completeLinkKey,"  public boolean completeLinkKey() {
    return pathResolver.childOfLink(psiElement);
  }"
13497,completeEncodingKey,"  public boolean completeEncodingKey() {
    return pathResolver.childOfEncoding(psiElement);
  }"
13498,completeExampleKey,"  public boolean completeExampleKey() {
    return pathResolver.childOfExample(psiElement);
  }"
13499,completeMediaTypeKey,"  public boolean completeMediaTypeKey() {
    return pathResolver.childOfMediaType(psiElement);
  }"
13500,completeRequestBodyKey,"  public boolean completeRequestBodyKey() {
    return pathResolver.childOfRequestBody(psiElement);
  }"
13501,completeComponentKey,"  public boolean completeComponentKey() {
    return pathResolver.childOfComponent(psiElement);
  }"
13502,completeServerVariableKey,"  public boolean completeServerVariableKey() {
    return pathResolver.childOfServerVariable(psiElement);
  }"
13503,completeServerKey,"  public boolean completeServerKey() {
    return pathResolver.childOfServer(psiElement);
  }"
13506,completeStyleValue,"  public boolean completeStyleValue() {
    return pathResolver.isStyleValue(psiElement);
  }"
13510,completeMappingRefValue,"  public boolean completeMappingRefValue() {
    return pathResolver.isMappingRefValue(psiElement);
  }"
13511,completeCallbackRefValue,"  public boolean completeCallbackRefValue() {
    return pathResolver.isCallbackRefValue(psiElement);
  }"
13512,completeLinkRefValue,"  public boolean completeLinkRefValue() {
    return pathResolver.isLinkRefValue(psiElement);
  }"
13513,completeHeaderRefValue,"  public boolean completeHeaderRefValue() {
    return pathResolver.isHeaderRefValue(psiElement);
  }"
13514,completeRequestBodyRefValue,"  public boolean completeRequestBodyRefValue() {
    return pathResolver.isRequestBodyRefValue(psiElement);
  }"
13515,completeExampleRefValue,"  public boolean completeExampleRefValue() {
    return pathResolver.isExampleRefValue(psiElement);
  }"
13517,completeSchemaRefValue,"  public boolean completeSchemaRefValue() {
    return pathResolver.isSchemaRefValue(psiElement);
  }"
13531,getPsiFile,"  public PsiFile getPsiFile() {
    return psiElement.getContainingFile();
  }"
13532,getTagNames,"  public List<String> getTagNames() {
    return traversal.getTagNames(psiElement.getContainingFile());
  }"
13533,getChildrenOfArrayObject,"  public List<PsiElement> getChildrenOfArrayObject(final PsiElement psiElement) {
    return traversal.getChildrenOfArrayObject(psiElement);
  }"
13534,isUniqueArrayStringValue,"  public boolean isUniqueArrayStringValue(final String keyName) {
    return traversal.isUniqueArrayStringValue(keyName, psiElement);
  }"
13535,getParentKeyName,"  public Optional<String> getParentKeyName() {
    return traversal.getParentKeyName(psiElement);
  }"
13536,getParentByName,"  public Optional<PsiElement> getParentByName(final String parentName) {
    return traversal.getParentByName(psiElement, parentName);
  }"
13537,getKeyNameOfObject,"  public Optional<String> getKeyNameOfObject(final PsiElement psiElement) {
    return traversal.getKeyNameOfObject(psiElement);
  }"
13538,getSecurityScopesIfOAuth2,"  public List<String> getSecurityScopesIfOAuth2(final PsiElement securityDefinitionItem) {
    return traversal.getSecurityScopesIfOAuth2(securityDefinitionItem);
  }"
13539,extractSecurityNameFromSecurityObject,"  public Optional<String> extractSecurityNameFromSecurityObject(final PsiElement psiElement) {
    return traversal.extractSecurityNameFromSecurityItem(psiElement);
  }"
13540,createInsertValueHandler,"  public InsertHandler<LookupElement> createInsertValueHandler(final Value value) {
    return traversal.createInsertValueHandler(value);
  }"
13541,createInsertFieldHandler,"  public InsertHandler<LookupElement> createInsertFieldHandler(final Field field) {
    return traversal.createInsertFieldHandler(field);
  }"
13542,isUniqueKey,"  public boolean isUniqueKey(final String keyName) {
    List<? extends PsiNamedElement> children =
        new PathFinder().findDirectNamedChildren(""parent"", psiElement);
"
13543,hasPath,"  public boolean hasPath(final String pathExpression) {
    return new PathFinder().isInsidePath(psiElement, pathExpression);
  }"
13544,px2dip,"    public static int px2dip(Context context, float pxValue) {
        if (context == null) {
            return (int) pxValue;
        }
        final float scale = context.getResources().getDisplayMetrics().density;"
13545,dip2px,"    public static int dip2px(Context context, float dipValue) {
        if (context == null) {
            return (int) dipValue;
        }
        final float scale = context.getResources().getDisplayMetrics().density;"
13546,bindView,"    View bindView(Context context,
                  int position,"
13547,onResume,"    protected void onResume() {
        super.onResume();
        mAnimCircleIndicator.start();
    }"
13548,onPause,"    protected void onPause() {
        super.onPause();
        mAnimCircleIndicator.stop();
    }"
13549,onPageClick,"            public void onPageClick(int position, Page page) {
                if (position == 0) {
"
13551,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_anim_indicator);

        updateTest();"
13552,load,"    public void load(Context context,ImageView targetView, Object res) {

        if (!isInited)
            initLoader(context);
"
13554,getImageLoader,"    public UILoader getImageLoader(Context context) {
        UILoader uilLoader = new UILoader();
        initLoader(context);
        return uilLoader;
    }"
13555,setIsLoop,"    public void setIsLoop(boolean isLoop) {
        this.isLoop = isLoop;
    }"
13556,isLoop,"    public boolean isLoop() {
        return isLoop;
    }"
13557,setPages,"    public void setPages(List<Page> pages) {
        this.mPageList = pages;
        notifyDataSetChanged();
    }"
13558,setImageLoader,"    public void setImageLoader(ImageLoader imageLoader) {
        mImageLoader = imageLoader;
    }"
13559,getView,"    public View getView(final int position, View convertView, ViewGroup container) {

        final Page page = mPageList.get(getRealPosition(position));
        convertView =  mViewBinder.bindView(
                mContext,"
13560,getRealCount,"    public int getRealCount() {
        return mPageList.size();
    }"
13561,getCount,"    public int getCount() {
        return isLoop ? getRealCount() * PAGE_COUNT_FACTOR : getRealCount();
    }"
13562,getRealPosition,"    public int getRealPosition(int position) {
        return isLoop ? position % getRealCount() : position;
    }"
13563,getView,"    public abstract View getView(int position, View convertView, ViewGroup container);
}"
13564,getItemViewType,"    public int getItemViewType(int position) {
        return 0;
    }"
13565,getViewTypeCount,"    public int getViewTypeCount() {
        return 1;
    }"
13566,isViewFromObject,"    public final boolean isViewFromObject(View view, Object object) {
        return view == object;
    }"
13567,destroyItem,"    public final void destroyItem(ViewGroup container, int position, Object object) {
        View view = (View) object;
        container.removeView(view);
        int viewType = getItemViewType(position);
        if (viewType != IGNORE_ITEM_VIEW_TYPE) {
            recycleBin.addScrapView(view, position, viewType);"
13568,instantiateItem,"    public final Object instantiateItem(ViewGroup container, int position) {
        int viewType = getItemViewType(position);
        View view = null;
        if (viewType != IGNORE_ITEM_VIEW_TYPE) {
            view = recycleBin.getScrapView(position, viewType);
        }
        view = getView(position, view, container);
        container.addView(view);"
13569,notifyDataSetChanged,"    public void notifyDataSetChanged() {
        recycleBin.scrapActiveViews();
        if (mDataChangeListener != null) {
            mDataChangeListener.notifyDataChange();
        }"
13570,setDataChangeListener,"    public void setDataChangeListener(DataChangeListener dataChangeListener) {
        this.mDataChangeListener = dataChangeListener;
    }"
13571,getDataChangeListener,"    public DataChangeListener getDataChangeListener() {
        return mDataChangeListener;
    }"
13574,pruneScrapViews,"  private void pruneScrapViews() {
    final int maxViews = activeViews.length;
    final int viewTypeCount = this.viewTypeCount;
    final SparseArray<View>[] scrapViews = this.scrapViews;
    for (int i = 0; i < viewTypeCount; ++i) {
      final SparseArray<View> scrapPile = scrapViews[i];"
13575,scrapActiveViews,"  void scrapActiveViews() {
    final View[] activeViews = this.activeViews;
    final int[] activeViewTypes = this.activeViewTypes;
    final boolean multipleScraps = viewTypeCount > 1;

    SparseArray<View> scrapViews = currentScrapViews;
    final int count = activeViews.length;
    for (int i = count - 1; i >= 0; i--) {
      final View victim = activeViews[i];"
13576,addScrapView,"  void addScrapView(View scrap, int position, int viewType) {
    if (viewTypeCount == 1) {
      currentScrapViews.put(position, scrap);
    } else {"
13577,getScrapView,"  View getScrapView(int position, int viewType) {
    if (viewTypeCount == 1) {
      return retrieveFromScrap(currentScrapViews, position);
    } else if (viewType >= 0 && viewType < scrapViews.length) {"
13578,shouldRecycleViewType,"  protected boolean shouldRecycleViewType(int viewType) {
    return viewType >= 0;
  }"
13580,load,"    public void load(Context context,ImageView targetView, Object res) {
        if (res == null) {
            return;
        }

        Picasso picasso = Picasso.with(context);
        RequestCreator requestCreator = null;"
13581,getImageLoader,"    public PicassoLoader getImageLoader(Context context) {
        return new PicassoLoader();
    }"
13585,onPageClick,"    void onPageClick(int position, Page page);
"
13586,setCurrentItem,"    public void setCurrentItem(int index) {
        if (index > getRealCount() - 1) {
            throw new IndexOutOfBoundsException(""index is "" + index + ""current "" +
                    ""list size is "" + getRealCount());"
13587,onPageScrollStateChanged,"    public void onPageScrollStateChanged(int state) {
        if (mIndicator != null) {
            mIndicator.onPageScrollStateChanged(state);
        }"
13588,onPageSelected,"    public void onPageSelected(int position) {
        if (mIndicator != null) {
            mIndicator.onPageSelected(getRealPosition(position));
        }"
13589,onPageScrolled,"    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
        if (mIndicator != null) {
            mIndicator.onPageScrolled(getRealPosition(position), positionOffset, positionOffsetPixels);
        }"
13590,handleMessage,"        public void handleMessage(Message msg) {
            super.handleMessage(msg);

            InfiniteIndicator infiniteIndicatorLayout = mWeakReference.get();
            if (infiniteIndicatorLayout != null) {"
13591,notifyDataChange,"    public void notifyDataChange() {
        if (mIndicator != null) {
            mIndicator.notifyDataSetChanged();"
13592,dispatchTouchEvent,"    public boolean dispatchTouchEvent(MotionEvent ev) {
        if (configuration == null) {
            return super.dispatchTouchEvent(ev);
        }

        int action = MotionEventCompat.getActionMasked(ev);"
13593,scrollOnce,"    public void scrollOnce() {
        PagerAdapter adapter = mViewPager.getAdapter();
        int currentItem = mViewPager.getCurrentItem();

        int totalCount;
        if (adapter == null || (totalCount = adapter.getCount()) <= 1) {
            return;
        }"
13594,getRealPosition,"    private int getRealPosition(int position) {
        return mRecyleAdapter.getRealPosition(position);
    }"
13595,getRealCount,"    private int getRealCount() {
        return mRecyleAdapter.getRealCount();
    }"
13596,setScroller,"    private void setScroller() {
        try {
            Field scrollerField = ViewPager.class.getDeclaredField(""mScroller"");"
13597,sendScrollMessage,"    private void sendScrollMessage(long delayTimeInMills) {
        handler.removeMessages(MSG_SCROLL);
        handler.sendEmptyMessageDelayed(MSG_SCROLL, delayTimeInMills);
    }"
13598,sendScrollMessage,"    private void sendScrollMessage() {
        sendScrollMessage(configuration.getInterval());
    }"
13599,stop,"    public void stop() {
        isScrolling = false;
        handler.removeMessages(MSG_SCROLL);
    }"
13600,start,"    public void start(long delayTimeInMills) {
        if (configuration == null) {
            throw new RuntimeException(""You should init a configuration first"");
        }"
13601,start,"    public void start() {
        start(configuration.getInterval());
    }"
13602,getIndex,"    private int getIndex(int offset) {
        return getRealCount() * PAGE_COUNT_FACTOR / 2 -
                (getRealCount() * PAGE_COUNT_FACTOR / 2 % getRealCount"
13603,scrollToIndex,"    private void scrollToIndex(int offset) {
        if (configuration.isLoop() && getRealCount() > 1) {
            mViewPager.setCurrentItem(getIndex(offset));
        } else {"
13604,getPagerIndicator,"    public PageIndicator getPagerIndicator() {
        return mIndicator;
    }"
13605,initIndicator,"    public void initIndicator() {
        if (configuration.isDrawIndicator()) {
            mIndicator = (PageIndicator) findViewById(configuration.getPageIndicator().getResourceId());"
13606,notifyDataChange,"    public void notifyDataChange(List<Page> pages) {
        if (pages != null && !pages.isEmpty()) {
            mRecyleAdapter.setPages(pages);
        }
"
13608,build,"        public IndicatorConfiguration build() {
            return new IndicatorConfiguration(this);
        }"
13609,onPageChangeListener,"        public Builder onPageChangeListener(ViewPager.OnPageChangeListener onPageChangeListener) {
            this.onPageChangeListener = onPageChangeListener;
            return this;
        }"
13610,indicator,"        private Builder indicator(View indicator) {
            this.indicator = indicator;
            return this;
        }"
13611,viewBinder,"        public Builder viewBinder(ViewBinder viewBinder) {
            this.viewBinder = viewBinder;
            return this;
        }"
13612,onPageClickListener,"        public Builder onPageClickListener(OnPageClickListener onPageClickListener) {
            this.onPageClickListener = onPageClickListener;
            return this;
        }"
13613,position,"        public Builder position(IndicatorPosition indicatorPosition) {
            this.indicatorPosition = indicatorPosition;
            return this;
        }"
13614,scrollDurationFactor,"        public Builder scrollDurationFactor(double scrollFactor) {
            this.scrollFactor = scrollFactor;
            return this;
        }"
13615,isAutoScroll,"        public Builder isAutoScroll(boolean isAutoScroll) {
            this.isAutoScroll = isAutoScroll;
            return this;
        }"
13616,isStopWhileTouch,"        public Builder isStopWhileTouch(boolean isStopScrollWhenTouch) {
            this.isStopWhileTouch = isStopScrollWhenTouch;
            return this;
        }"
13617,internal,"        public Builder internal(long interval) {
            this.interval = interval;
            return this;
        }"
13618,direction,"        public Builder direction(int direction) {
            this.direction = direction;
            return this;
        }"
13619,isDrawIndicator,"        public Builder isDrawIndicator(boolean isDrawIndicator) {
            this.isDrawIndicator = isDrawIndicator;
            return this;
        }"
13620,isLoop,"        public Builder isLoop(boolean isLoop) {
            this.isLoop = isLoop;
            return this;
        }"
13621,imageLoader,"        public Builder imageLoader(ImageLoader imageLoader) {
            this.imageLoader = imageLoader;
            return this;
        }"
13622,getViewBinder,"    public ViewBinder getViewBinder() {
        return viewBinder;
    }"
13623,getOnPageClickListener,"    public OnPageClickListener getOnPageClickListener() {
        return mOnPageClickListener;
    }"
13624,getOnPageChangeListener,"    public ViewPager.OnPageChangeListener getOnPageChangeListener() {
        return onPageChangeListener;
    }"
13625,getPageIndicator,"    public IndicatorPosition getPageIndicator() {
        return presentIndicator;
    }"
13626,getScrollFactor,"    public double getScrollFactor() {
        return scrollFactor;
    }"
13627,isAutoScroll,"    public boolean isAutoScroll() {
        return isAutoScroll;
    }"
13628,isStopWhenTouch,"    public boolean isStopWhenTouch() {
        return isStopScrollWhenTouch;
    }"
13629,getInterval,"    public long getInterval() {
        return interval;
    }"
13630,isDrawIndicator,"    public boolean isDrawIndicator() {
        return isDrawIndicator;
    }"
13632,getDirection,"    public int getDirection() {
        return direction;
    }"
13633,getImageLoader,"    public ImageLoader getImageLoader() {
        if (imageLoader == null) {
            throw new RuntimeException(""You should set ImageLoader first"");
        }"
13634,getResourceId,"        public int getResourceId() {
            return id;
        }"
13636,load,"    void load(Context context,ImageView targetView, Object res);
"
13637,load,"    public void load(Context context, ImageView targetView, Object res) {

        if (res instanceof String){"
13638,initLoader,"    public void initLoader(Context context) {
"
13639,startScroll,"    public void startScroll(int startX, int startY, int dx, int dy, int duration) {
        super.startScroll(startX, startY, dx, dy, (int)(duration * scrollFactor));
    }"
13640,setScrollDurationFactor,"    public void setScrollDurationFactor(double scrollFactor) {
        this.scrollFactor = scrollFactor;
    }"
13641,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        this.finish();
        return true;
    }"
13642,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu, menu);
        return super.onCreateOptionsMenu(menu);
    }"
13644,testCircleIndicator,"    private void testCircleIndicator() {
        mDefaultIndicator = (InfiniteIndicator) findViewById(R.id.indicator_default_circle);
        IndicatorConfiguration configuration = new IndicatorConfiguration.Builder()
                .imageLoader(new UILoader())
                .position(IndicatorConfiguration.IndicatorPosition.Center_Bottom)
                .build();
        mDefaultIndicator.init(configuration);"
13645,onResume,"    protected void onResume() {
        super.onResume();
        mDefaultIndicator.start();
        mCustoemCircleIndicator.start();
    }"
13646,onPause,"    protected void onPause() {
        super.onPause();
        mDefaultIndicator.stop();
        mCustoemCircleIndicator.stop();
    }"
13650,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        if (mOrientation == HORIZONTAL) {
            setMeasuredDimension(measureLong(widthMeasureSpec), measureShort(heightMeasureSpec));"
13651,onPageSelected,"    public void onPageSelected(int position) {
        if (mSnap || mScrollState == ViewPager.SCROLL_STATE_IDLE) {
            mCurrentPage = position;"
13652,onPageScrolled,"    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
        mCurrentPage = position;
        mPageOffset = positionOffset;
        invalidate();
    }"
13653,onPageScrollStateChanged,"    public void onPageScrollStateChanged(int state) {
        mScrollState = state;
    }"
13654,notifyDataSetChanged,"    public void notifyDataSetChanged() {
        mCurrentPage = 0;
        invalidate();
    }"
13655,setCurrentItem,"    public void setCurrentItem(int item) {
        mCurrentPage = item;
        invalidate();
    }"
13656,setViewPager,"    public void setViewPager(ViewPager view) {
        if (mViewPager == view) {
            return;
        }
        mViewPager = view;"
13657,onTouchEvent,"    public boolean onTouchEvent(MotionEvent ev) {
        if (mViewPager == null || mRecyleAdapter.getCount() == 0) {
            return false;
        }

        final int action = ev.getAction() & MotionEventCompat.ACTION_MASK;"
13659,isSnap,"    public boolean isSnap() {
        return mSnap;
    }"
13660,setSnap,"    public void setSnap(boolean snap) {
        mSnap = snap;
        invalidate();
    }"
13661,getRadius,"    public float getRadius() {
        return mRadius;
    }"
13662,setRadius,"    public void setRadius(float radius) {
        mRadius = radius;
        invalidate();
    }"
13663,getStrokeWidth,"    public float getStrokeWidth() {
        return mPaintStroke.getStrokeWidth();
    }"
13664,setStrokeWidth,"    public void setStrokeWidth(float strokeWidth) {
        mPaintStroke.setStrokeWidth(strokeWidth);
        invalidate();
    }"
13665,getStrokeColor,"    public int getStrokeColor() {
        return mPaintStroke.getColor();
    }"
13666,setStrokeColor,"    public void setStrokeColor(int strokeColor) {
        mPaintStroke.setColor(strokeColor);
        invalidate();
    }"
13667,getOrientation,"    public int getOrientation() {
        return mOrientation;
    }"
13668,setOrientation,"    public void setOrientation(int orientation) {
        switch (orientation) {
            case HORIZONTAL:"
13669,getFillColor,"    public int getFillColor() {
        return mPaintFill.getColor();
    }"
13670,setFillColor,"    public void setFillColor(int fillColor) {
        mPaintFill.setColor(fillColor);
        invalidate();
    }"
13671,getPageColor,"    public int getPageColor() {
        return mPaintPageFill.getColor();
    }"
13672,setPageColor,"    public void setPageColor(int pageColor) {
        mPaintPageFill.setColor(pageColor);
        invalidate();
    }"
13673,isCentered,"    public boolean isCentered() {
        return mCentered;
    }"
13674,setCentered,"    public void setCentered(boolean centered) {
        mCentered = centered;
        invalidate();
    }"
13675,setRealViewCount,"    public void setRealViewCount(int viewCount) {
        mRealCount = viewCount;
    }"
13676,onClick,"                    public void onClick(View v) {
                        mOnPageClickListener.onPageClick(position, page);
                    }"
13677,bindView,"    public View bindView(Context context,
                         final int position,
                         final Page page,
                         ImageLoader imageLoader,
                         final OnPageClickListener mOnPageClickListener,
                         View convertView,"
13678,onPageClick,"    public void onPageClick(int position, Page page) {
        Toast.makeText(this, "" click page --- "" + position, Toast.LENGTH_SHORT).show();
    }"
13679,onPageScrollStateChanged,"    public void onPageScrollStateChanged(int state) {
"
13681,onPageScrolled,"    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
"
13682,testAnimLineIndicator,"    private void testAnimLineIndicator() {
        mAnimLineIndicator = (InfiniteIndicator) findViewById(R.id.infinite_anim_line);
        IndicatorConfiguration configuration = new IndicatorConfiguration.Builder()
                .imageLoader(new PicassoLoader())
                .isAutoScroll(false)
                .isStopWhileTouch(true)"
13683,testAnimCircleIndicator,"    private void testAnimCircleIndicator() {
        mAnimCircleIndicator = (InfiniteIndicator) findViewById(R.id.infinite_anim_circle);
        IndicatorConfiguration configuration = new IndicatorConfiguration.Builder()
                .imageLoader(new UILoader())
                .isStopWhileTouch(true)
                .onPageChangeListener(this)
                .onPageClickListener(this)"
13684,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        Intent intent = new Intent(this, DefaultCircleIndicatorActivity.class);
        startActivity(intent);
        return true;
    }"
13686,onResume,"    protected void onResume() {
        super.onResume();
        mAnimCircleIndicator.start();
        mAnimLineIndicator.start();
    }"
13687,onPause,"    protected void onPause() {
        super.onPause();
        mAnimCircleIndicator.stop();
        mAnimLineIndicator.stop();
    }"
13689,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_anim_indicator);

        initData();
        testAnimCircleIndicator();
        testAnimLineIndicator();"
13690,dip2px,"    public int dip2px(float dpValue) {
        final float scale = getResources().getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);
    }"
13691,getInterpolation,"        public float getInterpolation(float value) {
            return Math.abs(1.0f - value);
        }"
13692,invalidIndicators,"    private void invalidIndicators() {
        removeAllViews();

        if (mRecyleAdapter == null) {
            return;
        }

        int count = mRecyleAdapter.getRealCount();
        if (count < 2) {"
13694,onPageSelected,"    public void onPageSelected(int position) {
        if (getChildAt(mCurrentPage) == null)
            return;

        mAnimationIn.setTarget(getChildAt(mCurrentPage));
        mAnimationIn.start();
        mAnimationOut.setTarget(getChildAt(position));
        mAnimationOut.start();"
13696,notifyDataSetChanged,"    public void notifyDataSetChanged() {
        mCurrentPage = 0;
        invalidIndicators();
    }"
13697,setCurrentItem,"    public void setCurrentItem(int item) {
        mCurrentPage = item;
        invalidIndicators();
    }"
13698,setViewPager,"    public void setViewPager(ViewPager viewPager) {
        mRecyleAdapter = (RecyleAdapter) viewPager.getAdapter();
        invalidIndicators();
    }"
13699,handleTypedArray,"    private void handleTypedArray(Context context, AttributeSet attrs) {
        if (attrs != null) {
            TypedArray typedArray =
                    context.obtainStyledAttributes(attrs, R.styleable.AnimIndicator);

            mIndicatorWidth ="
13701,onPageClick,"    public void onPageClick(int position, Page page) {
        Toast.makeText(this, ""position = ""+position, Toast.LENGTH_SHORT).show();
    }"
13705,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_anim_indicator);

        addSlidersTest();"
13706,getRealFilePath,"    public String getRealFilePath(final Context context, final Uri uri) {
        if (null == uri) return null;
        final String scheme = uri.getScheme();
        String data = null;
        if (scheme == null)
            data = uri.getPath();
        else if (ContentResolver.SCHEME_FILE.equals(scheme)) {"
13708,onClick,"                        public void onClick(DialogInterface dialog, int which) {
                            dialog.cancel();
                            rationale.cancel();
                        }"
13709,onClick,"                        public void onClick(DialogInterface dialog, int which) {
                            dialog.cancel();
                            rationale.resume();
                        }"
13713,delOnClickListener,"            public void delOnClickListener(int position, int remainNum) {
                Toast.makeText(OnePickerActivity.this, ""delOnClickListenerremainNum"" + remainNum, Toast.LENGTH_SHORT).show();
            }"
13714,picOnClickListener,"            public void picOnClickListener(List<ImageShowPickerBean> list, int position, int remainNum) {
                Toast.makeText(OnePickerActivity.this, list.size() + ""========"" + position + ""remainNum"" + remainNum, Toast.LENGTH_SHORT).show();
            }"
13715,addOnClickListener,"            public void addOnClickListener(int remainNum) {
                Matisse.from(OnePickerActivity.this)
                        .choose(MimeType.allOf())
                        .countable(true)"
13717,delOnClickListener,"            public void delOnClickListener(int position, int remainNum) {
                list.remove(position);
                Toast.makeText(context, ""delOnClickListenerremainNum"" + remainNum, Toast.LENGTH_SHORT).show();
            }"
13718,picOnClickListener,"            public void picOnClickListener(List<ImageShowPickerBean> list, int position, int remainNum) {
                Toast.makeText(context, list.size() + ""========"" + position + ""remainNum"" + remainNum, Toast.LENGTH_SHORT).show();
            }"
13722,getItem,"    public List<ImageBean> getItem(int position) {
        return myLists.get(position);
    }"
13723,getCount,"    public int getCount() {
        return myLists.size();
    }"
13724,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ListView listView = (ListView) findViewById(R.id.listview);
        MyAdapter adapter = new MyAdapter(mList, this);
        listView.setAdapter(adapter);
        for (int i = 0; i < 10; i++) {
            List<ImageBean> list = new ArrayList<>();
            for (int j = 0; j < 2; j++) {"
13725,displayImage,"    public void displayImage(Context context, @DrawableRes Integer resId, ImageView imageView) {
        imageView.setImageResource(resId);
    }"
13726,displayImage,"    public void displayImage(Context context, String path, ImageView imageView) {
        Glide.with(context).load(path).into(imageView);
"
13727,setImageShowPickerDelRes,"    public int setImageShowPickerDelRes() {
        return resId;
    }"
13728,setImageShowPickerUrl,"    public String setImageShowPickerUrl() {
        return url;
    }"
13729,onClick,"            public void onClick(View v) {
                Intent intent = new Intent(HomeActivity.this,MainActivity.class);
                startActivity(intent);
            }"
13730,onClick,"            public void onClick(View v) {
                Intent intent = new Intent(HomeActivity.this,OnePickerActivity.class);
                startActivity(intent);
            }"
13731,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.home_ac);
        findViewById(R.id.one_picker).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {"
13732,getLexeme,"        public Lexeme getLexeme() {
            return this.lexeme;
        }"
13733,getNext,"        Cell getNext() {
            return this.next;
        }"
13734,getPrev,"        public Cell getPrev() {
            return this.prev;
        }"
13735,compareTo,"        public int compareTo(Cell o) {
            return this.lexeme.compareTo(o.lexeme);
        }"
13736,getHead,"    Cell getHead() {
        return this.head;
    }"
13737,isEmpty,"    boolean isEmpty() {
        return this.size == 0;
    }"
13738,size,"    int size() {
        return this.size;
    }"
13739,pollLast,"    Lexeme pollLast() {
        if (this.size == 1) {
            Lexeme last = this.head.lexeme;"
13740,peekLast,"    Lexeme peekLast() {
        if (this.tail != null) {
            return this.tail.lexeme;
        }"
13741,pollFirst,"    Lexeme pollFirst() {
        if (this.size == 1) {
            Lexeme first = this.head.lexeme;"
13742,peekFirst,"    Lexeme peekFirst() {
        if (this.head != null) {
            return this.head.lexeme;
        }"
13743,addLexeme,"    void addLexeme(Lexeme lexeme) {
        Cell newCell = new Cell(lexeme);
        if (this.size == 0) {
            this.head = newCell;"
13746,copy,"    LexemePath copy() {
        LexemePath theCopy = new LexemePath();
        theCopy.pathBegin = this.pathBegin;
        theCopy.pathEnd = this.pathEnd;
        theCopy.payloadLength = this.payloadLength;
        Cell c = this.getHead();
        while (c != null && c.getLexeme() != null) {
            theCopy.addLexeme(c.getLexeme());
            c = c.getNext();"
13747,getPWeight,"    private int getPWeight() {
        int pWeight = 0;
        int p = 0;
        Cell c = this.getHead();
        while (c != null && c.getLexeme() != null) {
            p++;
            pWeight += p * c.getLexeme().getLength();"
13748,getXWeight,"    private int getXWeight() {
        int product = 1;
        Cell c = this.getHead();
        while (c != null && c.getLexeme() != null) {
            product *= c.getLexeme().getLength();
            c = c.getNext();"
13749,getPathLength,"    private int getPathLength() {
        return this.pathEnd - this.pathBegin;
    }"
13750,getPayloadLength,"    int getPayloadLength() {
        return this.payloadLength;
    }"
13751,getPathEnd,"    int getPathEnd() {
        return pathEnd;
    }"
13752,getPathBegin,"    int getPathBegin() {
        return pathBegin;
    }"
13753,checkCross,"    boolean checkCross(Lexeme lexeme) {
        return (lexeme.getBegin() >= this.pathBegin && lexeme.getBegin() < this.pathEnd)
                || (this.pathBegin >= lexeme.getBegin() && this.pathBegin < lexeme.getBegin() + lexeme.getLength());"
13754,removeTail,"    void removeTail() {
        Lexeme tail = this.pollLast();
        if (this.isEmpty()) {
            this.pathBegin = -1;"
13755,addNotCrossLexeme,"    boolean addNotCrossLexeme(Lexeme lexeme) {
        if (this.isEmpty()) {
            this.addLexeme(lexeme);"
13756,addCrossLexeme,"    boolean addCrossLexeme(Lexeme lexeme) {
        if (this.isEmpty()) {
            this.addLexeme(lexeme);"
13757,toString,"    public String toString() {
        return this.getBeginPosition() + ""-"" + this.getEndPosition() +
                "" : "" + this.lexemeText + "" : \t"" +"
13758,append,"    boolean append(Lexeme l, int lexemeType) {
        if (l != null && this.getEndPosition() == l.getBeginPosition()) {
            this.length += l.getLength();"
13759,setLexemeType,"    public void setLexemeType(int lexemeType) {
        this.lexemeType = lexemeType;
    }"
13760,getLexemeTypeString,"    public String getLexemeTypeString() {
        switch (lexemeType) {
"
13761,getLexemeType,"    int getLexemeType() {
        return lexemeType;
    }"
13762,setLexemeText,"    void setLexemeText(String lexemeText) {
        if (lexemeText == null) {
            this.lexemeText = """";"
13763,getLexemeText,"    public String getLexemeText() {
        if (lexemeText == null) {
            return """";
        }"
13764,setLength,"    public void setLength(int length) {
        if (this.length < 0) {
            throw new IllegalArgumentException(""length < 0"");
        }"
13765,getLength,"    public int getLength() {
        return this.length;
    }"
13766,getEndPosition,"    public int getEndPosition() {
        return offset + begin + length;
    }"
13767,setBegin,"    public void setBegin(int begin) {
        this.begin = begin;
    }"
13768,getBeginPosition,"    public int getBeginPosition() {
        return offset + begin;
    }"
13769,getBegin,"    int getBegin() {
        return begin;
    }"
13771,getOffset,"    private int getOffset() {
        return offset;
    }"
13773,hashCode,"    public int hashCode() {
        int absBegin = getBeginPosition();
        int absEnd = getEndPosition();
        return (absBegin * 37) + (absEnd * 31) + ((absBegin * absEnd) % getLength()) * 11;
    }"
13774,equals,"    public boolean equals(Object o) {
        if (o == null) {
            return false;
        }
"
13775,isNumConnector,"    private boolean isNumConnector(char input) {
        int index = Arrays.binarySearch(Num_Connector, input);
        return index >= 0;
    }"
13776,isLetterConnector,"    private boolean isLetterConnector(char input) {
        int index = Arrays.binarySearch(Letter_Connector, input);
        return index >= 0;
    }"
13780,reset,"    public void reset() {
        this.start = -1;
        this.end = -1;
        this.englishStart = -1;
        this.englishEnd = -1;
        this.arabicStart = -1;
        this.arabicEnd = -1;
    }"
13784,reset,"    public synchronized void reset(Reader input) {
        this.input = input;
        context.reset();
        for (ISegmenter segmenter : segmenters) {
            segmenter.reset();"
13788,backPath,"    private void backPath(Lexeme l, LexemePath option) {
        while (option.checkCross(l)) {
            option.removeTail();"
13791,process,"    void process(AnalyzeContext context, boolean useSmart) {
        QuickSortSet orgLexemes = context.getOrgLexemes();
        Lexeme orgLexeme = orgLexemes.pollFirst();

        LexemePath crossPath = new LexemePath();
        while (orgLexeme != null) {
            if (!crossPath.addCrossLexeme(orgLexeme)) {"
13796,reset,"    public void reset() {
        nStart = -1;
        nEnd = -1;
        countHits.clear();
    }"
13800,regularize,"    static char regularize(char input) {
        if (input == 12288) {
            input = (char) 32;
"
13801,identifyCharType,"    static int identifyCharType(char input) {
        if (input >= '0' && input <= '9') {
            return CHAR_ARABIC;
"
13802,compound,"    private void compound(Lexeme result) {
        if (!this.cfg.useSmart()) {
            return;
        }"
13803,reset,"    void reset() {
        this.buffLocker.clear();
        this.orgLexemes = new QuickSortSet();
        this.available = 0;
        this.buffOffset = 0;
        this.charTypes = new int[BUFF_SIZE];
        this.cursor = 0;
        this.results.clear();
        this.segmentBuff = new char[BUFF_SIZE];
        this.pathMap.clear();
    }"
13805,outputSingleCJK,"    private void outputSingleCJK(int index) {
        if (CharacterUtil.CHAR_CHINESE == this.charTypes[index]) {
            Lexeme singleCharLexeme = new Lexeme(this.buffOffset, index, 1, Lexeme.TYPE_CNCHAR);"
13807,getOrgLexemes,"    QuickSortSet getOrgLexemes() {
        return this.orgLexemes;
    }"
13808,addLexemePath,"    void addLexemePath(LexemePath path) {
        if (path != null) {
            this.pathMap.put(path.getPathBegin(), path);"
13809,addLexeme,"    void addLexeme(Lexeme lexeme) {
        this.orgLexemes.addLexeme(lexeme);
    }"
13810,markBufferOffset,"    void markBufferOffset() {
        this.buffOffset += this.cursor;
    }"
13811,needRefillBuffer,"    boolean needRefillBuffer() {
        return this.available == BUFF_SIZE
                && this.cursor < this.available - 1"
13812,isBufferConsumed,"    boolean isBufferConsumed() {
        return this.cursor == this.available - 1;
    }"
13813,isBufferLocked,"    private boolean isBufferLocked() {
        return this.buffLocker.size() > 0;
    }"
13814,unlockBuffer,"    void unlockBuffer(String segmenterName) {
        this.buffLocker.remove(segmenterName);
    }"
13815,lockBuffer,"    void lockBuffer(String segmenterName) {
        this.buffLocker.add(segmenterName);
    }"
13816,moveCursor,"    boolean moveCursor() {
        if (this.cursor < this.available - 1) {
            this.cursor++;"
13817,initCursor,"    void initCursor() {
        this.cursor = 0;
        this.segmentBuff[this.cursor] = CharacterUtil.regularize(this.segmentBuff[this.cursor]);
        this.charTypes[this.cursor] = CharacterUtil.identifyCharType(this.segmentBuff[this.cursor]);
    }"
13819,getBufferOffset,"    int getBufferOffset() {
        return this.buffOffset;
    }"
13820,getCurrentCharType,"    int getCurrentCharType() {
        return this.charTypes[this.cursor];
    }"
13821,getCurrentChar,"    char getCurrentChar() {
        return this.segmentBuff[this.cursor];
    }"
13822,getSegmentBuff,"    char[] getSegmentBuff() {
        return this.segmentBuff;
    }"
13823,getCursor,"    int getCursor() {
        return this.cursor;
    }"
13824,nextElementWithin,"    public static boolean nextElementWithin(XmlPullParser parser, int outerDepth)
            throws IOException, XmlPullParserException {
        for (;;) {"
13825,nextElement,"    public static final void nextElement(XmlPullParser parser) throws XmlPullParserException, IOException
    {
        int type;
        while ((type=parser.next()) != parser.START_TAG"
13826,beginDocument,"    public static final void beginDocument(XmlPullParser parser, String firstElementName) throws XmlPullParserException, IOException
    {
        int type;
        while ((type=parser.next()) != parser.START_TAG
                && type != parser.END_DOCUMENT) {
            ;"
13828,readValueXml,"    public static final Object readValueXml(XmlPullParser parser, String[] name)
            throws XmlPullParserException, java.io.IOException
    {
        int eventType = parser.getEventType();
        do {"
13830,readThisSetXml,"    public static final HashSet readThisSetXml(XmlPullParser parser, String endTag, String[] name)
            throws XmlPullParserException, java.io.IOException {
        HashSet set = new HashSet();

        int eventType = parser.getEventType();
        do {"
13831,readThisListXml,"    public static final ArrayList readThisListXml(XmlPullParser parser, String endTag, String[] name)
            throws XmlPullParserException, java.io.IOException
    {
        ArrayList list = new ArrayList();
        int eventType = parser.getEventType();
        do {"
13832,readThisMapXml,"    public static final HashMap readThisMapXml(XmlPullParser parser, String endTag, String[] name)
            throws XmlPullParserException, java.io.IOException
    {
        HashMap map = new HashMap();
        int eventType = parser.getEventType();
        do {"
13833,readSetXml,"    public static final HashSet readSetXml(InputStream in)
            throws XmlPullParserException, java.io.IOException {
        XmlPullParser parser = Xml.newPullParser();
        parser.setInput(in, null);
        return (HashSet) readValueXml(parser, new String[1]);"
13834,readListXml,"    public static final ArrayList readListXml(InputStream in)
            throws XmlPullParserException, java.io.IOException
    {
        XmlPullParser   parser = Xml.newPullParser();
        parser.setInput(in, null);"
13835,readMapXml,"    public static final HashMap readMapXml(InputStream in)
            throws XmlPullParserException, java.io.IOException
    {
        XmlPullParser   parser = Xml.newPullParser();
        parser.setInput(in, null);"
13836,writeValueXml,"    public static final void writeValueXml(Object v, String name, XmlSerializer out)
            throws XmlPullParserException, java.io.IOException
    {
        String typeStr;
        if (v == null) {
            out.startTag(null, ""null"");
            if (name != null) {
                out.attribute(null, ""name"", name);"
13837,writeIntArrayXml,"    public static final void writeIntArrayXml(int[] val, String name,
                                              XmlSerializer out)
            throws XmlPullParserException, java.io.IOException {
        if (val == null) {
            out.startTag(null, ""null"");
            out.endTag(null, ""null"");
            return;
        }
        out.startTag(null, ""int-array"");"
13839,writeSetXml,"    public static final void writeSetXml(Set val, String name, XmlSerializer out)
            throws XmlPullParserException, java.io.IOException {
        if (val == null) {
            out.startTag(null, ""null"");
            out.endTag(null, ""null"");
            return;
        }"
13840,writeListXml,"    public static final void writeListXml(List val, String name, XmlSerializer out)
            throws XmlPullParserException, java.io.IOException
    {
        if (val == null) {
            out.startTag(null, ""null"");
            out.endTag(null, ""null"");
            return;
        }
        out.startTag(null, ""list"");"
13841,writeMapXml,"    public static final void writeMapXml(Map val, String name, XmlSerializer out)
            throws XmlPullParserException, java.io.IOException
    {
        if (val == null) {
            out.startTag(null, ""null"");
            out.endTag(null, ""null"");
            return;
        }
        Set s = val.entrySet();"
13844,parseUnsignedIntAttribute,"    public static final int
    parseUnsignedIntAttribute(CharSequence charSeq)
    {
        String  value = charSeq.toString();
        long    bits;
        int     index = 0;
        int     len = value.length();
        int     base = 10;
        if ('0' == value.charAt(index)) {"
13845,convertValueToUnsignedInt,"    public static final int
    convertValueToUnsignedInt(String value, int defaultValue)
    {
        if (null == value)"
13847,convertValueToBoolean,"    public static final boolean
    convertValueToBoolean(CharSequence value, boolean defaultValue)
    {
        boolean result = false;
        if (null == value)
            return defaultValue;"
13848,convertValueToList,"    public static final int
    convertValueToList(CharSequence value, String[] options, int defaultValue)
    {
        if (null != value) {"
13849,skipCurrentTag,"    public static void skipCurrentTag(XmlPullParser parser)
            throws XmlPullParserException, IOException {
        int outerDepth = parser.getDepth();
        int type;
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT"
13850,getTextProportion,"        public float getTextProportion() {
            return mTextProportion;
        }"
13851,getTextSize,"        public int getTextSize() {
            return mTextSize;
        }"
13852,skippedEntity,"    public void skippedEntity(String name) throws SAXException {
    }"
13853,processingInstruction,"    public void processingInstruction(String target, String data) throws SAXException {
    }"
13854,ignorableWhitespace,"    public void ignorableWhitespace(char ch[], int start, int length) throws SAXException {
    }"
13855,characters,"    public void characters(char ch[], int start, int length) throws SAXException {
        StringBuilder sb = new StringBuilder();
        /*
         * Ignore whitespace that immediately follows other whitespace;
         * newlines count as spaces."
13856,endElement,"    public void endElement(String uri, String localName, String qName) throws SAXException {
        handleEndTag(localName);
    }"
13857,startElement,"    public void startElement(String uri, String localName, String qName, Attributes attributes)
            throws SAXException {
        handleStartTag(localName, attributes);"
13858,endPrefixMapping,"    public void endPrefixMapping(String prefix) throws SAXException {
    }"
13859,startPrefixMapping,"    public void startPrefixMapping(String prefix, String uri) throws SAXException {
    }"
13860,endDocument,"    public void endDocument() throws SAXException {
    }"
13861,startDocument,"    public void startDocument() throws SAXException {
    }"
13862,setDocumentLocator,"    public void setDocumentLocator(Locator locator) {
    }"
13863,getHtmlColor,"    private int getHtmlColor(String color) {
        if ((mFlags & HtmlCompat.FROM_HTML_OPTION_USE_CSS_COLORS)
                == HtmlCompat.FROM_HTML_OPTION_USE_CSS_COLORS) {
            Integer i = sColorMap.get(color.toLowerCase(Locale.US));"
13864,endA,"    private void endA(String tag, Editable text) {
        Href h = getLast(text, Href.class);
        if (h != null) {
            if (h.mHref != null) {"
13865,startA,"    private void startA(Editable text, Attributes attributes) {
        String href = attributes.getValue("""", ""href"");
        start(text, new Href(href));
    }"
13866,endFont,"    private void endFont(String tag, Editable text) {
        Font font = getLast(text, Font.class);
        if (font != null) {
            setSpanFromMark(tag, text, font, new TypefaceSpan(font.mFace));
        }
        Foreground foreground = getLast(text, Foreground.class);"
13867,startFont,"    private void startFont(Editable text, Attributes attributes) {
        String color = attributes.getValue("""", ""color"");
        String face = attributes.getValue("""", ""face"");
        if (!TextUtils.isEmpty(color)) {
            int c = getHtmlColor(color);
            if (c != -1) {"
13868,startImg,"    private void startImg(Editable text, Attributes attributes, HtmlCompat.ImageGetter img) {
        String src = attributes.getValue("""", ""src"");
        Drawable d = null;
        if (img != null) {
            d = img.getDrawable(src, attributes);
        }
        if (d == null) {
            Resources res = mContext.getResources();
            d = res.getDrawable(R.drawable.unknown_image);"
13870,startCssStyle,"    private void startCssStyle(Editable text, Attributes attributes) {
        String style = attributes.getValue("""", ""style"");
        if (style != null) {
            Matcher m = getForegroundColorPattern().matcher(style);"
13871,end,"    private void end(String tag, Editable text, Class kind, Object repl) {
        Object obj = getLast(text, kind);
        if (obj != null) {
            setSpanFromMark(tag, text, obj, repl);"
13872,start,"    private void start(Editable text, Object mark) {
        int len = text.length();
        text.setSpan(mark, len, len, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
    }"
13873,setSpanFromMark,"    private void setSpanFromMark(String tag, Spannable text, Object mark, Object... spans) {
        int where = text.getSpanStart(mark);
        text.removeSpan(mark);
        int len = text.length();
        if (where != len) {
            for (Object span : spans) {"
13874,getLast,"    private <T> T getLast(Spanned text, Class<T> kind) {
        /*
         * This knows that the last returned object from getSpans()
         * will be the most recently added."
13876,startHeading,"    private void startHeading(Editable text, Attributes attributes, int level) {
        startBlockElement(text, attributes, getMarginHeading());
        start(text, new Heading(level));
    }"
13877,endBlockquote,"    private void endBlockquote(String tag, Editable text) {
        endBlockElement(tag, text);
        end(tag, text, Blockquote.class, new QuoteSpan());
    }"
13878,startBlockquote,"    private void startBlockquote(Editable text, Attributes attributes) {
        startBlockElement(text, attributes, getMarginBlockquote());
        start(text, new Blockquote());
    }"
13879,endLi,"    private void endLi(String tag, Editable text) {
        endCssStyle(tag, text);
        endBlockElement(tag, text);
        end(tag, text, Bullet.class, new BulletSpan());
    }"
13880,startLi,"    private void startLi(Editable text, Attributes attributes) {
        startBlockElement(text, attributes, getMarginListItem());
        start(text, new Bullet());
        startCssStyle(text, attributes);
    }"
13881,handleBr,"    private void handleBr(Editable text) {
        text.append('\n');
    }"
13882,endBlockElement,"    private void endBlockElement(String tag, Editable text) {
        Newline n = getLast(text, Newline.class);
        if (n != null) {
            appendNewlines(text, n.mNumNewlines);
            text.removeSpan(n);
        }"
13883,startBlockElement,"    private void startBlockElement(Editable text, Attributes attributes, int margin) {
        if (margin > 0) {
            appendNewlines(text, margin);
            start(text, new Newline(margin));
        }"
13884,appendNewlines,"    private void appendNewlines(Editable text, int minNewline) {
        final int len = text.length();
        if (len == 0) {
            return;
        }
        int existingNewlines = 0;
        for (int i = len - 1; i >= 0 && text.charAt(i) == '\n'; i--) {"
13885,getMargin,"    private int getMargin(int flag) {
        if ((flag & mFlags) != 0) {
            return 1;
        }"
13886,getMarginBlockquote,"    private int getMarginBlockquote() {
        return getMargin(HtmlCompat.FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE);
    }"
13887,getMarginDiv,"    private int getMarginDiv() {
        return getMargin(HtmlCompat.FROM_HTML_SEPARATOR_LINE_BREAK_DIV);
    }"
13888,getMarginList,"    private int getMarginList() {
        return getMargin(HtmlCompat.FROM_HTML_SEPARATOR_LINE_BREAK_LIST);
    }"
13889,getMarginListItem,"    private int getMarginListItem() {
        return getMargin(HtmlCompat.FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM);
    }"
13890,getMarginHeading,"    private int getMarginHeading() {
        return getMargin(HtmlCompat.FROM_HTML_SEPARATOR_LINE_BREAK_HEADING);
    }"
13891,getMarginParagraph,"    private int getMarginParagraph() {
        return getMargin(HtmlCompat.FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH);
    }"
13892,handleEndTag,"    private void handleEndTag(String tag) {
        if (tag.equalsIgnoreCase(""br"")) {
            handleBr(mSpannableStringBuilder);"
13895,getFontSizePattern,"    private static Pattern getFontSizePattern() {
        if (sTextFontSizePattern == null) {
            sTextFontSizePattern = Pattern.compile(
                    ""(?:\\s+|\\A)font-size\\s*:\\s*(\\S*)\\b"");"
13896,getTextDecorationPattern,"    private static Pattern getTextDecorationPattern() {
        if (sTextDecorationPattern == null) {
            sTextDecorationPattern = Pattern.compile(
                    ""(?:\\s+|\\A)text-decoration\\s*:\\s*(\\S*)\\b"");"
13897,getBackgroundColorPattern,"    private static Pattern getBackgroundColorPattern() {
        if (sBackgroundColorPattern == null) {
            sBackgroundColorPattern = Pattern.compile(
                    ""(?:\\s+|\\A)background(?:-color)?\\s*:\\s*(\\S*)\\b"");"
13898,getForegroundColorPattern,"    private static Pattern getForegroundColorPattern() {
        if (sForegroundColorPattern == null) {
            sForegroundColorPattern = Pattern.compile(
                    ""(?:\\s+|\\A)color\\s*:\\s*(\\S*)\\b"");"
13899,getTextAlignPattern,"    private static Pattern getTextAlignPattern() {
        if (sTextAlignPattern == null) {
            sTextAlignPattern = Pattern.compile(""(?:\\s+|\\A)text-align\\s*:\\s*(\\S*)\\b"");
        }"
13900,withinStyle,"    private static void withinStyle(StringBuilder out, CharSequence text,
                                    int start, int end) {
        for (int i = start; i < end; i++) {"
13901,withinParagraph,"    private static void withinParagraph(Context context, StringBuilder out, Spanned text, int start, int end) {
        int next;
        for (int i = start; i < end; i = next) {
            next = text.nextSpanTransition(i, end, CharacterStyle.class);"
13902,withinBlockquoteConsecutive,"    private static void withinBlockquoteConsecutive(Context context, StringBuilder out, Spanned text,
                                                    int start, int end) {
        out.append(""<p"").append(getTextDirection(text, start, end)).append("">"");
        int next;
        for (int i = start; i < end; i = next) {
            next = TextUtils.indexOf(text, '\n', i, end);"
13903,withinBlockquoteIndividual,"    private static void withinBlockquoteIndividual(Context context, StringBuilder out, Spanned text,
                                                   int start, int end) {
        boolean isInList = false;
        int next;
        for (int i = start; i <= end; i = next) {"
13904,withinBlockquote,"    private static void withinBlockquote(Context context, StringBuilder out, Spanned text,
                                         int start, int end, int option) {
        if ((option & TO_HTML_PARAGRAPH_FLAG) == TO_HTML_PARAGRAPH_LINES_CONSECUTIVE) {"
13907,withinDiv,"    private static void withinDiv(Context context, StringBuilder out, Spanned text,
                                  int start, int end, int option) {
        int next;
        for (int i = start; i < end; i = next) {"
13908,encodeTextAlignmentByDiv,"    private static void encodeTextAlignmentByDiv(Context context, StringBuilder out, Spanned text, int option) {
        int len = text.length();
        int next;
        for (int i = 0; i < len; i = next) {
            next = text.nextSpanTransition(i, len, ParagraphStyle.class);"
13909,withinHtml,"    private static void withinHtml(Context context, StringBuilder out, Spanned text, int option) {
        if ((option & TO_HTML_PARAGRAPH_FLAG) == TO_HTML_PARAGRAPH_LINES_CONSECUTIVE) {
            encodeTextAlignmentByDiv(context, out, text, option);
            return;"
13910,escapeHtml,"    public static String escapeHtml(CharSequence text) {
        StringBuilder out = new StringBuilder();
        withinStyle(out, text, 0, text.length());
        return out.toString();
    }"
13911,toHtml,"    public static String toHtml(Context context, Spanned text, int option) {
        StringBuilder out = new StringBuilder();
        withinHtml(context, out, text, option);
        return out.toString();
    }"
13912,fromHtml,"    public static Spanned fromHtml(@NonNull Context context, @NonNull String source, int flags,
                                   @Nullable ImageGetter imageGetter, @Nullable TagHandler tagHandler,
                                   @Nullable SpanCallback spanCallback) {
        if (source == null) {
            return null;
        }
        Parser parser = new Parser();"
13913,fromHtml,"    public static Spanned fromHtml(@NonNull Context context, @NonNull String source, int flags,
                                   @Nullable ImageGetter imageGetter, @Nullable TagHandler tagHandler) {
        return fromHtml(context, source, flags, imageGetter, tagHandler, null);"
13914,fromHtml,"    public static Spanned fromHtml(@NonNull Context context, @NonNull String source, int flags,
                                   @Nullable ImageGetter imageGetter) {
        return fromHtml(context, source, flags, imageGetter, null, null);"
13915,fromHtml,"    public static Spanned fromHtml(@NonNull Context context, @NonNull String source, int flags) {
        return fromHtml(context, source, flags, null, null);
    }"
13916,onClick,"        public void onClick(View widget) {
            try {
                super.onClick(widget);"
13917,onSpanCreated,"        Object onSpanCreated(String tag, Object span);
    }"
13918,handleTag,"        void handleTag(boolean opening, String tag,
                       Attributes attributes, Editable output, XMLReader xmlReader);"
13919,getDrawable,"        Drawable getDrawable(String source, Attributes attributes);
    }"
13920,getHtmlColor,"    public static int getHtmlColor(String color) {
        Integer i = sColorNameMap.get(color.toLowerCase(Locale.ROOT));
        if (i != null) {
            return i;"
13923,makeStream,"    public Stream<String> makeStream() {
        return Stream.of(
            ""timestamp, consumption"","
13925,getMetaInfo,"    public ValueList getMetaInfo() {
        return stream.getMeta();
    }"
13926,getInputStream,"    public <K> MetaStream<K> getInputStream() {
        return (MetaStream<K>)stream;
    }"
13927,getSensorParams,"    public SensorParams getSensorParams() {
        return params;
    }"
13928,create,"    public static Sensor<URI> create(SensorParams p) {
        URISensor sensor = new URISensor(p);
        return sensor;
    }"
13929,getDistribution,"    private int[][] getDistribution() {
        return new int[][] {
            { 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1 },"
13932,testNext_withException,"    public void testNext_withException() {
        UniversalRandom ur = new UniversalRandom(42);
        try {
            ur.nextInt(-1);"
13933,testNextX,"    public void testNextX() {
        UniversalRandom ur1 = new UniversalRandom(42);
        UniversalRandom ur2 = new UniversalRandom(42);
        assertEquals(ur1.nextX(31), ur2.next(31));
    }"
13934,testMain,"    public void testMain() {
        PrintStream out = System.out;
        
        ByteArrayOutputStream baos = null;
        PrintStream ps = new PrintStream(baos = new ByteArrayOutputStream());
        System.setOut(ps);
        
        UniversalRandom.main(null);
        
        System.setOut(out);
        
        String output = baos.toString();
        String[] lines = output.split(System.lineSeparator());"
13937,make,"    public T make(int... args);
    public Class<T> typeClass();"
13938,testCompareAttemptThrowsException,"    public void testCompareAttemptThrowsException() {
        Tuple t1 = new Tuple(""1"", new Double(1));
        Tuple t2 = new Tuple(""2"", new Double(1));
        try {
            t1.compareTo(t2);"
13939,testCompare,"    public void testCompare() {
        Comparator<Tuple> comp = (tOne, tTwo) -> ((String)tOne.get(0)).compareTo((String)tTwo.get(0));
        Tuple t1 = new Tuple(comp, ""1"", new Double(1));
        Tuple t2 = new Tuple(comp, ""2"", new Double(1));
        
        assertEquals(-1, t1.compareTo(t2));
        assertNotEquals(1, t1.compareTo(t2));"
13941,compareTo,"    public int compareTo(Tuple t) {
        if(comparator == null) {
            throw new IllegalStateException(""Tuples used for comparison should be "" +
                ""instantiated using the constructor taking a Comparator"");"
13942,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Tuple other = (Tuple) obj;"
13943,hashCode,"	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Arrays.hashCode(container);
		return result;
	}"
13944,toString,"	public String toString() {
		StringBuilder sb = new StringBuilder();
		for(int i = 0;i < container.length;i++) {
			try {
				new Double((double) container[i]);
				sb.append(container[i]);"
13945,all,"	public  List<Object> all() {
	    return Collections.unmodifiableList(Arrays.asList(container));
	}"
13946,size,"	public int size() {
	    return container.length;
	}"
13947,get,"	public Object get(int index) {
		return container[index];
	}"
13948,remake,"	protected void remake(Object...objects) {
	    container = new Object[objects.length];
        for(int i = 0;i < objects.length;i++) container[i] = objects[i];
        this.hashcode = hashCode();
	}"
13949,prettyPrintDatum,"    public String prettyPrintDatum(Object datum) {
        return datum.toString();
    }"
13950,prettyPrintTitle,"    public String prettyPrintTitle() {
        return monitor.mmGetName() != null ? 
            String.format(""[%s] %1s"", monitor.mmGetName(), title) :"
13953,testWrappingNeighborhoodOfEnd2D,"    public void testWrappingNeighborhoodOfEnd2D() {
        Topology t = new Topology(100, 80);
        int radius = 1;
        int[][] expected = {{98, 78}, {98, 79}, {98, 0},
                            {99, 78}, {99, 79}, {99, 0},
                            {0, 78}, {0, 79}, {0, 0}};"
13954,testWrappingNeighborhoodOfMiddle2D,"    public void testWrappingNeighborhoodOfMiddle2D() {
        Topology t = new Topology(100, 80);
        int radius = 1;
        int[][] expected = {{49, 49}, {49, 50}, {49, 51},
                            {50, 49}, {50, 50}, {50, 51},
                            {51, 49}, {51, 50}, {51, 51}};"
13955,testWrappingNeighborhoodInMiddle1D,"    public void testWrappingNeighborhoodInMiddle1D() {
        Topology t = new Topology(100);
        int radius = 1;
        int[] expected = { 49, 50, 51 };
        expectWrappingNeighborhoodIndices(t, new int[] { 50 }, radius, expected);
    }"
13956,testWrappingNeighborhoodOfOrigin3D,"    public void testWrappingNeighborhoodOfOrigin3D() {
        Topology t = new Topology(100, 80, 60);
        int radius = 1;
        int[][] expected = {{99, 79, 59}, {99, 79, 0}, {99, 79, 1},
                            {99, 0, 59}, {99, 0, 0}, {99, 0, 1},
                            {99, 1, 59}, {99, 1, 0}, {99, 1, 1},"
13957,testWrappingNeighborhoodOfOrigin2D,"    public void testWrappingNeighborhoodOfOrigin2D() {
        Topology t = new Topology(100, 80);
        int radius = 1;
        int[][] expected = {{ 99, 79 }, { 99, 0 }, { 99, 1 },
                          { 0, 79 }, { 0, 0 }, { 0, 1 },
                          { 1, 79 }, { 1, 0 }, { 1, 1 }};"
13958,testWrappingNeighborhoodOfOrigin1D,"    public void testWrappingNeighborhoodOfOrigin1D() {
        Topology t = new Topology(100);
        int radius = 1;
        int[] expected = { 99, 0, 1 };
        expectWrappingNeighborhoodIndices(t, new int[] { 0 }, radius, expected);
    }"
13959,expectWrappingNeighborhoodCoords,"    private void expectWrappingNeighborhoodCoords(Topology t, int[] centerCoords, int radius, int[]... expected) {
        int centerIndex = t.indexFromCoordinates(centerCoords);
        
        int numIndices = 0;
        
        int index = 0;
        for(int actual : t.wrappingNeighborhood(centerIndex, radius)) {"
13960,expectWrappingNeighborhoodIndices,"    private void expectWrappingNeighborhoodIndices(Topology t, int[] centerCoords, int radius, int[] expected) {
        int centerIndex = t.indexFromCoordinates(centerCoords);
        
        int numIndices = 0;
        int index = 0;
        for(int actual : t.wrappingNeighborhood(centerIndex, radius)) {
            numIndices++;"
13963,testNeighborhoodWiderThanWorld,"    public void testNeighborhoodWiderThanWorld() {
        Topology t = new Topology(3, 2);
        int radius = 3;
        int[][] expected = 
            {{ 0, 0 }, { 0, 1 },
             { 1, 0 }, { 1, 1 },"
13964,testNeighborhoodOfEnd2D,"    public void testNeighborhoodOfEnd2D() {
        Topology t = new Topology(100, 80);
        int radius = 2;
        int[][] expected = 
            {{ 97, 77 }, { 97, 78 }, { 97, 79 },
             { 98, 77 }, { 98, 78 }, { 98, 79 },"
13965,testNeighborhoodOfMiddle2D,"    public void testNeighborhoodOfMiddle2D() {
        Topology t = new Topology(100, 80);
        int radius = 1;
        int[][] expected = 
            {{ 49, 49 }, { 49, 50 }, { 49, 51 },
             { 50, 49 }, { 50, 50 }, { 50, 51 },"
13966,testNeighborhoodInMiddle1D,"    public void testNeighborhoodInMiddle1D() {
        Topology t = new Topology(100);
        int radius = 1;
        int[] expected = 
            { 49, 50, 51};
        expectNeighborhoodIndices(t, new int[] { 50 }, radius, expected);"
13967,testNeighborhoodOfOrigin3D,"    public void testNeighborhoodOfOrigin3D() {
        Topology t = new Topology(100, 80, 60);
        int radius = 1;
        int[][] expected = 
            {{ 0, 0, 0 }, { 0, 0, 1 },
            { 0, 1, 0 }, { 0, 1, 1 },"
13968,testNeighborhoodOfOrigin2D,"    public void testNeighborhoodOfOrigin2D() {
        Topology t = new Topology(100, 80);
        int radius = 2;
        int[][] expected = 
            {{ 0, 0 }, { 0, 1 }, { 0, 2 },
            {1, 0 }, { 1, 1 }, { 1, 2 },"
13969,testNeighborhoodOfOrigin1D,"    public void testNeighborhoodOfOrigin1D() {
        Topology t = new Topology(100);
        int radius = 2;
        int[] expected = { 0, 1, 2 };
        expectNeighborhoodIndices(t, new int[] { 0 }, radius, expected);
    }"
13970,expectNeighborhoodCoords,"    private void expectNeighborhoodCoords(Topology t, int[] centerCoords, int radius, int[]... expected) {
        int centerIndex = t.indexFromCoordinates(centerCoords);
        
        int numIndices = 0;
        
        int index = 0;
        for(int actual : t.neighborhood(centerIndex, radius)) {"
13971,expectNeighborhoodIndices,"    private void expectNeighborhoodIndices(Topology t, int[] centerCoords, int radius, int[] expected) {
        int centerIndex = t.indexFromCoordinates(centerCoords);
        
        int numIndices = 0;
        int index = 0;
        for(int actual : t.neighborhood(centerIndex, radius)) {
            numIndices++;"
13977,resetSequences,"    default void resetSequences(Connections c) {
        getMonitor().reset(c);
        
        setResetActive(true);"
13981,mmPrettyPrintConnections,"    default String mmPrettyPrintConnections() {
        StringBuilder text = new StringBuilder();
        
        text.append(""Segments: (format => (#) [(source cell=permanence ...),       ...]\n"")
        .append(""------------------------------------\n"");
        
        Connections cnx = getConnections();
        
        List<Integer> columns = Arrays.asList("
13982,mmGetMetricSequencesPredictedActiveCellsShared,"    default Metric mmGetMetricSequencesPredictedActiveCellsShared() {
        mmComputeTransitionTraces();
        
        Map<Integer, Integer> numSequencesForCell = new HashMap<>();
        
        for(Map.Entry<String, Set<Integer>> m : ((Map<String, Set<Integer>>)getDataMap().get(""predictedActiveCellsForSequence"")).entrySet()) {"
13983,mmGetMetricSequencesPredictedActiveCellsPerColumn,"    default Metric mmGetMetricSequencesPredictedActiveCellsPerColumn() {
        mmComputeTransitionTraces();
        
        List<Integer> numCellsPerColumn = new ArrayList<>();
        for(Map.Entry<String, Set<Integer>> m : 
            ((Map<String, Set<Integer>>)getDataMap().get(""predictedActiveCellsForSequence"")).entrySet()) {"
13984,mmGetMetricFromTrace,"    default Metric mmGetMetricFromTrace(IndicesTrace trace) {
        List<LinkedHashSet<Integer>> data = null;
        BoolsTrace excludeResets = mmGetTraceResets();
        if(excludeResets != null) {
            int[] i = { 0 };
            data = trace.items.stream().filter(t -> !excludeResets.items.get(i[0]++)).collect(Collectors.toList());
        }
        "
13985,mmGetMetricFromTrace,"    default Metric mmGetMetricFromTrace(Trace<Number> trace) {
        return Metric.createFromTrace(trace, mmGetTraceResets());
    }"
13986,mmGetTraceUnpredictedActiveColumns,"    default IndicesTrace mmGetTraceUnpredictedActiveColumns() {
        mmComputeTransitionTraces();
        return (IndicesTrace)getTraceMap().get(""unpredictedActiveColumns"");
    }"
13987,mmGetTracePredictedInactiveColumns,"    default IndicesTrace mmGetTracePredictedInactiveColumns() {
        mmComputeTransitionTraces();
        return (IndicesTrace)getTraceMap().get(""predictedInactiveColumns"");
    }"
13988,mmGetTracePredictedActiveColumns,"    default IndicesTrace mmGetTracePredictedActiveColumns() {
        mmComputeTransitionTraces();
        return (IndicesTrace)getTraceMap().get(""predictedActiveColumns"");
    }"
13989,mmGetTracePredictedInactiveCells,"    default IndicesTrace mmGetTracePredictedInactiveCells() {
        mmComputeTransitionTraces();
        return (IndicesTrace)getTraceMap().get(""predictedInactiveCells"");
    }"
13990,mmGetTracePredictedActiveCells,"    default IndicesTrace mmGetTracePredictedActiveCells() {
        mmComputeTransitionTraces();
        return (IndicesTrace)getTraceMap().get(""predictedActiveCells"");
    }"
13991,mmGetTraceResets,"    default BoolsTrace mmGetTraceResets() {
        return (BoolsTrace)getTraceMap().get(""resets"");
    }"
13992,mmGetTraceSequenceLabels,"    default StringsTrace mmGetTraceSequenceLabels() {
        return (StringsTrace)getTraceMap().get(""sequenceLabels"");
    }"
13993,mmGetTraceNumSynapses,"    default CountsTrace mmGetTraceNumSynapses() {
        return (CountsTrace)getTraceMap().get(""numSynapses"");
    }"
13994,mmGetTraceNumSegments,"    default CountsTrace mmGetTraceNumSegments() {
        return (CountsTrace)getTraceMap().get(""numSegments"");
    }"
13995,mmGetTracePredictiveCells,"    default IndicesTrace mmGetTracePredictiveCells() {
        return (IndicesTrace)getTraceMap().get(""predictiveCells"");
    }"
13996,mmGetTraceActiveColumns,"    default IndicesTrace mmGetTraceActiveColumns() {
        return (IndicesTrace)getTraceMap().get(""activeColumns"");
    }"
13997,setTransitionTracesStale,"    public void setTransitionTracesStale(boolean b);
    "
13998,transitionTracesStale,"    public boolean transitionTracesStale();
    "
13999,setResetActive,"    public void setResetActive(boolean b);
    "
14001,getMonitor,"    public ComputeDecorator getMonitor();
    "
14002,measureAvgCompute_7_Times,"    public ComputeCycle measureAvgCompute_7_Times(Blackhole bh) throws InterruptedException {
        ComputeCycle cc = null;
        for(int i = 0;i < 7;i++) {
            cc = temporalMemory.compute(memory, SDRs[i], true);
        }"
14004,isNotNone,"        public boolean isNotNone(int memberIndex) {
            return !((List<?>)t.get(memberIndex)).get(0).equals(NONE);
        }"
14005,set,"        public ColumnData set(Tuple t) { this.t = t; return this; }
        
        /**
         * Returns a boolean flag indicating whether the slot contained by the"
14006,matchingSegments,"        public List<DistalDendrite> matchingSegments() {
            return ((List<?>)t.get(3)).get(0).equals(Slot.empty()) ? 
                Collections.emptyList() :"
14007,activeSegments,"        public List<DistalDendrite> activeSegments() { 
            return ((List<?>)t.get(2)).get(0).equals(Slot.empty()) ? 
                Collections.emptyList() :"
14008,activeColumns,"        public List<Column> activeColumns() { return (List<Column>)t.get(1); }
        public List<DistalDendrite> activeSegments() { 
            return ((List<?>)t.get(2)).get(0).equals(Slot.empty()) ? "
14009,column,"        public Column column() { return (Column)t.get(0); }
        public List<Column> activeColumns() { return (List<Column>)t.get(1); }
        public List<DistalDendrite> activeSegments() { "
14011,growSynapses,"    public void growSynapses(Connections conn, Set<Cell> prevWinnerCells, DistalDendrite segment, 
        double initialPermanence, int nDesiredNewSynapses, Random random) {
        
        List<Cell> candidates = new ArrayList<>(prevWinnerCells);
        Collections.sort(candidates);
        
        for(Synapse synapse : conn.getSynapses(segment)) {
            Cell presynapticCell = synapse.getPresynapticCell();"
14012,leastUsedCell,"    public Cell leastUsedCell(Connections conn, List<Cell> cells, Random random) {
        List<Cell> leastUsedCells = new ArrayList<>();
        int minNumSegments = Integer.MAX_VALUE;
        for(Cell cell : cells) {
            int numSegments = conn.numSegments(cell);
            
            if(numSegments < minNumSegments) {"
14013,punishPredictedColumn,"    public void punishPredictedColumn(Connections conn, List<DistalDendrite> activeSegments, 
        List<DistalDendrite> matchingSegments, Set<Cell> prevActiveCells, Set<Cell> prevWinnerCells,
           double predictedSegmentDecrement) {"
14014,burstColumn,"    public Tuple burstColumn(Connections conn, Column column, List<DistalDendrite> matchingSegments, 
        Set<Cell> prevActiveCells, Set<Cell> prevWinnerCells, double permanenceIncrement, double permanenceDecrement, 
            Random random, boolean learn) {
        
        List<Cell> cells = column.getCells();
        Cell bestCell = null;"
14015,activatePredictedColumn,"	public List<Cell> activatePredictedColumn(Connections conn, List<DistalDendrite> activeSegments,
	    List<DistalDendrite> matchingSegments, Set<Cell> prevActiveCells, Set<Cell> prevWinnerCells,
	        double permanenceIncrement, double permanenceDecrement, boolean learn) {
	    
	    List<Cell> cellsToAdd = new ArrayList<>();
        Cell previousCell = null;
        Cell currCell;"
14016,reset,"    public void reset(Connections connections) {
        connections.getActiveCells().clear();
        connections.getWinnerCells().clear();
        connections.getActiveSegments().clear();
        connections.getMatchingSegments().clear();
    }"
14019,compute,"	public ComputeCycle compute(Connections connections, int[] activeColumns, boolean learn) {
	    ComputeCycle cycle = new ComputeCycle();
		activateCells(connections, cycle, activeColumns, learn);
		activateDendrites(connections, cycle, learn);
		
		return cycle;"
14022,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        Synapse other = (Synapse)obj;
        if(inputIndex != other.inputIndex)
            return false;
        if(segment == null) {
            if(other.segment != null)"
14023,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + inputIndex;
        result = prime * result + ((segment == null) ? 0 : segment.hashCode());
        result = prime * result + ((sourceCell == null) ? 0 : sourceCell.hashCode());
        result = prime * result + synapseIndex;
        return result;
    }"
14024,compareTo,"    public int compareTo(Synapse arg0) {
        return boxedIndex.compareTo(arg0.boxedIndex);
    }"
14025,toString,"    public String toString() {
        StringBuilder sb = new StringBuilder(""synapse: [ synIdx="").append(synapseIndex).append("", inIdx="")
            .append(inputIndex).append("", sgmtIdx="").append(segment.getIndex());
        if(sourceCell != null) {
            sb.append("", srcCellIdx="").append(sourceCell.getIndex());
        }"
14026,setDestroyed,"    public void setDestroyed(boolean b) {
        this.destroyed = b;
    }"
14027,destroyed,"    public boolean destroyed() {
        return destroyed;
    }"
14028,getPresynapticCell,"    public Cell getPresynapticCell() {
        return sourceCell;
    }"
14029,setPresynapticCell,"    public void setPresynapticCell(Cell cell) {
        this.sourceCell = cell;
    }"
14030,getSegment,"    public Segment getSegment() {
        return segment;
    }"
14032,getPermanence,"    public double getPermanence() {
        return permanence;
    }"
14033,getInputIndex,"    public int getInputIndex() {
        return inputIndex;
    }"
14034,getIndex,"    public int getIndex() {
        return synapseIndex;
    }"
14035,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        Statistic other = (Statistic)obj;
        if(Double.doubleToLongBits(mean) != Double.doubleToLongBits(other.mean))
            return false;"
14036,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = 1;
        long temp = Double.doubleToLongBits(mean);
        result = prime * result + (int)(temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(stdev);
        result = prime * result + (int)(temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(variance);
        result = prime * result + (int)(temp ^ (temp >>> 32));
        return result;
    }"
14042,eval,"            public boolean eval(double d) {
                return d > 0;
            }"
14045,eval,"                    public boolean eval(double d) {
                        return d < maxThresh;
                    }"
14046,eval,"                    public boolean eval(double d) {
                        return d >= minThresh;
                    }"
14052,eval,"            public boolean eval(int n) {
                return n == 1;
            }"
14061,avgColumnsPerInput,"            public double avgColumnsPerInput(Connections c) {
                return 2;
            }"
14062,avgConnectedSpanForColumnND,"            public double avgConnectedSpanForColumnND(Connections c, int columnIndex) {
                return 2.4;
            }"
14063,avgColumnsPerInput,"            public double avgColumnsPerInput(Connections c) {
                return 1.2;
            }"
14064,avgConnectedSpanForColumnND,"            public double avgConnectedSpanForColumnND(Connections c, int columnIndex) {
                return 0.5;
            }"
14065,avgColumnsPerInput,"            public double avgColumnsPerInput(Connections c) {
                return 4;
            }"
14066,avgConnectedSpanForColumnND,"            public double avgConnectedSpanForColumnND(Connections c, int columnIndex) {
                return 3;
            }"
14069,inhibitColumnsLocal,"            @Override public int[] inhibitColumnsLocal(Connections c, double[] overlap, double density) {
                setLocalCalled(true);
                _density = density;
                return new int[] { 2 };
            }"
14070,inhibitColumnsGlobal,"            @Override public int[] inhibitColumnsGlobal(Connections c, double[] overlap, double density) {
                setGlobalCalled(true);
                _density = density;
                return new int[] { 1 };
            }"
14072,setLocalCalled,"    public void setLocalCalled(boolean b) {
        this.localCalled = b;
    }"
14073,setGlobalCalled,"    public void setGlobalCalled(boolean b) {
        this.globalCalled = b;
    }"
14074,reset,"    public void reset() {
        this.globalCalled = false;
        this.localCalled = false;
        this._density = 0;
    }"
14080,eval,"            public boolean eval(int n) {
                return n > 0;
            }"
14087,inhibitColumns,"            public int[] inhibitColumns(Connections c, double[] overlaps) {
                return new int[] { 0, 1, 2, 3, 4 };
            }"
14092,initSP,"    private void initSP() {
        sp = new SpatialPooler();
        mem = new Connections();
        parameters.apply(mem);
        sp.init(mem);
    }"
14095,measureAvgCompute_7_Times,"    public int[] measureAvgCompute_7_Times(Blackhole bh) throws InterruptedException {
        for(int i = 0;i < 7;i++) {
            pooler.compute(memory, input[i], SDR, true);
        }"
14096,init,"    public void init() {
        super.init();

        input = new int[7][8];
        for(int i = 0;i < 7;i++) {"
14098,getParameters,"    protected Parameters getParameters() {
        Parameters parameters = super.getParameters();
        parameters.set(KEY.GLOBAL_INHIBITION, true);
        return parameters;
    }"
14100,getPythonInputs1,"   private int[][] getPythonInputs1() {
       return new int[][] {
           { 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1 },"
14101,getPythonInitialPermanences1,"   private double[][] getPythonInitialPermanences1() {
       return new double[][] {
           {0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0},"
14102,getPythonInitialPotentialMapping1,"    private int[][] getPythonInitialPotentialMapping1() {
        return new int[][] {
            {1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0},"
14103,getPythonInitialColumnConnections,"    private int[][] getPythonInitialColumnConnections() {
        return new int[][] {
            {0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0},"
14105,getPermsForIteration,"    private double[][] getPermsForIteration(SpatialPoolerCompatibilityPermanences compats, int iteration) {
        double[][] comp = null;
        try {
            Method getPermanences = SpatialPoolerCompatibilityPermanences.class.getMethod(
                ""getPermanences"" + iteration, (Class[])null);"
14106,convertPermanences,"    private void convertPermanences(Connections c, SpatialPooler sp, SpatialPoolerCompatibilityPermanences compats, int iteration) {
        double[][] pythonSpPerms = getPermsForIteration(compats, iteration);
        for(int i = 0;i < c.getNumColumns();i++) {
            double[] perms = pythonSpPerms[i];
            Column col = c.getColumn(i);"
14107,compareActivations,"    private void compareActivations(SpatialPoolerCompatibilityActives actives, int[] activations, int iteration) {
        int[] pythonActivations = actives.getActivations()[iteration];
        try {
            assertTrue(Arrays.equals(pythonActivations, activations));"
14108,comparePermanences,"    private void comparePermanences(Connections c, SpatialPoolerCompatibilityPermanences compats, int iteration) {
        double[][] comp = getPermsForIteration(compats, iteration);
        double[][] actual = c.getPermanences();
        for(int i = 0;i < comp.length;i++) {
            for(int j = 0;j < comp[i].length;j++) {"
14109,printPermanences,"    private void printPermanences(Connections c) {
        double[][] perms = c.getPermanences();
        for(int i = 0;i < perms.length;i++) {
            System.out.println(Arrays.toString(perms[i]));"
14110,printConnecteds,"    private void printConnecteds(Connections c) {
        int[][] cons = c.getConnecteds();
        for(int i = 0;i < cons.length;i++) {
            System.out.println(""c: "" + Arrays.toString(cons[i]));"
14111,runSideBySide,"    private void runSideBySide(SpatialPooler sp, Connections c, int[][] inputs, int numRecords,
        SpatialPoolerCompatibilityActives actives, SpatialPoolerCompatibilityPermanences perms) {
        
        UniversalRandom univ = new UniversalRandom(42);
                        "
14112,areEqualDouble,"    public static boolean areEqualDouble(double a, double b, int precision) {
        return Math.abs(a - b) <= Math.pow(10, -precision);
    }"
14114,getPermanences99,"	public double[][] getPermanences99() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14115,getPermanences98,"	public double[][] getPermanences98() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14116,getPermanences97,"	public double[][] getPermanences97() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14117,getPermanences96,"	public double[][] getPermanences96() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14118,getPermanences95,"	public double[][] getPermanences95() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14119,getPermanences94,"	public double[][] getPermanences94() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14120,getPermanences93,"	public double[][] getPermanences93() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14121,getPermanences92,"	public double[][] getPermanences92() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14122,getPermanences91,"	public double[][] getPermanences91() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14123,getPermanences90,"	public double[][] getPermanences90() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14124,getPermanences89,"	public double[][] getPermanences89() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14125,getPermanences88,"	public double[][] getPermanences88() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14126,getPermanences87,"	public double[][] getPermanences87() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14127,getPermanences86,"	public double[][] getPermanences86() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14128,getPermanences85,"	public double[][] getPermanences85() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14129,getPermanences84,"	public double[][] getPermanences84() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14130,getPermanences83,"	public double[][] getPermanences83() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14131,getPermanences82,"	public double[][] getPermanences82() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14132,getPermanences81,"	public double[][] getPermanences81() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14133,getPermanences80,"	public double[][] getPermanences80() {
		return new double[][] {
			{ 0.070000008, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.99000001, 0.0, 0.0, 0.80139005, 1.0, 0.0, 0.48018, 0.0, 0.0 },"
14134,getPermanences79,"	public double[][] getPermanences79() {
		return new double[][] {
			{ 0.080000006, 0.0, 0.93377006, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.70139003, 1.0, 0.0, 0.38018, 0.0, 0.0 },"
14135,getPermanences78,"	public double[][] getPermanences78() {
		return new double[][] {
			{ 0.080000006, 0.0, 0.93377006, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.70139003, 1.0, 0.0, 0.38018, 0.0, 0.0 },"
14136,getPermanences77,"	public double[][] getPermanences77() {
		return new double[][] {
			{ 0.080000006, 0.0, 0.93377006, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.70139003, 1.0, 0.0, 0.38018, 0.0, 0.0 },"
14137,getPermanences76,"	public double[][] getPermanences76() {
		return new double[][] {
			{ 0.080000006, 0.0, 0.93377006, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.70139003, 1.0, 0.0, 0.38018, 0.0, 0.0 },"
14138,getPermanences75,"	public double[][] getPermanences75() {
		return new double[][] {
			{ 0.080000006, 0.0, 0.93377006, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.70139003, 1.0, 0.0, 0.38018, 0.0, 0.0 },"
14139,getPermanences74,"	public double[][] getPermanences74() {
		return new double[][] {
			{ 0.080000006, 0.0, 0.93377006, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.70139003, 1.0, 0.0, 0.38018, 0.0, 0.0 },"
14140,getPermanences73,"	public double[][] getPermanences73() {
		return new double[][] {
			{ 0.080000006, 0.0, 0.93377006, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.70139003, 1.0, 0.0, 0.38018, 0.0, 0.0 },"
14141,getPermanences72,"	public double[][] getPermanences72() {
		return new double[][] {
			{ 0.080000006, 0.0, 0.93377006, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.70139003, 1.0, 0.0, 0.38018, 0.0, 0.0 },"
14142,getPermanences71,"	public double[][] getPermanences71() {
		return new double[][] {
			{ 0.080000006, 0.0, 0.93377006, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.70139003, 1.0, 0.0, 0.38018, 0.0, 0.0 },"
14143,getPermanences70,"	public double[][] getPermanences70() {
		return new double[][] {
			{ 0.080000006, 0.0, 0.93377006, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.70139003, 1.0, 0.0, 0.38018, 0.0, 0.0 },"
14144,getPermanences69,"	public double[][] getPermanences69() {
		return new double[][] {
			{ 0.080000006, 0.0, 0.93377006, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.70139003, 1.0, 0.0, 0.38018, 0.0, 0.0 },"
14145,getPermanences68,"	public double[][] getPermanences68() {
		return new double[][] {
			{ 0.080000006, 0.0, 0.93377006, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.70139003, 1.0, 0.0, 0.38018, 0.0, 0.0 },"
14146,getPermanences67,"	public double[][] getPermanences67() {
		return new double[][] {
			{ 0.090000004, 0.0, 0.83377004, 0.0, 0.0, 0.0, 0.0, 0.90379006, 0.0, 0.0, 0.71139002, 1.0, 0.0, 0.28018001, 0.0, 0.0 },"
14147,getPermanences66,"	public double[][] getPermanences66() {
		return new double[][] {
			{ 0.090000004, 0.0, 0.83377004, 0.0, 0.0, 0.0, 0.0, 0.90379006, 0.0, 0.0, 0.71139002, 1.0, 0.0, 0.28018001, 0.0, 0.0 },"
14148,getPermanences65,"	public double[][] getPermanences65() {
		return new double[][] {
			{ 0.090000004, 0.0, 0.83377004, 0.0, 0.0, 0.0, 0.0, 0.90379006, 0.0, 0.0, 0.71139002, 1.0, 0.0, 0.28018001, 0.0, 0.0 },"
14149,getPermanences64,"	public double[][] getPermanences64() {
		return new double[][] {
			{ 0.090000004, 0.0, 0.83377004, 0.0, 0.0, 0.0, 0.0, 0.90379006, 0.0, 0.0, 0.71139002, 1.0, 0.0, 0.28018001, 0.0, 0.0 },"
14150,getPermanences63,"	public double[][] getPermanences63() {
		return new double[][] {
			{ 0.090000004, 0.0, 0.83377004, 0.0, 0.0, 0.0, 0.0, 0.90379006, 0.0, 0.0, 0.71139002, 1.0, 0.0, 0.28018001, 0.0, 0.0 },"
14151,getPermanences62,"	public double[][] getPermanences62() {
		return new double[][] {
			{ 0.090000004, 0.0, 0.83377004, 0.0, 0.0, 0.0, 0.0, 0.90379006, 0.0, 0.0, 0.71139002, 1.0, 0.0, 0.28018001, 0.0, 0.0 },"
14152,getPermanences61,"	public double[][] getPermanences61() {
		return new double[][] {
			{ 0.090000004, 0.0, 0.83377004, 0.0, 0.0, 0.0, 0.0, 0.90379006, 0.0, 0.0, 0.71139002, 1.0, 0.0, 0.28018001, 0.0, 0.0 },"
14153,getPermanences60,"	public double[][] getPermanences60() {
		return new double[][] {
			{ 0.090000004, 0.0, 0.83377004, 0.0, 0.0, 0.0, 0.0, 0.90379006, 0.0, 0.0, 0.71139002, 1.0, 0.0, 0.28018001, 0.0, 0.0 },"
14154,getPermanences59,"	public double[][] getPermanences59() {
		return new double[][] {
			{ 0.090000004, 0.0, 0.83377004, 0.0, 0.0, 0.0, 0.0, 0.90379006, 0.0, 0.0, 0.71139002, 1.0, 0.0, 0.28018001, 0.0, 0.0 },"
14155,getPermanences58,"	public double[][] getPermanences58() {
		return new double[][] {
			{ 0.090000004, 0.0, 0.83377004, 0.0, 0.0, 0.0, 0.0, 0.90379006, 0.0, 0.0, 0.71139002, 1.0, 0.0, 0.28018001, 0.0, 0.0 },"
14156,getPermanences57,"	public double[][] getPermanences57() {
		return new double[][] {
			{ 0.090000004, 0.0, 0.83377004, 0.0, 0.0, 0.0, 0.0, 0.90379006, 0.0, 0.0, 0.71139002, 1.0, 0.0, 0.28018001, 0.0, 0.0 },"
14157,getPermanences56,"	public double[][] getPermanences56() {
		return new double[][] {
			{ 0.090000004, 0.0, 0.83377004, 0.0, 0.0, 0.0, 0.0, 0.90379006, 0.0, 0.0, 0.71139002, 1.0, 0.0, 0.28018001, 0.0, 0.0 },"
14158,getPermanences55,"	public double[][] getPermanences55() {
		return new double[][] {
			{ 0.090000004, 0.0, 0.83377004, 0.0, 0.0, 0.0, 0.0, 0.90379006, 0.0, 0.0, 0.71139002, 1.0, 0.0, 0.28018001, 0.0, 0.0 },"
14159,getPermanences54,"	public double[][] getPermanences54() {
		return new double[][] {
			{ 0.090000004, 0.0, 0.83377004, 0.0, 0.0, 0.0, 0.0, 0.90379006, 0.0, 0.0, 0.71139002, 1.0, 0.0, 0.28018001, 0.0, 0.0 },"
14160,getPermanences53,"	public double[][] getPermanences53() {
		return new double[][] {
			{ 0.090000004, 0.0, 0.83377004, 0.0, 0.0, 0.0, 0.0, 0.90379006, 0.0, 0.0, 0.71139002, 1.0, 0.0, 0.28018001, 0.0, 0.0 },"
14161,getPermanences52,"	public double[][] getPermanences52() {
		return new double[][] {
			{ 0.1, 0.0, 0.84377003, 0.0, 0.0, 0.052710004, 0.052299999, 0.80379003, 0.0, 0.0, 0.61138999, 0.98207998, 0.0, 0.18018, 0.0, 0.0 },"
14162,getPermanences51,"	public double[][] getPermanences51() {
		return new double[][] {
			{ 0.1, 0.0, 0.84377003, 0.0, 0.0, 0.052710004, 0.052299999, 0.80379003, 0.0, 0.0, 0.61138999, 0.98207998, 0.0, 0.18018, 0.0, 0.0 },"
14163,getPermanences50,"	public double[][] getPermanences50() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14164,getPermanences49,"	public double[][] getPermanences49() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14165,getPermanences48,"	public double[][] getPermanences48() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14166,getPermanences47,"	public double[][] getPermanences47() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14167,getPermanences46,"	public double[][] getPermanences46() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14168,getPermanences45,"	public double[][] getPermanences45() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14169,getPermanences44,"	public double[][] getPermanences44() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14170,getPermanences43,"	public double[][] getPermanences43() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14171,getPermanences42,"	public double[][] getPermanences42() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14172,getPermanences41,"	public double[][] getPermanences41() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14173,getPermanences40,"	public double[][] getPermanences40() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14174,getPermanences39,"	public double[][] getPermanences39() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14175,getPermanences38,"	public double[][] getPermanences38() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14176,getPermanences37,"	public double[][] getPermanences37() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14177,getPermanences36,"	public double[][] getPermanences36() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14178,getPermanences35,"	public double[][] getPermanences35() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14179,getPermanences34,"	public double[][] getPermanences34() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14180,getPermanences33,"	public double[][] getPermanences33() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14181,getPermanences32,"	public double[][] getPermanences32() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14182,getPermanences31,"	public double[][] getPermanences31() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14183,getPermanences30,"	public double[][] getPermanences30() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14184,getPermanences29,"	public double[][] getPermanences29() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14185,getPermanences28,"	public double[][] getPermanences28() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14186,getPermanences27,"	public double[][] getPermanences27() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14187,getPermanences26,"	public double[][] getPermanences26() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14188,getPermanences25,"	public double[][] getPermanences25() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14189,getPermanences24,"	public double[][] getPermanences24() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14190,getPermanences23,"	public double[][] getPermanences23() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14191,getPermanences22,"	public double[][] getPermanences22() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14192,getPermanences21,"	public double[][] getPermanences21() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14193,getPermanences20,"	public double[][] getPermanences20() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14194,getPermanences19,"	public double[][] getPermanences19() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14195,getPermanences18,"	public double[][] getPermanences18() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14196,getPermanences17,"	public double[][] getPermanences17() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14197,getPermanences16,"	public double[][] getPermanences16() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14198,getPermanences15,"	public double[][] getPermanences15() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14199,getPermanences14,"	public double[][] getPermanences14() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14200,getPermanences13,"	public double[][] getPermanences13() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14201,getPermanences12,"	public double[][] getPermanences12() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14202,getPermanences11,"	public double[][] getPermanences11() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14203,getPermanences10,"	public double[][] getPermanences10() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14204,getPermanences9,"	public double[][] getPermanences9() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14205,getPermanences8,"	public double[][] getPermanences8() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14206,getPermanences7,"	public double[][] getPermanences7() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14207,getPermanences6,"	public double[][] getPermanences6() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14208,getPermanences5,"	public double[][] getPermanences5() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14209,getPermanences4,"	public double[][] getPermanences4() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14210,getPermanences3,"	public double[][] getPermanences3() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14211,getPermanences2,"	public double[][] getPermanences2() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14212,getPermanences1,"	public double[][] getPermanences1() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14213,getPermanences0,"	public double[][] getPermanences0() {
		return new double[][] {
			{ 0.0, 0.0, 0.74377, 0.0, 0.0, 0.062710002, 0.0623, 0.81379002, 0.0, 0.0, 0.51138997, 0.99207997, 0.0, 0.080179997, 0.0, 0.0 },"
14214,getActivations,"	public int[][] getActivations() {
		return new int[][] {
			{ 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1 },"
14217,testArrayInvalidWTooSmall,"    public void testArrayInvalidWTooSmall() {
        SparsePassThroughEncoder encoder = new SparsePassThroughEncoder(9, 3);
        exception.expect(IllegalArgumentException.class);
        encoder.encode(new int[]{2, 7, 15, 18, 23});

        encoder = SparsePassThroughEncoder.sparseBuilder()
                .n(9)
                .w(3)"
14218,testArrayInvalidWTooBig,"    public void testArrayInvalidWTooBig() {
        SparsePassThroughEncoder encoder = new SparsePassThroughEncoder(9, 3);
        exception.expect(IllegalArgumentException.class);
        encoder.encode(new int[]{2});

        encoder = SparsePassThroughEncoder.sparseBuilder()
                .n(9)
                .w(3)"
14222,encodeIntoArray,"    public void encodeIntoArray(int[] input, int[] output) {

        int[] denseInput = new int[output.length];
        for (int i : input) {
            if (i > denseInput.length)
                throw new IllegalArgumentException(String.format(""Output bit count set too low, need at least %d bits"", i));"
14223,sparseBuilder,"    public static Encoder.Builder<SparsePassThroughEncoder.Builder, SparsePassThroughEncoder> sparseBuilder() {
        return new SparsePassThroughEncoder.Builder();
    }"
14224,getArgs,"        public int[] getArgs() { return new int[] {arg0, arg1}; }
    }
}"
14225,getArg1,"        public int getArg1() { return arg1; }
        public int[] getArgs() { return new int[] {arg0, arg1}; }
    }"
14226,getArg0,"        public int getArg0() { return arg0; }
        public int getArg1() { return arg1; }
        public int[] getArgs() { return new int[] {arg0, arg1}; }"
14227,testSetAndGet,"    public void testSetAndGet() {
        int[] dimensions =  { 5, 2 };
        TestObject[][] values = new TestObject[dimensions[0]][dimensions[1]];

        for (int i = 0; i < dimensions[0]; i ++)
            for (int j = 0; j < dimensions[1]; j++)
                values[i][j] = new TestObject(i, j);
"
14228,testComputeCoordinates_ColumnMajor,"    public void testComputeCoordinates_ColumnMajor() {
        SparseMatrix<TestObject> l = new SparseObjectMatrix<TestObject>(new int[] { 4, 4, 2 }, true);
        int[] coordinates = l.computeCoordinates(27);
        assertEquals(3, coordinates[0]);
        assertEquals(2, coordinates[1]);
        assertEquals(1, coordinates[2]);
    }"
14229,testComputeCoordinates,"    public void testComputeCoordinates() {
        SparseMatrix<TestObject> l = new SparseObjectMatrix<TestObject>(new int[] { 2, 4, 4 });
        int[] coordinates = l.computeCoordinates(27);
        assertEquals(1, coordinates[0]);
        assertEquals(2, coordinates[1]);
        assertEquals(3, coordinates[2]);
    }"
14231,testComputeIndex,"    public void testComputeIndex() {
        SparseMatrix<TestObject> l = new SparseObjectMatrix<TestObject>(new int[] { 2, 4, 4 });

        int index = l.computeIndex(new int[] { 0, 2, 2 });
        assertEquals(10, index);

        index = l.computeIndex(new int[] { 1, 2, 3 });"
14232,typeClass,"            @Override public Class<TestObject> typeClass() {
                return TestObject.class;
            }"
14235,testGetMaxIndex,"    public void testGetMaxIndex() {
        SparseObjectMatrix<TestObject> sm = 
                new SparseObjectMatrix<TestObject>(new int[] { 5, 5 });

        int max = sm.getMaxIndex();"
14237,testGetDimensionMultiples,"    public void testGetDimensionMultiples() {
        SparseMatrix<TestObject> sm = new SparseObjectMatrix<TestObject>(new int[] { 4 });
        int[] dm = sm.getDimensionMultiples();
        assertEquals(1, dm.length);
        assertEquals(1, dm[0]);

        sm = new SparseObjectMatrix<TestObject>(new int[] { 1, 2, 3, 4, 5 });
        dm = sm.getDimensionMultiples();
        assertEquals(ArrayUtils.print1DArray(dm), ""[120, 60, 20, 5, 1]"");"
14238,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(!super.equals(obj))
            return false;
        if(getClass() != obj.getClass())
            return false;
        SparseObjectMatrix other = (SparseObjectMatrix)obj;"
14239,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((sparseMap == null) ? 0 : sparseMap.hashCode());
        return result;
    }"
14240,toString,"    public String toString() {
        return Arrays.toString(getDimensions());
    }"
14241,getSparseIndices,"    public int[] getSparseIndices() {
        return reverse(sparseMap.keys());
    }"
14242,get,"    public T get(int index) {
        return this.sparseMap.get(index);
    }"
14243,get,"    public T get(int... coordinates) {
        return get(computeIndex(coordinates));
    }"
14244,getObject,"    public T getObject(int index) {
        return get(index);
    }"
14245,set,"    public SparseObjectMatrix<T> set(int[] coordinates, T object) {
        set(computeIndex(coordinates), object);
        return this;
    }"
14246,set,"    public SparseObjectMatrix<T> set(int index, T object) {
        sparseMap.put(index, (T)object);
        return this;
    }"
14253,testCalculateOverlap,"    public void testCalculateOverlap() {
        doTestCalculateOverlap(new SparseBinaryMatrix(this.dimensions));
        doTestCalculateOverlap(new LowMemorySparseBinaryMatrix(this.dimensions));
        doTestCalculateOverlap(new FastConnectionsMatrix(this.dimensions));
    }"
14254,createDefaultMatrix,"    private SparseBinaryMatrix createDefaultMatrix() {
        SparseBinaryMatrix sm  = new SparseBinaryMatrix(this.dimensions);
        int[][] values = {
            {1, 0, 0, 0, 0, 1, 0, 0, 0, 0},
            {0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
            {0, 0, 1, 0, 0, 0, 0, 1, 0, 0},"
14255,testAll,"    public void testAll() {
        SparseBinaryMatrix sm = createDefaultMatrix();
        int[] all = {0, 5, 11, 16, 22, 27, 33, 38, 44, 49};
        assertTrue(sm.all(all));
    }"
14256,testOr,"    public void testOr() {
        SparseBinaryMatrix sm = createDefaultMatrix();
        int[] orBits = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        int[] expected = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        sm.or(orBits);
        assertArrayEquals(expected, (int[]) sm.getSlice(new int[] {0}));
    }"
14257,testSliceIndexes,"    public void testSliceIndexes() {
        SparseBinaryMatrix sm = new SparseBinaryMatrix(this.dimensions);
        int[][] expected =  {
                {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 
                {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, "
14258,doTestGetSparseIndices,"    private void doTestGetSparseIndices(AbstractSparseBinaryMatrix sm) {
        int[] expected = {0, 5, 11, 16, 22, 27, 33, 38, 44, 49};
        int[][] values = new int[][]{
            {1, 0, 0, 0, 0, 1, 0, 0, 0, 0},
            {0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
            {0, 0, 1, 0, 0, 0, 0, 1, 0, 0},
            {0, 0, 0, 1, 0, 0, 0, 0, 1, 0},"
14259,testGetSparseIndices,"    public void testGetSparseIndices() {
        doTestGetSparseIndices(new SparseBinaryMatrix(this.dimensions));
        doTestGetSparseIndices(new LowMemorySparseBinaryMatrix(this.dimensions));
        doTestGetSparseIndices(new FastConnectionsMatrix(this.dimensions));
    }"
14260,doTestArraySet,"    private void doTestArraySet(AbstractSparseBinaryMatrix sm) {
        int[] expected = { 1, 0, 0, 0, 1, 0, 1, 1, 1, 0 };
        int[] values = { 1, 1, 1, 1, 1 };
        int[] indexes = { 0, 4, 6, 7, 8 };
        sm.set(indexes, values);
        int[] dense = new int[sm.getMaxIndex() + 1];

        for (int i = 0; i < sm.getMaxIndex() + 1; i++) {
            dense[i] = sm.getIntValue(i);"
14261,testArraySet,"    public void testArraySet() {
        int[] dimensions =  { 5, 2 };
        doTestArraySet(new SparseBinaryMatrix(dimensions));
        doTestArraySet(new LowMemorySparseBinaryMatrix(dimensions));
        doTestArraySet(new FastConnectionsMatrix(dimensions));
    }"
14264,fillWithSomeRandomValues,"    public static void fillWithSomeRandomValues(Object array, Random r, int... sizes) {
        for (int i = 0; i < sizes[0]; i++)
            if (sizes.length == 1) {"
14265,doTestSetTrueCount,"    private void doTestSetTrueCount(AbstractSparseBinaryMatrix sm) {
        int[][] connectedSynapses = new int[][]{
            {1, 0, 0, 0, 0, 1, 0, 0, 0, 0},
            {0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
            {0, 0, 1, 0, 0, 0, 0, 1, 0, 0},
            {0, 0, 0, 1, 0, 0, 0, 0, 1, 0},"
14266,testSetTrueCount,"    public void testSetTrueCount() {
        doTestSetTrueCount(new SparseBinaryMatrix(this.dimensions));
        doTestSetTrueCount(new LowMemorySparseBinaryMatrix(this.dimensions));
        doTestSetTrueCount(new FastConnectionsMatrix(this.dimensions));
    }"
14268,testRightVecSumAtNZFast,"    public void testRightVecSumAtNZFast() {
        doTestRightVecSumAtNZFast(new SparseBinaryMatrix(this.dimensions));
        doTestRightVecSumAtNZFast(new LowMemorySparseBinaryMatrix(this.dimensions));
        doTestRightVecSumAtNZFast(new FastConnectionsMatrix(this.dimensions));
    }"
14269,doTestBackingStoreAndSliceAccess,"    private void doTestBackingStoreAndSliceAccess(AbstractSparseBinaryMatrix sm) {
        int[][] connectedSynapses = new int[][]{
            {1, 0, 0, 0, 0, 1, 0, 0, 0, 0},
            {0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
            {0, 0, 1, 0, 0, 0, 0, 1, 0, 0},
            {0, 0, 0, 1, 0, 0, 0, 0, 1, 0},
            {0, 0, 0, 0, 1, 0, 0, 0, 0, 1}};"
14270,testBackingStoreAndSliceAccess,"    public void testBackingStoreAndSliceAccess() {
        doTestBackingStoreAndSliceAccess(new SparseBinaryMatrix(this.dimensions));
        doTestBackingStoreAndSliceAccess(new LowMemorySparseBinaryMatrix(this.dimensions));
        doTestBackingStoreAndSliceAccess(new FastConnectionsMatrix(this.dimensions));
    }"
14271,setForTest,"    public AbstractSparseBinaryMatrix setForTest(int index, int value) {
        ArrayUtils.setValue(this.backingArray, value, computeCoordinates(index));
        return this;
    }"
14272,get,"    public Integer get(int index) {
        int[] coordinates = computeCoordinates(index);
        if (coordinates.length == 1) {
            return Array.getInt(this.backingArray, index);"
14273,set,"    public AbstractSparseBinaryMatrix set(int index, Object value) {
        set(index, ((Integer) value).intValue());
        return this;
    }"
14274,clearStatistics,"    public void clearStatistics(int row) {
        this.setTrueCount(row, 0);
        int[] slice = (int[])Array.get(backingArray, row);
        Arrays.fill(slice, 0);
    }"
14275,set,"    public AbstractSparseBinaryMatrix set(int[] indexes, int[] values) { 
        for(int i = 0;i < indexes.length;i++) {
            set(indexes[i], values[i]);
        }"
14276,set,"    public AbstractSparseBinaryMatrix set(int value, int... coordinates) {
        back(value, coordinates);
        return this;
    }"
14277,set,"    public AbstractSparseBinaryMatrix set(int index, int value) {
        int[] coordinates = computeCoordinates(index);
        return set(value, coordinates);
    }"
14278,rightVecSumAtNZ,"    public void rightVecSumAtNZ(int[] inputVector, int[] results, double stimulusThreshold) {
        for(int i = 0;i < dimensions[0];i++) {
            int[] slice = (int[])(dimensions.length > 1 ? getSlice(i) : backingArray);"
14279,rightVecSumAtNZ,"    public void rightVecSumAtNZ(int[] inputVector, int[] results) {
        for(int i = 0;i < dimensions[0];i++) {
            int[] slice = (int[])(dimensions.length > 1 ? getSlice(i) : backingArray);"
14282,compareTo,"	public int compareTo(F o) {
		return first.compareTo( ((SortablePair<F, S>)o).first);
	}"
14285,testHashCodeAndEquals,"    public void testHashCodeAndEquals() {
        SetSparseMatrix ssm = new SetSparseMatrix(new int[] { 5 });
        assertNotNull(ssm);
        
        SetSparseMatrix ssm2 = new SetSparseMatrix(new int[] { 5 }, false);
        assertNotNull(ssm2);
        
        assertEquals(ssm, ssm2);"
14286,testSetGet,"    public void testSetGet() {
        SetSparseMatrix ssm = new SetSparseMatrix(new int[] { 5 });
        ssm.set(new int[] { 3 }, 1);
        assertEquals(1, (int)ssm.get(3));
        assertEquals(0, (int)ssm.get(0));
        assertEquals(0, (int)ssm.get(1));
        assertEquals(0, (int)ssm.get(2));
        assertEquals(0, (int)ssm.get(4));
        assertEquals(0, (int)ssm.get(5));
    }"
14287,testConstruction,"    public void testConstruction() {
        SetSparseMatrix ssm = new SetSparseMatrix(new int[] { 5 });
        assertNotNull(ssm);
        
        SetSparseMatrix ssm2 = new SetSparseMatrix(new int[] { 5 }, false);
        assertNotNull(ssm2);
        "
14288,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(!super.equals(obj))
            return false;
        if(getClass() != obj.getClass())
            return false;
        SetSparseMatrix other = (SetSparseMatrix)obj;"
14289,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((indexes == null) ? 0 : indexes.hashCode());
        return result;
    }"
14290,set,"    public SetSparseMatrix set(int index, Integer value) {
        if (value > 0) 
            this.indexes.add(index);
"
14291,get,"    public Integer get(int index) {
        return this.indexes.contains(index) ? 1 : 0;
    }"
14292,set,"    public SetSparseMatrix set(int[] coordinates, Integer value) {
        return set(computeIndex(coordinates), value);
"
14295,testSerializeDeSerialize,"    public void testSerializeDeSerialize() {
        final List<Inference> callVerify = new ArrayList<>();
        
        SerializerCore serializer = Persistence.get().serializer();
        
        Inference inf = new ManualInput() {
            @SuppressWarnings(""unchecked"")
            @Override
            public <T> T postDeSerialize(T i) {"
14296,write,"                @Override public void write(int b) throws IOException {
                    "
14297,testGetObjectOutput,"    public void testGetObjectOutput() {
        try {
            HTMObjectOutput output = Persistence.get().serializer().getObjectOutput(new OutputStream() {"
14298,read,"                @Override public int read() throws IOException {
                    return 0;
                }"
14299,testGetObjectInput,"    public void testGetObjectInput() {
        try {
            HTMObjectInput input = Persistence.get().serializer().getObjectInput(new InputStream() {"
14300,testGetSerializer,"    public void testGetSerializer() {
        SerializerCore serializer = Persistence.get().serializer();
        assertNotNull(serializer);
        
        SerializerCore  serializer2 = Persistence.get().serializer();
        assertTrue(serializer == serializer2);"
14301,getSerialScheme,"    FSTConfiguration getSerialScheme() {
        return fastSerialConfig;
    }"
14302,deSerialize,"    public <T extends Persistable> T deSerialize(byte[] bytes) {
        T retVal = (T)fastSerialConfig.asObject(bytes);
        return retVal.postDeSerialize();
    }"
14303,serialize,"    public <T extends Persistable> byte[] serialize(T instance) {
        byte[] bytes = null;
        try {
            bytes = fastSerialConfig.asByteArray(instance);
        } catch(Exception e) {"
14304,getObjectOutput,"    public <T extends Persistable> HTMObjectOutput getObjectOutput(OutputStream os) {
        return new HTMObjectOutput(os, fastSerialConfig);
    }"
14305,getObjectInput,"    public HTMObjectInput getObjectInput(InputStream is) throws IOException {
        return new HTMObjectInput(is, fastSerialConfig);
    }"
14306,readObject,"    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        in.defaultReadObject();
        initFST();
    }"
14307,registerClass,"    public void registerClass(Class... c) {
        fastSerialConfig.registerClass(c);
    }"
14308,initFST,"    private void initFST() {
        fastSerialConfig = FSTConfiguration.createDefaultConfiguration();
        if(classes != null) {
            fastSerialConfig.registerClass(classes);"
14309,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        SerialConfig other = (SerialConfig)obj;
        if(fileName == null) {"
14310,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((fileName == null) ? 0 : fileName.hashCode());
        result = prime * result + ((registry == null) ? 0 : registry.hashCode());
        return result;
    }"
14311,isOneCheckPointOnly,"    public boolean isOneCheckPointOnly() {
        return oneCheckPointOnly;
    }"
14312,setOneCheckPointOnly,"    public void setOneCheckPointOnly(boolean b) {
        this.oneCheckPointOnly = b;
    }"
14313,setCheckPointOpenOptions,"    public void setCheckPointOpenOptions(StandardOpenOption[] options) {
        this.checkPointOptions = options;
    }"
14314,getCheckPointOpenOptions,"    public StandardOpenOption[] getCheckPointOpenOptions() {
        return checkPointOptions;
    }"
14315,getOpenOptions,"    public StandardOpenOption[] getOpenOptions() {
        return options;
    }"
14316,getRegistry,"    public List<Class<? extends Persistable>> getRegistry() {
        return registry;
    }"
14317,setCheckPointTimeFormatString,"    public void setCheckPointTimeFormatString(String formatString) {
        if(formatString == null || formatString.isEmpty()) {
            throw new NullPointerException(""Cannot use a null or empty format string."");
        }"
14318,getCheckPointFormatString,"    public String getCheckPointFormatString() {
        return this.checkPointFormatString;
    }"
14319,setCheckPointFileName,"    public void setCheckPointFileName(String name) {
        this.checkPointFileName = name;
    }"
14320,getCheckPointFileName,"    public String getCheckPointFileName() {
        return checkPointFileName;
    }"
14321,getAbsoluteSerialDir,"    public String getAbsoluteSerialDir() {
        return System.getProperty(""user.home"") + File.separator + fileDir;
    }"
14322,getFileDir,"    public String getFileDir() {
        return fileDir;
    }"
14323,getFileName,"    public String getFileName() {
        return fileName;
    }"
14324,testGenerateNumbers,"    public void testGenerateNumbers() {
        int[] expected = { 4, 6, 2, 1, 7, 20, 21, 22, 23, 24, -1, 14, 16, 12, 11, 17, 20, 21, 22, 23, 24, -1 };
        
        SequenceMachine sm = new SequenceMachine(null);
        List<Integer> result = sm.generateNumbers(2, 10, new Tuple(5, 10));
        "
14325,prettyPrintSequence,"    public String prettyPrintSequence(List<Set<Integer>> sequence, int verbosity) {
        String text = """";
        
        for(int i = 0;i < sequence.size();i++) {
            Set<Integer> pattern = sequence.get(i);"
14326,addSpatialNoise,"    public List<Set<Integer>> addSpatialNoise(List<Set<Integer>> sequence, double amount) {
        List<Set<Integer>> newSequence = new ArrayList<Set<Integer>>();
        
        for(Set<Integer> pattern : sequence) {
            if(!pattern.equals(NONE)) {"
14327,generateFromNumbers,"    public List<Set<Integer>> generateFromNumbers(List<Integer> numbers) {
        List<Set<Integer>> sequence = new ArrayList<Set<Integer>>();
        for(Integer i : numbers) {
            if(i == -1) {
                sequence.add(NONE);"
14329,toString,"        public String toString() { return ""None""; }
    };
    "
14330,main,"    public static void main(String[] args) {
        Object[] n = { ""rec-center-hourly"", ResourceLocator.locate(""rec-center-hourly"") };
        SensorParams parms = SensorParams.create(Keys::uri, n);
        assert(parms != null);
    }"
14331,create,"    public static SensorParams create(String[] keys, Object... values) {
        return new SensorParams(keys, values);
    }"
14332,create,"    public static SensorParams create(Supplier<Keys.Args> keySet, Object... values) {
        return new SensorParams(keySet, values);
    }"
14333,obs,"        public static Args obs() {
            return Args.o;
        }"
14334,path,"        public static Args path() {
            return Args.p;
        }"
14335,uri,"        public static Args uri() {
            return Args.u;
        }"
14336,get,"            public String[] get() { return arr; }
        }
        public static Args uri() {"
14337,fromString,"    public static SensorFlags fromString(Object o) {
        String val = o.toString().toLowerCase();
        switch(val) {
            case ""r"" : return R;"
14338,description,"    public String description() {
        return description;
    }"
14339,create,"    public Sensor<T> create(SensorParams params);
}"
14341,getInputStream,"    public <K> MetaStream<K> getInputStream();
    "
14342,getSensorParams,"    public SensorParams getSensorParams();
    "
14343,create,"    public static <T> Sensor<T> create(SensorFactory<T> sf, SensorParams t) {
        if(sf == null) {
            throw new IllegalArgumentException(""Factory cannot be null"");
        }
        if(t == null) {"
14344,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        Segment other = (Segment)obj;"
14345,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + index;
        return result;
    }"
14346,compareTo,"    public int compareTo(Segment arg0) {
        return boxedIndex.compareTo(arg0.boxedIndex);
    }"
14347,createSynapse,"    public Synapse createSynapse(Connections c, List<Synapse> syns, Cell sourceCell, Pool pool, int index, int inputIndex) {
        Synapse s = new Synapse(c, sourceCell, this, pool, index, inputIndex);
        syns.add(s);
        return s;
    }"
14348,getIndex,"    public int getIndex() {
        return index;
    }"
14353,testAsCellIndices,"    public void testAsCellIndices() {
        Connections cn = new Connections();
        cn.setColumnDimensions(new int[] { 64, 64 });
        cn.setCellsPerColumn(4);
        TemporalMemory.init(cn);
        
        int[] expectedIndexes = { 0, 3, 4, 16383 };
        Set<Cell> cells = cn.getCellSet(expectedIndexes);
        
        int[] cellIndices = SDR.asCellIndices(cells);"
14355,encodeIntoArray,"    public void encodeIntoArray(int[] input, int[] output) {
        if(LOGGER.isTraceEnabled()) {
            LOGGER.trace(""encodeIntoArray: input: {} \nOutput: {} "", Arrays.toString(input), Arrays.toString(output));
        }"
14356,sptBuilder,"    public static Encoder.Builder<SDRPassThroughEncoder.Builder, SDRPassThroughEncoder> sptBuilder() {
        return new SDRPassThroughEncoder.Builder();
    }"
14357,compute,"    public <T> Classification<T> compute(SDRClassifier classifier, int recordNum, int[] pattern,
                                         int bucket, Object value) {

        Map<String, Object> classification = new LinkedHashMap<String, Object>();
        classification.put(""bucketIdx"", bucket);
        classification.put(""actValue"", value);"
14378,pFormatArray,"	private <T> String pFormatArray(T[] arr) {
		if(arr == null) return """";

		StringBuilder sb = new StringBuilder(""[ "");
		for(T t : arr) {
			sb.append(String.format(""%.2s"", t));
		}"
14379,calculateError,"	private Map<Integer, double[]> calculateError(Map<String, Object> classification) {
		Map<Integer, double[]> error = new HashMap<Integer, double[]>();
		int[] targetDist = new int[maxBucketIdx + 1];
		targetDist[(int)classification.get(""bucketIdx"")] = 1;

		int iteration = 0;
		int[] learnPatternNZ = null;
		int nSteps = 0;
		for(Tuple t : patternNZHistory) {
			iteration = (int) t.get(0);"
14385,minVal,"        public Builder minVal(double minVal) {
            throw new IllegalArgumentException(""Not supported for this SDRCategoryEncoder"");
        }"
14386,maxVal,"        public Builder maxVal(double maxVal) {
            throw new IllegalArgumentException(""Not supported for this SDRCategoryEncoder"");
        }"
14387,clipInput,"        public Builder clipInput(boolean clipInput) {
            throw new IllegalArgumentException(""Not supported for this SDRCategoryEncoder"");
        }"
14388,periodic,"        @Override public Builder periodic(boolean periodic) {
            throw new IllegalArgumentException(""Not supported for this SDRCategoryEncoder"");
        }"
14389,resolution,"        public Builder resolution(double resolution) {
            throw new IllegalArgumentException(""Not supported for this SDRCategoryEncoder"");
        }"
14390,radius,"        public Builder radius(double radius) {
            throw new IllegalArgumentException(""Not supported for this SDRCategoryEncoder"");
        }"
14391,encoderSeed,"        public Builder encoderSeed(int encoderSeed) {
            this.encoderSeed = encoderSeed;
            return this;
        }"
14392,categoryList,"        public Builder categoryList(List<String> categoryList) {
            this.categoryList = categoryList;
            return this;
        }"
14393,build,"        public SDRCategoryEncoder build() {
            if (n == 0) {
                throw new IllegalStateException(""\""N\"" should be set"");
            }
            if (w == 0) {
                throw new IllegalStateException(""\""W\"" should be set"");
            }
            if(categoryList == null) {"
14394,newRep,"    private int[] newRep() {
        int maxAttempts = 1000;
        boolean foundUnique = true;
        int[] oneBits;
        int sdr[] = new int[n];
        for (int index = 0; index < maxAttempts; index++) {
            foundUnique = true;
            oneBits = getSortedSample(n, w);
            sdr = new int[n];"
14395,getSortedSample,"    private int[] getSortedSample(final int populationSize, final int sampleLength) {
        TIntSet resultSet = new TIntHashSet();
        while (resultSet.size() < sampleLength) {
            resultSet.add(random.nextInt(populationSize));
        }
        int[] result = resultSet.toArray();
        Arrays.sort(result);"
14396,addCategory,"    private void addCategory(String category) {
        if (this.sdrByCategory.containsKey(category)) {
            throw new IllegalArgumentException(String.format(""Attempt to add encoder category '%s' that already exists"",
                                                             category));
        }"
14397,getEncoderResultsByIndex,"    private List<Encoding> getEncoderResultsByIndex(SparseObjectMatrix<int[]> topDownMapping, int categoryIndex) {
        List<Encoding> result = new ArrayList<>();
        String category = sdrByCategory.getCategory(categoryIndex);
        int[] encoding = topDownMapping.getObject(categoryIndex);
        result.add(new Encoding(category, categoryIndex, encoding));
        return result;
    }"
14398,getSDRs,"    public Collection<int[]> getSDRs() {
        return Collections.unmodifiableCollection(sdrByCategory.values());
    }"
14399,getBucketValues,"    public <S> List<S> getBucketValues(Class<S> returnType) {
        return new ArrayList<>((Collection<S>)this.sdrByCategory.keySet());
    }"
14400,getTopDownMapping,"    public SparseObjectMatrix<int[]> getTopDownMapping() {
        if (topDownMapping == null) {
            topDownMapping = new SparseObjectMatrix<>(
                    new int[]{sdrByCategory.size()});"
14401,getBucketInfo,"    public List<Encoding> getBucketInfo(int[] buckets) {
        if (sdrByCategory.size() == 0) {
            return new ArrayList<>();
        }
        int categoryIndex = buckets[0];"
14403,eval,"            public boolean eval(int overlaps) {
                return overlaps > thresholdOverlap;
            }"
14404,eval,"            public boolean eval(int i) {
                return i <= 1;
            }"
14406,decode,"    public DecodeResult decode(int[] encoded) {
        return decode(encoded, null);
    }"
14407,getScalars,"    public <S> TDoubleList getScalars(S input) {
        String inputCasted = (String)input;
        int index = 0;
        TDoubleList result = new TDoubleArrayList();
        if (inputCasted == null || inputCasted.isEmpty()) {
            result.add(0);
            return result;
        }
        if (!sdrByCategory.containsKey(input)) {"
14408,getBucketIndices,"    public int[] getBucketIndices(String input) {
        return new int[]{(int)getScalars(input).get(0)};
    }"
14409,getDecoderOutputFieldTypes,"    public Set<FieldMetaType> getDecoderOutputFieldTypes() {
        return new HashSet<>(Arrays.asList(FieldMetaType.LIST, FieldMetaType.STRING));
    }"
14410,encodeIntoArray,"    public void encodeIntoArray(String input, int[] output) {
        int index;
        if (input == null || input.isEmpty()) {
            Arrays.fill(output, 0);
            index = 0;
        } else {"
14411,isDelta,"    public boolean isDelta() {
        return false;
    }"
14412,getWidth,"    public int getWidth() {
        return this.getN();
    }"
14414,builder,"    public static SDRCategoryEncoder.Builder builder() {
        return new Builder();
    }"
14415,getEntry,"        private Map.Entry<String, int[]> getEntry(int i) {
            Set<Map.Entry<String, int[]>> entries = entrySet();
            if (i < 0 || i > entries.size()) {
                throw new IllegalArgumentException(""Index should be in following range:[0,"" + entries.size() + ""]"");
            }
            int j = 0;
            for (Map.Entry<String, int[]> entry : entries)"
14416,getIndexByCategory,"        public int getIndexByCategory(String category) {
            Set<String> categories = this.keySet();
            int inx = 0;
            for (String s : categories) {
                if (s.equals(category)) {
                    return inx;"
14417,getCategory,"        public String getCategory(int index) {
            Map.Entry<String, int[]> entry = this.getEntry(index);
            if (entry == null) return null;
            return entry.getKey();
        }"
14418,getSdr,"        public int[] getSdr(int index) {
            Map.Entry<String, int[]> entry = this.getEntry(index);
            if (entry == null) return null;
            return entry.getValue();
        }"
14420,asColumnList,"    public static int[] asColumnList(Collection<Cell> cells) {
        return cells.stream().mapToInt(c -> c.getColumn().getIndex()).sorted().distinct().toArray();
    }"
14421,cellsAsColumnIndices,"    public static int[] cellsAsColumnIndices(Set<Cell> cells, int cellsPerColumn) {
        return cells.stream().mapToInt(c -> c.getIndex())
                   .sorted().map(cellIdx -> cellIdx / cellsPerColumn).distinct().toArray();"
14422,cellsToColumns,"    public static int[] cellsToColumns(List<Cell> cells, int cellsPerColumn) {
        IntStream op = cells.stream().mapToInt(c -> c.getIndex());
            
        return op.map(cellIdx -> cellIdx / cellsPerColumn).distinct().toArray();"
14423,asColumnIndices,"    public static int[] asColumnIndices(List<Integer> cells, int cellsPerColumn) {
        IntStream op = cells.stream().mapToInt(c -> c);
        return op.map(cellIdx -> cellIdx / cellsPerColumn).distinct().toArray();
    }"
14424,asColumnIndices,"    public static int[] asColumnIndices(int[] cells, int cellsPerColumn) {
        IntStream op = Arrays.stream(cells);
        return op.map(cell -> cell / cellsPerColumn).distinct().toArray();
    }"
14425,endlessLoopInTopDownCompute,"    public void endlessLoopInTopDownCompute() {
	    ScalarEncoder encoder = ScalarEncoder.builder()
            .w( 5 )
            .n( 10 )"
14427,testCloseness,"	public void testCloseness() {
		setUp();
		builder.name(""day of week"")
	        .w(7)
	        .radius(1.0)
	        .minVal(0.0)
	        .maxVal(7.0)
	        .periodic(true)
	        .forced(true);"
14432,testDecodeNull,"	public void testDecodeNull() {
	    setUp();
        initSE();
        
        DecodeResult dr = se.decode(null, ""blah"");
        assertTrue(dr == null);"
14433,testGetScalars,"	public void testGetScalars() {
	    setUp();
        initSE();
        
	    TDoubleList scalars = se.getScalars(42.42d);
	    assertEquals(42.42d, scalars.get(0), 0.01);"
14434,testScalarEncoder,"	public void testScalarEncoder() {
		setUp();
		initSE();
		
		int[] empty = se.encode(Encoder.SENTINEL_VALUE_FOR_MISSING_DATA);
		System.out.println(""\nEncoded missing data as: "" + Arrays.toString(empty));
		int[] expected = new int[14];
		assertTrue(Arrays.equals(expected, empty));"
14435,initSE,"	private void initSE() {
		se = builder.build();
	}"
14436,setUp,"	private void setUp() {
        builder =  ScalarEncoder.builder()
	        .n(14)"
14441,getBucketValues,"    public <S> List<S> getBucketValues(Class<S> t) {
        if(bucketValues == null) {
            SparseObjectMatrix<int[]> topDownMapping = getTopDownMapping();
            int numBuckets = topDownMapping.getMaxIndex() + 1;"
14442,getScalars,"    public <S> TDoubleList getScalars(S d) {
        TDoubleList retVal = new TDoubleArrayList();
        retVal.add((Double)d);
        return retVal;
    }"
14444,generateRangeDescription,"    public String generateRangeDescription(List<MinMax> ranges) {
        StringBuilder desc = new StringBuilder();
        int numRanges = ranges.size();
        for(int i = 0;i < numRanges;i++) {
            if(ranges.get(i).min() != ranges.get(i).max()) {
                desc.append(String.format(""%.2f-%.2f"", ranges.get(i).min(), ranges.get(i).max()));"
14447,encodeIntoArray,"    public void encodeIntoArray(Double input, int[] output) {
        if(Double.isNaN(input)) {
            Arrays.fill(output, 0);
            return;
        }
"
14449,getBucketIndices,"    public int[] getBucketIndices(String input) { return null; }

    /**"
14450,getWidth,"    public int getWidth() {
        return getN();
    }"
14451,getDecoderOutputFieldTypes,"    public Set<FieldMetaType> getDecoderOutputFieldTypes() {
        return new LinkedHashSet<>(Arrays.asList(FieldMetaType.FLOAT, FieldMetaType.INTEGER));
    }"
14452,checkReasonableSettings,"    public void checkReasonableSettings() {
        if(getW() < 21) {
            throw new IllegalStateException("
14453,getFirstOnBit,"    public Integer getFirstOnBit(double input) {
        if(Double.isNaN(input)) {
            return null;
        }else{
            if(input < getMinVal()) {
                if(clipInput() && !isPeriodic()) {
                    if(LOGGER.isTraceEnabled()) {"
14454,initEncoder,"    public void initEncoder(int w, double minVal, double maxVal, int n, double radius, double resolution) {
        if(n != 0) {
            if(!Double.isNaN(minVal) && !Double.isNaN(maxVal)) {"
14457,builder,"    public static Encoder.Builder<ScalarEncoder.Builder, ScalarEncoder> builder() {
        return new ScalarEncoder.Builder();
    }"
14458,testStringRepresentationEqual,"    public void testStringRepresentationEqual() {
        Sample s1 = new Sample(new DateTime(2015, 7, 12, 12, 0, 0), 0.75, 0.3);
        Sample s2 = new Sample(new DateTime(2015, 7, 12, 12, 0, 0), 0.75, 0.3);
        
        assertEquals(s1.toString(), s2.toString());"
14459,testBadInitialization,"    public void testBadInitialization() {
        Sample s1 = null;
        try {
            s1 = new Sample(null, 0.75, 0.3);"
14461,getGaussian,"    private double getGaussian(Random random, double mean, double variance){
        return mean + random.nextGaussian() * variance;
    }"
14462,getSample,"    public double[] getSample(Random random) {
        double[] sample = new double[size];
        for(int i = 0;i < size;i++) {
            sample[i] = getGaussian(random, mean, variance);
        }"
14463,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        Sample other = (Sample)obj;
        if(date == null) {
            if(other.date != null)"
14464,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((date == null) ? 0 : date.hashCode());
        long temp;
        temp = Double.doubleToLongBits(score);
        result = prime * result + (int)(temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(value);
        result = prime * result + (int)(temp ^ (temp >>> 32));
        return result;
    }"
14465,toString,"    public String toString() {
        return new StringBuilder(timeStamp().toString()).append("", value: "").
            append(value).append("", metric: "").append(score).toString();"
14466,timeStamp,"    public DateTime timeStamp() {
        return date;
    }"
14467,main,"    public static void main(String[] args) {
        long start = System.currentTimeMillis();
        
        RunLayer.MakeshiftLayer layer = RunLayer.createLayer();
        
       System.out.println(""\n===================================\n"");
        
        loadSPOutputFile();
        loadRawInputFile();"
14468,loadRawInputFile,"    public static void loadRawInputFile() {
        try (Stream<String> stream = Files.lines(Paths.get(MakeshiftLayer.INPUT_PATH))) {
            MakeshiftLayer.raw = stream.map(l -> l.trim()).collect(Collectors.toList());"
14469,loadSPOutputFile,"    public static void loadSPOutputFile() {
        try (Stream<String> stream = Files.lines(Paths.get(MakeshiftLayer.readFile))) {
            MakeshiftLayer.input = stream.map(l -> {"
14473,testRandom,"    public static void testRandom(Random random) {
        for(int i = 0;i < 10;i++) {
            System.out.println(""random["" + i + ""] = "" + random.nextInt());
        }"
14474,printPreliminaryTestHeader,"    public static void printPreliminaryTestHeader() {
        System.out.println(""--------------------------------------------"");
        System.out.println(""Prelimary Test of: Random, Encoder, SP, TM, Classifier, Anomaly: \n"");
    }"
14477,createEncoder,"    public static MultiEncoder createEncoder() {
        MultiEncoder encoder = MultiEncoder.builder().name("""").build();
        ScalarEncoder se = ScalarEncoder.builder()
            .n(50)
            .w(21)
            .minVal(0)
            .maxVal(100)
            .periodic(false)"
14478,writeEncOutput,"        public void writeEncOutput(int[] output) {
            try {
                encFile.println(Arrays.toString(output));"
14479,storeCyclePrediction,"        public void storeCyclePrediction(int[] predColumnIndices) {
            prevPredictedCols = predColumnIndices;
        }"
14480,getRecordNum,"        public int getRecordNum() {
            return recordNum;
        }"
14481,incRecordNum,"        public void incRecordNum() {
            recordNum++;
        }"
14482,anomalyStep,"        public double anomalyStep(int[] sparseSPOutput, int[] prevPredictedCols, boolean isVerbose) {
            double anomalyScore = Anomaly.computeRawAnomalyScore(sparseSPOutput, prevPredictedCols);
            if(isVerbose) {
                System.out.println(""Anomaly Score: "" + anomalyScore + ""\n"");
            }"
14485,networkStep,"        public void networkStep(int[] sparseSPOutput, boolean learn) {
            network.compute(sparseSPOutput);
        }"
14488,printHeader,"        public void printHeader() {
            System.out.println(""--------------------------------------------"");
            System.out.println(""Record #: "" + recordNum + ""\n"");
            System.out.println(""Raw Input: "" + MakeshiftLayer.raw.get(recordNum + 1));
        }"
14489,testURICreation,"    public void testURICreation() {
        try {
            ResourceLocator.uri(""."");
            fail();"
14490,locate,"    public static String locate(String s) {
        return ResourceLocator.class.getPackage().getName().replace('.', '/') + File.separator + s;
    }"
14491,path,"    public static String path(String s) {
        URL url = ResourceLocator.class.getResource(s);
        if(url == null) {
            url = ResourceLocator.class.getClassLoader().getResource(s);
        }"
14492,uri,"    public static URI uri(String s) {
        try {
            URL url = new URL(s);"
14495,onNext,"            @Override public void onNext(Inference i) {
                assertTrue(Arrays.equals(inputs[idx2++], i.getEncoding()));
            }"
14496,onCompleted,"            @Override public void onCompleted() {}
            @Override public void onNext(Inference i) {"
14497,onNext,"            @Override public void onNext(Inference i) {
                assertTrue(Arrays.equals(inputs[idx1++], i.getEncoding()));
            }"
14499,onNext,"            @Override public void onNext(Inference i) {
                assertTrue(Arrays.equals(inputs[idx0++], i.getEncoding()));
            }"
14503,onNext,"            @Override public void onNext(Inference i) {
                int nextDay = ((int)Math.rint(((Number)i.getClassification(""dayOfWeek"").getMostProbableValue(1)).doubleValue()));
                assertEquals(6, nextDay);
            }"
14504,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override public void onNext(Inference i) {
                int nextDay = ((int)Math.rint(((Number)i.getClassification(""dayOfWeek"").getMostProbableValue(1)).doubleValue()));"
14505,onCompleted,"            @Override public void onCompleted() {}
            @Override public void onError(Throwable e) { e.printStackTrace(); }"
14512,run,"            public void run() {
                while(!isHalted) {
                    try { Thread.sleep(1); }catch(Exception e) {e.printStackTrace();}
                }"
14513,onNext,"            @Override public void onNext(Inference i) {
                if(seq == 2) {
                    isHalted = true;
                }"
14514,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override public void onNext(Inference i) {
                if(seq == 2) {"
14519,onNext,"            @Override public void onNext(Inference output) {
                System.out.println(""output = "" + Arrays.toString(output.getSDR()));
            }"
14520,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override public void onNext(Inference output) {
                System.out.println(""output = "" + Arrays.toString(output.getSDR()));"
14523,testResetMethod,"    public void testResetMethod() {
        Parameters p = NetworkTestHarness.getParameters();
        Region r1 = Network.createRegion(""r1"");
        r1.add(Network.createLayer(""l1"", p).add(new TemporalMemory()));
        try {
            r1.reset();
            assertTrue(r1.lookup(""l1"").hasTemporalMemory());
        }catch(Exception e) {
            fail();"
14525,testClose,"    public void testClose() {
        Parameters p = NetworkTestHarness.getParameters();
        p = p.union(NetworkTestHarness.getDayDemoTestEncoderParams());
        p.set(KEY.RANDOM, new MersenneTwister(42));
        
        Network n = Network.create(""test network"", p)
            .add(Network.createRegion(""r1"")
                .add(Network.createLayer(""4"", p)"
14526,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        Region other = (Region)obj;
        if(assemblyClosed != other.assemblyClosed)
            return false;
        if(isLearn != other.isLearn)"
14527,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + (assemblyClosed ? 1231 : 1237);
        result = prime * result + (isLearn ? 1231 : 1237);
        result = prime * result + ((layers == null) ? 0 : layers.size());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }"
14528,onNext,"            @Override public void onNext(Inference i) {
                if(layersDistinct) {
                    in.compute(i);"
14529,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override public void onNext(Inference i) {
                if(layersDistinct) {"
14530,onCompleted,"            @Override public void onCompleted() { in.notifyComplete(); }
            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override public void onNext(Inference i) {"
14531,connect,"    <I extends Layer<Inference>, O extends Layer<Inference>> void connect(I in, O out) {
        out.subscribe(new Subscriber<Inference>() {
            ManualInput localInf = new ManualInput();"
14533,completeAssembly,"    private void completeAssembly() {
        if(!assemblyClosed) {
            if(layers.size() == 0) return;"
14534,lookup,"    public Layer<?> lookup(String layerName) {
        if(layerName.indexOf("":"") != -1) {
            return layers.get(layerName);
        }"
14536,getTail,"    public Layer<?> getTail() {
        return this.tail;
    }"
14537,getHead,"    public Layer<?> getHead() {
        return this.head;
    }"
14538,getDownstreamRegion,"    public Region getDownstreamRegion() {
        return downstreamRegion;
    }"
14539,getUpstreamRegion,"    public Region getUpstreamRegion() {
        return upstreamRegion;
    }"
14540,onNext,"            @Override public void onNext(Inference i) {
                localInf.sdr(i.getSDR()).recordNum(i.getRecordNum()).classifierInput(i.getClassifierInput()).layerInput(i.getSDR());
                if(i.getSDR().length > 0) {
                    ((Layer<Inference>)tail).compute(localInf);"
14541,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @SuppressWarnings(""unchecked"")
            @Override public void onNext(Inference i) {"
14542,onCompleted,"            @Override public void onCompleted() {
            	tail.notifyComplete();
            }"
14543,connect,"    Region connect(Region inputRegion) {
        inputRegion.observe().subscribe(new Observer<Inference>() {
            ManualInput localInf = new ManualInput();
            
            @Override public void onCompleted() {
            	tail.notifyComplete();"
14544,resetRecordNum,"    public void resetRecordNum() {
        for(Layer<?> l : layers.values()) {
            l.resetRecordNum();"
14545,reset,"    public void reset() {
        for(Layer<?> l : layers.values()) {
            if(l.hasTemporalMemory()) {"
14546,isHalted,"    public boolean isHalted() {
        if(tail != null) {
            return tail.isHalted();
        }"
14547,halt,"    public void halt() {
        LOGGER.debug(""Halt called on Region ["" + getName() + ""]"");
        if(tail != null) {
            tail.halt();
        }else{"
14548,getCheckPointOperator,"    CheckPointOp<byte[]> getCheckPointOperator() {
        LOGGER.debug(""Region ["" + getName() + ""] CheckPoint called at: "" + (new DateTime()));
        if(tail != null) {
            return tail.getCheckPointOperator();"
14549,restart,"    public boolean restart(boolean startAtIndex) {
        if(!assemblyClosed) {
            return start();
        }
        "
14550,start,"    public boolean start() {
        if(!assemblyClosed) {
            close();
        }
        "
14551,observe,"    public Observable<Inference> observe() {
        if(regionObservable == null && !assemblyClosed) {
            close();
        }
        "
14554,getInput,"    public Object getInput() {
        return input;
    }"
14555,compute,"    public <T> void compute(T input) {
        if(!assemblyClosed) {
            close();
        }
        this.input = input;"
14556,isLearn,"    public boolean isLearn() {
        return isLearn;
    }"
14557,setLearn,"    public void setLearn(boolean isLearn) {
        this.isLearn = isLearn;
        Layer<?> l = tail;
        while(l != null) {
            l.setLearn(isLearn);"
14558,isClosed,"    public boolean isClosed() {
        return assemblyClosed;
    }"
14559,close,"    public Region close() {
        if(layers.size() < 1) {
            LOGGER.warn(""Closing region: "" + name + "" before adding contents."");
            return this;
        }
        
        completeAssembly();"
14560,isMultiLayer,"    public boolean isMultiLayer() {
        return layers.size() > 1;
    }"
14561,setNetwork,"    public void setNetwork(Network network) {
        this.parentNetwork = network;
        for(Layer<?> l : layers.values()) {
            l.setNetwork(network);"
14563,preSerialize,"    public Region preSerialize() {
        layers.values().stream().forEach(l -> l.preSerialize());
        return this;
    }"
14564,getFileContents,"     private List<String> getFileContents(String fileName) {
         List<String> retVal = new ArrayList<>();
         
         InputStream is = getClass().getResourceAsStream(""/"".concat(fileName));
         if(is == null) {
             try {
                 is = new FileInputStream(""src/test/resources/"".concat(fileName));
             }catch(Exception e) { e.printStackTrace(); }
         }"
14566,toString,"	public String toString() {
		return l.toString();
	}"
14568,setDescription,"	public void setDescription(String s) {
		this.desc = s;
	}"
14569,getRange,"	public MinMax getRange(int index) {
		return l.get(index);
	}"
14571,getDescription,"	public String getDescription() {
		return desc;
	}"
14572,getRanges,"	public List<MinMax> getRanges() {
		return l;
	}"
14573,getOnBits,"	private int getOnBits(int[] input) {
		int onBits = 0;
		for (int i : input)
		{
			if( i == 1 )"
14574,computeOverlap,"	private int computeOverlap(int[] result1, int[] result2) {
		if (result1.length != result2.length)
			return Integer.MIN_VALUE;

		int overlap = 0;
		for (int i = 0; i < result1.length; i++)"
14575,validateEncoder,"	private boolean validateEncoder(RandomDistributedScalarEncoder encoder,
			int subsampling) {
		for (int i = encoder.minIndex; i <= encoder.maxIndex; i++) {
			for (int j = i + 1; j <= encoder.maxIndex; j += subsampling) {"
14576,testGetOnBitsMethod,"	public void testGetOnBitsMethod()
	{
		int input1[] = new int[] {1,0,0,0,1};
		int input2[] = new int[] {1,0,2,0,1};
		
		assertEquals(""getOnBits returned wrong value "", 2, getOnBits(input1));"
14577,getRangeAsList,"	private List<Integer> getRangeAsList(int lowerBound, int upperBound) {
		if (lowerBound > upperBound)
			return null;

		Integer[] arr = new Integer[upperBound - lowerBound];
		for (int i = lowerBound; i < upperBound; i++) {"
14584,testOffset,"	public void testOffset() {
		builder = RandomDistributedScalarEncoder.builder()
				.name(""enc"")
				.resolution(1);
		rdse = builder.build();

		rdse.encode(23.0);
		assertEquals(
				""Offset not initialized to specified constructor parameter"",
				23, rdse.getOffset(), 0);"
14585,testGetMethods,"	public void testGetMethods() {
		builder = RandomDistributedScalarEncoder.builder()
				.name(""theName"")
				.resolution(1)
				.n(500);
		rdse = builder.build();
"
14586,testOverlapStatistics,"	public void testOverlapStatistics() {
		builder = RandomDistributedScalarEncoder.builder()
				.resolution(1)
				.w(11)
				.n(150)
				.setSeed(RandomDistributedScalarEncoder.DEFAULT_SEED);
		rdse = builder.build();
"
14592,testMissingValues,"	public void testMissingValues() {
		builder = RandomDistributedScalarEncoder.builder()
				.name(""enc"")
				.resolution(1);
		rdse = builder.build();

		int[] e2 = rdse.encode(Double.NaN);
		assertEquals(0, getOnBits(e2));"
14594,getDecoderOutputFieldTypes,"	public Set<FieldMetaType> getDecoderOutputFieldTypes() {
		return new LinkedHashSet<FieldMetaType>(Arrays.asList(FieldMetaType.FLOAT, FieldMetaType.INTEGER));
	}"
14595,getBucketValues,"	public <S> List<S> getBucketValues(Class<S> returnType) {
		return new ArrayList<>((Collection<S>)this.bucketMap.values());
	}"
14596,encodeIntoArray,"	public void encodeIntoArray(Double inputData, int[] output) {
		int[] bucketIdx = getBucketIndices(inputData);
		Arrays.fill(output, 0);

		if (bucketIdx.length == 0)
			return;"
14597,setSeed,"		public RandomDistributedScalarEncoder.Builder setSeed(long seed) {
			this.seed = seed;
			return this;
		}"
14598,setMaxOverlap,"		public RandomDistributedScalarEncoder.Builder setMaxOverlap(
				int maxOverlap) {
			this.maxOverlap = maxOverlap;
			return this;"
14599,setMaxBuckets,"		public RandomDistributedScalarEncoder.Builder setMaxBuckets(
				int maxBuckets) {
			this.maxBuckets = maxBuckets;
			return this;"
14600,setOffset,"		public RandomDistributedScalarEncoder.Builder setOffset(double offset) {
			this.offset = Double.valueOf(offset);
			return this;
		}"
14603,setNumRetry,"	public void setNumRetry(int numRetry) {
		this.numRetry = numRetry;
	}"
14604,setMaxIndex,"	private void setMaxIndex(int maxIndex) {
		this.maxIndex = maxIndex;
	}"
14605,setMinIndex,"	private void setMinIndex(int minIndex) {
		this.minIndex = minIndex;
	}"
14606,setOffset,"	public void setOffset(Double offset) {
		this.offset = offset;
	}"
14607,setSeed,"	public void setSeed(long seed) {
		this.seed = seed;
	}"
14608,setMaxBuckets,"	public void setMaxBuckets(int maxBuckets) {
		this.maxBuckets = maxBuckets;
	}"
14609,setMaxOverlap,"	public void setMaxOverlap(int maxOverlap) {
		this.maxOverlap = maxOverlap;
	}"
14610,getNumRetry,"	public int getNumRetry() {
		return numRetry;
	}"
14611,getMaxIndex,"	private int getMaxIndex() {
		return maxIndex;
	}"
14612,getMinIndex,"	private int getMinIndex() {
		return minIndex;
	}"
14613,getOffset,"	public Double getOffset() {
		return offset;
	}"
14615,getMaxBuckets,"	public int getMaxBuckets() {
		return maxBuckets;
	}"
14616,getMaxOverlap,"	public int getMaxOverlap() {
		return maxOverlap;
	}"
14617,getDescription,"	public List<Tuple> getDescription() {

		String name = getName();
		if (name == null || name.isEmpty())
			setName(""["" + getResolution() + ""]"");
		name = getName();"
14618,setLearning,"	public void setLearning(boolean learningEnabled) {
		setLearningEnabled(learningEnabled);
	}"
14619,isDelta,"	public boolean isDelta() {
		return false;
	}"
14621,getBucketIndices,"	public int[] getBucketIndices(double x) {
		if (Double.isNaN(x))
			x = Encoder.SENTINEL_VALUE_FOR_MISSING_DATA;

		int test = Double.compare(x, Encoder.SENTINEL_VALUE_FOR_MISSING_DATA);
		if (test == 0)
			return new int[0];

		if (getOffset() == null)
			setOffset(x);

		/*
		 * Difference in the round function behavior for Python and Java In"
14622,mapBucketIndexToNonZeroBits,"	public List<Integer> mapBucketIndexToNonZeroBits(int index)
			throws IllegalStateException {
		if (index < 0)
			index = 0;

		if (index >= getMaxBuckets())"
14623,countOverlapIndices,"	public int countOverlapIndices(int i, int j) throws IllegalStateException {
		boolean containsI = bucketMap.containsKey(i);
		boolean containsJ = bucketMap.containsKey(j);
		if (containsI && containsJ) {
			List<Integer> rep1 = bucketMap.get(i);"
14624,overlapOK,"	public boolean overlapOK(int i, int j) throws IllegalStateException {
		return overlapOK(i, j, countOverlapIndices(i, j));
	}"
14625,overlapOK,"	public boolean overlapOK(int i, int j, int overlap) {
		if (Math.abs(i - j) < getW() && overlap == (getW() - Math.abs(i - j)))
			return true;
		if (Math.abs(i - j) >= getW() && overlap <= getMaxOverlap())
			return true;"
14626,countOverlap,"	public int countOverlap(int[] rep1, int[] rep2) {
		int overlap = 0;
		for (int index : rep1) {
			for (int index2 : rep2)
				if (index == index2)"
14627,countOverlap,"	public int countOverlap(List<Integer> rep1, List<Integer> rep2) {
		int overlap = 0;
		for (int index : rep1) {
			for (int index2 : rep2)
				if (index == index2)"
14629,newRepresentation,"	public List<Integer> newRepresentation(int index, int newIndex)
			throws IllegalStateException {
		List<Integer> newRepresentation = new ArrayList<Integer>(
				bucketMap.get(index));

		/*
		 * Choose the bit we will replace in this representation. We need to
		 * shift this bit deterministically. If this is always chosen randomly"
14630,createBucket,"	public void createBucket(int index) throws IllegalStateException {
		if (index < getMinIndex()) {
			if (index == getMinIndex() - 1) {"
14632,initEncoder,"	public void initEncoder(double resolution, int w, int n, Double offset, long seed) {
		rng = (seed == -1) ? new UniversalRandom(DEFAULT_SEED) : new UniversalRandom(seed);

		initializeBucketMap(getMaxBuckets(), getOffset());

		if (getName() == null || getName().isEmpty()) {"
14633,init,"	public void init() throws IllegalStateException {
		if (getW() <= 0 || getW() % 2 == 0)
			throw new IllegalStateException(
			    ""W must be an odd positive integer (to eliminate centering difficulty)"");

		setHalfWidth((getW() - 1) / 2);
"
14634,builder,"	public static Encoder.Builder<RandomDistributedScalarEncoder.Builder, RandomDistributedScalarEncoder> builder() {
		return new RandomDistributedScalarEncoder.Builder();
	}"
14635,getMemory,"        public Connections getMemory() {
            return memory;
        }"
14636,getActual,"        public int[] getActual() {
            return actual;
        }"
14637,getPredicted,"        public int[] getPredicted() {
            return lastPredicted;
        }"
14639,inflateSDR,"        public int[] inflateSDR(int[] SDR, int len) {
            int[] retVal = new int[len];
            for(int i : SDR) {
                retVal[i] = 1;
            }"
14641,stringValue,"        public String stringValue(Double valueIndex) {
            String recordOut = """";
            BigDecimal bdValue = new BigDecimal(valueIndex).setScale(3, RoundingMode.HALF_EVEN);
            switch(bdValue.intValue()) {
                case 1: recordOut = ""Monday (1)"";break;
                case 2: recordOut = ""Tuesday (2)"";break;"
14643,getMemory,"        public Connections getMemory();
        public int[] getActual();"
14644,getPredicted,"        public int[] getPredicted();
        public Connections getMemory();"
14645,input,"        public void input(T value, int recordNum, int iteration);
        public int[] getPredicted();"
14646,getLayer,"    public static Layer<Double> getLayer(Parameters p, ScalarEncoder e, SpatialPooler s, TemporalMemory t, CLAClassifier c) {
        Layer<Double> l = new LayerImpl(p, e, s, t, c);
        return l;
    }"
14647,runThroughLayer,"    public static <T> void runThroughLayer(Layer<T> l, T input, int recordNum, int sequenceNum) {
        l.input(input, recordNum, sequenceNum);
    }"
14650,testHeader,"    public void testHeader() {
        try {
            Publisher.builder().build();"
14651,onNext,"            @Override public void onNext(String output) {
                collected.add(output);
            }"
14652,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override public void onNext(String output) {
                collected.add(output);"
14654,testHeaderConstructionAndManualEntry,"    public void testHeaderConstructionAndManualEntry() {
        Publisher manual = Publisher.builder()
            .addHeader(""timestamp,consumption"")
            .addHeader(""datetime,float"")
            .addHeader(""B"")
            .build();
        
        final List<String> collected = new ArrayList<>();
        manual.subscribe(new Observer<String>() {"
14655,onNext,"            public void onNext(String s) {
                outputList.add(s);
            }"
14656,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override
            public void onNext(String s) {"
14659,build,"        public PublisherSupplier build() {
            PublisherSupplier retVal = new PublisherSupplier(network);
            retVal.headers = new ArrayList<>(this.headers);
            return retVal;
        }"
14660,addHeader,"        public Builder addHeader(String headerLine) {
            headers.add(headerLine);
            return this;
        }"
14661,builder,"    public static Builder builder() {
        return new Builder();
    }"
14662,setNetwork,"    public void setNetwork(Network n) {
        this.network = n;
        this.suppliedInstance.setNetwork(n);
    }"
14663,clearSuppliedInstance,"    public void clearSuppliedInstance() {
        this.suppliedInstance = null;
    }"
14664,get,"    public Publisher get() {
        if(suppliedInstance == null) {
            Publisher.Builder<PublishSubject<String>> builder = 
                Publisher.builder(network == null ? null : p -> network.setPublisher(p));"
14665,observable,"    public Observable<String> observable() {
        return subject;
    }"
14666,subscribe,"    public Subscription subscribe(Observer<String> observer) {
        return subject.subscribe(observer);
    }"
14667,onError,"    public void onError(Throwable e) {
        subject.onError(e);
    }"
14668,onComplete,"    public void onComplete() {
        subject.onCompleted();
    }"
14669,onNext,"    public void onNext(String input) {
        subject.onNext(input);
    }"
14670,getNetwork,"    public Network getNetwork() {
        return parentNetwork;
    }"
14671,setNetwork,"    public void setNetwork(Network n) {
        this.parentNetwork = n;
    }"
14672,builder,"    public static Builder<PublishSubject<String>> builder(Consumer<Publisher> c) {
        return new Builder<>(c);
    }"
14673,builder,"    public static Builder<PublishSubject<String>> builder() {
        return new Builder<>();
    }"
14674,build,"        public Publisher build() {
            subject = ReplaySubject.createWithSize(3);
            for(int i = 0;i < HEADER_SIZE;i++) {
                if(lines[i] == null) {
                    throw new IllegalStateException(""Header not properly formed (must contain 3 lines) see Header.java"");
                }
                subject.onNext(lines[i]);
            }"
14675,addHeader,"        public Builder<PublishSubject<String>> addHeader(String s) {
            lines[cursor] = s;
            ++cursor;
            return (Builder<PublishSubject<String>>)this;
        }"
14676,getConnectedSynapsesSparse,"    public int[] getConnectedSynapsesSparse(Connections c) {
        return c.getPotentialPools().get(index).getSparsePotential();
    }"
14677,getConnectedSynapsesDense,"    public int[] getConnectedSynapsesDense(Connections c) {
        return c.getPotentialPools().get(index).getDenseConnected(c);
    }"
14678,setConnectedSynapsesForTest,"    public void setConnectedSynapsesForTest(Connections c, int[] connectedIndexes) {
        Pool pool = createPool(c, connectedIndexes);
        c.getPotentialPools().set(index, pool);
    }"
14679,setPermanences,"    public void setPermanences(Connections c, double[] perms, int[] inputIndexes) {
        pool.resetConnections();
        c.getConnectedCounts().clearStatistics(index);
        for(int i = 0;i < inputIndexes.length;i++) {
            pool.setPermanence(c, pool.getSynapseWithInput(inputIndexes[i]), perms[i]);"
14680,setPermanences,"    public void setPermanences(Connections c, double[] perms) {
        pool.resetConnections();
        c.getConnectedCounts().clearStatistics(index);
        List<Synapse> synapses = c.getSynapses(this);
        for(Synapse s : synapses) {
            s.setPermanence(c, perms[s.getInputIndex()]);"
14681,clearSynapses,"    public void clearSynapses(Connections c) {
        c.getSynapses(this).clear();
    }"
14682,createPool,"    public Pool createPool(Connections c, int[] inputIndexes) {
        pool = new Pool(inputIndexes.length);
        for(int i = 0;i < inputIndexes.length;i++) {
            int synCount = c.getProximalSynapseCount();
            pool.setPermanence(c, createSynapse(c, c.getSynapses(this), null, pool, synCount, inputIndexes[i]), 0);"
14686,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        Pool other = (Pool)obj;
        if(size != other.size)
            return false;"
14687,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + size;
        result = prime * result + ((synapseConnections == null) ? 0 : synapseConnections.toString().hashCode());
        result = prime * result + ((synapsesBySourceIndex == null) ? 0 : synapsesBySourceIndex.toString().hashCode());
        return result;
    }"
14688,destroy,"    public void destroy() {
        synapseConnections.clear();
        synapsesBySourceIndex.clear();
        synapseConnections = null;
        synapsesBySourceIndex = null;
    }"
14689,destroySynapse,"    public void destroySynapse(Synapse synapse) {
        synapseConnections.remove(synapse.getInputIndex());
        synapsesBySourceIndex.remove(synapse.getInputIndex());
        if(synapse.getSegment() instanceof DistalDendrite) {
            destroy();"
14690,getDenseConnected,"    public int[] getDenseConnected(Connections c) {
        return IntStream.range(0, c.getNumInputs())
            .map(i -> synapseConnections.contains(i) ? 1 : 0)"
14691,getDensePotential,"    public int[] getDensePotential(Connections c) {
        return IntStream.range(0, c.getNumInputs())
            .map(i -> synapsesBySourceIndex.containsKey(i) ? 1 : 0)"
14692,getSparsePotential,"    public int[] getSparsePotential() {
        return ArrayUtils.reverse(synapsesBySourceIndex.keys());
    }"
14693,getDensePermanences,"    public double[] getDensePermanences(Connections c) {
        double[] retVal = new double[c.getNumInputs()];
        int[] keys = synapsesBySourceIndex.keys();
        for(int inputIndex : keys) {
            retVal[inputIndex] = synapsesBySourceIndex.get(inputIndex).getPermanence();
        }"
14694,getSparsePermanences,"    public double[] getSparsePermanences() {
        double[] retVal = new double[size];
        int[] keys = synapsesBySourceIndex.keys();
        for(int x = 0, j = size - 1;x < size;x++, j--) {
            retVal[j] = synapsesBySourceIndex.get(keys[x]).getPermanence();
        }"
14695,getSynapseWithInput,"    public Synapse getSynapseWithInput(int inputIndex) {
        return synapsesBySourceIndex.get(inputIndex);
    }"
14696,resetConnections,"    public void resetConnections() {
        synapseConnections.clear();
    }"
14697,updatePool,"    public void updatePool(Connections c, Synapse s, double permanence) {
        int inputIndex = s.getInputIndex();
        if(synapsesBySourceIndex.get(inputIndex) == null) {
            synapsesBySourceIndex.put(inputIndex, s);
        }"
14698,setPermanence,"    public void setPermanence(Connections c, Synapse s, double permanence) {
        s.setPermanence(c, permanence);
    }"
14699,getPermanence,"    public double getPermanence(Synapse s) {
        return synapsesBySourceIndex.get(s.getInputIndex()).getPermanence();
    }"
14701,stringValue,"    private String stringValue(Double valueIndex) {
        String recordOut = """";
        BigDecimal bdValue = new BigDecimal(valueIndex).setScale(3, RoundingMode.HALF_EVEN);
        switch(bdValue.intValue()) {
            case 1: recordOut = ""Monday (1)"";break;
            case 2: recordOut = ""Tuesday (2)"";break;"
14702,mapToInputData,"    private double mapToInputData(int[] encoding) {
        for(int i = 0;i < dayMap.length;i++) {
            if(Arrays.equals(encoding, dayMap[i])) {
                return i + 1;"
14704,createDayOfWeekInferencePrintout,"    private BiFunction<Inference, Integer, Integer> createDayOfWeekInferencePrintout() {
        return new BiFunction<Inference, Integer, Integer>() {
            private int cycles = 1;"
14705,getLoadedDayOfWeekNetwork,"    private Network getLoadedDayOfWeekNetwork() {
        Parameters p = NetworkTestHarness.getParameters().copy();
        p = p.union(NetworkTestHarness.getDayDemoTestEncoderParams());
        p.set(KEY.RANDOM, new FastRandom(42));
        
        Sensor<ObservableSensor<String[]>> sensor = Sensor.create(
            ObservableSensor::create, SensorParams.create(Keys::obs, new Object[] {""name"", 
                PublisherSupplier.builder()"
14707,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @SuppressWarnings(""unused"")
            @Override"
14713,apply,"            public Integer apply(Inference inf, Integer cellsPerColumn) {
                Classification<Object> result = inf.getClassification(""dayOfWeek"");
                double day = mapToInputData((int[])inf.getLayerInput());
                if(day == 1.0) {
                    if(on) {
                        System.out.println(""\n========================="");
                        System.out.println(""CYCLE: "" + cycles);"
14714,createDayOfWeekInferencePrintout,"    private BiFunction<Inference, Integer, Integer> createDayOfWeekInferencePrintout(boolean on) {
        return new BiFunction<Inference, Integer, Integer>() {
            private int cycles = 1;"
14717,makeStream,"    public Stream<String> makeStream() {
        return Stream.of(
            ""7/2/10 0:00,21.2"","
14718,onNext,"            @Override public void onNext(Inference i) {}
        });"
14719,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override public void onNext(Inference i) {}
        });"
14723,onError,"            @Override public void onError(Throwable e) { 
                super.onError(e);
                e.printStackTrace(); 
            }"
14724,onCompleted,"            @Override public void onCompleted() {}
            @Override public void onError(Throwable e) { "
14729,getLoadedHotGymHierarchy,"    private Network getLoadedHotGymHierarchy() {
        Parameters p = NetworkTestHarness.getParameters();
        p = p.union(NetworkTestHarness.getNetworkDemoTestEncoderParams());
        p.set(KEY.RANDOM, new MersenneTwister(42));
        p.set(KEY.INFERRED_FIELDS, getInferredFieldsMap(""consumption"", CLAClassifier.class));

        Network network = Network.create(""test network"", p)
            .add(Network.createRegion(""r1"")"
14732,deepCompare,"    private void deepCompare(Object obj1, Object obj2) {
        try {
            assertTrue(DeepEquals.deepEquals(obj1, obj2));"
14733,onNext,"            @Override public void onNext(Inference i) {
                if(cycles++ == 10) {
                    assertEquals(21, i.getRecordNum());"
14735,onNext,"                        @Override public void onNext(byte[] bytes) {
                            assertEquals(10, i.getRecordNum());
                            assertTrue(bytes != null && bytes.length > 10);
                        }"
14736,onCompleted,"                        @Override public void onCompleted() {}
                        @Override public void onNext(byte[] bytes) {"
14738,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override public void onNext(Inference i) {
                if(cycles++ == 10) {"
14741,onNext,"                        @Override public void onNext(byte[] bytes) {
                            assertTrue(bytes != null && bytes.length > 10);
                        }"
14745,onCompleted,"            @Override public void onCompleted() {}
            @Override"
14754,onError,"                        @Override public void onError(Throwable e) { e.printStackTrace(); }
                        @Override public void onNext(byte[] bytes) {
                            assertTrue(bytes != null && bytes.length > 10);"
14755,onCompleted,"                        @Override public void onCompleted() {}
                        @Override public void onError(Throwable e) { e.printStackTrace(); }"
14761,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override
            public void onNext(Inference inf) {"
14775,onNext,"            public void onNext(Inference inf) {
                if(inf.getRecordNum() > 1105 && inf.getRecordNum() <= 1115) {
                    actualOutputs.add("""" + inf.getRecordNum() + "":  "" + Arrays.toString((int[])inf.getLayerInput()) + "", "" + inf.getAnomalyScore());"
14778,onNext,"            public void onNext(Inference inf) {
                if(inf.getRecordNum() > 1105 && inf.getRecordNum() <= 1115) {
                    actualOutputs.add("""" + inf.getRecordNum() + "":  "" + Arrays.toString((int[])inf.getLayerInput()) + "", "" + inf.getAnomalyScore());
                }"
14781,onNext,"            public void onNext(Inference inf) {
                if(inf.getRecordNum() > 1105 && inf.getRecordNum() <= 1115) {
                    sampleExpectedOutput.add("""" + inf.getRecordNum() + "":  "" + Arrays.toString((int[])inf.getLayerInput()) + "", "" + inf.getAnomalyScore());"
14785,onNext,"            public void onNext(Inference inf) {
                barrierSeeds[1] = r2.getSeed();
                try { barrier.await(); }catch(Exception b) { b.printStackTrace(); }
            }"
14788,onNext,"            public void onNext(Inference inf) {
                barrierSeeds[0] = r1.getSeed();
                try { barrier.await(); }catch(Exception b) { b.printStackTrace(); System.exit(1);}
            }"
14792,onNext,"            public void onNext(Inference inf) {
                assertNotNull(inf);
            }"
14799,testHierarchicalNetwork,"    public void testHierarchicalNetwork() {
        Network network = getLoadedHotGymHierarchy();
        try {
            SerialConfig config = new SerialConfig(""testSerializeHierarchy"", SerialConfig.SERIAL_TEST_DIR);"
14800,onNext,"            public void onNext(Inference spatialPoolerOutput) {
                System.out.println(""in onNext()"");
            }"
14801,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override
            public void onNext(Inference spatialPoolerOutput) {"
14805,eval,"            public boolean eval(double d) { return d < 0.01; }
        };
        int conditionCount = ArrayUtils.where(serializedMetrics.getLikelihoods(), cond).length;"
14818,testEnsurePathExists,"    public void testEnsurePathExists() {
        SerialConfig config = new SerialConfig(""testEnsurePathExists"", SerialConfig.SERIAL_TEST_DIR);
        PersistenceAPI persist = Persistence.get();
        persist.setConfig(config);
        
        try {
            ((PersistenceAccess)persist).ensurePathExists(config);
        }catch(Exception e) { fail(); }"
14819,cleanUp,"    public static void cleanUp() {
        System.out.println(""cleaning up..."");
        try {
            File serialDir = new File(System.getProperty(""user.home"") + File.separator + SerialConfig.SERIAL_TEST_DIR);"
14822,getPreviousCheckPoint,"    public String getPreviousCheckPoint(String checkPointFileName);
    /**"
14823,listCheckPointFiles,"    public List<String> listCheckPointFiles();
    /**"
14824,getLastCheckPointFileName,"    public String getLastCheckPointFileName();
    /**"
14825,getLastCheckPoint,"    public byte[] getLastCheckPoint();
    /**"
14827,setConfig,"    public void setConfig(SerialConfig config);
    /**"
14828,write,"    public <T extends Persistable, R> R write(T instance, String fileName);
    /**"
14829,write,"    public <T extends Persistable, R> R write(T instance);
    /**"
14830,read,"    public <R extends Persistable> R read(byte[] serializedBytes);
    /**"
14831,read,"    public <R extends Persistable> R read(String fileName);    
    /**"
14832,read,"    public <R extends Persistable> R read();
    /**"
14833,checkPointer,"    public CheckPointOp<byte[]> checkPointer(Network network);
    /**"
14834,storeAndGet,"    public <R> R storeAndGet(Network network);
    /**"
14835,store,"    public void store(Network network);
    /**"
14836,load,"    public Network load(String fileName) throws IOException;
    /**"
14838,serializer,"    public <T extends Persistable> SerializerCore serializer();
    /**"
14840,readFile,"        byte[] readFile(String filePath) throws IOException {
            Path path = testFileExists(filePath).toPath();
            return readFile(path);
        }"
14842,writeFile,"        void writeFile(SerialConfig config, byte[] bytes) throws IOException {
            writeFile(config.getFileName(), bytes, config.getOpenOptions());
        }"
14843,testFileExists,"        File testFileExists(String fileName) throws IOException, FileNotFoundException {
            try {
                readMonitor.lock();"
14844,ensurePathExists,"        File ensurePathExists(SerialConfig config, String fileName) throws IOException {
            File serializedFile = null;
        
            try {
                writeMonitor.lock();"
14845,ensurePathExists,"        File ensurePathExists(SerialConfig config) throws IOException {
            return ensurePathExists(config, config.getFileName());
        }"
14846,currentPath,"        public String currentPath() {
            return System.getProperty(""user.home"") + File.separator + serialConfig.getFileDir() +
                File.separator + serialConfig.getFileName();"
14847,getPreviousCheckPoint,"        public String getPreviousCheckPoint(String checkPointFileName) {
            final DateTimeFormatter f = checkPointFormatter;
            
            String defaultNamePortion = serialConfig.getCheckPointFileName();
            
            if(checkPointFileName.indexOf(defaultNamePortion) != -1) {
                checkPointFileName = checkPointFileName.substring(defaultNamePortion.length());
            }
            "
14848,listCheckPointFiles,"        public List<String> listCheckPointFiles() {
            List<String> chkPntFiles = null;
            
            try {
                readMonitor.lock();"
14849,getLastCheckPointFileName,"        public String getLastCheckPointFileName() {
            return lastCheckPointFileName.get();
        }"
14850,getLastCheckPoint,"        public byte[] getLastCheckPoint() {
            return lastBytes.get();
        }"
14851,getCheckPointFunction,"        <T extends Persistable, R> Function<T, R> getCheckPointFunction(Network network) {
            return (T t) -> {
                t.preSerialize();"
14852,checkPointer,"        public CheckPointOp<byte[]> checkPointer(Network network) {
            network.setCheckPointFunction(getCheckPointFunction(network));
            return network.getCheckPointOperator();
        }"
14854,store,"        public void store(Network network) {
            storeAndGet(network);
        }"
14855,load,"        public Network load(String fileName) throws IOException {
            LOGGER.debug(""PersistenceAccess load("" + fileName + "") called ..."");
            
            byte[] bytes = readFile(fileName);
            Network network = serializer().deSerialize(bytes);
            return network; "
14856,load,"        public Network load() {
            LOGGER.debug(""PersistenceAccess load() called ..."");
            
            String defaultFileName = serialConfig.getFileName();
            byte[] bytes;
            try {
                bytes = readFile(defaultFileName);
            } catch(IOException e) {"
14857,write,"        public <T extends Persistable, R> R write(T instance, String fileName) {
            LOGGER.debug(""PersistenceAccess persist(T, "" + fileName + "") called ..."");
            instance.preSerialize();
            
            byte[] bytes = serializer().serialize(instance);
            
            try {"
14858,write,"        public <T extends Persistable, R> R write(T instance) {
            LOGGER.debug(""PersistenceAccess persist(T) called ..."");
            instance.preSerialize();
            
            byte[] bytes = serializer().serialize(instance);
            
            try {"
14859,read,"        public <R extends Persistable> R read(byte[] serializedBytes) {
            LOGGER.debug(""PersistenceAccess reify(byte[]) called ..."");
            
            R r =  serializer().deSerialize(serializedBytes);
            return r.postDeSerialize();"
14860,read,"        public <R extends Persistable> R read(String fileName) {
            LOGGER.debug(""PersistenceAccess reify("" + fileName + "") called ..."");
            byte[] bytes;
            try {
                bytes = readFile(fileName);
            } catch(IOException e) {"
14861,read,"        public <R extends Persistable> R read() {
            LOGGER.debug(""PersistenceAccess reify() [serial config file name="" + serialConfig.getFileName() +""] called ..."");
            return read(serialConfig.getFileName());
        }"
14862,serializer,"        public SerializerCore serializer() {
            if(defaultSerializer == null) {
                defaultSerializer = new SerializerCore(SerialConfig.DEFAULT_REGISTERED_TYPES);
            }"
14863,getConfig,"        public SerialConfig getConfig() {
            return serialConfig;
        }"
14864,setConfig,"        public void setConfig(SerialConfig config) {
            this.serialConfig = config;
            this.checkPointFormatter = DateTimeFormat.forPattern(config.getCheckPointFormatString());
        }"
14865,get,"    public static PersistenceAPI get(SerialConfig config) {
        if(access == null) {
            access = new PersistenceAccess(config);
        }"
14866,get,"    public static PersistenceAPI get() {
        return get(new SerialConfig());
    }"
14867,postDeSerialize,"    public default <T> T postDeSerialize(T t) { return t; }
    
}"
14868,postDeSerialize,"    public default <T> T postDeSerialize() { return postDeSerialize((T)this); }
    /**
     * <em>FOR INTERNAL USE ONLY</em><p>"
14869,preSerialize,"    public default <T> T preSerialize() { return (T)this; }
    /**
     * <em>FOR INTERNAL USE ONLY</em><p>"
14871,generateCanned,"    public void generateCanned() {
        Integer[][] na = new Integer[][] {
             {0, 4, 10, 12, 18, 22, 26, 30, 31, 33, 39, 44, 45, 53, 55, 70, 73, 76, 77, 80, 83, 88, 90},
             {2, 4, 6, 8, 11, 13, 15, 16, 23, 29, 38, 42, 46, 48, 51, 55, 56, 59, 65, 67, 76, 77, 78, 82, 89},
             {2, 7, 10, 12, 19, 25, 38, 39, 44, 46, 49, 52, 56, 72, 77, 78, 79, 83, 84, 88, 94, 97, 98, 99},"
14872,sample,"    public LinkedHashSet<Integer> sample(List<Integer> population, int num) {
        List<Integer> retVal = new ArrayList<Integer>();
        int len = population.size();
        for(int i = 0;i < num;i++) {
            int j = (int)(random.nextDouble() * (len - i));
            retVal.add(population.get(j));
            population.set(j, population.get(len - i - 1));"
14873,xrange,"    public LinkedHashSet<Integer> xrange(int start, int upperBounds) {
        LinkedHashSet<Integer> retVal = new LinkedHashSet<Integer>();
        for(int i = start;i < upperBounds;i++) {
            retVal.add(i);
        }"
14874,compare,"            @Override public int compare(Integer arg0, Integer arg1) {
                int len0 = map.get(arg0).size();
                int len1 = map.get(arg1).size();
                return len0 == len1 ? 0 : len0 > len1 ? -1 : 1;
            }"
14877,numberMapForBits,"    public Map<Integer, Set<Integer>> numberMapForBits(Set<Integer> bits) {
        Map<Integer, Set<Integer>> numberMap = new TreeMap<Integer, Set<Integer>>();
        
        for(Integer bit : bits) {
            Set<Integer> numbers = numbersForBit(bit);"
14878,numbersForBit,"    public LinkedHashSet<Integer> numbersForBit(int bit) {
        LinkedHashSet<Integer> retVal = new LinkedHashSet<Integer>();
        for(Integer i : patterns.keySet()) {
            if(patterns.get(i).contains(bit)) {
                retVal.add(i);"
14879,addNoise,"    public Set<Integer> addNoise(Set<Integer> bits, double amount) {
        LinkedHashSet<Integer> newBits = new LinkedHashSet<>();
        
        for(Integer bit : bits) {
            if(random.nextDouble() < amount) {"
14880,get,"    public LinkedHashSet<Integer> get(int key) {
        return patterns.get(key);
    }"
14881,getW,"    public int getW() {
        if(wList != null) {
            return wList.get(random.nextInt(wList.size()));
        }"
14882,generate,"    public void generate() {
        LinkedHashSet<Integer> pattern;
        for(int i = 0;i < numPatterns;i++) {
            pattern = sample(new ArrayList<Integer>(xrange(0, n)), w);"
14885,testEncodeBitArray,"	public void testEncodeBitArray(){
		PassThroughEncoder<int[]> encoder = new PassThroughEncoder<>(9, 2);
		encoder.setName(""foo"");
		int bitmap[] = {0,0,0,1,0,1,0,0,0};
		int[] output = encoder.encode(bitmap);
		assertEquals(ArrayUtils.sum(bitmap),ArrayUtils.sum(output));  
		
		encoder = PassThroughEncoder.builder()
				.n(9)
				.w(ArrayUtils.where(output, ArrayUtils.WHERE_1).length)"
14888,getBucketValues,"    public <T> List<T> getBucketValues(Class<T> returnType) {
        return null;
    }"
14891,encodeIntoArray,"    public void encodeIntoArray(T t, int[] output) {
        int[] input = (int[])t;
        if (input.length != output.length)
            throw new IllegalArgumentException(format(""Different input (%d) and output (%d) sizes"", input.length, output.length));
        if (ArrayUtils.sum(input) != w)
            throw new IllegalArgumentException(format(""Input has %d bits but w was set to %d."", ArrayUtils.sum(input), w));
"
14893,getWidth,"    public int getWidth() {
        return n;
    }"
14895,init,"    public void init() {
        setForced(false);
    }"
14896,builder,"    public static Encoder.Builder<PassThroughEncoder.Builder, PassThroughEncoder<int[]>> builder() {
        return new PassThroughEncoder.Builder();
    }"
14903,testLogDiff,"    public void testLogDiff() {
        Parameters params = Parameters.getAllDefaultParameters();

        assertNotNull(params.get(KEY.SYN_PERM_ACTIVE_INC));

        Connections connections = new Connections();
        params.apply(connections);

        Parameters all = Parameters.getAllDefaultParameters();
        all.set(KEY.SYN_PERM_ACTIVE_INC, 0.9);
"
14904,testClearParameter,"    public void testClearParameter() {
        Parameters params = Parameters.getAllDefaultParameters();

        assertNotNull(params.get(KEY.SYN_PERM_ACTIVE_INC));

        params.clearParameter(KEY.SYN_PERM_ACTIVE_INC);"
14905,testKeys,"    public void testKeys() {
        Parameters params = Parameters.getAllDefaultParameters();
        assertTrue(params.keys() != null && params.keys().size() == 48); 
    }"
14906,testSize,"    public void testSize() {
        Parameters params = Parameters.getAllDefaultParameters();
        assertEquals(48, params.size());
    }"
14907,testCheckRange,"    public void testCheckRange() {
        Parameters params = Parameters.getAllDefaultParameters();

        try {
            params.set(KEY.SYN_PERM_ACTIVE_INC, 2.0);
            fail();
        }catch(Exception e) {
            assertEquals(e.getClass(), IllegalArgumentException.class);
            assertEquals(""Can not set Parameters Property 'synPermActiveInc' because of value '2.0' not in range. Range[0.0-1.0]"", e.getMessage());
        }"
14908,testGetMinMax,"    public void testGetMinMax() {
        KEY synPermActInc = KEY.SYN_PERM_ACTIVE_INC;
        assertEquals(0.0, synPermActInc.getMin());
        assertEquals(1.0, synPermActInc.getMax());
    }"
14909,testGetKeyByFieldName,"    public void testGetKeyByFieldName() {
        KEY expected = Parameters.KEY.POTENTIAL_PCT;
        assertEquals(expected, KEY.getKeyByFieldName(""potentialPct""));

        assertFalse(expected.equals(KEY.getKeyByFieldName(""random"")));"
14910,testUnion,"    public void testUnion() {
        Parameters params = Parameters.getAllDefaultParameters();
        Parameters arg = Parameters.getAllDefaultParameters();
        arg.set(KEY.CELLS_PER_COLUMN, 5);

        assertTrue((int)params.get(KEY.CELLS_PER_COLUMN) != 5);
        params.union(arg);
        assertTrue((int)params.get(KEY.CELLS_PER_COLUMN) == 5);"
14911,setPotentialPct,"        public void setPotentialPct(double potentialPct) {
            this.potentialPct = potentialPct;
        }"
14912,getPotentialPct,"        public double getPotentialPct() {
            return potentialPct;
        }"
14913,setColumnDimensions,"        public void setColumnDimensions(int[] columnDimensions) {
            this.columnDimensions = columnDimensions;
        }"
14914,getColumnDimensions,"        public int[] getColumnDimensions() {
            return columnDimensions;
        }"
14918,isSpecial,"    private boolean isSpecial(KEY key, Class<?> klazz) {
        if(int[].class.isAssignableFrom(klazz) ||
            key == KEY.FIELD_ENCODING_MAP) {
            "
14919,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        Parameters other = (Parameters)obj;"
14920,hashCode,"    public int hashCode() {
        Random rnd = (Random)paramMap.remove(KEY.RANDOM);
        int hc = DeepEquals.deepHashCode(paramMap);
        paramMap.put(KEY.RANDOM, rnd);
        
        return  hc;"
14921,writeForNetwork,"    public void writeForNetwork(FSTObjectOutput out) throws IOException {
        out.writeObject(this, Parameters.class);
        out.close();
    }"
14922,readForNetwork,"    public Parameters readForNetwork(FSTObjectInput in) throws Exception {
        Parameters result = (Parameters)in.readObject(Parameters.class);
        return result;
    }"
14923,buildParamStr,"    private void buildParamStr(StringBuilder spatialInfo, KEY key) {
        Object value = get(key);
        if (value instanceof int[]) {
            value = ArrayUtils.intArrayToString(value);
        }"
14925,setMaxBoost,"    public void setMaxBoost(double maxBoost) {
        paramMap.put(KEY.MAX_BOOST, maxBoost);
    }"
14926,setDutyCyclePeriod,"    public void setDutyCyclePeriod(int dutyCyclePeriod) {
        paramMap.put(KEY.DUTY_CYCLE_PERIOD, dutyCyclePeriod);
    }"
14927,setMinPctActiveDutyCycles,"    public void setMinPctActiveDutyCycles(double minPctActiveDutyCycles) {
        paramMap.put(KEY.MIN_PCT_ACTIVE_DUTY_CYCLES, minPctActiveDutyCycles);
    }"
14928,setMinPctOverlapDutyCycles,"    public void setMinPctOverlapDutyCycles(double minPctOverlapDutyCycles) {
        paramMap.put(KEY.MIN_PCT_OVERLAP_DUTY_CYCLES, minPctOverlapDutyCycles);
    }"
14929,setSynPermTrimThreshold,"    public void setSynPermTrimThreshold(double synPermTrimThreshold) {
        paramMap.put(KEY.SYN_PERM_TRIM_THRESHOLD, synPermTrimThreshold);
    }"
14930,setSynPermBelowStimulusInc,"    public void setSynPermBelowStimulusInc(double synPermBelowStimulusInc) {
        paramMap.put(KEY.SYN_PERM_BELOW_STIMULUS_INC, synPermBelowStimulusInc);
    }"
14931,setSynPermConnected,"    public void setSynPermConnected(double synPermConnected) {
        paramMap.put(KEY.SYN_PERM_CONNECTED, synPermConnected);
    }"
14932,setSynPermActiveInc,"    public void setSynPermActiveInc(double synPermActiveInc) {
        paramMap.put(KEY.SYN_PERM_ACTIVE_INC, synPermActiveInc);
    }"
14933,setSynPermInactiveDec,"    public void setSynPermInactiveDec(double synPermInactiveDec) {
        paramMap.put(KEY.SYN_PERM_INACTIVE_DEC, synPermInactiveDec);
    }"
14934,setStimulusThreshold,"    public void setStimulusThreshold(double stimulusThreshold) {
        paramMap.put(KEY.STIMULUS_THRESHOLD, stimulusThreshold);
    }"
14935,setNumActiveColumnsPerInhArea,"    public void setNumActiveColumnsPerInhArea(double numActiveColumnsPerInhArea) {
        paramMap.put(KEY.NUM_ACTIVE_COLUMNS_PER_INH_AREA, numActiveColumnsPerInhArea);
    }"
14936,setLocalAreaDensity,"    public void setLocalAreaDensity(double localAreaDensity) {
        paramMap.put(KEY.LOCAL_AREA_DENSITY, localAreaDensity);
    }"
14937,setGlobalInhibition,"    public void setGlobalInhibition(boolean globalInhibition) {
        paramMap.put(KEY.GLOBAL_INHIBITION, globalInhibition);
    }"
14938,setPotentialPct,"    public void setPotentialPct(double potentialPct) {
        paramMap.put(KEY.POTENTIAL_PCT, potentialPct);
    }"
14939,setInhibitionRadius,"    public void setInhibitionRadius(int inhibitionRadius) {
        paramMap.put(KEY.INHIBITION_RADIUS, inhibitionRadius);
    }"
14940,setPotentialRadius,"    public void setPotentialRadius(int potentialRadius) {
        paramMap.put(KEY.POTENTIAL_RADIUS, potentialRadius);
    }"
14941,setInputDimensions,"    public void setInputDimensions(int[] inputDimensions) {
        paramMap.put(KEY.INPUT_DIMENSIONS, inputDimensions);
    }"
14942,setPermanenceDecrement,"    public void setPermanenceDecrement(double permanenceDecrement) {
        paramMap.put(KEY.PERMANENCE_DECREMENT, permanenceDecrement);
    }"
14943,setPermanenceIncrement,"    public void setPermanenceIncrement(double permanenceIncrement) {
        paramMap.put(KEY.PERMANENCE_INCREMENT, permanenceIncrement);
    }"
14944,setConnectedPermanence,"    public void setConnectedPermanence(double connectedPermanence) {
        paramMap.put(KEY.CONNECTED_PERMANENCE, connectedPermanence);
    }"
14945,setInitialPermanence,"    public void setInitialPermanence(double initialPermanence) {
        paramMap.put(KEY.INITIAL_PERMANENCE, initialPermanence);
    }"
14946,setSeed,"    public void setSeed(int seed) {
        paramMap.put(KEY.SEED, seed);
    }"
14947,setMaxNewSynapseCount,"    public void setMaxNewSynapseCount(int count) {
        paramMap.put(KEY.MAX_NEW_SYNAPSE_COUNT, count);
    }"
14948,setMaxSegmentsPerCell,"    public void setMaxSegmentsPerCell(int maxSegmentsPerCell) {
        paramMap.put(KEY.MAX_SEGMENTS_PER_CELL, maxSegmentsPerCell);
    }"
14949,setMaxSynapsesPerSegment,"    public void setMaxSynapsesPerSegment(int maxSynapsesPerSegment) {
        paramMap.put(KEY.MAX_SYNAPSES_PER_SEGMENT, maxSynapsesPerSegment);
    }"
14950,setMinThreshold,"    public void setMinThreshold(int minThreshold) {
        paramMap.put(KEY.MIN_THRESHOLD, minThreshold);
    }"
14951,setLearningRadius,"    public void setLearningRadius(int learningRadius) {
        paramMap.put(KEY.LEARNING_RADIUS, learningRadius);
    }"
14952,setActivationThreshold,"    public void setActivationThreshold(int activationThreshold) {
        paramMap.put(KEY.ACTIVATION_THRESHOLD, activationThreshold);
    }"
14953,setCellsPerColumn,"    public void setCellsPerColumn(int cellsPerColumn) {
        paramMap.put(KEY.CELLS_PER_COLUMN, cellsPerColumn);
    }"
14954,setColumnDimensions,"    public void setColumnDimensions(int[] columnDimensions) {
        paramMap.put(KEY.COLUMN_DIMENSIONS, columnDimensions);
    }"
14955,setRandom,"    public void setRandom(Random r) {
        paramMap.put(KEY.RANDOM, r);
    }"
14956,logDiff,"    public boolean logDiff(Object cn) {
        if (cn == null) {
            throw new IllegalArgumentException(""cn Object is required and can not be null"");
        }
        boolean result = false;
        BeanUtil beanUtil = BeanUtil.getInstance();
        BeanUtil.PropertyInfo[] properties = beanUtil.getPropertiesInfoForBean(cn.getClass());
        for (int i = 0; i < properties.length; i++) {"
14957,clearParameter,"    public void clearParameter(KEY key) {
        paramMap.remove(key);
    }"
14958,get,"    public Object get(KEY key) {
        return paramMap.get(key);
    }"
14959,set,"    public void set(KEY key, Object value) {
        paramMap.put(key, value);
    }"
14960,empty,"    public static Parameters empty() {
        return new Parameters();
    }"
14961,copy,"    public Parameters copy() {
        return new Parameters().union(this);
    }"
14962,keys,"    public Set<KEY> keys() {
        Set<KEY> retVal = paramMap.keySet();
        return retVal;
    }"
14963,union,"    public Parameters union(Parameters p) {
        for(KEY k : p.paramMap.keySet()) {
            set(k, p.get(k));
        }"
14964,apply,"    public void apply(Object cn) {
        BeanUtil beanUtil = BeanUtil.getInstance();
        Set<KEY> presentKeys = paramMap.keySet();
        synchronized (paramMap) {
            for (KEY key : presentKeys) {"
14965,getParameters,"    private static Parameters getParameters(Map<KEY, Object> map) {
        Parameters result = new Parameters();
        for (KEY key : map.keySet()) {
            result.set(key, map.get(key));
        }"
14966,getEncoderDefaultParameters,"    public static Parameters getEncoderDefaultParameters() {
        return getParameters(DEFAULTS_ENCODER);
    }"
14967,getSpatialDefaultParameters,"    public static Parameters getSpatialDefaultParameters() {
        return getParameters(DEFAULTS_SPATIAL);
    }"
14968,getTemporalDefaultParameters,"    public static Parameters getTemporalDefaultParameters() {
        return getParameters(DEFAULTS_TEMPORAL);
    }"
14969,getAllDefaultParameters,"    public static Parameters getAllDefaultParameters() {
        return getParameters(DEFAULTS_ALL);
    }"
14970,size,"    public int size() {
        return paramMap.size();
    }"
14971,put,"        @Override public Object put(KEY key, Object value) {
            if (value != null) {
                if (!key.getFieldType().isInstance(value)) {
                    throw new IllegalArgumentException("
14972,checkRange,"        public boolean checkRange(Number value) {
            if (value == null) {
                throw new IllegalArgumentException(""checkRange argument can not be null"");
            }"
14973,getMax,"        public Number getMax() {
            return max;
        }"
14974,getMin,"        public Number getMin() {
            return min;
        }"
14975,getFieldName,"        public String getFieldName() {
            return fieldName;
        }"
14976,getFieldType,"        public Class<?> getFieldType() {
            return fieldType;
        }"
14977,getKeyByFieldName,"        public static KEY getKeyByFieldName(String fieldName) {
            return fieldMap.get(fieldName);
        }"
14978,compute,"        public void compute(Inference inference) {
            internalDispatch.onNext(inference);
        }"
14979,subscribe,"        public void subscribe(Observer<Inference> subscriber) {
            clientObservable.subscribe(subscriber);
        }"
14980,call,"                @Override public void call(Subscriber<? super Inference> t) {
                    observers.add((Observer<Inference>)t);
                }"
14981,onNext,"                @Override public void onNext(Inference i) {
                    for(Observer<Inference> o : observers) {
                        o.onNext(i);"
14982,onError,"                @Override public void onError(Throwable e) { e.printStackTrace(); }
                @Override public void onNext(Inference i) {
                    for(Observer<Inference> o : observers) {"
14983,onCompleted,"                @Override public void onCompleted() {}
                @Override public void onError(Throwable e) { e.printStackTrace(); }"
14986,onNext,"            public void onNext(Inference i) {
                assertTrue(i.getAnomalyScore() == 0.0);
            }"
14987,testCheckObservable_Incorrectly_Passes,"    public void testCheckObservable_Incorrectly_Passes() {
        FauxNetwork network = new FauxNetwork();
        
        TestObserver<Inference> observer = new TestObserver<Inference>() {
            @Override
            public void onNext(Inference i) {
                assertTrue(i.getAnomalyScore() == 0.0);
            }
        };"
14990,onCompleted,"            @Override public void onCompleted() {}
            "
14991,call,"            @Override public void call(Subscriber<? super Inference> subscriber) {
                ManualInput inf = new ManualInput();
                inf.anomalyScore(1.0);
                
                subscriber.onNext(inf);"
14992,testDirectObservableSubscriberCanCatchFailedAssertions,"    public void testDirectObservableSubscriberCanCatchFailedAssertions() {
        Observable<Inference> observable = Observable.create(new Observable.OnSubscribe<Inference>() {
            @Override public void call(Subscriber<? super Inference> subscriber) {
                ManualInput inf = new ManualInput();
                inf.anomalyScore(1.0);"
14993,hasCompletions,"    protected <T> boolean hasCompletions(TestObserver<T> obs) {
        return !obs.getOnCompletedEvents().isEmpty();
    }"
14994,hasErrors,"    protected <T> boolean hasErrors(TestObserver<T> obs) {
        return !obs.getOnErrorEvents().isEmpty();
    }"
14995,checkObserver,"    protected <T> void checkObserver(TestObserver<T> obs) {
        if(obs.getOnErrorEvents().size() > 0) {
            Throwable e = (Throwable) obs.getOnErrorEvents().get(0);"
14999,create,"    public static <T> Sensor<T> create(SensorParams p) {
        ObservableSensor<String[]> sensor = 
            (ObservableSensor<String[]>)new ObservableSensor<String[]>(p);
        "
15000,next,"            @Override public String next() {
                return observerator.next();
            }"
15001,hasNext,"            @Override public boolean hasNext() { return observerator.hasNext(); }
            @Override public String next() {
                return observerator.next();"
15002,getGeospatialTestEncoderParams,"    public static Parameters getGeospatialTestEncoderParams() {
    	Map<String, Map<String, Object>> fieldEncodings = getGeospatialFieldEncodingMap();
    	
    	Parameters p = Parameters.getEncoderDefaultParameters();
        p.set(KEY.FIELD_ENCODING_MAP, fieldEncodings);
"
15005,getInferredFieldsMap,"    public static Map<String, Class<? extends Classifier>> getInferredFieldsMap(
            String field, Class<? extends Classifier> classifier) {
        Map<String, Class<? extends Classifier>> inferredFieldsMap = new HashMap<>();
        inferredFieldsMap.put(field, classifier);
        return inferredFieldsMap;"
15006,getDayDemoTestEncoderParams,"    public static Parameters getDayDemoTestEncoderParams() {
        Map<String, Map<String, Object>> fieldEncodings = getDayDemoFieldEncodingMap();

        Parameters p = Parameters.getEncoderDefaultParameters();
        p.set(KEY.FIELD_ENCODING_MAP, fieldEncodings);
"
15008,getHotGymTestEncoderParams,"    public static Parameters getHotGymTestEncoderParams() {
        Map<String, Map<String, Object>> fieldEncodings = getHotGymFieldEncodingMap();

        Parameters p = Parameters.getEncoderDefaultParameters();
        p.set(KEY.FIELD_ENCODING_MAP, fieldEncodings);
"
15028,onNext,"            @Override public void onNext(Inference output) {}
        });"
15029,onError,"            @Override public void onError(Throwable e) { 
                super.onError(e);
                errorMessage = e.getMessage();
                network.halt();
            }"
15034,onCompleted,"            @Override public void onCompleted() {
                assertEquals(0, anomaly, 0);
                completed = true;
            }"
15044,testFluentBuildSemantics,"    public void testFluentBuildSemantics() {
        Parameters p = NetworkTestHarness.getParameters();
        p = p.union(NetworkTestHarness.getNetworkDemoTestEncoderParams());
        p.set(KEY.RANDOM, new MersenneTwister(42));
        
        Map<String, Object> anomalyParams = new HashMap<>();
        anomalyParams.put(KEY_MODE, Mode.LIKELIHOOD);
        "
15045,onNext,"            @Override public void onNext(Inference i) {
                bottomInference = (ManualInput)i;
            }"
15046,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override public void onNext(Inference i) {
                bottomInference = (ManualInput)i;"
15048,onNext,"            @Override public void onNext(Inference i) {
                topInference = (ManualInput)i;
            }"
15049,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override public void onNext(Inference i) {
                topInference = (ManualInput)i;"
15051,onNext,"            @Override public void onNext(Inference i) {
                netInference = (ManualInput)i;
                if(r1.getHead().getInference().getPredictiveCells().size() > 0 && 
                    r2.getHead().getInference().getPredictiveCells().size() > 0) {"
15052,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override public void onNext(Inference i) {
                netInference = (ManualInput)i;"
15057,onCompleted,"            @Override public void onCompleted() {
                onCompleteStr = ""On completed reached!"";
            }"
15068,onCompleted,"            @Override public void onCompleted() {
                onCompleteStr2 = ""On completed reached!"";
            }"
15069,onNext,"            @Override public void onNext(Inference i) {
                lines.add(i.getRecordNum() + "","" + 
                    i.getClassifierInput().get(""consumption"").get(""inputValue"") + "","" + i.getAnomalyScore());
                "
15070,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override public void onNext(Inference i) {
                lines.add(i.getRecordNum() + "","" + "
15083,testResetMethod,"    public void testResetMethod() {
        
        Parameters p = NetworkTestHarness.getParameters();
        Network network = new Network(""ResetTestNetwork"", p)
            .add(Network.createRegion(""r1"")
                .add(Network.createLayer(""l1"", p).add(new TemporalMemory())));
        try {"
15092,stringValue,"    public String stringValue(Double valueIndex) {
        String recordOut = """";
        BigDecimal bdValue = new BigDecimal(valueIndex).setScale(3, RoundingMode.HALF_EVEN);
        switch(bdValue.intValue()) {
            case 1: recordOut = ""Monday (1)"";break;
            case 2: recordOut = ""Tuesday (2)"";break;"
15096,testComputeAnomaly_5of7,"    public void testComputeAnomaly_5of7() {
        Map<String, Object> params = new HashMap<>();
        params.put(KEY_MODE, Mode.PURE);
        Anomaly anomalyComputer = Anomaly.create(params);
        double score = anomalyComputer.compute(new int[] { 0, 1, 8, 10, 13, 16, 18 }, new int[] { 0, 10, 13, 16, 18 }, 0, 0);
        assertEquals(0.2857142857142857, score, 0);
    }"
15097,testComputeAnomaly_4of6,"    public void testComputeAnomaly_4of6() {
        Map<String, Object> params = new HashMap<>();
        params.put(KEY_MODE, Mode.PURE);
        Anomaly anomalyComputer = Anomaly.create(params);
        double score = anomalyComputer.compute(new int[] { 2, 5, 6, 11, 14, 18 }, new int[] { 2, 6, 11, 14 }, 0, 0);
        assertEquals(0.3333333333333333, score, 0);
    }"
15098,testNetworkAPI,"    public void testNetworkAPI() {
        Network network = getNetwork();
        
        network.start();
        
        Publisher publisher = network.getPublisher();
        
        for(int i = 0;i < 200;i++) {"
15099,testSimpleLayer,"    public void testSimpleLayer() {
        SimpleLayer layer = new SimpleLayer();
        
        for(int i = 0;i < 200;i++) {"
15100,compare,"    public static void compare() {
        System.out.println(""USING SAMPLE #: "" + SAMPLE_WEEK);
        assertEquals(napiSamples.size(), simpleSamples.size());
        
        if(doPrintout) {
            System.out.println(""\n--------------------------------"");"
15101,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        Network other = (Network)obj;
        if(isLearn != other.isLearn)
            return false;
        if(name == null) {
            if(other.name != null)"
15103,checkName,"    private static void checkName(String name) {
        if(name.indexOf("":"") != -1) {
            throw new IllegalArgumentException(""\"":\"" is a reserved character."");"
15104,getEncoder,"    public MultiEncoder getEncoder() {
        return this.encoder;
    }"
15105,setEncoder,"    public void setEncoder(MultiEncoder e) {
        this.encoder = e;
    }"
15106,getSensor,"    public HTMSensor<?> getSensor() {
        return sensor;
    }"
15107,setSensor,"    public void setSensor(HTMSensor<?> sensor) {
        this.sensor = sensor;
        this.sensor.initEncoder(this.parameters);
    }"
15108,getParameters,"    public Parameters getParameters() {
        return parameters;
    }"
15109,lookup,"    public Region lookup(String regionName) {
        for(Region r : regions) {
            if(r.getName().equals(regionName)) {
                return r;"
15110,getSensorRegion,"    public Region getSensorRegion() {
        return sensorRegion;
    }"
15111,setSensorRegion,"    public void setSensorRegion(Region r) {
        this.sensorRegion = r;
    }"
15112,getRegions,"    public List<Region> getRegions() {
        return new ArrayList<Region>(regions);
    }"
15113,close,"    public Network close() {
        regions.forEach(region -> region.close());
        return this;
    }"
15114,add,"    public Network add(Region region) {
        regions.add(region);
        region.setNetwork(this);
        return this;
    }"
15119,addDummySubscriber,"    void addDummySubscriber() {
        observe().subscribe(new Subscriber<Inference>() {
            @Override public void onCompleted() {}"
15120,computeImmediate,"    public <T> Inference computeImmediate(T input) {
        if(isThreadRunning) {
            throw new IllegalStateException(""Cannot call computeImmediate() when Network has been started."");
        }
        
        if(tail == null && regions.size() == 1) {
            this.tail = regions.get(0);"
15121,compute,"    public <T> void compute(T input) {
        if(tail == null && regions.size() == 1) {
            this.tail = regions.get(0);
        }
        "
15122,iterator,"    public Iterator<Region> iterator() {
        return getRegions().iterator();
    }"
15123,isTail,"    boolean isTail(Layer<?> l) {
        if(regions.size() == 1) {
            this.tail = regions.get(0);
        }"
15124,getTail,"    public Region getTail() {
        if(regions.size() == 1) {
            this.tail = regions.get(0);
        }"
15125,getHead,"    public Region getHead() {
        if(regions.size() == 1) {
            this.head = regions.get(0);
        }"
15126,observe,"    public Observable<Inference> observe() {
        if(regions.size() == 1) {
            this.head = regions.get(0);
        }"
15127,resetRecordNum,"    public void resetRecordNum() {
        for(Region r : regions) {
            r.resetRecordNum();"
15128,reset,"    public void reset() {
        for(Region r : regions) {
            r.reset();"
15130,setLearn,"    public void setLearn(boolean isLearn) {
        this.isLearn = isLearn;
        for(Region r : regions) {
            r.setLearn(isLearn);"
15131,getRecordNum,"    public int getRecordNum() {
        if(regions.size() == 1) {
            this.tail = regions.get(0);
        }"
15132,isHalted,"    public boolean isHalted() {
        if(regions.size() == 1) {
            this.tail = regions.get(0);
        }"
15134,isThreadedOperation,"    public boolean isThreadedOperation() {
        return this.isThreadRunning;
    }"
15135,start,"    public void start() {
        if(regions.size() < 1) {
            throw new IllegalStateException(""Nothing to start - 0 regions"");
        }

        Region tail = regions.get(0);
        Region upstream = tail;"
15137,isMultiRegion,"    public boolean isMultiRegion() {
        return regions.size() > 1;
    }"
15138,getPublisher,"    public Publisher getPublisher() {
        if(publisher == null) {
            throw new NullPointerException(""A Supplier must be built first. "" +
                ""please see Network.getPublisherSupplier()"");"
15139,setPublisher,"    void setPublisher(Publisher p) {
        this.publisher = p;
        publisher.setNetwork(this);
    }"
15140,restart,"    public void restart(boolean startAtIndex) {
        if(regions.size() < 1) {
            throw new IllegalStateException(""Nothing to start - 0 regions"");
        }

        Region tail = regions.get(0);
        Region upstream = tail;"
15141,restart,"    public void restart() {
        restart(true);
    }"
15142,getCheckPointOperator,"    CheckPointOp<byte[]> getCheckPointOperator() {
        LOGGER.debug(""Network ["" + getName() + ""] called checkPoint() at: "" + (new DateTime()));
        
        if(regions.size() == 1) {
            this.tail = regions.get(0);"
15143,setCheckPointFunction,"    public <T extends Persistable, R> void setCheckPointFunction(Function<T, R> f) {
        this.checkPointFunction = (Function<Persistable, ?>)f;
    }"
15144,internalCheckPointOp,"    byte[] internalCheckPointOp() {
        shouldDoHalt = false;
        byte[] serializedBytes = (byte[])checkPointFunction.apply(this);
        shouldDoHalt = true;
        return serializedBytes;
    }"
15147,createLayer,"    public static Layer<?> createLayer(String name, Parameters p) {
        Network.checkName(name);
        return new Layer(name, null, p);
    }"
15148,createRegion,"    public static Region createRegion(String name) {
        Network.checkName(name);

        Region r = new Region(name, null);
        return r;"
15149,create,"    public static Network create(String name, Parameters parameters) {
        return new Network(name, parameters);
    }"
15150,testRightVecSumAtNZ,"    public void testRightVecSumAtNZ() {
        int[][] connectedSynapses = new int[][]{
            {1, 0, 0, 0, 0, 1, 0, 0, 0, 0},
            {0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
            {0, 0, 1, 0, 0, 0, 0, 1, 0, 0},
            {0, 0, 0, 1, 0, 0, 0, 0, 1, 0},
            {0, 0, 0, 0, 1, 0, 0, 0, 0, 1}};
            "
15151,testVecLpDist,"    public void testVecLpDist() {
        NearestNeighbor nn = new NearestNeighbor(5, 10);
        assertNull(nn.vecLpDist(0.0, null, false));
    }"
15152,rightVecSumAtNZ,"    public int[] rightVecSumAtNZ(int[] inputVector, int[][] base) {
        int[] results = new int[base.length];
        for (int i = 0; i < base.length; i++) {
            for (int j = 0;j < base[i].length;j++) {
                if (inputVector[j] != 0)"
15153,vecLpDist,"    public double[] vecLpDist(double distanceNorm, int[] inputPattern, boolean takeRoot) {
        return null;
    }"
15155,testDuplicatesNotAllowed,"    public void testDuplicatesNotAllowed() {
        try {
            new NamedTuple(new String[] { ""one"", ""one"" }, 1, 2);"
15156,testGetValues,"    public void testGetValues() {
        Set<Integer> set = new LinkedHashSet<>();
        set.add(1);
        set.add(2);
        set.add(3);
        
        NamedTuple nt = new NamedTuple(new String[] { ""one"", ""two"", ""three"" }, set.toArray());
        Collection<?> values = nt.values();
        assertTrue(values.size() == 3);
        assertTrue(set.containsAll(values) && values.containsAll(set));"
15161,interleave,"    static <F, S> Object[] interleave(F first, S second) {
        int flen, slen;
        Object[] retVal = new Object[(flen = Array.getLength(first)) + (slen = Array.getLength(second))];
        for(int i = 0, j = 0, k = 0;i < flen || j < slen;) {
            if(i < flen) {
                retVal[k++] = Array.get(first, i++);"
15162,equals,"        public boolean equals(Object obj) {
            if(this == obj)
                return true;
            if(obj == null)
                return false;
            if(getClass() != obj.getClass())
                return false;
            Bucket other = (Bucket)obj;
            if(idx != other.idx)"
15163,hashCode,"        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + idx;
            result = prime * result + ((last == null) ? 0 : last.hashCode());
            return result;
        }"
15164,toString,"        public String toString() {
            StringBuilder sb = new StringBuilder(""Bucket: "").append(idx).append(""\n"");
            Entry l = last;
            while(l != null) {
                sb.append(""\t"").append(l.toString()).append(""\n"");
                l = l.prev;"
15165,find,"        Entry find(String key, int hash) {
            if(last == null) return null;
            
            Entry found = last;
            while(found.prev != null && !found.key.equals(key)) {
                found = found.prev;"
15166,add,"        void add(Entry e) {
            if(last == null) {
                last = e;"
15167,equals,"        public boolean equals(Object obj) {
            if(this == obj)
                return true;
            if(obj == null)
                return false;
            if(getClass() != obj.getClass())
                return false;
            Entry other = (Entry)obj;
            if(hash != other.hash)
                return false;"
15168,hashCode,"        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + hash;
            result = prime * result + ((key == null) ? 0 : key.hashCode());
            return result;
        }"
15169,toString,"        public String toString() {
            return new StringBuilder(""key="").append(key)
                .append("", value="").append(value)"
15170,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(getClass() != obj.getClass())
            return false;
        if(!super.equals(obj))
            return false;
        NamedTuple other = (NamedTuple)obj;"
15171,hashCode,"    public int hashCode() {
        if(hash == 0) {
            final int prime = 31;
            int result = super.hashCode();"
15172,hashIndex,"    protected int hashIndex(String key) {
        return Math.abs(key.hashCode()) % entries.length;
    }"
15173,addEntry,"    protected void addEntry(String key, Object value) {
        int hash = hashIndex(key);
        Entry e;
        if((e = entries[hash].find(key, hash)) != null && e.key.equals(key)) {
            throw new IllegalStateException(
                ""Duplicates Not Allowed - Key: "" + key + "", reinserted."");
        }"
15174,size,"    public int size() {
        return super.size() / 2;
    }"
15175,toString,"    public String toString() {
        StringBuilder sb = new StringBuilder();
        for(int i = 0;i < entries.length;i++) {
            sb.append(entries[i].toString());
        }"
15176,hasKey,"    public boolean hasKey(String key) {
        if(entries == null) return false;
        
        int hash = hashIndex(key);
        Entry e = entries[hash].find(key, hash);
        return e != null;"
15177,get,"    public Object get(String key) {
        if(key == null) return null;
        
        int hash = hashIndex(key);
        Entry e = entries[hash].find(key, hash);
        return e == null ? null : e.value;"
15178,values,"    public Collection<Object> values() {
        List<Object> retVal = new ArrayList<>();
        for(int i = 1;container != null && i < all().size();i+=2) {
            retVal.add(all().get(i));
        }"
15179,keys,"    public String[] keys() {
        if(keys == null || keys.length < 1) return EMPTY_KEYS;
        
        return Arrays.copyOf(keys, keys.length);"
15180,remake,"    protected void remake(String[] keys, Object... objects) {
        super.remake(interleave(keys, objects));
        
        if(keys.length != objects.length) {
            throw new IllegalArgumentException(""Keys and values must be same length."");
        }
        
        this.keys = keys;
        "
15181,testClear,"    public void testClear() {
        MutableTuple mt = new MutableTuple(""1"", ""2"", 3, new int[] { 4 });
        assertEquals(""1"", mt.get(0));
        assertEquals(""2"", mt.get(1));
        assertEquals(3, mt.get(2));
        assertArrayEquals(new int[] { 4 }, (int[])mt.get(3));
        
        mt.clear();
        assertTrue(mt.size() == 0);
        assertTrue(mt.all().isEmpty());
        "
15182,testSet,"    public void testSet() {
        MutableTuple mt = new MutableTuple(""1"", ""2"", 3, new int[] { 4 });
        assertEquals(""1"", mt.get(0));
        assertEquals(""2"", mt.get(1));
        assertEquals(3, mt.get(2));
        assertArrayEquals(new int[] { 4 }, (int[])mt.get(3));
        
        mt.set(1, 2);
        assertEquals(2, mt.get(1));"
15183,clear,"    public void clear() {
        for(int i = 0;i < container.length;i++) container[i] = null;
        container = new Object[0];
    }"
15184,set,"    public void set(int index, Object o) {
        container[index] = o;
    }"
15188,clear,"    public void clear() {
        for(int i = 0;i < container.length;i++) container[i] = null;
    }"
15193,testSerialAdditions,"	public void testSerialAdditions() {
		setUp();
		initME();
		
		ScalarEncoder dow = ScalarEncoder.builder()
				.w(3)
				.resolution(1)
				.minVal(1)
				.maxVal(8)
				.periodic(true)
				.name(""day of week"")
				.forced(true)
				.build();
		me.addEncoder(""dow"", dow);
		
		ScalarEncoder myval = ScalarEncoder.builder()"
15194,testAdaptiveScalarEncoder,"	public void testAdaptiveScalarEncoder() {
		setUp();
		initME();
		Encoder.Builder<?,?> ase = me.getBuilder(""AdaptiveScalarEncoder"");
		assertNotNull(ase);
		
		try {"
15195,initME,"	private void initME() {
		me = builder.build();
	}"
15196,setUp,"	private void setUp() {
        builder = MultiEncoder.builder().name("""");
    }"
15210,getEncoderMap,"    private static Map<String, Object> getEncoderMap(Map<String, Map<String, Object>> encoderSettings, String encoderType) {
        for(String key : encoderSettings.keySet()) {
            String keyType = null;
            if((keyType = (String)encoderSettings.get(key).get(""encoderType"")) != null &&"
15211,setGeoFieldBits,"    private static void setGeoFieldBits(GeospatialCoordinateEncoder.Builder b, Map<String, Object> m, String key) {
        Object obj = m.get(key);
        if(obj instanceof String) {
            String t = (String)m.get(key);"
15212,configureGeoBuilder,"    private static void configureGeoBuilder(MultiEncoder multiEncoder, Map<String, Map<String, Object>> encoderSettings, GeospatialCoordinateEncoder.Builder builder) {
        Map<String, Object> geoEncoderSettings = getEncoderMap(encoderSettings, ""GeospatialCoordinateEncoder"");
        if(geoEncoderSettings == null) {
            throw new IllegalStateException(""Input requires missing GeospatialCoordinateEncoder settings mapping."");
        }"
15213,setDateFieldBits,"    private static void setDateFieldBits(DateEncoder.Builder b, Map<String, Object> m, String key) {
        Tuple t = (Tuple)m.get(key);
        switch(key) {
            case ""season"" : {"
15214,configureDateBuilder,"    private static void configureDateBuilder(MultiEncoder multiEncoder, Map<String, Map<String, Object>> encoderSettings, DateEncoder.Builder b) {
        Map<String, Object> dateEncoderSettings = getEncoderMap(encoderSettings, ""DateEncoder"");
        if(dateEncoderSettings == null) {
            throw new IllegalStateException(""Input requires missing DateEncoder settings mapping."");
        }"
15215,configureCategoryBuilder,"    private static void configureCategoryBuilder(MultiEncoder multiEncoder, 
        Map<String, Object> encoderSettings, Builder<?,?> builder) {
        
        multiEncoder.setValue(builder, ""n"", encoderSettings.get(""n""));
        multiEncoder.setValue(builder, ""w"", encoderSettings.get(""w""));
        multiEncoder.setValue(builder, ""forced"", encoderSettings.get(""forced""));"
15218,getBucketValues,"    public <S> List<S> getBucketValues(Class<S> returnType) {
        return null;
    }"
15219,setLearning,"    public void setLearning(boolean learningEnabled) {
        for (EncoderTuple t : getEncoders(this)) {
            Encoder encoder = t.getEncoder();"
15221,getName,"    public String getName() {
        if (name == null) return """";
        else return name;"
15222,getW,"    public int getW() {
        return width;
    }"
15223,getN,"    public int getN() {
        return width;
    }"
15225,setValue,"    public void setValue(Encoder.Builder builder, String param, Object value)  {
        switch(param) {
            case ""n"":"
15226,getBuilder,"    public Encoder.Builder<?,?> getBuilder(String encoderName) {
        switch(encoderName) {
            case ""CategoryEncoder"":"
15227,getEncoderOfType,"    public <T extends Encoder<?>> T getEncoderOfType(FieldMetaType fmt) {
        Encoder<?> retVal = null;
        for(Tuple t : getEncoders(this)) {
            Encoder<?> enc = (Encoder<?>)t.get(1);
            Set<FieldMetaType> subTypes = enc.getDecoderOutputFieldTypes();"
15228,addMultipleEncoders,"    public MultiEncoder addMultipleEncoders(Map<String, Map<String, Object>> fieldEncodings) {
        return MultiEncoderAssembler.assemble(this, fieldEncodings);
    }"
15229,addEncoder,"    public void addEncoder(String name, Encoder child) {
        super.addEncoder(this, name, child, width);

        for (Object d : child.getDescription()) {
            Tuple dT = (Tuple) d;"
15230,encodeEachField,"    public List<int[]> encodeEachField(Object input) {
        List<int[]> encodings = new ArrayList<int[]>();

        for (EncoderTuple t : getEncoders(this)) {
            String name = t.getName();"
15231,encodeField,"    public int[] encodeField(String fieldName, Object value) {
        for (EncoderTuple t : getEncoders(this)) {
            String name = t.getName();
            Encoder encoder = t.getEncoder();"
15232,encodeIntoArray,"    public void encodeIntoArray(Object input, int[] output) {
        for (EncoderTuple t : getEncoders(this)) {
            String name = t.getName();"
15233,setFieldStats,"    public void setFieldStats(String fieldName, Map<String, Double> fieldStatistics) {
        for (EncoderTuple t : getEncoders(this)) {
            String name = t.getName();"
15235,builder,"    public static Encoder.Builder<MultiEncoder.Builder, MultiEncoder> builder() {
        return new MultiEncoder.Builder();
    }"
15237,testProperConstruction,"    public void testProperConstruction() {
        try {
            new MovingAverage(new TDoubleArrayList(new double[] { 3., 4., 5., }), 0);"
15238,testMovingAverageSlidingWindowInit,"    public void testMovingAverageSlidingWindowInit() {
        MovingAverage ma = new MovingAverage(new TDoubleArrayList(new double[] { 3., 4., 5., }), 3);
        assertEquals(new TDoubleArrayList(new double[] { 3., 4., 5., }), ma.getSlidingWindow());
        
        ma = new MovingAverage(null, 3);
        assertEquals(new TDoubleArrayList(), ma.getSlidingWindow());
        "
15241,equals,"        public boolean equals(Object obj) {
            if(this == obj)
                return true;
            if(obj == null)
                return false;
            if(getClass() != obj.getClass())
                return false;
            Calculation other = (Calculation)obj;
            if(Double.doubleToLongBits(average) != Double.doubleToLongBits(other.average))
                return false;"
15243,getTotal,"        public double getTotal() {
            return total;
        }"
15244,getHistoricalValues,"        public TDoubleList getHistoricalValues() {
            return historicalValues;
        }"
15245,getAverage,"        public double getAverage() {
            return average;
        }"
15246,copyInto,"    private static Calculation copyInto(Calculation c, TDoubleList slidingWindow, double average, double total) {
        c.historicalValues = slidingWindow;
        c.average = average;
        c.total = total;
        return c;
    }"
15247,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        MovingAverage other = (MovingAverage)obj;
        if(calc == null) {"
15248,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((calc == null) ? 0 : calc.hashCode());
        result = prime * result + windowSize;
        return result;
    }"
15249,getWindowSize,"    public int getWindowSize() {
        return windowSize;
    }"
15250,getTotal,"    public double getTotal() {
        return calc.total;
    }"
15251,getSlidingWindow,"    public TDoubleList getSlidingWindow() {
        return calc.historicalValues;
    }"
15252,next,"    public double next(double newValue) {
        compute(calc, calc.historicalValues, calc.total, newValue, windowSize);
        return calc.average;
    }"
15253,compute,"    private static Calculation compute(
        Calculation calc, TDoubleList slidingWindow, double total, double newVal, int windowSize) {
        
        if(slidingWindow == null) {
            throw new IllegalArgumentException(""slidingWindow cannot be null."");
        }
        
        if(slidingWindow.size() == windowSize) {"
15254,compute,"    public static Calculation compute(TDoubleList slidingWindow, double total, double newVal, int windowSize) {
        return compute(null, slidingWindow, total, newVal, windowSize);
    }"
15257,mmGetDefaultMetrics,"    public List<Metric> mmGetDefaultMetrics(int verbosity);
    "
15258,mmGetDefaultTraces,"    public <T extends Trace<?>> List<T> mmGetDefaultTraces(int verbosity);
    "
15261,getDataMap,"    public Map<String, Map<String, ?>> getDataMap();
    "
15262,getTraceMap,"    public Map<String, Trace<?>> getTraceMap();
    "
15267,test_mmPrettyPrintConnections,"    public void test_mmPrettyPrintConnections() {
        MonitoredTemporalMemory mtm = new MonitoredTemporalMemory(new TemporalMemory(), new Connections());
        prepConstructs((TemporalMemory)mtm.getMonitor(), mtm.getConnections());
        
        String expected =
            ""Segments: (format => (#) [(source cell=permanence ...),       ...]\n"" +
            ""------------------------------------\n"" +"
15268,mmGetName,"    public String mmGetName() {
        return mmName;
    }    "
15269,reset,"    public void reset(Connections connections) {
        decorator.reset(connections);
    }"
15270,compute,"    public ComputeCycle compute(Connections connections, int[] activeColumns, boolean learn) {
        return compute(connections, activeColumns, learn);
    }"
15271,setTransitionTracesStale,"    public void setTransitionTracesStale(boolean b) {
        this.transitionTracesStale = b;
    }"
15272,transitionTracesStale,"    public boolean transitionTracesStale() {
        return transitionTracesStale;
    }"
15273,setResetActive,"    public void setResetActive(boolean b) {
        this.mmResetActive = b;
    }"
15274,resetActive,"    public boolean resetActive() {
        return mmResetActive;
    }"
15275,getDataMap,"    public Map<String, Map<String, ?>> getDataMap() {
        return mmData;
    }"
15276,getTraceMap,"    public Map<String, Trace<?>> getTraceMap() {
        return mmTraces;
    }"
15277,getConnections,"    public Connections getConnections() {
        return connections;
    }"
15278,getMonitor,"    public ComputeDecorator getMonitor() {
        return decorator;
    }"
15279,toString,"	public String toString() {
		return new StringBuilder().append(min).
			append("", "").append(max).toString();"
15283,testCreateFromTrace,"    public void testCreateFromTrace() {
        Metric metric = Metric.createFromTrace(countsTrace, null);
        assertEquals(metric.title, countsTrace.title);
        assertEquals(0, metric.min, 0.1);
        assertEquals(5, metric.max, 0);
        assertEquals(15, metric.sum, 0);
        assertEquals(2.5, metric.mean, 0.01);
        assertEquals(1.707825127659933, metric.standardDeviation, 0.00000000001);
    }"
15284,test,"    public void test() {
        countsTrace = new CountsTrace(null, ""# active cells"");
        countsTrace.items = Arrays.asList(new Integer[] { 1, 2, 3, 4, 5, 0 });
    }"
15286,prettyPrintDatum,"    public String prettyPrintDatum(Metric datum) {
        return String.format(Locale.US, ""min: %.2f, max: %.2f, sum: %.2f, mean: %.2f, std dev: %.2f"", 
            datum.min, datum.max, datum.sum, datum.mean, datum.standardDeviation);"
15287,getStats,"    public double[] getStats(int sigFigs) {
        if(Double.isNaN(mean)) {
            return new double[] { 0, 0, 0, 0, 0 };
        }"
15289,prettyPrintTitle,"    public String prettyPrintTitle() {
        return String.format(monitor.mmGetName() == null ? ""%s"" : ""[%s] %s"", 
            monitor.mmGetName() == null ? new String[] { title } : new String[] { monitor.mmGetName(), title});"
15290,copy,"    public Metric copy() {
        Metric metric = new Metric(monitor, title, Collections.emptyList());
        
        metric.min = min;
        metric.max = max;
        metric.sum = sum;
        metric.mean = mean;
        metric.variance = variance;
        metric.standardDeviation = standardDeviation;
        "
15291,createFromTrace,"    public static <T extends Trace<? extends Number>> Metric createFromTrace(T trace, BoolsTrace excludeResets) {
        List<Number> data = (List<Number>)trace.items;
        if(excludeResets != null) {
            data = new ArrayList<>();
            for(int k = 0;k < trace.items.size();k++) {"
15292,testSetParams,"    public void testSetParams() {
        MethodSignature ms = new MethodSignature();
        
        String test = ""test"";
        ms.setParams(new String[] { ""arg0"", ""arg1"" }, test, ""value1"");
        assertEquals(test, ms.values().iterator().next());
        assertEquals(""test"", ms.get(""arg0""));
        assertEquals(""value1"", ms.get(""arg1""));
        "
15293,testSetParam,"    public void testSetParam() {
        MethodSignature ms = new MethodSignature();
        
        int param1 = 5;
        ms.addParam(param1, ""five"");
        assertEquals(5, ms.get(""five""));
        
        String test = ""test"";
        ms.addParam(test, ""name"");"
15294,setParams,"    public MethodSignature setParams(String[] paramNames, Object... objects) {
        remake(paramNames, objects);
        return this;
    }"
15295,addParam,"    public <T> T addParam(T t, String name) {
        super.put(name, t);
        return t;
    }"
15298,multiIterator,"	public Iterator<Map<String, Object>> multiIterator();
}"
15301,testMain,"    public void testMain() {
        try {
            MersenneTwisterFast.main(new String[0]);"
15302,testNextIntBoundary,"    public void testNextIntBoundary() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        assertTrue(m.nextInt(4) < 4);
    }"
15303,testNextFloatRange,"    public void testNextFloatRange() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        float d = m.nextFloat(false, false);
        assertTrue(d > 0.0 && d < 1.0);
    }"
15304,testNextFloat,"    public void testNextFloat() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        assertTrue(m.nextFloat() > 0);
    }"
15305,testNextGaussian,"    public void testNextGaussian() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        assertTrue(m.nextGaussian() < 0.14);
    }"
15306,testNextDoubleRange,"    public void testNextDoubleRange() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        double d = m.nextDouble(false, false);
        assertTrue(d > 0.0 && d < 1.0);
    }"
15307,testNextDouble,"    public void testNextDouble() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        assertTrue(m.nextDouble() > 0);
    }"
15308,testNextLongBoundary,"    public void testNextLongBoundary() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        assertTrue(m.nextLong(4) < 4);
    }"
15309,testNextLong,"    public void testNextLong() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        assertTrue(m.nextLong() > 0);
    }"
15310,testNextBytes,"    public void testNextBytes() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        try {
            m.nextBytes(new byte[] { 0x00 });"
15311,testNextByte,"    public void testNextByte() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        assertTrue(m.nextByte() != 0x00);
    }"
15312,testNextBooleanDouble,"    public void testNextBooleanDouble() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        assertTrue(m.nextBoolean(0.44D) || true);
    }"
15313,testNextBooleanFloat,"    public void testNextBooleanFloat() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        assertTrue(m.nextBoolean(0.22f) || true);
    }"
15314,testNextBoolean,"    public void testNextBoolean() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        assertTrue(m.nextBoolean() || true);
    }"
15315,testNextChar,"    public void testNextChar() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        assertTrue(m.nextChar() != ' ');
    }"
15316,testNextShort,"    public void testNextShort() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        assertTrue(m.nextShort() > -1);
    }"
15317,testNextInt,"    public void testNextInt() {
        MersenneTwisterFast m = new MersenneTwisterFast(42);
        assertTrue(m.nextInt() > -1);
    }"
15318,testSetSeed,"    public void testSetSeed() {
        MersenneTwisterFast m = new MersenneTwisterFast();
        m.setSeed(new int[] { 44 });
        assertNotNull(m);
    }"
15337,main,"    public static void main(String args[])
        { "
15339,nextFloat,"    public float nextFloat(boolean includeZero, boolean includeOne)
        {
        float d = 0.0f;
        do
            {"
15341,nextGaussian,"    public double nextGaussian()
        {
        if (__haveNextNextGaussian)"
15342,nextDouble,"    public double nextDouble(boolean includeZero, boolean includeOne)
        {
        double d = 0.0;
        do
            {"
15344,nextLong,"    public long nextLong(long n)
        {
        if (n<=0)
            throw new IllegalArgumentException(""n must be positive, got: "" + n);
        
        long bits, val;"
15346,nextBytes,"    public void nextBytes(byte[] bytes)
        {
        int y;
        "
15356,writeState,"    public void writeState(DataOutputStream stream) throws IOException
        {
        int len = mt.length;
        for(int x=0;x<len;x++) stream.writeInt(mt[x]);
        
        len = mag01.length;
        for(int x=0;x<len;x++) stream.writeInt(mag01[x]);
        
        stream.writeInt(mti);"
15357,readState,"    public void readState(DataInputStream stream) throws IOException
        {
        int len = mt.length;
        for(int x=0;x<len;x++) mt[x] = stream.readInt();
        
        len = mag01.length;
        for(int x=0;x<len;x++) mag01[x] = stream.readInt();
        
        mti = stream.readInt();"
15358,stateEquals,"    public boolean stateEquals(Object o)
        {
        if (o==this) return true;
        if (o == null || !(o instanceof MersenneTwisterFast))
            return false;
        MersenneTwisterFast other = (MersenneTwisterFast) o;
        if (mti != other.mti) return false;
        for(int x=0;x<mag01.length;x++)
            if (mag01[x] != other.mag01[x]) return false;"
15359,clone,"    public Object clone()
        {
        try"
15361,nextGaussian,"    synchronized public double nextGaussian() 
        {
        if (__haveNextNextGaussian) "
15362,nextByte,"    public byte nextByte()
        {
        return (byte)(next(8));"
15363,nextShort,"    public short nextShort()
        {
        return (short)(next(16));"
15365,nextBytes,"    public void nextBytes(byte[] bytes) 
        {
        for (int x=0;x<bytes.length;x++) bytes[x] = (byte)next(8);"
15367,nextFloat,"    public float nextFloat()
        {
        return next(24) / ((float)(1 << 24));"
15369,nextDouble,"    public double nextDouble()
        {
        return (((long)next(26) << 27) + next(27))"
15370,nextLong,"    public long nextLong(long n) 
        {
        if (n<=0)
            throw new IllegalArgumentException(""n must be positive, got: "" + n);
        
        long bits, val;"
15371,nextInt,"    public int nextInt(int n) 
        {
        if (n<=0)
            throw new IllegalArgumentException(""n must be positive, got: "" + n);
        
        if ((n & -n) == n)
            return (int)((n * (long)next(31)) >> 31);"
15374,nextBoolean,"    public boolean nextBoolean() {return next(1) != 0;}

    /** This generates a coin flip with a probability <tt>probability</tt>"
15375,readObject,"    private synchronized void readObject (ObjectInputStream in) 
        throws IOException, ClassNotFoundException
        {"
15376,writeObject,"    private synchronized void writeObject(ObjectOutputStream out)
        throws IOException
        {"
15382,stateEquals,"    public boolean stateEquals(Object o)
        {
        if (o==this) return true;
        if (o == null || !(o instanceof MersenneTwister))
            return false;
        MersenneTwister other = (MersenneTwister) o;
        if (mti != other.mti) return false;
        for(int x=0;x<mag01.length;x++)
            if (mag01[x] != other.mag01[x]) return false;"
15384,asDense,"    private Object[] asDense(FlatMatrix<?> matrix) {
        Object[] dense = new Object[matrix.getMaxIndex() + 1];

        for (int i = 0; i < matrix.getMaxIndex() + 1; i++) {
            dense[i] = matrix.get(i);"
15385,testFlatArrayMatrixSet,"    public void testFlatArrayMatrixSet() {
        Integer[] expected = { 1, 0, 0, 0, 1, 0, 1, 1, 1, 0 };
        FlatArrayMatrix<Integer> fam = new FlatArrayMatrix<Integer>(this.dimensions);
        fam.fill(0);

        for (int index : this.indexes) {
            fam.set(index, 1);
        }"
15386,testBitSetMatrixSet,"    public void testBitSetMatrixSet() {
        Boolean[] expected = {true, false, false, false, true, false, true, true, true, false }; 
        BitSetMatrix bsm = new BitSetMatrix(this.dimensions);

        for (int index : this.indexes) {
            bsm.set(index, true);
        }"
15394,predictiveCells,"    public ManualInput predictiveCells(Set<Cell> cells) {
        previousPredictiveCells = predictiveCells;
        this.predictiveCells = cells;
        return this;
    }"
15395,getPredictiveCells,"    public Set<Cell> getPredictiveCells() {
        return predictiveCells;
    }"
15396,previousPredictiveCells,"    public ManualInput previousPredictiveCells(Set<Cell> cells) {
        this.previousPredictiveCells = cells;
        return this;
    }"
15397,getPreviousPredictiveCells,"    public Set<Cell> getPreviousPredictiveCells() {
        return previousPredictiveCells;
    }"
15398,feedForwardSparseActives,"    public ManualInput feedForwardSparseActives(int[] cols) {
        this.feedForwardSparseActives = cols;
        return this;
    }"
15399,getFeedForwardSparseActives,"    public int[] getFeedForwardSparseActives() {
        if(feedForwardSparseActives == null && feedForwardActiveColumns != null) {
            feedForwardSparseActives = ArrayUtils.where(feedForwardActiveColumns, ArrayUtils.WHERE_1);
        }"
15400,activeCells,"    public ManualInput activeCells(Set<Cell> cells) {
        this.activeCells = cells;
        return this;
    }"
15401,getActiveCells,"    public Set<Cell> getActiveCells() {
        return activeCells;
    }"
15402,feedForwardActiveColumns,"    public ManualInput feedForwardActiveColumns(int[] cols) {
        this.feedForwardActiveColumns = cols;
        return this;
    }"
15403,getFeedForwardActiveColumns,"    public int[] getFeedForwardActiveColumns() {
        return feedForwardActiveColumns;
    }"
15404,anomalyScore,"    ManualInput anomalyScore(double d) {
        this.anomalyScore = d;
        return this;
    }"
15405,getAnomalyScore,"    public double getAnomalyScore() {
        return anomalyScore;
    }"
15406,storeClassification,"    ManualInput storeClassification(String fieldName, Classification<Object> classification) {
        if(this.classification == null) {
            this.classification = new HashMap<String, Classification<Object>>();
        }
        this.classification.put(fieldName, classification);"
15407,getClassification,"    public Classification<Object> getClassification(String fieldName) {
        if(classification == null)
            return null;
        return classification.get(fieldName);"
15409,encoding,"    ManualInput encoding(int[] sdr) {
        this.encoding = sdr;
        return this;
    }"
15410,getEncoding,"    public int[] getEncoding() {
        return encoding;
    }"
15411,sdr,"    ManualInput sdr(int[] sdr) {
        this.sdr = sdr;
        return this;
    }"
15412,getSDR,"    public int[] getSDR() {
        return sdr;
    }"
15413,layerInput,"    ManualInput layerInput(Object inputValue) {
        this.layerInput = inputValue;
        return this;
    }"
15414,getLayerInput,"    public Object getLayerInput() {
        return layerInput;
    }"
15415,getClassifiers,"    public NamedTuple getClassifiers() {
        return classifiers;
    }"
15416,classifiers,"    public ManualInput classifiers(NamedTuple tuple) {
        this.classifiers = tuple;
        return this;
    }"
15417,classifierInput,"    ManualInput classifierInput(Map<String, NamedTuple> classifierInput) {
        this.classifierInput = classifierInput;
        return this;
    }"
15418,getClassifierInput,"    public Map<String, NamedTuple> getClassifierInput() {
        if(classifierInput == null) {
            classifierInput = new HashMap<String, NamedTuple>();
        }"
15419,customObject,"    public ManualInput customObject(Object o) {
        this.customObject = o;
        return this;
    }"
15420,getCustomObject,"    public Object getCustomObject() {
        return customObject;
    }"
15421,getComputeCycle,"    public ComputeCycle getComputeCycle() {
        return computeCycle;
    }"
15422,computeCycle,"    public ManualInput computeCycle(ComputeCycle computeCycle) {
        this.computeCycle = computeCycle;
        return this;
    }"
15423,getRecordNum,"    public int getRecordNum() {
        return recordNum;
    }"
15424,recordNum,"    public ManualInput recordNum(int num) {
        this.recordNum = num;
        return this;
    }"
15426,testTrueCount,"    public void testTrueCount() {
        int[] expected = {4, 3, 2, 1, 0};
        int dense[][] = {
                {0, 1, 1, 1, 1},
                {0, 0, 1, 1, 1},
                {0, 0, 0, 1, 1},
                {0, 0, 0, 0, 1},"
15427,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        LowMemorySparseBinaryMatrix other = (LowMemorySparseBinaryMatrix)obj;"
15428,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((sparseSet == null) ? 0 : sparseSet.hashCode());
        return result;
    }"
15429,get,"    public Integer get(int index) {
       return this.sparseSet.contains(index) ? 1 : 0;
    }"
15430,set,"    public LowMemorySparseBinaryMatrix set(int index, Object value) {
        super.set(index, ((Integer) value).intValue());
        return this;
    }"
15431,updateTrueCounts,"    private void updateTrueCounts(int... coordinates) {
        Object slice = getSlice(coordinates[0]);
        int sum = ArrayUtils.aggregateArray(slice);
        setTrueCount(coordinates[0],sum);
    }"
15432,setForTest,"    public LowMemorySparseBinaryMatrix setForTest(int index, int value) {
        if (value == 1) {
            this.sparseSet.add(index);
        }"
15433,set,"    public LowMemorySparseBinaryMatrix set(int value, int... coordinates) {
        int index = computeIndex(coordinates);
                
        if (value == 1) {
            this.sparseSet.add(index);
        }"
15434,rightVecSumAtNZ,"    public void rightVecSumAtNZ(int[] inputVector, int[] results, double stimulusThreshold) {
        if (this.dimensions.length > 1) {
            int[] values = getSparseIndices();"
15435,rightVecSumAtNZ,"    public void rightVecSumAtNZ(int[] inputVector, int[] results) {
        if (this.dimensions.length > 1) {
            for (int value : getSparseIndices()) {"
15437,testMinValMaxVal,"	public void testMinValMaxVal() {
		try {
			LogEncoder.builder()
			        .n(100)"
15438,testInitWithN,"	public void testInitWithN() {
		int n = 100;
		LogEncoder le = LogEncoder.builder()
		        .n(n)
		        .forced(true)"
15439,testInitWithRadius,"	public void testInitWithRadius() {
		LogEncoder le = LogEncoder.builder()
		        .w(1)
		        .radius(1)
		        .minVal(1.0)
		        .maxVal(10000.)
		        .name(""amount"")
		        .forced(true)
		        .build();
		
		assertEquals(le.getN(), 5);
		"
15440,testGetBucketValue,"	public void testGetBucketValue() {
		LogEncoder le = LogEncoder.builder()
		        .w(5)
		        .resolution(0.1)
		        .minVal(1.0)
		        .maxVal(10000.)
		        .name(""amount"")
		        .forced(true)
		        .build();"
15442,testTopDown,"	public void testTopDown() {
		setUp();
		initLE();
		
		double value = le.getMinVal();
		"
15443,testMissingValue,"	public void testMissingValue() {
		setUp();
		initLE();
		
		int[] output = le.encode(Encoder.SENTINEL_VALUE_FOR_MISSING_DATA);
		
		int[] expected = new int[45];"
15444,verifyEncodingAndReverseLookup,"	public void verifyEncodingAndReverseLookup() {
		setUp();
		initLE();
		
		double value = 1.0;
		int[] output = le.encode(value);
		
		int[] expected = new int[45];
		for (int i = 0; i < 5; i++) {
			expected[i] = 1;
		}

		assertTrue(Arrays.equals(output, expected));"
15445,testClosenessCalculations,"	public void testClosenessCalculations() {
		setUp();
		initLE();
		
		double[] expectedValues = new double[]{1., 1., 1., 1.};
		double[] actualValues = new double[]{10000., 1000., 1., -200.};
		double[] expectedResults = new double[]{0.0, 0.25, 1.0, 1.0};
		"
15447,initLE,"	private void initLE() {
		le = builder.build();
	}"
15448,setUp,"	private void setUp() {
        builder =  LogEncoder.builder()
	        .w(5)"
15450,closenessScores,"	public TDoubleList closenessScores(TDoubleList expValues, TDoubleList actValues, boolean fractional) {
		TDoubleList retVal = new TDoubleArrayList();

		double expValue, actValue;
		if (expValues.get(0) > 0) {
			expValue = Math.log10(expValues.get(0));
		} else {
			expValue = minScaledValue;
		}
		if (actValues.get(0) > 0) {"
15451,topDownCompute,"	public List<Encoding> topDownCompute(int[] encoded) {
		Encoding scaledResult = encoder.topDownCompute(encoded).get(0);
		double scaledValue = (Double)scaledResult.getValue();
		double value = Math.pow(10, scaledValue);

		return Arrays.asList(new Encoding(value, value, scaledResult.getEncoding()));"
15452,getBucketInfo,"	public List<Encoding> getBucketInfo(int[] buckets) {
		Encoding scaledResult = encoder.getBucketInfo(buckets).get(0);
		double scaledValue = (Double)scaledResult.getValue();
		double value = Math.pow(10, scaledValue);

		return Arrays.asList(new Encoding(value, value, scaledResult.getEncoding()));"
15455,encodeIntoArray,"	public void encodeIntoArray(Double input, int[] output) {
		Double scaledVal = getScaledValue(input);

		if (scaledVal == null) {"
15456,getBucketIndices,"	public int[] getBucketIndices(double input) {
		Double scaledVal = getScaledValue(input);

		if (scaledVal == null) {"
15457,getScaledValue,"	private Double getScaledValue(double input) {
		if(input == SENTINEL_VALUE_FOR_MISSING_DATA) {
			return null;"
15458,getDecoderOutputFieldTypes,"	public Set<FieldMetaType> getDecoderOutputFieldTypes() {
		return encoder.getDecoderOutputFieldTypes();
	}"
15459,getDescription,"	public List<Tuple> getDescription() {
		return encoder.getDescription();
	}"
15460,isDelta,"	public boolean isDelta() {
		return encoder.isDelta();
	}"
15461,getWidth,"	public int getWidth() {
		return encoder.getWidth();
	}"
15463,builder,"	public static Encoder.Builder<LogEncoder.Builder, LogEncoder> builder() {
		return new LogEncoder.Builder();
	}"
15468,onError,"            @Override public void onError(Throwable arg0) { }
            @Override public void onNext(Object arg0) { "
15469,onCompleted,"            @Override public void onCompleted() { }
            @Override public void onError(Throwable arg0) { }"
15471,testNullSubscriber,"    public void testNullSubscriber() {
        Parameters p = NetworkTestHarness.getParameters();
        p = p.union(NetworkTestHarness.getNetworkDemoTestEncoderParams());
        p.set(KEY.RANDOM, new MersenneTwister(42));

        Layer<?> l = Network.createLayer(""l"", p); 
        "
15472,testProperConstructionUsingNonFluentConstructor,"    public void testProperConstructionUsingNonFluentConstructor() {
        try {
            new Layer<>(null, null, null, null, null, null);
            fail();
        }catch(Exception e) {
            assertEquals(IllegalArgumentException.class, e.getClass());"
15473,isClosedAddSpatialPoolerTest,"    public void isClosedAddSpatialPoolerTest() {
        Parameters p = NetworkTestHarness.getParameters();
        p = p.union(NetworkTestHarness.getNetworkDemoTestEncoderParams());
        p.set(KEY.RANDOM, new MersenneTwister(42));

        Layer<?> l = Network.createLayer(""l"", p);
        l.close();
"
15474,isClosedAddMultiEncoderTest,"    public void isClosedAddMultiEncoderTest() {
        Parameters p = NetworkTestHarness.getParameters();
        p = p.union(NetworkTestHarness.getNetworkDemoTestEncoderParams());
        p.set(KEY.RANDOM, new MersenneTwister(42));

        Layer<?> l = Network.createLayer(""l"", p);
        l.close();
"
15475,isClosedAddSensorTest,"    public void isClosedAddSensorTest() {
        Parameters p = NetworkTestHarness.getParameters();
        p = p.union(NetworkTestHarness.getNetworkDemoTestEncoderParams());
        p.set(KEY.RANDOM, new MersenneTwister(42));

        Layer<?> l = Network.createLayer(""l"", p);
        l.close();

        Sensor<File> sensor = Sensor.create("
15482,onCompleted,"            @Override public void onCompleted() {}
            @Override public void onError(Throwable e) { System.out.println(""error: "" + e.getMessage()); e.printStackTrace();}"
15491,onNext,"            @Override public void onNext(Inference i) {
                emissions.add(l.getFeedForwardActiveColumns());
            }"
15492,onError,"            @Override public void onError(Throwable e) { System.out.println(""error: "" + e.getMessage()); e.printStackTrace();}
            @Override public void onNext(Inference i) {
                emissions.add(l.getFeedForwardActiveColumns());
            }"
15502,onNext,"            public void onNext(Inference i) {
                assertNotNull(i);
                TOTAL++;
                
                if(l.getPreviousPredictiveCells() != null) {"
15505,onNext,"            public void onNext(Inference i) {
                assertNotNull(i);
                TOTAL++;
            }"
15515,onNext,"            public void onNext(Inference i) {
                assertNotNull(i);
                assertEquals(42, i.getSDR().length);
            }"
15520,onNext,"            public void onNext(Inference i) {
                if(test == 0) {
                    assertTrue(Arrays.equals(expected0, i.getSDR()));
                }
                if(test == 1) {"
15523,onNext,"            public void onNext(Inference i) {
                assertNotNull(i);
                assertTrue(i.getSDR().length > 0);
            }"
15526,onNext,"            public void onNext(Inference output) {
                if(seq / 7 >= timeUntilStable) {
                    System.out.println(""seq: "" + (seq) + ""  --> "" + (test) + ""  output = "" + Arrays.toString(output.getSDR()) +
                        "", \t\t\t\t cols = "" + Arrays.toString(SDR.asColumnIndices(output.getSDR(), l.getConnections().getCellsPerColumn())));
                    assertTrue(output.getSDR().length >= 5);"
15528,onNext,"            public void onNext(Inference spatialPoolerOutput) {
                if(test == 0) {
                    assertTrue(Arrays.equals(expected0, spatialPoolerOutput.getSDR()));
                }
                if(test == 1) {"
15535,onCompleted,"            @Override public void onCompleted() {}
            @Override public void onNext(Inference output) {"
15539,onNext,"            @Override public void onNext(Inference output) {
                assertTrue(Arrays.equals(expected[seq++], output.getSDR()));
            }"
15545,onNext,"            public void onNext(Inference i) {
                if(test == 0) {
                    assertTrue(Arrays.equals(expected0, i.getSDR()));
                    assertEquals(""Interposed: [1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0]"", i.getCustomObject());
                }"
15548,onNext,"            @Override public void onNext(Inference output) {
                assertEquals(input, Arrays.toString((int[])output.getLayerInput()));
            }"
15552,onNext,"            @Override public void onNext(Inference output) {
                switch(idx) {
                    case 0: assertEquals(""[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1]"", Arrays.toString(output.getSDR()));
                    break;"
15555,onNext,"            @Override public void onNext(Inference output) {
                if(l.getSensor().getMetaInfo().isReset()) {
                    seqResetCount++;"
15556,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override public void onNext(Inference output) {
                if(l.getSensor().getMetaInfo().isReset()) {"
15559,onNext,"            @Override public void onNext(Inference output) {
                if(l.getSensor().getMetaInfo().isReset()) {
                    trueCount++;"
15564,onCompleted,"            @Override public void onCompleted() {
                assertTrue(l.isHalted());
                isHalted = true;
            }"
15570,testResetMethod,"    public void testResetMethod() {
        Parameters p = NetworkTestHarness.getParameters().copy();
        Layer<?> l = Network.createLayer(""l1"", p)
                .alterParameter(KEY.AUTO_CLASSIFY, false)
                .add(new TemporalMemory());
        try {
            l.reset();"
15574,testAddSensor,"    public void testAddSensor() {
        Parameters p = NetworkTestHarness.getParameters().copy();
        p = p.union(NetworkTestHarness.getDayDemoTestEncoderParams());
        p.set(KEY.RANDOM, new UniversalRandom(42));
        
        try {"
15575,testNoName,"    public void testNoName() {
        Parameters p = Parameters.getAllDefaultParameters();
        
        try {
            new Network("""", p)"
15581,call,"                public ManualInput call(ManualInput t1) {
                    if((hasSP() && t1.getFeedForwardSparseActives() == null) || t1.getPreviousPredictiveCells() == null) {
                        return t1.anomalyScore(1.0);
                    }else if(!hasSP() && (isArrayInput == 1 || t1.getLayerInput().getClass().equals(int[].class))) {"
15582,createAnomalyFunc,"        public Func1<ManualInput, ManualInput> createAnomalyFunc(final Anomaly an) {
            return new Func1<ManualInput, ManualInput>() {
                int isArrayInput = -1;"
15583,call,"                public ManualInput call(ManualInput t1) {
                    Map<String, NamedTuple> ci = t1.getClassifierInput();
                    int recordNum = getRecordNum();
                    for(String key : ci.keySet()) {
                        NamedTuple inputs = ci.get(key);
                        bucketIdx = inputs.get(""bucketIdx"");"
15584,get,"                    public Object get(Object o) {
                        return o.equals(""bucketIdx"") ? bucketIdx : actValue;
                    }"
15585,createClassifierFunc,"        public Func1<ManualInput, ManualInput> createClassifierFunc() {
            return new Func1<ManualInput, ManualInput>() {
"
15587,createTemporalFunc,"        public Func1<ManualInput, ManualInput> createTemporalFunc(final TemporalMemory tm) {
            return new Func1<ManualInput, ManualInput>() {
"
15588,call,"                public ManualInput call(ManualInput t1) {
                    int[] sdr = t1.getSDR();
                    if(sdr.length > 0 && ArrayUtils.isSparse(sdr)) {
                        if(inputWidth == -1) {
                            inputWidth = calculateInputWidth();
                        }"
15589,createSpatialFunc,"        public Func1<ManualInput, ManualInput> createSpatialFunc(final SpatialPooler sp) {
            return new Func1<ManualInput, ManualInput>() {
"
15590,createManualInputFunc,"        public Observable<ManualInput> createManualInputFunc(Observable<T> in) {
            return in.ofType(ManualInput.class).compose(new Copy2Inference());
        }"
15591,createVectorFunc,"        public Observable<ManualInput> createVectorFunc(Observable<T> in) {
            return in.ofType(int[].class).compose(new Vector2Inference());
        }"
15592,createMultiMapFunc,"        public Observable<ManualInput> createMultiMapFunc(Observable<T> in) {
            return in.ofType(Map.class).compose(new Map2Inference());
        }"
15593,createEncoderFunc,"        public Observable<ManualInput> createEncoderFunc(Observable<T> in) {
            return in.ofType(String[].class).compose(new String2Inference());
        }"
15595,call,"            public Observable<ManualInput> call(Observable<ManualInput> t1) {
                return t1.map(new Func1<ManualInput, ManualInput>() {
"
15597,call,"            public Observable<ManualInput> call(Observable<int[]> t1) {
                return t1.map(new Func1<int[], ManualInput>() {
"
15599,call,"            public Observable<ManualInput> call(Observable<Map> t1) {
                return t1.map(new Func1<Map, ManualInput>() {
"
15601,call,"            public Observable<ManualInput> call(Observable<String[]> t1) {
                return t1.map(new Func1<String[], ManualInput>() {
"
15602,checkPoint,"        public Subscription checkPoint(Observer<? super T> t) {
            return super.subscribe(t);
        }"
15604,getCheckPointOperator,"    CheckPointOp<byte[]> getCheckPointOperator() {
        if(checkPointOp == null) {
            checkPointOp = new CheckPointOperator<byte[]>(Layer.this);
        }"
15605,uncaughtException,"			public void uncaughtException(Thread t, Throwable e) {
				notifyError(new RuntimeException(""Unhandled Exception in ""+LAYER_THREAD.getName(),e));
			}"
15607,startLayerThread,"    protected void startLayerThread() {
        LAYER_THREAD = new Thread(""Sensor Layer ["" + getName() + ""] Thread"") {

            @SuppressWarnings(""unchecked"")
            public void run() {"
15608,temporalInput,"    protected int[] temporalInput(int[] input, ManualInput mi) {
        ComputeCycle cc = null;
        if(sensor != null) {
            if(sensor.getMetaInfo().isReset()) {
                temporalMemory.reset(connections);
            }

            cc = temporalMemory.compute(connections, input, sensor.getMetaInfo().isLearn());"
15609,spatialInput,"    protected int[] spatialInput(int[] input) {
        if(input == null) {
            LOGGER.info(""Layer "".concat(getName()).concat("" received null input""));
        } else if(input.length < 1) {
            LOGGER.info(""Layer "".concat(getName()).concat("" received zero length bit vector""));
            return input;"
15611,clearSubscriberObserverLists,"    private void clearSubscriberObserverLists() {
        if(observers == null) observers = new ArrayList<Observer<Inference>>(); 
        if(subscribers == null) subscribers = new ConcurrentLinkedQueue<Observer<Inference>>();
        subscribers.clear();
        userObservable = null;
    }"
15612,onNext,"            public void onNext(Inference i) {
                currentInference = i;
                for(Observer<Inference> o : observers) {
                    o.onNext(i);"
15613,onError,"            public void onError(Throwable e) {
                for(Observer<Inference> o : observers) {
                    o.onError(e);"
15614,onCompleted,"            public void onCompleted() {
                for(Observer<Inference> o : observers) {
                    o.onCompleted();"
15615,getDelegateObserver,"    private Observer<Inference> getDelegateObserver() {
        return new Observer<Inference>() {
"
15616,onNext,"            public void onNext(Inference i) {
                currentInference = i;
                for(Observer<Inference> o : subscribers) {
                    o.onNext(i);"
15617,onError,"            public void onError(Throwable e) {
                for(Observer<Inference> o : subscribers) {
                    o.onError(e);"
15618,onCompleted,"            public void onCompleted() {
                for(Observer<Inference> o : subscribers) {
                    o.onCompleted();"
15619,getDelegateSubscriber,"    private Observer<Inference> getDelegateSubscriber() {
        return new Observer<Inference>() {
"
15620,isUnsubscribed,"            public boolean isUnsubscribed() {
                return subscribers.contains(observer);
            }"
15621,unsubscribe,"            public void unsubscribe() {
                subscribers.remove(observer);
                if(subscribers.isEmpty()) {
                    subscription.unsubscribe();"
15622,createSubscription,"    private Subscription createSubscription(final Observer<Inference> sub) {
        return new Subscription() {
"
15623,fillInOrderedSequence,"    private Observable<ManualInput> fillInOrderedSequence(Observable<ManualInput> o) {
        Collections.reverse(addedItems);
        
        for(Object node : addedItems) {
            if(node instanceof Func1<?, ?>) {
                o = o.map((Func1<ManualInput, ManualInput>)node);
            } else if(node instanceof SpatialPooler) {"
15625,doEncoderBucketMapping,"    private void doEncoderBucketMapping(Inference inference, Map<String, Object> encoderInputMap) {
        if(encoderTuples == null) {
            encoderTuples = encoder.getEncoders(encoder);
        }
"
15626,doCheckPoint,"    private void doCheckPoint() {
        byte[] bytes = parentNetwork.internalCheckPointOp();
        
        if(bytes != null) {
            LOGGER.debug(""Layer ["" + getName() + ""] checkPointed file: "" + 
                Persistence.get().getLastCheckPointFileName());"
15627,resolveObservableSequence,"    private Observable<ManualInput> resolveObservableSequence(T t) {
        Observable<ManualInput> sequenceStart = null;

        if(observableDispatch == null) {
            observableDispatch = createDispatchMap();
        }
        
        if(observableDispatch != null) {"
15628,mapEncoderBuckets,"    private Observable<ManualInput> mapEncoderBuckets(Observable<ManualInput> sequence) {
        if(hasSensor()) {
            if(getSensor().getMetaInfo().getFieldTypes().stream().anyMatch(ft -> {
                return ft == FieldMetaType.SARR || ft == FieldMetaType.DARR || ft == FieldMetaType.COORD || ft == FieldMetaType.GEO;"
15631,dispatchCompleted,"    private boolean dispatchCompleted() {
        return observableDispatch == null;
    }"
15632,initializeMask,"    private void initializeMask() {
        algo_content_mask |= (this.spatialPooler == null ? 0 : SPATIAL_POOLER);
        algo_content_mask |= (this.temporalMemory == null ? 0 : TEMPORAL_MEMORY);
        algo_content_mask |= (this.autoCreateClassifiers == null || !autoCreateClassifiers ? 0 : CLA_CLASSIFIER);
        algo_content_mask |= (this.anomalyComputer == null ? 0 : ANOMALY_COMPUTER);
    }"
15633,getMask,"    byte getMask() {
        return algo_content_mask;
    }"
15634,notifyError,"    void notifyError(Exception e) {
        for(Observer<Inference> o : subscribers) {
            o.onError(e);
        }
        for(Observer<Inference> o : observers) {"
15635,notifyComplete,"    void notifyComplete() {
        for(Observer<Inference> o : subscribers) {
            o.onCompleted();
        }
        for(Observer<Inference> o : observers) {"
15636,getMostProbableBucketIndex,"    public int getMostProbableBucketIndex(String field, int step) {
        if(currentInference == null || currentInference.getClassifiers() == null) {
            throw new IllegalStateException(""Predictions not available. "" + ""Either classifiers unspecified or inferencing has not yet begun."");
        }

        Classification<?> c = currentInference.getClassification(field);"
15637,getMostProbableValue,"    public <K> K getMostProbableValue(String field, int step) {
        if(currentInference == null || currentInference.getClassifiers() == null) {
            throw new IllegalStateException(""Predictions not available. "" + ""Either classifiers unspecified or inferencing has not yet begun."");
        }

        Classification<?> c = currentInference.getClassification(field);"
15638,getAllPredictions,"    public double[] getAllPredictions(String field, int step) {
        if(currentInference == null || currentInference.getClassifiers() == null) {
            throw new IllegalStateException(""Predictions not available. "" + ""Either classifiers unspecified or inferencing has not yet begun."");
        }

        Classification<?> c = currentInference.getClassification(field);"
15639,getAllValues,"    public <V> V[] getAllValues(String field, int step) {
        if(currentInference == null || currentInference.getClassifiers() == null) {
            throw new IllegalStateException(""Predictions not available. "" + ""Either classifiers unspecified or inferencing has not yet begun."");
        }

        Classification<?> c = currentInference.getClassification(field);"
15640,getEncoder,"    public MultiEncoder getEncoder() {
        if(encoder != null) {
            return encoder;
        }
        if(hasSensor()) {
            return sensor.getEncoder();
        }"
15641,getInference,"    public Inference getInference() {
        return currentInference;
    }"
15643,name,"    public Layer<T> name(String name) {
        this.name = name;
        return this;
    }"
15644,increment,"    public Layer<T> increment() {
        if(skip > -1) {
            --skip;
        } else {"
15645,hasTemporalMemory,"    public boolean hasTemporalMemory() {
        return temporalMemory != null;
    }"
15646,reset,"    public void reset() {
        if(temporalMemory == null) {
            LOGGER.debug(""Attempt to reset Layer: "" + getName() + ""without TemporalMemory"");"
15647,resetRecordNum,"    public Layer<T> resetRecordNum() {
        recordNum = 0;
        return this;
    }"
15648,isClosed,"    public boolean isClosed() {
        return isClosed;
    }"
15650,getMemory,"    public Connections getMemory() {
        return connections;
    }"
15651,getFeedForwardSparseActives,"    public int[] getFeedForwardSparseActives() {
        return currentInference.getFeedForwardSparseActives();
    }"
15652,getActiveCells,"    public Set<Cell> getActiveCells() {
        return currentInference.getActiveCells();
    }"
15653,getFeedForwardActiveColumns,"    public int[] getFeedForwardActiveColumns() {
        return currentInference.getFeedForwardActiveColumns();
    }"
15654,getPreviousPredictiveCells,"    public Set<Cell> getPreviousPredictiveCells() {
        return currentInference.getPreviousPredictiveCells();
    }"
15655,getPredictiveCells,"    public Set<Cell> getPredictiveCells() {
        return currentInference.getPredictiveCells();
    }"
15656,getParameters,"    public Parameters getParameters() {
        return this.params;
    }"
15657,getLayerThread,"    public Thread getLayerThread() {
        if(LAYER_THREAD != null) {
            return LAYER_THREAD;
        }"
15658,hasSensor,"    public boolean hasSensor() {
        return sensor != null;
    }"
15659,getPrevious,"    public Layer<Inference> getPrevious() {
        return previous;
    }"
15660,previous,"    public void previous(Layer<Inference> l) {
        this.previous = l;
    }"
15661,getNext,"    public Layer<Inference> getNext() {
        return next;
    }"
15662,next,"    public void next(Layer<Inference> l) {
        this.next = l;
    }"
15663,restart,"    public void restart(boolean startAtIndex) {
        isHalted = false;
        
        if(!isClosed) {"
15666,setLearn,"    public void setLearn(boolean isLearn) {
        this.isLearn = isLearn;
    }"
15667,isHalted,"    public boolean isHalted() {
        return isHalted;
    }"
15668,halt,"    public void halt() {
        Object supplier = null;
        if(sensor != null && (supplier = sensor.getSensorParams().get(""ONSUB"")) != null) {
            if(supplier instanceof PublisherSupplier) {
                ((PublisherSupplier)supplier).clearSuppliedInstance();
            }"
15669,compute,"    public void compute(T t) {
        if(!isClosed) {
            close();
        }

        increment();"
15670,getConnections,"    public Connections getConnections() {
        return this.connections;
    }"
15673,add,"    public Layer<T> add(Func1<ManualInput, ManualInput> func) {
        if(isClosed) {
            throw new IllegalStateException(""Layer already \""closed\"""");
        }
        if(func == null) {
            throw new IllegalArgumentException(""Cannot add a null Function"");
        }"
15677,add,"    public Layer<T> add(MultiEncoder encoder) {
        if(isClosed) {
            throw new IllegalStateException(""Layer already \""closed\"""");
        }
"
15678,add,"    public Layer<T> add(Sensor sensor) {
        if(isClosed) {
            throw new IllegalStateException(""Layer already \""closed\"""");
        }

        this.sensor = (HTMSensor<?>)sensor;
        "
15679,using,"    public Layer<T> using(Parameters p) {
        if(isClosed) {
            throw new IllegalStateException(""Layer already \""closed\"""");
        }
        this.params = p;"
15680,using,"    public Layer<T> using(Connections c) {
        if(isClosed) {
            throw new IllegalStateException(""Layer already \""closed\"""");
        }
        this.connections = c;"
15682,call,"                public void call(Subscriber<? super Inference> t1) {
                    if(observers == null) {
                        observers = new ArrayList<Observer<Inference>>();
                    }"
15685,hasSP,"    boolean hasSP() {
        return (algo_content_mask & Layer.SPATIAL_POOLER) == Layer.SPATIAL_POOLER;
    }"
15686,hasTM,"    boolean hasTM() {
        return (algo_content_mask & Layer.TEMPORAL_MEMORY) == Layer.TEMPORAL_MEMORY;
    }"
15689,getRegion,"    public Region getRegion() {
        return this.parentRegion;
    }"
15690,setRegion,"    public void setRegion(Region r) {
        this.parentRegion = r;
    }"
15691,delegateCheckPointCall,"    public CheckPointOp<byte[]> delegateCheckPointCall() {
        if(parentNetwork != null) {
            return parentNetwork.getCheckPointOperator();
        }"
15692,getNetwork,"    public Network getNetwork() {
        return this.parentNetwork;
    }"
15693,setNetwork,"    public void setNetwork(Network network) {
        this.parentNetwork = network;
    }"
15694,postDeSerialize,"    public Layer<T> postDeSerialize() {
        recreateSensors();
        
        FunctionFactory old = factory;
        factory = new FunctionFactory();
        factory.inference = old.inference.postDeSerialize(old.inference);
        
        checkPointOpObservers = new ArrayList<>();
        
        if(sensor != null) {
            sensor.setLocalParameters(params);"
15695,preSerialize,"    public Layer<T> preSerialize() {
        isPostSerialized = false;
        return this;
    }"
15697,testSize,"    public void testSize() {
        IntGenerator generator = IntGenerator.of(-4, -4);
        assertEquals(0, generator.size());
        assertEquals(-4, (int)generator.next());
        assertEquals(-4, (int)generator.next());
        assertFalse(generator.hasNext());
    }"
15698,testGet,"    public void testGet() {
        IntGenerator generator = IntGenerator.of(0, 31);
        assertEquals(0, generator.get());
        assertEquals(0, (int)generator.next());
        assertEquals(1, generator.get());
        assertEquals(1, generator.get());
        assertEquals(1, (int)generator.next());
        assertEquals(2, (int)generator.next());
        assertEquals(3, generator.get());
    }"
15699,testIntegerGenerator_SpecifyNext,"    public void testIntegerGenerator_SpecifyNext() {
        int i = 28;
        
        Generator<Integer> generator = IntGenerator.of(i, 31);
        
        assertFalse(generator.next() == 29);
        
        assertTrue(generator.next() == 29);"
15700,testIntegerGenerator,"    public void testIntegerGenerator() {
        int i = 0;
        
        Generator<Integer> generator = IntGenerator.of(0, 31);
        
        for(Integer result : generator) {
            assertNotEquals(result, Integer.valueOf(i - 1));"
15701,of,"    public static IntGenerator of(int lower, int upper) {
        return new IntGenerator(lower, upper);
    }"
15702,hasNext,"    public boolean hasNext() { return _i < upper; }
    
    /**"
15703,next,"    public Integer next() {
        int retVal = _i;
        _i = ++_i > upper ? upper : _i;
        return retVal;
    }"
15704,reset,"    public void reset() {
        this._i = lower;
    }"
15705,size,"    public int size() {
        return upper - lower;
    }"
15706,get,"    public int get() {
        return _i;
    }"
15708,getPreviousPredictiveCells,"    public Set<Cell> getPreviousPredictiveCells();
    /**"
15709,getActiveCells,"    public Set<Cell> getActiveCells();
    /**"
15710,getFeedForwardSparseActives,"    public int[] getFeedForwardSparseActives();
    /**"
15711,getFeedForwardActiveColumns,"    public int[] getFeedForwardActiveColumns();
    /**"
15713,getClassification,"    public Classification<Object> getClassification(String fieldName);
    /**"
15717,getClassifiers,"    public NamedTuple getClassifiers();
    /**"
15718,getClassifierInput,"    public Map<String, NamedTuple> getClassifierInput();
    /**"
15720,getComputeCycle,"    public ComputeCycle getComputeCycle();
    /**"
15722,testMakeCumCountsTrace,"    public void testMakeCumCountsTrace() {
        CountsTrace countsTrace = trace.makeCumCountsTrace();
        assertEquals(""# (cumulative) active cells"", countsTrace.title);
        assertTrue(countsTrace.items.equals(Arrays.asList(3, 5, 6, 6)));
    }"
15723,testMakeCountsTrace,"    public void testMakeCountsTrace() {
        CountsTrace countsTrace = trace.makeCountsTrace();
        assertEquals(""# active cells"", countsTrace.title);
        assertTrue(countsTrace.items.equals(Arrays.asList(3, 2, 1, 0)));
    }"
15724,setUp,"    public void setUp() {
        trace = new IndicesTrace(null, ""active cells"");
        
        trace.items.add(new LinkedHashSet<Integer>(Arrays.asList(1, 2, 3)));
        trace.items.add(new LinkedHashSet<Integer>(Arrays.asList(4, 5)));
        trace.items.add(new LinkedHashSet<Integer>(Arrays.asList(6)));
        trace.items.add(new LinkedHashSet<Integer>());"
15725,prettyPrintDatum,"    public String prettyPrintDatum(Collection<Integer> c) {
        List<Integer> l = null;
        Collections.sort(l = new ArrayList<>(c));
        return l.toString().replace(""["", """").replace(""]"", """").trim();
    }"
15726,makeCumCountsTrace,"    public CountsTrace makeCumCountsTrace() {
        CountsTrace trace = new CountsTrace(monitor, String.format(""# (cumulative) %s"", title));
        Trace<Integer> countsTrace = makeCountsTrace();
        
        int[] accum = { 0 };
        trace.items = countsTrace.items.stream().map(i -> accum[0] += ((int)i)).collect(Collectors.toList());
        "
15727,makeCountsTrace,"    public CountsTrace makeCountsTrace() {
        CountsTrace trace = new CountsTrace(monitor, String.format(""# %s"", title));
        trace.items = items.stream().map(l -> l.size()).collect(Collectors.toList());
        return trace;
    }"
15730,testInputIntegerArray,"    public void testInputIntegerArray() {
        Sensor<File> sensor = Sensor.create(
            FileSensor::create, 
            SensorParams.create(
                Keys::path, """", ResourceLocator.path(""1_100.csv"")));
                    
        HTMSensor<File> htmSensor = (HTMSensor<File>)sensor;"
15732,testSensorTerminalOperationDetection,"    public void testSensorTerminalOperationDetection() {
        Sensor<File> sensor = Sensor.create(
            FileSensor::create, 
            SensorParams.create(
                Keys::path, """", ResourceLocator.path(""rec-center-hourly-small.csv"")));
        
        HTMSensor<File> htmSensor = (HTMSensor<File>)sensor;"
15734,testBoolEncoderNotInitialized,"    public void testBoolEncoderNotInitialized() {
        Publisher manual = Publisher.builder()
            .addHeader(""foo"")
            .addHeader(""bool"")
            .addHeader("""")
            .build();
        Sensor<File> sensor = Sensor.create(ObservableSensor::create, SensorParams.create(
            Keys::obs, """", manual));
        Map<String, Map<String, Object>> fieldEncodings = setupMap( null,"
15735,testFloatNumberEncoderNotInitialized,"    public void testFloatNumberEncoderNotInitialized() {
        Publisher manual = Publisher.builder()
            .addHeader(""foo"")
            .addHeader(""float"")
            .addHeader("""")
            .build();
        Sensor<File> sensor = Sensor.create(ObservableSensor::create, SensorParams.create(
            Keys::obs, """", manual));
        Map<String, Map<String, Object>> fieldEncodings = setupMap( null,"
15736,testIntNumberEncoderNotInitialized,"    public void testIntNumberEncoderNotInitialized() {
        Publisher manual = Publisher.builder()
            .addHeader(""foo"")
            .addHeader(""int"")
            .addHeader("""")
            .build();
        Sensor<File> sensor = Sensor.create(ObservableSensor::create, SensorParams.create(
            Keys::obs, """", manual));
        Map<String, Map<String, Object>> fieldEncodings = setupMap( null,"
15737,testCoordinateEncoderNotInitialized,"    public void testCoordinateEncoderNotInitialized() {
        Publisher manual = Publisher.builder()
            .addHeader(""foo"")
            .addHeader(""coord"")
            .addHeader("""")
            .build();
        Sensor<File> sensor = Sensor.create(ObservableSensor::create, SensorParams.create(
            Keys::obs, """", manual));
        Map<String, Map<String, Object>> fieldEncodings = setupMap( null,"
15738,testGeoEncoderNotInitialized,"    public void testGeoEncoderNotInitialized() {
        Publisher manual = Publisher.builder()
            .addHeader(""foo"")
            .addHeader(""geo"")
            .addHeader("""")
            .build();
        Sensor<File> sensor = Sensor.create(ObservableSensor::create, SensorParams.create(
            Keys::obs, """", manual));
        Map<String, Map<String, Object>> fieldEncodings = setupMap( null,"
15739,testDateEncoderNotInitialized,"    public void testDateEncoderNotInitialized() {
        Publisher manual = Publisher.builder()
            .addHeader(""foo"")
            .addHeader(""datetime"")
            .addHeader(""T"")
            .build();
        Sensor<File> sensor = Sensor.create(ObservableSensor::create, SensorParams.create(
            Keys::obs, """", manual));
        Map<String, Map<String, Object>> fieldEncodings = setupMap( null, "
15740,testStringCategoryEncoderNotInitialized,"    public void testStringCategoryEncoderNotInitialized() {
        Publisher manual = Publisher.builder()
            .addHeader(""foo"")
            .addHeader(""string"")
            .addHeader(""C"")
            .build();
        Sensor<File> sensor = Sensor.create(ObservableSensor::create, SensorParams.create(
            Keys::obs, """", manual));
        Map<String, Map<String, Object>> fieldEncodings = setupMap( null,"
15741,testListCategoryEncoderNotInitialized,"    public void testListCategoryEncoderNotInitialized() {
        Publisher manual = Publisher.builder()
            .addHeader(""foo"")
            .addHeader(""list"")
            .addHeader(""C"")
            .build();
        Sensor<File> sensor = Sensor.create(ObservableSensor::create, SensorParams.create(
            Keys::obs, """", manual));
        Map<String, Map<String, Object>> fieldEncodings = setupMap( null,"
15745,testHandlesImproperInstantiation,"    public void testHandlesImproperInstantiation() {
        try {
            Sensor.create(null, null);
            fail();"
15751,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        HTMSensor<?> other = (HTMSensor<?>)obj;
        if(indexFieldMap == null) {"
15752,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((indexFieldMap == null) ? 0 : indexFieldMap.hashCode());
        result = prime * result + ((sensorParams == null) ? 0 : Arrays.deepHashCode(sensorParams.keys()));
        return result;
    }"
15753,getEncoder,"    public <K> MultiEncoder getEncoder() {
        return (MultiEncoder)encoder;
    }"
15754,initEncoders,"    private void initEncoders(Map<String, Map<String, Object>> encoderSettings) {
        if(encoder instanceof MultiEncoder) {
            if(encoderSettings == null || encoderSettings.isEmpty()) {
                throw new IllegalArgumentException("
15755,processHeader,"    private void processHeader(String[] entry) {
        header.process(entry);
    }"
15756,getLocalParameters,"    public Parameters getLocalParameters() {
        return localParameters;
    }"
15757,encodersInitted,"    public boolean encodersInitted() {
        return encodersInitted;
    }"
15758,initEncoder,"    public void initEncoder(Parameters p) {
        this.localParameters = p;
        
        Map<String, Map<String, Object>> encoderSettings;
        if((encoderSettings = (Map<String, Map<String, Object>>)p.get(KEY.FIELD_ENCODING_MAP)) != null &&"
15759,getMetaInfo,"    public Header getMetaInfo() {
        return header;
    }"
15760,isTerminal,"    public boolean isTerminal() {
        return delegate.getInputStream().isTerminal();
    }"
15761,getNumberEncoder,"    private Optional<Encoder<?>> getNumberEncoder(MultiEncoder enc) {
        for(EncoderTuple t : enc.getEncoders(enc)) {
            if((t.getEncoder() instanceof RandomDistributedScalarEncoder) ||
                (t.getEncoder() instanceof ScalarEncoder) ||"
15762,getSDRPassThroughEncoder,"    private Optional<SDRPassThroughEncoder> getSDRPassThroughEncoder(MultiEncoder enc) {
       for(EncoderTuple t : enc.getEncoders(enc)) {
           if(t.getEncoder() instanceof SDRPassThroughEncoder) {
               return Optional.of((SDRPassThroughEncoder)t.getEncoder());"
15763,getDateEncoder,"    private Optional<DateEncoder> getDateEncoder(MultiEncoder enc) {
       for(EncoderTuple t : enc.getEncoders(enc)) {
           if(t.getEncoder() instanceof DateEncoder) {
               return Optional.of((DateEncoder)t.getEncoder());"
15764,getCategoryEncoder,"    private Optional<Encoder<?>> getCategoryEncoder(MultiEncoder enc) {
        for(EncoderTuple t : enc.getEncoders(enc)) {
            if((t.getEncoder() instanceof CategoryEncoder) ||
                (t.getEncoder() instanceof SDRCategoryEncoder)) {"
15765,getCoordinateEncoder,"    private Optional<Encoder<?>> getCoordinateEncoder(MultiEncoder enc) {
        for(EncoderTuple t : enc.getEncoders(enc)) {
            if((t.getEncoder() instanceof CoordinateEncoder) ||
                (t.getEncoder() instanceof GeospatialCoordinateEncoder)) {"
15766,padTo,"    static int padTo(int i, List<?> l) {
        for(int x = l.size();x < i + 1;x++) {
            l.add(null);
        }"
15767,getInputMap,"    public Map<String, Object> getInputMap() {
        return inputMap;
    }"
15768,input,"    private int[] input(String[] arr, String[] fieldNames, FieldMetaType[] fieldTypes, List<int[]> outputStreamSource, boolean isParallel) {
        processHeader(arr);
        
        int[] encoding = encoder.encode(inputMap);
        
        if(isParallel) {"
15769,getFieldTypes,"    private FieldMetaType[] getFieldTypes() {
        return header.getFieldTypes().toArray(new FieldMetaType[header.getFieldTypes().size()]);
    }"
15770,getFieldNames,"    private String[] getFieldNames() {
        return (String[])header.getFieldNames().toArray(new String[header.getFieldNames().size()]);
    }"
15771,hasNext,"    public boolean hasNext() {
        return mainIterator.hasNext();
    }"
15772,getOutputStream,"    public Stream<int[]> getOutputStream() {
        if(isTerminal()) {
            throw new IllegalStateException(""Stream is already \""terminal\"" (operated upon or empty)"");
        }
        
        final MultiEncoder encoder = (MultiEncoder)getEncoder();
        if(encoder == null) {
            throw new IllegalStateException("
15773,containsKey,"        @Override public boolean containsKey(Object key) {
            return indexFieldMap.get(key) != -1;
        }"
15774,get,"        @Override public Object get(Object key) {
            int idx = indexFieldMap.get(key);
            return fTypes[idx].decodeType(arr[idx + 1], indexToEncoderMap.get(idx));
        }"
15776,hasNext,"        public boolean hasNext() { return !list.isEmpty() || mainIterator.hasNext(); }
        public int[] next() {
            if(list.isEmpty()) {"
15777,getInputStream,"    public <K> MetaStream<K> getInputStream() {
        return (MetaStream<K>)delegate.getInputStream();
    }"
15778,getSensorParams,"    public SensorParams getSensorParams() {
        return sensorParams;
    }"
15779,getSensorClass,"    public Class<? extends Sensor<?>> getSensorClass() {
        return (Class<? extends Sensor<?>>)delegate.getClass();
    }"
15780,makeIndexEncoderMap,"    private void makeIndexEncoderMap() {
        indexToEncoderMap = new TIntObjectHashMap<Encoder<?>>();
        
        for (int i = 0, size = header.getFieldNames().size(); i < size; i++) {"
15781,createEncoder,"    private void createEncoder() {
        encoder = MultiEncoder.builder().name(""MultiEncoder"").build();
        
        Map<String, Map<String, Object>> encoderSettings;
        if(localParameters != null && "
15782,postDeSerialize,"    public HTMSensor<?> postDeSerialize() {
        initEncoder(localParameters);
        makeIndexEncoderMap();
        return this;
    }"
15783,setLocalParameters,"    public void setLocalParameters(Parameters localParameters) {
        this.localParameters = localParameters;
    }"
15784,writeObject,"    public void writeObject(Object t, Class... c) throws IOException {
        if(t instanceof Persistable) {
            ((Persistable) t).preSerialize();
        }"
15786,testRoundTrip,"    public void testRoundTrip() {
        Network network = getLoadedHotGymNetwork();
        SerializerCore serializer = Persistence.get().serializer();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        HTMObjectOutput writer = serializer.getObjectOutput(baos);
        try {
            writer.writeObject(network, Network.class);
            writer.flush();
            writer.close();
        }catch(Exception e) {"
15787,readObject,"    public Object readObject(Class...classes) throws Exception {
        try {
            Object obj = super.readObject(classes);"
15788,main,"    public static void main(String[] args) {
        File f = new File(""/Users/cogmission/git/htm.java/src/test/resources/rec-center-hourly-4period.csv"");
        File fout = new File(""/Users/cogmission/git/htm.java/src/test/resources/rec-center-hourly-4temp.csv"");
        BufferedReader buf = null;
        PrintWriter p = null;
        try {
            buf = new BufferedReader(new FileReader(f));"
15789,size,"            public int size() {
                return ta.length;
            }"
15790,getRow,"            public Tuple getRow(int row) {
                return ta[row];
            }"
15791,getTestHeaderLearn,"    private ValueList getTestHeaderLearn() {
        return new ValueList() {
            Tuple[] ta = new Tuple[] {"
15794,getTestHeaderReset,"    private ValueList getTestHeaderReset() {
        return new ValueList() {
            Tuple[] ta = new Tuple[] {"
15797,getTestHeaderSeq,"    private ValueList getTestHeaderSeq() {
        return new ValueList() {
            Tuple[] ta = new Tuple[] {"
15800,getTestHeaderOff,"    private ValueList getTestHeaderOff() {
        return new ValueList() {
            Tuple[] ta = new Tuple[] {"
15801,getLines,"    private List<String[]> getLines(String path) {
        List<String[]> retVal = new ArrayList<>();
        File f = new File(path);
        BufferedReader buf = null;
        try {
            buf = new BufferedReader(new FileReader(f));
            String line = null;"
15802,testProcessLearn,"    public void testProcessLearn() {
        Header header = new Header(getTestHeaderOff());
        List<String[]> lines = getLines(ResourceLocator.path(""rec-center-hourly-4period.csv""));
        
        for(String[] line: lines) {
            header.process(line);
            assertFalse(header.isReset());
            assertTrue(header.isLearn());
        }"
15803,testProcessReset,"    public void testProcessReset() {
        Header header = new Header(getTestHeaderOff());
        List<String[]> lines = getLines(ResourceLocator.path(""rec-center-hourly-4period.csv""));
        
        for(String[] line: lines) {
            header.process(line);
            assertFalse(header.isReset());
            assertTrue(header.isLearn());
        }"
15804,testProcessCategories,"    public void testProcessCategories() {
        Object[] n = { ""some name"", ResourceLocator.path(""rec-center-hourly-4period-cat.csv"") };
        
        Sensor<File> sensor2 = Sensor.create(
            FileSensor::create, 
                SensorParams.create(Keys::path, n));"
15805,testProcessSequence,"    public void testProcessSequence() {
        Header header = new Header(getTestHeaderOff());
        List<String[]> lines = getLines(ResourceLocator.path(""rec-center-hourly-4period.csv""));
        
        for(String[] line: lines) {
            header.process(line);
            assertFalse(header.isReset());
            assertTrue(header.isLearn());
        }"
15806,testHeader,"    public void testHeader() {
        Object[] n = { ""some name"", ResourceLocator.path(""rec-center-hourly-4reset.csv"") };
        
        Sensor<File> sensor2 = Sensor.create(
            FileSensor::create, 
                SensorParams.create(Keys::path, n));"
15808,process,"    void process(String[] input) {
        isChanged = false;
        
        if(resetIndexes.length > 0) {
            for(int i : resetIndexes) {
                if(Integer.parseInt(input[i].trim()) == 1) {"
15810,isReset,"    public boolean isReset() {
        return isChanged;
    }"
15811,getFlags,"    public List<SensorFlags> getFlags() {
        return sensorFlags;
    }"
15812,getFieldTypes,"    public List<FieldMetaType> getFieldTypes() {
        return fieldMeta;
    }"
15813,getFieldNames,"    public List<String> getFieldNames() {
        return fieldNames;
    }"
15814,size,"    public int size() {
        return rawTupleList.size();
    }"
15815,getRow,"    public Tuple getRow(int index) {
        return rawTupleList.getRow(index);
    }"
15822,testOneSequence,"    public void testOneSequence() {
        List<Integer> sequence0 = Arrays.asList(new Integer[] { 7, 12, 12, 16 });
        
        Function<Integer, Integer> identity = Function.identity();
        
        @SuppressWarnings({ ""unchecked"", ""rawtypes"" })
        GroupBy2<Integer> m = GroupBy2.of(
            new Pair(sequence0, identity));"
15823,list,"    public List<Integer> list(int i, int j) {
        return Arrays.asList(new Integer[] { i, j });
    }"
15824,list,"    public List<Integer> list(int i) {
        return Arrays.asList(new Integer[] { i });
    }"
15825,toString,"        public String toString() {
            return value != null ? String.format(""Slot[%s]"", value) : ""NONE"";
        }"
15826,hashCode,"        public int hashCode() {
            return Objects.hashCode(value);
        }"
15827,equals,"        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (!(obj instanceof Slot)) {"
15828,isPresent,"        public boolean isPresent() {
            return value != null;
        }"
15829,empty,"        public static<T> Slot<T> empty() {
            @SuppressWarnings(""unchecked"")
            Slot<T> t = (Slot<T>) NONE;
            return t;"
15830,get,"        public T get() {
            if (value == null) {
                throw new NoSuchElementException(""No value present"");
            }"
15831,ofNullable,"        public static <T> Slot<T> ofNullable(T value) {
            return value == null ? (Slot<T>)NONE : of(value);
        }"
15832,of,"        public static <T> Slot<T> of(T value) {
            return new Slot<>(value);
        }"
15833,drainKey,"    private void drainKey(Tuple retVal, int listIdx, R targetVal) {
        while(generatorList.get(listIdx).hasNext()) {
            if(generatorList.get(listIdx).peek().getSecond().equals(targetVal)) {"
15834,isEligibleList,"    private boolean isEligibleList(int listIdx, Object targetKey) {
       return nextList[listIdx].isPresent() && nextList[listIdx].get().getSecond().equals(targetKey);
    }"
15835,nextMinKey,"    private boolean nextMinKey() {
        return Arrays.stream(nextList)
            .filter(opt -> opt.isPresent())"
15836,advanceSequences,"    private void advanceSequences() {
        for(int i = 0;i < numEntries;i++) {
            if(advanceList[i]) {"
15837,next,"    public Tuple next() {
        
        Object[] objs = IntStream
            .range(0, numEntries + 1)
            .mapToObj(i -> i==0 ? minKeyVal : new ArrayList<R>())
            .toArray();"
15838,hasNext,"    public boolean hasNext() {
        if(generatorList == null) {
            reset();
        }
        "
15839,iterator,"    public Iterator<Tuple> iterator() { return this; }
    
    /**"
15840,reset,"    public void reset() {
        generatorList = new ArrayList<>();
        
        for(int i = 0;i < entries.length;i++) {
            generatorList.add(GroupBy.of(entries[i].getFirst(), entries[i].getSecond()));
        }
        
        numEntries = generatorList.size();
        "
15841,of,"    public static <R extends Comparable<R>> GroupBy2<R> of(Pair<List<Object>, Function<Object, R>>... entries) {
        return new GroupBy2<>(entries);
    }"
15842,of,"    public static <T, R> GroupBy<T, R> of(List<T> l, Function<T, R> fn) {
        return new GroupBy<T, R>(l, fn);
    }"
15843,next,"    public Pair<T, R> next() {
        T t = range.hasNext() ? iter.get(range.next()) : null;
        Pair<T, R> ret = next;
        next = t != null ? new Pair<T, R>(t, fn.apply(t)) : null;
        return ret;
    }"
15844,hasNext,"    public boolean hasNext() {
        return next != null;
    }"
15845,peek,"    public Pair<T, R> peek() {
        return next;
    }"
15847,overlap,"	public double overlap(int[] sdr1, int[] sdr2) {
		assertEquals(sdr1.length, sdr2.length);
		int sum = ArrayUtils.sum(ArrayUtils.and(sdr1, sdr2));

		return (double)sum / (double)ArrayUtils.sum(sdr1);"
15848,encode,"	public int[] encode(CoordinateEncoder encoder, double[] coordinate, double radius) {
		int[] output = new int[encoder.getWidth()];
		encoder.encodeIntoArray(new Tuple(coordinate[0], coordinate[1], radius), output);
		return output;
	}"
15855,initGE,"	private void initGE() {
		ge = builder.build();
	}"
15856,setUp,"	private void setUp() {
		builder = GeospatialCoordinateEncoder.geobuilder()
			.name(""coordinate"")"
15857,timestep,"		public Builder timestep(int timestep) {
			this.timestep = timestep;
			return this;
		}"
15858,scale,"		public Builder scale(int scale) {
			this.scale = scale;
			return this;
		}"
15860,radiusForSpeed,"	public double radiusForSpeed(double speed) {
		double overlap = 1.5;
		double coordinatesPerTimestep = speed * timestep / scale;
		int radius = (int)Math.round(coordinatesPerTimestep / 2D * overlap); 
		int minRadius = (int)Math.ceil((Math.sqrt(w) - 1) / 2);
		return Math.max(radius, minRadius);
	}"
15861,inverseMercator,"	protected double[] inverseMercator(double x, double y) {
		double lon = (x / 20037508.34d) * 180;
		double lat = (y / 20037508.34d) * 180;
		
		lat = 180/Math.PI * (2 * Math.atan(Math.exp(lat * Math.PI / 180)) - Math.PI / 2);
		"
15862,toMercator,"	protected double[] toMercator(double lon, double lat) {
		double x = lon * 20037508.34d / 180;
		double y = Math.log(Math.tan((90 + lat) * Math.PI / 360)) / (Math.PI / 180);
		y = y * 20037508.34d / 180;
		
		return new double[] { x, y};"
15863,coordinateForPosition,"	public int[] coordinateForPosition(double longitude, double lattitude) {
		double[] coordinate = toMercator(longitude, lattitude);
		coordinate[0] /= scale;
		coordinate[1] /= scale;
		return new int[] { (int)coordinate[0], (int)coordinate[1] };
	}"
15864,encodeIntoArray,"	public void encodeIntoArray(Tuple inputData, int[] output) {
		double longitude = (double)inputData.get(0);
		double lattitude = (double)inputData.get(1);
		double speed = (double)inputData.get(2);
		int[] coordinate = coordinateForPosition(longitude, lattitude);
		double radius = radiusForSpeed(speed);
		
		super.encodeIntoArray(new Tuple(coordinate, radius), output);"
15865,geobuilder,"	public static GeospatialCoordinateEncoder.Builder geobuilder() {
		return new GeospatialCoordinateEncoder.Builder();
	}"
15866,testOf,"    public void testOf() {
        List<Integer> l = new ArrayList<>();
        l.add(42);
        Generator<Integer> g = Generator.of(l, IntGenerator.of(0, 1));
        assertEquals(42, (int)g.next());
        assertFalse(g.hasNext());
    }"
15868,next,"            public Integer next() {
                return new Integer(42);
            }"
15869,hasNext,"            public boolean hasNext() {
                return true;
            }"
15871,hasNext,"            public boolean hasNext() { 
                return i.hasNext();
            }"
15872,next,"            public T next() {
                return l.get(i.next());
            }"
15873,of,"    static <T> Generator<T> of(List<T> l, Generator<Integer> i) {
        /**
         *  Inner implementation of an {@code Generator}"
15874,iterator,"    default Iterator<T> iterator() { return this; }
    
    /**"
15878,size,"    default int size() { return -1; }
    
    /**"
15879,get,"    default int get() { return -1; }
    
    /**"
15882,computeIndex,"    public int computeIndex(int[] coordinates, boolean doCheck);
"
15887,testHashCodeAndEquals,"    public void testHashCodeAndEquals() {
        FlatArrayMatrix<?> fam = new FlatArrayMatrix<>(new int[] { 5 });
        assertNotNull(fam);
        
        FlatArrayMatrix<?> fam2 = new FlatArrayMatrix<>(new int[] { 5 }, false);
        assertNotNull(fam2);
        
        assertEquals(fam, fam2);"
15888,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(!super.equals(obj))
            return false;
        if(getClass() != obj.getClass())
            return false;
        FlatArrayMatrix other = (FlatArrayMatrix)obj;"
15889,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + Arrays.hashCode(data);
        return result;
    }"
15890,fill,"    public void fill(T value) {
        Arrays.fill(this.data, value);
    }"
15891,set,"    public FlatArrayMatrix<T> set(int index, T value) {
        this.data[index] = value;
        return this;
    }"
15892,get,"    public T get(int index) {
        return this.data[index];
    }"
15894,testNegativeFileSensorCreation,"    public void testNegativeFileSensorCreation() {
        Object[] n = { ""some name"", ResourceLocator.path(""rec-center-hourly.csv"") };
        SensorParams parms = SensorParams.create(Keys::uri, n);
        try {
            Sensor.create(FileSensor::create, parms);
            fail();
        }catch(Exception e) {
            assertEquals(IllegalArgumentException.class, e.getClass());"
15896,main,"    public static void main(String[] args) {
        String filepart = System.getProperty(""user.home"") + ""/git/htm.java/src/test/resources/pathtest.jar"";
        File f = new File(filepart);
        System.out.println(""file exists ? "" + f.exists());
        String path = filepart + ""!rec-center-hourly.csv"";
        Stream<String> stream = getJarEntryStream(path);
        stream.forEach(l -> System.out.println(l));
    }"
15897,getJarEntryStream,"    public static Stream<String> getJarEntryStream(String path) {
        Stream<String> retVal = null;
        String[] parts = path.split(""\\!"");
        try {
            JarFile jar = new JarFile(parts[0]);
            String innerPath = parts[1];"
15901,create,"    public static Sensor<File> create(SensorParams p) {
        Sensor<File> fs = new FileSensor(p);
        return fs;
    }"
15903,fromString,"	public static FieldMetaType fromString(Object s) {
	    String val = s.toString().toLowerCase();
	    switch(val) {
	        case ""char"" : "
15904,display,"	public String display() {
		return displayString;
	}"
15905,decodeType,"    public <T> T decodeType(String input, Encoder<?> enc) {
	    switch(this) {
            case LIST : "
15906,newEncoder,"	public Encoder<?> newEncoder() {
	    switch(this) {
	        case LIST :"
15907,testUniquenessAndDeterminance,"    public void testUniquenessAndDeterminance() {
        Random r = new FastRandom(42);
        TIntHashSet set = new TIntHashSet();
        
        TIntHashSet knownExpectedRepeats = new TIntHashSet();
        knownExpectedRepeats.addAll(new int[] { 9368, 149368, 193310, 194072, 202906, 241908, 249466, 266101, 276853, 289339, 293737 } );
        "
15908,testSeed,"    public void testSeed() {
        assertEquals(42, new FastRandom(42).getSeed());
    }"
15910,setSeed,"    synchronized public void setSeed(int[] array) {
        if (array.length == 0)
            throw new IllegalArgumentException(""Array length must be greater than zero"");
        setSeed(array.hashCode());"
15911,next,"    protected int next(int nbits) {
        long x = seed;
        x ^= (x << 21);
        x ^= (x >>> 35);
        x ^= (x << 4);
        seed = x;
        x &= ((1L << nbits) - 1);
        
        return (int) x;"
15912,clone,"    public FastRandom clone() {
        return new FastRandom(getSeed());
    }"
15913,setSeed,"    public synchronized void setSeed(long seed) {
        this.seed = seed;
        super.setSeed(seed);
    }"
15914,getSeed,"    public synchronized long getSeed() {
        return seed;
    }"
15915,setForTest,"    public AbstractSparseBinaryMatrix setForTest(int index, int value) {
        return set(index, value);
    }"
15916,getTrueCounts,"    public int[] getTrueCounts() {
        int[] trueCounts = new int[this.dimensions[0]];
        for (int i = 0; i < this.dimensions[0]; i++) 
            trueCounts[i] = getTrueCount(i);
        "
15917,getTrueCount,"    public int getTrueCount(int index) {
        return getColumnInput(index).size();
    }"
15918,clearStatistics,"    public void clearStatistics(int row) {
        getColumnInput(row).clear();
    }"
15919,getColumnInput,"    private TIntHashSet getColumnInput(int i) {
        if (this.columns[i] == null)
            this.columns[i] = new TIntHashSet();
        "
15920,get,"    public Integer get(int index) {
        int[] coordinates = computeCoordinates(index);
        return  getColumnInput(coordinates[0]).contains(coordinates[1]) ? 1 : 0;
    }"
15921,set,"    public AbstractSparseBinaryMatrix set(int value, int... coordinates) {
        TIntHashSet input = getColumnInput(coordinates[0]);
        if (value == 0) {
            input.remove(coordinates[1]);
        }"
15922,set,"    public FastConnectionsMatrix set(int index, Object value) {
       set(index, ((Integer)value).intValue());
       return this;
    }"
15923,rightVecSumAtNZ,"    public void rightVecSumAtNZ(int[] inputVector, int[] results, double stimulusThreshold) {
        for (int i = 0; i < dimensions[0]; i++) {
            int[] columnIndexes = getColumnInput(i).toArray();"
15924,rightVecSumAtNZ,"    public void rightVecSumAtNZ(int[] inputVector, int[] results) {
        for (int i = 0; i < dimensions[0]; i++) {
            for (int index : getColumnInput(i).toArray()) {"
15925,getSlice,"    public Object getSlice(int... coordinates) {
        if (coordinates.length > this.numDimensions - 1)
            sliceError(coordinates);
        
        int[] slice = new int[this.dimensions[1]];
        for (int i = 0; i < this.dimensions[1]; i++)"
15926,assertAllActiveWereUnpredicted,"    public void assertAllActiveWereUnpredicted() {
        Metric unpredictedActiveColumnsMetric = tm.mmGetMetricFromTrace(
            tm.mmGetTraceUnpredictedActiveColumns());
        Metric predictedActiveColumnsMetric = tm.mmGetMetricFromTrace(
            tm.mmGetTracePredictedActiveColumns());
        
        assertEquals(predictedActiveColumnsMetric.sum, 0, 0);"
15927,assertAllInactiveWereUnpredicted,"    public void assertAllInactiveWereUnpredicted() {
        Metric predictedInactiveColumnsMetric = tm.mmGetMetricFromTrace(
            tm.mmGetTracePredictedInactiveColumns());
        "
15928,assertAllActiveWerePredicted,"    public void assertAllActiveWerePredicted() {
        Metric unpredictedActiveColumnsMetric = tm.mmGetMetricFromTrace(
            tm.mmGetTraceUnpredictedActiveColumns());
        
        Metric predictedActiveColumnsMetric = tm.mmGetMetricFromTrace(
            tm.mmGetTracePredictedActiveColumns());
        "
15929,testTM,"    public void testTM(List<Set<Integer>> sequence, String label) {
        feedTM(sequence, label, false, 1);
        
        System.out.println(tm.mmPrettyPrintMetrics(tm.mmGetDefaultMetrics(1), 7));"
15930,feedTM,"    public void feedTM(List<Set<Integer>> sequence, String label, boolean learn, int num) {
        super.feedTM(sequence, label, learn, num);
        
        if(VERBOSITY >= 2) {
            System.out.println(tm.mmPrettyPrintTraces("
15948,equals,"    @Override public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof Encoding)) {
            return false;
        }"
15949,getEncoding,"    public int[] getEncoding() {
        return (int[])get(3);
    }"
15950,getScalar,"    public Number getScalar() {
        return (Number)get(2);
    }"
15951,getValue,"    public Object getValue() {
        return get(1);
    }"
15952,toString,"    public String toString() {
        return new StringBuilder(""EncoderResult(value="").
                append(get(1)).append("", scalar="").append(get(2))."
15953,getOffset,"	public int getOffset() {
		return (Integer)get(2);
	}"
15954,getEncoder,"	public Encoder<?> getEncoder() {
		return (Encoder<?>)get(1);
	}"
15955,getName,"	public String getName() {
		return (String)get(0);
	}"
15956,name,"		public K name(String name) {
			this.name = name;
			return (K)this;
		}"
15957,forced,"		public K forced(boolean forced) {
			this.forced = forced;
			return (K)this;
		}"
15958,clipInput,"		public K clipInput(boolean clipInput) {
			this.clipInput = clipInput;
			return (K)this;
		}"
15959,periodic,"		public K periodic(boolean periodic) {
			this.periodic = periodic;
			return (K)this;
		}"
15960,resolution,"		public K resolution(double resolution) {
			this.resolution = resolution;
			return (K)this;
		}"
15961,radius,"		public K radius(double radius) {
			this.radius = radius;
			return (K)this;
		}"
15962,maxVal,"		public K maxVal(double maxVal) {
			this.maxVal = maxVal;
			return (K)this;
		}"
15963,minVal,"		public K minVal(double minVal) {
			this.minVal = minVal;
			return (K)this;
		}"
15964,w,"		public K w(int w) {
			this.w = w;
			return (K)this;
		}"
15965,n,"		public K n(int n) {
			this.n = n;
			return (K)this;
		}"
15966,build,"		public E build() {
			if(encoder == null) {
				throw new IllegalStateException(""Subclass did not instantiate builder type "" +
					""before calling this method!"");
			}
			encoder.setN(n);
			encoder.setW(w);
			encoder.setMinVal(minVal);
			encoder.setMaxVal(maxVal);
			encoder.setRadius(radius);
			encoder.setResolution(resolution);
			encoder.setPeriodic(periodic);
			encoder.setClipInput(clipInput);
			encoder.setForced(forced);"
15967,getDisplayWidth,"	public int getDisplayWidth() {
		return getWidth() + getDescription().size() - 1;
	}"
15968,rightVecProd,"    public int[] rightVecProd(SparseObjectMatrix<int[]> matrix, int[] encoded) {
    	int[] retVal = new int[matrix.getMaxIndex() + 1];
    	for(int i = 0;i < retVal.length;i++) {
    		int[] slice = matrix.getObject(i);
    		for(int j = 0;j < slice.length;j++) {"
15970,topDownCompute,"	public List<Encoding> topDownCompute(int[] encoded) {
		List<Encoding> retVals = new ArrayList<Encoding>();

		List<EncoderTuple> encoders = getEncoders(this);
		int len = encoders.size();
		for(int i = 0;i < len;i++) {
			int offset = (int)encoders.get(i).get(2);"
15972,getBucketValues,"	public abstract <S> List<S> getBucketValues(Class<S> returnType);
"
15973,decodedToStr,"	public String decodedToStr(Tuple decodeResults) {
		StringBuilder desc = new StringBuilder();
		Map<String, Tuple> fieldsDict = (Map<String, Tuple>)decodeResults.get(0);
		List<String> fieldsOrder = (List<String>)decodeResults.get(1);
		for(String fieldName : fieldsOrder) {
			Tuple ranges = fieldsDict.get(fieldName);
			if(desc.length() > 0) {"
15974,decode,"	public Tuple decode(int[] encoded, String parentFieldName) {
		Map<String, Tuple> fieldsMap = new HashMap<String, Tuple>();
		List<String> fieldsOrder = new ArrayList<String>();

		String parentName = parentFieldName == null || parentFieldName.isEmpty() ?
			getName() : String.format(""%s.%s"", parentFieldName, getName());

		List<EncoderTuple> encoders = getEncoders(this);
		int len = encoders.size();"
15975,pprint,"	public void pprint(int[] output, String prefix) {
		LOGGER.info(prefix == null ? """" : prefix);

		List<Tuple> description = getDescription();
		description.add(new Tuple(""end"", getWidth()));

		int len = description.size() - 1;"
15976,pprintHeader,"	public void pprintHeader(String prefix) {
		LOGGER.info(prefix == null ? """" : prefix);

		List<Tuple> description = getDescription();
		description.add(new Tuple(""end"", getWidth()));

		int len = description.size() - 1;
		for(int i = 0;i < len;i++) {
			String name = (String)description.get(i).get(0);
			int width = (int)description.get(i+1).get(1);
"
15978,getDescription,"     public List<Tuple> getDescription() {
           return description;
     }"
15979,scalarsToStr,"	public String scalarsToStr(List<?> scalarValues, List<String> scalarNames) {
		if(scalarNames == null || scalarNames.isEmpty()) {
			scalarNames = getScalarNames("""");
		}

		StringBuilder desc = new StringBuilder();"
15980,getBucketIndices,"	public int[] getBucketIndices(double input) {
		TIntList l = new TIntArrayList();
		Map<EncoderTuple, List<EncoderTuple>> encoders = getEncoders();
		if(encoders != null && encoders.size() > 0) {
			for(EncoderTuple t : encoders.keySet()) {
				l.addAll(t.getEncoder().getBucketIndices(input));"
15981,getBucketIndices,"	public int[] getBucketIndices(String input) {
		TIntList l = new TIntArrayList();
		Map<EncoderTuple, List<EncoderTuple>> encoders = getEncoders();
		if(encoders != null && encoders.size() > 0) {
			for(EncoderTuple t : encoders.keySet()) {
				l.addAll(t.getEncoder().getBucketIndices(input));"
15982,getEncodedValues,"	public <S> List<String> getEncodedValues(S inputData) {
		List<String> retVals = new ArrayList<String>();
		Map<EncoderTuple, List<EncoderTuple>> encoders = getEncoders();
		if(encoders != null && encoders.size() > 0) {
			for(EncoderTuple t : encoders.keySet()) {
				retVals.addAll(t.getEncoder().getEncodedValues(inputData));"
15983,getScalars,"	public <S> TDoubleList getScalars(S d) {
		TDoubleList retVals = new TDoubleArrayList();
		double inputData = (Double)d;
		List<EncoderTuple> encoders = getEncoders(this);
		if(encoders != null) {
			for(EncoderTuple t : encoders) {
				TDoubleList values = t.getEncoder().getScalars(inputData);"
15984,getInputValue,"	public Object getInputValue(Object inputObject, String fieldName) {
		if(Map.class.isAssignableFrom(inputObject.getClass())) {
			@SuppressWarnings(""rawtypes"")
			Map map = (Map)inputObject;"
15985,getDecoderOutputFieldTypes,"	public Set<FieldMetaType> getDecoderOutputFieldTypes() {
		if(getFlattenedFieldTypeList() != null) {
			return new HashSet<>(getFlattenedFieldTypeList());
		}

		Set<FieldMetaType> retVal = new HashSet<FieldMetaType>();
		for(Tuple t : getEncoders(this)) {"
15986,getScalarNames,"	public List<String> getScalarNames(String parentFieldName) {
		List<String> names = new ArrayList<String>();
		if(getEncoders() != null) {
			List<EncoderTuple> encoders = getEncoders(this);
			for(Tuple tuple : encoders) {"
15987,encode,"	public int[] encode(T inputData) {
		int[] output = new int[getN()];
		encodeIntoArray(inputData, output);
		return output;
	}"
15988,setFieldStats,"	public void setFieldStats(String fieldName, Map<String, Double> fieldStatistics) {}
"
15989,setLearning,"    public void setLearning(boolean learningEnabled) {
        setLearningEnabled(learningEnabled);
    }"
15990,encodeIntoArray,"	public abstract void encodeIntoArray(T inputData, int[] output);
"
15993,setScalarNames,"    public void setScalarNames(List<String> names) {
    	this.scalarNames = names;
    }"
15994,getScalarNames,"    public List<String> getScalarNames() {
    	return scalarNames;
    }"
15995,setFlattenedFieldTypeList,"    public void setFlattenedFieldTypeList(Set<FieldMetaType> l) {
    	this.flattenedFieldTypeList = l;
    }"
15996,getFlattenedFieldTypeList,"    public Set<FieldMetaType> getFlattenedFieldTypeList() {
    	return flattenedFieldTypeList;
    }"
15997,getFlattenedFieldTypeList,"    public List<FieldMetaType> getFlattenedFieldTypeList(Encoder<T> e) {
    	if(decoderFieldTypes == null) {
    		decoderFieldTypes = new HashMap<Tuple, List<FieldMetaType>>();
    	}

    	Tuple key = getEncoderTuple(e);
    	List<FieldMetaType> fieldTypes = null;"
15998,isEncoderLearningEnabled,"    public boolean isEncoderLearningEnabled() {
    	return encLearningEnabled;
    }"
15999,setLearningEnabled,"    public void setLearningEnabled(boolean encLearningEnabled) {
    	this.encLearningEnabled = encLearningEnabled;
    }"
16000,getEncoders,"    public Map<EncoderTuple, List<EncoderTuple>> getEncoders() {
    	if(encoders == null) {
    		encoders = new LinkedHashMap<EncoderTuple, List<EncoderTuple>>();
    	}"
16001,getEncoders,"    public List<EncoderTuple> getEncoders(Encoder<T> e) {
    	return getEncoders().get(getEncoderTuple(e));
    }"
16002,getEncoderTuple,"    public EncoderTuple getEncoderTuple(Encoder<T> e) {
    	if(encoders == null) {
    		encoders = new LinkedHashMap<EncoderTuple, List<EncoderTuple>>();
    	}
"
16004,getName,"    public String getName() {
    	return name;
    }"
16005,setName,"    public void setName(String name) {
    	this.name = name;
    }"
16006,isForced,"    public boolean isForced() {
    	return forced;
    }"
16007,setForced,"    public void setForced(boolean b) {
    	this.forced = b;
    }"
16008,isPeriodic,"    public boolean isPeriodic() {
    	return periodic;
    }"
16009,setPeriodic,"    public void setPeriodic(boolean b) {
    	this.periodic = b;
    }"
16010,clipInput,"    public boolean clipInput() {
    	return clipInput;
    }"
16011,setClipInput,"    public void setClipInput(boolean b) {
    	this.clipInput = b;
    }"
16012,getResolution,"    public double getResolution() {
    	return resolution;
    }"
16013,setResolution,"    public void setResolution(double resolution) {
    	this.resolution = resolution;
    }"
16014,getRadius,"    public double getRadius() {
    	return radius;
    }"
16015,setRadius,"    public void setRadius(double radius) {
    	this.radius = radius;
    }"
16016,getMaxVal,"    public double getMaxVal() {
    	return maxVal;
    }"
16017,setMaxVal,"    public void setMaxVal(double maxVal) {
    	this.maxVal = maxVal;
    }"
16018,getMinVal,"    public double getMinVal() {
    	return minVal;
    }"
16019,setMinVal,"    public void setMinVal(double minVal) {
    	this.minVal = minVal;
    }"
16021,setN,"    public void setN(int n) {
    	this.n = n;
    }"
16022,getHalfWidth,"    public int getHalfWidth() {
    	return halfWidth;
    }"
16023,getTopDownValues,"    public double[] getTopDownValues() {
    	return topDownValues;
    }"
16024,setTopDownValues,"    public void setTopDownValues(double[] values) {
    	this.topDownValues = values;
    }"
16025,setTopDownMapping,"    public void setTopDownMapping(SparseObjectMatrix<int[]> sm) {
    	this.topDownMapping = sm;
    }"
16026,getNInternal,"    public int getNInternal() {
    	return nInternal;
    }"
16027,setNInternal,"    public void setNInternal(int n) {
    	this.nInternal = n;
    }"
16028,getRange,"    public double getRange() {
    	return range;
    }"
16029,setRange,"    public void setRange(double range) {
    	this.range = range;
    }"
16030,getRangeInternal,"    public double getRangeInternal() {
    	return rangeInternal;
    }"
16031,setRangeInternal,"    public void setRangeInternal(double r) {
    	this.rangeInternal = r;
    }"
16032,getPadding,"    public int getPadding() {
    	return padding;
    }"
16033,setPadding,"    public void setPadding(int padding) {
    	this.padding = padding;
    }"
16034,setHalfWidth,"    public void setHalfWidth(int hw) {
    	this.halfWidth = hw;
    }"
16036,setW,"    public void setW(int w) {
    	this.w = w;
    }"
16038,getDefaultParameters,"    private Parameters getDefaultParameters(Parameters p, KEY key, Object value) {
        Parameters retVal = p == null ? getDefaultParameters() : p;
        retVal.set(key, value);
        
        return retVal;"
16040,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(!super.equals(obj))
            return false;
        if(getClass() != obj.getClass())
            return false;
        DistalDendrite other = (DistalDendrite)obj;"
16041,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((cell == null) ? 0 : cell.hashCode());
        return result;
    }"
16042,toString,"    public String toString() {
        return String.valueOf(index);
    }"
16043,setOrdinal,"	public void setOrdinal(int ordinal) {
		this.ordinal = ordinal;
	}"
16044,getOrdinal,"    public int getOrdinal() {
		return ordinal;
	}"
16045,lastUsedIteration,"    public long lastUsedIteration() {
        return lastUsedIteration;
    }"
16046,setLastUsedIteration,"    public void setLastUsedIteration(long iteration) {
        this.lastUsedIteration = iteration;
    }"
16047,getActiveSynapses,"    public Set<Synapse> getActiveSynapses(Connections c, Set<Cell> activeCells) {
        Set<Synapse> synapses = new LinkedHashSet<>();
        
        for(Synapse synapse : c.getSynapses(this)) {
            if(activeCells.contains(synapse.getPresynapticCell())) {"
16048,getAllSynapses,"    public List<Synapse> getAllSynapses(Connections c) {
        return c.getSynapses(this);
    }"
16049,getParentCell,"    public Cell getParentCell() {
        return cell;
    }"
16051,testHeadTail,"	public void testHeadTail() {
	    Deque<Integer> deque = new Deque<Integer>(2);
	    deque.append(1);
        deque.append(2);
        assertEquals(1, (int)deque.head());
        assertEquals(2, (int)deque.tail());
	}"
16052,testIterator,"	public void testIterator() {
		Deque<Integer> deque = new Deque<Integer>(2);
		assertEquals(2, deque.capacity());
		deque.append(1);
		deque.append(2);
		assertEquals(deque.size(), deque.capacity());
		assertEquals(2, deque.size());
		
		Iterator<Integer> i = deque.iterator();
		assertEquals(new Integer(1), i.next());
		assertEquals(new Integer(2), i.next());
		assertTrue(!i.hasNext());"
16054,peekLast,"	public void peekLast() {
		Deque<Integer> deque = new Deque<Integer>(2);
		assertEquals(2, deque.capacity());
		deque.append(1);
		deque.append(2);
		assertEquals(deque.size(), deque.capacity());
		assertTrue(1 == deque.peekFirst());
		assertTrue(2 == deque.peekLast());
		assertEquals(deque.size(), deque.capacity());
	}"
16055,peekFirst,"	public void peekFirst() {
		Deque<Integer> deque = new Deque<Integer>(2);
		assertEquals(2, deque.capacity());
		deque.append(1);
		deque.append(2);
		assertEquals(deque.size(), deque.capacity());
		assertTrue(1 == deque.peekFirst());
		assertTrue(2 == deque.peekLast());
		assertEquals(deque.size(), deque.capacity());
	}"
16058,testClear,"	public void testClear() {
		Deque<Integer> deque = new Deque<Integer>(2);
		assertEquals(2, deque.capacity());
		
		deque.append(1);
		deque.append(2);
		assertEquals(deque.size(), deque.capacity());
		assertTrue(1 == deque.peekFirst());
		assertTrue(2 == deque.peekLast());
		
		deque.clear();
		assertEquals(2, deque.capacity());
		assertEquals(0, deque.size());
		assertNull(deque.takeFirst());"
16061,testInsert,"	public void testInsert() {
		Deque<Integer> deque = new Deque<Integer>(2);
		assertEquals(2, deque.capacity());
		
		deque.insert(1);
		deque.insert(2);
		assertEquals(deque.size(), deque.capacity());
		assertTrue(2 == deque.peekFirst());
		assertTrue(1 == deque.peekLast());
		
		deque.insert(3);
		assertEquals(2, deque.size());
		assertTrue(3 == deque.peekFirst());
		assertTrue(2 == deque.peekLast());"
16062,testAppend,"	public void testAppend() {
		Deque<Integer> deque = new Deque<Integer>(2);
		assertEquals(2, deque.capacity());
		
		deque.append(1);
		deque.append(2);
		assertEquals(deque.size(), deque.capacity());
		assertTrue(1 == deque.peekFirst());
		assertTrue(2 == deque.peekLast());
		
		deque.append(3);
		assertEquals(2, deque.size());
		assertTrue(2 == deque.peekFirst());
		assertTrue(3 == deque.peekLast());"
16063,testCapacity,"	public void testCapacity() {
		Deque<Integer> deque = new Deque<Integer>(2);
		assertEquals(2, deque.capacity());
		
		deque.append(1);
		deque.append(2);
		assertEquals(deque.size(), deque.capacity());
		assertTrue(1 == deque.peekFirst());
		assertTrue(2 == deque.peekLast());
		
		deque.append(3);"
16064,testConstruction,"	public void testConstruction() {
		Deque<Integer> deque = new Deque<Integer>(2);
		assertEquals(2, deque.capacity());
	}"
16065,toString,"	public String toString() {
		return backingList.toString() + "" capacity: "" + capacity;
	}"
16066,deepEquals,"	private boolean deepEquals(Deque<E> other) {
		Iterator<E> otherIt = other.iterator();
		for(Iterator<E> it = iterator();it.hasNext();) {
			if(!otherIt.hasNext() || !it.next().equals(otherIt.next())) {
				return false;"
16067,equals,"	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Deque<E> other = (Deque<E>) obj;
		if (capacity != other.capacity)
			return false;"
16068,hashCode,"	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((backingList == null) ? 0 : DeepEquals.deepHashCode(backingList));
		result = prime * result + capacity;
		result = prime * result + currentSize;
		return result;"
16069,iterator,"	public Iterator<E> iterator() {
		return backingList.iterator();
	}"
16070,peekLast,"	public E peekLast() {
		return backingList.peekLast();
	}"
16071,peekFirst,"	public E peekFirst() {
		return backingList.peekFirst();
	}"
16072,resize,"	public void resize(int newCapacity) {
		if(capacity == newCapacity) return;
		if(capacity > newCapacity) {
			throw new IllegalArgumentException(""Cannot resize to less than "" +
				""the original capacity: "" + capacity + "" > "" + newCapacity);"
16073,capacity,"	public int capacity() {
		return capacity;
	}"
16075,toArray,"	public <T> T[] toArray(T[] a) {
		return backingList.toArray(a);
	}"
16076,tail,"	public E tail() {
		E val = null;
		try {
			val = backingList.takeLast();
			currentSize--;"
16077,head,"	public E head() {
		E val = null;
		try {
			val = backingList.takeFirst();
			currentSize--;"
16078,takeLast,"	public E takeLast() {
		if(currentSize == 0) return null;
		
		E val = null;
		try {
			val = backingList.takeLast();"
16079,takeFirst,"	public E takeFirst() {
		if(currentSize == 0) return null;
		
		E val = null;
		try {
			val = backingList.takeFirst();"
16080,clear,"	public void clear() {
		backingList.clear();
		currentSize = 0;
	}"
16081,pushFirst,"	public E pushFirst(E t) {
		E retVal = null;
		boolean ret = currentSize == capacity;
		if(ret) {
			retVal = backingList.removeLast();
			backingList.addFirst(t);"
16082,pushLast,"	public E pushLast(E t) {
		E retVal = null;
		boolean ret = currentSize == capacity;
		if(ret) {
			retVal = backingList.removeFirst();
			backingList.addLast(t);"
16083,insert,"	public boolean insert(E t) {
		boolean ret = currentSize == capacity;
		if(ret) {
			backingList.removeLast();
			backingList.addFirst(t);"
16084,append,"	public boolean append(E t) {
		boolean ret = currentSize == capacity;
		if(ret) {
			backingList.removeFirst();
			backingList.addLast(t);"
16085,testEncodingVerification,"	public void testEncodingVerification() {
		int[] feedIn = { 1, 8, 4, 7, 8, 6, 3, 1 };
		int[] expectedOut = { 1, 8, 4, 7, 8, 6, 3, 1 };
		de = deBuilder.build();
		ase = aseBuilder.build();
		de.setLearningEnabled(true);
		ase.setLearningEnabled(true);
		for (int i = 0; i < feedIn.length; i++) {
			int[] deArray = new int[100];"
16086,testDeltaEncoder,"	public void testDeltaEncoder() {
		int[] intArray = new int[100];
		Arrays.fill(intArray, 0);
		de = deBuilder.build();
		for (int i = 2; i < 5; i++) {
			de.encodeIntoArray(Double.valueOf(i), intArray);
		}
		de.setStateLock(true);
		for (int i = 5; i < 7; i++) {
			de.encodeIntoArray(Double.valueOf(i), intArray);
		}"
16088,setUp,"	public void setUp() throws Exception {
		aseBuilder = AdaptiveScalarEncoder.adaptiveBuilder().n(100).w(21).minVal(1)
				.maxVal(8).radius(1.5).resolution(0.5).periodic(false)
				.forced(true);"
16089,tearDownAfterClass,"	public static void tearDownAfterClass() throws Exception {
	}"
16090,setUpBeforeClass,"	public static void setUpBeforeClass() throws Exception {
	}"
16091,topDownCompute,"	public List<Encoding> topDownCompute(int[] encoded) {
		if (this.prevAbsolute == 0 || this.prevDelta == 0) {
			int[] initialBuckets = new int[this.n];
			Arrays.fill(initialBuckets, 0);
			List<Encoding> encoderResultList = new ArrayList<Encoding>();
			Encoding encoderResult = new Encoding(0, 0, initialBuckets);"
16092,getBucketInfo,"	public List<Encoding> getBucketInfo(int[] buckets) {
		return super.getBucketInfo(buckets);
	}"
16095,setStateLock,"	public void setStateLock(boolean stateLock) {
		this.stateLock = stateLock;
	}"
16096,isStateLock,"	public boolean isStateLock() {
		return stateLock;
	}"
16097,encodeIntoArray,"	public void encodeIntoArray(Double input, int[] output) {
		if (!(input instanceof Double)) {
			throw new IllegalArgumentException(
					String.format(""Expected a Double input but got input of type %s"", input.toString()));
		}
		double delta = 0;"
16098,build,"		public DeltaEncoder build() {
			encoder = new DeltaEncoder();
			super.build();
			((DeltaEncoder) encoder).init();
			return (DeltaEncoder) encoder;
		}"
16099,deltaBuilder,"	public static DeltaEncoder.Builder deltaBuilder() {
		return new DeltaEncoder.Builder();
	}"
16100,initEncoder,"	public void initEncoder(int w, double minVal, double maxVal, int n,
			double radius, double resolution) {
		super.initEncoder(w, minVal, maxVal, n, radius, resolution);"
16102,getRange,"	public MinMax getRange(String fieldName, int index) {
		return fields.get(fieldName).getRange(index);
	}"
16103,getRanges,"	public RangeList getRanges(String fieldName) {
		return fields.get(fieldName);
	}"
16104,getDescriptions,"	public List<String> getDescriptions() {
		return fieldDescriptions;
	}"
16105,getFields,"	public Map<String, RangeList>  getFields() {
		return fields;
	}"
16108,testBucketIndexSupport,"    public void testBucketIndexSupport() {

        setUp();
        initDE();

        int[] bucketIndices = de.getBucketIndices(dt);
        System.out.println(String.format(""bucket indices: %s"", Arrays.toString(bucketIndices)));
        List<Encoding> bucketInfo = de.getBucketInfo(bucketIndices);

        List<Double> expectedList = Arrays.asList(320.25, 3.5, .167, 14.8);
"
16109,testTopDownCompute,"    public void testTopDownCompute() {
        setUp();
        initDE();

        List<Encoding> topDown = de.topDownCompute(bits);

        List<Double> expectedList = Arrays.asList(320.25, 3.5, .167, 14.8);"
16112,initDE,"    private void initDE() {
        de = builder.build();
    }"
16115,name,"        public DateEncoder.Builder name(String name) {
            this.name = name;
            return this;
        }"
16116,timeOfDay,"        public DateEncoder.Builder timeOfDay(int timeOfDay) {
            return this.timeOfDay(timeOfDay, (double) this.timeOfDay.get(1));
        }"
16117,timeOfDay,"        public DateEncoder.Builder timeOfDay(int timeOfDay, double radius) {
            this.timeOfDay = new Tuple(timeOfDay, radius);
            return this;
        }"
16118,holiday,"        public DateEncoder.Builder holiday(int holiday) {
            return this.holiday(holiday, (double) this.holiday.get(1));
        }"
16119,holiday,"        public DateEncoder.Builder holiday(int holiday, double radius) {
            this.holiday = new Tuple(holiday, radius);
            return this;
        }"
16120,customDays,"        public DateEncoder.Builder customDays(int customDays) {
            return this.customDays(customDays, (ArrayList<String>) this.customDays.get(1));
        }"
16121,customDays,"        public DateEncoder.Builder customDays(int customDays, List<String> customDaysList) {
            this.customDays = new Tuple(customDays, customDaysList);
            return this;
        }"
16122,weekend,"        public DateEncoder.Builder weekend(int weekend) {
            return this.weekend(weekend, (double) this.weekend.get(1));
        }"
16123,weekend,"        public DateEncoder.Builder weekend(int weekend, double radius) {
            this.weekend = new Tuple(weekend, radius);
            return this;
        }"
16124,dayOfWeek,"        public DateEncoder.Builder dayOfWeek(int dayOfWeek) {
            return this.dayOfWeek(dayOfWeek, (double) this.dayOfWeek.get(1));
        }"
16125,dayOfWeek,"        public DateEncoder.Builder dayOfWeek(int dayOfWeek, double radius) {
            this.dayOfWeek = new Tuple(dayOfWeek, radius);
            return this;
        }"
16126,season,"        public DateEncoder.Builder season(int season) {
            return this.season(season, (double) this.season.get(1));
        }"
16127,season,"        public DateEncoder.Builder season(int season, double radius) {
            this.season = new Tuple(season, radius);
            return this;
        }"
16130,getBucketIndices,"    public int[] getBucketIndices(DateTime input) {

        TDoubleList scalars = getScalars(input);

        TIntList l = new TIntArrayList();
        List<EncoderTuple> encoders = getEncoders(this);
        if(encoders != null && encoders.size() > 0) {"
16133,getEncodedValues,"    public List<String> getEncodedValues(Date inputData) {
        List<String> values = new ArrayList<>();

        List<String> encodedValues = getEncodedValues(inputData);

        for (String v : encodedValues) {"
16134,getDecoderOutputFieldTypes,"    public Set<FieldMetaType> getDecoderOutputFieldTypes() {
        return fieldTypes;
    }"
16135,encodeIntoArray,"    public void encodeIntoArray(DateTime inputData, int[] output) {

        if(inputData == null) {
            throw new IllegalArgumentException(""DateEncoder requires a valid Date object but got null"");
        }
"
16136,parseEncode,"    public int[] parseEncode(String dateStr) {
        int[] output = new int[getN()];
        this.encodeIntoArray(customFormatter.parseDateTime(dateStr), output);
        return output;
    }"
16137,parse,"    public DateTime parse(String dateTimeStr) {
        return customFormatter.parseDateTime(dateTimeStr);
    }"
16138,getCustomFormatPattern,"    public String getCustomFormatPattern() {
        return customFormatterPattern;
    }"
16139,setCustomFormatPattern,"    private void setCustomFormatPattern(String pattern) {
        this.customFormatterPattern = pattern;
    }"
16140,setCustomFormat,"    private void setCustomFormat(DateTimeFormatter formatter) {
        this.customFormatter = formatter;
    }"
16145,setTimeOfDay,"    public void setTimeOfDay(Tuple timeOfDay) {
        this.timeOfDay = timeOfDay;
    }"
16146,getTimeOfDay,"    public Tuple getTimeOfDay() {
        return timeOfDay;
    }"
16147,setHoliday,"    public void setHoliday(Tuple holiday) {
        this.holiday = holiday;
    }"
16148,getHoliday,"    public Tuple getHoliday() {
        return holiday;
    }"
16149,setCustomDays,"    public void setCustomDays(Tuple customDays) {
        this.customDays = customDays;
    }"
16150,getCustomDays,"    public Tuple getCustomDays() {
        return customDays;
    }"
16151,setWeekend,"    public void setWeekend(Tuple weekend) {
        this.weekend = weekend;
    }"
16152,getWeekend,"    public Tuple getWeekend() {
        return weekend;
    }"
16153,setDayOfWeek,"    public void setDayOfWeek(Tuple dayOfWeek) {
        this.dayOfWeek = dayOfWeek;
    }"
16154,getDayOfWeek,"    public Tuple getDayOfWeek() {
        return dayOfWeek;
    }"
16155,setSeason,"    public void setSeason(Tuple season) {
        this.season = season;
    }"
16156,getSeason,"    public Tuple getSeason() {
        return season;
    }"
16157,addCustomDays,"    protected void addCustomDays(List<String> daysList) {
        for(String dayStr : daysList)
        {"
16158,addChildEncoder,"    protected void addChildEncoder(ScalarEncoder encoder) {
        this.addEncoder(encoder.getName(), encoder);
    }"
16160,isValidEncoderPropertyTuple,"    private boolean isValidEncoderPropertyTuple(Tuple encoderPropertyTuple) {
        return encoderPropertyTuple != null && (int)encoderPropertyTuple.get(0) != 0;
    }"
16162,builder,"    public static DateEncoder.Builder builder() {
        return new DateEncoder.Builder();
    }"
16164,remove,"            public void remove() {
                throw new UnsupportedOperationException(""Remove not supported"");
            }"
16165,next,"            public Map<String, Object> next() {
                idx++;
                return map;
            }"
16166,hasNext,"            public boolean hasNext() {
                return idx < size - 1;
            }"
16168,multiIterator,"    public Iterator<Map<String, Object>> multiIterator() {
        return new Iterator<Map<String, Object>>() {
            int idx = -1;"
16169,getBody,"    public List<String[]> getBody() {
        return body;
    }"
16170,getHeader,"    public List<String[]> getHeader() {
        return header;
    }"
16171,createSource,"    public List<List<String[]>> createSource(File f) {
        List<String[]> body = new ArrayList<>();
        List<String[]> header = new ArrayList<>();
        List<List<String[]>> file = new ArrayList<>();

        BufferedReader br = null;
        try {
            br = new BufferedReader(new FileReader(f));
            String line = null;
            int headerIdx = 0;"
16172,reverse,"    public static int[] reverse(int[] input) {
        int[] retVal = new int[input.length];
        for(int i = input.length - 1, j = 0;i >= 0;i--, j++) {
            retVal[j] = input[i];
        }"
16173,initDimensionMultiples,"    protected int[] initDimensionMultiples(int[] dimensions) {
        int holder = 1;
        int len = dimensions.length;
        int[] dimensionMultiples = new int[numDimensions];
        for(int i = 0;i < len;i++) {
            holder *= (i == 0 ? 1 : dimensions[len - i]);
            dimensionMultiples[len - 1 - i] = holder;"
16174,computeCoordinates,"    public int[] computeCoordinates(int index) {
        int[] returnVal = new int[numDimensions];
        int base = index;
        for(int i = 0;i < dimensionMultiples.length; i++) {
            int quotient = base / dimensionMultiples[i];
            base %= dimensionMultiples[i];"
16175,computeIndex,"    public int computeIndex(int[] coordinates) {
        int[] localMults = isColumnMajor ? reverse(dimensionMultiples) : dimensionMultiples;
        int base = 0;
        for(int i = 0;i < coordinates.length;i++) {
            base += (localMults[i] * coordinates[i]);
        }"
16176,orderForCoordinate,"	public double orderForCoordinate(int[] coordinate);
}"
16177,testTopStrict,"	public void testTopStrict() {
		int[][] input = new int[][] 
			{{ 95, 195 },
			 { 95, 196 },
			 { 95, 197 },
			 { 95, 198 },
			 { 95, 199 },
			 { 95, 200 },"
16178,overlapsForUnrelatedAreas,"	public double[] overlapsForUnrelatedAreas(int n, int w, int radius, int repetitions, boolean verbose) {
		return overlapsForRelativeAreas(n, w, new int[] { 0, 0 }, radius, 
			new int[] { 0, radius * 10 }, 0, repetitions, verbose);"
16179,overlapsForRelativeAreas,"	public double[] overlapsForRelativeAreas(int n, int w, int[] initPosition, int initRadius, 
		int[] dPosition, int dRadius, int num, boolean verbose) {
		
		setUp();
		builder.n(n);
		builder.w(w);
		initCE();
		
		double[] overlaps = new double[num];
		
		int[] outputA = encode(ce, initPosition, initRadius);"
16181,encode,"	public int[] encode(CoordinateEncoder encoder, int[] coordinate, double radius) {
		int[] output = new int[encoder.getWidth()];
		encoder.encodeIntoArray(new Tuple(coordinate, radius), output);
		return output;
	}"
16182,assertDecreasingOverlaps,"	public void assertDecreasingOverlaps(double[] overlaps) {
		assertEquals(0, 
			ArrayUtils.sum("
16183,testEncodeAdjacentPositions,"	public void testEncodeAdjacentPositions() {
		int repetitions = 100;
		int n = 999;
		int w = 25;
		int radius = 10;
		double minThreshold = 0.75;
		double avgThreshold = 0.90;
		double[] allOverlaps = new double[repetitions];
		
		for(int i = 0;i < repetitions;i++) {
			double[] overlaps = overlapsForRelativeAreas(
				n, w, new int[] { i * 10,  i * 10 }, radius, new int[] { 0, 1 }, 0, 1, false);
			"
16188,testEncodeSaturateArea,"	public void testEncodeSaturateArea() {
		setUp();
		builder.n(1999);
		builder.w(25);
		builder.radius(2);
		initCE();
		
		int[] outputA = encode(ce, new int[] { 0, 0 }, 2);
		int[] outputB = encode(ce, new int[] { 0, 1 }, 2);
		"
16189,testEncodeIntoArray,"	public void testEncodeIntoArray() {
		setUp();
		builder.n(33);
		builder.w(3);
		initCE();
		
		int[] coordinate = new int[] { 100, 200 };
		int[] output1 = encode(ce, coordinate, 5);
		assertEquals(ArrayUtils.sum(output1), ce.w);
		
		int[] output2 = encode(ce, coordinate, 5);"
16190,testNeighbors0Radius,"	public void testNeighbors0Radius() {
		CoordinateEncoder ce = new CoordinateEncoder();
		
		int[] coordinate = new int[] { 100, 200, 300 };
		int radius = 0;
		List<int[]> neighbors = ce.neighbors(coordinate, radius);
		assertEquals(1, neighbors.size());
		assertTrue(ArrayUtils.contains(new int[] { 100, 200, 300 }, neighbors));"
16192,testNeighbors1D,"	public void testNeighbors1D() {
		CoordinateEncoder ce = new CoordinateEncoder();
		
		int[] coordinate = new int[] { 100 };
		int radius = 5;
		List<int[]> neighbors = ce.neighbors(coordinate, radius);
		assertEquals(11, neighbors.size());
		assertTrue(Arrays.equals(new int[] { 95 }, neighbors.get(0)));
		assertTrue(Arrays.equals(new int[] { 100 }, neighbors.get(5)));
		assertTrue(Arrays.equals(new int[] { 105 }, neighbors.get(10)));"
16193,orderForCoordinate,"			@Override public double orderForCoordinate(int[] coordinate) {
				return  ArrayUtils.sum(coordinate) / 5.0d;
			}"
16194,testTopWCoordinates,"	public void testTopWCoordinates() {
		final int[][] coordinates = new int[][] { { 1 }, { 2 }, { 3 }, { 4 }, { 5 } };
		
		CoordinateOrder mock = new CoordinateOrder() {
			@Override public double orderForCoordinate(int[] coordinate) {
				return  ArrayUtils.sum(coordinate) / 5.0d;
			}
			"
16196,testOrderForCoordinate,"	public void testOrderForCoordinate() {
		CoordinateEncoder c = new CoordinateEncoder();
		double h1 = c.orderForCoordinate(new int[] { 2, 5, 10 });
		double h2 = c.orderForCoordinate(new int[] { 2, 5, 11 });
		double h3 = c.orderForCoordinate(new int[] { 2497477, -923478 });
		
		assertTrue(0 <= h1 && h1 < 1);
		assertTrue(0 <= h2 && h2 < 1);
		assertTrue(0 <= h3 && h3 < 1);
		
		System.out.println(h1 + "", "" + h2 + "", "" + h3);
		"
16199,initCE,"	private void initCE() {
		ce = builder.build();
	}"
16200,setUp,"	private void setUp() {
		builder = CoordinateEncoder.builder()
			.name(""coordinate"")"
16202,getBucketValues,"	public <T> List<T> getBucketValues(Class<T> returnType) {
		return null;
	}"
16203,encodeIntoArray,"	public void encodeIntoArray(Tuple inputData, int[] output) {
		List<int[]> neighs = neighbors((int[])inputData.get(0), (double)inputData.get(1));
		int[][] neighbors = new int[neighs.size()][];
		for(int i = 0;i < neighs.size();i++) neighbors[i] = neighs.get(i);

		int[][] winners = topWCoordinates(this, neighbors, w);
"
16204,bitForCoordinate,"	public static int bitForCoordinate(int[] coordinate, int n) {
		random.setSeed(coordinate);
		return random.nextInt(n);
	}"
16205,orderForCoordinate,"	public double orderForCoordinate(int[] coordinate) {
		random.setSeed(coordinate);
		return random.nextDouble();
	}"
16206,topWCoordinates,"	public int[][] topWCoordinates(CoordinateOrder co, int[][] coordinates, int w) {
		SortablePair<Double, Integer>[] pairs = new SortablePair[coordinates.length];
		for(int i = 0; i < coordinates.length;i++) {
		    pairs[i] = new SortablePair<Double, Integer>(co.orderForCoordinate(coordinates[i]), i);
		}

		Arrays.sort(pairs);
"
16207,neighbors,"	public List<int[]> neighbors(int[] coordinate, double radius) {
		int[][] ranges = new int[coordinate.length][];
		for(int i = 0;i < coordinate.length;i++) {
			ranges[i] = ArrayUtils.range(coordinate[i] - (int)radius, coordinate[i] + (int)radius + 1);
		}

		List<int[]> retVal = new ArrayList<int[]>();
		int len = ranges.length == 1 ? 1 : ranges[0].length;"
16208,builder,"	public static Encoder.Builder<CoordinateEncoder.Builder, CoordinateEncoder> builder() {
		return new CoordinateEncoder.Builder();
	}"
16211,generate,"    public void generate() {
        LinkedHashSet<Integer> pattern;
        for(int i = 0;i < n / w;i++) {
            pattern = xrange(i * w, (i + 1) * w);"
16215,testGetPrintString,"    public void testGetPrintString() {
        Parameters p = getParameters();
        Connections con = new Connections();
        p.apply(con);
        TemporalMemory.init(con);
        
        String output = con.getPrintString();
        assertTrue(output.length() > 1000);
        
        Set<String> fieldSet = Parameters.getEncoderDefaultParameters().keys().stream()."
16217,testAsColumnObjects,"    public void testAsColumnObjects() {
        Connections cn = new Connections();
        cn.setColumnDimensions(new int[] { 64, 64 });
        cn.setCellsPerColumn(4);
        TemporalMemory.init(cn);
        
        int[] indexes = { 0, 3, 4, 4095 };
        Set<Integer> idxSet = new HashSet<Integer>(
            IntStream.of(indexes).boxed().collect(Collectors.toList()));
        "
16218,testAsCellObjects,"    public void testAsCellObjects() {
        Connections cn = new Connections();
        cn.setColumnDimensions(new int[] { 64, 64 });
        cn.setCellsPerColumn(4);
        TemporalMemory.init(cn);
        
        int[] indexes = { 0, 3, 4, 16383 };
        Set<Integer> idxSet = new HashSet<Integer>(
            IntStream.of(indexes).boxed().collect(Collectors.toList()));
        "
16235,testCopy,"    public void testCopy() {
        Parameters retVal = Parameters.getTemporalDefaultParameters();
        retVal.set(KEY.COLUMN_DIMENSIONS, new int[] { 32 });
        retVal.set(KEY.CELLS_PER_COLUMN, 4);

        Connections connections = new Connections();

        retVal.apply(connections);
        TemporalMemory.init(connections);"
16237,testRqwAdapterReturnsFalse,"    public void testRqwAdapterReturnsFalse() {
        Condition.Adapter<Object> adapter = new Condition.Adapter<>();
        assertFalse(adapter.eval(1.0d));
        assertFalse(adapter.eval(1));
        assertFalse(adapter.eval(new Object()));
    }"
16239,eval,"    public boolean eval(double d);
    public boolean eval(T t);"
16240,eval,"    public boolean eval(int n);
    public boolean eval(double d);"
16241,eval,"        public boolean eval(T t) { return false; }
    }
    public boolean eval(int n);"
16242,eval,"        public boolean eval(double d) { return false; }
        public boolean eval(T t) { return false; }
    }"
16243,eval,"        public boolean eval(int n) { return false; }
        public boolean eval(double d) { return false; }
        public boolean eval(T t) { return false; }"
16244,reset,"    public void reset(Connections connections);
}"
16245,compute,"    public ComputeCycle compute(Connections connections, int[] activeColumns, boolean learn);
    /**"
16250,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        ComputeCycle other = (ComputeCycle)obj;
        if(activeCells == null) {
            if(other.activeCells != null)
                return false;
        } else if(!activeCells.equals(other.activeCells))"
16252,predictiveCells,"    public Set<Cell> predictiveCells() {
        if(predictiveCells.isEmpty()) { 
            Cell previousCell = null;
            Cell currCell = null;"
16253,winnerCells,"    public Set<Cell> winnerCells() {
        return winnerCells;
    }"
16254,activeCells,"    public Set<Cell> activeCells() {
        return activeCells;
    }"
16255,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        Column other = (Column)obj;"
16256,hashCode,"    public int hashCode() {
        if(hashcode == 0) {
            final int prime = 31;
            int result = 1;"
16257,compareTo,"    public int compareTo(Column otherColumn) {
        return boxedIndex.compareTo(otherColumn.boxedIndex);
    }"
16258,toString,"    public String toString() {
        return """" + index;
    }"
16259,setProximalConnectedSynapsesForTest,"    public void setProximalConnectedSynapsesForTest(Connections c, int[] connections) {
        proximalDendrite.setConnectedSynapsesForTest(c, connections);
    }"
16260,setProximalPermanencesSparse,"    public void setProximalPermanencesSparse(Connections c, double[] permanences, int[] indexes) {
        proximalDendrite.setPermanences(c, permanences, indexes);
    }"
16261,setProximalPermanences,"    public void setProximalPermanences(Connections c, double[] permanences) {
        proximalDendrite.setPermanences(c, permanences);
    }"
16262,createPotentialPool,"    public Pool createPotentialPool(Connections c, int[] inputVectorIndexes) {
        return proximalDendrite.createPool(c, inputVectorIndexes);
    }"
16263,getProximalDendrite,"    public ProximalDendrite getProximalDendrite() {
        return proximalDendrite;
    }"
16264,getLeastUsedCell,"    public Cell getLeastUsedCell(Connections c, Random random) {
        List<Cell> leastUsedCells = new ArrayList<>();
        int minNumSegments = Integer.MAX_VALUE;

        for(Cell cell : cellList) {
            int numSegments = cell.getSegments(c).size();

            if(numSegments < minNumSegments) {"
16265,getNumCellsPerColumn,"    public int getNumCellsPerColumn() {
        return numCells;
    }"
16267,getCells,"    public List<Cell> getCells() {
        return cellList;
    }"
16268,getCell,"    public Cell getCell(int index) {
        return cells[index];
    }"
16269,compute,"    public <T> Classification<T> compute(int                 recordNum,
                                         Map<String, Object> classification,"
16274,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        @SuppressWarnings(""rawtypes"")
        Classification other = (Classification)obj;"
16275,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Arrays.hashCode(actualValues);
        result = prime * result + ((probabilities == null) ? 0 : probabilities.hashCode());
        return result;
    }"
16276,stepSet,"    public int[] stepSet() {
        return probabilities.keySet().toArray();
    }"
16277,getStatCount,"    public int getStatCount(int step) {
        return probabilities.get(step).length;
    }"
16278,getStepCount,"    public int getStepCount() {
        return probabilities.size();
    }"
16279,getMostProbableBucketIndex,"    public int getMostProbableBucketIndex(int step) {
        if(probabilities.get(step) == null) return -1;

        double max = 0;
        int bucketIdx = -1;
        int i = 0;
        for(double d : probabilities.get(step)) {
            if(d > max) {"
16280,getMostProbableValue,"    public T getMostProbableValue(int step) {
        int idx = -1;
        if(probabilities.get(step) == null || (idx = getMostProbableBucketIndex(step)) == -1) {
            return null;
        }"
16281,getStats,"    public double[] getStats(int step) {
        return probabilities.get(step);
    }"
16282,setStats,"    public void setStats(int step, double[] votes) {
        probabilities.put(step, votes);
    }"
16283,getStat,"    public double getStat(int step, int bucketIndex) {
        return probabilities.get(step)[bucketIndex];
    }"
16284,getActualValueCount,"    public int getActualValueCount() {
        return actualValues.length;
    }"
16285,setActualValues,"    public void setActualValues(T[] values) {
        actualValues = values;
    }"
16286,getActualValues,"    public T[] getActualValues() {
        return actualValues;
    }"
16287,getActualValue,"    public T getActualValue(int bucketIndex) {
        if(actualValues == null || actualValues.length < bucketIndex + 1) {
            return null;
        }"
16288,copy,"    public Classification<T> copy() {
        Classification<T> retVal = new Classification<T>();
        retVal.actualValues = Arrays.copyOf(actualValues, actualValues.length);
        retVal.probabilities = new TIntObjectHashMap<double[]>(probabilities);
        
        return retVal;"
16289,compute,"	public <T> Classification<T> compute(CLAClassifier classifier, int recordNum, int[] pattern,
		int bucket, Object value) {
		
		Map<String, Object> classification = new LinkedHashMap<String, Object>();
		classification.put(""bucketIdx"", bucket);
		classification.put(""actValue"", value);"
16290,checkValue,"	public void checkValue(Classification<?> retVal, int index, Object value, double probability) {
		assertEquals(retVal.getActualValue(index), value);
		assertEquals(probability, retVal.getStat(1, index), 0.01);
	}"
16295,testScaling,"	public void testScaling() {
		setUp();
		
		int recordNum = 0;
		for(int i = 0;i < 100;i++, recordNum++) {
			compute(classifier, recordNum, new int[] { 1 }, 5, 5);
		}"
16306,testSingleValue,"	public void testSingleValue() {
		setUp();
		
		Classification<Double> retVal = null;
		for(int recordNum = 0;recordNum < 10;recordNum++) {
			retVal = compute(classifier, recordNum, new int[] { 1, 5 }, 0, 10);"
16307,setUp,"	public void setUp() {
		classifier = new CLAClassifier();
	}"
16308,pFormatArray,"    private <T> String pFormatArray(T[] arr) {
        if(arr == null) return """";

        StringBuilder sb = new StringBuilder(""[ "");
        for(T t : arr) {
            sb.append(String.format(""%.2s"", t));
        }"
16310,checkPoint,"    public Subscription checkPoint(Observer<? super T> t);
}"
16311,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        Cell other = (Cell)obj;"
16313,compareTo,"    public int compareTo(Cell arg0) {
        return boxedIndex.compareTo(arg0.boxedIndex);
    }"
16315,getSegments,"    public List<DistalDendrite> getSegments(Connections c, boolean doLazyCreate) {
        return c.getSegments(this, doLazyCreate);
    }"
16316,getSegments,"    public List<DistalDendrite> getSegments(Connections c) {
        return getSegments(c, false);
    }"
16317,getReceptorSynapses,"    public Set<Synapse> getReceptorSynapses(Connections c, boolean doLazyCreate) {
        return c.getReceptorSynapses(this, doLazyCreate);
    }"
16318,getReceptorSynapses,"    public Set<Synapse> getReceptorSynapses(Connections c) {
        return getReceptorSynapses(c, false);
    }"
16319,getColumn,"    public Column getColumn() {
        return column;
    }"
16321,eval,"					public boolean eval(int i) { return i == 1; }
				}));
		LOGGER.debug("" scalarTopDown: "" + ce.topDownCompute(output));"
16322,eval,"						public boolean eval(int i) { return i == 1; }
					}));
			LOGGER.debug("" scalarTopDown: "" + ce.topDownCompute(output));"
16327,eval,"					public boolean eval(int i) {
						return i == 1;
					}"
16331,setUp,"	private void setUp() {
        builder =  ((CategoryEncoder.Builder)CategoryEncoder.builder())
            .w(3)"
16334,categoryList,"		public CategoryEncoder.Builder categoryList(List<String> categoryList) {
			this.categoryList = categoryList;
			return this;
		}"
16336,setCategoryList,"    public void setCategoryList(List<String> categoryList) {
        this.categoryList = categoryList;
    }"
16337,getCategoryList,"    public List<String> getCategoryList() {
        return categoryList;
    }"
16340,getBucketValues,"	public <T> List<T> getBucketValues(Class<T> t) {
		if(bucketValues == null) {
			SparseObjectMatrix<int[]> topDownMapping = scalarEncoder.getTopDownMapping();
			int numBuckets = topDownMapping.getMaxIndex() + 1;"
16341,closenessScores,"	public TDoubleList closenessScores(TDoubleList expValues, TDoubleList actValues, boolean fractional) {
		double expValue = expValues.get(0);
		double actValue = actValues.get(0);

		double closeness = expValue == actValue ? 1.0 : 0;
		if(!fractional) closeness = 1.0 - closeness;
"
16343,encodeIntoArray,"	public void encodeIntoArray(String input, int[] output) {
		String val = null;
		double value = 0;
		if(input == null) {
			val = ""<missing>"";
		}else{"
16344,getBucketIndices,"	public int[] getBucketIndices(String input) {
		if(input == null) return null;
		return scalarEncoder.getBucketIndices(categoryToIndex.get(input));
	}"
16345,getScalars,"	public <T> TDoubleList getScalars(T d) {
		return new TDoubleArrayList(new double[] { categoryToIndex.get(d) });
	}"
16347,builder,"	public static Encoder.Builder<CategoryEncoder.Builder, CategoryEncoder> builder() {
		return new CategoryEncoder.Builder();
	}"
16348,set,"    public BitSetMatrix set(int index, Boolean value) {
        this.data.set(index, value);
        return this;
    }"
16349,get,"    public Boolean get(int index) {
        return this.data.get(index);
    }"
16350,testPFormatArray,"    public void testPFormatArray() {
        BitHistory history = new BitHistory(null, 1, 1);
        Method m = null;
        try {
            m = BitHistory.class.getDeclaredMethod(""pFormatArray"", new Class[] {double[].class});"
16351,pFormatArray,"    private String pFormatArray(double[] arr) {
        StringBuilder sb = new StringBuilder(""[ "");
        for(double d : arr) {
            sb.append(String.format(""%.2f "", d));
        }
        sb.append(""]"");"
16354,toString,"    public String toString() {
      return ""PropertyInfo{"" +
             ""beanClass="" + beanClass +"
16355,getWriteMethod,"    public Method getWriteMethod() {
      return writeMethod;
    }"
16356,getReadMethod,"    public Method getReadMethod() {
      return readMethod;
    }"
16357,getType,"    public Class<?> getType() {
      return type;
    }"
16358,getName,"    public String getName() {
      return name;
    }"
16359,getBeanClass,"    public Class<?> getBeanClass() {
      return beanClass;
    }"
16360,createPropertyInfo,"  private PropertyInfo createPropertyInfo(Class<?> beanClass, String propertyName, Class<?> propertyType) {
    return new PropertyInfo(beanClass, propertyName, propertyType, null, null);
  }"
16361,createPropertyInfo,"  private PropertyInfo createPropertyInfo(Class<?> beanClass, PropertyDescriptor d) {
    return new PropertyInfo(beanClass, d.getName(), d.getPropertyType(), d.getReadMethod(), d.getWriteMethod());
  }"
16362,getPropertiesInfoForBean,"  public PropertyInfo[] getPropertiesInfoForBean(Class<?> beanClass) {
    if (beanClass == null) {
      throw new IllegalArgumentException(""Bean class is required and can not be null"");
    }

    PropertyInfo infos[] = properties.get(beanClass);
    if (infos != null) {
      return infos;
    }

    PropertyDescriptor descriptors[];"
16363,getPropertyInfo,"  public PropertyInfo getPropertyInfo(Class<?> beanClass, String name) {
    if (name == null) {
      throw new IllegalArgumentException(""Property name is required and can not be null"");
    }
    PropertyInfo infos[] = getPropertiesInfoForBean(beanClass);
    for (PropertyInfo info : infos) {"
16364,getPropertyInfoRequired,"  public PropertyInfo getPropertyInfoRequired(Object bean, String name) {
    PropertyInfo result = getPropertyInfo(bean, name);
    if (result == null) {
      throw new IllegalArgumentException(
              ""Bean "" + bean.getClass().getName() + "" does not have property '"" + name + ""'"");"
16365,getPropertyInfo,"  public PropertyInfo getPropertyInfo(Object bean, String name) {
    if (bean == null) {
      throw new IllegalArgumentException(""Bean can not be null"");
    }"
16366,invokeMethod,"  private Object invokeMethod(Method m, Object instance, Object... args) {
    if (instance == null) {
      throw new IllegalArgumentException(""Can not invole Method '"" + m + ""' on null instance"");
    }"
16367,setSimpleProperty,"  private void setSimpleProperty(Object bean, PropertyInfo info, Object value) {
    if (info.getWriteMethod() == null) {
      throw new IllegalArgumentException(""Property '"" + info.name + ""' of bean "" + bean.getClass().getName() +
                                         "" does not have setter method"");"
16368,getSimpleProperty,"  private Object getSimpleProperty(Object bean, PropertyInfo info) {
    if (info.getReadMethod() == null) {
      throw new IllegalArgumentException(""Property '"" + info.name + ""' of bean "" + bean.getClass().getName() +
                                         "" does not have getter method"");"
16369,getSimpleProperty,"  public Object getSimpleProperty(Object bean, String name) {
    return getSimpleProperty(bean, getPropertyInfo(bean, name));
  }"
16370,setSimplePropertyRequired,"  public void setSimplePropertyRequired(Object bean, String name, Object value) {
    setSimpleProperty(bean, getPropertyInfoRequired(bean, name), value);
  }"
16371,setSimpleProperty,"  public boolean setSimpleProperty(Object bean, String name, Object value) {
    PropertyInfo pi = getPropertyInfo(bean, name);
    if (pi != null) {
      setSimpleProperty(bean, pi, value);"
16372,getInstance,"  public static BeanUtil getInstance() {
    return INSTANCE;
  }"
16373,testHeaderFormationWhenSynchronous,"    public void testHeaderFormationWhenSynchronous() {
        try {
            int headerSize = 3;"
16376,makeLargeStream,"    public Stream<String> makeLargeStream() {
        final Path inputPath = Paths.get(ResourceLocator.path(""rec-center-hourly.csv""));
        try {
            return Files.lines(inputPath);"
16377,makeStream,"    public Stream<String> makeStream() {
        return Stream.of(
            ""timestamp,consumption"","
16379,processLine,"    private static long processLine(String line) {
        final long localStart = System.nanoTime();
        double d = 0;
        for (int i = 0; i < line.length(); i++) {
            for (int j = 0; j < line.length(); j++) {
                d += new BigDecimal(Math.pow(line.charAt(j), line.charAt(j)/32.0)).doubleValue();
                jdkTotal++;"
16380,timeBatchedParallelStream,"    private static void timeBatchedParallelStream(Stream<String[]> input) throws IOException {
        final long start = System.nanoTime();
        try (Stream<String[]> lines = input) {
            final long totalTime = lines.mapToLong(BatchedCsvStreamBenchmark::processLine2).sum();"
16381,timeJDKParallelStream,"    private static void timeJDKParallelStream(Stream<String> input) throws IOException {
        final long start = System.nanoTime();
        try (Stream<String> lines = input) {
            final long totalTime = lines.parallel().mapToLong(BatchedCsvStreamBenchmark::processLine).sum();"
16383,main,"    public static void main(String[] args) {
        Stream<String> stream = Stream.of(
            ""timestamp,consumption"",
            ""datetime,float"",
            ""T,"",
            ""7/2/10 0:00,21.2"","
16384,findAny,"    public Optional<T> findAny() {
        return delegate.findAny();
    }"
16385,findFirst,"    public Optional<T> findFirst() {
        return delegate.findFirst();
    }"
16386,noneMatch,"    public boolean noneMatch(Predicate<? super T> predicate) {
        return delegate.noneMatch(predicate);
    }"
16387,allMatch,"    public boolean allMatch(Predicate<? super T> predicate) {
        return delegate.allMatch(predicate);
    }"
16388,anyMatch,"    public boolean anyMatch(Predicate<? super T> predicate) {
        return delegate.anyMatch(predicate);
    }"
16389,count,"    public long count() {
        return delegate.count();
    }"
16390,max,"    public Optional<T> max(Comparator<? super T> comparator) {
        return delegate.max(comparator);
    }"
16391,min,"    public Optional<T> min(Comparator<? super T> comparator) {
        return delegate.min(comparator);
    }"
16392,collect,"    public <R, A> R collect(Collector<? super T, A, R> collector) {
        return delegate.collect(collector);
    }"
16393,collect,"    public <R> R collect(Supplier<R> supplier, BiConsumer<R, ? super T> accumulator, BiConsumer<R, R> combiner) {
        return delegate.collect(supplier, accumulator, combiner);
    }"
16394,reduce,"    public <U> U reduce(U identity, BiFunction<U, ? super T, U> accumulator, BinaryOperator<U> combiner) {
        return delegate.reduce(identity, accumulator, combiner);
    }"
16395,reduce,"    public Optional<T> reduce(BinaryOperator<T> accumulator) {
        return delegate.reduce(accumulator);
    }"
16396,reduce,"    public T reduce(T identity, BinaryOperator<T> accumulator) {
        return delegate.reduce(identity, accumulator);
    }"
16397,toArray,"    public <A> A[] toArray(IntFunction<A[]> generator) {
        return delegate.toArray(generator);
    }"
16398,toArray,"    public Object[] toArray() {
        return delegate.toArray();
    }"
16399,forEachOrdered,"    public void forEachOrdered(Consumer<? super T> action) {
        delegate.forEachOrdered(action);
    }"
16400,forEach,"    public void forEach(Consumer<? super T> action) {
        delegate.forEach(action);
    }"
16401,skip,"    public Stream<T> skip(long n) {
        return delegate.skip(n);
    }"
16402,limit,"    public Stream<T> limit(long maxSize) {
        return delegate.limit(maxSize);
    }"
16403,peek,"    public Stream<T> peek(Consumer<? super T> action) {
        return delegate.peek(action);
    }"
16404,sorted,"    public Stream<T> sorted(Comparator<? super T> comparator) {
        return delegate.sorted(comparator);
    }"
16405,sorted,"    public Stream<T> sorted() {
        return delegate.sorted();
    }"
16406,distinct,"    public Stream<T> distinct() {
        return delegate.distinct();
    }"
16407,flatMapToDouble,"    public DoubleStream flatMapToDouble(Function<? super T, ? extends DoubleStream> mapper) {
        return delegate.flatMapToDouble(mapper);
    }"
16408,flatMapToLong,"    public LongStream flatMapToLong(Function<? super T, ? extends LongStream> mapper) {
        return delegate.flatMapToLong(mapper);
    }"
16409,flatMapToInt,"    public IntStream flatMapToInt(Function<? super T, ? extends IntStream> mapper) {
        return delegate.flatMapToInt(mapper);
    }"
16410,flatMap,"    public <R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper) {
        return delegate.flatMap(mapper);
    }"
16411,mapToDouble,"    public DoubleStream mapToDouble(ToDoubleFunction<? super T> mapper) {
        return delegate.mapToDouble(mapper);
    }"
16412,mapToLong,"    public LongStream mapToLong(ToLongFunction<? super T> mapper) {
        return delegate.mapToLong(mapper);
    }"
16413,mapToInt,"    public IntStream mapToInt(ToIntFunction<? super T> mapper) {
        return delegate.mapToInt(mapper);
    }"
16414,map,"    public <R> Stream<R> map(Function<? super T, ? extends R> mapper) {
        return delegate.map(mapper);
    }"
16415,filter,"    public Stream<T> filter(Predicate<? super T> predicate) {
        return delegate.filter(predicate);
    }"
16416,close,"    public void close() {
        delegate.close();
    }"
16417,onClose,"    public Stream<T> onClose(Runnable closeHandler) {
        return delegate.onClose(closeHandler);
    }"
16418,unordered,"    public Stream<T> unordered() {
        return delegate.unordered();
    }"
16419,parallel,"    public Stream<T> parallel() {
        return delegate.parallel();
    }"
16420,sequential,"    public Stream<T> sequential() {
        return delegate.sequential();
    }"
16421,isParallel,"    public boolean isParallel() {
        return delegate.isParallel();
    }"
16422,spliterator,"    public Spliterator<T> spliterator() {
        return delegate.spliterator();
    }"
16423,iterator,"    public Iterator<T> iterator() {
        return delegate.iterator();
    }"
16424,getMeta,"    public ValueList getMeta() {
        return getHeader();
    }"
16427,batchedSpliterator,"    private static <T> BatchSpliterator batchedSpliterator(
        BatchedCsvStream<String[]> csv, int batchSize, boolean isParallel) {
        
        Spliterator<String[]> toWrap = csv.continuation(isParallel).spliterator();"
16428,batchedSpliterator,"    private static <T> BatchSpliterator batchedSpliterator(
        BatchedCsvStream<String[]> csv, int batchSize, boolean isParallel, int characteristics) {
        
        Spliterator<String[]> toWrap = csv.continuation(isParallel).spliterator();"
16429,stream,"    public Stream<String[]> stream() {
        return (Stream<String[]>)this.delegate;
    }"
16430,next,"            public String[] next() {
                isTerminal = true;
                String[] value = delegate.next();
                String[] retVal = new String[2];
                retVal[0] = String.valueOf(seq++);
                retVal[1] = Arrays.toString(value).trim();
                
                return retVal;"
16431,hasNext,"            public boolean hasNext() {
                return delegate.hasNext();
            }"
16432,getArraySequenceIterator,"    private Iterator<String[]> getArraySequenceIterator(final Iterator<String[]> toWrap) {
        return new Iterator<String[]>() {
            private Iterator<String[]> delegate = toWrap;"
16433,next,"            public String[] next() {
                isTerminal = true;
                String[] value = delegate.next();
                String[] retVal = new String[value.length + 1];
                System.arraycopy(value, 0, retVal, 1, value.length);
                retVal[0] = String.valueOf(seq++);
                
                return retVal;"
16435,getSequenceIterator,"    private Iterator<String[]> getSequenceIterator(final Iterator<String[]> toWrap) {
        return new Iterator<String[]>() {
            private Iterator<String[]> delegate = toWrap;"
16436,isArrayType,"    private boolean isArrayType() {
        if(getHeader().headerValues.length < 3) {
            return false;
        }
        for(Object o : getHeader().headerValues[1].all()) {"
16437,continuation,"    private Stream<String[]> continuation(boolean parallel) {
        if(it == null) {
            throw new IllegalStateException(""You must first create a BatchCsvStream by calling batch(Stream, int, boolean, int)"");
        }"
16438,getHeader,"    public BatchedCsvHeader getHeader() {
        return header;
    }"
16439,setBatchOp,"    public void setBatchOp(boolean b) {
        this.isBatchOp = b;
    }"
16440,isBatchOp,"    public boolean isBatchOp() {
        return isBatchOp;
    }"
16441,isTerminal,"    public boolean isTerminal() {
        return this.isTerminal;
    }"
16442,makeHeader,"    private void makeHeader() {
        List<String[]> contents = new ArrayList<>();
        
        int i = 0;
        while(i++ < fence) {
            String[] h = it.next();
            contents.add(h);
        }"
16443,toString,"        public String toString() {
            StringBuilder sb = new StringBuilder();
            Stream.of(headerValues).forEach(l -> sb.append(l).append(""\n""));
            return sb.toString();
        }"
16444,size,"        public int size() {
            return headerValues == null ? 0 : headerValues.length;
        }"
16445,getRow,"        public Tuple getRow(int index) {
            if(index >= headerValues.length) {
                return null;
            }"
16446,accept,"            @Override public void accept(String[] value) { 
                csv.isTerminal = true;
                this.value = new String[2];
                this.value[0] = String.valueOf(sequenceNum);
                this.value[1] = Arrays.toString(value).trim();
            }"
16447,accept,"            @Override public void accept(String[] value) { 
                csv.isTerminal = true;
                this.value = new String[value.length + 1];
                System.arraycopy(value, 0, this.value, 1, value.length);
                this.value[0] = String.valueOf(sequenceNum);
            }"
16448,characteristics,"        public int characteristics() { 
            return characteristics; 
        }"
16449,estimateSize,"        public long estimateSize() { 
            return est; 
        }"
16450,getComparator,"        public Comparator<? super String[]> getComparator() {
            if (hasCharacteristics(Spliterator.SORTED) && csv.isBatchOp) {
                return (i, j) -> { return Long.valueOf(i[0]).compareTo(Long.valueOf(j[0])); };
            }else if(csv.isBatchOp) {"
16452,forEachRemaining,"        public void forEachRemaining(Consumer<? super String[]> action) {
            spliterator.forEachRemaining(action);
        }"
16453,tryAdvance,"        public boolean tryAdvance(Consumer<? super String[]> action) {
            boolean hasNext;
            if(hasNext = spliterator.tryAdvance(action)) {
                sequenceNum++;
            }"
16454,setToWrap,"        private BatchSpliterator setToWrap(Spliterator<String[]> toWrap) {
            this.spliterator = toWrap;
            return this;
        }"
16455,setCSV,"        private BatchSpliterator setCSV(BatchedCsvStream<String[]> csv) {
            this.csv = csv;
            return this;
        }"
16456,testArgmax,"    public void testArgmax()
    {
        int[] iarray = new int[] { 0, 1, 0, 0, 3, 0, 6, 7, 1, 2, 0};
        double[] darray = new double[] { 0, 1, 10, 0, 3, 0, 6, 7, 1, 2, 0};
        assertEquals(ArrayUtils.argmax(iarray), 7 );
        assertEquals(ArrayUtils.argmax(darray), 2 );"
16458,testNGreatest,"	public void testNGreatest() {
	    double[] overlaps = new double[] { 1, 2, 1, 4, 8, 3, 12, 5, 4, 1 };
	    assertTrue(Arrays.equals(new int[] { 6, 4, 7 }, ArrayUtils.nGreatest(overlaps, 3)));
	}"
16459,testIsSparse,"	public void testIsSparse() {
	    int[] t = new int[] { 0, 1, 0 };
	    int[] t1 = new int[] { 4, 5, 6, 7 };
	    
	    assertFalse(ArrayUtils.isSparse(t));
	    assertTrue(ArrayUtils.isSparse(t1));"
16460,testReplace,"	public void testReplace() {
	    assertTrue(Arrays.equals(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0},
	        ArrayUtils.replace(5, 10, new int[]{1, 2, 3, 4, 5, -1, -1, -1, -1, -1}, new int[] { 6, 7, 8, 9, 0})));"
16461,testConcatAll,"	public void testConcatAll() {
		assertTrue(Arrays.equals(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0},
			ArrayUtils.concatAll(new int[]{1, 2}, new int[]{3, 4, 5, 6, 7}, new int[]{8, 9, 0})));"
16462,createMultiDimensionArray,"    private Object createMultiDimensionArray(int[] sizes){
        return Array.newInstance(int.class, sizes);
    }"
16463,testMultiDimensionArrayOperation,"   	public void testMultiDimensionArrayOperation() {
        int[] dimensions = {5, 5 ,5};
          Object multiDimArray = createMultiDimensionArray(dimensions);
          ArrayUtils.fillArray(multiDimArray, 1);
          assertEquals(125, ArrayUtils.aggregateArray(multiDimArray));
    }"
16464,testDiff,"	public void testDiff() {
		double[] t = new double[] { 5, 4, 3, 2, 1, 0 };
		double[] result = ArrayUtils.diff(t);
		assertEquals(5, result.length);
		assertTrue(Arrays.equals(new double[] { -1, -1, -1, -1, -1 }, result));
		assertEquals(-5, ArrayUtils.sum(result), 0);
	}"
16465,testBitsToString,"	public void testBitsToString() {
		String expected = ""c....***"";
		String result = ArrayUtils.bitsToString(new int[] { 0, 0, 0, 0, 1, 1, 1 });
		assertEquals(expected, result);
	}"
16471,testMaximum,"    public void testMaximum() {
        double value = 6.7;
        double[] input = new double[] { 3.2, 6.8 };
        double[] expected = new double[] { 6.7, 6.8 };
        
        double[] result = ArrayUtils.maximum(input, value);
        assertTrue(Arrays.equals(expected, result));"
16475,testTo1d,"    public void testTo1d() {
        double[][] da = new double[][] { { 1., 1.}, {2., 2.}};
        double[] expected = new double[] { 1., 1., 2., 2. };
        assertTrue(Arrays.equals(expected, ArrayUtils.to1D(da)));
        
        int[][] ia = new int[][] { { 1, 1 }, { 2, 2 } };
        int[] expectedia = new int[] { 1, 1, 2, 2 };
        assertTrue(Arrays.equals(expectedia, ArrayUtils.to1D(ia)));"
16479,testRotateLeft,"    public void testRotateLeft() {
        int[][] test = new int[][] {
            { 1, 0, 1, 0 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 0 }"
16480,testRotateRight,"    public void testRotateRight() {
        int[][] test = new int[][] {
            { 1, 0, 1, 0 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 0 },
            { 1, 0, 1, 0 }"
16481,testRavelAndUnRavel,"    public void testRavelAndUnRavel() {
        int[] test = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
        int[][] expected = {
            { 0, 1, 2, 3, 4, 5 },
            { 6, 7, 8, 9, 10, 11 }
        };
        
        int[][] result = ArrayUtils.ravel(test, 6);
        for(int i = 0;i < result.length;i++) {
            for(int j = 0;j < result[i].length;j++) {
                assertEquals(expected[i][j], result[i][j]);
            }"
16482,testReshape,"    public void testReshape() {
        int[][] test = {
            { 0, 1, 2, 3, 4, 5 },
            { 6, 7, 8, 9, 10, 11 }
        };
        
        int[][] expected = {
            { 0, 1, 2 },
            { 3, 4, 5 },
            { 6, 7, 8 },"
16483,testShape,"    public void testShape() {
        int[][] inputPattern = { { 2, 3, 4, 5 }, { 6, 7, 8, 9} };
        int[] shape = ArrayUtils.shape(inputPattern);
        assertTrue(Arrays.equals(new int[] { 2, 4 }, shape));
    }"
16484,testArgsort,"    public void testArgsort() {
        int[] args = ArrayUtils.argsort(new int[] { 11, 2, 3, 7, 0 });
        assertTrue(Arrays.equals(new int[] {4, 1, 2, 3, 0}, args));
        
        args = ArrayUtils.argsort(new int[] { 11, 2, 3, 7, 0 }, -1, -1);
        assertTrue(Arrays.equals(new int[] {4, 1, 2, 3, 0}, args));
        
        args = ArrayUtils.argsort(new int[] { 11, 2, 3, 7, 0 }, 0, 3);"
16485,testToCoordinates,"    public void testToCoordinates() {
        int[] coords = ArrayUtils.toCoordinates(19, new int[] { 2, 4, 5 }, false);
        assertTrue(Arrays.equals(new int[] { 0, 3, 4 }, coords));
        
        coords = ArrayUtils.toCoordinates(19, new int[] { 2, 4, 5 }, true);
        assertTrue(Arrays.equals(new int[] { 4, 3, 0 }, coords));"
16486,testMaxIndex,"    public void testMaxIndex() {
        int max = ArrayUtils.maxIndex(new int[] { 2, 4, 5 });
        assertEquals(39, max);
    }"
16487,testSubst,"    public void testSubst() {
        int[] original = new int[] { 30, 30, 30, 30, 30 };
        int[] substitutes = new int[] { 0, 1, 2, 3, 4 };
        int[] substInds = new int[] { 4, 1, 3 };
        
        int[] expected = { 30, 1, 30, 3, 4 };
        "
16489,concatAll,"    public static int[] concatAll(int[] first, int[]... rest) {
        int totalLength = first.length;
        for (int[] array : rest) {
            totalLength += array.length;
        }
        int[] result = Arrays.copyOf(first, totalLength);
        int offset = first.length;
        for (int[] array : rest) {"
16490,concatAll,"    public static <T> T[] concatAll(T[] first, T[]... rest) {
        int totalLength = first.length;
        for (T[] array : rest) {
            totalLength += array.length;
        }
        T[] result = Arrays.copyOf(first, totalLength);
        int offset = first.length;
        for (T[] array : rest) {"
16491,all,"    public static <T> boolean  all(final int[]  values, final Condition<T> condition) {
        for (int element : values) {
            if (!condition.eval(element)) {
                return false;"
16492,intArrayToString,"    public static String intArrayToString(Object array){
        StringBuilder result = new StringBuilder();
        if(array instanceof Object[]){
            result.append(Arrays.deepToString((Object[]) array));
        } else {"
16493,aggregateArray,"    public static int aggregateArray(Object array) {
        int sum = 0;
        if(array instanceof Integer){
            return (int)array;"
16494,fillArray,"    public static void fillArray(Object array, int value) {
        if (array instanceof int[]) {
            Arrays.fill((int[])array, value);"
16495,getValue,"    public static Object getValue(Object array, int... indexes) {
        Object slice = array;
        for(int i = 0;i < indexes.length;i++) {
            slice = Array.get(slice, indexes[i]);
        }"
16496,setValue,"    public static void setValue(Object array, int value, int... indexes) {
        if (indexes.length == 1) {
            ((int[])array)[indexes[0]] = value;"
16497,tail,"    public static int[] tail(int[] original) {
        return Arrays.copyOfRange(original, 1, original.length);
    }"
16498,and,"    public static int[] and(int[] arg1, int[] arg2) {
        int[] retVal = new int[Math.max(arg1.length, arg2.length)];
        for (int i = 0; i < arg1.length; i++) {
            retVal[i] = arg1[i] > 0 && arg2[i] > 0 ? 1 : 0;
        }"
16499,or,"    public static int[] or(int[] arg1, int[] arg2) {
        int[] retVal = new int[Math.max(arg1.length, arg2.length)];
        for (int i = 0; i < arg1.length; i++) {
            retVal[i] = arg1[i] > 0 || arg2[i] > 0 ? 1 : 0;
        }"
16500,reverse,"    public static double[] reverse(double[] d) {
        double[] ret = new double[d.length];
        for (int i = 0, j = d.length - 1; j >= 0; i++, j--) {
            ret[i] = d[j];
        }"
16501,reverse,"    public static int[] reverse(int[] d) {
        int[] ret = new int[d.length];
        for (int i = 0, j = d.length - 1; j >= 0; i++, j--) {
            ret[i] = d[j];
        }"
16502,min,"    public static double min(double[] array) {
        double min = Double.MAX_VALUE;
        for (int i = 0; i < array.length; i++) {
            if (array[i] < min) {
                min = array[i];"
16503,min,"    public static int min(int[] array) {
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < array.length; i++) {
            if (array[i] < min) {
                min = array[i];"
16504,sub,"    public static int[][] sub(int[][] source, int[] indexes) {
        int[][] retVal = new int[indexes.length][];
        for (int i = 0; i < indexes.length; i++) {
            retVal[i] = source[indexes[i]];
        }"
16505,sub,"    public static int[] sub(int[] source, int[] indexes) {
        int[] retVal = new int[indexes.length];
        for (int i = 0; i < indexes.length; i++) {
            retVal[i] = source[indexes[i]];
        }"
16506,sub,"    public static double[] sub(double[] source, int[] indexes) {
        double[] retVal = new double[indexes.length];
        for (int i = 0; i < indexes.length; i++) {
            retVal[i] = source[indexes[i]];
        }"
16507,max,"    public static double max(double[] array) {
        double max = Double.MIN_VALUE;
        for (int i = 0; i < array.length; i++) {
            if (array[i] > max) {
                max = array[i];"
16508,max,"    public static int max(int[] array) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < array.length; i++) {
            if (array[i] > max) {
                max = array[i];"
16509,argmax,"    public static int argmax(double[] array) {
        int index = -1;
        double max = Double.MIN_VALUE;
        for (int i = 0; i < array.length; i++) {
            if (array[i] > max) {
                max = array[i];"
16510,toPrimitive,"    public static double[] toPrimitive(Double[] doubs) {
        double[] retVal = new double[doubs.length];
        for(int i = 0;i < retVal.length;i++) {
            retVal[i] = doubs[i].doubleValue();
        }"
16511,toPrimitive,"    public static int[] toPrimitive(Integer[] ints) {
        int[] retVal = new int[ints.length];
        for(int i = 0;i < retVal.length;i++) {
            retVal[i] = ints[i].intValue();
        }"
16512,toBytes,"    public static byte[] toBytes(boolean[] input) {
        byte[] toReturn = new byte[input.length / 8];
        for (int entry = 0; entry < toReturn.length; entry++) {
            for (int bit = 0; bit < 8; bit++) {
                if (input[entry * 8 + bit]) {"
16513,toBoxed,"    public static Double[] toBoxed(double[] doubles) {
        return DoubleStream.of(doubles).boxed().collect(Collectors.toList()).toArray(new Double[doubles.length]);
    }"
16514,toBoxed,"    public static Integer[] toBoxed(int[] ints) {
        return IntStream.of(ints).boxed().collect(Collectors.toList()).toArray(new Integer[ints.length]);
    }"
16515,argmax,"    public static int argmax(int[] array) {
        int index = -1;
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < array.length; i++) {
            if (array[i] > max) {
                max = array[i];"
16516,greaterThanXThanSetToYInB,"    public static void greaterThanXThanSetToYInB(int[] sourceA, double[] targetB, int x, double y) {
        for (int i=0;i<sourceA.length;i++) {
            if (sourceA[i] > x)"
16517,greaterThanXThanSetToY,"    public static void greaterThanXThanSetToY(int[] array, int x, int y) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] > x) array[i] = y;"
16518,greaterThanXThanSetToY,"    public static void greaterThanXThanSetToY(double[] array, double x, double y) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] > x) array[i] = y;"
16519,greaterThanOrEqualXThanSetToY,"    public static void greaterThanOrEqualXThanSetToY(double[] array, double x, double y) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] >= x) array[i] = y;"
16520,lessThanXThanSetToY,"    public static void lessThanXThanSetToY(int[] array, int x, int y) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] < x) array[i] = y;"
16521,lessThanXThanSetToY,"    public static void lessThanXThanSetToY(double[] array, double x, double y) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] < x) array[i] = y;"
16522,lessThanOrEqualXThanSetToY,"    public static void lessThanOrEqualXThanSetToY(double[] array, double x, double y) {
        for (int i = 0; i < array.length; i++) {
            if (array[i] <= x) array[i] = y;"
16523,where,"    public static <T> int[] where(T[] values, Condition<T> c) {
        TIntArrayList retVal = new TIntArrayList();
        for (int i = 0; i < values.length; i++) {
            if (c.eval(values[i])) {
                retVal.add(i);"
16524,where,"    public static <T> int[] where(List<T> values, Condition<T> c) {
        TIntArrayList retVal = new TIntArrayList();
        int len = values.size();
        for (int i = 0; i < len; i++) {
            if (c.eval(values.get(i))) {
                retVal.add(i);"
16525,asDense,"    public static int[] asDense(int[] in, int size) {
        int[] retVal = new int[size];
        Arrays.stream(in).forEach(i -> {retVal[i] = 1;});
        return retVal;
    }"
16526,isSparse,"    public static boolean isSparse(int[] ia) {
        if(ia == null || ia.length < 3) return false;
        int end = ia[ia.length - 1];
        for(int i = ia.length - 1, j = 0;i >= 0;i--, j++) {
            if(ia[i] > 1) return true;
            else if(j > 0 && ia[i] == end) return false;"
16527,where,"    public static <T> int[] where(int[] values, Condition<T> c) {
        TIntArrayList retVal = new TIntArrayList();
        int len = values.length;
        for (int i = 0; i < len; i++) {
            if (c.eval(values[i])) {
                retVal.add(i);"
16528,where,"    public static <T> int[] where(double[] values, Condition<T> c) {
        TIntArrayList retVal = new TIntArrayList();
        int len = values.length;
        for (int i = 0; i < len; i++) {
            if (c.eval(values[i])) {
                retVal.add(i);"
16529,raiseValuesBy,"    public static void raiseValuesBy(int amount, int[] indexes, int[] values) {
        for (int i = 0; i < indexes.length; i++) {
            values[indexes[i]] += amount;"
16530,raiseValuesBy,"    public static void raiseValuesBy(double[] amounts, double[] values) {
        for (int i = 0; i < values.length; i++) {
            values[i] += amounts[i];"
16531,raiseValuesBy,"    public static void raiseValuesBy(double amount, double[] values, int[] indexesToRaise) {
        for (int i = 0; i < indexesToRaise.length; i++) {
            values[indexesToRaise[i]] += amount;"
16532,raiseValuesBy,"    public static void raiseValuesBy(double amount, double[] values) {
        for (int i = 0; i < values.length; i++) {
            values[i] += amount;"
16533,nGreatest,"    public static int[] nGreatest(double[] array, int n) {
        TDoubleIntHashMap places = new TDoubleIntHashMap();
        int i;
        double key;
        for (int j = 1; j < array.length; j++) {
            key = array[j];
            for (i = j - 1; i >= 0 && array[i] < key; i--) {
                array[i + 1] = array[i];
            }"
16534,valueGreaterCountAtIndex,"    public static int valueGreaterCountAtIndex(double compare, double[] array, int[] indexes) {
        int count = 0;
        for (int i = 0; i < indexes.length; i++) {
            if (array[indexes[i]] > compare) {
                count++;"
16535,valueGreaterOrEqualCount,"    public static int valueGreaterOrEqualCount(double compare, double[] array) {
        int count = 0;
        for (int i = 0; i < array.length; i++) {
            if (array[i] >= compare) {
                count++;"
16536,valueGreaterCount,"    public static int valueGreaterCount(double compare, double[] array) {
        int count = 0;
        for (int i = 0; i < array.length; i++) {
            if (array[i] > compare) {
                count++;"
16537,clip,"    public static int[] clip(int[] values, int[] max, int adj) {
        for (int i = 0; i < values.length; i++) {
            values[i] = Math.max(0, Math.min(max[i] + adj, values[i]));
        }"
16538,clip,"    public static int[] clip(int[] values, int[] min, int[] max) {
        for (int i = 0; i < values.length; i++) {
            values[i] = Math.max(min[i], Math.min(max[i], values[i]));
        }"
16539,clip,"    public static double[] clip(double[] values, double min, double max) {
        for (int i = 0; i < values.length; i++) {
            values[i] = Math.min(1, Math.max(0, values[i]));
        }"
16540,sample,"    public static double[] sample(int sampleSize, Random random) {
        double[] sample = new double[sampleSize];
        for (int i = 0; i < sampleSize; i++) {
            sample[i] = random.nextDouble();
        }"
16541,sample,"    public static int[] sample(int[] choices, int[] selectedIndices, Random random) {
        TIntArrayList choiceSupply = new TIntArrayList(choices);
        int upperBound = choices.length;
        for (int i = 0; i < selectedIndices.length; i++) {
            int randomIdx = random.nextInt(upperBound);
            selectedIndices[i] = (choiceSupply.removeAt(randomIdx));
            upperBound--;"
16542,sample,"    public static int[] sample(TIntArrayList choices, int[] selectedIndices, Random random) {
        TIntArrayList choiceSupply = new TIntArrayList(choices);
        int upperBound = choices.size();
        for (int i = 0; i < selectedIndices.length; i++) {
            int randomIdx = random.nextInt(upperBound);
            selectedIndices[i] = (choiceSupply.removeAt(randomIdx));
            upperBound--;"
16543,setRangeTo,"    public static void setRangeTo(int[] values, int start, int stop, int setTo) {
        stop = stop < 0 ? values.length + stop : stop;
        for (int i = start; i < stop; i++) {
            values[i] = setTo;"
16544,setIndexesTo,"    public static void setIndexesTo(int[] values, int[] indexes, int setTo) {
        for (int i = 0; i < indexes.length; i++) {
            values[indexes[i]] = setTo;"
16545,setIndexesTo,"    public static void setIndexesTo(double[] values, int[] indexes, double setTo) {
        for (int i = 0; i < indexes.length; i++) {
            values[indexes[i]] = setTo;"
16546,dimensionsToCoordinateList,"    public static List<int[]> dimensionsToCoordinateList(List<int[]> dimensions) {
        return CoordinateAssembler.assemble(dimensions);
    }"
16548,assemble,"        public static List<int[]> assemble(List<int[]> dimensions) {
            CoordinateAssembler assembler = new CoordinateAssembler(dimensions);
            assembler.process(dimensions.size());
            return assembler.result;
        }"
16549,unique,"    public static int[] unique(int[] nums) {
        TIntHashSet set = new TIntHashSet(nums);
        int[] result = set.toArray();
        Arrays.sort(result);
        return result;
    }"
16550,subst,"    public static int[] subst(int[] source, int[] substitutes, int[] substInds) {
        List<Integer> l = Arrays.stream(substInds).boxed().collect(Collectors.toList());
        return IntStream.range(0, source.length).map(
            i -> l.indexOf(i) == -1 ? source[i] : substitutes[i]).toArray();"
16551,replace,"    public static int[] replace(int start, int end, int[] orig, int[] replacement) {
        for(int i = start, j = 0;i < end;i++, j++) {
            orig[i] = replacement[j];
        }"
16552,shuffle,"    public static int[] shuffle(int[] array) {
        int index;
        Random random = new Random(42);
        for (int i = array.length - 1; i > 0; i--) {
            index = random.nextInt(i + 1);
            if (index != i) {"
16553,xrange,"    public static int[] xrange(int lowerBounds, int upperBounds, int interval) {
        TIntList ints = new TIntArrayList();
        for (int i = lowerBounds; i < upperBounds; i += interval) {
            ints.add(i);
        }"
16554,arange,"    public static double[] arange(double lowerBounds, double upperBounds, double interval) {
        TDoubleList doubs = new TDoubleArrayList();
        for (double i = lowerBounds; i < upperBounds; i += interval) {
            doubs.add(i);
        }"
16555,range,"    public static int[] range(int lowerBounds, int upperBounds) {
        TIntList ints = new TIntArrayList();
        for (int i = lowerBounds; i < upperBounds; i++) {
            ints.add(i);
        }"
16556,positiveRemainder,"    public static double positiveRemainder(double n, double divisor) {
        if (n >= 0) {
            return n % divisor;"
16558,sparseBinaryOr,"    public static int[] sparseBinaryOr(int[] arg1, int[] arg2) {
        TIntArrayList t = new TIntArrayList(arg1);
        t.addAll(arg2);
        return unique(t.toArray());
    }"
16559,sum,"    public static double sum(double[] array) {
        double sum = 0;
        for (int i = 0; i < array.length; i++) {
            sum += array[i];
        }"
16560,in1d,"    public static int[] in1d(int[] ar1, int[] ar2) {
        if(ar1 == null || ar2 == null) {
            return EMPTY_ARRAY;
        }
        
        TIntSet retVal = new TIntHashSet(ar2);"
16561,sum,"    public static int sum(int[] array) {
        int sum = 0;
        for (int i = 0; i < array.length; i++) {
            sum += array[i];
        }"
16562,d_add,"    public static double[] d_add(double[] arr, double amount) {
        for (int i = 0; i < arr.length; i++) {
            arr[i] += amount;
        }"
16563,d_add,"    public static double[] d_add(double[] arr, double[] amount) {
        for (int i = 0; i < arr.length; i++) {
            arr[i] += amount[i];
        }"
16564,i_add,"    public static int[] i_add(int[] arr, int[] amount) {
        for (int i = 0; i < arr.length; i++) {
            arr[i] += amount[i];
        }"
16565,add,"    public static int[] add(int[] arr, int amount) {
        for (int i = 0; i < arr.length; i++) {
            arr[i] += amount;
        }"
16566,variance,"    public static double variance(double[] arr) {
        return variance(arr, average(arr));
    }"
16567,variance,"    public static double variance(double[] arr, double mean) {
        double accum = 0.0;
        double dev = 0.0;
        double accum2 = 0.0;
        for (int i = 0; i < arr.length; i++) {
            dev = arr[i] - mean;
            accum += dev * dev;
            accum2 += dev;"
16568,average,"    public static double average(double[] arr) {
        double sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }"
16569,average,"    public static double average(int[] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }"
16570,subtract,"    public static List<Integer> subtract(List<Integer> subtrahend, List<Integer> minuend) {
        return IntStream.range(0, minuend.size())
           .boxed()"
16571,subtract,"    public static int[] subtract(int[] minuend, int[] subtrahend) {
        int[] retVal = new int[minuend.length];
        for (int i = 0; i < minuend.length; i++) {
            retVal[i] = minuend[i] - subtrahend[i];
        }"
16572,multiply,"    public static double[] multiply(double[] array, double d) {
        double[] product = new double[array.length];
        for (int i = 0; i < array.length; i++) {
            product[i] = array[i] * d;
        }"
16573,multiply,"    public static int[] multiply(int[] array, int d) {
        int[] product = new int[array.length];
        for (int i = 0; i < array.length; i++) {
            product[i] = array[i] * d;
        }"
16574,multiply,"    public static double[] multiply(double[] multiplicand, int[] factor) {

        if (multiplicand.length != factor.length) {
            throw new IllegalArgumentException(
                    ""The multiplicand array and the factor array must be the same length"");
        }"
16575,multiply,"    public static double[] multiply(
    	double[] multiplicand, double[] factor, double multiplicandAdjustment, double factorAdjustment) {

        if (multiplicand.length != factor.length) {
            throw new IllegalArgumentException(
                ""The multiplicand array and the factor array must be the same length"");"
16576,roundDivide,"    public static double[] roundDivide(double[] dividend, double[] divisor, int scale) {

        if (dividend.length != divisor.length) {
            throw new IllegalArgumentException(
                    ""The dividend array and the divisor array must be the same length"");
        }"
16578,divide,"    public static double[] divide(int[] dividend, int[] divisor) {

        if (dividend.length != divisor.length) {
            throw new IllegalArgumentException(
                    ""The dividend array and the divisor array must be the same length"");
        }
        double[] quotient = new double[dividend.length];"
16579,divide,"    public static double[] divide(double[] dividend, double[] divisor,
                                  double dividendAdjustment, double divisorAdjustment) {

        if (dividend.length != divisor.length) {
            throw new IllegalArgumentException(
                    ""The dividend array and the divisor array must be the same length"");
        }"
16580,retainLogicalAnd,"    public static double[] retainLogicalAnd(double[] values, Condition<?>[] conditions) {
        TDoubleArrayList l = new TDoubleArrayList();
        for (int i = 0; i < values.length; i++) {
            boolean result = true;
            for (int j = 0; j < conditions.length && result; j++) {"
16581,retainLogicalAnd,"    public static int[] retainLogicalAnd(int[] values, Condition<?>[] conditions) {
        TIntArrayList l = new TIntArrayList();
        for (int i = 0; i < values.length; i++) {
            boolean result = true;
            for (int j = 0; j < conditions.length && result; j++) {"
16582,minBetween,"    public static int[] minBetween(int[] arr1, int[] arr2) {
        int[] retVal = new int[arr1.length];
        for (int i = 0; i < arr1.length; i++) {
            retVal[i] = Math.min(arr1[i], arr2[i]);
        }"
16583,maxBetween,"    public static int[] maxBetween(int[] arr1, int[] arr2) {
        int[] retVal = new int[arr1.length];
        for (int i = 0; i < arr1.length; i++) {
            retVal[i] = Math.max(arr1[i], arr2[i]);
        }"
16584,maximum,"    public static double[] maximum(double[] doubs, double maxValue) {
        double[] retVal = new double[doubs.length];
        for (int i = 0; i < doubs.length; i++) {
            retVal[i] = Math.max(doubs[i], maxValue);
        }"
16585,modulo,"    public static int[] modulo(int[] a, int b) {
        for (int i = 0; i < a.length; i++) {
            a[i] = modulo(a[i], b);
        }"
16586,modulo,"    public static int modulo(int a, int b) {
        if (b == 0) throw new IllegalArgumentException(""Division by Zero!"");
        if (a > 0 && b > 0 && b > a) return a;
        boolean isMinus = Math.abs(b - (a - b)) < Math.abs(b - (a + b));
        if (isMinus) {
            while (a >= b) {
                a -= b;"
16587,toDoubleArray,"    public static double[] toDoubleArray(int[] ints) {
        double[] retVal = new double[ints.length];
        for (int i = 0; i < ints.length; i++) {
            retVal[i] = ints[i];
        }"
16588,toIntArray,"    public static int[] toIntArray(double[] doubs) {
        int[] retVal = new int[doubs.length];
        for (int i = 0; i < doubs.length; i++) {
            retVal[i] = (int)doubs[i];
        }"
16589,zip,"    public static List<Tuple> zip(Object[]... args) {
        List<Tuple> tuples = new ArrayList<Tuple>();
        
        int min = Integer.MAX_VALUE;
        for(Object[] oa : args) {
            if(oa.length < min) {
                min = oa.length;
            }"
16590,zip,"    public static List<Tuple> zip(int[]... args) {
        List<Tuple> tuples = new ArrayList<Tuple>();
        
        int min = Arrays.stream(args).mapToInt(i -> i.length).min().orElse(0);
        
        int len = args.length;
        for(int j = 0;j < min;j++) {"
16591,zip,"    public static List<Tuple> zip(List<?>... args) {
        List<Tuple> tuples = new ArrayList<Tuple>();
        
        int min = Arrays.stream(args).mapToInt(i -> i.size()).min().orElse(0);
        
        int len = args.length;
        for(int j = 0;j < min;j++) {"
16592,zip,"    public static List<Tuple> zip(List<?> arg1, List<?> arg2) {
        List<Tuple> tuples = new ArrayList<Tuple>();
        int len = Math.min(arg1.size(), arg2.size());
        for (int i = 0; i < len; i++) {
            tuples.add(new Tuple(arg1.get(i), arg2.get(i)));
        }"
16593,bitsToString,"    public static String bitsToString(int[] arr) {
        char[] s = new char[arr.length + 1];
        Arrays.fill(s, '.');
        s[0] = 'c';
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 1) {
                s[i + 1] = '*';"
16594,to1D,"   public static int[] to1D(int[][] A){
       
       int[] B = new int[A.length * A[0].length];
       int index = 0;

       for(int i = 0;i < A.length;i++){"
16595,to1D,"   public static double[] to1D(double[][] A){
       
       double[] B = new double[A.length * A[0].length];
       int index = 0;

       for(int i = 0;i<A.length;i++){"
16596,argsort,"    public static int[] argsort(int[] in, int start, int end) {
        if(start == -1 || end == -1) {
            return IntStream.of(in).sorted().map(i -> 
                Arrays.stream(in).boxed().collect(Collectors.toList()).indexOf(i)).toArray();"
16597,argsort,"    public static int[] argsort(int[] in) {
        return argsort(in, -1, -1);
    }"
16598,shape,"    public static int[] shape(Object inputArray) {
        int nr = 1 + inputArray.getClass().getName().lastIndexOf('[');
        Object oa = inputArray;
        int[] l = new int[nr];
        for(int i = 0;i < nr;i++) {
            int len = l[i] = Array.getLength(oa);
            if (0 < len) { oa = Array.get(oa, 0); }"
16601,ravel,"    public static int[][] ravel(int[] array, int n) throws IllegalArgumentException {
        if (array.length % n != 0) {
            throw new IllegalArgumentException(array.length + "" is not evenly divisible by "" + n);
        }
        int length = array.length;
        int[][] result = new int[length / n][n];
        for (int i = 0; i < length; i++) {"
16604,initDimensionMultiples,"    public static int[] initDimensionMultiples(int[] shape) {
        int holder = 1;
        int len = shape.length;
        int[] dimensionMultiples = new int[shape.length];
        for (int i = 0; i < len; i++) {
            holder *= (i == 0 ? 1 : shape[len - i]);
            dimensionMultiples[len - 1 - i] = holder;"
16605,fromCoordinate,"    public static int fromCoordinate(int[] coordinates) {
        int[] localMults = initDimensionMultiples(coordinates);
        int base = 0;
        for (int i = 0; i < coordinates.length; i++) {
            base += (localMults[i] * coordinates[i]);
        }"
16606,fromCoordinate,"    public static int fromCoordinate(int[] coordinates, int[] shape) {
        int[] localMults = initDimensionMultiples(shape);
        int base = 0;
        for (int i = 0; i < coordinates.length; i++) {
            base += (localMults[i] * coordinates[i]);
        }"
16607,toCoordinates,"    public static int[] toCoordinates(int index, int[] shape, boolean isColumnMajor) {
        int[] dimensionMultiples = initDimensionMultiples(shape);
        int[] returnVal = new int[shape.length];
        int base = index;
        for(int i = 0;i < dimensionMultiples.length; i++) {
            int quotient = base / dimensionMultiples[i];
            base %= dimensionMultiples[i];"
16608,maxIndex,"    public static int maxIndex(int[] shape) {
        return shape[0] * Math.max(1, initDimensionMultiples(shape)[0]) - 1;
    }"
16609,concat,"    public static double[] concat(double[] first, double[] second) {
        double[] retVal = Arrays.copyOf(first, first.length + second.length);
        for(int i = first.length, j = 0;i < retVal.length;i++, j++) {
            retVal[i] = second[j];
        }"
16610,contains,"    public static boolean contains(int[] match, List<int[]> container) {
        int len = container.size();
        for (int i = 0; i < len; i++) {
            if (Arrays.equals(match, container.get(i))) {
                return true;"
16611,diff,"    public static double[] diff(double[] d) {
        double[] retVal = new double[d.length - 1];
        for (int i = 0; i < retVal.length; i++) {
            retVal[i] = d[i + 1] - d[i];
        }"
16612,interleave,"    public static <F, S> Object[] interleave(F first, S second) {
        int flen, slen;
        Object[] retVal = new Object[(flen = Array.getLength(first)) + (slen = Array.getLength(second))];
        for(int i = 0, j = 0, k = 0;i < flen || j < slen;) {
            if(i < flen) {
                retVal[k++] = Array.get(first, i++);"
16613,product,"    public static int product(int[] dims) {
        int retVal = 1;
        for(int i = 0;i < dims.length;i++) {
            retVal *= dims[i];
        }"
16614,eval,"        @Override public boolean eval(int n) { return n >= 0; }
    };
    "
16615,eval,"        public boolean eval(int i) {
            return i > 0;
        }"
16616,eval,"        public boolean eval(double i) {
            return i > 0;
        }"
16617,eval,"        public boolean eval(int i) {
            return i == 1;
        }"
16619,testComputeAnomalyScorePartialMatch,"    public void testComputeAnomalyScorePartialMatch() {
        Map<String, Object> params = new HashMap<>();
        params.put(KEY_MODE, Mode.PURE);
        Anomaly anomalyComputer = Anomaly.create(params);
        double score = anomalyComputer.compute(new int[] { 2, 3, 6 }, new int[] { 3, 5, 7 }, 0, 0);
        assertEquals(2.0 / 3.0, score, 0);
    }"
16620,testComputeAnomalyScoreNoMatch,"    public void testComputeAnomalyScoreNoMatch() {
        Map<String, Object> params = new HashMap<>();
        params.put(KEY_MODE, Mode.PURE);
        Anomaly anomalyComputer = Anomaly.create(params);
        double score = anomalyComputer.compute(new int[] { 2, 4, 6 }, new int[] { 3, 5, 7 }, 0, 0);
        assertEquals(1.0, score, 0);
    }"
16621,testComputeAnomalyScorePerfectMatch,"    public void testComputeAnomalyScorePerfectMatch() {
        Map<String, Object> params = new HashMap<>();
        params.put(KEY_MODE, Mode.PURE);
        Anomaly anomalyComputer = Anomaly.create(params);
        double score = anomalyComputer.compute(new int[] { 3, 5, 7 }, new int[] { 3, 5, 7 }, 0, 0);
        assertEquals(0.0, score, 0);
    }"
16622,testComputeAnomalyScoreNoActive,"    public void testComputeAnomalyScoreNoActive() {
        Map<String, Object> params = new HashMap<>();
        params.put(KEY_MODE, Mode.PURE);
        Anomaly anomalyComputer = Anomaly.create(params);
        double score = anomalyComputer.compute(new int[0], new int[] {3,5}, 0, 0);
        assertEquals(0.0, score, 0);
    }"
16623,testComputeAnomalyScoreNoActiveOrPredicted,"    public void testComputeAnomalyScoreNoActiveOrPredicted() {
        Map<String, Object> params = new HashMap<>();
        params.put(KEY_MODE, Mode.PURE);
        Anomaly anomalyComputer = Anomaly.create(params);
        double score = anomalyComputer.compute(new int[0], new int[0], 0, 0);
        assertEquals(0.0, score, 0);
    }"
16624,testComputeRawAnomalyPartialNoMatch,"    public void testComputeRawAnomalyPartialNoMatch() {
        double score = Anomaly.computeRawAnomalyScore(new int[] { 2, 3, 6 }, new int[] { 3, 5, 7 });
        assertEquals(score, 2.0 / 3.0, 0.001);
    }"
16625,testComputeRawAnomalyScoreNoMatch,"    public void testComputeRawAnomalyScoreNoMatch() {
        double score = Anomaly.computeRawAnomalyScore(new int[] { 2, 4, 6 }, new int[] { 3, 5, 7 });
        assertEquals(score, 1.0, 0.00001);
    }"
16626,testComputeRawAnomalyScorePerfectMatch,"    public void testComputeRawAnomalyScorePerfectMatch() {
        double score = Anomaly.computeRawAnomalyScore(new int[] { 3, 5, 7 }, new int[] { 3, 5, 7 });
        assertEquals(score, 0.0, 0.00001);
    }"
16627,testComputeRawAnomalyScoreNoActive,"    public void testComputeRawAnomalyScoreNoActive() {
        double score = Anomaly.computeRawAnomalyScore(new int[0], new int[] { 3, 5 });
        assertEquals(score, 0.0, 0.00001);
    }"
16628,testComputeRawAnomalyScoreNoActiveOrPredicted,"    public void testComputeRawAnomalyScoreNoActiveOrPredicted() {
        double score = Anomaly.computeRawAnomalyScore(new int[0], new int[0]);
        assertEquals(score, 0.0, 0.00001);
    }"
16630,testFilterLikelihoodsInputType,"    public void testFilterLikelihoodsInputType() {
        double[] l2 = an.filterLikelihoods(new double[] { 0.0, 0.0, 0.3, 0.3, 0.5 });
        double[] filtered = new double[] { 0.0, 0.001, 0.3, 0.3, 0.5 };
        int i = 0;
        for(double d : l2) {
            assertEquals(d, filtered[i++], 0.01);"
16634,eval,"            public boolean eval(double d) { return d < 0.01; }
        };
        int conditionCount = ArrayUtils.where(metrics2.getLikelihoods(), cond).length;"
16637,testAnomalyProbabilityArrayCopying,"	public void testAnomalyProbabilityArrayCopying() {
		Map<String, Object> params = new HashMap<>();
		params.put(KEY_MODE, Mode.LIKELIHOOD);
		params.put(AnomalyLikelihood.KEY_LEARNING_PERIOD, 300);
		params.put(AnomalyLikelihood.KEY_ESTIMATION_SAMPLES, 300);
		an = (AnomalyLikelihood) Anomaly.create(params);

		for (int i = 0; i < 2000; i++) {"
16639,eval,"            public boolean eval(double d) { return d < 0.02; }
        }).length;
        assertTrue(count <= 50);"
16644,testConstructorWithDefaultLearningPeriodAndEstimationSamples,"	public void testConstructorWithDefaultLearningPeriodAndEstimationSamples() {
		this.an.anomalyProbability(0.75, 0.5, null);
	}"
16645,assertWithinEpsilon,"    public static boolean assertWithinEpsilon(double a, double b, double epsilon) {
        if(Math.abs(a - b) <= epsilon) {
            return true;
        }"
16646,assertWithinEpsilon,"    public static boolean assertWithinEpsilon(double a, double b) {
        return assertWithinEpsilon(a, b, 0.001);
    }"
16648,sampleDistribution,"    public static double[] sampleDistribution(Random random, double mean, double variance, int size) {
        SampleDistribution sampler = new SampleDistribution(mean, Math.sqrt(variance), size);
        return sampler.getSample(random);
    }"
16649,setup,"    public void setup() {
        Map<String, Object> params = new HashMap<>();
        params.put(KEY_MODE, Mode.LIKELIHOOD);
        an = (AnomalyLikelihood)Anomaly.create(params);
    }"
16650,compute,"                    public double compute(int[] activeColumns, int[] predictedColumns, double inputValue, long timestamp) {
                        return 0;
                    }"
16661,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        AnomalyLikelihoodMetrics other = (AnomalyLikelihoodMetrics)obj;
        if(aggRecordList == null) {
            if(other.aggRecordList != null)"
16662,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((aggRecordList == null) ? 0 : aggRecordList.hashCode());
        result = prime * result + Arrays.hashCode(likelihoods);
        result = prime * result + ((params == null) ? 0 : params.hashCode());
        return result;
    }"
16663,getParams,"    public AnomalyParams getParams() {
        return params;
    }"
16664,getAvgRecordList,"    public AveragedAnomalyRecordList getAvgRecordList() {
        return aggRecordList;
    }"
16665,getLikelihoods,"    public double[] getLikelihoods() {
        return likelihoods;
    }"
16666,copy,"    public AnomalyLikelihoodMetrics copy() {
        List<Object> vals = new ArrayList<Object>();
        for(String key : params.keys()) {
            vals.add(params.get(key));
        }"
16667,equals,"        public boolean equals(Object obj) {
            if(this == obj)
                return true;
            if(!super.equals(obj))
                return false;
            if(getClass() != obj.getClass())
                return false;
            AnomalyParams other = (AnomalyParams)obj;
            if(distribution == null) {
                if(other.distribution != null)
                    return false;"
16669,windowSize,"        public int windowSize() {
            return windowSize;
        }"
16670,historicalLikelihoods,"        public double[] historicalLikelihoods() {
            return historicalLikelihoods;
        }"
16671,movingAverage,"        public MovingAverage movingAverage() {
            return movingAverage;
        }"
16672,distribution,"        public Statistic distribution() {
            return distribution;
        }"
16673,isValidEstimatorParams,"    public boolean isValidEstimatorParams(NamedTuple params) {
        if(params.get(""distribution"") == null || params.get(""movingAverage"") == null) {
           return false; 
        }
        
        Statistic stat = (Statistic)params.get(""distribution"");"
16676,normalProbability,"    public double normalProbability(double x, TObjectDoubleMap<String> named) {
        return normalProbability(x, 
            new Statistic(named.get(KEY_MEAN), named.get(KEY_VARIANCE), named.get(KEY_STDEV)));"
16677,nullDistribution,"    public Statistic nullDistribution() {
        if(LOG.isDebugEnabled()) {
            LOG.debug(""Returning nullDistribution"");
        }"
16678,estimateNormal,"    public Statistic estimateNormal(double[] sampleData, boolean performLowerBoundCheck) {
        double d = ArrayUtils.average(sampleData);
        double v = ArrayUtils.variance(sampleData, d);
                
        if(performLowerBoundCheck) {
            if(d < 0.03) {
                d = 0.03;"
16681,filterLikelihoods,"    public double[] filterLikelihoods(double[] likelihoods) {
        return filterLikelihoods(likelihoods, 0.99999, 0.999);
    }"
16684,anomalyProbability,"    public double anomalyProbability(double value, double anomalyScore, DateTime timestamp) {
        if(timestamp == null) {
            timestamp = new DateTime();
        }
        
        Sample dataPoint = new Sample(timestamp, value, anomalyScore);
        double likelihoodRetval;
        if(historicalScores.size() < probationaryPeriod) {
            likelihoodRetval = 0.5;"
16685,computeLogLikelihood,"    public static double computeLogLikelihood(double likelihood) {
        return Math.log(1.0000000001 - likelihood) / -23.02585084720009;
    }"
16686,equals,"        public boolean equals(Object obj) {
            if(this == obj)
                return true;
            if(obj == null)
                return false;
            if(getClass() != obj.getClass())
                return false;
            AveragedAnomalyRecordList other = (AveragedAnomalyRecordList)obj;
            if(averagedRecords == null) {
                if(other.averagedRecords != null)"
16689,getSamples,"        public TDoubleList getSamples() {
            TDoubleList retVal = new TDoubleArrayList();
            for(Sample s : averagedRecords) {
                retVal.add(s.value);
            }"
16690,getMetrics,"        public TDoubleList getMetrics() {
            TDoubleList retVal = new TDoubleArrayList();
            for(Sample s : averagedRecords) {
                retVal.add(s.score);
            }"
16691,compute,"    public abstract double compute(int[] activeColumns, int[] predictedColumns, double inputValue, long timestamp);
    "
16693,compute,"                public double compute(int[] activeColumns, int[] predictedColumns, double inputValue, long timestamp) {
                    double retVal = computeRawAnomalyScore(activeColumns, predictedColumns);
                    if(this.useMovingAverage) {
                        retVal = movingAverage.next(retVal);
                    }"
16694,create,"    public static Anomaly create(Map<String, Object> params) {
        boolean useMovingAvg = (boolean)params.getOrDefault(KEY_USE_MOVING_AVG, false);
        int windowSize = (int)params.getOrDefault(KEY_WINDOW_SIZE, -1);
        if(useMovingAvg && windowSize < 1) {
            throw new IllegalArgumentException(""windowSize must be > 0, when using moving average."");
        }
        
        Mode mode = (Mode)params.get(KEY_MODE);"
16695,create,"    public static Anomaly create() {
        Map<String, Object> params = new HashMap<>();
        params.put(KEY_MODE, Mode.PURE);
        
        return create(params);"
16702,onError,"            @Override public void onError(Throwable e) { e.printStackTrace(); }
            @Override public void onNext(Inference output) {}
        });"
16706,doTest,"    public static void doTest() {
        System.out.println(Arrays.toString(TEST_AGGREGATION[TM_EXPL]));
        System.out.println(Arrays.toString(TEST_AGGREGATION[TM_LYR]));
        System.out.println(Arrays.toString(TEST_AGGREGATION[TM_NAPI]));
        assertTrue(Arrays.equals(TEST_AGGREGATION[TM_EXPL], TEST_AGGREGATION[TM_LYR]));
        assertTrue(Arrays.equals(TEST_AGGREGATION[TM_EXPL], TEST_AGGREGATION[TM_NAPI]));
    }"
16710,testTopDownDecode,"	public void testTopDownDecode() {
		initASE();
		
		double minVal = ase.getMinVal();
		System.out.println(""\nThe min value is:"" + minVal);
		double resolution = ase.getResolution();
		System.out.println(String.format(""\nTesting non-periodic encoder decoding, resolution of %f ..."", resolution));
		double maxVal = ase.getMaxVal();
		System.out.println(""\nThe max value is:"" + maxVal);
		"
16712,testMissingData,"	public void testMissingData() {
		setUp();
		initASE();
		ase.initEncoder(3, 1, 8, 14, 1.5, 0.5);
		ase.setName(""mv"");
		ase.setPeriodic(false);
		
		int[] empty = ase.encode(Encoder.SENTINEL_VALUE_FOR_MISSING_DATA);
		System.out.println(""\nEncoded missing data as: "" + Arrays.toString(empty));
		int[] expected = new int[14];
		assertTrue(Arrays.equals(expected, empty));"
16714,testInit,"	public void testInit() {
		setUp();
		initASE();
		Assert.assertNotNull(""AdaptiveScalarEncoder class is null"", ase);
		ase.setW(3);
		ase.setMinVal(1);
		ase.setMaxVal(8);
		ase.setN(14);
		ase.setRadius(1.5);
		ase.setResolution(0.5);
		ase.setForced(true);
		ase.init();
	}"
16715,testAdaptiveScalarEncoder,"	public void testAdaptiveScalarEncoder() {
		setUp();
		initASE();
		Assert.assertNotNull(""AdaptiveScalarEncoder class is null"", ase);
	}"
16716,initASE,"	private void initASE() {
		ase = builder.build();
	}"
16718,setUp,"	public void setUp() {
		builder = AdaptiveScalarEncoder.adaptiveBuilder().n(14).w(3).minVal(1)
				.maxVal(8).radius(1.5).resolution(0.5).periodic(false)"
16721,getBucketInfo,"    public List<Encoding> getBucketInfo(int[] buckets) {
        if (this.minVal == 0 || this.maxVal == 0) {
            int[] initialBuckets = new int[this.n];
            Arrays.fill(initialBuckets, 0);"
16722,calculateBucketIndices,"    private int[] calculateBucketIndices(double input) {
        this.recordNum += 1;
        boolean learn = false;
        if (!this.encLearningEnabled) {
            learn = true;
        }
        if ((Double.isNaN(input)) && (Double.valueOf(input) instanceof Double)) {
            input = AdaptiveScalarEncoder.SENTINEL_VALUE_FOR_MISSING_DATA;"
16723,getBucketIndices,"    public int[] getBucketIndices(double input) {
        return calculateBucketIndices(input);
    }"
16724,getBucketIndices,"    public int[] getBucketIndices(String inputString) {
        double input = Double.parseDouble(inputString);
        return calculateBucketIndices(input);
    }"
16725,deleteItem,"    private Double[] deleteItem(Double[] a, int i) {
        a = Arrays.copyOfRange(a, 1, a.length - 1);
        return a;
    }"
16726,appendItem,"    private Double[] appendItem(Double[] a, Double input) {
        a = Arrays.copyOf(a, a.length + 1);
        a[a.length - 1] = input;
        return a;
    }"
16727,setEncoderParams,"    private void setEncoderParams() {
        this.rangeInternal = this.maxVal - this.minVal;
        this.resolution = this.rangeInternal / (this.n - this.w);
        this.radius = this.w * this.resolution;
        this.range = this.rangeInternal + this.resolution;
        this.nInternal = this.n - 2 * this.padding;
        this.bucketValues = null;
    }"
16728,setMinAndMax,"    private void setMinAndMax(Double input, boolean learn) {
        if (slidingWindow.length >= windowSize) {
            slidingWindow = deleteItem(slidingWindow, 0);
        }
        slidingWindow = appendItem(slidingWindow, input);"
16729,encodeIntoArray,"    public void encodeIntoArray(Double input, int[] output) {
        this.recordNum += 1;
        boolean learn = false;
        if (!this.encLearningEnabled) {
            learn = true;
        }
        if (input == AdaptiveScalarEncoder.SENTINEL_VALUE_FOR_MISSING_DATA) {"
16730,topDownCompute,"    public List<Encoding> topDownCompute(int[] encoded) {
        if (this.getMinVal() == 0 || this.getMaxVal() == 0) {
            List<Encoding> res = new ArrayList<Encoding>();
            int[] enArray = new int[this.getN()];"
16731,build,"        public AdaptiveScalarEncoder build() {
            encoder = new AdaptiveScalarEncoder();
            super.build();
            ((AdaptiveScalarEncoder) encoder).init();
            return (AdaptiveScalarEncoder) encoder;
        }"
16732,adaptiveBuilder,"    public static AdaptiveScalarEncoder.Builder adaptiveBuilder() {
        return new AdaptiveScalarEncoder.Builder();
    }"
16733,initEncoder,"    public void initEncoder(int w, double minVal, double maxVal, int n,
        double radius, double resolution) {
        this.encLearningEnabled = true;
        if(this.periodic) {
            throw new IllegalStateException(
                ""Adaptive scalar encoder does not encode periodic inputs"");"
16734,init,"    public void init() {
        this.setPeriodic(false);
        super.init();
    }"
16735,feedTM,"    public void feedTM(List<Set<Integer>> sequence, String label, boolean learn, int num) {
        List<Set<Integer>> repeatedSequence = new ArrayList<Set<Integer>>(sequence);
        if(num > 1) {
            for(int i = 1;i < num;i++) {
                repeatedSequence.addAll(sequence);
            }"
16737,init,"    public void init(Parameters overrides, PatternMachine pm) {
        this.parameters = createTMParams(overrides);
        this.connections = new Connections();
        parameters.apply(connections);
        
        temporalMemory = new TemporalMemory();
        TemporalMemory.init(connections);
        tm = new MonitoredTemporalMemory(temporalMemory, connections);
        
        this.patternMachine = pm;"
16738,fill,"    protected Object[] fill(TypeFactory<T> f, int dimensionIndex, int[] dimensions, int count, Object[] arr) {
        if(dimensions.length == 1) {
            for(int i = 0;i < count;i++) {"
16739,asDense,"    public T[] asDense(TypeFactory<T> factory) {
        int[] dimensions = getDimensions();
        T[] retVal = (T[])Array.newInstance(factory.typeClass(), dimensions);
        fill(factory, 0, dimensions, dimensions[0], retVal);

        return retVal;"
16740,visit,"    private void visit(int[] bounds, int currentDimension, int[] p, TIntList results) {
        for (int i = 0; i < bounds[currentDimension]; i++) {
            p[currentDimension] = i;"
16741,get1DIndexes,"    public int[] get1DIndexes() {
        TIntList results = new TIntArrayList(getMaxIndex() + 1);
        visit(getDimensions(), 0, new int[getNumDimensions()], results);
        return results.toArray();
    }"
16742,getSparseIndices,"    public int[] getSparseIndices() { 
        return null;
    }"
16743,getDoubleValue,"    protected double getDoubleValue(int... coordinates) { return -1.0; }

    @Override"
16744,getIntValue,"    protected int getIntValue(int... coordinates) { return -1; }

    /**"
16745,get,"    public T get(int... coordinates) { return null; }

    /**"
16746,getDoubleValue,"    protected double getDoubleValue(int index) { return -1.0; }

    /**"
16747,getIntValue,"    protected int getIntValue(int index) { return -1; }

    /**"
16748,getObject,"    protected T getObject(int index) { return null; }

    /**"
16749,set,"    protected <S extends AbstractSparseMatrix<T>> S set(double value, int... coordinates) { return null; }

    /**"
16750,set,"    protected <S extends AbstractSparseMatrix<T>> S set(int value, int... coordinates) { return null; }

    /**"
16751,set,"    public AbstractSparseMatrix<T> set(int[] coordinates, T object) { return null; }

    /**"
16752,set,"    protected <S extends AbstractSparseMatrix<T>> S set(int index, double value) { return null; }

    /**"
16753,set,"    protected <S extends AbstractSparseMatrix<T>> S set(int index, int value) { return null; }

    /**"
16754,testEquals,"    public void testEquals() {
        AbstractSparseBinaryMatrix matrix = getTestMatrix();
        AbstractSparseBinaryMatrix matrix2 = getTestMatrix();
        
        assertTrue(matrix.equals(matrix));
        
        assertFalse(matrix.equals(new Object()));
        
        boolean isTest = false;"
16758,clearIndexes,"    public void clearIndexes() {
        AbstractSparseBinaryMatrix matrix = getTestMatrix();
        boolean isTest = false;
        matrix.set(new int[] { 0, 1 }, new int[] { 1, 1 }, isTest);
        assertEquals(1, matrix.getTrueCount(0));
        matrix.clearStatistics(0);
        assertEquals(0, matrix.getTrueCount(0));
    }"
16761,get,"            public Integer get(int index) {
                return index == 0 ? value1 : value2;
            }"
16768,getTestMatrix,"    public AbstractSparseBinaryMatrix getTestMatrix() {
        AbstractSparseBinaryMatrix matrix = new AbstractSparseBinaryMatrix(new int[] { 2, 2, 2 }) {
            private static final long serialVersionUID = 1L;
            private int value1;"
16769,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(!super.equals(obj))
            return false;
        if(getClass() != obj.getClass())
            return false;
        AbstractSparseBinaryMatrix other = (AbstractSparseBinaryMatrix)obj;"
16770,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + Arrays.hashCode(trueCounts);
        return result;
    }"
16771,any,"    public boolean any(int[] onBits) {
        TIntSet keySet = getSparseSet();
        
        for(int i : onBits) {
            if(keySet.contains(i)) return true;"
16772,any,"    public boolean any(TIntList onBits) {
        TIntSet keySet = getSparseSet();
        
        for(TIntIterator i = onBits.iterator();i.hasNext();) {
            if(keySet.contains(i.next())) return true;"
16773,any,"    public boolean any(AbstractSparseBinaryMatrix matrix) {
        TIntSet keySet = getSparseSet();
        
        for(int i : matrix.getSparseIndices()) {
            if(keySet.contains(i)) return true;"
16774,all,"    public boolean all(int[] onBits) {
        return getSparseSet().containsAll(onBits);
    }"
16775,all,"    public boolean all(TIntCollection onBits) {
        return getSparseSet().containsAll(onBits);
    }"
16776,all,"    public boolean all(AbstractSparseBinaryMatrix matrix) {
        return getSparseSet().containsAll(matrix.getSparseIndices());
    }"
16777,getSparseSet,"    protected TIntSet getSparseSet() {
        return new TIntHashSet(getSparseIndices());
    }"
16778,or,"    public AbstractSparseBinaryMatrix or(int[] onBitIndexes) {
        int[] ones = new int[onBitIndexes.length];
        Arrays.fill(ones, 1);
        return set(onBitIndexes, ones);
    }"
16779,or,"    public AbstractSparseBinaryMatrix or(TIntCollection onBitIndexes) {
        int[] ones = new int[onBitIndexes.size()];
        Arrays.fill(ones, 1);
        return set(onBitIndexes.toArray(), ones);
    }"
16780,or,"    public AbstractSparseBinaryMatrix or(AbstractSparseBinaryMatrix inputMatrix) {
        int[] mask = inputMatrix.getSparseIndices();
        int[] ones = new int[mask.length];
        Arrays.fill(ones, 1);
        return set(mask, ones);
    }"
16781,getSparseIndices,"    public int[] getSparseIndices() {
        TIntList indexes = new TIntArrayList();
        for (int i = 0; i <= getMaxIndex(); i ++) {
            if (get(i) > 0) {
                indexes.add(i);"
16782,getIntValue,"    public int getIntValue(int index) {
        return get(index);
    }"
16783,getIntValue,"    public int getIntValue(int... coordinates) {
        return get(computeIndex(coordinates));
    }"
16784,clearStatistics,"    public void clearStatistics(int row) {
        trueCounts[row] = 0;
        
        for (int index : getSliceIndexes(new int[] { row })) {"
16785,getTrueCounts,"    public int[] getTrueCounts() {
        return trueCounts;
    }"
16786,setTrueCount,"    public void setTrueCount(int index, int count) {
        this.trueCounts[index] = count;
    }"
16787,getTrueCount,"    public int getTrueCount(int index) {
        return trueCounts[index];
    }"
16788,set,"    public AbstractSparseBinaryMatrix set(int[] indexes, int[] values, boolean isTest) { 
        for(int i = 0;i < indexes.length;i++) {
            if(isTest) setForTest(indexes[i], values[i]);
            else set(indexes[i], values[i]);"
16789,setForTest,"    public abstract AbstractSparseBinaryMatrix setForTest(int index, int value);
"
16790,get,"    public abstract Integer get(int index);
    "
16791,get,"    public Integer get(int... coordinates) {
        return get(computeIndex(coordinates));
    }"
16793,set,"    public abstract AbstractSparseBinaryMatrix set(int value, int... coordinates);
"
16795,rightVecSumAtNZ,"    public abstract void rightVecSumAtNZ(int[] inputVector, int[] results, double stimulusThreshold);
        "
16796,rightVecSumAtNZ,"    public abstract void rightVecSumAtNZ(int[] inputVector, int[] results);
    "
16798,sliceError,"    protected void sliceError(int... coordinates) {
        throw new IllegalArgumentException(
            ""This method only returns the array holding the specified maximum index: "" + "
16799,getSlice,"    public abstract Object getSlice(int... coordinates);
"
16800,equals,"    public boolean equals(Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(getClass() != obj.getClass())
            return false;
        AbstractFlatMatrix other = (AbstractFlatMatrix)obj;
        if(!Arrays.equals(dimensionMultiples, other.dimensionMultiples))
            return false;
        if(!Arrays.equals(dimensions, other.dimensions))"
16801,hashCode,"    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Arrays.hashCode(dimensionMultiples);
        result = prime * result + Arrays.hashCode(dimensions);
        result = prime * result + (isColumnMajor ? 1231 : 1237);
        result = prime * result + numDimensions;
        return result;
    }"
16802,getDimensionMultiples,"    public int[] getDimensionMultiples() {
        return this.dimensionMultiples;
    }"
16803,getNumDimensions,"    public int getNumDimensions() {
        return this.dimensions.length;
    }"
16804,setDimensions,"    public void setDimensions(int[] dimensions) {
        this.dimensions = dimensions;
    }"
16805,getDimensions,"    public int[] getDimensions() {
        return this.dimensions;
    }"
16806,getMaxIndex,"    public int getMaxIndex() {
        return getDimensions()[0] * Math.max(1, getDimensionMultiples()[0]) - 1;
    }"
16807,getSize,"    public int getSize() {
        return Arrays.stream(this.dimensions).reduce((n,i) -> n*i).getAsInt();
    }"
16808,set,"    public AbstractFlatMatrix<T> set(int[] indexes, T value) {
        set(computeIndex(indexes), value); 
        return this;
    }"
16809,get,"    public T get(int... indexes) {
        return get(computeIndex(indexes));
    }"
16810,set,"    public abstract AbstractFlatMatrix<T> set(int index, T value);
"
16814,copyInnerArray,"    protected int[] copyInnerArray(int[] array) {
        if(array.length == 1) return array;

        int[] retVal = new int[array.length - 1];
        System.arraycopy(array, 1, retVal, 0, array.length - 1);
        return retVal;"
16815,initDimensionMultiples,"    protected int[] initDimensionMultiples(int[] dimensions) {
        int holder = 1;
        int len = dimensions.length;
        int[] dimensionMultiples = new int[getNumDimensions()];
        for(int i = 0;i < len;i++) {
            holder *= (i == 0 ? 1 : dimensions[len - i]);
            dimensionMultiples[len - 1 - i] = holder;"
16816,computeCoordinates,"    public int[] computeCoordinates(int index) {
        int[] returnVal = new int[getNumDimensions()];
        int base = index;
        for(int i = 0;i < dimensionMultiples.length; i++) {
            int quotient = base / dimensionMultiples[i];
            base %= dimensionMultiples[i];"
16817,checkDims,"    protected void checkDims(int[] index) {
        if(index.length != numDimensions) {
            throw new IllegalArgumentException(""Specified coordinates exceed the configured array dimensions "" +
                    ""input dimensions: "" + index.length + "" > number of configured dimensions: "" + numDimensions);"
16818,computeIndex,"    public int computeIndex(int[] coordinates, boolean doCheck) {
        if(doCheck) checkDims(coordinates);

        int[] localMults = isColumnMajor ? reverse(dimensionMultiples) : dimensionMultiples;
        int base = 0;
        for(int i = 0;i < coordinates.length;i++) {
            base += (localMults[i] * coordinates[i]);"
16819,computeIndex,"    public int computeIndex(int[] indexes) {
        return computeIndex(indexes, true);
    }"
16822,getTabsHeight,"    public static int getTabsHeight(Context context) {
        return (int) context.getResources().getDimension(R.dimen.tabsHeight);
    }"
16823,getToolbarHeight,"    public static int getToolbarHeight(Context context) {
        final TypedArray styledAttributes = context.getTheme().obtainStyledAttributes(
                new int[]{R.attr.actionBarSize});
        int toolbarHeight = (int) styledAttributes.getDimension(0, 0);
        styledAttributes.recycle();
"
16824,onDependentViewChanged,"    public boolean onDependentViewChanged(CoordinatorLayout parent, FloatingActionButton fab, View dependency) {
        boolean returnValue = super.onDependentViewChanged(parent, fab, dependency);
        if (dependency instanceof AppBarLayout) {
                CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) fab.getLayoutParams();
                int fabBottomMargin = lp.bottomMargin;"
16825,layoutDependsOn,"    public boolean layoutDependsOn(CoordinatorLayout parent, FloatingActionButton fab, View dependency) {
        return super.layoutDependsOn(parent, fab, dependency) || (dependency instanceof AppBarLayout);
    }"
16826,testCardinalityInstance,"    public void testCardinalityInstance() throws Exception {
        final String json = ""{\""type\"":\""cardinality\"",\""size\"":1,\""extent\"":2,\""method\"":{\""type\"":\""exact\"",\""includeKey\"":false}}"";
        final CardinalityInstance aggregation = new CardinalityInstance(1, 2,
            new CardinalityMethod.ExactCardinalityMethod(false));

        assertEquals(json, mapper.writeValueAsString(aggregation));"
16827,setupBucket,"    protected CardinalityBucket setupBucket(final long timestamp) {
        return new HyperLogLogCardinalityBucket(42, true, 0.01D);
    }"
16828,allowedError,"    protected double allowedError() {
        return 0.9D;
    }"
16829,setupBucket,"    protected CardinalityBucket setupBucket(final long timestamp) {
        return new ExactCardinalityBucket(timestamp, true);
    }"
16830,allowedError,"    protected double allowedError() {
        return 0D;
    }"
16831,assertWithinVariance,"    private void assertWithinVariance(final long expected, final long count) {
        final double allowedError = allowedError();
        final double error = Math.abs(((double) expected / (double) count) - 1.0D);

        assertTrue(String.format(""Error (%f) not within (%f)"", error, allowedError),"
16832,strainTest,"    public void strainTest() {
        final CardinalityBucket bucket = setupBucket(42);

        for (int i = 0; i < 100000; i++) {
            bucket.update(t1, new Point(42, 1D * i));"
16833,basicTest,"    public void basicTest() {
        final CardinalityBucket bucket = setupBucket(42);
        bucket.update(t1, new Point(42, 1D));
        bucket.update(t1, new Point(42, 1D));
        bucket.update(t1, new Point(42, 2D));
        bucket.update(t2, new Point(42, 1D));

        assertWithinVariance(3L, bucket.count());"
16834,allowedError,"    protected double allowedError() {
        return 0.01D;
    }"
16835,setupBucket,"    protected abstract CardinalityBucket setupBucket(long timestamp);
"
16836,collectSlowLineMarkers,"    public void collectSlowLineMarkers(@NotNull List<PsiElement> psiElements,
                                       @NotNull Collection<LineMarkerInfo> lineMarkerInfos) {"
16838,findAnnotation,"    static PsiAnnotation findAnnotation(PsiElement element, String annotationName) {
        if (element instanceof PsiModifierListOwner) {
            PsiModifierListOwner listOwner = (PsiModifierListOwner) element;
            PsiModifierList modifierList = listOwner.getModifierList();"
16839,hasAnnotation,"    public static boolean hasAnnotation(PsiElement element, String annotationName) {
        return findAnnotation(element, annotationName) != null;
    }"
16840,isEndTag,"    public static boolean isEndTag(String line) {
        return END_TAG.equals(line);
    }"
16841,parseStartTagTime,"    public static Date parseStartTagTime(String line) {
        try {
            final String dateField;"
16842,parseStartTagType,"    public static String parseStartTagType(String line) {
        try {
            synchronized(START_TAG_PATTERN) {"
16843,formatStartTag,"    private String formatStartTag(String type, String date) {
        synchronized(START_TAG_PATTERN) {
            return START_TAG_PATTERN.format(new Object[] { type, date });"
16844,parseDate,"    private static Date parseDate(String date) throws ParseException {
        synchronized(DATE_TIME_FORMAT) {
            return DATE_TIME_FORMAT.parse(date);"
16845,formatDate,"    private String formatDate(Date d) {
        synchronized(DATE_TIME_FORMAT) {
            return DATE_TIME_FORMAT.format(d);"
16846,addEndTag,"        private void addEndTag(StringBuilder out) {
            out.append(END_TAG).append(""\n"");
        }"
16847,addReport,"        private void addReport(StringBuilder out, Map<Stack,A> stats) {
            for(Map.Entry<Stack,A> entry : stats.entrySet()) {
                out.append(entry.getValue().toString()).append(""\n"").append(entry.getKey());"
16848,addStartTag,"        private void addStartTag(StringBuilder out, String type) {
            final String now = formatDate(new Date());
            out.append(formatStartTag(type, now)).append(""\n"");
        }"
16849,statsReported,"        public void statsReported(Map<Stack,A> stats) {
            final StringBuilder out = new StringBuilder();
            addStartTag(out, ValueReporter.this.type);
            addReport(out, stats);
            addEndTag(out);

            target.print(out.toString());
            target.flush();"
16850,statsReported,"        public void statsReported(String type, Map<Stack,A> stats) {
            if( ! type.equals(ValueReporter.this.type)) { throw new IllegalArgumentException(); }
            statsReported(stats);
        }"
16851,run,"        public void run() {
            final Map<Stack, A> stats = new HashMap<>(source.getStats());
            for(Listener listener : listeners) {
                try {
                    listener.statsReported(type, stats);"
16852,getReportTimerFrequency,"    public long getReportTimerFrequency() {
        return timerFrequency;
    }"
16853,cancelReportTimer,"    public void cancelReportTimer() {
        if(timerTask==null) {
            return;
        }
        timerTask.cancel();"
16854,scheduleReportTimer,"    public void scheduleReportTimer(Timer timer, long frequency) {
        if(timerTask!=null) {
            cancelReportTimer();
        }
        timerTask = new Task();
        timer.scheduleAtFixedRate(timerTask, frequency, frequency);"
16855,getShutdownHook,"    public Runnable getShutdownHook() {
        return shutdownHook;
    }"
16856,addStreamReporter,"    public void addStreamReporter(PrintStream out) {
        addListener(new StreamReporter(out));
    }"
16857,addListener,"    public void addListener(Listener listener) {
        listeners.add(listener);
    }"
16858,statsReported,"        public void statsReported(String type, Map<Stack,A> stats);
    }"
16859,getType,"    public String getType() {
        return ProbeManager.UNCLOSED_SOCKET_LABEL;
    }"
16860,fromString,"    public static StatisticAdder fromString(String value) {
        final Object[] fields;
        try {
            synchronized(FORMAT) {
                fields = FORMAT.parse(value);
            }
        } catch(Exception e) {
            return null;"
16861,toString,"    public String toString() {
        final Object[] arg = { count, maxAge };
        synchronized(FORMAT) {
            return FORMAT.format(arg);"
16862,newInstance,"    public StatisticAdder<UnclosedStats> newInstance() {
        return new UnclosedStats();
    }"
16863,add,"    public void add(UnclosedStats value) {
        this.count += value.count;
        this.maxAge = Math.max(this.maxAge, value.maxAge);
    }"
16864,add,"    public void add(StatisticAdder<UnclosedStats> value) {
        add((UnclosedStats)value);
    }"
16865,add,"    public void add(long now, SocketImplDecorator item) {
        this.count++;
        final long age = now - item.openTime;
        this.maxAge = Math.max(this.maxAge, age);
    }"
16866,getMaxAge,"    public long getMaxAge() { return maxAge; }

    public void add(long now, SocketImplDecorator item) {"
16867,getCount,"    public int getCount() { return count; }
    public long getMaxAge() { return maxAge; }
"
16868,isShutdownReportEnabled,"    public boolean isShutdownReportEnabled() {
        return isShutdownHookEnabled(getReporter().getShutdownHook());
    }"
16869,setShutdownReportEnabled,"    public void setShutdownReportEnabled(boolean enabled) {
        if(enabled) {
            addShutdownHook(getReporter().getShutdownHook());"
16870,getClearClosedSocketsInterval,"    public int getClearClosedSocketsInterval() {
        return monitor.getClearClosedSocketsInterval();
    }"
16871,setClearClosedSocketsInterval,"    public void setClearClosedSocketsInterval(int numberOfSockets) {
        monitor.setClearClosedSocketsInterval(numberOfSockets);
    }"
16872,getReportingFrequency,"    public long getReportingFrequency() {
        return getReporter().getReportTimerFrequency();
    }"
16873,setReportingFrequency,"    public void setReportingFrequency(long millis) {
        getReporter().scheduleReportTimer(getTimer(), millis);
    }"
16874,getReport,"    public String getReport(long age) {
        final ByteArrayOutputStream rawOut = new ByteArrayOutputStream();
        final PrintStream out = new PrintStream(rawOut);
        final ValueReporter<UnclosedStats>.StreamReporter streamer = getReporter().new StreamReporter(out);
        final Map<Stack,UnclosedStats> values = monitor.getStats(age);
        streamer.statsReported(values);
        return rawOut.toString();
    }"
16875,setEnabled,"    @Override public void setEnabled(boolean enabled) { monitor.setEnabled(enabled); }

    @Override"
16876,isEnabled,"    @Override public boolean isEnabled() { return monitor.isEnabled(); }
    @Override public void setEnabled(boolean enabled) { monitor.setEnabled(enabled); }
"
16880,addListener,"    public void addListener(ProbeManager probe, Listener listener) {
        final ValueReporter<UnclosedStats> reporter = probe.getUnclosedReporter();
        if(reporter!=null) {
            reporter.addListener(listener);"
16881,getStatValue,"    public long getStatValue(StatisticAdder composite) {
        final UnclosedStats value = (UnclosedStats) composite;
        return countStat.isSelected() ? value.getCount() : value.getMaxAge();
    }"
16882,getOptionEditor,"    public JComponent getOptionEditor() {
        groupButtons(countStat, ageStat);
        return stackNorth(flow(new JLabel(""Value: ""), countStat, ageStat), getDisclaimer());
    }"
16883,getSummary,"    public String getSummary(Map<Stack, StatisticAdder> data) {
        UnclosedStats tally = new UnclosedStats();
        for(StatisticAdder item : data.values()) {
            tally.add((UnclosedStats)item);
        }"
16884,parse,"    public StatisticAdder parse(String value) throws ParseException {
        return UnclosedStats.fromString(value);
    }"
16885,getStatDetails,"    public String getStatDetails(StatisticAdder nodeValue, StatisticAdder parentValue) {
        final UnclosedStats boxDetail = (UnclosedStats)nodeValue;
        final UnclosedStats parentDetail = (UnclosedStats)parentValue;
        return String.format(
                ""Count:\n"""
16886,getToolTipText,"    public String getToolTipText(StackFrameNode boxNode, StackFrameNode parentNode) {
        final UnclosedStats boxDetail = (UnclosedStats)boxNode.getDetail();
        final UnclosedStats parentDetail = (UnclosedStats)parentNode.getDetail();
        return String.format(""<html>\n""
                                + ""%s<br>\n"""
16887,isSelected,"    public boolean isSelected() { return acceptSocketUnclosed.isSelected(); }

    @Override"
16888,getSelectionComponent,"    public JComponent getSelectionComponent() { return acceptSocketUnclosed; }

    @Override"
16890,previousReport,"        public void previousReport();
        public void nextReport();"
16891,zoomOut,"        public void zoomOut();
        public void previousReport();"
16892,zoomIn,"        public void zoomIn();
        public void zoomOut();"
16893,zoomFit,"        public void zoomFit();
        public void zoomIn();"
16894,zoomMax,"        public void zoomMax();
        public void zoomFit();"
16895,getAboutPanel,"        public JComponent getAboutPanel();
        public void zoomMax();"
16896,getDetailPanel,"        public DetailPanel getDetailPanel();
        public JComponent getAboutPanel();"
16897,getGraphControl,"        public JComponent getGraphControl();
        public DetailPanel getDetailPanel();"
16898,getStatisticControl,"        public JComponent getStatisticControl();
        public JComponent getGraphControl();"
16899,getFilterControl,"        public JComponent getFilterControl();
        public JComponent getStatisticControl();"
16900,getFileControl,"        public ReportFileChooser getFileControl();
        public JComponent getFilterControl();"
16901,getProbeControl,"        public JComponent getProbeControl();
        public ReportFileChooser getFileControl();"
16902,getFrame,"        public JFrame getFrame();
        public JComponent getProbeControl();"
16903,nextReport,"        public void nextReport() { gui.nextReport(); }
    }
"
16904,prevReport,"        public void prevReport() { gui.previousReport(); }
        public void nextReport() { gui.nextReport(); }
    }"
16905,zoomOut,"        public void zoomOut() { gui.zoomOut(); }
        public void prevReport() { gui.previousReport(); }
        public void nextReport() { gui.nextReport(); }"
16906,zoomIn,"        public void zoomIn() { gui.zoomIn(); }
        public void zoomOut() { gui.zoomOut(); }
        public void prevReport() { gui.previousReport(); }"
16907,zoomMax,"        public void zoomMax() { gui.zoomMax(); }
        public void zoomIn() { gui.zoomIn(); }
        public void zoomOut() { gui.zoomOut(); }"
16908,zoomFit,"        public void zoomFit() { gui.zoomFit(); }
        public void zoomMax() { gui.zoomMax(); }
        public void zoomIn() { gui.zoomIn(); }"
16909,setPosition,"        public void setPosition(Window window) {
            final int index = DIALOG_COUNT++;
            int x = 100+(index%4)*75;
            final int y = 100+ index*25;
            window.setLocation(x, y);
        }"
16910,setPosition,"        public void setPosition(ReportFileChooser window) {
            final int index = DIALOG_COUNT++;
            int x = 100+(index%4)*75;
            final int y = 100+ index*50;
            window.setLocation(x, y);
        }"
16911,actionPerformed,"                    public void actionPerformed(ActionEvent e) {
                        probePopup.setVisible(false);
                    }"
16913,getAboutPopup,"        public JDialog getAboutPopup() {
            if(popup==null) {
                popup = createDialog(windowTitle, gui.getAboutPanel());
            }"
16914,getDetailPopup,"        public JDialog getDetailPopup() {
            if(popup==null) {
                popup = createDialog(windowTitle, gui.getDetailPanel());
            }"
16915,getGraphPopup,"        public JDialog getGraphPopup() {
            if(popup==null) {
                popup = createDialog(windowTitle, gui.getGraphControl());
            }"
16916,getStatisticPopup,"        public JDialog getStatisticPopup() {
            if(popup==null) {
                popup = createDialog(windowTitle, gui.getStatisticControl());
            }"
16917,getFilterPopup,"        public JDialog getFilterPopup() {
            if(popup==null) {
                popup = createDialog(windowTitle, gui.getFilterControl());
            }"
16918,getFileChooser,"        public ReportFileChooser getFileChooser() {
            final ReportFileChooser out = gui.getFileControl();
            setPosition(out);
            return out;
        }"
16919,getProbePopup,"        public JDialog getProbePopup() {
            if(popup==null) {
                popup = createDialog(windowTitle, gui.getProbeControl());
            }"
16920,getFrame,"        public JFrame getFrame() {
            return gui.getFrame();
        }"
16922,setTargetComponents,"    public static void setTargetComponents(GUIComponents components) {
        for(Tool tool : Tool.values()) {
            tool.setComponents(components);"
16923,actionPerformed,"    public void actionPerformed(ActionEvent e) {
        final Window window = getPopup();
        if(window==null || window.isShowing()) { return; }
        window.pack();
        window.setVisible(true);
    }"
16924,getPopup,"    protected Window getPopup() {
        return null;
    }"
16926,setComponents,"    public void setComponents(GUIComponents components) {
        targets.setProxy(components);
    }"
16927,getPopup,"        protected JDialog getPopup() { return targets.getAboutPopup(); }
    };
"
16928,getPopup,"        protected JDialog getPopup() { return targets.getDetailPopup(); }
    },
    ABOUT_INSPECTOR(""About gumshoe"", ""about.png"", ""About Gumshoe Inspector"") {"
16929,actionPerformed,"        public void actionPerformed(ActionEvent e) {
            targets.zoomOut();
        }"
16930,actionPerformed,"        public void actionPerformed(ActionEvent e) {
            targets.zoomFit();
        }"
16931,actionPerformed,"        public void actionPerformed(ActionEvent e) {
            targets.zoomIn();
        }"
16932,getPopup,"        protected JDialog getPopup() { return targets.getGraphPopup(); }
    },
    ZOOM_IN(""Bigger"", ""larger.png"") {"
16933,getPopup,"        protected JDialog getPopup() { return targets.getStatisticPopup(); }
    },
    CONFIGURE_GRAPH(""Configure graph"", ""graph.png"", ""Graph Display Options"") {"
16934,getPopup,"        protected JDialog getPopup() { return targets.getFilterPopup(); }
    },
    CHOOSE_STATISTIC(""Choose statistic"", ""stats.png"", ""Statistic to Display"") {"
16935,actionPerformed,"        public void actionPerformed(ActionEvent e) {
            targets.nextReport();
        }"
16936,actionPerformed,"        public void actionPerformed(ActionEvent e) {
            targets.prevReport();
        }"
16937,actionPerformed,"        public void actionPerformed(ActionEvent e) {
            final JFileChooser chooser = targets.getFileChooser();
            if(chooser==null || chooser.isShowing()) { return; }
            chooser.showOpenDialog(targets.getFrame());
        }"
16938,getPopup,"        protected JDialog getPopup() { return targets.getProbePopup(); }
    },
"
16939,setComponents,"        public void setComponents(GUIComponents components) {
            super.setComponents(components);
            if(getPopup()==null) {
                getButton().setEnabled(false);"
16941,maybeSpeedReporting,"        private void maybeSpeedReporting(long elapsed) {
            if(effectiveInterval==dumpInterval) { return; }
            if(successCountSinceLastTooLong<10) { return; }

            if(elapsed < effectiveInterval/4) {
                shortSinceLastNotShort++;
            } else {
                shortSinceLastNotShort=0;"
16943,shouldDisableReporting,"        private boolean shouldDisableReporting() {
            return exceptionCountSinceLastSuccess>=4;
        }"
16945,performDumpAndReschedule,"        private void performDumpAndReschedule() throws InterruptedException {
            final long potentialLastDumpTime = System.currentTimeMillis();

            try {
                recordThreadInfo();"
16947,run,"        public void run() {
            while(enabled) {
                try {"
16948,disableDueToException,"    private synchronized void disableDueToException() {
        setEnabled(false);
    }"
16949,stopThread,"    private void stopThread() {
        if(thread!=Thread.currentThread()) {
            int count = 0;
            while(thread.isAlive() && count++ < 5) {"
16950,startThread,"    private void startThread() {
        if(thread!=null) {
            throw new IllegalStateException(""monitor is already running"");
        }

        dumper = new ThreadDumper();
        thread = new Thread(dumper);
        thread.setName(""gumshoe-cpu-monitor"");
        thread.setDaemon(true);"
16951,recordThreadInfo,"    private void recordThreadInfo(Stack stack, ThreadDetails info) {
        CPUStats tally = usageStatistics.get(stack);
        if(tally==null) {
            tally = new CPUStats();
            usageStatistics.put(stack, tally);"
16953,reset,"    public void reset() {
        usageStatistics.clear();
    }"
16954,getStats,"    public Map<Stack,CPUStats> getStats() {
        return Collections.unmodifiableMap(usageStatistics);
    }"
16955,getAverageDumpTime,"    public long getAverageDumpTime() {
        return dumpTimeSum / dumpCount;
    }"
16956,isEnabled,"    public boolean isEnabled() {
        return enabled;
    }"
16957,setEnabled,"    public synchronized void setEnabled(boolean enabled) {
        if(enabled==this.enabled) { return; }
        this.enabled = enabled;
        this.effectiveInterval = dumpInterval;
        if(enabled) {
            startThread();"
16958,destroyProbe,"    public void destroyProbe() throws Exception {
        setEnabled(false);
    }"
16959,initializeProbe,"    public void initializeProbe() throws Exception {
        setEnabled(true);
    }"
16960,isContentionMonitoringEnabled,"    public boolean isContentionMonitoringEnabled() {
        final ThreadMXBean mbean = ManagementFactory.getThreadMXBean();
        return mbean.isThreadContentionMonitoringEnabled();
    }"
16961,setContentionMonitoringEnabled,"    public void setContentionMonitoringEnabled(boolean enable) {
        final ThreadMXBean mbean = ManagementFactory.getThreadMXBean();
        if(enabled && ! mbean.isThreadContentionMonitoringSupported()) {
            throw new UnsupportedOperationException(""JVM does not support contention monitoring"");
        }"
16962,setThreadFilter,"    public void setThreadFilter(ThreadFilter threadFilter) { this.threadFilter = threadFilter; }

    public void setContentionMonitoringEnabled(boolean enable) {"
16963,setStackFilter,"    public void setStackFilter(StackFilter stackFilter) { this.stackFilter = stackFilter; }
    public void setThreadFilter(ThreadFilter threadFilter) { this.threadFilter = threadFilter; }
"
16964,getEffectiveInterval,"    public long getEffectiveInterval() { return effectiveInterval; }
    public void setStackFilter(StackFilter stackFilter) { this.stackFilter = stackFilter; }
    public void setThreadFilter(ThreadFilter threadFilter) { this.threadFilter = threadFilter; }"
16965,setThreadPriority,"    public void setThreadPriority(int threadPriority) {
        this.threadPriority = threadPriority;
        if(thread!=null) {
            thread.setPriority(threadPriority);"
16966,getThreadPriority,"    public int getThreadPriority() { return threadPriority; }
    public void setThreadPriority(int threadPriority) {
        this.threadPriority = threadPriority;"
16967,setDumpInterval,"    private void setDumpInterval(long dumpInterval, long jitter) {
        if(dumper==null) {
            this.dumpInterval = this.effectiveInterval = dumpInterval;"
16968,setDumpInterval,"    public void setDumpInterval(long dumpInterval) {
        setDumpInterval(dumpInterval, getJitter());
    }"
16969,getDumpInterval,"    public long getDumpInterval() { return dumpInterval; }

    public void setDumpInterval(long dumpInterval) {"
16970,setJitter,"    public void setJitter(long jitter) {
        setDumpInterval(getDumpInterval(), jitter);
    }"
16971,getJitter,"    public long getJitter() {
        return (long)jitter*dumpInterval;
    }"
16972,useThread,"    public boolean useThread(Stack stack, ThreadDetails details);
}"
16973,useThread,"        public boolean useThread(Stack unused, ThreadDetails ignored) { return true; }
    };
"
16974,getState,"    public State getState() { return state; }
}"
16975,getWaitedTime,"    public long getWaitedTime() { return waitedTime; }
    public State getState() { return state; }
}"
16976,getWaitedCount,"    public long getWaitedCount() { return waitedCount; }
    public long getWaitedTime() { return waitedTime; }
    public State getState() { return state; }"
16977,getBlockedTime,"    public long getBlockedTime() { return blockedTime; }
    public long getWaitedCount() { return waitedCount; }
    public long getWaitedTime() { return waitedTime; }"
16978,getBlockedCount,"    public long getBlockedCount() { return blockedCount; }
    public long getBlockedTime() { return blockedTime; }
    public long getWaitedCount() { return waitedCount; }"
16979,getUserTime,"    public long getUserTime() { return userTime; }
    public long getBlockedCount() { return blockedCount; }
    public long getBlockedTime() { return blockedTime; }"
16980,getCpuTime,"    public long getCpuTime() { return cpuTime; }
    public long getUserTime() { return userTime; }
    public long getBlockedCount() { return blockedCount; }"
16983,tearDown,"    public void tearDown() throws IOException {
        target.close();
    }"
16984,setUp,"    public void setUp() throws Exception {
        final String fileName = getClass().getClassLoader().getResource(""sample-data.txt"").getFile();
        target = new FileDataParser(fileName);
    }"
16985,matches,"        public boolean matches(SocketAddress address) { return true; }
    }
}"
16986,matches,"        public boolean matches(byte[] unused, int port) { return true; }
        public boolean matches(SocketAddress address) { return true; }
    }"
16987,toString,"    public String toString() {
        final StringBuilder out = new StringBuilder();
        for(int i=0;i<4;i++) {
            if(i>0) out.append(""."");
            out.append(0xFF & targetAddress[i]);
        }
        out.append(""/"");
        for(int i=0;i<4;i++) {
            if(i>0) out.append(""."");"
16988,matches,"    public boolean matches(SocketAddress address) {
        if(address instanceof InetSocketAddress) {
            final InetSocketAddress ipAndPort = (InetSocketAddress)address;"
16989,matches,"    public boolean matches(byte[] addressBytes, int port) {
        for(int i=0;i<4;i++) {
            if(((addressBytes[i]^targetAddress[i]) & mask[i]) > 0) {
                return false;"
16991,addCloseListener,"    public void addCloseListener(ActionListener listener) {
        close.addActionListener(listener);
        graph.repaint();
    }"
16992,reportWasSelected,"    public void reportWasSelected(Object source, String time, String type, Map<Stack, StatisticAdder> data) {
        lastLoadedType = type;
        if( ! isShowing()) { updateWhenLoaded = true; }
        if(updateWhenLoaded) {
            statSelector.setSelectedItem(type);"
16995,newInstance,"    public StatisticAdder<V> newInstance();
    public String getType();"
16996,add,"    public void add(V value);
    public StatisticAdder<V> newInstance();"
16997,add,"    public void add(StatisticAdder<V> value);
    public void add(V value);"
16998,matches,"                    public boolean matches(StackTraceElement frame) {
                        final String className = frame.getClassName();
                        for(String pattern : includePatterns) {
                            if(className.startsWith(pattern)) { return true; }
                        }"
16999,matches,"                    public boolean matches(StackTraceElement frame) {
                        final String className = frame.getClassName();
                        for(String pattern : excludePatterns) {
                            if(className.startsWith(pattern)) { return false; }
                        }"
17000,build,"        public StackFilter build() {
            if( ! excludePatterns.isEmpty()) {
                filters.add(new FrameMatcher() {
                    @Override
                    public boolean matches(StackTraceElement frame) {
                        final String className = frame.getClassName();
                        for(String pattern : excludePatterns) {
                            if(className.startsWith(pattern)) { return false; }"
17001,withRecursionFilter,"        public void withRecursionFilter(int depth, int threshold) {
            recursionDepth = depth;
            recursionThreshold = threshold;
        }"
17002,withSimpleFrames,"        public void withSimpleFrames(String simplifyLevel) {
            this.frameMinutia = simplifyLevel;
        }"
17003,withSimpleFrames,"        public void withSimpleFrames(MinutiaFilter.Level level) {
            this.frameMinutia = level.toString();
        }"
17005,withEndsOnly,"        public Builder withEndsOnly(final int topCount, final int bottomCount) {
            if(topCount==0 && bottomCount==0) { return this; }

            endFilter = new StackFilter() {
                @Override"
17006,withOnlyClasses,"        public Builder withOnlyClasses(final String startingWith) {
            includePatterns.add(startingWith);
            return this;
        }"
17007,withExcludeClasses,"        public Builder withExcludeClasses(final String startingWith) {
            excludePatterns.add(startingWith);
            return this;
        }"
17008,withExcludePlatform,"        public Builder withExcludePlatform() {
            withExcludeClasses(""sunw."");
            withExcludeClasses(""sun."");
            withExcludeClasses(""java."");
            withExcludeClasses(""javax."");
            withExcludeClasses(""com.dell.gumshoe."");
            return this;
        }"
17009,withOriginalIfBlank,"        public Builder withOriginalIfBlank() {
            withOriginal = true;
            return this;
        }"
17010,withFilter,"        public Builder withFilter(StackFilter filter) {
            filters.add(filter);
            return this;
        }"
17011,builder,"    public static Builder builder() { return new Builder(); }

    public static class Builder {"
17013,getStats,"    public Map<Stack,T> getStats();
    public void reset();"
17014,zoomOut,"    public void zoomOut() {
        zoom--;
        image = null;
        zoomedSize = null;
        revalidate();
    }"
17015,zoomIn,"    public void zoomIn() {
        zoom++;
        image = null;
        zoomedSize = null;
        revalidate();
    }"
17016,zoomFit,"    public void zoomFit() {
        zoom = 0;
        image = null;
        zoomedSize = null;
        baseSize = null;
        revalidate();
    }"
17018,getScrollableTracksViewportHeight,"    public boolean getScrollableTracksViewportHeight() {
        return baseSize==null;
    }"
17019,getScrollableTracksViewportWidth,"    public boolean getScrollableTracksViewportWidth() {
        return baseSize==null;
    }"
17020,getScrollableBlockIncrement,"    public int getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction) {
        return 100;
    }"
17021,getScrollableUnitIncrement,"    public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction) {
        return 10;
    }"
17022,getPreferredScrollableViewportSize,"    public Dimension getPreferredScrollableViewportSize() {
        return null;
    }"
17023,getPreferredSize,"    public Dimension getPreferredSize() {
        if(baseSize==null) { return super.getPreferredSize(); }
        if(zoomedSize==null) {
            final double multiplier = Math.pow(ZOOM_BASE, zoom);
            final double width = (baseSize.getWidth()) * multiplier;"
17024,updateDetails,"    private void updateDetails(Box box) {
        final Box oldSelection = selectedBox;
        selectedBox = box;
        updateImageSelection(oldSelection, selectedBox);
    }"
17025,updateDetails,"    private void updateDetails(MouseEvent event) {
        final Box box = getBoxFor(event);
        if(box!=null) {
            updateDetails(box);"
17026,updateDetails,"    private void updateDetails() {
        for(Box box : boxes) {
            if(box==selectedBox) {"
17027,getToolTipText,"    public String getToolTipText(MouseEvent event) {
        final Box box = getBoxFor(event);
        return box==null ? null : box.getToolTipText();
    }"
17028,getBoxFor,"    private Box getBoxFor(MouseEvent e) {
        if(boxes==null) {
            return null;
        }

        final Dimension dim = getSize();
        final float rowHeight = (dim.height) / (float)modelRows;"
17030,updateImageSelection,"    private void updateImageSelection(Box oldSelected, Box newSelected) {
        if(boxes==null || image==null) return;
        new ImageSelectionUpdater(oldSelected, newSelected).execute();
    }"
17033,paintComponent,"    public void paintComponent(Graphics g) {
        final Dimension dim = getSize();
        if(baseSize==null) {
            baseSize = new Dimension(dim);
            lastTextHeight = g.getFontMetrics(g.getFont()).getHeight();"
17034,doInBackground,"        public Object doInBackground() throws Exception {
            update();
            repaint();
            return null;
        }"
17035,update,"    private synchronized void update() {
        if(model==null) {
            model = new StackFrameNode(values, options, filter);
            modelRows = model.getDepth(options);
            boxes = null;"
17036,getImage,"    public BufferedImage getImage() {
        return image;
    }"
17039,getDetailField,"    public JComponent getDetailField() {
        if(detailField==null) {
            detailField = new JTextArea();
            detailField.setRows(40);"
17040,getOptionEditor,"    public OptionEditor getOptionEditor() {
        return optionEditor;
    }"
17041,getStatisticChooser,"    public StatisticChooser getStatisticChooser() {
        if(statChooser==null) {
            statChooser = new StatisticChooser(this);
        }"
17042,setFilter,"    public void setFilter(StackFilter filter) {
        if(this.filter!=filter) {
            this.filter = filter;"
17043,updateModel,"    public void updateModel(Map<Stack,StatisticAdder> values) {
        if(this.values!=values) {
            this.values = values;"
17044,updateOptions,"    public void updateOptions(DisplayOptions o) {
        if(this.options!=o) {
            this.options = o;"
17045,getSelectionParent,"    public StackFrameNode getSelectionParent() { return selectedBox.getParentNode(); }

    public void updateOptions(DisplayOptions o) {"
17046,getSelection,"    public StackFrameNode getSelection() { return selectedBox.getNode(); }
    public StackFrameNode getSelectionParent() { return selectedBox.getParentNode(); }
"
17047,notifyListeners,"    private void notifyListeners() {
        final ListSelectionEvent event = new ListSelectionEvent(this, 0, 0, false);
        for(ListSelectionListener listener : listeners) {
            listener.valueChanged(event);"
17048,addSelectionListener,"    public void addSelectionListener(ListSelectionListener listener) {
        listeners.add(listener);
    }"
17049,actionPerformed,"            public void actionPerformed(ActionEvent e) {
                updateOptions(optionEditor.getOptions());
            }"
17050,mouseClicked,"            public void mouseClicked(MouseEvent e) {
                updateDetails(e);
            }"
17051,getStats,"    public String getStats(StackFrameNode parent) {
        return DataTypeHelper.getStatInfo(detail, parent==null ? null : parent.detail);
    }"
17052,addNode,"    private void addNode(StringBuilder builder, String indent) {
        for(Map.Entry<StackTraceElement,StackFrameNode> entry : divisions.entrySet()) {
            builder.append(indent)"
17053,toString,"    public String toString() {
        final StringBuilder msg = new StringBuilder();
        addNode(msg, """");
        return msg.toString();
    }"
17055,compare,"                public int compare(StackTraceElement key1, StackTraceElement key2) {
                    return -Long.valueOf(model.divisions.get(key1).value).compareTo(Long.valueOf(model.divisions.get(key2).value));
                }"
17056,getDivisions,"    private List<StackTraceElement> getDivisions(final StackFrameNode model, DisplayOptions.Order order) {
        final List<StackTraceElement> keys = new ArrayList<>(model.divisions.keySet());
        if(order==DisplayOptions.Order.BY_VALUE) {
            Collections.sort(keys, new Comparator<StackTraceElement>() {
                @Override"
17057,getDepth,"    public int getDepth(DisplayOptions options, float valueLimit) {
        final long value = getValue(detail, options);
        if(value<=valueLimit) { return 0; }
        int max = -1;
        for(StackFrameNode div : divisions.values()) {
            max = Math.max(div.getDepth(options, valueLimit), max);
        }"
17058,getDepth,"    public int getDepth(DisplayOptions options) {
        return getDepth(options, value*options.minPercent/100f);
    }"
17059,getStatValue,"    private long getStatValue(StatisticAdder details, DisplayOptions options) {
        return DataTypeHelper.getValue(details);
    }"
17060,getValue,"    private long getValue(StatisticAdder details, DisplayOptions options) {
        final DisplayOptions.WidthScale width = options.scale;
        switch(width) {
            case EQUAL:     return 5;
            case VALUE:     return getStatValue(details, options);"
17061,getParentFrame,"    private Set<StackTraceElement> getParentFrame() {
        final StackTraceElement parentFrame = parent.getFrame();
        return parentFrame==null ? Collections.<StackTraceElement>emptySet() : Collections.<StackTraceElement>singleton(parentFrame);    }
"
17062,isByCalled,"    public boolean isByCalled() {
        return byCalled;
    }"
17063,getCallingFrames,"    public Set<StackTraceElement> getCallingFrames() {
        return byCalled ? getParentFrame() : divisions.keySet();
    }"
17064,getCalledFrames,"    public Set<StackTraceElement> getCalledFrames() {
        return byCalled ? divisions.keySet() : getParentFrame();
    }"
17065,appendContext,"    public void appendContext(StringBuilder msg) {
        if(byCalled) {
            for(int index=frameIndex;index>=0;index--) {"
17066,getContext,"    public StackTraceElement[] getContext() {
        final StackTraceElement[] out = new StackTraceElement[frameIndex+1];
        int i=0;
        if(byCalled) {
            for(int index=frameIndex;index>=0;index--) {
                out[i++] = frames[index];"
17067,getValue,"    public long getValue() { return value; }

    public StackTraceElement[] getContext() {"
17068,getFrame,"    public StackTraceElement getFrame() { return frames==null ? null : frames[frameIndex]; }
    public long getValue() { return value; }
"
17069,getDetail,"    public StatisticAdder getDetail() { return detail; }
    public StackTraceElement getFrame() { return frames==null ? null : frames[frameIndex]; }
    public long getValue() { return value; }"
17070,filter,"        public int filter(StackTraceElement[] buffer, int size) {
            return size;
        }"
17071,filter,"    public int filter(StackTraceElement[] buffer, int size);
"
17072,parseFrame,"    public static StackTraceElement parseFrame(String line) {

        final String filename;
        final int lineNumber;
        if(line.endsWith(""(Unknown Source)"")) {
            filename = null;
            lineNumber = -1;
        } else if(line.endsWith(""(Native Method)"")) {
            filename = null;
            lineNumber = -2;
        } else if(line.contains("":"")) {"
17073,isEmpty,"    public boolean isEmpty() {
        return frames.length==0;
    }"
17074,toString,"    public String toString() {
        final StringBuilder out = new StringBuilder();
        for(StackTraceElement frame : frames) {
            out.append(FRAME_PREFIX).append(frame).append(""\n"");
        }"
17075,equals,"    public boolean equals(Object obj) {
        if( ! (obj instanceof Stack)) return false;
        Stack that = (Stack)obj;
        return Arrays.equals(this.frames, that.frames);
    }"
17076,hashCode,"    public int hashCode() {
        return Arrays.hashCode(frames);
    }"
17077,getFrames,"    public StackTraceElement[] getFrames() {
        return frames.clone();
    }"
17078,applyFilter,"    public Stack applyFilter(StackFilter filter) {
        final StackTraceElement[] buffer = frames.clone();
        final int size = filter.filter(buffer, frames.length);
        final StackTraceElement[] filteredStack = new StackTraceElement[size];
        if(size>0) {
            System.arraycopy(buffer, 0, filteredStack, 0, size);
        }"
17079,isWrite,"    @Override public boolean isWrite() { return true; }
}"
17080,isRead,"    @Override public boolean isRead() { return false; }
    @Override public boolean isWrite() { return true; }
}"
17081,begin,"    public static SocketEvent begin() {
        return new SocketWriteEvent();
    }"
17082,isWrite,"    @Override public boolean isWrite() { return false; }
}"
17083,isRead,"    @Override public boolean isRead() { return true; }
    @Override public boolean isWrite() { return false; }
}"
17084,begin,"    public static SocketEvent begin() {
        return new SocketReadEvent();
    }"
17085,createAccumulator,"    protected IOAccumulator createAccumulator(StackFilter filter) {
        return new SocketIOAccumulator(filter);
    }"
17086,parseSocketMatchers,"    private static AddressMatcher[] parseSocketMatchers(String csv) throws ParseException {
        if(csv==null || csv.trim().equals("""")) {
            return new AddressMatcher[0];
        }

        final String[] addressDescriptions = csv.split("","");
        final int len = addressDescriptions.length;
        final AddressMatcher[] matchers = new AddressMatcher[len];"
17088,getLabel,"    public String getLabel() {
        return LABEL;
    }"
17089,handleEvent,"    private void handleEvent(Object context, InetAddress address, int port, long bytes) {
        if(socketFilter.matches(address.getAddress(), port)) {
            final SocketEvent operation = (SocketEvent)context;"
17090,socketWriteEnd,"    public void socketWriteEnd(Object context, InetAddress address, int port, long bytesWritten) {
        handleEvent(context, address, port, bytesWritten);
    }"
17091,socketReadEnd,"    public void socketReadEnd(Object context, InetAddress address, int port, int timeout, long bytesRead) {
        handleEvent(context, address, port,  bytesRead);
    }"
17092,socketWriteBegin,"    public Object socketWriteBegin() {
        return SocketWriteEvent.begin();
    }"
17093,socketReadBegin,"    public Object socketReadBegin() {
        return SocketReadEvent.begin();
    }"
17094,initializeProbe,"    public void initializeProbe() throws Exception {
        if(useNIOHooks) {
            final String className = System.getProperty(""java.nio.channels.spi.SelectorProvider"");
            if( ! IoTraceSelectorProvider.class.getName().equals(className)) {"
17095,isShutdownReportEnabled,"    public boolean isShutdownReportEnabled();
}"
17096,setShutdownReportEnabled,"    public void setShutdownReportEnabled(boolean enabled);
    public boolean isShutdownReportEnabled();"
17098,setReportingFrequency,"    public void setReportingFrequency(long millis);
    public long getReportingFrequency();"
17100,getReport,"    public String getReport();
    public void reset();"
17102,setEnabled,"    public void setEnabled(boolean enabled);
    public boolean isEnabled();"
17103,getTargetName,"    protected String getTargetName() {
        return ""addresses"";
    }"
17104,addListener,"    public void addListener(ProbeManager probe, Listener listener) {
        final ValueReporter<IODetailAdder> reporter = probe.getSocketIOReporter();
        if(reporter!=null) {
            reporter.addListener(listener);"
17105,parse,"    public StatisticAdder parse(String value) throws ParseException {
        return SocketIODetailAdder.fromString(value);
    }"
17106,isSelected,"    public boolean isSelected() { return acceptSocketIO.isSelected(); }

    @Override"
17107,getSelectionComponent,"    public JComponent getSelectionComponent() { return acceptSocketIO; }

    @Override"
17108,fromString,"    public static SocketIODetailAdder fromString(String line) {
        final SocketIODetailAdder out = new SocketIODetailAdder();
        try {
            out.setFromString(line);
        } catch(Exception e) {"
17109,newInstance,"    public StatisticAdder<IOEvent> newInstance() {
        return new SocketIODetailAdder();
    }"
17110,getType,"    public String getType() {
        return ProbeManager.SOCKET_IO_LABEL;
    }"
17111,newAdder,"    public SocketIODetailAdder newAdder() {
        return new SocketIODetailAdder();
    }"
17112,complete,"    public void complete(InetAddress address, int port, long bytes) {
        complete(bytes);
        setTarget( convertAddress(address, port) );
    }"
17113,convertAddress,"    private static String convertAddress(InetAddress addr, int port) {
        final byte[] ip = addr.getAddress();
        return String.format(""%d.%d.%d.%d:%d"", 255&ip[0], 255&ip[1], 255&ip[2], 255&ip[3], port);
    }"
17116,getClearClosedSocketsInterval,"    public int getClearClosedSocketsInterval();
    public void setShutdownReportEnabled(boolean enabled);"
17117,setClearClosedSocketsInterval,"    public void setClearClosedSocketsInterval(int numberOfSockets);
    public int getClearClosedSocketsInterval();"
17118,getReportingFrequency,"    public long getReportingFrequency();
    public void setClearClosedSocketsInterval(int numberOfSockets);"
17120,getReport,"    public String getReport(long age);
    public void setReportingFrequency(long millis);"
17121,isEnabled,"    public boolean isEnabled();
    public String getReport(long age);"
17123,getStats,"    Map<Stack,UnclosedStats> getStats(long minAge) {
        final long now = System.currentTimeMillis();
        final long cutoff = now - minAge;
        final List<SocketImplDecorator> unclosed = findOpenedBefore(cutoff);
        final Map<Stack,UnclosedStats> summaryByStack = new HashMap<>();
        for(SocketImplDecorator socket : unclosed) {
            UnclosedStats stats = summaryByStack.get(socket.stack);
            if(stats==null) {"
17124,getStats,"    public Map<Stack,UnclosedStats> getStats() {
        return getStats(minReportingAge);
    }"
17126,run,"        public void run() {
            synchronized(clearClosedLock) {
                while(true) {"
17127,notifyClearClosed,"    private void notifyClearClosed() {
        synchronized(clearClosedLock) {
            clearClosedLock.notifyAll();"
17128,clearClosedSockets,"    private void clearClosedSockets() {
        synchronized(clearClosedLock) {
            for(SocketImplDecorator value : openSockets.values()) {"
17129,toString,"        public String toString() {
            final Socket socket = getSocket();

            return String.format(""%s %s (%s)\n%s"","
17130,isClosed,"        private boolean isClosed() {
            return getSocket().isClosed();
        }"
17131,getSocket,"        private Socket getSocket() {
            try {
                return (Socket) getSocketMethod.invoke(impl);"
17132,newSocketImpl,"    private SocketImpl newSocketImpl() {
        try {
            return (SocketImpl) socketConstructor.newInstance();"
17133,createSocketImpl,"    public SocketImpl createSocketImpl() {
        if(enabled) {
            final int socketId = SOCKET_IDS.incrementAndGet();"
17134,getCountsByStack,"    public Map<Stack, Integer> getCountsByStack() {
        final Map<Stack, Integer> out = new HashMap<>(countByStack.size());
        for(Map.Entry<Stack,AtomicInteger> entry : countByStack.entrySet()) {
            out.put(entry.getKey(), entry.getValue().get());
        }"
17135,getSocketCount,"    public int getSocketCount() {
        clearClosedSockets();
        return socketCount.get();
    }"
17136,findOpenedBefore,"    public List<SocketImplDecorator> findOpenedBefore(long cutoff) {
        final List<SocketImplDecorator> out = new ArrayList<SocketImplDecorator>();
        for(SocketImplDecorator value : openSockets.values()) {
            if(value.openTime<cutoff && ! value.isClosed()) {
                out.add(value);"
17137,getClearClosedSocketsInterval,"    public int getClearClosedSocketsInterval() {
        return clearClosedPerCount;
    }"
17138,setClearClosedSocketsInterval,"    public void setClearClosedSocketsInterval(int numberOfSockets) {
        clearClosedPerCount = numberOfSockets;
        if(clearClosedThread==null) {
            clearClosedThread = new Thread(new ScanForClosed());"
17140,initializeProbe,"    public void initializeProbe() throws IOException {
        Socket.setSocketImplFactory(this);
    }"
17141,setEnabled,"    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
        if( ! enabled) {
            synchronized(clearClosedLock) {"
17143,setFilter,"    public void setFilter(StackFilter filter) {
        this.filter = filter;
    }"
17145,getPreferredSize,"    public Dimension getPreferredSize() {
        final Dimension size = scrollPane.getViewport().getView().getSize();
        size.height = RULER_HEIGHT;
        return size;
    }"
17147,nextReport,"    public void nextReport();
    public void previousReport();"
17148,hasPrevious,"    public boolean hasPrevious();
    public void nextReport();"
17149,hasNext,"    public boolean hasNext();
    public boolean hasPrevious();"
17150,addListener,"    public void addListener(ReportSelectionListener listener);
    public boolean hasNext();"
17151,contentsChanged,"    public void contentsChanged(ReportSource source);
}"
17152,reportWasSelected,"    public void reportWasSelected(Object source, String time, String type, Map<Stack,StatisticAdder> data);
    public void contentsChanged(ReportSource source);"
17153,notifyContentsChanged,"    private void notifyContentsChanged() {
        for(ReportSelectionListener listener : listeners) {
            listener.contentsChanged(this);"
17154,hasPrevious,"    public boolean hasPrevious() {
        return parser.hasPrevious();
    }"
17155,hasNext,"    public boolean hasNext() {
        return parser.hasNext();
    }"
17156,previousReport,"    public void previousReport() {
        readReport(false);
    }"
17157,nextReport,"    public void nextReport() {
        readReport(true);
    }"
17158,done,"        public void done() {
            try {
                final Map<Stack,StatisticAdder> report = get();"
17159,doInBackground,"        public Map<Stack,StatisticAdder> doInBackground() throws Exception {
            return forward ? parser.getNextReport() : parser.getPreviousReport();
        }"
17160,relayStats,"    private void relayStats(String file, String time, String type, Map<Stack,StatisticAdder> data) {
        for(ReportSelectionListener listener : listeners) {
            listener.reportWasSelected(file, time, type, data);"
17161,addListener,"    public void addListener(ReportSelectionListener listener) {
        listeners.add(listener);
    }"
17162,readReport,"    private void readReport(boolean forward) {
        new FileOpener(forward).execute();
    }"
17163,validFile,"    private boolean validFile(File file) {
        if( ! file.exists()) {
            notifyError(""Not found: "" + file);
            return false;"
17164,openParser,"    private void openParser(File file) {
        if( ! validFile(file)) { return; }

        try {
            parser = new FileDataParser(file);"
17165,closeParser,"    private void closeParser() {
        if(parser!=null) {
            try { parser.close(); }
            catch(Exception ignore) { }"
17166,notifyError,"    private void notifyError(String message) {
        JOptionPane.showMessageDialog(this, message, ""File Open Failed!"", JOptionPane.ERROR_MESSAGE);
    }"
17167,approveSelection,"    public void approveSelection() {
        closeParser();
        openParser(getSelectedFile());
        notifyContentsChanged();
        super.approveSelection();
    }"
17168,setLocation,"    public void setLocation(int x, int y) {
        if(dialog!=null) {
            dialog.setLocation(x, y);
        }
        locationX = x;"
17169,createDialog,"    protected JDialog createDialog(Component parent) throws HeadlessException {
        dialog = super.createDialog(parent);
        dialog.setLocation(locationX, locationY);
        return dialog;
    }"
17170,matches,"    private boolean matches(StackTraceElement[] buffer, int source, int target, int length) {
        for(int i=0;i<length;i++) {
            if( ! buffer[source+i].equals(buffer[target+i])) {
                return false;"
17171,getMatchEnd,"    private int getMatchEnd(StackTraceElement[] buffer, int source, int target, int length) {
        while(matches(buffer, source, target, length)) {
            target += length;
        }"
17177,getAverageDumpTime,"    public long getAverageDumpTime() {
        return monitor.getAverageDumpTime();
    }"
17178,reset,"    public void reset() {
        monitor.reset();
    }"
17179,getReport,"    public String getReport() {
        final ByteArrayOutputStream rawOut = new ByteArrayOutputStream();
        final PrintStream out = new PrintStream(rawOut);
        final ValueReporter<CPUStats>.StreamReporter streamer = getReporter().new StreamReporter(out);
        final Map<Stack,CPUStats> values = monitor.getStats();
        streamer.statsReported(values);
        return rawOut.toString();
    }"
17180,isEnabled,"    public boolean isEnabled() {
        return monitor.isEnabled();
    }"
17181,setEnabled,"    public void setEnabled(boolean enabled) {
        monitor.setEnabled(enabled);
    }"
17182,getEffectiveInterval,"    public long getEffectiveInterval() {
        return monitor.getEffectiveInterval();
    }"
17183,setThreadPriority,"    public void setThreadPriority(int threadPriority) {
        monitor.setThreadPriority(threadPriority);
    }"
17184,getThreadPriority,"    public int getThreadPriority() {
        return monitor.getThreadPriority();
    }"
17185,setDumpInterval,"    public void setDumpInterval(long dumpInterval) {
        monitor.setDumpInterval(dumpInterval);
    }"
17186,getDumpInterval,"    public long getDumpInterval() {
        return monitor.getDumpInterval();
    }"
17187,setJitter,"    public void setJitter(long jitter) {
        monitor.setJitter(jitter);
    }"
17188,getJitter,"    public long getJitter() {
        return monitor.getJitter();
    }"
17192,notifyCloseListeners,"    private void notifyCloseListeners() {
        for(ActionListener listener : closeListeners) {
            listener.actionPerformed(new ActionEvent(this, 0, """"));"
17193,addCloseListener,"    public void addCloseListener(ActionListener listener) {
        closeListeners.add(listener);
        ok.addActionListener(listener);
    }"
17195,hasPrevious,"    public boolean hasPrevious() {
        if(sendLive.isSelected()) { return false; }
        final int size = reportModel.getSize();
        final int selectedIndex = reportList.getSelectedIndex();
        if(selectedIndex==-1) { return size>0; }
        return reportList.getSelectedIndex()>0;
    }"
17196,hasNext,"    public boolean hasNext() {
        if(sendLive.isSelected()) { return false; }
        final int size = reportModel.getSize();
        final int selectedIndex = reportList.getSelectedIndex();
        if(selectedIndex==-1) { return size>0; }
        return size > selectedIndex+1;
    }"
17197,previousReport,"    public void previousReport() {
        final int size = reportModel.getSize();
        if(size==0) { return; }

        final int currentIndex = reportList.getSelectedIndex();
        if(currentIndex>=0) {"
17198,nextReport,"    public void nextReport() {
        final int size = reportModel.getSize();
        if(size==0) { return; }

        final int currentIndex = reportList.getSelectedIndex();
        if(currentIndex>=0) {"
17199,toString,"        public String toString() {
            return label;
        }"
17201,relayStats,"    private void relayStats(Report report) {
        for(ReportSelectionListener listener : listeners) {
            listener.reportWasSelected(this, report.time, report.type, report.data);
        }"
17202,statsReported,"    public synchronized void statsReported(String type, Map<Stack,StatisticAdder> stats) {
        if(canAccept(type, stats)) {
            final Date date = new Date();"
17204,actionPerformed,"            public void actionPerformed(ActionEvent e) {
                final boolean manualMode = ! sendLive.isSelected();
                sendNow.setEnabled(manualMode);
                fullLabel.setEnabled(manualMode);
                ignoreIncoming.setEnabled(manualMode);
                dropOldest.setEnabled(manualMode);
            }"
17205,mouseClicked,"            public void mouseClicked(MouseEvent e) {
                if( ! sendNow.isSelected() && e.getClickCount()==2) {
                    int index = reportList.locationToIndex(e.getPoint());"
17206,actionPerformed,"            public void actionPerformed(ActionEvent e) {
                final Report selected = (Report)reportList.getSelectedValue();
                if(selected!=null) {
                    relayStats(selected);"
17207,append,"        @Override public PrintStream append(char c) { return this; }    }
}"
17208,append,"        @Override public PrintStream append(CharSequence csq, int start, int end) { return this; }
        @Override public PrintStream append(char c) { return this; }    }
}"
17209,append,"        @Override public PrintStream append(CharSequence csq) { return this; }
        @Override public PrintStream append(CharSequence csq, int start, int end) { return this; }
        @Override public PrintStream append(char c) { return this; }    }"
17210,format,"        @Override public PrintStream format(Locale l, String format, Object... args) { return this; }
        @Override public PrintStream append(CharSequence csq) { return this; }
        @Override public PrintStream append(CharSequence csq, int start, int end) { return this; }"
17211,format,"        @Override public PrintStream format(String format, Object... args) { return this; }
        @Override public PrintStream format(Locale l, String format, Object... args) { return this; }
        @Override public PrintStream append(CharSequence csq) { return this; }"
17212,printf,"        @Override public PrintStream printf(Locale l, String format, Object... args) { return this; }
        @Override public PrintStream format(String format, Object... args) { return this; }
        @Override public PrintStream format(Locale l, String format, Object... args) { return this; }"
17213,printf,"        @Override public PrintStream printf(String format, Object... args) { return this; }
        @Override public PrintStream printf(Locale l, String format, Object... args) { return this; }
        @Override public PrintStream format(String format, Object... args) { return this; }"
17214,println,"        @Override public void println(Object x) { }
        @Override public PrintStream printf(String format, Object... args) { return this; }"
17215,println,"        @Override public void println(String x) { }
        @Override public void println(Object x) { }"
17216,println,"        @Override public void println(char[] x) { }
        @Override public void println(String x) { }"
17217,println,"        @Override public void println(double x) { }
        @Override public void println(char[] x) { }"
17218,println,"        @Override public void println(float x) { }
        @Override public void println(double x) { }"
17219,println,"        @Override public void println(long x) { }
        @Override public void println(float x) { }"
17220,println,"        @Override public void println(int x) { }
        @Override public void println(long x) { }"
17221,println,"        @Override public void println(char x) { }
        @Override public void println(int x) { }"
17222,println,"        @Override public void println(boolean x) { }
        @Override public void println(char x) { }"
17223,println,"        @Override public void println() { }
        @Override public void println(boolean x) { }"
17224,print,"        @Override public void print(Object obj) { }
        @Override public void println() { }"
17225,print,"        @Override public void print(String s) { }
        @Override public void print(Object obj) { }"
17226,print,"        @Override public void print(char[] s) { }
        @Override public void print(String s) { }"
17227,print,"        @Override public void print(double d) { }
        @Override public void print(char[] s) { }"
17228,print,"        @Override public void print(float f) { }
        @Override public void print(double d) { }"
17229,print,"        @Override public void print(long l) { }
        @Override public void print(float f) { }"
17230,print,"        @Override public void print(int i) { }
        @Override public void print(long l) { }"
17231,print,"        @Override public void print(char c) { }
        @Override public void print(int i) { }"
17232,print,"        @Override public void print(boolean b){ }
"
17233,close,"        @Override public void close() { }
        @Override public void print(boolean b){ }"
17234,flush,"        @Override public void flush() { }
        @Override public void close() { }"
17235,write,"    public static final OutputStream NULL_OUTPUT_STREAM = new OutputStream() { @Override public void write(int b) { } };
    public static final PrintStream NULL_PRINT_STREAM = new NullPrintStream();"
17236,getCPUReporter,"    public ValueReporter<CPUStats> getCPUReporter() {
        return cpuProbe.getReporter();
    }"
17237,getFileIOReporter,"    public ValueReporter<IODetailAdder> getFileIOReporter() {
        return fileIOProbe.getReporter();
    }"
17238,getDatagramIOReporter,"    public ValueReporter<IODetailAdder> getDatagramIOReporter() {
        return datagramIOProbe.getReporter();
    }"
17239,getSocketIOReporter,"    public ValueReporter<IODetailAdder> getSocketIOReporter() {
        return socketIOProbe.getReporter();
    }"
17240,getUnclosedReporter,"    public ValueReporter<UnclosedStats> getUnclosedReporter() {
        return unclosedSocketProbe.getReporter();
    }"
17241,isUsingIoTrace,"    public boolean isUsingIoTrace() {
        return socketIOProbe.isAttached() || fileIOProbe.isAttached();
    }"
17244,initialize,"    public void initialize() throws Exception {
        initialize(new Configuration());
    }"
17245,setOutput,"    public void setOutput(String key, PrintStream value) {
        sharedServices.putNamedOutput(key, value);
    }"
17246,getInstance,"    public static ProbeManager getInstance() { return INSTANCE; }

    private ProbeManager() { }"
17247,run,"                public void run() {
                    for(Runnable task : shutdownHooks) {
                        try {"
17248,installShutdownHook,"        public void installShutdownHook() {
            final Thread shutdownThread = new Thread() {
                @Override
                public void run() {
                    for(Runnable task : shutdownHooks) {"
17249,putNamedOutput,"        public void putNamedOutput(String key, PrintStream value) {
            namedOutput.put(key, value);
        }"
17250,getNamedOutput,"        public PrintStream getNamedOutput(String name) {
            return namedOutput.get(name);
        }"
17251,getNamedOutput,"        public Map<String, PrintStream> getNamedOutput() { return namedOutput; }

        public PrintStream getNamedOutput(String name) {"
17252,getShutdownHooks,"        public List<Runnable> getShutdownHooks() { return shutdownHooks; }
        public Map<String, PrintStream> getNamedOutput() { return namedOutput; }
"
17253,getTimer,"        public Timer getTimer() { return timer; }
        public List<Runnable> getShutdownHooks() { return shutdownHooks; }
        public Map<String, PrintStream> getNamedOutput() { return namedOutput; }"
17254,isShutdownHookEnabled,"    public boolean isShutdownHookEnabled(Runnable task) {
        final List<Runnable> shutdownHooks = services.getShutdownHooks();
        return shutdownHooks.contains(task);
    }"
17255,removeShutdownHook,"    public boolean removeShutdownHook(Runnable task) {
        final List<Runnable> shutdownHooks = services.getShutdownHooks();
        if( ! shutdownHooks.contains(task)) { throw new IllegalStateException(""shutdown hook was not enabled: "" + task); }
        return shutdownHooks.remove(task);
    }"
17256,addShutdownHook,"    public void addShutdownHook(Runnable task) {
        final List<Runnable> shutdownHooks = services.getShutdownHooks();
        if(shutdownHooks.contains(task)) { throw new IllegalStateException(""shutdown hook already enabled: "" + task); }
        shutdownHooks.add(task);
    }"
17257,getTimer,"    protected Timer getTimer() {
        return services.getTimer();
    }"
17260,getOutput,"    protected PrintStream getOutput(Properties p, String key, PrintStream defaultOut) throws Exception {
        return System.out;
    }"
17261,installMBean,"    protected static void installMBean(String name, Object impl, Class type) throws Exception {
        final ObjectName nameObj = new ObjectName(name);
        StandardMBean standardMBean = new StandardMBean(impl, type);
        ManagementFactory.getPlatformMBeanServer().registerMBean(standardMBean, nameObj);
    }"
17262,getMBeanName,"    protected static String getMBeanName(Properties p, String key, Class clazz) {
        String mbeanName = p.getProperty(key);
        if(mbeanName==null) {
            final String packageName = clazz.getPackage().getName();
            final String className = clazz.getSimpleName();"
17263,getMBeanName,"    protected static String getMBeanName(Configuration p, Class clazz) {
        final String packageName = clazz.getPackage().getName();
        final String className = clazz.getSimpleName();
        return p.getProperty(""mbean.name"", packageName + "":type="" + className);
    }"
17264,getMBeanName,"    protected static String getMBeanName(Configuration p) {
        return p.getProperty(""mean.name"");
    }"
17265,getList,"    protected static String[] getList(Properties p, String key) {
        final String stringValue = p.getProperty(key);
        if(stringValue==null || stringValue.isEmpty()) { return new String[0]; }
        final String[] out = stringValue.split("","");
        for(int i=0;i<out.length;i++) {
            out[i] = out[i].trim();
        }"
17266,getNumber,"    protected static Long getNumber(Properties p, String key) {
        final String stringValue = p.getProperty(key);
        return stringValue==null ? null : Long.parseLong(stringValue);
    }"
17267,getNumber,"    protected static long getNumber(Properties p, String key, long defaultValue) {
        return Long.parseLong(p.getProperty(key, Long.toString(defaultValue)));
    }"
17268,isTrue,"    protected static boolean isTrue(Properties p, String key, boolean defaultValue) {
        return ""true"".equalsIgnoreCase(p.getProperty(key, Boolean.toString(defaultValue)));
    }"
17269,getReporter,"    public abstract ValueReporter getReporter();
"
17270,destroy,"    public void destroy() throws Exception { }
    public abstract ValueReporter getReporter();"
17271,initialize,"    public abstract void initialize(Configuration cfg) throws Exception;
    public void destroy() throws Exception { }"
17272,matches,"    public boolean matches(String path) {
        return pattern.matcher(path).matches();
    }"
17273,debug,"    public static void debug(String... message) {
        if(verbose) {
            print(""GUMSHOE:"", message);"
17274,error,"    public static void error(String... message) {
        print(""GUMSHOE ERROR!"", message);
    }"
17275,error,"    public static void error(Throwable t, String... message) {
        print(""GUMSHOE ERROR!"", message);
        t.printStackTrace();
    }"
17276,print,"    public static void print(String before, String... message) {
        final StringBuilder msg = new StringBuilder();
        msg.append(before);
        for(String part : message) {
            msg.append("" "").append(part);
        }"
17277,configure,"    public static void configure(Properties p) {
        setVerbose(Boolean.valueOf(p.getProperty(""gumshoe.verbose"", ""false"")));
    }"
17278,configure,"    public static void configure(Configuration config) {
        setVerbose(config.isTrue(""gumshoe.verbose"", false));
    }"
17279,setVerbose,"    public static void setVerbose(boolean value) { verbose = value; }
    public static void configure(Configuration config) {
        setVerbose(config.isTrue(""gumshoe.verbose"", false));"
17280,addCloseListener,"    public void addCloseListener(ActionListener listener) {
        apply.addActionListener(listener);
    }"
17282,addActionListener,"    public void addActionListener(ActionListener listener) {
        apply.addActionListener(listener);
    }"
17283,matches,"    public boolean matches(SocketAddress address) {
        for(AddressMatcher accept : acceptList) {
            if(accept.matches(address)) {
                return true;
            }"
17284,matches,"    public boolean matches(byte[] addressBytes, int port) {
        for(AddressMatcher accept : acceptList) {
            if(accept.matches(addressBytes, port)) {
                return true;
            }"
17285,filter,"    public int filter(StackTraceElement[] buffer, int size) {
        for(int i=0;i<size;i++) {
            final StackTraceElement orig = buffer[i];
            buffer[i] = level.modify(orig);"
17286,modify,"        public abstract StackTraceElement modify(StackTraceElement orig);
    }"
17287,modify,"            public StackTraceElement modify(StackTraceElement orig) {
                final String fullName = orig.getClassName();
                final int index = fullName.lastIndexOf('.');
                final String modifiedName = index>=0 ? fullName.substring(0, index-1) : fullName;
                return new StackTraceElement(modifiedName, """", null, -1);
            }"
17288,modify,"            public StackTraceElement modify(StackTraceElement orig) {
                final String fullName = orig.getClassName();
                final int index = fullName.indexOf('$');
                final String modifiedName = index>=0 ? fullName.substring(0, index-1) : fullName;
                return new StackTraceElement(modifiedName, """", orig.getFileName(), -1);
            }"
17289,modify,"            public StackTraceElement modify(StackTraceElement orig) {
                return new StackTraceElement(orig.getClassName(), """", orig.getFileName(), -1);
            }"
17290,modify,"            public StackTraceElement modify(StackTraceElement orig) {
                return new StackTraceElement(orig.getClassName(), orig.getMethodName(), orig.getFileName(), -1);
            }"
17291,launchTargetApp,"    private static void launchTargetApp(String[] args) throws Throwable {
        final String mainClassName = args[0];
        final Class mainClass = Class.forName(mainClassName);
        final Method mainMethod = mainClass.getDeclaredMethod(""main"", String[].class);

        final String[] remainingArgs = new String[args.length-1];
        if(args.length>1) {
            System.arraycopy(args, 1, remainingArgs, 0, args.length-1);"
17293,main,"    public static void main(String[] args) throws Throwable {
        final boolean hasTargetApp = args.length>0;
        if(hasTargetApp) {
            launchTargetApp(args);
        }"
17294,register,"        protected SelectionKey register(AbstractSelectableChannel ch, int ops, Object att) {
            AbstractSelectableChannel unwrapped = IoTraceSelectorProvider.this.unwrap(ch);
            return reflectRegister(delegate, unwrapped, ops, att);
        }"
17295,implCloseSelector,"        protected void implCloseSelector() throws IOException {
            reflectCloseSelector(delegate);
        }"
17297,select,"        public int select() throws IOException { return delegate.select(); }
        public Selector wakeup() { return delegate.wakeup(); }
"
17298,select,"        public int select(long timeout) throws IOException { return delegate.select(timeout); }
        public int select() throws IOException { return delegate.select(); }
        public Selector wakeup() { return delegate.wakeup(); }"
17299,selectNow,"        public int selectNow() throws IOException { return delegate.selectNow(); }
        public int select(long timeout) throws IOException { return delegate.select(timeout); }
        public int select() throws IOException { return delegate.select(); }"
17300,selectedKeys,"        public Set<SelectionKey> selectedKeys() { return delegate.selectedKeys(); }
        public int selectNow() throws IOException { return delegate.selectNow(); }
        public int select(long timeout) throws IOException { return delegate.select(timeout); }"
17301,toString,"        public String toString() { return delegate.toString(); }
        public Set<SelectionKey> selectedKeys() { return delegate.selectedKeys(); }
        public int selectNow() throws IOException { return delegate.selectNow(); }"
17302,keys,"        public Set<SelectionKey> keys() { return delegate.keys(); }
        public String toString() { return delegate.toString(); }
        public Set<SelectionKey> selectedKeys() { return delegate.selectedKeys(); }"
17303,equals,"        public boolean equals(Object obj) { return delegate.equals(obj); }
        public Set<SelectionKey> keys() { return delegate.keys(); }
        public String toString() { return delegate.toString(); }"
17304,hashCode,"        public int hashCode() { return delegate.hashCode(); }
        public boolean equals(Object obj) { return delegate.equals(obj); }
        public Set<SelectionKey> keys() { return delegate.keys(); }"
17305,unwrap,"        public AbstractSelector unwrap() { return delegate; }

        public int hashCode() { return delegate.hashCode(); }"
17306,write,"        public long write(ByteBuffer[] srcs, int offset, int length) throws IOException {
            final Object context = hasWriteTrace() ? null : IoTraceHandler.socketWriteBegin();
            final long bytes = delegate.write(srcs, offset, length);
            if(bytes>0) {
                IoTraceHandler.socketWriteEnd(context, getRemoteAddress(), bytes);
            }"
17307,write,"        public int write(ByteBuffer src) throws IOException {
            final Object context = hasWriteTrace() ? null : IoTraceHandler.socketWriteBegin();
            final int bytes = delegate.write(src);
            if(bytes>0) {
                IoTraceHandler.socketWriteEnd(context, getRemoteAddress(), bytes);
            }"
17308,read,"        public long read(ByteBuffer[] dsts, int offset, int length) throws IOException {
            final Object context = hasReadTrace() ? null : IoTraceHandler.socketReadBegin();
            final long bytes = delegate.read(dsts, offset, length);
            if(bytes>0) {
                IoTraceHandler.socketReadEnd(context, getRemoteAddress(), bytes);
            }"
17309,read,"        public int read(ByteBuffer dst) throws IOException {
            final Object context = hasReadTrace() ? null : IoTraceHandler.socketReadBegin();
            final int bytes = delegate.read(dst);
            if(bytes>0) {
                IoTraceHandler.socketReadEnd(context, getRemoteAddress(), bytes);
            }"
17312,socket,"        public Socket socket() {
            return delegate.socket();
        }"
17313,shutdownOutput,"        public SocketChannel shutdownOutput() throws IOException {
            return wrap(delegate.shutdownOutput());
        }"
17314,shutdownInput,"        public SocketChannel shutdownInput() throws IOException {
            return wrap(delegate.shutdownInput());
        }"
17315,setOption,"        public <T> SocketChannel setOption(SocketOption<T> name, T value) throws IOException {
            return wrap(delegate.setOption(name, value));
        }"
17316,bind,"        public SocketChannel bind(SocketAddress local) throws IOException {
            return wrap(delegate.bind(local));
        }"
17317,implConfigureBlocking,"        protected void implConfigureBlocking(boolean block) throws IOException {
            reflectConfigureBlocking(delegate, block);
        }"
17318,implCloseSelectableChannel,"        protected void implCloseSelectableChannel() throws IOException {
            reflectCloseSelectableChannel(delegate);
        }"
17320,finishConnect,"        public boolean finishConnect() throws IOException { return delegate.finishConnect(); }
        public SocketAddress getRemoteAddress() throws IOException { return delegate.getRemoteAddress(); }
"
17321,connect,"        public boolean connect(SocketAddress remote) throws IOException { return delegate.connect(remote); }
        public boolean finishConnect() throws IOException { return delegate.finishConnect(); }
        public SocketAddress getRemoteAddress() throws IOException { return delegate.getRemoteAddress(); }"
17322,isConnectionPending,"        public boolean isConnectionPending() { return delegate.isConnectionPending(); }
        public boolean connect(SocketAddress remote) throws IOException { return delegate.connect(remote); }
        public boolean finishConnect() throws IOException { return delegate.finishConnect(); }"
17323,isConnected,"        public boolean isConnected() { return delegate.isConnected(); }
        public boolean isConnectionPending() { return delegate.isConnectionPending(); }
        public boolean connect(SocketAddress remote) throws IOException { return delegate.connect(remote); }"
17324,toString,"        public String toString() { return delegate.toString(); }
        public boolean isConnected() { return delegate.isConnected(); }
        public boolean isConnectionPending() { return delegate.isConnectionPending(); }"
17325,supportedOptions,"        public Set<SocketOption<?>> supportedOptions() { return delegate.supportedOptions(); }
        public String toString() { return delegate.toString(); }
        public boolean isConnected() { return delegate.isConnected(); }"
17326,getOption,"        public <T> T getOption(SocketOption<T> name) throws IOException { return delegate.getOption(name); }
        public Set<SocketOption<?>> supportedOptions() { return delegate.supportedOptions(); }
        public String toString() { return delegate.toString(); }"
17327,equals,"        public boolean equals(Object obj) { return delegate.equals(obj); }
        public <T> T getOption(SocketOption<T> name) throws IOException { return delegate.getOption(name); }
        public Set<SocketOption<?>> supportedOptions() { return delegate.supportedOptions(); }"
17328,getLocalAddress,"        public SocketAddress getLocalAddress() throws IOException { return delegate.getLocalAddress(); }
        public boolean equals(Object obj) { return delegate.equals(obj); }
        public <T> T getOption(SocketOption<T> name) throws IOException { return delegate.getOption(name); }"
17329,hashCode,"        public int hashCode() { return delegate.hashCode(); }
        public SocketAddress getLocalAddress() throws IOException { return delegate.getLocalAddress(); }
        public boolean equals(Object obj) { return delegate.equals(obj); }"
17331,accept,"        public SocketChannel accept() throws IOException {
            return wrap(delegate.accept());
        }"
17332,setOption,"        public <T> ServerSocketChannel setOption(SocketOption<T> name, T value) throws IOException {
            return wrap(delegate.setOption(name, value));
        }"
17333,bind,"        public ServerSocketChannel bind(SocketAddress local, int backlog)
                throws IOException {
            return delegate.bind(local, backlog);"
17336,socket,"        public ServerSocket socket() {
            return delegate.socket();
        }"
17338,supportedOptions,"        public Set<SocketOption<?>> supportedOptions() { return delegate.supportedOptions(); }
        public String toString() { return delegate.toString(); }
"
17344,write,"        public long write(ByteBuffer[] srcs, int offset, int length) throws IOException {
            final Object context = IoTraceHandler.datagramWriteBegin();
            final long bytes = delegate.write(srcs, offset, length);
            if(bytes>0) {
                IoTraceHandler.datagramWriteEnd(context, getRemoteAddress(), bytes);
            }"
17345,write,"        public int write(ByteBuffer src) throws IOException {
            final Object context = IoTraceHandler.datagramWriteBegin();
            final int bytes = delegate.write(src);
            if(bytes>0) {
                IoTraceHandler.datagramWriteEnd(context, getRemoteAddress(), bytes);
            }"
17346,read,"        public long read(ByteBuffer[] dsts, int offset, int length) throws IOException {
            final Object context = IoTraceHandler.datagramReadBegin();
            final long bytes = delegate.read(dsts, offset, length);
            if(bytes>0) {
                IoTraceHandler.datagramReadEnd(context, getRemoteAddress(), bytes);
            }"
17347,read,"        public int read(ByteBuffer dst) throws IOException {
            final Object context = IoTraceHandler.datagramReadBegin();
            final int bytes = delegate.read(dst);
            if(bytes>0) {
                IoTraceHandler.datagramReadEnd(context, getRemoteAddress(), bytes);
            }"
17348,send,"        public int send(ByteBuffer src, SocketAddress address) throws IOException {
            final Object context = IoTraceHandler.datagramWriteBegin();
            final int bytes = delegate.send(src, address);
            if(bytes>0) {
                IoTraceHandler.datagramWriteEnd(context, address, bytes);
            }"
17350,disconnect,"        public DatagramChannel disconnect() throws IOException {
            return wrap(delegate.disconnect());
        }"
17351,connect,"        public DatagramChannel connect(SocketAddress remote) throws IOException {
            return wrap(delegate.connect(remote));
        }"
17352,setOption,"        public <T> DatagramChannel setOption(SocketOption<T> name, T value) throws IOException {
            return wrap(delegate.setOption(name, value));
        }"
17353,bind,"        public DatagramChannel bind(SocketAddress local) throws IOException {
            return wrap(delegate.bind(local));
        }"
17354,socket,"        public DatagramSocket socket() {
            return wrap(delegate.socket());
        }"
17358,toString,"        public String toString() { return delegate.toString(); }
        public SocketAddress getRemoteAddress() throws IOException { return delegate.getRemoteAddress(); }
"
17359,isConnected,"        public boolean isConnected() { return delegate.isConnected(); }
        public String toString() { return delegate.toString(); }
        public SocketAddress getRemoteAddress() throws IOException { return delegate.getRemoteAddress(); }"
17360,join,"        public MembershipKey join(InetAddress group, NetworkInterface interf, InetAddress source) throws IOException { return delegate.join(group, interf, source); }
        public boolean isConnected() { return delegate.isConnected(); }
        public String toString() { return delegate.toString(); }"
17361,join,"        public MembershipKey join(InetAddress group, NetworkInterface interf) throws IOException { return delegate.join(group, interf); }
        public MembershipKey join(InetAddress group, NetworkInterface interf, InetAddress source) throws IOException { return delegate.join(group, interf, source); }
        public boolean isConnected() { return delegate.isConnected(); }"
17362,supportedOptions,"        public Set<SocketOption<?>> supportedOptions() { return delegate.supportedOptions(); }
        public MembershipKey join(InetAddress group, NetworkInterface interf) throws IOException { return delegate.join(group, interf); }
        public MembershipKey join(InetAddress group, NetworkInterface interf, InetAddress source) throws IOException { return delegate.join(group, interf, source); }"
17363,getOption,"        public <T> T getOption(SocketOption<T> name) throws IOException { return delegate.getOption(name); }
        public Set<SocketOption<?>> supportedOptions() { return delegate.supportedOptions(); }
        public MembershipKey join(InetAddress group, NetworkInterface interf) throws IOException { return delegate.join(group, interf); }"
17368,reflectRegister,"    private SelectionKey reflectRegister(AbstractSelector target, AbstractSelectableChannel ch, int ops, Object att) {
        try {
            return (SelectionKey) registerMethod.invoke(target, ch, ops, att);"
17369,reflectConfigureBlocking,"    private void reflectConfigureBlocking(AbstractSelectableChannel target, boolean arg) throws IOException {
        try {
            configureBlockingMethod.invoke(target, arg);"
17370,reflectCloseSelector,"    private void reflectCloseSelector(AbstractSelector target) throws IOException {
        try {
            closeSelectorMethod.invoke(target);"
17371,reflectCloseSelectableChannel,"    private void reflectCloseSelectableChannel(AbstractSelectableChannel target) throws IOException {
        try {
            closeChannelMethod.invoke(target);"
17374,openSocketChannel,"    public SocketChannel openSocketChannel() throws IOException {
        return wrap(delegate.openSocketChannel());
    }"
17375,openServerSocketChannel,"    public ServerSocketChannel openServerSocketChannel() throws IOException {
        return wrap(delegate.openServerSocketChannel());
    }"
17376,openDatagramChannel,"    public DatagramChannel openDatagramChannel(ProtocolFamily family) throws IOException {
        return wrap(delegate.openDatagramChannel(family));
    }"
17377,openDatagramChannel,"    public DatagramChannel openDatagramChannel() throws IOException {
        return wrap(delegate.openDatagramChannel());
    }"
17378,openSelector,"    public AbstractSelector openSelector() throws IOException { return wrap(delegate.openSelector()); }

    @Override"
17379,unwrap,"    private <T> T unwrap(T orig) {
        return (T) (orig instanceof Wrapper ? ((Wrapper)orig).unwrap() : orig);
    }"
17380,wrap,"    private DatagramSocket wrap(DatagramSocket orig) {
        return orig;
    }"
17381,wrap,"    private SocketChannel wrap(SocketChannel orig) {
        return (usePlainSocketChannel || orig instanceof Wrapper) ? orig : new SocketChannelWrapper(orig);
    }"
17382,wrap,"    private ServerSocketChannel wrap(ServerSocketChannel orig) {
        return (usePlainServerSocketChannel || orig instanceof Wrapper) ? orig : new ServerSocketChannelWrapper(orig);
    }"
17383,wrap,"    private DatagramChannel wrap(DatagramChannel orig) {
        return(usePlainDatagramChannel || orig instanceof Wrapper) ? orig : new DatagramChannelWrapper(orig);
    }"
17384,wrap,"    private AbstractSelector wrap(AbstractSelector orig) {
        return orig instanceof Wrapper ? orig : new SelectorWrapper(orig);
    }"
17386,openPipe,"    public Pipe openPipe() throws IOException { return delegate.openPipe(); }
    @Override
    public String toString() { return delegate.toString(); }"
17387,equals,"    public boolean equals(Object obj) { return delegate.equals(obj); }
    @Override
    public Pipe openPipe() throws IOException { return delegate.openPipe(); }"
17388,hashCode,"    public int hashCode() { return delegate.hashCode(); }
    @Override
    public boolean equals(Object obj) { return delegate.equals(obj); }"
17389,getProviderAsService,"    private static SelectorProvider getProviderAsService() {
        ServiceLoader<SelectorProvider> sl =
            ServiceLoader.load(SelectorProvider.class,
                               ClassLoader.getSystemClassLoader());
        Iterator<SelectorProvider> i = sl.iterator();"
17390,isDatagramTraceEnabled,"    public static boolean isDatagramTraceEnabled() {
        return usePlainDatagramChannel;
    }"
17391,setDatagramTraceEnabled,"    public static void setDatagramTraceEnabled(boolean enabled) {
        usePlainDatagramChannel = false;
    }"
17392,isSocketTraceEnabled,"    public static boolean isSocketTraceEnabled() {
        if(usePlainServerSocketChannel!=usePlainSocketChannel) {
            throw new IllegalStateException(""IoTraceSelectorProvider socket and ServerSocket are inconsistent"");
        }"
17393,setSocketTraceEnabled,"    public static void setSocketTraceEnabled(boolean enabled) {
        usePlainServerSocketChannel = false;
        usePlainSocketChannel = false;
    }"
17394,datagramWriteEnd,"    public void datagramWriteEnd(Object context, SocketAddress address, long bytesWritten) {
        if( ! (context instanceof IdentityHashMap)) { return; }
        final Map mementoByDelegate = (Map)context;
        for(IoTraceListener delegate : datagramDelegates) {
            final Object memento = mementoByDelegate.get(delegate);"
17395,datagramWriteBegin,"    public Object datagramWriteBegin() {
        final Map<IoTraceListener,Object> mementoByDelegate = new IdentityHashMap<>();
        for(IoTraceListener delegate : datagramDelegates) {
            final Object memento = delegate.datagramWriteBegin();
            if(memento!=null) {"
17396,datagramReadEnd,"    public void datagramReadEnd(Object context, SocketAddress address, long bytesRead) {
        if( ! (context instanceof IdentityHashMap)) { return; }
        final Map mementoByDelegate = (Map)context;
        for(IoTraceListener delegate : datagramDelegates) {
            final Object memento = mementoByDelegate.get(delegate);"
17397,datagramReadBegin,"    public Object datagramReadBegin() {
        final Map<IoTraceListener,Object> mementoByDelegate = new IdentityHashMap<>();
        for(IoTraceListener delegate : datagramDelegates) {
            final Object memento = delegate.datagramReadBegin();
            if(memento!=null) {"
17398,fileWriteEnd,"    public void fileWriteEnd(Object context, long bytesWritten) {
        if( ! (context instanceof IdentityHashMap)) { return; }
        final Map mementoByDelegate = (Map)context;
        for(IoTraceListener delegate : fileDelegates) {
            final Object memento = mementoByDelegate.get(delegate);"
17399,fileWriteBegin,"    public Object fileWriteBegin(String path) {
        final Map<IoTraceListener,Object> mementoByDelegate = new IdentityHashMap<>();
        for(IoTraceListener delegate : fileDelegates) {
            final Object memento = delegate.fileWriteBegin(path);
            if(memento!=null) {"
17400,fileReadEnd,"    public void fileReadEnd(Object context, long bytesRead) {
        if( ! (context instanceof IdentityHashMap)) { return; }
        final Map mementoByDelegate = (Map)context;
        for(IoTraceListener delegate : fileDelegates) {
            final Object memento = mementoByDelegate.get(delegate);"
17401,fileReadBegin,"    public Object fileReadBegin(String path) {
        final Map<IoTraceListener,Object> mementoByDelegate = new IdentityHashMap<>();
        for(IoTraceListener delegate : fileDelegates) {
            final Object memento = delegate.fileReadBegin(path);
            if(memento!=null) {"
17402,socketWriteEnd,"    public void socketWriteEnd(Object context, SocketAddress address, long bytesWritten) {
        if( ! (context instanceof IdentityHashMap)) { return; }
        final Map mementoByDelegate = (Map)context;
        for(IoTraceListener delegate : socketDelegates) {
            final Object memento = mementoByDelegate.get(delegate);"
17403,socketReadEnd,"    public void socketReadEnd(Object context, SocketAddress address, long bytesRead) {
        if( ! (context instanceof IdentityHashMap)) { return; }
        final Map mementoByDelegate = (Map)context;
        for(IoTraceListener delegate : socketDelegates) {
            final Object memento = mementoByDelegate.get(delegate);"
17404,socketWriteEnd,"    public void socketWriteEnd(Object context, InetAddress address, int port, long bytesWritten) {
        if( ! (context instanceof IdentityHashMap)) { return; }
        final Map mementoByDelegate = (Map)context;
        for(IoTraceListener delegate : socketDelegates) {
            final Object memento = mementoByDelegate.get(delegate);"
17405,socketWriteBegin,"    public Object socketWriteBegin() {
        final Map<IoTraceListener,Object> mementoByDelegate = new IdentityHashMap<>();
        for(IoTraceListener delegate : socketDelegates) {
            final Object memento = delegate.socketWriteBegin();
            if(memento!=null) {"
17406,socketReadEnd,"    public void socketReadEnd(Object context, InetAddress address, int port, int timeout, long bytesRead) {
        if( ! (context instanceof IdentityHashMap)) { return; }
        final Map mementoByDelegate = (Map)context;
        for(IoTraceListener delegate : socketDelegates) {
            final Object memento = mementoByDelegate.get(delegate);"
17407,socketReadBegin,"    public Object socketReadBegin() {
        final Map<IoTraceListener,Object> mementoByDelegate = new IdentityHashMap<>();
        for(IoTraceListener delegate : socketDelegates) {
            final Object memento = delegate.socketReadBegin();
            if(memento!=null) {"
17408,removeDelegate,"    public void removeDelegate(IoTraceListener delegate) {
        socketDelegates.remove(delegate);
        datagramDelegates.remove(delegate);
        fileDelegates.remove(delegate);
    }"
17409,addDelegate,"    public void addDelegate(IoTraceListener delegate) {
        boolean hint = false;
        if(delegate instanceof SocketListener) {
            socketDelegates.add((SocketListener) delegate);
            hint = true;
        }
        if(delegate instanceof DatagramListener) {"
17410,fileWriteEnd,"        public void fileWriteEnd(Object context, long bytesWritten);
"
17411,fileWriteBegin,"        public Object fileWriteBegin(String path);
        public void fileWriteEnd(Object context, long bytesWritten);"
17412,fileReadEnd,"        public void fileReadEnd(Object context, long bytesRead);
        public Object fileWriteBegin(String path);"
17413,fileReadBegin,"        public Object fileReadBegin(String path);
        public void fileReadEnd(Object context, long bytesRead);"
17414,datagramWriteEnd,"        public void datagramWriteEnd(Object context, SocketAddress address, long bytesWritten);
"
17415,datagramWriteBegin,"        public Object datagramWriteBegin();
        public void datagramWriteEnd(Object context, SocketAddress address, long bytesWritten);"
17416,datagramReadEnd,"        public void datagramReadEnd(Object context, SocketAddress address, long bytesRead);
        public Object datagramWriteBegin();"
17417,datagramReadBegin,"        public Object datagramReadBegin();
        public void datagramReadEnd(Object context, SocketAddress address, long bytesRead);"
17418,socketWriteEnd,"        public void socketWriteEnd(Object context, SocketAddress address, long bytesWritten);
"
17419,socketReadEnd,"        public void socketReadEnd(Object context, SocketAddress address, long bytesRead);
        public void socketWriteEnd(Object context, SocketAddress address, long bytesWritten);"
17420,socketWriteEnd,"        public void socketWriteEnd(Object context, InetAddress address, int port, long bytesWritten);
"
17421,socketWriteBegin,"        public Object socketWriteBegin();
        public void socketWriteEnd(Object context, InetAddress address, int port, long bytesWritten);"
17422,socketReadEnd,"        public void socketReadEnd(Object context, InetAddress address, int port, int timeout, long bytesRead);
        public Object socketWriteBegin();"
17423,socketReadBegin,"        public Object socketReadBegin();
        public void socketReadEnd(Object context, InetAddress address, int port, int timeout, long bytesRead);"
17424,fileWriteEnd,"    public static void fileWriteEnd(Object context, long bytesWritten) {
        DELEGATE.fileWriteEnd(context, bytesWritten);
    }"
17425,fileWriteBegin,"    public static Object fileWriteBegin(String path) {
        return DELEGATE.fileWriteBegin(path);
    }"
17426,fileReadEnd,"    public static void fileReadEnd(Object context, long bytesRead) {
        DELEGATE.fileReadEnd(context, bytesRead);
    }"
17427,fileReadBegin,"    public static Object fileReadBegin(String path) {
        return DELEGATE.fileReadBegin(path);
    }"
17428,datagramWriteEnd,"    public static void datagramWriteEnd(Object context, SocketAddress address,
            long bytesWritten) {
        DELEGATE.datagramWriteEnd(context, address, bytesWritten);"
17429,datagramWriteBegin,"    public static Object datagramWriteBegin() {
        return DELEGATE.datagramWriteBegin();
    }"
17430,datagramReadEnd,"    public static void datagramReadEnd(Object context, SocketAddress address,
            long bytesRead) {
        DELEGATE.datagramReadEnd(context, address, bytesRead);"
17431,datagramReadBegin,"    public static Object datagramReadBegin() {
        return DELEGATE.datagramReadBegin();
    }"
17432,socketWriteEnd,"    public static void socketWriteEnd(Object context, SocketAddress address,
            long bytesWritten) {
        DELEGATE.socketWriteEnd(context, address, bytesWritten);"
17433,socketReadEnd,"    public static void socketReadEnd(Object context, SocketAddress address,
            long bytesRead) {
        DELEGATE.socketReadEnd(context, address, bytesRead);"
17434,socketWriteEnd,"    public static void socketWriteEnd(Object context, InetAddress address, int port,
            long bytesWritten) {
        DELEGATE.socketWriteEnd(context, address, port, bytesWritten);"
17435,socketWriteBegin,"    public static Object socketWriteBegin() {
        return DELEGATE.socketWriteBegin();
    }"
17436,socketReadEnd,"    public static void socketReadEnd(Object context, InetAddress address, int port,
            int timeout, long bytesRead) {
        DELEGATE.socketReadEnd(context, address, port, timeout, bytesRead);"
17437,socketReadBegin,"    public static Object socketReadBegin() {
        return DELEGATE.socketReadBegin();
    }"
17438,getTrace,"    public static IoTraceListener getTrace() {
        return DELEGATE;
    }"
17439,removeTrace,"    public static void removeTrace(IoTraceListener delegate) throws Exception {
        if(DELEGATE==delegate) {
            DELEGATE = NULL_OBJECT;"
17440,addTrace,"    public synchronized static void addTrace(IoTraceListener delegate) throws Exception {
        if(DELEGATE==NULL_OBJECT) {
            DELEGATE = delegate;"
17441,socketWriteEnd,"    public void socketWriteEnd(Object context, SocketAddress address, long bytesWritten) {
        if(context!=null && address instanceof InetSocketAddress) {
            final InetSocketAddress ipAndPort = (InetSocketAddress)address;"
17442,socketReadEnd,"    public void socketReadEnd(Object context, SocketAddress address, long bytesRead) {
        if(context!=null && address instanceof InetSocketAddress) {
            final InetSocketAddress ipAndPort = (InetSocketAddress)address;"
17443,datagramWriteEnd,"    public void datagramWriteEnd(Object context, SocketAddress address, long bytesWritten) { }
"
17444,datagramWriteBegin,"    public Object datagramWriteBegin() { return null; }
    public void datagramWriteEnd(Object context, SocketAddress address, long bytesWritten) { }
"
17445,datagramReadEnd,"    public void datagramReadEnd(Object context, SocketAddress address, long bytesRead) { }
    public Object datagramWriteBegin() { return null; }"
17446,datagramReadBegin,"    public Object datagramReadBegin() { return null; }
    public void datagramReadEnd(Object context, SocketAddress address, long bytesRead) { }
    public Object datagramWriteBegin() { return null; }"
17447,fileWriteEnd,"    public void fileWriteEnd(Object context, long bytesWritten) { }
    public Object datagramReadBegin() { return null; }"
17448,fileWriteBegin,"    public Object fileWriteBegin(String path) { return null; }
    public void fileWriteEnd(Object context, long bytesWritten) { }
    public Object datagramReadBegin() { return null; }"
17449,fileReadEnd,"    public void fileReadEnd(Object context, long bytesRead) { }
    public Object fileWriteBegin(String path) { return null; }"
17450,fileReadBegin,"    public Object fileReadBegin(String path) { return null; }
    public void fileReadEnd(Object context, long bytesRead) { }
    public Object fileWriteBegin(String path) { return null; }"
17451,socketWriteEnd,"    public void socketWriteEnd(Object context, InetAddress address, int port, long bytesWritten) { }
    public Object fileReadBegin(String path) { return null; }"
17452,socketWriteBegin,"    public Object socketWriteBegin() { return null; }
    public void socketWriteEnd(Object context, InetAddress address, int port, long bytesWritten) { }
    public Object fileReadBegin(String path) { return null; }"
17453,socketReadEnd,"    public void socketReadEnd(Object context, InetAddress address, int port, int timeout, long bytesRead) { }
    public Object socketWriteBegin() { return null; }"
17454,socketReadBegin,"    public Object socketReadBegin() { return null; }
    public void socketReadEnd(Object context, InetAddress address, int port, int timeout, long bytesRead) { }
    public Object socketWriteBegin() { return null; }"
17455,isQueueStatisticsEnabled,"    public boolean isQueueStatisticsEnabled() {
        return monitor.isQueueStatisticsEnabled();
    }"
17456,setQueueStatisticsEnabled,"    public void setQueueStatisticsEnabled(boolean enabled) {
        monitor.setQueueStatisticsEnabled(enabled);
    }"
17457,resetQueueCounters,"    public void resetQueueCounters() {
        monitor.resetQueueCounters();
    }"
17458,getQueueStats,"    public String getQueueStats() {
        return monitor.getQueueStats();
    }"
17459,getEventQueueSize,"    public int getEventQueueSize() {
        return monitor.getEventQueueSize();
    }"
17460,getHandlerPriority,"    public int getHandlerPriority() {
        return monitor.getThreadPriority();
    }"
17461,setHandlerPriority,"    public void setHandlerPriority(int priority) {
        monitor.setThreadPriority(priority);
    }"
17462,getHandlerThreadCount,"    public int getHandlerThreadCount() {
        return monitor.getThreadCount();
    }"
17463,setHandlerThreadCount,"    public void setHandlerThreadCount(int count) {
        monitor.setThreadCount(count);
    }"
17468,reset,"    public void reset() {
        getAccumulator().reset();
    }"
17469,getReport,"    public String getReport() {
        final ByteArrayOutputStream rawOut = new ByteArrayOutputStream();
        final PrintStream out = new PrintStream(rawOut);
        final ValueReporter<IODetailAdder>.StreamReporter streamer = getReporter().new StreamReporter(out);
        final Map<Stack,IODetailAdder> values = getAccumulator().getStats();
        streamer.statsReported(values);
        return rawOut.toString();
    }"
17470,isAttached,"    public boolean isAttached() {
        return monitor!=null;
    }"
17475,getReporter,"    public ValueReporter<IODetailAdder> getReporter() {
        return reporter;
    }"
17476,getAccumulator,"    public IOAccumulator getAccumulator() {
        return accumulator;
    }"
17477,createAccumulator,"    protected abstract IOAccumulator createAccumulator(StackFilter stackFilter);
"
17478,createMonitor,"    protected abstract IOMonitor createMonitor(Configuration cfg) throws Exception;
    protected abstract IOAccumulator createAccumulator(StackFilter stackFilter);"
17479,getLabel,"    public abstract String getLabel();
    protected abstract IOMonitor createMonitor(Configuration cfg) throws Exception;"
17480,run,"        public void run() {
            while(keepRunning) {
                try {
                    final IOEvent event = queue.take();"
17481,shutdown,"        public void shutdown() {
            if( ! keepRunning) throw new IllegalStateException(""consumer was not running"");
            keepRunning = false;
            interrupt();
        }"
17482,start,"        public void start() {
            super.start();
            consumers.add(EventConsumer.this);
        }"
17483,stopConsumers,"    private void stopConsumers() {
        synchronized(consumers) {
            final int count = consumers.size()-threadCount;"
17484,startConsumers,"    private void startConsumers() {
        synchronized(consumers) {
            while(consumers.size()<threadCount) {"
17485,createThreadName,"    private String createThreadName() {
        return getClass().getSimpleName() + ""-event-"" + consumerCount.incrementAndGet();
    }"
17486,getThreadPriority,"    public int getThreadPriority() {
        return threadPriority;
    }"
17487,setThreadPriority,"    public void setThreadPriority(int priority) {
        this.threadPriority = priority;
    }"
17488,getThreadCount,"    public int getThreadCount() {
        return threadCount;
    }"
17489,setThreadCount,"    public void setThreadCount(int count) {
        if(this.threadCount!=count) {
            synchronized(consumers) {"
17490,resetQueueCounters,"    public void resetQueueCounters() {
        successCounter.set(0);
        failCounter.set(0);
        maxSize.set(0);
        sumSize.set(0);
    }"
17491,isQueueStatisticsEnabled,"    public boolean isQueueStatisticsEnabled() {
        return this.queueStatsEnabled;
    }"
17492,setQueueStatisticsEnabled,"    public void setQueueStatisticsEnabled(boolean enabled) {
        this.queueStatsEnabled = enabled;
    }"
17493,getQueueStats,"    public String getQueueStats() {
        if(queueStatsEnabled) {
            final int success = successCounter.get();"
17494,getSuccessCount,"    public int getSuccessCount() {
        return successCounter.get();
    }"
17495,getFailureCount,"    public int getFailureCount() {
        return failCounter.get();
    }"
17496,updateMax,"    private void updateMax(int size) {
        while(true) {
            final int currentMax = maxSize.get();"
17497,queueEvent,"    protected void queueEvent(IOEvent operation) {
        if( ! enabled) { return; }

        final int size = queueStatsEnabled ? queue.size() : 0;

        final boolean success = queue.offer(operation);
"
17498,notifyListeners,"    private void notifyListeners(IOEvent operation) {
        for(IOListener listener : listeners) {
            try {"
17499,addListener,"    public void addListener(IOListener listener) {
        listeners.add(listener);
    }"
17500,destroyProbe,"    public void destroyProbe() throws Exception {
        IoTraceHandler.removeTrace(this);
        setThreadCount(0);
        queue = null;
    }"
17501,initializeProbe,"    public void initializeProbe() throws Exception {
        queue = new LinkedBlockingQueue<>(eventQueueSize);
        startConsumers();
        IoTraceHandler.addTrace(this);
    }"
17502,setOverflowReportInterval,"    public void setOverflowReportInterval(long queueOverflowReportInterval) {
        this.queueOverflowReportInterval = queueOverflowReportInterval;
    }"
17503,getOverflowReportInterval,"    public long getOverflowReportInterval() {
        return queueOverflowReportInterval;
    }"
17504,setEventQueueSize,"    public synchronized void setEventQueueSize(int eventQueueSize) {
        if(queue!=null) { throw new IllegalStateException(""cannot resize queue after probe has been installed""); }
        this.eventQueueSize = eventQueueSize;
    }"
17505,getEventQueueSize,"    public int getEventQueueSize() {
        return eventQueueSize;
    }"
17506,setEnabled,"    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
        if( ! enabled) {
            queue.clear();"
17508,isQueueStatisticsEnabled,"    public boolean isQueueStatisticsEnabled();
}"
17509,setQueueStatisticsEnabled,"    public void setQueueStatisticsEnabled(boolean enabled);
    public boolean isQueueStatisticsEnabled();"
17511,getQueueStats,"    public String getQueueStats();
    public void resetQueueCounters();"
17514,setHandlerPriority,"    public void setHandlerPriority(int value);
    public int getHandlerPriority();"
17516,setHandlerThreadCount,"    public void setHandlerThreadCount(int count);
    public int getHandlerThreadCount();"
17517,isShutdownReportEnabled,"    public boolean isShutdownReportEnabled();
"
17525,ioHasCompleted,"    public void ioHasCompleted(IOEvent event);
}"
17526,getWriteValue,"    private long getWriteValue(IODetailAdder details, IOUnit unit) {
        switch(unit) {
            case OPS:       return details.writeCount.get();
            case BYTES:     return details.writeBytes.get();"
17527,getWriteValue,"    private long getWriteValue(IODetailAdder details) {
        return getWriteValue(details, getUnit());
    }"
17528,getReadValue,"    private long getReadValue(IODetailAdder details, IOUnit unit) {
        switch(unit) {
            case OPS:       return details.readCount.get();
            case BYTES:     return details.readBytes.get();"
17529,getReadValue,"    private long getReadValue(IODetailAdder details) {
        return getReadValue(details, getUnit());
    }"
17530,getReadWriteValue,"    private long getReadWriteValue(IODetailAdder details, IOUnit unit) {
        switch(unit) {
            case OPS:
            case BYTES:"
17531,getReadWriteValue,"    private long getReadWriteValue(IODetailAdder details) {
        return getReadWriteValue(details, getUnit());
    }"
17532,getValue,"    private long getValue(IODetailAdder details) {
        switch(getDirection()) {
            case READ:              return getReadValue(details);"
17533,getStatValue,"    public long getStatValue(StatisticAdder details) {
        return getValue((IODetailAdder)details);
    }"
17534,getUnit,"    private IOUnit getUnit() {
        if(opsUnit.isSelected()) return IOUnit.OPS;
        else if(bytesUnit.isSelected()) return IOUnit.BYTES;"
17535,getDirection,"    private IODirection getDirection() {
        if(readStat.isSelected()) return IODirection.READ;
        else if(writeStat.isSelected()) return IODirection.WRITE;"
17537,getSummary,"    public String getSummary(Map<Stack, StatisticAdder> data) {
        IODetailAdder tally = new FileIODetailAdder();
        for(StatisticAdder item : data.values()) {
            tally.add((IODetailAdder)item);
        }"
17538,getStatDetails,"    public String getStatDetails(StatisticAdder nodeValue, StatisticAdder parentValue) {
        final IODetailAdder boxDetail = (IODetailAdder)nodeValue;
        final IODetailAdder parentDetail = (IODetailAdder)parentValue;
        return String.format(""Target:\n%d %s: %s\n\n""
                              + ""Read:\n"""
17539,getToolTipText,"    public String getToolTipText(StackFrameNode boxNode, StackFrameNode parentNode) {
        final IODetailAdder boxDetail = (IODetailAdder)boxNode.getDetail();
        final IODetailAdder parentDetail = (IODetailAdder)parentNode.getDetail();
        return String.format(""<html>\n""
                                + ""%s = %d%s<br>\n"""
17540,getTargetName,"    protected abstract String getTargetName();
"
17542,isRead,"    public abstract boolean isRead();
    public abstract boolean isWrite();"
17543,getBytes,"    public long getBytes() { return bytes; }
    public abstract boolean isRead();
    public abstract boolean isWrite();"
17544,getElapsed,"    public long getElapsed() { return elapsed; }
    public long getBytes() { return bytes; }
    public abstract boolean isRead();"
17545,getTarget,"    public String getTarget() { return target; }
    public long getElapsed() { return elapsed; }
    public long getBytes() { return bytes; }"
17546,getStack,"    public Stack getStack() { return stack; }
    public String getTarget() { return target; }
    public long getElapsed() { return elapsed; }"
17547,setTarget,"    protected void setTarget(String target) { this.target = target; }

    public Stack getStack() { return stack; }"
17548,complete,"    public void complete(long bytes) {
        elapsed = System.currentTimeMillis() - elapsed;
        this.bytes = bytes;
    }"
17550,toString,"    public String toString() {
        final Object[] arg = {
                readCount.get(), readBytes.get(), readTime.get(),
                writeCount.get(), writeBytes.get(), writeTime.get(),"
17551,add,"    public void add(IOEvent event) {
        targets.add(event.getTarget());
        if(event.isRead()) {
            readBytes.addAndGet(event.getBytes());"
17552,add,"    public void add(IODetailAdder that) {
        targets.addAll(that.targets);
        readBytes.addAndGet(that.readBytes.get());
        readTime.addAndGet(that.readTime.get());
        readCount.addAndGet(that.readCount.get());
        writeBytes.addAndGet(that.writeBytes.get());
        writeTime.addAndGet(that.writeTime.get());
        writeCount.addAndGet(that.writeCount.get());
"
17553,add,"    public void add(StatisticAdder<IOEvent> that) {
        if(that instanceof IODetailAdder) {
            add((IODetailAdder)that);"
17554,reset,"    public void reset() {
        totals = new ConcurrentHashMap<>();
    }"
17555,getStats,"    public Map<Stack,T> getStats() {
        return Collections.unmodifiableMap(totals);
    }"
17557,getAccumulator,"    private T getAccumulator(Stack key) {
        final ConcurrentMap<Stack,T> totalLocalCopy = this.totals;
        final T entry = totalLocalCopy.get(key);
        if(entry!=null) {
            return entry;
        }
        totalLocalCopy.putIfAbsent(key, newAdder());"
17558,ioHasCompleted,"    public void ioHasCompleted(IOEvent event) {
        Stack stack = event.getStack().applyFilter(filter);
        final T total = getAccumulator(stack);
        total.add(event);
    }"
17559,setFilter,"    public void setFilter(StackFilter filter) {
        this.filter = filter;
        totals = new ConcurrentHashMap<>();
    }"
17560,addCloseListener,"    public void addCloseListener(ActionListener listener);
}"
17561,contentsChanged,"    public void contentsChanged(ReportSource source) {
        if(source==currentSource) {
            togglePrevNextButtons();"
17563,togglePrevNextButtons,"    private void togglePrevNextButtons() {
        Tool.LOAD_NEXT_REPORT.getButton().setEnabled(currentSource.hasNext());
        Tool.LOAD_PREVIOUS_REPORT.getButton().setEnabled(currentSource.hasPrevious());
    }"
17564,nextReport,"    public void nextReport() {
        if(currentSource!=null) {
            currentSource.nextReport();"
17565,previousReport,"    public void previousReport() {
        if(currentSource!=null) {
            currentSource.previousReport();"
17566,zoomOut,"    public void zoomOut() {
        graph.zoomOut();
    }"
17567,zoomIn,"    public void zoomIn() {
        graph.zoomIn();
    }"
17568,zoomFit,"    public void zoomFit() {
        graph.zoomFit();
    }"
17569,zoomMax,"    public void zoomMax() {
        graph.zoomMax();
    }"
17570,getAboutPanel,"    public JComponent getAboutPanel() {
        return aboutPanel;
    }"
17571,getDetailPanel,"    public DetailPanel getDetailPanel() { return detailPanel; }

    @Override"
17572,getGraphControl,"    public JComponent getGraphControl() { return graph.getOptionEditor(); }
    public DetailPanel getDetailPanel() { return detailPanel; }
"
17573,getStatisticControl,"    public JComponent getStatisticControl() { return graph.getStatisticChooser(); }
    public JComponent getGraphControl() { return graph.getOptionEditor(); }
    public DetailPanel getDetailPanel() { return detailPanel; }"
17574,getFilterControl,"    public JComponent getFilterControl() { return filterEditor; }
    public JComponent getStatisticControl() { return graph.getStatisticChooser(); }
    public JComponent getGraphControl() { return graph.getOptionEditor(); }"
17575,getFileControl,"    public ReportFileChooser getFileControl() { return fileSource; }
    public JComponent getFilterControl() { return filterEditor; }
    public JComponent getStatisticControl() { return graph.getStatisticChooser(); }"
17576,getProbeControl,"    public JComponent getProbeControl() { return probeSource; }
    public ReportFileChooser getFileControl() { return fileSource; }
    public JComponent getFilterControl() { return filterEditor; }"
17577,getFrame,"    public JFrame getFrame() { return frame; }
    public JComponent getProbeControl() { return probeSource; }
    public ReportFileChooser getFileControl() { return fileSource; }"
17578,filter,"    public int filter(StackTraceElement[] mutable, int size) {
        int newSize = 0;
        for(int index=0;index<size;index++) {
            final StackTraceElement frame = mutable[index];
            if(matches(frame)) {"
17579,matches,"    public abstract boolean matches(StackTraceElement frame);
    "
17580,filter,"    public int filter(StackTraceElement[] mutable, int origSize) {
        final StackTraceElement[] orig = withOriginal ? mutable.clone() : null;
        int size = origSize;
        for(StackFilter filter : filters) {
            size = filter.filter(mutable, size);
            if(size==0) break;
        }"
17581,addCloseListener,"    public void addCloseListener(ActionListener listener) {
        localButton.addActionListener(listener);
    }"
17582,updateGraph,"    private void updateGraph() {
        if(graph!=null) {
            final StackFilter filter = getFilter();"
17583,getValues,"    private List<String> getValues(JTextArea field) {
        final String rawValue = field.getText();
        final String[] lines = rawValue.split(""\n"");
        final List<String> out = new ArrayList<>(lines.length);
        for(String line : lines) {
            final String clean = line.trim();
            if(clean.length()>0) {"
17585,getCount,"    private int getCount(JTextField field) {
        try {
            final int value = Integer.parseInt(field.getText().trim());
            if(value>0) {"
17586,isPositive,"    private boolean isPositive(JTextField field) {
        final String textValue = field.getText().trim();
        boolean validPositiveNumber = false;
        try {
            int value = Integer.parseInt(textValue);
            if(value>0) {"
17587,setGraph,"    public void setGraph(StackGraphPanel graph) {
        this.graph = graph;
    }"
17588,caretUpdate,"            public void caretUpdate(CaretEvent e) {
                final boolean bottomPositive = isPositive(bottomCount);
                bottomLabel1.setEnabled(bottomPositive);
                bottomLabel2.setEnabled(bottomPositive);
                bothLabel.setEnabled(bottomPositive && isPositive(topCount));
            } });"
17589,caretUpdate,"            public void caretUpdate(CaretEvent e) {
                final boolean topPositive = isPositive(topCount);
                topLabel1.setEnabled(topPositive);
                topLabel2.setEnabled(topPositive);
                bothLabel.setEnabled(topPositive && isPositive(bottomCount));
            } });"
17591,actionPerformed,"            public void actionPerformed(ActionEvent e) {
                updateGraph();
            }"
17594,begin,"    public static FileIOEvent begin(String path) {
        return new FileWriteEvent(path);
    }"
17597,begin,"    public static FileIOEvent begin(String path) {
        return new FileReadEvent(path);
    }"
17598,matches,"    public boolean matches(String path) {
        if(path==null) { return false; }

        for(FileMatcher reject : rejectList) {
            if(reject.matches(path)) {
                return false;
            }"
17599,matches,"        public boolean matches(String path) {
            return true;
        }"
17601,createAccumulator,"    protected IOAccumulator createAccumulator(StackFilter filter) {
        return new FileIOAccumulator(filter);
    }"
17602,parseFileMatchers,"    protected static FileMatcher[] parseFileMatchers(String csv) throws ParseException {
        if(csv==null || csv.trim().equals("""")) {
            return new FileMatcher[0];
        }

        final String[] pathDescriptions = csv.split("","");
        final int len = pathDescriptions.length;
        final FileMatcher[] matchers = new FileMatcher[len];"
17605,handleEvent,"    private void handleEvent(Object context, long bytes) {
        if(context!=null) {
            final FileIOEvent operation = (FileIOEvent)context;"
17606,fileWriteEnd,"    public void fileWriteEnd(Object context, long bytesWritten) {
        handleEvent(context, bytesWritten);
    }"
17607,fileReadEnd,"    public void fileReadEnd(Object context, long bytesRead) {
        handleEvent(context, bytesRead);
    }"
17608,fileWriteBegin,"    public Object fileWriteBegin(String path) {
        return fileFilter.matches(path) ? FileWriteEvent.begin(path) : null;
    }"
17609,fileReadBegin,"    public Object fileReadBegin(String path) {
        return fileFilter.matches(path) ? FileReadEvent.begin(path) : null;
    }"
17610,getTargetName,"    protected String getTargetName() {
        return ""files"";
    }"
17611,addListener,"    public void addListener(ProbeManager probe, Listener listener) {
        final ValueReporter<IODetailAdder> reporter = probe.getFileIOReporter();
        if(reporter!=null) {
            reporter.addListener(listener);"
17612,parse,"    public StatisticAdder parse(String value) throws ParseException {
        return FileIODetailAdder.fromString(value);
    }"
17613,isSelected,"    public boolean isSelected() { return acceptFileIO.isSelected(); }

    @Override"
17614,getSelectionComponent,"    public JComponent getSelectionComponent() { return acceptFileIO; }

    @Override"
17615,fromString,"    public static FileIODetailAdder fromString(String line) {
        final FileIODetailAdder out = new FileIODetailAdder();
        try {
            out.setFromString(line);
        } catch(Exception e) {"
17616,newInstance,"    public StatisticAdder<IOEvent> newInstance() {
        return new FileIODetailAdder();
    }"
17617,getType,"    public String getType() {
        return ProbeManager.FILE_IO_LABEL;
    }"
17618,newAdder,"    public FileIODetailAdder newAdder() {
        return new FileIODetailAdder();
    }"
17619,hasNext,"    public boolean hasNext() {
        return (lastPosition!=null && savedPositions.getPositionAtOrAfter(lastPosition+1)!=null) || ! parsedWholeFile;
    }"
17620,hasPrevious,"    public boolean hasPrevious() {
        return savedPositions.getPositionBefore(lastPosition)!=null;
    }"
17621,getFilename,"    public String getFilename() {
        return filename;
    }"
17622,getPositionAtOrAfter,"        public Long getPositionAtOrAfter(Long position) {
            if(timeByPosition.isEmpty()) { return null; }
            if(position==null) {
                return timeByPosition.firstKey();
            }
            if(timeByPosition.containsKey(position)) {"
17623,getPositionBefore,"        public Long getPositionBefore(Long key) {
            if(timeByPosition.isEmpty()) { return null; }
            if(key==null) { return timeByPosition.lastKey(); }
            return timeByPosition.lowerKey(key);
        }"
17624,getTimes,"        public Collection<Date> getTimes() {
            return positionByTime.keySet();
        }"
17625,getPosition,"        public Long getPosition(Date date) {
            return positionByTime.get(date);
        }"
17626,getTime,"        public Date getTime(Long position) {
            if(position==null) { return null; }
            return timeByPosition.get(position);
        }"
17627,clear,"        public void clear() {
            positionByTime.clear();
            timeByPosition.clear();
        }"
17628,put,"        public void put(Date time, Long position) {
            positionByTime.put(time, position);
            timeByPosition.put(position, time);
        }"
17630,getReportType,"    public String getReportType() {
        return typeByPosition.get(lastPosition);
    }"
17631,getReportTime,"    public Date getReportTime() {
        return savedPositions.getTime(lastPosition);
    }"
17632,getPreviousReport,"    public Map<Stack, StatisticAdder> getPreviousReport() throws Exception {
        lastPosition = savedPositions.getPositionBefore(lastPosition);
        if(lastPosition==null) { return null; }
        raf.seek(lastPosition);
        return read();
    }"
17633,getNextReport,"    public Map<Stack, StatisticAdder> getNextReport() throws Exception {
        long positionBefore = raf.getFilePointer();
        Map<Stack, StatisticAdder> report = read();
        if(report==null) {
            parsedWholeFile = true;
            lastPosition = null;"
17634,getReport,"    public Map<Stack, StatisticAdder> getReport(Date date) throws Exception {
        final Long position = savedPositions.getPosition(date);
        if(position==null) {
            lastPosition = null;
            return null;
        }"
17635,getReportTimes,"    public Collection<Date> getReportTimes() {
        return savedPositions.getTimes();
    }"
17636,parseFile,"    public void parseFile() throws Exception {
        while(read()!=null) { }
    }"
17637,close,"    public void close() throws IOException {
        raf.close();
        savedPositions.clear();
        lastPosition = null;
    }"
17638,valueChanged,"    public void valueChanged(ListSelectionEvent e) {
        final StackGraphPanel graph = (StackGraphPanel) e.getSource();
        final StackFrameNode boxNode = graph.getSelection();
        final StackFrameNode parentNode = graph.getSelectionParent();
        final String statInfo = boxNode.getStats(parentNode);
        setModel(boxNode, parentNode, statInfo);
    }"
17639,addCloseListener,"    public void addCloseListener(ActionListener listener) {
        close.addActionListener(listener);
    }"
17641,append,"    @Override public PrintStream append(char c) { return getDelegate().append(c); }
}"
17642,append,"    @Override public PrintStream append(CharSequence csq, int start, int end) { return getDelegate().append(csq, start, end); }
    @Override public PrintStream append(char c) { return getDelegate().append(c); }
}"
17643,append,"    @Override public PrintStream append(CharSequence csq) { return getDelegate().append(csq); }
    @Override public PrintStream append(CharSequence csq, int start, int end) { return getDelegate().append(csq, start, end); }
    @Override public PrintStream append(char c) { return getDelegate().append(c); }"
17644,format,"    @Override public PrintStream format(Locale l, String format, Object... args) { return getDelegate().format(l, format, args); }
    @Override public PrintStream append(CharSequence csq) { return getDelegate().append(csq); }
    @Override public PrintStream append(CharSequence csq, int start, int end) { return getDelegate().append(csq, start, end); }"
17645,format,"    @Override public PrintStream format(String format, Object... args) { return getDelegate().format(format, args); }
    @Override public PrintStream format(Locale l, String format, Object... args) { return getDelegate().format(l, format, args); }
    @Override public PrintStream append(CharSequence csq) { return getDelegate().append(csq); }"
17646,printf,"    @Override public PrintStream printf(Locale l, String format, Object... args) { return getDelegate().printf(l, format, args); }
    @Override public PrintStream format(String format, Object... args) { return getDelegate().format(format, args); }
    @Override public PrintStream format(Locale l, String format, Object... args) { return getDelegate().format(l, format, args); }"
17647,printf,"    @Override public PrintStream printf(String format, Object... args) { return getDelegate().printf(format, args); }
    @Override public PrintStream printf(Locale l, String format, Object... args) { return getDelegate().printf(l, format, args); }
    @Override public PrintStream format(String format, Object... args) { return getDelegate().format(format, args); }"
17648,println,"    @Override public void println(Object x) { getDelegate().println(x); }
    @Override public PrintStream printf(String format, Object... args) { return getDelegate().printf(format, args); }
    @Override public PrintStream printf(Locale l, String format, Object... args) { return getDelegate().printf(l, format, args); }"
17649,println,"    @Override public void println(String x) { getDelegate().println(x); }
    @Override public void println(Object x) { getDelegate().println(x); }
    @Override public PrintStream printf(String format, Object... args) { return getDelegate().printf(format, args); }"
17650,println,"    @Override public void println(char[] x) { getDelegate().println(x); }
    @Override public void println(String x) { getDelegate().println(x); }
    @Override public void println(Object x) { getDelegate().println(x); }"
17651,println,"    @Override public void println(double x) { getDelegate().println(x); }
    @Override public void println(char[] x) { getDelegate().println(x); }
    @Override public void println(String x) { getDelegate().println(x); }"
17652,println,"    @Override public void println(float x) { getDelegate().println(x); }
    @Override public void println(double x) { getDelegate().println(x); }
    @Override public void println(char[] x) { getDelegate().println(x); }"
17653,println,"    @Override public void println(long x) { getDelegate().println(x); }
    @Override public void println(float x) { getDelegate().println(x); }
    @Override public void println(double x) { getDelegate().println(x); }"
17654,println,"    @Override public void println(int x) { getDelegate().println(x); }
    @Override public void println(long x) { getDelegate().println(x); }
    @Override public void println(float x) { getDelegate().println(x); }"
17655,println,"    @Override public void println(char x) { getDelegate().println(x); }
    @Override public void println(int x) { getDelegate().println(x); }
    @Override public void println(long x) { getDelegate().println(x); }"
17656,println,"    @Override public void println(boolean x) { getDelegate().println(x); }
    @Override public void println(char x) { getDelegate().println(x); }
    @Override public void println(int x) { getDelegate().println(x); }"
17657,println,"    @Override public void println() { getDelegate().println(); }
    @Override public void println(boolean x) { getDelegate().println(x); }
    @Override public void println(char x) { getDelegate().println(x); }"
17658,print,"    @Override public void print(Object obj) { getDelegate().print(obj); }
    @Override public void println() { getDelegate().println(); }
    @Override public void println(boolean x) { getDelegate().println(x); }"
17659,print,"    @Override public void print(String s) { getDelegate().print(s); }
    @Override public void print(Object obj) { getDelegate().print(obj); }
    @Override public void println() { getDelegate().println(); }"
17660,print,"    @Override public void print(char[] s) { getDelegate().print(s); }
    @Override public void print(String s) { getDelegate().print(s); }
    @Override public void print(Object obj) { getDelegate().print(obj); }"
17661,print,"    @Override public void print(double d) { getDelegate().print(d); }
    @Override public void print(char[] s) { getDelegate().print(s); }
    @Override public void print(String s) { getDelegate().print(s); }"
17662,print,"    @Override public void print(float f) { getDelegate().print(f); }
    @Override public void print(double d) { getDelegate().print(d); }
    @Override public void print(char[] s) { getDelegate().print(s); }"
17663,print,"    @Override public void print(long l) { getDelegate().print(l); }
    @Override public void print(float f) { getDelegate().print(f); }
    @Override public void print(double d) { getDelegate().print(d); }"
17664,print,"    @Override public void print(int i) { getDelegate().print(i); }
    @Override public void print(long l) { getDelegate().print(l); }
    @Override public void print(float f) { getDelegate().print(f); }"
17665,print,"    @Override public void print(char c) { getDelegate().print(c); }
    @Override public void print(int i) { getDelegate().print(i); }
    @Override public void print(long l) { getDelegate().print(l); }"
17666,print,"    @Override public void print(boolean b) { getDelegate().print(b); }
    @Override public void print(char c) { getDelegate().print(c); }
    @Override public void print(int i) { getDelegate().print(i); }"
17667,write,"    @Override public void write(byte[] buf, int off, int len) { getDelegate().write(buf, off, len); }
    @Override public void print(boolean b) { getDelegate().print(b); }
    @Override public void print(char c) { getDelegate().print(c); }"
17668,write,"    @Override public void write(int b) { getDelegate().write(b); }
    @Override public void write(byte[] buf, int off, int len) { getDelegate().write(buf, off, len); }
    @Override public void print(boolean b) { getDelegate().print(b); }"
17669,checkError,"    @Override public boolean checkError() { return getDelegate().checkError(); }
    @Override public void write(int b) { getDelegate().write(b); }
    @Override public void write(byte[] buf, int off, int len) { getDelegate().write(buf, off, len); }"
17670,flush,"    @Override public void flush() { getDelegate().flush(); }
    @Override public boolean checkError() { return getDelegate().checkError(); }
    @Override public void write(int b) { getDelegate().write(b); }"
17671,write,"    @Override public void write(byte[] b) throws IOException { getDelegate().write(b); }
    @Override public void flush() { getDelegate().flush(); }
    @Override public boolean checkError() { return getDelegate().checkError(); }"
17672,close,"    public void close() {
        getDelegate().close();
        clearDelegate();
    }"
17673,clearDelegate,"    private synchronized void clearDelegate() {
        delegate = null;
    }"
17674,setDelegate,"    private synchronized PrintStream setDelegate() {
        delegate = namedOutput.get(key);
        return delegate;
    }"
17675,getDelegate,"    private PrintStream getDelegate() {
        PrintStream localCopy = delegate;
        if(localCopy==null) {
            localCopy = setDelegate();
        }"
17676,getStatInfo,"    public static String getStatInfo(StatisticAdder target, StatisticAdder parent) {
        return forType(target.getType()).getStatDetails(target, parent);
    }"
17677,getValue,"    public static long getValue(StatisticAdder composite) {
        return forType(composite.getType()).getStatValue(composite);
    }"
17678,forType,"    public static DataTypeHelper forType(String type) {
        return getImpl().get(type);
    }"
17679,getTypes,"    public static Collection<String> getTypes() { return getImpl().keySet(); }

    public static DataTypeHelper forType(String type) {"
17680,getImpl,"    private static Map<String,DataTypeHelper> getImpl() {
        if(impl.isEmpty()) {
            impl.put(ProbeManager.CPU_USAGE_LABEL, new CPUUsageHelper());
            impl.put(ProbeManager.SOCKET_IO_LABEL, new SocketIOHelper());"
17682,getFrames,"    protected String getFrames(Collection<StackTraceElement> frames) {
        final StringBuilder out = new StringBuilder();
        for(StackTraceElement frame : frames) {
            out.append(""\n "").append(frame);
        }"
17683,div,"    protected long div(Number num, Number den) {
        return den.longValue()==0 ? num.longValue() : Math.round(num.floatValue()/den.floatValue());
    }"
17684,pct,"    protected String pct(Number num, Number div) {
        if(div.longValue()==0) { return """"; }
        return "" "" + (100*num.longValue()/div.longValue()) + ""%"";
    }"
17685,pct,"    protected String pct(Number num, Number num2, Number div, Number div2) {
        return pct(num.longValue()+num2.longValue(), div.longValue()+div2.longValue());
    }"
17686,getDisclaimer,"    protected JPanel getDisclaimer() {
        return flow(new JLabel(""** = these stats are not additive; widths from different stacks are not comparable""));
    }"
17687,getStatValue,"    public abstract long getStatValue(StatisticAdder composite);
"
17688,addListener,"    public abstract void addListener(ProbeManager probe, Listener listener);
    public abstract long getStatValue(StatisticAdder composite);"
17689,isSelected,"    public abstract boolean isSelected();
    public abstract void addListener(ProbeManager probe, Listener listener);"
17690,getSelectionComponent,"    public abstract JComponent getSelectionComponent();
    public abstract boolean isSelected();"
17691,getOptionEditor,"    public abstract JComponent getOptionEditor();
    public abstract JComponent getSelectionComponent();"
17692,getSummary,"    public abstract String getSummary(Map<Stack, StatisticAdder> data);
    public abstract JComponent getOptionEditor();"
17693,parse,"    public abstract StatisticAdder parse(String value) throws Exception;
    public abstract String getSummary(Map<Stack, StatisticAdder> data);"
17694,getStatDetails,"    public abstract String getStatDetails(StatisticAdder boxNode, StatisticAdder parentNode);
    public abstract StatisticAdder parse(String value) throws Exception;"
17695,getToolTipText,"    public abstract String getToolTipText(StackFrameNode boxNode, StackFrameNode parentNode);
    public abstract String getStatDetails(StatisticAdder boxNode, StatisticAdder parentNode);"
17696,isWrite,"    @Override public boolean isWrite() { return true; }

}"
17697,isRead,"    @Override public boolean isRead() { return false; }
    @Override public boolean isWrite() { return true; }
"
17698,isWrite,"    @Override public boolean isWrite() { return false; }

}"
17699,isRead,"    @Override public boolean isRead() { return true; }
    @Override public boolean isWrite() { return false; }
"
17700,createAccumulator,"    protected IOAccumulator createAccumulator(StackFilter filter) {
        return new DatagramIOAccumulator(filter);
    }"
17704,receive,"        protected void receive(DatagramPacket p) throws IOException {
            final Object context = IoTraceHandler.datagramReadBegin();
            invoke(""receive"", p);
            IoTraceHandler.datagramReadEnd(context, p.getSocketAddress(), p.getData().length);
        }"
17705,send,"        protected void send(DatagramPacket p) throws IOException {
            final Object context = IoTraceHandler.datagramWriteBegin();
            invoke(""send"", p);
            IoTraceHandler.datagramWriteEnd(context, p.getSocketAddress(), p.getData().length);
        }"
17706,close,"        protected void close() {
            try {
                invoke(""close"");"
17707,leaveGroup,"        protected void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException {
            invoke(""leaveGroup"", mcastaddr, netIf);
        }"
17708,joinGroup,"        protected void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf) throws IOException {
            invoke(""joinGroup"", mcastaddr, netIf);
        }"
17709,leave,"        protected void leave(InetAddress inetaddr) throws IOException {
            invoke(""leave"", inetaddr);
        }"
17710,join,"        protected void join(InetAddress inetaddr) throws IOException {
            invoke(""join"", inetaddr);
        }"
17711,getTimeToLive,"        protected int getTimeToLive() throws IOException {
            return (Integer) invoke(""getTimeToLive"");
        }"
17712,setTimeToLive,"        protected void setTimeToLive(int ttl) throws IOException {
            invoke(""setTimeToLive"", ttl);
        }"
17713,getTTL,"        protected byte getTTL() throws IOException {
            return (Byte) invoke(""getTTL"");
        }"
17714,setTTL,"        protected void setTTL(byte ttl) throws IOException {
            invoke(""setTTL"", ttl);
        }"
17715,peekData,"        protected int peekData(DatagramPacket p) throws IOException {
            return (Integer) invoke(""peekData"", p);
        }"
17716,peek,"        protected int peek(InetAddress i) throws IOException {
            return (Integer) invoke(""peek"", i);
        }"
17717,bind,"        protected void bind(int lport, InetAddress laddr) throws SocketException {
            try {
                invoke(""bind"", lport, laddr);"
17718,create,"        protected void create() throws SocketException {
            try {
                invoke(""create"");"
17719,rethrowIOException,"        private void rethrowIOException(Throwable e) throws IOException {
            if(e instanceof RuntimeException) { throw (RuntimeException) e; }
            if(e instanceof IOException) { throw (IOException) e; }
            if(e.getCause()!=null && e.getCause()!=e) { rethrowIOException(e.getCause()); }
            throw new RuntimeException(""failed to invoke method on delegate"", e);
        }"
17720,invoke,"        private Object invoke(String method, Object... args) throws IOException {
            try {
                return methodByName.get(method).invoke(delegate, args);"
17722,equals,"        public boolean equals(Object obj) { return delegate.equals(obj); }
        public String toString() { return delegate.toString(); }
"
17723,getOption,"        public Object getOption(int optID) throws SocketException { return delegate.getOption(optID); }
        public boolean equals(Object obj) { return delegate.equals(obj); }
        public String toString() { return delegate.toString(); }"
17724,hashCode,"        public int hashCode() { return delegate.hashCode(); }
        public Object getOption(int optID) throws SocketException { return delegate.getOption(optID); }
        public boolean equals(Object obj) { return delegate.equals(obj); }"
17725,setOption,"        public void setOption(int optID, Object value) throws SocketException { delegate.setOption(optID, value); }
        public int hashCode() { return delegate.hashCode(); }
        public Object getOption(int optID) throws SocketException { return delegate.getOption(optID); }"
17726,createDatagramSocketImpl,"    public DatagramSocketImpl createDatagramSocketImpl() {
        try {
            final DatagramSocketImpl impl = (DatagramSocketImpl) delegateCreateImplMethod.invoke(null, useMulticast);"
17728,handleEvent,"    private void handleEvent(Object context, SocketAddress address, long bytes) {
        if(filter.matches(address)) {
            final DatagramEvent operation = (DatagramEvent)context;"
17729,datagramWriteEnd,"    public void datagramWriteEnd(Object context, SocketAddress address, long bytesWritten) {
        handleEvent(context, address, bytesWritten);
    }"
17730,datagramWriteBegin,"    public Object datagramWriteBegin() {
        return new DatagramSendEvent();
    }"
17731,datagramReadBegin,"    public Object datagramReadBegin() {
        return new DatagramReceiveEvent();
    }"
17732,initializeProbe,"    public void initializeProbe() throws Exception {
        DatagramSocket.setDatagramSocketImplFactory(this);
        if(useNIOHooks) {
            final String className = System.getProperty(""java.nio.channels.spi.SelectorProvider"");
            if( ! IoTraceSelectorProvider.class.getName().equals(className)) {"
17734,addListener,"    public void addListener(ProbeManager probe, Listener listener) {
        final ValueReporter<IODetailAdder> reporter = probe.getDatagramIOReporter();
        if(reporter!=null) {
            reporter.addListener(listener);"
17735,parse,"    public StatisticAdder parse(String value) throws ParseException {
        return DatagramIODetailAdder.fromString(value);
    }"
17736,isSelected,"    public boolean isSelected() { return accept.isSelected(); }

    @Override"
17737,getSelectionComponent,"    public JComponent getSelectionComponent() { return accept; }

    @Override"
17738,fromString,"    public static DatagramIODetailAdder fromString(String line) {
        final DatagramIODetailAdder out = new DatagramIODetailAdder();
        try {
            out.setFromString(line);
        } catch(Exception e) {"
17739,newInstance,"    public StatisticAdder<IOEvent> newInstance() {
        return new DatagramIODetailAdder();
    }"
17740,getType,"    public String getType() {
        return ProbeManager.DATAGRAM_IO_LABEL;
    }"
17741,newAdder,"    public DatagramIODetailAdder newAdder() {
        return new DatagramIODetailAdder();
    }"
17742,complete,"    public void complete(SocketAddress address, long bytes) {
        complete(bytes);
        setTarget( address.toString() );
    }"
17751,setThreadPriority,"    public void setThreadPriority(int threadPriority);
"
17752,getThreadPriority,"    public int getThreadPriority();
    public void setThreadPriority(int threadPriority);"
17754,getEffectiveInterval,"    public long getEffectiveInterval();
    public long getAverageDumpTime();"
17755,setDumpInterval,"    public void setDumpInterval(long dumpInterval);
    public long getEffectiveInterval();"
17756,getDumpInterval,"    public long getDumpInterval();
    public void setDumpInterval(long dumpInterval);"
17757,setJitter,"    public void setJitter(long jitter);
    public long getDumpInterval();"
17758,getJitter,"    public long getJitter();
    public void setJitter(long jitter);"
17759,addListener,"    public void addListener(ProbeManager probe, Listener listener) {
        final ValueReporter<CPUStats> reporter = probe.getCPUReporter();
        if(reporter!=null) {
            reporter.addListener(listener);"
17762,getSummary,"    public String getSummary(Map<Stack, StatisticAdder> data) {
        CPUStats tally = new CPUStats();
        for(StatisticAdder item : data.values()) {
            tally.add(item);
        }"
17763,parse,"    public StatisticAdder parse(String value) throws ParseException {
        return CPUStats.fromString(value);
    }"
17764,getStatDetails,"    public String getStatDetails(StatisticAdder nodeValue, StatisticAdder parentValue) {
        final CPUStats boxDetail = (CPUStats)nodeValue;
        final CPUStats parentDetail = (CPUStats)parentValue;

        return String.format("
17765,getToolTipText,"    public String getToolTipText(StackFrameNode boxNode, StackFrameNode parentNode) {
        final CPUStats boxDetail = (CPUStats)boxNode.getDetail();
        final CPUStats parentDetail = (CPUStats)parentNode.getDetail();
        return String.format(""<html>\n""
                + ""%s<br>\n"""
17766,isSelected,"    public boolean isSelected() { return acceptCPUStats.isSelected(); }

    @Override"
17767,getSelectionComponent,"    public JComponent getSelectionComponent() { return acceptCPUStats; }

    @Override"
17768,fromString,"        public void fromString(String stringValue) {
            final TallyMap out = new TallyMap();
            for(String entryPart : stringValue.split("", +"")) {
                final String[] fieldParts = entryPart.split("" "");"
17769,toString,"        public String toString() {
            final StringBuilder out = new StringBuilder();
            for(Map.Entry<State,Integer> entry : entrySet()) {
                if(out.length()>0) { out.append("", ""); }
                out.append(entry.getValue()).append("" "").append(entry.getKey());"
17770,add,"        public void add(TallyMap that) {
            for(State key : State.values()) {
                final int sum = get(key)+that.get(key);"
17771,increment,"        public void increment(State key) {
            final int sum = get(key)+1;
            put(key, sum);
        }"
17772,get,"        public Integer get(State key) {
            final Integer orig = super.get(key);
            return orig==null ? 0 : orig;
        }"
17773,fromString,"    public static CPUStats fromString(String line) {
        final Object[] fields;
        try {
            synchronized(FORMAT) {
                fields = FORMAT.parse(line);
            }
        } catch(ParseException e) {
            return null;
        }

        final CPUStats out = new CPUStats();
        out.cpuTime = ((Number)fields[0]).longValue();
        out.userTime = ((Number)fields[1]).longValue();"
17774,toString,"    public String toString() {
        final Object[] arg = {
                cpuTime, userTime, blockedTime, blockedCount, waitedTime, waitedCount,
                countByState.toString()"
17775,getType,"    public String getType() {
        return ProbeManager.CPU_USAGE_LABEL;
    }"
17776,newInstance,"    public StatisticAdder<ThreadDetails> newInstance() {
        return new CPUStats();
    }"
17777,add,"    public void add(ThreadDetails value) {
        countByState.increment(value.getState());
        blockedCount += value.getBlockedCount();
        blockedTime += Math.max(0L, value.getBlockedTime());
        waitedCount += value.getWaitedCount();
        waitedTime += Math.max(0L, value.getWaitedTime());
        userTime += value.getUserTime();
        cpuTime += Math.max(0L, value.getCpuTime());
    }"
17778,add,"    public void add(StatisticAdder<ThreadDetails> o) {
        final CPUStats value = (CPUStats)o;
        countByState.add(value.countByState);
        blockedCount += value.blockedCount;
        blockedTime += value.blockedTime;
        waitedCount += value.waitedCount;
        waitedTime += value.waitedTime;
        userTime += value.userTime;
        cpuTime += value.cpuTime;
    }"
17779,getThreadCount,"    public int getThreadCount(State state) {
        return countByState.get(state);
    }"
17780,getThreadCount,"    public int getThreadCount() {
        int sum = 0;
        for(Integer count : countByState.values()) {
            sum += count;
        }"
17781,getWaitedTime,"    public long getWaitedTime() { return waitedTime; }

    public int getThreadCount() {"
17782,getWaitedCount,"    public long getWaitedCount() { return waitedCount; }
    public long getWaitedTime() { return waitedTime; }
"
17787,getList,"    public String[] getList(String key) {
        final String stringValue = getProperty(key);
        if(stringValue==null || stringValue.isEmpty()) { return new String[0]; }
        final String[] out = stringValue.split("","");
        for(int i=0;i<out.length;i++) {
            out[i] = out[i].trim();
        }"
17788,getNumber,"    public Long getNumber(String key) {
        final String stringValue = getProperty(key);
        return stringValue==null ? null : Long.parseLong(stringValue);
    }"
17789,getNumber,"    public long getNumber(String key, long defaultValue) {
        final Long value = getNumber(key);
        return value==null ? defaultValue : value;
    }"
17790,isTrue,"    public boolean isTrue(String key, boolean defaultValue) {
        return ""true"".equalsIgnoreCase(getProperty(key, Boolean.toString(defaultValue)));
    }"
17791,getProperty,"    public String getProperty(String key, String defaultValue) {
        for(String prefix : prefixes) {
            final String value = combinedProperties.getProperty(prefix + key);
            if(value!=null) { return value; }"
17792,getProperty,"    public String getProperty(String key) {
        return getProperty(key, null);
    }"
17793,withPrefix,"    public Configuration withPrefix(String prefix) {
        return new Configuration(this, prefix);
    }"
17794,readPropertyClasspath,"    private static Properties readPropertyClasspath(String name, List<String> output) throws IOException {
        final InputStream in = Configuration.class.getResourceAsStream(name);
        if(in==null) { return null; }

        output.add(""GUMSHOE: reading configuration resource"");
        final Properties out = new Properties();
        try {"
17795,readPropertyFile,"    private static Properties readPropertyFile(String name, List<String> output) throws IOException {
        final File file = new File(name);
        if( ! file.isFile() || ! file.canRead()) { return null; }

        output.add(""GUMSHOE: reading configuration file"");
        final Properties out = new Properties();
        final Reader in = new FileReader(file);
        try {"
17797,initPrefixes,"    private static String[] initPrefixes(String newPrefix, String[] delegatePrefixes) {
        if(delegatePrefixes.length==1) {
            final String[] out = { ""gumshoe.""+newPrefix+""."", ""gumshoe."" };"
17798,toString,"    public String toString() {
        return String.format(""%3d %.2f %.2f %s"", row, position, width, boxNode.getFrame().toString());
    }"
17799,getHelper,"    private DataTypeHelper getHelper() {
        return DataTypeHelper.forType(boxNode.getDetail().getType());
    }"
17800,getDetailText,"    public String getDetailText() {
        return getHelper().getDetailText(boxNode, parentNode);
    }"
17801,getToolTipText,"    public String getToolTipText() {
        return getHelper().getToolTipText(boxNode, parentNode);
    }"
17802,getLabelText,"    public String getLabelText() {
        if(label==null) {
            final String[] parts = boxNode.getFrame().getClassName().split(""\\."");
            final StringBuilder labelText = new StringBuilder(parts[parts.length-1]);"
17806,getBounds,"    public Rectangle getBounds(float rowHeight, int displayWidth, int rowsMinusOne, DisplayOptions o) {
        final int boxX = (int) (position * displayWidth);
        final int boxWidth = (int)(width * displayWidth);
        final int boxY = (int) (rowHeight * (o.byCalled?(rowsMinusOne-row):row));
        final int boxHeight = (int)rowHeight;
        return new Rectangle(boxX, boxY, boxWidth, boxHeight);
    }"
17807,getParentNode,"    public StackFrameNode getParentNode() { return parentNode; }

    public Rectangle getBounds(float rowHeight, int displayWidth, int rowsMinusOne, DisplayOptions o) {"
17808,getNode,"    public StackFrameNode getNode() { return boxNode; }
    public StackFrameNode getParentNode() { return parentNode; }
"
17809,getWidth,"    public float getWidth() { return width; }
    public StackFrameNode getNode() { return boxNode; }
    public StackFrameNode getParentNode() { return parentNode; }"
17810,getPosition,"    public float getPosition() { return position; }
    public float getWidth() { return width; }
    public StackFrameNode getNode() { return boxNode; }"
17811,getFrame,"    public StackTraceElement getFrame() { return boxNode.getFrame(); }
    public float getPosition() { return position; }
    public float getWidth() { return width; }"
17812,getFromStream,"    private static byte[] getFromStream(InputStream in, long size) throws IOException {
        final byte[] contents = new byte[(int)size];
        int pos = 0;
        int len;
        while(size-pos>0 && (len=in.read(contents, pos, (int)size-pos))!=-1) {
            pos+=len;
        }"
17813,getFromFile,"    private static byte[] getFromFile(File file) throws IOException {
        final InputStream in = new BufferedInputStream(new FileInputStream(file));
        try {
            return getFromStream(in, file.length());"
17814,getFromJar,"    private static byte[] getFromJar(JarInputStream jarIn) throws IOException {
        JarEntry entry;
        while((entry = jarIn.getNextJarEntry())!=null) {
            if(CLASS_FILENAME.equals(entry.getName())) {
                return getFromStream(jarIn, entry.getSize());"
17815,getAlternateBytecodeOLD,"    private static byte[] getAlternateBytecodeOLD() throws IOException {
        final String[] classpath = System.getProperty(""java.class.path"").split(System.getProperty(""path.separator""));
        for(String entry : classpath) {
            final File file = new File(entry);
            if( ! file.canRead()) continue;"
17816,getAlternateBytecode,"    private byte[] getAlternateBytecode() throws IOException {
        final InputStream in = ProbeManager.class.getResourceAsStream(CLASS_FILENAME);
        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        final byte[] block = new byte[8192];
        int len;
        while((len=in.read(block))>-1) {
            buffer.write(block, 0, len);
        }"
17817,installIoTraceHook,"    private  void installIoTraceHook(Instrumentation inst) throws IOException {
        final byte[] alternate = getAlternateBytecode();
        if(alternate==null) {
            System.out.println(""GUMSHOE ERROR: failed to locate IoTrace hook"");
            return;"
17818,isAgentInstalled,"    public static boolean isAgentInstalled() {
        return WAS_INSTALLED;
    }"
17819,premain,"    public static void premain(String args, Instrumentation inst) throws Exception {
        final ProbeManager probeManager = ProbeManager.getInstance();
        probeManager.initialize();
        if(probeManager.isUsingIoTrace()) {
            new Agent().installIoTraceHook(inst);
        }"
17821,matches,"    boolean matches(byte[] addressBytes, int port);
    boolean matches(SocketAddress address);"
17822,addCloseListener,"    public void addCloseListener(ActionListener listener) {
        ok.addActionListener(listener);
    }"
17823,writeResponse,"    private static void writeResponse(HttpServletResponse resp, Monitoring monitoring) throws IOException {

        Monitoring.Result result = monitoring.getResult();
        switch (result.getStatus()) {
            case OK:"
17824,doGet,"    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        switch (req.getRequestURI()) {
            case ""/ping"":"
17825,validateDots,"    private boolean validateDots(String name, boolean allowDirs, boolean isDir) {
        if (name.charAt(0) == '.') {
            return false;
        }
        if (!allowDirs && isDir) {
            return false;
        }
        int prevDotIndex = -1;
        int dotIndex = -1;
        int dotCount = 0;"
17826,validate,"    public boolean validate(String name, boolean allowDirs) {
        boolean isDir = MetricUtil.isDir(name);
        if ((!isDir && name.length() < minMetricLength) || name.length() > maxMetricLength) {
            return false;
        }
        if (!validateDots(name, allowDirs, isDir)) {"
17827,createStartWithDirectoryPattern,"    public static Pattern createStartWithDirectoryPattern(String[] directories) {
        String directoriesPattern = Arrays.stream(directories)
            .map(Pattern::quote)
            .collect(Collectors.joining(""|""));"
17828,getLevel,"    public static int getLevel(String metric) {
        int splitsCount = StringUtils.countOccurrencesOf(metric, ""."");
        if (isDir(metric)) {
            return splitsCount;
        }"
17829,getParentName,"    public static String getParentName(String metric) {
        return metric.substring(0, metric.lastIndexOf(LEVEL_SPLITTER, metric.length() - 2) + 1);
    }"
17830,getLastLevelName,"    public static String getLastLevelName(String metric) {
        if (isDir(metric)) {
            return metric.substring(metric.lastIndexOf(LEVEL_SPLITTER, metric.length() - 2) + 1, metric.length() - 1);"
17831,splitToLevels,"    public static String[] splitToLevels(String metric) {
        return metric.split(""\\."");
    }"
17832,isDir,"    public static boolean isDir(String metric) {
        return metric.charAt(metric.length() - 1) == LEVEL_SPLITTER;
    }"
17833,getUpdatedSeconds,"    public int getUpdatedSeconds() {
        return updatedSeconds;
    }"
17834,getValue,"    public double getValue() {
        return value;
    }"
17835,getTimestampSeconds,"    public int getTimestampSeconds() {
        return timestampSeconds;
    }"
17836,getMetricDescription,"    public MetricDescription getMetricDescription() {
        return metricDescription;
    }"
17839,setRetryWaitSeconds,"    public void setRetryWaitSeconds(int retryWaitSeconds) {
        this.retryWaitSeconds = retryWaitSeconds;
    }"
17840,setRetryCount,"    public void setRetryCount(int retryCount) {
        this.retryCount = retryCount;
    }"
17841,setStepSize,"    public void setStepSize(Integer stepSize) {
        this.stepSize = stepSize;
    }"
17842,setEnabled,"    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }"
17843,setMissingDays,"    public void setMissingDays(int missingDays) {
        this.missingDays = missingDays;
    }"
17844,setMaxValuesCount,"    public void setMaxValuesCount(int maxValuesCount) {
        this.maxValuesCount = maxValuesCount;
    }"
17845,setRunDelayMinutes,"    public void setRunDelayMinutes(int runDelayMinutes) {
        this.runDelayMinutes = runDelayMinutes;
    }"
17846,needCheckInDb,"        private boolean needCheckInDb() {
            return lastCheckCounter > stepSize;
        }"
17847,addToCheck,"        private void addToCheck(String metric) {
            if (lastCheckCounter == 0) {
                minMetric = metric;
                maxMetric = metric;"
17848,reset,"        private void reset() {
            minMetric = null;
            maxMetric = null;
            lastCheckCounter = 0;
        }"
17849,hideMetricsBetween,"    private int hideMetricsBetween(String minMetric, String maxMetric) {
        if (minMetric == null || maxMetric == null) {
            return 0;
        }
"
17850,checkPath,"    private void checkPath(String path, MetricMinMaxChecker metricMinMaxChecker, AtomicInteger hiddenCounter) throws IOException {
        AppendableList appendableList = new AppendableList();
        metricSearch.search(path, appendableList);

        for (MetricDescription metric : appendableList.getSortedList()) {
            if (metric.isDir()) {"
17851,hide,"    private void hide() {
        log.info(""Running autohide."");
        try {
            MetricMinMaxChecker metricMinMaxChecker = new MetricMinMaxChecker();"
17852,run,"    public void run() {
        if (metricSearch.isMetricTreeLoaded()) {
            hide();"
17853,startService,"    public void startService() throws Exception {
        if (!enabled) {
            log.info(""Autohide disabled"");
            return;
        }"
17859,main,"    public static void main(String[] args) {
        System.out.println(StringUtils.capitalize(""hello""));
    }"
17860,delete,"    public void delete(ToDoItem toDoItem) {
        toDos.remove(toDoItem.getId());
    }"
17861,update,"    public void update(ToDoItem toDoItem) {
        toDos.replace(toDoItem.getId(), toDoItem);
    }"
17862,insert,"    public Long insert(ToDoItem toDoItem) {
        Long id = currentId.incrementAndGet();
        toDoItem.setId(id);
        toDos.putIfAbsent(id, toDoItem);
        return id;
    }"
17863,findById,"    public ToDoItem findById(Long id) {
        return toDos.get(id);
    }"
17864,findAll,"    public List<ToDoItem> findAll() {
        List<ToDoItem> toDoItems = new ArrayList<ToDoItem>(toDos.values());
        Collections.sort(toDoItems);
        return toDoItems;
    }"
17865,handleUnknownInput,"    private void handleUnknownInput() {
        System.out.println(""Please select a valid option!"");
    }"
17866,deleteToDoItem,"    private void deleteToDoItem() {
        ToDoItem toDoItem = findToDoItem();

        if (toDoItem != null) {"
17867,updateToDoItem,"    private void updateToDoItem() {
        ToDoItem toDoItem = findToDoItem();

        if (toDoItem != null) {"
17868,insertToDoItem,"    private void insertToDoItem() {
        ToDoItem toDoItem = askForNewToDoAction();
        Long id = toDoRepository.insert(toDoItem);
        System.out.println(""Successfully inserted to do item with ID "" + id + ""."");
    }"
17869,findToDoItem,"    private ToDoItem findToDoItem() {
        Long id = askForItemId();
        ToDoItem toDoItem = toDoRepository.findById(id);

        if (toDoItem == null) {
            System.err.println(""To do item with ID "" + id + "" could not be found."");"
17870,printToDoItem,"    private void printToDoItem() {
        ToDoItem toDoItem = findToDoItem();

        if (toDoItem != null) {"
17871,printAllToDoItems,"    private void printAllToDoItems() {
        Collection<ToDoItem> toDoItems = toDoRepository.findAll();

        if (toDoItems.isEmpty()) {"
17872,askForNewToDoAction,"    private ToDoItem askForNewToDoAction() {
        ToDoItem toDoItem = new ToDoItem();
        System.out.println(""Please enter the name of the item:"");
        toDoItem.setName(readInput());
        return toDoItem;
    }"
17873,askForItemId,"    private Long askForItemId() {
        System.out.println(""Please enter the item ID:"");
        String input = readInput();
        return Long.parseLong(input);
    }"
17874,processInput,"    public void processInput(CommandLineInput input) {
        if (input == null) {
            handleUnknownInput();"
17875,readInput,"    public String readInput() {
        return System.console().readLine(""> "");
    }"
17876,printOptions,"    public void printOptions() {
        System.out.println(""\n--- To Do Application ---"");
        System.out.println(""Please make a choice:"");
        System.out.println(""(a)ll items"");
        System.out.println(""(f)ind a specific item"");
        System.out.println(""(i)nsert a new item"");
        System.out.println(""(u)pdate an existing item"");
        System.out.println(""(d)elete an existing item"");
        System.out.println(""(e)xit"");
    }"
17877,getCommandLineInputForInput,"    public static CommandLineInput getCommandLineInputForInput(char input) {
        return INPUTS.get(input);
    }"
17878,getShortCmd,"    public char getShortCmd() {
        return shortCmd;
    }"
17879,accept,"                                public void accept(String it) {
                                    GMApplication.getInstance().getDatabase().movieDao().deleteFuture();
                                }"
17880,accept,"                                public void accept(List<MovieEntity> list) {
                                    for (int i = 0, size = list.size(); i < size; i++) {
                                        list.get(i).setRank(i);
                                    }"
17881,saveRemoteResult,"            protected void saveRemoteResult(List<MovieEntity> data) {
                if (data != null && !data.isEmpty()) {
                    Observable.just(data)"
17882,requestApi,"            protected LiveData<ApiResponse<List<MovieEntity>>> requestApi() {
                MovieService service = new ApiClient().createApi(MovieService.class);
                ApiResponse<List<MovieEntity>> response = new ApiResponse<>();
                return response.map(service.movieFutureListGet(cityId));
            }"
17883,loadFromLocal,"            protected LiveData<List<MovieEntity>> loadFromLocal() {
                return GMApplication.getInstance().getDatabase().movieDao().loadMovieFutureList();
            }"
17884,getMovieFutureList,"    public LiveData<DataResource<List<MovieEntity>>> getMovieFutureList(int cityId) {
        return new NetworkBoundResource<List<MovieEntity>>() {
            @Nullable"
17885,accept,"                                public void accept(String it) {
                                    GMApplication.getInstance().getDatabase().movieDao().deleteNow();
                                }"
17886,accept,"                                public void accept(List<MovieEntity> list) {
                                    for (int i = 0, size = list.size(); i < size; i++) {
                                        list.get(i).setRank(i);
                                        list.get(i).setNow(true);"
17888,requestApi,"            protected LiveData<ApiResponse<List<MovieEntity>>> requestApi() {
                MovieService service = new ApiClient().createApi(MovieService.class);
                ApiResponse<List<MovieEntity>> response = new ApiResponse<>();
                return response.map(service.movieNowListGet(cityId));
            }"
17889,loadFromLocal,"            protected LiveData<List<MovieEntity>> loadFromLocal() {
                return GMApplication.getInstance().getDatabase().movieDao().loadMovieNowList();
            }"
17890,getMovieNowList,"    public LiveData<DataResource<List<MovieEntity>>> getMovieNowList(int cityId) {
        return new NetworkBoundResource<List<MovieEntity>>() {
            @Nullable"
17891,getInstance,"    public static MovieRepository getInstance() {
        return SingletonHolder.sInstance;
    }"
17893,getMovieDetails,"    public LiveData<DataResource<MovieDetail>> getMovieDetails(String locationId, int movieId) {
        return new NetworkBoundResource<MovieDetail>() {
"
17896,getCityEntity,"    public CityEntity getCityEntity() {
        if (mCity.getValue() != null) {
            return mCity.getValue();
        }"
17897,accept,"                    public void accept(String it) {
                        GMApplication.getInstance().getDatabase().cityDao().updateCity(city);
                    }"
17898,updateCity,"    public void updateCity(CityEntity city) {
        mCity.postValue(city);

        Observable.just("""")"
17899,getCity,"    public LiveData<CityEntity> getCity() {
        return mCity;
    }"
17900,accept,"                                public void accept(String it) {
                                    GMApplication.getInstance().getDatabase().boxOfficeDao().delete();
                                }"
17901,accept,"                                public void accept(List<BoxOfficeEntity> list) {
                                    GMApplication.getInstance().getDatabase().boxOfficeDao().update(list);
                                }"
17902,saveRemoteResult,"            protected void saveRemoteResult(List<BoxOfficeEntity> data) {
                if (data != null && !data.isEmpty()) {
                    Observable.just(data)"
17904,loadFromLocal,"            protected LiveData<List<BoxOfficeEntity>> loadFromLocal() {
                return GMApplication.getInstance().getDatabase().boxOfficeDao().loadBoxOfficeList();
            }"
17905,ifFetchNetworkFailedThenLoadLocalData,"            protected boolean ifFetchNetworkFailedThenLoadLocalData() {
                return true;
            }"
17906,getBoxOffices,"    public LiveData<DataResource<List<BoxOfficeEntity>>> getBoxOffices() {
        return new NetworkBoundResource<List<BoxOfficeEntity>>() {
            @Override"
17907,getLinearGradient,"    public static Shader getLinearGradient(float width, float height, int startColor, int endColor) {
        float[] x = new float[2];
        float[] y = new float[2];

        x[0] = y[0] = x[1] = 0;
        y[1] = height;
"
17909,getWavePath,"    public static Path getWavePath(
            float width, float height, float amplitude, float cyclesPerSocond, float phaseShift) {
        if(amplitude > height * 2) {
            amplitude = height / 12;
        }

        int unitPixels = 15;
        float heightDiff = height - amplitude;

        Path path = new Path();
        path.moveTo(0, 0);
        path.lineTo(0, heightDiff);
        float x, y;"
17910,dpToPx,"    public static int dpToPx(Context ctx, int dp) {
        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, ctx.getResources().getDisplayMetrics());
    }"
17911,getScreenHeight,"    public static int getScreenHeight() {
        return Resources.getSystem().getDisplayMetrics().heightPixels;
    }"
17912,getScreenWidth,"    public static int getScreenWidth() {
        return Resources.getSystem().getDisplayMetrics().widthPixels;
    }"
17914,setPageTransformer,"    public void setPageTransformer(boolean reverseDrawingOrder, PageTransformer transformer, int pageLayerType) {
        if (transformer instanceof GlazyPagerTransformer) {
            ((GlazyPagerTransformer) transformer).attachedPager(this);"
17915,setPageTransformer,"    public void setPageTransformer(boolean reverseDrawingOrder, PageTransformer transformer) {
        if (transformer instanceof GlazyPagerTransformer) {
            ((GlazyPagerTransformer) transformer).attachedPager(this);"
17916,setAdapter,"    public void setAdapter(PagerAdapter adapter) {
        if (adapter instanceof GlazyFragmentPagerAdapter) {
            super.setAdapter(adapter);"
17917,init,"    public void init(Context context, AttributeSet attrs) {
        mContext = context;

        setOffscreenPageLimit(2);
        setClipToPadding(false);"
17918,getCount,"    public int getCount() {
        return CARDS_COUNT;
    }"
17919,instantiateFragment,"    public Fragment instantiateFragment(int position) {
        GlazyCard card = cards.get(position);
        return GlazyCardFragment.newInstance( card );
    }"
17920,updateCount,"    private void updateCount() {
        CARDS_COUNT = cards.size();
        notifyDataSetChanged();
    }"
17921,removeCardItem,"    public void removeCardItem(GlazyCard card) {
        try {
            cards.remove(card);"
17922,removeCardItem,"    public void removeCardItem(int position) {
        try {
            cards.remove(position);"
17923,addCardItem,"    public void addCardItem(GlazyCard card) {
        cards.add(card);
        updateCount();
    }"
17925,getImageCutHeightDP,"    public int getImageCutHeightDP() {
        return mImageCutHeightDP;
    }"
17926,getImageCutCount,"    public int getImageCutCount() {
        return mImageCutCount;
    }"
17927,getImageCutType,"    public ImageCutType getImageCutType() {
        return mImageCutType;
    }"
17928,getTintAlpha,"    public int getTintAlpha() {
        return mTintAlpha;
    }"
17929,getTintColor,"    public int getTintColor() {
        return mTintColor;
    }"
17930,isAutoTint,"    public boolean isAutoTint() {
        return mAutoTint;
    }"
17931,getLineSpacingDP,"    public int getLineSpacingDP() {
        return mLineSpacingDP;
    }"
17932,getTextmatginDP,"    public int getTextmatginDP() {
        return mTextMarginDP;
    }"
17933,getSubTitleSizeDP,"    public int getSubTitleSizeDP() {
        return mSubTitleSizeDP;
    }"
17934,getSubTitleColor,"    public int getSubTitleColor() {
        return mSubTitleColor;
    }"
17936,getTitleSizeDP,"    public int getTitleSizeDP() {
        return mTitleSizeDP;
    }"
17937,getTitleColor,"    public int getTitleColor() {
        return mTitleColor;
    }"
17939,getDescription,"    public String getDescription() {
        return mDescription;
    }"
17940,getImageRes,"    public int getImageRes() {
        return mImageRes;
    }"
17941,withBackgroundColor,"    public GlazyCard withBackgroundColor(int bgColor) {
        mBackgroundColor = bgColor;
        return this;
    }"
17942,withImageCutHeightDP,"    public GlazyCard withImageCutHeightDP(int height) {
        mImageCutHeightDP = height;
        return this;
    }"
17943,withImageCutCount,"    public GlazyCard withImageCutCount(int count) {
        mImageCutCount = count;
        return this;
    }"
17944,withImageCutType,"    public GlazyCard withImageCutType(ImageCutType cutType) {
        mImageCutType = cutType;
        return this;
    }"
17945,withTintAlpha,"    public GlazyCard withTintAlpha (int alpha) {
        mTintAlpha = alpha;
        return this;
    }"
17946,withTintColor,"    public GlazyCard withTintColor (int color) {
        mTintColor = color;
        mAutoTint = false;
        return this;
    }"
17947,withAutoTint,"    public GlazyCard withAutoTint () {
        mAutoTint = true;
        return this;
    }"
17948,withLineSpacingDP,"    public GlazyCard withLineSpacingDP(int spacing) {
        mLineSpacingDP = spacing;
        return this;
    }"
17949,withTextMarginDP,"    public GlazyCard withTextMarginDP(int margin) {
        mTextMarginDP = margin;
        return this;
    }"
17950,withSubTitleSizeDP,"    public GlazyCard withSubTitleSizeDP(int size) {
        mSubTitleSizeDP = size;
        return this;
    }"
17951,withSubTitleColor,"    public GlazyCard withSubTitleColor(int color) {
        mSubTitleColor = color;
        return this;
    }"
17952,withSubTitle,"    public GlazyCard withSubTitle(String subTitle) {
        mSubTitle = subTitle;
        return this;
    }"
17953,withTitleSizeDP,"    public GlazyCard withTitleSizeDP(int size)
    {
        mTitleSizeDP = size;
        return this;"
17954,withTitleColor,"    public GlazyCard withTitleColor(int color) {
        mTitleColor = color;
        return this;
    }"
17955,withTitle,"    public GlazyCard withTitle(String title) {
        mTitle = title;
        return this;
    }"
17956,withDescription,"    public GlazyCard withDescription(String desc) {
        mDescription = desc;
        return this;
    }"
17957,withImageRes,"    public GlazyCard withImageRes(int imgRes) {
        mImageRes = imgRes;
        return this;
    }"
17960,makeFragmentName,"    private static String makeFragmentName(AbstractFragmentPagerAdapter adapter, long id) {
        return ""android:super-switcher:"" + adapter.hashCode() + "":"" + id;
    }"
17961,restoreState,"    public void restoreState(Parcelable state, ClassLoader loader) { }
"
17962,saveState,"    public Parcelable saveState() {
        return null;
    }"
17963,isViewFromObject,"    public boolean isViewFromObject(View view, Object object) {
        return ((Fragment)object).getView() == view;
    }"
17964,finishUpdate,"    public void finishUpdate(ViewGroup container) {
        if (mCurTransaction != null) {
            mCurTransaction.commitAllowingStateLoss();"
17965,setPrimaryItem,"    public void setPrimaryItem(ViewGroup container, int position, Object object) {
        Fragment fragment = (Fragment)object;
        if (fragment != mCurrentPrimaryItem) {
            if (mCurrentPrimaryItem != null) {"
17966,destroyItem,"    public void destroyItem(ViewGroup container, int position, Object object) {
        if (mCurTransaction == null) {
            mCurTransaction = mFragmentManager.beginTransaction();
        }"
17967,instantiateItem,"    public Object instantiateItem(ViewGroup container, int position) {
        if (mCurTransaction == null) {
            mCurTransaction = mFragmentManager.beginTransaction();
        }

        Fragment fragment = getFragment(position);
        if (fragment != null) {"
17968,instantiateFragment,"    public abstract Fragment instantiateFragment(int position);
"
17969,getFragment,"    public Fragment getFragment(int position) {
        String name = makeFragmentName(this, position);
        Fragment fragment = mFragmentManager.findFragmentByTag(name);
        return fragment;
    }"
17970,startUpdate,"    public void startUpdate(ViewGroup container) { }
"
17971,isDebugEnable,"  @Override protected boolean isDebugEnable() {
    return false;
  }"
17972,getBlurRadius,"  @Override protected int getBlurRadius() {
    return mRadius;
  }"
17973,getDownScaleFactor,"  @Override protected float getDownScaleFactor() {
    return mDownScaleFactor;
  }"
17974,isActionBarBlurred,"  @Override protected boolean isActionBarBlurred() {
    return mBlurredActionBar;
  }"
17975,isDimmingEnable,"  @Override protected boolean isDimmingEnable() {
    return mDimming;
  }"
17976,setDimming,"  public void setDimming(boolean mDimming) {
    this.mDimming = mDimming;
  }"
17977,setDownScaleFactor,"  public void setDownScaleFactor(float mDownScaleFactor) {
    this.mDownScaleFactor = mDownScaleFactor;
  }"
17978,setRadius,"  public void setRadius(int mRadius) {
    this.mRadius = mRadius;
  }"
17979,setBackGroundColor,"  public void setBackGroundColor(int backGroundColor) {
    this.backGroundColor = backGroundColor;
    gd.setColor(backGroundColor);
    mDialog.findViewById(R.id.mBackground).setBackground(gd);
  }"
17980,setCornerRadius,"  public void setCornerRadius(int cornerRadius) {
    CornerRadius = cornerRadius;
  }"
17981,setBlurredActionBar,"  public void setBlurredActionBar(boolean mBlurredActionBar) {
    this.mBlurredActionBar = mBlurredActionBar;
  }"
17982,getmGifImageView,"  public GifImageView getmGifImageView() {
    return mGifImageView;
  }"
17983,setBackgroundResource,"  public void setBackgroundResource(int id) {
    this.id = id;
    setResource();
  }"
17984,setImageResource,"  public void setImageResource(int id) {
    this.id = id;
    setResource();
  }"
17985,show,"  public void show(FragmentManager fragmentManager){
    show(fragmentManager,"""");
  }"
17986,onDismiss,"  @Override public void onDismiss(DialogInterface dialog) {
    super.onDismiss(dialog);
    mDialog = null;
  }"
17987,setResource,"  private void setResource() {
    if (mDialog == null) {
      return;
    }
    setBackGroundColor(BitmapUtil.getPixColor(BitmapFactory.decodeResource(getResources(), id)));
    mGifImageView.setImageResource(id);
    gd.setColor(backGroundColor);"
17988,onCreateDialog,"  @Override public Dialog onCreateDialog(Bundle savedInstanceState) {
    if (mDialog == null) {
      mDialog = new Dialog(getActivity(), R.style.gif_dialog);
      mDialog.setContentView(R.layout.gifloading_main);"
17989,getPixColor,"  public static int getPixColor(Bitmap src) {
    int pixelColor;
    pixelColor = src.getPixel(5, 5);
    return pixelColor;
  }"
17990,getImageUrl,"    public static String getImageUrl(String body) {
        int a0 = body.indexOf(""<body>"");
        if (a0 == -1) return null;
        int b0 = body.indexOf(""<img"", a0);
        if (b0 == -1) return null;
        int c0 = body.indexOf(""http:"", b0);
        if (c0 == -1) return null;

        int d0 = body.indexOf("".jpg"", c0) + "".jpg"".length();
        if (d0 == -1) {"
17991,isNetworkAvailable,"    public static boolean isNetworkAvailable(Context context) {
       if(context !=null){
           ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
           NetworkInfo info = cm.getActiveNetworkInfo();"
17992,px2dip,"    public int px2dip(int i) {
        float f = getDensity(context);
        return (int) (((double) i - 0.5D) / (double) f);
    }"
17993,px2dip,"    public int px2dip(float f) {
        float f1 = getDensity(context);
        return (int) (((double) f - 0.5D) / (double) f1);
    }"
17994,getYdpi,"    public float getYdpi() {
        return context.getResources().getDisplayMetrics().ydpi;
    }"
17995,getXdpi,"    public float getXdpi() {
        return context.getResources().getDisplayMetrics().xdpi;
    }"
17996,getScreenWidth,"    public int getScreenWidth() {
        return context.getResources().getDisplayMetrics().widthPixels;
    }"
17997,getScreenHeight,"    public int getScreenHeight() {
        return context.getResources().getDisplayMetrics().heightPixels;
    }"
17998,getScreenDensityDpi,"    public int getScreenDensityDpi() {
        return context.getResources().getDisplayMetrics().densityDpi;
    }"
17999,getScal,"    public int getScal() {
        return (100 * getScreenWidth()) / 480;
    }"
18000,getDensity,"    public float getDensity(Context context) {
        return context.getResources().getDisplayMetrics().density;
    }"
18001,get480Height,"    public int get480Height(int i) {
        return (i * getScreenWidth()) / 480;
    }"
18002,dip2px,"    public int dip2px(int i) {
        return (int) (0.5D + (double) (getDensity(context) * (float) i));
    }"
18003,dip2px,"    public int dip2px(float f) {
        return (int) (0.5D + (double) (f * getDensity(context)));
    }"
18004,instance,"    public static ScreenUtil instance(Context context) {
        if (mScreenTools == null)
            mScreenTools = new ScreenUtil(context);
        return mScreenTools;"
18005,isSameDate,"    public static boolean isSameDate(Date date1, Date date2) {

        Calendar cal = Calendar.getInstance();
        cal.setTime(date1);
        Calendar selectedDate = Calendar.getInstance();
        selectedDate.setTime(date2);
"
18006,isHeaderTable,"  public static boolean isHeaderTable(int paramInt)
  {
    return (paramInt == head) || (paramInt == bhed);"
18007,intValue,"  public static int intValue(String paramString)
  {
    byte[] arrayOfByte = null;
    try
    {"
18008,stringValue,"  public static String stringValue(int paramInt)
  {
    String str;
    try
    {"
18009,byteValue,"  public static byte[] byteValue(int paramInt)
  {
    byte[] arrayOfByte = new byte[4];
    arrayOfByte[0] = ((byte)(0xFF & paramInt >> 24));
    arrayOfByte[1] = ((byte)(0xFF & paramInt >> 16));
    arrayOfByte[2] = ((byte)(0xFF & paramInt >> 8));
    arrayOfByte[3] = ((byte)(0xFF & paramInt));
    return arrayOfByte;"
18010,intValue,"  public static int intValue(byte[] paramArrayOfByte)
  {
    return paramArrayOfByte[0] << 24 | paramArrayOfByte[1] << 16 | paramArrayOfByte[2] << 8 | paramArrayOfByte[3];"
18011,newFontBuilder,"  public Font.Builder newFontBuilder()
  {
    return Font.Builder.getOTFBuilder(this);"
18012,setSerializationTableOrdering,"  public void setSerializationTableOrdering(List<Integer> paramList)
  {
    this.tableOrdering = new ArrayList(paramList);"
18013,serializeFont,"  public void serializeFont(Font paramFont, OutputStream paramOutputStream)
    throws IOException
  {"
18014,isCollection,"  private static boolean isCollection(ReadableFontData paramReadableFontData)
  {
    byte[] arrayOfByte = new byte[4];
    paramReadableFontData.readBytes(0, arrayOfByte, 0, arrayOfByte.length);
    return Tag.ttcf == Tag.intValue(arrayOfByte);"
18016,loadSingleOTFForBuilding,"  private Font.Builder loadSingleOTFForBuilding(WritableFontData paramWritableFontData, int paramInt)
    throws IOException
  {
    Object localObject = null;
    if (fingerprintFont()) {}
    Font.Builder localBuilder = Font.Builder.getOTFBuilder(this, paramWritableFontData, paramInt);"
18017,loadCollection,"  private Font[] loadCollection(WritableFontData paramWritableFontData)
    throws IOException
  {
    Font.Builder[] arrayOfBuilder = loadCollectionForBuilding(paramWritableFontData);
    Font[] arrayOfFont = new Font[arrayOfBuilder.length];
    for (int i = 0; i < arrayOfFont.length; i++) {"
18018,loadSingleOTF,"  private Font loadSingleOTF(WritableFontData paramWritableFontData)
    throws IOException
  {"
18019,loadFontsForBuilding,"  public Font.Builder[] loadFontsForBuilding(byte[] paramArrayOfByte)
    throws IOException
  {
    WritableFontData localWritableFontData = WritableFontData.createWritableFontData(paramArrayOfByte);
    if (isCollection(localWritableFontData)) {"
18020,loadFonts,"  public Font[] loadFonts(byte[] paramArrayOfByte)
    throws IOException
  {
    WritableFontData localWritableFontData = WritableFontData.createWritableFontData(paramArrayOfByte);
    if (isCollection(localWritableFontData)) {"
18021,isCollection,"  private static boolean isCollection(PushbackInputStream paramPushbackInputStream)
    throws IOException
  {
    byte[] arrayOfByte = new byte[4];
    paramPushbackInputStream.read(arrayOfByte);
    paramPushbackInputStream.unread(arrayOfByte);"
18022,loadCollectionForBuilding,"  private Font.Builder[] loadCollectionForBuilding(InputStream paramInputStream)
    throws IOException
  {
    WritableFontData localWritableFontData = WritableFontData.createWritableFontData(paramInputStream.available());
    localWritableFontData.copyFrom(paramInputStream);"
18023,loadSingleOTFForBuilding,"  private Font.Builder loadSingleOTFForBuilding(InputStream paramInputStream)
    throws IOException
  {
    MessageDigest localMessageDigest = null;
    if (fingerprintFont())
    {
      try"
18024,loadCollection,"  private Font[] loadCollection(InputStream paramInputStream)
    throws IOException
  {
    Font.Builder[] arrayOfBuilder = loadCollectionForBuilding(paramInputStream);
    Font[] arrayOfFont = new Font[arrayOfBuilder.length];
    for (int i = 0; i < arrayOfFont.length; i++) {"
18025,loadSingleOTF,"  private Font loadSingleOTF(InputStream paramInputStream)
    throws IOException
  {"
18026,loadFontsForBuilding,"  public Font.Builder[] loadFontsForBuilding(InputStream paramInputStream)
    throws IOException
  {
    PushbackInputStream localPushbackInputStream = new PushbackInputStream(new BufferedInputStream(paramInputStream), 4);
    if (isCollection(localPushbackInputStream)) {"
18027,loadFonts,"  public Font[] loadFonts(InputStream paramInputStream)
    throws IOException
  {
    PushbackInputStream localPushbackInputStream = new PushbackInputStream(new BufferedInputStream(paramInputStream), 4);
    if (isCollection(localPushbackInputStream)) {"
18028,fingerprintFont,"  public boolean fingerprintFont()
  {
    return this.fingerprint;"
18029,fingerprintFont,"  public void fingerprintFont(boolean paramBoolean)
  {
    this.fingerprint = paramBoolean;"
18030,getInstance,"  public static FontFactory getInstance()
  {
    return new FontFactory();"
18031,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        FontCache.getInstance(this).addFont(""alegreya"", ""Alegreya-Regular.ttf"");

        DataBindingUtil.setContentView(this, R.layout.activity_main);"
18032,get,"    public Typeface get(String fontName) {
        String fontFilename = fontMapping.get(fontName);
        if (fontFilename == null) {
            Log.e(TAG, ""Couldn't find font "" + fontName + "". Maybe you need to call addFont() first?"");
            return null;"
18033,addFont,"    public void addFont(String name, String fontFilename) {
        fontMapping.put(name, fontFilename);
    }"
18034,getInstance,"    public static FontCache getInstance(Context context) {
        if (instance == null) {
            instance = new FontCache(context.getApplicationContext());
        }"
18035,setFont,"    public static void setFont(TextView textView, String fontName) {
        textView.setTypeface(FontCache.getInstance(textView.getContext()).get(fontName));
    }"
18036,run,"    public void run() {
        try {
            while( ! downLoadThread.isInterrupted()){"
18037,onClick,"    public void onClick(View v) {
        if(!flikerProgressBar.isFinish()){
            flikerProgressBar.toggle();"
18038,downLoad,"    private void downLoad() {
        downLoadThread = new Thread(this);
        downLoadThread.start();
    }"
18040,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        flikerProgressBar = (FlikerProgressBar) findViewById(R.id.flikerbar);
        roundProgressbar = (FlikerProgressBar) findViewById(R.id.round_flikerbar);

        flikerProgressBar.setOnClickListener(this);
        roundProgressbar.setOnClickListener(this);"
18041,handleMessage,"        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            flikerProgressBar.setProgress(msg.arg1);
            roundProgressbar.setProgress(msg.arg1);
            if(msg.arg1 == 100){
                flikerProgressBar.finishLoad();"
18042,showWarning,"	private void showWarning(String text) {
		JOptionPane.showMessageDialog(this, text, ""Warning"",
				JOptionPane.WARNING_MESSAGE);"
18043,showError,"	private void showError(String text) {
		JOptionPane.showMessageDialog(this, text, ""Error"",
				JOptionPane.ERROR_MESSAGE);"
18044,getExportFolders,"	private Vector<String> getExportFolders() {
		Vector<String> ret = new Vector<String>();

		if (ch_ldpi.isSelected())
			ret.add(""ldpi"");

		if (ch_mdpi.isSelected())
			ret.add(""mdpi"");

		if (ch_tvdpi.isSelected())
			ret.add(""tvdpi"");"
18045,run,"					public void run() {
						Vector<String> export = getExportFolders();

						for (int i = 0; i < files.length; i++) {
							for (String exportString : export) {"
18046,filesDropped,"			public void filesDropped(final File[] files) {

				if (resFile == null) {
					showWarning(""Please select a destination folder first!"");
					return;
				}"
18047,actionPerformed,"			public void actionPerformed(ActionEvent arg0) {
				JFileChooser j = new JFileChooser();
				j.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
				Integer returnVal = j.showOpenDialog(btnBrowse);
				if (returnVal == JFileChooser.APPROVE_OPTION) {
					resFile = j.getSelectedFile();"
18048,run,"			public void run() {
				try {
					ResizerFrame frame = new ResizerFrame();"
18049,main,"	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {"
18050,getExtension,"	private static String getExtension(String f) {
		String extension = """";

		int i = f.lastIndexOf('.');
		if (i > 0) {
		    extension = f.substring(i+1);"
18051,getRequiredSize,"	private static int getRequiredSize(String originalSize, String resFolder,
			int width) {
		float destRatio=1;
		if(resFolder.equalsIgnoreCase(""ldpi"")) {
			destRatio = LDPI_RATIO;
		}else if(resFolder.equalsIgnoreCase(""mdpi"")) {
			destRatio = MDPI_RATIO;"
18053,run,"            public void run() {
                createAndShowGUI();
            }"
18056,getObject,"            public abstract Object getObject();
"
18058,getTransferData,"        public Object getTransferData( java.awt.datatransfer.DataFlavor flavor )

        throws java.awt.datatransfer.UnsupportedFlavorException, java.io.IOException 

        {   "
18059,getTransferDataFlavors,"        public java.awt.datatransfer.DataFlavor[] getTransferDataFlavors() 

        {   "
18060,getCustomDataFlavor,"        public java.awt.datatransfer.DataFlavor getCustomDataFlavor()

        {   return customFlavor;"
18061,getFiles,"        public java.io.File[] getFiles() {

            return files;"
18062,filesDropped,"        public abstract void filesDropped( java.io.File[] files );
"
18064,remove,"    public static boolean remove( java.awt.Component c)

    {   return remove( null, c, true );"
18067,hierarchyChanged,"        {   public void hierarchyChanged( java.awt.event.HierarchyEvent evt )

            {   log( out, ""FileDrop: Hierarchy changed."" );

                java.awt.Component parent = c.getParent();"
18069,createFileArray,"     private static File[] createFileArray(BufferedReader bReader, PrintStream out)

     {
"
18071,dropActionChanged,"                public void dropActionChanged( java.awt.dnd.DropTargetDragEvent evt ) 

                {   log( out, ""FileDrop: dropActionChanged event."" );
"
18072,dragExit,"                public void dragExit( java.awt.dnd.DropTargetEvent evt ) 

                {   log( out, ""FileDrop: dragExit event."" );
"
18073,drop,"                public void drop( java.awt.dnd.DropTargetDropEvent evt )

                {   log( out, ""FileDrop: drop event."" );
"
18074,dragOver,"                public void dragOver( java.awt.dnd.DropTargetDragEvent evt ) 
"
18075,dragEnter,"            {   public void dragEnter( java.awt.dnd.DropTargetDragEvent evt )

                {       log( out, ""FileDrop: dragEnter event."" );
"
18076,saveFields,"    public abstract void saveFields(XContentBuilder builder) throws IOException;
}"
18077,getOplogFilter,"    public abstract DBObject getOplogFilter();
"
18078,on,"    private static Timestamp<?> on(@SuppressWarnings(""rawtypes"") Map map, boolean meta) {
        String tsField = meta ? MongoDBRiver.LAST_TIMESTAMP_FIELD : MongoDBRiver.OPLOG_TIMESTAMP;
        Object timestamp = map.get(tsField);
        if (timestamp == null) {
            return null;
        }
        if (timestamp instanceof String) {
            timestamp = JSON.parse((String) timestamp);
        }"
18079,on,"    public static Timestamp<?> on(Map<String, Object> map) {
        return on(map, true);
    }"
18080,on,"    public static Timestamp<?> on(DBObject entry) {
        return on(entry.toMap(), false);
    }"
18081,compare,"    public static int compare(Timestamp oplogTimestamp, Timestamp startTimestamp) {
        return oplogTimestamp.compareTo(startTimestamp);
    }"
18082,saveFields,"        public void saveFields(XContentBuilder builder) throws IOException {
            builder.field(MongoDBRiver.LAST_TIMESTAMP_FIELD, JSON.serialize(ts));
            builder.field(MongoDBRiver.LAST_GTID_FIELD, JSONSerializers.getStrict().serialize(gtid));
        }"
18083,getOplogFilter,"        public DBObject getOplogFilter() {
            return new BasicDBObject(MongoDBRiver.MONGODB_ID_FIELD, new BasicDBObject(QueryOperators.GTE, gtid));
        }"
18084,getTime,"        public long getTime() {
            return ts.getTime();
        }"
18085,toString,"        public String toString() {
            return ""Timestamp.GTID(ts="" + JSON.serialize(ts) + "", gtid="" + JSONSerializers.getStrict().serialize(gtid) + "")"";
        }"
18086,hashCode,"        public int hashCode() {
            return Arrays.hashCode(gtid);
        }"
18087,equals,"        public boolean equals(Object o) {
            return o instanceof GTID && Arrays.equals(gtid, ((GTID) o).gtid);
        }"
18088,compareTo,"        public int compareTo(Timestamp<GTID> o) {
            return UnsignedBytes.lexicographicalComparator().compare(this.gtid, ((GTID) o).gtid);
        }"
18089,saveFields,"        public void saveFields(XContentBuilder builder) throws IOException {
            builder.field(MongoDBRiver.LAST_TIMESTAMP_FIELD, JSON.serialize(ts));
        }"
18090,getOplogFilter,"        public DBObject getOplogFilter() {
            return new BasicDBObject(MongoDBRiver.OPLOG_TIMESTAMP, new BasicDBObject(QueryOperators.GTE, ts));
        }"
18091,getTime,"        public long getTime() {
            return ts.getTime() * 1000L;
        }"
18092,toString,"        public String toString() {
            return ""Timestamp.BSON(ts="" + JSON.serialize(ts) + "")"";
        }"
18093,hashCode,"        public int hashCode() {
            return ts.hashCode();
        }"
18094,equals,"        public boolean equals(Object o) {
            return o instanceof BSON && ts.equals(((BSON) o).ts);
        }"
18095,compareTo,"        public int compareTo(Timestamp<BSON> o) {
            return this.ts.compareTo(((BSON) o).ts);
        }"
18097,run,"    public void run() {
        while (true) {
            try {"
18098,setStatus,"    public void setStatus(Status status) {
        this.status = status;
    }"
18099,getStatus,"    public Status getStatus() {
        return status;
    }"
18100,getStream,"    public BlockingQueue<QueueEntry> getStream() {
        return stream;
    }"
18101,addToStream,"    private void addToStream(final Operation operation, final Timestamp<?> currentTimestamp, final DBObject data, final String collection)
            throws InterruptedException {
        if (logger.isTraceEnabled()) {
            String dataString = data.toString();"
18102,addInsertToStream,"    private String addInsertToStream(final Timestamp<?> currentTimestamp, final DBObject data, final String collection)
            throws InterruptedException {
        totalDocuments.incrementAndGet();
        addToStream(Operation.INSERT, currentTimestamp, data, collection);
        if (data == null) {"
18103,addQueryToStream,"    private void addQueryToStream(final Operation operation, final Timestamp<?> currentTimestamp, final DBObject update,
                final String collection, final DBCollection slurpedCollection) throws InterruptedException {
        try (DBCursor cursor = slurpedCollection.find(update, findKeys)) {"
18104,addQueryToStream,"    private void addQueryToStream(final Operation operation, final Timestamp<?> currentTimestamp, final DBObject update,
            final String collection) throws InterruptedException {
        if (logger.isTraceEnabled()) {
            logger.trace(""addQueryToStream - operation [{}], currentTimestamp [{}], update [{}]"", operation, currentTimestamp, update);"
18105,isRiverStale,"    private void isRiverStale(DBCursor cursor, Timestamp<?> time) throws SlurperException {
        if (cursor == null || time == null) {
            return;
        }
        if (definition.getInitialTimestamp() != null && time.equals(definition.getInitialTimestamp())) {
            return;
        }"
18107,getObjectIdFromOplogEntry,"    private String getObjectIdFromOplogEntry(DBObject entry) {
        if (entry.containsField(MongoDBRiver.OPLOG_OBJECT)) {
            DBObject object = (DBObject) entry.get(MongoDBRiver.OPLOG_OBJECT);
            if (object.containsField(MongoDBRiver.MONGODB_ID_FIELD)) {
                return object.get(MongoDBRiver.MONGODB_ID_FIELD).toString();"
18108,applyFieldFilter,"    private DBObject applyFieldFilter(DBObject object) {
        if (object instanceof GridFSFile) {
            GridFSFile file = (GridFSFile) object;
            DBObject metadata = file.getMetaData();"
18109,filterMatch,"    private boolean filterMatch(DBObject filter, DBObject object) {
        for (String key : filter.keySet()) {
            if (!object.containsField(key)) {
                return false;"
18111,getCollectionFromNamespace,"    private String getCollectionFromNamespace(String namespace) {
        if (namespace.startsWith(definition.getMongoDb() + '.')) {
            return namespace.substring(definition.getMongoDb().length() + 1);
        }
        logger.error(""Cannot get collection from namespace [{}]"", namespace);"
18112,processAdminCommandOplogEntry,"    private void processAdminCommandOplogEntry(final DBObject entry, final Timestamp<?> startTimestamp) throws InterruptedException {
        if (logger.isTraceEnabled()) {
            logger.trace(""processAdminCommandOplogEntry - [{}]"", entry);
        }
        DBObject object = (DBObject) entry.get(MongoDBRiver.OPLOG_OBJECT);"
18114,flattenOps,"    private void flattenOps(DBObject entry) {
        Object ref = entry.removeField(MongoDBRiver.OPLOG_REF);
        Object ops = ref == null ? entry.removeField(MongoDBRiver.OPLOG_OPS) : getRefOps(ref);
        if (ops != null) {
            try {"
18116,processFullOplog,"    private DBCursor processFullOplog() throws InterruptedException, SlurperException {
        Timestamp<?> currentTimestamp = getCurrentOplogTimestamp();
        return oplogCursor(currentTimestamp);
    }"
18117,getCurrentOplogTimestamp,"    private Timestamp<?> getCurrentOplogTimestamp() {
        try (DBCursor cursor = oplogCollection.find().sort(new BasicDBObject(MongoDBRiver.INSERTION_ORDER_KEY, -1)).limit(1)) {
            return Timestamp.on(cursor.next());"
18118,isIndexEmpty,"    protected boolean isIndexEmpty() {
        return MongoDBRiver.getIndexCount(esClient, definition) == 0;
    }"
18119,riverHasIndexedFromOplog,"    protected boolean riverHasIndexedFromOplog() {
        return MongoDBRiver.getLastTimestamp(esClient, definition) != null;
    }"
18121,fromString,"    public static Operation fromString(String value) {
        if (value != null) {
            for (Operation operation : Operation.values()) {
                if (value.equalsIgnoreCase(operation.getValue())) {"
18122,getValue,"    public String getValue() {
        return value;
    }"
18123,configure,"    protected void configure() {
        bind(MongoClientService.class).asEagerSingleton();
    }"
18124,configure,"    protected void configure() {
        bind(River.class).to(MongoDBRiver.class).asEagerSingleton();
    }"
18125,getBulk,"    public Bulk getBulk() {
        return bulk;
    }"
18126,getMongoOplogNamespace,"    public String getMongoOplogNamespace() {
        return getMongoDb() + ""."" + getMongoCollection();
    }"
18127,getThrottleSize,"    public int getThrottleSize() {
        return throttleSize;
    }"
18128,getTypeName,"    public String getTypeName() {
        return typeName;
    }"
18129,getIndexName,"    public String getIndexName() {
        return indexName;
    }"
18130,isDisableIndexRefresh,"    public boolean isDisableIndexRefresh() {
        return disableIndexRefresh;
    }"
18131,isImportAllCollections,"    public boolean isImportAllCollections() {
        return importAllCollections;
    }"
18132,getStatisticsTypeName,"    public String getStatisticsTypeName() {
        return statisticsTypeName;
    }"
18133,getStatisticsIndexName,"    public String getStatisticsIndexName() {
        return statisticsIndexName;
    }"
18134,isStoreStatistics,"    public boolean isStoreStatistics() {
        return storeStatistics;
    }"
18135,getParentTypes,"    public Set<String> getParentTypes() {
        return parentTypes;
    }"
18136,isSkipInitialImport,"    public boolean isSkipInitialImport() {
        return skipInitialImport;
    }"
18137,isAdvancedTransformation,"    public boolean isAdvancedTransformation() {
        return advancedTransformation;
    }"
18138,getScriptType,"    public String getScriptType() {
        return scriptType;
    }"
18139,getScript,"    public String getScript() {
        return script;
    }"
18140,getInitialTimestamp,"    public Timestamp<?> getInitialTimestamp() {
        return initialTimestamp;
    }"
18141,getIncludeCollection,"    public String getIncludeCollection() {
        return includeCollection;
    }"
18142,getIncludeFields,"    public Set<String> getIncludeFields() {
        return includeFields;
    }"
18143,getExcludeFields,"    public Set<String> getExcludeFields() {
        return excludeFields;
    }"
18144,isMongos,"    public Boolean isMongos() {
        return isMongos;
    }"
18145,isDropCollection,"    public boolean isDropCollection() {
        return dropCollection;
    }"
18146,isMongoSSLVerifyCertificate,"    public boolean isMongoSSLVerifyCertificate() {
        return mongoSSLVerifyCertificate;
    }"
18147,isMongoUseSSL,"    public boolean isMongoUseSSL() {
        return mongoUseSSL;
    }"
18148,isMongoSecondaryReadPreference,"    public boolean isMongoSecondaryReadPreference() {
        return mongoSecondaryReadPreference;
    }"
18149,getSocketTimeout,"    public int getSocketTimeout() {
        return socketTimeout;
    }"
18150,getConnectTimeout,"    public int getConnectTimeout() {
        return connectTimeout;
    }"
18151,getMongoClientOptions,"    public MongoClientOptions getMongoClientOptions() {
        return mongoClientOptions;
    }"
18152,getMongoLocalAuthDatabase,"    public String getMongoLocalAuthDatabase() {
        return mongoLocalAuthDatabase;
    }"
18153,getMongoLocalPassword,"    public String getMongoLocalPassword() {
        return mongoLocalPassword;
    }"
18154,getMongoLocalUser,"    public String getMongoLocalUser() {
        return mongoLocalUser;
    }"
18155,getMongoAdminAuthDatabase,"    public String getMongoAdminAuthDatabase() {
        return mongoAdminAuthDatabase;
    }"
18156,getMongoAdminPassword,"    public String getMongoAdminPassword() {
        return mongoAdminPassword;
    }"
18157,getMongoAdminUser,"    public String getMongoAdminUser() {
        return mongoAdminUser;
    }"
18158,getMongoCollectionFilter,"    public BasicDBObject getMongoCollectionFilter() {
        return mongoCollectionFilter;
    }"
18159,getMongoOplogFilter,"    public BasicDBObject getMongoOplogFilter() {
        return mongoOplogFilter;
    }"
18160,isMongoGridFS,"    public boolean isMongoGridFS() {
        return mongoGridFS;
    }"
18161,getMongoCollection,"    public String getMongoCollection() {
        return mongoCollection;
    }"
18162,getMongoDb,"    public String getMongoDb() {
        return mongoDb;
    }"
18163,getRiverIndexName,"    public String getRiverIndexName() {
        return riverIndexName;
    }"
18164,getRiverName,"    public String getRiverName() {
        return riverName;
    }"
18165,getMongoServers,"    public List<ServerAddress> getMongoServers() {
        return mongoServers;
    }"
18166,addRemovePrefix,"    static String addRemovePrefix(String prefix, String object, boolean add) {
        if (prefix == null) {
            throw new IllegalArgumentException(""prefix"");
        }
        if (object == null) {
            throw new NullPointerException(""object"");
        }
        if (object.length() == 0) {
            return """";"
18167,addPrefix,"    static String addPrefix(String prefix, String object) {
        return addRemovePrefix(prefix, object, true);
    }"
18168,removePrefix,"    static String removePrefix(String prefix, String object) {
        return addRemovePrefix(prefix, object, false);
    }"
18169,convertToBasicDBObject,"    static BasicDBObject convertToBasicDBObject(String object) {
        if (object == null || object.length() == 0) {
            return new BasicDBObject();"
18170,checkClientTrusted,"                public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                }"
18171,checkServerTrusted,"                public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                }"
18172,getAcceptedIssuers,"                public X509Certificate[] getAcceptedIssuers() {
                    return null;
                }"
18173,getSSLSocketFactory,"    private static SocketFactory getSSLSocketFactory() {
        SocketFactory sslSocketFactory;
        try {
            final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
"
18175,getFlushInterval,"        public TimeValue getFlushInterval() {
            return flushInterval;
        }"
18176,getBulkSize,"        public ByteSizeValue getBulkSize() {
            return bulkSize;
        }"
18177,getBulkActions,"        public int getBulkActions() {
            return bulkActions;
        }"
18178,getConcurrentRequests,"        public int getConcurrentRequests() {
            return concurrentRequests;
        }"
18179,build,"            public Bulk build() {
                return new Bulk(this);
            }"
18180,flushInterval,"            public Builder flushInterval(TimeValue flushInterval) {
                this.flushInterval = flushInterval;
                return this;
            }"
18181,bulkSize,"            public Builder bulkSize(ByteSizeValue bulkSize) {
                this.bulkSize = bulkSize;
                return this;
            }"
18182,bulkActions,"            public Builder bulkActions(int bulkActions) {
                this.bulkActions = bulkActions;
                return this;
            }"
18183,concurrentRequests,"            public Builder concurrentRequests(int concurrentRequests) {
                this.concurrentRequests = concurrentRequests;
                return this;
            }"
18184,build,"        public MongoDBRiverDefinition build() {
            return new MongoDBRiverDefinition(this);
        }"
18185,threadsAllowedToBlockForConnectionMultiplier,"        public Builder threadsAllowedToBlockForConnectionMultiplier(int threadsAllowedToBlockForConnectionMultiplier) {
            this.threadsAllowedToBlockForConnectionMultiplier = threadsAllowedToBlockForConnectionMultiplier;
            return this;
        }"
18186,connectionsPerHost,"        public Builder connectionsPerHost(int connectionsPerHost) {
            this.connectionsPerHost = connectionsPerHost;
            return this;
        }"
18187,bulk,"        public Builder bulk(Bulk bulk) {
            this.bulk = bulk;
            return this;
        }"
18188,throttleSize,"        public Builder throttleSize(int throttleSize) {
            this.throttleSize = throttleSize;
            return this;
        }"
18189,typeName,"        public Builder typeName(String typeName) {
            this.typeName = typeName;
            return this;
        }"
18190,indexName,"        public Builder indexName(String indexName) {
            this.indexName = indexName;
            return this;
        }"
18191,scriptType,"        public Builder scriptType(String scriptType) {
            this.scriptType = scriptType;
            return this;
        }"
18192,script,"        public Builder script(String script) {
            this.script = script;
            return this;
        }"
18193,importAllCollections,"        public Builder importAllCollections(boolean importAllCollections) {
            this.importAllCollections = importAllCollections;
            return this;
        }"
18194,statisticsTypeName,"        public Builder statisticsTypeName(String statisticsTypeName) {
            this.statisticsTypeName = statisticsTypeName;
            return this;
        }"
18195,statisticsIndexName,"        public Builder statisticsIndexName(String statisticsIndexName) {
            this.statisticsIndexName = statisticsIndexName;
            return this;
        }"
18196,storeStatistics,"        public Builder storeStatistics(boolean storeStatistics) {
            this.storeStatistics = storeStatistics;
            return this;
        }"
18197,parentTypes,"        public Builder parentTypes(Set<String> parentTypes) {
            this.parentTypes = parentTypes;
            return this;
        }"
18198,skipInitialImport,"        public Builder skipInitialImport(boolean skipInitialImport) {
            this.skipInitialImport = skipInitialImport;
            return this;
        }"
18199,advancedTransformation,"        public Builder advancedTransformation(boolean advancedTransformation) {
            this.advancedTransformation = advancedTransformation;
            return this;
        }"
18200,initialTimestamp,"        public Builder initialTimestamp(BSONTimestamp initialTimestamp) {
            this.initialTimestamp = new Timestamp.BSON(initialTimestamp);
            return this;
        }"
18201,initialTimestamp,"        public Builder initialTimestamp(Binary initialTimestamp) {
            this.initialTimestamp = new Timestamp.GTID(initialTimestamp.getData(), null);
            return this;
        }"
18202,disableIndexRefresh,"        public Builder disableIndexRefresh(boolean disableIndexRefresh) {
            this.disableIndexRefresh = disableIndexRefresh;
            return this;
        }"
18203,includeCollection,"        public Builder includeCollection(String includeCollection) {
            this.includeCollection = includeCollection;
            return this;
        }"
18204,includeFields,"        public Builder includeFields(Set<String> includeFields) {
            this.includeFields = includeFields;
            return this;
        }"
18205,excludeFields,"        public Builder excludeFields(Set<String> excludeFields) {
            this.excludeFields = excludeFields;
            return this;
        }"
18206,isMongos,"        public Builder isMongos(Boolean isMongos) {
            this.isMongos = isMongos;
            return this;
        }"
18207,dropCollection,"        public Builder dropCollection(boolean dropCollection) {
            this.dropCollection = dropCollection;
            return this;
        }"
18208,mongoSSLVerifyCertificate,"        public Builder mongoSSLVerifyCertificate(boolean mongoSSLVerifyCertificate) {
            this.mongoSSLVerifyCertificate = mongoSSLVerifyCertificate;
            return this;
        }"
18209,mongoUseSSL,"        public Builder mongoUseSSL(boolean mongoUseSSL) {
            this.mongoUseSSL = mongoUseSSL;
            return this;
        }"
18210,mongoSecondaryReadPreference,"        public Builder mongoSecondaryReadPreference(boolean mongoSecondaryReadPreference) {
            this.mongoSecondaryReadPreference = mongoSecondaryReadPreference;
            return this;
        }"
18211,socketTimeout,"        public Builder socketTimeout(int socketTimeout) {
            this.socketTimeout = socketTimeout;
            return this;
        }"
18212,connectTimeout,"        public Builder connectTimeout(int connectTimeout) {
            this.connectTimeout = connectTimeout;
            return this;
        }"
18213,mongoClientOptions,"        public Builder mongoClientOptions(MongoClientOptions mongoClientOptions) {
            this.mongoClientOptions = mongoClientOptions;
            return this;
        }"
18214,mongoLocalAuthDatabase,"        public Builder mongoLocalAuthDatabase(String mongoLocalAuthDatabase) {
            this.mongoLocalAuthDatabase = mongoLocalAuthDatabase;
            return this;
        }"
18215,mongoLocalPassword,"        public Builder mongoLocalPassword(String mongoLocalPassword) {
            this.mongoLocalPassword = mongoLocalPassword;
            return this;
        }"
18216,mongoLocalUser,"        public Builder mongoLocalUser(String mongoLocalUser) {
            this.mongoLocalUser = mongoLocalUser;
            return this;
        }"
18217,mongoAdminAuthDatabase,"        public Builder mongoAdminAuthDatabase(String mongoAdminAuthDatabase) {
            this.mongoAdminAuthDatabase = mongoAdminAuthDatabase;
            return this;
        }"
18218,mongoAdminPassword,"        public Builder mongoAdminPassword(String mongoAdminPassword) {
            this.mongoAdminPassword = mongoAdminPassword;
            return this;
        }"
18219,mongoAdminUser,"        public Builder mongoAdminUser(String mongoAdminUser) {
            this.mongoAdminUser = mongoAdminUser;
            return this;
        }"
18220,mongoCollectionFilter,"        public Builder mongoCollectionFilter(BasicDBObject mongoCollectionFilter) {
            this.mongoCollectionFilter = mongoCollectionFilter;
            return this;
        }"
18221,mongoOplogFilter,"        public Builder mongoOplogFilter(BasicDBObject mongoOplogFilter) {
            this.mongoOplogFilter = mongoOplogFilter;
            return this;
        }"
18222,mongoGridFS,"        public Builder mongoGridFS(boolean mongoGridFS) {
            this.mongoGridFS = mongoGridFS;
            return this;
        }"
18223,mongoCollection,"        public Builder mongoCollection(String mongoCollection) {
            this.mongoCollection = mongoCollection;
            return this;
        }"
18224,mongoDb,"        public Builder mongoDb(String mongoDb) {
            this.mongoDb = mongoDb;
            return this;
        }"
18225,riverIndexName,"        public Builder riverIndexName(String riverIndexName) {
            this.riverIndexName = riverIndexName;
            return this;
        }"
18226,riverName,"        public Builder riverName(String riverName) {
            this.riverName = riverName;
            return this;
        }"
18227,mongoServers,"        public Builder mongoServers(List<ServerAddress> mongoServers) {
            this.mongoServers = mongoServers;
            return this;
        }"
18228,logStatistics,"    private void logStatistics(long duration) {
        if (definition.isStoreStatistics()) {
            long totalDocuments = deletedDocuments.get() + insertedDocuments.get();"
18229,dropRecreateMapping,"    private void dropRecreateMapping() throws IOException, InterruptedException {
        try {
            semaphore.acquire();"
18230,isBulkProcessorAvailable,"    private boolean isBulkProcessorAvailable() {
        NodesStatsResponse response = client.admin().cluster().prepareNodesStats().setThreadPool(true).get();
        for (NodeStats nodeStats : response.getNodes()) {
            Iterator<Stats> iterator = nodeStats.getThreadPool().iterator();
            while (iterator.hasNext()) {"
18231,getBulkQueueSize,"    private long getBulkQueueSize() {
        NodesInfoResponse response = client.admin().cluster().prepareNodesInfo().setThreadPool(true).get();
        for (NodeInfo node : response.getNodes()) {
            Iterator<Info> iterator = node.getThreadPool().iterator();
            while (iterator.hasNext()) {"
18232,checkBulkProcessorAvailability,"    private void checkBulkProcessorAvailability() {
        while (!isBulkProcessorAvailable()) {
            try {"
18233,getBulkProcessor,"    public BulkProcessor getBulkProcessor() {
        return bulkProcessor;
    }"
18234,deleteBulkRequest,"    public void deleteBulkRequest(String id, String routing, String parent) {
        logger.trace(""deleteBulkRequest - id: {} - index: {} - type: {} - routing: {} - parent: {}"", id, index, type, routing, parent);
        bulkProcessor.add(deleteRequest(index).type(type).id(id).routing(routing).parent(parent));
        deletedDocuments.incrementAndGet();
    }"
18235,addBulkRequest,"    public void addBulkRequest(String id, XContentBuilder source, String routing, String parent) {
        bulkProcessor.add(indexRequest(index).type(type).id(id).source(source).routing(routing).parent(parent));
        insertedDocuments.incrementAndGet();
    }"
18236,addBulkRequest,"    public void addBulkRequest(String id, Map<?, ?> source, String routing, String parent) {
        bulkProcessor.add(indexRequest(index).type(type).id(id).source(source).routing(routing).parent(parent));
        insertedDocuments.incrementAndGet();
    }"
18237,dropIndex,"    public void dropIndex() {
        addBulkRequest(null, DROP_INDEX, null, null);
        flushBulkProcessor.set(true);
    }"
18238,afterBulk,"        public void afterBulk(long executionId, BulkRequest request, BulkResponse response) {
            if (response.hasFailures()) {
                logger.error(""Bulk processor failed. {}"", response.buildFailureMessage());"
18239,afterBulk,"        public void afterBulk(long executionId, BulkRequest request, Throwable failure) {
            if (failure.getClass().equals(ActionRequestValidationException.class)) {
                if (logger.isTraceEnabled()) {"
18240,findLastDropCollection,"        private int findLastDropCollection(List<ActionRequest> request) {
            int index = 0;
            for (int i = 0; i < request.size(); i++) {
                ActionRequest<?> action = request.get(i);
                if (action instanceof IndexRequest) {"
18241,beforeBulk,"        public void beforeBulk(long executionId, BulkRequest request) {
            checkBulkProcessorAvailability();
            logger.trace(""beforeBulk - new bulk [{}] of items [{}]"", executionId, request.numberOfActions());
            if (flushBulkProcessor.get()) {
                logger.trace(""About to flush bulk request index[{}] - type[{}]"", index, type);"
18242,build,"        public MongoDBRiverBulkProcessor build() {
            return new MongoDBRiverBulkProcessor(river, definition, client, index, type);
        }"
18243,getCollection,"        public String getCollection() {
            return collection;
        }"
18244,getOplogTimestamp,"        public Timestamp<?> getOplogTimestamp() {
            return oplogTimestamp;
        }"
18245,getOperation,"        public Operation getOperation() {
            return operation;
        }"
18246,getData,"        public DBObject getData() {
            return data;
        }"
18247,isAttachment,"        public boolean isAttachment() {
            return (data instanceof GridFSDBFile);
        }"
18248,getIndexCount,"    public static long getIndexCount(Client client, MongoDBRiverDefinition definition) {
        if (client.admin().indices().prepareExists(definition.getIndexName()).get().isExists()) {
            if (definition.isImportAllCollections()) {
                return client.prepareCount(definition.getIndexName()).execute().actionGet().getCount();"
18249,source,"    private static XContentBuilder source(Timestamp<?> time) throws IOException {
        XContentBuilder builder = jsonBuilder().startObject().startObject(TYPE);
        time.saveFields(builder);
        return builder.endObject().endObject();
    }"
18250,setLastTimestamp,"    void setLastTimestamp(final Timestamp<?> time, final BulkProcessor bulkProcessor) {
        try {
            if (logger.isTraceEnabled()) {"
18251,getLastTimestamp,"    public static Timestamp<?> getLastTimestamp(Client client, MongoDBRiverDefinition definition) {
        client.admin().indices().prepareRefresh(definition.getRiverIndexName()).get();

        GetResponse lastTimestampResponse = client.prepareGet(definition.getRiverIndexName(), definition.getRiverName(),
                definition.getMongoOplogNamespace()).get();
"
18252,getGridFSMapping,"    private XContentBuilder getGridFSMapping() throws IOException {
        XContentBuilder mapping = jsonBuilder()
            .startObject()
                .startObject(definition.getTypeName())
                    .startObject(""properties"")"
18253,getLastProcessedTimestamp,"    protected Timestamp<?> getLastProcessedTimestamp() {
      return MongoDBRiver.getLastTimestamp(esClient, definition);
    }"
18255,internalStopRiver,"    void internalStopRiver() {
        logger.info(""Stopping"");
        try {
            if (startupThread != null) {"
18259,settings,"    public RiverSettings settings() {
        return super.settings;
    }"
18260,getCurrentOplogTimestamp,"    private Timestamp<?> getCurrentOplogTimestamp(MongoClient shardClient) {
        DBCollection oplogCollection = shardClient
                .getDB(MongoDBRiver.MONGODB_LOCAL_DATABASE)
                .getCollection(MongoDBRiver.OPLOG_COLLECTION);"
18261,getServerAddressForReplica,"    private List<ServerAddress> getServerAddressForReplica(DBObject item) {
        String definition = item.get(""host"").toString();
        if (definition.contains(""/"")) {
            definition = definition.substring(definition.indexOf(""/"") + 1);
        }
        if (logger.isDebugEnabled()) {
            logger.debug(""getServerAddressForReplica - definition: {}"", definition);
        }"
18262,getShards,"    private List<Shard> getShards(boolean isMongos) {
        List<Shard> shards = new ArrayList<>();
        if (isMongos) {
            try (DBCursor cursor = getConfigDb().getCollection(""shards"").find()) {"
18263,isMongos,"    private boolean isMongos() {
        if (definition.isMongos() != null) {
            return definition.isMongos().booleanValue();"
18264,getConfigDb,"    private DB getConfigDb() {
        DB configDb = clusterClient.getDB(MongoDBRiver.MONGODB_CONFIG_DATABASE);
        if (configDb == null) {
            throw new ElasticsearchException(
                    String.format(""Could not get %s database from MongoDB"", MongoDBRiver.MONGODB_CONFIG_DATABASE));"
18265,getAdminDb,"    private DB getAdminDb() {
        DB adminDb = clusterClient.getDB(MongoDBRiver.MONGODB_ADMIN_DATABASE);
        if (adminDb == null) {
            throw new ElasticsearchException(
                    String.format(""Could not get %s database from MongoDB"", MongoDBRiver.MONGODB_ADMIN_DATABASE));"
18267,call,"    public MongoConfig call() {
        boolean isMongos = isMongos();
        List<Shard> shards = getShards(isMongos);
        MongoConfig config = new MongoConfig(isMongos, shards);
        return config;
    }"
18268,getLatestOplogTimestamp,"        public Timestamp<?> getLatestOplogTimestamp() {
            return latestOplogTimestamp;
        }"
18269,getReplicas,"        public List<ServerAddress> getReplicas() {
            return replicas;
        }"
18271,isMongos,"    public boolean isMongos() {
        return isMongos;
    }"
18272,getShards,"    public List<Shard> getShards() {
        return shards;
    }"
18273,equals,"        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            ClientCacheKey other = (ClientCacheKey) obj;
            if (mongoClientOptions == null) {
                if (other.mongoClientOptions != null)"
18274,hashCode,"        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + ((mongoClientOptions == null) ? 0 : mongoClientOptions.hashCode());
            result = prime * result + ((mongoCredentials == null) ? 0 : mongoCredentials.hashCode());
            result = prime * result + ((servers == null) ? 0 : servers.hashCode());
            return result;
        }"
18275,getMongoShardClient,"    public MongoClient getMongoShardClient(MongoDBRiverDefinition definition, List<ServerAddress> shardServers) {
        synchronized ($lock) {
            List<ServerAddress> servers = shardServers != null ? shardServers : definition.getMongoServers();"
18276,getMongoClusterClient,"    public MongoClient getMongoClusterClient(MongoDBRiverDefinition definition) {
        return getMongoShardClient(definition, null);
    }"
18277,doClose,"    protected void doClose() throws ElasticsearchException {
        synchronized ($lock) {
            for (MongoClient mongoClient : mongoClients.values()) {"
18278,doStop,"    protected void doStop() throws ElasticsearchException {
    }"
18279,doStart,"    protected void doStart() throws ElasticsearchException {
    }"
18280,extractIndex,"    private String extractIndex(Map<String, Object> ctx) {
        String index = (String) ctx.get(""_index"");
        if (index == null) {
            index = definition.getIndexName();
        }"
18281,extractType,"    private String extractType(Map<String, Object> ctx, String defaultType) {
        Object type = ctx.get(""_type"");
        if (type == null) {
            return defaultType;"
18282,isDocumentDeleted,"    private boolean isDocumentDeleted(Map<String, Object> ctx) {
        return Boolean.TRUE.equals(ctx.get(""deleted""));
    }"
18283,isDocumentIgnored,"    private boolean isDocumentIgnored(Map<String, Object> ctx) {
        return Boolean.TRUE.equals(ctx.get(""ignore""));
    }"
18284,extractOperation,"    private Operation extractOperation(Map<String, Object> ctx) {
        Object operation = ctx.get(""operation"");
        if (operation == null) {
            return null;"
18285,extractRouting,"    private String extractRouting(Map<String, Object> ctx) {
        Object routing = ctx.get(""_routing"");
        if (routing == null) {
            return null;"
18286,extractParent,"    private String extractParent(Map<String, Object> ctx) {
        Object parent = ctx.get(""_parent"");
        if (parent == null) {
            return null;"
18287,extractObjectId,"    private String extractObjectId(Map<String, Object> ctx, String objectId) {
        Object id = ctx.get(""id"");
        if (id != null) {
            return id.toString();
        }
        id = ctx.get(MongoDBRiver.MONGODB_ID_FIELD);"
18288,hasScript,"    private boolean hasScript() {
        return definition.getScriptType() != null && definition.getScript() != null;
    }"
18289,convertDbRef,"    private Map<String, Object> convertDbRef(DBRef ref) {
        Map<String, Object> obj = new HashMap<String, Object>();
        obj.put(""id"", ref.getId());
        obj.put(""ref"", ref.getCollectionName());

        return obj;"
18290,createObjectMap,"    private Map<String, Object> createObjectMap(DBObject dbObj) {
        Map<String, Object> mapData = new HashMap<String, Object>();
        for (String key : dbObj.keySet()) {
            Object value = dbObj.get(key);
            if (value instanceof DBRef) {"
18291,build,"    private XContentBuilder build(final DBObject data, final String objectId) throws IOException {
        if (data instanceof GridFSDBFile) {
            logger.info(""Add Attachment: {} to index {} / type {}"", objectId, definition.getIndexName(), definition.getTypeName());"
18293,deleteBulkRequest,"    private void deleteBulkRequest(String objectId, String index, String type, String routing, String parent) {
        if (logger.isTraceEnabled()) {
            logger.trace(""bulkDeleteRequest - objectId: {} - index: {} - type: {} - routing: {} - parent: {}"", objectId, index, type,
                    routing, parent);
        }"
18296,releaseProcessors,"    private void releaseProcessors() {
        for (MongoDBRiverBulkProcessor processor : processors.values()) {
            processor.getBulkProcessor().close();
        }"
18297,getBulkProcessor,"    private MongoDBRiverBulkProcessor getBulkProcessor(String index, String type) {
        SimpleEntry<String, String> entry = new SimpleEntry<String, String>(index, type);
        if (!processors.containsKey(entry)) {
            processors.put(new SimpleEntry<String, String>(index, type), new MongoDBRiverBulkProcessor.Builder(river, definition, esClient,
                    index, type).build());"
18298,run,"    public void run() {
        while (context.getStatus() == Status.RUNNING) {
"
18301,addInsertToStream,"    private String addInsertToStream(final Timestamp<?> currentTimestamp, final DBObject data) throws InterruptedException {
        return addInsertToStream(currentTimestamp, data, definition.getMongoCollection());
    }"
18303,updateIndexRefresh,"    private void updateIndexRefresh(String name, Object value) {
        esClient.admin().indices().prepareUpdateSettings(name).setSettings(ImmutableMap.of(""index.refresh_interval"", value)).get();
    }"
18304,getFilterForInitialImport,"    private BasicDBObject getFilterForInitialImport(BasicDBObject filter, String id) {
        Preconditions.checkNotNull(filter);
        if (id == null) {
            return filter;
        }
        BasicDBObject idFilter = new BasicDBObject(MongoDBRiver.MONGODB_ID_FIELD, new BasicBSONObject(QueryOperators.GT, id));
        if (filter.equals(new BasicDBObject())) {"
18308,importInitial,"    public void importInitial(Timestamp<?> timestamp) {
        try {
            if (!isIndexEmpty()) {"
18309,getExceptions,"    public List<Throwable> getExceptions() {
        return exceptions;
    }"
18310,getPipelines,"    public Collection<Pipeline<R>> getPipelines() {
        return pipelines;
    }"
18311,shutdown,"    public void shutdown() throws InterruptedException, IOException {
    }"
18312,waitFor,"    public SimplePipelineExecutor<R,P> waitFor()
            throws InterruptedException, ExecutionException {
        if (executorService == null || pipelines == null || futures == null || futures.isEmpty()) {
            return this;
        }
        exceptions = new LinkedList<>();"
18313,execute,"    public SimplePipelineExecutor<R,P> execute() {
        if (pipelines == null) {
            prepare();
        }
        if (pipelines.isEmpty()) {
            throw new IllegalStateException(""pipelines empty"");
        }"
18314,prepare,"    public SimplePipelineExecutor<R,P> prepare() {
        if (provider == null) {
            throw new IllegalStateException(""no provider set"");
        }
        if (queue == null) {
            throw new IllegalStateException(""no queue set"");
        }
        this.pipelines = new LinkedList<>();"
18315,setSink,"    public SimplePipelineExecutor<R,P> setSink(PipelineSink<R> sink) {
        this.sink = sink;
        return this;
    }"
18316,setQueue,"    public SimplePipelineExecutor<R,P> setQueue(BlockingQueue<R> queue) {
        if (queue == null) {
            throw new IllegalArgumentException(""null queue is not accepted"");
        }
        this.queue = queue;"
18317,setPipelineProvider,"    public SimplePipelineExecutor<R,P> setPipelineProvider(PipelineProvider<P> provider) {
        this.provider = provider;
        return this;
    }"
18318,setConcurrency,"    public SimplePipelineExecutor<R,P> setConcurrency(int concurrency) {
        this.concurrency = concurrency;
        return this;
    }"
18319,sink,"    void sink(R request) throws IOException;
}"
18324,shutdown,"    void shutdown() throws InterruptedException, ExecutionException, IOException;
"
18325,waitFor,"    PipelineExecutor<R,P> waitFor() throws InterruptedException, ExecutionException, IOException;
"
18328,setSink,"    PipelineExecutor<R,P> setSink(PipelineSink<R> sink);
"
18329,setQueue,"    PipelineExecutor<R,P> setQueue(BlockingQueue<R> queue);
"
18330,setPipelineProvider,"    PipelineExecutor<R,P> setPipelineProvider(PipelineProvider<P> provider);
"
18331,setConcurrency,"    PipelineExecutor<R,P> setConcurrency(int concurrency);
"
18333,setQueue,"    Pipeline<R> setQueue(BlockingQueue<R> queue);
"
18334,newRequest,"    public abstract void newRequest(Pipeline<R> pipeline, R request);
"
18335,call,"    public R call() throws Exception {
        R r = null;
        try {
            r = queue.poll(5L, TimeUnit.SECONDS);
            while (r != null) {"
18336,getQueue,"    public BlockingQueue<R> getQueue() {
        return queue;
    }"
18337,setQueue,"    public Pipeline<R> setQueue(BlockingQueue<R> queue) {
        if (queue == null) {
            throw new IllegalArgumentException();
        }
        this.queue = queue;"
18338,dip2px,"    private int dip2px(float dpValue) {
        final float scale = context.getResources()
                .getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);"
18339,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        canvas.drawLine(0, blankTB, width, blankTB, linePaint);
        canvas.drawLine(0, height-blankTB, width, height-blankTB, linePaint);

        canvas.drawPath(path, pathPaint);"
18340,setDurationAndInterpolator,"    public void setDurationAndInterpolator(long duration, Interpolator interpolator) {
        if (duration <= 0)
            return;
        if (interpolator == null)
            return;

        int w = width - blankLR * 2;
        int h = height - blankTB * 2;

        path.reset();
        path.moveTo(blankLR, height-blankTB);
        int factor = (int)(duration / w + (duration % w > 0 ? 1 : 0));
        int i = 0;"
18343,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        canvas.drawPath(path, paint);
    }"
18345,bodyContentLength,"    public long bodyContentLength() {
        ResponseBody body = response.body();
        if (body == null) {
            return -1;"
18346,closeByteStream,"    public void closeByteStream() throws IOException {
        ResponseBody body = response.body();
        if (body == null) {
            throw new IOException(""Response body is null"");"
18347,openByteStream,"    public InputStream openByteStream() throws IOException {
        ResponseBody body = response.body();
        if (body == null) {
            throw new IOException(""Response body is null"");"
18348,header,"    public String header(String name, String defaultValue) {
        return response.header(name, defaultValue);
    }"
18349,isSuccessful,"    public boolean isSuccessful() {
        return response.isSuccessful();
    }"
18350,code,"    public int code() {
        return response.code();
    }"
18351,execute,"    public NetworkResponse execute(NetworkRequest request) throws IOException {
        Request.Builder requestBuilder = new Request.Builder()
                .url(request.url());

        if (request.method() == NetworkRequest.Method.HEAD) {
            requestBuilder = requestBuilder.head();
        }"
18352,waitForLock,"        private void waitForLock() {
            try {
                synchronized (lock) {"
18353,thenPerform,"        T thenPerform(Action<T> action) {
            if (criteria.isNotSatisfied()) {
                waitForLock();
            }"
18355,waitFor,"    static <T> ThenPerform<T> waitFor(Criteria criteria, Object lock) {
        return new ThenPerform<>(criteria, lock);
    }"
18356,isNotSatisfied,"        boolean isNotSatisfied() {
            return toWaitFor == null;
        }"
18357,update,"        void update(ToWaitFor toWaitFor) {
            this.toWaitFor = toWaitFor;
        }"
18358,toString,"    public String toString() {
        return ""VersionOnePartialDownloadBatch{""
                + ""batch="" + batch"
18359,hashCode,"    public int hashCode() {
        int result = batch != null ? batch.hashCode() : 0;
        result = 31 * result + (originalFileLocations != null ? originalFileLocations.hashCode() : 0);
        return result;
    }"
18360,equals,"    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }"
18361,originalFileLocations,"    public List<String> originalFileLocations() {
        return originalFileLocations;
    }"
18362,batch,"    public Batch batch() {
        return batch;
    }"
18364,cloneDownloadFilesWithSize,"    private void cloneDownloadFilesWithSize(String selectedFileSize) {
        cloneCallback.onUpdate(""Cloning Files..."");
        List<String> localFileLocations = localFileLocations();
        String fileName = String.format(DOWNLOAD_FILE_NAME_FORMAT, selectedFileSize);

        for (String localFileLocation : localFileLocations) {"
18365,copyAssetToFile,"    private void copyAssetToFile(String assetName, File outputFile) {
        InputStream inputStream = null;
        OutputStream myOutput = null;
        int length;
        try {
            inputStream = assetManager.open(assetName);"
18366,createFileIfDoesNotExist,"    private void createFileIfDoesNotExist(File outputFile) {
        boolean parentPathDoesNotExist = !outputFile.getParentFile().exists();
        if (parentPathDoesNotExist) {
            Log.w(TAG, String.format(""path: %s doesn't exist, creating parent directories..."", outputFile.getAbsolutePath()));
            parentPathDoesNotExist = !outputFile.getParentFile().mkdirs();"
18367,cloneDatabase,"    private void cloneDatabase() {
        cloneCallback.onUpdate(""Cloning Database..."");
        File outputFile = new File(originalDatabaseLocation);
        createFileIfDoesNotExist(outputFile);
        copyAssetToFile(DATABASE_NAME, outputFile);
    }"
18368,cloneDatabaseWithDownloadSize,"    void cloneDatabaseWithDownloadSize(final String selectedFileSize) {
        executor.execute(() -> {
            cloneDatabase();"
18369,onUpdate,"        void onUpdate(String updateMessage);
    }"
18371,update,"    public void update(DownloadBatchStatus downloadBatchStatus) {
"
18372,setCallback,"    public void setCallback(DownloadBatchStatusCallback callback) {
"
18373,toString,"        public String toString() {
            return ""TestStorageRoot{""
                    + ""path='"" + path + '\''"
18374,hashCode,"        public int hashCode() {
            return path != null ? path.hashCode() : 0;
        }"
18375,equals,"        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;"
18376,path,"        public String path() {
            return path;
        }"
18377,create,"    public static StorageRoot create() {
        return new TestStorageRoot();
    }"
18384,build,"        StubCursor build() {
            return new StubCursor(columns, rowsByColumn);
        }"
18385,with,"        Builder with(String columnName, String value, String... values) {
            if (columns.contains(columnName)) {
                Log.w(getClass().getSimpleName(), ""Cursor already contains column: "" + columnName);
                return this;
            }

            columns.add(columnName);

            List<String> copyRowValues = new ArrayList<>();"
18386,respond,"    public Bundle respond(Bundle bundle) {
        return null;
    }"
18387,getExtras,"    public Bundle getExtras() {
        return null;
    }"
18389,getWantsAllOnMoveCalls,"    public boolean getWantsAllOnMoveCalls() {
        return false;
    }"
18390,getNotificationUri,"    public Uri getNotificationUri() {
        return null;
    }"
18391,setNotificationUri,"    public void setNotificationUri(ContentResolver contentResolver, Uri uri) {
"
18392,unregisterDataSetObserver,"    public void unregisterDataSetObserver(DataSetObserver dataSetObserver) {
"
18393,registerDataSetObserver,"    public void registerDataSetObserver(DataSetObserver dataSetObserver) {
"
18394,unregisterContentObserver,"    public void unregisterContentObserver(ContentObserver contentObserver) {
"
18395,registerContentObserver,"    public void registerContentObserver(ContentObserver contentObserver) {
"
18397,close,"    public void close() {
        position = -1;
        isClosed = true;
    }"
18398,requery,"    public boolean requery() {
        return false;
    }"
18400,isNull,"    public boolean isNull(int i) {
        return false;
    }"
18401,getType,"    public int getType(int i) {
        return FIELD_TYPE_STRING;
    }"
18402,getDouble,"    public double getDouble(int i) {
        String doubleAsString = getString(i);
        return Double.parseDouble(doubleAsString);
    }"
18403,getFloat,"    public float getFloat(int i) {
        String floatAsString = getString(i);
        return Float.parseFloat(floatAsString);
    }"
18404,getLong,"    public long getLong(int i) {
        String longAsString = getString(i);
        return Long.parseLong(longAsString);
    }"
18405,getInt,"    public int getInt(int i) {
        return 0;
    }"
18406,getShort,"    public short getShort(int i) {
        return 0;
    }"
18407,copyStringToBuffer,"    public void copyStringToBuffer(int i, CharArrayBuffer charArrayBuffer) {
"
18408,getString,"    public String getString(int i) {
        String columnName = columnNames.get(i);
        List<String> rowsInColumn = rowsByColumn.get(columnName);
        return rowsInColumn.get(position);
    }"
18409,getBlob,"    public byte[] getBlob(int i) {
        return new byte[0];
    }"
18410,getColumnCount,"    public int getColumnCount() {
        return columnNames.size();
    }"
18411,getColumnNames,"    public String[] getColumnNames() {
        return columnNames.toArray(new String[columnNames.size()]);
    }"
18412,getColumnName,"    public String getColumnName(int i) {
        return columnNames.get(i);
    }"
18413,getColumnIndexOrThrow,"    public int getColumnIndexOrThrow(String s) throws IllegalArgumentException {
        int columnIndex = getColumnIndex(s);
        if (columnIndex == -1) {
            throw new IllegalArgumentException(""Could not find index of column with: "" + s);
        }"
18414,getColumnIndex,"    public int getColumnIndex(String s) {
        for (int i = 0; i < columnNames.size(); i++) {
            if (columnNames.get(i).equals(s)) {
                return i;"
18415,isAfterLast,"    public boolean isAfterLast() {
        String firstColumn = columnNames.get(0);
        return position >= rowsByColumn.get(firstColumn).size();
    }"
18416,isBeforeFirst,"    public boolean isBeforeFirst() {
        return position < 0;
    }"
18417,isLast,"    public boolean isLast() {
        String firstColumn = columnNames.get(0);
        return position == rowsByColumn.get(firstColumn).size() - 1;
    }"
18418,isFirst,"    public boolean isFirst() {
        return position == 0;
    }"
18419,moveToPrevious,"    public boolean moveToPrevious() {
        position--;
        return !isBeforeFirst();
    }"
18420,moveToNext,"    public boolean moveToNext() {
        position++;
        return !isAfterLast();
    }"
18421,moveToLast,"    public boolean moveToLast() {
        String firstColumn = columnNames.get(0);
        position = rowsByColumn.get(firstColumn).size() - 1;
        return true;
    }"
18422,moveToFirst,"    public boolean moveToFirst() {
        position = 0;
        return true;
    }"
18423,moveToPosition,"    public boolean moveToPosition(int i) {
        position = i;
        return true;
    }"
18424,move,"    public boolean move(int i) {
        int moveTo = position + i;
        if (moveTo > getCount()) {
            return false;
        }
"
18425,getPosition,"    public int getPosition() {
        return position;
    }"
18426,getCount,"    public int getCount() {
        String firstColumn = columnNames.get(0);
        return rowsByColumn.get(firstColumn).size();
    }"
18427,createMissingStorageRoot,"    public static StorageRoot createMissingStorageRoot() {
        return () -> """";
    }"
18428,createPrimaryStorageDownloadsDirectoryRoot,"    public static StorageRoot createPrimaryStorageDownloadsDirectoryRoot(Context context) {
        return new PrimaryStorageDownloadsDirectoryRoot(context);
    }"
18430,hasViolatedRule,"    public boolean hasViolatedRule(File storageDirectory, FileSize downloadFileSize) {
        for (StorageRequirementRule requirementRule : rules) {
            if (requirementRule.hasViolatedRule(storageDirectory, downloadFileSize)) {
                return true;"
18431,addRule,"    void addRule(StorageRequirementRule storageRequirementRule) {
        rules.add(storageRequirementRule);
    }"
18432,newInstance,"    static StorageRequirementRules newInstance() {
        return new StorageRequirementRules(new ArrayList<>());
    }"
18433,createPercentageBasedRule,"    public static StorageRequirementRule createPercentageBasedRule(@FloatRange(from = 0.0, to = 0.5) float percentageOfStorageRemaining) {
        return new PercentageBasedRemainingStorageRequirementRule(new StorageCapacityReader(), percentageOfStorageRemaining);
    }"
18434,createByteBasedRule,"    public static StorageRequirementRule createByteBasedRule(long bytesRemainingAfterDownload) {
        return new ByteBasedRemainingStorageRequirementRule(new StorageCapacityReader(), bytesRemainingAfterDownload);
    }"
18435,hasViolatedRule,"    boolean hasViolatedRule(File storageDirectory, FileSize downloadFileSize);
"
18436,storageCapacityInBytes,"    long storageCapacityInBytes(String path) {
        StatFs statFs = new StatFs(path);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
            return statFs.getTotalBytes();"
18437,delete,"    public void delete(String table, String whereClause, String selectionArgument, String... selectionArguments) {
        List<String> arguments = new ArrayList<>();
        arguments.add(selectionArgument);
        arguments.addAll(Arrays.asList(selectionArguments));

        sqLiteDatabase.delete(table, whereClause, arguments.toArray(new String[arguments.size()]));"
18438,endTransaction,"    public void endTransaction() {
        sqLiteDatabase.endTransaction();
    }"
18439,setTransactionSuccessful,"    public void setTransactionSuccessful() {
        sqLiteDatabase.setTransactionSuccessful();
    }"
18440,startTransaction,"    public void startTransaction() {
        sqLiteDatabase.beginTransaction();
    }"
18441,deleteDatabase,"    public void deleteDatabase() {
        File outputFile = new File(sqLiteDatabase.getPath());
        if (outputFile.exists()) {
            boolean deleted = outputFile.delete();"
18442,close,"    public void close() {
        sqLiteDatabase.close();
    }"
18443,rawQuery,"    public Cursor rawQuery(String query, String selectionArgument, String... selectionArguments) {
        List<String> arguments = new ArrayList<>();
        arguments.add(selectionArgument);
        arguments.addAll(Arrays.asList(selectionArguments));

        return sqLiteDatabase.rawQuery(query, arguments.toArray(new String[arguments.size()]));"
18444,rawQuery,"    public Cursor rawQuery(String query) {
        return sqLiteDatabase.rawQuery(query, null);
    }"
18445,createNotificationInfo,"        NotificationInformation createNotificationInfo(NotificationCustomizer.NotificationDisplayState displayState, int id) {
            return notificationInformation()
                    .withNotificationDisplayState(displayState)"
18446,setUp,"        public void setUp() {
            given(notificationCreator.createNotification(any(DownloadBatchStatus.class))).willReturn(createNotificationInfo(SINGLE_PERSISTENT_NOTIFICATION, 100));

            notificationDispatcher = new ServiceNotificationDispatcher<>(lock, serviceCriteria, notificationCreator, notificationManager);"
18447,waitsForServiceToExist_whenUpdatingNotification,"        public void waitsForServiceToExist_whenUpdatingNotification() {
            notificationDispatcher.setService(downloadService);

            notificationDispatcher.updateNotification(DOWNLOAD_BATCH_STATUS);"
18450,dismissesStackedNotification_whenUpdatingNotification,"        public void dismissesStackedNotification_whenUpdatingNotification() {
            NotificationInformation notificationInfo = createNotificationInfo(SINGLE_PERSISTENT_NOTIFICATION, 100);

            notificationDispatcher.updateNotification(DOWNLOAD_BATCH_STATUS);
"
18451,addsOngoingEvent_whenStackingNonDismissibleNotification,"        public void addsOngoingEvent_whenStackingNonDismissibleNotification() {
            NotificationInformation notificationInfo = createNotificationInfo(STACK_NOTIFICATION_NOT_DISMISSIBLE, 100);
            given(notificationCreator.createNotification(DOWNLOAD_BATCH_STATUS)).willReturn(notificationInfo);

            notificationDispatcher.updateNotification(DOWNLOAD_BATCH_STATUS);
"
18453,stacksNonDismissibleNotification,"        public void stacksNonDismissibleNotification() {
            NotificationInformation notificationInfo = createNotificationInfo(STACK_NOTIFICATION_NOT_DISMISSIBLE, 100);
            given(notificationCreator.createNotification(DOWNLOAD_BATCH_STATUS)).willReturn(notificationInfo);

            notificationDispatcher.updateNotification(DOWNLOAD_BATCH_STATUS);

            verify(downloadService, never()).stop(true);"
18455,stacksDismissibleNotification,"        public void stacksDismissibleNotification() {
            NotificationInformation notificationInfo = createNotificationInfo(STACK_NOTIFICATION_DISMISSIBLE, 100);
            given(notificationCreator.createNotification(DOWNLOAD_BATCH_STATUS)).willReturn(notificationInfo);

            notificationDispatcher.updateNotification(DOWNLOAD_BATCH_STATUS);

            verify(downloadService, never()).stop(true);"
18456,showsSinglePersistentNotification,"        public void showsSinglePersistentNotification() {
            NotificationInformation notificationInfo = createNotificationInfo(SINGLE_PERSISTENT_NOTIFICATION, 100);
            given(notificationCreator.createNotification(DOWNLOAD_BATCH_STATUS)).willReturn(notificationInfo);

            notificationDispatcher.updateNotification(DOWNLOAD_BATCH_STATUS);
"
18457,setUp,"        public void setUp() {
            super.setUp();
            notificationDispatcher.setService(downloadService);
        }"
18458,waitsForServiceToExist_whenUpdatingNotifications,"        public void waitsForServiceToExist_whenUpdatingNotifications() {
            notificationDispatcher.updateNotification(DOWNLOAD_BATCH_STATUS);
        }"
18459,evaluate,"                    public void evaluate() throws Throwable {
                        try {
                            super.evaluate();"
18460,apply,"            public Statement apply(Statement base, Description description) {
                return new FailOnTimeout(base, 500) {
                    @Override"
18461,setService,"    void setService(DownloadManagerService service) {
        this.service = service;
        serviceCriteria.update(service);
    }"
18462,dismissPersistentIfCurrent,"    private void dismissPersistentIfCurrent(NotificationInformation notificationInformation) {
        if (persistentNotificationId == notificationInformation.getId()) {
            service.stop(true);"
18463,stackNotificationNotDismissible,"    private void stackNotificationNotDismissible(NotificationInformation notificationInformation) {
        dismissPersistentIfCurrent(notificationInformation);
        Notification notification = notificationInformation.getNotification();
        notification.flags |= Notification.FLAG_ONGOING_EVENT;
        notificationManager.notify(NOTIFICATION_TAG, notificationInformation.getId(), notification);
    }"
18464,stackNotification,"    private void stackNotification(NotificationInformation notificationInformation) {
        dismissPersistentIfCurrent(notificationInformation);
        Notification notification = notificationInformation.getNotification();
        notificationManager.notify(NOTIFICATION_TAG, notificationInformation.getId(), notification);
    }"
18465,updatePersistentNotification,"    private void updatePersistentNotification(NotificationInformation notificationInformation) {
        persistentNotificationId = notificationInformation.getId();
        service.start(notificationInformation.getId(), notificationInformation.getNotification());
    }"
18466,dismissStackedNotification,"    private void dismissStackedNotification(NotificationInformation notificationInformation) {
        notificationManager.cancel(NOTIFICATION_TAG, notificationInformation.getId());
    }"
18467,executeUpdateNotification,"    private Wait.ThenPerform.Action<Void> executeUpdateNotification(T payload) {
        return () -> {
            NotificationInformation notificationInformation = notificationCreator.createNotification(payload);"
18468,updateNotification,"    void updateNotification(T payload) {
        Wait.<Void>waitFor(serviceCriteria, waitForDownloadService)
                .thenPerform(executeUpdateNotification(payload));"
18469,createFixedRateTimerScheduler,"    static ActionScheduler createFixedRateTimerScheduler(long frequencyInMillis) {
        return new FixedRateTimerActionScheduler(new Timer(), frequencyInMillis, new HashMap<>());
    }"
18471,loadAllFilesFor,"    List<RoomFile> loadAllFilesFor(String batchId);
"
18473,rawFileIdFrom,"    private String rawFileIdFrom(DownloadBatchTitle batch, CompletedDownloadFile completedDownloadFile) {
        if (completedDownloadFile.fileId() == null || completedDownloadFile.fileId().isEmpty()) {
            return batch.asString() + UUID.randomUUID();"
18475,update,"    public boolean update(DownloadBatchId downloadBatchId, boolean notificationSeen) {
        RoomBatch roomBatch = database.roomBatchDao().load(downloadBatchId.rawId());
        if (roomBatch == null) {
            return false;
        }
        roomBatch.notificationSeen = notificationSeen;
        database.roomBatchDao().update(roomBatch);"
18476,update,"    public boolean update(DownloadBatchId downloadBatchId, DownloadBatchStatus.Status status) {
        RoomBatch roomBatch = database.roomBatchDao().load(downloadBatchId.rawId());
        if (roomBatch == null) {
            return false;
        }

        roomBatch.status = status.toRawValue();"
18477,delete,"    public boolean delete(DownloadBatchId downloadBatchId) {
        RoomBatch roomBatch = database.roomBatchDao().load(downloadBatchId.rawId());
        if (roomBatch == null) {
            return false;
        }
"
18478,getDownloadsFilePersisted,"    private List<DownloadsFilePersisted> getDownloadsFilePersisted(List<RoomFile> roomFiles) {
        List<DownloadsFilePersisted> filePersistedList = new ArrayList<>(roomFiles.size());
        for (RoomFile roomFile : roomFiles) {
            DownloadsFilePersisted filePersisted = new LiteDownloadsFilePersisted(
                    DownloadBatchIdCreator.createSanitizedFrom(roomFile.batchId),"
18479,loadFiles,"    public List<DownloadsFilePersisted> loadFiles(DownloadBatchId downloadBatchId) {
        List<RoomFile> roomFiles = database.roomFileDao().loadAllFilesFor(downloadBatchId.rawId());
        return getDownloadsFilePersisted(roomFiles);
    }"
18480,loadAllFiles,"    public List<DownloadsFilePersisted> loadAllFiles() {
        List<RoomFile> roomFiles = database.roomFileDao().loadAllFiles();
        return getDownloadsFilePersisted(roomFiles);
    }"
18482,loadBatches,"    public List<DownloadsBatchPersisted> loadBatches() {
        List<RoomBatch> roomBatches = database.roomBatchDao().loadAll();

        List<DownloadsBatchPersisted> batchPersistedList = new ArrayList<>(roomBatches.size());
        for (RoomBatch roomBatch : roomBatches) {
            DownloadsBatchPersisted batchPersisted = new LiteDownloadsBatchPersisted("
18484,transactionSuccess,"    public void transactionSuccess() {
        database.setTransactionSuccessful();
    }"
18485,endTransaction,"    public void endTransaction() {
        database.endTransaction();
    }"
18486,startTransaction,"    public void startTransaction() {
        database.beginTransaction();
    }"
18487,newInstance,"    static RoomDownloadsPersistence newInstance(Context context) {
        RoomAppDatabase database = RoomAppDatabase.obtainInstance(context);
        return new RoomDownloadsPersistence(database);
    }"
18494,migrate,"        public void migrate(@NonNull SupportSQLiteDatabase database) {
            database.execSQL(""ALTER TABLE RoomBatch ADD COLUMN 'storage_root' TEXT DEFAULT '"" + storageRoot.path() + ""'"");
        }"
18496,newInstance,"    static RoomAppDatabase newInstance(Context context) {
        StorageRoot storageRoot = StorageRootFactory.createPrimaryStorageDownloadsDirectoryRoot(context.getApplicationContext());
        return Room.databaseBuilder(
                context.getApplicationContext(),"
18497,obtainInstance,"    static RoomAppDatabase obtainInstance(Context context) {
        if (singleInstance == null) {
            synchronized (RoomAppDatabase.class) {
                if (singleInstance == null) {"
18500,path,"    public String path() {
        return context.getApplicationContext().getFilesDir().getAbsolutePath() + DOWNLOADS_DIR;
    }"
18502,createStorageCapacityReader,"    private static StorageCapacityReader createStorageCapacityReader() {
        StorageCapacityReader storageCapacityReader = mock(StorageCapacityReader.class);
        given(storageCapacityReader.storageCapacityInBytes(anyString())).willReturn(CAPACITY_ONE_GB_IN_BYTES);
        return storageCapacityReader;
    }"
18503,createFile,"    private static File createFile() {
        File file = mock(File.class);
        given(file.getPath()).willReturn(""any_path"");
        given(file.getUsableSpace()).willReturn(USABLE_TWO_HUNDRED_MB_IN_BYTES);
        return file;
    }"
18504,violatesRule_whenRemainingFileSizeIsGreaterThanRestriction,"    public void violatesRule_whenRemainingFileSizeIsGreaterThanRestriction() {
        given(fileSize.remainingSize()).willReturn(REMAINING_OVER_ONE_HUNDRED_MB_IN_BYTES);

        boolean hasViolatedRule = storageRequirementRule.hasViolatedRule(file, fileSize);
"
18505,doesNotViolateRule_whenRemainingFileSizeIsLessThanRestriction,"    public void doesNotViolateRule_whenRemainingFileSizeIsLessThanRestriction() {
        given(fileSize.remainingSize()).willReturn(REMAINING_ONE_HUNDRED_MB_IN_BYTES);

        boolean hasViolatedRule = storageRequirementRule.hasViolatedRule(file, fileSize);
"
18507,close,"    public void close() {
        if (fileOutputStream == null) {
            Logger.w(""Abort closing stream, does not exist."");
            return;"
18508,getCurrentSize,"    public long getCurrentSize(FilePath filePath) {
        File file = new File(filePath.path());
        return file.length();
    }"
18509,delete,"    public void delete(FilePath absoluteFilePath) {
        if (absoluteFilePath == null || absoluteFilePath.isUnknown()) {
            Logger.w(""Cannot delete, you must create the file first."");
            return;
        }

        File fileToDelete = new File(absoluteFilePath.path());
        if (!fileToDelete.exists()) {"
18510,write,"    public boolean write(byte[] buffer, int offset, int numberOfBytesToWrite) {
        if (fileOutputStream == null) {
            Logger.e(""Cannot write, you must create the file first"");
            return false;"
18511,ensureParentDirectoriesExistFor,"    private boolean ensureParentDirectoriesExistFor(File outputFile) {
        boolean parentExists = outputFile.getParentFile().exists();
        if (parentExists) {
            return true;
        }
"
18512,create,"    public FilePersistenceResult create(FilePath absoluteFilePath, FileSize fileSize) {
        if (fileSize.isTotalSizeUnknown()) {
            return FilePersistenceResult.ERROR_UNKNOWN_TOTAL_FILE_SIZE;
        }

        if (absoluteFilePath.isUnknown()) {"
18513,initialiseWith,"    public void initialiseWith(Context context, StorageRequirementRule storageRequirementRule) {
        this.storageRequirementRule = storageRequirementRule;
    }"
18514,createDownloadBatchIdFrom,"    private DownloadBatchId createDownloadBatchIdFrom(String originalFileId, String batchId) {
        if (originalFileId == null || originalFileId.isEmpty()) {
            String hashedString = String.valueOf(batchId.hashCode());
            return DownloadBatchIdCreator.createSanitizedFrom(hashedString);
        }"
18515,extractMigrations,"    List<VersionOnePartialDownloadBatch> extractMigrations() {
        Cursor batchesCursor = database.rawQuery(BATCHES_QUERY);

        List<VersionOnePartialDownloadBatch> partialMigrations = new ArrayList<>();
        while (batchesCursor.moveToNext()) {

            String batchId = batchesCursor.getString(BATCH_ID_COLUMN);"
18516,channelId,"    public String channelId() {
        return notificationChannel.getId();
    }"
18518,toString,"    public String toString() {
        return String.format(""Optional<%s>"", isAbsent() ? ""Absent"" : data.toString());
    }"
18519,hashCode,"    public int hashCode() {
        return data != null ? data.hashCode() : 0;
    }"
18520,equals,"    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;"
18524,getOrElse,"    T getOrElse(Func0<T> elseFunc) {
        return isPresent() ? get() : elseFunc.call();
    }"
18525,map,"    <P> Optional<P> map(Func1<T, P> transformation) {
        return isPresent() ? Optional.of(transformation.call(get())) : absent();
    }"
18526,filterNot,"    Optional<T> filterNot(Predicate<T> condition) {
        return filter((it) -> !condition.isValid(it));
    }"
18527,filter,"    Optional<T> filter(Predicate<T> condition) {
        return isPresent() && condition.isValid(get()) ? this : absent();
    }"
18528,or,"    Optional<T> or(Func0<Optional<T>> elseFunc) {
        return isPresent() ? this : elseFunc.call();
    }"
18529,or,"    Optional<T> or(Optional<T> elseCase) {
        return isPresent() ? this : elseCase;
    }"
18530,or,"    T or(T elseCase) {
        return isPresent() ? get() : elseCase;
    }"
18531,get,"    T get() {
        if (!isPresent()) {
            throw new IllegalStateException(""You must check if data is present before using get()"");
        }"
18532,isAbsent,"    boolean isAbsent() {
        return !isPresent();
    }"
18533,isPresent,"    boolean isPresent() {
        return data != null;
    }"
18534,of,"    static <T> Optional<T> of(T data) {
        if (data == null) {
            throw new IllegalArgumentException(""Data cannot be null. Use Optional.fromNullable(maybeNullData)."");
        }"
18535,fromNullable,"    static <T> Optional<T> fromNullable(T data) {
        if (data == null) {
            return absent();
        }"
18536,absent,"    static <T> Optional<T> absent() {
        return ABSENT;
    }"
18537,notificationDisplayState,"            public NotificationCustomizer.NotificationDisplayState notificationDisplayState() {
                return notificationDisplayState;
            }"
18538,getNotification,"            public Notification getNotification() {
                return notification;
            }"
18539,getId,"            public int getId() {
                return id;
            }"
18540,build,"    NotificationInformation build() {
        return new NotificationInformation() {
            @Override"
18541,withNotificationDisplayState,"    NotificationInformationFixtures withNotificationDisplayState(NotificationCustomizer.NotificationDisplayState notificationDisplayState) {
        this.notificationDisplayState = notificationDisplayState;
        return this;
    }"
18542,withNotification,"    NotificationInformationFixtures withNotification(Notification notification) {
        this.notification = notification;
        return this;
    }"
18543,withId,"    NotificationInformationFixtures withId(int id) {
        this.id = id;
        return this;
    }"
18544,notificationInformation,"    static NotificationInformationFixtures notificationInformation() {
        return new NotificationInformationFixtures();
    }"
18545,notificationDisplayState,"    NotificationCustomizer.NotificationDisplayState notificationDisplayState();
}"
18548,customNotificationFrom,"    Notification customNotificationFrom(NotificationCompat.Builder builder, T payload);
"
18549,notificationDisplayState,"    NotificationDisplayState notificationDisplayState(T payload);
"
18550,createNotification,"    NotificationInformation createNotification(T notificationPayload);
}"
18551,setNotificationChannelProvider,"    void setNotificationChannelProvider(NotificationChannelProvider notificationChannelProvider);
"
18553,registerNotificationChannel,"    void registerNotificationChannel(Context context);
"
18554,bodyContentLength,"            public long bodyContentLength() {
                return bodyContentLength;
            }"
18555,closeByteStream,"            public void closeByteStream() throws IOException {
                inputStream.close();
            }"
18556,openByteStream,"            public InputStream openByteStream() throws IOException {
                return inputStream;
            }"
18557,header,"            public String header(String name, String defaultValue) {
                return header;
            }"
18558,isSuccessful,"            public boolean isSuccessful() {
                return isSuccessful;
            }"
18559,code,"            public int code() {
                return code;
            }"
18560,build,"    NetworkResponse build() {
        return new NetworkResponse() {
            @Override"
18561,withBodyContentLength,"    NetworkResponseFixtures withBodyContentLength(long bodyContentLength) {
        this.bodyContentLength = bodyContentLength;
        return this;
    }"
18562,withInputStream,"    NetworkResponseFixtures withInputStream(InputStream inputStream) {
        this.inputStream = inputStream;
        return this;
    }"
18563,withHeader,"    NetworkResponseFixtures withHeader(String header) {
        this.header = header;
        return this;
    }"
18564,withSuccessful,"    NetworkResponseFixtures withSuccessful(boolean successful) {
        isSuccessful = successful;
        return this;
    }"
18565,withCode,"    NetworkResponseFixtures withCode(int code) {
        this.code = code;
        return this;
    }"
18566,aNetworkResponse,"    static NetworkResponseFixtures aNetworkResponse() {
        return new NetworkResponseFixtures();
    }"
18568,closeByteStream,"    void closeByteStream() throws IOException;
"
18569,openByteStream,"    InputStream openByteStream() throws IOException;
"
18570,header,"    String header(String name, String defaultValue);
"
18573,toString,"        public String toString() {
            return ""StubNetworkRequest{"" +
                    ""headers="" + headers +"
18574,hashCode,"        public int hashCode() {
            int result = headers.hashCode();
            result = 31 * result + url.hashCode();
            result = 31 * result + method.hashCode();
            return result;
        }"
18575,equals,"        public boolean equals(Object o) {
            if (this == o) return true;
            if (!(o instanceof StubNetworkRequest)) return false;

            StubNetworkRequest that = (StubNetworkRequest) o;

            if (!headers.equals(that.headers)) return false;
            if (!url.equals(that.url)) return false;"
18576,method,"        public Method method() {
            return method;
        }"
18577,url,"        public String url() {
            return url;
        }"
18578,headers,"        public Map<String, String> headers() {
            return headers;
        }"
18579,build,"    NetworkRequest build() {
        return new StubNetworkRequest(headers, url, method);
    }"
18580,withMethod,"    NetworkRequestFixtures withMethod(NetworkRequest.Method method) {
        this.method = method;
        return this;
    }"
18581,withUrl,"    NetworkRequestFixtures withUrl(String url) {
        this.url = url;
        return this;
    }"
18582,withHeader,"    NetworkRequestFixtures withHeader(String key, String value) {
        headers.put(key, value);
        return this;
    }"
18583,aNetworkRequest,"    static NetworkRequestFixtures aNetworkRequest() {
        return new NetworkRequestFixtures();
    }"
18584,assertThatNetworkRequestsAreEqual,"    private void assertThatNetworkRequestsAreEqual(NetworkRequest networkRequest, NetworkRequest expectedNetworkRequest) {
        assertThat(networkRequest.headers()).isEqualTo(expectedNetworkRequest.headers());
        assertThat(networkRequest.method()).isEqualTo(expectedNetworkRequest.method());
        assertThat(networkRequest.url()).isEqualTo(expectedNetworkRequest.url());
    }"
18589,createDownloadRequestWithDownloadedBytesHeader,"    NetworkRequest createDownloadRequestWithDownloadedBytesHeader(String url, long currentSize, long totalSize) {
        Map<String, String> headers = new HashMap<>();
        String headerValue = String.format(DOWNLOADED_BYTES_VALUE_FORMAT, currentSize, totalSize - 1);
        headers.put(""Range"", headerValue);

        return new LiteNetworkRequest(headers, url, NetworkRequest.Method.GET);"
18590,createDownloadRequest,"    NetworkRequest createDownloadRequest(String url) {
        return new LiteNetworkRequest(new HashMap<>(), url, NetworkRequest.Method.GET);
    }"
18591,createFileSizeBodyRequest,"    NetworkRequest createFileSizeBodyRequest(String url) {
        return new LiteNetworkRequest(DISABLE_COMPRESSION_HEADERS, url, NetworkRequest.Method.GET);
    }"
18592,createFileSizeHeadRequest,"    NetworkRequest createFileSizeHeadRequest(String url) {
        return new LiteNetworkRequest(DISABLE_COMPRESSION_HEADERS, url, NetworkRequest.Method.HEAD);
    }"
18593,rawMethod,"        public String rawMethod() {
            return rawMethod;
        }"
18597,returnsFileSize_whenResponseSuccessful,"    public void returnsFileSize_whenResponseSuccessful() throws IOException {
        given(httpClient.execute(requestCreator.createFileSizeHeadRequest(ANY_RAW_URL))).willReturn(SUCCESSFUL_RESPONSE);

        FileSize fileSize = fileSizeRequester.requestFileSize(ANY_RAW_URL);
"
18598,returnsUnknownSize_whenResponseIsUnsuccessful,"    public void returnsUnknownSize_whenResponseIsUnsuccessful() throws IOException {
        given(httpClient.execute(requestCreator.createFileSizeHeadRequest(ANY_RAW_URL))).willReturn(UNSUCCESSFUL_RESPONSE);
        given(httpClient.execute(requestCreator.createFileSizeBodyRequest(ANY_RAW_URL))).willReturn(UNSUCCESSFUL_RESPONSE);

        FileSize fileSize = fileSizeRequester.requestFileSize(ANY_RAW_URL);
"
18599,returnsUnknownSize_whenHttpClientErrors,"    public void returnsUnknownSize_whenHttpClientErrors() throws IOException {
        given(httpClient.execute(requestCreator.createFileSizeHeadRequest(ANY_RAW_URL))).willThrow(IOException.class);

        FileSize fileSize = fileSizeRequester.requestFileSize(ANY_RAW_URL);
"
18600,setUp,"    public void setUp() {
        fileSizeRequester = new NetworkFileSizeRequester(httpClient, requestCreator);
    }"
18601,requestFileSizeThroughBodyRequest,"    private long requestFileSizeThroughBodyRequest(String url) throws IOException {
        NetworkRequest downloadRequest = requestCreator.createFileSizeBodyRequest(url);
        NetworkResponse response = httpClient.execute(downloadRequest);
        long fileSize = ZERO_FILE_SIZE;
        if (response.isSuccessful()) {
            fileSize = response.bodyContentLength();
            response.closeByteStream();"
18603,executeRequestFileSize,"    private long executeRequestFileSize(String url) throws IOException {
        long fileSize = requestFileSizeThroughHeaderRequest(url);
        if (fileSize == UNKNOWN_CONTENT_LENGTH || fileSize == ZERO_FILE_SIZE) {
            Logger.w(String.format(""file size header request '%s' returned %s, we'll try with a body request"", url, fileSize));
            fileSize = requestFileSizeThroughBodyRequest(url);"
18604,requestFileSize,"    public FileSize requestFileSize(String url) {
        try {
            long fileSize = executeRequestFileSize(url);
            if (fileSize == UNKNOWN_CONTENT_LENGTH || fileSize == ZERO_FILE_SIZE) {"
18605,stopsEmittingBytes_whenStoppingDownload,"    public void stopsEmittingBytes_whenStoppingDownload() {
        networkFileDownloader.startDownloading(ANY_RAW_URL, UNKNOWN_FILE_SIZE, callback);

        networkFileDownloader.stopDownloading();
"
18606,emitsDownloadFinished_whenRequestExecutionFails,"    public void emitsDownloadFinished_whenRequestExecutionFails() throws IOException {
        given(httpClient.execute(requestCreator.createDownloadRequest(ANY_RAW_URL))).willThrow(IOException.class);

        networkFileDownloader.startDownloading(ANY_RAW_URL, UNKNOWN_FILE_SIZE, callback);
"
18607,emitsError_whenRequestExecutionFails,"    public void emitsError_whenRequestExecutionFails() throws IOException {
        IOException ioException = mock(IOException.class);
        given(ioException.getMessage()).willReturn(MESSAGE);
        given(httpClient.execute(requestCreator.createDownloadRequest(ANY_RAW_URL))).willThrow(ioException);

        networkFileDownloader.startDownloading(ANY_RAW_URL, UNKNOWN_FILE_SIZE, callback);
"
18608,emitsDownloadFinished_whenResponseCodeIsInvalid,"    public void emitsDownloadFinished_whenResponseCodeIsInvalid() throws IOException {
        given(httpClient.execute(requestCreator.createDownloadRequest(ANY_RAW_URL))).willReturn(INVALID_RESPONSE);

        networkFileDownloader.startDownloading(ANY_RAW_URL, UNKNOWN_FILE_SIZE, callback);
"
18610,closesByteStream_whenDownloaded,"    public void closesByteStream_whenDownloaded() throws IOException {
        NetworkResponse networkResponse = spy(aNetworkResponse().build());
        given(httpClient.execute(requestCreator.createDownloadRequest(ANY_RAW_URL))).willReturn(networkResponse);

        networkFileDownloader.startDownloading(ANY_RAW_URL, UNKNOWN_FILE_SIZE, callback);
"
18612,setUp,"    public void setUp() {
        networkFileDownloader = new NetworkFileDownloader(httpClient, requestCreator);
    }"
18613,stopDownloading,"    public void stopDownloading() {
        canDownload = false;
    }"
18614,createRequestFrom,"    private NetworkRequest createRequestFrom(String url, FileSize fileSize) {
        if (fileSize.areBytesDownloadedKnown()) {
            return requestCreator.createDownloadRequestWithDownloadedBytesHeader(url, fileSize.currentSize(), fileSize.totalSize());"
18615,isValid,"    private boolean isValid(int responseCode) {
        return responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_PARTIAL;
    }"
18616,processResponse,"    private void processResponse(Callback callback, NetworkResponse response, int responseCode, String url) throws IOException {
        if (isValid(responseCode)) {
            byte[] buffer = new byte[BUFFER_SIZE];"
18617,startDownloading,"    public void startDownloading(String url, FileSize fileSize, Callback callback) {
        canDownload = true;

        NetworkRequest request = createRequestFrom(url, fileSize);
        NetworkResponse response = null;
        try {
            response = httpClient.execute(request);"
18618,returnsOriginalPath_whenFileSchemeIsNotPresent,"    public void returnsOriginalPath_whenFileSchemeIsNotPresent() {
        String originalPath = ""/data/data/com.novoda.downloadmanager.demo.simple/files/Pictures/penguins.dat"";

        String sanitizedPath = MigrationStoragePathSanitizer.sanitize(originalPath);
"
18619,stripsScheme_whenOriginalPathContainsFileScheme,"    public void stripsScheme_whenOriginalPathContainsFileScheme() {
        String originalPath = ""file:/data/data/com.novoda.downloadmanager.demo.simple/files/Pictures/penguins.dat"";

        String sanitizedPath = MigrationStoragePathSanitizer.sanitize(originalPath);
"
18620,sanitize,"    static String sanitize(String originalFilePath) {
        return originalFilePath.replace(FILE_SCHEME_TO_REMOVE, EMPTY);
    }"
18621,returnsAbsolutePathAndFileName_whenAssetPathContainsMultipleSubdirectories,"    public void returnsAbsolutePathAndFileName_whenAssetPathContainsMultipleSubdirectories() {
        String assetUrl = ""/data/data/com.novoda.downloadmanager.demo.simple/files/Pictures/foo/bar/thechase.dat"";

        FilePath migrationPath = MigrationPathExtractor.extractMigrationPath(BASE_PATH, assetUrl, DOWNLOAD_BATCH_ID);
"
18622,returnsAbsolutePathAndFileName_whenAssetPathContainsSingleSubdirectory,"    public void returnsAbsolutePathAndFileName_whenAssetPathContainsSingleSubdirectory() {
        String assetUrl = ""/data/data/com.novoda.downloadmanager.demo.simple/files/Pictures/foo/thechase.dat"";

        FilePath migrationPath = MigrationPathExtractor.extractMigrationPath(BASE_PATH, assetUrl, DOWNLOAD_BATCH_ID);
"
18623,returnsAbsolutePathAndFileName_whenAssetPathConsistsOfFileNameOnly,"    public void returnsAbsolutePathAndFileName_whenAssetPathConsistsOfFileNameOnly() {
        String assetUrl = ""/data/data/com.novoda.downloadmanager.demo.simple/files/Pictures/thechase.dat"";

        FilePath migrationPath = MigrationPathExtractor.extractMigrationPath(BASE_PATH, assetUrl, DOWNLOAD_BATCH_ID);
"
18624,removeSubstring,"    private static String removeSubstring(String source, String subString) {
        return source.replaceAll(subString, EMPTY);
    }"
18625,regexUsablePathSeparator,"    private static String regexUsablePathSeparator() {
        return File.separatorChar == '\\' ? ""\\\\"" : File.separator;
    }"
18626,extractFileName,"    private static String extractFileName(String assetUri) {
        String[] subPaths = assetUri.split(regexUsablePathSeparator());
        return subPaths.length == 0 ? assetUri : subPaths[subPaths.length - 1];
    }"
18627,sanitizeBatchIdPath,"    private static String sanitizeBatchIdPath(String batchIdPath) {
        return batchIdPath.replaceAll(""[:\\\\/*?|<>]"", ""_"");
    }"
18628,prependBatchIdTo,"    private static String prependBatchIdTo(String filePath, DownloadBatchId downloadBatchId) {
        return sanitizeBatchIdPath(downloadBatchId.rawId()) + File.separatorChar + filePath;
    }"
18629,extractRelativePath,"    private static String extractRelativePath(String basePath, String assetPath) {
        String subPathWithFileName = removeSubstring(assetPath, basePath);
        String fileName = extractFileName(subPathWithFileName);
        return removeSubstring(subPathWithFileName, fileName);
    }"
18631,onUpdate,"    private void onUpdate(String message) {
        callbackHandler.post(() -> migrationJobCallback.onUpdate(message));
    }"
18632,closeStream,"    private void closeStream(Closeable closeable) {
        if (closeable != null) {
            try {"
18634,migrateV1FileToV2Location,"    private void migrateV1FileToV2Location(CompletedDownloadFile completedDownloadFile) {
        FileInputStream inputStream = null;
        FileOutputStream outputStream = null;
        try {
            File originalFile = new File(completedDownloadFile.originalFileLocation());"
18635,deleteVersionOneFile,"    private void deleteVersionOneFile(String originalFileLocation) {
        if (originalFileLocation != null && !originalFileLocation.isEmpty()) {
            File file = new File(originalFileLocation);"
18636,originalFileUsedInFurtherBatches,"    private boolean originalFileUsedInFurtherBatches(String originalFile,
                                                     List<VersionOnePartialDownloadBatch> partialDownloadBatches,
                                                     List<CompletedDownloadBatch> completeDownloadBatches) {

        for (VersionOnePartialDownloadBatch partialDownloadBatch : partialDownloadBatches) {"
18640,logAllFiles,"    private void logAllFiles(File... files) {
        for (File file : files) {
            if (file.isDirectory()) {"
18641,onStopTrackingTouch,"            public void onStopTrackingTouch(SeekBar seekBar) {
                Log.d(TAG, ""SeekBar#onStopTrackingTouch"");
            }"
18642,onStartTrackingTouch,"            public void onStartTrackingTouch(SeekBar seekBar) {
                Log.d(TAG, ""SeekBar#onStartTrackingTouch"");
            }"
18643,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                long maxSizeOfBatch = MAX_BATCH_SIZE * progress / batchSizeSeekBar.getMax();
                batchSizeLabel.setText(getString(R.string.max_batch_size, maxSizeOfBatch));
                batchSizeProvider.setMaxSizeOfBatch(maxSizeOfBatch);
            }"
18644,onBatchResumed,"            public void onBatchResumed() {
                downloadManager.resume(BATCH_ID_2);
            }"
18645,onBatchPaused,"            public void onBatchPaused() {
                downloadManager.pause(BATCH_ID_2);
            }"
18646,onBatchResumed,"            public void onBatchResumed() {
                downloadManager.resume(BATCH_ID_1);
            }"
18647,onBatchPaused,"            public void onBatchPaused() {
                downloadManager.pause(BATCH_ID_1);
            }"
18649,e,"    void e(Throwable throwable, Object... message);
}"
18651,w,"    void w(Throwable throwable, Object... message);
"
18653,d,"    void d(Throwable throwable, Object... message);
"
18658,e,"    public static void e(Throwable throwable, Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
18659,e,"    public static void e(Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
18660,w,"    public static void w(Throwable throwable, Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
18661,w,"    public static void w(Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
18662,d,"    public static void d(Throwable throwable, Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
18663,d,"    public static void d(Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
18664,i,"    public static void i(Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
18665,v,"    public static void v(Object... message) {
        for (int i = 0; i < HANDLES.size(); i++) {
            LogHandle handle = HANDLES.get(i);"
18666,detachAll,"    static void detachAll() {
        HANDLES.clear();
    }"
18667,detach,"    static void detach(LogHandle handle) {
        HANDLES.remove(handle);
    }"
18668,attach,"    static void attach(LogHandle handle) {
        HANDLES.add(handle);
    }"
18669,hashCode,"    public int hashCode() {
        int result = headers != null ? headers.hashCode() : 0;
        result = 31 * result + (url != null ? url.hashCode() : 0);
        result = 31 * result + (method != null ? method.hashCode() : 0);
        return result;
    }"
18670,equals,"    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
"
18671,method,"    public Method method() {
        return method;
    }"
18672,url,"    public String url() {
        return url;
    }"
18673,headers,"    public Map<String, String> headers() {
        return headers;
    }"
18674,onRunJob,"    protected Result onRunJob(Params params) {
        liteDownloadManager.submitAllStoredDownloads(() -> Logger.v(""LiteJobDownload all jobs submitted""));
        Logger.v(""LiteJobDownload run network recovery job"");
        return Result.SUCCESS;
    }"
18675,create,"    public Job create(String tag) {
        if (tag.equals(TAG)) {
            return new LiteJobDownload(liteDownloadManager);
        }"
18676,hashCode,"    public int hashCode() {
        int result = (int) (currentSize ^ (currentSize >>> 32));
        result = 31 * result + (int) (totalSize ^ (totalSize >>> 32));
        return result;
    }"
18678,toString,"    public String toString() {
        return ""LiteFileSize{""
                + ""currentSize="" + currentSize"
18679,copy,"    public LiteFileSize copy() {
        return new LiteFileSize(currentSize, totalSize);
    }"
18680,setCurrentSize,"    public void setCurrentSize(long currentSize) {
        this.currentSize = currentSize;
    }"
18681,setTotalSize,"    public void setTotalSize(long totalSize) {
        this.totalSize = totalSize;
    }"
18682,addToCurrentSize,"    public void addToCurrentSize(long newBytes) {
        currentSize += newBytes;
    }"
18683,remainingSize,"    public long remainingSize() {
        return totalSize - currentSize;
    }"
18684,totalSize,"    public long totalSize() {
        return totalSize;
    }"
18685,currentSize,"    public long currentSize() {
        return currentSize;
    }"
18686,areBytesDownloadedKnown,"    public boolean areBytesDownloadedKnown() {
        return currentSize > ZERO_BYTES;
    }"
18687,isTotalSizeKnown,"    public boolean isTotalSizeKnown() {
        return totalSize > ZERO_BYTES;
    }"
18688,isTotalSizeUnknown,"    public boolean isTotalSizeUnknown() {
        return totalSize <= ZERO_BYTES;
    }"
18689,toString,"    public String toString() {
        return ""LiteFilePath{""
                + ""path='"" + path + '\''"
18690,hashCode,"    public int hashCode() {
        return path != null ? path.hashCode() : 0;
    }"
18692,isUnknown,"    public boolean isUnknown() {
        return path.equalsIgnoreCase(FilePathCreator.unknownFilePath().path());
    }"
18693,path,"    public String path() {
        return path;
    }"
18694,updateAllowedConnectionType,"    public void updateAllowedConnectionType(ConnectionType allowedConnectionType) {
        connectionType = allowedConnectionType;
    }"
18695,scheduleRecovery,"    public void scheduleRecovery() {
        JobRequest.Builder builder = new JobRequest.Builder(LiteJobCreator.TAG)
                .setExecutionWindow(ONE_SECOND_IN_MILLIS, FIVE_MINUTES_IN_MILLIS)
                .setRequirementsEnforced(ENFORCE_NETWORK_REQUIREMENTS);

        switch (connectionType) {
            case ALL:
                builder.setRequiredNetworkType(JobRequest.NetworkType.CONNECTED);
                break;"
18696,downloadFileId,"    public DownloadFileId downloadFileId() {
        return downloadFileId;
    }"
18698,totalFileSize,"    public long totalFileSize() {
        return totalFileSize;
    }"
18699,filePath,"    public FilePath filePath() {
        return filePath;
    }"
18700,downloadBatchId,"    public DownloadBatchId downloadBatchId() {
        return downloadBatchId;
    }"
18701,onTaskRemoved,"    public void onTaskRemoved(Intent rootIntent) {
        super.onTaskRemoved(rootIntent);
    }"
18702,onDestroy,"    public void onDestroy() {
        executor.shutdown();
        super.onDestroy();
    }"
18703,releaseHeldCpuWakeLock,"    private void releaseHeldCpuWakeLock() {
        if (wakeLock.isHeld()) {
            wakeLock.release();"
18704,acquireCpuWakeLock,"    private void acquireCpuWakeLock() {
        PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
        if (powerManager != null) {
            wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, WAKELOCK_TAG);"
18705,download,"    public void download(DownloadBatch downloadBatch, DownloadBatchStatusCallback callback) {
        callback.onUpdate(downloadBatch.status().copy());
        downloadBatch.setCallback(callback);

        executor.execute(() -> {"
18706,onBind,"    public IBinder onBind(Intent intent) {
        return binder;
    }"
18707,getService,"        DownloadService getService() {
            return LiteDownloadService.this;
        }"
18708,stop,"    public void stop(boolean removeNotification) {
        stopForeground(removeNotification);
    }"
18709,start,"    public void start(int id, Notification notification) {
        startForeground(id, notification);
    }"
18710,onCreate,"    public void onCreate() {
        super.onCreate();
        executor = Executors.newSingleThreadExecutor();
        binder = new DownloadServiceBinder();
    }"
18711,storageRoot,"    public String storageRoot() {
        return storageRoot;
    }"
18712,notificationSeen,"    public boolean notificationSeen() {
        return notificationSeen;
    }"
18713,downloadedDateTimeInMillis,"    public long downloadedDateTimeInMillis() {
        return downloadedDateTimeInMillis;
    }"
18714,downloadBatchTitle,"    public DownloadBatchTitle downloadBatchTitle() {
        return downloadBatchTitle;
    }"
18715,downloadBatchStatus,"    public DownloadBatchStatus.Status downloadBatchStatus() {
        return status;
    }"
18717,setupFileOperations,"        private void setupFileOperations() {
            given(fileOperations.fileDownloaderCreator()).willReturn(fileDownloaderCreator);
            given(fileDownloaderCreator.create()).willReturn(fileDownloader);
        }"
18718,setupNetworkRecoveryCreator,"        private void setupNetworkRecoveryCreator() {
            DownloadsNetworkRecoveryCreator.createDisabled();
        }"
18719,setupDownloadStatusResponse,"        private void setupDownloadStatusResponse() {
            willAnswer(invocation -> {
                downloadFileStatus = invocation.getArgument(0);"
18720,setupDownloadBatchStatusesResponse,"        private void setupDownloadBatchStatusesResponse() {
            willAnswer(invocation -> {
                downloadBatchStatuses = invocation.getArgument(0);"
18721,setupDownloadBatchesResponse,"        private void setupDownloadBatchesResponse() {
            willAnswer(invocation -> {
                DownloadsBatchPersistence.LoadBatchesCallback loadBatchesCallback = invocation.getArgument(1);"
18723,throwException_whenUpdatedWithNullConnectionType,"        public void throwException_whenUpdatedWithNullConnectionType() {
            liteDownloadManager.updateAllowedConnectionType(null);
        }"
18724,stopFileDownloader_whenUpdatedInDownloadManager_andConnectionTypeNotAllowed,"        public void stopFileDownloader_whenUpdatedInDownloadManager_andConnectionTypeNotAllowed() {
            given(connectionChecker.isAllowedToDownload()).willReturn(false);

            liteDownloadManager.updateAllowedConnectionType(ANY_CONNECTION_TYPE);
"
18725,updateAllowedConnectionTypeInConnectionChecker_whenUpdatedInDownloadManager,"        public void updateAllowedConnectionTypeInConnectionChecker_whenUpdatedInDownloadManager() {
            liteDownloadManager.updateAllowedConnectionType(ANY_CONNECTION_TYPE);

            verify(connectionChecker).updateAllowedConnectionType(ANY_CONNECTION_TYPE);"
18726,getsDownloadStatusMatchingIdWithSynchronousCall_whenServiceAlreadyExists,"        public void getsDownloadStatusMatchingIdWithSynchronousCall_whenServiceAlreadyExists() {
            DownloadFileStatus fileStatus = liteDownloadManager.getDownloadFileStatusWithMatching(DOWNLOAD_BATCH_ID, DOWNLOAD_FILE_ID);

            assertThat(fileStatus).isEqualTo(DOWNLOAD_FILE_STATUS);"
18727,getsDownloadStatusMatchingId_whenServiceAlreadyExists,"        public void getsDownloadStatusMatchingId_whenServiceAlreadyExists() {
            liteDownloadManager.getDownloadFileStatusWithMatching(DOWNLOAD_BATCH_ID, DOWNLOAD_FILE_ID, downloadFileStatusCallback);

            assertThat(downloadFileStatus).isEqualTo(DOWNLOAD_FILE_STATUS);"
18728,getsAllBatchStatusesWithSynchronousCall_whenServiceAlreadyExists,"        public void getsAllBatchStatusesWithSynchronousCall_whenServiceAlreadyExists() {
            List<DownloadBatchStatus> allDownloadBatchStatuses = liteDownloadManager.getAllDownloadBatchStatuses();

            assertThat(allDownloadBatchStatuses).containsExactly(BATCH_STATUS, ADDITIONAL_BATCH_STATUS);"
18729,getsAllBatchStatuses_whenServiceAlreadyExists,"        public void getsAllBatchStatuses_whenServiceAlreadyExists() {
            liteDownloadManager.getAllDownloadBatchStatuses(allBatchStatusesCallback);

            assertThat(downloadBatchStatuses).containsExactly(BATCH_STATUS, ADDITIONAL_BATCH_STATUS);"
18730,removesCallbackFromInternalList,"        public void removesCallbackFromInternalList() {
            liteDownloadManager.removeDownloadBatchCallback(downloadBatchCallback);

            assertThat(downloadBatchCallbacks).doesNotContain(downloadBatchCallback);"
18731,addsCallbackToInternalList,"        public void addsCallbackToInternalList() {
            DownloadBatchStatusCallback additionalDownloadBatchCallback = mock(DownloadBatchStatusCallback.class);

            liteDownloadManager.addDownloadBatchCallback(additionalDownloadBatchCallback);
"
18732,doesNotRemoveBatchFromMap_whenDeletingBatch,"        public void doesNotRemoveBatchFromMap_whenDeletingBatch() {
            liteDownloadManager.delete(DOWNLOAD_BATCH_ID);

            assertThat(downloadingBatches).containsKey(DOWNLOAD_BATCH_ID);"
18733,deletesBatch,"        public void deletesBatch() {
            liteDownloadManager.delete(DOWNLOAD_BATCH_ID);

            verify(downloadBatch).delete();"
18734,doesNotDelete_whenBatchIdIsUnknown,"        public void doesNotDelete_whenBatchIdIsUnknown() {
            liteDownloadManager.delete(new LiteDownloadBatchId(""unknown""));

            verifyZeroInteractions(downloadBatch, additionalDownloadBatch);"
18735,triggersDownload_whenResumingBatch,"        public void triggersDownload_whenResumingBatch() {
            given(downloadBatch.status()).willReturn(anInternalDownloadsBatchStatus().build());

            liteDownloadManager.resume(DOWNLOAD_BATCH_ID);
"
18736,resumesBatch,"        public void resumesBatch() {
            given(downloadBatch.status()).willReturn(anInternalDownloadsBatchStatus().build());

            liteDownloadManager.resume(DOWNLOAD_BATCH_ID);
"
18737,doesNotResume_whenBatchIsAlreadyDownloading,"        public void doesNotResume_whenBatchIsAlreadyDownloading() {
            given(downloadBatch.status()).willReturn(anInternalDownloadsBatchStatus().withStatus(DownloadBatchStatus.Status.DOWNLOADING).build());

            liteDownloadManager.resume(DOWNLOAD_BATCH_ID);

            InOrder inOrder = inOrder(downloadBatch);
            inOrder.verify(downloadBatch).status();"
18738,doesNotResume_whenBatchIdIsUnknown,"        public void doesNotResume_whenBatchIdIsUnknown() {
            liteDownloadManager.pause(new LiteDownloadBatchId(""unknown""));

            verifyZeroInteractions(downloadBatch, additionalDownloadBatch);"
18739,pausesBatch,"        public void pausesBatch() {
            liteDownloadManager.pause(DOWNLOAD_BATCH_ID);

            verify(downloadBatch).pause();"
18740,doesNotPause_whenBatchIdIsUnknown,"        public void doesNotPause_whenBatchIdIsUnknown() {
            liteDownloadManager.pause(new LiteDownloadBatchId(""unknown""));

            verifyZeroInteractions(downloadBatch, additionalDownloadBatch);"
18741,doesNotDownload_whenBatchIsAlreadyBeingDownloaded,"        public void doesNotDownload_whenBatchIsAlreadyBeingDownloaded() {
            liteDownloadManager.download(BATCH);

            verify(downloadManagerDownloader, never()).download(BATCH, downloadingBatches);"
18742,downloadGivenBatch_whenBatchIsNotAlreadyBeingDownloaded,"        public void downloadGivenBatch_whenBatchIsNotAlreadyBeingDownloaded() {
            downloadingBatches.clear();

            liteDownloadManager.download(BATCH);
"
18743,notifies_whenSubmittingAllStoredDownloads,"        public void notifies_whenSubmittingAllStoredDownloads() {
            liteDownloadManager.submitAllStoredDownloads(allStoredDownloadsSubmittedCallback);

            verify(allStoredDownloadsSubmittedCallback).onAllDownloadsSubmitted();"
18744,doesNotPutBatchesIntoDownloadsMap_whenSubmittingAllStoredDownloads,"        public void doesNotPutBatchesIntoDownloadsMap_whenSubmittingAllStoredDownloads() {
            downloadingBatches.clear();

            liteDownloadManager.submitAllStoredDownloads(allStoredDownloadsSubmittedCallback);
"
18746,setsDownloadService,"        public void setsDownloadService() {
            verify(downloadManagerDownloader).setDownloadService(downloadService);
        }"
18747,setUp,"        public void setUp() {
            super.setUp();
            liteDownloadManager.initialise(downloadService);
        }"
18748,waitsForServiceToExist_whenGettingDownloadStatusWithMatchingIdWithSynchronousCall,"        public void waitsForServiceToExist_whenGettingDownloadStatusWithMatchingIdWithSynchronousCall() {
            liteDownloadManager.getDownloadFileStatusWithMatching(DOWNLOAD_BATCH_ID, DOWNLOAD_FILE_ID);
        }"
18749,waitsForServiceToExist_whenGettingDownloadStatusWithMatchingId,"        public void waitsForServiceToExist_whenGettingDownloadStatusWithMatchingId() {
            liteDownloadManager.getDownloadFileStatusWithMatching(DOWNLOAD_BATCH_ID, DOWNLOAD_FILE_ID, downloadFileStatusCallback);
        }"
18750,waitsForServiceToExist_whenGettingAllBatchStatusesWithSynchronousCall,"        public void waitsForServiceToExist_whenGettingAllBatchStatusesWithSynchronousCall() {
            liteDownloadManager.getAllDownloadBatchStatuses();
        }"
18751,waitsForServiceToExist_whenGettingAllBatchStatuses,"        public void waitsForServiceToExist_whenGettingAllBatchStatuses() {
            liteDownloadManager.getAllDownloadBatchStatuses(allBatchStatusesCallback);
        }"
18754,downloadsBatchByOriginalReference_whenIdAlreadyExists,"    public void downloadsBatchByOriginalReference_whenIdAlreadyExists() {
        downloadingBatches.put(downloadBatchId, anotherDownloadBatchWithTheSameId);

        downloader.download(downloadBatch, downloadingBatches);
"
18755,downloadsBatch,"    public void downloadsBatch() {
        downloadingBatches.clear();

        downloader.download(downloadBatch, downloadingBatches);
"
18756,doesNotAddDownloadBatchToQueue_whenIdAlreadyExists,"    public void doesNotAddDownloadBatchToQueue_whenIdAlreadyExists() {
        downloadingBatches.put(downloadBatchId, anotherDownloadBatchWithTheSameId);

        downloader.download(downloadBatch, downloadingBatches);
"
18757,addsDownloadBatchToQueue,"    public void addsDownloadBatchToQueue() {
        downloadingBatches.clear();

        downloader.download(downloadBatch, downloadingBatches);
"
18758,setUpBatches,"    private void setUpBatches() {
        given(downloadBatch.getId()).willReturn(downloadBatchId);
        given(anotherDownloadBatchWithTheSameId.getId()).willReturn(downloadBatchId);
    }"
18759,setUpExecutorService,"    private void setUpExecutorService() {
        willAnswer(invocation -> {
            ((Runnable) invocation.getArgument(0)).run();"
18760,setUp,"    public void setUp() {
        setUpExecutorService();
        setUpBatches();

        downloader = new LiteDownloadManagerDownloader(
                waitForDownloadService,"
18761,addCompletedBatch,"    public boolean addCompletedBatch(CompletedDownloadBatch completedDownloadBatch, Map<DownloadBatchId, DownloadBatch> downloadBatchMap) {
        DownloadBatch downloadBatch = DownloadBatchFactory.newInstance(
                completedDownloadBatch.asBatch(),
                fileOperations,
                downloadsBatchPersistence,"
18762,setDownloadService,"    void setDownloadService(DownloadService downloadService) {
        this.downloadService = downloadService;
        notificationDispatcher.setDownloadService(downloadService);
    }"
18763,downloadBatchCallback,"    private DownloadBatchStatusCallback downloadBatchCallback(Map<DownloadBatchId, DownloadBatch> downloadBatchMap) {
        return downloadBatchStatus -> {
            if (downloadBatchStatus == null || downloadBatchStatusFilter.shouldFilterOut(downloadBatchStatus)) {"
18764,updateStatusToQueuedIfNeeded,"    private void updateStatusToQueuedIfNeeded(InternalDownloadBatchStatus downloadBatchStatus) {
        DownloadBatchStatus.Status status = downloadBatchStatus.status();
        if (status != PAUSED && status != DOWNLOADED && status != DELETING && status != DELETED) {
            downloadBatchStatus.markAsQueued(downloadsBatchPersistence);"
18765,executeDownload,"    private Wait.ThenPerform.Action<Void> executeDownload(DownloadBatch downloadBatch, Map<DownloadBatchId, DownloadBatch> downloadBatchMap) {
        return () -> {
            InternalDownloadBatchStatus downloadBatchStatus = downloadBatch.status();"
18766,run,"            public void run() {
                Wait.<Void>waitFor(serviceCriteria, waitForDownloadService)
                        .thenPerform(executeDownload(batchToDownload, downloadBatchMap));"
18767,download,"    void download(DownloadBatch downloadBatch, Map<DownloadBatchId, DownloadBatch> downloadBatchMap) {
        DownloadBatchId downloadBatchId = downloadBatch.getId();
        if (!downloadBatchMap.containsKey(downloadBatchId)) {
            downloadBatchMap.put(downloadBatchId, downloadBatch);
        }
"
18768,download,"    void download(Batch batch, Map<DownloadBatchId, DownloadBatch> downloadBatchMap) {
        DownloadBatch downloadBatch = DownloadBatchFactory.newInstance(
                batch,
                fileOperations,
                downloadsBatchPersistence,"
18769,alreadyContainsBatch,"    private boolean alreadyContainsBatch(CompletedDownloadBatch completedDownloadBatch) {
        return downloadBatchMap.containsKey(completedDownloadBatch.downloadBatchId());
    }"
18770,addCompletedBatch,"    public boolean addCompletedBatch(CompletedDownloadBatch completedDownloadBatch) throws IllegalArgumentException {
        if (alreadyContainsBatch(completedDownloadBatch)) {
            Logger.w(""CompletedDownloadBatch with id: "" + completedDownloadBatch.downloadBatchId() + "" already exists."");
            return false;"
18771,updateAllowedConnectionType,"    public void updateAllowedConnectionType(ConnectionType allowedConnectionType) {
        if (allowedConnectionType == null) {
            throw new IllegalArgumentException(""Allowed connection type cannot be null"");
        }
        connectionChecker.updateAllowedConnectionType(allowedConnectionType);
        DownloadsNetworkRecoveryCreator.getInstance().updateAllowedConnectionType(allowedConnectionType);"
18772,getDownloadFileStatusWithMatching,"    public void getDownloadFileStatusWithMatching(DownloadBatchId downloadBatchId,
                                                  DownloadFileId downloadFileId,
                                                  DownloadFileStatusCallback callback) {"
18773,executeGetDownloadStatusWithMatching,"    private DownloadFileStatus executeGetDownloadStatusWithMatching(DownloadBatchId downloadBatchId, DownloadFileId downloadFileId) {
        DownloadBatch downloadBatch = downloadBatchMap.get(downloadBatchId);
        if (downloadBatch == null) {
            return null;
        }

        DownloadFileStatus downloadFileStatus = downloadBatch.downloadFileStatusWith(downloadFileId);"
18774,getDownloadFileStatusWithMatching,"    public DownloadFileStatus getDownloadFileStatusWithMatching(DownloadBatchId downloadBatchId, DownloadFileId downloadFileId) {
        return Wait.<DownloadFileStatus>waitFor(serviceCriteria, waitForDownloadService)
                .thenPerform(() -> executeGetDownloadStatusWithMatching(downloadBatchId, downloadFileId));"
18775,getAllDownloadBatchStatuses,"    public void getAllDownloadBatchStatuses(AllBatchStatusesCallback callback) {
        executor.submit((Runnable) () -> Wait.<Void>waitFor(serviceCriteria, waitForDownloadService)
                .thenPerform(() -> {"
18776,executeGetAllDownloadBatchStatuses,"    private List<DownloadBatchStatus> executeGetAllDownloadBatchStatuses() {
        List<DownloadBatchStatus> downloadBatchStatuses = new ArrayList<>(downloadBatchMap.size());

        for (DownloadBatch downloadBatch : downloadBatchMap.values()) {
            downloadBatchStatuses.add(downloadBatch.status());"
18777,getAllDownloadBatchStatuses,"    public List<DownloadBatchStatus> getAllDownloadBatchStatuses() {
        return Wait.<List<DownloadBatchStatus>>waitFor(serviceCriteria, waitForDownloadService)
                .thenPerform(this::executeGetAllDownloadBatchStatuses);"
18778,removeDownloadBatchCallback,"    public void removeDownloadBatchCallback(DownloadBatchStatusCallback downloadBatchCallback) {
        synchronized (waitForDownloadBatchStatusCallback) {
            if (callbacks.contains(downloadBatchCallback)) {"
18779,addDownloadBatchCallback,"    public void addDownloadBatchCallback(DownloadBatchStatusCallback downloadBatchCallback) {
        synchronized (waitForDownloadBatchStatusCallback) {
            callbacks.add(downloadBatchCallback);"
18780,delete,"    public void delete(DownloadBatchId downloadBatchId) {
        DownloadBatch downloadBatch = downloadBatchMap.get(downloadBatchId);
        if (downloadBatch == null) {
            Logger.v(""abort delete batch "" + downloadBatchId + "" will not be deleted as it does not exists in the running batches map"");
            return;"
18781,resume,"    public void resume(DownloadBatchId downloadBatchId) {
        DownloadBatch downloadBatch = downloadBatchMap.get(downloadBatchId);
        if (downloadBatch == null) {
            Logger.v(""abort resume batch "" + downloadBatchId + "" will not be resume as it does not exists in the running batches map"");
            return;
        }
"
18782,pause,"    public void pause(DownloadBatchId downloadBatchId) {
        DownloadBatch downloadBatch = downloadBatchMap.get(downloadBatchId);
        if (downloadBatch == null) {
            Logger.v(""abort pause batch "" + downloadBatchId + "" will not be paused as it does not exists in the running batches map"");
            return;"
18783,download,"    public void download(Batch batch) {
        DownloadBatchId downloadBatchId = batch.downloadBatchId();
        DownloadBatch downloadBatch = downloadBatchMap.get(downloadBatchId);
        if (downloadBatch == null) {
            downloader.download(batch, downloadBatchMap);"
18784,loadBatchesCallback,"    private DownloadsBatchPersistence.LoadBatchesCallback loadBatchesCallback(AllStoredDownloadsSubmittedCallback callback) {
        return downloadBatches -> {
            for (DownloadBatch downloadBatch : downloadBatches) {"
18785,submitAllStoredDownloads,"    public void submitAllStoredDownloads(AllStoredDownloadsSubmittedCallback callback) {
        downloadsBatchPersistence.loadAsync(fileOperations, loadBatchesCallback(callback));
    }"
18786,initialise,"    void initialise(DownloadService downloadService) {
        downloader.setDownloadService(downloadService);
        serviceCriteria.update(downloadService);
        synchronized (waitForDownloadService) {
            waitForDownloadService.notifyAll();"
18787,toString,"    public String toString() {
        return ""LiteDownloadFileStatus{""
                + ""downloadBatchId="" + downloadBatchId"
18789,equals,"    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        LiteDownloadFileStatus that = (LiteDownloadFileStatus) o;

        if (downloadBatchId != null ? !downloadBatchId.equals(that.downloadBatchId) : that.downloadBatchId != null) {"
18790,status,"    public Status status() {
        return status;
    }"
18791,error,"    public Optional<DownloadError> error() {
        return downloadError;
    }"
18792,waitForNetwork,"    public void waitForNetwork() {
        status = Status.WAITING_FOR_NETWORK;
    }"
18793,isMarkedAsWaitingForNetwork,"    public boolean isMarkedAsWaitingForNetwork() {
        return status == Status.WAITING_FOR_NETWORK;
    }"
18794,markAsError,"    public void markAsError(DownloadError downloadError) {
        status = Status.ERROR;
        this.downloadError = Optional.of(downloadError);
    }"
18795,markAsDeleted,"    public void markAsDeleted() {
        status = Status.DELETED;
    }"
18796,markAsQueued,"    public void markAsQueued() {
        status = Status.QUEUED;
    }"
18797,isMarkedAsError,"    public boolean isMarkedAsError() {
        return status == Status.ERROR;
    }"
18798,markAsPaused,"    public void markAsPaused() {
        status = Status.PAUSED;
    }"
18799,markAsDownloading,"    public void markAsDownloading() {
        status = Status.DOWNLOADING;
    }"
18800,isMarkedAsDeleted,"    public boolean isMarkedAsDeleted() {
        return status == Status.DELETED;
    }"
18801,isMarkedAsQueued,"    public boolean isMarkedAsQueued() {
        return status == Status.QUEUED;
    }"
18802,isMarkedAsDownloading,"    public boolean isMarkedAsDownloading() {
        return status == Status.DOWNLOADING;
    }"
18805,localFilePath,"    public FilePath localFilePath() {
        return localFilePath;
    }"
18806,totalBytes,"    public long totalBytes() {
        return fileSize.totalSize();
    }"
18807,bytesDownloaded,"    public long bytesDownloaded() {
        return fileSize.currentSize();
    }"
18808,markAsDownloaded,"    private void markAsDownloaded() {
        status = Status.DOWNLOADED;
    }"
18809,update,"    public void update(FileSize fileSize, FilePath localFilePath) {
        this.fileSize = fileSize;
        this.localFilePath = localFilePath;

        if (fileSize.currentSize() == fileSize.totalSize()) {"
18810,toString,"    public String toString() {
        return ""LiteDownloadFileId{""
                + ""id='"" + id + '\''"
18811,hashCode,"    public int hashCode() {
        return id != null ? id.hashCode() : 0;
    }"
18813,rawId,"    public String rawId() {
        return id;
    }"
18814,hashCode,"    public int hashCode() {
        return title.hashCode();
    }"
18816,toString,"    public String toString() {
        return ""LiteDownloadBatchTitle{""
                + ""title='"" + title + '\''"
18817,asString,"    public String asString() {
        return title;
    }"
18818,toString,"    public String toString() {
        return ""LiteDownloadBatchStatus{""
                + ""downloadBatchTitle="" + downloadBatchTitle"
18822,downloadError,"    public DownloadError downloadError() {
        if (downloadError.isPresent()) {
            return downloadError.get();"
18823,updateStatusAsync,"    private void updateStatusAsync(Status status, DownloadsBatchStatusPersistence persistence) {
        persistence.updateStatusAsync(downloadBatchId, status);
    }"
18824,copy,"    public InternalDownloadBatchStatus copy() {
        return new LiteDownloadBatchStatus(
                downloadBatchId,"
18825,markAsNotificationSeen,"    public void markAsNotificationSeen(DownloadsNotificationSeenPersistence persistence) {
        this.notificationSeen = NOTIFICATION_SEEN;
        persistence.updateNotificationSeenAsync(this, NOTIFICATION_SEEN);
    }"
18826,markAsWaitingForNetwork,"    public void markAsWaitingForNetwork(DownloadsBatchPersistence persistence) {
        this.status = Status.WAITING_FOR_NETWORK;
        updateStatusAsync(status, persistence);
    }"
18827,markAsDownloaded,"    public void markAsDownloaded(DownloadsBatchStatusPersistence persistence) {
        this.status = Status.DOWNLOADED;
        updateStatusAsync(status, persistence);
    }"
18828,markAsError,"    public void markAsError(Optional<DownloadError> downloadError, DownloadsBatchStatusPersistence persistence) {
        this.status = Status.ERROR;
        this.downloadError = downloadError;
        updateStatusAsync(status, persistence);
    }"
18829,markAsDeleted,"    public void markAsDeleted() {
        status = Status.DELETED;
        notificationSeen = false;
    }"
18830,markAsDeleting,"    public void markAsDeleting() {
        status = Status.DELETING;
        notificationSeen = false;
    }"
18831,markAsQueued,"    public void markAsQueued(DownloadsBatchStatusPersistence persistence) {
        status = Status.QUEUED;
        updateStatusAsync(status, persistence);
    }"
18832,markAsPaused,"    public void markAsPaused(DownloadsBatchStatusPersistence persistence) {
        status = Status.PAUSED;
        updateStatusAsync(status, persistence);
    }"
18833,markAsDownloading,"    public void markAsDownloading(DownloadsBatchStatusPersistence persistence) {
        status = Status.DOWNLOADING;
        updateStatusAsync(status, persistence);
    }"
18837,getDownloadBatchTitle,"    public DownloadBatchTitle getDownloadBatchTitle() {
        return downloadBatchTitle;
    }"
18838,getDownloadBatchId,"    public DownloadBatchId getDownloadBatchId() {
        return downloadBatchId;
    }"
18839,percentageDownloaded,"    public int percentageDownloaded() {
        return percentageDownloaded;
    }"
18840,getPercentageFrom,"    private int getPercentageFrom(long bytesDownloaded, long totalFileSizeBytes) {
        if (totalBatchSizeBytes <= ZERO_BYTES) {
            return 0;"
18841,updateDownloaded,"    public void updateDownloaded(long currentBytesDownloaded) {
        this.bytesDownloaded = currentBytesDownloaded;
        this.percentageDownloaded = getPercentageFrom(bytesDownloaded, totalBatchSizeBytes);
    }"
18842,updateTotalSize,"    public void updateTotalSize(long totalBatchSizeBytes) {
        this.totalBatchSizeBytes = totalBatchSizeBytes;
    }"
18843,bytesTotalSize,"    public long bytesTotalSize() {
        return totalBatchSizeBytes;
    }"
18844,bytesDownloaded,"    public long bytesDownloaded() {
        return bytesDownloaded;
    }"
18845,toString,"    public String toString() {
        return ""LiteDownloadBatchId{""
                + ""id='"" + id + '\''"
18849,batchFileWithPath,"    private BatchFile batchFileWithPath(String path) {
        return new BatchFile(
                ANY_NETWORK_ADDRESS,"
18850,whenLiteBatchFileBuilderApply,"    private void whenLiteBatchFileBuilderApply(String path, String fileName) {
        liteBatchFileBuilder.saveTo(path, fileName).apply();
    }"
18851,doesNotIgnoreSeparatorAsRoot,"    public void doesNotIgnoreSeparatorAsRoot() {
        given(batchStorageRoot.path()).willReturn(""/my-movie"");

        whenLiteBatchFileBuilderApply(""my/path"", ""/my-movie.mp4"");
"
18852,ignoreSeparatorAsPath,"    public void ignoreSeparatorAsPath() {
        given(batchStorageRoot.path()).willReturn(""root/my-movie"");

        whenLiteBatchFileBuilderApply(""/"", ""/my-movie.mp4"");
"
18853,ignoresEmptyPath,"    public void ignoresEmptyPath() {
        given(batchStorageRoot.path()).willReturn(""root/my-movie"");

        whenLiteBatchFileBuilderApply("""", ""my-movie.mp4"");
"
18855,doesNotAddDuplicateLeadingOrTrailingSeparators,"    public void doesNotAddDuplicateLeadingOrTrailingSeparators() {
        given(batchStorageRoot.path()).willReturn(""/root/my-movie/"");

        whenLiteBatchFileBuilderApply(""/my/path/"", ""/my-movie.mp4"");
"
18856,concatenatesAllPaths,"    public void concatenatesAllPaths() {
        given(batchStorageRoot.path()).willReturn(""root/my-movie"");

        whenLiteBatchFileBuilderApply(""my/path"", ""my-movie.mp4"");
"
18857,joinWithFileSeparator,"    private String joinWithFileSeparator(CharSequence... elements) {
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < elements.length; i++) {
            stringBuilder.append(elements[i]);
            if (i < elements.length - 1) {"
18858,filterEmptySegmentsOut,"    private CharSequence[] filterEmptySegmentsOut(String... pathSegments) {
        List<CharSequence> filteredPathSegments = new ArrayList<>();
        for (String pathSegment : pathSegments) {
            if (!pathSegment.isEmpty()) {
                filteredPathSegments.add(pathSegment);"
18859,sanitise,"    private String sanitise(String path) {
        String[] pathSegments = path.split(SEPARATOR_AS_REGEX);
        CharSequence[] filteredPathSegments = filterEmptySegmentsOut(pathSegments);
        return joinWithFileSeparator(filteredPathSegments);
    }"
18860,buildPath,"    private String buildPath(String... paths) {
        StringBuilder stringBuilder = new StringBuilder();

        String storagePath = paths[0];
        if (storagePath.startsWith(File.separator)) {
            stringBuilder.append(File.separator);
        }
"
18861,apply,"    public BatchBuilder apply() {
        String absolutePath = buildPath(
                batchStorageRoot.path(),
                path.or(""""),
                fileName.getOrElse(() -> FileNameExtractor.extractFrom(networkAddress))"
18862,withSize,"    public BatchFileBuilder withSize(FileSize fileSize) {
        this.fileSize = Optional.fromNullable(fileSize);
        return this;
    }"
18863,saveTo,"    public BatchFileBuilder saveTo(String path, String fileName) {
        this.path = Optional.fromNullable(path);
        this.fileName = Optional.fromNullable(fileName);
        return this;
    }"
18864,saveTo,"    public BatchFileBuilder saveTo(String path) {
        String networkAddressDerivedFileName = FileNameExtractor.extractFrom(networkAddress);
        return saveTo(path, networkAddressDerivedFileName);
    }"
18865,withIdentifier,"    public BatchFileBuilder withIdentifier(DownloadFileId downloadFileId) {
        this.downloadFileId = Optional.fromNullable(downloadFileId);
        return this;
    }"
18866,withParentBuilder,"    public BatchFileBuilder withParentBuilder(InternalBatchBuilder parentBuilder) {
        this.parentBuilder = parentBuilder;
        return this;
    }"
18867,ensureNoFileIdDuplicates,"    private void ensureNoFileIdDuplicates(List<BatchFile> batchFiles) {
        Set<DownloadFileId> rawIdsWithoutDuplicates = new HashSet<>();
        for (BatchFile batchFile : batchFiles) {
            rawIdsWithoutDuplicates.add(FallbackDownloadFileIdProvider.downloadFileIdFor(downloadBatchId, batchFile));
        }"
18868,build,"    public Batch build() {
        ensureNoFileIdDuplicates(batchFiles);
        return new Batch(storageRoot, downloadBatchId, title, batchFiles);
    }"
18869,downloadFrom,"    public BatchFileBuilder downloadFrom(String networkAddress) {
        return BatchFile.from(batchStorageRoot, networkAddress).withParentBuilder(this);
    }"
18870,withFile,"    public void withFile(BatchFile batchFile) {
        batchFiles.add(batchFile);
    }"
18871,navigateTo,"    private void navigateTo(Class<?> activityClass) {
        Intent intent = new Intent(getApplicationContext(), activityClass);
        startActivity(intent);
    }"
18872,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_landing);
        findViewById(R.id.migration).setOnClickListener(view -> navigateTo(MigrationActivity.class));
        findViewById(R.id.downloads).setOnClickListener(view -> navigateTo(MainActivity.class));
    }"
18873,areBytesDownloadedKnown,"            public boolean areBytesDownloadedKnown() {
                return areBytesDownloadedKnown;
            }"
18874,isTotalSizeUnknown,"            public boolean isTotalSizeUnknown() {
                return isTotalSizeUnknown;
            }"
18875,isTotalSizeKnown,"            public boolean isTotalSizeKnown() {
                return isTotalSizeKnown;
            }"
18876,remainingSize,"            public long remainingSize() {
                return totalSize - currentSize;
            }"
18877,totalSize,"            public long totalSize() {
                return totalSize;
            }"
18878,currentSize,"            public long currentSize() {
                return currentSize;
            }"
18879,copy,"            public InternalFileSize copy() {
                return InternalFileSizeFixtures.aFileSize()
                        .withCurrentSize(currentSize)"
18880,setCurrentSize,"            public void setCurrentSize(long newCurrentSize) {
                currentSize = newCurrentSize;
            }"
18881,setTotalSize,"            public void setTotalSize(long newTotalSize) {
                totalSize = newTotalSize;
            }"
18882,addToCurrentSize,"            public void addToCurrentSize(long newBytes) {
                currentSize += newBytes;
            }"
18883,build,"    InternalFileSize build() {
        return new InternalFileSize() {
            @Override"
18884,withAreBytesDownloadedKnown,"    InternalFileSizeFixtures withAreBytesDownloadedKnown(boolean areBytesDownloadedKnown) {
        this.areBytesDownloadedKnown = areBytesDownloadedKnown;
        return this;
    }"
18885,withTotalSizeUnknown,"    InternalFileSizeFixtures withTotalSizeUnknown(boolean totalSizeUnknown) {
        isTotalSizeUnknown = totalSizeUnknown;
        return this;
    }"
18886,withTotalSizeKnown,"    InternalFileSizeFixtures withTotalSizeKnown(boolean totalSizeKnown) {
        isTotalSizeKnown = totalSizeKnown;
        return this;
    }"
18887,withTotalSize,"    InternalFileSizeFixtures withTotalSize(long totalSize) {
        this.totalSize = totalSize;
        return this;
    }"
18888,withCurrentSize,"    InternalFileSizeFixtures withCurrentSize(long currentSize) {
        this.currentSize = currentSize;
        return this;
    }"
18889,aFileSize,"    static InternalFileSizeFixtures aFileSize() {
        return new InternalFileSizeFixtures();
    }"
18890,from,"    static InternalFileSize from(FileSize fileSize) {
        return new LiteFileSize(fileSize.currentSize(), fileSize.totalSize());
    }"
18891,createFromCurrentAndTotalSize,"    static InternalFileSize createFromCurrentAndTotalSize(long currentSize, long totalSize) {
        return new LiteFileSize(currentSize, totalSize);
    }"
18892,unknownFileSize,"    static InternalFileSize unknownFileSize() {
        return UNKNOWN.copy();
    }"
18900,markAsError,"    void markAsError(DownloadError downloadError);
"
18909,update,"    void update(FileSize fileSize, FilePath localFilePath);
"
18910,build,"    InternalDownloadBatchStatus build() {
        return new LiteDownloadBatchStatus(
                downloadBatchId,"
18911,withNotificationSeen,"    InternalDownloadBatchStatusFixtures withNotificationSeen(boolean notificationSeen) {
        this.notificationSeen = notificationSeen;
        return this;
    }"
18912,withDownloadError,"    InternalDownloadBatchStatusFixtures withDownloadError(DownloadError downloadError) {
        this.downloadError = downloadError;
        return this;
    }"
18913,withDownloadedDateTimeInMillis,"    InternalDownloadBatchStatusFixtures withDownloadedDateTimeInMillis(long downloadedDateTimeInMillis) {
        this.downloadedDateTimeInMillis = downloadedDateTimeInMillis;
        return this;
    }"
18914,withStatus,"    InternalDownloadBatchStatusFixtures withStatus(DownloadBatchStatus.Status status) {
        this.status = status;
        return this;
    }"
18915,withDownloadBatchId,"    InternalDownloadBatchStatusFixtures withDownloadBatchId(DownloadBatchId downloadBatchId) {
        this.downloadBatchId = downloadBatchId;
        return this;
    }"
18916,withBytesTotalSize,"    InternalDownloadBatchStatusFixtures withBytesTotalSize(long bytesTotalSize) {
        this.bytesTotalSize = bytesTotalSize;
        return this;
    }"
18917,withBytesDownloaded,"    InternalDownloadBatchStatusFixtures withBytesDownloaded(long bytesDownloaded) {
        this.bytesDownloaded = bytesDownloaded;
        return this;
    }"
18918,withPercentageDownloaded,"    InternalDownloadBatchStatusFixtures withPercentageDownloaded(int percentageDownloaded) {
        this.percentageDownloaded = percentageDownloaded;
        return this;
    }"
18919,withStorageRoot,"    InternalDownloadBatchStatusFixtures withStorageRoot(String storageRoot) {
        this.storageRoot = storageRoot;
        return this;
    }"
18920,withDownloadBatchTitle,"    InternalDownloadBatchStatusFixtures withDownloadBatchTitle(DownloadBatchTitle downloadBatchTitle) {
        this.downloadBatchTitle = downloadBatchTitle;
        return this;
    }"
18921,anInternalDownloadsBatchStatus,"    static InternalDownloadBatchStatusFixtures anInternalDownloadsBatchStatus() {
        return new InternalDownloadBatchStatusFixtures();
    }"
18923,markAsNotificationSeen,"    void markAsNotificationSeen(DownloadsNotificationSeenPersistence persistence);
"
18924,markAsWaitingForNetwork,"    void markAsWaitingForNetwork(DownloadsBatchPersistence persistence);
"
18925,markAsDownloaded,"    void markAsDownloaded(DownloadsBatchStatusPersistence persistence);
"
18926,markAsError,"    void markAsError(Optional<DownloadError> downloadError, DownloadsBatchStatusPersistence persistence);
"
18929,markAsQueued,"    void markAsQueued(DownloadsBatchStatusPersistence persistence);
"
18930,markAsPaused,"    void markAsPaused(DownloadsBatchStatusPersistence persistence);
"
18931,markAsDownloading,"    void markAsDownloading(DownloadsBatchStatusPersistence persistence);
"
18932,updateDownloaded,"    void updateDownloaded(long currentBytesDownloaded);
"
18933,updateTotalSize,"    void updateTotalSize(long totalBatchSizeBytes);
"
18934,withParentBuilder,"    BatchFileBuilder withParentBuilder(InternalBatchBuilder parentBuilder);
}"
18936,requestFileSize,"    public FileSize requestFileSize(String url) {
        return FileSizeCreator.createFromTotalSize(TOTAL_FILE_SIZE);
    }"
18937,createInstance,"        private static HttpClient createInstance() {
            OkHttpClient okHttpClient = new OkHttpClient.Builder()
                    .connectTimeout(TIMEOUT, TimeUnit.SECONDS)
                    .writeTimeout(TIMEOUT, TimeUnit.SECONDS)"
18938,getInstance,"    public static HttpClient getInstance() {
        return LazySingleton.INSTANCE;
    }"
18939,execute,"    NetworkResponse execute(NetworkRequest networkRequest) throws IOException;
"
18940,givenScheduledAction,"    private void givenScheduledAction() {
        scheduler.schedule(anyAction);
        reset(timer);
    }"
18941,returnsFalse_whenActionIsNotScheduled,"    public void returnsFalse_whenActionIsNotScheduled() {
        boolean scheduled = scheduler.isScheduled(anyAction);

        assertThat(scheduled).isFalse();"
18942,returnsTrue_whenActionIsScheduled,"    public void returnsTrue_whenActionIsScheduled() {
        givenScheduledAction();

        boolean scheduled = scheduler.isScheduled(anyAction);
"
18943,clearsAllActions_whenCancellingAll,"    public void clearsAllActions_whenCancellingAll() {
        givenScheduledAction();

        scheduler.cancelAll();
"
18944,clearsTimerTasks_whenCancellingAll,"    public void clearsTimerTasks_whenCancellingAll() {
        givenScheduledAction();

        scheduler.cancelAll();
"
18946,cancelTimerTask_whenCancellingSpecificAction,"    public void cancelTimerTask_whenCancellingSpecificAction() {
        TimerTask timerTask = mock(TimerTask.class);
        actionTimerTasks.put(anyAction, timerTask);

        scheduler.cancel(anyAction);
"
18947,doesNothing_whenActionAlreadyScheduled,"    public void doesNothing_whenActionAlreadyScheduled() {
        givenScheduledAction();

        scheduler.schedule(anyAction);
"
18948,recordsAction_whenSchedulingAction,"    public void recordsAction_whenSchedulingAction() {
        scheduler.schedule(anyAction);

        assertThat(actionTimerTasks).containsEntry(anyAction, timerTask);"
18949,executesAction_whenSchedulingAction,"    public void executesAction_whenSchedulingAction() {
        scheduler.schedule(anyAction);

        timerTask.run();
"
18950,answer,"            public Void answer(InvocationOnMock invocation) throws Throwable {
                timerTask = argumentCaptor.getValue();
                return null;
            }"
18951,setUp,"    public void setUp() {
        scheduler = new FixedRateTimerActionScheduler(timer, FREQUENCY, actionTimerTasks);

        final ArgumentCaptor<TimerTask> argumentCaptor = ArgumentCaptor.forClass(TimerTask.class);
        willAnswer(new Answer<Void>() {"
18952,isScheduled,"    public boolean isScheduled(Action action) {
        return actionTimerTasks.containsKey(action);
    }"
18953,cancelAll,"    public void cancelAll() {
        for (Map.Entry<Action, TimerTask> timerTaskEntry : actionTimerTasks.entrySet()) {
            TimerTask timerTask = timerTaskEntry.getValue();
            timerTask.cancel();"
18954,cancel,"    public void cancel(Action action) {
        if (actionTimerTasks.containsKey(action)) {
            TimerTask timerTask = actionTimerTasks.get(action);"
18955,run,"            public void run() {
                action.perform();
            }"
18956,schedule,"    public void schedule(final Action action) {
        if (actionTimerTasks.containsKey(action)) {
            Logger.v(""Already contains action, aborting schedule"");
            return;
        }
"
18958,fileSizeFor,"    public long fileSizeFor(String filePath) {
        File file = new File(filePath);
        return file.length();
    }"
18959,createForCompletedDownloadBatch,"    public static FileSize createForCompletedDownloadBatch(long totalFileSize) {
        return new LiteFileSize(totalFileSize, totalFileSize);
    }"
18960,createFromTotalSize,"    public static FileSize createFromTotalSize(long totalFileSize) {
        return new LiteFileSize(ZERO_BYTES, totalFileSize);
    }"
18961,unknownFileSize,"    static FileSize unknownFileSize() {
        return UNKNOWN;
    }"
18969,getCurrentSize,"            public long getCurrentSize(FilePath filePath) {
                return currentSize;
            }"
18971,write,"            public boolean write(byte[] buffer, int offset, int numberOfBytesToWrite) {
                return writeResult;
            }"
18972,create,"            public FilePersistenceResult create(FilePath absoluteFilePath, FileSize fileSize) {
                return filePersistenceResult;
            }"
18973,initialiseWith,"            public void initialiseWith(Context context, StorageRequirementRule storageRequirementRule) {
"
18974,build,"    FilePersistence build() {
        return new FilePersistence() {
            @Override"
18975,withCurrentSize,"    FilePersistenceFixtures withCurrentSize(long currentSize) {
        this.currentSize = currentSize;
        return this;
    }"
18976,withWriteResult,"    FilePersistenceFixtures withWriteResult(boolean writeResult) {
        this.writeResult = writeResult;
        return this;
    }"
18977,withFilePersistenceResult,"    FilePersistenceFixtures withFilePersistenceResult(FilePersistenceResult filePersistenceResult) {
        this.filePersistenceResult = filePersistenceResult;
        return this;
    }"
18978,aFilePersistence,"    static FilePersistenceFixtures aFilePersistence() {
        return new FilePersistenceFixtures();
    }"
18979,create,"    FilePersistence create() {
        FilePersistence filePersistence = new PathBasedFilePersistence();
        filePersistence.initialiseWith(context, storageRequirementRule);
        return filePersistence;
    }"
18980,withStorageRequirementRules,"    void withStorageRequirementRules(StorageRequirementRule storageRequirementRule) {
        this.storageRequirementRule = storageRequirementRule;
    }"
18984,write,"    boolean write(byte[] buffer, int offset, int numberOfBytesToWrite);
"
18985,create,"    FilePersistenceResult create(FilePath absoluteFilePath, FileSize fileSize);
"
18986,initialiseWith,"    void initialiseWith(Context context, StorageRequirementRule storageRequirementRule);
"
18987,isUnknown,"            public boolean isUnknown() {
                return isUnknown;
            }"
18988,path,"            public String path() {
                return rawPath;
            }"
18989,build,"    FilePath build() {
        return new FilePath() {
            @Override"
18990,withUnknown,"    FilePathFixtures withUnknown(boolean unknown) {
        isUnknown = unknown;
        return this;
    }"
18991,withRawPath,"    FilePathFixtures withRawPath(String rawPath) {
        this.rawPath = rawPath;
        return this;
    }"
18992,aFilePath,"    static FilePathFixtures aFilePath() {
        return new FilePathFixtures();
    }"
18993,returnsFilePath_whenAssetUrlAlreadyContainsBasePath,"    public void returnsFilePath_whenAssetUrlAlreadyContainsBasePath() {
        String assetUrl = BASE_PATH + ""foo/bar/10MB.zip"";

        FilePath filePath = FilePathCreator.create(BASE_PATH, assetUrl);

        String expectedAbsolutePath = ""/data/data/com.novoda.downloadmanager.demo.simple/files/foo/bar/10MB.zip"";"
18994,returnsFilePath_whenAssetUrlContainsSubdirectories,"    public void returnsFilePath_whenAssetUrlContainsSubdirectories() {
        String assetUrl = ""foo/bar/10MB.zip"";

        FilePath filePath = FilePathCreator.create(BASE_PATH, assetUrl);

        String expectedAbsolutePath = ""/data/data/com.novoda.downloadmanager.demo.simple/files/foo/bar/10MB.zip"";"
18995,returnsFilePath_whenAssetUrlOnlyContainsFileName,"    public void returnsFilePath_whenAssetUrlOnlyContainsFileName() {
        String assetUrl = ""10MB.zip"";

        FilePath filePath = FilePathCreator.create(BASE_PATH, assetUrl);

        String expectedAbsolutePath = ""/data/data/com.novoda.downloadmanager.demo.simple/files/10MB.zip"";"
18996,returnsUnknownFilePath,"    public void returnsUnknownFilePath() {
        FilePath filePath = FilePathCreator.unknownFilePath();

        String expectedAbsolutePath = ""unknown"";
        assertThat(filePath).isEqualTo(new LiteFilePath(expectedAbsolutePath));"
18997,returnsFilePath,"    public void returnsFilePath() {
        FilePath filePath = FilePathCreator.create(""foo/bar/10MB.zip"");

        String expectedAbsolutePath = ""foo/bar/10MB.zip"";
        assertThat(filePath).isEqualTo(new LiteFilePath(expectedAbsolutePath));"
18999,create,"    public static FilePath create(String absolutePath) {
        return new LiteFilePath(absolutePath);
    }"
19000,create,"    public static FilePath create(String basePath, String rawPath) {
        String relativePath = removeSubstring(rawPath, basePath);
        String absolutePath = basePath + relativePath;
        return new LiteFilePath(absolutePath);
    }"
19001,unknownFilePath,"    public static FilePath unknownFilePath() {
        return UNKNOWN_FILEPATH;
    }"
19004,fileDownloaderCreator,"    FileDownloaderCreator fileDownloaderCreator() {
        return fileDownloaderCreator;
    }"
19005,fileSizeRequester,"    FileSizeRequester fileSizeRequester() {
        return fileSizeRequester;
    }"
19006,filePersistenceCreator,"    FilePersistenceCreator filePersistenceCreator() {
        return filePersistenceCreator;
    }"
19007,returnsFileName_whenAssetUrlContainsSubdirectories,"    public void returnsFileName_whenAssetUrlContainsSubdirectories() {
        String assetUrl = ""foo/bar/10MB.zip"";

        String fileName = FileNameExtractor.extractFrom(assetUrl);
"
19008,returnsFileName_whenAssetUrlOnlyContainsFileName,"    public void returnsFileName_whenAssetUrlOnlyContainsFileName() {
        String assetUrl = ""10MB.zip"";

        String fileName = FileNameExtractor.extractFrom(assetUrl);
"
19009,extractFrom,"    static String extractFrom(String assetUrl) {
        String[] subPaths = assetUrl.split(PATH_SEPARATOR);
        return subPaths.length == 0 ? assetUrl : subPaths[subPaths.length - 1];
    }"
19010,createCustomFileDownloader,"    private FileDownloader createCustomFileDownloader() {
        if (customClass == null) {
            throw new CustomFileDownloaderException(""CustomFileDownloader class cannot be accessed, is it public?"");
        }"
19011,create,"    FileDownloader create() {
        FileDownloader fileDownloader;

        switch (type) {
            case NETWORK:"
19012,newCustomFileDownloaderCreator,"    static FileDownloaderCreator newCustomFileDownloaderCreator(Class<? extends FileDownloader> customClass) {
        return new FileDownloaderCreator(FileDownloaderType.CUSTOM, customClass, null);
    }"
19013,newNetworkFileDownloaderCreator,"    static FileDownloaderCreator newNetworkFileDownloaderCreator(HttpClient httpClient) {
        return new FileDownloaderCreator(FileDownloaderType.NETWORK, null, httpClient);
    }"
19016,onBytesRead,"        void onBytesRead(byte[] buffer, int bytesRead);
"
19018,startDownloading,"    void startDownloading(String url, FileSize fileSize, Callback callback);
"
19020,update,"        public void update(DownloadBatchStatus downloadBatchStatus) {
"
19021,setCallback,"        public void setCallback(DownloadBatchStatusCallback callback) {
"
19022,createsCustomThrottle,"    public void createsCustomThrottle() {
        FileCallbackThrottle fileCallbackThrottle = CallbackThrottleCreator.byCustomThrottle(TestValidCustomThrottle.class)
                .create();
"
19023,throwsException_whenCustomCallbackIsNotInstantiable,"    public void throwsException_whenCustomCallbackIsNotInstantiable() {
        CallbackThrottleCreator.byCustomThrottle(TestNonInstantiableCustomThrottle.class)
                .create();"
19024,throwsException_whenCustomCallbackIsNotFound,"    public void throwsException_whenCustomCallbackIsNotFound() {
        CallbackThrottleCreator.byCustomThrottle(TestNotFoundCustomThrottle.class)
                .create();"
19025,throwsException_whenCustomCallbackIsNotPublic,"    public void throwsException_whenCustomCallbackIsNotPublic() {
        CallbackThrottleCreator.byCustomThrottle(TestNonPublicCustomThrottle.class)
                .create();"
19026,throwsException_whenCallbackThrottleDoesNotExist,"    public void throwsException_whenCallbackThrottleDoesNotExist() {
        CallbackThrottleCreator.byCustomThrottle(null)
                .create();"
19027,createsProgressThrottle,"    public void createsProgressThrottle() {
        FileCallbackThrottle fileCallbackThrottle = CallbackThrottleCreator.byProgressIncrease()
                .create();
"
19028,createsTimeThrottle,"    public void createsTimeThrottle() {
        FileCallbackThrottle fileCallbackThrottle = CallbackThrottleCreator.byTime(TimeUnit.SECONDS, 1)
                .create();
"
19029,doesNotEmitLastStatus_whenCallbackAbsent,"    public void doesNotEmitLastStatus_whenCallbackAbsent() {
        callbackThrottleByTime.stopUpdates();

        verifyZeroInteractions(callback);"
19030,emitsLastStatus_whenStoppingUpdates,"    public void emitsLastStatus_whenStoppingUpdates() {
        callbackThrottleByTime.setCallback(callback);

        callbackThrottleByTime.stopUpdates();
"
19031,cancelsAllScheduledActions_whenStoppingUpdates,"    public void cancelsAllScheduledActions_whenStoppingUpdates() {
        callbackThrottleByTime.stopUpdates();

        verify(actionScheduler).cancelAll();"
19032,emitsStatus_whenSchedulingUniqueAction,"    public void emitsStatus_whenSchedulingUniqueAction() {
        callbackThrottleByTime.setCallback(callback);

        callbackThrottleByTime.update(downloadBatchStatus);
"
19033,doesNotSchedule_whenActionAlreadyScheduled,"    public void doesNotSchedule_whenActionAlreadyScheduled() {
        given(actionScheduler.isScheduled(any(ActionScheduler.Action.class))).willReturn(true);
        callbackThrottleByTime.setCallback(callback);

        callbackThrottleByTime.update(downloadBatchStatus);
"
19034,doesNothing_whenCallbackIsAbsent,"    public void doesNothing_whenCallbackIsAbsent() {
        callbackThrottleByTime.update(downloadBatchStatus);

        verifyZeroInteractions(actionScheduler, callback, downloadBatchStatus);"
19035,setUp,"    public void setUp() {
        final ArgumentCaptor<ActionScheduler.Action> argumentCaptor = ArgumentCaptor.forClass(ActionScheduler.Action.class);
        willAnswer((Answer<Void>) invocation -> {
            argumentCaptor.getValue().perform();"
19036,stopUpdates,"    public void stopUpdates() {
        if (callback != null) {
            callback.onUpdate(downloadBatchStatus);
        }"
19037,perform,"        public void perform() {
            callback.onUpdate(downloadBatchStatus);
        }"
19038,update,"    public void update(DownloadBatchStatus downloadBatchStatus) {
        if (callback == null) {
            Logger.w(""A DownloadBatchStatusCallback must be set before an update is called."");
            return;
        }"
19039,setCallback,"    public void setCallback(final DownloadBatchStatusCallback callback) {
        this.callback = callback;
    }"
19040,givenPreviousUpdate,"    private void givenPreviousUpdate(DownloadBatchStatus downloadBatchStatus) {
        callbackThrottleByProgressIncrease.update(downloadBatchStatus);
        reset(downloadBatchCallback);
    }"
19041,doesNothing_whenStoppingUpdates,"    public void doesNothing_whenStoppingUpdates() {
        callbackThrottleByProgressIncrease.setCallback(downloadBatchCallback);
        callbackThrottleByProgressIncrease.stopUpdates();

        callbackThrottleByProgressIncrease.update(percentageIncreasedStatus);
"
19042,doesNotEmit_whenPercentageIsUnchanged,"    public void doesNotEmit_whenPercentageIsUnchanged() {
        callbackThrottleByProgressIncrease.setCallback(downloadBatchCallback);
        givenPreviousUpdate(percentageIncreasedStatus);

        callbackThrottleByProgressIncrease.update(percentageIncreasedStatus);
"
19043,doesNothing_whenDownloadBatchStatusIsUnchanged,"    public void doesNothing_whenDownloadBatchStatusIsUnchanged() {
        callbackThrottleByProgressIncrease.setCallback(downloadBatchCallback);
        givenPreviousUpdate(percentageIncreasedStatus);

        callbackThrottleByProgressIncrease.update(percentageIncreasedStatus);
        then(downloadBatchCallback).should(never()).onUpdate(percentageIncreasedStatus);"
19044,doesNothing_whenCallbackUnset,"    public void doesNothing_whenCallbackUnset() {
        callbackThrottleByProgressIncrease.update(percentageIncreasedStatus);

        then(downloadBatchCallback).should(never()).onUpdate(percentageIncreasedStatus);"
19045,stopUpdates,"    public void stopUpdates() {
        callback = null;
    }"
19046,progressHasChanged,"    private boolean progressHasChanged(DownloadBatchStatus currentDownloadBatchStatus) {
        int newProgress = currentDownloadBatchStatus.percentageDownloaded();
        return currentProgress != newProgress;
    }"
19047,update,"    public void update(DownloadBatchStatus currentDownloadBatchStatus) {
        if (callback == null) {
            Logger.w(""A DownloadBatchStatusCallback must be set before an update is called."");
            return;"
19048,setCallback,"    public void setCallback(DownloadBatchStatusCallback callback) {
        this.callback = callback;
    }"
19050,update,"    void update(DownloadBatchStatus downloadBatchStatus);
"
19051,setCallback,"    void setCallback(DownloadBatchStatusCallback callback);
"
19052,downloadFileIdFor,"    static DownloadFileId downloadFileIdFor(DownloadBatchId downloadBatchId, BatchFile batchFile) {
        String fallbackId = downloadBatchId.rawId() + batchFile.networkAddress();
        return batchFile.downloadFileId().or(DownloadFileIdCreator.createFrom(fallbackId));
    }"
19054,update,"    public boolean update(DownloadBatchId downloadBatchId, boolean notificationSeen) {
        return true;
    }"
19055,update,"    public boolean update(DownloadBatchId downloadBatchId, DownloadBatchStatus.Status status) {
        return true;
    }"
19056,delete,"    public boolean delete(DownloadBatchId downloadBatchId) {
        return true;
    }"
19057,loadFiles,"    public List<DownloadsFilePersisted> loadFiles(final DownloadBatchId batchId) {
        for (Map.Entry<DownloadsBatchPersisted, List<DownloadsFilePersisted>> batchWithFiles : filesByBatches.entrySet()) {
            if (batchId.rawId().equals(batchWithFiles.getKey().downloadBatchId().rawId())) {
                return batchWithFiles.getValue();"
19058,loadAllFiles,"    public List<DownloadsFilePersisted> loadAllFiles() {
        List<DownloadsFilePersisted> allFiles = new ArrayList<>();
        for (Map.Entry<DownloadsBatchPersisted, List<DownloadsFilePersisted>> entry : filesByBatches.entrySet()) {
            allFiles.addAll(entry.getValue());
        }"
19060,loadBatches,"    public List<DownloadsBatchPersisted> loadBatches() {
        Set<DownloadsBatchPersisted> batches = filesByBatches.keySet();
        return new ArrayList<>(batches);
    }"
19065,persistCompletedBatch,"    void persistCompletedBatch(CompletedDownloadBatch completedDownloadBatch);
}"
19066,update,"    boolean update(DownloadBatchId downloadBatchId, boolean notificationSeen);
"
19067,update,"    boolean update(DownloadBatchId downloadBatchId, DownloadBatchStatus.Status status);
"
19068,delete,"    boolean delete(DownloadBatchId downloadBatchId);
"
19069,loadFiles,"    List<DownloadsFilePersisted> loadFiles(DownloadBatchId batchId);
"
19070,loadAllFiles,"    List<DownloadsFilePersisted> loadAllFiles();
"
19071,persistFile,"    void persistFile(DownloadsFilePersisted filePersisted);
"
19072,loadBatches,"    List<DownloadsBatchPersisted> loadBatches();
"
19073,persistBatch,"    void persistBatch(DownloadsBatchPersisted batchPersisted);
"
19077,updateNotificationSeenAsync,"    void updateNotificationSeenAsync(DownloadBatchStatus downloadBatchStatus, boolean notificationSeen);
}"
19078,getInstance,"    static DownloadsNetworkRecovery getInstance() {
        if (singleInstance == null) {
            throw new IllegalStateException(""There is no instance available, make sure you call DownloadsNetworkRecoveryCreator.create(...) first"");"
19079,createEnabled,"    static void createEnabled(Context context, LiteDownloadManager liteDownloadManager, ConnectionType connectionType) {
        DownloadsNetworkRecoveryCreator.singleInstance = new LiteDownloadsNetworkRecoveryEnabled(context, liteDownloadManager, connectionType);
    }"
19080,createDisabled,"    static void createDisabled() {
        DownloadsNetworkRecoveryCreator.singleInstance = DownloadsNetworkRecovery.DISABLED;
    }"
19083,updateAllowedConnectionType,"    void updateAllowedConnectionType(ConnectionType allowedConnectionType);
"
19085,getFileStatusFrom,"    private InternalDownloadFileStatus.Status getFileStatusFrom(DownloadBatchStatus.Status batchStatus) {
        switch (batchStatus) {
            case QUEUED:"
19086,loadSync,"    List<DownloadFile> loadSync(DownloadBatchId batchId,
                                DownloadBatchStatus.Status batchStatus,
                                FileOperations fileOperations,
                                DownloadsFilePersistence downloadsFilePersistence) {
        List<DownloadsFilePersisted> filePersistedList = downloadsPersistence.loadFiles(batchId);
"
19087,persistSync,"    boolean persistSync(DownloadBatchId downloadBatchId,
                        FilePath filePath,
                        FileSize fileSize,
                        String url,
                        DownloadFileStatus downloadFileStatus) {
        if (downloadFileStatus.status() == DownloadFileStatus.Status.DELETED) {"
19088,downloadFileId,"            public DownloadFileId downloadFileId() {
                return downloadFileId;
            }"
19089,url,"            public String url() {
                return url;
            }"
19090,totalFileSize,"            public long totalFileSize() {
                return totalFileSize;
            }"
19091,filePath,"            public FilePath filePath() {
                return filePath;
            }"
19092,downloadBatchId,"            public DownloadBatchId downloadBatchId() {
                return downloadBatchId;
            }"
19093,build,"    DownloadsFilePersisted build() {
        return new DownloadsFilePersisted() {
            @Override"
19094,withDownloadFileId,"    DownloadsFilePersistedFixtures withDownloadFileId(DownloadFileId downloadFileId) {
        this.downloadFileId = downloadFileId;
        return this;
    }"
19095,withUrl,"    DownloadsFilePersistedFixtures withUrl(String url) {
        this.url = url;
        return this;
    }"
19096,withTotalFileSize,"    DownloadsFilePersistedFixtures withTotalFileSize(long fileSize) {
        totalFileSize = fileSize;
        return this;
    }"
19097,withFilePath,"    DownloadsFilePersistedFixtures withFilePath(FilePath filePath) {
        this.filePath = filePath;
        return this;
    }"
19098,withDownloadBatchId,"    DownloadsFilePersistedFixtures withDownloadBatchId(DownloadBatchId downloadBatchId) {
        this.downloadBatchId = downloadBatchId;
        return this;
    }"
19099,aDownloadsFilePersisted,"    static DownloadsFilePersistedFixtures aDownloadsFilePersisted() {
        return new DownloadsFilePersistedFixtures();
    }"
19105,download,"    void download(DownloadBatch downloadBatch, DownloadBatchStatusCallback callback);
}"
19106,persistCompletedBatch,"    boolean persistCompletedBatch(CompletedDownloadBatch completedDownloadBatch);
}"
19107,updateStatusAsync,"    void updateStatusAsync(DownloadBatchId downloadBatchId, DownloadBatchStatus.Status status);
"
19108,onDeleted,"        void onDeleted(DownloadBatchId downloadBatchId);
    }"
19109,onLoaded,"        void onLoaded(List<DownloadBatch> downloadBatches);
    }"
19110,persistCompletedBatch,"    public boolean persistCompletedBatch(CompletedDownloadBatch completedDownloadBatch) {
        downloadsPersistence.startTransaction();

        try {"
19111,updateNotificationSeenAsync,"    public void updateNotificationSeenAsync(DownloadBatchStatus downloadBatchStatus, boolean notificationSeen) {
        executor.execute(() -> {
            downloadsPersistence.startTransaction();"
19112,updateStatusAsync,"    public void updateStatusAsync(DownloadBatchId downloadBatchId, DownloadBatchStatus.Status status) {
        executor.execute(() -> {
            downloadsPersistence.startTransaction();"
19113,deleteSync,"    boolean deleteSync(DownloadBatchStatus downloadBatchStatus) {
        DownloadBatchId downloadBatchId = downloadBatchStatus.getDownloadBatchId();
        downloadsPersistence.startTransaction();
        try {
            if (downloadsPersistence.delete(downloadBatchId)) {"
19114,deleteAsync,"    void deleteAsync(DownloadBatchStatus downloadBatchStatus, DeleteCallback deleteCallback) {
        executor.execute(() -> {
            if (deleteSync(downloadBatchStatus)) {"
19116,loadAsync,"    void loadAsync(FileOperations fileOperations, LoadBatchesCallback callback) {
        executor.execute(() -> {
            List<DownloadsBatchPersisted> batchPersistedList = downloadsPersistence.loadBatches();"
19117,persist,"    void persist(DownloadBatchTitle downloadBatchTitle,
                 DownloadBatchId downloadBatchId,
                 DownloadBatchStatus.Status status,
                 List<DownloadFile> downloadFiles,
                 long downloadedDateTimeInMillis,"
19118,persistAsync,"    void persistAsync(DownloadBatchTitle downloadBatchTitle,
                      DownloadBatchId downloadBatchId,
                      DownloadBatchStatus.Status status,"
19119,storageRoot,"            public String storageRoot() {
                return storageRoot;
            }"
19120,notificationSeen,"            public boolean notificationSeen() {
                return notificationSeen;
            }"
19121,downloadedDateTimeInMillis,"            public long downloadedDateTimeInMillis() {
                return downloadedDateTimeInMillis;
            }"
19122,downloadBatchTitle,"            public DownloadBatchTitle downloadBatchTitle() {
                return downloadBatchTitle;
            }"
19123,downloadBatchStatus,"            public DownloadBatchStatus.Status downloadBatchStatus() {
                return downloadBatchStatus;
            }"
19125,build,"    DownloadsBatchPersisted build() {
        return new DownloadsBatchPersisted() {
            @Override"
19126,withStorageRoot,"    DownloadsBatchPersistedFixtures withStorageRoot(String storageRoot) {
        this.storageRoot = storageRoot;
        return this;
    }"
19127,withNotificationSeen,"    DownloadsBatchPersistedFixtures withNotificationSeen(boolean notificationSeen) {
        this.notificationSeen = notificationSeen;
        return this;
    }"
19128,withDownloadedDateTimeInMillis,"    DownloadsBatchPersistedFixtures withDownloadedDateTimeInMillis(long downloadedDateTimeInMillis) {
        this.downloadedDateTimeInMillis = downloadedDateTimeInMillis;
        return this;
    }"
19129,asString,"            public String asString() {
                return title;
            }"
19130,withDownloadBatchTitle,"    DownloadsBatchPersistedFixtures withDownloadBatchTitle(final String title) {
        this.downloadBatchTitle = new DownloadBatchTitle() {
            @Override
            public String asString() {"
19131,withDownloadBatchStatus,"    DownloadsBatchPersistedFixtures withDownloadBatchStatus(DownloadBatchStatus.Status status) {
        this.downloadBatchStatus = status;
        return this;
    }"
19132,withRawDownloadBatchId,"    DownloadsBatchPersistedFixtures withRawDownloadBatchId(final String rawId) {
        downloadBatchId = aDownloadBatchId().withRawDownloadBatchId(rawId).build();
        return this;
    }"
19133,aDownloadsBatchPersisted,"    static DownloadsBatchPersistedFixtures aDownloadsBatchPersisted() {
        return new DownloadsBatchPersistedFixtures();
    }"
19138,downloadBatchStatus,"    DownloadBatchStatus.Status downloadBatchStatus();
"
19141,start,"    void start(int id, Notification notification);
"
19142,createProgressNotification,"        private Notification createProgressNotification(NotificationCompat.Builder builder, DownloadBatchStatus payload) {
            int bytesFileSize = (int) payload.bytesTotalSize();
            int bytesDownloaded = (int) payload.bytesDownloaded();
            String content = resources.getString(R.string.download_notification_content_progress, payload.percentageDownloaded());

            return builder"
19143,createCompletedNotification,"        private Notification createCompletedNotification(NotificationCompat.Builder builder) {
            String content = resources.getString(R.string.download_notification_content_completed);
            return builder
                    .setContentText(content)"
19144,createErrorNotification,"        private Notification createErrorNotification(NotificationCompat.Builder builder, DownloadError downloadError) {
            String content = resources.getString(R.string.download_notification_content_error, downloadError.type().name());
            return builder
                    .setContentText(content)"
19145,createDeletedNotification,"        private Notification createDeletedNotification(NotificationCompat.Builder builder) {
            String content = resources.getString(R.string.download_notification_content_deleted);
            return builder
                    .setContentText(content)"
19146,customNotificationFrom,"        public Notification customNotificationFrom(NotificationCompat.Builder builder, DownloadBatchStatus payload) {
            DownloadBatchTitle downloadBatchTitle = payload.getDownloadBatchTitle();
            String title = downloadBatchTitle.asString();
            builder.setSmallIcon(notificationIcon)
                    .setContentTitle(title);
"
19147,notificationDisplayState,"        public NotificationDisplayState notificationDisplayState(DownloadBatchStatus payload) {
            DownloadBatchStatus.Status status = payload.status();
            if (status == DOWNLOADED || status == DELETED || status == DELETING || status == ERROR || status == PAUSED) {
                return NotificationDisplayState.STACK_NOTIFICATION_DISMISSIBLE;"
19148,getCallbackThrottleCreator,"    private CallbackThrottleCreator getCallbackThrottleCreator(CallbackThrottleCreator.Type callbackThrottleType,
                                                               TimeUnit timeUnit,
                                                               long frequency,"
19150,onServiceConnected,"            public void onServiceConnected(ComponentName name, IBinder service) {
                if (service instanceof LiteDownloadService.DownloadServiceBinder) {
                    LiteDownloadService.DownloadServiceBinder binder = (LiteDownloadService.DownloadServiceBinder) service;"
19152,withLogHandle,"    public DownloadManagerBuilder withLogHandle(LogHandle logHandle) {
        this.logHandle = Optional.fromNullable(logHandle);
        return this;
    }"
19153,withCallbackThrottleByProgressIncrease,"    public DownloadManagerBuilder withCallbackThrottleByProgressIncrease() {
        this.callbackThrottleCreatorType = CallbackThrottleCreator.Type.THROTTLE_BY_PROGRESS_INCREASE;
        return this;
    }"
19154,withCallbackThrottleByTime,"    public DownloadManagerBuilder withCallbackThrottleByTime(TimeUnit timeUnit, long frequency) {
        this.callbackThrottleCreatorType = CallbackThrottleCreator.Type.THROTTLE_BY_TIME;
        this.timeUnit = timeUnit;
        this.frequency = frequency;
        return this;
    }"
19155,withCallbackThrottleCustom,"    public DownloadManagerBuilder withCallbackThrottleCustom(Class<? extends FileCallbackThrottle> customCallbackThrottle) {
        this.callbackThrottleCreatorType = CallbackThrottleCreator.Type.CUSTOM;
        this.customCallbackThrottle = customCallbackThrottle;
        return this;
    }"
19156,withoutNetworkRecovery,"    public DownloadManagerBuilder withoutNetworkRecovery() {
        allowNetworkRecovery = false;
        return this;
    }"
19157,withAllowedConnectionType,"    public DownloadManagerBuilder withAllowedConnectionType(ConnectionType connectionTypeAllowed) {
        this.connectionTypeAllowed = connectionTypeAllowed;
        return this;
    }"
19158,withNotification,"    public DownloadManagerBuilder withNotification(NotificationCustomizer<DownloadBatchStatus> notificationCustomizer) {
        this.notificationCreator = new DownloadBatchStatusNotificationCreator(
                applicationContext,
                notificationCustomizer,"
19159,withNotificationChannel,"    public DownloadManagerBuilder withNotificationChannel(String channelId, String name, @Importance int importance) {
        this.notificationChannelProvider = new DefaultNotificationChannelProvider(channelId, name, importance);
        this.notificationCreator.setNotificationChannelProvider(notificationChannelProvider);
        return this;
    }"
19160,withNotificationChannel,"    public DownloadManagerBuilder withNotificationChannel(NotificationChannel notificationChannel) {
        this.notificationChannelProvider = new OreoNotificationChannelProvider(notificationChannel);
        this.notificationCreator.setNotificationChannelProvider(notificationChannelProvider);
        return this;
    }"
19161,withDownloadsPersistenceCustom,"    public DownloadManagerBuilder withDownloadsPersistenceCustom(DownloadsPersistence downloadsPersistence) {
        this.downloadsPersistence = downloadsPersistence;
        return this;
    }"
19162,withDownloadBatchRequirementRules,"    public DownloadManagerBuilder withDownloadBatchRequirementRules(DownloadBatchRequirementRule... downloadBatchRequirementRules) {
        for (DownloadBatchRequirementRule downloadBatchRequirementRule : downloadBatchRequirementRules) {
            this.downloadBatchRequirementRules.addRule(downloadBatchRequirementRule);
        }"
19163,withStorageRequirementRules,"    public DownloadManagerBuilder withStorageRequirementRules(StorageRequirementRule... storageRequirementRules) {
        for (StorageRequirementRule storageRequirementRule : storageRequirementRules) {
            this.storageRequirementRules.addRule(storageRequirementRule);
        }"
19164,withFileDownloaderCustom,"    public DownloadManagerBuilder withFileDownloaderCustom(FileSizeRequester fileSizeRequester,
                                                           Class<? extends FileDownloader> customFileDownloaderClass) {
        this.fileSizeRequester = fileSizeRequester;
        this.fileDownloaderCreator = FileDownloaderCreator.newCustomFileDownloaderCreator(customFileDownloaderClass);
        return this;"
19165,withCustomHttpClient,"    public DownloadManagerBuilder withCustomHttpClient(HttpClient httpClient) {
        NetworkRequestCreator requestCreator = new NetworkRequestCreator();
        this.fileSizeRequester = new NetworkFileSizeRequester(httpClient, requestCreator);
        this.fileDownloaderCreator = FileDownloaderCreator.newNetworkFileDownloaderCreator(httpClient);
        return this;
    }"
19167,addCompletedBatch,"    boolean addCompletedBatch(CompletedDownloadBatch completedDownloadBatch);
}"
19169,getDownloadFileStatusWithMatching,"    void getDownloadFileStatusWithMatching(DownloadBatchId downloadBatchId, DownloadFileId downloadFileId, DownloadFileStatusCallback callback);
"
19170,getDownloadFileStatusWithMatching,"    DownloadFileStatus getDownloadFileStatusWithMatching(DownloadBatchId downloadBatchId, DownloadFileId downloadFileId);
"
19171,getAllDownloadBatchStatuses,"    void getAllDownloadBatchStatuses(AllBatchStatusesCallback callback);
"
19172,getAllDownloadBatchStatuses,"    List<DownloadBatchStatus> getAllDownloadBatchStatuses();
"
19173,submitAllStoredDownloads,"    void submitAllStoredDownloads(AllStoredDownloadsSubmittedCallback callback);
"
19174,removeDownloadBatchCallback,"    void removeDownloadBatchCallback(DownloadBatchStatusCallback downloadBatchCallback);
"
19175,addDownloadBatchCallback,"    void addDownloadBatchCallback(DownloadBatchStatusCallback downloadBatchCallback);
"
19176,delete,"    void delete(DownloadBatchId downloadBatchId);
"
19177,resume,"    void resume(DownloadBatchId downloadBatchId);
"
19178,pause,"    void pause(DownloadBatchId downloadBatchId);
"
19180,build,"    InternalDownloadFileStatus build() {
        return new LiteDownloadFileStatus(
                downloadBatchId,"
19181,withLocalFilePath,"    public DownloadFileStatusFixtures withLocalFilePath(FilePath localFilePath) {
        this.localFilePath = localFilePath;
        return this;
    }"
19182,withFileSize,"    DownloadFileStatusFixtures withFileSize(FileSize fileSize) {
        this.fileSize = fileSize;
        return this;
    }"
19183,withStatus,"    DownloadFileStatusFixtures withStatus(InternalDownloadFileStatus.Status status) {
        this.status = status;
        return this;
    }"
19184,withDownloadFileId,"    DownloadFileStatusFixtures withDownloadFileId(DownloadFileId downloadFileId) {
        this.downloadFileId = downloadFileId;
        return this;
    }"
19185,withDownloadBatchId,"    public DownloadFileStatusFixtures withDownloadBatchId(DownloadBatchId downloadBatchId) {
        this.downloadBatchId = downloadBatchId;
        return this;
    }"
19186,aDownloadFileStatus,"    static DownloadFileStatusFixtures aDownloadFileStatus() {
        return new DownloadFileStatusFixtures();
    }"
19187,onReceived,"    void onReceived(@Nullable DownloadFileStatus downloadFileStatus);
}"
19194,build,"    DownloadFileId build() {
        return () -> rawDownloadFileId;
    }"
19195,withRawDownloadFileId,"    DownloadFileIdFixtures withRawDownloadFileId(String rawDownloadFileId) {
        this.rawDownloadFileId = rawDownloadFileId;
        return this;
    }"
19196,aDownloadFileId,"    static DownloadFileIdFixtures aDownloadFileId() {
        return new DownloadFileIdFixtures();
    }"
19197,createFrom,"    public static DownloadFileId createFrom(String rawId) {
        return new LiteDownloadFileId(rawId);
    }"
19199,build,"    DownloadFile build() {
        return new DownloadFile(
                downloadBatchId,"
19200,withDownloadsFilePersistence,"    DownloadFileFixtures withDownloadsFilePersistence(DownloadsFilePersistence downloadsFilePersistence) {
        this.downloadsFilePersistence = downloadsFilePersistence;
        return this;
    }"
19201,withFilePersistence,"    DownloadFileFixtures withFilePersistence(FilePersistence filePersistence) {
        this.filePersistence = filePersistence;
        return this;
    }"
19202,withFileSizeRequester,"    DownloadFileFixtures withFileSizeRequester(FileSizeRequester fileSizeRequester) {
        this.fileSizeRequester = fileSizeRequester;
        return this;
    }"
19203,withFileDownloader,"    DownloadFileFixtures withFileDownloader(FileDownloader fileDownloader) {
        this.fileDownloader = fileDownloader;
        return this;
    }"
19204,withFileSize,"    DownloadFileFixtures withFileSize(InternalFileSize fileSize) {
        this.fileSize = fileSize;
        return this;
    }"
19205,withFilePath,"    DownloadFileFixtures withFilePath(FilePath filePath) {
        this.filePath = filePath;
        return this;
    }"
19206,withDownloadFileStatus,"    DownloadFileFixtures withDownloadFileStatus(InternalDownloadFileStatus downloadFileStatus) {
        this.downloadFileStatus = downloadFileStatus;
        return this;
    }"
19207,withUrl,"    DownloadFileFixtures withUrl(String url) {
        this.url = url;
        return this;
    }"
19208,withDownloadFileId,"    DownloadFileFixtures withDownloadFileId(DownloadFileId downloadFileId) {
        this.downloadFileId = downloadFileId;
        return this;
    }"
19209,withDownloadBatchId,"    DownloadFileFixtures withDownloadBatchId(DownloadBatchId downloadBatchId) {
        this.downloadBatchId = downloadBatchId;
        return this;
    }"
19210,aDownloadFile,"    static DownloadFileFixtures aDownloadFile() {
        return new DownloadFileFixtures();
    }"
19212,onUpdate,"        void onUpdate(InternalDownloadFileStatus downloadFileStatus);
"
19213,fileStatus,"    DownloadFileStatus fileStatus() {
        return downloadFileStatus;
    }"
19214,matches,"    boolean matches(DownloadFileId downloadFileId) {
        return this.downloadFileId.equals(downloadFileId);
    }"
19215,id,"    DownloadFileId id() {
        return downloadFileStatus.downloadFileId();
    }"
19216,getCurrentDownloadedBytes,"    long getCurrentDownloadedBytes() {
        return fileSize.currentSize();
    }"
19217,persist,"    boolean persist() {
        return downloadsFilePersistence.persistSync(
                downloadBatchId,"
19218,getTotalSize,"    long getTotalSize() {
        if (fileSize.isTotalSizeUnknown()) {
            FileSize requestFileSize = fileSizeRequester.requestFileSize(url);
            fileSize.setTotalSize(requestFileSize.totalSize());"
19219,delete,"    void delete() {
        if (downloadFileStatus.isMarkedAsDownloading()) {
            downloadFileStatus.markAsDeleted();"
19220,waitForNetwork,"    void waitForNetwork() {
        downloadFileStatus.waitForNetwork();
        fileDownloader.stopDownloading();
    }"
19221,resume,"    void resume() {
        downloadFileStatus.markAsQueued();
    }"
19222,pause,"    void pause() {
        downloadFileStatus.markAsPaused();
        fileDownloader.stopDownloading();
    }"
19223,updateAndFeedbackWithStatus,"    private void updateAndFeedbackWithStatus(DownloadError downloadError, Callback callback) {
        downloadFileStatus.markAsError(downloadError);
        callback.onUpdate(downloadFileStatus);
    }"
19224,requestTotalFileSizeIfNecessary,"    private InternalFileSize requestTotalFileSizeIfNecessary(InternalFileSize fileSize) {
        InternalFileSize updatedFileSize = fileSize.copy();

        if (fileSize.isTotalSizeUnknown()) {
            FileSize requestFileSize = fileSizeRequester.requestFileSize(url);"
19225,convertError,"    private DownloadError convertError(FilePersistenceResult status) {
        switch (status) {
            case ERROR_UNKNOWN_TOTAL_FILE_SIZE:"
19226,onDownloadFinished,"            public void onDownloadFinished() {
                filePersistence.close();
                if (downloadFileStatus.isMarkedAsDeleted()) {
                    filePersistence.delete(filePath);
                    callback.onDelete();"
19227,onError,"            public void onError(String cause) {
                DownloadError downloadError = DownloadErrorFactory.createNetworkError(cause);
                updateAndFeedbackWithStatus(downloadError, callback);
            }"
19228,onBytesRead,"            public void onBytesRead(byte[] buffer, int bytesRead) {
                boolean success = filePersistence.write(buffer, 0, bytesRead);
                if (!success) {
                    DownloadError downloadError = DownloadErrorFactory.createCannotWriteToFileError(downloadFileStatus);
                    updateAndFeedbackWithStatus(downloadError, callback);"
19230,createUnknownErrorFor,"    static DownloadError createUnknownErrorFor(FilePersistenceResult status) {
        String unknownErrorMessage = ""Unhandled error for FilePersistenceResult: "" + status.name();
        return new DownloadError(DownloadError.Type.UNKNOWN, unknownErrorMessage);
    }"
19231,createNetworkError,"    static DownloadError createNetworkError(String networkErrorCause) {
        String networkErrorMessage = ""Network error, cannot download file. Cause: "" + networkErrorCause;
        return new DownloadError(DownloadError.Type.NETWORK_ERROR_CANNOT_DOWNLOAD_FILE, networkErrorMessage);
    }"
19232,createCannotWriteToFileError,"    static DownloadError createCannotWriteToFileError(DownloadFileStatus downloadFileStatus) {
        String cannotWriteToFileMessage = ""Cannot write to file with Id: "" + downloadFileStatus.downloadFileId().rawId();
        return new DownloadError(DownloadError.Type.FILE_CANNOT_BE_WRITTEN, cannotWriteToFileMessage);
    }"
19233,createInsufficientFreeSpaceError,"    static DownloadError createInsufficientFreeSpaceError(DownloadFileStatus downloadFileStatus) {
        String insufficientFreeSpaceMessage =
                ""Insufficient free space to create file with ID: ""
                        + downloadFileStatus.downloadFileId().rawId()"
19234,createTotalSizeRequestFailedError,"    static DownloadError createTotalSizeRequestFailedError(DownloadFileId downloadFileId, String url) {
        String totalSizeRequestFailedMessage = ""Total size request failed for File with ID: ""
                + downloadFileId.rawId()
                + "" and Request: """
19235,createSizeMismatchError,"    static DownloadError createSizeMismatchError(DownloadFileStatus downloadFileStatus) {
        String sizeMismatchMessage = ""Download File with ID: ""
                + downloadFileStatus.downloadBatchId().rawId()
                + "" has a greater current size: """
19236,toString,"    public String toString() {
        return ""DownloadError{""
                + ""type="" + type"
19237,hashCode,"    public int hashCode() {
        int result = type != null ? type.hashCode() : 0;
        result = 31 * result + (message != null ? message.hashCode() : 0);
        return result;
    }"
19239,message,"    public String message() {
        return message;
    }"
19240,type,"    public Type type() {
        return type;
    }"
19241,asString,"            public String asString() {
                return rawBatchTitle;
            }"
19242,build,"    DownloadBatchTitle build() {
        return new DownloadBatchTitle() {
            @Override"
19243,withRawBatchTitle,"    DownloadBatchTitleFixtures withRawBatchTitle(String rawBatchTitle) {
        this.rawBatchTitle = rawBatchTitle;
        return this;
    }"
19244,aDownloadBatchTitle,"    static DownloadBatchTitleFixtures aDownloadBatchTitle() {
        return new DownloadBatchTitleFixtures();
    }"
19245,createFrom,"    public static DownloadBatchTitle createFrom(String title) {
        return new LiteDownloadBatchTitle(title);
    }"
19246,createFrom,"    public static DownloadBatchTitle createFrom(Batch batch) {
        return new LiteDownloadBatchTitle(batch.title());
    }"
19252,getStatusMessage,"    private String getStatusMessage(DownloadBatchStatus downloadBatchStatus) {
        if (downloadBatchStatus.status() == ERROR) {
            return ""\nstatus: "" + downloadBatchStatus.status()"
19253,createMessageFrom,"    private String createMessageFrom(DownloadBatchStatus downloadBatchStatus) {
        String status = getStatusMessage(downloadBatchStatus);

        return ""Batch "" + downloadBatchStatus.getDownloadBatchTitle().asString()"
19254,update,"    public void update(DownloadBatchStatus downloadBatchStatus) {
        statusTextView.setText(createMessageFrom(downloadBatchStatus));
    }"
19255,setListener,"    public void setListener(DownloadBatchStatusListener downloadBatchStatusListener) {
        this.downloadBatchStatusListener = downloadBatchStatusListener;
    }"
19256,onFinishInflate,"    protected void onFinishInflate() {
        super.onFinishInflate();
        View.inflate(getContext(), R.layout.merge_download_batch_status, this);

        statusTextView = findViewById(R.id.download_batch_status);

        findViewById(R.id.button_pause_downloading).setOnClickListener(view -> downloadBatchStatusListener.onBatchPaused());"
19257,setsDownloadServiceOnNotificationDispatcher,"    public void setsDownloadServiceOnNotificationDispatcher() {
        DownloadService downloadService = mock(LiteDownloadService.class);

        downloadBatchStatusNotificationDispatcher.setDownloadService(downloadService);
"
19258,updatesNotification_whenNotificationHasNotBeenSeen,"    public void updatesNotification_whenNotificationHasNotBeenSeen() {
        InternalDownloadBatchStatus notificationNotSeenStatus = anInternalDownloadsBatchStatus().withNotificationSeen(false).build();

        downloadBatchStatusNotificationDispatcher.updateNotification(notificationNotSeenStatus);
"
19259,doesNothing_whenNotificationHasBeenSeen,"    public void doesNothing_whenNotificationHasBeenSeen() {
        InternalDownloadBatchStatus notificationSeenStatus = anInternalDownloadsBatchStatus().withNotificationSeen(true).build();

        downloadBatchStatusNotificationDispatcher.updateNotification(notificationSeenStatus);
"
19260,updatesNotificationSeen_whenStatusIsDownloaded,"    public void updatesNotificationSeen_whenStatusIsDownloaded() {
        InternalDownloadBatchStatus downloadedBatchStatus = anInternalDownloadsBatchStatus().withStatus(DownloadBatchStatus.Status.DOWNLOADED).build();

        downloadBatchStatusNotificationDispatcher.updateNotification(downloadedBatchStatus);
"
19261,setUp,"    public void setUp() {
        HashSet<String> downloadBatchIdNotificationSeen = new HashSet<>();
        downloadBatchStatusNotificationDispatcher = new DownloadBatchStatusNotificationDispatcher(persistence, notificationDispatcher, downloadBatchIdNotificationSeen);
    }"
19262,setDownloadService,"    void setDownloadService(DownloadService downloadService) {
        notificationDispatcher.setService(downloadService);
    }"
19263,notificationIsNotMarkedAsSeenYet,"    private boolean notificationIsNotMarkedAsSeenYet(DownloadBatchStatus downloadBatchStatus, String rawDownloadBatchId) {
        return downloadBatchStatus.status() == DOWNLOADED && !downloadBatchIdNotificationSeen.contains(rawDownloadBatchId);
    }"
19264,updateNotification,"    void updateNotification(InternalDownloadBatchStatus downloadBatchStatus) {
        if (downloadBatchStatus.notificationSeen()) {
            Logger.v(""DownloadBatchStatus:"", downloadBatchStatus.getDownloadBatchId(), ""notification has already been seen."");
            return;
        }

        String rawDownloadBatchId = downloadBatchStatus.getDownloadBatchId().rawId();"
19265,notificationDisplayState,"            public NotificationCustomizer.NotificationDisplayState notificationDisplayState() {
                return notificationCustomizer.notificationDisplayState(downloadBatchStatus);
            }"
19266,hasChanged,"            private boolean hasChanged(int notificationId, DownloadBatchStatus.Status status) {
                return previousNotificationId != notificationId || !previousStatus.equals(status);
            }"
19267,getNotification,"            public Notification getNotification() {
                int notificationId = getId();
                DownloadBatchStatus.Status status = downloadBatchStatus.status();

                if (builder == null || hasChanged(previousNotificationId, status)) {
                    builder = new NotificationCompat.Builder(applicationContext, notificationChannelProvider.channelId());"
19268,getId,"            public int getId() {
                return downloadBatchStatus.getDownloadBatchId().hashCode();
            }"
19269,createNotification,"    public NotificationInformation createNotification(final DownloadBatchStatus downloadBatchStatus) {
        return new NotificationInformation() {
            @Override"
19270,setNotificationChannelProvider,"    public void setNotificationChannelProvider(NotificationChannelProvider notificationChannelProvider) {
        this.notificationChannelProvider = notificationChannelProvider;
    }"
19271,givenPreviousUpdate,"    private void givenPreviousUpdate(InternalDownloadBatchStatus downloadBatchStatus) {
        downloadBatchStatusFilter.shouldFilterOut(downloadBatchStatus);
    }"
19272,returnsTrue_whenStatusIsUnchanged,"    public void returnsTrue_whenStatusIsUnchanged() {
        givenPreviousUpdate(firstStatus);

        boolean shouldFilterOut = downloadBatchStatusFilter.shouldFilterOut(firstStatus);
"
19273,returnsFalse_whenStatusDoesNotMatchPrevious,"    public void returnsFalse_whenStatusDoesNotMatchPrevious() {
        givenPreviousUpdate(firstStatus);

        boolean shouldFilterOut = downloadBatchStatusFilter.shouldFilterOut(secondStatus);
"
19274,returnsTrue_whenErrorIsUnchanged,"    public void returnsTrue_whenErrorIsUnchanged() {
        givenPreviousUpdate(firstErrorStatus);

        boolean shouldFilterOut = downloadBatchStatusFilter.shouldFilterOut(firstErrorStatus);
"
19275,returnsFalse_whenErrorDoesNotMatchPrevious,"    public void returnsFalse_whenErrorDoesNotMatchPrevious() {
        givenPreviousUpdate(firstErrorStatus);

        boolean shouldFilterOut = downloadBatchStatusFilter.shouldFilterOut(secondErrorStatus);
"
19276,returnsTrue_whenPercentageIsUnchanged,"    public void returnsTrue_whenPercentageIsUnchanged() {
        givenPreviousUpdate(firstPercentageStatus);

        boolean shouldFilterOut = downloadBatchStatusFilter.shouldFilterOut(firstPercentageStatus);
"
19277,returnsFalse_whenPercentageDoesNotMatchPrevious,"    public void returnsFalse_whenPercentageDoesNotMatchPrevious() {
        givenPreviousUpdate(firstPercentageStatus);

        boolean shouldFilterOut = downloadBatchStatusFilter.shouldFilterOut(secondPercentageStatus);
"
19279,onUpdate,"    void onUpdate(DownloadBatchStatus downloadBatchStatus);
}"
19289,getDownloadBatchTitle,"    DownloadBatchTitle getDownloadBatchTitle();
"
19290,from,"        public static Status from(String rawValue) {
            for (Status status : Status.values()) {
                if (status.name().equals(rawValue)) {
                    return status;"
19291,toRawValue,"        public String toRawValue() {
            return this.name();
        }"
19292,hasViolatedRule,"    public boolean hasViolatedRule(DownloadBatchStatus downloadBatchStatus) {
        return batchSizeProvider.getMaxSizeOfBatch() < downloadBatchStatus.bytesTotalSize();
    }"
19293,getTotalSize,"    static long getTotalSize(List<DownloadFile> downloadFiles, DownloadBatchStatus.Status status, DownloadBatchId downloadBatchId) {
        long totalBatchSize = 0;
        for (DownloadFile downloadFile : downloadFiles) {
            if (status == DELETING || status == DELETED || status == PAUSED) {
                Logger.w(""abort getTotalSize file "" + downloadFile.id().rawId()"
19294,hasViolatedRule,"    public boolean hasViolatedRule(DownloadBatchStatus downloadBatchStatus) {
        for (DownloadBatchRequirementRule requirementRule : rules) {
            if (requirementRule.hasViolatedRule(downloadBatchStatus)) {
                return true;"
19295,addRule,"    void addRule(DownloadBatchRequirementRule storageRequirementRule) {
        rules.add(storageRequirementRule);
    }"
19296,newInstance,"    static DownloadBatchRequirementRules newInstance() {
        return new DownloadBatchRequirementRules(new ArrayList<>());
    }"
19297,hasViolatedRule,"    boolean hasViolatedRule(DownloadBatchStatus downloadBatchStatus);
}"
19298,build,"    DownloadBatchId build() {
        return () -> rawDownloadBatchId;
    }"
19299,withRawDownloadBatchId,"    DownloadBatchIdFixtures withRawDownloadBatchId(String rawDownloadBatchId) {
        this.rawDownloadBatchId = rawDownloadBatchId;
        return this;
    }"
19300,aDownloadBatchId,"    static DownloadBatchIdFixtures aDownloadBatchId() {
        return new DownloadBatchIdFixtures();
    }"
19301,sanitizeBatchId,"    private static String sanitizeBatchId(String batchIdPath) {
        return batchIdPath.replaceAll(""[:\\\\/*?|<>]"", ""_"");
    }"
19302,createSanitizedFrom,"    public static DownloadBatchId createSanitizedFrom(String rawId) {
        String sanitizedBatchId = sanitizeBatchId(rawId);
        return new LiteDownloadBatchId(sanitizedBatchId);
    }"
19305,updateTotalSize,"    void updateTotalSize() {
        if (totalBatchSizeBytes == 0) {
            totalBatchSizeBytes = DownloadBatchSizeCalculator.getTotalSize(
                    downloadFiles,"
19306,persist,"    void persist() {
        downloadsBatchPersistence.persist(
                downloadBatchStatus.getDownloadBatchTitle(),"
19307,persistAsync,"    void persistAsync() {
        downloadsBatchPersistence.persistAsync(
                downloadBatchStatus.getDownloadBatchTitle(),"
19308,downloadFileStatusWith,"    DownloadFileStatus downloadFileStatusWith(DownloadFileId downloadFileId) {
        for (DownloadFile downloadFile : downloadFiles) {
            if (downloadFile.matches(downloadFileId)) {
                return downloadFile.fileStatus();"
19309,status,"    InternalDownloadBatchStatus status() {
        return downloadBatchStatus;
    }"
19310,getId,"    DownloadBatchId getId() {
        return downloadBatchStatus.getDownloadBatchId();
    }"
19311,isDirectoryEmpty,"    private boolean isDirectoryEmpty(File directory) {
        if (directory.isDirectory()) {
            String[] children = directory.list();
            return children == null || children.length == 0;"
19312,deleteDirectoriesIfEmpty,"    private void deleteDirectoriesIfEmpty(File batchRootDirectory) {
        if (batchRootDirectory.isDirectory()) {
            File[] nestedDirectories = batchRootDirectory.listFiles();
            if (nestedDirectories != null) {"
19313,deleteDownloadDirectories,"    private void deleteDownloadDirectories() {
        BatchStorageRoot batchStorageRoot = BatchStorageRoot.with(downloadBatchStatus::storageRoot, downloadBatchStatus.getDownloadBatchId());
        File batchRootDir = new File(batchStorageRoot.path());
        if (batchRootDir.exists()) {
            deleteDirectoriesIfEmpty(batchRootDir);"
19315,resume,"    void resume() {
        DownloadBatchStatus.Status status = downloadBatchStatus.status();
        if (status == QUEUED || status == DOWNLOADING || status == DOWNLOADED) {
            Logger.v(BATCH + downloadBatchStatus.getDownloadBatchId().rawId()
                             + STATUS + status
                             + "" abort resume batch"");
            return;"
19316,waitForNetwork,"    void waitForNetwork() {
        DownloadBatchStatus.Status status = downloadBatchStatus.status();
        if (status != DOWNLOADING) {
            Logger.v(BATCH + downloadBatchStatus.getDownloadBatchId().rawId()
                             + STATUS + status"
19318,networkError,"    private static boolean networkError(InternalDownloadBatchStatus downloadBatchStatus) {
        DownloadBatchStatus.Status status = downloadBatchStatus.status();
        if (downloadBatchStatus.status() == DELETING) {
            Logger.v(BATCH + downloadBatchStatus.getDownloadBatchId().rawId()
                             + STATUS + status
                             + "" abort network error"");"
19319,getBytesDownloadedFrom,"    private static long getBytesDownloadedFrom(Map<DownloadFileId, Long> fileBytesDownloadedMap) {
        long bytesDownloaded = 0;
        for (Map.Entry<DownloadFileId, Long> entry : fileBytesDownloadedMap.entrySet()) {
            bytesDownloaded += entry.getValue();
        }"
19320,onDelete,"        public void onDelete() {
            deleteDownloadDirectories();
        }"
19322,batchCannotContinue,"    private static boolean batchCannotContinue(InternalDownloadBatchStatus downloadBatchStatus,
                                               ConnectionChecker connectionChecker,
                                               DownloadsBatchPersistence downloadsBatchPersistence,
                                               DownloadBatchStatusCallback callback) {"
19324,markAsDownloadingIfNeeded,"    private static void markAsDownloadingIfNeeded(InternalDownloadBatchStatus downloadBatchStatus,
                                                  DownloadsBatchPersistence downloadsBatchPersistence,
                                                  DownloadBatchStatusCallback callback) {"
19326,connectionNotAllowedForDownload,"    private static boolean connectionNotAllowedForDownload(ConnectionChecker connectionChecker, DownloadBatchStatus.Status status) {
        return !connectionChecker.isAllowedToDownload() && status != DOWNLOADED;
    }"
19327,notifyCallback,"    private static void notifyCallback(DownloadBatchStatusCallback callback, InternalDownloadBatchStatus downloadBatchStatus) {
        if (callback != null) {
            callback.onUpdate(downloadBatchStatus.copy());"
19328,deleteBatchIfNeeded,"    private static void deleteBatchIfNeeded(InternalDownloadBatchStatus downloadBatchStatus,
                                            DownloadsBatchPersistence downloadsBatchPersistence,
                                            DownloadBatchStatusCallback callback) {"
19331,setCallback,"    void setCallback(DownloadBatchStatusCallback callback) {
        this.callback = callback;
        fileCallbackThrottle.setCallback(callback);
    }"
19332,formatString,"    private static String formatString(Object... msg) {
        StringBuilder stringBuilder = new StringBuilder();
        for (Object o : msg) {
            stringBuilder.append(String.valueOf(o)).append(SEPARATOR);
        }"
19333,e,"    public void e(Throwable throwable, Object... message) {
        Log.e(TAG, formatString(message), throwable);
    }"
19334,e,"    public void e(Object... message) {
        Log.e(TAG, formatString(message));
    }"
19335,w,"    public void w(Throwable throwable, Object... message) {
        Log.w(TAG, formatString(message), throwable);
    }"
19336,w,"    public void w(Object... message) {
        Log.w(TAG, formatString(message));
    }"
19337,d,"    public void d(Throwable throwable, Object... message) {
        Log.d(TAG, formatString(message), throwable);
    }"
19338,d,"    public void d(Object... message) {
        Log.d(TAG, formatString(message));
    }"
19339,i,"    public void i(Object... message) {
        Log.i(TAG, formatString(message));
    }"
19340,v,"    public void v(Object... message) {
        Log.v(TAG, formatString(message));
    }"
19341,setMaxSizeOfBatch,"    public void setMaxSizeOfBatch(long maxSizeOfBatch) {
        this.maxSizeOfBatch = maxSizeOfBatch;
    }"
19342,getMaxSizeOfBatch,"    public long getMaxSizeOfBatch() {
        return maxSizeOfBatch;
    }"
19343,getBatchSizeProvider,"    public DemoBatchSizeProvider getBatchSizeProvider() {
        return batchSizeProvider;
    }"
19344,getDownloadManager,"    public DownloadManager getDownloadManager() {
        return downloadManager;
    }"
19345,customHttpClient,"    private HttpClient customHttpClient() {
        OkHttpClient okHttpClient = new OkHttpClient.Builder()
                .connectTimeout(TIMEOUT, TimeUnit.SECONDS)
                .writeTimeout(TIMEOUT, TimeUnit.SECONDS)"
19346,createLiteDownloadManager,"    private void createLiteDownloadManager() {
        Handler handler = new Handler(Looper.getMainLooper());

        downloadManager = DownloadManagerBuilder"
19347,onCreate,"    public void onCreate() {
        super.onCreate();
        Stetho.initializeWithDefaults(this);
        createLiteDownloadManager();
    }"
19348,channelId,"    public String channelId() {
        return channelId;
    }"
19350,onUpdate,"            public void onUpdate(String updateMessage) {
                mainThreadHandler.post(() -> cloneCallback.onUpdate(updateMessage));
            }"
19359,requestFileSize,"    public FileSize requestFileSize(String url) {
        return FileSizeCreator.createFromTotalSize(FILE_TOTAL_SIZE);
    }"
19360,stopDownloading,"    public void stopDownloading() {
        Log.v(TAG, ""Stop downloading"");
        canDownload = false;
    }"
19361,startDownloading,"    public void startDownloading(String url, FileSize fileSize, Callback callback) {
        Log.v(TAG, ""Start downloading"");

        canDownload = true;

        while (canDownload && fileSize.currentSize() < fileSize.totalSize()) {
            try {"
19362,stopUpdates,"    public void stopUpdates() {
        Log.v(TAG, ""stopUpdates"");
    }"
19363,update,"    public void update(DownloadBatchStatus downloadBatchStatus) {
        Log.v(TAG, ""update "" + downloadBatchStatus.getDownloadBatchTitle().asString()
                + "", progress: "" + downloadBatchStatus.percentageDownloaded() + ""%"");

        if (callback == null) {"
19364,setCallback,"    public void setCallback(DownloadBatchStatusCallback callback) {
        Log.v(TAG, ""setCallback"");
        this.callback = callback;
    }"
19365,persistCompletedBatch,"    public void persistCompletedBatch(CompletedDownloadBatch completedDownloadBatch) {
        Log.v(TAG, ""Persist completed batch id: "" + completedDownloadBatch.downloadBatchId());
    }"
19366,update,"    public boolean update(DownloadBatchId downloadBatchId, boolean notificationSeen) {
        Log.v(TAG, ""update batch id: "" + downloadBatchId.rawId() + "" with notificationSeen: "" + notificationSeen);
        return true;
    }"
19367,update,"    public boolean update(DownloadBatchId downloadBatchId, DownloadBatchStatus.Status status) {
        Log.v(TAG, ""update batch id: "" + downloadBatchId.rawId() + "" with status: "" + status);
        return true;
    }"
19368,delete,"    public boolean delete(DownloadBatchId downloadBatchId) {
        Log.v(TAG, ""Delete batch id: "" + downloadBatchId.rawId());
        return true;
    }"
19369,loadFiles,"    public List<DownloadsFilePersisted> loadFiles(DownloadBatchId batchId) {
        Log.v(TAG, ""Load files for batch id: "" + batchId);
        return Collections.emptyList();
    }"
19370,loadAllFiles,"    public List<DownloadsFilePersisted> loadAllFiles() {
        Log.v(TAG, ""Load all files"");
        return Collections.emptyList();
    }"
19371,persistFile,"    public void persistFile(DownloadsFilePersisted filePersisted) {
        Log.v(TAG, ""Persist file id: "" + filePersisted.downloadFileId());
    }"
19372,loadBatches,"    public List<DownloadsBatchPersisted> loadBatches() {
        Log.v(TAG, ""Load batches"");
        return Collections.emptyList();
    }"
19373,persistBatch,"    public void persistBatch(DownloadsBatchPersisted batchPersisted) {
        Log.v(TAG, ""Persist batch id: "" + batchPersisted.downloadBatchId() + "", status: "" + batchPersisted.downloadBatchStatus());
    }"
19374,transactionSuccess,"    public void transactionSuccess() {
        Log.v(TAG, ""Transaction success"");
    }"
19375,endTransaction,"    public void endTransaction() {
        Log.v(TAG, ""End Transaction"");
    }"
19376,startTransaction,"    public void startTransaction() {
        Log.v(TAG, ""Start Transaction"");
    }"
19377,updateAllowedConnectionType,"    void updateAllowedConnectionType(ConnectionType allowedConnectionType) {
        this.allowedConnectionType = allowedConnectionType;
    }"
19378,isAllowedToDownload,"    boolean isAllowedToDownload() {
        switch (allowedConnectionType) {
            case UNMETERED:"
19379,toString,"    public String toString() {
        return ""CompletedDownloadFile{""
                + ""fileId='"" + fileId + '\''"
19381,equals,"    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        CompletedDownloadFile that = (CompletedDownloadFile) o;
"
19382,asBatchFile,"    public BatchFile asBatchFile() {
        DownloadFileId downloadFileId = DownloadFileIdCreator.createFrom(fileId);
        return new BatchFile(
                originalNetworkAddress,"
19383,originalNetworkAddress,"    public String originalNetworkAddress() {
        return originalNetworkAddress;
    }"
19384,fileSize,"    public FileSize fileSize() {
        return fileSize;
    }"
19385,newFileLocation,"    public String newFileLocation() {
        return newFileLocation;
    }"
19386,originalFileLocation,"    public String originalFileLocation() {
        return originalFileLocation;
    }"
19387,fileId,"    public String fileId() {
        return fileId;
    }"
19390,setUp,"    public void setUp() {
        migrationExtractor = new CompletedDownloadBatchesExtractor(database, ""base"", fileSizeExtractor, STORAGE_ROOT);
    }"
19392,extractMigrations,"    List<CompletedDownloadBatch> extractMigrations() {
        Cursor batchesCursor = database.rawQuery(BATCHES_QUERY);

        if (batchesCursor == null) {
            return Collections.emptyList();"
19393,toString,"    public String toString() {
        return ""CompletedDownloadBatch{""
                + ""downloadBatchId="" + downloadBatchId"
19395,equals,"    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        CompletedDownloadBatch that = (CompletedDownloadBatch) o;
"
19396,asBatchFiles,"    private List<BatchFile> asBatchFiles() {
        List<BatchFile> batchFiles = new ArrayList<>(completedDownloadFiles.size());
        for (CompletedDownloadFile completedDownloadFile : completedDownloadFiles) {
            batchFiles.add(completedDownloadFile.asBatchFile());
        }"
19397,asBatch,"    public Batch asBatch() {
        return new Batch(
                storageRoot,"
19398,storageRoot,"    public StorageRoot storageRoot() {
        return storageRoot;
    }"
19399,completedDownloadFiles,"    public List<CompletedDownloadFile> completedDownloadFiles() {
        return completedDownloadFiles;
    }"
19403,createCallbackThrottle,"    private FileCallbackThrottle createCallbackThrottle() {
        if (customCallbackThrottle == null) {
            throw new CustomCallbackThrottleException(""CustomCallbackThrottle class cannot be accessed, is it public?"");
        }"
19404,create,"    FileCallbackThrottle create() {
        switch (type) {
            case THROTTLE_BY_TIME:"
19405,byCustomThrottle,"    static CallbackThrottleCreator byCustomThrottle(Class<? extends FileCallbackThrottle> customCallbackThrottle) {
        return new CallbackThrottleCreator(Type.CUSTOM, UNUSED_TIME_UNIT, UNUSED_FREQUENCY, customCallbackThrottle);
    }"
19406,byProgressIncrease,"    static CallbackThrottleCreator byProgressIncrease() {
        return new CallbackThrottleCreator(Type.THROTTLE_BY_PROGRESS_INCREASE, UNUSED_TIME_UNIT, UNUSED_FREQUENCY, NO_CUSTOM_CALLBACK_THROTTLE);
    }"
19407,byTime,"    static CallbackThrottleCreator byTime(TimeUnit timeUnit, long quantity) {
        return new CallbackThrottleCreator(Type.THROTTLE_BY_TIME, timeUnit, quantity, NO_CUSTOM_CALLBACK_THROTTLE);
    }"
19409,createFile,"    private static File createFile() {
        File file = mock(File.class);
        given(file.getPath()).willReturn(""any_path"");
        given(file.getUsableSpace()).willReturn(USABLE_THREE_HUNDRED_MB_IN_BYTES);
        return file;
    }"
19413,appendsDownloadBatchIdToStorageRoot,"    public void appendsDownloadBatchIdToStorageRoot() {
        BatchStorageRoot batchStorageRoot = BatchStorageRoot.with(storageRoot, downloadBatchId);

        assertThat(batchStorageRoot.path()).isEqualTo(""path/to/the/root/downloads/batch_1"");"
19414,toString,"    public String toString() {
        return ""BatchStorageRoot{""
                + ""path='"" + path + ""\'}"";"
19415,hashCode,"    public int hashCode() {
        return (path != null ? path.hashCode() : 0);
    }"
19418,with,"    static BatchStorageRoot with(StorageRoot storageRoot, DownloadBatchId downloadBatchId) {
        return new BatchStorageRoot(storageRoot, downloadBatchId);
    }"
19420,withSize,"    BatchFileBuilder withSize(FileSize fileSize);
"
19421,saveTo,"    BatchFileBuilder saveTo(String path, String fileName);
"
19423,withIdentifier,"    BatchFileBuilder withIdentifier(DownloadFileId downloadFileId);
"
19424,toString,"    public String toString() {
        return ""BatchFile{""
                + ""networkAddress='"" + networkAddress + '\''"
19425,hashCode,"    public int hashCode() {
        int result = networkAddress != null ? networkAddress.hashCode() : 0;
        result = 31 * result + (path != null ? path.hashCode() : 0);
        result = 31 * result + (downloadFileId != null ? downloadFileId.hashCode() : 0);
        result = 31 * result + (fileSize != null ? fileSize.hashCode() : 0);
        return result;
    }"
19426,equals,"    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        BatchFile batchFile = (BatchFile) o;"
19427,fileSize,"    public Optional<FileSize> fileSize() {
        return fileSize;
    }"
19428,downloadFileId,"    public Optional<DownloadFileId> downloadFileId() {
        return downloadFileId;
    }"
19430,networkAddress,"    public String networkAddress() {
        return networkAddress;
    }"
19431,from,"    static InternalBatchFileBuilder from(BatchStorageRoot batchStorageRoot, String networkAddress) {
        return new LiteBatchFileBuilder(batchStorageRoot, networkAddress);
    }"
19432,throwsException_whenDuplicatedNetworkAddressWithoutFileIDsAreSupplied,"    public void throwsException_whenDuplicatedNetworkAddressWithoutFileIDsAreSupplied() {
        Batch.with(TestStorageRootFactory.create(), DOWNLOAD_BATCH_ID, DOWNLOAD_BATCH_TITLE)
                .downloadFrom(""net_address"").apply()"
19433,throwsException_whenDuplicatedFileIDsAreSupplied,"    public void throwsException_whenDuplicatedFileIDsAreSupplied() {
        Batch.with(TestStorageRootFactory.create(), DOWNLOAD_BATCH_ID, DOWNLOAD_BATCH_TITLE)
                .downloadFrom(""net_address"").withIdentifier(DOWNLOAD_FILE_ID).apply()"
19437,from,"    static BatchBuilder from(Batch batch) {
        InternalBatchBuilder builder = (InternalBatchBuilder) Batch.with(batch.storageRoot(), batch.downloadBatchId(), batch.title());
        for (BatchFile batchFile : batch.batchFiles()) {
            builder.withFile(batchFile);
        }"
19439,downloadFrom,"    BatchFileBuilder downloadFrom(String networkAddress);
"
19440,toString,"    public String toString() {
        return ""Batch{""
                + ""storageRoot="" + storageRoot"
19441,hashCode,"    public int hashCode() {
        int result = storageRoot != null ? storageRoot.hashCode() : 0;
        result = 31 * result + (downloadBatchId != null ? downloadBatchId.hashCode() : 0);
        result = 31 * result + (title != null ? title.hashCode() : 0);
        result = 31 * result + (batchFiles != null ? batchFiles.hashCode() : 0);
        return result;
    }"
19442,equals,"    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Batch batch = (Batch) o;"
19443,batchFiles,"    public List<BatchFile> batchFiles() {
        return batchFiles;
    }"
19444,title,"    public String title() {
        return title;
    }"
19447,with,"    public static BatchBuilder with(StorageRoot storageRoot, DownloadBatchId downloadBatchId, String title) {
        return new LiteBatchBuilder(storageRoot, downloadBatchId, title, new ArrayList<>());
    }"
19449,onReceived,"    void onReceived(List<DownloadBatchStatus> downloadBatchStatuses);
}"
19455,getLastReplacedBroker,"  public String getLastReplacedBroker(String cluster) throws Exception {
    String path = getBrokerReplacementPath(cluster);
    Stat stat = curator.checkExists().forPath(path);
    String broker = null;
    if (stat != null) {
      String jsonStr = getDataInString(path);
      JsonObject jsonObject = (JsonObject) (new JsonParser()).parse(jsonStr);"
19456,getLastBrokerReplacementTime,"  public long getLastBrokerReplacementTime(String clusterName) throws Exception {
    String path = getBrokerReplacementPath(clusterName);
    Stat stat = curator.checkExists().forPath(path);
    long timestamp = -1;
    if (stat != null) {
      String jsonStr = getDataInString(path);
      JsonObject jsonObject = (JsonObject) (new JsonParser()).parse(jsonStr);"
19457,getBrokerReplacementInfo,"  public String getBrokerReplacementInfo(String cluster) throws Exception {
    String path = getBrokerReplacementPath(cluster);
    String jsonStr = getDataInString(path);
    return jsonStr;
  }"
19458,getDataInString,"  public String getDataInString(String path) throws Exception {
    String retval;
    byte[] data = curator.getData().forPath(path);
    retval = new String(data);
    return retval;
  }"
19459,recordBrokerTermination,"  public boolean recordBrokerTermination(String clusterName, String brokerName) {
    String path = getBrokerReplacementPath(clusterName);
    JsonObject jsonObject = new JsonObject();
    jsonObject.addProperty(""timestamp"", System.currentTimeMillis());
    jsonObject.addProperty(""cluster"", clusterName);
    jsonObject.addProperty(""broker"", brokerName);
    String content = jsonObject.toString();
    return setData(path, content);
  }"
19460,getBrokerReplacementPath,"  private String getBrokerReplacementPath(String clusterName) {
    String path = DOCTORK_PREFIX + ""/"" + clusterName + ""/actions/broker_replacement"";
    return path;
  }"
19461,getChildren,"  public List<String> getChildren(String path) throws Exception {
    List<String> children = curator.getChildren().forPath(path);
    return children;
  }"
19462,removeZkNode,"  public void removeZkNode(String path) throws Exception {
    try {
      curator.delete().forPath(path);"
19463,setData,"  public boolean setData(String path, String content) {
    boolean success = createIfNotExists(path);
    if (!success) {
      LOG.error(""Failed to create zk path {}"", path);
      return false;
    }
"
19464,createIfNotExists,"  public boolean createIfNotExists(String path) {
    int numRetries = 0;
    while (numRetries < MAX_RETRIES) {
      try {
        Stat stat = curator.checkExists().forPath(path);"
19465,waitBetweenRetries,"  private void waitBetweenRetries(int numRetries) {
    try {
      Thread.sleep(RETRY_INTERVAL_MS * numRetries);"
19466,getCurator,"  public CuratorFramework getCurator() {
    return curator;
  }"
19467,close,"  public void close() {
    curator.close();
  }"
19468,toString,"  public String toString() {
    return ""UserPrincipal [username="" + username + ""]"";
  }"
19469,getName,"  public String getName() {
    return username;
  }"
19471,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""ClusterLoadBalancer"", options);
    System.exit(1);
  }"
19472,parseCommandLine,"  private static CommandLine parseCommandLine(String[] args) {
    Option zookeeper = new Option(ZOOKEEPER, true, ""cluster zookeeper"");
    options.addOption(zookeeper);

    if (args.length < 2) {
      printUsageAndExit();
    }

    CommandLineParser parser = new DefaultParser();"
19473,renderHTML,"  public void renderHTML(PrintWriter writer, Map<String, String> params) {
    String clusterName = params.get(""cluster"");
    printHeader(writer);

    KafkaClusterManager clusterMananger =
        DoctorKMain.doctorK.getClusterManager(clusterName);

    if (clusterMananger == null) {
      writer.print(""Failed to find cluster manager for "" + clusterName);
      return;
    }
"
19474,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params) {
    String clusterName = params.get(""cluster"");
    KafkaClusterManager clusterMananger =
        DoctorKMain.doctorK.getClusterManager(clusterName);

    if (clusterMananger == null) {
      ClusterInfoError error = new ClusterInfoError(""Failed to find cluster manager for {}"", clusterName);
      writer.print(gson.toJson(error));
      return;"
19476,configure,"  public void configure(DoctorKConfig config) throws Exception {
    List<String> doctorKAdminGroups = config.getDoctorKAdminGroups();
    if (doctorKAdminGroups != null) {
      allowedAdminGroups.addAll(doctorKAdminGroups);"
19480,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""ReplicaStatsRetriever"", options);
    System.exit(1);
  }"
19484,getClusterZkUrls,"  public Set<String> getClusterZkUrls() {
    return clusterZkUrls;
  }"
19485,getConfig,"  public DoctorKConfig getConfig() {
    return config;
  }"
19486,getClusters,"  public ConcurrentMap<String, KafkaCluster> getClusters() {
    return clusters;
  }"
19487,toString,"    public String toString() {
      String result = topicPartition.toString() + "": "";
      result += source.getName() + "" -> "" + dest.getName();
      return result;
    }"
19488,toString,"  public String toString() {
    String result = topicPartition.toString() + "": "" + preferredLeaderBroker;
    return result;
  }"
19489,run,"  public void run() {
    KafkaConsumer<byte[], byte[]> kafkaConsumer = null;
    try {
      String brokers = KafkaUtils.getBrokers(zkUrl, securityProtocol);"
19490,join,"  public void join() throws InterruptedException {
    this.thread.join();
  }"
19491,start,"  public void start() {
    thread = new Thread(this);
    thread.start();
  }"
19492,toString,"  public String toString() {
    return topicPartition.toString();
  }"
19493,hashCode,"  public int hashCode() {
    if (hash != 0) {
      return hash;
    }
    final int prime = 31;
    int result = 1;
    result = prime * result + topicPartition.hashCode();

    if (replicaBrokers != null) {
      for (int brokerId: replicaBrokers) {
        result = prime * result + brokerId;"
19494,getOutOfSyncReplicas,"  public static Set<Integer> getOutOfSyncReplicas(PartitionInfo partitionInfo) {
    if (partitionInfo.inSyncReplicas().length == partitionInfo.replicas().length) {
      return new HashSet<>();
    }
    Set<Node> nodes = new HashSet<>(Arrays.asList(partitionInfo.replicas()));
    for (Node node : partitionInfo.inSyncReplicas()) {"
19495,getInSyncReplicas,"  public Set<Integer>  getInSyncReplicas(PartitionInfo  partitionInfo) {
    Set<Integer> result = new HashSet<>();
    for (Node node: partitionInfo.inSyncReplicas()) {
      result.add(node.id());
    }"
19496,partition,"  public int partition() {
    return topicPartition.partition();
  }"
19497,topic,"  public String topic() {
    return topicPartition.topic();
  }"
19498,run,"  public void run() {
    startAdminHttpService();
  }"
19499,startAdminHttpService,"  public void startAdminHttpService() {
    try {
      Properties properties = new Properties();
      properties.load(this.getClass().getResource(""build.properties"").openStream());
      LOG.info(""build.properties build_revision: {}"",
          properties.getProperty(""build_revision"", ""unknown""));
    } catch (Throwable t) {
      LOG.warn(""Failed to load properties from build.properties"", t);
    }"
19500,addHandler,"  public void addHandler(String path, CustomHttpHandler handler) {
    this.customHttpHandlerMap.put(path, handler);
  }"
19501,sortByValue,"  public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {
    return map.entrySet()
        .stream()"
19504,startOstrichService,"  public static void startOstrichService(String serviceName, String tsdbHostPort, int ostrichPort) {
    final int TSDB_METRICS_PUSH_INTERVAL_IN_MILLISECONDS = 10 * 1000;
    OstrichAdminService ostrichService = new OstrichAdminService(ostrichPort);
    ostrichService.startAdminHttpService();
    if (tsdbHostPort != null) {
      LOG.info(""Starting the OpenTsdb metrics pusher"");"
19505,deserializeBrokerStats,"  public static BrokerStats deserializeBrokerStats(ConsumerRecord<byte[], byte[]> record) {
    try {
      BinaryDecoder binaryDecoder = avroDecoderFactory.binaryDecoder(record.value(), null);"
19508,getBrokers,"  public static String getBrokers(String zkUrl, SecurityProtocol securityProtocol) {
    ZkUtils zkUtils = getZkUtils(zkUrl);
    Seq<Broker> brokersSeq = zkUtils.getAllBrokersInCluster();
    Broker[] brokers = new Broker[brokersSeq.size()];
    brokersSeq.copyToArray(brokers);

    String brokersStr = Arrays.stream(brokers)
        .map(b -> b.brokerEndPoint("
19509,getZkUtils,"  public static ZkUtils getZkUtils(String zkUrl) {
    if (!zkUtilsMap.containsKey(zkUrl)) {
      Tuple2<ZkClient, ZkConnection> zkClientAndConnection =
          ZkUtils.createZkClientAndConnection(zkUrl, 30000, 3000000);"
19510,getOffset,"  public static long getOffset(SimpleConsumer consumer, String topic, int partition,
                               long whichTime) throws IOException {
    String errMsg = null;
    Exception lastEx = null;
    for (int i = 0; i < FETCH_RETRIES; i++) {
      TopicAndPartition topicAndPartition = new TopicAndPartition(topic, partition);"
19512,pingKafkaBroker,"  public static boolean pingKafkaBroker(String host, int port, int timeout) {
    try (Socket socket = new Socket()) {
      socket.connect(new InetSocketAddress(host, port), timeout);"
19513,getMBeanServerConnection,"  public static MBeanServerConnection getMBeanServerConnection(String host, String jmxPort) {
    MBeanServerConnection mbs = null;
    try {
      Map<String, String[]> env = new HashMap<>();
      JMXServiceURL address = new JMXServiceURL("
19514,getHostname,"  public static String getHostname() {
    String hostName;
    try {
      hostName = InetAddress.getLocalHost().getHostName();
      int firstDotPos = hostName.indexOf('.');"
19515,gauge,"  public static void gauge(String name, double value, String... tags) {
    Stats.setGauge(nameMetric(name, tags), value);
  }"
19516,gauge,"  public static void gauge(String name, double value) {
    Stats.setGauge(name, value);
  }"
19517,incr,"  public static void incr(String name, int i, String... tags) {
    Stats.incr(nameMetric(name, tags), i);
  }"
19518,incr,"  public static void incr(String name, String... tags) {
    Stats.incr(nameMetric(name, tags));
  }"
19519,incr,"  public static void incr(String name) {
    Stats.incr(name);
  }"
19520,addMetric,"  public static void addMetric(String name, int value, String... tags) {
    Stats.addMetric(nameMetric(name, tags), value);
  }"
19521,addMetric,"  public static void addMetric(String name, int value) {
    Stats.addMetric(name, value);
  }"
19522,nameMetric,"  public static String nameMetric(String name, String... tags) {
    StringBuilder builder = new StringBuilder(name);
    builder.append("" "")
        .append(SPACE_JOINER.join(tags));
    return builder.toString();"
19523,getNameAndTags,"  private Tuple2<String, StringBuilder> getNameAndTags(String ostrichStatName) {
    String[] parts = ostrichStatName.split("" "");

    String openTsdStatName = prefix + ""."" + parts[0];
    if (!openTsdStatName.matches(VALID_OPENSTD_STAT_TAG_PATTERN)) {
      return null;
    }
"
19524,getDefaultTags,"  private String getDefaultTags() {
    return defaultTags;
  }"
19526,convertCounterOrGauge,"  private boolean convertCounterOrGauge(String name, int epochSecs, float value, OpenTsdbClient.MetricsBuffer buffer) {
    Tuple2<String, StringBuilder> nameAndTags = getNameAndTags(name);
    if (nameAndTags == null) {
      return false;
    }
    String statName = nameAndTags._1();
    StringBuilder tags = nameAndTags._2().append("" "").append(getDefaultTags());
"
19527,convertGauge,"  public boolean convertGauge(String name, int epochSecs, float value, OpenTsdbClient.MetricsBuffer buffer) {
    return convertCounterOrGauge(name, epochSecs, value, buffer);
  }"
19528,convertCounter,"  public boolean convertCounter(String name, int epochSecs, float value, OpenTsdbClient.MetricsBuffer buffer) {
    return convertCounterOrGauge(name, epochSecs, value, buffer);
  }"
19529,sendMetrics,"  public void sendMetrics(MetricsBuffer buffer)
      throws ConnectionFailedException, SendFailedException {
    Socket socket = null;
    try {"
19530,toString,"    public String toString() {
      return buffer.toString();
    }"
19531,reset,"    public void reset() {
      buffer.setLength(0);
    }"
19532,addMetric,"    public void addMetric(String name, int epochSecs, float value, String tags) {
      buffer.append(""put "")
          .append(name)"
19533,addMetric,"    public void addMetric(String name, int epochSecs, float value, String... tags) {
      addMetric(name, epochSecs, value, SPACE_JOINER.join(tags));
    }"
19535,getMetricValue,"  public static Future<KafkaMetricValue> getMetricValue(MBeanServerConnection mbs,
                                                        String metricName, String attributeName) {
    Callable<KafkaMetricValue> task =
        new KafkaMetricRetrievingTask(mbs, metricName, attributeName);
    Future<KafkaMetricValue> metricFuture = metricsThreadPool.submit(task);"
19537,sendMetrics,"  public long sendMetrics(boolean retryOnFailure)
      throws InterruptedException, UnknownHostException {
    long startTimeinMillis = System.currentTimeMillis();
    long end = startTimeinMillis + pollMillis;

    StatsSummary summary = statsListener.get();
    int epochSecs = (int) (startTimeinMillis / 1000L);
    fillMetricsBuffer(summary, epochSecs);
    if (LOG.isDebugEnabled()) {
      logOstrichStats(epochSecs);"
19538,logOstrichStats,"  private void logOstrichStats(int epochSecs) {
    LOG.debug(""Ostrich Metrics {}: \n{}"", epochSecs, buffer.toString());
  }"
19540,main,"  public static void main(String[] args) throws Exception {
    CommandLine commandLine = parseCommandLine(args);

    String host = commandLine.getOptionValue(BROKER_NAME);
    String jmxPort = commandLine.getOptionValue(JMX_PORT);
    String metric = commandLine.getOptionValue(METRICS_NAME);
    fetchKafkaMetrics(host, jmxPort, metric);"
19542,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""KafkaMetricsCollector"", options);
    System.exit(1);
  }"
19543,parseCommandLine,"  private static CommandLine parseCommandLine(String[] args) {

    Option host = new Option(BROKER_NAME, true, ""kafka broker"");
    Option jmxPort = new Option(JMX_PORT, true, ""kafka jmx port number"");
    jmxPort.setArgName(""kafka jmx port number"");

    Option metric = new Option(METRICS_NAME, true, ""jmx metric name"");

    options.addOption(jmxPort).addOption(host).addOption(metric);

    if (args.length < 4) {
      printUsageAndExit();"
19547,compare,"    public int compare(Node a, Node b) {
      int result = a.host().compareTo(b.host());
      if (result == 0) {
        result = a.port() - b.port();
      }"
19548,compare,"    public int compare(TopicPartition x, TopicPartition y) {
      int result = x.topic().compareTo(y.topic());
      if (result == 0) {
        result = x.partition() - y.partition();
      }"
19549,closeConsumer,"  public static void closeConsumer(String zkUrl) {
    if (kafkaConsumers.containsKey(zkUrl)) {
      kafkaConsumers.get(zkUrl).close();"
19550,getKafkaConsumer,"  public static KafkaConsumer<byte[], byte[]> getKafkaConsumer(String zkUrl,
      SecurityProtocol securityProtocol,
      Map<String, String> consumerConfigs) {"
19551,getKafkaConsumer,"  public static KafkaConsumer<?, ?> getKafkaConsumer(String zkUrl,
                                               String keyDeserializer, String valueDeserializer) {
    return getKafkaConsumer(zkUrl, keyDeserializer, valueDeserializer,"
19552,getKafkaConsumer,"  public static KafkaConsumer<byte[], byte[]> getKafkaConsumer(String zkUrl,
                                               String keyDeserializer,
                                               String valueDeserializer,
                                               int maxPoolRecords,
                                               SecurityProtocol securityProtocol,"
19553,getNotInSyncBrokers,"  public static Set<Node> getNotInSyncBrokers(PartitionInfo partitionInfo) {
    if (partitionInfo.inSyncReplicas().length == partitionInfo.replicas().length) {
      return new HashSet<>();
    }
    Set<Node> nodes = new HashSet<>(Arrays.asList(partitionInfo.replicas()));
    for (Node node : partitionInfo.inSyncReplicas()) {"
19554,getBrokers,"  public static String getBrokers(String zkUrl, SecurityProtocol securityProtocol) {
    return OperatorUtil.getBrokers(zkUrl, securityProtocol);
  }"
19555,getZookeeperAcls,"  public static List<ACL> getZookeeperAcls(boolean isSecure) {
    List<ACL> acls = new java.util.ArrayList<>();
    if (isSecure) {
      acls.addAll(ZooDefs.Ids.CREATOR_ALL_ACL);
      acls.addAll(ZooDefs.Ids.READ_ACL_UNSAFE);"
19557,isZero,"  private boolean isZero(double val) {
    return Math.abs(val - 0.0) < 0.00001;
  }"
19559,renderHTML,"  public void renderHTML(PrintWriter writer, Map<String, String> params) {
    String clusterName = params.get(""cluster"");
    String topic = params.get(""topic"");
    try {
      printHeader(writer);"
19560,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params) {
    String clusterName = params.get(""cluster"");
    String topic = params.get(""topic"");
    JsonArray json = new JsonArray();

    KafkaClusterManager clusterMananger =
      DoctorKMain.doctorK.getClusterManager(clusterName);
    if (clusterMananger == null) {"
19561,run,"    public void run() {
      try {
        if (brokerStatsReporter != null) {
          brokerStatsReporter.stop();
        }
      } catch (Throwable t) {"
19562,run,"    public void run() {
      long now = System.currentTimeMillis();
      if (now > restartTime) {
        LOG.warn(""Restarting metrics collector"");"
19563,stop,"    public void stop() throws Exception {
      monitorExecutor.shutdown();
    }"
19564,start,"    public void start() {
      monitorExecutor.scheduleAtFixedRate(this, INITIAL_DELAY, 15, TimeUnit.SECONDS);
    }"
19569,toInteger,"  public int toInteger() {
    return (Integer)value;
  }"
19570,toLong,"  public long toLong() {
    if (value instanceof Double) {
      return ((Double)value).longValue();
    }"
19571,toDouble,"  public double toDouble() {
    return (Double)value;
  }"
19572,getException,"  public boolean getException() {
    return exception != null;
  }"
19573,call,"  public KafkaMetricValue call() throws Exception {
    try {
      Object obj = mbs.getAttribute(new ObjectName(metricName), attributeName);"
19578,setup,"  static void setup() throws Exception {
    DoctorKConfig config = new DoctorKConfig(""./config/doctork.properties"");
    doctorKClusterConfig = config.getClusterConfigByName(CLUSTER_NAME);
    zookeeper_url = doctorKClusterConfig.getZkUrl();
    kafkaCluster = new KafkaCluster(zookeeper_url, doctorKClusterConfig);
  }"
19580,toString,"  public String toString() {
    StringBuilder strBuilder = new StringBuilder();
    TreeMap<Integer, KafkaBroker> treeMap = new TreeMap<>(brokers);
    for (Map.Entry<Integer, KafkaBroker> entry : treeMap.entrySet()) {
      strBuilder.append(""   "" + entry.getKey() + "" : "");
      strBuilder.append(entry.getValue() + ""\n"");"
19581,clearResourceAllocationCounters,"  public void clearResourceAllocationCounters() {
    for (KafkaBroker broker : brokers.values()) {
      broker.clearResourceAllocationCounters();"
19582,getMaxBytesOut,"  public long getMaxBytesOut() {
    long result = 0L;
    for (Map.Entry<String, Set<TopicPartition>> entry : topicPartitions.entrySet()) {
      Set<TopicPartition> topicPartitions = entry.getValue();
      for (TopicPartition tp : topicPartitions) {"
19583,getMaxBytesIn,"  public long getMaxBytesIn() {
    long result = 0L;
    for (Map.Entry<String, Set<TopicPartition>> entry : topicPartitions.entrySet()) {
      Set<TopicPartition> topicPartitions = entry.getValue();
      for (TopicPartition tp : topicPartitions) {"
19584,getMaxBytesOut,"  public long getMaxBytesOut(TopicPartition tp) {
    return bytesOutHistograms.get(tp).getSnapshot().getMax();
  }"
19585,getMaxBytesIn,"  public long getMaxBytesIn(TopicPartition tp) {
    return bytesInHistograms.get(tp).getSnapshot().getMax();
  }"
19586,getAlternativeBroker,"  public KafkaBroker getAlternativeBroker(TopicPartition topicPartition,
                                          double tpBytesIn, double tpBytesOut) {
    PriorityQueue<KafkaBroker> brokerQueue =
        new PriorityQueue<>(new KafkaBroker.KafkaBrokerComparator());

    for (Map.Entry<Integer, KafkaBroker> entry : brokers.entrySet()) {
      KafkaBroker broker = entry.getValue();
      if (!broker.hasTopicPartition(topicPartition)) {"
19587,findNextBrokerForOosReplica,"  protected boolean findNextBrokerForOosReplica(
      PriorityQueue<KafkaBroker> brokerQueue,
      Collection<KafkaBroker> unusableBrokers,
      Collection<Integer> replicaBrokers,
      Map<Integer, KafkaBroker> reassignmentMap,
      Integer oosBrokerId,
      TopicPartition tp,"
19588,getAlternativeBrokersByLocality,"  public Map<Integer, KafkaBroker> getAlternativeBrokersByLocality(
      Map<String, PriorityQueue<KafkaBroker>> brokerQueueByLocality,
      OutOfSyncReplica oosReplica,
      double inBoundReq,
      double outBoundReq,
      int preferredBroker
      ) {

    Map<String, List<Integer>> oosBrokerIdsByLocality = new HashMap<>();
    for ( int oosBrokerId : oosReplica.outOfSyncBrokers) {"
19589,getAlternativeBrokers,"  public Map<Integer, KafkaBroker> getAlternativeBrokers(
      PriorityQueue<KafkaBroker> brokerQueue,
      OutOfSyncReplica oosReplica,
      double inBoundReq,
      double outBoundReq,
      int preferredBroker
  ) {
"
19590,isInvalidBroker,"  protected boolean isInvalidBroker(KafkaBroker broker) {
    BrokerStats latestStats = broker.getLatestStats();
    return latestStats== null ||
        latestStats.getHasFailure() ||"
19591,getBrokerQueueByLocality,"  public Map<String, PriorityQueue<KafkaBroker>> getBrokerQueueByLocality(){
    Map<String, PriorityQueue<KafkaBroker>> brokerLocalityMap = new HashMap<>();
    Comparator<KafkaBroker> comparator = new KafkaBroker.KafkaBrokerComparator();
    for ( Map.Entry<Integer, KafkaBroker> entry : brokers.entrySet() ){
      KafkaBroker broker = entry.getValue();
      if (isInvalidBroker(broker)){"
19592,getBrokerQueue,"  public PriorityQueue<KafkaBroker> getBrokerQueue() {
    PriorityQueue<KafkaBroker> brokerQueue =
        new PriorityQueue<>(new KafkaBroker.KafkaBrokerComparator());
    for (Map.Entry<Integer, KafkaBroker> entry : brokers.entrySet()) {
      KafkaBroker broker = entry.getValue();"
19593,getLowTrafficBrokers,"  public List<KafkaBroker> getLowTrafficBrokers() {
    double averageBytesIn = getMaxBytesIn() / (double) brokers.size();
    double averageBytesOut = getMaxBytesOut() / (double) brokers.size();

    List<KafkaBroker> result = new ArrayList<>();
    synchronized (brokers) {
      for (KafkaBroker broker : brokers.values()) {"
19595,getBrokerStatsList,"  public List<BrokerStats> getBrokerStatsList(int brokerId) {
    synchronized (brokers) {
      if (!brokerStatsMap.containsKey(brokerId)) {"
19596,getLatestBrokerStats,"  public BrokerStats getLatestBrokerStats(int brokerId) {
    synchronized (brokers) {
      if (!brokers.containsKey(brokerId)) {"
19597,getBroker,"  public KafkaBroker getBroker(int id) {
    if (!brokers.containsKey(id)) {
      return null;
    }"
19598,getReassignmentTimestamps,"  public ConcurrentMap<TopicPartition, Long> getReassignmentTimestamps() {
    return reassignmentTimestamps;
  }"
19599,getBytesOutHistograms,"  public ConcurrentMap<TopicPartition, Histogram> getBytesOutHistograms() {
    return bytesOutHistograms;
  }"
19600,getBytesInHistograms,"  public ConcurrentMap<TopicPartition, Histogram> getBytesInHistograms() {
    return bytesInHistograms;
  }"
19601,toJson,"  public JsonElement toJson() {
    JsonObject json = new JsonObject();
    JsonArray jsonBrokers = new JsonArray();
    json.add(""brokers"", jsonBrokers);

    List<KafkaBroker> result = new ArrayList<>();

    synchronized (brokers) {"
19602,recordBrokerStats,"  public void recordBrokerStats(BrokerStats brokerStats) {
    try {
      int brokerId = brokerStats.getId();"
19603,name,"  public String name() {
    return clusterConfig.getClusterName();
  }"
19604,size,"  public int size() {
    return brokers.size();
  }"
19606,compare,"    public int compare(KafkaBroker x, KafkaBroker y) {
      double xNetworkUsage = x.getMaxBytesIn() + x.getMaxBytesOut()
          + x.reservedBytesIn + x.reservedBytesOut;
      double yNetworkUsage = y.getMaxBytesIn() + y.getMaxBytesOut()
          + y.reservedBytesIn + y.reservedBytesOut;"
19607,compareTo,"  public int compareTo(KafkaBroker another) {
    double networkUsage = getMaxBytesIn() + getMaxBytesOut()
        + reservedBytesIn + reservedBytesOut;
    double anotherUsage = another.getMaxBytesIn() + another.getMaxBytesOut()
        + another.reservedBytesIn + another.reservedBytesOut;"
19609,toString,"  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(""brokerId:"" + getId());
    sb.append(""; rackId = "" + rackId);
    sb.append(""; stats : "" + (latestStats == null ? ""null"" : latestStats));
    return sb.toString();
  }"
19610,reserveOutBoundBandwidth,"  public boolean reserveOutBoundBandwidth(TopicPartition tp, double outBound) {
    if (bytesOutPerSecLimit > getMaxBytesOut() + reservedBytesOut + outBound) {
      reservedBytesOut += outBound;
      toBeAddedReplicas.add(tp);"
19611,reserveInBoundBandwidth,"  public boolean reserveInBoundBandwidth(TopicPartition tp, double inBound) {
    if (bytesInPerSecLimit > getMaxBytesIn() + reservedBytesIn + inBound) {
      reservedBytesIn += inBound;
      toBeAddedReplicas.add(tp);"
19612,removeReservedBandwidth,"  public boolean removeReservedBandwidth(TopicPartition tp, double inBound, double outBound){
    if ( toBeAddedReplicas.contains(tp) ){
      reservedBytesIn -= inBound;
      reservedBytesOut -= outBound;"
19613,reserveBandwidth,"  public boolean reserveBandwidth(TopicPartition tp, double inBound, double outBound){
    if (bytesInPerSecLimit > getMaxBytesIn() + reservedBytesIn + inBound &&
        bytesOutPerSecLimit > getMaxBytesOut() + reservedBytesOut + outBound) {
      reservedBytesIn += inBound;"
19614,update,"  public synchronized void update(BrokerStats stats) {
    if (stats == null
        || (latestStats != null && latestStats.getTimestamp() > stats.getTimestamp())
        || stats.getHasFailure()) {
      return;
    }

    brokerName = stats.getName();"
19615,isDecommissioned,"  public boolean isDecommissioned() {
    return this.isDecommissioned.get();
  }"
19616,cancelDecommission,"  public boolean cancelDecommission() {
    return this.isDecommissioned.getAndSet(false);
  }"
19617,decommission,"  public boolean decommission() {
    return this.isDecommissioned.getAndSet(true);
  }"
19618,setRackId,"  protected void setRackId(String rackId){
    this.rackId = rackId;
  }"
19619,getRackId,"  public String getRackId(){
    return rackId;
  }"
19620,setLatestStats,"  protected void setLatestStats(BrokerStats brokerStats){
    this.latestStats = brokerStats;
  }"
19621,getLatestStats,"  public BrokerStats getLatestStats() {
    return latestStats;
  }"
19622,hasTopicPartition,"  public boolean hasTopicPartition(TopicPartition tp) {
    return leaderReplicas.contains(tp) || followerReplicas.contains(tp)
        || toBeAddedReplicas.contains(tp);"
19623,setFollowerReplicas,"  protected void setFollowerReplicas(Set<TopicPartition> followerReplicas) {
    this.followerReplicas= followerReplicas;
  }"
19624,setLeaderReplicas,"  protected void setLeaderReplicas(Set<TopicPartition> leaderReplicas) {
    this.leaderReplicas = leaderReplicas;
  }"
19625,clearResourceAllocationCounters,"  public void clearResourceAllocationCounters() {
    this.reservedBytesIn = 0L;
    this.reservedBytesOut = 0L;
    this.toBeAddedReplicas.clear();
  }"
19626,getFollowerTopicPartitions,"  public List<TopicPartition> getFollowerTopicPartitions() {
    BrokerStats brokerStats = getLatestStats();
    if (brokerStats == null) {
      LOG.error(""Failed to get brokerstats for {}:{}"", clusterConfig.getClusterName(), brokerId);
      return null;
    }
    List<TopicPartition> topicPartitions = new ArrayList<>();"
19627,getLeaderTopicPartitions,"  public List<TopicPartition> getLeaderTopicPartitions() {
    BrokerStats brokerStats = getLatestStats();
    if (brokerStats == null) {
      LOG.error(""Failed to get brokerstats for {}:{}"", clusterConfig.getClusterName(), brokerId);
      return null;
    }
    List<TopicPartition> topicPartitions = new ArrayList<>();"
19628,getLastStatsTimestamp,"  public long getLastStatsTimestamp() {
    return latestStats == null ? 0 : latestStats.getTimestamp();
  }"
19629,getPort,"  public int getPort() {
    return this.brokerPort;
  }"
19630,getName,"  public String getName() {
    return brokerName;
  }"
19631,getId,"  public int getId() {
    return this.brokerId;
  }"
19632,getReservedBytesOut,"  public long getReservedBytesOut() {
    return reservedBytesOut;
  }"
19633,getReservedBytesIn,"  public long getReservedBytesIn() {
    return reservedBytesIn;
  }"
19634,getMaxBytesOut,"  public long getMaxBytesOut() {
    long result = 0L;
    for (TopicPartition topicPartition : leaderReplicas) {
      result += kafkaCluster.getMaxBytesOut(topicPartition);
    }"
19635,getMaxBytesIn,"  public long getMaxBytesIn() {
    long result = 0L;
    for (TopicPartition topicPartition : leaderReplicas) {
      result += kafkaCluster.getMaxBytesIn(topicPartition);
    }
    for (TopicPartition topicPartition : followerReplicas) {"
19636,close,"  public void close() {
    kafkaProducer.close();
  }"
19637,publish,"  public void publish(BrokerStats brokerStats) throws IOException {
    try {
      ByteArrayOutputStream stream = new ByteArrayOutputStream();"
19638,main,"  public static void main(String[] args) throws Exception {
    CommandLine commandLine = parseCommandLine(args);
    String zkUrl = commandLine.getOptionValue(ZOOKEEPER);
    String cluster = commandLine.getOptionValue(CLUSTER);
    String broker = commandLine.getOptionValue(BROKER);
    ZookeeperClient zookeeperClient = null;

    try {"
19639,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""DoctorKZookeeperClient"", options);
    System.exit(1);
  }"
19641,doGet,"    protected void doGet(HttpServletRequest request,
                         HttpServletResponse response) throws ServletException,
                                                              IOException {
      response.setContentType(""text/html"");"
19644,run,"  public void run() {
    long now = System.currentTimeMillis();

    if (now > restartTime) {"
19645,stop,"  public void stop() throws Exception {
    monitorExecutor.shutdown();
  }"
19646,start,"  public void start() {
    monitorExecutor.scheduleAtFixedRate(this, INITIAL_DELAY, 15, TimeUnit.SECONDS);
  }"
19647,doGet,"  public void doGet(HttpServletRequest req, HttpServletResponse resp)
      throws ServletException, IOException {

    LOG.info(""Start working on get request"");
    resp.setStatus(HttpStatus.OK_200);

    PrintWriter writer = resp.getWriter();
    String contentType = req.getHeader(""content-type"");
    String queryString = req.getQueryString();"
19648,renderHTML,"  public void renderHTML(PrintWriter writer, Map<String, String> params){};
"
19649,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params){};
  public void renderHTML(PrintWriter writer, Map<String, String> params){};"
19650,convertDescriptiveStatisticsMap,"  public static Map<String, List<DescriptiveStatistics>> convertDescriptiveStatisticsMap(
      Map<TopicPartition, DescriptiveStatistics> tpsMap) {
    Map<String, List<DescriptiveStatistics>> result = new TreeMap<>();
    for (Map.Entry<TopicPartition, DescriptiveStatistics> entry : tpsMap.entrySet()) {
      String topicName = entry.getKey().topic();"
19651,parseQueryString,"  private static Map<String, String> parseQueryString(String queryString) {
    Map<String, String> result = new HashMap<>();
    if (queryString != null) {
      Arrays.stream(queryString.split(""&"")).map(s -> s.split(""="")).collect(toList())
	.forEach(arr -> result.put(arr[0], arr[1]));"
19652,printFooter,"  public static void printFooter(PrintWriter writer) {
    writer.print(""</body>"");
    writer.print(""<html>"");
  }"
19654,getVersion,"  public static String getVersion() {
    String versionString = """";
    try {
      final Properties properties = new Properties();
      InputStream inputStream = DoctorKMain.class.getResourceAsStream(""/versioning.properties"");"
19655,toString,"  public String toString() {
    return ""DoctorKSecurityContext [principal="" + principal + "", roles="" + roles + ""]"";
  }"
19656,getAuthenticationScheme,"  public String getAuthenticationScheme() {
    return DOCTORK_AUTH;
  }"
19657,isSecure,"  public boolean isSecure() {
    return true;
  }"
19658,isUserInRole,"  public boolean isUserInRole(String role) {
    return roles.contains(role);
  }"
19659,getUserPrincipal,"  public Principal getUserPrincipal() {
    return principal;
  }"
19660,run,"    public void run() {
      try {
        if (doctorK != null) {
          doctorK.stop();"
19661,main,"  public static void main(String[] args) throws Exception {
    new DoctorKMain().run(args);
  }"
19663,startMetricsService,"  private void startMetricsService() {
    int ostrichPort = replicaStatsManager.getConfig().getOstrichPort();
    String tsdHostPort = replicaStatsManager.getConfig().getTsdHostPort();
    if (tsdHostPort == null && ostrichPort == 0) {
      LOG.info(""OpenTSDB and Ostrich options missing, not starting Ostrich service"");"
19664,checkAndInitializeAuthorizationFilter,"  private void checkAndInitializeAuthorizationFilter(Environment environment, DoctorKConfig doctorKConfig) {
    LOG.info(""Checking authorization filter"");
    try {
      Class<? extends DoctorKAuthorizationFilter> authorizationFilterClass = doctorKConfig.getAuthorizationFilterClass();"
19668,initialize,"  public void initialize(Bootstrap<DoctorKAppConfig> bootstrap) {
    bootstrap.addBundle(new AssetsBundle(""/webapp/pages/"", ""/"", ""index.html""));
  }"
19669,renderHTML,"  public void renderHTML(PrintWriter writer, Map<String, String> params) {
    try {
      double jvmUpTimeInSeconds = ManagementFactory.getRuntimeMXBean().getUptime() / 1000.0;"
19671,run,"  public void run() {
    OpenTsdbMetricConverter.gauge(DoctorKMetrics.DOCTORK_SERVICE_RUNNING, 1.0);
  }"
19672,stop,"  public void stop() {
    heartbeatExecutor.shutdown();
  }"
19673,start,"  public void start() {
    heartbeatExecutor.scheduleAtFixedRate(this, 0, HEARTBEAT_INTERVAL_IN_SECONDS, TimeUnit.SECONDS);
  }"
19674,getDoctorKAdminGroups,"  public List<String> getDoctorKAdminGroups() {
    if (doctorKConfiguration.containsKey(DOCTORK_ADMIN_GROUPS)) {
      return Arrays.asList(doctorKConfiguration.getStringArray(DOCTORK_ADMIN_GROUPS));"
19675,getAuthorizationFilterClass,"  public Class<? extends DoctorKAuthorizationFilter> getAuthorizationFilterClass() throws ClassNotFoundException {
    if (doctorKConfiguration.containsKey(AUTHORIZATION_FILTER_CLASS)) {
      String classFqcn = doctorKConfiguration.getString(AUTHORIZATION_FILTER_CLASS);"
19676,getRestartDisabled,"  public boolean getRestartDisabled(){
    return doctorKConfiguration.getBoolean(RESTART_DISABLE, false);
  }"
19677,getAlertEmails,"  public String[] getAlertEmails() {
    String emailsStr = doctorKConfiguration.getString(ALERT_EMAILS);
    return emailsStr.split("","");
  }"
19678,getNotificationEmails,"  public String[] getNotificationEmails() {
    String emailsStr = doctorKConfiguration.getString(NOTIFICATION_EMAILS);
    return emailsStr.split("","");
  }"
19679,getClusterConfigByName,"  public DoctorKClusterConfig getClusterConfigByName(String clusterName) {
    return clusterConfigurations.get(clusterName);
  }"
19680,getClusterConfigByZkUrl,"  public DoctorKClusterConfig getClusterConfigByZkUrl(String clusterZkUrl) {
    for (DoctorKClusterConfig clusterConfig : clusterConfigurations.values()) {
      if (clusterConfig.getZkUrl().equals(clusterZkUrl)) {
        return clusterConfig;"
19681,getWebserverBindHost,"  public String getWebserverBindHost() {
    return doctorKConfiguration.getString(WEB_BIND_HOST, ""0.0.0.0"");
  }"
19682,getWebserverPort,"  public int getWebserverPort() {
    return doctorKConfiguration.getInteger(WEB_PORT, 8080);
  }"
19683,getRestartIntervalInSeconds,"  public long getRestartIntervalInSeconds() {
    return doctorKConfiguration.getLong(RESTART_INTERVAL_SECONDS);
  }"
19684,getOstrichPort,"  public int getOstrichPort() {
    return doctorKConfiguration.getInt(OSTRICH_PORT, 0);
  }"
19685,getTsdHostPort,"  public String getTsdHostPort() {
    return doctorKConfiguration.getString(TSD_HOSTPORT);
  }"
19686,getBrokerReplacementCommand,"  public String getBrokerReplacementCommand() {
    String command = doctorKConfiguration.getString(BROKER_REPLACEMENT_COMMAND);
    command = command.replaceAll(""^\""|\""$"", """");
    return command;
  }"
19687,getBrokerReplacementIntervalInSeconds,"  public int getBrokerReplacementIntervalInSeconds() {
    return doctorKConfiguration.getInt(BROKER_REPLACEMENT_INTERVAL_SECONDS, 43200);
  }"
19688,configurationToMap,"  protected static Map<String, String> configurationToMap(AbstractConfiguration  configuration) {
    Iterator<String> keysIterator = configuration.getKeys();
    Map<String, String> result = new HashMap<>();
    while (keysIterator.hasNext()) {
      String key = keysIterator.next();
      result.put(key, configuration.getString(key));"
19689,getActionReportProducerSecurityProtocol,"  public SecurityProtocol getActionReportProducerSecurityProtocol() {
    Map<String, String> sslConfigMap = getActionReportProducerSslConfigs();
    return sslConfigMap.containsKey(SECURITY_PROTOCOL)
        ?  Enum.valueOf(SecurityProtocol.class, sslConfigMap.get(SECURITY_PROTOCOL)) : SecurityProtocol.PLAINTEXT;"
19690,getActionReportProducerSslConfigs,"  public Map<String, String> getActionReportProducerSslConfigs() {
    AbstractConfiguration sslConfiguration =
        new SubsetConfiguration(doctorKConfiguration, ACTION_REPORT_PRODUCER_PREFIX);
    return configurationToMap(sslConfiguration);"
19691,getActionReportTopic,"  public String getActionReportTopic() {
    return doctorKConfiguration.getString(ACTION_REPORT_TOPIC);
  }"
19692,getActionReportZkurl,"  public String getActionReportZkurl() {
    return doctorKConfiguration.getString(ACTION_REPORT_ZKURL);
  }"
19693,getBrokerStatsConsumerSecurityProtocol,"  public SecurityProtocol getBrokerStatsConsumerSecurityProtocol() {
    Map<String, String> sslConfigMap = getBrokerStatsConsumerSslConfigs();
    return sslConfigMap.containsKey(SECURITY_PROTOCOL)
        ?  Enum.valueOf(SecurityProtocol.class, sslConfigMap.get(SECURITY_PROTOCOL)) : SecurityProtocol.PLAINTEXT;"
19694,getBrokerStatsConsumerSslConfigs,"  public Map<String, String> getBrokerStatsConsumerSslConfigs() {
    AbstractConfiguration sslConfiguration = new SubsetConfiguration(doctorKConfiguration, BROKERSTATS_CONSUMER_PREFIX);
    return configurationToMap(sslConfiguration);
  }"
19695,getBrokerStatsBacktrackWindowsInSeconds,"  public long getBrokerStatsBacktrackWindowsInSeconds() {
    String backtrackWindow = doctorKConfiguration.getString(BROKERSTATS_BACKTRACK_SECONDS);
    return Long.parseLong(backtrackWindow);
  }"
19696,getBrokerStatsVersion,"  public String getBrokerStatsVersion() {
    return doctorKConfiguration.getString(BROKERSTATS_VERSION);
  }"
19697,getBrokerStatsTopic,"  public String getBrokerStatsTopic() {
    return doctorKConfiguration.getString(BROKERSTATS_TOPIC);
  }"
19698,getBrokerstatsZkurl,"  public String getBrokerstatsZkurl() {
    return doctorKConfiguration.getString(BROKERSTATS_ZKURL);
  }"
19699,getDoctorKZkurl,"  public String getDoctorKZkurl() {
    return doctorKConfiguration.getString(DOCTORK_ZKURL);
  }"
19700,getClusterZkUrls,"  public Set<String> getClusterZkUrls() {
    return clusterConfigurations.values().stream().map(clusterConfig -> clusterConfig.getZkUrl())
        .collect(Collectors.toSet());"
19701,getClusters,"  public Set<String> getClusters() {
    return clusterConfigurations.keySet();
  }"
19702,initialize,"  private void initialize() {
    Set<String> clusters = new HashSet<>();
    Iterator<String> keysIterator = configuration.getKeys();
    while (keysIterator.hasNext()) {
      String propertyName = keysIterator.next();
      if (propertyName.startsWith(CLUSTER_PREFIX)) {
        String clusterName = propertyName.split(""\\."")[1];"
19703,enabledRackAwareness,"  public boolean enabledRackAwareness(){
    boolean result = false;
    if (clusterConfiguration.containsKey(ENABLE_RACK_AWARENESS)){
      result = clusterConfiguration.getBoolean(ENABLE_RACK_AWARENESS);
    }"
19704,getNotificationPager,"  public String getNotificationPager() {
    return clusterConfiguration.getString(NOTIFICATION_PAGER, """");
  }"
19705,getNotificationEmail,"  public String getNotificationEmail() {
    return clusterConfiguration.getString(NOTIFICATION_EMAIL, """");
  }"
19706,getSecurityProtocol,"  public SecurityProtocol getSecurityProtocol() {
    Map<String, String> sslConfigMap = getConsumerConfigurations();
    return sslConfigMap.containsKey(SECURITY_PROTOCOL)
        ?  Enum.valueOf(SecurityProtocol.class, sslConfigMap.get(SECURITY_PROTOCOL)) : SecurityProtocol.PLAINTEXT;"
19707,getConsumerConfigurations,"  public Map<String, String> getConsumerConfigurations() {
    AbstractConfiguration sslConfiguration = new SubsetConfiguration(clusterConfiguration, CONSUMER_PREFIX);
    return DoctorKConfig.configurationToMap(sslConfiguration);
  }"
19708,getBrokerReplacementNoStatsSeconds,"  public int getBrokerReplacementNoStatsSeconds() {
    int result = clusterConfiguration.getInt(BROKER_REPLACEMENT_NO_STATS_SECONDS,
        DEFAULT_DEADBROKER_REPLACEMENT_NO_STATS_SECONDS);
    return result;"
19709,enabledDeadbrokerReplacement,"  public boolean enabledDeadbrokerReplacement() {
    boolean result = false;
    if (clusterConfiguration.containsKey(BROKER_REPLACEMENT_ENABLE)) {
      result = clusterConfiguration.getBoolean(BROKER_REPLACEMENT_ENABLE);
    }"
19710,getUnderReplicatedAlertTimeInMs,"  public long getUnderReplicatedAlertTimeInMs() {
    return getUnderReplicatedAlertTimeInSeconds() * 1000L;
  }"
19711,getUnderReplicatedAlertTimeInSeconds,"  public int getUnderReplicatedAlertTimeInSeconds() {
    return clusterConfiguration.getInteger(UNDER_REPLICTED_ALERT_IN_SECS,
        DEFAULT_UNDER_REPLICTED_ALERT_IN_SECS);"
19712,getCheckIntervalInSeconds,"  public int getCheckIntervalInSeconds() {
    return clusterConfiguration.getInt(CHECK_INTERVAL_IN_SECS);
  }"
19713,getNetworkBandwidthInBytes,"  public double getNetworkBandwidthInBytes() {
    return getNetworkBandwidthInMb() * 1024.0 * 1024.0;
  }"
19714,getNetworkBandwidthInMb,"  public double getNetworkBandwidthInMb() {
    return clusterConfiguration.getDouble(NETWORK_BANDWITH_MB);
  }"
19715,getNetworkOutLimitInBytes,"  public double getNetworkOutLimitInBytes() {
    return getNetworkOutLimitInMb() * 1024.0 * 1024.0;
  }"
19716,getNetworkOutLimitInMb,"  public double getNetworkOutLimitInMb() {
    return clusterConfiguration.getDouble(NETWORK_OUT_MB);
  }"
19717,getNetworkInLimitInBytes,"  public double getNetworkInLimitInBytes() {
    return getNetworkInLimitInMb() * 1024.0 * 1024.0;
  }"
19718,getNetworkInLimitInMb,"  public double getNetworkInLimitInMb() {
    return clusterConfiguration.getDouble(NETWORK_IN_LIMIT_MB);
  }"
19719,enabledWorloadBalancing,"  public boolean enabledWorloadBalancing() {
    boolean result = false;
    if (clusterConfiguration.containsKey(ENABLE_WORLOAD_BALANCING)) {
      result = clusterConfiguration.getBoolean(ENABLE_WORLOAD_BALANCING);
    }"
19720,getZkUrl,"  public String getZkUrl() {
    return clusterConfiguration.getString(ZKURL);
  }"
19721,dryRun,"  public boolean dryRun() {
    return clusterConfiguration.getBoolean(DRYRUN);
  }"
19722,getClusterName,"  public String getClusterName() {
    return this.clusterName;
  }"
19723,printHtmlTableRow,"  private void printHtmlTableRow(PrintWriter writer, Object col1, Object col2) {
    writer.print(""<tr><td>"" + col1 + ""</td> <td>"" + col2 + ""</td> </tr>"");
  }"
19726,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params) {
    try {
      int brokerId = Integer.parseInt(params.get(""brokerid""));"
19727,getLatestStats,"  public BrokerStats getLatestStats(String clusterName, KafkaBroker broker)
    throws ClusterInfoError {
    BrokerStats latestStats = broker.getLatestStats();
    if (latestStats == null) {
      throw new ClusterInfoError(""Failed to get latest stats from broker {} in cluster {}"","
19728,getBroker,"  public KafkaBroker getBroker(String clusterName, int brokerId) throws ClusterInfoError {
    KafkaClusterManager clusterMananger =
        DoctorKMain.doctorK.getClusterManager(clusterName);
    if (clusterMananger == null) {
      throw new ClusterInfoError(""Failed to find cluster manager for {}"", clusterName);
    }
    KafkaBroker broker = clusterMananger.getCluster().getBroker(brokerId);"
19729,configure,"  public void configure(DoctorKConfig config) throws Exception;
"
19730,setConfig,"  public void setConfig(String config) {
    this.config = config;
  }"
19731,getConfig,"  public String getConfig() {
    return config;
  }"
19732,checkAndGetBroker,"  protected KafkaBroker checkAndGetBroker(String clusterName, String brokerId) {
    KafkaClusterManager clusterManager = checkAndGetClusterManager(clusterName);
    Integer id = Integer.parseInt(brokerId);
    KafkaBroker broker = clusterManager.getCluster().getBroker(id);
    if (broker == null) {
      throw new NotFoundException(""Unknown brokerId: "" + brokerId);
    }"
19733,checkAndGetClusterManager,"  protected KafkaClusterManager checkAndGetClusterManager(String clusterName) {
    KafkaClusterManager clusterManager = doctorK.getClusterManager(clusterName);
    if (clusterManager == null) {
      throw new NotFoundException(""Unknown clustername:"" + clusterName);
    }"
19734,getDoctorK,"  protected DoctorK getDoctorK() {
    return doctorK;
  }"
19735,main,"  public static void main(String[] args) throws Exception {
    CommandLine commandLine = parseCommandLine(args);
    String zkUrl = commandLine.getOptionValue(ZOOKEEPER);
    String topic = commandLine.getOptionValue(TOPIC);
    String message = commandLine.getOptionValue(MESSAGE);

    DoctorKActionReporter actionReporter =
        new DoctorKActionReporter(zkUrl, SecurityProtocol.PLAINTEXT, topic, null);"
19736,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""OperatorActionWriter"", options);
    System.exit(1);
  }"
19740,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params) {
    JsonArray json = new JsonArray();

    for (ConsumerRecord<byte[], byte[]> record : Lists.reverse(retrieveActionReportMessages())) {
      try {"
19742,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""OperatorActionRetriever"", options);
    System.exit(1);
  }"
19744,sendMessage,"  public synchronized void sendMessage(String clusterName, String message) {
    int numRetries = 0;
    while (numRetries < MAX_RETRIES) {
      try {"
19745,getClusterNames,"  public List<String> getClusterNames() {
    return new ArrayList<>(clusterManagers.keySet());
  }"
19746,getClusterManager,"  public KafkaClusterManager getClusterManager(String clusterName) {
    return clusterManagers.get(clusterName);
  }"
19747,getClusterManagers,"  public Collection<KafkaClusterManager> getClusterManagers() {
    return clusterManagers.values();
  }"
19748,getDoctorKConfig,"  public DoctorKConfig getDoctorKConfig() {
    return doctorKConf;
  }"
19749,stop,"  public void stop() {
    brokerStatsProcessor.stop();
    zookeeperClient.close();
    heartbeat.stop();
    for (KafkaClusterManager clusterManager : clusterManagers.values()) {
      clusterManager.stop();"
19751,disableMaintenance,"  public void disableMaintenance(@Context HttpServletRequest ctx,
      @PathParam(""clusterName"") String clusterName) {
    KafkaClusterManager clusterManager = checkAndGetClusterManager(clusterName);
    clusterManager.disableMaintenanceMode();
    ApiUtils.logAPIAction(LOG, ctx, ""Disabled maintenance mode for cluster:"" + clusterName);"
19752,enableMaintenance,"  public void enableMaintenance(@Context HttpServletRequest ctx,
      @PathParam(""clusterName"") String clusterName) {
    KafkaClusterManager clusterManager = checkAndGetClusterManager(clusterName);
    clusterManager.enableMaintenanceMode();
    ApiUtils.logAPIAction(LOG, ctx, ""Enabled maintenance mode for cluster:"" + clusterName);"
19753,checkMaintenance,"  public boolean checkMaintenance(@PathParam(""clusterName"") String clusterName) {
    KafkaClusterManager clusterManager = checkAndGetClusterManager(clusterName);
    return clusterManager.isMaintenanceModeEnabled();
  }"
19754,getClusterNames,"  public List<String> getClusterNames() {
    return getDoctorK().getClusterNames();
  }"
19760,renderHTML,"  public void renderHTML(PrintWriter writer, Map<String, String> params) {
    try {
      printHeader(writer);
      String clusterName = params.get(""name"");"
19761,renderJSON,"  public void renderJSON(PrintWriter writer, Map<String, String> params) {
    String clusterName;
    try {
      clusterName = params.get(""name"");
    } catch (Exception e) {"
19762,setTxPackets,"    public void setTxPackets(long txPackets) {
      this.txPackets = txPackets;
    }"
19763,getTxPackets,"    public long getTxPackets() {
      return txPackets;
    }"
19764,setTxBytes,"    public void setTxBytes(long txBytes) {
      this.txBytes = txBytes;
    }"
19765,getTxBytes,"    public long getTxBytes() {
      return txBytes;
    }"
19766,setRxPackets,"    public void setRxPackets(long rxPackets) {
      this.rxPackets = rxPackets;
    }"
19767,getRxPackets,"    public long getRxPackets() {
      return rxPackets;
    }"
19768,setRxBytes,"    public void setRxBytes(long rxBytes) {
      this.rxBytes = rxBytes;
    }"
19769,getRxBytes,"    public long getRxBytes() {
      return rxBytes;
    }"
19770,setTimestamp,"    public void setTimestamp(long timestamp) {
      this.timestamp = timestamp;
    }"
19771,getTimestamp,"    public long getTimestamp() {
      return timestamp;
    }"
19772,computeNetworkStats,"  private void computeNetworkStats(NetworkStats networkStats, BrokerStats brokerStats) {
    if(this.currentNetworkStats == null) {
      this.currentNetworkStats = networkStats;"
19774,getMetricObjectNames,"  private Set<ObjectName> getMetricObjectNames(MBeanServerConnection mbs) {
    Set<ObjectName> objectNames = null;
    try {
      objectNames = mbs.queryNames(null, null);
    } catch (IOException e) {"
19775,setBrokerConfiguration,"  private void setBrokerConfiguration() {
    BufferedReader input = null;
    try {
      String outputLine;"
19780,computeTopicPartitionReplicaCpuUsage,"  private void computeTopicPartitionReplicaCpuUsage(double totalCpuUsage,
                                                    List<ReplicaStat> replicaStats) {
    long totalTraffic = replicaStats.stream()
        .map(stat -> stat.getBytesIn1MinMeanRate() + stat.getBytesOut1MinMeanRate())"
19781,computeTopicPartitionReplicaNetworkTraffic,"  private void computeTopicPartitionReplicaNetworkTraffic(
      List<ReplicaStat> replicaStats,
      Set<String> topics,
      Map<String, Long> topicsBytesIn1Min, Map<String, Long> topicsBytesOut1Min,
      Map<String, Long> topicsBytesIn5Min, Map<String, Long> topicsBytesOut5Min,
      Map<String, Long> topicsBytesIn15Min, Map<String, Long> topicsBytesOut15Min) {
"
19783,getProcessCpuLoad,"  public static double getProcessCpuLoad(MBeanServerConnection mbs)
      throws MalformedObjectNameException, NullPointerException, InstanceNotFoundException,
             ReflectionException, IOException {
    ObjectName name = ObjectName.getInstance(""java.lang:type=OperatingSystem"");
    AttributeList list = mbs.getAttributes(name, new String[]{""ProcessCpuLoad""});

    if (list.isEmpty()) {
      return 0.0;
    }"
19784,getTopicNetworkMetricFromFutures,"  private Map<String, Long> getTopicNetworkMetricFromFutures(
      Map<String, Future<KafkaMetricValue>> futures)
      throws ExecutionException, InterruptedException {
    Map<String, Long> metricValues = new HashMap<>();
"
19785,getTopicMetrics,"  private Map<String, Future<KafkaMetricValue>> getTopicMetrics(MBeanServerConnection mbs,
                                                                Set<String> topics,
                                                                String metricTemplate,
                                                                String attributeName) {
    Map<String, Future<KafkaMetricValue>> futures = new HashMap<>();"
19786,run,"  public void run() {
    BrokerStatsRetriever brokerStatsRetriever = new BrokerStatsRetriever(kafkaConfigPath, primaryNetworkInterfaceName, disableEc2metadata);
    try {
      BrokerStats stats = brokerStatsRetriever.retrieveBrokerStats(brokerHost, jmxPort);"
19787,stop,"  public void stop() throws Exception {
    statsReportExecutor.shutdown();
  }"
19788,start,"  public void start() {
    LOG.info(""Starting broker stats reporter....."");
    statsReportExecutor.scheduleAtFixedRate(
        this, INITIAL_DELAY, pollingIntervalInSeconds, TimeUnit.SECONDS);"
19790,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""BrokerStatsReader"", options);
    System.exit(1);
  }"
19791,parseCommandLine,"  private static CommandLine parseCommandLine(String[] args) {
    if (args.length < 4) {
      printUsageAndExit();
    }

    Option zookeeper = new Option(ZOOKEEPER, true, ""zookeeper connection string"");
    Option statsTopic = new Option(STATS_TOPIC, true, ""kafka topic for broker stats"");
    options.addOption(zookeeper).addOption(statsTopic);

    CommandLineParser parser = new DefaultParser();"
19792,uncaughtException,"    public void uncaughtException(Thread t, Throwable e) {
      LOG.error(""Unexpected exception : "", e);
      System.exit(1);
    }"
19793,run,"  public void run() {
    thread.setUncaughtExceptionHandler(new BrokerStatsReaderExceptionHandler());
    this.stopped = false;
    try {
      Properties properties = OperatorUtil.createKafkaConsumerProperties("
19794,stop,"  public void stop() {
    this.stopped = true;
  }"
19795,start,"  public void start() {
    this.thread = new Thread(this);
    this.thread.start();
  }"
19797,processOnePartition,"  public static List<BrokerStats> processOnePartition(String zkUrl, TopicPartition topicPartition,
                                                      long startOffset, long endOffset,
                                                      Set<String> brokerNames) {
    KafkaConsumer<byte[], byte[]> kafkaConsumer = null;
    List<BrokerStats> result = new ArrayList<>();
    try {"
19800,cancelDecommissionBroker,"  public void cancelDecommissionBroker(@Context HttpServletRequest ctx,
                                       @PathParam(""clusterName"") String clusterName,
                                       @PathParam(""brokerId"") String brokerIdStr) {
    checkAndGetClusterManager(clusterName).cancelDecommissionBroker(Integer.parseInt(brokerIdStr));"
19801,decommissionBroker,"  public void decommissionBroker(@Context HttpServletRequest ctx,
                                 @PathParam(""clusterName"") String clusterName,
                                 @PathParam(""brokerId"") String brokerIdStr) {
    checkAndGetClusterManager(clusterName).decommissionBroker(Integer.parseInt(brokerIdStr));"
19802,isBrokerDecommissioned,"  public boolean isBrokerDecommissioned(@PathParam(""clusterName"") String clusterName, @PathParam(""brokerId"") String brokerId) {
    return checkAndGetBroker(clusterName, brokerId).isDecommissioned();
  }"
19803,getBrokerList,"    public List<KafkaBroker> getBrokerList(@PathParam(""clusterName"") String clusterName) {
        KafkaClusterManager clusterManager = checkAndGetClusterManager(clusterName);
        return clusterManager.getAllBrokers();
    }"
19804,run,"  public void run() {
    inBrokerReplacement = true;
    replacementStartTime = System.currentTimeMillis();
    String[] replaceBrokerCommand = new String[3];
    replaceBrokerCommand[0] = ""/bin/sh"";
    replaceBrokerCommand[1] = ""-c"";
    replaceBrokerCommand[2] = script + "" "" + broker;
    LOG.info(""Broker replacement command : "" + replaceBrokerCommand[0] + "" ""
        + replaceBrokerCommand[1] + replaceBrokerCommand[2]);
"
19805,abort,"  public void abort() {
    if (inBrokerReplacement) {
      thread.interrupt();"
19806,getReplacedBroker,"  public String getReplacedBroker() {
    return broker;
  }"
19807,getReplacementStartTime,"  public long getReplacementStartTime() {
    return replacementStartTime;
  }"
19808,busy,"  public boolean busy() {
    return this.inBrokerReplacement;
  }"
19809,replaceBroker,"  public void replaceBroker(String brokerName) {
    if (!inBrokerReplacement) {
      this.broker = brokerName;"
19811,printUsageAndExit,"  private static void printUsageAndExit() {
    HelpFormatter formatter = new HelpFormatter();
    formatter.printHelp(""BrokerReplacement"", options);
    System.exit(1);
  }"
19812,parseCommandLine,"  private static CommandLine parseCommandLine(String[] args) {
    Option broker = new Option(BROKER, true, ""broker name"");
    Option command = new Option(COMMAND, true, ""command for relaunching a host"");
    options.addOption(broker).addOption(command);

    if (args.length < 3) {
      printUsageAndExit();
    }

    CommandLineParser parser = new DefaultParser();"
19813,logAPIAction,"  public static void logAPIAction(Logger LOG, HttpServletRequest ctx, String message) {
    LOG.info(""User from:"" + ctx.getRemoteUser() + "" from ip:"" + ctx.getRemoteHost() + "" "" + message);
  }"
19814,getRandom,"  private float getRandom(float min, float max) {
    float random = this.random.nextFloat();
    return min + random * (max - min);
  }"
19815,recalculateCurrentSpeed,"  private void recalculateCurrentSpeed() {
    currentSpeed += getRandom(-SPEED_RANDOM_DELTA, SPEED_RANDOM_DELTA);

    if (currentSpeed < MIN_SPEED) {
      currentSpeed = MIN_SPEED;"
19816,calculateJumpSpeed,"  private void calculateJumpSpeed() {
    currentVerticalSpeed = getRandom(0.2f * MAX_JUMP_HEIGHT_IN_METERS, MAX_JUMP_HEIGHT_IN_METERS) * meterInDp * density;
  }"
19817,updatePosition,"  private void updatePosition(double delta) {
    recalculateCurrentSpeed();
    x += density * currentSpeed * delta;
    if (x > getWidth() + 5 * tumbleweed.getWidth()) {
      x = -tumbleweed.getWidth();
    }"
19818,updateAngle,"  private void updateAngle(double delta) {
    angle += delta * ROTATION_SPEED;
    angle %= 360;
  }"
19819,drawTumbleweed,"  private void drawTumbleweed(Canvas canvas, double delta) {
    updateAngle(delta);
    matrix.setTranslate(x, y);
    matrix.postRotate(angle, x + tumbleweed.getWidth() / 2, y + tumbleweed.getHeight() / 2);
    canvas.drawBitmap(tumbleweed, matrix, paint);
  }"
19820,drawShadow,"  private void drawShadow(Canvas canvas) {
    float scale = 1 - SHADOW_SCALE_FACTOR * ((bottomPosition - y) / (bottomPosition - topPosition));
    Bitmap toDraw;
    if (scale == 1) {
      toDraw = shadow;
    } else {"
19821,onDraw,"  protected void onDraw(Canvas canvas) {
    long time = System.currentTimeMillis();

    if (timeStamp != INVALID_TIME) {
      double delta = (time - timeStamp) / 1000d;
      updatePosition(delta);"
19822,init,"  private void init(Context context) {
    Resources res = context.getResources();
    paint = new Paint();
    tumbleweed = BitmapFactory.decodeResource(res, R.drawable.tumbleweed);
    shadow = BitmapFactory.decodeResource(res, R.drawable.shadow_tumbleweed);
    density = context.getResources().getDisplayMetrics().density;
    random = new Random();
    meterInDp = tumbleweed.getHeight();
  }"
19823,setButtonText,"  public void setButtonText(String action) {
    if (TextUtils.isEmpty(action)) {
      button.setVisibility(GONE);"
19824,setMessage,"  public void setMessage(String msg) {
    message.setText(msg);
  }"
19825,setOnButtonClickListener,"  public void setOnButtonClickListener(OnClickListener clickListener) {
    button.setOnClickListener(clickListener);
  }"
19827,updatePosition,"  private void updatePosition(Cloud cloud, double timeDelta) {
    cloud.x += density * SPEED_DP_PER_SEC * cloud.speedMultiplier * timeDelta;
    int width = getWidth();
    if (cloud.x > width) {
      cloud.x = -cloud.bitmap.getWidth();"
19828,drawClouds,"  private void drawClouds(Canvas canvas, long time) {
    for (Cloud cloud : clouds) {
      updatePosition(cloud, (time - timeStamp) / 1000d);"
19830,onDraw,"  protected void onDraw(Canvas canvas) {
    long time = System.currentTimeMillis();
    if (timeStamp != -1) {
      drawClouds(canvas, time);
    } else {
      initClouds();"
19831,init,"  private void init(Context context) {
    paint = new Paint();
    density = context.getResources().getDisplayMetrics().density;
  }"
19836,create,"      public WeightedResourceRecordSetApi create(String id) {
        return null;
      }"
19837,provideWeightedResourceRecordSetApiFactory,"  WeightedResourceRecordSetApi.Factory provideWeightedResourceRecordSetApiFactory() {
    return new WeightedResourceRecordSetApi.Factory() {
      @Override"
19838,create,"    ResourceRecordSetApi create(String id);
  }"
19839,deleteByNameAndType,"  void deleteByNameAndType(String name, String type);
"
19841,getByNameAndType,"  ResourceRecordSet<?> getByNameAndType(String name, String type);
"
19842,iterateByName,"  Iterator<ResourceRecordSet<?>> iterateByName(String name);
"
19844,getByNameTypeAndQualifier,"  ResourceRecordSet<?> getByNameTypeAndQualifier(String name, String type, String qualifier);
}"
19845,iterateByNameAndType,"  Iterator<ResourceRecordSet<?>> iterateByNameAndType(String name, String type);
"
19848,get,"      public Credentials get() {
        return server.credentials();
      }"
19849,url,"      public String url() {
        return server.url();
      }"
19850,mockApi,"  CloudDNS mockApi() {
    CloudDNSProvider.FeignModule module = new CloudDNSProvider.FeignModule();
    Feign feign = module.feign(module.logger(), module.logLevel());
    CloudIdentity cloudIdentity = module.cloudIdentity(feign);
    Provider provider = new CloudDNSProvider() {
      @Override
      public String url() {
        return server.url();"
19851,deleteRecord,"  public void deleteRecord() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(mxRecordDeleteInitialResponse));

    Job job = mockApi().deleteRecord(domainId, ""MX-4582544"");

    assertThat(job.id).isEqualTo(""da520d24-dd5b-4387-92be-2020a7f2b176"");
    assertThat(job.status).isEqualTo(""RUNNING"");
"
19852,updateMXRecord,"  public void updateMXRecord() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(mxRecordUpdateInitialResponse));

    Job job = mockApi().updateRecord(domainId, ""MX-4582544"", 600, ""mail.denominator.io"");

    assertThat(job.id).isEqualTo(""e32eace1-c44f-49af-8f74-768fa34469f4"");
    assertThat(job.status).isEqualTo(""RUNNING"");
"
19853,completedRequest,"  public void completedRequest() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(mxRecordCompletedResponse));

    Job job = mockApi().getStatus(""0ade2b3b-07e4-4e68-821a-fcce4f5406f3"");

    assertThat(job.id).isEqualTo(""0ade2b3b-07e4-4e68-821a-fcce4f5406f3"");
    assertThat(job.status).isEqualTo(""COMPLETED"");
"
19854,runningRequest,"  public void runningRequest() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(mxRecordRunningResponse));

    Job job = mockApi().getStatus(""0ade2b3b-07e4-4e68-821a-fcce4f5406f3"");

    assertThat(job.id).isEqualTo(""0ade2b3b-07e4-4e68-821a-fcce4f5406f3"");
    assertThat(job.status).isEqualTo(""RUNNING"");
"
19855,createMXRecord,"  public void createMXRecord() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(mxRecordInitialResponse));

    Job job = mockApi().createRecordWithPriority(domainId, ""www.denominator.io"", ""MX"",
                                                 1800, ""mail.denominator.io"", 10);

    assertThat(job.id).isEqualTo(""0ade2b3b-07e4-4e68-821a-fcce4f5406f3"");
    assertThat(job.status).isEqualTo(""RUNNING"");"
19856,recordsAbsent,"  public void recordsAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(""{\""records\"":[]}""));

    assertThat(mockApi().records(domainId)).isEmpty();

    server.assertAuthRequest();"
19857,recordsPresent,"  public void recordsPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(recordsResponse));

    assertThat(mockApi().records(domainId))
        .extracting(""id"", ""name"", ""type"", ""ttl"", ""priority"", ""data"")
        .containsExactly("
19858,domainsAbsent,"  public void domainsAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(""{\""domains\"":[]}""));

    assertThat(mockApi().domains()).isEmpty();

    server.assertAuthRequest();"
19859,domainsByNamePresent,"  public void domainsByNamePresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(domainsResponse));

    assertThat(mockApi().domainsByName(""denominator.io"")).containsExactly(
        Zone.create(""1234"", ""denominator.io"", 0, ""nil@denominator.io"")
    );"
19860,domainsPresent,"  public void domainsPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(domainsResponse));

    assertThat(mockApi().domains().get(0))
        .hasName(""denominator.io"");
"
19861,limitsSuccess,"  public void limitsSuccess() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(limitsResponse));

    assertThat(mockApi().limits()).isNotEmpty();

    server.assertAuthRequest();"
19862,passwordAuth,"  public void passwordAuth() throws Exception {
    server.credentials(""username"", ""password"");
    server.enqueueAuthResponse();

    CloudDNSProvider.FeignModule module = new CloudDNSProvider.FeignModule();
    CloudIdentity api = module.cloudIdentity(module.feign(module.logger(), module.logLevel()));

    TokenIdAndPublicURL tokenIdAndPublicURL = api.passwordAuth(
        URI.create(server.url()), ""username"", ""password"");
"
19863,toString,"    public String toString() {
      return new StringBuilder(name).append(type).append(ttl).append(data).append(priority)
          .toString();"
19864,data,"    public void data(String data) {
      this.data = data;
    }"
19865,data,"    public String data() {
      if (""AAAA"".equals(type)) {
        return data.toUpperCase();
      }"
19866,apply,"    ListWithNext<X> apply(URI nullOrNext);
  }"
19867,deleteRecord,"    Job deleteRecord(@Param(""domainId"") int domainId,
                     @Param(""recordId"") String recordId);"
19868,updateRecord,"    Job updateRecord(@Param(""domainId"") int domainId, @Param(""recordId"") String recordId,
                     @Param(""ttl"") int ttl, @Param(""data"") String data);"
19869,createRecordWithPriority,"    Job createRecordWithPriority(@Param(""domainId"") int id, @Param(""name"") String name,
                                 @Param(""type"") String type, @Param(""ttl"") int ttl,"
19870,createRecord,"    Job createRecord(@Param(""domainId"") int id, @Param(""name"") String name,
                     @Param(""type"") String type, @Param(""ttl"") int ttl, @Param(""data"") String data);"
19871,recordsByNameAndType,"    ListWithNext<Record> recordsByNameAndType(@Param(""domainId"") int id,
                                              @Param(""name"") String nameFilter,"
19872,records,"    ListWithNext<Record> records(@Param(""domainId"") int id);
"
19876,domainsByName,"    ListWithNext<Zone> domainsByName(@Param(""name"") String name);
"
19877,deleteDomain,"    Job deleteDomain(@Param(""id"") String id);
"
19878,updateDomain,"    Job updateDomain(@Param(""id"") String id, @Param(""email"") String email, @Param(""ttl"") int ttl);
"
19879,createDomain,"    Job createDomain(@Param(""name"") String name, @Param(""email"") String email,
                     @Param(""ttl"") int ttl);"
19880,getStatus,"    Job getStatus(@Param(""jobId"") String jobId);
"
19882,passwordAuth,"    TokenIdAndPublicURL passwordAuth(URI endpoint, @Param(""username"") String username,
                                     @Param(""password"") String password);"
19883,apiKeyAuth,"    TokenIdAndPublicURL apiKeyAuth(URI endpoint, @Param(""username"") String username,
                                   @Param(""apiKey"") String apiKey);"
19884,emptyOn404,"  static <X> ListWithNext<X> emptyOn404(Pager<X> pagingFunction, URI nullOrNext) {
    try {
      return pagingFunction.apply(nullOrNext);"
19885,write,"    public void write(JsonWriter out, ListWithNext<X> value) throws IOException {
      throw new UnsupportedOperationException();
    }"
19886,read,"    public ListWithNext<X> read(JsonReader reader) throws IOException {
      ListWithNext<X> records = new ListWithNext<X>();
      reader.beginObject();
      while (reader.hasNext()) {
        String nextName = reader.nextName();
        if (jsonKey().equals(nextName)) {
          reader.beginArray();
          while (reader.hasNext()) {"
19887,build,"    protected abstract X build(JsonReader reader) throws IOException;
"
19889,build,"    protected Record build(JsonReader reader) throws IOException {
      Record record = new Record();
      while (reader.hasNext()) {
        String key = reader.nextName();
        if (key.equals(""id"")) {"
19890,jsonKey,"    protected String jsonKey() {
      return ""records"";
    }"
19891,build,"    protected Zone build(JsonReader reader) throws IOException {
      String name = null, id = null, email = null;
      while (reader.hasNext()) {
        String nextName = reader.nextName();
        if (nextName.equals(""id"")) {"
19892,jsonKey,"    protected String jsonKey() {
      return ""domains"";
    }"
19893,read,"    public Job read(JsonReader reader) throws IOException {
      Job job = new Job();

      reader.beginObject();
      while (reader.hasNext()) {
        String key = reader.nextName();
        if (key.equals(""jobId"")) {"
19895,toStringComparator,"  private static <X> Comparator<X> toStringComparator() {
    return Comparator.class.cast(TO_STRING_COMPARATOR);
  }"
19896,compare,"    public int compare(Object left, Object right) {
      return left.toString().compareTo(right.toString());
    }"
19897,create,"    QualifiedResourceRecordSetApi create(String id);
  }"
19898,deleteByNameTypeAndQualifier,"  void deleteByNameTypeAndQualifier(String name, String type, String qualifier);
"
19900,toString,"    public String toString() {
      return ""Provides("" + provider + "")"";
    }"
19901,get,"    public Provider get() {
      return provider;
    }"
19902,provide,"  public static Object provide(denominator.Provider provider) {
    return new ProvideProvider(provider);
  }"
19903,instantiateModule,"  public static Object instantiateModule(Provider in) throws IllegalArgumentException {
    String moduleClassName;
    if (in.getClass().isAnonymousClass()) {
      moduleClassName = in.getClass().getSuperclass().getName() + ""$Module"";
    } else {
      moduleClassName = in.getClass().getName() + ""$Module"";
    }"
19904,withUrl,"  public static Provider withUrl(Provider provider, String url) {
    checkNotNull(provider, ""provider"");
    checkNotNull(url, ""url"");
    try {
      Constructor<?> ctor = provider.getClass().getDeclaredConstructor(String.class);"
19905,getByName,"  public static Provider getByName(String providerName) {
    checkNotNull(providerName, ""providerName"");
    Provider matchedProvider = null;
    List<String> providerNames = new ArrayList<String>();
    for (Provider provider : list()) {
      if (provider.name().equals(providerName)) {
        matchedProvider = provider;
        break;"
19906,list,"  public static Iterable<Provider> list() {
    return ServiceLoader.load(Provider.class);
  }"
19907,credentialTypeToParameterNames,"  Map<String, Collection<String>> credentialTypeToParameterNames();
}"
19909,profileToRecordTypes,"  Map<String, Collection<String>> profileToRecordTypes();
"
19913,deleteByNameAndType,"    public void deleteByNameAndType(String name, String type) {
      api.deleteByNameAndType(name, type);
    }"
19914,deleteByNameTypeAndQualifier,"    public void deleteByNameTypeAndQualifier(String name, String type, String qualifier) {
      api.deleteByNameAndType(name, type);
    }"
19915,put,"    public void put(ResourceRecordSet<?> rrset) {
      api.put(rrset);
    }"
19916,getByNameTypeAndQualifier,"    public ResourceRecordSet<?> getByNameTypeAndQualifier(String name, String type,
                                                          String qualifier) {
      return null;"
19917,iterateByNameAndType,"    public Iterator<ResourceRecordSet<?>> iterateByNameAndType(String name, String type) {
      ResourceRecordSet<?> rrs = api.getByNameAndType(name, type);
      if (rrs != null) {
        return Collections.<ResourceRecordSet<?>>singleton(rrs).iterator();
      }"
19918,iterateByName,"    public Iterator<ResourceRecordSet<?>> iterateByName(String name) {
      return api.iterateByName(name);
    }"
19919,iterator,"    public Iterator<ResourceRecordSet<?>> iterator() {
      return api.iterator();
    }"
19920,create,"      public AllProfileResourceRecordSetApi create(String id) {
        return new OnlyBasicResourceRecordSetApi(factory.create(id));
      }"
19921,provideAllProfileResourceRecordSetApi,"  AllProfileResourceRecordSetApi.Factory provideAllProfileResourceRecordSetApi(
      final ResourceRecordSetApi.Factory factory) {
    return new AllProfileResourceRecordSetApi.Factory() {"
19923,provideCloser,"  Closeable provideCloser() {
    return this;
  }"
19924,delete,"  public void delete(String name) {
    data.remove(name);
  }"
19925,put,"  public String put(Zone zone) {
    if (!data.containsKey(zone.name())) {
      Collection<ResourceRecordSet<?>>
          recordsInZone =
          new ConcurrentSkipListSet<ResourceRecordSet<?>>(TO_STRING);"
19926,iterateByName,"  public Iterator<Zone> iterateByName(String name) {
    return filter(iterator(), nameEqualTo(name));
  }"
19927,remove,"      public void remove() {
        throw new UnsupportedOperationException(""remove"");
      }"
19929,hasNext,"      public boolean hasNext() {
        return delegate.hasNext();
      }"
19930,iterator,"  public Iterator<Zone> iterator() {
    final Iterator<Entry<String, Collection<ResourceRecordSet<?>>>>
        delegate = data.entrySet().iterator();
    return new Iterator<Zone>() {"
19931,compare,"        public int compare(ResourceRecordSet<?> arg0, ResourceRecordSet<?> arg1) {
          return arg0.toString().compareTo(arg1.toString());
        }"
19932,put,"  public void put(ResourceRecordSet<?> rrset) {
    put(IS_WEIGHTED, rrset);
  }"
19933,supportedWeights,"  public SortedSet<Integer> supportedWeights() {
    return supportedWeights;
  }"
19934,apply,"        public boolean apply(ResourceRecordSet<?> in) {
          return in != null && in.weighted() != null;
        }"
19935,deleteByNameAndType,"  public void deleteByNameAndType(String name, String type) {
    Collection<ResourceRecordSet<?>> records = delegate.records();
    synchronized (records) {
      removeByNameAndType(records.iterator(), name, type);"
19936,removeByNameAndType,"  private void removeByNameAndType(Iterator<ResourceRecordSet<?>> i, String name, String type) {
    while (i.hasNext()) {
      ResourceRecordSet<?> test = i.next();"
19937,put,"  public void put(ResourceRecordSet<?> rrset) {
    checkNotNull(rrset, ""rrset was null"");
    Collection<ResourceRecordSet<?>> records = delegate.records();
    synchronized (records) {
      removeByNameAndType(records.iterator(), rrset.name(), rrset.type());"
19938,getByNameAndType,"  public ResourceRecordSet<?> getByNameAndType(String name, String type) {
    return nextOrNull(delegate.iterateByNameAndType(name, type));
  }"
19939,iterateByName,"  public Iterator<ResourceRecordSet<?>> iterateByName(String name) {
    return delegate.iterateByName(name);
  }"
19940,iterator,"  public Iterator<ResourceRecordSet<?>> iterator() {
    return delegate.iterator();
  }"
19941,create,"        public WeightedResourceRecordSetApi create(String name) {
          return new MockWeightedResourceRecordSetApi(data, name, supportedWeights);
        }"
19942,provideWeightedResourceRecordSetApiFactory,"    WeightedResourceRecordSetApi.Factory provideWeightedResourceRecordSetApiFactory() {
      return new WeightedResourceRecordSetApi.Factory() {
        @Override"
19943,create,"        public GeoResourceRecordSetApi create(String name) {
          return new MockGeoResourceRecordSetApi(data, name, supportedRegions);
        }"
19944,provideGeoResourceRecordSetApiFactory,"    GeoResourceRecordSetApi.Factory provideGeoResourceRecordSetApiFactory() {
      return new GeoResourceRecordSetApi.Factory() {
        @Override"
19945,create,"        public AllProfileResourceRecordSetApi create(String name) {
          return new MockAllProfileResourceRecordSetApi(data, name, notNull());
        }"
19946,provideAllProfileResourceRecordSetApiFactory,"    AllProfileResourceRecordSetApi.Factory provideAllProfileResourceRecordSetApiFactory() {
      return new denominator.AllProfileResourceRecordSetApi.Factory() {
        @Override"
19947,create,"        public ResourceRecordSetApi create(String name) {
          return new MockResourceRecordSetApi(data, name);
        }"
19948,provideResourceRecordSetApiFactory,"    ResourceRecordSetApi.Factory provideResourceRecordSetApiFactory() {
      return new denominator.ResourceRecordSetApi.Factory() {
        @Override"
19949,provideZoneApi,"    ZoneApi provideZoneApi() {
      return new MockZoneApi(data);
    }"
19950,ok,"        public boolean ok() {
          return true;
        }"
19951,alwaysOK,"    CheckConnection alwaysOK() {
      return new CheckConnection() {
        public boolean ok() {"
19952,profileToRecordTypes,"  public Map<String, Collection<String>> profileToRecordTypes() {
    Map<String, Collection<String>> result = super.profileToRecordTypes();
    List<String> special = new ArrayList<String>(basicRecordTypes());
    special.remove(""SOA"");
    result.put(""geo"", Collections.unmodifiableList(special));
    result.put(""weighted"", result.get(""geo""));
    return result;
  }"
19954,put,"  public void put(ResourceRecordSet<?> rrset) {
    Collection<ResourceRecordSet<?>> records = records();
    synchronized (records) {
      put(IS_GEO, rrset);"
19955,supportedRegions,"  public Map<String, Collection<String>> supportedRegions() {
    return supportedRegions;
  }"
19956,apply,"    public boolean apply(ResourceRecordSet<?> in) {
      return in != null && in.geo() != null;
    }"
19957,apply,"  public Statement apply(Statement base, Description description) {
    return delegate.apply(base, description);
  }"
19958,shutdown,"  void shutdown() throws IOException {
    delegate.shutdown();
  }"
19959,assertAuthRequest,"  RecordedRequestAssert assertAuthRequest() throws InterruptedException {
    return assertThat(delegate.takeRequest())
        .hasMethod(""POST"")"
19960,assertRequest,"  RecordedRequestAssert assertRequest() throws InterruptedException {
    return assertThat(delegate.takeRequest());
  }"
19961,enqueue,"  void enqueue(MockResponse mockResponse) {
    delegate.enqueue(mockResponse);
  }"
19962,enqueueAuthResponse,"  void enqueueAuthResponse() {
    delegate.enqueue(new MockResponse().setBody(accessResponse));
  }"
19963,credentials,"  MockCloudDNSServer credentials(String username, String apiKey) {
    this.username = username;
    this.apiKey = apiKey;
    this.accessResponse = ""{\""access\"": {\n""
                          + ""  \""token\"": {\n""
                          + ""    \""expires\"": \""2013-07-08T05:55:31.809Z\"",\n"""
19964,credentials,"  Credentials credentials() {
    return ListCredentials.from(username, apiKey);
  }"
19965,connect,"  DNSApiManager connect() {
    return Denominator.create(this, CredentialsConfiguration.credentials(credentials()));
  }"
19968,tenantId,"  String tenantId() {
    return tenantId;
  }"
19969,records,"  Collection<ResourceRecordSet<?>> records() {
    Collection<ResourceRecordSet<?>> result = data.get(zoneName);
    checkArgument(result != null, ""zone %s not found"", zoneName);
    return result;
  }"
19970,deleteByNameAndType,"  public void deleteByNameAndType(String name, String type) {
    Collection<ResourceRecordSet<?>> records = records();
    synchronized (records) {
      for (Iterator<ResourceRecordSet<?>> it = iterateByNameAndType(name, type); it.hasNext(); ) {"
19971,deleteByNameTypeAndQualifier,"  public void deleteByNameTypeAndQualifier(String name, String type, String qualifier) {
    Collection<ResourceRecordSet<?>> records = records();
    synchronized (records) {
      ResourceRecordSet<?> rrsMatch = getByNameTypeAndQualifier(records, name, type, qualifier);"
19972,getByNameTypeAndQualifier,"  private ResourceRecordSet<?> getByNameTypeAndQualifier(Collection<ResourceRecordSet<?>> records,
                                                         String name, String type,
                                                         String qualifier) {
    Filter<ResourceRecordSet<?>>"
19973,getByNameTypeAndQualifier,"  public ResourceRecordSet<?> getByNameTypeAndQualifier(String name, String type,
                                                        String qualifier) {
    return getByNameTypeAndQualifier(records(), name, type, qualifier);"
19974,iterateByNameAndType,"  public Iterator<ResourceRecordSet<?>> iterateByNameAndType(String name, String type) {
    return filter(records().iterator(), and(nameAndTypeEqualTo(name, type), filter));
  }"
19975,put,"  public void put(ResourceRecordSet<?> rrset) {
    put(notNull(), rrset);
  }"
19976,put,"  protected void put(Filter<ResourceRecordSet<?>> valid, ResourceRecordSet<?> rrset) {
    checkNotNull(rrset, ""rrset was null"");
    checkArgument(rrset.qualifier() != null, ""no qualifier on: %s"", rrset);
    checkArgument(valid.apply(rrset), ""%s failed on: %s"", valid, rrset);
    Collection<ResourceRecordSet<?>> records = records();
    synchronized (records) {
      ResourceRecordSet<?>"
19977,iterateByName,"  public Iterator<ResourceRecordSet<?>> iterateByName(String name) {
    return filter(records().iterator(), and(nameEqualTo(name), filter));
  }"
19978,iterator,"  public Iterator<ResourceRecordSet<?>> iterator() {
    return filter(records().iterator(), filter);
  }"
19979,singleRequestOnFailure,"  public void singleRequestOnFailure() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setResponseCode(401));

    DNSApiManager api = server.connect();
    assertFalse(api.checkConnection());
"
19981,write,"  public void write(JsonWriter out, TokenIdAndPublicURL value) throws IOException {
    throw new UnsupportedOperationException();
  }"
19982,toString,"  public String toString() {
    return ""KeystoneV2AccessAdapter("" + serviceTypeSuffix + "")"";
  }"
19984,isNull,"  static boolean isNull(JsonElement element) {
    return element == null || element.isJsonNull();
  }"
19985,passwordAuth,"  TokenIdAndPublicURL passwordAuth(URI endpoint, @Param(""tenantId"") String tenantId,
                                   @Param(""username"") String username,"
19986,noToken,"  public void noToken() throws Exception {
    server.enqueue(new MockResponse().setBody(""{\n""
                                              + ""    \""access\"": {\n""
                                              + ""        \""serviceCatalog\"": [{\n""
                                              + ACCESS_FOOTER));"
19987,noServices,"  public void noServices() throws Exception {
    server.enqueue(new MockResponse().setBody(ACCESS_HEADER + SERVICE + ACCESS_FOOTER));

    TokenIdAndPublicURL result = client.passwordAuth(server.getUrl(""/"").toURI(), ""u"", ""p"");

    assertThat(result.tokenId).isEqualTo(""1bcd122d87494f5ab39a185b9ec5ff73"");"
19988,serviceNotFound,"  public void serviceNotFound() throws Exception {
    server.enqueue(new MockResponse().setBody(ACCESS_HEADER + SERVICE + ACCESS_FOOTER));

    TokenIdAndPublicURL result = client.passwordAuth(server.getUrl(""/"").toURI(), ""u"", ""p"");

    assertThat(result.tokenId).isEqualTo(""1bcd122d87494f5ab39a185b9ec5ff73"");"
19989,noEndpoints,"  public void noEndpoints() throws Exception {
    server.enqueue(new MockResponse().setBody(ACCESS_HEADER
                                              + ""            \""name\"": \""cloudDNS\"",\n""
                                              + ""            \""type\"": \""rax:dns\""\n""
                                              + SERVICE + ACCESS_FOOTER));
"
19992,toString,"  public String toString() {
    return ""KeystoneAccessAdapter("" + type + "")"";
  }"
19995,create,"      public GeoResourceRecordSetApi create(String id) {
        return null;
      }"
19996,provideGeoResourceRecordSetApiFactory,"  GeoResourceRecordSetApi.Factory provideGeoResourceRecordSetApiFactory() {
    return new GeoResourceRecordSetApi.Factory() {
"
19997,toString,"  public String toString() {
    return provider.toString();
  }"
19998,close,"  public void close() throws IOException {
    closer.close();
  }"
19999,checkConnection,"  public boolean checkConnection() {
    return checkConnection.ok();
  }"
20000,provider,"  public Provider provider() {
    return provider;
  }"
20002,weightedRecordSetsInZone,"  public WeightedResourceRecordSetApi weightedRecordSetsInZone(String id) {
    return weightedApiFactory.create(id);
  }"
20003,geoRecordSetsInZone,"  public GeoResourceRecordSetApi geoRecordSetsInZone(String id) {
    return geoApiFactory.create(id);
  }"
20004,recordSetsInZone,"  public AllProfileResourceRecordSetApi recordSetsInZone(String id) {
    return allRRSetApiFactory.create(id);
  }"
20005,basicRecordSetsInZone,"  public ResourceRecordSetApi basicRecordSetsInZone(String id) {
    return rrsetApiFactory.create(id);
  }"
20006,zones,"  public ZoneApi zones() {
    return zones;
  }"
20007,delete,"  public void delete(String id) {
    try {
      api.deleteDomain(id);"
20008,put,"  public String put(Zone zone) {
    if (zone.id() != null) {
      return api.updateDomain(zone.id(), zone.name(), zone.email(), zone.ttl()).id();
    }"
20010,iterator,"  public Iterator<Zone> iterator() {
    return api.domains().iterator();
  }"
20011,apply,"  public Request apply(RequestTemplate input) {
    TokenIdAndPublicURL urlAndToken = lazyUrlAndToken.get();
    if (input.url().indexOf(""http"") != 0) {
      input.insert(0, urlAndToken.publicURL);
    }
    input.header(""X-Auth-Token"", urlAndToken.tokenId);"
20012,url,"  public String url() {
    return lazyUrlAndToken.get().publicURL;
  }"
20013,name,"  public String name() {
    return provider.name();
  }"
20014,type,"  public Class<Designate> type() {
    return Designate.class;
  }"
20015,create,"    public ResourceRecordSetApi create(String id) {
      return new DesignateResourceRecordSetApi(api, checkNotNull(id, ""id""));
    }"
20020,iterator,"  public Iterator<ResourceRecordSet<?>> iterator() {
    return new GroupByRecordNameAndTypeIterator(api.records(domainId).iterator());
  }"
20021,feign,"    Feign feign(Logger logger, Logger.Level logLevel) {
      RecordAdapter recordAdapter = new RecordAdapter();
      return Feign.builder()
          .logger(logger)"
20022,logLevel,"    Logger.Level logLevel() {
      return Logger.Level.NONE;
    }"
20023,logger,"    Logger logger() {
      return new Logger.NoOpLogger();
    }"
20024,keystoneV2,"    KeystoneV2 keystoneV2(Feign feign) {
      return feign.newInstance(EmptyTarget.create(KeystoneV2.class, ""keystone""));
    }"
20025,designate,"    Designate designate(Feign feign, DesignateTarget target) {
      return feign.newInstance(target);
    }"
20026,provideResourceRecordSetApiFactory,"    ResourceRecordSetApi.Factory provideResourceRecordSetApiFactory(
        DesignateResourceRecordSetApi.Factory in) {
      return in;"
20027,provideZoneApi,"    ZoneApi provideZoneApi(DesignateZoneApi in) {
      return in;
    }"
20028,checkConnection,"    CheckConnection checkConnection(LimitsReadable checkConnection) {
      return checkConnection;
    }"
20029,credentialTypeToParameterNames,"  public Map<String, Collection<String>> credentialTypeToParameterNames() {
    Map<String, Collection<String>> options = new LinkedHashMap<String, Collection<String>>();
    options.put(""password"", Arrays.asList(""tenantId"", ""username"", ""password""));
    return options;
  }"
20030,profileToRecordTypes,"  public Map<String, Collection<String>> profileToRecordTypes() {
    Map<String, Collection<String>>
        profileToRecordTypes =
        new LinkedHashMap<String, Collection<String>>();
    profileToRecordTypes.put(""roundRobin"", Arrays.asList(""A"", ""AAAA"", ""MX"", ""NS"", ""SRV"", ""TXT""));"
20031,basicRecordTypes,"  public Set<String> basicRecordTypes() {
    Set<String> types = new LinkedHashSet<String>();
    types.addAll(Arrays.asList(""A"", ""AAAA"", ""CNAME"", ""MX"", ""NS"", ""SRV"", ""TXT""));
    return types;
  }"
20033,toRDataMap,"  static Map<String, Object> toRDataMap(Record record) {
    if (""A"".equals(record.type)) {
      return AData.create(record.data);"
20034,write,"    public void write(JsonWriter out, List<X> value) throws IOException {
      throw new UnsupportedOperationException();
    }"
20035,read,"    public List<X> read(JsonReader reader) throws IOException {
      List<X> elements = new LinkedList<X>();
      reader.beginObject();
      while (reader.hasNext()) {
        String nextName = reader.nextName();
        if (jsonKey().equals(nextName)) {
          reader.beginArray();
          while (reader.hasNext()) {"
20038,build,"    protected Record build(JsonReader reader) throws IOException {
      return buildRecord(reader);
    }"
20040,build,"    protected Zone build(JsonReader reader) throws IOException {
      String name = null, id = null, email = null;
      int ttl = -1;
      while (reader.hasNext()) {
        String nextName = reader.nextName();
        if (nextName.equals(""id"")) {"
20042,read,"    public Record read(JsonReader reader) throws IOException {
      reader.beginObject();
      Record record = buildRecord(reader);
      reader.endObject();
      return record;
    }"
20043,write,"    public void write(JsonWriter out, Record record) throws IOException {
      out.beginObject();
      out.name(""name"").value(record.name);
      out.name(""type"").value(record.type);
      if (record.ttl != null) {
        out.name(""ttl"").value(record.ttl);
      }
      out.name(""data"").value(record.data);
      if (record.priority != null) {"
20045,buildRecord,"  static Record buildRecord(JsonReader reader) throws IOException {
    Record record = new Record();
    while (reader.hasNext()) {
      String key = reader.nextName();
      if (key.equals(""id"")) {"
20048,deleteRecord,"  void deleteRecord(@Param(""domainId"") String domainId, @Param(""recordId"") String recordId);
"
20049,updateRecord,"  Record updateRecord(@Param(""domainId"") String domainId, @Param(""recordId"") String recordId,
                      Record record);"
20050,createRecord,"  Record createRecord(@Param(""domainId"") String domainId, Record record);
"
20051,records,"  List<Record> records(@Param(""domainId"") String domainId);
"
20052,deleteDomain,"  void deleteDomain(@Param(""domainId"") String domainId);
"
20053,updateDomain,"  Zone updateDomain(@Param(""id"") String id, @Param(""name"") String name,
                    @Param(""email"") String email, @Param(""ttl"") int ttl);"
20054,createDomain,"  Zone createDomain(@Param(""name"") String name, @Param(""email"") String email,
                    @Param(""ttl"") int ttl);"
20057,toString,"    public String toString() {
      return version;
    }"
20058,provider,"  public static Object provider(denominator.Provider provider) {
    return Providers.provide(provider);
  }"
20059,create,"  public static DNSApiManager create(String providerName, Object... modules)
      throws IllegalArgumentException {
    Provider matchedProvider = Providers.getByName(providerName);
    return create(matchedProvider, modules);"
20060,modulesForGraph,"  private static List<Object> modulesForGraph(Provider in, Object... modules) {
    List<Object> modulesForGraph = new ArrayList<Object>(3);
    modulesForGraph.add(Providers.provide(in));
    modulesForGraph.add(Providers.instantiateModule(in));
    if (modules != null) {
      for (Object module : modules) {
        modulesForGraph.add(module);"
20061,create,"  public static DNSApiManager create(Provider in, Object... modules) {
    Object[] modulesForGraph = modulesForGraph(in, modules).toArray();
    try {
      return ObjectGraph.create(modulesForGraph).get(DNSApiManager.class);"
20062,providers,"  public static Iterable<Provider> providers() {
    return Providers.list();
  }"
20063,toString,"    public String toString() {
      return ""ConstantCredentials("" + creds + "")"";
    }"
20064,hashCode,"    public int hashCode() {
      return creds.hashCode();
    }"
20065,equals,"    public boolean equals(Object obj) {
      if (obj instanceof ConstantCredentials) {
        ConstantCredentials that = ConstantCredentials.class.cast(obj);
        return this.creds.equals(that.creds);"
20066,get,"    public Credentials get(denominator.Provider provider) {
      return checkValidForProvider(creds, provider);
    }"
20067,exceptionMessage,"  public static String exceptionMessage(Credentials input, denominator.Provider provider) {
    StringBuilder msg = new StringBuilder();
    if (input == null || input == AnonymousCredentials.INSTANCE) {
      msg.append(""no credentials supplied. "");
    } else {
      msg.append(""incorrect credentials supplied. "");
    }
    msg.append(provider.name()).append("" requires "");"
20068,credentialConfigurationHasKeys,"  private static boolean credentialConfigurationHasKeys(denominator.Provider provider,
                                                        Set<?> keys) {
    for (String credentialType : provider.credentialTypeToParameterNames().keySet()) {
      if (keys.containsAll(provider.credentialTypeToParameterNames().get(credentialType))) {"
20069,credentialConfigurationHasPartCount,"  private static boolean credentialConfigurationHasPartCount(denominator.Provider provider,
                                                             int size) {
    for (String credentialType : provider.credentialTypeToParameterNames().keySet()) {
      if (provider.credentialTypeToParameterNames().get(credentialType).size() == size) {"
20070,isAnonymous,"  private final static boolean isAnonymous(Credentials input) {
    if (input == null) {
      return true;
    }
    if (input instanceof AnonymousCredentials) {
      return true;
    }"
20071,checkValidForProvider,"  public static Credentials checkValidForProvider(Credentials creds,
                                                  denominator.Provider provider) {
    checkNotNull(provider, ""provider cannot be null"");
    if (isAnonymous(creds) && provider.credentialTypeToParameterNames().isEmpty()) {
      return AnonymousCredentials.INSTANCE;"
20072,credentials,"  public static Object credentials(Credentials credentials) {
    return new ConstantCredentials(credentials);
  }"
20073,credentials,"  public static Object credentials(Object firstPart, Object secondPart, Object thirdPart) {
    return credentials(ListCredentials.from(firstPart, secondPart, thirdPart));
  }"
20074,credentials,"  public static Object credentials(Object firstPart, Object secondPart) {
    return credentials(ListCredentials.from(firstPart, secondPart));
  }"
20075,anonymous,"  public static Object anonymous() {
    return credentials(AnonymousCredentials.INSTANCE);
  }"
20076,from,"    public static Credentials from(final Map<String, ?> kwargs) {
      if (kwargs == null || kwargs.isEmpty()) {
        return AnonymousCredentials.INSTANCE;
      }"
20077,asList,"    public static List<Object> asList(Credentials in) throws IllegalArgumentException {
      checkNotNull(in, ""credentials"");
      if (in instanceof ListCredentials) {
        return ListCredentials.class.cast(in);
      } else if (in instanceof Map || in instanceof List) {"
20078,from,"    public static Credentials from(Object... parts) {
      return from(Arrays.asList(checkNotNull(parts, ""credentials"")));
    }"
20079,from,"    public static Credentials from(final List<?> parts) {
      if (parts == null || parts.isEmpty()) {
        return AnonymousCredentials.INSTANCE;
      }"
20080,deleteByNameAndType,"    public void deleteByNameAndType(String name, String type) {
      api.deleteByNameAndType(name, type);
      for (QualifiedResourceRecordSetApi qualifiedApi : qualifiedApis) {
        for (Iterator<ResourceRecordSet<?>> it = qualifiedApi.iterateByNameAndType(name, type);"
20081,deleteByNameTypeAndQualifier,"    public void deleteByNameTypeAndQualifier(String name, String type, String qualifier) {
      for (QualifiedResourceRecordSetApi qualifiedApi : qualifiedApis) {
        qualifiedApi.deleteByNameTypeAndQualifier(name, type, qualifier);"
20082,put,"    public void put(ResourceRecordSet<?> rrset) {
      if (rrset.qualifier() == null) {
        api.put(rrset);
        return;
      }
      for (QualifiedResourceRecordSetApi api : qualifiedApis) {
        if (api instanceof GeoResourceRecordSetApi && rrset.geo() != null) {
          api.put(rrset);"
20083,getByNameTypeAndQualifier,"    public ResourceRecordSet<?> getByNameTypeAndQualifier(String name, String type,
                                                          String qualifier) {
      for (QualifiedResourceRecordSetApi api : qualifiedApis) {
        ResourceRecordSet<?> val = api.getByNameTypeAndQualifier(name, type, qualifier);"
20084,iterator,"          public Iterator<ResourceRecordSet<?>> iterator() {
            return api.iterateByNameAndType(name, type);
          }"
20086,iterator,"          public Iterator<ResourceRecordSet<?>> iterator() {
            return api.iterateByName(name);
          }"
20087,iterateByName,"    public Iterator<ResourceRecordSet<?>> iterateByName(final String name) {
      List<Iterable<ResourceRecordSet<?>>>
          iterables =
          new ArrayList<Iterable<ResourceRecordSet<?>>>();
      for (final QualifiedResourceRecordSetApi api : qualifiedApis) {
        iterables.add(new Iterable<ResourceRecordSet<?>>() {"
20088,iterator,"    public Iterator<ResourceRecordSet<?>> iterator() {
      Iterator<ResourceRecordSet<?>> iterators = concat(qualifiedApis);
      if (!iterators.hasNext()) {
        return api.iterator();
      }"
20089,toIterator,"    static Iterator<ResourceRecordSet<?>> toIterator(ResourceRecordSet<?> rrs) {
      return rrs != null ? Collections.<ResourceRecordSet<?>>singleton(rrs).iterator() : Collections
          .<ResourceRecordSet<?>>emptyList().iterator();"
20090,create,"      public AllProfileResourceRecordSetApi create(String id) {
        Set<QualifiedResourceRecordSetApi>
            qualifiedApis =
            new LinkedHashSet<QualifiedResourceRecordSetApi>();
        for (Factory entry : factories) {"
20091,provideResourceRecordSetApiFactory,"  AllProfileResourceRecordSetApi.Factory provideResourceRecordSetApiFactory(
      final ResourceRecordSetApi.Factory factory, final Set<Factory> factories) {
    return new AllProfileResourceRecordSetApi.Factory() {"
20092,deleteWhenAbsent,"  public void deleteWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(deleting);
    server.enqueue(objectNotFound);

    ZoneApi api = server.connect().api().zones();
    api.delete(""1234"");

    server.assertAuthRequest();
    server.assertRequest().hasMethod(""DELETE"").hasPath(""/v1.0/123123/domains/1234"");"
20093,deleteWhenPresent,"  public void deleteWhenPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(deleting);
    server.enqueue(deleted);

    ZoneApi api = server.connect().api().zones();
    api.delete(""1234"");

    server.assertAuthRequest();
    server.assertRequest().hasMethod(""DELETE"").hasPath(""/v1.0/123123/domains/1234"");"
20094,putWhenPresent_withId,"  public void putWhenPresent_withId() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(updating);
    server.enqueue(updated);

    ZoneApi api = server.connect().api().zones();

    Zone zone = Zone.create(""1234"", ""denominator.io"", 3601, ""nil@denominator.io"");
    assertThat(api.put(zone)).isEqualTo(""1234"");

    server.assertAuthRequest();"
20096,putWhenAbsent,"  public void putWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(creating);
    server.enqueue(created);

    ZoneApi api = server.connect().api().zones();

    Zone zone = Zone.create(null, ""denominator.io"", 3601, ""nil@denominator.io"");
    assertThat(api.put(zone)).isEqualTo(""1234"");

    server.assertAuthRequest();"
20097,iteratorByNameWhenAbsent,"  public void iteratorByNameWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(""{\""domains\"":[],\""totalEntries\"":0}""));

    ZoneApi api = server.connect().api().zones();
    assertThat(api.iterateByName(""denominator.io"")).isEmpty();

    server.assertAuthRequest();"
20098,iteratorByNameWhenPresent,"  public void iteratorByNameWhenPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(domainsResponse));
    server.enqueue(new MockResponse().setBody(soaResponse));

    ZoneApi api = server.connect().api().zones();

    assertThat(api.iterateByName(""denominator.io"")).containsExactly(
        Zone.create(""1234"", ""denominator.io"", 3601, ""nil@denominator.io"")
    );"
20099,iteratorWhenAbsent,"  public void iteratorWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(""{ \""domains\"": [] }""));

    ZoneApi api = server.connect().api().zones();
    assertThat(api.iterator()).isEmpty();

    server.assertAuthRequest();"
20100,iteratorWhenPresent,"  public void iteratorWhenPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(domainsResponse));
    server.enqueue(new MockResponse().setBody(soaResponse));

    ZoneApi api = server.connect().api().zones();

    assertThat(api.iterator()).containsExactly(
        Zone.create(""1234"", ""denominator.io"", 3601, ""nil@denominator.io"")
    );"
20101,delete,"  public void delete(String id) {
    try {
      awaitComplete(api, api.deleteDomain(id));"
20102,updateZone,"  private String updateZone(String id, Zone zone) {
    awaitComplete(api, api.updateDomain(id, zone.email(), zone.ttl()));
    return id;
  }"
20103,put,"  public String put(Zone zone) {
    if (zone.id() != null) {
      return updateZone(zone.id(), zone);
    }"
20104,remove,"    public void remove() {
      throw new UnsupportedOperationException();
    }"
20105,next,"    public Zone next() {
      return zipWithSOA(list.get(i++));
    }"
20106,hasNext,"    public boolean hasNext() {
      while (i == length && list.next != null) {
        list = api.domains(list.next);
        length = list.size();"
20107,zipWithSOA,"  private Zone zipWithSOA(Zone next) {
    Record soa = api.recordsByNameAndType(Integer.parseInt(next.id()), next.name(), ""SOA"").get(0);
    return Zone.create(next.id(), next.name(), soa.ttl, next.email());
  }"
20108,iterateByName,"  public Iterator<Zone> iterateByName(String name) {
    ListWithNext<Zone> zones = api.domainsByName(name);
    if (zones.isEmpty()) {
      return singletonIterator(null);
    }"
20109,iterator,"  public Iterator<Zone> iterator() {
    return new ZipWithDomain(api.domains());
  }"
20113,type,"  public Class<CloudDNS> type() {
    return CloudDNS.class;
  }"
20114,getByNameAndTypeWhenAbsent,"  public void getByNameAndTypeWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setResponseCode(404).setBody(
        ""{\""message\"":\""Not Found\"",\""code\"":404,\""details\"":\""\""}""));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");
    assertNull(api.getByNameAndType(""www.denominator.io"", ""A""));
"
20115,getByNameAndType_SOA,"  public void getByNameAndType_SOA() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(soaResponse));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");

    assertThat(api.getByNameAndType(""denominator.io"", ""SOA""))
        .hasName(""denominator.io"")"
20116,getByNameAndTypeWhenPresent,"  public void getByNameAndTypeWhenPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(recordsByNameAndType));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");

    assertThat(api.getByNameAndType(""www.denominator.io"", ""A""))
        .hasName(""www.denominator.io"")"
20117,iterateByNameWhenAbsent,"  public void iterateByNameWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setResponseCode(404).setBody(
        ""{\""message\"":\""Not Found\"",\""code\"":404,\""details\"":\""\""}""));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");
    assertFalse(api.iterateByName(""www.denominator.io"").hasNext());
"
20118,iterateByNameWhenPresent,"  public void iterateByNameWhenPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(recordsByName));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");
    Iterator<ResourceRecordSet<?>> records = api.iterateByName(""www.denominator.io"");

    while (records.hasNext()) {
      assertThat(records.next())"
20120,listWhenAbsent,"  public void listWhenAbsent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setResponseCode(404).setBody(
        ""{\""message\"":\""Not Found\"",\""code\"":404,\""details\"":\""\""}""));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");

    assertFalse(api.iterator().hasNext());"
20121,listWhenPresent,"  public void listWhenPresent() throws Exception {
    server.enqueueAuthResponse();
    server.enqueue(new MockResponse().setBody(records));

    ResourceRecordSetApi api = server.connect().api().basicRecordSetsInZone(domainId + """");
    Iterator<ResourceRecordSet<?>> records = api.iterator();

    while (records.hasNext()) {
      assertThat(records.next())"
20122,create,"    public ResourceRecordSetApi create(String id) {
      return new CloudDNSResourceRecordSetApi(api, Integer.parseInt(id));
    }"
20123,remove,"      public void remove() {
        throw new UnsupportedOperationException();
      }"
20124,next,"      public Record next() {
        return current.next();
      }"
20125,hasNext,"      public boolean hasNext() {
        while (!current.hasNext() && next != null) {
          ListWithNext<Record> nextPage = emptyOn404(recordPager, next);
          current = nextPage.iterator();"
20126,lazyIterateRecords,"  Iterator<Record> lazyIterateRecords(final Pager<Record> recordPager) {
    final ListWithNext<Record> first = emptyOn404(recordPager, null);

    if (first.next == null) {
      return first.iterator();"
20127,deleteByNameAndType,"  public void deleteByNameAndType(String name, String type) {
    checkNotNull(name, ""name"");
    checkNotNull(type, ""type"");

    for (Record record : api.recordsByNameAndType(domainId, name, type)) {"
20129,put,"  public void put(ResourceRecordSet<?> rrset) {
    checkNotNull(rrset, ""rrset was null"");
    checkArgument(!rrset.records().isEmpty(), ""rrset was empty %s"", rrset);

    List<Map<String, Object>>
        recordsLeftToCreate =
        new ArrayList<Map<String, Object>>(rrset.records());
"
20130,apply,"      public ListWithNext<Record> apply(URI nullOrNext) {
        return nullOrNext == null ? api.recordsByNameAndType(domainId, name, type)
                                  : api.records(nullOrNext);"
20131,getByNameAndType,"  public ResourceRecordSet<?> getByNameAndType(final String name, final String type) {
    checkNotNull(name, ""name was null"");
    checkNotNull(type, ""type was null"");
    Pager<Record> recordPager = new Pager<Record>() {
      public ListWithNext<Record> apply(URI nullOrNext) {
        return nullOrNext == null ? api.recordsByNameAndType(domainId, name, type)"
20132,iterateByName,"  public Iterator<ResourceRecordSet<?>> iterateByName(String name) {
    checkNotNull(name, ""name was null"");
    return filter(iterator(), nameEqualTo(name));
  }"
20133,apply,"      public ListWithNext<Record> apply(URI nullOrNext) {
        return nullOrNext == null ? api.records(domainId) : api.records(nullOrNext);
      }"
20134,iterator,"  public Iterator<ResourceRecordSet<?>> iterator() {
    Pager<Record> recordPager = new Pager<Record>() {
      public ListWithNext<Record> apply(URI nullOrNext) {
        return nullOrNext == null ? api.records(domainId) : api.records(nullOrNext);"
20135,testViaDagger,"  public void testViaDagger() {
    DNSApiManager manager = ObjectGraph
        .create(provide(new CloudDNSProvider()), new CloudDNSProvider.Module(),
                credentials(""username"", ""apiKey""))"
20136,testCredentialsRequired,"  public void testCredentialsRequired() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(
        ""no credentials supplied. clouddns requires one of the following forms: when type is password: username,password; apiKey: username,apiKey"");
"
20138,testCloudDNSRegistered,"  public void testCloudDNSRegistered() {
    assertThat(list()).contains(PROVIDER);
  }"
20139,testCloudDNSMetadata,"  public void testCloudDNSMetadata() {
    assertThat(PROVIDER.name()).isEqualTo(""clouddns"");
    assertThat(PROVIDER.supportsDuplicateZoneNames()).isFalse();
    assertThat(PROVIDER.credentialTypeToParameterNames())
        .containsEntry(""password"", Arrays.asList(""username"", ""password""))"
20140,get,"    public Credentials get() {
      return dynamicCredentials.get();
    }"
20142,url,"      public String url() {
        return url.get();
      }"
20144,feign,"    Feign feign(Logger logger, Logger.Level logLevel) {
      return Feign.builder()
          .logger(logger)"
20147,cloudIdentity,"    CloudIdentity cloudIdentity(Feign feign) {
      return feign.newInstance(EmptyTarget.create(CloudIdentity.class, ""cloudidentity""));
    }"
20148,cloudDNS,"    CloudDNS cloudDNS(Feign feign, CloudDNSTarget target) {
      return feign.newInstance(target);
    }"
20149,provideResourceRecordSetApiFactory,"    ResourceRecordSetApi.Factory provideResourceRecordSetApiFactory(
        CloudDNSResourceRecordSetApi.Factory api) {
      return api;"
20150,provideZoneApi,"    ZoneApi provideZoneApi(CloudDNSZoneApi api) {
      return api;
    }"
20152,credentialTypeToParameterNames,"  public Map<String, Collection<String>> credentialTypeToParameterNames() {
    Map<String, Collection<String>> options = new LinkedHashMap<String, Collection<String>>();
    options.put(""password"", Arrays.asList(""username"", ""password""));
    options.put(""apiKey"", Arrays.asList(""username"", ""apiKey""));
    return options;
  }"
20153,profileToRecordTypes,"  public Map<String, Collection<String>> profileToRecordTypes() {
    Map<String, Collection<String>>
        profileToRecordTypes =
        new LinkedHashMap<String, Collection<String>>();
    profileToRecordTypes.put(""roundRobin"", basicRecordTypes());"
20154,basicRecordTypes,"  public Set<String> basicRecordTypes() {
    Set<String> types = new LinkedHashSet<String>();
    types.addAll(Arrays.asList(""A"", ""AAAA"", ""CNAME"", ""MX"", ""NS"", ""TXT""));
    return types;
  }"
20156,transformsTXTRecordSet,"  public void transformsTXTRecordSet() {
    Record input = new Record();
    input.name = ""denominator.io"";
    input.type = ""TXT"";
    input.ttl = 3600;
    input.data(""Hello DNS"");

    assertThat(CloudDNSFunctions.toRDataMap(input))"
20157,transformsNSRecordSet,"  public void transformsNSRecordSet() {
    Record input = new Record();
    input.name = ""denominator.io"";
    input.type = ""NS"";
    input.ttl = 3600;
    input.data(""dns1.stabletransit.com"");

    assertThat(CloudDNSFunctions.toRDataMap(input))"
20158,toRDataMap,"  static Map<String, Object> toRDataMap(Record record) {
    if (""MX"".equals(record.type)) {
      return MXData.create(record.priority, record.data());"
20159,awaitComplete,"  static String awaitComplete(CloudDNS api, Job job) {
    RetryableException retryableException = new RetryableException(
        format(""Job %s did not complete. Check your logs."", job.id), null);
    Retryer retryer = new Retryer.Default(500, 1000, 30);
"
20160,provideLogger,"    Logger provideLogger() {
      return new Logger.JavaLogger().appendToFile(""build/http-wire.log"");
    }"
20161,provideLevel,"    Logger.Level provideLevel() {
      return Logger.Level.FULL;
    }"
20162,create,"  static DNSApiManager create(String username, String apiKey) {
    CloudDNSProvider provider = new CloudDNSProvider(emptyToNull(getProperty(""clouddns.url"")));
    return Denominator.create(provider, credentials(username, apiKey), new Overrides());
  }"
20164,toString,"  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(""Provider ["");
    builder.append(""name="").append(name());
    builder.append(""url="").append(url());
    builder.append(""]"");
    return builder.toString();
  }"
20165,hashCode,"  public int hashCode() {
    int result = 17;
    result = 31 * result + name().hashCode();
    result = 31 * result + url().hashCode();
    return result;
  }"
20166,equals,"  public boolean equals(Object obj) {
    if (obj instanceof Provider) {
      Provider other = (Provider) obj;
      return name().equals(other.name())"
20167,credentialTypeToParameterNames,"  public Map<String, Collection<String>> credentialTypeToParameterNames() {
    return new LinkedHashMap<String, Collection<String>>();
  }"
20168,supportsDuplicateZoneNames,"  public boolean supportsDuplicateZoneNames() {
    return false;
  }"
20169,profileToRecordTypes,"  public Map<String, Collection<String>> profileToRecordTypes() {
    Map<String, Collection<String>> result = new LinkedHashMap<String, Collection<String>>();
    List<String> roundRobin = asList(""A"", ""AAAA"", ""MX"", ""NS"", ""PTR"", ""SPF"", ""SRV"", ""SSHFP"", ""TXT"");
    result.put(""roundRobin"", roundRobin);
    return result;
  }"
20170,basicRecordTypes,"  public Set<String> basicRecordTypes() {
    Set<String> result = new LinkedHashSet<String>();
    result.addAll(asList(""A"", ""AAAA"", ""CERT"", ""CNAME"", ""MX"", ""NAPTR"", ""NS"", ""PTR"", ""SOA"", ""SPF"",
                         ""SRV"", ""SSHFP"", ""TXT""));
    return result;"
20171,url,"  public String url() {
    return ""mem:"" + name();
  }"
20172,name,"  public String name() {
    return getClass().getSimpleName().toLowerCase().replace(""provider"", """");
  }"
20173,checkLowerCamel,"  private void checkLowerCamel(Map<String, Collection<String>> credentialTypeToParameterNames) {
    for (String credentialType : credentialTypeToParameterNames.keySet()) {
      for (String credentialParam : credentialTypeToParameterNames.get(credentialType)) {"
20174,create,"    AllProfileResourceRecordSetApi create(String id);
  }"
20176,destroyItem,"    public void destroyItem(ViewGroup container, int position, Object object) {
    }"
20177,instantiateItem,"    public Object instantiateItem(ViewGroup container, int position) {
        View view = viewList.get(position % tabNum);
        if(container.equals(view.getParent())) {
            container.removeView(view);
        }
        container.addView(view);"
20178,isViewFromObject,"    public boolean isViewFromObject(View view, Object object) {
        return view == object;
    }"
20179,getCount,"    public int getCount() {
        return itemNum;
    }"
20180,dip2px,"    public static int dip2px(Context context, float dpValue) {
        final float scale = context.getResources().getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);
    }"
20181,startScroll,"        public void startScroll(int startX, int startY, int dx, int dy) {
            super.startScroll(startX, startY, dx, dy, this.duration);
        }"
20182,startScroll,"        public void startScroll(int startX, int startY, int dx, int dy, int duration) {
            super.startScroll(startX, startY, dx, dy, this.duration);
        }"
20184,animateTitlesAndCursor,"    public void animateTitlesAndCursor(int position, float positionOffSet) {
        if (tabNum <= 1) {
            return;
        }
        int cursorLeft = 0;
        int cursorRight = 0;

        for (int i = 0; i < tabNum; i++) {
            if ((position % tabNum) != i) {
                continue;"
20185,onPageScrollStateChanged,"            public void onPageScrollStateChanged(int state) {}
        });"
20186,onPageSelected,"            public void onPageSelected(int position) {}
"
20188,onTouch,"            public boolean onTouch(View view, MotionEvent motionEvent) {
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        stopAutoPlay();"
20189,onPreDraw,"            public boolean onPreDraw() {
                DecentBanner.this.getViewTreeObserver().removeOnPreDrawListener(this);
                initTabsAndCursorLayout();
                return true;
            }"
20191,init,"    private void init(List<View> views, final List<String> titleStrings, int interval, int animationDuration, int logoResourceId) {
        Bitmap logoBitmap;
        if (logoResourceId > 0) {
            logoBitmap = BitmapFactory.decodeResource(getResources(), logoResourceId);
        } else {"
20192,isGradientEnabled,"    public boolean isGradientEnabled() {
        return enableGradient;
    }"
20193,setGradientEnabled,"    public void setGradientEnabled(boolean enabled) {
        this.enableGradient = enabled;
        if (gradientCover != null) {
            if (enabled) {"
20194,start,"    public void start(List<View> views, List<String> titles, int interval, int animationDuration, Bitmap logo) {
        init(views, titles, interval, animationDuration, logo);
    }"
20195,start,"    public void start(List<View> views, List<String> titles, int interval, int animationDuration, int logoResourceId) {
        init(views, titles, interval, animationDuration, logoResourceId);
    }"
20196,start,"    public void start(List<View> views, List<String> titles, int interval, int animationDuration) {
        init(views, titles, interval, animationDuration, 0);
    }"
20197,stopAutoPlay,"    public void stopAutoPlay() {
        handler.removeMessages(MESSAGE_SCROLL);
    }"
20198,startAutoPlay,"    public void startAutoPlay() {
        stopAutoPlay();
        handler.sendEmptyMessageDelayed(MESSAGE_SCROLL, homeColumnScrollInterval * 1000);
    }"
20199,handleMessage,"        public void handleMessage(Message msg) {
            if (msg.what == MESSAGE_SCROLL) {
                if(viewPager != null) {"
20200,onNothingSelected,"    public void onNothingSelected(AdapterView<?> parent) {
        mTheme = DevToolFragment.DevToolTheme.DARK;
    }"
20201,onItemSelected,"    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
        mTheme = position == 0 ? DevToolFragment.DevToolTheme.DARK : DevToolFragment.DevToolTheme.LIGHT;
    }"
20203,doSomeStuff,"    private DebugFunction doSomeStuff() {
        return new DebugFunction() {
            @Override"
20204,call,"            public String call() throws Exception {
                return ""This function has a title"";
            }"
20206,onClick,"            public void onClick(View v) {

                final DevTool.Builder builder = new DevTool.Builder(ExampleActivity.this);

                if (mSeekbar != null) {"
20209,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                functionNumber.setText(Integer.toString(progress));
            }"
20212,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        viewPager = (ViewPager) findViewById(R.id.view_pager);
        viewPager.setAdapter(new Adapter(getSupportFragmentManager()));
    }"
20213,setDuration,"    public void setDuration(int duration) {
        this.duration = duration;
    }"
20214,getDuration,"    public int getDuration() {
        return duration;
    }"
20215,setExternalColor,"    public void setExternalColor(int externalColor) {
        this.externalColor = externalColor;
        externalCirclePainter.setColor(externalColor);
    }"
20216,getExternalColor,"    public int getExternalColor() {
        return externalColor;
    }"
20217,setInternalBaseColor,"    public void setInternalBaseColor(int internalBaseColor) {
        this.internalBaseColor = internalBaseColor;
        internalCirclePainter.setColor(progressColor);
    }"
20218,getInternalBaseColor,"    public int getInternalBaseColor() {
        return internalBaseColor;
    }"
20219,setProgressColor,"    public void setProgressColor(int progressColor) {
        this.progressColor = progressColor;
        progressPainter.setColor(progressColor);
    }"
20220,getProgressColor,"    public int getProgressColor() {
        return progressColor;
    }"
20221,reset,"    public void reset() {
        last = min;
    }"
20222,setIcon,"    public void setIcon(int drawable) {
        if (iconPainter != null) {
            iconPainter.setImage(BitmapFactory.decodeResource(getContext().getResources(),"
20223,onValueChange,"        void onValueChange(float value);
    }"
20224,onAnimationUpdate,"        public void onAnimationUpdate(ValueAnimator valueAnimator) {
            Float value = (Float) valueAnimator.getAnimatedValue();
            progressPainter.setValue(value);

            if (valueChangeListener != null) {
                valueChangeListener.onValueChange(value);"
20225,setMax,"    public void setMax(float max) {
        this.max = max;
        progressPainter.setMax(max);
    }"
20226,getMax,"    public float getMax() {
        return max;
    }"
20227,setMin,"    public void setMin(float min) {
        this.min = min;
        progressPainter.setMin(min);
    }"
20228,getMin,"    public float getMin() {
        return min;
    }"
20229,setInterpolator,"    public void setInterpolator(Interpolator interpolator) {
        this.interpolator = interpolator;

        if (valueAnimator != null) {"
20230,setOnValueChangeListener,"    public void setOnValueChangeListener(OnValueChangeListener valueChangeListener) {
        this.valueChangeListener = valueChangeListener;
    }"
20231,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec + heightNormalittation);
    }"
20232,animateValue,"    private void animateValue() {
        if (valueAnimator != null) {
            valueAnimator.setFloatValues(last, value);"
20233,setValue,"    public void setValue(float value) {
        this.value = value;
        if (value <= max || value >= min) {
            animateValue();"
20234,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        externalCirclePainter.draw(canvas);
        internalCirclePainter.draw(canvas);
        progressPainter.draw(canvas);
        iconPainter.draw(canvas);
        invalidate();
    }"
20235,initValueAnimator,"    private void initValueAnimator() {
        valueAnimator = new ValueAnimator();
        valueAnimator.setInterpolator(interpolator);
        valueAnimator.addUpdateListener(new ValueAnimatorListenerImp());
    }"
20236,initPainters,"    private void initPainters() {
        progressPainter = new ProgressPainterImp(progressColor, min, max, progressStrokeWidth);
        externalCirclePainter = new ExternalCirclePainterImp(externalColor);
        internalCirclePainter = new InternalCirclePainterImp(internalBaseColor);
        iconPainter = new IconPainter(image);
    }"
20237,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        progressPainter.onSizeChanged(h, w);
        externalCirclePainter.onSizeChanged(h, w);
        internalCirclePainter.onSizeChanged(h, w);
        iconPainter.onSizeChanged(h, w);
        animateValue();
    }"
20239,init,"    private void init(Context context, AttributeSet attributeSet) {
        setWillNotDraw(false);
        TypedArray attributes = context.obtainStyledAttributes(attributeSet,
                R.styleable.DashedCircularProgress);
        initAttributes(attributes);
        initPainters();
        initValueAnimator();"
20240,onLayout,"    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
        super.onLayout(changed, left, top, right, bottom);
        final int count = getChildCount();
        int maxWidth = getWidth() / 2;
        int maxHeight = getHeight() / 2;

        for (int i = 0; i < count; i++) {"
20241,getCount,"    public int getCount() {
        return COUNT;
    }"
20242,getItem,"    public Fragment getItem(int position) {
        switch (position) {
            case 0:
                return Simple.getInstance();"
20243,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_test);
"
20244,floatFormat,"    public static String floatFormat(float value) {
        BigDecimal bd = new BigDecimal(value);
        bd = bd.setScale(1, BigDecimal.ROUND_HALF_DOWN);
        return bd.toString();
    }"
20245,spToPx,"    public static int spToPx(int sp, Context context) {
        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, sp, context.getResources().getDisplayMetrics());
    }"
20246,dpToPx,"    public static int dpToPx(int dp, Context context) {
        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());
    }"
20247,onClick,"            public void onClick(View v) {
                if (dashboardView.getVisibility() == View.VISIBLE) {
                    dashboardView.setVisibility(View.GONE);"
20248,onClick,"            public void onClick(View v) {
                Intent i = new Intent(MainActivity.this, TestActivity.class);
                startActivity(i);
            }"
20251,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                dashboardView.setPercent(progress);
            }"
20255,getTikeStrColor,"    public int getTikeStrColor() {
        return tikeStrColor;
    }"
20256,getTikeStrSize,"    public float getTikeStrSize() {
        return tikeStrSize;
    }"
20257,getTikeStrArray,"    public CharSequence[] getTikeStrArray() {
        return tikeStrArray;
    }"
20259,getUnit,"    public String getUnit() {
        return unit;
    }"
20260,getProgressStrokeWidth,"    public int getProgressStrokeWidth() {
        return progressStrokeWidth;
    }"
20261,getmText,"    public String getmText() {
        return mText;
    }"
20262,getmTextSize,"    public int getmTextSize() {
        return mTextSize;
    }"
20263,getBackground,"    public int getBackground() {
        return background;
    }"
20264,getStartColor,"    public int getStartColor() {
        return startColor;
    }"
20265,getEndColor,"    public int getEndColor() {
        return endColor;
    }"
20266,getMaxNumber,"    public float getMaxNumber() {
        return maxNum;
    }"
20267,getStartNumber,"    public float getStartNumber() {
        return startNum;
    }"
20268,getPadding,"    public int getPadding() {
        return padding;
    }"
20270,getCircleColor,"    public int getCircleColor() {
        return circleColor;
    }"
20271,setMaxNum,"    public void setMaxNum(float maxNum) {
        this.maxNum = maxNum;
    }"
20272,setStartNum,"    public void setStartNum(float startNum) {
        this.startNum = startNum;
    }"
20273,setEndColor,"    public void setEndColor(int endColor) {
        this.endColor = endColor;
        initShader();
    }"
20274,setStartColor,"    public void setStartColor(int startColor) {
        this.startColor = startColor;
        initShader();
    }"
20275,setInterpolator,"    public void setInterpolator(TimeInterpolator interpolator) {
        this.interpolator = interpolator;
    }"
20276,setUnit,"    public void setUnit(String unit) {
        this.unit = unit;
    }"
20277,setProgressStroke,"    public void setProgressStroke(int dp) {

        progressStrokeWidth = PxUtils.dpToPx(dp, mContext);
        paintProgress.setStrokeWidth(progressStrokeWidth);
        paintProgressBackground.setStrokeWidth(progressStrokeWidth);
        invalidate();"
20278,setTextColor,"    public void setTextColor(int mTextColor) {
        this.mTextColor = mTextColor;
    }"
20279,setTextSize,"    public void setTextSize(int size) {
        mTextSize = size;
        invalidate();
    }"
20280,setText,"    public void setText(String text) {
        mText = text;
        invalidate();
    }"
20282,onAnimationUpdate,"            public void onAnimationUpdate(ValueAnimator animation) {
                DashboardView.this.percent = (float) animation.getAnimatedValue();
                invalidate();
"
20283,setAnimator,"    private void setAnimator(final float percent) {
        if (valueAnimator != null && valueAnimator.isRunning()) {
            valueAnimator.cancel();
        }

        animatorDuration = (long) Math.abs(percent - oldPercent) * 20;

        valueAnimator = ValueAnimator.ofFloat(oldPercent, percent).setDuration(animatorDuration);
        valueAnimator.setInterpolator(interpolator);"
20284,setPercent,"    public void setPercent(int percent) {
        setAnimator(percent);
    }"
20285,onVisibilityChanged,"    protected void onVisibilityChanged(View changedView, int visibility) {
        super.onVisibilityChanged(changedView, visibility);
        percent = oldPercent;
    }"
20287,updateOval,"    private void updateOval() {
        rectF2 = new RectF((-mWidth / 2) + OFFSET + getPaddingLeft(), getPaddingTop() - (mHight / 2) + OFFSET,
                (mWidth / 2) - getPaddingRight() - OFFSET,"
20289,getTextViewLength,"    private float getTextViewLength(Paint paint, String text) {
        if (TextUtils.isEmpty(text)) return 0;
        float textLength = paint.measureText(text);
        return textLength;
    }"
20297,startMeasure,"    private int startMeasure(int msSpec) {
        int result = 0;
        int mode = MeasureSpec.getMode(msSpec);
        int size = MeasureSpec.getSize(msSpec);
        if (mode == MeasureSpec.EXACTLY) {
            result = size;
        } else {"
20298,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        int realWidth = startMeasure(widthMeasureSpec);
        int realHeight = startMeasure(heightMeasureSpec);

        setMeasuredDimension(realWidth, realHeight);"
20299,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        mWidth = getWidth();
        mHight = getHeight();
        initShader();
    }"
20303,init,"    private void init(Context context) {
        mContext = context;
        initAttr();
        initPaint();
"
20304,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    Object factory;
    if (isBuilder) {
      factory = ComponentBuilderInvocationHandler.forSubcomponentBuilder(cls, scope);
    } else {"
20305,forFactory,"  static UnlinkedBinding forFactory(Class<?> factoryClass) {
    return new UnlinkedSubcomponentBinding(false, factoryClass);
  }"
20306,forBuilder,"  static UnlinkedBinding forBuilder(Class<?> builderClass) {
    return new UnlinkedSubcomponentBinding(true, builderClass);
  }"
20307,toString,"  public String toString() {
    return ""Set"" + elementBindings;
  }"
20308,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    List<LinkedBinding<Object>> linkedElementBindings = new ArrayList<>(elementBindings.size());
    for (Binding elementBinding : elementBindings) {
      @SuppressWarnings(""unchecked"")
      LinkedBinding<Object> binding = (LinkedBinding<Object>) elementBinding.link(linker, scope);
      linkedElementBindings.add(binding);
    }"
20309,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    return new LinkedScopedBinding<>(unlinkedBinding.link(linker, scope));
  }"
20312,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    MembersInjector<?> membersInjector = ReflectiveMembersInjector.create(targetClass, scope);
    return new LinkedInstanceBinding<>(membersInjector);
  }"
20313,toString,"  public String toString() {
    return ""Map"" + mapOfProviderKey;
  }"
20315,toString,"  public String toString() {
    return ""Map"" + entryBindings;
  }"
20317,getTypeArgumentsStringOrEmpty,"  private String getTypeArgumentsStringOrEmpty() {
    if (concreteTypeArguments == null) {
      return """";
    }"
20320,matchingParameterizedType,"  private Type[] matchingParameterizedType(Type[] typeArguments) {
    Type[] matchedTypeArguments = new Type[typeArguments.length];
    for (int i = 0; i < typeArguments.length; i++) {
      if (isTypeVariable(typeArguments[i])) {
        matchedTypeArguments[i] = matchTypeToConcreteType((TypeVariable<?>) typeArguments[i]);"
20321,findKeyForParameterizedType,"  private TypeUtil.ParameterizedTypeImpl findKeyForParameterizedType(
      ParameterizedType parameterType) {
    Type[] matchingTypes = matchingParameterizedType(parameterType.getActualTypeArguments());
    return new TypeUtil.ParameterizedTypeImpl(null, parameterType.getRawType(), matchingTypes);"
20322,hasParameterizedTypeVariable,"  private static boolean hasParameterizedTypeVariable(Type parameterType) {
    if (!(parameterType instanceof ParameterizedType)) {
      return false;
    }
    Type[] actualTypeArguments = ((ParameterizedType) parameterType).getActualTypeArguments();
    for (Type type : actualTypeArguments) {"
20323,isTypeVariable,"  private static boolean isTypeVariable(Type parameterType) {
    return parameterType instanceof TypeVariable;
  }"
20324,getTypeKeyForParameter,"  private Type getTypeKeyForParameter(Type parameterType) {
    if (isTypeVariable(parameterType)) {
      return matchTypeToConcreteType((TypeVariable<?>) parameterType);
    } else if (hasParameterizedTypeVariable(parameterType)) {"
20325,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    Type[] parameterTypes = constructor.getGenericParameterTypes();
    Annotation[][] parameterAnnotations = constructor.getParameterAnnotations();

    LinkedBinding<?>[] bindings = new LinkedBinding<?>[parameterTypes.length];
    for (int i = 0; i < parameterTypes.length; i++) {
      Type parameterType = parameterTypes[i];
      Key key ="
20327,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    Type[] parameterTypes = method.getGenericParameterTypes();
    if (parameterTypes.length != 0) {
      throw new IllegalArgumentException(
          ""@BindsOptionalOf methods must not have parameters: "" + method);
    }

    Annotation[] methodAnnotations = method.getDeclaredAnnotations();
    Annotation qualifier = findQualifier(methodAnnotations);"
20331,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    Type[] parameterTypes = method.getGenericParameterTypes();
    if (parameterTypes.length != 1) {
      throw new IllegalArgumentException(""@Binds methods must have a single parameter: "" + method);
    }
    Annotation[][] parameterAnnotations = method.getParameterAnnotations();
    Key dependency = Key.of(findQualifier(parameterAnnotations[0]), parameterTypes[0]);"
20332,link,"  public LinkedBinding<?> link(Linker linker, Scope scope) {
    ReflectiveAndroidInjector.Factory<?> factory =
        new ReflectiveAndroidInjector.Factory<>(scope, moduleClasses, instanceClass, annotations);
    return new LinkedInstanceBinding<>(factory);"
20337,toString,"    public String toString() {
      if (lowerBound != null) {
        return ""? super "" + typeToString(lowerBound);"
20339,equals,"    public boolean equals(Object other) {
      return other instanceof WildcardType && Types.equals(this, (WildcardType) other);
    }"
20340,getLowerBounds,"    public Type[] getLowerBounds() {
      return lowerBound != null ? new Type[] {lowerBound} : EMPTY_TYPE_ARRAY;
    }"
20341,getUpperBounds,"    public Type[] getUpperBounds() {
      return new Type[] {upperBound};
    }"
20344,equals,"    public boolean equals(Object o) {
      return o instanceof GenericArrayType && Types.equals(this, (GenericArrayType) o);
    }"
20346,toString,"    public String toString() {
      StringBuilder result = new StringBuilder(30 * (typeArguments.length + 1));
      result.append(typeToString(rawType));

      if (typeArguments.length == 0) {
        return result.toString();
      }
"
20347,hashCode,"    public int hashCode() {
      return Arrays.hashCode(typeArguments) ^ rawType.hashCode() ^ Objects.hashCode(ownerType);
    }"
20348,equals,"    public boolean equals(Object other) {
      return other instanceof ParameterizedType && Types.equals(this, (ParameterizedType) other);
    }"
20349,getOwnerType,"    public @Nullable Type getOwnerType() {
      return ownerType;
    }"
20352,checkNotPrimitive,"  static void checkNotPrimitive(Type type) {
    if ((type instanceof Class<?>) && ((Class<?>) type).isPrimitive()) {
      throw new IllegalArgumentException(""Unexpected primitive "" + type + "". Use the boxed type."");"
20353,typeToString,"  static String typeToString(Type type) {
    return type instanceof Class ? ((Class<?>) type).getName() : type.toString();
  }"
20354,canonicalize,"  static Type canonicalize(Type type) {
    if (type instanceof Class) {
      Class<?> c = (Class<?>) type;"
20360,two,"      static Long two() {
        return 2L;
      }"
20363,one,"    static String one() {
      return ""one"";
    }"
20365,two,"      Long two() {
        return two;
      }"
20375,createNested,"  Nested createNested(Nested.Module2 module);
"
20385,string,"    static String string() {
      return ""foo"";
    }"
20387,get,"  public @Nullable T get() {
    LinkedBinding<T> binding = this.binding;
    if (binding == null) {
      binding = this.binding = (LinkedBinding<T>) scope.getBinding(key);
    }"
20388,get,"  public T get() {
    Object value = this.value;
    if (value == this) {
      synchronized (this) {
        value = this.value;"
20389,value,"    static Object value() {
      return new Object();
    }"
20392,value,"    static Runnable value() {
      return new Runnable() {
        @Override"
20398,get,"  public T get() {
    LinkedBinding<T> linked = linkedRef.get();
    if (linked == null) {
      linked = (LinkedBinding<T>) binding.link(new Linker(scope), scope);
"
20400,addInstance,"    Builder addInstance(Key key, @Nullable Object instance) {
      return addBinding(key, new LinkedInstanceBinding<>(instance));
    }"
20402,createMapBinding,"    Builder createMapBinding(Key key) {
      if (key == null) throw new NullPointerException(""key == null"");
      if (Types.getRawType(key.type()) != Map.class) {
        throw new IllegalArgumentException(""key.type() must be Map"");
      }
"
20405,createSetBinding,"    Builder createSetBinding(Key key) {
      if (key == null) throw new NullPointerException(""key == null"");
      if (Types.getRawType(key.type()) != Set.class) {
        throw new IllegalArgumentException(""key.type() must be Set"");
      }
"
20406,addBinding,"    Builder addBinding(Key key, Binding binding) {
      if (key == null) throw new NullPointerException(""key == null"");
      if (binding == null) throw new NullPointerException(""binding == null"");

      Binding replaced = keyToBinding.put(key, binding);
      if (replaced != null) {
        throw new IllegalStateException("
20407,addJustInTimeLookupFactory,"    Builder addJustInTimeLookupFactory(JustInTimeLookup.Factory jitLookupFactory) {
      if (jitLookupFactory == null) throw new NullPointerException(""jitLookupFactory == null"");
      this.jitLookupFactories.add(jitLookupFactory);
      return this;
    }"
20408,link,"  private LinkedBinding<?> link(Key key, @Nullable Linker linker, UnlinkedBinding binding) {
    if (linker == null) {
      linker = new Linker(this);
    }
    LinkedBinding<?> linkedBinding = linker.link(key, binding);
"
20409,putJitBinding,"  private @Nullable LinkedBinding<?> putJitBinding(
      Key key, @Nullable Linker linker, JustInTimeLookup lookup) {
    Binding jitBinding = lookup.binding;

    Annotation scope = lookup.scope;
    if (scope != null) {
      if (!annotations.contains(scope)) {
        return parent != null ? parent.putJitBinding(key, linker, lookup) : null;"
20410,findExistingBinding,"  private @Nullable LinkedBinding<?> findExistingBinding(Key key, @Nullable Linker linker) {
    Binding binding = bindings.get(key);
    if (binding != null) {
      return binding instanceof LinkedBinding<?>
          ? (LinkedBinding<?>) binding"
20412,getBinding,"  LinkedBinding<?> getBinding(Key key) {
    LinkedBinding<?> binding = findBinding(key, null);
    if (binding != null) {
      return binding;
    }"
20413,toString,"  public String toString() {
    return ""Scope"" + annotations;
  }"
20416,runnable,"    static Runnable runnable() {
      return new Runnable() {
        @Override"
20422,ensureNotAbstract,"  private static void ensureNotAbstract(Class<?> moduleClass) {
    if (Modifier.isAbstract(moduleClass.getModifiers())) {
      throw new IllegalStateException("
20423,ensureNotPrivate,"  private static void ensureNotPrivate(Method method) {
    if (Modifier.isPrivate(method.getModifiers())) {
      throw new IllegalArgumentException(""Provides methods may not be private: "" + method);"
20426,addSetElementsBinding,"  private static void addSetElementsBinding(
      Scope.Builder scopeBuilder, Key setKey, Binding elementsBinding) {
    if (Types.getRawType(setKey.type()) != Set.class) {
      throw new IllegalArgumentException(
          ""@BindsIntoSet must return Set. Found "" + setKey.type() + ""."");"
20427,addSetBinding,"  private static void addSetBinding(
      Scope.Builder scopeBuilder, Key elementKey, Binding elementBinding) {
    Key key =
        Key.of("
20428,addBinding,"  private static void addBinding(
      Scope.Builder scopeBuilder, Key key, Binding binding, Annotation[] annotations) {
    Annotation scope = findScope(annotations);
    if (scope != null) {
      if (!scopeBuilder.annotations.contains(scope)) {"
20429,parse,"  static void parse(Class<?> moduleClass, @Nullable Object instance, Scope.Builder scopeBuilder) {
    for (Class<?> target : Reflection.getDistinctTypeHierarchy(moduleClass)) {
      for (Method method : target.getDeclaredMethods()) {"
20431,injectMembers,"  public void injectMembers(T instance) {
    for (ClassInjector<T> classInjector : classInjectors) {
      classInjector.injectMembers(instance);"
20432,create,"  static <T> MembersInjector<T> create(Class<T> cls, Scope scope) {
    Deque<ClassInjector<T>> classInjectors = new ArrayDeque<>();
    Class<?> target = cls;
    while (target != Object.class && target != null) {
      Map<Field, LinkedBinding<?>> fieldBindings = new LinkedHashMap<>();
      for (Field field : target.getDeclaredFields()) {"
20433,parse,"  static void parse(Class<?> cls, Object instance, Scope.Builder scopeBuilder) {
    Set<Key> alreadySeen = new LinkedHashSet<>();
    for (Class<?> target : Reflection.getDistinctTypeHierarchy(cls)) {
      for (Method method : target.getDeclaredMethods()) {"
20434,create,"    public AndroidInjector<T> create(T instance) {
      Scope scope =
          ComponentScopeBuilder.create(moduleClasses, new Class<?>[0], annotations, parent)
              .get()
              .addInstance(Key.of(null, instanceClass), instance)"
20435,inject,"  public void inject(T instance) {
    membersInjector.injectMembers(instance);
  }"
20436,one,"    static String one() {
      return ""one"" + oneCount.getAndIncrement();
    }"
20440,provideInteger,"    static Integer provideInteger() {
      return 1;
    }"
20441,provideString,"    static String provideString() {
      return ""foo"";
    }"
20445,intToLong,"    static Long intToLong(Integer value) {
      return Long.valueOf(value);
    }"
20446,stringToInteger,"    static Integer stringToInteger(String value) {
      return Integer.parseInt(value);
    }"
20447,longToString,"    static String longToString(Long value) {
      return String.valueOf(value);
    }"
20449,provideCharacter,"    static Character provideCharacter() {
      return '\u221E';
    }"
20450,provideBoolean,"    static Boolean provideBoolean() {
      return true;
    }"
20451,provideDouble,"    static Double provideDouble() {
      return -64.0;
    }"
20452,provideFloat,"    static Float provideFloat() {
      return -32.0f;
    }"
20453,provideLong,"    static Long provideLong() {
      return 64L;
    }"
20454,provideInteger,"    static Integer provideInteger() {
      return 32;
    }"
20455,provideShort,"    static Short provideShort() {
      return 16;
    }"
20456,provideByte,"    static Byte provideByte() {
      return 8;
    }"
20465,provideChar,"    static char provideChar() {
      return '\u221E';
    }"
20466,provideBoolean,"    static boolean provideBoolean() {
      return true;
    }"
20467,provideDouble,"    static double provideDouble() {
      return -64.0;
    }"
20468,provideFloat,"    static float provideFloat() {
      return -32.0f;
    }"
20469,provideLong,"    static long provideLong() {
      return 64L;
    }"
20470,provideInt,"    static int provideInt() {
      return 32;
    }"
20471,provideShort,"    static short provideShort() {
      return 16;
    }"
20472,provideByte,"    static byte provideByte() {
      return 8;
    }"
20483,five,"    static long five() {
      return 5L;
    }"
20488,foo,"    static String foo() {
      return ""foo"";
    }"
20494,foo,"    static String foo() {
      return null;
    }"
20503,create,"    NestedDependencyInterfaceTest create(First dependencies);
  }"
20505,string,"          static String string() {
            return ""foo"";
          }"
20511,create,"    MultipleInterfacesRequestSameDependency create(Aggregate first);
  }"
20514,two,"    static long two() {
      return 2L;
    }"
20515,one,"    static long one() {
      return 1L;
    }"
20520,one,"    static Set<Long> one() {
      return singleton(1L);
    }"
20522,two,"    static String two() {
      return ""two"";
    }"
20523,one,"    static Set<String> one() {
      return singleton(""one"");
    }"
20528,two,"    static String two() {
      return ""two"" + twoCount.getAndIncrement();
    }"
20534,two,"    static String two() {
      return twoValue.get();
    }"
20535,one,"    static String one() {
      return oneValue.get();
    }"
20548,two,"    static I two() {
      return Impl2.INSTANCE;
    }"
20549,one,"    static I one() {
      return Impl1.INSTANCE;
    }"
20554,string,"    static Long string() {
      return 5L;
    }"
20556,string,"    static String string(StringSubcomponent subcomponent) {
      return subcomponent.value().toString();
    }"
20558,create,"      StringSubcomponent create(@BindsInstance Long value);
    }"
20562,string,"    static String string(StringSubcomponent.Builder builder, StringSubcomponent.Factory factory) {
      return builder.longValue(5L).build().value().toString()
          + "" and """
20566,string,"    static String string(StringSubcomponent.Factory factory) {
      return factory.create(5L).value().toString();
    }"
20571,string,"    static String string(StringSubcomponent.Builder builder) {
      return builder.longValue(5L).build().value().toString();
    }"
20573,helperPrivateStaticMethod,"    private static Integer helperPrivateStaticMethod() {
      return 42;
    }"
20574,helperPrivateMethod,"    private Integer helperPrivateMethod() {
      return helperPrivateStaticMethod();
    }"
20575,integer,"    Integer integer() {
      return helperPrivateMethod();
    }"
20578,integer,"    static Integer integer() {
      return 42;
    }"
20580,string,"    default String string() {
      return ""foo"";
    }"
20582,unrelatedMethodInherited,"    default void unrelatedMethodInherited() {}
  }"
20589,value,"    static Integer value() {
      return 2;
    }"
20590,value,"    static Long value() {
      return 3L;
    }"
20591,add,"    static Number add(Long longValue, Integer integerValue) {
      return longValue + integerValue;
    }"
20592,string,"    static String string(Number value) {
      return value.toString();
    }"
20607,string,"    String string() {
      return ""foo"";
    }"
20609,create,"  public @Nullable JustInTimeLookup create(Key key) {
    Type type = key.type();
    if (key.qualifier() != null || !(type instanceof ParameterizedType)) {
      return null;
    }
    ParameterizedType parameterizedType = ((ParameterizedType) type);
    Type rawType = parameterizedType.getRawType();
    if (rawType != MembersInjector.class) {
      return null;
    }
    Type targetType = parameterizedType.getActualTypeArguments()[0];"
20612,staticMethod,"    static void staticMethod(String one) {}
  }"
20617,privateMethod,"    private void privateMethod(String one) {}
  }"
20625,abstractMethod,"    abstract void abstractMethod(String one);
  }"
20628,targetInjector,"  MembersInjector<Target<? extends String>> targetInjector();
"
20632,targetInjector,"  MembersInjector<Target<String>> targetInjector();
"
20637,foo,"    static @Foo String foo() {
      return ""foo"";
    }"
20638,foo,"    void foo(@Foo String foo) {
      fromMethod = foo;
    }"
20641,toString,"    public String toString() {
      return String.format(""%s, subField=%s"", super.toString(), subField);
    }"
20643,toString,"    public String toString() {
      return String.format(""baseField=%s"", baseField);
    }"
20646,three,"    public void three(Integer three) {
      count++;
    }"
20648,one,"    protected void one(String one) {
      count++;
    }"
20650,three,"    static Integer three() {
      return 3;
    }"
20651,two,"    static Long two() {
      return 2L;
    }"
20653,three,"    public void three(Integer three) {
      this.three = three;
      count++;
    }"
20654,two,"    void two(Long two) {
      this.two = two;
      count++;
    }"
20655,one,"    protected void one(String one) {
      this.one = one;
      count++;
    }"
20660,three,"    void three(Integer three) {
      count++;
    }"
20661,two,"    long two(Long two) {
      count++;
      return two;
    }"
20662,one,"    String one(String one) {
      count++;
      return one;
    }"
20667,multiple,"    void multiple(String one, Long two, Long two2, Integer three) {
      this.one = one;
      this.two = two;
      this.two2 = two;
      this.three = three;
    }"
20673,subtype,"    void subtype(String foo) {
      subtypeCalled = true;
    }"
20674,two,"    void two(String one) {
      baseCalled = true;
    }"
20681,method,"    void method(String foo) {
      fieldBeforeMethod = this.foo != null;
    }"
20686,string,"    static Map<String, String> string() {
      Map<String, String> map = new HashMap<>();
      map.put(""1"", ""one"");
      map.put(""2"", ""two"");
      return map;
    }"
20688,string,"    static Map<String, Provider<String>> string(
        @Named(""one"") Provider<String> one, @Named(""two"") Provider<String> two) {
      Map<String, Provider<String>> map = new HashMap<>();
      map.put(""1"", one);
      map.put(""2"", two);
      return map;"
20689,provideFooString,"    static String provideFooString() {
      return twoValue.get();
    }"
20690,provideBarString,"    static String provideBarString() {
      return oneValue.get();
    }"
20692,string,"    static Map<String, Lazy<String>> string(
        @Named(""one"") Lazy<String> one, @Named(""two"") Lazy<String> two) {
      Map<String, Lazy<String>> map = new HashMap<>();
      map.put(""1"", one);
      map.put(""2"", two);
      return map;"
20696,appendChain,"  private void appendChain(StringBuilder builder) {
    for (Map.Entry<Key, Binding> entry : chain.entrySet()) {
      builder"
20697,toString,"  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(""Linker with "").append(scope).append(""\n"");
    appendChain(builder);
    return builder.toString();
  }"
20698,failure,"  private RuntimeException failure(Key key, String reason, String cause) {
    StringBuilder builder = new StringBuilder(reason).append("" for "").append(key).append('\n');
    appendChain(builder);
    builder.append("" * Requested: "").append(key).append(""\n     which "").append(cause).append('.');
    throw new IllegalStateException(builder.toString());
  }"
20699,link,"  LinkedBinding<?> link(Key key, UnlinkedBinding unlinkedBinding) {
    if (chain.containsKey(key)) {
      throw failure(key, ""Dependency cycle"", ""forms a cycle"");
    }
    chain.put(key, unlinkedBinding);
    LinkedBinding<?> linkedBinding = unlinkedBinding.link(this, scope);
    chain.remove(key);"
20700,find,"  LinkedBinding<?> find(Key key) {
    return scope.findBinding(key, this);
  }"
20701,get,"  LinkedBinding<?> get(Key key) {
    LinkedBinding<?> binding = find(key);
    if (binding != null) {
      return binding;
    }"
20702,get,"  public Set<T> get() {
    Set<T> elements = new LinkedHashSet<>();
    for (LinkedBinding<T> elementBinding : elementBindings) {
      elements.add(elementBinding.get());
    }
    for (LinkedBinding<Set<T>> elementsBinding : elementsBindings) {"
20703,get,"  public @Nullable T get() {
    Object instance = this.instance;
    if (instance == this) {
      synchronized (this) {
        instance = this.instance;"
20706,get,"  public Provider<T> get() {
    return new ScopeKeyedProvider<>(scope, key);
  }"
20707,get,"  public Map<K, V> get() {
    Map<K, Provider<V>> mapOfProvider = mapOfProviderBinding.get();
    assert mapOfProvider != null;

    Map<K, V> mapOfValue = new LinkedHashMap<>(mapOfProvider.size());
    for (Map.Entry<K, Provider<V>> entry : mapOfProvider.entrySet()) {
      mapOfValue.put(entry.getKey(), entry.getValue().get());"
20708,get,"  public Lazy<T> get() {
    return new ScopeKeyedLazy<>(scope, key);
  }"
20709,get,"  public T get() {
    T value = this.value;
    if (value == null) throw new IllegalStateException();
    return value;
  }"
20710,setValue,"  void setValue(T value) {
    if (this.value != null) throw new IllegalStateException();
    this.value = value;
  }"
20712,get,"  public T get() {
    Object[] arguments = new Object[dependencies.length];
    for (int i = 0; i < dependencies.length; i++) {
      arguments[i] = dependencies[i].get();
    }
    T instance = tryInstantiate(constructor, arguments);
    membersInjector.injectMembers(instance);"
20713,toString,"  public String toString() {
    return ""@BindsOptionalOf["" + dependency + ']';
  }"
20714,get,"  public Optional<T> get() {
    if (dependency == null) {
      return Optional.empty();
    }
    T value = dependency.get();
    if (value == null) {"
20715,toString,"  public String toString() {
    return ""@BindsInstance["" + value + ']';
  }"
20716,get,"  public @Nullable T get() {
    return value;
  }"
20718,get,"  public Optional<T> get() {
    if (dependency == null) {
      return Optional.absent();
    }
    T value = dependency.get();
    if (value == null) {"
20723,getTypeName,"  private static String getTypeName(Type type) {
    if (type instanceof Class<?>) {
      Class<?> cls = (Class<?>) type;
      if (cls.isArray()) {"
20724,toString,"  public final String toString() {
    Annotation qualifier = qualifier();
    String type = getTypeName(type());
    return qualifier != null ? qualifier.toString() + ' ' + type : type;
  }"
20727,of,"  static Key of(@Nullable Annotation qualifier, Type type) {
    return new AutoValue_Key(qualifier, canonicalize(boxIfNecessary(type)));
  }"
20735,string,"    static String string() {
      return ""hey"";
    }"
20736,setString,"    void setString(String string) {
      stringMethod = string;
    }"
20742,evaluate,"        public void evaluate() {
          try {
            base.evaluate();
          } catch (Throwable t) {"
20743,evaluate,"        public void evaluate() {
          throw new AssumptionViolatedException(""Ignored in code gen backend"");
        }"
20744,apply,"  public Statement apply(Statement base, Description description) {
    boolean ignoreCodegen = description.getAnnotation(IgnoreCodegen.class) != null;
    if (ignoreCodegen && backend == Backend.CODEGEN) {
      return new Statement() {
        @Override
        public void evaluate() {
          throw new AssumptionViolatedException(""Ignored in code gen backend"");"
20745,membersInjectorWildcardType,"  public void membersInjectorWildcardType() {
    try {
      backend.create(MemberInjectorWildcardType.class).targetInjector();"
20746,membersInjectorGenericType,"  public void membersInjectorGenericType() {
    MembersInjector<MemberInjectorGenericType.Target<String>> injector =
        backend.create(MemberInjectorGenericType.class).targetInjector();
    MemberInjectorGenericType.Target<String> target = new MemberInjectorGenericType.Target<>();
    assertThat(target.foo).isNull();
    injector.injectMembers(target);
    assertThat(target.foo).isEqualTo(""foo"");"
20747,membersInjectorInjected,"  public void membersInjectorInjected() {
    MembersInjector<MemberInjectorInjected.Target> injector =
        backend.create(MemberInjectorInjected.class).holder().targetInjector;
    MemberInjectorInjected.Target target = new MemberInjectorInjected.Target();
    assertThat(target.foo).isNull();
    injector.injectMembers(target);
    assertThat(target.foo).isEqualTo(""foo"");"
20748,membersInjectorComponent,"  public void membersInjectorComponent() {
    MembersInjector<MemberInjectorComponent.Target> injector =
        backend.create(MemberInjectorComponent.class).targetInjector();
    MemberInjectorComponent.Target target = new MemberInjectorComponent.Target();
    assertThat(target.foo).isNull();
    injector.injectMembers(target);
    assertThat(target.foo).isEqualTo(""foo"");"
20749,multipleInterfacesRequestSameDependency,"  public void multipleInterfacesRequestSameDependency() {
    String value = ""my-value"";
    String result =
        backend
            .factory(MultipleInterfacesRequestSameDependency.Factory.class)"
20750,nestedDependencyInterfaceTest,"  public void nestedDependencyInterfaceTest() {
    String value = ""my-value"";
    String result =
        backend.factory(NestedDependencyInterfaceTest.Factory.class).create(() -> value).value();
    assertThat(result).isSameInstanceAs(value);"
20751,subcomponentScopeDependsOnUnscoped,"  public void subcomponentScopeDependsOnUnscoped() {
    SubcomponentScopedDependsOnUnscoped unscoped =
        backend.create(SubcomponentScopedDependsOnUnscoped.class);
    try {"
20752,subcomponentScopeCycle,"  public void subcomponentScopeCycle() {
    SubcomponentScopeCycle.RequestComponent requestComponent =
        backend.create(SubcomponentScopeCycle.class).request();
    try {"
20753,componentScopeDependsOnUnscoped,"  public void componentScopeDependsOnUnscoped() {
    try {
      backend.create(ComponentScopedDependsOnUnscoped.class);"
20754,componentAndSubcomponentScopeCycle,"  public void componentAndSubcomponentScopeCycle() {
    ComponentAndSubcomponentScopeCycle component =
        backend.create(ComponentAndSubcomponentScopeCycle.class);
    try {"
20755,componentScopeCycleWithMultipleAnnotations,"  public void componentScopeCycleWithMultipleAnnotations() {
    try {
      backend.create(ComponentScopeCycleWithMultipleAnnotations.class);"
20756,componentScopeCycle,"  public void componentScopeCycle() {
    try {
      backend.create(ComponentScopeCycle.class);"
20758,componentBindingInstance,"  public void componentBindingInstance() {
    ComponentBindingInstance instance = backend.create(ComponentBindingInstance.class);
    assertThat(instance).isSameInstanceAs(instance.self());
    assertThat(instance).isSameInstanceAs(instance.target().component);
  }"
20759,subcomponentFactoryProvision,"  public void subcomponentFactoryProvision() {
    SubcomponentFactoryProvision.Nested nested =
        backend
            .create(SubcomponentFactoryProvision.class)
            .nestedFactory()"
20760,subcomponentFactoryMethod,"  public void subcomponentFactoryMethod() {
    SubcomponentFactoryMethod.Nested nested =
        backend
            .create(SubcomponentFactoryMethod.class)
            .createNested(new SubcomponentFactoryMethod.Nested.Module2(2L));"
20761,subcomponentBuilderProvision,"  public void subcomponentBuilderProvision() {
    SubcomponentBuilderProvision.Nested nested =
        backend
            .create(SubcomponentBuilderProvision.class)
            .nestedBuilder()"
20762,subcomponentProvision,"  public void subcomponentProvision() {
    SubcomponentProvision.Nested nested = backend.create(SubcomponentProvision.class).nested();
    assertThat(nested.one()).isEqualTo(""one"");
    assertThat(nested.two()).isEqualTo(2L);
  }"
20763,componentWithDependenciesCreateFails,"  public void componentWithDependenciesCreateFails() {
    try {
      backend.create(ComponentWithDependencies.class);"
20764,noComponentBuilderAnnotationFails,"  public void noComponentBuilderAnnotationFails() {
    try {
      backend.builder(NoBuilderAnnotation.Builder.class);"
20765,abstractBuilderClassFails,"  public void abstractBuilderClassFails() {
    try {
      backend.builder(AbstractBuilderClass.Builder.class);"
20766,packagePrivateComponentFails,"  public void packagePrivateComponentFails() {
    try {
      backend.builder(PackagePrivateComponent.Builder.class);"
20767,noComponentAnnotationBuilderFails,"  public void noComponentAnnotationBuilderFails() {
    try {
      backend.builder(NoAnnotation.Builder.class);"
20768,noComponentAnnotationCreateFails,"  public void noComponentAnnotationCreateFails() {
    try {
      backend.create(NoAnnotation.class);"
20769,abstractClassBuilderFails,"  public void abstractClassBuilderFails() {
    AbstractComponent.Builder builder = backend.builder(AbstractComponent.Builder.class);
    try {
      builder.build();"
20770,abstractClassCreateFails,"  public void abstractClassCreateFails() {
    try {
      backend.create(AbstractComponent.class);"
20771,membersInjectionStaticMethod,"  public void membersInjectionStaticMethod() {
    MembersInjectionStaticMethod component = backend.create(MembersInjectionStaticMethod.class);
    MembersInjectionStaticMethod.Target instance = new MembersInjectionStaticMethod.Target();
    try {
      component.inject(instance);"
20772,membersInjectionPrivateMethod,"  public void membersInjectionPrivateMethod() {
    MembersInjectionPrivateMethod component = backend.create(MembersInjectionPrivateMethod.class);
    MembersInjectionPrivateMethod.Target instance = new MembersInjectionPrivateMethod.Target();
    try {
      component.inject(instance);"
20773,membersInjectionStaticField,"  public void membersInjectionStaticField() {
    MembersInjectionStaticField component = backend.create(MembersInjectionStaticField.class);
    MembersInjectionStaticField.Target instance = new MembersInjectionStaticField.Target();
    try {
      component.inject(instance);"
20774,membersInjectionPrivateField,"  public void membersInjectionPrivateField() {
    MembersInjectionPrivateField component = backend.create(MembersInjectionPrivateField.class);
    MembersInjectionPrivateField.Target instance = new MembersInjectionPrivateField.Target();
    try {
      component.inject(instance);"
20775,interfaceMethod,"          public void interfaceMethod(String one) {}
        };"
20776,membersInjectionInterfaceMethod,"  public void membersInjectionInterfaceMethod() {
    MembersInjectionInterfaceMethod component =
        backend.create(MembersInjectionInterfaceMethod.class);
    MembersInjectionInterfaceMethod.Target instance =
        new MembersInjectionInterfaceMethod.Target() {"
20777,abstractMethod,"          public void abstractMethod(String one) {}
        };"
20778,membersInjectionAbstractMethod,"  public void membersInjectionAbstractMethod() {
    MembersInjectionAbstractMethod component = backend.create(MembersInjectionAbstractMethod.class);
    MembersInjectionAbstractMethod.Target instance =
        new MembersInjectionAbstractMethod.Target() {
          @Override"
20779,membersInjectionWrongReturnType,"  public void membersInjectionWrongReturnType() {
    MembersInjectionWrongReturnType component =
        backend.create(MembersInjectionWrongReturnType.class);
    MembersInjectionWrongReturnType.Target instance = new MembersInjectionWrongReturnType.Target();
    try {"
20780,undeclaredDependencies,"  public void undeclaredDependencies() {
    UndeclaredDependencies.Builder builder = backend.builder(UndeclaredDependencies.Builder.class);
    try {
      builder.dep(""hey"");"
20781,undeclaredModule,"  public void undeclaredModule() {
    UndeclaredModules.Builder builder = backend.builder(UndeclaredModules.Builder.class);
    try {
      builder.module(new UndeclaredModules.Module1());"
20782,providerCycle,"  public void providerCycle() {
    ProviderCycle component = backend.create(ProviderCycle.class);
    try {
      component.string();"
20785,nestedComponentBuilder,"  public void nestedComponentBuilder() {
    NestedComponent.MoreNesting.AndMore.TheComponent component =
        backend.builder(NestedComponent.MoreNesting.AndMore.TheComponent.Builder.class).build();
    assertThat(component.string()).isEqualTo(""foo"");"
20786,nestedComponent,"  public void nestedComponent() {
    NestedComponent.MoreNesting.AndMore.TheComponent component =
        backend.create(NestedComponent.MoreNesting.AndMore.TheComponent.class);
    assertThat(component.string()).isEqualTo(""foo"");"
20787,moduleSubcomponentNoFactoryOrBuilder,"  public void moduleSubcomponentNoFactoryOrBuilder() {
    try {
      backend.create(ModuleSubcomponentNoFactoryOrBuilder.class);"
20788,moduleSubcomponentBindsFactoryAndBuilder,"  public void moduleSubcomponentBindsFactoryAndBuilder() {
    try {
      backend.create(ModuleSubcomponentBindsFactoryAndBuilder.class);"
20789,moduleSubcomponentBindsFactory,"  public void moduleSubcomponentBindsFactory() {
    ModuleSubcomponentBindsBuilder component = backend.create(ModuleSubcomponentBindsBuilder.class);
    assertThat(component.string()).isEqualTo(""5"");
  }"
20790,moduleSubcomponentBindsBuilder,"  public void moduleSubcomponentBindsBuilder() {
    ModuleSubcomponentBindsBuilder component = backend.create(ModuleSubcomponentBindsBuilder.class);
    assertThat(component.string()).isEqualTo(""5"");
  }"
20791,moduleIncludes,"  public void moduleIncludes() {
    ModuleIncludes component = backend.create(ModuleIncludes.class);
    assertThat(component.string()).isEqualTo(""5"");
  }"
20792,modulePrivateMethod,"  public void modulePrivateMethod() {
    ModulePrivateMethod component = backend.create(ModulePrivateMethod.class);
    assertThat(component.integer()).isEqualTo(42);
  }"
20793,moduleInterfaceWithDefaultMethodNotAllowed,"  public void moduleInterfaceWithDefaultMethodNotAllowed() {
    try {
      backend.create(ModuleInterfaceDefaultProvidesMethod.class);"
20794,moduleAbstractClassInstanceMethodNotAllowed,"  public void moduleAbstractClassInstanceMethodNotAllowed() {
    try {
      backend.create(ModuleAbstractInstanceProvidesMethod.class);"
20795,moduleInterfaceWithDefaultMethodUnrelatedDoesNotAffectDagger,"  public void moduleInterfaceWithDefaultMethodUnrelatedDoesNotAffectDagger() {
    ModuleInterfaceDefaultMethodUnrelated component =
        backend.create(ModuleInterfaceDefaultMethodUnrelated.class);
    assertThat(component.string()).isEqualTo(""foo"");"
20796,moduleInterfaceHierarchy,"  public void moduleInterfaceHierarchy() {
    ModuleInterfaceHierarchy component = backend.create(ModuleInterfaceHierarchy.class);
    assertThat(component.number()).isEqualTo(42);
  }"
20797,moduleInterface,"  public void moduleInterface() {
    ModuleInterface component = backend.create(ModuleInterface.class);
    assertThat(component.number()).isEqualTo(42);
  }"
20798,moduleClassHierarchyStatics,"  public void moduleClassHierarchyStatics() {
    ModuleClassHierarchyStatics component = backend.create(ModuleClassHierarchyStatics.class);
    assertThat(component.string()).isEqualTo(""foo"");
  }"
20799,moduleClassHierarchy,"  public void moduleClassHierarchy() {
    ModuleClassHierarchy component = backend.create(ModuleClassHierarchy.class);
    assertThat(component.number()).isEqualTo(42);
  }"
20800,moduleClassAndInterfaceDuplicatesHierarchy,"  public void moduleClassAndInterfaceDuplicatesHierarchy() {
    ModuleClassAndInterfaceDuplicatesHierarchy component =
        backend.create(ModuleClassAndInterfaceDuplicatesHierarchy.class);
    assertThat(component.number()).isEqualTo(42);"
20801,moduleClassAndInterfaceHierarchy,"  public void moduleClassAndInterfaceHierarchy() {
    ModuleClassAndInterfaceHierarchy component =
        backend.create(ModuleClassAndInterfaceHierarchy.class);
    assertThat(component.number()).isEqualTo(42);"
20802,moduleClass,"  public void moduleClass() {
    ModuleClass component = backend.create(ModuleClass.class);
    assertThat(component.string()).isEqualTo(""foo"");
  }"
20803,multibindsAnnotationWrongType,"  public void multibindsAnnotationWrongType() {
    try {
      backend.create(MultibindsAnnotationWrongType.class);"
20806,multibindingMapNoUnwrap,"  public void multibindingMapNoUnwrap() {
    MultibindingMapNoUnwrap component = backend.create(MultibindingMapNoUnwrap.class);
    assertThat(component.values())
        .containsExactly("
20807,multibindingMapPrimitiveValue,"  public void multibindingMapPrimitiveValue() {
    MultibindingMapPrimitiveValue component = backend.create(MultibindingMapPrimitiveValue.class);
    assertThat(component.values()).containsExactly(""1"", 1L, ""2"", 2L);
  }"
20808,multibindingMapPrimitiveKey,"  public void multibindingMapPrimitiveKey() {
    MultibindingMapPrimitiveKey component = backend.create(MultibindingMapPrimitiveKey.class);
    assertThat(component.values()).containsExactly(1L, ""one"", 2L, ""two"");
  }"
20809,multibindingMapClassKey,"  public void multibindingMapClassKey() {
    MultibindingMapClassKey c = backend.create(MultibindingMapClassKey.class);
    assertThat(c.values())
        .containsExactly(Impl1.class, Impl1.INSTANCE, Impl2.class, Impl2.INSTANCE);"
20810,multibindingMapEmpty,"  public void multibindingMapEmpty() {
    MultibindingMapEmpty component = backend.create(MultibindingMapEmpty.class);
    assertThat(component.values()).isEmpty();
  }"
20811,multibindingMap,"  public void multibindingMap() {
    MultibindingMap component = backend.create(MultibindingMap.class);
    assertThat(component.values()).containsExactly(""1"", ""one"", ""2"", ""two"");
  }"
20813,multibindingSetElementsPrimitive,"  public void multibindingSetElementsPrimitive() {
    MultibindingSetElementsPrimitive component =
        backend.create(MultibindingSetElementsPrimitive.class);
    assertThat(component.values()).containsExactly(1L, 2L);"
20814,multibindingSetPrimitive,"  public void multibindingSetPrimitive() {
    MultibindingSetPrimitive component = backend.create(MultibindingSetPrimitive.class);
    assertThat(component.values()).containsExactly(1L, 2L);
  }"
20815,multibindingSetElements,"  public void multibindingSetElements() {
    MultibindingSetElements component = backend.create(MultibindingSetElements.class);
    assertThat(component.values()).containsExactly(""one"", ""two"");
  }"
20816,multibindingSetEmpty,"  public void multibindingSetEmpty() {
    MultibindingSetEmpty component = backend.create(MultibindingSetEmpty.class);
    assertThat(component.values()).isEmpty();
  }"
20817,multibindingSet,"  public void multibindingSet() {
    MultibindingSet component = backend.create(MultibindingSet.class);
    assertThat(component.values()).containsExactly(""one"", ""two"");
  }"
20818,scopedWrong,"  public void scopedWrong() {
    try {
      backend.create(ScopedWrong.class);"
20819,scopedWithMultipleAnnotations,"  public void scopedWithMultipleAnnotations() {
    ScopedWithMultipleAnnotations component = backend.create(ScopedWithMultipleAnnotations.class);
    Object value1 = component.value();
    Object value2 = component.value();
    assertThat(value1).isSameInstanceAs(value2);
    Runnable runnable1 = component.runnable();
    Runnable runnable2 = component.runnable();
    assertThat(runnable1).isSameInstanceAs(runnable2);
  }"
20820,scoped,"  public void scoped() {
    Scoped component = backend.create(Scoped.class);
    Object value1 = component.value();
    Object value2 = component.value();
    assertThat(value1).isSameInstanceAs(value2);
  }"
20823,memberInjectionQualified,"  public void memberInjectionQualified() {
    MemberInjectionQualified component = backend.create(MemberInjectionQualified.class);
    MemberInjectionQualified.Target target = new MemberInjectionQualified.Target();
    component.inject(target);
    assertThat(target.fromField).isEqualTo(""foo"");
    assertThat(target.fromMethod).isEqualTo(""foo"");
  }"
20824,memberInjectionMethodReturnTypes,"  public void memberInjectionMethodReturnTypes() {
    MemberInjectionMethodReturnTypes component =
        backend.create(MemberInjectionMethodReturnTypes.class);
    MemberInjectionMethodReturnTypes.Target target = new MemberInjectionMethodReturnTypes.Target();
    component.inject(target);
    assertThat(target.count).isEqualTo(3);"
20825,memberInjectionMethodMultipleParams,"  public void memberInjectionMethodMultipleParams() {
    MemberInjectionMethodMultipleParams component =
        backend.create(MemberInjectionMethodMultipleParams.class);
    MemberInjectionMethodMultipleParams.Target target =
        new MemberInjectionMethodMultipleParams.Target();
    component.inject(target);
    assertThat(target.one).isEqualTo(""one"");
    assertThat(target.two).isEqualTo(2L);
    assertThat(target.two2).isEqualTo(2L);"
20827,memberInjectionOrder,"  public void memberInjectionOrder() {
    MemberInjectionOrder component = backend.create(MemberInjectionOrder.class);
    MemberInjectionOrder.SubType target = new MemberInjectionOrder.SubType();
    component.inject(target);
    assertThat(target.calls)
        .containsExactly("
20828,memberInjectionHierarchy,"  public void memberInjectionHierarchy() {
    MemberInjectionHierarchy component = backend.create(MemberInjectionHierarchy.class);
    MemberInjectionHierarchy.Subtype target = new MemberInjectionHierarchy.Subtype();
    component.inject(target);
    assertThat(target.baseOne).isEqualTo(""foo"");
    assertThat(target.baseCalled).isTrue();
    assertThat(target.subtypeOne).isEqualTo(""foo"");
    assertThat(target.subtypeCalled).isTrue();
  }"
20829,memberInjectionFieldVisibility,"  public void memberInjectionFieldVisibility() {
    MemberInjectionFieldVisibility component = backend.create(MemberInjectionFieldVisibility.class);
    MemberInjectionFieldVisibility.Target target = new MemberInjectionFieldVisibility.Target();
    component.inject(target);
    assertThat(target.one).isEqualTo(""one"");
    assertThat(target.two).isEqualTo(2L);
    assertThat(target.three).isEqualTo(3);
  }"
20830,memberInjectionFieldBeforeMethod,"  public void memberInjectionFieldBeforeMethod() {
    MemberInjectionFieldBeforeMethod component =
        backend.create(MemberInjectionFieldBeforeMethod.class);
    MemberInjectionFieldBeforeMethod.Target target = new MemberInjectionFieldBeforeMethod.Target();
    component.inject(target);
    assertThat(target.fieldBeforeMethod).isTrue();"
20831,memberInjectionNoInjects,"  public void memberInjectionNoInjects() {
    MemberInjectionNoInjects component = backend.create(MemberInjectionNoInjects.class);
    MemberInjectionNoInjects.Target target = new MemberInjectionNoInjects.Target();
    component.inject(target);
    assertThat(target.one).isNull();
    assertThat(target.two).isNull();
    assertThat(target.three).isNull();
    assertThat(target.count).isEqualTo(0);
  }"
20832,memberInjectionReturnInstance,"  public void memberInjectionReturnInstance() {
    MemberInjectionReturnInstance component = backend.create(MemberInjectionReturnInstance.class);
    MemberInjectionReturnInstance.Target in = new MemberInjectionReturnInstance.Target();
    MemberInjectionReturnInstance.Target out = component.inject(in);
    assertThat(out.foo).isEqualTo(""foo"");
    assertThat(out).isSameInstanceAs(in);
  }"
20833,method,"      public void method(String foo) {
        called = true;
      }"
20834,memberInjectionInterface,"  public void memberInjectionInterface() {
    MemberInjectionInterface component = backend.create(MemberInjectionInterface.class);
    class Target implements MemberInjectionInterface.Target {
      boolean called;

      @Override
      public void method(String foo) {"
20838,factoryImplicitModules,"  public void factoryImplicitModules() {
    FactoryImplicitModules component =
        backend.factory(FactoryImplicitModules.Factory.class).create(3L);
"
20839,factoryExplicitModulesNullThrowsNpe,"  public void factoryExplicitModulesNullThrowsNpe() {
    FactoryExplicitModules.Factory factory = backend.factory(FactoryExplicitModules.Factory.class);
    try {
      factory.create(null);"
20840,factoryExplicitModules,"  public void factoryExplicitModules() {
    FactoryExplicitModules component =
        backend
            .factory(FactoryExplicitModules.Factory.class)"
20841,factoryDependencyNullThrowsNpe,"  public void factoryDependencyNullThrowsNpe() {
    FactoryDependency.Factory factory = backend.factory(FactoryDependency.Factory.class);
    try {
      factory.create(null);"
20842,factoryDependency,"  public void factoryDependency() {
    FactoryDependency component =
        backend.factory(FactoryDependency.Factory.class).create(new FactoryDependency.Other(""hey""));
"
20843,factoryBindsInstanceNull,"  public void factoryBindsInstanceNull() {
    FactoryBindsInstanceNull component =
        backend.factory(FactoryBindsInstanceNull.Factory.class).create(null);
"
20844,factoryBindsInstance,"  public void factoryBindsInstance() {
    FactoryBindsInstance component =
        backend.factory(FactoryBindsInstance.Factory.class).create(""hey"");
"
20845,builderDependencyOmitted,"  public void builderDependencyOmitted() {
    try {
      backend.builder(BuilderDependency.Builder.class).build();"
20846,builderDependencySetTwice,"  public void builderDependencySetTwice() {
    BuilderDependency component =
        backend
            .builder(BuilderDependency.Builder.class)"
20847,builderDependencyNullThrowsNpe,"  public void builderDependencyNullThrowsNpe() {
    BuilderDependency.Builder builder = backend.builder(BuilderDependency.Builder.class);
    try {
      builder.other(null);"
20848,builderDependency,"  public void builderDependency() {
    BuilderDependency component =
        backend
            .builder(BuilderDependency.Builder.class)"
20849,builderExplicitModulesOmitted,"  public void builderExplicitModulesOmitted() {
    try {
      backend.builder(BuilderExplicitModules.Builder.class).build();"
20850,builderExplicitModulesSetTwice,"  public void builderExplicitModulesSetTwice() {
    BuilderExplicitModules component =
        backend
            .builder(BuilderExplicitModules.Builder.class)"
20851,builderExplicitModulesNullThrowsNpe,"  public void builderExplicitModulesNullThrowsNpe() {
    BuilderExplicitModules.Builder builder = backend.builder(BuilderExplicitModules.Builder.class);
    try {
      builder.module1(null);"
20852,builderExplicitModules,"  public void builderExplicitModules() {
    BuilderExplicitModules component =
        backend
            .builder(BuilderExplicitModules.Builder.class)"
20853,builderImplicitModules,"  public void builderImplicitModules() {
    BuilderImplicitModules component =
        backend.builder(BuilderImplicitModules.Builder.class).value(3L).build();
"
20854,builderBindsInstanceOnParameterAndMethod,"  public void builderBindsInstanceOnParameterAndMethod() {
    BuilderBindsInstanceOnParameterAndMethod.Builder builder =
        backend.builder(BuilderBindsInstanceOnParameterAndMethod.Builder.class);
    try {"
20855,builderBindsInstanceOnParameterNull,"  public void builderBindsInstanceOnParameterNull() {
    BuilderBindsInstanceOnParameterNull component =
        backend.builder(BuilderBindsInstanceOnParameterNull.Builder.class).string(null).build();
    assertThat(component.string()).isNull();"
20856,builderBindsInstanceOnParameterCalledTwice,"  public void builderBindsInstanceOnParameterCalledTwice() {
    BuilderBindsInstanceOnParameter component =
        backend
            .builder(BuilderBindsInstanceOnParameter.Builder.class)"
20857,builderBindsInstanceOnParameter,"  public void builderBindsInstanceOnParameter() {
    BuilderBindsInstanceOnParameter component =
        backend.builder(BuilderBindsInstanceOnParameter.Builder.class).string(""foo"").build();
    assertThat(component.string()).isEqualTo(""foo"");"
20858,builderBindsInstanceNull,"  public void builderBindsInstanceNull() {
    BuilderBindsInstanceNull component =
        backend.builder(BuilderBindsInstanceNull.Builder.class).string(null).build();
    assertThat(component.string()).isNull();"
20859,builderBindsInstanceCalledTwice,"  public void builderBindsInstanceCalledTwice() {
    BuilderBindsInstance component =
        backend.builder(BuilderBindsInstance.Builder.class).string(""foo"").string(""bar"").build();
    assertThat(component.string()).isEqualTo(""bar"");"
20860,builderBindsInstance,"  public void builderBindsInstance() {
    BuilderBindsInstance component =
        backend.builder(BuilderBindsInstance.Builder.class).string(""foo"").build();
    assertThat(component.string()).isEqualTo(""foo"");"
20861,implicitModuleInstanceNotCreatedWhenUnnecessary,"  public void implicitModuleInstanceNotCreatedWhenUnnecessary() {
    ImplicitModuleInstanceCannotBeCreated component =
        backend.create(ImplicitModuleInstanceCannotBeCreated.class);
"
20862,implicitModuleInstance,"  public void implicitModuleInstance() {
    ImplicitModuleInstance component = backend.create(ImplicitModuleInstance.class);

    assertThat(component.string()).isEqualTo(""one"");"
20868,providerMultipleGenericIntoJustInTimeGeneric,"  public void providerMultipleGenericIntoJustInTimeGeneric() {
    ProviderMultipleGenericIntoJustInTime component =
        backend.create(ProviderMultipleGenericIntoJustInTime.class);
    assertThat(component.thing().thingProvider.get()).isNotNull();
    assertThat(component.thing().valueProvider.get()).isNotNull();"
20869,providerGenericIntoJustInTimeGeneric,"  public void providerGenericIntoJustInTimeGeneric() {
    ProviderGenericIntoJustInTime component = backend.create(ProviderGenericIntoJustInTime.class);
    assertThat(component.thing().genericProvider.get()).isNotNull();
  }"
20870,justInTimeNotScopedInAncestry,"  public void justInTimeNotScopedInAncestry() {
    JustInTimeNotScopedInAncestry.ChildComponent child =
        backend.create(JustInTimeNotScopedInAncestry.class).child();
    try {"
20871,justInTimeScopedIntoUnscoped,"  public void justInTimeScopedIntoUnscoped() {
    JustInTimeScopedIntoUnscoped component = backend.create(JustInTimeScopedIntoUnscoped.class);
    try {
      component.thing();"
20872,justInTimeWrongScope,"  public void justInTimeWrongScope() {
    JustInTimeWrongScope component = backend.create(JustInTimeWrongScope.class);
    try {
      component.thing();"
20873,justInTimeUnscopedIntoJustInTimeScoped,"  public void justInTimeUnscopedIntoJustInTimeScoped() {
    JustInTimeDependsOnJustInTime component = backend.create(JustInTimeDependsOnJustInTime.class);
    JustInTimeDependsOnJustInTime.Foo foo1 = component.thing();
    JustInTimeDependsOnJustInTime.Foo foo2 = component.thing();
    assertThat(foo1).isNotSameInstanceAs(foo2);
  }"
20874,justInTimeScopedInParent,"  public void justInTimeScopedInParent() {
    JustInTimeScopedInParent component = backend.create(JustInTimeScopedInParent.class);
    JustInTimeScopedInParent.ChildComponent child1 = component.child();
    JustInTimeScopedInParent.Thing thing1 = child1.thing();
    JustInTimeScopedInParent.ChildComponent child2 = component.child();
    JustInTimeScopedInParent.Thing thing2 = child2.thing();
    assertThat(thing1).isSameInstanceAs(thing2);
  }"
20875,justInTimeScoped,"  public void justInTimeScoped() {
    JustInTimeScoped component = backend.create(JustInTimeScoped.class);
    JustInTimeScoped.Thing thing1 = component.thing();
    JustInTimeScoped.Thing thing2 = component.thing();
    assertThat(thing1).isSameInstanceAs(thing2);
  }"
20876,justInTimeMembersInjection,"  public void justInTimeMembersInjection() {
    JustInTimeMembersInjection component = backend.create(JustInTimeMembersInjection.class);
    JustInTimeMembersInjection.Thing thing = component.thing();
    assertThat(thing.stringConstructor).isEqualTo(""hey"");
    assertThat(thing.stringField).isEqualTo(""hey"");
    assertThat(thing.stringMethod).isEqualTo(""hey"");
  }"
20877,justInTimeGeneric,"  public void justInTimeGeneric() {
    JustInTimeGeneric component = backend.create(JustInTimeGeneric.class);
    assertThat(component.thing()).isNotNull();
  }"
20878,justInTimeConstructor,"  public void justInTimeConstructor() {
    JustInTimeConstructor component = backend.create(JustInTimeConstructor.class);
    assertThat(component.thing()).isNotNull();
  }"
20879,optionalGuavaBindingPrimitive,"  public void optionalGuavaBindingPrimitive() {
    OptionalGuavaBindingPrimitive component = backend.create(OptionalGuavaBindingPrimitive.class);
    assertThat(component.five()).isEqualTo(com.google.common.base.Optional.of(5L));
  }"
20880,optionalGuavaBindingAbsent,"  public void optionalGuavaBindingAbsent() {
    OptionalGuavaBindingAbsent component = backend.create(OptionalGuavaBindingAbsent.class);
    assertThat(component.string()).isEqualTo(com.google.common.base.Optional.absent());
  }"
20881,optionalGuavaBinding,"  public void optionalGuavaBinding() {
    OptionalGuavaBinding component = backend.create(OptionalGuavaBinding.class);
    assertThat(component.string()).isEqualTo(com.google.common.base.Optional.of(""foo""));
  }"
20882,optionalBindingPrimitive,"  public void optionalBindingPrimitive() {
    OptionalBindingPrimitive component = backend.create(OptionalBindingPrimitive.class);
    assertThat(component.five()).isEqualTo(Optional.of(5L));
  }"
20883,optionalBindingAbsent,"  public void optionalBindingAbsent() {
    OptionalBindingAbsent component = backend.create(OptionalBindingAbsent.class);
    assertThat(component.string()).isEqualTo(Optional.empty());
  }"
20884,optionalBindingNullable,"  public void optionalBindingNullable() {
    OptionalBindingNullable component = backend.create(OptionalBindingNullable.class);
    try {
      component.string();"
20885,optionalBinding,"  public void optionalBinding() {
    OptionalBinding component = backend.create(OptionalBinding.class);
    assertThat(component.string()).isEqualTo(Optional.of(""foo""));
  }"
20888,mapWithoutBinds,"  public void mapWithoutBinds() {
    MapWithoutBinds component = backend.create(MapWithoutBinds.class);
    assertThat(component.strings()).containsExactly(""1"", ""one"", ""2"", ""two"");
  }"
20889,bindIntoMap,"  public void bindIntoMap() {
    BindsIntoMap component = backend.create(BindsIntoMap.class);
    assertThat(component.strings()).containsExactly(""bar"", ""foo"");
  }"
20890,bindElementsIntoSetGenericWrongReturn,"  public void bindElementsIntoSetGenericWrongReturn() {
    try {
      backend.create(BindsElementsIntoSetGenericWrongReturn.class);"
20891,bindElementsIntoSetWrongReturn,"  public void bindElementsIntoSetWrongReturn() {
    try {
      backend.create(BindsElementsIntoSetWrongReturn.class);"
20892,bindElementsIntoSet,"  public void bindElementsIntoSet() {
    BindsElementsIntoSet component = backend.create(BindsElementsIntoSet.class);
    assertThat(component.strings()).containsExactly(""foo"");
  }"
20893,bindIntoSet,"  public void bindIntoSet() {
    BindsIntoSet component = backend.create(BindsIntoSet.class);
    assertThat(component.strings()).containsExactly(""foo"");
  }"
20894,bindsProviderNull,"  public void bindsProviderNull() {
    BindsProviderNull component = backend.create(BindsProviderNull.class);
    assertThat(component.string()).isNull();
  }"
20895,bindsProviderNullabilityMismatch,"  public void bindsProviderNullabilityMismatch() {
    BindsProviderNullabilityMismatch component =
        backend.create(BindsProviderNullabilityMismatch.class);
    try {"
20896,bindsProvider,"  public void bindsProvider() {
    BindsProvider component = backend.create(BindsProvider.class);
    assertThat(component.number()).isEqualTo(42);
  }"
20897,staticProvider,"  public void staticProvider() {
    StaticProvider component = backend.create(StaticProvider.class);
    assertThat(component.string()).isEqualTo(""foo"");
  }"
20898,componentProviderQualified,"  public void componentProviderQualified() {
    ComponentProviderQualified component = backend.create(ComponentProviderQualified.class);
    assertThat(component.string()).isEqualTo(""foo"");
  }"
20899,componentProviderNull,"  public void componentProviderNull() {
    ComponentProviderNull component = backend.create(ComponentProviderNull.class);
    assertThat(component.string()).isNull();
  }"
20900,componentProvider,"  public void componentProvider() {
    ComponentProvider component = backend.create(ComponentProvider.class);
    assertThat(component.string()).isEqualTo(""foo"");
  }"
20901,parameters,"  public static Object[] parameters() {
    return Backend.values();
  }"
20903,string,"    static String string() {
      return ""one"";
    }"
20905,string,"    String string() {
      return ""one"";
    }"
20907,create,"    FactoryImplicitModules create(@BindsInstance Long value);
  }"
20908,string,"    static String string(Long value) {
      return Long.toString(value);
    }"
20910,create,"    FactoryExplicitModules create(Module1 module1);
  }"
20911,string,"    String string() {
      return value;
    }"
20913,create,"    FactoryDependency create(Other other);
  }"
20914,string,"    String string() {
      return string;
    }"
20916,create,"    FactoryBindsInstanceNull create(@BindsInstance @Nullable String one);
  }"
20918,create,"    FactoryBindsInstance create(@BindsInstance String one);
  }"
20920,factory,"  public static <F> F factory(Class<F> factoryClass) {
    return ComponentFactoryInvocationHandler.forComponentFactory(factoryClass);
  }"
20921,builder,"  public static <B> B builder(Class<B> builderClass) {
    return ComponentBuilderInvocationHandler.forComponentBuilder(builderClass);
  }"
20922,create,"  public static <C> C create(Class<C> componentClass) {
    return ComponentInvocationHandler.forComponent(componentClass);
  }"
20923,get,"  Scope.Builder get() {
    Scope.Builder scopeBuilder =
        new Scope.Builder(parent, scopeAnnotations)
            .addJustInTimeLookupFactory(new ReflectiveJustInTimeLookupFactory())
            .addJustInTimeLookupFactory(new MembersInjectorJustInTimeFactory());

    for (Map.Entry<Key, Object> entry : boundInstances.entrySet()) {
      scopeBuilder.addInstance(entry.getKey(), entry.getValue());"
20924,setDependency,"  void setDependency(Class<?> dependencyClass, Object instance) {
    if (dependencyInstances.containsKey(dependencyClass)) {
      dependencyInstances.put(dependencyClass, instance);"
20925,setModule,"  void setModule(Class<?> moduleClass, Object instance) {
    if (moduleInstances.containsKey(moduleClass)) {
      moduleInstances.put(moduleClass, instance);"
20926,putBoundInstance,"  void putBoundInstance(Key key, Object instance) {
    boundInstances.put(key, instance);
  }"
20927,create,"  static ComponentScopeBuilder create(
      Class<?>[] moduleClasses,
      Class<?>[] dependencyClasses,
      Set<Annotation> scopeAnnotations,
      @Nullable Scope parent) {
    Map<Class<?>, Object> moduleInstances = new LinkedHashMap<>();
    Set<Class<?>> subcomponentClasses = new LinkedHashSet<>();

    Deque<Class<?>> moduleClassQueue = new ArrayDeque<>();
    Collections.addAll(moduleClassQueue, moduleClasses);"
20928,buildSubcomponent,"  static ComponentScopeBuilder buildSubcomponent(Class<?> subcomponentClass, Scope parent) {
    Subcomponent subcomponent = requireAnnotation(subcomponentClass, Subcomponent.class);
    Set<Annotation> scopeAnnotation = findScopes(subcomponentClass.getDeclaredAnnotations());
    return create(subcomponent.modules(), new Class<?>[0], scopeAnnotation, parent);
  }"
20929,buildComponent,"  static ComponentScopeBuilder buildComponent(Class<?> componentClass) {
    Component component = requireAnnotation(componentClass, Component.class);
    Set<Annotation> scopeAnnotation = findScopes(componentClass.getDeclaredAnnotations());
    return create(component.modules(), component.dependencies(), scopeAnnotation, null);
  }"
20930,string,"    static @Foo String string() {
      return ""foo"";
    }"
20932,string,"    static @Nullable String string() {
      return null;
    }"
20936,invoke,"    public Object invoke(Object[] args) {
      return ComponentFactoryInvocationHandler.forSubcomponentFactory(cls, scope);
    }"
20937,invoke,"    public Object invoke(Object[] args) {
      return ComponentBuilderInvocationHandler.forSubcomponentBuilder(cls, scope);
    }"
20938,invoke,"    public Object invoke(Object[] args) {
      ComponentScopeBuilder scopeBuilder = ComponentScopeBuilder.buildSubcomponent(cls, scope);
      ComponentFactoryInvocationHandler.parseFactoryMethod(method, args, scopeBuilder);
      return create(cls, scopeBuilder.get());
    }"
20939,invoke,"    public @Nullable Object invoke(Object[] args) {
      Object instance = args[0];
      membersInjector.injectMembers(instance);
      return returnInstance ? instance : null;
    }"
20940,invoke,"    public @Nullable Object invoke(Object[] args) {
      return binding.get();
    }"
20942,createMethodInvocationHandler,"  private static ComponentInvocationHandler.MethodInvocationHandler createMethodInvocationHandler(
      Method method, Scope scope) {
    Type returnType = method.getGenericReturnType();
    Class<?>[] parameterTypes = method.getParameterTypes();

    if (returnType instanceof Class<?>) {
      Class<?> returnClass = (Class<?>) returnType;
      if (returnClass.getAnnotation(Subcomponent.class) != null) {"
20943,invoke,"  public @Nullable Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
    if (method.getDeclaringClass() == Object.class) {
      return method.invoke(this, args);
    }

    MethodInvocationHandler handler = handlers.get(method);"
20944,create,"  static <C> C create(Class<C> cls, Scope.Builder scopeBuilder) {
    Key componentKey = Key.of(null, cls);
    LinkedLateInstanceBinding<C> componentBinding = new LinkedLateInstanceBinding<>();
    scopeBuilder.addBinding(componentKey, componentBinding);

    Scope scope = scopeBuilder.build();
    C instance = newProxy(cls, new ComponentInvocationHandler(scope));
    componentBinding.setValue(instance);
"
20945,forComponent,"  static <C> C forComponent(Class<C> cls) {
    Scope.Builder scopeBuilder = ComponentScopeBuilder.buildComponent(cls).get();
    return create(cls, scopeBuilder);
  }"
20946,parseFactoryMethod,"  static void parseFactoryMethod(Method method, Object[] args, ComponentScopeBuilder scopeBuilder) {
    Type[] parameterTypes = method.getGenericParameterTypes();
    Annotation[][] parameterAnnotations = method.getParameterAnnotations();
    for (int i = 0; i < parameterTypes.length; i++) {
      Type parameterType = parameterTypes[i];"
20950,invoke,"  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
    if (method.getDeclaringClass() == Object.class) {
      return method.invoke(proxy, args);
    }

    Class<?> returnType = method.getReturnType();
    Type[] parameterTypes = method.getGenericParameterTypes();
    Annotation[][] parameterAnnotations = method.getParameterAnnotations();
"
20968,build,"    BuilderBindsInstanceOnParameterNull build();
  }"
20969,string,"    Builder string(@BindsInstance @Nullable String string);
"
20971,build,"    BuilderBindsInstanceOnParameterAndMethod build();
  }"
20972,string,"    Builder string(@BindsInstance String string);
"
20974,build,"    BuilderBindsInstanceOnParameter build();
  }"
20985,charSequence,"    abstract CharSequence charSequence(@Nullable String foo);
  }"
20991,setString,"    abstract String setString(String foo);
  }"
20994,mapString,"    abstract String mapString(String foo);
  }"
20997,setStrings,"    abstract String setStrings(Deque<String> foo);
  }"
20998,strings,"    static Deque<String> strings() {
      ArrayDeque<String> strings = new ArrayDeque<>();
      strings.add(""foo"");
      return strings;
    }"
21000,setStrings,"    abstract Set<? extends String> setStrings(Deque<String> foo);
  }"
21003,setStrings,"    abstract Set<String> setStrings(Deque<String> foo);
  }"
21006,asScoped,"    public final Binding asScoped() {
      return new LinkedScopedBinding<>(this);
    }"
21007,link,"    public final LinkedBinding<?> link(Linker linker, Scope scope) {
      return this;
    }"
21008,asScoped,"    public final Binding asScoped() {
      return new UnlinkedScopedBinding(this);
    }"
21011,link,"  LinkedBinding<?> link(Linker linker, Scope scope);
"
21012,factory,"  abstract <F> F factory(Class<F> factoryClass);
}"
21013,builder,"  abstract <B> B builder(Class<B> builderClass);
"
21014,create,"  abstract <C> C create(Class<C> componentClass);
"
21015,factory,"    <F> F factory(Class<F> factoryClass) {
      return DaggerCodegen.factory(factoryClass);
    }"
21016,builder,"    <B> B builder(Class<B> builderClass) {
      return DaggerCodegen.builder(builderClass);
    }"
21017,create,"    <C> C create(Class<C> componentClass) {
      return DaggerCodegen.create(componentClass);
    }"
21018,factory,"    <F> F factory(Class<F> factoryClass) {
      return DaggerReflect.factory(factoryClass);
    }"
21019,builder,"    <B> B builder(Class<B> builderClass) {
      return DaggerReflect.builder(builderClass);
    }"
21020,create,"    <C> C create(Class<C> componentClass) {
      return DaggerReflect.create(componentClass);
    }"
21021,tableKey,"  static MultibindingMapNoUnwrap.TableKey tableKey(int row, int col) {
    return new AutoAnnotation_Annotations_tableKey(row, col);
  }"
21023,moveTo,"    public static PathPoint moveTo(float x, float y) {
        return new PathPoint(MOVE, x, y);
    }"
21024,curveTo,"    public static PathPoint curveTo(float c0X, float c0Y, float c1X, float c1Y, float x, float y) {
        return new PathPoint(c0X,  c0Y, c1X, c1Y, x, y);
    }"
21025,lineTo,"    public static PathPoint lineTo(float x, float y) {
        return new PathPoint(LINE, x, y);
    }"
21026,evaluate,"    public PathPoint evaluate(float t, PathPoint startValue, PathPoint endValue) {
        float x, y;
        if (endValue.mOperation == PathPoint.CURVE) {
            float oneMinusT = 1 - t;
            x = oneMinusT * oneMinusT * oneMinusT * startValue.mX +"
21027,newInstance,"    public static MediaFragment newInstance () {
        return new MediaFragment();
    }"
21028,setFabLoc,"    public void setFabLoc(PathPoint newLoc) {
        mFab.setTranslationX(newLoc.mX);

        if (mRevealFlag)"
21029,onAnimationEnd,"        public void onAnimationEnd(Animator animation) {
            super.onAnimationEnd(animation);

            mFab.setVisibility(View.INVISIBLE);
            mFabContainer.setBackgroundColor(getResources()
                .getColor(R.color.brand_accent));"
21030,onAnimationUpdate,"            public void onAnimationUpdate(ValueAnimator animation) {
                if (Math.abs(startX - mFab.getX()) > MINIMUN_X_DISTANCE) {
                    if (!mRevealFlag) {"
21031,onFabPressed,"    public void onFabPressed(View view) {
        final float startX = mFab.getX();

        AnimatorPath path = new AnimatorPath();
        path.moveTo(0, 0);
        path.curveTo(-200, 200, -400, 100, -600, 50);

        final ObjectAnimator anim = ObjectAnimator.ofObject(this, ""fabLoc"",
            new PathEvaluator(), path.getPoints().toArray());

        anim.setInterpolator(new AccelerateInterpolator());"
21032,onClick,"            @Override public void onClick(View v) {
                onFabPressed(v);
            }"
21033,bindViews,"    private void bindViews() {
        mFab = mRootView.findViewById(R.id.fab);
        mFab.setOnClickListener(new View.OnClickListener() {
            @Override public void onClick(View v) {
                onFabPressed(v);
            }"
21034,onActivityCreated,"    @Override public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        mFabSize = getResources().getDimensionPixelSize(R.dimen.fab_size);
        bindViews();
    }"
21035,onCreateView,"    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        mRootView = inflater.inflate(R.layout.activity_media, container, false);
        return mRootView;
    }"
21036,getPoints,"    public Collection<PathPoint> getPoints() {
        return mPoints;
    }"
21037,curveTo,"    public void curveTo(float c0X, float c0Y, float c1X, float c1Y, float x, float y) {
        mPoints.add(PathPoint.curveTo(c0X, c0Y, c1X, c1Y, x, y));
    }"
21038,lineTo,"    public void lineTo(float x, float y) {
        mPoints.add(PathPoint.lineTo(x, y));
    }"
21039,moveTo,"    public void moveTo(float x, float y) {
        mPoints.add(PathPoint.moveTo(x, y));
    }"
21040,setEndTime,"        public void setEndTime(long endTime) {
            this.endTime = endTime;
        }"
21041,getEndTime,"        public long getEndTime() {
            return endTime;
        }"
21042,setCountdown,"        public void setCountdown(long countdown) {
            this.countdown = countdown;
        }"
21043,getCountdown,"        public long getCountdown() {
            return countdown;
        }"
21044,setTitle,"        public void setTitle(String title) {
            this.title = title;
        }"
21045,getTitle,"        public String getTitle() {
            return title;
        }"
21046,setId,"        public void setId(int id) {
            this.id = id;
        }"
21048,getBean,"        public ItemInfo getBean() {
            return mItemInfo;
        }"
21049,refreshTime,"        public void refreshTime(long curTimeMillis) {
            if (null == mItemInfo || mItemInfo.getCountdown() <= 0) return;

            mCvCountdownView.updateShow(mItemInfo.getEndTime() - curTimeMillis);"
21050,bindData,"        public void bindData(ItemInfo itemInfo) {
            mItemInfo = itemInfo;

            if (itemInfo.getCountdown() > 0) {
                refreshTime(System.currentTimeMillis());"
21051,run,"            public void run() {
                if (mCountdownVHList.size() == 0) return;

                synchronized (mCountdownVHList) {"
21052,onViewRecycled,"        public void onViewRecycled(MyViewHolder holder) {
            super.onViewRecycled(holder);

            ItemInfo curAnnounceGoodsInfo = holder.getBean();
            if (null != curAnnounceGoodsInfo && curAnnounceGoodsInfo.getCountdown() > 0) {"
21053,getItemCount,"        public int getItemCount() {
            return mDatas.size();
        }"
21055,onCreateViewHolder,"        public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            return new MyViewHolder(LayoutInflater.from(mContext).inflate(R.layout.list_item, parent, false));
        }"
21056,cancelRefreshTime,"        public void cancelRefreshTime() {
            isCancel = true;
            if (null != mTimer) {
                mTimer.cancel();
            }"
21057,run,"                public void run() {
                    mHandler.post(mRefreshTimeRunnable);
                }"
21058,startRefreshTime,"        public void startRefreshTime() {
            if (!isCancel) return;

            if (null != mTimer) {
                mTimer.cancel();
            }
"
21059,onDestroy,"    public void onDestroy() {
        super.onDestroy();
        if (null != mMyAdapter) {
            mMyAdapter.cancelRefreshTime();"
21060,onPause,"    protected void onPause() {
        super.onPause();
        if (null != mMyAdapter) {
            mMyAdapter.cancelRefreshTime();"
21061,onResume,"    protected void onResume() {
        super.onResume();
        if (null != mMyAdapter) {
            mMyAdapter.startRefreshTime();"
21063,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_recyclerview);

        initData();

        FamiliarRecyclerView cvFamiliarRecyclerView = (FamiliarRecyclerView) findViewById(R.id.cv_familiarRecyclerView);"
21072,getCvCountdownView,"        public CountdownView getCvCountdownView() {
            return mCvCountdownView;
        }"
21074,refreshTime,"        public void refreshTime(long leftTime) {
            if (leftTime > 0) {
                mCvCountdownView.start(leftTime);"
21075,bindData,"        public void bindData(ItemInfo itemInfo) {
            mItemInfo = itemInfo;
            mTvTitle.setText(itemInfo.getTitle());
            refreshTime(mItemInfo.getEndTime() - System.currentTimeMillis());
        }"
21079,onBindViewHolder,"        public void onBindViewHolder(MyViewHolder holder, int position) {
            ItemInfo curItemInfo = mDatas.get(position);
            holder.bindData(curItemInfo);
        }"
21083,onEnd,"    public void onEnd(CountdownView cv) {
        Object tag = cv.getTag();
        if (null != tag) {
            Log.i(""wg"", ""tag = "" + tag.toString());"
21084,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, RecyclerViewActivity.class));
            }"
21085,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, ListViewActivity.class));
            }"
21086,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, DynamicShowActivity.class));
            }"
21087,onProgressUpdate,"            protected void onProgressUpdate(Long... values) {
                super.onProgressUpdate(values);
                mCvCountdownViewTest5.updateShow(values[0]);
            }"
21088,doInBackground,"            protected Void doInBackground(Void... params) {
                long time = 0;
                while (true) {
                    try {"
21098,getBean,"            public ItemInfo getBean() {
                return mItemInfo;
            }"
21099,refreshTime,"            public void refreshTime(long curTimeMillis) {
                if (null == mItemInfo || mItemInfo.getCountdown() <= 0) return;

                mCvCountdownView.updateShow(mItemInfo.getEndTime() - curTimeMillis);"
21100,bindData,"            public void bindData(ItemInfo itemInfo) {
                mItemInfo = itemInfo;

                if (itemInfo.getCountdown() > 0) {
                    refreshTime(System.currentTimeMillis());"
21101,initView,"            public void initView(View convertView) {
                mTvTitle = (TextView) convertView.findViewById(R.id.tv_title);
                mCvCountdownView = (CountdownView) convertView.findViewById(R.id.cv_countdownView);
            }"
21103,getView,"        public View getView(int position, View convertView, ViewGroup parent) {
            MyViewHolder holder;
            if (convertView == null) {
                convertView = LayoutInflater.from(mContext).inflate(R.layout.list_item, parent, false);
                holder = new MyViewHolder();
                holder.initView(convertView);
                convertView.setTag(holder);
            } else {"
21104,getItemId,"        public long getItemId(int position) {
            return position;
        }"
21105,getItem,"        public Object getItem(int position) {
            return mDatas.get(position);
        }"
21106,getCount,"        public int getCount() {
            return mDatas.size();
        }"
21114,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_listview);

        initData();

        ListView lvList = (ListView) findViewById(R.id.lv_list);"
21123,getCvCountdownView,"            public CountdownView getCvCountdownView() {
                return mCvCountdownView;
            }"
21125,refreshTime,"            public void refreshTime(long leftTime) {
                if (leftTime > 0) {
                    mCvCountdownView.start(leftTime);"
21126,bindData,"            public void bindData(ItemInfo itemInfo) {
                mItemInfo = itemInfo;
                mTvTitle.setText(itemInfo.getTitle());
                refreshTime(mItemInfo.getEndTime() - System.currentTimeMillis());
            }"
21130,dealWithLifeCycle,"        private void dealWithLifeCycle(final MyViewHolder holder, final int position) {
            holder.getCvCountdownView().addOnAttachStateChangeListener(new View.OnAttachStateChangeListener() {
"
21131,getView,"        public View getView(final int position, View convertView, ViewGroup parent) {
            final MyViewHolder holder;
            if (convertView == null) {
                convertView = LayoutInflater.from(mContext).inflate(R.layout.list_item, parent, false);
                holder = new MyViewHolder();
                holder.initView(convertView);
                convertView.setTag(holder);
            } else {"
21137,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowMillisecond = isChecked;
                if (isChecked && !DynamicShowActivity.this.isShowSecond) {
                    cbSecond.setChecked(true);"
21138,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowSecond = isChecked;
                if (!isChecked && DynamicShowActivity.this.isShowMillisecond) {
                    cbMillisecond.setChecked(false);"
21139,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowMinute = isChecked;
            }"
21140,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowHour = isChecked;
            }"
21141,onCheckedChanged,"            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                DynamicShowActivity.this.isShowDay = isChecked;
            }"
21144,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setSuffixDay(etSuffixDay.getText().toString())
                                    .setSuffixHour(etSuffixHour.getText().toString())
                                    .setSuffixMinute(etSuffixMinute.getText().toString())"
21145,onColorPicked,"                    public void onColorPicked(int pickedColor) {
                        DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                        dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setShowTimeBgBorder(true).setBorderColor(pickedColor));
                        mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
                    }"
21146,onClick,"            public void onClick(View v) {
                ColorPicker picker = new ColorPicker(DynamicShowActivity.this);
                picker.setOnColorPickListener(new ColorPicker.OnColorPickListener() {
                    @Override
                    public void onColorPicked(int pickedColor) {"
21147,onClick,"            public void onClick(View v) {
                if (bgBorderRadius == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setShowTimeBgBorder(true).setBorderRadius(--bgBorderRadius));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
21148,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setShowTimeBgBorder(true).setBorderRadius(++bgBorderRadius));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
21149,onClick,"            public void onClick(View v) {
                if (bgBorderSize == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setShowTimeBgBorder(true).setBorderSize(--bgBorderSize));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
21150,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setShowTimeBgBorder(true).setBorderSize(++bgBorderSize));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
21151,onColorPicked,"                    public void onColorPicked(int pickedColor) {
                        DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                        dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setShowTimeBgDivisionLine(true).setDivisionLineColor(pickedColor));
                        mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
                    }"
21153,onClick,"            public void onClick(View v) {
                if (bgRadius == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setRadius(--bgRadius));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
21154,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setRadius(++bgRadius));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
21155,onColorPicked,"                    public void onColorPicked(int pickedColor) {
                        DynamicConfig dynamicConfig = new DynamicConfig.Builder().setBackgroundInfo(new DynamicConfig.BackgroundInfo().setColor(pickedColor)).build();
                        mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);
                    }"
21157,onClick,"            public void onClick(View v) {
                if (timeBgSize == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setSize(--timeBgSize));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
21158,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setBackgroundInfo(new DynamicConfig.BackgroundInfo().setSize(++timeBgSize));
                mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());
            }"
21159,onClick,"            public void onClick(View v) {
                if (!isShowDay && !isShowHour && !isShowMinute && !isShowSecond && !isShowMillisecond) {
                    Toast.makeText(DynamicShowActivity.this, ""Select at least one item"", Toast.LENGTH_LONG).show();
                    return;
                }
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();"
21160,onClick,"            public void onClick(View v) {
                DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixGravity(DynamicConfig.SuffixGravity.BOTTOM).build();
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
21161,onClick,"            public void onClick(View v) {
                DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixGravity(DynamicConfig.SuffixGravity.CENTER).build();
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
21162,onClick,"            public void onClick(View v) {
                DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixGravity(DynamicConfig.SuffixGravity.TOP).build();
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
21163,onColorPicked,"                    public void onColorPicked(int pickedColor) {
                        DynamicConfig dynamicConfig = new DynamicConfig.Builder().setSuffixTextColor(pickedColor).build();
                        if (hasBackgroundCountdownView) {
                            mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
21165,onClick,"            public void onClick(View v) {
                if (timeTextSize == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setSuffixTextSize(--suffixTextSize);
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());"
21166,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setSuffixTextSize(++suffixTextSize);
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());"
21167,onColorPicked,"                    public void onColorPicked(int pickedColor) {
                        DynamicConfig dynamicConfig = new DynamicConfig.Builder().setTimeTextColor(pickedColor).build();
                        if (hasBackgroundCountdownView) {
                            mCvCountdownViewTestHasBg.dynamicShow(dynamicConfig);"
21169,onClick,"            public void onClick(View v) {
                if (timeTextSize == 0) return;
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setTimeTextSize(--timeTextSize);
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());"
21170,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                dynamicConfigBuilder.setTimeTextSize(++timeTextSize);
                if (hasBackgroundCountdownView) {
                    mCvCountdownViewTestHasBg.dynamicShow(dynamicConfigBuilder.build());"
21171,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                if (hasBackgroundCountdownView) {
                    DynamicConfig.BackgroundInfo backgroundInfo = new DynamicConfig.BackgroundInfo();
                    backgroundInfo.setColor(0xFF444444)"
21172,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                if (hasBackgroundCountdownView) {
                    DynamicConfig.BackgroundInfo backgroundInfo = new DynamicConfig.BackgroundInfo();
                    backgroundInfo.setColor(0xFFFF5000)"
21173,onClick,"            public void onClick(View v) {
                DynamicConfig.Builder dynamicConfigBuilder = new DynamicConfig.Builder();
                if (hasBackgroundCountdownView) {
                    DynamicConfig.BackgroundInfo backgroundInfo = new DynamicConfig.BackgroundInfo();
                    backgroundInfo.setColor(0xFFFF54BC)"
21175,onAllAnimatorEnd,"    public void onAllAnimatorEnd() {
        mView.onAnimEnd();
    }"
21176,onMoveEnd,"    public void onMoveEnd() {
        mEndNum++;
        if (mEndNum == mPellets.size()) {
            for (Letter l : mLetters) {"
21177,onAnimatorEnd,"    public void onAnimatorEnd() {
        mEndNum++;
        if (mEndNum == mPellets.size()) {
            if (isEnding) {"
21178,endAnim,"    public void endAnim() {
        isEnding = true;
    }"
21179,drawTheWorld,"    public void drawTheWorld(Canvas canvas) {
        for (Pellet p : mPellets) {
            p.drawSelf(canvas);
        }"
21180,addLetter,"    public void addLetter(Letter letter) {
        if (letter != null) {
            mLetters.add(letter);"
21181,addPellet,"    public void addPellet(Pellet pellet) {
        if (pellet != null) {
            mPellets.add(pellet);"
21182,showText,"    public void showText() {
        isEnding = true;
        mEndNum = 0;
        for (Pellet p : mPellets) {
            p.endAnim();"
21183,startPelletsAnim,"    public void startPelletsAnim() {
        isEnding = false;
        mEndNum = 0;
        for (Pellet p : mPellets) {
            p.startAnim();"
21186,setOnCoolAnimViewListener,"    public void setOnCoolAnimViewListener(OnCoolAnimViewListener onCoolAnimViewListener) {
        mOnCoolAnimViewListener = onCoolAnimViewListener;
    }"
21187,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if(!isInit){
            init();
            isInit = true;"
21188,onAnimEnd,"    public void onAnimEnd() {
        if (mOnCoolAnimViewListener != null) {
            mOnCoolAnimViewListener.onAnimEnd();"
21189,stopAnim,"    public void stopAnim() {
        if (mPelletMng != null) {
            mPelletMng.endAnim();"
21190,onAnimationRepeat,"            public void onAnimationRepeat(Animator animation) {
                invalidate();
            }"
21191,init,"    public void init() {
        mWidth = getMeasuredWidth();
        mHeight = getMeasuredHeight();

        mCenterX = (int) (getTranslationX() + mWidth/2);
        mCenterY = (int) (getTranslationY() + mHeight/2);

        mPelletMng = new PelletManager(this, mCenterX, mCenterY);

        mAnimator = ValueAnimator.ofInt(0, 1).setDuration(16);
        mAnimator.setRepeatCount(ValueAnimator.INFINITE);"
21192,measureDimension,"    public int measureDimension(int defaultSize, int measureSpec) {
        int result;

        int specMode = MeasureSpec.getMode(measureSpec);
        int specSize = MeasureSpec.getSize(measureSpec);

        if (specMode == MeasureSpec.EXACTLY) {"
21193,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        int width = measureDimension(WIDTH_DEFAULT, widthMeasureSpec);
        int height = measureDimension(HEIGHT_DEFAULT, heightMeasureSpec);
        setMeasuredDimension(width, height);
    }"
21194,getPhysicalNode,"    public T getPhysicalNode() {
        return physicalNode;
    }"
21195,isVirtualNodeOf,"    public boolean isVirtualNodeOf(T pNode) {
        return physicalNode.getKey().equals(pNode.getKey());
    }"
21196,getKey,"    public String getKey() {
        return physicalNode.getKey() + ""-"" + replicaIndex;
    }"
21198,goRoute,"    private static void goRoute(ConsistentHashRouter<MyServiceNode> consistentHashRouter ,String ... requestIps){
        for (String requestIp: requestIps) {
            System.out.println(requestIp + "" is route to "" + consistentHashRouter.routeNode(requestIp));"
21200,toString,"    public String toString(){
        return getKey();
    }"
21201,getKey,"    public String getKey() {
        return idc + ""-""+ip+"":""+port;
    }"
21203,num2ip,"    private static String num2ip(int ip) {
        int[] b = new int[4];
        String x = """";

        b[0] = (int) ((ip >> 24) & 0xff);
        b[1] = (int) ((ip >> 16) & 0xff);
        b[2] = (int) ((ip >> 8) & 0xff);
        b[3] = (int) (ip & 0xff);
        x = Integer.toString(b[0]) + ""."" + Integer.toString(b[1]) + ""."" + Integer.toString(b[2]) + ""."" + Integer.toString(b[3]);
"
21205,goRoute,"    private static TreeMap<String, AtomicInteger> goRoute(ConsistentHashRouter<MyServiceNode> consistentHashRouter , String ... requestIps){
        TreeMap<String, AtomicInteger> res = new TreeMap<>();
        for (String requestIp: requestIps) {
            MyServiceNode mynode  = consistentHashRouter.routeNode(requestIp);
            res.putIfAbsent(mynode.getKey(), new AtomicInteger());"
21207,hash,"        public long hash(String key) {
            instance.reset();
            instance.update(key.getBytes());
            byte[] digest = instance.digest();

            long h = 0;
            for (int i = 0; i < 4; i++) {
                h <<= 8;"
21208,getExistingReplicas,"    public int getExistingReplicas(T pNode) {
        int replicas = 0;
        for (VirtualNode<T> vNode : ring.values()) {
            if (vNode.isVirtualNodeOf(pNode)) {
                replicas++;"
21209,routeNode,"    public T routeNode(String objectKey) {
        if (ring.isEmpty()) {
            return null;
        }
        Long hashVal = hashFunction.hash(objectKey);
        SortedMap<Long,VirtualNode<T>> tailMap = ring.tailMap(hashVal);
        Long nodeHashVal = !tailMap.isEmpty() ? tailMap.firstKey() : ring.firstKey();"
21210,removeNode,"    public void removeNode(T pNode) {
        Iterator<Long> it = ring.keySet().iterator();
        while (it.hasNext()) {
            Long key = it.next();"
21211,addNode,"    public void addNode(T pNode, int vNodeCount) {
        if (vNodeCount < 0) throw new IllegalArgumentException(""illegal virtual node counts :"" + vNodeCount);
        int existingReplicas = getExistingReplicas(pNode);
        for (int i = 0; i < vNodeCount; i++) {
            VirtualNode<T> vNode = new VirtualNode<>(pNode, i + existingReplicas);"
21212,configure,"    public void configure(WebSecurity web) {
        web.ignoring().antMatchers(""/v2/api-docs"", ""/configuration/ui"", ""/swagger-resources/**"", ""/configuration/**"",
                ""/swagger-ui**"", ""/webjars/**"", ""/lms/**"""
21213,authenticationManagerBean,"    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }"
21214,configure,"    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
    }"
21215,configure,"    protected void configure(HttpSecurity http) throws Exception {
        http
                .csrf().disable()"
21217,prepareResponse,"    public VerifyFacesResponse prepareResponse(ProcessImageParams processImageParams) {
        String facePlugins = processImageParams.getFacePlugins();
        if (isEmpty(facePlugins) || !facePlugins.contains(CALCULATOR)) {
            this.getProcessFileData().setEmbedding(null);
            this.faceMatches.forEach(fm -> fm.setEmbedding(null));
        }"
21220,verifyEmbeddings,"    public EmbeddingsVerificationProcessResponse verifyEmbeddings(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(X_FRS_API_KEY_HEADER)
            final String apiKey,
            @RequestBody
            @Valid"
21221,verifyBase64,"    public Map<String, List<VerifyFacesResponse>> verifyBase64(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(X_FRS_API_KEY_HEADER)
            final String apiKey,
            @ApiParam(value = LIMIT_DESC, example = NUMBER_VALUE_EXAMPLE)
            @RequestParam(defaultValue = LIMIT_DEFAULT_VALUE, required = false)"
21222,verify,"    public Map<String, List<VerifyFacesResponse>> verify(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(X_FRS_API_KEY_HEADER)
            final String apiKey,
            @ApiParam(value = SOURCE_IMAGE_DESC, required = true)
            @RequestParam(name = SOURCE_IMAGE)"
21223,cannotAcceptWrongRole,"    public void cannotAcceptWrongRole() {
        val actual = validator.validate(UserRoleUpdateDto.builder()
                                                         .role(""WRONG_VALUE"")
                                                         .userId(""test"")"
21224,testUserRoleUpdateDto,"    public void testUserRoleUpdateDto() {
        val actual = validator.validate(UserRoleUpdateDto.builder()
                                                         .role(""USER"")
                                                         .userId(""test"")"
21225,testUserRoleUpdateDtoEmpty,"    public void testUserRoleUpdateDtoEmpty() {
        val actual = validator.validate(UserRoleUpdateDto.builder().build());

        assertThat(actual).isNotEmpty();"
21226,deleteUserIfExists,"    private void deleteUserIfExists(final String email) {
        val user = userRepository.findByEmail(email);
        user.ifPresent(value -> userRepository.delete(value));
    }"
21227,confirmRegistration,"    private void confirmRegistration(final String regToken) {
        userService.confirmRegistration(regToken);
    }"
21228,createUser,"    private void createUser(final String email) {
        val user = UserCreateDto.builder()
                .email(email)
                .firstName(""first_name"")"
21229,createAndEnableUser,"    private void createAndEnableUser(final String email) {
        val regToken = UUID.randomUUID().toString();
        when(userService.generateRegistrationToken()).thenReturn(regToken);
        createUser(email);
        confirmRegistration(regToken);
    }"
21231,autocompleteReturnsUsers,"    void autocompleteReturnsUsers() {
        createUser(USER_EMAIL);
        createUser(USER_EMAIL_2);

        val actual = userService.autocomplete(USER_EMAIL_PART);
"
21232,autocompleteReturnsEmptyList,"    void autocompleteReturnsEmptyList() {
        val actual = userService.autocomplete("""");

        assertThat(actual).isEmpty();"
21233,getUserByGuidThrowsExceptionIfNoUser,"    void getUserByGuidThrowsExceptionIfNoUser() {
        assertThatThrownBy(() -> userService.getUserByGuid(
                USER_GUID"
21234,getUserByGuidReturnsUser,"    void getUserByGuidReturnsUser() throws NotFoundException {
        createUser(USER_EMAIL);
        Optional<User> byEmail = userRepository.findByEmail(USER_EMAIL);
        val createdUser = byEmail.orElseThrow(()->new NotFoundException(USER_WITH_THIS_EMAIL_NOT_FOUND+USER_EMAIL));

        val actual = userService.getUserByGuid(createdUser.getGuid());
"
21235,getUserByEmailThrowsExceptionIfNoUser,"    void getUserByEmailThrowsExceptionIfNoUser() {
        assertThatThrownBy(() -> userService.getUser(
                USER_EMAIL"
21236,getUserByEmailReturnsUser,"    void getUserByEmailReturnsUser() {
        createUser(USER_EMAIL);

        val actual = userService.getUser(USER_EMAIL);
"
21237,getEnabledUserByEmailThrowsExceptionIfUserIsDisabled,"    void getEnabledUserByEmailThrowsExceptionIfUserIsDisabled() throws NotFoundException {
        createUser(DISABLED_USER_EMAIL);

        Optional<User> byEmail = userRepository.findByEmail(DISABLED_USER_EMAIL);
        val disabledUser = byEmail.orElseThrow(() -> new NotFoundException(USER_WITH_THIS_EMAIL_NOT_FOUND + DISABLED_USER_EMAIL));

        assertThat(disabledUser).isNotNull();
        assertThat(disabledUser.isEnabled()).isFalse();"
21238,getEnabledUserByEmailReturnsActiveUser,"    void getEnabledUserByEmailReturnsActiveUser() {
        createAndEnableUser(ENABLED_USER_EMAIL);

        val enabledUser = userService.getEnabledUserByEmail(ENABLED_USER_EMAIL);

        assertThat(enabledUser).isNotNull();"
21239,cleanDB,"    void cleanDB() {
        deleteUserIfExists(ENABLED_USER_EMAIL);
        deleteUserIfExists(DISABLED_USER_EMAIL);
        deleteUserIfExists(USER_EMAIL);
        deleteUserIfExists(USER_EMAIL_2);
    }"
21243,makeUser,"        private User makeUser(final long globalUserId) {
            return User.builder()
                       .id(globalUserId)"
21244,exceptionWhenWrongReplacerParamIsPassed,"        void exceptionWhenWrongReplacerParamIsPassed() {
            assertThatThrownBy(() -> UserDeleteDto.builder()
                                                  .replacer(Replacer.from(""wrong_param""))"
21247,createsUserWithLowerCaseEmail,"    void createsUserWithLowerCaseEmail() {
        when(userRepositoryMock.save(any())).thenAnswer(returnsFirstArg());
        val userCreateDto = UserCreateDto.builder()
                                         .email(""Email@example.COm"")
                                         .password(""password"")
                                         .firstName(""firstName"")"
21249,confirmRegistrationReturns403WhenTokenIsExpired,"    void confirmRegistrationReturns403WhenTokenIsExpired() {
        assertThatThrownBy(() ->
                userService.confirmRegistration(EXPIRED_TOKEN)"
21250,cannotCreateNewUserWithoutLastName,"    void cannotCreateNewUserWithoutLastName() {
        val userWithoutFirstName = UserCreateDto.builder()
                                                .email(""email@example.com"")
                                                .password(""password"")"
21251,cannotCreateNewUserWithoutFirstName,"    void cannotCreateNewUserWithoutFirstName() {
        val userWithoutFirstName = UserCreateDto.builder()
                                                .email(""email@example.com"")
                                                .password(""password"")"
21252,cannotCreateNewUserWithIncorrectEmail,"    void cannotCreateNewUserWithIncorrectEmail() {
        val userWithIncorrectEmial = UserCreateDto.builder()
                                                  .email(""wrong_email"")
                                                  .password(""password"")"
21253,successUpdateUser,"    void successUpdateUser() {
        val repoUser = User.builder()
                           .id(USER_ID)
                           .email(""email"")
                           .password(""password"")
                           .firstName(""firstName"")
                           .lastName(""lastName"")
                           .build();
"
21254,failCreateUserDuplicateEmail,"    void failCreateUserDuplicateEmail() {
        val userCreateDto = UserCreateDto.builder()
                                         .email(""email@example.com"")
                                         .password(""password"")
                                         .firstName(""firstName"")"
21255,failCreateUserEmptyEmail,"    void failCreateUserEmptyEmail() {
        val userCreateDto = UserCreateDto.builder()
                                         .email("""")
                                         .password(""password"")"
21256,failCreateUserEmptyPassword,"    void failCreateUserEmptyPassword() {
        val userCreateDto = UserCreateDto.builder()
                                         .email(""email@example.com"")
                                         .password("""")"
21259,failGetUser,"    void failGetUser() {
        when(userRepositoryMock.findById(anyLong())).thenReturn(Optional.empty());

        assertThatThrownBy(() -> userService.getUser("
21260,successGetUser,"    void successGetUser() {
        val user = User.builder()
                       .id(USER_ID)
                       .build();

        when(userRepositoryMock.findById(anyLong())).thenReturn(Optional.of(user));"
21261,setUp,"    void setUp() {
        initMocks(this);
    }"
21263,findByRegistrationToken,"    Optional<User> findByRegistrationToken(String token);
"
21264,deleteByEnabledFalseAndRegTimeBefore,"    int deleteByEnabledFalseAndRegTimeBefore(LocalDateTime time);
"
21271,findByEmailAndEnabledTrue,"    Optional<User> findByEmailAndEnabledTrue(String email);
"
21272,findByEmail,"    Optional<User> findByEmail(String email);
"
21273,toResponseDto,"    List<UserResponseDto> toResponseDto(List<User> entities);
}"
21274,toResponseDto,"    UserResponseDto toResponseDto(User entity);
"
21276,toUserRoleResponseDto,"    List<UserRoleResponseDto> toUserRoleResponseDto(List<User> userAppRoles);
}"
21277,toUserRoleResponseDto,"    UserRoleResponseDto toUserRoleResponseDto(User userAppRole);
"
21278,shouldReturnOkWhenUserNotEnabled,"    void shouldReturnOkWhenUserNotEnabled() throws Exception {
        val createDto = new UserCreateDto(""email"", ""name"", ""last"", ""password"", false);

        val createRequest = post(ADMIN + ""/user/register"")
                .with(csrf())
                .with(user(buildUser()))"
21279,shouldReturnErrorMessageWhenNoUser,"    void shouldReturnErrorMessageWhenNoUser() throws Exception {
        val expectedContent = ""{\""message\"":\"""" + AccessDeniedException.MESSAGE + ""\"",\""code\"":1}"";

        val createNewModelRequest = get(ADMIN + ""/user/me"")
                .with(csrf())
                .with(user(buildUser()))"
21280,shouldReturnSendRedirect,"    void shouldReturnSendRedirect() throws Exception {
        val createRequest = get(ADMIN + ""/user/registration/confirm"")
                .with(csrf())
                .with(user(buildUser()))"
21287,verifyChangePasswordValidationExceptionsProvider,"    static Stream<Arguments> verifyChangePasswordValidationExceptionsProvider() {
        return Stream.of(
                Arguments.of("""", """"),"
21288,shouldReturnErrorMessageWhenUpdateLastNameIsEmpty,"    void shouldReturnErrorMessageWhenUpdateLastNameIsEmpty() throws Exception {
        val expectedContent = ""{\""message\"":\"""" + String.format(EmptyRequiredFieldException.MESSAGE, ""lastName"") + ""\"",\""code\"":26}"";
        val bodyWithEmptyLastName = new UserUpdateDto();
        bodyWithEmptyLastName.setFirstName(""gdsag"");

        val createNewModelRequest = put(ADMIN + ""/user/update"")
                .with(csrf())"
21289,shouldReturnErrorMessageWhenUpdateFirstNameIsEmpty,"    void shouldReturnErrorMessageWhenUpdateFirstNameIsEmpty() throws Exception {
        val expectedContent = ""{\""message\"":\"""" + String.format(EmptyRequiredFieldException.MESSAGE, ""firstName"") + ""\"",\""code\"":26}"";
        val bodyWithEmptyFirstName = new UserUpdateDto();
        bodyWithEmptyFirstName.setLastName(""gdsag"");

        val createNewModelRequest = put(ADMIN + ""/user/update"")
                .with(csrf())"
21290,redirectToLoginPage,"    private void redirectToLoginPage(final HttpServletResponse response) throws IOException {
        response.setStatus(FOUND.value());
        val url = env.getProperty(""host.frs"") + ""/login"";
        response.sendRedirect(url);
    }"
21291,resetPassword,"    public void resetPassword(
            @ApiParam(value = ""A new user password"", required = true)
            @Valid
            @RequestBody"
21292,assignAndSendResetPasswordToken,"    public void assignAndSendResetPasswordToken(
            @ApiParam(value = ""An email of a user"", required = true)
            @Valid"
21293,getUsers,"    public List<UserRoleResponseDto> getUsers(
    ) {
        return userGlobalRoleMapper.toUserRoleResponseDto("
21294,getGlobalRolesToAssign,"    public GlobalRole[] getGlobalRolesToAssign(
    ) {
        return userService.getGlobalRolesToAssign(SecurityUtils.getPrincipalId());"
21295,getGlobalRoles,"    public GlobalRole[] getGlobalRoles() {
        return GlobalRole.values();
    }"
21296,updateUserGlobalRole,"    public UserRoleResponseDto updateUserGlobalRole(
            @ApiParam(value = ""User role data"", required = true)
            @Valid
            @RequestBody
            final UserRoleUpdateDto userRoleUpdateDto"
21297,getDemoModel,"    public Map<String, String> getDemoModel() {
        if (!userService.hasOnlyDemoUser()) {
            throw new DemoNotAvailableException();
        }"
21298,confirmRegistration,"    public void confirmRegistration(
            @RequestParam
            final String token, final HttpServletResponse response) throws IOException {
        userService.confirmRegistration(token);"
21299,autocomplete,"    public UserAutocompleteDto autocomplete(
            @RequestParam
            final String query) {
        val results = userMapper.toResponseDto(userService.autocomplete(query));"
21300,deleteUser,"    public void deleteUser(
            @ApiParam(value = ""GUID of the user being deleted"", required = true, example = GUID_EXAMPLE)
            @PathVariable
            final String userGuid,"
21301,updateUser,"    public UserResponseDto updateUser(
            @ApiParam(value = ""User data that needs to be updated"", required = true)
            @RequestBody"
21302,createUser,"    public ResponseEntity<Void> createUser(
            @ApiParam(value = ""User object that needs to be created"", required = true)
            @RequestBody
            @Valid
            final UserCreateDto userCreateDto"
21303,changePassword,"    public void changePassword(
            @ApiParam(value = ""Old and new passwords DTO"", required = true)
            @RequestBody"
21304,getUser,"    public UserResponseDto getUser() {
        try {
            val user = userService.getUser(SecurityUtils.getPrincipalId());"
21305,setEnv,"    public void setEnv(Environment env) {
        this.env = env;
    }"
21306,toUserRoleResponseDto,"    List<UserRoleResponseDto> toUserRoleResponseDto(List<UserAppRole> userAppRoles);
}"
21307,toUserRoleResponseDto,"    UserRoleResponseDto toUserRoleResponseDto(UserAppRole userAppRole);
"
21308,getUsername,"    public String getUsername() {
        return email;
    }"
21309,getAuthorities,"    public List<GrantedAuthority> getAuthorities() {
        return emptyList();
    }"
21311,getLogLevel,"    public LogLevel getLogLevel() {
        return LogLevel.DEBUG;
    }"
21312,lockByName,"    TableLock lockByName(@Param(""lockName"") TableLockName lockName);
}"
21313,swaggerApi,"    public Docket swaggerApi() {
        return new Docket(DocumentationType.SWAGGER_2)
                .groupName(""api"")"
21314,findFacesResponse,"    private static FindFacesResponse findFacesResponse(int faceCount) {
        return FindFacesResponse.builder()
                .result("
21316,verifyEmbedding_ThereAreNoTargets_ShouldThrowWrongEmbeddingCountException,"    void verifyEmbedding_ThereAreNoTargets_ShouldThrowWrongEmbeddingCountException() {
        var params = ProcessEmbeddingsParams.builder()
                                            .embeddings(new double[][]{})
                                            .build();"
21319,tooManyFacesFound,"    void tooManyFacesFound() {
        var subjectName = ""subject_name"";
        var detProbThreshold = 0.7;
        MultipartFile file = new MockMultipartFile(""anyname"", new byte[]{0xA});

        when(facesApiClient.findFacesWithCalculator(file, MAX_FACES_TO_RECOGNIZE, detProbThreshold, null, true))
                .thenReturn(findFacesResponse(3));
"
21321,testUpdateSubjectNameSuccess,"    void testUpdateSubjectNameSuccess(String oldSubjectName, String newSubjectName) {
        when(subjectDao.updateSubjectName(API_KEY, oldSubjectName, newSubjectName)).thenReturn(true);

        final boolean updated = subjectService.updateSubjectName(API_KEY, oldSubjectName, newSubjectName);
        assertThat(updated).isTrue();
"
21322,subjectNamePairsSuccess,"    static Stream<Arguments> subjectNamePairsSuccess() {
        return Stream.of(
                Arguments.of(""old"", ""new""),"
21323,testUpdateSubjectNameFailed,"    void testUpdateSubjectNameFailed(String oldSubjectName, String newSubjectName) {
        final boolean updated = subjectService.updateSubjectName(API_KEY, oldSubjectName, newSubjectName);
        assertThat(updated).isFalse();
        verifyNoInteractions(subjectDao, embeddingCacheProvider);
    }"
21324,subjectNamePairsFailed,"    static Stream<Arguments> subjectNamePairsFailed() {
        return Stream.of(
                Arguments.of(""old"", ""old""),"
21325,testRemoveSubjectEmbedding,"    void testRemoveSubjectEmbedding() {
        var embeddingId = UUID.randomUUID();

        when(subjectDao.removeSubjectEmbedding(API_KEY, embeddingId)).thenReturn(new Embedding());

        subjectService.removeSubjectEmbedding(API_KEY, embeddingId);
"
21327,testRemoveAllSubjectEmbeddings,"    void testRemoveAllSubjectEmbeddings() {
        var subjectName = ""subject_name"";

        when(subjectDao.removeAllSubjectEmbeddings(API_KEY, subjectName)).thenReturn(1);

        subjectService.removeAllSubjectEmbeddings(API_KEY, subjectName);
"
21330,processTarget,"    private EmbeddingVerificationProcessResult processTarget(double[] target, UUID sourceId, String apiKey) {
        double similarity = predictor.verify(apiKey, target, sourceId);
        float scaledSimilarity = BigDecimal.valueOf(similarity).setScale(5, HALF_UP).floatValue();
        return new EmbeddingVerificationProcessResult(target, scaledSimilarity);
    }"
21334,saveCalculatedEmbedding,"    public Pair<Subject, Embedding> saveCalculatedEmbedding(
            final MultipartFile file,
            final String subjectName,
            final Double detProbThreshold,"
21335,saveCalculatedEmbedding,"    public Pair<Subject, Embedding> saveCalculatedEmbedding(
            final String base64photo,
            final String subjectName,
            final Double detProbThreshold,"
21337,removeSubjectEmbeddings,"    public List<Embedding> removeSubjectEmbeddings(final String apiKey, final List<UUID> embeddingIds){
        List<Embedding> result = new ArrayList<>();
        for (UUID id: embeddingIds) {
            try {
                result.add(removeSubjectEmbedding(apiKey, id));"
21340,deleteSubjectByName,"    public Pair<Integer, Subject> deleteSubjectByName(final String apiKey, final String subjectName) {
        if (StringUtils.isBlank(subjectName)) {
            return Pair.of(deleteSubjectsByApiKey(apiKey), null);"
21341,removeAllSubjectEmbeddings,"    public int removeAllSubjectEmbeddings(final String apiKey, final String subjectName) {
        int removed;
        if (StringUtils.isNotEmpty(subjectName)) {
            removed = subjectDao.removeAllSubjectEmbeddings(apiKey, subjectName);
            if (removed > 0) {"
21344,getSubjectsNames,"    public Collection<String> getSubjectsNames(final String apiKey) {
        return subjectDao.getSubjectNames(apiKey);
    }"
21345,testDeleteByApiKey,"    void testDeleteByApiKey() {
        var model = dbHelper.insertModel();
        int count = 3;
        for (int i = 0; i < count; i++) {
            dbHelper.insertSubject(model, ""subject"" + i);
        }"
21346,testFindByApiKeyAndSubjectNameIgnoreCase,"    void testFindByApiKeyAndSubjectNameIgnoreCase() {
        var model = dbHelper.insertModel();
        var subject = dbHelper.insertSubject(model, ""subJect"");

        final List<String> list = List.of(""subJECT"", ""SUBJECT"", ""subject"", ""subJect"");
        for (String variant : list) {
            final Optional<Subject> subjectOptional = subjectRepository.findByApiKeyAndSubjectNameIgnoreCase(model.getApiKey(), variant);"
21347,testGetSubjectNames,"    void testGetSubjectNames() {
        var model = dbHelper.insertModel();
        var subject1 = dbHelper.insertSubject(model, ""subject1"");
        var subject2 = dbHelper.insertSubject(model, ""subject2"");

        assertThat(subjectRepository.getSubjectNames(model.getApiKey())).contains(subject1.getSubjectName(), subject2.getSubjectName());"
21348,testFindByApiKey,"    void testFindByApiKey() {
        var model = dbHelper.insertModel();
        var subject1 = dbHelper.insertSubject(model, ""subject1"");
        var subject2 = dbHelper.insertSubject(model, ""subject2"");

        assertThat(subjectRepository.findByApiKey(model.getApiKey())).contains(subject1, subject2);"
21350,deleteByApiKey,"    int deleteByApiKey(@Param(""apiKey"") String apiKey);
"
21351,findByApiKeyAndSubjectNameIgnoreCase,"    Optional<Subject> findByApiKeyAndSubjectNameIgnoreCase(String apiKey, String subjectName);
"
21352,getSubjectNames,"    Collection<String> getSubjectNames(String apiKey);
"
21353,findByApiKey,"    List<Subject> findByApiKey(String apiKey);
"
21354,deleteSubjects,"    public Map<String, Object> deleteSubjects(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(X_FRS_API_KEY_HEADER)"
21355,deleteSubject,"    public Map<String, Object> deleteSubject(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(X_FRS_API_KEY_HEADER)"
21356,renameSubject,"    public Map<String, Object> renameSubject(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(X_FRS_API_KEY_HEADER)"
21357,listSubjects,"    public Map<String, Object> listSubjects(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(X_FRS_API_KEY_HEADER)"
21358,createSubject,"    public SubjectDto createSubject(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(X_FRS_API_KEY_HEADER)
            final String apiKey,"
21364,cleanUp,"    void cleanUp() {
        userRepository.deleteAll();
        modelRepository.deleteAll();

        userRepository.flush();
        modelRepository.flush();"
21365,sendStatistics,"    private void sendStatistics(List<StatisticsFacesEntity> statistics) {
        try {
            statistics"
21366,getSubjectRange,"    private String getSubjectRange(Long subjectCount) {
        if (subjectCount == null || subjectCount == 0) {
            return ""0"";
        }"
21367,createStatistic,"    private StatisticsFacesEntity createStatistic(String installInfoGuid, ModelSubjectProjection subjectCount) {
        return new StatisticsFacesEntity(
                installInfoGuid,"
21368,createStatistics,"    private List<StatisticsFacesEntity> createStatistics(String installInfoGuid, List<ModelSubjectProjection> subjectCountPerModel) {
        return subjectCountPerModel.stream()
                                   .map(subjectCount -> createStatistic(installInfoGuid, subjectCount))"
21369,areStatisticsAllowed,"    private boolean areStatisticsAllowed() {
        if (isNotBlank(apperyApiKey)) {
            User owner = userRepository.findByGlobalRole(OWNER);"
21370,recordStatistics,"    public void recordStatistics() {
        boolean statisticsAreNotAllowed = !areStatisticsAllowed();
        if (statisticsAreNotAllowed) {
            log.info(""Statistics are not allowed"");
            return;
        }

        List<ModelSubjectProjection> subjectCountPerModel = modelRepository.getModelSubjectsCount();
        InstallInfo installInfo = installInfoRepository.findTopByOrderByInstallGuid();"
21371,getImg,"    void getImg() throws Exception {
        var model = dbHelper.insertModel();
        var subject = dbHelper.insertSubject(model, ""subject"");
        var embedding = dbHelper.insertEmbeddingWithImg(subject);

        var imgOptional = imgRepository.findById(embedding.getImg().getId());
        assertThat(imgOptional).isPresent();

        var img = imgOptional.get();
        assertThat(img.getContent()).isNotNull().isNotEmpty();"
21372,downloadImg,"    public byte[] downloadImg(
                              @ApiParam(value = API_KEY_DESC, required = true)
                              @PathVariable(""apiKey"")
                              final String apiKey,"
21373,validate,"    public ValidationErrors validate(final Database database) {
        return null;
    }"
21374,setFileOpener,"    public void setFileOpener(final ResourceAccessor resourceAccessor) {
"
21375,setUp,"    public void setUp() throws SetupException {
"
21376,getConfirmationMessage,"    public String getConfirmationMessage() {
        return null;
    }"
21377,setTokenExpiration,"    private int setTokenExpiration(final JdbcConnection connection, final String sql, final int tokenValidity)
            throws DatabaseException, SQLException {
        try (PreparedStatement statement = connection.prepareStatement(sql)) {"
21378,setRefreshTokenExpiration,"    private void setRefreshTokenExpiration(final JdbcConnection connection)
            throws DatabaseException, SQLException {
        int updateCount = setTokenExpiration(
                connection,"
21379,setAccessTokenExpiration,"    private void setAccessTokenExpiration(final JdbcConnection connection)
            throws DatabaseException, SQLException {
        int updateCount = setTokenExpiration(
                connection,"
21380,execute,"    public void execute(final Database database) throws CustomChangeException {
        try {
            JdbcConnection connection = (JdbcConnection) database.getConnection();"
21381,getPrincipalId,"    public Long getPrincipalId() {
        return getPrincipal().getId();
    }"
21382,getPrincipal,"    public User getPrincipal() {
        return (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    }"
21383,isAccessTokenBlank,"    private boolean isAccessTokenBlank(HttpServletRequest request) {
        val cookie = WebUtils.getCookie(request, ACCESS_TOKEN_COOKIE_NAME);
        val cookieValue = Optional.ofNullable(cookie)
                                  .map(Cookie::getValue)
                                  .orElse(EMPTY);"
21384,buildEmptyCookie,"    private String buildEmptyCookie(String name, String path) {
        return ResponseCookie.from(name, EMPTY)
                             .httpOnly(true)"
21386,configure,"    public void configure(ResourceServerSecurityConfigurer resources) {
        CookieTokenExtractor tokenExtractor = new CookieTokenExtractor();
        resources.resourceId(""authorization"")
                 .tokenStore(jdbcTokenStore)"
21387,configure,"    public void configure(HttpSecurity http) throws Exception {
        http.csrf()
            .disable()"
21388,buildMailBody,"    private String buildMailBody(UUID token) {
        return String.format(emailMessage, env.getProperty(""host.frs""), token.toString());
    }"
21391,shouldThrowInvalidResetPasswordTokenExceptionWhenInvalidTokenProvided,"    void shouldThrowInvalidResetPasswordTokenExceptionWhenInvalidTokenProvided() {
        var invalidToken = ""qqq-www-eee-rrr-ttt"";

        var tokensBefore = tokenRepository.findAll();

        assertThatThrownBy(() -> tokenService.exchangeTokenOnUser(invalidToken))
                .isInstanceOf(InvalidResetPasswordTokenException.class)
                .hasMessageContaining(""The reset password token is invalid!"");"
21397,deleteAllByExpiresInBefore,"    void deleteAllByExpiresInBefore(LocalDateTime dateTime);
}"
21399,from,"    public static Replacer from(final String text) {
        val invalidValue = text == null || !EnumUtils.isValidEnum(Replacer.class, text.toUpperCase());

        if (invalidValue) {
            throw new IllegalReplacerException(text);"
21404,getParams,"    private Map<String, String> getParams() {
        return Map.of(
                ""primaryKey"", primaryKeyColumn,"
21405,validateTargetValue,"    private boolean validateTargetValue(final String value, final List<String> values) {
        return StringUtils.isNotBlank(value) && !values.contains(value);
    }"
21406,updateTargets,"    private void updateTargets(final List<Target> targets,
                               final List<Target> cleanedTargets,
                               final JdbcConnection connection) throws DatabaseException, SQLException {
        String sql = StringSubstitutor.replace(UPDATE_SQL_TEMPLATE, getParams(), PREFIX, SUFFIX);
        List<String> targetValues = targets.stream().map(Target::getValue).collect(Collectors.toList());"
21407,cleanTargets,"    private List<Target> cleanTargets(final List<Target> targets) {
        List<Target> cleanedTargets = new ArrayList<>();
        for (Target target : targets) {
            Matcher matcher = SPECIAL_CHARACTERS_PATTERN.matcher(target.getValue());
            if (matcher.find()) {"
21408,getRowCount,"    private int getRowCount(final JdbcConnection connection) throws DatabaseException, SQLException {
        String sql = StringSubstitutor.replace(COUNT_SQL_TEMPLATE, getParams(), PREFIX, SUFFIX);
        try (Statement statement = connection.createStatement()) {
            ResultSet resultSet = statement.executeQuery(sql);"
21409,getAllTargets,"    private List<Target> getAllTargets(final JdbcConnection connection) throws DatabaseException, SQLException {
        String sql = StringSubstitutor.replace(SELECT_SQL_TEMPLATE, getParams(), PREFIX, SUFFIX);
        try (Statement statement = connection.createStatement()) {
            int rowCount = getRowCount(connection);"
21411,recognizeBase64,"    void recognizeBase64() throws Exception {
        val findFacesResponse = FindFacesResponse.builder()
                .result(List.of(FindFacesResult.builder()
                        .embedding(new Double[]{1.0})
                        .box(new FacesBox().setProbability(1D))
                        .build()
                ))
                .build();
"
21412,recognize,"    void recognize() throws Exception {
        val mockFile = new MockMultipartFile(""file"", ""test data"".getBytes());
        val findFacesResponse = FindFacesResponse.builder()
                .result(List.of(FindFacesResult.builder()
                        .embedding(new Double[]{1.0})
                        .box(new FacesBox().setProbability(1D))
                        .build()
                ))"
21413,recognizeEmbeddings,"    public EmbeddingsRecognitionProcessResponse recognizeEmbeddings(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(X_FRS_API_KEY_HEADER)
            final String apiKey,"
21414,recognizeBase64,"    public FacesRecognitionResponseDto recognizeBase64(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(X_FRS_API_KEY_HEADER)
            final String apiKey,"
21415,recognize,"    public FacesRecognitionResponseDto recognize(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(X_FRS_API_KEY_HEADER)
            final String apiKey,"
21416,notifyCacheChange,"    public void notifyCacheChange(CacheActionDto cacheActionDto) {
        try {
            Statement statement = this.connection.createStatement();"
21417,setUp,"    public void setUp() {
        try {
            this.connection = (PGConnection) pgNotificationDatasource.getConnection();"
21418,synchronizeCacheWithNotification,"    private void synchronizeCacheWithNotification(String payload) {

        try {"
21419,closed,"            public void closed() {
                log.info(""face_collection_update_msg closed"");
            }"
21420,notification,"            public void notification(int processId, String channelName, String payload) {
                log.info(String.format(""/channels3/ channel name: %1$s payload %2$s"", channelName, payload));
                if (channelName.equals(""face_collection_update_msg"")) {
                    synchronizeCacheWithNotification(payload);"
21421,setUpNotification,"    public void setUpNotification() {

        listener = new PGNotificationListener() {

            @Override"
21422,pgNotificationDatasource,"    public PGDataSource pgNotificationDatasource(DataSourceProperties dataSourceProperties) {
        String pgsqlUrl = dataSourceProperties.getUrl().replace(""postgresql"", ""pgsql"");
        dataSourceProperties.setUrl(pgsqlUrl);

        PGDataSource dataSource = dataSourceProperties.initializeDataSourceBuilder().type(PGDataSource.class).build();
        dataSource.setHousekeeper(false);
"
21424,transferTo,"    public void transferTo(File dest) throws IOException, IllegalStateException {
        try (FileOutputStream fos = new FileOutputStream(dest)) {
            fos.write(content);"
21425,getInputStream,"    public InputStream getInputStream() {
        return new ByteArrayInputStream(content);
    }"
21426,getBytes,"    public byte[] getBytes() {
        return content;
    }"
21427,getSize,"    public long getSize() {
        return content.length;
    }"
21428,isEmpty,"    public boolean isEmpty() {
        return content == null || content.length == 0;
    }"
21429,getContentType,"    public String getContentType() {
        return contentType;
    }"
21430,getOriginalFilename,"    public String getOriginalFilename() {
        return name;
    }"
21434,verifyConvertToEntityAttributeWithNotCorrectInput,"    static Stream<Arguments> verifyConvertToEntityAttributeWithNotCorrectInput() {
        return Stream.of(
                Arguments.of((Object) null),"
21436,verifyCorrectEnumMapping,"    static Stream<Arguments> verifyCorrectEnumMapping() {
        return Stream.of(
                Arguments.of(DETECTION, ""D""),"
21439,convertToEntityAttribute,"    public ModelType convertToEntityAttribute(String code) {
        return super.convertToEntityAttribute(code, ModelType.values(), new IncorrectModelTypeException(code));
    }"
21440,getCreateDate,"    private LocalDateTime getCreateDate() {
        return cronExecution.getLastExecutionBefore(ZonedDateTime.now(UTC))
                            .flatMap(cronExecution::getLastExecutionBefore)"
21447,shouldTerminateExecutionWithoutUpdateOrRecordStatistic,"    void shouldTerminateExecutionWithoutUpdateOrRecordStatistic() {
        assertThat(statisticRepository.count()).isZero();

        statisticService.updateAndRecordStatistics();
"
21448,getLastExecution,"    private LocalDateTime getLastExecution() {
        return cronExecution.getLastExecutionBefore(now(UTC))
                            .flatMap(current -> cronExecution.getLastExecutionBefore(current))"
21449,recordStatistics,"    private List<ModelStatistic> recordStatistics(final Map<Long, Integer> cache, final LocalDateTime createDate) {
        val modelIds = cache.keySet();
        val models = modelRepository.findAllByIdIn(modelIds);
        val recordedStatistics = new ArrayList<ModelStatistic>();

        models.forEach(model -> {
            val cacheKey = model.getId();"
21450,updateStatistics,"    private List<ModelStatistic> updateStatistics(final Map<Long, Integer> cache, final LocalDateTime createDate) {
        val modelIds = cache.keySet();
        val statisticsToUpdate = statisticRepository.findAllByModelIdInAndCreatedDate(modelIds, createDate);
        val updatedStatistics = new ArrayList<ModelStatistic>();

        statisticsToUpdate.forEach(statistic -> {
            val cacheKey = statistic.getModel().getId();"
21452,postConstruct,"    private void postConstruct() {
        cronExecution = new CronExecution(cronExpression);
    }"
21453,shouldInvalidateAllCacheWhenInvalidateCacheMethodInvoked,"    void shouldInvalidateAllCacheWhenInvalidateCacheMethodInvoked() {
        cacheProvider.incrementRequestCount(1L);
        cacheProvider.incrementRequestCount(2L);
        cacheProvider.incrementRequestCount(3L);

        var cacheBefore = cacheProvider.getCacheCopyAsMap();

        assertThat(cacheBefore).isNotNull().hasSize(3);

        cacheProvider.invalidateCache();"
21454,shouldIncrementCacheValueWhenIncrementRequestCountMethodInvoked,"    void shouldIncrementCacheValueWhenIncrementRequestCountMethodInvoked() {
        cacheProvider.incrementRequestCount(1L);

        cacheProvider.incrementRequestCount(2L);
        cacheProvider.incrementRequestCount(2L);

        cacheProvider.incrementRequestCount(3L);
        cacheProvider.incrementRequestCount(3L);
        cacheProvider.incrementRequestCount(3L);
"
21455,cleanup,"    void cleanup() {
        cacheProvider.invalidateCache();
    }"
21456,invalidateCache,"    public void invalidateCache() {
        cache.invalidateAll();
    }"
21457,isEmpty,"    public boolean isEmpty() {
        return cache.size() == 0;
    }"
21458,getCacheCopyAsMap,"    public Map<Long, Integer> getCacheCopyAsMap() {
        return new HashMap<>(cache.asMap());
    }"
21459,incrementRequestCount,"    public void incrementRequestCount(final long key) {
        cache.asMap().compute(key, (k, v) -> v == null ? 1 : v + 1);
    }"
21461,shouldReturnOkWhenDeleteModel,"    void shouldReturnOkWhenDeleteModel() throws Exception {
        val updateDto = new ModelUpdateDto();
        updateDto.setName(MODEL_NAME);

        val request = delete(ADMIN + ""/app/"" + APP_GUID + ""/model/"" + MODEL_GUID)
                .with(csrf())
                .with(user(buildUser()))"
21462,shouldReturnUpdatedWithApiKeyModel,"    void shouldReturnUpdatedWithApiKeyModel() throws Exception {
        val updateDto = new ModelUpdateDto();
        updateDto.setName(MODEL_NAME);

        val request = put(ADMIN + ""/app/"" + APP_GUID + ""/model/"" + MODEL_GUID + ""/apikey"")
                .with(csrf())
                .with(user(buildUser()))
                .contentType(APPLICATION_JSON);

        val newApiKey = randomUUID().toString();"
21463,shouldReturnUpdatedModel,"    void shouldReturnUpdatedModel() throws Exception {
        val updateDto = new ModelUpdateDto();
        updateDto.setName(MODEL_NAME);

        val createRequest = put(ADMIN + ""/app/"" + APP_GUID + ""/model/"" + MODEL_GUID)
                .with(csrf())
                .with(user(buildUser()))
                .contentType(APPLICATION_JSON)
                .content(mapper.writeValueAsString(updateDto));

        val model = Model.builder()"
21465,shouldReturnModels,"    void shouldReturnModels() throws Exception {
        val request = get(ADMIN + ""/app/"" + APP_GUID + ""/models"")
                .with(csrf())
                .with(user(buildUser()))
                .contentType(APPLICATION_JSON);

        val responseDto = new ModelResponseDto();"
21466,shouldReturnModel,"    void shouldReturnModel() throws Exception {
        val request = get(ADMIN + ""/app/"" + APP_GUID + ""/model/"" + MODEL_GUID)
                .with(csrf())
                .with(user(buildUser()))
                .contentType(APPLICATION_JSON);

        val responseDto = new ModelResponseDto();"
21467,shouldReturnErrorMessageWhenNameIsMissingOnCreateNewModel,"    void shouldReturnErrorMessageWhenNameIsMissingOnCreateNewModel() throws Exception {
        val bodyWithNoName = new ModelCreateDto();
        bodyWithNoName.setType(""RECOGNITION"");

        val createNewModelRequest = post(ADMIN + ""/app/"" + APP_GUID + ""/model"")
                .with(csrf())"
21468,shouldReturnMessageAndCodeWhenModelNameIsMissingOnUpdate,"    void shouldReturnMessageAndCodeWhenModelNameIsMissingOnUpdate() throws Exception {
        val expectedContent = ""{\""message\"":\""Model name cannot be empty\"",\""code\"":26}"";
        val bodyWithEmptyName = new ModelUpdateDto();
        bodyWithEmptyName.setName(null);

        val bodyWithNoName = new ModelUpdateDto();

        val updateRequest = put(ADMIN + ""/app/"" + APP_GUID + ""/model/"" + MODEL_GUID)
                .with(csrf())"
21469,cloneModel,"    public Model cloneModel(Model model, ModelCloneDto modelCloneDto) {
        val clone = new Model(model);
        clone.setId(null);
        clone.setName(modelCloneDto.getName());

        return modelRepository.save(clone);"
21470,toResponseDto,"    List<ModelResponseDto> toResponseDto(List<Model> model, @Context String appGuid);
}"
21471,toResponseDto,"    ModelResponseDto toResponseDto(ModelProjection model, @Context String appGuid);
"
21472,toResponseDto,"    ModelResponseDto toResponseDto(Model model, @Context String appGuid);
"
21473,writeEndpoint,"    public Object writeEndpoint(final ProceedingJoinPoint pjp) throws Throwable {
        if (migrationStatusStorage.isMigrating()) {
            log.warn(""All write endpoints temporary disabled during migration"");
            throw new MigrationExecutionException();"
21476,isMigrating,"    public boolean isMigrating() {
        return isMigrating.get();
    }"
21477,finishMigration,"    public void finishMigration() {
        isMigrating.getAndSet(false);
        log.warn(""Migration finished"");
    }"
21478,startMigration,"    public void startMigration() {
        if (isMigrating.getAndSet(true)) {
            throw new MigrationAlreadyExecutingException();
        }"
21479,recalculate,"    private Optional<double[]> recalculate(UUID embeddingId, byte[] content) {
        try {
            var findFacesResponse = feignClient.findFaces(
                    new MultipartFileData(content, ""recalculated"", null),"
21481,migrate,"    public void migrate() {
        try {
            log.info(""Migrating..."");"
21482,migrate,"    void migrate() throws Exception {
        var validationResult = new ModelValidationResult(1L, OK);

        when(modelService.validateModelKey(anyString(), any())).thenReturn(validationResult);

        mockMvc.perform(post(API_V1 + ""/migrate""))
                .andExpect(status().isOk())
                .andExpect(content().string(""Migration started""));
"
21483,migrate,"    public ResponseEntity<String> migrate() {
        migrationStatusStorage.startMigration();
        migrationComponent.migrate();

        return ResponseEntity.ok(""Migration started"");"
21484,findTopByOrderByInstallGuid,"    InstallInfo findTopByOrderByInstallGuid();
}"
21485,getImageCountByApiKey,"    Long getImageCountByApiKey(@Param(""apiKey"") String apiKey);
}"
21486,getImgByEmbeddingId,"    Optional<Img> getImgByEmbeddingId(@Param(""apiKey"") String apiKey, @Param(""embeddingId"") UUID embeddingId);
"
21487,deleteBySubjectApiKey,"    void deleteBySubjectApiKey(@Param(""apiKey"") String apiKey);
"
21488,deleteBySubjectId,"    void deleteBySubjectId(@Param(""subjectId"") UUID subjectId);
"
21489,countRelatedEmbeddings,"    int countRelatedEmbeddings(@Param(""imgId"") UUID imgId);
"
21492,convertToEntityAttribute,"    public GlobalRole convertToEntityAttribute(String code) {
        return super.convertToEntityAttribute(code, GlobalRole.values(), new IncorrectGlobalRoleException(code));
    }"
21493,prepareResponse,"    public FaceVerification prepareResponse(ProcessImageParams processImageParams) {
        String facePlugins = processImageParams.getFacePlugins();
        if (isEmpty(facePlugins) || !facePlugins.contains(CALCULATOR)) {
            this.setEmbedding(null);
        }
"
21494,validate,"    public ValidationErrors validate(Database database) {
        return null;
    }"
21495,setFileOpener,"    public void setFileOpener(ResourceAccessor resourceAccessor) {
        this.resourceAccessor = resourceAccessor;
    }"
21496,setUp,"    public void setUp() throws SetupException {
        var applicationContext = Optional
                .ofNullable(ReflectionUtils.findField(SpringResourceAccessor.class, ""resourceLoader""))
                .stream()"
21497,getConfirmationMessage,"    public String getConfirmationMessage() {
        return ""ok"";
    }"
21498,execute,"    public void execute(Database database) throws CustomChangeException {
        long start = System.currentTimeMillis();

        int migrated = processor.start();
"
21499,start,"    public int start() {
        final String sql = ""select "" +
                ""   f.id as face_id, "" +
                ""   f.face_name, "" +
                ""   f.api_key, "" +
                ""   case when raw_img_fs is null then false else true end as has_image "" +"
21500,prepareResponse,"    public FacesRecognitionResponseDto prepareResponse(ProcessImageParams processImageParams) {
        if (this.getResult()==null || this.getResult().isEmpty()){
            return this;
        }

        String facePlugins = processImageParams.getFacePlugins();
        if (isEmpty(facePlugins) || !facePlugins.contains(CALCULATOR)) {"
21501,toPluginVersionsDto,"    PluginsVersionsDto toPluginVersionsDto(PluginsVersions pluginsVersions);
}"
21502,toVerifyFacesResultDto,"    VerifyFacesResultDto toVerifyFacesResultDto(FindFacesResult facesResult);
"
21503,toFacesRecognitionResponseDto,"    FacesRecognitionResponseDto toFacesRecognitionResponseDto(FindFacesResponse facesResponse);
"
21504,toFacesDetectionResponseDto,"    FacesDetectionResponseDto toFacesDetectionResponseDto(FindFacesResponse facesResponse);
"
21505,prepareResponse,"    public FacesDetectionResponseDto prepareResponse(ProcessImageParams processImageParams) {
        if (this.getResult()==null || this.getResult().isEmpty()){
            return this;
        }

        String facePlugins = processImageParams.getFacePlugins();
        if (isEmpty(facePlugins) || !facePlugins.contains(CALCULATOR)) {"
21508,processImage,"    FaceProcessResponse processImage(ProcessImageParams processImageParams);
}"
21509,prepareResponse,"    public abstract FaceProcessResponse prepareResponse(ProcessImageParams processImageParams);
}"
21511,sortedIndexes,"    private static int[] sortedIndexes(double[] probabilities) {
        return IntStream.range(0, probabilities.length)
                .boxed()"
21512,euclidean_distance,"    private static INDArray euclidean_distance(final INDArray newFace, INDArray existingFaces) {
        existingFaces = existingFaces.subi(newFace);

        return existingFaces.norm2(1);"
21513,calculateSimilarities,"    private INDArray calculateSimilarities(INDArray distance) {
        FacesStatusResponse status = facesApiClient.getStatus();
        if (status == null || status.getSimilarityCoefficients() == null || status.getSimilarityCoefficients().isEmpty()) {
            throw new FacesServiceException(""No status information received"");
        }
"
21514,recognize,"    private double[] recognize(final INDArray newFace, final INDArray existingFaces) {
        val distance = euclidean_distance(newFace, existingFaces);

        return calculateSimilarities(distance).toDoubleVector();"
21515,normalize,"    private INDArray normalize(final INDArray embeddings) {
        val embeddingsNorm = embeddings.norm2(1);

        return embeddings.transposei().divi(embeddingsNorm).transposei();"
21516,normalizeOne,"    public double[] normalizeOne(final double[] rawEmbeddings) {
        INDArray embeddings = Nd4j.create(rawEmbeddings);
        embeddings = normalizeOne(embeddings);

        return embeddings.toDoubleVector();"
21517,normalizeOne,"    private INDArray normalizeOne(final INDArray embeddings) {
        val embeddings1Norm = embeddings.norm2();

        return embeddings.divi(embeddings1Norm);"
21518,verify,"    public Double verify(final double[] input, final String apiKey, final UUID embeddingId) {
        if (input == null) {
            return (double) 0;
        }

        final Optional<INDArray> rawEmbeddingOptional = embeddingCacheProvider.getOrLoad(apiKey)
                .getRawEmbeddingById(embeddingId);"
21519,verify,"    public double[] verify(double[] sourceImageEmbedding, double[][] targetImageEmbedding) {
        final INDArray sourceNormalized = normalizeOne(Nd4j.create(sourceImageEmbedding));
        final INDArray targetNormalized = normalize(Nd4j.create(targetImageEmbedding));

        return recognize(sourceNormalized, targetNormalized);"
21520,getPredictionCount,"    private int getPredictionCount(int resultCount, int[] argSort) {
        if (resultCount == PREDICTION_COUNT_INFINITY) {
            resultCount = argSort.length;
        }"
21523,verifyIsValidWithCorrectValue,"    static Stream<Arguments> verifyIsValidWithCorrectValue() {
        return Stream.of(
                Arguments.of(""VAL1""),"
21525,verifyIsValidWithNotCorrectValue,"    static Stream<Arguments> verifyIsValidWithNotCorrectValue() {
        return Stream.of(
                Arguments.of((Object) null),"
21526,setUp,"    void setUp() {
        ValidEnum ann = this.getClass().getDeclaredFields()[0].getAnnotation(ValidEnum.class);
        validator.initialize(ann);
    }"
21527,isValid,"    public boolean isValid(String value, ConstraintValidatorContext context) {
        if (StringUtils.isBlank(value)) {
            return false;
        }"
21528,initialize,"    public void initialize(ValidEnum targetEnum) {
        enumType = targetEnum.targetClassType();
    }"
21529,convertToEntityAttribute,"    protected T convertToEntityAttribute(String code, T[] values, BasicException exception) {
        if (StringUtils.isBlank(code) || values == null) {
            throw exception;
        }"
21530,convertToDatabaseColumn,"    public String convertToDatabaseColumn(T enumeration) {
        return enumeration == null ? null : enumeration.getCode();
    }"
21533,buildParams,"    private ProcessEmbeddingsParams buildParams(double[] source, double[][] targets) {
        return ProcessEmbeddingsParams.builder()
                                      .embeddings(ArrayUtils.insert(0, targets, source))"
21534,processEmbeddings_EmbeddingsAreNull_ShouldThrowWrongEmbeddingCountException,"    void processEmbeddings_EmbeddingsAreNull_ShouldThrowWrongEmbeddingCountException() {
        var params = ProcessEmbeddingsParams.builder().build();

        assertThatThrownBy(() -> verificationProcessService.processEmbeddings(params))"
21535,processEmbeddings_TooFewTargets_ShouldThrowWrongEmbeddingCountException,"    void processEmbeddings_TooFewTargets_ShouldThrowWrongEmbeddingCountException() {
        var source = new double[]{1.0, 2.0, 3.0};
        var targets = new double[0][];
        var params = buildParams(source, targets);

        assertThatThrownBy(() -> verificationProcessService.processEmbeddings(params))"
21537,cleanUp,"    void cleanUp() {
        appRepository.deleteAll();
        appRepository.flush();
    }"
21538,processEmbedding,"    private EmbeddingVerificationProcessResult processEmbedding(final double[] target, final double similarity) {
        BigDecimal scaledSimilarity = BigDecimal.valueOf(similarity).setScale(5, HALF_UP);
        return new EmbeddingVerificationProcessResult(
                target,"
21540,processEmbeddings_PredictionCountIsNull_ShouldThrowIncorrectPredictionCountException,"    void processEmbeddings_PredictionCountIsNull_ShouldThrowIncorrectPredictionCountException() {
        var params = ProcessEmbeddingsParams.builder()
                                            .additionalParams(Collections.singletonMap(PREDICTION_COUNT, null))
                                            .build();"
21541,processEmbeddings_PredictionCountIsIncorrect_ShouldThrowIncorrectPredictionCountException,"    void processEmbeddings_PredictionCountIsIncorrect_ShouldThrowIncorrectPredictionCountException(int predictionCount) {
        var params = ProcessEmbeddingsParams.builder()
                                            .additionalParams(Collections.singletonMap(PREDICTION_COUNT, predictionCount))
                                            .build();"
21545,processPrediction,"    private EmbeddingSimilarityResult processPrediction(final Pair<Double, String> prediction) {
        BigDecimal scaledPrediction = BigDecimal.valueOf(prediction.getLeft()).setScale(5, HALF_UP);
        return new EmbeddingSimilarityResult(prediction.getRight(), scaledPrediction.floatValue());
    }"
21548,processEmbeddings,"    EmbeddingsProcessResponse processEmbeddings(ProcessEmbeddingsParams processEmbeddingsParams);
}"
21549,testGetImg,"    void testGetImg() {
        var model = dbHelper.insertModel();
        var subject = dbHelper.insertSubject(model, ""subject"");
        final Embedding embedding = dbHelper.insertEmbeddingWithImg(subject);

        final Optional<Img> img = embeddingService.getImg(subject.getApiKey(), embedding.getId());
        assertThat(img.isPresent(), is(true));
        assertThat(img.get().getContent(), is(embedding.getImg().getContent()));"
21550,deleteSubject,"    private void deleteSubject(Embedding... embeddings) {
        for (Embedding embedding : embeddings) {
            final Subject subject = embedding.getSubject();"
21552,testCountEmbeddingsByApiKeyAndCalculatorNotEq,"    void testCountEmbeddingsByApiKeyAndCalculatorNotEq() {
        var currentCalc = ""Facenet2018"";

        var correctCalcEmbedding = dbHelper.insertEmbeddingNoImg(
                dbHelper.insertSubject(Constants.DEMO_API_KEY, ""subject1""),
                currentCalc
        );"
21555,isDbInconsistent,"    public boolean isDbInconsistent(String currentCalculator) {
        return embeddingRepository.countBySubjectApiKeyNotEqAndCalculatorNotEq(
                Constants.DEMO_API_KEY,"
21556,isDemoCollectionInconsistent,"    public boolean isDemoCollectionInconsistent() {
        return embeddingRepository.countBySubjectApiKeyAndCalculatorNotEq(
                Constants.DEMO_API_KEY,"
21557,listEmbeddings,"    public Page<EmbeddingProjection> listEmbeddings(String apiKey, String subjectName, Pageable pageable) {
        return embeddingRepository.findBySubjectApiKeyAndSubjectName(apiKey, subjectName, pageable);
    }"
21558,getImg,"    public Optional<Img> getImg(String apiKey, UUID embeddingId) {
        return imgRepository.getImgByEmbeddingId(apiKey, embeddingId);
    }"
21559,getImg,"    public Optional<Img> getImg(Embedding embedding) {
        return Optional.ofNullable(embedding.getImg().getId())
                .flatMap(imgRepository::findById);"
21560,getWithImgAndCalculatorNotEq,"    public List<Embedding> getWithImgAndCalculatorNotEq(String calculator) {
        return embeddingRepository.getWithImgAndCalculatorNotEq(calculator);
    }"
21561,doWithEnhancedEmbeddingProjectionStream,"    public <T> T doWithEnhancedEmbeddingProjectionStream(String apiKey, Function<Stream<EnhancedEmbeddingProjection>, T> func) {
        try (val stream = embeddingRepository.findBySubjectApiKey(apiKey)) {
            return func.apply(stream);"
21562,updateEmbedding,"    public int updateEmbedding(UUID embeddingId, double[] embedding, String calculator) {
        return embeddingRepository.updateEmbedding(embeddingId, embedding, calculator);
    }"
21565,testGetUniqueCalculators,"    void testGetUniqueCalculators() {
        int cnt = 3;
        var calculators = IntStream.range(0, cnt)
                .mapToObj(i -> ""just_inserted_calculators"" + i)
                .peek(calculator -> dbHelper.insertEmbeddingNoImg(dbHelper.insertSubject(""subject""), calculator))"
21568,testDeleteBySubjectApiKey,"    void testDeleteBySubjectApiKey() {
        var model = dbHelper.insertModel();

        var subject1 = dbHelper.insertSubject(model, ""subject_name1"");
        dbHelper.insertEmbeddingNoImg(subject1);
        dbHelper.insertEmbeddingWithImg(subject1);

        var subject2 = dbHelper.insertSubject(model, ""subject_name2"");
        dbHelper.insertEmbeddingNoImg(subject2);
        dbHelper.insertEmbeddingWithImg(subject2);
"
21569,testDeleteBySubjectId,"    void testDeleteBySubjectId() {
        var subject = dbHelper.insertSubject(""subject_name"");
        dbHelper.insertEmbeddingNoImg(subject);
        dbHelper.insertEmbeddingWithImg(subject);

        int deleted = embeddingRepository.deleteBySubjectId(subject.getId());
        assertThat(deleted).isEqualTo(2);"
21570,testUpdateEmbedding,"    void testUpdateEmbedding() {
        var subject = dbHelper.insertSubject(""subject_name"");
        var embedding = dbHelper.insertEmbeddingNoImg(subject, ""calculator"", new double[]{1.1, 2.2, 3.3});

        var newCalc = ""new_calc"";
        var newEmbedding = new double[]{4.4, 5.5, 6.6};

        int updated = embeddingRepository.updateEmbedding(embedding.getId(), newEmbedding, newCalc);"
21572,testFindBySubjectId,"    void testFindBySubjectId() {
        final Subject subject = dbHelper.insertSubject(""subject_name"");
        final Embedding embedding1 = dbHelper.insertEmbeddingNoImg(subject);
        final Embedding embedding2 = dbHelper.insertEmbeddingWithImg(subject);

        final List<Embedding> result = embeddingRepository.findBySubjectId(subject.getId());
"
21573,map,"    default String map(UUID value) {
        return Optional.ofNullable(value).map(Object::toString).orElse(null);
    }"
21574,toResponseDto,"    Collection<EmbeddingDto> toResponseDto(Collection<EmbeddingProjection> projections);
"
21575,toResponseDto,"    EmbeddingDto toResponseDto(EmbeddingProjection projection);
"
21576,verifyFacesWithIncorrectPartName,"    void verifyFacesWithIncorrectPartName() throws Exception {
        var mockFile = new MockMultipartFile(""file"", ""test data"".getBytes());

        MvcResult mvcResult = mockMvc.perform(
                multipart(API_V1 + ""/recognition/faces/{embeddingId}/verify"", UUID.randomUUID())"
21577,verifyFacesBase64,"    void verifyFacesBase64() throws Exception {
        var embeddingId = UUID.randomUUID();

        int count = 5;
        when(subjectService.verifyFace(any()))
                .thenReturn(verificationResult(count));

        final Base64File img = new Base64File();
        img.setContent(Base64.getEncoder().encodeToString(new byte[]{0xA}));"
21578,verificationResult,"    private static Pair<List<FaceVerification>, PluginsVersions> verificationResult(int count) {
        return Pair.of(
                IntStream.range(0, count)"
21579,verifyFaces,"    void verifyFaces() throws Exception {
        var embeddingId = UUID.randomUUID();
        MockMultipartFile file = new MockMultipartFile(""file"", new byte[]{0xA});

        int count = 4;
        when(subjectService.verifyFace(any()))
                .thenReturn(verificationResult(count));
"
21580,testDeleteEmbeddingByIdNotFound,"    void testDeleteEmbeddingByIdNotFound() throws Exception {
        var embeddingId = UUID.randomUUID();

        when(subjectService.removeSubjectEmbedding(API_KEY, embeddingId))
                .thenThrow(new EmbeddingNotFoundException(embeddingId));"
21581,testDeleteEmbeddingById,"    void testDeleteEmbeddingById() throws Exception {
        Embedding embedding = ItemsBuilder.makeEmbedding(""subject_name"", API_KEY);
        embedding.setId(UUID.randomUUID());

        when(subjectService.removeSubjectEmbedding(API_KEY, embedding.getId()))
                .thenReturn(embedding);"
21582,testRemoveSubjectEmbedding,"    void testRemoveSubjectEmbedding() throws Exception {
        var subjectName = ""subject_name"";
        var deleted = 5;

        when(subjectService.removeAllSubjectEmbeddings(API_KEY, subjectName))
                .thenReturn(deleted);"
21583,testListEmbeddingsFail,"    void testListEmbeddingsFail() throws Exception {
        var expectedContent = ""{\""message\"":\"""" + String.format(""Missing header: %s"", X_FRS_API_KEY_HEADER) + ""\"",\""code\"":20}"";

        mockMvc.perform(get(API_V1 + ""/recognition/faces""))"
21584,testListEmbeddingsWithSubjectName,"    void testListEmbeddingsWithSubjectName() throws Exception {
        var subjectName = ""Johnny Depp"";
        when(embeddingService.listEmbeddings(eq(API_KEY), eq(subjectName), any()))
                .thenReturn(new PageImpl<>(
                        List.of(new EmbeddingProjection(UUID.randomUUID(), subjectName)),"
21585,testListEmbeddings,"    void testListEmbeddings() throws Exception {
        when(embeddingService.listEmbeddings(eq(API_KEY), eq(null), any()))
                .thenReturn(new PageImpl<>(
                        List.of("
21586,testDownloadImgNotFound,"    void testDownloadImgNotFound() throws Exception {
        var embeddingId = UUID.randomUUID();
        when(embeddingService.getImg(API_KEY, embeddingId))
                .thenReturn(Optional.empty());
"
21587,testDownloadImg,"    void testDownloadImg() throws Exception {
        var embeddingId = UUID.randomUUID();
        final byte[] content = {0xC, 0xA};

        Img img = new Img();
        img.setContent(content);

        when(embeddingService.getImg(API_KEY, embeddingId))"
21588,testAddEmbeddingBase64,"    void testAddEmbeddingBase64() throws Exception {
        doReturn(pair())
                .when(subjectService)
                .saveCalculatedEmbedding(any(String.class), any(), any(), any());

        Base64File request = new Base64File();
        request.setContent(Base64.getEncoder().encodeToString(new byte[]{(byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE}));"
21589,testAddEmbedding,"    void testAddEmbedding() throws Exception {
        var mockFile = new MockMultipartFile(""file"", ""test data"".getBytes());

        doReturn(pair())
                .when(subjectService)
                .saveCalculatedEmbedding(any(MultipartFile.class), any(), any(), any());"
21590,pair,"    private static Pair<Subject, Embedding> pair() {
        Subject subject = new Subject();
        subject.setId(UUID.randomUUID());

        Embedding embedding = new Embedding();
        embedding.setId(UUID.randomUUID());
"
21591,getSize,"        public int getSize() {
            return source.getSize();
        }"
21592,getNumber,"        public int getNumber() {
            return source.getNumber();
        }"
21593,getTotalElements,"        public long getTotalElements() {
            return source.getTotalElements();
        }"
21594,getTotalPages,"        public int getTotalPages() {
            return source.getTotalPages();
        }"
21595,getFaces,"        public List<EmbeddingDto> getFaces() {
            return source.getContent();
        }"
21596,recognizeEmbeddings,"    public EmbeddingsVerificationProcessResponse recognizeEmbeddings(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(X_FRS_API_KEY_HEADER)
            final String apiKey,"
21597,recognizeBase64,"    public VerificationResult recognizeBase64(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(X_FRS_API_KEY_HEADER)
            final String apiKey,
            @ApiParam(value = IMAGE_ID_DESC, required = true)
            @PathVariable"
21598,recognizeFile,"    public VerificationResult recognizeFile(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(X_FRS_API_KEY_HEADER)
            final String apiKey,
            @ApiParam(value = IMAGE_WITH_ONE_FACE_DESC, required = true)
            @RequestParam"
21599,deleteEmbeddingsById,"    public List<EmbeddingDto> deleteEmbeddingsById(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(name = X_FRS_API_KEY_HEADER)
            final String apiKey,
            @ApiParam(value = IMAGE_IDS_DESC, required = true)"
21600,deleteEmbeddingById,"    public EmbeddingDto deleteEmbeddingById(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(name = X_FRS_API_KEY_HEADER)
            final String apiKey,"
21601,removeAllSubjectEmbeddings,"    public Map<String, Object> removeAllSubjectEmbeddings(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(name = X_FRS_API_KEY_HEADER)"
21602,listEmbeddings,"    public Faces listEmbeddings(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(name = X_FRS_API_KEY_HEADER)"
21603,downloadImg,"    public byte[] downloadImg(HttpServletResponse response,
                              @ApiParam(value = API_KEY_DESC, required = true)
                              @RequestHeader(name = X_FRS_API_KEY_HEADER)
                              final String apiKey,"
21604,addEmbeddingBase64,"    public EmbeddingDto addEmbeddingBase64(
            @ApiParam(value = API_KEY_DESC, required = true)
            @RequestHeader(X_FRS_API_KEY_HEADER)
            final String apiKey,
            @ApiParam(value = SUBJECT_DESC)"
21605,addEmbedding,"    public EmbeddingDto addEmbedding(
            @ApiParam(value = IMAGE_WITH_ONE_FACE_DESC, required = true)
            @RequestParam
            final MultipartFile file,
            @ApiParam(value = SUBJECT_DESC, required = true)"
21607,testAdd,"    void testAdd() {
        var projections = new EnhancedEmbeddingProjection[]{
                makeEnhancedEmbeddingProjection(""A""),
                makeEnhancedEmbeddingProjection(""B""),
                makeEnhancedEmbeddingProjection(""C"")
        };
        var embeddingCollection = EmbeddingCollection.from(Stream.of(projections));
        var newEmbedding = makeEmbedding(""D"", API_KEY);
"
21610,testRemoveFromEmpty,"    void testRemoveFromEmpty() {
        var embeddingCollection = EmbeddingCollection.from(Stream.of());
        final EmbeddingProjection removed = embeddingCollection.removeEmbedding(new EmbeddingProjection(UUID.randomUUID(), ""subject_name""));

        assertThat(removed).isNull();"
21611,getOrLoad,"    void getOrLoad() {
        var projections = new EnhancedEmbeddingProjection[]{
                makeEnhancedEmbeddingProjection(""A""),
                makeEnhancedEmbeddingProjection(""B""),
                makeEnhancedEmbeddingProjection(""C"")
        };

        when(embeddingService.doWithEnhancedEmbeddingProjectionStream(eq(API_KEY), any()))
                .thenAnswer(invocation -> {"
21612,notifyCacheEvent,"    private void notifyCacheEvent(String event, String apiKey) {
        CacheActionDto cacheActionDto = new CacheActionDto(event, apiKey, SERVER_UUID);
        notificationSenderService.notifyCacheChange(cacheActionDto);
    }"
21613,receiveInvalidateCache,"    public void receiveInvalidateCache(final String apiKey) {
        cache.invalidate(apiKey);
    }"
21614,receivePutOnCache,"    public void receivePutOnCache(String apiKey) {
        var result = embeddingService.doWithEnhancedEmbeddingProjectionStream(apiKey, EmbeddingCollection::from);
        cache.put(apiKey, result);
    }"
21615,invalidate,"    public void invalidate(final String apiKey) {
        cache.invalidate(apiKey);
        notifyCacheEvent(""DELETE"", apiKey);
    }"
21616,ifPresent,"    public void ifPresent(String apiKey, Consumer<EmbeddingCollection> consumer) {
        Optional.ofNullable(cache.getIfPresent(apiKey))
                .ifPresent(consumer);

        cache.getIfPresent(apiKey);"
21617,getOrLoad,"    public EmbeddingCollection getOrLoad(final String apiKey) {

        var result = cache.getIfPresent(apiKey);

        if (result == null) {"
21618,validEmailsAreNotInvalid,"    void validEmailsAreNotInvalid() {
        assertThat(VALID_EMAILS).allSatisfy(
                email -> assertThat(isInvalid(email)).isFalse()"
21619,invalidEmailsAreInvalid,"    void invalidEmailsAreInvalid() {
        assertThat(INVALID_EMAILS).allSatisfy(
                email -> assertThat(isInvalid(email)).isTrue()"
21620,invalidEmailsAreNotValid,"    void invalidEmailsAreNotValid() {
        assertThat(INVALID_EMAILS).allSatisfy(
                email -> assertThat(isValid(email)).isFalse()"
21621,validEmailsAreValid,"    void validEmailsAreValid() {
        assertThat(VALID_EMAILS).allSatisfy(
                email -> assertThat(isValid(email)).isTrue()"
21622,init,"    public static void init() {
        VALID_EMAILS = List.of(
                ""tester@exadel.com"",
                ""tester.100@exadel.com"","
21623,isInvalid,"    public static boolean isInvalid(final String email) {
        return !isValid(email);
    }"
21624,isValid,"    public static boolean isValid(final String email) {
        return EMAIL_PATTERN.matcher(email).matches();
    }"
21625,sendMailSenderCatchMailException,"    void sendMailSenderCatchMailException() {
        when(javaMailSenderMock.createMimeMessage()).thenReturn(mock(MimeMessage.class));
        doThrow(new MailSendException(""error"")).when(javaMailSenderMock).send(any(MimeMessage.class));

        assertThatThrownBy(() -> {"
21627,sendMail,"    public void sendMail(final String to, final String subject, final String message) {
        MimeMessage msg = javaMailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(msg, true);
        if (StringUtils.isNotEmpty(from)) {
            helper.setFrom(from);
        }
        helper.setTo(to);
        helper.setSubject(subject);
        helper.setText(message, true);"
21631,verifyClientReturnsException,"    static Stream<Arguments> verifyClientReturnsException() {
        return Stream.of(
                Arguments.of(new NoFacesFoundException(), status().isBadRequest()),"
21633,detectBase64,"    public FacesDetectionResponseDto detectBase64(
            @ApiParam(value = LIMIT_DESC, example = NUMBER_VALUE_EXAMPLE)
            @RequestParam(defaultValue = LIMIT_DEFAULT_VALUE, required = false)
            @Min(value = 0, message = LIMIT_MIN_DESC)"
21634,detect,"    public FacesDetectionResponseDto detect(
            @ApiParam(value = IMAGE_FILE_DESC, required = true)
            @RequestParam
            final MultipartFile file,"
21635,fillInStackTrace,"    public synchronized Throwable fillInStackTrace() {
        return this;
    }"
21636,pgTransactionManager,"    public PlatformTransactionManager pgTransactionManager(@Qualifier(""emPg"") LocalContainerEntityManagerFactoryBean localContainerEntityManagerFactoryBean) {
        val transactionManager = new JpaTransactionManager();
        transactionManager.setEntityManagerFactory(localContainerEntityManagerFactoryBean.getObject());

        return transactionManager;"
21637,dataSourceProperties,"    public DataSourceProperties dataSourceProperties() {
        return new DataSourceProperties();
    }"
21638,pgDataSource,"    public HikariDataSource pgDataSource(@Autowired DataSourceProperties dataSourceProperties) {
        return dataSourceProperties.initializeDataSourceBuilder().type(HikariDataSource.class).build();
    }"
21640,loadUserByUsername,"    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        return userRepository.findByEmail(email.toLowerCase())
                             .orElseThrow(() -> new UsernameNotFoundException("
21641,removeExpiredTokens,"    public void removeExpiredTokens() {
        LocalDateTime now = LocalDateTime.now(UTC);
        int accessTokenCount = this.jdbcTemplate.update(
                REMOVE_EXPIRED_ACCESS_TOKENS_SQL,
                now
        );"
21642,storeRefreshToken,"    public void storeRefreshToken(OAuth2RefreshToken refreshToken, OAuth2Authentication authentication) {
        DefaultExpiringOAuth2RefreshToken oAuth2RefreshToken = (DefaultExpiringOAuth2RefreshToken) refreshToken;
        jdbcTemplate.update(INSERT_REFRESH_TOKEN_WITH_EXPIRATION_SQL, new Object[]{
                        extractTokenKey(refreshToken.getValue()),"
21643,storeAccessToken,"    public void storeAccessToken(OAuth2AccessToken token, OAuth2Authentication authentication) {
        String refreshToken = null;
        if (token.getRefreshToken() != null) {
            refreshToken = token.getRefreshToken().getValue();
        }
"
21644,handleCacheClearError,"    public void handleCacheClearError(RuntimeException e, Cache cache) {
        log.info(e.getMessage());
    }"
21645,handleCacheEvictError,"    public void handleCacheEvictError(RuntimeException e, Cache cache, Object o) {
        log.info(e.getMessage());
    }"
21646,handleCachePutError,"    public void handleCachePutError(RuntimeException e, Cache cache, Object o, Object o1) {
        log.info(e.getMessage());
    }"
21647,handleCacheGetError,"    public void handleCacheGetError(RuntimeException e, Cache cache, Object o) {
        log.info(e.getMessage());
    }"
21648,supports,"    public boolean supports(Class<?> authentication) {
        return authentication.equals(UsernamePasswordAuthenticationToken.class);
    }"
21649,getAuthData,"    private String getAuthData(Object value) throws UnsupportedEncodingException {
        if (value == null) {
            throw new BadCredentialsException(""Invalid basic authentication token"");
        }
        byte[] base64AuthData = value.toString().getBytes(StandardCharsets.UTF_8);
        byte[] decoded;
        try {"
21650,authenticate,"    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        try {
            String principal = getAuthData(authentication.getPrincipal());"
21651,getLastExecutionBefore,"    public Optional<ZonedDateTime> getLastExecutionBefore(final ZonedDateTime date) {
        return executionTime.lastExecution(date);
    }"
21652,extractToken,"    private Optional<String> extractToken(HttpServletRequest request) {
        return Optional.ofNullable(WebUtils.getCookie(request, ACCESS_TOKEN_COOKIE_NAME)).map(Cookie::getValue);
    }"
21653,extract,"    public Authentication extract(HttpServletRequest request) {
        return extractToken(request).map(s -> new PreAuthenticatedAuthenticationToken(s, """"))
                                    .orElse(null);"
21654,shouldReturnStatusWithoutAuth,"    void shouldReturnStatusWithoutAuth() throws Exception {
        var currentCalculator = ""currentCalculator"";

        when(client.getStatus())
                .thenReturn(new FacesStatusResponse().setCalculatorVersion(currentCalculator));

        var model = dbHelper.insertModel();
        var subject = dbHelper.insertSubject(model, ""subject"");"
21655,getCheckDemo,"    public VersionConsistenceDto getCheckDemo() {
        var calculatorVersion = facesApiClient.getStatus().getCalculatorVersion();

        return VersionConsistenceDto"
21656,saveAll,"    public List<? extends ClientDetails> saveAll(List<Client> clientsDetail) {
        return clientRepository.saveAll(clientsDetail);
    }"
21657,loadClientByClientId,"    public ClientDetails loadClientByClientId(String clientId) {
        return clientRepository.findByClientId(clientId)
                               .orElseThrow(() -> new EntityNotFoundException("
21658,findByClientId,"    Optional<Client> findByClientId(String clientId);
}"
21659,getAdditionalInformation,"    public Map<String, Object> getAdditionalInformation() {
        return new HashMap<>();
    }"
21660,isAutoApprove,"    public boolean isAutoApprove(String scope) {
        boolean autoApproveScope = false;
        if (StringUtils.hasText(authorities)) {
            autoApproveScope = Arrays.stream(autoApprove.split("","")).anyMatch(scope::matches);
        }"
21661,getRefreshTokenValiditySeconds,"    public Integer getRefreshTokenValiditySeconds() {
        return refreshTokenValidity;
    }"
21662,getAccessTokenValiditySeconds,"    public Integer getAccessTokenValiditySeconds() {
        return accessTokenValidity;
    }"
21663,getAuthorities,"    public Set<GrantedAuthority> getAuthorities() {
        return Collections.emptySet();
    }"
21664,getRegisteredRedirectUri,"    public Set<String> getRegisteredRedirectUri() {
        return new HashSet<>();
    }"
21665,getAuthorizedGrantTypes,"    public Set<String> getAuthorizedGrantTypes() {
        Set<String> result = new HashSet<>();
        if (StringUtils.hasText(authorizedGrantTypes)) {
            result = StringUtils.commaDelimitedListToSet(authorizedGrantTypes);
        }"
21666,getResourceIds,"    public Set<String> getResourceIds() {
        Set<String> result = new HashSet<>();
        if (StringUtils.hasText(resourceIds)) {
            result = StringUtils.commaDelimitedListToSet(resourceIds);
        }"
21667,getScope,"    public Set<String> getScope() {
        if (StringUtils.hasText(scope)) {
            return StringUtils.commaDelimitedListToSet(scope);
        }"
21668,isScoped,"    public boolean isScoped() {
        return !getScope().isEmpty();
    }"
21669,isSecretRequired,"    public boolean isSecretRequired() {
        return true;
    }"
21670,verify,"    double[] verify(double[] sourceImageEmbedding, double[][] targetImageEmbedding);
}"
21671,verify,"    Double verify(double[] input, String apiKey, UUID embeddingId);
"
21672,predict,"    List<Pair<Double, String>> predict(double[] input, String apiKey, int resultCount);
"
21673,errorHandler,"    public CacheErrorHandler errorHandler() {
        return new CustomCacheErrorHandler();
    }"
21674,cacheManager,"    public CacheManager cacheManager() {
        return new ConcurrentMapCacheManager(""status"");
    }"
21675,getLogLevel,"    public LogLevel getLogLevel() {
        return LogLevel.ERROR;
    }"
21676,verifyCanDeleteUser,"    public void verifyCanDeleteUser(final UserDeleteDto userDeleteDto) {
        val userToDelete = userDeleteDto.getUserToDelete();
        val deleter = userDeleteDto.getDeleter();

        val isOwnerBeingDeleted = userToDelete.getGlobalRole() == OWNER;

        if (isOwnerBeingDeleted) {
            throw new InsufficientPrivilegesException(""Global owner cannot be removed!"");
        }"
21677,verifyAppHasTheModel,"    public void verifyAppHasTheModel(final String appGuid, final Model model) {
        if (!model.getApp().getGuid().equals(appGuid)) {
            throw new ModelDoesNotBelongToAppException(model.getGuid(), appGuid);"
21678,isAppOwnerRemoval,"    private boolean isAppOwnerRemoval(final String userGuid, final App app) {
        boolean ownerRemoval = false;
        val owner = app.getOwner();
        if (owner.isPresent()) {
            String ownerGuid = owner
                    .get()"
21679,verifyUserDeletionFromApp,"    public void verifyUserDeletionFromApp(final User deleter, final String userGuid, final App app) {
        if (List.of(OWNER, ADMINISTRATOR).contains(deleter.getGlobalRole())) {
            if (isAppOwnerRemoval(userGuid, app)) {
                throw new InsufficientPrivilegesException();
            } else {
                return;"
21680,verifyWritePrivilegesToApp,"    public void verifyWritePrivilegesToApp(final User user, final App app, boolean adminDenied) {
        if (List.of(OWNER, ADMINISTRATOR).contains(user.getGlobalRole())) {
            return;
        }
"
21681,verifyWritePrivilegesToApp,"    public void verifyWritePrivilegesToApp(final User user, final App app) {
        verifyWritePrivilegesToApp(user, app, false);
    }"
21682,verifyReadPrivilegesToApp,"    public void verifyReadPrivilegesToApp(final User user, final App app) {
        if (USER == user.getGlobalRole()) {
            app.getUserAppRole(user.getId())"
21683,verifyGlobalWritePrivileges,"    public void verifyGlobalWritePrivileges(final User user) {
        val role = user.getGlobalRole();
        if (!List.of(OWNER, ADMINISTRATOR).contains(role)) {
            throw new InsufficientPrivilegesException();"
21685,getAppStatus,"    public AppStatusResponseDto getAppStatus() {
        try (Connection connection = dataSource.getConnection()) {
            AppStatus status = connection.isValid(1000) ? OK : NOT_READY;"
21692,getAppRolesToAssignReturnsDefault,"    void getAppRolesToAssignReturnsDefault() {
        val user = user(USER_ID, GlobalRole.OWNER);

        val app = App.builder()
                .id(APPLICATION_ID)
                .guid(APPLICATION_GUID)
                .build();

        app.addUserAppRole(user, AppRole.USER);

        when(appRepositoryMock.findByGuid(APPLICATION_GUID)).thenReturn(Optional.of(app));"
21693,getAppRolesToAssignReturnsToUser,"    void getAppRolesToAssignReturnsToUser() {
        val user = user(USER_ID, USER);

        val app = App.builder()
                .id(APPLICATION_ID)
                .guid(APPLICATION_GUID)
                .build();

        when(appRepositoryMock.findByGuid(APPLICATION_GUID)).thenReturn(Optional.of(app));
        when(userServiceMock.getUser(USER_ID)).thenReturn(user);"
21694,getAppRolesToAssignReturnsToOwner,"    void getAppRolesToAssignReturnsToOwner() {
        val user = user(USER_ID, USER);

        val app = App.builder()
                .id(APPLICATION_ID)
                .guid(APPLICATION_GUID)
                .build();

        app.addUserAppRole(user, OWNER);

        when(appRepositoryMock.findByGuid(APPLICATION_GUID)).thenReturn(Optional.of(app));"
21701,successGetAppRoles,"    void successGetAppRoles() {
        val user = user(USER_ID, USER);

        val app = App.builder()
                .id(APPLICATION_ID)
                .guid(APPLICATION_GUID)
                .build();

        app.addUserAppRole(user, OWNER);

        when(appRepositoryMock.findByGuid(APPLICATION_GUID)).thenReturn(Optional.of(app));
        when(userServiceMock.getUser(USER_ID)).thenReturn(user);"
21702,successDeleteApp,"    void successDeleteApp() {
        val models = nCopies(
                3,
                Model.builder()
                        .apiKey(""modelKey"")
                        .build()
        );

        val app = App.builder()
                .id(APPLICATION_ID)
                .name(""name"")
                .guid(APPLICATION_GUID)
                .models(models)"
21703,successRegenerateGuid,"    void successRegenerateGuid() {
        val app = App.builder()
                .name(""name"")
                .guid(APPLICATION_GUID)
                .build();

        val user = user(USER_ID, USER);

        when(appRepositoryMock.findByGuid(APPLICATION_GUID)).thenReturn(Optional.of(app));
        when(userServiceMock.getUser(USER_ID)).thenReturn(user);

        appService.regenerateApiKey(APPLICATION_GUID, USER_ID);
"
21704,failUpdateAppNameIsNotUnique,"    void failUpdateAppNameIsNotUnique() {
        val appUpdateDto = AppUpdateDto.builder()
                .name(""new_name"")
                .build();

        val app = App.builder()
                .name(""name"")"
21707,failCreateAppNameIsNotUnique,"    void failCreateAppNameIsNotUnique() {
        val appCreateDto = AppCreateDto.builder()
                .name(""appName"")
                .build();
"
21709,successGetAppsForGlobalUser,"    void successGetAppsForGlobalUser() {
        val user = user(USER_ID, USER);

        val app = App.builder()
                .id(APPLICATION_ID)
                .guid(APPLICATION_GUID)
                .build();
"
21710,successGetAppsForGlobalAdmin,"    void successGetAppsForGlobalAdmin() {
        val user = user(USER_ID, ADMINISTRATOR);

        val app = App.builder()
                .id(APPLICATION_ID)
                .guid(APPLICATION_GUID)
                .build();
"
21711,successGetApp,"    void successGetApp() {
        val user = user(USER_ID, ADMINISTRATOR);

        val app = App.builder()
                .id(APPLICATION_ID)
                .guid(APPLICATION_GUID)
                .build();

        when(appRepositoryMock.findByGuid(APPLICATION_GUID)).thenReturn(Optional.of(app));
        when(userServiceMock.getUser(USER_ID)).thenReturn(user);
"
21712,user,"    private User user(final Long id, final GlobalRole role) {
        return User.builder()
                .id(id)"
21714,deleteApp,"    public void deleteApp(final String guid, final Long userId) {
        val app = getApp(guid, userId);
        val user = userService.getUser(userId);

        authManager.verifyWritePrivilegesToApp(user, app, true);
"
21715,regenerateApiKey,"    public void regenerateApiKey(final String guid, final Long userId) {
        val app = getApp(guid, userId);
        val user = userService.getUser(userId);

        authManager.verifyWritePrivilegesToApp(user, app, true);

        app.setApiKey(UUID.randomUUID().toString());"
21716,deleteUserFromApp,"    public void deleteUserFromApp(final String userGuid, final String guid, final Long adminId) {
        val userId = userService.getUserByGuid(userGuid).getId();
        val app = getApp(guid, userId);
        val admin = userService.getUser(adminId);

        authManager.verifyUserDeletionFromApp(admin, userGuid, app);

        app.deleteUserAppRole(userGuid);"
21718,updateApp,"    public App updateApp(final AppUpdateDto appUpdateDto, final String appGuid, final Long userId) {
        val app = getApp(appGuid, userId);
        val user = userService.getUser(userId);

        authManager.verifyWritePrivilegesToApp(user, app, true);

        val isSameName = app.getName().equals(appUpdateDto.getName());
        if (isNotTrue(isSameName)) {"
21719,createApp,"    public App createApp(final AppCreateDto appCreateDto, final Long userId) {
        verifyNameIsUnique(appCreateDto.getName());

        val user = userService.getUser(userId);

        authManager.verifyGlobalWritePrivileges(user);

        val app = App.builder()"
21721,getAppUsers,"    public List<UserAppRole> getAppUsers(final String searchText, final String appGuid, final Long userId) {
        val app = getApp(appGuid, userId);

        if (isNotEmpty(searchText)) {
            val result = new ArrayList<UserAppRole>();"
21722,getAppRolesToAssign,"    public AppRole[] getAppRolesToAssign(final String appGuid, final Long userId) {
        val app = getApp(appGuid, userId);

        val userAppRole = app.getUserAppRole(userId);
        if (userAppRole.isPresent() && OWNER == userAppRole.get().getRole()) {
            return AppRole.values();
        }
"
21723,getApps,"    public List<App> getApps(final Long userId) {
        val user = userService.getUser(userId);

        if (USER == user.getGlobalRole()) {
            return appRepository.findAllByUserAppRoles_Id_UserId(userId);"
21724,getApp,"    public App getApp(final String appGuid, final Long userId) {
        val app = getApp(appGuid);
        val user = userService.getUser(userId);

        authManager.verifyReadPrivilegesToApp(user, app);
"
21725,verifyNameIsUnique,"    private void verifyNameIsUnique(final String name) {
        if (appRepository.existsByName(name)) {
            throw new NameIsNotUniqueException(name);"
21726,passAllOwnedAppsToNewOwnerAndLeaveAllApps,"    public void passAllOwnedAppsToNewOwnerAndLeaveAllApps(final User oldOwner, final User newOwner) {
        val apps = getApps(oldOwner.getId());

        apps.forEach(app -> {"
21727,getApp,"    public App getApp(final String appGuid) {
        return appRepository.findByGuid(appGuid)
                            .orElseThrow(() -> new AppNotFoundException(appGuid));"
21728,convertToEntityAttribute,"    public AppRole convertToEntityAttribute(String code) {
        return super.convertToEntityAttribute(code, AppRole.values(), new IncorrectAppRoleException(code));
    }"
21729,getRole,"    default String getRole(App app, @Context Long userId) {
        return app.getUserAppRole(userId)
                  .map(UserAppRole::getRole)"
21730,getOwner,"    default User getOwner(App app) {
        return app.getOwner()
                  .map(UserAppRole::getUser)"
21731,toResponseDto,"    List<AppResponseDto> toResponseDto(List<App> apps, @Context Long userId);
"
21732,toResponseDto,"    AppResponseDto toResponseDto(App app, @Context Long userId);
"
21733,create,"    void create(@RequestHeader(value = DATABASE_ID_HEADER) String apiKey, StatisticsFacesEntity entity);
}"
21734,create,"    void create(@RequestHeader(value = DATABASE_ID_HEADER) String apiKey, StatisticsGeneralEntity entity);
"
21736,shouldReturnOkWhenDeleteUserFromApp,"    public void shouldReturnOkWhenDeleteUserFromApp() throws Exception {
        val request = delete(ADMIN + ""/app/"" + APP_GUID + ""/user/"" + USER_GUID)
                .with(csrf())
                .with(user(buildUser()))
                .contentType(MediaType.APPLICATION_JSON);"
21739,shouldReturnAppUsers,"    public void shouldReturnAppUsers() throws Exception {
        val request = get(ADMIN + ""/app/"" + APP_GUID + ""/roles"")
                .with(csrf())
                .with(user(buildUser()))
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(""Search string""));

        val appUsers = List.of(UserAppRole.builder()
                                          .role(OWNER)"
21740,shouldReturnGlobalRolesToAssign,"    public void shouldReturnGlobalRolesToAssign() throws Exception {
        val request = get(ADMIN + ""/app/"" + APP_GUID + ""/assign-roles"")
                .with(csrf())
                .with(user(buildUser()))
                .contentType(MediaType.APPLICATION_JSON);
"
21741,shouldReturnOkWhenDelete,"    public void shouldReturnOkWhenDelete() throws Exception {
        val request = delete(ADMIN + ""/app/"" + APP_GUID)
                .with(csrf())
                .with(user(buildUser()))
                .contentType(MediaType.APPLICATION_JSON);"
21742,shouldReturnUpdatedWithApiKeyApp,"    public void shouldReturnUpdatedWithApiKeyApp() throws Exception {
        val request = put(ADMIN + ""/app/"" + APP_GUID + ""/apikey"")
                .with(csrf())
                .with(user(buildUser()))
                .contentType(MediaType.APPLICATION_JSON);

        val app = App.builder()
                     .name(APP_NAME)
                     .build();"
21744,shouldReturnNewApp,"    public void shouldReturnNewApp() throws Exception {
        val appCreateDto = AppCreateDto.builder()
                                       .name(APP_NAME)
                                       .build();

        val request = post(ADMIN + ""/app"")
                .with(csrf())
                .with(user(buildUser()))
                .contentType(MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(appCreateDto));"
21745,shouldReturn400AndErrorMessageWhenRenameAppToEmpty,"    public void shouldReturn400AndErrorMessageWhenRenameAppToEmpty() throws Exception {
        val expectedContent = ""{\""message\"":\""Application name cannot be empty\"",\""code\"":26}"";

        val bodyWithEmptyName = new AppUpdateDto();
        bodyWithEmptyName.setName(null);
        val bodyWithNoName = new AppUpdateDto();

        val updateRequest = put(ADMIN + ""/app/"" + APP_GUID)
                .with(csrf())"
21746,shouldReturnMessageAndCodeWhenAppNameIsMissing,"    public void shouldReturnMessageAndCodeWhenAppNameIsMissing() throws Exception {
        val request = post(ADMIN + ""/app"")
                .with(csrf())
                .with(user(buildUser()))
                .contentType(MediaType.APPLICATION_JSON)"
21747,shouldReturnMessageAndCodeWhenUnexpectedExceptionThrown,"    public void shouldReturnMessageAndCodeWhenUnexpectedExceptionThrown() throws Exception {
        final Exception expectedException = new NullPointerException(""Something went wrong, please try again"");

        when(appService.getApps(USER_ID)).thenThrow(expectedException);

        String expectedContent = mapper.writeValueAsString(buildUndefinedExceptionResponse(expectedException));"
21748,shouldReturnMessageAndCodeWhenAppNotFoundExceptionThrown,"    public void shouldReturnMessageAndCodeWhenAppNotFoundExceptionThrown() throws Exception {
        final BasicException expectedException = new AppNotFoundException(APP_GUID);

        when(appService.getApp(APP_GUID, USER_ID)).thenThrow(expectedException);

        String expectedContent = mapper.writeValueAsString(buildExceptionResponse(expectedException));"
21749,deleteUserApp,"    public void deleteUserApp(
            @ApiParam(value = ""GUID of the application that needs to be deleted"", required = true, example = GUID_EXAMPLE)
            @PathVariable final String guid,"
21750,updateUserAppRole,"    public UserRoleResponseDto updateUserAppRole(
            @ApiParam(value = ""GUID of application"", required = true, example = GUID_EXAMPLE)
            @PathVariable final String guid,
            @ApiParam(value = ""User role data"", required = true)"
21751,inviteUser,"    public UserRoleResponseDto inviteUser(
            @ApiParam(value = ""GUID of application"", required = true, example = GUID_EXAMPLE)
            @PathVariable final String guid,"
21752,getAppUsers,"    public List<UserRoleResponseDto> getAppUsers(
            @ApiParam(value = ""GUID of application"", required = true, example = GUID_EXAMPLE)
            @PathVariable final String guid,"
21753,getAppRolesToAssign,"    public AppRole[] getAppRolesToAssign(
            @ApiParam(value = ""GUID of the application"", required = true, example = GUID_EXAMPLE)
            @PathVariable final String guid"
21754,deleteApp,"    public void deleteApp(
            @ApiParam(value = ""GUID of the application that needs to be deleted"", required = true, example = GUID_EXAMPLE)
            @PathVariable final String guid"
21755,regenerateApiKey,"    public AppResponseDto regenerateApiKey(
            @ApiParam(value = ""GUID of the application which api-key needs to be regenerated"", required = true, example = GUID_EXAMPLE)
            @PathVariable final String guid
    ) {"
21756,updateApp,"    public AppResponseDto updateApp(
            @ApiParam(value = ""GUID of application that needs to be updated"", required = true, example = GUID_EXAMPLE)
            @PathVariable final String guid,
            @ApiParam(value = ""Application data"", required = true)
            @Valid"
21757,createApp,"    public AppResponseDto createApp(
            @ApiParam(value = ""Application object that needs to be created"", required = true)
            @Valid"
21758,getApps,"    public List<AppResponseDto> getApps(
    ) {
        return appMapper.toResponseDto(appService.getApps(SecurityUtils.getPrincipalId()), SecurityUtils.getPrincipalId());"
21759,getApp,"    public AppResponseDto getApp(
            @ApiParam(value = ""GUID of application to return"", required = true, example = GUID_EXAMPLE)
            @PathVariable final String guid"
21760,deleteUserAppRole,"    public void deleteUserAppRole(final String userGuid) {
        val optional = userAppRoles.stream()
                                   .filter(userApp -> userApp.getUser().getGuid().equals(userGuid))
                                   .findFirst();"
21761,addUserAppRole,"    public void addUserAppRole(User user, AppRole role) {
        UserAppRole userAppRole = new UserAppRole(user, this, role);
        userAppRoles.add(userAppRole);
        user.getUserAppRoles().add(userAppRole);
    }"
21762,getUserAppRole,"    public Optional<UserAppRole> getUserAppRole(Long userId) {
        return userAppRoles
                .stream()"
21763,getOwner,"    public Optional<UserAppRole> getOwner() {
        return userAppRoles
                .stream()"
21766,sayHello,"        public void sayHello() {
            super.sayHello();
            say(""How are you?"");
        }"
21767,sayHello,"        public void sayHello() {
            super.sayHello();
            say(""I'm your boss"");
        }"
21768,sayHello,"        public void sayHello() {
            say(""Is somebody listening?"");
            super.sayHello();
        }"
21769,callSayHello,"        public final void callSayHello() {
            sayHello();
        }"
21772,sayHello,"        public void sayHello() {
            say(""Hello, I'm John"");
        }"
21773,say,"        public void say(String s) {
            said.add(s);
        }"
21774,putPluginNonConfigurationInstance,"    public void putPluginNonConfigurationInstance(final CompositeNonConfigurationInstance nci) {
        mPluginNonConfigurationInstances.put(nci.getId(), nci.getNonConfigurationInstance());
    }"
21775,getSuperNonConfigurationInstance,"    public Object getSuperNonConfigurationInstance() {
        return mSuperNonConfigurationInstance;
    }"
21776,getPluginNonConfigurationInstance,"    public Object getPluginNonConfigurationInstance(final String key) {
        return mPluginNonConfigurationInstances.get(key);
    }"
21777,onRetainNonConfigurationInstance,"            public CompositeNonConfigurationInstance onRetainNonConfigurationInstance() {
                return new CompositeNonConfigurationInstance(""B"", ""Something else"");
            }"
21778,onRetainNonConfigurationInstance,"            public CompositeNonConfigurationInstance onRetainNonConfigurationInstance() {
                return new CompositeNonConfigurationInstance(""A"", ""Thing"");
            }"
21783,call,"        void call(PersonPlugin plugin, Object... args);
    }"
21784,sayHello,"        public void sayHello() {
            say(""Surprise!"");
            super.sayHello();
        }"
21788,sayHello_super,"        public void sayHello_super() {
            super.sayHello();
        }"
21789,sayHello,"        public void sayHello() {
            delegate.sayHello();
        }"
21790,addPlugins,"        public void addPlugins(PersonPlugin plugin) {
            delegate.mPlugins.add(plugin);
            plugin.mDelegate = delegate;
        }"
21791,call,"                    public Void call(final Object... args) {
                        callHook(iterator, methodCall, activitySuper, args);
                        return null;
                    }"
21792,callHook,"        void callHook(final ListIterator<PersonPlugin> iterator,
                final PluginMethodAction methodCall,
                final SuperCallVoid activitySuper,"
21793,callHook,"        protected void callHook(
                final PluginMethodAction methodCall,
                final SuperCallVoid activitySuper,
                final Object... args) {

            final ArrayList<PersonPlugin> plugins = new ArrayList<>(mPlugins);"
21794,call,"                public void call(final Object... args) {
                    mCompositePerson.sayHello_super();
                }"
21795,call,"                public void call(final PersonPlugin plugin, final Object... args) {
                    plugin.sayHello();
                }"
21796,sayHello,"        public void sayHello() {
            callHook(new PluginMethodAction() {
                @Override"
21797,say,"        public void say(String s) {
            mCompositePerson.say(s);
        }"
21798,sayHello,"        public void sayHello() {
            if (mSuperListener != null) {
                mSuperListener.call();"
21799,say,"        public void say(String s) {
            mDelegate.say(s);
        }"
21802,onClick,"            public void onClick(final View v) {
                new TestFragment().show(getSupportFragmentManager(), ""dialog"");
            }"
21803,onCreate,"    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final View btn = findViewById(R.id.button);
        assert btn != null;
        btn.setOnClickListener(new View.OnClickListener() {"
21804,unregisterForContextMenu,"    void unregisterForContextMenu(View view);
}"
21806,super_unregisterForContextMenu,"    void super_unregisterForContextMenu(View view);
"
21808,super_startPostponedEnterTransition,"    void super_startPostponedEnterTransition();
"
21809,super_startIntentSenderForResult,"    void super_startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, Bundle options) throws SendIntentException;"
21810,super_startActivityForResult,"    void super_startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options);
"
21811,super_startActivityForResult,"    void super_startActivityForResult(Intent intent, int requestCode);
"
21812,super_startActivity,"    void super_startActivity(Intent intent, @Nullable Bundle options);
"
21814,super_shouldShowRequestPermissionRationale,"    boolean super_shouldShowRequestPermissionRationale(@NonNull String permission);
"
21815,super_setUserVisibleHint,"    void super_setUserVisibleHint(boolean isVisibleToUser);
"
21816,super_setTargetFragment,"    void super_setTargetFragment(@Nullable Fragment fragment, int requestCode);
"
21817,super_setSharedElementReturnTransition,"    void super_setSharedElementReturnTransition(@Nullable Object transition);
"
21818,super_setSharedElementEnterTransition,"    void super_setSharedElementEnterTransition(@Nullable Object transition);
"
21819,super_setReturnTransition,"    void super_setReturnTransition(@Nullable Object transition);
"
21820,super_setRetainInstance,"    void super_setRetainInstance(boolean retain);
"
21821,super_setReenterTransition,"    void super_setReenterTransition(@Nullable Object transition);
"
21822,super_setMenuVisibility,"    void super_setMenuVisibility(boolean menuVisible);
"
21823,super_setInitialSavedState,"    void super_setInitialSavedState(@Nullable Fragment.SavedState state);
"
21824,super_setHasOptionsMenu,"    void super_setHasOptionsMenu(boolean hasMenu);
"
21825,super_setExitTransition,"    void super_setExitTransition(@Nullable Object transition);
"
21826,super_setExitSharedElementCallback,"    void super_setExitSharedElementCallback(SharedElementCallback callback);
"
21827,super_setEnterTransition,"    void super_setEnterTransition(@Nullable Object transition);
"
21828,super_setEnterSharedElementCallback,"    void super_setEnterSharedElementCallback(SharedElementCallback callback);
"
21829,super_setArguments,"    void super_setArguments(@Nullable Bundle args);
"
21830,super_setAllowReturnTransitionOverlap,"    void super_setAllowReturnTransitionOverlap(boolean allow);
"
21831,super_setAllowEnterTransitionOverlap,"    void super_setAllowEnterTransitionOverlap(boolean allow);
"
21832,super_registerForContextMenu,"    void super_registerForContextMenu(View view);
"
21834,super_onViewStateRestored,"    void super_onViewStateRestored(@Nullable Bundle savedInstanceState);
"
21835,super_onViewCreated,"    void super_onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState);
"
21838,super_onSaveInstanceState,"    void super_onSaveInstanceState(@NonNull Bundle outState);
"
21840,super_onRequestPermissionsResult,"    void super_onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults);"
21841,super_onPrepareOptionsMenu,"    void super_onPrepareOptionsMenu(Menu menu);
"
21842,super_onPictureInPictureModeChanged,"    void super_onPictureInPictureModeChanged(boolean isInPictureInPictureMode);
"
21844,super_onOptionsMenuClosed,"    void super_onOptionsMenuClosed(Menu menu);
"
21845,super_onOptionsItemSelected,"    boolean super_onOptionsItemSelected(MenuItem item);
"
21846,super_onMultiWindowModeChanged,"    void super_onMultiWindowModeChanged(boolean isInMultiWindowMode);
"
21848,super_onInflate,"    void super_onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState);
"
21849,super_onInflate,"    void super_onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState);
"
21850,super_onHiddenChanged,"    void super_onHiddenChanged(boolean hidden);
"
21851,super_onGetLayoutInflater,"    LayoutInflater super_onGetLayoutInflater(@Nullable Bundle savedInstanceState);
"
21856,super_onCreateView,"    View super_onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState);"
21857,super_onCreateOptionsMenu,"    void super_onCreateOptionsMenu(Menu menu, MenuInflater inflater);
"
21858,super_onCreateContextMenu,"    void super_onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo);
"
21859,super_onCreateAnimator,"    Animator super_onCreateAnimator(int transit, boolean enter, int nextAnim);
"
21860,super_onCreateAnimation,"    Animation super_onCreateAnimation(int transit, boolean enter, int nextAnim);
"
21861,super_onCreate,"    void super_onCreate(@Nullable Bundle savedInstanceState);
"
21862,super_onContextItemSelected,"    boolean super_onContextItemSelected(MenuItem item);
"
21863,super_onConfigurationChanged,"    void super_onConfigurationChanged(Configuration newConfig);
"
21864,super_onAttachFragment,"    void super_onAttachFragment(Fragment childFragment);
"
21867,super_onActivityResult,"    void super_onActivityResult(int requestCode, int resultCode, Intent data);
"
21868,super_onActivityCreated,"    void super_onActivityCreated(@Nullable Bundle savedInstanceState);
"
21869,super_getViewModelStore,"    ViewModelStore super_getViewModelStore();
"
21870,super_getViewLifecycleOwnerLiveData,"    LiveData<android.arch.lifecycle.LifecycleOwner> super_getViewLifecycleOwnerLiveData();
"
21871,super_getViewLifecycleOwner,"    android.arch.lifecycle.LifecycleOwner super_getViewLifecycleOwner();
"
21874,super_getSharedElementReturnTransition,"    Object super_getSharedElementReturnTransition();
"
21875,super_getSharedElementEnterTransition,"    Object super_getSharedElementEnterTransition();
"
21879,super_getLifecycle,"    android.arch.lifecycle.Lifecycle super_getLifecycle();
"
21880,super_getLayoutInflater,"    LayoutInflater super_getLayoutInflater(@Nullable Bundle savedFragmentState);
"
21884,super_getAllowReturnTransitionOverlap,"    boolean super_getAllowReturnTransitionOverlap();
"
21885,super_getAllowEnterTransitionOverlap,"    boolean super_getAllowEnterTransitionOverlap();
"
21886,super_dump,"    void super_dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args);
"
21888,startIntentSenderForResult,"    void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, Bundle options) throws SendIntentException;"
21889,startActivityForResult,"    void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options);
"
21890,startActivityForResult,"    void startActivityForResult(Intent intent, int requestCode);
"
21891,startActivity,"    void startActivity(Intent intent, @Nullable Bundle options);
"
21893,shouldShowRequestPermissionRationale,"    boolean shouldShowRequestPermissionRationale(@NonNull String permission);
"
21894,setTargetFragment,"    void setTargetFragment(@Nullable Fragment fragment, int requestCode);
"
21896,setMenuVisibility,"    void setMenuVisibility(boolean menuVisible);
"
21897,setInitialSavedState,"    void setInitialSavedState(@Nullable Fragment.SavedState state);
"
21899,setExitSharedElementCallback,"    void setExitSharedElementCallback(SharedElementCallback callback);
"
21900,setEnterSharedElementCallback,"    void setEnterSharedElementCallback(SharedElementCallback callback);
"
21901,setArguments,"    void setArguments(@Nullable Bundle args);
"
21904,onViewStateRestored,"    void onViewStateRestored(@Nullable Bundle savedInstanceState);
"
21905,onViewCreated,"    void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState);
"
21908,onSaveInstanceState,"    void onSaveInstanceState(@NonNull Bundle outState);
"
21910,onRequestPermissionsResult,"    void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults);
"
21912,onPictureInPictureModeChanged,"    void onPictureInPictureModeChanged(boolean isInPictureInPictureMode);
"
21915,onOptionsItemSelected,"    boolean onOptionsItemSelected(MenuItem item);
"
21916,onMultiWindowModeChanged,"    void onMultiWindowModeChanged(boolean isInMultiWindowMode);
"
21918,onInflate,"    void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState);
"
21919,onInflate,"    void onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState);
"
21921,onGetLayoutInflater,"    LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState);
"
21926,onCreateView,"    View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState);"
21927,onCreateOptionsMenu,"    void onCreateOptionsMenu(Menu menu, MenuInflater inflater);
"
21928,onCreateContextMenu,"    void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo);
"
21929,onCreateAnimator,"    Animator onCreateAnimator(int transit, boolean enter, int nextAnim);
"
21930,onCreateAnimation,"    Animation onCreateAnimation(int transit, boolean enter, int nextAnim);
"
21931,onCreate,"    void onCreate(@Nullable Bundle savedInstanceState);
"
21932,onContextItemSelected,"    boolean onContextItemSelected(MenuItem item);
"
21933,onConfigurationChanged,"    void onConfigurationChanged(Configuration newConfig);
"
21934,onAttachFragment,"    void onAttachFragment(Fragment childFragment);
"
21937,onActivityResult,"    void onActivityResult(int requestCode, int resultCode, Intent data);
"
21938,onActivityCreated,"    void onActivityCreated(@Nullable Bundle savedInstanceState);
"
21940,getViewLifecycleOwnerLiveData,"    LiveData<android.arch.lifecycle.LifecycleOwner> getViewLifecycleOwnerLiveData();
"
21941,getViewLifecycleOwner,"    android.arch.lifecycle.LifecycleOwner getViewLifecycleOwner();
"
21943,setUserVisibleHint,"    void setUserVisibleHint(boolean isVisibleToUser);
"
21945,setSharedElementReturnTransition,"    void setSharedElementReturnTransition(@Nullable Object transition);
"
21946,getSharedElementReturnTransition,"    Object getSharedElementReturnTransition();
"
21947,setSharedElementEnterTransition,"    void setSharedElementEnterTransition(@Nullable Object transition);
"
21948,getSharedElementEnterTransition,"    Object getSharedElementEnterTransition();
"
21949,setReturnTransition,"    void setReturnTransition(@Nullable Object transition);
"
21951,setReenterTransition,"    void setReenterTransition(@Nullable Object transition);
"
21954,getLifecycle,"    android.arch.lifecycle.Lifecycle getLifecycle();
"
21955,getLayoutInflater,"    LayoutInflater getLayoutInflater(@Nullable Bundle savedFragmentState);
"
21956,setExitTransition,"    void setExitTransition(@Nullable Object transition);
"
21958,setEnterTransition,"    void setEnterTransition(@Nullable Object transition);
"
21961,setAllowReturnTransitionOverlap,"    void setAllowReturnTransitionOverlap(boolean allow);
"
21962,getAllowReturnTransitionOverlap,"    boolean getAllowReturnTransitionOverlap();
"
21963,setAllowEnterTransitionOverlap,"    void setAllowEnterTransitionOverlap(boolean allow);
"
21964,getAllowEnterTransitionOverlap,"    boolean getAllowEnterTransitionOverlap();
"
21965,dump,"    void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args);
"
21966,super_showNow,"    void super_showNow(FragmentManager manager, String tag);
}"
21967,super_show,"    int super_show(FragmentTransaction transaction, String tag);
"
21968,super_show,"    void super_show(FragmentManager manager, String tag);
"
21969,super_setupDialog,"    void super_setupDialog(Dialog dialog, int style);
"
21970,super_setStyle,"    void super_setStyle(int style, int theme);
"
21971,super_setShowsDialog,"    void super_setShowsDialog(boolean showsDialog);
"
21972,super_setCancelable,"    void super_setCancelable(boolean cancelable);
"
21977,super_onDismiss,"    void super_onDismiss(DialogInterface dialog);
"
21980,super_onCreateDialog,"    Dialog super_onCreateDialog(@Nullable Bundle savedInstanceState);
"
21982,super_onCancel,"    void super_onCancel(DialogInterface dialog);
"
21991,showNow,"    void showNow(FragmentManager manager, String tag);
"
21992,show,"    int show(FragmentTransaction transaction, String tag);
"
21993,show,"    void show(FragmentManager manager, String tag);
"
21994,setupDialog,"    void setupDialog(Dialog dialog, int style);
"
21998,onCreateDialog,"    Dialog onCreateDialog(@Nullable Bundle savedInstanceState);
"
22003,setShowsDialog,"    void setShowsDialog(boolean showsDialog);
"
22016,unregisterReceiver,"    void unregisterReceiver(BroadcastReceiver receiver);
}"
22017,unregisterForContextMenu,"    void unregisterForContextMenu(View view);
"
22018,unregisterComponentCallbacks,"    void unregisterComponentCallbacks(ComponentCallbacks callback);
"
22019,unbindService,"    void unbindService(ServiceConnection conn);
"
22020,triggerSearch,"    void triggerSearch(String query, @Nullable Bundle appSearchData);
"
22022,supportStartPostponedEnterTransition,"    void supportStartPostponedEnterTransition();
"
22023,supportShouldUpRecreateTask,"    boolean supportShouldUpRecreateTask(@NonNull Intent targetIntent);
"
22024,supportRequestWindowFeature,"    boolean supportRequestWindowFeature(int featureId);
"
22026,supportNavigateUpTo,"    void supportNavigateUpTo(@NonNull Intent upIntent);
"
22029,super_unregisterReceiver,"    void super_unregisterReceiver(BroadcastReceiver receiver);
"
22031,super_unregisterComponentCallbacks,"    void super_unregisterComponentCallbacks(ComponentCallbacks callback);
"
22032,super_unbindService,"    void super_unbindService(ServiceConnection conn);
"
22033,super_triggerSearch,"    void super_triggerSearch(String query, @Nullable Bundle appSearchData);
"
22035,super_supportStartPostponedEnterTransition,"    void super_supportStartPostponedEnterTransition();
"
22036,super_supportShouldUpRecreateTask,"    boolean super_supportShouldUpRecreateTask(@NonNull Intent targetIntent);
"
22037,super_supportRequestWindowFeature,"    boolean super_supportRequestWindowFeature(int featureId);
"
22038,super_supportPostponeEnterTransition,"    void super_supportPostponeEnterTransition();
"
22039,super_supportNavigateUpTo,"    void super_supportNavigateUpTo(@NonNull Intent upIntent);
"
22040,super_supportInvalidateOptionsMenu,"    void super_supportInvalidateOptionsMenu();
"
22041,super_supportFinishAfterTransition,"    void super_supportFinishAfterTransition();
"
22042,super_superDispatchKeyEvent,"    boolean super_superDispatchKeyEvent(KeyEvent event);
"
22047,super_startSupportActionMode,"    ActionMode super_startSupportActionMode(@NonNull Callback callback);
"
22048,super_startService,"    ComponentName super_startService(Intent service);
"
22049,super_startSearch,"    void super_startSearch(@Nullable String initialQuery, boolean selectInitialQuery, @Nullable Bundle appSearchData,
            boolean globalSearch);"
22051,super_startNextMatchingActivity,"    boolean super_startNextMatchingActivity(@NonNull Intent intent, @Nullable Bundle options);
"
22052,super_startNextMatchingActivity,"    boolean super_startNextMatchingActivity(@NonNull Intent intent);
"
22053,super_startManagingCursor,"    void super_startManagingCursor(Cursor c);
"
22055,super_startLocalVoiceInteraction,"    void super_startLocalVoiceInteraction(Bundle privateOptions);
"
22056,super_startIntentSenderFromFragment,"    void super_startIntentSenderFromFragment(Fragment fragment, IntentSender intent, int requestCode,
            @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)"
22057,super_startIntentSenderFromChild,"    void super_startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, @Nullable Bundle options) throws SendIntentException;"
22058,super_startIntentSenderFromChild,"    void super_startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException;"
22060,super_startIntentSenderForResult,"    void super_startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException;"
22061,super_startIntentSender,"    void super_startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags, Bundle options) throws SendIntentException;"
22062,super_startIntentSender,"    void super_startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags) throws SendIntentException;"
22063,super_startInstrumentation,"    boolean super_startInstrumentation(ComponentName className, String profileFile, Bundle arguments);
"
22064,super_startForegroundService,"    ComponentName super_startForegroundService(Intent service);
"
22065,super_startActivityIfNeeded,"    boolean super_startActivityIfNeeded(@NonNull Intent intent, int requestCode, @Nullable Bundle options);
"
22066,super_startActivityIfNeeded,"    boolean super_startActivityIfNeeded(@NonNull Intent intent, int requestCode);
"
22067,super_startActivityFromFragment,"    void super_startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options);"
22068,super_startActivityFromFragment,"    void super_startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode);
"
22069,super_startActivityFromFragment,"    void super_startActivityFromFragment(Fragment fragment, Intent intent, int requestCode, @Nullable Bundle options);
"
22070,super_startActivityFromFragment,"    void super_startActivityFromFragment(Fragment fragment, Intent intent, int requestCode);
"
22071,super_startActivityFromChild,"    void super_startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode,
            @Nullable Bundle options);"
22072,super_startActivityFromChild,"    void super_startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode);
"
22077,super_startActivities,"    void super_startActivities(Intent[] intents, @Nullable Bundle options);
"
22078,super_startActivities,"    void super_startActivities(Intent[] intents);
"
22079,super_startActionMode,"    android.view.ActionMode super_startActionMode(android.view.ActionMode.Callback callback, int type);
"
22080,super_startActionMode,"    android.view.ActionMode super_startActionMode(android.view.ActionMode.Callback callback);
"
22083,super_shouldUpRecreateTask,"    boolean super_shouldUpRecreateTask(Intent targetIntent);
"
22085,super_setWallpaper,"    void super_setWallpaper(Bitmap bitmap) throws IOException;
"
22086,super_setWallpaper,"    void super_setWallpaper(InputStream data) throws IOException;
"
22087,super_setVrModeEnabled,"    void super_setVrModeEnabled(boolean enabled, @NonNull ComponentName requestedComponent)
            throws NameNotFoundException;"
22089,super_setTurnScreenOn,"    void super_setTurnScreenOn(boolean turnScreenOn);
"
22094,super_setTaskDescription,"    void super_setTaskDescription(TaskDescription taskDescription);
"
22095,super_setSupportProgressBarVisibility,"    void super_setSupportProgressBarVisibility(boolean visible);
"
22096,super_setSupportProgressBarIndeterminateVisibility,"    void super_setSupportProgressBarIndeterminateVisibility(boolean visible);
"
22097,super_setSupportProgressBarIndeterminate,"    void super_setSupportProgressBarIndeterminate(boolean indeterminate);
"
22098,super_setSupportProgress,"    void super_setSupportProgress(int progress);
"
22099,super_setSupportActionBar,"    void super_setSupportActionBar(@Nullable Toolbar toolbar);
"
22100,super_setShowWhenLocked,"    void super_setShowWhenLocked(boolean showWhenLocked);
"
22101,super_setRequestedOrientation,"    void super_setRequestedOrientation(int requestedOrientation);
"
22102,super_setPictureInPictureParams,"    void super_setPictureInPictureParams(@NonNull PictureInPictureParams params);
"
22105,super_setFinishOnTouchOutside,"    void super_setFinishOnTouchOutside(boolean finish);
"
22106,super_setExitSharedElementCallback,"    void super_setExitSharedElementCallback(android.app.SharedElementCallback callback);
"
22107,super_setExitSharedElementCallback,"    void super_setExitSharedElementCallback(SharedElementCallback listener);
"
22108,super_setEnterSharedElementCallback,"    void super_setEnterSharedElementCallback(android.app.SharedElementCallback callback);
"
22110,super_setContentView,"    void super_setContentView(View view, LayoutParams params);
"
22112,super_setContentView,"    void super_setContentView(int layoutResID);
"
22113,super_setContentTransitionManager,"    void super_setContentTransitionManager(TransitionManager tm);
"
22114,super_setActionBar,"    void super_setActionBar(@Nullable android.widget.Toolbar toolbar);
"
22115,super_sendStickyOrderedBroadcastAsUser,"    void super_sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras);"
22116,super_sendStickyOrderedBroadcast,"    void super_sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler,
            int initialCode, String initialData, Bundle initialExtras);"
22117,super_sendStickyBroadcastAsUser,"    void super_sendStickyBroadcastAsUser(Intent intent, UserHandle user);
"
22118,super_sendStickyBroadcast,"    void super_sendStickyBroadcast(Intent intent);
"
22119,super_sendOrderedBroadcastAsUser,"    void super_sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData,"
22120,super_sendOrderedBroadcast,"    void super_sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras);"
22121,super_sendOrderedBroadcast,"    void super_sendOrderedBroadcast(Intent intent, String receiverPermission);
"
22122,super_sendBroadcastAsUser,"    void super_sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission);
"
22123,super_sendBroadcastAsUser,"    void super_sendBroadcastAsUser(Intent intent, UserHandle user);
"
22124,super_sendBroadcast,"    void super_sendBroadcast(Intent intent, String receiverPermission);
"
22126,super_revokeUriPermission,"    void super_revokeUriPermission(String targetPackage, Uri uri, int modeFlags);
"
22127,super_revokeUriPermission,"    void super_revokeUriPermission(Uri uri, int modeFlags);
"
22128,super_requestVisibleBehind,"    boolean super_requestVisibleBehind(boolean visible);
"
22129,super_requestDragAndDropPermissions,"    DragAndDropPermissions super_requestDragAndDropPermissions(DragEvent event);
"
22131,super_removeStickyBroadcastAsUser,"    void super_removeStickyBroadcastAsUser(Intent intent, UserHandle user);
"
22132,super_removeStickyBroadcast,"    void super_removeStickyBroadcast(Intent intent);
"
22134,super_registerReceiver,"    Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler, int flags);"
22135,super_registerReceiver,"    Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler);"
22136,super_registerReceiver,"    Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags);
"
22137,super_registerReceiver,"    Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter);
"
22139,super_registerComponentCallbacks,"    void super_registerComponentCallbacks(ComponentCallbacks callback);
"
22141,super_putExtraData,"    void super_putExtraData(ExtraData extraData);
"
22144,super_overridePendingTransition,"    void super_overridePendingTransition(int enterAnim, int exitAnim);
"
22145,super_openOrCreateDatabase,"    SQLiteDatabase super_openOrCreateDatabase(String name, int mode, CursorFactory factory,
            DatabaseErrorHandler errorHandler);"
22146,super_openOrCreateDatabase,"    SQLiteDatabase super_openOrCreateDatabase(String name, int mode, CursorFactory factory);
"
22148,super_openFileOutput,"    FileOutputStream super_openFileOutput(String name, int mode) throws FileNotFoundException;
"
22149,super_openFileInput,"    FileInputStream super_openFileInput(String name) throws FileNotFoundException;
"
22151,super_onWindowStartingSupportActionMode,"    ActionMode super_onWindowStartingSupportActionMode(@NonNull Callback callback);
"
22152,super_onWindowStartingActionMode,"    android.view.ActionMode super_onWindowStartingActionMode(android.view.ActionMode.Callback callback, int type);
"
22153,super_onWindowStartingActionMode,"    android.view.ActionMode super_onWindowStartingActionMode(android.view.ActionMode.Callback callback);
"
22154,super_onWindowFocusChanged,"    void super_onWindowFocusChanged(boolean hasFocus);
"
22155,super_onWindowAttributesChanged,"    void super_onWindowAttributesChanged(WindowManager.LayoutParams params);
"
22160,super_onTrackballEvent,"    boolean super_onTrackballEvent(MotionEvent event);
"
22161,super_onTouchEvent,"    boolean super_onTouchEvent(MotionEvent event);
"
22162,super_onTitleChanged,"    void super_onTitleChanged(CharSequence title, int color);
"
22165,super_onSupportActionModeStarted,"    void super_onSupportActionModeStarted(@NonNull ActionMode mode);
"
22166,super_onSupportActionModeFinished,"    void super_onSupportActionModeFinished(@NonNull ActionMode mode);
"
22171,super_onSearchRequested,"    boolean super_onSearchRequested(@Nullable SearchEvent searchEvent);
"
22172,super_onSaveInstanceState,"    void super_onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState);
"
22173,super_onSaveInstanceState,"    void super_onSaveInstanceState(Bundle outState);
"
22176,super_onRestoreInstanceState,"    void super_onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState);
"
22177,super_onRestoreInstanceState,"    void super_onRestoreInstanceState(Bundle savedInstanceState);
"
22181,super_onProvideKeyboardShortcuts,"    void super_onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, Menu menu, int deviceId);
"
22182,super_onProvideAssistData,"    void super_onProvideAssistData(Bundle data);
"
22183,super_onProvideAssistContent,"    void super_onProvideAssistContent(AssistContent outContent);
"
22184,super_onPrepareSupportNavigateUpTaskStack,"    void super_onPrepareSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder);
"
22185,super_onPreparePanel,"    boolean super_onPreparePanel(int featureId, View view, Menu menu);
"
22186,super_onPrepareOptionsPanel,"    boolean super_onPrepareOptionsPanel(View view, Menu menu);
"
22187,super_onPrepareOptionsMenu,"    boolean super_onPrepareOptionsMenu(Menu menu);
"
22188,super_onPrepareNavigateUpTaskStack,"    void super_onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder builder);
"
22189,super_onPrepareDialog,"    void super_onPrepareDialog(int id, Dialog dialog, Bundle args);
"
22190,super_onPrepareDialog,"    void super_onPrepareDialog(int id, Dialog dialog);
"
22192,super_onPostCreate,"    void super_onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState);
"
22193,super_onPostCreate,"    void super_onPostCreate(@Nullable Bundle savedInstanceState);
"
22194,super_onPictureInPictureModeChanged,"    void super_onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig);
"
22197,super_onPanelClosed,"    void super_onPanelClosed(int featureId, Menu menu);
"
22201,super_onNavigateUpFromChild,"    boolean super_onNavigateUpFromChild(Activity child);
"
22203,super_onMultiWindowModeChanged,"    void super_onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig);
"
22205,super_onMenuOpened,"    boolean super_onMenuOpened(int featureId, Menu menu);
"
22207,super_onLocalVoiceInteractionStopped,"    void super_onLocalVoiceInteractionStopped();
"
22208,super_onLocalVoiceInteractionStarted,"    void super_onLocalVoiceInteractionStarted();
"
22209,super_onKeyUp,"    boolean super_onKeyUp(int keyCode, KeyEvent event);
"
22210,super_onKeyShortcut,"    boolean super_onKeyShortcut(int keyCode, KeyEvent event);
"
22211,super_onKeyMultiple,"    boolean super_onKeyMultiple(int keyCode, int repeatCount, KeyEvent event);
"
22212,super_onKeyLongPress,"    boolean super_onKeyLongPress(int keyCode, KeyEvent event);
"
22213,super_onKeyDown,"    boolean super_onKeyDown(int keyCode, KeyEvent event);
"
22214,super_onGenericMotionEvent,"    boolean super_onGenericMotionEvent(MotionEvent event);
"
22218,super_onCreateView,"    View super_onCreateView(String name, Context context, AttributeSet attrs);
"
22219,super_onCreateView,"    View super_onCreateView(View parent, String name, Context context, AttributeSet attrs);
"
22220,super_onCreateThumbnail,"    boolean super_onCreateThumbnail(Bitmap outBitmap, Canvas canvas);
"
22221,super_onCreateSupportNavigateUpTaskStack,"    void super_onCreateSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder);
"
22222,super_onCreatePanelView,"    View super_onCreatePanelView(int featureId);
"
22223,super_onCreatePanelMenu,"    boolean super_onCreatePanelMenu(int featureId, Menu menu);
"
22224,super_onCreateOptionsMenu,"    boolean super_onCreateOptionsMenu(Menu menu);
"
22225,super_onCreateNavigateUpTaskStack,"    void super_onCreateNavigateUpTaskStack(android.app.TaskStackBuilder builder);
"
22226,super_onCreateDialog,"    Dialog super_onCreateDialog(int id, Bundle args);
"
22228,super_onCreateDescription,"    CharSequence super_onCreateDescription();
"
22230,super_onCreate,"    void super_onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState);
"
22232,super_onContextMenuClosed,"    void super_onContextMenuClosed(Menu menu);
"
22236,super_onChildTitleChanged,"    void super_onChildTitleChanged(Activity childActivity, CharSequence title);
"
22239,super_onAttachFragment,"    void super_onAttachFragment(android.app.Fragment fragment);
"
22240,super_onAttachFragment,"    void super_onAttachFragment(Fragment fragment);
"
22241,super_onApplyThemeResource,"    void super_onApplyThemeResource(Theme theme, int resid, boolean first);
"
22242,super_onActivityResult,"    void super_onActivityResult(int requestCode, int resultCode, @Nullable Intent data);
"
22243,super_onActivityReenter,"    void super_onActivityReenter(int resultCode, Intent data);
"
22244,super_onActionModeStarted,"    void super_onActionModeStarted(android.view.ActionMode mode);
"
22245,super_onActionModeFinished,"    void super_onActionModeFinished(android.view.ActionMode mode);
"
22246,super_navigateUpToFromChild,"    boolean super_navigateUpToFromChild(Activity child, Intent upIntent);
"
22247,super_navigateUpTo,"    boolean super_navigateUpTo(Intent upIntent);
"
22248,super_moveTaskToBack,"    boolean super_moveTaskToBack(boolean nonRoot);
"
22249,super_moveSharedPreferencesFrom,"    boolean super_moveSharedPreferencesFrom(Context sourceContext, String name);
"
22250,super_moveDatabaseFrom,"    boolean super_moveDatabaseFrom(Context sourceContext, String name);
"
22255,super_isLocalVoiceInteractionSupported,"    boolean super_isLocalVoiceInteractionSupported();
"
22256,super_isInPictureInPictureMode,"    boolean super_isInPictureInPictureMode();
"
22260,super_isDeviceProtectedStorage,"    boolean super_isDeviceProtectedStorage();
"
22262,super_isChangingConfigurations,"    boolean super_isChangingConfigurations();
"
22263,super_isActivityTransitionRunning,"    boolean super_isActivityTransitionRunning();
"
22266,super_grantUriPermission,"    void super_grantUriPermission(String toPackage, Uri uri, int modeFlags);
"
22269,super_getWallpaperDesiredMinimumWidth,"    int super_getWallpaperDesiredMinimumWidth();
"
22270,super_getWallpaperDesiredMinimumHeight,"    int super_getWallpaperDesiredMinimumHeight();
"
22272,super_getVoiceInteractor,"    VoiceInteractor super_getVoiceInteractor();
"
22276,super_getSystemServiceName,"    String super_getSystemServiceName(Class<?> serviceClass);
"
22277,super_getSystemService,"    Object super_getSystemService(@NonNull String name);
"
22278,super_getSupportParentActivityIntent,"    Intent super_getSupportParentActivityIntent();
"
22279,super_getSupportLoaderManager,"    LoaderManager super_getSupportLoaderManager();
"
22280,super_getSupportFragmentManager,"    FragmentManager super_getSupportFragmentManager();
"
22282,super_getSharedPreferences,"    SharedPreferences super_getSharedPreferences(String name, int mode);
"
22286,super_getPreferences,"    SharedPreferences super_getPreferences(int mode);
"
22290,super_getPackageManager,"    PackageManager super_getPackageManager();
"
22296,super_getMaxNumPictureInPictureActions,"    int super_getMaxNumPictureInPictureActions();
"
22300,super_getLoaderManager,"    android.app.LoaderManager super_getLoaderManager();
"
22302,super_getLayoutInflater,"    LayoutInflater super_getLayoutInflater();
"
22304,super_getFragmentManager,"    android.app.FragmentManager super_getFragmentManager();
"
22306,super_getFileStreamPath,"    File super_getFileStreamPath(String name);
"
22307,super_getExtraData,"    <T extends SupportActivity.ExtraData> T super_getExtraData(Class<T> extraDataClass);
"
22309,super_getExternalFilesDirs,"    File[] super_getExternalFilesDirs(String type);
"
22310,super_getExternalFilesDir,"    File super_getExternalFilesDir(String type);
"
22313,super_getDrawerToggleDelegate,"    Delegate super_getDrawerToggleDelegate();
"
22314,super_getDir,"    File super_getDir(String name, int mode);
"
22319,super_getContentTransitionManager,"    TransitionManager super_getContentTransitionManager();
"
22321,super_getContentResolver,"    ContentResolver super_getContentResolver();
"
22327,super_getCallingActivity,"    ComponentName super_getCallingActivity();
"
22331,super_getApplicationInfo,"    ApplicationInfo super_getApplicationInfo();
"
22333,super_getActionBar,"    android.app.ActionBar super_getActionBar();
"
22334,super_finishFromChild,"    void super_finishFromChild(Activity child);
"
22338,super_finishActivityFromChild,"    void super_finishActivityFromChild(@NonNull Activity child, int requestCode);
"
22339,super_finishActivity,"    void super_finishActivity(int requestCode);
"
22341,super_findViewById,"    <T extends View> T super_findViewById(int id);
"
22343,super_enterPictureInPictureMode,"    boolean super_enterPictureInPictureMode(@NonNull PictureInPictureParams params);
"
22345,super_enforceUriPermission,"    void super_enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags, String message);"
22346,super_enforceUriPermission,"    void super_enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message);
"
22347,super_enforcePermission,"    void super_enforcePermission(String permission, int pid, int uid, String message);
"
22348,super_enforceCallingUriPermission,"    void super_enforceCallingUriPermission(Uri uri, int modeFlags, String message);
"
22349,super_enforceCallingPermission,"    void super_enforceCallingPermission(String permission, String message);
"
22350,super_enforceCallingOrSelfUriPermission,"    void super_enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message);
"
22351,super_enforceCallingOrSelfPermission,"    void super_enforceCallingOrSelfPermission(String permission, String message);
"
22353,super_dispatchTrackballEvent,"    boolean super_dispatchTrackballEvent(MotionEvent ev);
"
22354,super_dispatchTouchEvent,"    boolean super_dispatchTouchEvent(MotionEvent ev);
"
22355,super_dispatchPopulateAccessibilityEvent,"    boolean super_dispatchPopulateAccessibilityEvent(AccessibilityEvent event);
"
22356,super_dispatchKeyShortcutEvent,"    boolean super_dispatchKeyShortcutEvent(KeyEvent event);
"
22357,super_dispatchKeyEvent,"    boolean super_dispatchKeyEvent(KeyEvent event);
"
22358,super_dispatchGenericMotionEvent,"    boolean super_dispatchGenericMotionEvent(MotionEvent ev);
"
22359,super_deleteSharedPreferences,"    boolean super_deleteSharedPreferences(String name);
"
22361,super_deleteDatabase,"    boolean super_deleteDatabase(String name);
"
22363,super_createPendingResult,"    PendingIntent super_createPendingResult(int requestCode, @NonNull Intent data, int flags);
"
22364,super_createPackageContext,"    Context super_createPackageContext(String packageName, int flags) throws NameNotFoundException;
"
22365,super_createDisplayContext,"    Context super_createDisplayContext(Display display);
"
22366,super_createDeviceProtectedStorageContext,"    Context super_createDeviceProtectedStorageContext();
"
22367,super_createContextForSplit,"    Context super_createContextForSplit(String splitName) throws NameNotFoundException;
"
22368,super_createConfigurationContext,"    Context super_createConfigurationContext(Configuration overrideConfiguration);
"
22371,super_clearWallpaper,"    void super_clearWallpaper() throws IOException;
"
22372,super_checkUriPermission,"    int super_checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags);"
22373,super_checkUriPermission,"    int super_checkUriPermission(Uri uri, int pid, int uid, int modeFlags);
"
22374,super_checkSelfPermission,"    int super_checkSelfPermission(String permission);
"
22375,super_checkPermission,"    int super_checkPermission(String permission, int pid, int uid);
"
22376,super_checkCallingUriPermission,"    int super_checkCallingUriPermission(Uri uri, int modeFlags);
"
22377,super_checkCallingPermission,"    int super_checkCallingPermission(String permission);
"
22378,super_checkCallingOrSelfUriPermission,"    int super_checkCallingOrSelfUriPermission(Uri uri, int modeFlags);
"
22379,super_checkCallingOrSelfPermission,"    int super_checkCallingOrSelfPermission(String permission);
"
22380,super_bindService,"    boolean super_bindService(Intent service, ServiceConnection conn, int flags);
"
22381,super_attachBaseContext,"    void super_attachBaseContext(Context newBase);
"
22382,super_applyOverrideConfiguration,"    void super_applyOverrideConfiguration(Configuration overrideConfiguration);
"
22383,super_addContentView,"    void super_addContentView(View view, LayoutParams params);
"
22384,superDispatchKeyEvent,"    boolean superDispatchKeyEvent(KeyEvent event);
"
22389,startSupportActionMode,"    ActionMode startSupportActionMode(@NonNull Callback callback);
"
22390,startService,"    ComponentName startService(Intent service);
"
22391,startSearch,"    void startSearch(@Nullable String initialQuery, boolean selectInitialQuery, @Nullable Bundle appSearchData,
            boolean globalSearch);"
22393,startNextMatchingActivity,"    boolean startNextMatchingActivity(@NonNull Intent intent, @Nullable Bundle options);
"
22394,startNextMatchingActivity,"    boolean startNextMatchingActivity(@NonNull Intent intent);
"
22397,startLocalVoiceInteraction,"    void startLocalVoiceInteraction(Bundle privateOptions);
"
22398,startIntentSenderFromFragment,"    void startIntentSenderFromFragment(Fragment fragment, IntentSender intent, int requestCode,
            @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)"
22399,startIntentSenderFromChild,"    void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, @Nullable Bundle options) throws SendIntentException;"
22400,startIntentSenderFromChild,"    void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException;"
22402,startIntentSenderForResult,"    void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException;"
22403,startIntentSender,"    void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags, Bundle options) throws SendIntentException;"
22404,startIntentSender,"    void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags) throws SendIntentException;"
22405,startInstrumentation,"    boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments);
"
22406,startForegroundService,"    ComponentName startForegroundService(Intent service);
"
22407,startActivityIfNeeded,"    boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode, @Nullable Bundle options);
"
22408,startActivityIfNeeded,"    boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode);
"
22409,startActivityFromFragment,"    void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options);"
22410,startActivityFromFragment,"    void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode);
"
22411,startActivityFromFragment,"    void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode, @Nullable Bundle options);
"
22412,startActivityFromFragment,"    void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode);
"
22413,startActivityFromChild,"    void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode, @Nullable Bundle options);
"
22414,startActivityFromChild,"    void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode);
"
22419,startActivities,"    void startActivities(Intent[] intents, @Nullable Bundle options);
"
22421,startActionMode,"    android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback, int type);
"
22422,startActionMode,"    android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback);
"
22425,shouldUpRecreateTask,"    boolean shouldUpRecreateTask(Intent targetIntent);
"
22427,setWallpaper,"    void setWallpaper(InputStream data) throws IOException;
"
22428,setVrModeEnabled,"    void setVrModeEnabled(boolean enabled, @NonNull ComponentName requestedComponent) throws NameNotFoundException;
"
22430,setTurnScreenOn,"    void setTurnScreenOn(boolean turnScreenOn);
"
22434,setTaskDescription,"    void setTaskDescription(TaskDescription taskDescription);
"
22435,setSupportProgressBarVisibility,"    void setSupportProgressBarVisibility(boolean visible);
"
22436,setSupportProgressBarIndeterminateVisibility,"    void setSupportProgressBarIndeterminateVisibility(boolean visible);
"
22437,setSupportProgressBarIndeterminate,"    void setSupportProgressBarIndeterminate(boolean indeterminate);
"
22439,setShowWhenLocked,"    void setShowWhenLocked(boolean showWhenLocked);
"
22440,setPictureInPictureParams,"    void setPictureInPictureParams(@NonNull PictureInPictureParams params);
"
22441,setFinishOnTouchOutside,"    void setFinishOnTouchOutside(boolean finish);
"
22442,setExitSharedElementCallback,"    void setExitSharedElementCallback(android.app.SharedElementCallback callback);
"
22443,setExitSharedElementCallback,"    void setExitSharedElementCallback(SharedElementCallback listener);
"
22444,setEnterSharedElementCallback,"    void setEnterSharedElementCallback(android.app.SharedElementCallback callback);
"
22446,setContentView,"    void setContentView(View view, LayoutParams params);
"
22449,sendStickyOrderedBroadcastAsUser,"    void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras);"
22450,sendStickyOrderedBroadcast,"    void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler,
            int initialCode, String initialData, Bundle initialExtras);"
22451,sendStickyBroadcastAsUser,"    void sendStickyBroadcastAsUser(Intent intent, UserHandle user);
"
22453,sendOrderedBroadcastAsUser,"    void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData,"
22454,sendOrderedBroadcast,"    void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras);"
22455,sendOrderedBroadcast,"    void sendOrderedBroadcast(Intent intent, String receiverPermission);
"
22456,sendBroadcastAsUser,"    void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission);
"
22457,sendBroadcastAsUser,"    void sendBroadcastAsUser(Intent intent, UserHandle user);
"
22458,sendBroadcast,"    void sendBroadcast(Intent intent, String receiverPermission);
"
22460,revokeUriPermission,"    void revokeUriPermission(String targetPackage, Uri uri, int modeFlags);
"
22461,revokeUriPermission,"    void revokeUriPermission(Uri uri, int modeFlags);
"
22462,requestVisibleBehind,"    boolean requestVisibleBehind(boolean visible);
"
22463,requestDragAndDropPermissions,"    DragAndDropPermissions requestDragAndDropPermissions(DragEvent event);
"
22465,removeStickyBroadcastAsUser,"    void removeStickyBroadcastAsUser(Intent intent, UserHandle user);
"
22466,removeStickyBroadcast,"    void removeStickyBroadcast(Intent intent);
"
22468,registerReceiver,"    Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler, int flags);"
22469,registerReceiver,"    Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler);"
22470,registerReceiver,"    Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags);
"
22471,registerReceiver,"    Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter);
"
22473,registerComponentCallbacks,"    void registerComponentCallbacks(ComponentCallbacks callback);
"
22478,overridePendingTransition,"    void overridePendingTransition(int enterAnim, int exitAnim);
"
22479,openOrCreateDatabase,"    SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory,
            DatabaseErrorHandler errorHandler);"
22480,openOrCreateDatabase,"    SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory);
"
22482,openFileOutput,"    FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException;
"
22483,openFileInput,"    FileInputStream openFileInput(String name) throws FileNotFoundException;
"
22485,onWindowStartingSupportActionMode,"    ActionMode onWindowStartingSupportActionMode(@NonNull Callback callback);
"
22486,onWindowStartingActionMode,"    android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback, int type);
"
22487,onWindowStartingActionMode,"    android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback);
"
22488,onWindowFocusChanged,"    void onWindowFocusChanged(boolean hasFocus);
"
22489,onWindowAttributesChanged,"    void onWindowAttributesChanged(WindowManager.LayoutParams params);
"
22494,onTrackballEvent,"    boolean onTrackballEvent(MotionEvent event);
"
22496,onTitleChanged,"    void onTitleChanged(CharSequence title, int color);
"
22499,onSupportActionModeStarted,"    void onSupportActionModeStarted(@NonNull ActionMode mode);
"
22500,onSupportActionModeFinished,"    void onSupportActionModeFinished(@NonNull ActionMode mode);
"
22505,onSearchRequested,"    boolean onSearchRequested(@Nullable SearchEvent searchEvent);
"
22506,onSaveInstanceState,"    void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState);
"
22507,onSaveInstanceState,"    void onSaveInstanceState(Bundle outState);
"
22508,onRetainCustomNonConfigurationInstance,"    Object onRetainCustomNonConfigurationInstance();
"
22509,onRetainCompositeCustomNonConfigurationInstance,"    Object onRetainCompositeCustomNonConfigurationInstance();
"
22512,onRestoreInstanceState,"    void onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState);
"
22513,onRestoreInstanceState,"    void onRestoreInstanceState(Bundle savedInstanceState);
"
22516,onProvideKeyboardShortcuts,"    void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, Menu menu, int deviceId);
"
22518,onProvideAssistContent,"    void onProvideAssistContent(AssistContent outContent);
"
22519,onPrepareSupportNavigateUpTaskStack,"    void onPrepareSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder);
"
22520,onPreparePanel,"    boolean onPreparePanel(int featureId, View view, Menu menu);
"
22521,onPrepareOptionsPanel,"    boolean onPrepareOptionsPanel(View view, Menu menu);
"
22523,onPrepareNavigateUpTaskStack,"    void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder builder);
"
22524,onPrepareDialog,"    void onPrepareDialog(int id, Dialog dialog, Bundle args);
"
22525,onPrepareDialog,"    void onPrepareDialog(int id, Dialog dialog);
"
22527,onPostCreate,"    void onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState);
"
22528,onPostCreate,"    void onPostCreate(@Nullable Bundle savedInstanceState);
"
22529,onPictureInPictureModeChanged,"    void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig);
"
22532,onPanelClosed,"    void onPanelClosed(int featureId, Menu menu);
"
22536,onNavigateUpFromChild,"    boolean onNavigateUpFromChild(Activity child);
"
22538,onMultiWindowModeChanged,"    void onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig);
"
22540,onMenuOpened,"    boolean onMenuOpened(int featureId, Menu menu);
"
22544,onKeyUp,"    boolean onKeyUp(int keyCode, KeyEvent event);
"
22545,onKeyShortcut,"    boolean onKeyShortcut(int keyCode, KeyEvent event);
"
22546,onKeyMultiple,"    boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event);
"
22547,onKeyLongPress,"    boolean onKeyLongPress(int keyCode, KeyEvent event);
"
22548,onKeyDown,"    boolean onKeyDown(int keyCode, KeyEvent event);
"
22549,onGenericMotionEvent,"    boolean onGenericMotionEvent(MotionEvent event);
"
22553,onCreateThumbnail,"    boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas);
"
22554,onCreateSupportNavigateUpTaskStack,"    void onCreateSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder);
"
22556,onCreatePanelMenu,"    boolean onCreatePanelMenu(int featureId, Menu menu);
"
22558,onCreateNavigateUpTaskStack,"    void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder builder);
"
22559,onCreateDialog,"    Dialog onCreateDialog(int id, Bundle args);
"
22563,onCreate,"    void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState);
"
22569,onChildTitleChanged,"    void onChildTitleChanged(Activity childActivity, CharSequence title);
"
22572,onAttachFragment,"    void onAttachFragment(android.app.Fragment fragment);
"
22573,onAttachFragment,"    void onAttachFragment(Fragment fragment);
"
22574,onApplyThemeResource,"    void onApplyThemeResource(Theme theme, int resid, boolean first);
"
22575,onActivityResult,"    void onActivityResult(int requestCode, int resultCode, @Nullable Intent data);
"
22576,onActivityReenter,"    void onActivityReenter(int resultCode, Intent data);
"
22577,onActionModeStarted,"    void onActionModeStarted(android.view.ActionMode mode);
"
22578,onActionModeFinished,"    void onActionModeFinished(android.view.ActionMode mode);
"
22579,navigateUpToFromChild,"    boolean navigateUpToFromChild(Activity child, Intent upIntent);
"
22582,moveSharedPreferencesFrom,"    boolean moveSharedPreferencesFrom(Context sourceContext, String name);
"
22583,moveDatabaseFrom,"    boolean moveDatabaseFrom(Context sourceContext, String name);
"
22588,isLocalVoiceInteractionSupported,"    boolean isLocalVoiceInteractionSupported();
"
22600,grantUriPermission,"    void grantUriPermission(String toPackage, Uri uri, int modeFlags);
"
22605,setWallpaper,"    void setWallpaper(Bitmap bitmap) throws IOException;
"
22612,getSystemServiceName,"    String getSystemServiceName(Class<?> serviceClass);
"
22613,getSystemService,"    Object getSystemService(@NonNull String name);
"
22616,getSupportFragmentManager,"    FragmentManager getSupportFragmentManager();
"
22617,setSupportActionBar,"    void setSupportActionBar(@Nullable Toolbar toolbar);
"
22619,getSharedPreferences,"    SharedPreferences getSharedPreferences(String name, int mode);
"
22621,setRequestedOrientation,"    void setRequestedOrientation(int requestedOrientation);
"
22624,getPreferences,"    SharedPreferences getPreferences(int mode);
"
22638,getLoaderManager,"    android.app.LoaderManager getLoaderManager();
"
22641,getLastNonConfigurationInstance,"    Object getLastNonConfigurationInstance();
"
22642,getLastCustomNonConfigurationInstance,"    Object getLastCustomNonConfigurationInstance();
"
22643,getLastCompositeCustomNonConfigurationInstance,"    Object getLastCompositeCustomNonConfigurationInstance();
"
22646,getFragmentManager,"    android.app.FragmentManager getFragmentManager();
"
22649,getExtraData,"    <T extends SupportActivity.ExtraData> T getExtraData(Class<T> extraDataClass);
"
22651,getExternalFilesDirs,"    File[] getExternalFilesDirs(String type);
"
22661,setContentTransitionManager,"    void setContentTransitionManager(TransitionManager tm);
"
22662,getContentTransitionManager,"    TransitionManager getContentTransitionManager();
"
22676,setActionBar,"    void setActionBar(@Nullable android.widget.Toolbar toolbar);
"
22682,finishActivityFromChild,"    void finishActivityFromChild(@NonNull Activity child, int requestCode);
"
22687,enterPictureInPictureMode,"    boolean enterPictureInPictureMode(@NonNull PictureInPictureParams params);
"
22689,enforceUriPermission,"    void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags,
            String message);"
22690,enforceUriPermission,"    void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message);
"
22691,enforcePermission,"    void enforcePermission(String permission, int pid, int uid, String message);
"
22692,enforceCallingUriPermission,"    void enforceCallingUriPermission(Uri uri, int modeFlags, String message);
"
22693,enforceCallingPermission,"    void enforceCallingPermission(String permission, String message);
"
22694,enforceCallingOrSelfUriPermission,"    void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message);
"
22695,enforceCallingOrSelfPermission,"    void enforceCallingOrSelfPermission(String permission, String message);
"
22697,dispatchTrackballEvent,"    boolean dispatchTrackballEvent(MotionEvent ev);
"
22698,dispatchTouchEvent,"    boolean dispatchTouchEvent(MotionEvent ev);
"
22699,dispatchPopulateAccessibilityEvent,"    boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event);
"
22700,dispatchKeyShortcutEvent,"    boolean dispatchKeyShortcutEvent(KeyEvent event);
"
22701,dispatchKeyEvent,"    boolean dispatchKeyEvent(KeyEvent event);
"
22702,dispatchGenericMotionEvent,"    boolean dispatchGenericMotionEvent(MotionEvent ev);
"
22703,deleteSharedPreferences,"    boolean deleteSharedPreferences(String name);
"
22707,createPendingResult,"    PendingIntent createPendingResult(int requestCode, @NonNull Intent data, int flags);
"
22708,createPackageContext,"    Context createPackageContext(String packageName, int flags) throws NameNotFoundException;
"
22709,createDisplayContext,"    Context createDisplayContext(Display display);
"
22710,createDeviceProtectedStorageContext,"    Context createDeviceProtectedStorageContext();
"
22711,createContextForSplit,"    Context createContextForSplit(String splitName) throws NameNotFoundException;
"
22712,createConfigurationContext,"    Context createConfigurationContext(Configuration overrideConfiguration);
"
22715,clearWallpaper,"    void clearWallpaper() throws IOException;
"
22716,checkUriPermission,"    int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags);
"
22717,checkUriPermission,"    int checkUriPermission(Uri uri, int pid, int uid, int modeFlags);
"
22718,checkSelfPermission,"    int checkSelfPermission(String permission);
"
22719,checkPermission,"    int checkPermission(String permission, int pid, int uid);
"
22720,checkCallingUriPermission,"    int checkCallingUriPermission(Uri uri, int modeFlags);
"
22721,checkCallingPermission,"    int checkCallingPermission(String permission);
"
22722,checkCallingOrSelfUriPermission,"    int checkCallingOrSelfUriPermission(Uri uri, int modeFlags);
"
22723,checkCallingOrSelfPermission,"    int checkCallingOrSelfPermission(String permission);
"
22724,bindService,"    boolean bindService(Intent service, ServiceConnection conn, int flags);
"
22726,applyOverrideConfiguration,"    void applyOverrideConfiguration(Configuration overrideConfiguration);
"
22727,addContentView,"    void addContentView(View view, LayoutParams params);
"
22729,onCreateView,"    View onCreateView(String name, Context context, AttributeSet attrs);
"
22730,onCreateView,"    View onCreateView(View parent, String name, Context context, AttributeSet attrs);
"
22731,unregisterForContextMenu,"    void unregisterForContextMenu(final CallVoid1<View> superCall, View view) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22732,toString,"    String toString(final CallFun0<String> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22733,startPostponedEnterTransition,"    void startPostponedEnterTransition(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22734,startIntentSenderForResult,"    void startIntentSenderForResult(
            final CallVoid7<IntentSender, Integer, Intent, Integer, Integer, Integer, Bundle> superCall,
            IntentSender intent, int requestCode, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,"
22735,startActivityForResult,"    void startActivityForResult(final CallVoid3<Intent, Integer, Bundle> superCall, Intent intent, int requestCode,
            @Nullable Bundle options) {
        synchronized (mSuperListeners) {"
22736,startActivityForResult,"    void startActivityForResult(final CallVoid2<Intent, Integer> superCall, Intent intent, int requestCode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22737,startActivity,"    void startActivity(final CallVoid2<Intent, Bundle> superCall, Intent intent, @Nullable Bundle options) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22738,startActivity,"    void startActivity(final CallVoid1<Intent> superCall, Intent intent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22739,shouldShowRequestPermissionRationale,"    boolean shouldShowRequestPermissionRationale(final CallFun1<Boolean, String> superCall,
            @NonNull String permission) {
        synchronized (mSuperListeners) {"
22740,setUserVisibleHint,"    void setUserVisibleHint(final CallVoid1<Boolean> superCall, boolean isVisibleToUser) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22741,setTargetFragment,"    void setTargetFragment(final CallVoid2<Fragment, Integer> superCall, @Nullable Fragment fragment,
            int requestCode) {
        synchronized (mSuperListeners) {"
22742,setSharedElementReturnTransition,"    void setSharedElementReturnTransition(final CallVoid1<Object> superCall, @Nullable Object transition) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22743,setSharedElementEnterTransition,"    void setSharedElementEnterTransition(final CallVoid1<Object> superCall, @Nullable Object transition) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22744,setReturnTransition,"    void setReturnTransition(final CallVoid1<Object> superCall, @Nullable Object transition) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22745,setRetainInstance,"    void setRetainInstance(final CallVoid1<Boolean> superCall, boolean retain) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22746,setReenterTransition,"    void setReenterTransition(final CallVoid1<Object> superCall, @Nullable Object transition) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22747,setMenuVisibility,"    void setMenuVisibility(final CallVoid1<Boolean> superCall, boolean menuVisible) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22748,setInitialSavedState,"    void setInitialSavedState(final CallVoid1<Fragment.SavedState> superCall, @Nullable Fragment.SavedState state) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22749,setHasOptionsMenu,"    void setHasOptionsMenu(final CallVoid1<Boolean> superCall, boolean hasMenu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22750,setExitTransition,"    void setExitTransition(final CallVoid1<Object> superCall, @Nullable Object transition) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22751,setExitSharedElementCallback,"    void setExitSharedElementCallback(final CallVoid1<SharedElementCallback> superCall,
            SharedElementCallback callback) {
        synchronized (mSuperListeners) {"
22752,setEnterTransition,"    void setEnterTransition(final CallVoid1<Object> superCall, @Nullable Object transition) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22753,setEnterSharedElementCallback,"    void setEnterSharedElementCallback(final CallVoid1<SharedElementCallback> superCall,
            SharedElementCallback callback) {
        synchronized (mSuperListeners) {"
22754,setArguments,"    void setArguments(final CallVoid1<Bundle> superCall, @Nullable Bundle args) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22755,setAllowReturnTransitionOverlap,"    void setAllowReturnTransitionOverlap(final CallVoid1<Boolean> superCall, boolean allow) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22756,setAllowEnterTransitionOverlap,"    void setAllowEnterTransitionOverlap(final CallVoid1<Boolean> superCall, boolean allow) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22757,registerForContextMenu,"    void registerForContextMenu(final CallVoid1<View> superCall, View view) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22758,postponeEnterTransition,"    void postponeEnterTransition(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22759,onViewStateRestored,"    void onViewStateRestored(final CallVoid1<Bundle> superCall, @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22760,onViewCreated,"    void onViewCreated(final CallVoid2<View, Bundle> superCall, @NonNull View view,
            @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {"
22761,onStop,"    void onStop(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22762,onStart,"    void onStart(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22763,onSaveInstanceState,"    void onSaveInstanceState(final CallVoid1<Bundle> superCall, @NonNull Bundle outState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22764,onResume,"    void onResume(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22765,onRequestPermissionsResult,"    void onRequestPermissionsResult(final CallVoid3<Integer, String[], int[]> superCall, int requestCode,
            @NonNull String[] permissions, @NonNull int[] grantResults) {
        synchronized (mSuperListeners) {"
22766,onPrepareOptionsMenu,"    void onPrepareOptionsMenu(final CallVoid1<Menu> superCall, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22767,onPictureInPictureModeChanged,"    void onPictureInPictureModeChanged(final CallVoid1<Boolean> superCall, boolean isInPictureInPictureMode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22768,onPause,"    void onPause(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22769,onOptionsMenuClosed,"    void onOptionsMenuClosed(final CallVoid1<Menu> superCall, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22770,onOptionsItemSelected,"    boolean onOptionsItemSelected(final CallFun1<Boolean, MenuItem> superCall, MenuItem item) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22771,onMultiWindowModeChanged,"    void onMultiWindowModeChanged(final CallVoid1<Boolean> superCall, boolean isInMultiWindowMode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22772,onLowMemory,"    void onLowMemory(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22773,onInflate,"    void onInflate(final CallVoid3<Activity, AttributeSet, Bundle> superCall, Activity activity, AttributeSet attrs,
            Bundle savedInstanceState) {
        synchronized (mSuperListeners) {"
22774,onInflate,"    void onInflate(final CallVoid3<Context, AttributeSet, Bundle> superCall, Context context, AttributeSet attrs,
            Bundle savedInstanceState) {
        synchronized (mSuperListeners) {"
22775,onHiddenChanged,"    void onHiddenChanged(final CallVoid1<Boolean> superCall, boolean hidden) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22776,onGetLayoutInflater,"    LayoutInflater onGetLayoutInflater(final CallFun1<LayoutInflater, Bundle> superCall,
            @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {"
22777,onDetach,"    void onDetach(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22778,onDestroyView,"    void onDestroyView(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22779,onDestroyOptionsMenu,"    void onDestroyOptionsMenu(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22780,onDestroy,"    void onDestroy(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22781,onCreateView,"    View onCreateView(final CallFun3<View, LayoutInflater, ViewGroup, Bundle> superCall,
            @NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {"
22782,onCreateOptionsMenu,"    void onCreateOptionsMenu(final CallVoid2<Menu, MenuInflater> superCall, Menu menu, MenuInflater inflater) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22783,onCreateContextMenu,"    void onCreateContextMenu(final CallVoid3<ContextMenu, View, ContextMenuInfo> superCall, ContextMenu menu, View v,
            ContextMenuInfo menuInfo) {
        synchronized (mSuperListeners) {"
22784,onCreateAnimator,"    Animator onCreateAnimator(final CallFun3<Animator, Integer, Boolean, Integer> superCall, int transit,
            boolean enter, int nextAnim) {
        synchronized (mSuperListeners) {"
22785,onCreateAnimation,"    Animation onCreateAnimation(final CallFun3<Animation, Integer, Boolean, Integer> superCall, int transit,
            boolean enter, int nextAnim) {
        synchronized (mSuperListeners) {"
22786,onCreate,"    void onCreate(final CallVoid1<Bundle> superCall, @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22787,onContextItemSelected,"    boolean onContextItemSelected(final CallFun1<Boolean, MenuItem> superCall, MenuItem item) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22788,onConfigurationChanged,"    void onConfigurationChanged(final CallVoid1<Configuration> superCall, Configuration newConfig) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22789,onAttachFragment,"    void onAttachFragment(final CallVoid1<Fragment> superCall, Fragment childFragment) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22790,onAttach,"    void onAttach(final CallVoid1<Activity> superCall, Activity activity) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22791,onAttach,"    void onAttach(final CallVoid1<Context> superCall, Context context) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22792,onActivityResult,"    void onActivityResult(final CallVoid3<Integer, Integer, Intent> superCall, int requestCode, int resultCode,
            Intent data) {
        synchronized (mSuperListeners) {"
22793,onActivityCreated,"    void onActivityCreated(final CallVoid1<Bundle> superCall, @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22794,getViewModelStore,"    ViewModelStore getViewModelStore(final CallFun0<ViewModelStore> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22795,getViewLifecycleOwnerLiveData,"    LiveData<android.arch.lifecycle.LifecycleOwner> getViewLifecycleOwnerLiveData(
            final CallFun0<LiveData<android.arch.lifecycle.LifecycleOwner>> superCall) {
        synchronized (mSuperListeners) {"
22796,getViewLifecycleOwner,"    android.arch.lifecycle.LifecycleOwner getViewLifecycleOwner(
            final CallFun0<android.arch.lifecycle.LifecycleOwner> superCall) {
        synchronized (mSuperListeners) {"
22797,getView,"    View getView(final CallFun0<View> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22798,getUserVisibleHint,"    boolean getUserVisibleHint(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22799,getSharedElementReturnTransition,"    Object getSharedElementReturnTransition(final CallFun0<Object> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22800,getSharedElementEnterTransition,"    Object getSharedElementEnterTransition(final CallFun0<Object> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22801,getReturnTransition,"    Object getReturnTransition(final CallFun0<Object> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22802,getReenterTransition,"    Object getReenterTransition(final CallFun0<Object> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22803,getLoaderManager,"    LoaderManager getLoaderManager(final CallFun0<LoaderManager> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22804,getLifecycle,"    android.arch.lifecycle.Lifecycle getLifecycle(final CallFun0<android.arch.lifecycle.Lifecycle> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22805,getLayoutInflater,"    LayoutInflater getLayoutInflater(final CallFun1<LayoutInflater, Bundle> superCall,
            @Nullable Bundle savedFragmentState) {
        synchronized (mSuperListeners) {"
22806,getExitTransition,"    Object getExitTransition(final CallFun0<Object> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22807,getEnterTransition,"    Object getEnterTransition(final CallFun0<Object> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22808,getContext,"    Context getContext(final CallFun0<Context> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22809,getAllowReturnTransitionOverlap,"    boolean getAllowReturnTransitionOverlap(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22810,getAllowEnterTransitionOverlap,"    boolean getAllowEnterTransitionOverlap(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
22811,dump,"    void dump(final CallVoid4<String, FileDescriptor, PrintWriter, String[]> superCall, String prefix,
            FileDescriptor fd, PrintWriter writer, String[] args) {
        synchronized (mSuperListeners) {"
22812,unregisterForContextMenu,"    public void unregisterForContextMenu(View view) {
        verifyMethodCalledFromDelegate(""unregisterForContextMenu(View)"");
        ((CallVoid1<View>) mSuperListeners.pop()).call(view);
    }"
22813,toString,"    public String toString() {
        verifyMethodCalledFromDelegate(""toString()"");
        return ((CallFun0<String>) mSuperListeners.pop()).call();
    }"
22814,startPostponedEnterTransition,"    public void startPostponedEnterTransition() {
        verifyMethodCalledFromDelegate(""startPostponedEnterTransition()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
22815,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, Bundle options) throws SendIntentException {
        verifyMethodCalledFromDelegate(
                ""startIntentSenderForResult(IntentSender, Integer, Intent, Integer, Integer, Integer, Bundle)"");"
22816,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startActivityForResult(Intent, Integer, Bundle)"");
        ((CallVoid3<Intent, Integer, Bundle>) mSuperListeners.pop()).call(intent, requestCode, options);
    }"
22817,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode) {
        verifyMethodCalledFromDelegate(""startActivityForResult(Intent, Integer)"");
        ((CallVoid2<Intent, Integer>) mSuperListeners.pop()).call(intent, requestCode);
    }"
22818,startActivity,"    public void startActivity(Intent intent, @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startActivity(Intent, Bundle)"");
        ((CallVoid2<Intent, Bundle>) mSuperListeners.pop()).call(intent, options);
    }"
22819,startActivity,"    public void startActivity(Intent intent) {
        verifyMethodCalledFromDelegate(""startActivity(Intent)"");
        ((CallVoid1<Intent>) mSuperListeners.pop()).call(intent);
    }"
22820,shouldShowRequestPermissionRationale,"    public boolean shouldShowRequestPermissionRationale(@NonNull String permission) {
        verifyMethodCalledFromDelegate(""shouldShowRequestPermissionRationale(String)"");
        return ((CallFun1<Boolean, String>) mSuperListeners.pop()).call(permission);
    }"
22821,setTargetFragment,"    public void setTargetFragment(@Nullable Fragment fragment, int requestCode) {
        verifyMethodCalledFromDelegate(""setTargetFragment(Fragment, Integer)"");
        ((CallVoid2<Fragment, Integer>) mSuperListeners.pop()).call(fragment, requestCode);
    }"
22822,setRetainInstance,"    public void setRetainInstance(boolean retain) {
        verifyMethodCalledFromDelegate(""setRetainInstance(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(retain);
    }"
22823,setMenuVisibility,"    public void setMenuVisibility(boolean menuVisible) {
        verifyMethodCalledFromDelegate(""setMenuVisibility(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(menuVisible);
    }"
22824,setInitialSavedState,"    public void setInitialSavedState(@Nullable Fragment.SavedState state) {
        verifyMethodCalledFromDelegate(""setInitialSavedState(Fragment.SavedState)"");
        ((CallVoid1<Fragment.SavedState>) mSuperListeners.pop()).call(state);
    }"
22825,setHasOptionsMenu,"    public void setHasOptionsMenu(boolean hasMenu) {
        verifyMethodCalledFromDelegate(""setHasOptionsMenu(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(hasMenu);
    }"
22826,setExitSharedElementCallback,"    public void setExitSharedElementCallback(SharedElementCallback callback) {
        verifyMethodCalledFromDelegate(""setExitSharedElementCallback(SharedElementCallback)"");
        ((CallVoid1<SharedElementCallback>) mSuperListeners.pop()).call(callback);
    }"
22827,setEnterSharedElementCallback,"    public void setEnterSharedElementCallback(SharedElementCallback callback) {
        verifyMethodCalledFromDelegate(""setEnterSharedElementCallback(SharedElementCallback)"");
        ((CallVoid1<SharedElementCallback>) mSuperListeners.pop()).call(callback);
    }"
22828,setArguments,"    public void setArguments(@Nullable Bundle args) {
        verifyMethodCalledFromDelegate(""setArguments(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(args);
    }"
22829,registerForContextMenu,"    public void registerForContextMenu(View view) {
        verifyMethodCalledFromDelegate(""registerForContextMenu(View)"");
        ((CallVoid1<View>) mSuperListeners.pop()).call(view);
    }"
22830,postponeEnterTransition,"    public void postponeEnterTransition() {
        verifyMethodCalledFromDelegate(""postponeEnterTransition()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
22831,onViewStateRestored,"    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onViewStateRestored(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(savedInstanceState);
    }"
22832,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onViewCreated(View, Bundle)"");
        ((CallVoid2<View, Bundle>) mSuperListeners.pop()).call(view, savedInstanceState);
    }"
22833,onStop,"    public void onStop() {
        verifyMethodCalledFromDelegate(""onStop()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
22834,onStart,"    public void onStart() {
        verifyMethodCalledFromDelegate(""onStart()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
22835,onSaveInstanceState,"    public void onSaveInstanceState(@NonNull Bundle outState) {
        verifyMethodCalledFromDelegate(""onSaveInstanceState(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(outState);
    }"
22836,onResume,"    public void onResume() {
        verifyMethodCalledFromDelegate(""onResume()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
22837,onRequestPermissionsResult,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults) {
        verifyMethodCalledFromDelegate(""onRequestPermissionsResult(Integer, String[], int[])"");
        ((CallVoid3<Integer, String[], int[]>) mSuperListeners.pop()).call(requestCode, permissions, grantResults);"
22838,onPrepareOptionsMenu,"    public void onPrepareOptionsMenu(Menu menu) {
        verifyMethodCalledFromDelegate(""onPrepareOptionsMenu(Menu)"");
        ((CallVoid1<Menu>) mSuperListeners.pop()).call(menu);
    }"
22839,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode) {
        verifyMethodCalledFromDelegate(""onPictureInPictureModeChanged(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(isInPictureInPictureMode);
    }"
22840,onPause,"    public void onPause() {
        verifyMethodCalledFromDelegate(""onPause()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
22841,onOptionsMenuClosed,"    public void onOptionsMenuClosed(Menu menu) {
        verifyMethodCalledFromDelegate(""onOptionsMenuClosed(Menu)"");
        ((CallVoid1<Menu>) mSuperListeners.pop()).call(menu);
    }"
22842,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        verifyMethodCalledFromDelegate(""onOptionsItemSelected(MenuItem)"");
        return ((CallFun1<Boolean, MenuItem>) mSuperListeners.pop()).call(item);
    }"
22843,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
        verifyMethodCalledFromDelegate(""onMultiWindowModeChanged(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(isInMultiWindowMode);
    }"
22844,onLowMemory,"    public void onLowMemory() {
        verifyMethodCalledFromDelegate(""onLowMemory()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
22845,onInflate,"    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onInflate(Activity, AttributeSet, Bundle)"");
        ((CallVoid3<Activity, AttributeSet, Bundle>) mSuperListeners.pop()).call(activity, attrs, savedInstanceState);
    }"
22846,onInflate,"    public void onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onInflate(Context, AttributeSet, Bundle)"");
        ((CallVoid3<Context, AttributeSet, Bundle>) mSuperListeners.pop()).call(context, attrs, savedInstanceState);
    }"
22847,onHiddenChanged,"    public void onHiddenChanged(boolean hidden) {
        verifyMethodCalledFromDelegate(""onHiddenChanged(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(hidden);
    }"
22848,onGetLayoutInflater,"    public LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onGetLayoutInflater(Bundle)"");
        return ((CallFun1<LayoutInflater, Bundle>) mSuperListeners.pop()).call(savedInstanceState);
    }"
22849,onDetach,"    public void onDetach() {
        verifyMethodCalledFromDelegate(""onDetach()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
22850,onDestroyView,"    public void onDestroyView() {
        verifyMethodCalledFromDelegate(""onDestroyView()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
22851,onDestroyOptionsMenu,"    public void onDestroyOptionsMenu() {
        verifyMethodCalledFromDelegate(""onDestroyOptionsMenu()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
22852,onDestroy,"    public void onDestroy() {
        verifyMethodCalledFromDelegate(""onDestroy()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
22853,onCreateView,"    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onCreateView(LayoutInflater, ViewGroup, Bundle)"");
        return ((CallFun3<View, LayoutInflater, ViewGroup, Bundle>) mSuperListeners.pop())"
22854,onCreateOptionsMenu,"    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        verifyMethodCalledFromDelegate(""onCreateOptionsMenu(Menu, MenuInflater)"");
        ((CallVoid2<Menu, MenuInflater>) mSuperListeners.pop()).call(menu, inflater);
    }"
22855,onCreateContextMenu,"    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        verifyMethodCalledFromDelegate(""onCreateContextMenu(ContextMenu, View, ContextMenuInfo)"");
        ((CallVoid3<ContextMenu, View, ContextMenuInfo>) mSuperListeners.pop()).call(menu, v, menuInfo);
    }"
22856,onCreateAnimator,"    public Animator onCreateAnimator(int transit, boolean enter, int nextAnim) {
        verifyMethodCalledFromDelegate(""onCreateAnimator(Integer, Boolean, Integer)"");
        return ((CallFun3<Animator, Integer, Boolean, Integer>) mSuperListeners.pop()).call(transit, enter, nextAnim);
    }"
22857,onCreateAnimation,"    public Animation onCreateAnimation(int transit, boolean enter, int nextAnim) {
        verifyMethodCalledFromDelegate(""onCreateAnimation(Integer, Boolean, Integer)"");
        return ((CallFun3<Animation, Integer, Boolean, Integer>) mSuperListeners.pop())
                .call(transit, enter, nextAnim);"
22858,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onCreate(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(savedInstanceState);
    }"
22859,onContextItemSelected,"    public boolean onContextItemSelected(MenuItem item) {
        verifyMethodCalledFromDelegate(""onContextItemSelected(MenuItem)"");
        return ((CallFun1<Boolean, MenuItem>) mSuperListeners.pop()).call(item);
    }"
22860,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        verifyMethodCalledFromDelegate(""onConfigurationChanged(Configuration)"");
        ((CallVoid1<Configuration>) mSuperListeners.pop()).call(newConfig);
    }"
22861,onAttachFragment,"    public void onAttachFragment(Fragment childFragment) {
        verifyMethodCalledFromDelegate(""onAttachFragment(Fragment)"");
        ((CallVoid1<Fragment>) mSuperListeners.pop()).call(childFragment);
    }"
22862,onAttach,"    public void onAttach(Activity activity) {
        verifyMethodCalledFromDelegate(""onAttach(Activity)"");
        ((CallVoid1<Activity>) mSuperListeners.pop()).call(activity);
    }"
22863,onAttach,"    public void onAttach(Context context) {
        verifyMethodCalledFromDelegate(""onAttach(Context)"");
        ((CallVoid1<Context>) mSuperListeners.pop()).call(context);
    }"
22864,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        verifyMethodCalledFromDelegate(""onActivityResult(Integer, Integer, Intent)"");
        ((CallVoid3<Integer, Integer, Intent>) mSuperListeners.pop()).call(requestCode, resultCode, data);
    }"
22865,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onActivityCreated(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(savedInstanceState);
    }"
22866,getViewModelStore,"    public ViewModelStore getViewModelStore() {
        verifyMethodCalledFromDelegate(""getViewModelStore()"");
        return ((CallFun0<ViewModelStore>) mSuperListeners.pop()).call();
    }"
22867,getViewLifecycleOwnerLiveData,"    public LiveData<android.arch.lifecycle.LifecycleOwner> getViewLifecycleOwnerLiveData() {
        verifyMethodCalledFromDelegate(""getViewLifecycleOwnerLiveData()"");
        return ((CallFun0<LiveData<android.arch.lifecycle.LifecycleOwner>>) mSuperListeners.pop()).call();
    }"
22868,getViewLifecycleOwner,"    public android.arch.lifecycle.LifecycleOwner getViewLifecycleOwner() {
        verifyMethodCalledFromDelegate(""getViewLifecycleOwner()"");
        return ((CallFun0<android.arch.lifecycle.LifecycleOwner>) mSuperListeners.pop()).call();
    }"
22869,getView,"    public View getView() {
        verifyMethodCalledFromDelegate(""getView()"");
        return ((CallFun0<View>) mSuperListeners.pop()).call();
    }"
22870,setUserVisibleHint,"    public void setUserVisibleHint(boolean isVisibleToUser) {
        verifyMethodCalledFromDelegate(""setUserVisibleHint(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(isVisibleToUser);
    }"
22871,getUserVisibleHint,"    public boolean getUserVisibleHint() {
        verifyMethodCalledFromDelegate(""getUserVisibleHint()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
22872,setSharedElementReturnTransition,"    public void setSharedElementReturnTransition(@Nullable Object transition) {
        verifyMethodCalledFromDelegate(""setSharedElementReturnTransition(Object)"");
        ((CallVoid1<Object>) mSuperListeners.pop()).call(transition);
    }"
22873,getSharedElementReturnTransition,"    public Object getSharedElementReturnTransition() {
        verifyMethodCalledFromDelegate(""getSharedElementReturnTransition()"");
        return ((CallFun0<Object>) mSuperListeners.pop()).call();
    }"
22874,setSharedElementEnterTransition,"    public void setSharedElementEnterTransition(@Nullable Object transition) {
        verifyMethodCalledFromDelegate(""setSharedElementEnterTransition(Object)"");
        ((CallVoid1<Object>) mSuperListeners.pop()).call(transition);
    }"
22875,getSharedElementEnterTransition,"    public Object getSharedElementEnterTransition() {
        verifyMethodCalledFromDelegate(""getSharedElementEnterTransition()"");
        return ((CallFun0<Object>) mSuperListeners.pop()).call();
    }"
22876,setReturnTransition,"    public void setReturnTransition(@Nullable Object transition) {
        verifyMethodCalledFromDelegate(""setReturnTransition(Object)"");
        ((CallVoid1<Object>) mSuperListeners.pop()).call(transition);
    }"
22877,getReturnTransition,"    public Object getReturnTransition() {
        verifyMethodCalledFromDelegate(""getReturnTransition()"");
        return ((CallFun0<Object>) mSuperListeners.pop()).call();
    }"
22878,setReenterTransition,"    public void setReenterTransition(@Nullable Object transition) {
        verifyMethodCalledFromDelegate(""setReenterTransition(Object)"");
        ((CallVoid1<Object>) mSuperListeners.pop()).call(transition);
    }"
22879,getReenterTransition,"    public Object getReenterTransition() {
        verifyMethodCalledFromDelegate(""getReenterTransition()"");
        return ((CallFun0<Object>) mSuperListeners.pop()).call();
    }"
22880,getLoaderManager,"    public LoaderManager getLoaderManager() {
        verifyMethodCalledFromDelegate(""getLoaderManager()"");
        return ((CallFun0<LoaderManager>) mSuperListeners.pop()).call();
    }"
22881,getLifecycle,"    public android.arch.lifecycle.Lifecycle getLifecycle() {
        verifyMethodCalledFromDelegate(""getLifecycle()"");
        return ((CallFun0<android.arch.lifecycle.Lifecycle>) mSuperListeners.pop()).call();
    }"
22882,getLayoutInflater,"    public LayoutInflater getLayoutInflater(@Nullable Bundle savedFragmentState) {
        verifyMethodCalledFromDelegate(""getLayoutInflater(Bundle)"");
        return ((CallFun1<LayoutInflater, Bundle>) mSuperListeners.pop()).call(savedFragmentState);
    }"
22883,getFragment,"    public Fragment getFragment() {
        return (Fragment) getOriginal();
    }"
22884,setExitTransition,"    public void setExitTransition(@Nullable Object transition) {
        verifyMethodCalledFromDelegate(""setExitTransition(Object)"");
        ((CallVoid1<Object>) mSuperListeners.pop()).call(transition);
    }"
22885,getExitTransition,"    public Object getExitTransition() {
        verifyMethodCalledFromDelegate(""getExitTransition()"");
        return ((CallFun0<Object>) mSuperListeners.pop()).call();
    }"
22886,setEnterTransition,"    public void setEnterTransition(@Nullable Object transition) {
        verifyMethodCalledFromDelegate(""setEnterTransition(Object)"");
        ((CallVoid1<Object>) mSuperListeners.pop()).call(transition);
    }"
22887,getEnterTransition,"    public Object getEnterTransition() {
        verifyMethodCalledFromDelegate(""getEnterTransition()"");
        return ((CallFun0<Object>) mSuperListeners.pop()).call();
    }"
22888,getContext,"    public Context getContext() {
        verifyMethodCalledFromDelegate(""getContext()"");
        return ((CallFun0<Context>) mSuperListeners.pop()).call();
    }"
22889,setAllowReturnTransitionOverlap,"    public void setAllowReturnTransitionOverlap(boolean allow) {
        verifyMethodCalledFromDelegate(""setAllowReturnTransitionOverlap(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(allow);
    }"
22890,getAllowReturnTransitionOverlap,"    public boolean getAllowReturnTransitionOverlap() {
        verifyMethodCalledFromDelegate(""getAllowReturnTransitionOverlap()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
22891,setAllowEnterTransitionOverlap,"    public void setAllowEnterTransitionOverlap(boolean allow) {
        verifyMethodCalledFromDelegate(""setAllowEnterTransitionOverlap(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(allow);
    }"
22892,getAllowEnterTransitionOverlap,"    public boolean getAllowEnterTransitionOverlap() {
        verifyMethodCalledFromDelegate(""getAllowEnterTransitionOverlap()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
22893,dump,"    public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) {
        verifyMethodCalledFromDelegate(""dump(String, FileDescriptor, PrintWriter, String[])"");
        ((CallVoid4<String, FileDescriptor, PrintWriter, String[]>) mSuperListeners.pop())
                .call(prefix, fd, writer, args);"
22894,call,"            public void call(final View view) {
                if (iterator.hasPrevious()) {
                    iterator.previous().unregisterForContextMenu(this, view);"
22895,unregisterForContextMenu,"    public void unregisterForContextMenu(View view) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_unregisterForContextMenu(view);
            return;
        }
"
22896,call,"            public String call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().toString(this);"
22897,toString,"    public String toString() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_toString();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
22898,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().startPostponedEnterTransition(this);"
22899,startPostponedEnterTransition,"    public void startPostponedEnterTransition() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startPostponedEnterTransition();
            return;
        }
"
22900,call,"            public void call(final IntentSender intent, final Integer requestCode, final Intent fillInIntent,
                    final Integer flagsMask, final Integer flagsValues, final Integer extraFlags,
                    final Bundle options) {"
22901,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, Bundle options) throws SendIntentException {
        if (mPlugins.isEmpty()) {
            try {
                getOriginal()
                        .super_startIntentSenderForResult(intent, requestCode, fillInIntent, flagsMask, flagsValues,"
22902,call,"            public void call(final Intent intent, final Integer requestCode, final Bundle options) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivityForResult(this, intent, requestCode, options);"
22903,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityForResult(intent, requestCode, options);
            return;
        }
"
22904,call,"            public void call(final Intent intent, final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivityForResult(this, intent, requestCode);"
22905,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityForResult(intent, requestCode);
            return;
        }
"
22906,call,"            public void call(final Intent intent, final Bundle options) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivity(this, intent, options);"
22907,startActivity,"    public void startActivity(Intent intent, @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivity(intent, options);
            return;
        }
"
22908,call,"            public void call(final Intent intent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivity(this, intent);"
22909,startActivity,"    public void startActivity(Intent intent) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivity(intent);
            return;
        }
"
22910,call,"            public Boolean call(final String permission) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().shouldShowRequestPermissionRationale(this, permission);"
22911,shouldShowRequestPermissionRationale,"    public boolean shouldShowRequestPermissionRationale(@NonNull String permission) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_shouldShowRequestPermissionRationale(permission);
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
22912,call,"            public void call(final Fragment fragment, final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setTargetFragment(this, fragment, requestCode);"
22913,setTargetFragment,"    public void setTargetFragment(@Nullable Fragment fragment, int requestCode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setTargetFragment(fragment, requestCode);
            return;
        }
"
22914,call,"            public void call(final Boolean retain) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setRetainInstance(this, retain);"
22915,setRetainInstance,"    public void setRetainInstance(boolean retain) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setRetainInstance(retain);
            return;
        }
"
22916,call,"            public void call(final Boolean menuVisible) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setMenuVisibility(this, menuVisible);"
22917,setMenuVisibility,"    public void setMenuVisibility(boolean menuVisible) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setMenuVisibility(menuVisible);
            return;
        }
"
22918,call,"            public void call(final Fragment.SavedState state) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setInitialSavedState(this, state);"
22919,setInitialSavedState,"    public void setInitialSavedState(@Nullable Fragment.SavedState state) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setInitialSavedState(state);
            return;
        }
"
22920,call,"            public void call(final Boolean hasMenu) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setHasOptionsMenu(this, hasMenu);"
22921,setHasOptionsMenu,"    public void setHasOptionsMenu(boolean hasMenu) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setHasOptionsMenu(hasMenu);
            return;
        }
"
22922,call,"            public void call(final SharedElementCallback callback) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setExitSharedElementCallback(this, callback);"
22923,setExitSharedElementCallback,"    public void setExitSharedElementCallback(SharedElementCallback callback) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setExitSharedElementCallback(callback);
            return;
        }
"
22924,call,"            public void call(final SharedElementCallback callback) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setEnterSharedElementCallback(this, callback);"
22925,setEnterSharedElementCallback,"    public void setEnterSharedElementCallback(SharedElementCallback callback) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setEnterSharedElementCallback(callback);
            return;
        }
"
22926,call,"            public void call(final Bundle args) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setArguments(this, args);"
22927,setArguments,"    public void setArguments(@Nullable Bundle args) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setArguments(args);
            return;
        }
"
22928,call,"            public void call(final View view) {
                if (iterator.hasPrevious()) {
                    iterator.previous().registerForContextMenu(this, view);"
22929,registerForContextMenu,"    public void registerForContextMenu(View view) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_registerForContextMenu(view);
            return;
        }
"
22930,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().postponeEnterTransition(this);"
22931,postponeEnterTransition,"    public void postponeEnterTransition() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_postponeEnterTransition();
            return;
        }
"
22932,call,"            public void call(final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onViewStateRestored(this, savedInstanceState);"
22933,onViewStateRestored,"    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onViewStateRestored(savedInstanceState);
            return;
        }
"
22934,call,"            public void call(final View view, final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onViewCreated(this, view, savedInstanceState);"
22935,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onViewCreated(view, savedInstanceState);
            return;
        }
"
22936,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onStop(this);"
22937,onStop,"    public void onStop() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onStop();
            return;
        }
"
22938,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onStart(this);"
22939,onStart,"    public void onStart() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onStart();
            return;
        }
"
22940,call,"            public void call(final Bundle outState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onSaveInstanceState(this, outState);"
22941,onSaveInstanceState,"    public void onSaveInstanceState(@NonNull Bundle outState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onSaveInstanceState(outState);
            return;
        }
"
22942,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onResume(this);"
22943,onResume,"    public void onResume() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onResume();
            return;
        }
"
22944,call,"            public void call(final Integer requestCode, final String[] permissions, final int[] grantResults) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onRequestPermissionsResult(this, requestCode, permissions, grantResults);"
22945,onRequestPermissionsResult,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onRequestPermissionsResult(requestCode, permissions, grantResults);
            return;
        }"
22946,call,"            public void call(final Menu menu) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPrepareOptionsMenu(this, menu);"
22947,onPrepareOptionsMenu,"    public void onPrepareOptionsMenu(Menu menu) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPrepareOptionsMenu(menu);
            return;
        }
"
22948,call,"            public void call(final Boolean isInPictureInPictureMode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPictureInPictureModeChanged(this, isInPictureInPictureMode);"
22949,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPictureInPictureModeChanged(isInPictureInPictureMode);
            return;
        }
"
22950,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPause(this);"
22951,onPause,"    public void onPause() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPause();
            return;
        }
"
22952,call,"            public void call(final Menu menu) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onOptionsMenuClosed(this, menu);"
22953,onOptionsMenuClosed,"    public void onOptionsMenuClosed(Menu menu) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onOptionsMenuClosed(menu);
            return;
        }
"
22954,call,"            public Boolean call(final MenuItem item) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onOptionsItemSelected(this, item);"
22955,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onOptionsItemSelected(item);
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
22956,call,"            public void call(final Boolean isInMultiWindowMode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onMultiWindowModeChanged(this, isInMultiWindowMode);"
22957,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onMultiWindowModeChanged(isInMultiWindowMode);
            return;
        }
"
22958,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onLowMemory(this);"
22959,onLowMemory,"    public void onLowMemory() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onLowMemory();
            return;
        }
"
22960,call,"            public void call(final Activity activity, final AttributeSet attrs, final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onInflate(this, activity, attrs, savedInstanceState);"
22961,onInflate,"    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onInflate(activity, attrs, savedInstanceState);
            return;
        }
"
22962,call,"            public void call(final Context context, final AttributeSet attrs, final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onInflate(this, context, attrs, savedInstanceState);"
22963,onInflate,"    public void onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onInflate(context, attrs, savedInstanceState);
            return;
        }
"
22964,call,"            public void call(final Boolean hidden) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onHiddenChanged(this, hidden);"
22965,onHiddenChanged,"    public void onHiddenChanged(boolean hidden) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onHiddenChanged(hidden);
            return;
        }
"
22966,call,"            public LayoutInflater call(final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onGetLayoutInflater(this, savedInstanceState);"
22967,onGetLayoutInflater,"    public LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onGetLayoutInflater(savedInstanceState);
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
22968,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onDetach(this);"
22969,onDetach,"    public void onDetach() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onDetach();
            return;
        }
"
22970,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onDestroyView(this);"
22971,onDestroyView,"    public void onDestroyView() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onDestroyView();
            return;
        }
"
22972,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onDestroyOptionsMenu(this);"
22973,onDestroyOptionsMenu,"    public void onDestroyOptionsMenu() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onDestroyOptionsMenu();
            return;
        }
"
22974,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onDestroy(this);"
22975,onDestroy,"    public void onDestroy() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onDestroy();
            return;
        }
"
22976,call,"            public View call(final LayoutInflater inflater, final ViewGroup container,
                    final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {"
22977,onCreateView,"    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateView(inflater, container, savedInstanceState);
        }
"
22978,call,"            public void call(final Menu menu, final MenuInflater inflater) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onCreateOptionsMenu(this, menu, inflater);"
22979,onCreateOptionsMenu,"    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onCreateOptionsMenu(menu, inflater);
            return;
        }
"
22980,call,"            public void call(final ContextMenu menu, final View v, final ContextMenuInfo menuInfo) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onCreateContextMenu(this, menu, v, menuInfo);"
22981,onCreateContextMenu,"    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onCreateContextMenu(menu, v, menuInfo);
            return;
        }
"
22982,call,"            public Animator call(final Integer transit, final Boolean enter, final Integer nextAnim) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateAnimator(this, transit, enter, nextAnim);"
22983,onCreateAnimator,"    public Animator onCreateAnimator(int transit, boolean enter, int nextAnim) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateAnimator(transit, enter, nextAnim);
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
22984,call,"            public Animation call(final Integer transit, final Boolean enter, final Integer nextAnim) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateAnimation(this, transit, enter, nextAnim);"
22985,onCreateAnimation,"    public Animation onCreateAnimation(int transit, boolean enter, int nextAnim) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateAnimation(transit, enter, nextAnim);
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
22986,call,"            public void call(final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onCreate(this, savedInstanceState);"
22987,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onCreate(savedInstanceState);
            return;
        }
"
22988,call,"            public Boolean call(final MenuItem item) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onContextItemSelected(this, item);"
22989,onContextItemSelected,"    public boolean onContextItemSelected(MenuItem item) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onContextItemSelected(item);
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
22990,call,"            public void call(final Configuration newConfig) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onConfigurationChanged(this, newConfig);"
22991,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onConfigurationChanged(newConfig);
            return;
        }
"
22992,call,"            public void call(final Fragment childFragment) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onAttachFragment(this, childFragment);"
22993,onAttachFragment,"    public void onAttachFragment(Fragment childFragment) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onAttachFragment(childFragment);
            return;
        }
"
22994,call,"            public void call(final Activity activity) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onAttach(this, activity);"
22995,onAttach,"    public void onAttach(Activity activity) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onAttach(activity);
            return;
        }
"
22996,call,"            public void call(final Context context) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onAttach(this, context);"
22997,onAttach,"    public void onAttach(Context context) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onAttach(context);
            return;
        }
"
22998,call,"            public void call(final Integer requestCode, final Integer resultCode, final Intent data) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onActivityResult(this, requestCode, resultCode, data);"
22999,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onActivityResult(requestCode, resultCode, data);
            return;
        }
"
23000,call,"            public void call(final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onActivityCreated(this, savedInstanceState);"
23001,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onActivityCreated(savedInstanceState);
            return;
        }
"
23002,call,"            public ViewModelStore call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getViewModelStore(this);"
23003,getViewModelStore,"    public ViewModelStore getViewModelStore() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getViewModelStore();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23004,call,"            public LiveData<android.arch.lifecycle.LifecycleOwner> call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getViewLifecycleOwnerLiveData(this);"
23005,getViewLifecycleOwnerLiveData,"    public LiveData<android.arch.lifecycle.LifecycleOwner> getViewLifecycleOwnerLiveData() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getViewLifecycleOwnerLiveData();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23006,call,"            public android.arch.lifecycle.LifecycleOwner call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getViewLifecycleOwner(this);"
23007,getViewLifecycleOwner,"    public android.arch.lifecycle.LifecycleOwner getViewLifecycleOwner() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getViewLifecycleOwner();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23008,call,"            public View call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getView(this);"
23009,getView,"    public View getView() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getView();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23010,call,"            public void call(final Boolean isVisibleToUser) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setUserVisibleHint(this, isVisibleToUser);"
23011,setUserVisibleHint,"    public void setUserVisibleHint(boolean isVisibleToUser) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setUserVisibleHint(isVisibleToUser);
            return;
        }
"
23012,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getUserVisibleHint(this);"
23013,getUserVisibleHint,"    public boolean getUserVisibleHint() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getUserVisibleHint();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23014,call,"            public void call(final Object transition) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setSharedElementReturnTransition(this, transition);"
23015,setSharedElementReturnTransition,"    public void setSharedElementReturnTransition(@Nullable Object transition) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setSharedElementReturnTransition(transition);
            return;
        }
"
23016,call,"            public Object call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSharedElementReturnTransition(this);"
23017,getSharedElementReturnTransition,"    public Object getSharedElementReturnTransition() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getSharedElementReturnTransition();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23018,call,"            public void call(final Object transition) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setSharedElementEnterTransition(this, transition);"
23019,setSharedElementEnterTransition,"    public void setSharedElementEnterTransition(@Nullable Object transition) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setSharedElementEnterTransition(transition);
            return;
        }
"
23020,call,"            public Object call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSharedElementEnterTransition(this);"
23021,getSharedElementEnterTransition,"    public Object getSharedElementEnterTransition() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getSharedElementEnterTransition();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23022,call,"            public void call(final Object transition) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setReturnTransition(this, transition);"
23023,setReturnTransition,"    public void setReturnTransition(@Nullable Object transition) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setReturnTransition(transition);
            return;
        }
"
23024,call,"            public Object call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getReturnTransition(this);"
23025,getReturnTransition,"    public Object getReturnTransition() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getReturnTransition();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23026,call,"            public void call(final Object transition) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setReenterTransition(this, transition);"
23027,setReenterTransition,"    public void setReenterTransition(@Nullable Object transition) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setReenterTransition(transition);
            return;
        }
"
23028,call,"            public Object call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getReenterTransition(this);"
23029,getReenterTransition,"    public Object getReenterTransition() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getReenterTransition();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23030,call,"            public LoaderManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getLoaderManager(this);"
23031,getLoaderManager,"    public LoaderManager getLoaderManager() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getLoaderManager();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23032,call,"            public android.arch.lifecycle.Lifecycle call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getLifecycle(this);"
23033,getLifecycle,"    public android.arch.lifecycle.Lifecycle getLifecycle() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getLifecycle();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23034,call,"            public LayoutInflater call(final Bundle savedFragmentState) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getLayoutInflater(this, savedFragmentState);"
23035,getLayoutInflater,"    public LayoutInflater getLayoutInflater(@Nullable Bundle savedFragmentState) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getLayoutInflater(savedFragmentState);
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23036,call,"            public void call(final Object transition) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setExitTransition(this, transition);"
23037,setExitTransition,"    public void setExitTransition(@Nullable Object transition) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setExitTransition(transition);
            return;
        }
"
23038,call,"            public Object call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getExitTransition(this);"
23039,getExitTransition,"    public Object getExitTransition() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getExitTransition();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23040,call,"            public void call(final Object transition) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setEnterTransition(this, transition);"
23041,setEnterTransition,"    public void setEnterTransition(@Nullable Object transition) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setEnterTransition(transition);
            return;
        }
"
23042,call,"            public Object call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getEnterTransition(this);"
23043,getEnterTransition,"    public Object getEnterTransition() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getEnterTransition();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23044,call,"            public Context call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getContext(this);"
23045,getContext,"    public Context getContext() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getContext();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23046,call,"            public void call(final Boolean allow) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setAllowReturnTransitionOverlap(this, allow);"
23047,setAllowReturnTransitionOverlap,"    public void setAllowReturnTransitionOverlap(boolean allow) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setAllowReturnTransitionOverlap(allow);
            return;
        }
"
23048,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getAllowReturnTransitionOverlap(this);"
23049,getAllowReturnTransitionOverlap,"    public boolean getAllowReturnTransitionOverlap() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getAllowReturnTransitionOverlap();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23050,call,"            public void call(final Boolean allow) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setAllowEnterTransitionOverlap(this, allow);"
23051,setAllowEnterTransitionOverlap,"    public void setAllowEnterTransitionOverlap(boolean allow) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setAllowEnterTransitionOverlap(allow);
            return;
        }
"
23052,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getAllowEnterTransitionOverlap(this);"
23053,getAllowEnterTransitionOverlap,"    public boolean getAllowEnterTransitionOverlap() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getAllowEnterTransitionOverlap();
        }

        final ListIterator<FragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23054,call,"            public void call(final String prefix, final FileDescriptor fd, final PrintWriter writer,
                    final String[] args) {
                if (iterator.hasPrevious()) {"
23055,dump,"    public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_dump(prefix, fd, writer, args);
            return;
        }
"
23056,showNow,"    void showNow(final CallVoid2<FragmentManager, String> superCall, FragmentManager manager, String tag) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
23057,show,"    int show(final CallFun2<Integer, FragmentTransaction, String> superCall, FragmentTransaction transaction,
            String tag) {
        synchronized (mSuperListeners) {"
23058,show,"    void show(final CallVoid2<FragmentManager, String> superCall, FragmentManager manager, String tag) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
23059,setupDialog,"    void setupDialog(final CallVoid2<Dialog, Integer> superCall, Dialog dialog, int style) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
23060,setStyle,"    void setStyle(final CallVoid2<Integer, Integer> superCall, int style, int theme) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
23061,setShowsDialog,"    void setShowsDialog(final CallVoid1<Boolean> superCall, boolean showsDialog) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
23062,setCancelable,"    void setCancelable(final CallVoid1<Boolean> superCall, boolean cancelable) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
23064,onDismiss,"    void onDismiss(final CallVoid1<DialogInterface> superCall, DialogInterface dialog) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
23065,onCreateDialog,"    Dialog onCreateDialog(final CallFun1<Dialog, Bundle> superCall, @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
23066,onCancel,"    void onCancel(final CallVoid1<DialogInterface> superCall, DialogInterface dialog) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
23067,isCancelable,"    boolean isCancelable(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
23068,getTheme,"    int getTheme(final CallFun0<Integer> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
23069,getShowsDialog,"    boolean getShowsDialog(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
23070,getDialog,"    Dialog getDialog(final CallFun0<Dialog> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
23071,dismissAllowingStateLoss,"    void dismissAllowingStateLoss(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
23072,dismiss,"    void dismiss(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
23073,showNow,"    public void showNow(FragmentManager manager, String tag) {
        verifyMethodCalledFromDelegate(""showNow(FragmentManager, String)"");
        ((CallVoid2<FragmentManager, String>) mSuperListeners.pop()).call(manager, tag);
    }"
23074,show,"    public int show(FragmentTransaction transaction, String tag) {
        verifyMethodCalledFromDelegate(""show(FragmentTransaction, String)"");
        return ((CallFun2<Integer, FragmentTransaction, String>) mSuperListeners.pop()).call(transaction, tag);
    }"
23075,show,"    public void show(FragmentManager manager, String tag) {
        verifyMethodCalledFromDelegate(""show(FragmentManager, String)"");
        ((CallVoid2<FragmentManager, String>) mSuperListeners.pop()).call(manager, tag);
    }"
23076,setupDialog,"    public void setupDialog(Dialog dialog, int style) {
        verifyMethodCalledFromDelegate(""setupDialog(Dialog, Integer)"");
        ((CallVoid2<Dialog, Integer>) mSuperListeners.pop()).call(dialog, style);
    }"
23077,setStyle,"    public void setStyle(int style, int theme) {
        verifyMethodCalledFromDelegate(""setStyle(Integer, Integer)"");
        ((CallVoid2<Integer, Integer>) mSuperListeners.pop()).call(style, theme);
    }"
23079,onDismiss,"    public void onDismiss(DialogInterface dialog) {
        verifyMethodCalledFromDelegate(""onDismiss(DialogInterface)"");
        ((CallVoid1<DialogInterface>) mSuperListeners.pop()).call(dialog);
    }"
23080,onCreateDialog,"    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onCreateDialog(Bundle)"");
        return ((CallFun1<Dialog, Bundle>) mSuperListeners.pop()).call(savedInstanceState);
    }"
23081,onCancel,"    public void onCancel(DialogInterface dialog) {
        verifyMethodCalledFromDelegate(""onCancel(DialogInterface)"");
        ((CallVoid1<DialogInterface>) mSuperListeners.pop()).call(dialog);
    }"
23082,setCancelable,"    public void setCancelable(boolean cancelable) {
        verifyMethodCalledFromDelegate(""setCancelable(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(cancelable);
    }"
23083,isCancelable,"    public boolean isCancelable() {
        verifyMethodCalledFromDelegate(""isCancelable()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
23084,getTheme,"    public int getTheme() {
        verifyMethodCalledFromDelegate(""getTheme()"");
        return ((CallFun0<Integer>) mSuperListeners.pop()).call();
    }"
23085,setShowsDialog,"    public void setShowsDialog(boolean showsDialog) {
        verifyMethodCalledFromDelegate(""setShowsDialog(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(showsDialog);
    }"
23086,getShowsDialog,"    public boolean getShowsDialog() {
        verifyMethodCalledFromDelegate(""getShowsDialog()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
23087,getDialogFragment,"    public DialogFragment getDialogFragment() {
        return (DialogFragment) getOriginal();
    }"
23088,getDialog,"    public Dialog getDialog() {
        verifyMethodCalledFromDelegate(""getDialog()"");
        return ((CallFun0<Dialog>) mSuperListeners.pop()).call();
    }"
23089,dismissAllowingStateLoss,"    public void dismissAllowingStateLoss() {
        verifyMethodCalledFromDelegate(""dismissAllowingStateLoss()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
23090,dismiss,"    public void dismiss() {
        verifyMethodCalledFromDelegate(""dismiss()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
23107,unregisterForContextMenu,"    public void unregisterForContextMenu(View view) {
        mFragmentDelegate.unregisterForContextMenu(view);
    }"
23108,toString,"    public String toString() {
        return mFragmentDelegate.toString();
    }"
23109,startPostponedEnterTransition,"    public void startPostponedEnterTransition() {
        mFragmentDelegate.startPostponedEnterTransition();
    }"
23110,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, Bundle options) throws SendIntentException {
        mFragmentDelegate"
23111,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) {
        mFragmentDelegate.startActivityForResult(intent, requestCode, options);
    }"
23112,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode) {
        mFragmentDelegate.startActivityForResult(intent, requestCode);
    }"
23113,startActivity,"    public void startActivity(Intent intent, @Nullable Bundle options) {
        mFragmentDelegate.startActivity(intent, options);
    }"
23114,startActivity,"    public void startActivity(Intent intent) {
        mFragmentDelegate.startActivity(intent);
    }"
23115,call,"            public void call(final FragmentManager manager, final String tag) {
                if (iterator.hasPrevious()) {
                    iterator.previous().showNow(this, manager, tag);"
23116,showNow,"    public void showNow(FragmentManager manager, String tag) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_showNow(manager, tag);
            return;
        }
"
23117,call,"            public Integer call(final FragmentTransaction transaction, final String tag) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().show(this, transaction, tag);"
23118,show,"    public int show(FragmentTransaction transaction, String tag) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_show(transaction, tag);
        }

        final ListIterator<DialogFragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23119,call,"            public void call(final FragmentManager manager, final String tag) {
                if (iterator.hasPrevious()) {
                    iterator.previous().show(this, manager, tag);"
23120,show,"    public void show(FragmentManager manager, String tag) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_show(manager, tag);
            return;
        }
"
23121,shouldShowRequestPermissionRationale,"    public boolean shouldShowRequestPermissionRationale(@NonNull String permission) {
        return mFragmentDelegate.shouldShowRequestPermissionRationale(permission);
    }"
23122,call,"            public void call(final Dialog dialog, final Integer style) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setupDialog(this, dialog, style);"
23123,setupDialog,"    public void setupDialog(Dialog dialog, int style) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setupDialog(dialog, style);
            return;
        }
"
23124,setTargetFragment,"    public void setTargetFragment(@Nullable Fragment fragment, int requestCode) {
        mFragmentDelegate.setTargetFragment(fragment, requestCode);
    }"
23125,call,"            public void call(final Integer style, final Integer theme) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setStyle(this, style, theme);"
23126,setStyle,"    public void setStyle(int style, int theme) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setStyle(style, theme);
            return;
        }
"
23127,setRetainInstance,"    public void setRetainInstance(boolean retain) {
        mFragmentDelegate.setRetainInstance(retain);
    }"
23128,setMenuVisibility,"    public void setMenuVisibility(boolean menuVisible) {
        mFragmentDelegate.setMenuVisibility(menuVisible);
    }"
23129,setInitialSavedState,"    public void setInitialSavedState(@Nullable Fragment.SavedState state) {
        mFragmentDelegate.setInitialSavedState(state);
    }"
23130,setHasOptionsMenu,"    public void setHasOptionsMenu(boolean hasMenu) {
        mFragmentDelegate.setHasOptionsMenu(hasMenu);
    }"
23131,setExitSharedElementCallback,"    public void setExitSharedElementCallback(SharedElementCallback callback) {
        mFragmentDelegate.setExitSharedElementCallback(callback);
    }"
23132,setEnterSharedElementCallback,"    public void setEnterSharedElementCallback(SharedElementCallback callback) {
        mFragmentDelegate.setEnterSharedElementCallback(callback);
    }"
23133,setArguments,"    public void setArguments(@Nullable Bundle args) {
        mFragmentDelegate.setArguments(args);
    }"
23134,registerForContextMenu,"    public void registerForContextMenu(View view) {
        mFragmentDelegate.registerForContextMenu(view);
    }"
23135,postponeEnterTransition,"    public void postponeEnterTransition() {
        mFragmentDelegate.postponeEnterTransition();
    }"
23136,onViewStateRestored,"    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {
        mFragmentDelegate.onViewStateRestored(savedInstanceState);
    }"
23137,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        mFragmentDelegate.onViewCreated(view, savedInstanceState);
    }"
23138,onStop,"    public void onStop() {
        mFragmentDelegate.onStop();
    }"
23139,onStart,"    public void onStart() {
        mFragmentDelegate.onStart();
    }"
23140,onSaveInstanceState,"    public void onSaveInstanceState(@NonNull Bundle outState) {
        mFragmentDelegate.onSaveInstanceState(outState);
    }"
23141,onResume,"    public void onResume() {
        mFragmentDelegate.onResume();
    }"
23142,onRequestPermissionsResult,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults) {
        mFragmentDelegate.onRequestPermissionsResult(requestCode, permissions, grantResults);"
23143,onPrepareOptionsMenu,"    public void onPrepareOptionsMenu(Menu menu) {
        mFragmentDelegate.onPrepareOptionsMenu(menu);
    }"
23144,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode) {
        mFragmentDelegate.onPictureInPictureModeChanged(isInPictureInPictureMode);
    }"
23145,onPause,"    public void onPause() {
        mFragmentDelegate.onPause();
    }"
23146,onOptionsMenuClosed,"    public void onOptionsMenuClosed(Menu menu) {
        mFragmentDelegate.onOptionsMenuClosed(menu);
    }"
23147,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        return mFragmentDelegate.onOptionsItemSelected(item);
    }"
23148,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
        mFragmentDelegate.onMultiWindowModeChanged(isInMultiWindowMode);
    }"
23149,onLowMemory,"    public void onLowMemory() {
        mFragmentDelegate.onLowMemory();
    }"
23150,onInflate,"    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
        mFragmentDelegate.onInflate(activity, attrs, savedInstanceState);
    }"
23151,onInflate,"    public void onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState) {
        mFragmentDelegate.onInflate(context, attrs, savedInstanceState);
    }"
23152,onHiddenChanged,"    public void onHiddenChanged(boolean hidden) {
        mFragmentDelegate.onHiddenChanged(hidden);
    }"
23153,onGetLayoutInflater,"    public LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState) {
        return mFragmentDelegate.onGetLayoutInflater(savedInstanceState);
    }"
23154,call,"            public void call(final DialogInterface dialog) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onDismiss(this, dialog);"
23155,onDismiss,"    public void onDismiss(DialogInterface dialog) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onDismiss(dialog);
            return;
        }
"
23156,onDetach,"    public void onDetach() {
        mFragmentDelegate.onDetach();
    }"
23157,onDestroyView,"    public void onDestroyView() {
        mFragmentDelegate.onDestroyView();
    }"
23158,onDestroyOptionsMenu,"    public void onDestroyOptionsMenu() {
        mFragmentDelegate.onDestroyOptionsMenu();
    }"
23159,onDestroy,"    public void onDestroy() {
        mFragmentDelegate.onDestroy();
    }"
23160,onCreateView,"    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState) {
        return mFragmentDelegate.onCreateView(inflater, container, savedInstanceState);"
23161,onCreateOptionsMenu,"    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        mFragmentDelegate.onCreateOptionsMenu(menu, inflater);
    }"
23162,call,"            public Dialog call(final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateDialog(this, savedInstanceState);"
23163,onCreateDialog,"    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateDialog(savedInstanceState);
        }

        final ListIterator<DialogFragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23164,onCreateContextMenu,"    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        mFragmentDelegate.onCreateContextMenu(menu, v, menuInfo);
    }"
23165,onCreateAnimator,"    public Animator onCreateAnimator(int transit, boolean enter, int nextAnim) {
        return mFragmentDelegate.onCreateAnimator(transit, enter, nextAnim);
    }"
23166,onCreateAnimation,"    public Animation onCreateAnimation(int transit, boolean enter, int nextAnim) {
        return mFragmentDelegate.onCreateAnimation(transit, enter, nextAnim);
    }"
23167,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState) {
        mFragmentDelegate.onCreate(savedInstanceState);
    }"
23168,onContextItemSelected,"    public boolean onContextItemSelected(MenuItem item) {
        return mFragmentDelegate.onContextItemSelected(item);
    }"
23169,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        mFragmentDelegate.onConfigurationChanged(newConfig);
    }"
23170,call,"            public void call(final DialogInterface dialog) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onCancel(this, dialog);"
23171,onCancel,"    public void onCancel(DialogInterface dialog) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onCancel(dialog);
            return;
        }
"
23172,onAttachFragment,"    public void onAttachFragment(Fragment childFragment) {
        mFragmentDelegate.onAttachFragment(childFragment);
    }"
23173,onAttach,"    public void onAttach(Activity activity) {
        mFragmentDelegate.onAttach(activity);
    }"
23174,onAttach,"    public void onAttach(Context context) {
        mFragmentDelegate.onAttach(context);
    }"
23175,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        mFragmentDelegate.onActivityResult(requestCode, resultCode, data);
    }"
23176,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        mFragmentDelegate.onActivityCreated(savedInstanceState);
    }"
23177,call,"            public void call(final Boolean cancelable) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setCancelable(this, cancelable);"
23178,setCancelable,"    public void setCancelable(boolean cancelable) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setCancelable(cancelable);
            return;
        }
"
23179,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isCancelable(this);"
23180,isCancelable,"    public boolean isCancelable() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isCancelable();
        }

        final ListIterator<DialogFragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23181,getViewModelStore,"    public ViewModelStore getViewModelStore() {
        return mFragmentDelegate.getViewModelStore();
    }"
23182,getViewLifecycleOwnerLiveData,"    public LiveData<android.arch.lifecycle.LifecycleOwner> getViewLifecycleOwnerLiveData() {
        return mFragmentDelegate.getViewLifecycleOwnerLiveData();
    }"
23183,getViewLifecycleOwner,"    public android.arch.lifecycle.LifecycleOwner getViewLifecycleOwner() {
        return mFragmentDelegate.getViewLifecycleOwner();
    }"
23184,getView,"    public View getView() {
        return mFragmentDelegate.getView();
    }"
23185,setUserVisibleHint,"    public void setUserVisibleHint(boolean isVisibleToUser) {
        mFragmentDelegate.setUserVisibleHint(isVisibleToUser);
    }"
23186,getUserVisibleHint,"    public boolean getUserVisibleHint() {
        return mFragmentDelegate.getUserVisibleHint();
    }"
23187,call,"            public Integer call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getTheme(this);"
23188,getTheme,"    public int getTheme() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getTheme();
        }

        final ListIterator<DialogFragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23189,call,"            public void call(final Boolean showsDialog) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setShowsDialog(this, showsDialog);"
23190,setShowsDialog,"    public void setShowsDialog(boolean showsDialog) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setShowsDialog(showsDialog);
            return;
        }
"
23191,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getShowsDialog(this);"
23192,getShowsDialog,"    public boolean getShowsDialog() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getShowsDialog();
        }

        final ListIterator<DialogFragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23193,setSharedElementReturnTransition,"    public void setSharedElementReturnTransition(@Nullable Object transition) {
        mFragmentDelegate.setSharedElementReturnTransition(transition);
    }"
23194,getSharedElementReturnTransition,"    public Object getSharedElementReturnTransition() {
        return mFragmentDelegate.getSharedElementReturnTransition();
    }"
23195,setSharedElementEnterTransition,"    public void setSharedElementEnterTransition(@Nullable Object transition) {
        mFragmentDelegate.setSharedElementEnterTransition(transition);
    }"
23196,getSharedElementEnterTransition,"    public Object getSharedElementEnterTransition() {
        return mFragmentDelegate.getSharedElementEnterTransition();
    }"
23197,setReturnTransition,"    public void setReturnTransition(@Nullable Object transition) {
        mFragmentDelegate.setReturnTransition(transition);
    }"
23198,getReturnTransition,"    public Object getReturnTransition() {
        return mFragmentDelegate.getReturnTransition();
    }"
23199,setReenterTransition,"    public void setReenterTransition(@Nullable Object transition) {
        mFragmentDelegate.setReenterTransition(transition);
    }"
23200,getReenterTransition,"    public Object getReenterTransition() {
        return mFragmentDelegate.getReenterTransition();
    }"
23201,getLoaderManager,"    public LoaderManager getLoaderManager() {
        return mFragmentDelegate.getLoaderManager();
    }"
23202,getLifecycle,"    public android.arch.lifecycle.Lifecycle getLifecycle() {
        return mFragmentDelegate.getLifecycle();
    }"
23203,getLayoutInflater,"    public LayoutInflater getLayoutInflater(@Nullable Bundle savedFragmentState) {
        return mFragmentDelegate.getLayoutInflater(savedFragmentState);
    }"
23204,setExitTransition,"    public void setExitTransition(@Nullable Object transition) {
        mFragmentDelegate.setExitTransition(transition);
    }"
23205,getExitTransition,"    public Object getExitTransition() {
        return mFragmentDelegate.getExitTransition();
    }"
23206,setEnterTransition,"    public void setEnterTransition(@Nullable Object transition) {
        mFragmentDelegate.setEnterTransition(transition);
    }"
23207,getEnterTransition,"    public Object getEnterTransition() {
        return mFragmentDelegate.getEnterTransition();
    }"
23208,call,"            public Dialog call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getDialog(this);"
23209,getDialog,"    public Dialog getDialog() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getDialog();
        }

        final ListIterator<DialogFragmentPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
23210,getContext,"    public Context getContext() {
        return mFragmentDelegate.getContext();
    }"
23211,setAllowReturnTransitionOverlap,"    public void setAllowReturnTransitionOverlap(boolean allow) {
        mFragmentDelegate.setAllowReturnTransitionOverlap(allow);
    }"
23212,getAllowReturnTransitionOverlap,"    public boolean getAllowReturnTransitionOverlap() {
        return mFragmentDelegate.getAllowReturnTransitionOverlap();
    }"
23213,setAllowEnterTransitionOverlap,"    public void setAllowEnterTransitionOverlap(boolean allow) {
        mFragmentDelegate.setAllowEnterTransitionOverlap(allow);
    }"
23214,getAllowEnterTransitionOverlap,"    public boolean getAllowEnterTransitionOverlap() {
        return mFragmentDelegate.getAllowEnterTransitionOverlap();
    }"
23215,dump,"    public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) {
        mFragmentDelegate.dump(prefix, fd, writer, args);
    }"
23216,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().dismissAllowingStateLoss(this);"
23217,dismissAllowingStateLoss,"    public void dismissAllowingStateLoss() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_dismissAllowingStateLoss();
            return;
        }
"
23218,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().dismiss(this);"
23219,dismiss,"    public void dismiss() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_dismiss();
            return;
        }
"
23220,remove,"            public void remove() {
                removable.remove();
                superRemovable.remove();
            }"
23221,addPlugin,"    public Removable addPlugin(final DialogFragmentPlugin plugin) {
        final Removable removable = super.addPlugin(plugin);
        final Removable superRemovable = mFragmentDelegate.addPlugin(plugin);
        return new Removable() {
            @Override"
23222,addPlugin,"    public Removable addPlugin(final FragmentPlugin plugin) {
        return mFragmentDelegate.addPlugin(plugin);
    }"
23223,getNonConfigurationInstance,"    public Object getNonConfigurationInstance() {
        return mObject;
    }"
23224,getId,"    public String getId() {
        return mId;
    }"
23225,unregisterForContextMenu,"    public void unregisterForContextMenu(View view) {
        delegate.unregisterForContextMenu(view);
    }"
23226,toString,"    public String toString() {
        return delegate.toString();
    }"
23227,super_unregisterForContextMenu,"    public void super_unregisterForContextMenu(View view) {
        super.unregisterForContextMenu(view);
    }"
23228,super_toString,"    public String super_toString() {
        return super.toString();
    }"
23229,super_startPostponedEnterTransition,"    public void super_startPostponedEnterTransition() {
        super.startPostponedEnterTransition();
    }"
23230,super_startIntentSenderForResult,"    public void super_startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, Bundle options) throws SendIntentException {
        super.startIntentSenderForResult(intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags,"
23231,super_startActivityForResult,"    public void super_startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) {
        super.startActivityForResult(intent, requestCode, options);
    }"
23232,super_startActivityForResult,"    public void super_startActivityForResult(Intent intent, int requestCode) {
        super.startActivityForResult(intent, requestCode);
    }"
23233,super_startActivity,"    public void super_startActivity(Intent intent, @Nullable Bundle options) {
        super.startActivity(intent, options);
    }"
23234,super_startActivity,"    public void super_startActivity(Intent intent) {
        super.startActivity(intent);
    }"
23235,super_shouldShowRequestPermissionRationale,"    public boolean super_shouldShowRequestPermissionRationale(@NonNull String permission) {
        return super.shouldShowRequestPermissionRationale(permission);
    }"
23236,super_setUserVisibleHint,"    public void super_setUserVisibleHint(boolean isVisibleToUser) {
        super.setUserVisibleHint(isVisibleToUser);
    }"
23237,super_setTargetFragment,"    public void super_setTargetFragment(@Nullable Fragment fragment, int requestCode) {
        super.setTargetFragment(fragment, requestCode);
    }"
23238,super_setSharedElementReturnTransition,"    public void super_setSharedElementReturnTransition(@Nullable Object transition) {
        super.setSharedElementReturnTransition(transition);
    }"
23239,super_setSharedElementEnterTransition,"    public void super_setSharedElementEnterTransition(@Nullable Object transition) {
        super.setSharedElementEnterTransition(transition);
    }"
23240,super_setReturnTransition,"    public void super_setReturnTransition(@Nullable Object transition) {
        super.setReturnTransition(transition);
    }"
23241,super_setRetainInstance,"    public void super_setRetainInstance(boolean retain) {
        super.setRetainInstance(retain);
    }"
23242,super_setReenterTransition,"    public void super_setReenterTransition(@Nullable Object transition) {
        super.setReenterTransition(transition);
    }"
23243,super_setMenuVisibility,"    public void super_setMenuVisibility(boolean menuVisible) {
        super.setMenuVisibility(menuVisible);
    }"
23244,super_setInitialSavedState,"    public void super_setInitialSavedState(@Nullable Fragment.SavedState state) {
        super.setInitialSavedState(state);
    }"
23245,super_setHasOptionsMenu,"    public void super_setHasOptionsMenu(boolean hasMenu) {
        super.setHasOptionsMenu(hasMenu);
    }"
23246,super_setExitTransition,"    public void super_setExitTransition(@Nullable Object transition) {
        super.setExitTransition(transition);
    }"
23247,super_setExitSharedElementCallback,"    public void super_setExitSharedElementCallback(SharedElementCallback callback) {
        super.setExitSharedElementCallback(callback);
    }"
23248,super_setEnterTransition,"    public void super_setEnterTransition(@Nullable Object transition) {
        super.setEnterTransition(transition);
    }"
23249,super_setEnterSharedElementCallback,"    public void super_setEnterSharedElementCallback(SharedElementCallback callback) {
        super.setEnterSharedElementCallback(callback);
    }"
23250,super_setArguments,"    public void super_setArguments(@Nullable Bundle args) {
        super.setArguments(args);
    }"
23251,super_setAllowReturnTransitionOverlap,"    public void super_setAllowReturnTransitionOverlap(boolean allow) {
        super.setAllowReturnTransitionOverlap(allow);
    }"
23252,super_setAllowEnterTransitionOverlap,"    public void super_setAllowEnterTransitionOverlap(boolean allow) {
        super.setAllowEnterTransitionOverlap(allow);
    }"
23253,super_registerForContextMenu,"    public void super_registerForContextMenu(View view) {
        super.registerForContextMenu(view);
    }"
23254,super_postponeEnterTransition,"    public void super_postponeEnterTransition() {
        super.postponeEnterTransition();
    }"
23255,super_onViewStateRestored,"    public void super_onViewStateRestored(@Nullable Bundle savedInstanceState) {
        super.onViewStateRestored(savedInstanceState);
    }"
23256,super_onViewCreated,"    public void super_onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
    }"
23257,super_onStop,"    public void super_onStop() {
        super.onStop();
    }"
23258,super_onStart,"    public void super_onStart() {
        super.onStart();
    }"
23259,super_onSaveInstanceState,"    public void super_onSaveInstanceState(@NonNull Bundle outState) {
        super.onSaveInstanceState(outState);
    }"
23260,super_onResume,"    public void super_onResume() {
        super.onResume();
    }"
23261,super_onRequestPermissionsResult,"    public void super_onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);"
23262,super_onPrepareOptionsMenu,"    public void super_onPrepareOptionsMenu(Menu menu) {
        super.onPrepareOptionsMenu(menu);
    }"
23263,super_onPictureInPictureModeChanged,"    public void super_onPictureInPictureModeChanged(boolean isInPictureInPictureMode) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode);
    }"
23264,super_onPause,"    public void super_onPause() {
        super.onPause();
    }"
23265,super_onOptionsMenuClosed,"    public void super_onOptionsMenuClosed(Menu menu) {
        super.onOptionsMenuClosed(menu);
    }"
23266,super_onOptionsItemSelected,"    public boolean super_onOptionsItemSelected(MenuItem item) {
        return super.onOptionsItemSelected(item);
    }"
23267,super_onMultiWindowModeChanged,"    public void super_onMultiWindowModeChanged(boolean isInMultiWindowMode) {
        super.onMultiWindowModeChanged(isInMultiWindowMode);
    }"
23268,super_onLowMemory,"    public void super_onLowMemory() {
        super.onLowMemory();
    }"
23269,super_onInflate,"    public void super_onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
        super.onInflate(activity, attrs, savedInstanceState);
    }"
23270,super_onInflate,"    public void super_onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState) {
        super.onInflate(context, attrs, savedInstanceState);
    }"
23271,super_onHiddenChanged,"    public void super_onHiddenChanged(boolean hidden) {
        super.onHiddenChanged(hidden);
    }"
23272,super_onGetLayoutInflater,"    public LayoutInflater super_onGetLayoutInflater(@Nullable Bundle savedInstanceState) {
        return super.onGetLayoutInflater(savedInstanceState);
    }"
23273,super_onDetach,"    public void super_onDetach() {
        super.onDetach();
    }"
23274,super_onDestroyView,"    public void super_onDestroyView() {
        super.onDestroyView();
    }"
23275,super_onDestroyOptionsMenu,"    public void super_onDestroyOptionsMenu() {
        super.onDestroyOptionsMenu();
    }"
23276,super_onDestroy,"    public void super_onDestroy() {
        super.onDestroy();
    }"
23277,super_onCreateView,"    public View super_onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState) {
        return super.onCreateView(inflater, container, savedInstanceState);"
23278,super_onCreateOptionsMenu,"    public void super_onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        super.onCreateOptionsMenu(menu, inflater);
    }"
23279,super_onCreateContextMenu,"    public void super_onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        super.onCreateContextMenu(menu, v, menuInfo);
    }"
23280,super_onCreateAnimator,"    public Animator super_onCreateAnimator(int transit, boolean enter, int nextAnim) {
        return super.onCreateAnimator(transit, enter, nextAnim);
    }"
23281,super_onCreateAnimation,"    public Animation super_onCreateAnimation(int transit, boolean enter, int nextAnim) {
        return super.onCreateAnimation(transit, enter, nextAnim);
    }"
23282,super_onCreate,"    public void super_onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }"
23283,super_onContextItemSelected,"    public boolean super_onContextItemSelected(MenuItem item) {
        return super.onContextItemSelected(item);
    }"
23284,super_onConfigurationChanged,"    public void super_onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }"
23285,super_onAttachFragment,"    public void super_onAttachFragment(Fragment childFragment) {
        super.onAttachFragment(childFragment);
    }"
23286,super_onAttach,"    public void super_onAttach(Activity activity) {
        super.onAttach(activity);
    }"
23287,super_onAttach,"    public void super_onAttach(Context context) {
        super.onAttach(context);
    }"
23288,super_onActivityResult,"    public void super_onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
    }"
23289,super_onActivityCreated,"    public void super_onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
    }"
23290,super_getViewModelStore,"    public ViewModelStore super_getViewModelStore() {
        return super.getViewModelStore();
    }"
23291,super_getViewLifecycleOwnerLiveData,"    public LiveData<android.arch.lifecycle.LifecycleOwner> super_getViewLifecycleOwnerLiveData() {
        return super.getViewLifecycleOwnerLiveData();
    }"
23292,super_getViewLifecycleOwner,"    public android.arch.lifecycle.LifecycleOwner super_getViewLifecycleOwner() {
        return super.getViewLifecycleOwner();
    }"
23293,super_getView,"    public View super_getView() {
        return super.getView();
    }"
23294,super_getUserVisibleHint,"    public boolean super_getUserVisibleHint() {
        return super.getUserVisibleHint();
    }"
23295,super_getSharedElementReturnTransition,"    public Object super_getSharedElementReturnTransition() {
        return super.getSharedElementReturnTransition();
    }"
23296,super_getSharedElementEnterTransition,"    public Object super_getSharedElementEnterTransition() {
        return super.getSharedElementEnterTransition();
    }"
23297,super_getReturnTransition,"    public Object super_getReturnTransition() {
        return super.getReturnTransition();
    }"
23298,super_getReenterTransition,"    public Object super_getReenterTransition() {
        return super.getReenterTransition();
    }"
23299,super_getLoaderManager,"    public LoaderManager super_getLoaderManager() {
        return super.getLoaderManager();
    }"
23300,super_getLifecycle,"    public android.arch.lifecycle.Lifecycle super_getLifecycle() {
        return super.getLifecycle();
    }"
23301,super_getLayoutInflater,"    public LayoutInflater super_getLayoutInflater(@Nullable Bundle savedFragmentState) {
        return super.getLayoutInflater(savedFragmentState);
    }"
23302,super_getExitTransition,"    public Object super_getExitTransition() {
        return super.getExitTransition();
    }"
23303,super_getEnterTransition,"    public Object super_getEnterTransition() {
        return super.getEnterTransition();
    }"
23304,super_getContext,"    public Context super_getContext() {
        return super.getContext();
    }"
23305,super_getAllowReturnTransitionOverlap,"    public boolean super_getAllowReturnTransitionOverlap() {
        return super.getAllowReturnTransitionOverlap();
    }"
23306,super_getAllowEnterTransitionOverlap,"    public boolean super_getAllowEnterTransitionOverlap() {
        return super.getAllowEnterTransitionOverlap();
    }"
23307,super_dump,"    public void super_dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) {
        super.dump(prefix, fd, writer, args);
    }"
23308,startPostponedEnterTransition,"    public void startPostponedEnterTransition() {
        delegate.startPostponedEnterTransition();
    }"
23309,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, Bundle options) throws SendIntentException {
        try {"
23310,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) {
        delegate.startActivityForResult(intent, requestCode, options);
    }"
23311,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode) {
        delegate.startActivityForResult(intent, requestCode);
    }"
23312,startActivity,"    public void startActivity(Intent intent, @Nullable Bundle options) {
        delegate.startActivity(intent, options);
    }"
23313,startActivity,"    public void startActivity(Intent intent) {
        delegate.startActivity(intent);
    }"
23314,shouldShowRequestPermissionRationale,"    public boolean shouldShowRequestPermissionRationale(@NonNull String permission) {
        return delegate.shouldShowRequestPermissionRationale(permission);
    }"
23315,setTargetFragment,"    public void setTargetFragment(@Nullable Fragment fragment, int requestCode) {
        delegate.setTargetFragment(fragment, requestCode);
    }"
23316,setRetainInstance,"    public void setRetainInstance(boolean retain) {
        delegate.setRetainInstance(retain);
    }"
23317,setMenuVisibility,"    public void setMenuVisibility(boolean menuVisible) {
        delegate.setMenuVisibility(menuVisible);
    }"
23318,setInitialSavedState,"    public void setInitialSavedState(@Nullable Fragment.SavedState state) {
        delegate.setInitialSavedState(state);
    }"
23319,setHasOptionsMenu,"    public void setHasOptionsMenu(boolean hasMenu) {
        delegate.setHasOptionsMenu(hasMenu);
    }"
23320,setExitSharedElementCallback,"    public void setExitSharedElementCallback(SharedElementCallback callback) {
        delegate.setExitSharedElementCallback(callback);
    }"
23321,setEnterSharedElementCallback,"    public void setEnterSharedElementCallback(SharedElementCallback callback) {
        delegate.setEnterSharedElementCallback(callback);
    }"
23322,setArguments,"    public void setArguments(@Nullable Bundle args) {
        delegate.setArguments(args);
    }"
23323,registerForContextMenu,"    public void registerForContextMenu(View view) {
        delegate.registerForContextMenu(view);
    }"
23324,postponeEnterTransition,"    public void postponeEnterTransition() {
        delegate.postponeEnterTransition();
    }"
23325,onPrepareOptionsMenu,"    public void onPrepareOptionsMenu(Menu menu) {
        delegate.onPrepareOptionsMenu(menu);
    }"
23326,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode) {
        delegate.onPictureInPictureModeChanged(isInPictureInPictureMode);
    }"
23327,onOptionsMenuClosed,"    public void onOptionsMenuClosed(Menu menu) {
        delegate.onOptionsMenuClosed(menu);
    }"
23328,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        return delegate.onOptionsItemSelected(item);
    }"
23329,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
        delegate.onMultiWindowModeChanged(isInMultiWindowMode);
    }"
23330,onLowMemory,"    public void onLowMemory() {
        delegate.onLowMemory();
    }"
23331,onInflate,"    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
        delegate.onInflate(activity, attrs, savedInstanceState);
    }"
23332,onInflate,"    public void onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState) {
        delegate.onInflate(context, attrs, savedInstanceState);
    }"
23333,onHiddenChanged,"    public void onHiddenChanged(boolean hidden) {
        delegate.onHiddenChanged(hidden);
    }"
23334,onGetLayoutInflater,"    public LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState) {
        return delegate.onGetLayoutInflater(savedInstanceState);
    }"
23335,onDestroyOptionsMenu,"    public void onDestroyOptionsMenu() {
        delegate.onDestroyOptionsMenu();
    }"
23336,onCreateOptionsMenu,"    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        delegate.onCreateOptionsMenu(menu, inflater);
    }"
23337,onCreateContextMenu,"    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        delegate.onCreateContextMenu(menu, v, menuInfo);
    }"
23338,onCreateAnimator,"    public Animator onCreateAnimator(int transit, boolean enter, int nextAnim) {
        return delegate.onCreateAnimator(transit, enter, nextAnim);
    }"
23339,onCreateAnimation,"    public Animation onCreateAnimation(int transit, boolean enter, int nextAnim) {
        return delegate.onCreateAnimation(transit, enter, nextAnim);
    }"
23340,onContextItemSelected,"    public boolean onContextItemSelected(MenuItem item) {
        return delegate.onContextItemSelected(item);
    }"
23341,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        delegate.onConfigurationChanged(newConfig);
    }"
23342,onAttachFragment,"    public void onAttachFragment(Fragment childFragment) {
        delegate.onAttachFragment(childFragment);
    }"
23343,getViewModelStore,"    public ViewModelStore getViewModelStore() {
        return delegate.getViewModelStore();
    }"
23344,getViewLifecycleOwnerLiveData,"    public LiveData<android.arch.lifecycle.LifecycleOwner> getViewLifecycleOwnerLiveData() {
        return delegate.getViewLifecycleOwnerLiveData();
    }"
23345,getViewLifecycleOwner,"    public android.arch.lifecycle.LifecycleOwner getViewLifecycleOwner() {
        return delegate.getViewLifecycleOwner();
    }"
23346,getView,"    public View getView() {
        return delegate.getView();
    }"
23347,setUserVisibleHint,"    public void setUserVisibleHint(boolean isVisibleToUser) {
        delegate.setUserVisibleHint(isVisibleToUser);
    }"
23348,getUserVisibleHint,"    public boolean getUserVisibleHint() {
        return delegate.getUserVisibleHint();
    }"
23349,setSharedElementReturnTransition,"    public void setSharedElementReturnTransition(@Nullable Object transition) {
        delegate.setSharedElementReturnTransition(transition);
    }"
23350,getSharedElementReturnTransition,"    public Object getSharedElementReturnTransition() {
        return delegate.getSharedElementReturnTransition();
    }"
23351,setSharedElementEnterTransition,"    public void setSharedElementEnterTransition(@Nullable Object transition) {
        delegate.setSharedElementEnterTransition(transition);
    }"
23352,getSharedElementEnterTransition,"    public Object getSharedElementEnterTransition() {
        return delegate.getSharedElementEnterTransition();
    }"
23353,setReturnTransition,"    public void setReturnTransition(@Nullable Object transition) {
        delegate.setReturnTransition(transition);
    }"
23354,getReturnTransition,"    public Object getReturnTransition() {
        return delegate.getReturnTransition();
    }"
23355,setReenterTransition,"    public void setReenterTransition(@Nullable Object transition) {
        delegate.setReenterTransition(transition);
    }"
23356,getReenterTransition,"    public Object getReenterTransition() {
        return delegate.getReenterTransition();
    }"
23357,getLoaderManager,"    public LoaderManager getLoaderManager() {
        return delegate.getLoaderManager();
    }"
23358,getLifecycle,"    public android.arch.lifecycle.Lifecycle getLifecycle() {
        return delegate.getLifecycle();
    }"
23359,getLayoutInflater,"    public LayoutInflater getLayoutInflater(@Nullable Bundle savedFragmentState) {
        return delegate.getLayoutInflater(savedFragmentState);
    }"
23360,setExitTransition,"    public void setExitTransition(@Nullable Object transition) {
        delegate.setExitTransition(transition);
    }"
23361,getExitTransition,"    public Object getExitTransition() {
        return delegate.getExitTransition();
    }"
23362,setEnterTransition,"    public void setEnterTransition(@Nullable Object transition) {
        delegate.setEnterTransition(transition);
    }"
23363,getEnterTransition,"    public Object getEnterTransition() {
        return delegate.getEnterTransition();
    }"
23364,getContext,"    public Context getContext() {
        return delegate.getContext();
    }"
23365,setAllowReturnTransitionOverlap,"    public void setAllowReturnTransitionOverlap(boolean allow) {
        delegate.setAllowReturnTransitionOverlap(allow);
    }"
23366,getAllowReturnTransitionOverlap,"    public boolean getAllowReturnTransitionOverlap() {
        return delegate.getAllowReturnTransitionOverlap();
    }"
23367,setAllowEnterTransitionOverlap,"    public void setAllowEnterTransitionOverlap(boolean allow) {
        delegate.setAllowEnterTransitionOverlap(allow);
    }"
23368,getAllowEnterTransitionOverlap,"    public boolean getAllowEnterTransitionOverlap() {
        return delegate.getAllowEnterTransitionOverlap();
    }"
23369,dump,"    public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) {
        delegate.dump(prefix, fd, writer, args);
    }"
23370,addPlugin,"    public Removable addPlugin(final FragmentPlugin plugin) {
        return delegate.addPlugin(plugin);
    }"
23371,addFragmentPlugins,"    public List<Removable> addFragmentPlugins(@NonNull final Iterable<? extends FragmentPlugin> plugins) {
        final List<Removable> removables = new ArrayList<>();
        for (final FragmentPlugin plugin : plugins) {
            removables.add(delegate.addPlugin(plugin));
        }"
23372,addFragmentPlugins,"    public List<Removable> addFragmentPlugins(@NonNull final FragmentPlugin... plugins) {
        final List<Removable> removables = new ArrayList<>(plugins.length);
        for (final FragmentPlugin plugin : plugins) {
            removables.add(delegate.addPlugin(plugin));
        }"
23373,onRequestPermissionsResult,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults) {
        delegate.onRequestPermissionsResult(requestCode, permissions, grantResults);"
23374,onDetach,"    public void onDetach() {
        delegate.onDetach();
    }"
23375,onDestroy,"    public void onDestroy() {
        delegate.onDestroy();
    }"
23376,onDestroyView,"    public void onDestroyView() {
        delegate.onDestroyView();
    }"
23377,onSaveInstanceState,"    public void onSaveInstanceState(@NonNull Bundle outState) {
        delegate.onSaveInstanceState(outState);
    }"
23378,onStop,"    public void onStop() {
        delegate.onStop();
    }"
23379,onPause,"    public void onPause() {
        delegate.onPause();
    }"
23380,onResume,"    public void onResume() {
        delegate.onResume();
    }"
23381,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        delegate.onActivityResult(requestCode, resultCode, data);
    }"
23382,onStart,"    public void onStart() {
        delegate.onStart();
    }"
23383,onViewStateRestored,"    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {
        delegate.onViewStateRestored(savedInstanceState);
    }"
23384,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        delegate.onActivityCreated(savedInstanceState);
    }"
23385,onViewCreated,"    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        delegate.onViewCreated(view, savedInstanceState);
    }"
23386,onCreateView,"    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState) {
        return delegate.onCreateView(inflater, container, savedInstanceState);"
23387,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState) {
        delegate.onCreate(savedInstanceState);
    }"
23388,onAttach,"    public void onAttach(Activity activity) {
        delegate.onAttach(activity);
    }"
23389,onAttach,"    public void onAttach(Context context) {
        delegate.onAttach(context);
    }"
23400,super_showNow,"    public void super_showNow(FragmentManager manager, String tag) {
        super.showNow(manager, tag);
    }"
23401,super_show,"    public int super_show(FragmentTransaction transaction, String tag) {
        return super.show(transaction, tag);
    }"
23402,super_show,"    public void super_show(FragmentManager manager, String tag) {
        super.show(manager, tag);
    }"
23404,super_setupDialog,"    public void super_setupDialog(Dialog dialog, int style) {
        super.setupDialog(dialog, style);
    }"
23407,super_setStyle,"    public void super_setStyle(int style, int theme) {
        super.setStyle(style, theme);
    }"
23408,super_setShowsDialog,"    public void super_setShowsDialog(boolean showsDialog) {
        super.setShowsDialog(showsDialog);
    }"
23421,super_setCancelable,"    public void super_setCancelable(boolean cancelable) {
        super.setCancelable(cancelable);
    }"
23445,super_onDismiss,"    public void super_onDismiss(DialogInterface dialog) {
        super.onDismiss(dialog);
    }"
23452,super_onCreateDialog,"    public Dialog super_onCreateDialog(@Nullable Bundle savedInstanceState) {
        return super.onCreateDialog(savedInstanceState);
    }"
23459,super_onCancel,"    public void super_onCancel(DialogInterface dialog) {
        super.onCancel(dialog);
    }"
23465,super_isCancelable,"    public boolean super_isCancelable() {
        return super.isCancelable();
    }"
23471,super_getTheme,"    public int super_getTheme() {
        return super.getTheme();
    }"
23472,super_getShowsDialog,"    public boolean super_getShowsDialog() {
        return super.getShowsDialog();
    }"
23482,super_getDialog,"    public Dialog super_getDialog() {
        return super.getDialog();
    }"
23487,super_dismissAllowingStateLoss,"    public void super_dismissAllowingStateLoss() {
        super.dismissAllowingStateLoss();
    }"
23488,super_dismiss,"    public void super_dismiss() {
        super.dismiss();
    }"
23495,showNow,"    public void showNow(FragmentManager manager, String tag) {
        delegate.showNow(manager, tag);
    }"
23496,show,"    public int show(FragmentTransaction transaction, String tag) {
        return delegate.show(transaction, tag);
    }"
23497,show,"    public void show(FragmentManager manager, String tag) {
        delegate.show(manager, tag);
    }"
23499,setupDialog,"    public void setupDialog(Dialog dialog, int style) {
        delegate.setupDialog(dialog, style);
    }"
23501,setStyle,"    public void setStyle(int style, int theme) {
        delegate.setStyle(style, theme);
    }"
23521,onDismiss,"    public void onDismiss(DialogInterface dialog) {
        delegate.onDismiss(dialog);
    }"
23524,onCreateDialog,"    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
        return delegate.onCreateDialog(savedInstanceState);
    }"
23530,onCancel,"    public void onCancel(DialogInterface dialog) {
        delegate.onCancel(dialog);
    }"
23532,setCancelable,"    public void setCancelable(boolean cancelable) {
        delegate.setCancelable(cancelable);
    }"
23533,isCancelable,"    public boolean isCancelable() {
        return delegate.isCancelable();
    }"
23540,getTheme,"    public int getTheme() {
        return delegate.getTheme();
    }"
23541,setShowsDialog,"    public void setShowsDialog(boolean showsDialog) {
        delegate.setShowsDialog(showsDialog);
    }"
23542,getShowsDialog,"    public boolean getShowsDialog() {
        return delegate.getShowsDialog();
    }"
23558,getDialog,"    public Dialog getDialog() {
        return delegate.getDialog();
    }"
23565,dismissAllowingStateLoss,"    public void dismissAllowingStateLoss() {
        delegate.dismissAllowingStateLoss();
    }"
23566,dismiss,"    public void dismiss() {
        delegate.dismiss();
    }"
23568,addPlugin,"    public Removable addPlugin(final DialogFragmentPlugin plugin) {
        return delegate.addPlugin(plugin);
    }"
23571,addDialogFragmentPlugins,"    public List<Removable> addDialogFragmentPlugins(@NonNull final Iterable<? extends DialogFragmentPlugin> plugins) {
        final List<Removable> removables = new ArrayList<>();
        for (final DialogFragmentPlugin plugin : plugins) {
            removables.add(delegate.addPlugin(plugin));
        }"
23572,addDialogFragmentPlugins,"    public List<Removable> addDialogFragmentPlugins(@NonNull final DialogFragmentPlugin... plugins) {
        final List<Removable> removables = new ArrayList<>(plugins.length);
        for (final DialogFragmentPlugin plugin : plugins) {
            removables.add(delegate.addPlugin(plugin));
        }"
23590,unregisterReceiver,"    public void unregisterReceiver(BroadcastReceiver receiver) {
        delegate.unregisterReceiver(receiver);
    }"
23592,unregisterComponentCallbacks,"    public void unregisterComponentCallbacks(ComponentCallbacks callback) {
        delegate.unregisterComponentCallbacks(callback);
    }"
23593,unbindService,"    public void unbindService(ServiceConnection conn) {
        delegate.unbindService(conn);
    }"
23594,triggerSearch,"    public void triggerSearch(String query, @Nullable Bundle appSearchData) {
        delegate.triggerSearch(query, appSearchData);
    }"
23595,takeKeyEvents,"    public void takeKeyEvents(boolean get) {
        delegate.takeKeyEvents(get);
    }"
23596,supportStartPostponedEnterTransition,"    public void supportStartPostponedEnterTransition() {
        delegate.supportStartPostponedEnterTransition();
    }"
23597,supportShouldUpRecreateTask,"    public boolean supportShouldUpRecreateTask(@NonNull Intent targetIntent) {
        return delegate.supportShouldUpRecreateTask(targetIntent);
    }"
23598,supportRequestWindowFeature,"    public boolean supportRequestWindowFeature(int featureId) {
        return delegate.supportRequestWindowFeature(featureId);
    }"
23599,supportPostponeEnterTransition,"    public void supportPostponeEnterTransition() {
        delegate.supportPostponeEnterTransition();
    }"
23600,supportNavigateUpTo,"    public void supportNavigateUpTo(@NonNull Intent upIntent) {
        delegate.supportNavigateUpTo(upIntent);
    }"
23601,supportInvalidateOptionsMenu,"    public void supportInvalidateOptionsMenu() {
        delegate.supportInvalidateOptionsMenu();
    }"
23602,supportFinishAfterTransition,"    public void supportFinishAfterTransition() {
        delegate.supportFinishAfterTransition();
    }"
23603,super_unregisterReceiver,"    public void super_unregisterReceiver(BroadcastReceiver receiver) {
        super.unregisterReceiver(receiver);
    }"
23605,super_unregisterComponentCallbacks,"    public void super_unregisterComponentCallbacks(ComponentCallbacks callback) {
        super.unregisterComponentCallbacks(callback);
    }"
23606,super_unbindService,"    public void super_unbindService(ServiceConnection conn) {
        super.unbindService(conn);
    }"
23607,super_triggerSearch,"    public void super_triggerSearch(String query, @Nullable Bundle appSearchData) {
        super.triggerSearch(query, appSearchData);
    }"
23608,super_takeKeyEvents,"    public void super_takeKeyEvents(boolean get) {
        super.takeKeyEvents(get);
    }"
23609,super_supportStartPostponedEnterTransition,"    public void super_supportStartPostponedEnterTransition() {
        super.supportStartPostponedEnterTransition();
    }"
23610,super_supportShouldUpRecreateTask,"    public boolean super_supportShouldUpRecreateTask(@NonNull Intent targetIntent) {
        return super.supportShouldUpRecreateTask(targetIntent);
    }"
23611,super_supportRequestWindowFeature,"    public boolean super_supportRequestWindowFeature(int featureId) {
        return super.supportRequestWindowFeature(featureId);
    }"
23612,super_supportPostponeEnterTransition,"    public void super_supportPostponeEnterTransition() {
        super.supportPostponeEnterTransition();
    }"
23613,super_supportNavigateUpTo,"    public void super_supportNavigateUpTo(@NonNull Intent upIntent) {
        super.supportNavigateUpTo(upIntent);
    }"
23614,super_supportInvalidateOptionsMenu,"    public void super_supportInvalidateOptionsMenu() {
        super.supportInvalidateOptionsMenu();
    }"
23615,super_supportFinishAfterTransition,"    public void super_supportFinishAfterTransition() {
        super.supportFinishAfterTransition();
    }"
23616,super_superDispatchKeyEvent,"    public boolean super_superDispatchKeyEvent(KeyEvent event) {
        return super.superDispatchKeyEvent(event);
    }"
23617,super_stopService,"    public boolean super_stopService(Intent name) {
        return super.stopService(name);
    }"
23618,super_stopManagingCursor,"    public void super_stopManagingCursor(Cursor c) {
        super.stopManagingCursor(c);
    }"
23619,super_stopLockTask,"    public void super_stopLockTask() {
        super.stopLockTask();
    }"
23620,super_stopLocalVoiceInteraction,"    public void super_stopLocalVoiceInteraction() {
        super.stopLocalVoiceInteraction();
    }"
23621,super_startSupportActionMode,"    public ActionMode super_startSupportActionMode(@NonNull Callback callback) {
        return super.startSupportActionMode(callback);
    }"
23622,super_startService,"    public ComponentName super_startService(Intent service) {
        return super.startService(service);
    }"
23623,super_startSearch,"    public void super_startSearch(@Nullable String initialQuery, boolean selectInitialQuery,
            @Nullable Bundle appSearchData, boolean globalSearch) {
        super.startSearch(initialQuery, selectInitialQuery, appSearchData, globalSearch);"
23625,super_startNextMatchingActivity,"    public boolean super_startNextMatchingActivity(@NonNull Intent intent, @Nullable Bundle options) {
        return super.startNextMatchingActivity(intent, options);
    }"
23626,super_startNextMatchingActivity,"    public boolean super_startNextMatchingActivity(@NonNull Intent intent) {
        return super.startNextMatchingActivity(intent);
    }"
23627,super_startManagingCursor,"    public void super_startManagingCursor(Cursor c) {
        super.startManagingCursor(c);
    }"
23628,super_startLockTask,"    public void super_startLockTask() {
        super.startLockTask();
    }"
23629,super_startLocalVoiceInteraction,"    public void super_startLocalVoiceInteraction(Bundle privateOptions) {
        super.startLocalVoiceInteraction(privateOptions);
    }"
23630,super_startIntentSenderFromFragment,"    public void super_startIntentSenderFromFragment(Fragment fragment, IntentSender intent, int requestCode,
            @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)
            throws SendIntentException {"
23631,super_startIntentSenderFromChild,"    public void super_startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode,
            Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, @Nullable Bundle options)
            throws SendIntentException {"
23632,super_startIntentSenderFromChild,"    public void super_startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode,
            Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        super.startIntentSenderFromChild(child, intent, requestCode, fillInIntent, flagsMask, flagsValues,"
23634,super_startIntentSenderForResult,"    public void super_startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        super.startIntentSenderForResult(intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags);"
23635,super_startIntentSender,"    public void super_startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask,
            int flagsValues, int extraFlags, Bundle options) throws SendIntentException {
        super.startIntentSender(intent, fillInIntent, flagsMask, flagsValues, extraFlags, options);"
23636,super_startIntentSender,"    public void super_startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask,
            int flagsValues, int extraFlags) throws SendIntentException {
        super.startIntentSender(intent, fillInIntent, flagsMask, flagsValues, extraFlags);"
23637,super_startInstrumentation,"    public boolean super_startInstrumentation(ComponentName className, String profileFile, Bundle arguments) {
        return super.startInstrumentation(className, profileFile, arguments);
    }"
23638,super_startForegroundService,"    public ComponentName super_startForegroundService(Intent service) {
        return super.startForegroundService(service);
    }"
23639,super_startActivityIfNeeded,"    public boolean super_startActivityIfNeeded(@NonNull Intent intent, int requestCode, @Nullable Bundle options) {
        return super.startActivityIfNeeded(intent, requestCode, options);
    }"
23640,super_startActivityIfNeeded,"    public boolean super_startActivityIfNeeded(@NonNull Intent intent, int requestCode) {
        return super.startActivityIfNeeded(intent, requestCode);
    }"
23641,super_startActivityFromFragment,"    public void super_startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent,
            int requestCode, @Nullable Bundle options) {
        super.startActivityFromFragment(fragment, intent, requestCode, options);"
23642,super_startActivityFromFragment,"    public void super_startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent,
            int requestCode) {
        super.startActivityFromFragment(fragment, intent, requestCode);"
23643,super_startActivityFromFragment,"    public void super_startActivityFromFragment(Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        super.startActivityFromFragment(fragment, intent, requestCode, options);"
23644,super_startActivityFromFragment,"    public void super_startActivityFromFragment(Fragment fragment, Intent intent, int requestCode) {
        super.startActivityFromFragment(fragment, intent, requestCode);
    }"
23645,super_startActivityFromChild,"    public void super_startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode,
            @Nullable Bundle options) {
        super.startActivityFromChild(child, intent, requestCode, options);"
23646,super_startActivityFromChild,"    public void super_startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode) {
        super.startActivityFromChild(child, intent, requestCode);
    }"
23651,super_startActivities,"    public void super_startActivities(Intent[] intents, @Nullable Bundle options) {
        super.startActivities(intents, options);
    }"
23652,super_startActivities,"    public void super_startActivities(Intent[] intents) {
        super.startActivities(intents);
    }"
23653,super_startActionMode,"    public android.view.ActionMode super_startActionMode(android.view.ActionMode.Callback callback, int type) {
        return super.startActionMode(callback, type);
    }"
23654,super_startActionMode,"    public android.view.ActionMode super_startActionMode(android.view.ActionMode.Callback callback) {
        return super.startActionMode(callback);
    }"
23655,super_showLockTaskEscapeMessage,"    public void super_showLockTaskEscapeMessage() {
        super.showLockTaskEscapeMessage();
    }"
23656,super_showAssist,"    public boolean super_showAssist(Bundle args) {
        return super.showAssist(args);
    }"
23657,super_shouldUpRecreateTask,"    public boolean super_shouldUpRecreateTask(Intent targetIntent) {
        return super.shouldUpRecreateTask(targetIntent);
    }"
23659,super_setWallpaper,"    public void super_setWallpaper(Bitmap bitmap) throws IOException {
        super.setWallpaper(bitmap);
    }"
23660,super_setWallpaper,"    public void super_setWallpaper(InputStream data) throws IOException {
        super.setWallpaper(data);
    }"
23661,super_setVrModeEnabled,"    public void super_setVrModeEnabled(boolean enabled, @NonNull ComponentName requestedComponent)
            throws NameNotFoundException {
        super.setVrModeEnabled(enabled, requestedComponent);"
23662,super_setVisible,"    public void super_setVisible(boolean visible) {
        super.setVisible(visible);
    }"
23663,super_setTurnScreenOn,"    public void super_setTurnScreenOn(boolean turnScreenOn) {
        super.setTurnScreenOn(turnScreenOn);
    }"
23664,super_setTitleColor,"    public void super_setTitleColor(int textColor) {
        super.setTitleColor(textColor);
    }"
23665,super_setTitle,"    public void super_setTitle(int titleId) {
        super.setTitle(titleId);
    }"
23666,super_setTitle,"    public void super_setTitle(CharSequence title) {
        super.setTitle(title);
    }"
23667,super_setTheme,"    public void super_setTheme(int resid) {
        super.setTheme(resid);
    }"
23668,super_setTaskDescription,"    public void super_setTaskDescription(TaskDescription taskDescription) {
        super.setTaskDescription(taskDescription);
    }"
23669,super_setSupportProgressBarVisibility,"    public void super_setSupportProgressBarVisibility(boolean visible) {
        super.setSupportProgressBarVisibility(visible);
    }"
23670,super_setSupportProgressBarIndeterminateVisibility,"    public void super_setSupportProgressBarIndeterminateVisibility(boolean visible) {
        super.setSupportProgressBarIndeterminateVisibility(visible);
    }"
23671,super_setSupportProgressBarIndeterminate,"    public void super_setSupportProgressBarIndeterminate(boolean indeterminate) {
        super.setSupportProgressBarIndeterminate(indeterminate);
    }"
23672,super_setSupportProgress,"    public void super_setSupportProgress(int progress) {
        super.setSupportProgress(progress);
    }"
23673,super_setSupportActionBar,"    public void super_setSupportActionBar(@Nullable Toolbar toolbar) {
        super.setSupportActionBar(toolbar);
    }"
23674,super_setShowWhenLocked,"    public void super_setShowWhenLocked(boolean showWhenLocked) {
        super.setShowWhenLocked(showWhenLocked);
    }"
23675,super_setRequestedOrientation,"    public void super_setRequestedOrientation(int requestedOrientation) {
        super.setRequestedOrientation(requestedOrientation);
    }"
23676,super_setPictureInPictureParams,"    public void super_setPictureInPictureParams(@NonNull PictureInPictureParams params) {
        super.setPictureInPictureParams(params);
    }"
23677,super_setIntent,"    public void super_setIntent(Intent newIntent) {
        super.setIntent(newIntent);
    }"
23678,super_setImmersive,"    public void super_setImmersive(boolean i) {
        super.setImmersive(i);
    }"
23679,super_setFinishOnTouchOutside,"    public void super_setFinishOnTouchOutside(boolean finish) {
        super.setFinishOnTouchOutside(finish);
    }"
23680,super_setExitSharedElementCallback,"    public void super_setExitSharedElementCallback(android.app.SharedElementCallback callback) {
        super.setExitSharedElementCallback(callback);
    }"
23681,super_setExitSharedElementCallback,"    public void super_setExitSharedElementCallback(SharedElementCallback listener) {
        super.setExitSharedElementCallback(listener);
    }"
23682,super_setEnterSharedElementCallback,"    public void super_setEnterSharedElementCallback(android.app.SharedElementCallback callback) {
        super.setEnterSharedElementCallback(callback);
    }"
23684,super_setContentView,"    public void super_setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
    }"
23685,super_setContentView,"    public void super_setContentView(View view) {
        super.setContentView(view);
    }"
23686,super_setContentView,"    public void super_setContentView(int layoutResID) {
        super.setContentView(layoutResID);
    }"
23687,super_setContentTransitionManager,"    public void super_setContentTransitionManager(TransitionManager tm) {
        super.setContentTransitionManager(tm);
    }"
23688,super_setActionBar,"    public void super_setActionBar(@Nullable android.widget.Toolbar toolbar) {
        super.setActionBar(toolbar);
    }"
23689,super_sendStickyOrderedBroadcastAsUser,"    public void super_sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData,
            Bundle initialExtras) {"
23690,super_sendStickyOrderedBroadcast,"    public void super_sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler,
            int initialCode, String initialData, Bundle initialExtras) {
        super.sendStickyOrderedBroadcast(intent, resultReceiver, scheduler, initialCode, initialData, initialExtras);"
23691,super_sendStickyBroadcastAsUser,"    public void super_sendStickyBroadcastAsUser(Intent intent, UserHandle user) {
        super.sendStickyBroadcastAsUser(intent, user);
    }"
23692,super_sendStickyBroadcast,"    public void super_sendStickyBroadcast(Intent intent) {
        super.sendStickyBroadcast(intent);
    }"
23693,super_sendOrderedBroadcastAsUser,"    public void super_sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData,
            Bundle initialExtras) {"
23694,super_sendOrderedBroadcast,"    public void super_sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        super.sendOrderedBroadcast(intent, receiverPermission, resultReceiver, scheduler, initialCode, initialData,"
23695,super_sendOrderedBroadcast,"    public void super_sendOrderedBroadcast(Intent intent, String receiverPermission) {
        super.sendOrderedBroadcast(intent, receiverPermission);
    }"
23696,super_sendBroadcastAsUser,"    public void super_sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) {
        super.sendBroadcastAsUser(intent, user, receiverPermission);
    }"
23697,super_sendBroadcastAsUser,"    public void super_sendBroadcastAsUser(Intent intent, UserHandle user) {
        super.sendBroadcastAsUser(intent, user);
    }"
23698,super_sendBroadcast,"    public void super_sendBroadcast(Intent intent, String receiverPermission) {
        super.sendBroadcast(intent, receiverPermission);
    }"
23699,super_sendBroadcast,"    public void super_sendBroadcast(Intent intent) {
        super.sendBroadcast(intent);
    }"
23700,super_revokeUriPermission,"    public void super_revokeUriPermission(String targetPackage, Uri uri, int modeFlags) {
        super.revokeUriPermission(targetPackage, uri, modeFlags);
    }"
23701,super_revokeUriPermission,"    public void super_revokeUriPermission(Uri uri, int modeFlags) {
        super.revokeUriPermission(uri, modeFlags);
    }"
23702,super_requestVisibleBehind,"    public boolean super_requestVisibleBehind(boolean visible) {
        return super.requestVisibleBehind(visible);
    }"
23703,super_requestDragAndDropPermissions,"    public DragAndDropPermissions super_requestDragAndDropPermissions(DragEvent event) {
        return super.requestDragAndDropPermissions(event);
    }"
23704,super_reportFullyDrawn,"    public void super_reportFullyDrawn() {
        super.reportFullyDrawn();
    }"
23705,super_removeStickyBroadcastAsUser,"    public void super_removeStickyBroadcastAsUser(Intent intent, UserHandle user) {
        super.removeStickyBroadcastAsUser(intent, user);
    }"
23706,super_removeStickyBroadcast,"    public void super_removeStickyBroadcast(Intent intent) {
        super.removeStickyBroadcast(intent);
    }"
23707,super_releaseInstance,"    public boolean super_releaseInstance() {
        return super.releaseInstance();
    }"
23708,super_registerReceiver,"    public Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler, int flags) {
        return super.registerReceiver(receiver, filter, broadcastPermission, scheduler, flags);"
23709,super_registerReceiver,"    public Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler) {
        return super.registerReceiver(receiver, filter, broadcastPermission, scheduler);"
23710,super_registerReceiver,"    public Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags) {
        return super.registerReceiver(receiver, filter, flags);
    }"
23711,super_registerReceiver,"    public Intent super_registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {
        return super.registerReceiver(receiver, filter);
    }"
23713,super_registerComponentCallbacks,"    public void super_registerComponentCallbacks(ComponentCallbacks callback) {
        super.registerComponentCallbacks(callback);
    }"
23714,super_recreate,"    public void super_recreate() {
        super.recreate();
    }"
23715,super_putExtraData,"    public void super_putExtraData(ExtraData extraData) {
        super.putExtraData(extraData);
    }"
23717,super_peekWallpaper,"    public Drawable super_peekWallpaper() {
        return super.peekWallpaper();
    }"
23718,super_overridePendingTransition,"    public void super_overridePendingTransition(int enterAnim, int exitAnim) {
        super.overridePendingTransition(enterAnim, exitAnim);
    }"
23719,super_openOrCreateDatabase,"    public SQLiteDatabase super_openOrCreateDatabase(String name, int mode, CursorFactory factory,
            DatabaseErrorHandler errorHandler) {
        return super.openOrCreateDatabase(name, mode, factory, errorHandler);"
23720,super_openOrCreateDatabase,"    public SQLiteDatabase super_openOrCreateDatabase(String name, int mode, CursorFactory factory) {
        return super.openOrCreateDatabase(name, mode, factory);
    }"
23721,super_openOptionsMenu,"    public void super_openOptionsMenu() {
        super.openOptionsMenu();
    }"
23722,super_openFileOutput,"    public FileOutputStream super_openFileOutput(String name, int mode) throws FileNotFoundException {
        return super.openFileOutput(name, mode);
    }"
23723,super_openFileInput,"    public FileInputStream super_openFileInput(String name) throws FileNotFoundException {
        return super.openFileInput(name);
    }"
23724,super_openContextMenu,"    public void super_openContextMenu(View view) {
        super.openContextMenu(view);
    }"
23725,super_onWindowStartingSupportActionMode,"    public ActionMode super_onWindowStartingSupportActionMode(@NonNull Callback callback) {
        return super.onWindowStartingSupportActionMode(callback);
    }"
23726,super_onWindowStartingActionMode,"    public android.view.ActionMode super_onWindowStartingActionMode(android.view.ActionMode.Callback callback,
            int type) {
        return super.onWindowStartingActionMode(callback, type);"
23727,super_onWindowStartingActionMode,"    public android.view.ActionMode super_onWindowStartingActionMode(android.view.ActionMode.Callback callback) {
        return super.onWindowStartingActionMode(callback);
    }"
23728,super_onWindowFocusChanged,"    public void super_onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
    }"
23729,super_onWindowAttributesChanged,"    public void super_onWindowAttributesChanged(WindowManager.LayoutParams params) {
        super.onWindowAttributesChanged(params);
    }"
23730,super_onVisibleBehindCanceled,"    public void super_onVisibleBehindCanceled() {
        super.onVisibleBehindCanceled();
    }"
23731,super_onUserLeaveHint,"    public void super_onUserLeaveHint() {
        super.onUserLeaveHint();
    }"
23732,super_onUserInteraction,"    public void super_onUserInteraction() {
        super.onUserInteraction();
    }"
23733,super_onTrimMemory,"    public void super_onTrimMemory(int level) {
        super.onTrimMemory(level);
    }"
23734,super_onTrackballEvent,"    public boolean super_onTrackballEvent(MotionEvent event) {
        return super.onTrackballEvent(event);
    }"
23735,super_onTouchEvent,"    public boolean super_onTouchEvent(MotionEvent event) {
        return super.onTouchEvent(event);
    }"
23736,super_onTitleChanged,"    public void super_onTitleChanged(CharSequence title, int color) {
        super.onTitleChanged(title, color);
    }"
23737,super_onSupportNavigateUp,"    public boolean super_onSupportNavigateUp() {
        return super.onSupportNavigateUp();
    }"
23738,super_onSupportContentChanged,"    public void super_onSupportContentChanged() {
        super.onSupportContentChanged();
    }"
23739,super_onSupportActionModeStarted,"    public void super_onSupportActionModeStarted(@NonNull ActionMode mode) {
        super.onSupportActionModeStarted(mode);
    }"
23740,super_onSupportActionModeFinished,"    public void super_onSupportActionModeFinished(@NonNull ActionMode mode) {
        super.onSupportActionModeFinished(mode);
    }"
23742,super_onStateNotSaved,"    public void super_onStateNotSaved() {
        super.onStateNotSaved();
    }"
23744,super_onSearchRequested,"    public boolean super_onSearchRequested() {
        return super.onSearchRequested();
    }"
23745,super_onSearchRequested,"    public boolean super_onSearchRequested(@Nullable SearchEvent searchEvent) {
        return super.onSearchRequested(searchEvent);
    }"
23746,super_onSaveInstanceState,"    public void super_onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {
        super.onSaveInstanceState(outState, outPersistentState);
    }"
23747,super_onSaveInstanceState,"    public void super_onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
    }"
23748,super_onResumeFragments,"    public void super_onResumeFragments() {
        super.onResumeFragments();
    }"
23750,super_onRestoreInstanceState,"    public void super_onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState) {
        super.onRestoreInstanceState(savedInstanceState, persistentState);
    }"
23751,super_onRestoreInstanceState,"    public void super_onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
    }"
23752,super_onRestart,"    public void super_onRestart() {
        super.onRestart();
    }"
23754,super_onProvideReferrer,"    public Uri super_onProvideReferrer() {
        return super.onProvideReferrer();
    }"
23755,super_onProvideKeyboardShortcuts,"    public void super_onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {
        super.onProvideKeyboardShortcuts(data, menu, deviceId);
    }"
23756,super_onProvideAssistData,"    public void super_onProvideAssistData(Bundle data) {
        super.onProvideAssistData(data);
    }"
23757,super_onProvideAssistContent,"    public void super_onProvideAssistContent(AssistContent outContent) {
        super.onProvideAssistContent(outContent);
    }"
23758,super_onPrepareSupportNavigateUpTaskStack,"    public void super_onPrepareSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        super.onPrepareSupportNavigateUpTaskStack(builder);
    }"
23759,super_onPreparePanel,"    public boolean super_onPreparePanel(int featureId, View view, Menu menu) {
        return super.onPreparePanel(featureId, view, menu);
    }"
23760,super_onPrepareOptionsPanel,"    public boolean super_onPrepareOptionsPanel(View view, Menu menu) {
        return super.onPrepareOptionsPanel(view, menu);
    }"
23761,super_onPrepareOptionsMenu,"    public boolean super_onPrepareOptionsMenu(Menu menu) {
        return super.onPrepareOptionsMenu(menu);
    }"
23762,super_onPrepareNavigateUpTaskStack,"    public void super_onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        super.onPrepareNavigateUpTaskStack(builder);
    }"
23763,super_onPrepareDialog,"    public void super_onPrepareDialog(int id, Dialog dialog, Bundle args) {
        super.onPrepareDialog(id, dialog, args);
    }"
23764,super_onPrepareDialog,"    public void super_onPrepareDialog(int id, Dialog dialog) {
        super.onPrepareDialog(id, dialog);
    }"
23765,super_onPostResume,"    public void super_onPostResume() {
        super.onPostResume();
    }"
23766,super_onPostCreate,"    public void super_onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        super.onPostCreate(savedInstanceState, persistentState);
    }"
23767,super_onPostCreate,"    public void super_onPostCreate(@Nullable Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);
    }"
23768,super_onPictureInPictureModeChanged,"    public void super_onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig);
    }"
23771,super_onPanelClosed,"    public void super_onPanelClosed(int featureId, Menu menu) {
        super.onPanelClosed(featureId, menu);
    }"
23774,super_onNewIntent,"    public void super_onNewIntent(Intent intent) {
        super.onNewIntent(intent);
    }"
23775,super_onNavigateUpFromChild,"    public boolean super_onNavigateUpFromChild(Activity child) {
        return super.onNavigateUpFromChild(child);
    }"
23776,super_onNavigateUp,"    public boolean super_onNavigateUp() {
        return super.onNavigateUp();
    }"
23777,super_onMultiWindowModeChanged,"    public void super_onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig) {
        super.onMultiWindowModeChanged(isInMultiWindowMode, newConfig);
    }"
23779,super_onMenuOpened,"    public boolean super_onMenuOpened(int featureId, Menu menu) {
        return super.onMenuOpened(featureId, menu);
    }"
23781,super_onLocalVoiceInteractionStopped,"    public void super_onLocalVoiceInteractionStopped() {
        super.onLocalVoiceInteractionStopped();
    }"
23782,super_onLocalVoiceInteractionStarted,"    public void super_onLocalVoiceInteractionStarted() {
        super.onLocalVoiceInteractionStarted();
    }"
23783,super_onKeyUp,"    public boolean super_onKeyUp(int keyCode, KeyEvent event) {
        return super.onKeyUp(keyCode, event);
    }"
23784,super_onKeyShortcut,"    public boolean super_onKeyShortcut(int keyCode, KeyEvent event) {
        return super.onKeyShortcut(keyCode, event);
    }"
23785,super_onKeyMultiple,"    public boolean super_onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) {
        return super.onKeyMultiple(keyCode, repeatCount, event);
    }"
23786,super_onKeyLongPress,"    public boolean super_onKeyLongPress(int keyCode, KeyEvent event) {
        return super.onKeyLongPress(keyCode, event);
    }"
23787,super_onKeyDown,"    public boolean super_onKeyDown(int keyCode, KeyEvent event) {
        return super.onKeyDown(keyCode, event);
    }"
23788,super_onGenericMotionEvent,"    public boolean super_onGenericMotionEvent(MotionEvent event) {
        return super.onGenericMotionEvent(event);
    }"
23789,super_onEnterAnimationComplete,"    public void super_onEnterAnimationComplete() {
        super.onEnterAnimationComplete();
    }"
23790,super_onDetachedFromWindow,"    public void super_onDetachedFromWindow() {
        super.onDetachedFromWindow();
    }"
23792,super_onCreateView,"    public View super_onCreateView(String name, Context context, AttributeSet attrs) {
        return super.onCreateView(name, context, attrs);
    }"
23793,super_onCreateView,"    public View super_onCreateView(View parent, String name, Context context, AttributeSet attrs) {
        return super.onCreateView(parent, name, context, attrs);
    }"
23794,super_onCreateThumbnail,"    public boolean super_onCreateThumbnail(Bitmap outBitmap, Canvas canvas) {
        return super.onCreateThumbnail(outBitmap, canvas);
    }"
23795,super_onCreateSupportNavigateUpTaskStack,"    public void super_onCreateSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        super.onCreateSupportNavigateUpTaskStack(builder);
    }"
23796,super_onCreatePanelView,"    public View super_onCreatePanelView(int featureId) {
        return super.onCreatePanelView(featureId);
    }"
23797,super_onCreatePanelMenu,"    public boolean super_onCreatePanelMenu(int featureId, Menu menu) {
        return super.onCreatePanelMenu(featureId, menu);
    }"
23798,super_onCreateOptionsMenu,"    public boolean super_onCreateOptionsMenu(Menu menu) {
        return super.onCreateOptionsMenu(menu);
    }"
23799,super_onCreateNavigateUpTaskStack,"    public void super_onCreateNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        super.onCreateNavigateUpTaskStack(builder);
    }"
23800,super_onCreateDialog,"    public Dialog super_onCreateDialog(int id, Bundle args) {
        return super.onCreateDialog(id, args);
    }"
23801,super_onCreateDialog,"    public Dialog super_onCreateDialog(int id) {
        return super.onCreateDialog(id);
    }"
23802,super_onCreateDescription,"    public CharSequence super_onCreateDescription() {
        return super.onCreateDescription();
    }"
23804,super_onCreate,"    public void super_onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        super.onCreate(savedInstanceState, persistentState);
    }"
23806,super_onContextMenuClosed,"    public void super_onContextMenuClosed(Menu menu) {
        super.onContextMenuClosed(menu);
    }"
23808,super_onContentChanged,"    public void super_onContentChanged() {
        super.onContentChanged();
    }"
23810,super_onChildTitleChanged,"    public void super_onChildTitleChanged(Activity childActivity, CharSequence title) {
        super.onChildTitleChanged(childActivity, title);
    }"
23811,super_onBackPressed,"    public void super_onBackPressed() {
        super.onBackPressed();
    }"
23812,super_onAttachedToWindow,"    public void super_onAttachedToWindow() {
        super.onAttachedToWindow();
    }"
23813,super_onAttachFragment,"    public void super_onAttachFragment(android.app.Fragment fragment) {
        super.onAttachFragment(fragment);
    }"
23814,super_onAttachFragment,"    public void super_onAttachFragment(Fragment fragment) {
        super.onAttachFragment(fragment);
    }"
23815,super_onApplyThemeResource,"    public void super_onApplyThemeResource(Theme theme, int resid, boolean first) {
        super.onApplyThemeResource(theme, resid, first);
    }"
23816,super_onActivityResult,"    public void super_onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
    }"
23817,super_onActivityReenter,"    public void super_onActivityReenter(int resultCode, Intent data) {
        super.onActivityReenter(resultCode, data);
    }"
23818,super_onActionModeStarted,"    public void super_onActionModeStarted(android.view.ActionMode mode) {
        super.onActionModeStarted(mode);
    }"
23819,super_onActionModeFinished,"    public void super_onActionModeFinished(android.view.ActionMode mode) {
        super.onActionModeFinished(mode);
    }"
23820,super_navigateUpToFromChild,"    public boolean super_navigateUpToFromChild(Activity child, Intent upIntent) {
        return super.navigateUpToFromChild(child, upIntent);
    }"
23821,super_navigateUpTo,"    public boolean super_navigateUpTo(Intent upIntent) {
        return super.navigateUpTo(upIntent);
    }"
23822,super_moveTaskToBack,"    public boolean super_moveTaskToBack(boolean nonRoot) {
        return super.moveTaskToBack(nonRoot);
    }"
23823,super_moveSharedPreferencesFrom,"    public boolean super_moveSharedPreferencesFrom(Context sourceContext, String name) {
        return super.moveSharedPreferencesFrom(sourceContext, name);
    }"
23824,super_moveDatabaseFrom,"    public boolean super_moveDatabaseFrom(Context sourceContext, String name) {
        return super.moveDatabaseFrom(sourceContext, name);
    }"
23825,super_isVoiceInteractionRoot,"    public boolean super_isVoiceInteractionRoot() {
        return super.isVoiceInteractionRoot();
    }"
23826,super_isVoiceInteraction,"    public boolean super_isVoiceInteraction() {
        return super.isVoiceInteraction();
    }"
23827,super_isTaskRoot,"    public boolean super_isTaskRoot() {
        return super.isTaskRoot();
    }"
23828,super_isRestricted,"    public boolean super_isRestricted() {
        return super.isRestricted();
    }"
23829,super_isLocalVoiceInteractionSupported,"    public boolean super_isLocalVoiceInteractionSupported() {
        return super.isLocalVoiceInteractionSupported();
    }"
23830,super_isInPictureInPictureMode,"    public boolean super_isInPictureInPictureMode() {
        return super.isInPictureInPictureMode();
    }"
23831,super_isInMultiWindowMode,"    public boolean super_isInMultiWindowMode() {
        return super.isInMultiWindowMode();
    }"
23832,super_isImmersive,"    public boolean super_isImmersive() {
        return super.isImmersive();
    }"
23833,super_isFinishing,"    public boolean super_isFinishing() {
        return super.isFinishing();
    }"
23834,super_isDeviceProtectedStorage,"    public boolean super_isDeviceProtectedStorage() {
        return super.isDeviceProtectedStorage();
    }"
23835,super_isDestroyed,"    public boolean super_isDestroyed() {
        return super.isDestroyed();
    }"
23836,super_isChangingConfigurations,"    public boolean super_isChangingConfigurations() {
        return super.isChangingConfigurations();
    }"
23837,super_isActivityTransitionRunning,"    public boolean super_isActivityTransitionRunning() {
        return super.isActivityTransitionRunning();
    }"
23838,super_invalidateOptionsMenu,"    public void super_invalidateOptionsMenu() {
        super.invalidateOptionsMenu();
    }"
23839,super_hasWindowFocus,"    public boolean super_hasWindowFocus() {
        return super.hasWindowFocus();
    }"
23840,super_grantUriPermission,"    public void super_grantUriPermission(String toPackage, Uri uri, int modeFlags) {
        super.grantUriPermission(toPackage, uri, modeFlags);
    }"
23841,super_getWindowManager,"    public WindowManager super_getWindowManager() {
        return super.getWindowManager();
    }"
23842,super_getWindow,"    public Window super_getWindow() {
        return super.getWindow();
    }"
23843,super_getWallpaperDesiredMinimumWidth,"    public int super_getWallpaperDesiredMinimumWidth() {
        return super.getWallpaperDesiredMinimumWidth();
    }"
23844,super_getWallpaperDesiredMinimumHeight,"    public int super_getWallpaperDesiredMinimumHeight() {
        return super.getWallpaperDesiredMinimumHeight();
    }"
23845,super_getWallpaper,"    public Drawable super_getWallpaper() {
        return super.getWallpaper();
    }"
23846,super_getVoiceInteractor,"    public VoiceInteractor super_getVoiceInteractor() {
        return super.getVoiceInteractor();
    }"
23848,super_getTheme,"    public Theme super_getTheme() {
        return super.getTheme();
    }"
23849,super_getTaskId,"    public int super_getTaskId() {
        return super.getTaskId();
    }"
23850,super_getSystemServiceName,"    public String super_getSystemServiceName(Class<?> serviceClass) {
        return super.getSystemServiceName(serviceClass);
    }"
23851,super_getSystemService,"    public Object super_getSystemService(@NonNull String name) {
        return super.getSystemService(name);
    }"
23852,super_getSupportParentActivityIntent,"    public Intent super_getSupportParentActivityIntent() {
        return super.getSupportParentActivityIntent();
    }"
23853,super_getSupportLoaderManager,"    public LoaderManager super_getSupportLoaderManager() {
        return super.getSupportLoaderManager();
    }"
23854,super_getSupportFragmentManager,"    public FragmentManager super_getSupportFragmentManager() {
        return super.getSupportFragmentManager();
    }"
23855,super_getSupportActionBar,"    public ActionBar super_getSupportActionBar() {
        return super.getSupportActionBar();
    }"
23856,super_getSharedPreferences,"    public SharedPreferences super_getSharedPreferences(String name, int mode) {
        return super.getSharedPreferences(name, mode);
    }"
23857,super_getResources,"    public Resources super_getResources() {
        return super.getResources();
    }"
23858,super_getRequestedOrientation,"    public int super_getRequestedOrientation() {
        return super.getRequestedOrientation();
    }"
23859,super_getReferrer,"    public Uri super_getReferrer() {
        return super.getReferrer();
    }"
23860,super_getPreferences,"    public SharedPreferences super_getPreferences(int mode) {
        return super.getPreferences(mode);
    }"
23861,super_getParentActivityIntent,"    public Intent super_getParentActivityIntent() {
        return super.getParentActivityIntent();
    }"
23862,super_getPackageResourcePath,"    public String super_getPackageResourcePath() {
        return super.getPackageResourcePath();
    }"
23863,super_getPackageName,"    public String super_getPackageName() {
        return super.getPackageName();
    }"
23864,super_getPackageManager,"    public PackageManager super_getPackageManager() {
        return super.getPackageManager();
    }"
23865,super_getPackageCodePath,"    public String super_getPackageCodePath() {
        return super.getPackageCodePath();
    }"
23866,super_getObbDirs,"    public File[] super_getObbDirs() {
        return super.getObbDirs();
    }"
23867,super_getObbDir,"    public File super_getObbDir() {
        return super.getObbDir();
    }"
23868,super_getNoBackupFilesDir,"    public File super_getNoBackupFilesDir() {
        return super.getNoBackupFilesDir();
    }"
23869,super_getMenuInflater,"    public MenuInflater super_getMenuInflater() {
        return super.getMenuInflater();
    }"
23870,super_getMaxNumPictureInPictureActions,"    public int super_getMaxNumPictureInPictureActions() {
        return super.getMaxNumPictureInPictureActions();
    }"
23871,super_getMainLooper,"    public Looper super_getMainLooper() {
        return super.getMainLooper();
    }"
23872,super_getMainExecutor,"    public Executor super_getMainExecutor() {
        return super.getMainExecutor();
    }"
23873,super_getLocalClassName,"    public String super_getLocalClassName() {
        return super.getLocalClassName();
    }"
23874,super_getLoaderManager,"    public android.app.LoaderManager super_getLoaderManager() {
        return super.getLoaderManager();
    }"
23875,super_getLifecycle,"    public Lifecycle super_getLifecycle() {
        return super.getLifecycle();
    }"
23876,super_getLayoutInflater,"    public LayoutInflater super_getLayoutInflater() {
        return super.getLayoutInflater();
    }"
23877,super_getIntent,"    public Intent super_getIntent() {
        return super.getIntent();
    }"
23878,super_getFragmentManager,"    public android.app.FragmentManager super_getFragmentManager() {
        return super.getFragmentManager();
    }"
23879,super_getFilesDir,"    public File super_getFilesDir() {
        return super.getFilesDir();
    }"
23880,super_getFileStreamPath,"    public File super_getFileStreamPath(String name) {
        return super.getFileStreamPath(name);
    }"
23881,super_getExtraData,"    public <T extends SupportActivity.ExtraData> T super_getExtraData(Class<T> extraDataClass) {
        return super.getExtraData(extraDataClass);
    }"
23882,super_getExternalMediaDirs,"    public File[] super_getExternalMediaDirs() {
        return super.getExternalMediaDirs();
    }"
23883,super_getExternalFilesDirs,"    public File[] super_getExternalFilesDirs(String type) {
        return super.getExternalFilesDirs(type);
    }"
23884,super_getExternalFilesDir,"    public File super_getExternalFilesDir(String type) {
        return super.getExternalFilesDir(type);
    }"
23885,super_getExternalCacheDirs,"    public File[] super_getExternalCacheDirs() {
        return super.getExternalCacheDirs();
    }"
23886,super_getExternalCacheDir,"    public File super_getExternalCacheDir() {
        return super.getExternalCacheDir();
    }"
23887,super_getDrawerToggleDelegate,"    public Delegate super_getDrawerToggleDelegate() {
        return super.getDrawerToggleDelegate();
    }"
23888,super_getDir,"    public File super_getDir(String name, int mode) {
        return super.getDir(name, mode);
    }"
23889,super_getDelegate,"    public AppCompatDelegate super_getDelegate() {
        return super.getDelegate();
    }"
23890,super_getDatabasePath,"    public File super_getDatabasePath(String name) {
        return super.getDatabasePath(name);
    }"
23891,super_getDataDir,"    public File super_getDataDir() {
        return super.getDataDir();
    }"
23892,super_getCurrentFocus,"    public View super_getCurrentFocus() {
        return super.getCurrentFocus();
    }"
23893,super_getContentTransitionManager,"    public TransitionManager super_getContentTransitionManager() {
        return super.getContentTransitionManager();
    }"
23894,super_getContentScene,"    public Scene super_getContentScene() {
        return super.getContentScene();
    }"
23895,super_getContentResolver,"    public ContentResolver super_getContentResolver() {
        return super.getContentResolver();
    }"
23896,super_getComponentName,"    public ComponentName super_getComponentName() {
        return super.getComponentName();
    }"
23897,super_getCodeCacheDir,"    public File super_getCodeCacheDir() {
        return super.getCodeCacheDir();
    }"
23898,super_getClassLoader,"    public ClassLoader super_getClassLoader() {
        return super.getClassLoader();
    }"
23899,super_getChangingConfigurations,"    public int super_getChangingConfigurations() {
        return super.getChangingConfigurations();
    }"
23900,super_getCallingPackage,"    public String super_getCallingPackage() {
        return super.getCallingPackage();
    }"
23901,super_getCallingActivity,"    public ComponentName super_getCallingActivity() {
        return super.getCallingActivity();
    }"
23902,super_getCacheDir,"    public File super_getCacheDir() {
        return super.getCacheDir();
    }"
23903,super_getBaseContext,"    public Context super_getBaseContext() {
        return super.getBaseContext();
    }"
23904,super_getAssets,"    public AssetManager super_getAssets() {
        return super.getAssets();
    }"
23905,super_getApplicationInfo,"    public ApplicationInfo super_getApplicationInfo() {
        return super.getApplicationInfo();
    }"
23906,super_getApplicationContext,"    public Context super_getApplicationContext() {
        return super.getApplicationContext();
    }"
23907,super_getActionBar,"    public android.app.ActionBar super_getActionBar() {
        return super.getActionBar();
    }"
23908,super_finishFromChild,"    public void super_finishFromChild(Activity child) {
        super.finishFromChild(child);
    }"
23909,super_finishAndRemoveTask,"    public void super_finishAndRemoveTask() {
        super.finishAndRemoveTask();
    }"
23910,super_finishAfterTransition,"    public void super_finishAfterTransition() {
        super.finishAfterTransition();
    }"
23911,super_finishAffinity,"    public void super_finishAffinity() {
        super.finishAffinity();
    }"
23912,super_finishActivityFromChild,"    public void super_finishActivityFromChild(@NonNull Activity child, int requestCode) {
        super.finishActivityFromChild(child, requestCode);
    }"
23913,super_finishActivity,"    public void super_finishActivity(int requestCode) {
        super.finishActivity(requestCode);
    }"
23914,super_finish,"    public void super_finish() {
        super.finish();
    }"
23915,super_findViewById,"    public <T extends View> T super_findViewById(int id) {
        return super.findViewById(id);
    }"
23916,super_fileList,"    public String[] super_fileList() {
        return super.fileList();
    }"
23917,super_enterPictureInPictureMode,"    public boolean super_enterPictureInPictureMode(@NonNull PictureInPictureParams params) {
        return super.enterPictureInPictureMode(params);
    }"
23918,super_enterPictureInPictureMode,"    public void super_enterPictureInPictureMode() {
        super.enterPictureInPictureMode();
    }"
23919,super_enforceUriPermission,"    public void super_enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags, String message) {
        super.enforceUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags, message);"
23920,super_enforceUriPermission,"    public void super_enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) {
        super.enforceUriPermission(uri, pid, uid, modeFlags, message);
    }"
23921,super_enforcePermission,"    public void super_enforcePermission(String permission, int pid, int uid, String message) {
        super.enforcePermission(permission, pid, uid, message);
    }"
23922,super_enforceCallingUriPermission,"    public void super_enforceCallingUriPermission(Uri uri, int modeFlags, String message) {
        super.enforceCallingUriPermission(uri, modeFlags, message);
    }"
23923,super_enforceCallingPermission,"    public void super_enforceCallingPermission(String permission, String message) {
        super.enforceCallingPermission(permission, message);
    }"
23924,super_enforceCallingOrSelfUriPermission,"    public void super_enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) {
        super.enforceCallingOrSelfUriPermission(uri, modeFlags, message);
    }"
23925,super_enforceCallingOrSelfPermission,"    public void super_enforceCallingOrSelfPermission(String permission, String message) {
        super.enforceCallingOrSelfPermission(permission, message);
    }"
23927,super_dispatchTrackballEvent,"    public boolean super_dispatchTrackballEvent(MotionEvent ev) {
        return super.dispatchTrackballEvent(ev);
    }"
23928,super_dispatchTouchEvent,"    public boolean super_dispatchTouchEvent(MotionEvent ev) {
        return super.dispatchTouchEvent(ev);
    }"
23929,super_dispatchPopulateAccessibilityEvent,"    public boolean super_dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {
        return super.dispatchPopulateAccessibilityEvent(event);
    }"
23930,super_dispatchKeyShortcutEvent,"    public boolean super_dispatchKeyShortcutEvent(KeyEvent event) {
        return super.dispatchKeyShortcutEvent(event);
    }"
23931,super_dispatchKeyEvent,"    public boolean super_dispatchKeyEvent(KeyEvent event) {
        return super.dispatchKeyEvent(event);
    }"
23932,super_dispatchGenericMotionEvent,"    public boolean super_dispatchGenericMotionEvent(MotionEvent ev) {
        return super.dispatchGenericMotionEvent(ev);
    }"
23933,super_deleteSharedPreferences,"    public boolean super_deleteSharedPreferences(String name) {
        return super.deleteSharedPreferences(name);
    }"
23934,super_deleteFile,"    public boolean super_deleteFile(String name) {
        return super.deleteFile(name);
    }"
23935,super_deleteDatabase,"    public boolean super_deleteDatabase(String name) {
        return super.deleteDatabase(name);
    }"
23936,super_databaseList,"    public String[] super_databaseList() {
        return super.databaseList();
    }"
23937,super_createPendingResult,"    public PendingIntent super_createPendingResult(int requestCode, @NonNull Intent data, int flags) {
        return super.createPendingResult(requestCode, data, flags);
    }"
23938,super_createPackageContext,"    public Context super_createPackageContext(String packageName, int flags) throws NameNotFoundException {
        return super.createPackageContext(packageName, flags);
    }"
23939,super_createDisplayContext,"    public Context super_createDisplayContext(Display display) {
        return super.createDisplayContext(display);
    }"
23940,super_createDeviceProtectedStorageContext,"    public Context super_createDeviceProtectedStorageContext() {
        return super.createDeviceProtectedStorageContext();
    }"
23941,super_createContextForSplit,"    public Context super_createContextForSplit(String splitName) throws NameNotFoundException {
        return super.createContextForSplit(splitName);
    }"
23942,super_createConfigurationContext,"    public Context super_createConfigurationContext(Configuration overrideConfiguration) {
        return super.createConfigurationContext(overrideConfiguration);
    }"
23943,super_closeOptionsMenu,"    public void super_closeOptionsMenu() {
        super.closeOptionsMenu();
    }"
23944,super_closeContextMenu,"    public void super_closeContextMenu() {
        super.closeContextMenu();
    }"
23945,super_clearWallpaper,"    public void super_clearWallpaper() throws IOException {
        super.clearWallpaper();
    }"
23946,super_checkUriPermission,"    public int super_checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags) {
        return super.checkUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags);"
23947,super_checkUriPermission,"    public int super_checkUriPermission(Uri uri, int pid, int uid, int modeFlags) {
        return super.checkUriPermission(uri, pid, uid, modeFlags);
    }"
23948,super_checkSelfPermission,"    public int super_checkSelfPermission(String permission) {
        return super.checkSelfPermission(permission);
    }"
23949,super_checkPermission,"    public int super_checkPermission(String permission, int pid, int uid) {
        return super.checkPermission(permission, pid, uid);
    }"
23950,super_checkCallingUriPermission,"    public int super_checkCallingUriPermission(Uri uri, int modeFlags) {
        return super.checkCallingUriPermission(uri, modeFlags);
    }"
23951,super_checkCallingPermission,"    public int super_checkCallingPermission(String permission) {
        return super.checkCallingPermission(permission);
    }"
23952,super_checkCallingOrSelfUriPermission,"    public int super_checkCallingOrSelfUriPermission(Uri uri, int modeFlags) {
        return super.checkCallingOrSelfUriPermission(uri, modeFlags);
    }"
23953,super_checkCallingOrSelfPermission,"    public int super_checkCallingOrSelfPermission(String permission) {
        return super.checkCallingOrSelfPermission(permission);
    }"
23954,super_bindService,"    public boolean super_bindService(Intent service, ServiceConnection conn, int flags) {
        return super.bindService(service, conn, flags);
    }"
23955,super_attachBaseContext,"    public void super_attachBaseContext(Context newBase) {
        super.attachBaseContext(newBase);
    }"
23956,super_applyOverrideConfiguration,"    public void super_applyOverrideConfiguration(Configuration overrideConfiguration) {
        super.applyOverrideConfiguration(overrideConfiguration);
    }"
23957,super_addContentView,"    public void super_addContentView(View view, LayoutParams params) {
        super.addContentView(view, params);
    }"
23958,superDispatchKeyEvent,"    public boolean superDispatchKeyEvent(KeyEvent event) {
        return delegate.superDispatchKeyEvent(event);
    }"
23959,stopService,"    public boolean stopService(Intent name) {
        return delegate.stopService(name);
    }"
23960,stopManagingCursor,"    public void stopManagingCursor(Cursor c) {
        delegate.stopManagingCursor(c);
    }"
23961,stopLockTask,"    public void stopLockTask() {
        delegate.stopLockTask();
    }"
23962,stopLocalVoiceInteraction,"    public void stopLocalVoiceInteraction() {
        delegate.stopLocalVoiceInteraction();
    }"
23963,startSupportActionMode,"    public ActionMode startSupportActionMode(@NonNull Callback callback) {
        return delegate.startSupportActionMode(callback);
    }"
23964,startService,"    public ComponentName startService(Intent service) {
        return delegate.startService(service);
    }"
23965,startSearch,"    public void startSearch(@Nullable String initialQuery, boolean selectInitialQuery, @Nullable Bundle appSearchData,
            boolean globalSearch) {
        delegate.startSearch(initialQuery, selectInitialQuery, appSearchData, globalSearch);"
23967,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent, @Nullable Bundle options) {
        return delegate.startNextMatchingActivity(intent, options);
    }"
23968,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent) {
        return delegate.startNextMatchingActivity(intent);
    }"
23969,startManagingCursor,"    public void startManagingCursor(Cursor c) {
        delegate.startManagingCursor(c);
    }"
23970,startLockTask,"    public void startLockTask() {
        delegate.startLockTask();
    }"
23971,startLocalVoiceInteraction,"    public void startLocalVoiceInteraction(Bundle privateOptions) {
        delegate.startLocalVoiceInteraction(privateOptions);
    }"
23972,startIntentSenderFromFragment,"    public void startIntentSenderFromFragment(Fragment fragment, IntentSender intent, int requestCode,
            @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)
            throws SendIntentException {"
23973,startIntentSenderFromChild,"    public void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, @Nullable Bundle options) throws SendIntentException {
        try {"
23974,startIntentSenderFromChild,"    public void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        try {"
23976,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        try {"
23977,startIntentSender,"    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags, Bundle options) throws SendIntentException {
        try {"
23978,startIntentSender,"    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags) throws SendIntentException {
        try {"
23979,startInstrumentation,"    public boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments) {
        return delegate.startInstrumentation(className, profileFile, arguments);
    }"
23980,startForegroundService,"    public ComponentName startForegroundService(Intent service) {
        return delegate.startForegroundService(service);
    }"
23981,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode, @Nullable Bundle options) {
        return delegate.startActivityIfNeeded(intent, requestCode, options);
    }"
23982,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode) {
        return delegate.startActivityIfNeeded(intent, requestCode);
    }"
23983,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        delegate.startActivityFromFragment(fragment, intent, requestCode, options);"
23984,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode) {
        delegate.startActivityFromFragment(fragment, intent, requestCode);
    }"
23985,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        delegate.startActivityFromFragment(fragment, intent, requestCode, options);"
23986,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode) {
        delegate.startActivityFromFragment(fragment, intent, requestCode);
    }"
23987,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode,
            @Nullable Bundle options) {
        delegate.startActivityFromChild(child, intent, requestCode, options);"
23988,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode) {
        delegate.startActivityFromChild(child, intent, requestCode);
    }"
23993,startActivities,"    public void startActivities(Intent[] intents, @Nullable Bundle options) {
        delegate.startActivities(intents, options);
    }"
23994,startActivities,"    public void startActivities(Intent[] intents) {
        delegate.startActivities(intents);
    }"
23995,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback, int type) {
        return delegate.startActionMode(callback, type);
    }"
23996,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback) {
        return delegate.startActionMode(callback);
    }"
23997,showLockTaskEscapeMessage,"    public void showLockTaskEscapeMessage() {
        delegate.showLockTaskEscapeMessage();
    }"
23998,showAssist,"    public boolean showAssist(Bundle args) {
        return delegate.showAssist(args);
    }"
23999,shouldUpRecreateTask,"    public boolean shouldUpRecreateTask(Intent targetIntent) {
        return delegate.shouldUpRecreateTask(targetIntent);
    }"
24001,setWallpaper,"    public void setWallpaper(InputStream data) throws IOException {
        try {
            delegate.setWallpaper(data);"
24002,setVrModeEnabled,"    public void setVrModeEnabled(boolean enabled, @NonNull ComponentName requestedComponent)
            throws NameNotFoundException {
        try {"
24003,setVisible,"    public void setVisible(boolean visible) {
        delegate.setVisible(visible);
    }"
24004,setTurnScreenOn,"    public void setTurnScreenOn(boolean turnScreenOn) {
        delegate.setTurnScreenOn(turnScreenOn);
    }"
24005,setTitleColor,"    public void setTitleColor(int textColor) {
        delegate.setTitleColor(textColor);
    }"
24006,setTitle,"    public void setTitle(int titleId) {
        delegate.setTitle(titleId);
    }"
24007,setTitle,"    public void setTitle(CharSequence title) {
        delegate.setTitle(title);
    }"
24008,setTaskDescription,"    public void setTaskDescription(TaskDescription taskDescription) {
        delegate.setTaskDescription(taskDescription);
    }"
24009,setSupportProgressBarVisibility,"    public void setSupportProgressBarVisibility(boolean visible) {
        delegate.setSupportProgressBarVisibility(visible);
    }"
24010,setSupportProgressBarIndeterminateVisibility,"    public void setSupportProgressBarIndeterminateVisibility(boolean visible) {
        delegate.setSupportProgressBarIndeterminateVisibility(visible);
    }"
24011,setSupportProgressBarIndeterminate,"    public void setSupportProgressBarIndeterminate(boolean indeterminate) {
        delegate.setSupportProgressBarIndeterminate(indeterminate);
    }"
24012,setSupportProgress,"    public void setSupportProgress(int progress) {
        delegate.setSupportProgress(progress);
    }"
24013,setShowWhenLocked,"    public void setShowWhenLocked(boolean showWhenLocked) {
        delegate.setShowWhenLocked(showWhenLocked);
    }"
24014,setPictureInPictureParams,"    public void setPictureInPictureParams(@NonNull PictureInPictureParams params) {
        delegate.setPictureInPictureParams(params);
    }"
24015,setFinishOnTouchOutside,"    public void setFinishOnTouchOutside(boolean finish) {
        delegate.setFinishOnTouchOutside(finish);
    }"
24016,setExitSharedElementCallback,"    public void setExitSharedElementCallback(android.app.SharedElementCallback callback) {
        delegate.setExitSharedElementCallback(callback);
    }"
24017,setExitSharedElementCallback,"    public void setExitSharedElementCallback(SharedElementCallback listener) {
        delegate.setExitSharedElementCallback(listener);
    }"
24018,setEnterSharedElementCallback,"    public void setEnterSharedElementCallback(android.app.SharedElementCallback callback) {
        delegate.setEnterSharedElementCallback(callback);
    }"
24020,setContentView,"    public void setContentView(View view, LayoutParams params) {
        delegate.setContentView(view, params);
    }"
24021,setContentView,"    public void setContentView(View view) {
        delegate.setContentView(view);
    }"
24022,setContentView,"    public void setContentView(int layoutResID) {
        delegate.setContentView(layoutResID);
    }"
24023,sendStickyOrderedBroadcastAsUser,"    public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        delegate.sendStickyOrderedBroadcastAsUser(intent, user, resultReceiver, scheduler, initialCode, initialData,"
24024,sendStickyOrderedBroadcast,"    public void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler,
            int initialCode, String initialData, Bundle initialExtras) {
        delegate.sendStickyOrderedBroadcast(intent, resultReceiver, scheduler, initialCode, initialData,"
24025,sendStickyBroadcastAsUser,"    public void sendStickyBroadcastAsUser(Intent intent, UserHandle user) {
        delegate.sendStickyBroadcastAsUser(intent, user);
    }"
24026,sendStickyBroadcast,"    public void sendStickyBroadcast(Intent intent) {
        delegate.sendStickyBroadcast(intent);
    }"
24027,sendOrderedBroadcastAsUser,"    public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData,
            Bundle initialExtras) {"
24028,sendOrderedBroadcast,"    public void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        delegate.sendOrderedBroadcast(intent, receiverPermission, resultReceiver, scheduler, initialCode, initialData,"
24029,sendOrderedBroadcast,"    public void sendOrderedBroadcast(Intent intent, String receiverPermission) {
        delegate.sendOrderedBroadcast(intent, receiverPermission);
    }"
24030,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) {
        delegate.sendBroadcastAsUser(intent, user, receiverPermission);
    }"
24031,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user) {
        delegate.sendBroadcastAsUser(intent, user);
    }"
24032,sendBroadcast,"    public void sendBroadcast(Intent intent, String receiverPermission) {
        delegate.sendBroadcast(intent, receiverPermission);
    }"
24033,sendBroadcast,"    public void sendBroadcast(Intent intent) {
        delegate.sendBroadcast(intent);
    }"
24034,revokeUriPermission,"    public void revokeUriPermission(String targetPackage, Uri uri, int modeFlags) {
        delegate.revokeUriPermission(targetPackage, uri, modeFlags);
    }"
24035,revokeUriPermission,"    public void revokeUriPermission(Uri uri, int modeFlags) {
        delegate.revokeUriPermission(uri, modeFlags);
    }"
24036,requestVisibleBehind,"    public boolean requestVisibleBehind(boolean visible) {
        return delegate.requestVisibleBehind(visible);
    }"
24037,requestDragAndDropPermissions,"    public DragAndDropPermissions requestDragAndDropPermissions(DragEvent event) {
        return delegate.requestDragAndDropPermissions(event);
    }"
24038,reportFullyDrawn,"    public void reportFullyDrawn() {
        delegate.reportFullyDrawn();
    }"
24039,removeStickyBroadcastAsUser,"    public void removeStickyBroadcastAsUser(Intent intent, UserHandle user) {
        delegate.removeStickyBroadcastAsUser(intent, user);
    }"
24040,removeStickyBroadcast,"    public void removeStickyBroadcast(Intent intent) {
        delegate.removeStickyBroadcast(intent);
    }"
24041,releaseInstance,"    public boolean releaseInstance() {
        return delegate.releaseInstance();
    }"
24042,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler, int flags) {
        return delegate.registerReceiver(receiver, filter, broadcastPermission, scheduler, flags);"
24043,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler) {
        return delegate.registerReceiver(receiver, filter, broadcastPermission, scheduler);"
24044,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags) {
        return delegate.registerReceiver(receiver, filter, flags);
    }"
24045,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {
        return delegate.registerReceiver(receiver, filter);
    }"
24047,registerComponentCallbacks,"    public void registerComponentCallbacks(ComponentCallbacks callback) {
        delegate.registerComponentCallbacks(callback);
    }"
24048,recreate,"    public void recreate() {
        delegate.recreate();
    }"
24049,putExtraData,"    public void putExtraData(ExtraData extraData) {
        delegate.putExtraData(extraData);
    }"
24051,peekWallpaper,"    public Drawable peekWallpaper() {
        return delegate.peekWallpaper();
    }"
24052,overridePendingTransition,"    public void overridePendingTransition(int enterAnim, int exitAnim) {
        delegate.overridePendingTransition(enterAnim, exitAnim);
    }"
24053,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory,
            DatabaseErrorHandler errorHandler) {
        return delegate.openOrCreateDatabase(name, mode, factory, errorHandler);"
24054,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory) {
        return delegate.openOrCreateDatabase(name, mode, factory);
    }"
24055,openOptionsMenu,"    public void openOptionsMenu() {
        delegate.openOptionsMenu();
    }"
24056,openFileOutput,"    public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException {
        try {
            return delegate.openFileOutput(name, mode);"
24057,openFileInput,"    public FileInputStream openFileInput(String name) throws FileNotFoundException {
        try {
            return delegate.openFileInput(name);"
24058,openContextMenu,"    public void openContextMenu(View view) {
        delegate.openContextMenu(view);
    }"
24059,onWindowStartingSupportActionMode,"    public ActionMode onWindowStartingSupportActionMode(@NonNull Callback callback) {
        return delegate.onWindowStartingSupportActionMode(callback);
    }"
24060,onWindowStartingActionMode,"    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback, int type) {
        return delegate.onWindowStartingActionMode(callback, type);
    }"
24061,onWindowStartingActionMode,"    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback) {
        return delegate.onWindowStartingActionMode(callback);
    }"
24062,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        delegate.onWindowFocusChanged(hasFocus);
    }"
24063,onWindowAttributesChanged,"    public void onWindowAttributesChanged(WindowManager.LayoutParams params) {
        delegate.onWindowAttributesChanged(params);
    }"
24064,onVisibleBehindCanceled,"    public void onVisibleBehindCanceled() {
        delegate.onVisibleBehindCanceled();
    }"
24065,onUserLeaveHint,"    public void onUserLeaveHint() {
        delegate.onUserLeaveHint();
    }"
24066,onUserInteraction,"    public void onUserInteraction() {
        delegate.onUserInteraction();
    }"
24067,onTrimMemory,"    public void onTrimMemory(int level) {
        delegate.onTrimMemory(level);
    }"
24068,onTrackballEvent,"    public boolean onTrackballEvent(MotionEvent event) {
        return delegate.onTrackballEvent(event);
    }"
24069,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        return delegate.onTouchEvent(event);
    }"
24070,onTitleChanged,"    public void onTitleChanged(CharSequence title, int color) {
        delegate.onTitleChanged(title, color);
    }"
24071,onSupportNavigateUp,"    public boolean onSupportNavigateUp() {
        return delegate.onSupportNavigateUp();
    }"
24072,onSupportContentChanged,"    public void onSupportContentChanged() {
        delegate.onSupportContentChanged();
    }"
24073,onSupportActionModeStarted,"    public void onSupportActionModeStarted(@NonNull ActionMode mode) {
        delegate.onSupportActionModeStarted(mode);
    }"
24074,onSupportActionModeFinished,"    public void onSupportActionModeFinished(@NonNull ActionMode mode) {
        delegate.onSupportActionModeFinished(mode);
    }"
24075,onStateNotSaved,"    public void onStateNotSaved() {
        delegate.onStateNotSaved();
    }"
24076,onSearchRequested,"    public boolean onSearchRequested() {
        return delegate.onSearchRequested();
    }"
24077,onSearchRequested,"    public boolean onSearchRequested(@Nullable SearchEvent searchEvent) {
        return delegate.onSearchRequested(searchEvent);
    }"
24078,onRetainCustomNonConfigurationInstance,"    final public Object onRetainCustomNonConfigurationInstance() {
        return delegate.onRetainNonConfigurationInstance();
    }"
24079,onRetainCompositeCustomNonConfigurationInstance,"    public Object onRetainCompositeCustomNonConfigurationInstance() {
        return null;
    }"
24080,onResumeFragments,"    public void onResumeFragments() {
        delegate.onResumeFragments();
    }"
24081,onProvideReferrer,"    public Uri onProvideReferrer() {
        return delegate.onProvideReferrer();
    }"
24082,onProvideKeyboardShortcuts,"    public void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {
        delegate.onProvideKeyboardShortcuts(data, menu, deviceId);
    }"
24083,onProvideAssistData,"    public void onProvideAssistData(Bundle data) {
        delegate.onProvideAssistData(data);
    }"
24084,onProvideAssistContent,"    public void onProvideAssistContent(AssistContent outContent) {
        delegate.onProvideAssistContent(outContent);
    }"
24085,onPrepareSupportNavigateUpTaskStack,"    public void onPrepareSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        delegate.onPrepareSupportNavigateUpTaskStack(builder);
    }"
24086,onPreparePanel,"    public boolean onPreparePanel(int featureId, View view, Menu menu) {
        return delegate.onPreparePanel(featureId, view, menu);
    }"
24087,onPrepareOptionsPanel,"    public boolean onPrepareOptionsPanel(View view, Menu menu) {
        return delegate.onPrepareOptionsPanel(view, menu);
    }"
24088,onPrepareOptionsMenu,"    public boolean onPrepareOptionsMenu(Menu menu) {
        return delegate.onPrepareOptionsMenu(menu);
    }"
24089,onPrepareNavigateUpTaskStack,"    public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        delegate.onPrepareNavigateUpTaskStack(builder);
    }"
24090,onPrepareDialog,"    public void onPrepareDialog(int id, Dialog dialog, Bundle args) {
        delegate.onPrepareDialog(id, dialog, args);
    }"
24091,onPrepareDialog,"    public void onPrepareDialog(int id, Dialog dialog) {
        delegate.onPrepareDialog(id, dialog);
    }"
24092,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {
        delegate.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig);
    }"
24094,onPanelClosed,"    public void onPanelClosed(int featureId, Menu menu) {
        delegate.onPanelClosed(featureId, menu);
    }"
24097,onNavigateUpFromChild,"    public boolean onNavigateUpFromChild(Activity child) {
        return delegate.onNavigateUpFromChild(child);
    }"
24098,onNavigateUp,"    public boolean onNavigateUp() {
        return delegate.onNavigateUp();
    }"
24099,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig) {
        delegate.onMultiWindowModeChanged(isInMultiWindowMode, newConfig);
    }"
24101,onMenuOpened,"    public boolean onMenuOpened(int featureId, Menu menu) {
        return delegate.onMenuOpened(featureId, menu);
    }"
24103,onLocalVoiceInteractionStopped,"    public void onLocalVoiceInteractionStopped() {
        delegate.onLocalVoiceInteractionStopped();
    }"
24104,onLocalVoiceInteractionStarted,"    public void onLocalVoiceInteractionStarted() {
        delegate.onLocalVoiceInteractionStarted();
    }"
24105,onKeyUp,"    public boolean onKeyUp(int keyCode, KeyEvent event) {
        return delegate.onKeyUp(keyCode, event);
    }"
24106,onKeyShortcut,"    public boolean onKeyShortcut(int keyCode, KeyEvent event) {
        return delegate.onKeyShortcut(keyCode, event);
    }"
24107,onKeyMultiple,"    public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) {
        return delegate.onKeyMultiple(keyCode, repeatCount, event);
    }"
24108,onKeyLongPress,"    public boolean onKeyLongPress(int keyCode, KeyEvent event) {
        return delegate.onKeyLongPress(keyCode, event);
    }"
24109,onKeyDown,"    public boolean onKeyDown(int keyCode, KeyEvent event) {
        return delegate.onKeyDown(keyCode, event);
    }"
24110,onGenericMotionEvent,"    public boolean onGenericMotionEvent(MotionEvent event) {
        return delegate.onGenericMotionEvent(event);
    }"
24111,onEnterAnimationComplete,"    public void onEnterAnimationComplete() {
        delegate.onEnterAnimationComplete();
    }"
24112,onDetachedFromWindow,"    public void onDetachedFromWindow() {
        delegate.onDetachedFromWindow();
    }"
24113,onCreateThumbnail,"    public boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas) {
        return delegate.onCreateThumbnail(outBitmap, canvas);
    }"
24114,onCreateSupportNavigateUpTaskStack,"    public void onCreateSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        delegate.onCreateSupportNavigateUpTaskStack(builder);
    }"
24115,onCreatePanelView,"    public View onCreatePanelView(int featureId) {
        return delegate.onCreatePanelView(featureId);
    }"
24116,onCreatePanelMenu,"    public boolean onCreatePanelMenu(int featureId, Menu menu) {
        return delegate.onCreatePanelMenu(featureId, menu);
    }"
24117,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        return delegate.onCreateOptionsMenu(menu);
    }"
24118,onCreateNavigateUpTaskStack,"    public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        delegate.onCreateNavigateUpTaskStack(builder);
    }"
24119,onCreateDialog,"    public Dialog onCreateDialog(int id, Bundle args) {
        return delegate.onCreateDialog(id, args);
    }"
24120,onCreateDialog,"    public Dialog onCreateDialog(int id) {
        return delegate.onCreateDialog(id);
    }"
24121,onCreateDescription,"    public CharSequence onCreateDescription() {
        return delegate.onCreateDescription();
    }"
24123,onContextMenuClosed,"    public void onContextMenuClosed(Menu menu) {
        delegate.onContextMenuClosed(menu);
    }"
24125,onContentChanged,"    public void onContentChanged() {
        delegate.onContentChanged();
    }"
24127,onChildTitleChanged,"    public void onChildTitleChanged(Activity childActivity, CharSequence title) {
        delegate.onChildTitleChanged(childActivity, title);
    }"
24128,onBackPressed,"    public void onBackPressed() {
        delegate.onBackPressed();
    }"
24129,onAttachedToWindow,"    public void onAttachedToWindow() {
        delegate.onAttachedToWindow();
    }"
24130,onAttachFragment,"    public void onAttachFragment(android.app.Fragment fragment) {
        delegate.onAttachFragment(fragment);
    }"
24131,onAttachFragment,"    public void onAttachFragment(Fragment fragment) {
        delegate.onAttachFragment(fragment);
    }"
24132,onApplyThemeResource,"    public void onApplyThemeResource(Theme theme, int resid, boolean first) {
        delegate.onApplyThemeResource(theme, resid, first);
    }"
24133,onActivityReenter,"    public void onActivityReenter(int resultCode, Intent data) {
        delegate.onActivityReenter(resultCode, data);
    }"
24134,onActionModeStarted,"    public void onActionModeStarted(android.view.ActionMode mode) {
        delegate.onActionModeStarted(mode);
    }"
24135,onActionModeFinished,"    public void onActionModeFinished(android.view.ActionMode mode) {
        delegate.onActionModeFinished(mode);
    }"
24136,navigateUpToFromChild,"    public boolean navigateUpToFromChild(Activity child, Intent upIntent) {
        return delegate.navigateUpToFromChild(child, upIntent);
    }"
24137,navigateUpTo,"    public boolean navigateUpTo(Intent upIntent) {
        return delegate.navigateUpTo(upIntent);
    }"
24138,moveTaskToBack,"    public boolean moveTaskToBack(boolean nonRoot) {
        return delegate.moveTaskToBack(nonRoot);
    }"
24139,moveSharedPreferencesFrom,"    public boolean moveSharedPreferencesFrom(Context sourceContext, String name) {
        return delegate.moveSharedPreferencesFrom(sourceContext, name);
    }"
24140,moveDatabaseFrom,"    public boolean moveDatabaseFrom(Context sourceContext, String name) {
        return delegate.moveDatabaseFrom(sourceContext, name);
    }"
24141,isVoiceInteractionRoot,"    public boolean isVoiceInteractionRoot() {
        return delegate.isVoiceInteractionRoot();
    }"
24142,isVoiceInteraction,"    public boolean isVoiceInteraction() {
        return delegate.isVoiceInteraction();
    }"
24143,isTaskRoot,"    public boolean isTaskRoot() {
        return delegate.isTaskRoot();
    }"
24144,isRestricted,"    public boolean isRestricted() {
        return delegate.isRestricted();
    }"
24145,isLocalVoiceInteractionSupported,"    public boolean isLocalVoiceInteractionSupported() {
        return delegate.isLocalVoiceInteractionSupported();
    }"
24146,isInPictureInPictureMode,"    public boolean isInPictureInPictureMode() {
        return delegate.isInPictureInPictureMode();
    }"
24147,isInMultiWindowMode,"    public boolean isInMultiWindowMode() {
        return delegate.isInMultiWindowMode();
    }"
24148,setImmersive,"    public void setImmersive(boolean i) {
        delegate.setImmersive(i);
    }"
24149,isImmersive,"    public boolean isImmersive() {
        return delegate.isImmersive();
    }"
24150,isFinishing,"    public boolean isFinishing() {
        return delegate.isFinishing();
    }"
24151,isDeviceProtectedStorage,"    public boolean isDeviceProtectedStorage() {
        return delegate.isDeviceProtectedStorage();
    }"
24152,isDestroyed,"    public boolean isDestroyed() {
        return delegate.isDestroyed();
    }"
24153,isChangingConfigurations,"    public boolean isChangingConfigurations() {
        return delegate.isChangingConfigurations();
    }"
24154,isActivityTransitionRunning,"    public boolean isActivityTransitionRunning() {
        return delegate.isActivityTransitionRunning();
    }"
24155,invalidateOptionsMenu,"    public void invalidateOptionsMenu() {
        delegate.invalidateOptionsMenu();
    }"
24156,hasWindowFocus,"    public boolean hasWindowFocus() {
        return delegate.hasWindowFocus();
    }"
24157,grantUriPermission,"    public void grantUriPermission(String toPackage, Uri uri, int modeFlags) {
        delegate.grantUriPermission(toPackage, uri, modeFlags);
    }"
24158,getWindowManager,"    public WindowManager getWindowManager() {
        return delegate.getWindowManager();
    }"
24159,getWindow,"    public Window getWindow() {
        return delegate.getWindow();
    }"
24160,getWallpaperDesiredMinimumWidth,"    public int getWallpaperDesiredMinimumWidth() {
        return delegate.getWallpaperDesiredMinimumWidth();
    }"
24161,getWallpaperDesiredMinimumHeight,"    public int getWallpaperDesiredMinimumHeight() {
        return delegate.getWallpaperDesiredMinimumHeight();
    }"
24162,setWallpaper,"    public void setWallpaper(Bitmap bitmap) throws IOException {
        try {
            delegate.setWallpaper(bitmap);"
24163,getWallpaper,"    public Drawable getWallpaper() {
        return delegate.getWallpaper();
    }"
24164,getVoiceInteractor,"    public VoiceInteractor getVoiceInteractor() {
        return delegate.getVoiceInteractor();
    }"
24166,setTheme,"    public void setTheme(int resid) {
        delegate.setTheme(resid);
    }"
24167,getTheme,"    public Theme getTheme() {
        return delegate.getTheme();
    }"
24168,getTaskId,"    public int getTaskId() {
        return delegate.getTaskId();
    }"
24169,getSystemServiceName,"    public String getSystemServiceName(Class<?> serviceClass) {
        return delegate.getSystemServiceName(serviceClass);
    }"
24170,getSystemService,"    public Object getSystemService(@NonNull String name) {
        return delegate.getSystemService(name);
    }"
24171,getSupportParentActivityIntent,"    public Intent getSupportParentActivityIntent() {
        return delegate.getSupportParentActivityIntent();
    }"
24172,getSupportLoaderManager,"    public LoaderManager getSupportLoaderManager() {
        return delegate.getSupportLoaderManager();
    }"
24173,getSupportFragmentManager,"    public FragmentManager getSupportFragmentManager() {
        return delegate.getSupportFragmentManager();
    }"
24174,setSupportActionBar,"    public void setSupportActionBar(@Nullable Toolbar toolbar) {
        delegate.setSupportActionBar(toolbar);
    }"
24175,getSupportActionBar,"    public ActionBar getSupportActionBar() {
        return delegate.getSupportActionBar();
    }"
24176,getSharedPreferences,"    public SharedPreferences getSharedPreferences(String name, int mode) {
        return delegate.getSharedPreferences(name, mode);
    }"
24177,getResources,"    public Resources getResources() {
        return delegate.getResources();
    }"
24178,setRequestedOrientation,"    public void setRequestedOrientation(int requestedOrientation) {
        delegate.setRequestedOrientation(requestedOrientation);
    }"
24179,getRequestedOrientation,"    public int getRequestedOrientation() {
        return delegate.getRequestedOrientation();
    }"
24180,getReferrer,"    public Uri getReferrer() {
        return delegate.getReferrer();
    }"
24181,getPreferences,"    public SharedPreferences getPreferences(int mode) {
        return delegate.getPreferences(mode);
    }"
24182,getParentActivityIntent,"    public Intent getParentActivityIntent() {
        return delegate.getParentActivityIntent();
    }"
24183,getPackageResourcePath,"    public String getPackageResourcePath() {
        return delegate.getPackageResourcePath();
    }"
24184,getPackageName,"    public String getPackageName() {
        return delegate.getPackageName();
    }"
24185,getPackageManager,"    public PackageManager getPackageManager() {
        return delegate.getPackageManager();
    }"
24186,getPackageCodePath,"    public String getPackageCodePath() {
        return delegate.getPackageCodePath();
    }"
24187,getObbDirs,"    public File[] getObbDirs() {
        return delegate.getObbDirs();
    }"
24188,getObbDir,"    public File getObbDir() {
        return delegate.getObbDir();
    }"
24189,getNoBackupFilesDir,"    public File getNoBackupFilesDir() {
        return delegate.getNoBackupFilesDir();
    }"
24190,getMenuInflater,"    public MenuInflater getMenuInflater() {
        return delegate.getMenuInflater();
    }"
24191,getMaxNumPictureInPictureActions,"    public int getMaxNumPictureInPictureActions() {
        return delegate.getMaxNumPictureInPictureActions();
    }"
24192,getMainLooper,"    public Looper getMainLooper() {
        return delegate.getMainLooper();
    }"
24193,getMainExecutor,"    public Executor getMainExecutor() {
        return delegate.getMainExecutor();
    }"
24194,getLocalClassName,"    public String getLocalClassName() {
        return delegate.getLocalClassName();
    }"
24195,getLoaderManager,"    public android.app.LoaderManager getLoaderManager() {
        return delegate.getLoaderManager();
    }"
24196,getLifecycle,"    public Lifecycle getLifecycle() {
        return delegate.getLifecycle();
    }"
24197,getLayoutInflater,"    public LayoutInflater getLayoutInflater() {
        return delegate.getLayoutInflater();
    }"
24198,getLastNonConfigurationInstance,"    final public Object getLastNonConfigurationInstance() {
        return super.getLastNonConfigurationInstance();
    }"
24199,getLastCustomNonConfigurationInstance,"    final public Object getLastCustomNonConfigurationInstance() {
        return super.getLastCustomNonConfigurationInstance();
    }"
24200,getLastCompositeCustomNonConfigurationInstance,"    public Object getLastCompositeCustomNonConfigurationInstance() {
        return delegate.getLastCompositeCustomNonConfigurationInstance();
    }"
24201,setIntent,"    public void setIntent(Intent newIntent) {
        delegate.setIntent(newIntent);
    }"
24202,getIntent,"    public Intent getIntent() {
        return delegate.getIntent();
    }"
24203,getFragmentManager,"    public android.app.FragmentManager getFragmentManager() {
        return delegate.getFragmentManager();
    }"
24204,getFilesDir,"    public File getFilesDir() {
        return delegate.getFilesDir();
    }"
24205,getFileStreamPath,"    public File getFileStreamPath(String name) {
        return delegate.getFileStreamPath(name);
    }"
24206,getExtraData,"    public <T extends SupportActivity.ExtraData> T getExtraData(Class<T> extraDataClass) {
        return delegate.getExtraData(extraDataClass);
    }"
24207,getExternalMediaDirs,"    public File[] getExternalMediaDirs() {
        return delegate.getExternalMediaDirs();
    }"
24208,getExternalFilesDirs,"    public File[] getExternalFilesDirs(String type) {
        return delegate.getExternalFilesDirs(type);
    }"
24209,getExternalFilesDir,"    public File getExternalFilesDir(String type) {
        return delegate.getExternalFilesDir(type);
    }"
24210,getExternalCacheDirs,"    public File[] getExternalCacheDirs() {
        return delegate.getExternalCacheDirs();
    }"
24211,getExternalCacheDir,"    public File getExternalCacheDir() {
        return delegate.getExternalCacheDir();
    }"
24212,getDrawerToggleDelegate,"    public Delegate getDrawerToggleDelegate() {
        return delegate.getDrawerToggleDelegate();
    }"
24213,getDir,"    public File getDir(String name, int mode) {
        return delegate.getDir(name, mode);
    }"
24214,getDelegate,"    public AppCompatDelegate getDelegate() {
        return delegate.getDelegate();
    }"
24215,getDatabasePath,"    public File getDatabasePath(String name) {
        return delegate.getDatabasePath(name);
    }"
24216,getDataDir,"    public File getDataDir() {
        return delegate.getDataDir();
    }"
24217,getCurrentFocus,"    public View getCurrentFocus() {
        return delegate.getCurrentFocus();
    }"
24218,setContentTransitionManager,"    public void setContentTransitionManager(TransitionManager tm) {
        delegate.setContentTransitionManager(tm);
    }"
24219,getContentTransitionManager,"    public TransitionManager getContentTransitionManager() {
        return delegate.getContentTransitionManager();
    }"
24220,getContentScene,"    public Scene getContentScene() {
        return delegate.getContentScene();
    }"
24221,getContentResolver,"    public ContentResolver getContentResolver() {
        return delegate.getContentResolver();
    }"
24222,getComponentName,"    public ComponentName getComponentName() {
        return delegate.getComponentName();
    }"
24223,getCodeCacheDir,"    public File getCodeCacheDir() {
        return delegate.getCodeCacheDir();
    }"
24224,getClassLoader,"    public ClassLoader getClassLoader() {
        return delegate.getClassLoader();
    }"
24225,getChangingConfigurations,"    public int getChangingConfigurations() {
        return delegate.getChangingConfigurations();
    }"
24226,getCallingPackage,"    public String getCallingPackage() {
        return delegate.getCallingPackage();
    }"
24227,getCallingActivity,"    public ComponentName getCallingActivity() {
        return delegate.getCallingActivity();
    }"
24228,getCacheDir,"    public File getCacheDir() {
        return delegate.getCacheDir();
    }"
24229,getBaseContext,"    public Context getBaseContext() {
        return delegate.getBaseContext();
    }"
24230,getAssets,"    public AssetManager getAssets() {
        return delegate.getAssets();
    }"
24231,getApplicationInfo,"    public ApplicationInfo getApplicationInfo() {
        return delegate.getApplicationInfo();
    }"
24232,getApplicationContext,"    public Context getApplicationContext() {
        return delegate.getApplicationContext();
    }"
24233,setActionBar,"    public void setActionBar(@Nullable android.widget.Toolbar toolbar) {
        delegate.setActionBar(toolbar);
    }"
24234,getActionBar,"    public android.app.ActionBar getActionBar() {
        return delegate.getActionBar();
    }"
24235,finishFromChild,"    public void finishFromChild(Activity child) {
        delegate.finishFromChild(child);
    }"
24236,finishAndRemoveTask,"    public void finishAndRemoveTask() {
        delegate.finishAndRemoveTask();
    }"
24237,finishAfterTransition,"    public void finishAfterTransition() {
        delegate.finishAfterTransition();
    }"
24238,finishAffinity,"    public void finishAffinity() {
        delegate.finishAffinity();
    }"
24239,finishActivityFromChild,"    public void finishActivityFromChild(@NonNull Activity child, int requestCode) {
        delegate.finishActivityFromChild(child, requestCode);
    }"
24240,finishActivity,"    public void finishActivity(int requestCode) {
        delegate.finishActivity(requestCode);
    }"
24241,finish,"    public void finish() {
        delegate.finish();
    }"
24242,findViewById,"    public <T extends View> T findViewById(int id) {
        return delegate.findViewById(id);
    }"
24243,fileList,"    public String[] fileList() {
        return delegate.fileList();
    }"
24244,enterPictureInPictureMode,"    public boolean enterPictureInPictureMode(@NonNull PictureInPictureParams params) {
        return delegate.enterPictureInPictureMode(params);
    }"
24245,enterPictureInPictureMode,"    public void enterPictureInPictureMode() {
        delegate.enterPictureInPictureMode();
    }"
24246,enforceUriPermission,"    public void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags, String message) {
        delegate.enforceUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags, message);"
24247,enforceUriPermission,"    public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) {
        delegate.enforceUriPermission(uri, pid, uid, modeFlags, message);
    }"
24248,enforcePermission,"    public void enforcePermission(String permission, int pid, int uid, String message) {
        delegate.enforcePermission(permission, pid, uid, message);
    }"
24249,enforceCallingUriPermission,"    public void enforceCallingUriPermission(Uri uri, int modeFlags, String message) {
        delegate.enforceCallingUriPermission(uri, modeFlags, message);
    }"
24250,enforceCallingPermission,"    public void enforceCallingPermission(String permission, String message) {
        delegate.enforceCallingPermission(permission, message);
    }"
24251,enforceCallingOrSelfUriPermission,"    public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) {
        delegate.enforceCallingOrSelfUriPermission(uri, modeFlags, message);
    }"
24252,enforceCallingOrSelfPermission,"    public void enforceCallingOrSelfPermission(String permission, String message) {
        delegate.enforceCallingOrSelfPermission(permission, message);
    }"
24254,dispatchTrackballEvent,"    public boolean dispatchTrackballEvent(MotionEvent ev) {
        return delegate.dispatchTrackballEvent(ev);
    }"
24255,dispatchTouchEvent,"    public boolean dispatchTouchEvent(MotionEvent ev) {
        return delegate.dispatchTouchEvent(ev);
    }"
24256,dispatchPopulateAccessibilityEvent,"    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {
        return delegate.dispatchPopulateAccessibilityEvent(event);
    }"
24257,dispatchKeyShortcutEvent,"    public boolean dispatchKeyShortcutEvent(KeyEvent event) {
        return delegate.dispatchKeyShortcutEvent(event);
    }"
24258,dispatchKeyEvent,"    public boolean dispatchKeyEvent(KeyEvent event) {
        return delegate.dispatchKeyEvent(event);
    }"
24259,dispatchGenericMotionEvent,"    public boolean dispatchGenericMotionEvent(MotionEvent ev) {
        return delegate.dispatchGenericMotionEvent(ev);
    }"
24260,deleteSharedPreferences,"    public boolean deleteSharedPreferences(String name) {
        return delegate.deleteSharedPreferences(name);
    }"
24261,deleteFile,"    public boolean deleteFile(String name) {
        return delegate.deleteFile(name);
    }"
24262,deleteDatabase,"    public boolean deleteDatabase(String name) {
        return delegate.deleteDatabase(name);
    }"
24263,databaseList,"    public String[] databaseList() {
        return delegate.databaseList();
    }"
24264,createPendingResult,"    public PendingIntent createPendingResult(int requestCode, @NonNull Intent data, int flags) {
        return delegate.createPendingResult(requestCode, data, flags);
    }"
24265,createPackageContext,"    public Context createPackageContext(String packageName, int flags) throws NameNotFoundException {
        try {
            return delegate.createPackageContext(packageName, flags);"
24266,createDisplayContext,"    public Context createDisplayContext(Display display) {
        return delegate.createDisplayContext(display);
    }"
24267,createDeviceProtectedStorageContext,"    public Context createDeviceProtectedStorageContext() {
        return delegate.createDeviceProtectedStorageContext();
    }"
24268,createContextForSplit,"    public Context createContextForSplit(String splitName) throws NameNotFoundException {
        try {
            return delegate.createContextForSplit(splitName);"
24269,createConfigurationContext,"    public Context createConfigurationContext(Configuration overrideConfiguration) {
        return delegate.createConfigurationContext(overrideConfiguration);
    }"
24270,closeOptionsMenu,"    public void closeOptionsMenu() {
        delegate.closeOptionsMenu();
    }"
24271,closeContextMenu,"    public void closeContextMenu() {
        delegate.closeContextMenu();
    }"
24272,clearWallpaper,"    public void clearWallpaper() throws IOException {
        try {
            delegate.clearWallpaper();"
24273,checkUriPermission,"    public int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags) {
        return delegate.checkUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags);"
24274,checkUriPermission,"    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags) {
        return delegate.checkUriPermission(uri, pid, uid, modeFlags);
    }"
24275,checkSelfPermission,"    public int checkSelfPermission(String permission) {
        return delegate.checkSelfPermission(permission);
    }"
24276,checkPermission,"    public int checkPermission(String permission, int pid, int uid) {
        return delegate.checkPermission(permission, pid, uid);
    }"
24277,checkCallingUriPermission,"    public int checkCallingUriPermission(Uri uri, int modeFlags) {
        return delegate.checkCallingUriPermission(uri, modeFlags);
    }"
24278,checkCallingPermission,"    public int checkCallingPermission(String permission) {
        return delegate.checkCallingPermission(permission);
    }"
24279,checkCallingOrSelfUriPermission,"    public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags) {
        return delegate.checkCallingOrSelfUriPermission(uri, modeFlags);
    }"
24280,checkCallingOrSelfPermission,"    public int checkCallingOrSelfPermission(String permission) {
        return delegate.checkCallingOrSelfPermission(permission);
    }"
24281,bindService,"    public boolean bindService(Intent service, ServiceConnection conn, int flags) {
        return delegate.bindService(service, conn, flags);
    }"
24282,attachBaseContext,"    public void attachBaseContext(Context newBase) {
        delegate.attachBaseContext(newBase);
    }"
24283,applyOverrideConfiguration,"    public void applyOverrideConfiguration(Configuration overrideConfiguration) {
        delegate.applyOverrideConfiguration(overrideConfiguration);
    }"
24284,addPlugin,"    public Removable addPlugin(final ActivityPlugin plugin) {
        return delegate.addPlugin(plugin);
    }"
24285,addContentView,"    public void addContentView(View view, LayoutParams params) {
        delegate.addContentView(view, params);
    }"
24286,addActivityPlugins,"    public List<Removable> addActivityPlugins(@NonNull final Iterable<? extends ActivityPlugin> plugins) {
        final List<Removable> removables = new ArrayList<>();
        for (final ActivityPlugin plugin : plugins) {
            removables.add(delegate.addPlugin(plugin));
        }"
24287,addActivityPlugins,"    public List<Removable> addActivityPlugins(@NonNull final ActivityPlugin... plugins) {
        final List<Removable> removables = new ArrayList<>(plugins.length);
        for (final ActivityPlugin plugin : plugins) {
            removables.add(delegate.addPlugin(plugin));
        }"
24290,onSaveInstanceState,"    public void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {
        delegate.onSaveInstanceState(outState, outPersistentState);
    }"
24291,onSaveInstanceState,"    public void onSaveInstanceState(Bundle outState) {
        delegate.onSaveInstanceState(outState);
    }"
24294,onNewIntent,"    public void onNewIntent(Intent intent) {
        delegate.onNewIntent(intent);
    }"
24295,onPostResume,"    public void onPostResume() {
        delegate.onPostResume();
    }"
24297,onRestart,"    public void onRestart() {
        delegate.onRestart();
    }"
24298,onPostCreate,"    public void onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        delegate.onPostCreate(savedInstanceState, persistentState);
    }"
24299,onPostCreate,"    public void onPostCreate(@Nullable Bundle savedInstanceState) {
        delegate.onPostCreate(savedInstanceState);
    }"
24300,onRestoreInstanceState,"    public void onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState) {
        delegate.onRestoreInstanceState(savedInstanceState, persistentState);
    }"
24301,onRestoreInstanceState,"    public void onRestoreInstanceState(Bundle savedInstanceState) {
        delegate.onRestoreInstanceState(savedInstanceState);
    }"
24302,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        delegate.onActivityResult(requestCode, resultCode, data);
    }"
24304,onCreateView,"    public View onCreateView(String name, Context context, AttributeSet attrs) {
        return delegate.onCreateView(name, context, attrs);
    }"
24305,onCreateView,"    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
        return delegate.onCreateView(parent, name, context, attrs);
    }"
24306,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        delegate.onCreate(savedInstanceState, persistentState);
    }"
24308,unregisterForContextMenu,"    public void unregisterForContextMenu(View view) {
        super.unregisterForContextMenu(view);
    }"
24309,toString,"    public String toString() {
        return super.toString();
    }"
24310,startPostponedEnterTransition,"    public void startPostponedEnterTransition() {
        super.startPostponedEnterTransition();
    }"
24311,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, Bundle options) throws SendIntentException {
        super.startIntentSenderForResult(intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags,"
24312,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) {
        super.startActivityForResult(intent, requestCode, options);
    }"
24313,startActivityForResult,"    public void startActivityForResult(Intent intent, int requestCode) {
        super.startActivityForResult(intent, requestCode);
    }"
24314,startActivity,"    public void startActivity(Intent intent, @Nullable Bundle options) {
        super.startActivity(intent, options);
    }"
24315,startActivity,"    public void startActivity(Intent intent) {
        super.startActivity(intent);
    }"
24316,shouldShowRequestPermissionRationale,"    public boolean shouldShowRequestPermissionRationale(@NonNull String permission) {
        return super.shouldShowRequestPermissionRationale(permission);
    }"
24317,setTargetFragment,"    public void setTargetFragment(@Nullable Fragment fragment, int requestCode) {
        super.setTargetFragment(fragment, requestCode);
    }"
24318,setRetainInstance,"    public void setRetainInstance(boolean retain) {
        super.setRetainInstance(retain);
    }"
24319,setMenuVisibility,"    public void setMenuVisibility(boolean menuVisible) {
        super.setMenuVisibility(menuVisible);
    }"
24320,setInitialSavedState,"    public void setInitialSavedState(@Nullable SavedState state) {
        super.setInitialSavedState(state);
    }"
24321,setHasOptionsMenu,"    public void setHasOptionsMenu(boolean hasMenu) {
        super.setHasOptionsMenu(hasMenu);
    }"
24322,setExitSharedElementCallback,"    public void setExitSharedElementCallback(SharedElementCallback callback) {
        super.setExitSharedElementCallback(callback);
    }"
24323,setEnterSharedElementCallback,"    public void setEnterSharedElementCallback(SharedElementCallback callback) {
        super.setEnterSharedElementCallback(callback);
    }"
24324,setArguments,"    public void setArguments(@Nullable Bundle args) {
        super.setArguments(args);
    }"
24325,registerForContextMenu,"    public void registerForContextMenu(View view) {
        super.registerForContextMenu(view);
    }"
24326,postponeEnterTransition,"    public void postponeEnterTransition() {
        super.postponeEnterTransition();
    }"
24327,onPrepareOptionsMenu,"    public void onPrepareOptionsMenu(Menu menu) {
        super.onPrepareOptionsMenu(menu);
    }"
24328,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode);
    }"
24329,onOptionsMenuClosed,"    public void onOptionsMenuClosed(Menu menu) {
        super.onOptionsMenuClosed(menu);
    }"
24330,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        return super.onOptionsItemSelected(item);
    }"
24331,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode) {
        super.onMultiWindowModeChanged(isInMultiWindowMode);
    }"
24332,onLowMemory,"    public void onLowMemory() {
        super.onLowMemory();
    }"
24333,onInflate,"    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
        super.onInflate(activity, attrs, savedInstanceState);
    }"
24334,onInflate,"    public void onInflate(Context context, AttributeSet attrs, Bundle savedInstanceState) {
        super.onInflate(context, attrs, savedInstanceState);
    }"
24335,onHiddenChanged,"    public void onHiddenChanged(boolean hidden) {
        super.onHiddenChanged(hidden);
    }"
24336,onGetLayoutInflater,"    public LayoutInflater onGetLayoutInflater(@Nullable Bundle savedInstanceState) {
        return super.onGetLayoutInflater(savedInstanceState);
    }"
24337,onDestroyOptionsMenu,"    public void onDestroyOptionsMenu() {
        super.onDestroyOptionsMenu();
    }"
24338,onCreateOptionsMenu,"    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        super.onCreateOptionsMenu(menu, inflater);
    }"
24339,onCreateContextMenu,"    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        super.onCreateContextMenu(menu, v, menuInfo);
    }"
24340,onCreateAnimator,"    public Animator onCreateAnimator(int transit, boolean enter, int nextAnim) {
        return super.onCreateAnimator(transit, enter, nextAnim);
    }"
24341,onCreateAnimation,"    public Animation onCreateAnimation(int transit, boolean enter, int nextAnim) {
        return super.onCreateAnimation(transit, enter, nextAnim);
    }"
24342,onContextItemSelected,"    public boolean onContextItemSelected(MenuItem item) {
        return super.onContextItemSelected(item);
    }"
24343,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }"
24344,onAttachFragment,"    public void onAttachFragment(Fragment childFragment) {
        super.onAttachFragment(childFragment);
    }"
24345,getViewModelStore,"    public ViewModelStore getViewModelStore() {
        return super.getViewModelStore();
    }"
24346,getViewLifecycleOwnerLiveData,"    public LiveData<LifecycleOwner> getViewLifecycleOwnerLiveData() {
        return super.getViewLifecycleOwnerLiveData();
    }"
24347,getViewLifecycleOwner,"    public LifecycleOwner getViewLifecycleOwner() {
        return super.getViewLifecycleOwner();
    }"
24348,getView,"    public View getView() {
        return super.getView();
    }"
24349,setUserVisibleHint,"    public void setUserVisibleHint(boolean isVisibleToUser) {
        super.setUserVisibleHint(isVisibleToUser);
    }"
24350,getUserVisibleHint,"    public boolean getUserVisibleHint() {
        return super.getUserVisibleHint();
    }"
24351,setSharedElementReturnTransition,"    public void setSharedElementReturnTransition(@Nullable Object transition) {
        super.setSharedElementReturnTransition(transition);
    }"
24352,getSharedElementReturnTransition,"    public Object getSharedElementReturnTransition() {
        return super.getSharedElementReturnTransition();
    }"
24353,setSharedElementEnterTransition,"    public void setSharedElementEnterTransition(@Nullable Object transition) {
        super.setSharedElementEnterTransition(transition);
    }"
24354,getSharedElementEnterTransition,"    public Object getSharedElementEnterTransition() {
        return super.getSharedElementEnterTransition();
    }"
24355,setReturnTransition,"    public void setReturnTransition(@Nullable Object transition) {
        super.setReturnTransition(transition);
    }"
24356,getReturnTransition,"    public Object getReturnTransition() {
        return super.getReturnTransition();
    }"
24357,setReenterTransition,"    public void setReenterTransition(@Nullable Object transition) {
        super.setReenterTransition(transition);
    }"
24358,getReenterTransition,"    public Object getReenterTransition() {
        return super.getReenterTransition();
    }"
24359,getLoaderManager,"    public LoaderManager getLoaderManager() {
        return super.getLoaderManager();
    }"
24360,getLifecycle,"    public Lifecycle getLifecycle() {
        return super.getLifecycle();
    }"
24361,getLayoutInflater,"    public LayoutInflater getLayoutInflater(@Nullable Bundle savedFragmentState) {
        return super.getLayoutInflater(savedFragmentState);
    }"
24362,setExitTransition,"    public void setExitTransition(@Nullable Object transition) {
        super.setExitTransition(transition);
    }"
24363,getExitTransition,"    public Object getExitTransition() {
        return super.getExitTransition();
    }"
24364,setEnterTransition,"    public void setEnterTransition(@Nullable Object transition) {
        super.setEnterTransition(transition);
    }"
24365,getEnterTransition,"    public Object getEnterTransition() {
        return super.getEnterTransition();
    }"
24366,getContext,"    public Context getContext() {
        return super.getContext();
    }"
24367,setAllowReturnTransitionOverlap,"    public void setAllowReturnTransitionOverlap(boolean allow) {
        super.setAllowReturnTransitionOverlap(allow);
    }"
24368,getAllowReturnTransitionOverlap,"    public boolean getAllowReturnTransitionOverlap() {
        return super.getAllowReturnTransitionOverlap();
    }"
24369,setAllowEnterTransitionOverlap,"    public void setAllowEnterTransitionOverlap(boolean allow) {
        super.setAllowEnterTransitionOverlap(allow);
    }"
24370,getAllowEnterTransitionOverlap,"    public boolean getAllowEnterTransitionOverlap() {
        return super.getAllowEnterTransitionOverlap();
    }"
24371,dump,"    public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args) {
        super.dump(prefix, fd, writer, args);
    }"
24372,onRequestPermissionsResult,"    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
            @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);"
24374,onDestroy,"    public void onDestroy() {
        super.onDestroy();
    }"
24375,onDestroyView,"    public void onDestroyView() {
        super.onDestroyView();
    }"
24376,onSaveInstanceState,"    public void onSaveInstanceState(@NonNull Bundle outState) {
        super.onSaveInstanceState(outState);
    }"
24377,onStop,"    public void onStop() {
        super.onStop();
    }"
24378,onPause,"    public void onPause() {
        super.onPause();
    }"
24379,onResume,"    public void onResume() {
        super.onResume();
    }"
24380,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
    }"
24381,onStart,"    public void onStart() {
        super.onStart();
    }"
24382,onViewStateRestored,"    public void onViewStateRestored(@Nullable Bundle savedInstanceState) {
        super.onViewStateRestored(savedInstanceState);
    }"
24383,onActivityCreated,"    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
    }"
24385,onCreateView,"    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,
            @Nullable Bundle savedInstanceState) {
        return super.onCreateView(inflater, container, savedInstanceState);"
24386,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }"
24387,onAttach,"    public void onAttach(Activity activity) {
        super.onAttach(activity);
    }"
24388,onAttach,"    public void onAttach(Context context) {
        super.onAttach(context);
    }"
24389,showNow,"    public void showNow(FragmentManager manager, String tag) {
        super.showNow(manager, tag);
    }"
24390,show,"    public int show(FragmentTransaction transaction, String tag) {
        return super.show(transaction, tag);
    }"
24391,show,"    public void show(FragmentManager manager, String tag) {
        super.show(manager, tag);
    }"
24392,setupDialog,"    public void setupDialog(Dialog dialog, int style) {
        super.setupDialog(dialog, style);
    }"
24393,setStyle,"    public void setStyle(int style, int theme) {
        super.setStyle(style, theme);
    }"
24395,onDismiss,"    public void onDismiss(DialogInterface dialog) {
        super.onDismiss(dialog);
    }"
24396,onCreateDialog,"    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
        return super.onCreateDialog(savedInstanceState);
    }"
24397,onCancel,"    public void onCancel(DialogInterface dialog) {
        super.onCancel(dialog);
    }"
24398,setCancelable,"    public void setCancelable(boolean cancelable) {
        super.setCancelable(cancelable);
    }"
24399,isCancelable,"    public boolean isCancelable() {
        return super.isCancelable();
    }"
24400,getTheme,"    public int getTheme() {
        return super.getTheme();
    }"
24401,setShowsDialog,"    public void setShowsDialog(boolean showsDialog) {
        super.setShowsDialog(showsDialog);
    }"
24402,getShowsDialog,"    public boolean getShowsDialog() {
        return super.getShowsDialog();
    }"
24403,getDialog,"    public Dialog getDialog() {
        return super.getDialog();
    }"
24404,dismissAllowingStateLoss,"    public void dismissAllowingStateLoss() {
        super.dismissAllowingStateLoss();
    }"
24405,dismiss,"    public void dismiss() {
        super.dismiss();
    }"
24414,onUserLeaveHint,"    protected void onUserLeaveHint() {
        super.onUserLeaveHint();
    }"
24415,onTitleChanged,"    protected void onTitleChanged(CharSequence title, int color) {
        super.onTitleChanged(title, color);
    }"
24416,onResumeFragments,"    protected void onResumeFragments() {
        super.onResumeFragments();
    }"
24417,onPrepareOptionsPanel,"    protected boolean onPrepareOptionsPanel(View view, Menu menu) {
        return super.onPrepareOptionsPanel(view, menu);
    }"
24418,onPrepareDialog,"    protected void onPrepareDialog(int id, Dialog dialog, Bundle args) {
        super.onPrepareDialog(id, dialog, args);
    }"
24419,onPrepareDialog,"    protected void onPrepareDialog(int id, Dialog dialog) {
        super.onPrepareDialog(id, dialog);
    }"
24420,onCreateDialog,"    protected Dialog onCreateDialog(int id, Bundle args) {
        return super.onCreateDialog(id, args);
    }"
24421,onCreateDialog,"    protected Dialog onCreateDialog(int id) {
        return super.onCreateDialog(id);
    }"
24422,onChildTitleChanged,"    protected void onChildTitleChanged(Activity childActivity, CharSequence title) {
        super.onChildTitleChanged(childActivity, title);
    }"
24423,onApplyThemeResource,"    protected void onApplyThemeResource(Theme theme, int resid, boolean first) {
        super.onApplyThemeResource(theme, resid, first);
    }"
24424,attachBaseContext,"    protected void attachBaseContext(Context newBase) {
        super.attachBaseContext(newBase);
    }"
24425,unregisterReceiver,"    public void unregisterReceiver(BroadcastReceiver receiver) {
        super.unregisterReceiver(receiver);
    }"
24427,unregisterComponentCallbacks,"    public void unregisterComponentCallbacks(ComponentCallbacks callback) {
        super.unregisterComponentCallbacks(callback);
    }"
24428,unbindService,"    public void unbindService(ServiceConnection conn) {
        super.unbindService(conn);
    }"
24429,triggerSearch,"    public void triggerSearch(String query, @Nullable Bundle appSearchData) {
        super.triggerSearch(query, appSearchData);
    }"
24430,takeKeyEvents,"    public void takeKeyEvents(boolean get) {
        super.takeKeyEvents(get);
    }"
24431,supportStartPostponedEnterTransition,"    public void supportStartPostponedEnterTransition() {
        super.supportStartPostponedEnterTransition();
    }"
24432,supportShouldUpRecreateTask,"    public boolean supportShouldUpRecreateTask(@NonNull Intent targetIntent) {
        return super.supportShouldUpRecreateTask(targetIntent);
    }"
24433,supportRequestWindowFeature,"    public boolean supportRequestWindowFeature(int featureId) {
        return super.supportRequestWindowFeature(featureId);
    }"
24434,supportPostponeEnterTransition,"    public void supportPostponeEnterTransition() {
        super.supportPostponeEnterTransition();
    }"
24435,supportNavigateUpTo,"    public void supportNavigateUpTo(@NonNull Intent upIntent) {
        super.supportNavigateUpTo(upIntent);
    }"
24436,supportInvalidateOptionsMenu,"    public void supportInvalidateOptionsMenu() {
        super.supportInvalidateOptionsMenu();
    }"
24437,supportFinishAfterTransition,"    public void supportFinishAfterTransition() {
        super.supportFinishAfterTransition();
    }"
24438,superDispatchKeyEvent,"    public boolean superDispatchKeyEvent(KeyEvent event) {
        return super.superDispatchKeyEvent(event);
    }"
24439,stopService,"    public boolean stopService(Intent name) {
        return super.stopService(name);
    }"
24440,stopManagingCursor,"    public void stopManagingCursor(Cursor c) {
        super.stopManagingCursor(c);
    }"
24441,stopLockTask,"    public void stopLockTask() {
        super.stopLockTask();
    }"
24442,stopLocalVoiceInteraction,"    public void stopLocalVoiceInteraction() {
        super.stopLocalVoiceInteraction();
    }"
24443,startSupportActionMode,"    public ActionMode startSupportActionMode(@NonNull Callback callback) {
        return super.startSupportActionMode(callback);
    }"
24444,startService,"    public ComponentName startService(Intent service) {
        return super.startService(service);
    }"
24445,startSearch,"    public void startSearch(@Nullable String initialQuery, boolean selectInitialQuery, @Nullable Bundle appSearchData,
            boolean globalSearch) {
        super.startSearch(initialQuery, selectInitialQuery, appSearchData, globalSearch);"
24447,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent, @Nullable Bundle options) {
        return super.startNextMatchingActivity(intent, options);
    }"
24448,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent) {
        return super.startNextMatchingActivity(intent);
    }"
24449,startManagingCursor,"    public void startManagingCursor(Cursor c) {
        super.startManagingCursor(c);
    }"
24450,startLockTask,"    public void startLockTask() {
        super.startLockTask();
    }"
24451,startLocalVoiceInteraction,"    public void startLocalVoiceInteraction(Bundle privateOptions) {
        super.startLocalVoiceInteraction(privateOptions);
    }"
24453,startIntentSenderFromChild,"    public void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, @Nullable Bundle options) throws SendIntentException {
        super.startIntentSenderFromChild(child, intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags,"
24454,startIntentSenderFromChild,"    public void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        super.startIntentSenderFromChild(child, intent, requestCode, fillInIntent, flagsMask, flagsValues,"
24456,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        super.startIntentSenderForResult(intent, requestCode, fillInIntent, flagsMask, flagsValues, extraFlags);"
24457,startIntentSender,"    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags, Bundle options) throws SendIntentException {
        super.startIntentSender(intent, fillInIntent, flagsMask, flagsValues, extraFlags, options);"
24458,startIntentSender,"    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags) throws SendIntentException {
        super.startIntentSender(intent, fillInIntent, flagsMask, flagsValues, extraFlags);"
24459,startInstrumentation,"    public boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments) {
        return super.startInstrumentation(className, profileFile, arguments);
    }"
24460,startForegroundService,"    public ComponentName startForegroundService(Intent service) {
        return super.startForegroundService(service);
    }"
24461,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode, @Nullable Bundle options) {
        return super.startActivityIfNeeded(intent, requestCode, options);
    }"
24462,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode) {
        return super.startActivityIfNeeded(intent, requestCode);
    }"
24463,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        super.startActivityFromFragment(fragment, intent, requestCode, options);"
24464,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode) {
        super.startActivityFromFragment(fragment, intent, requestCode);
    }"
24465,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        super.startActivityFromFragment(fragment, intent, requestCode, options);"
24466,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode) {
        super.startActivityFromFragment(fragment, intent, requestCode);
    }"
24467,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode,
            @Nullable Bundle options) {
        super.startActivityFromChild(child, intent, requestCode, options);"
24468,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode) {
        super.startActivityFromChild(child, intent, requestCode);
    }"
24473,startActivities,"    public void startActivities(Intent[] intents, @Nullable Bundle options) {
        super.startActivities(intents, options);
    }"
24474,startActivities,"    public void startActivities(Intent[] intents) {
        super.startActivities(intents);
    }"
24475,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback, int type) {
        return super.startActionMode(callback, type);
    }"
24476,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback) {
        return super.startActionMode(callback);
    }"
24477,showLockTaskEscapeMessage,"    public void showLockTaskEscapeMessage() {
        super.showLockTaskEscapeMessage();
    }"
24478,showAssist,"    public boolean showAssist(Bundle args) {
        return super.showAssist(args);
    }"
24479,shouldUpRecreateTask,"    public boolean shouldUpRecreateTask(Intent targetIntent) {
        return super.shouldUpRecreateTask(targetIntent);
    }"
24481,setWallpaper,"    public void setWallpaper(Bitmap bitmap) throws IOException {
        super.setWallpaper(bitmap);
    }"
24482,setVrModeEnabled,"    public void setVrModeEnabled(boolean enabled, @NonNull ComponentName requestedComponent)
            throws NameNotFoundException {
        super.setVrModeEnabled(enabled, requestedComponent);"
24483,setVisible,"    public void setVisible(boolean visible) {
        super.setVisible(visible);
    }"
24484,setTurnScreenOn,"    public void setTurnScreenOn(boolean turnScreenOn) {
        super.setTurnScreenOn(turnScreenOn);
    }"
24485,setTitleColor,"    public void setTitleColor(int textColor) {
        super.setTitleColor(textColor);
    }"
24486,setTitle,"    public void setTitle(int titleId) {
        super.setTitle(titleId);
    }"
24487,setTitle,"    public void setTitle(CharSequence title) {
        super.setTitle(title);
    }"
24488,setTaskDescription,"    public void setTaskDescription(TaskDescription taskDescription) {
        super.setTaskDescription(taskDescription);
    }"
24489,setSupportProgressBarVisibility,"    public void setSupportProgressBarVisibility(boolean visible) {
        super.setSupportProgressBarVisibility(visible);
    }"
24490,setSupportProgressBarIndeterminateVisibility,"    public void setSupportProgressBarIndeterminateVisibility(boolean visible) {
        super.setSupportProgressBarIndeterminateVisibility(visible);
    }"
24491,setSupportProgressBarIndeterminate,"    public void setSupportProgressBarIndeterminate(boolean indeterminate) {
        super.setSupportProgressBarIndeterminate(indeterminate);
    }"
24492,setSupportProgress,"    public void setSupportProgress(int progress) {
        super.setSupportProgress(progress);
    }"
24493,setShowWhenLocked,"    public void setShowWhenLocked(boolean showWhenLocked) {
        super.setShowWhenLocked(showWhenLocked);
    }"
24494,setPictureInPictureParams,"    public void setPictureInPictureParams(@NonNull PictureInPictureParams params) {
        super.setPictureInPictureParams(params);
    }"
24495,setFinishOnTouchOutside,"    public void setFinishOnTouchOutside(boolean finish) {
        super.setFinishOnTouchOutside(finish);
    }"
24496,setExitSharedElementCallback,"    public void setExitSharedElementCallback(android.app.SharedElementCallback callback) {
        super.setExitSharedElementCallback(callback);
    }"
24497,setExitSharedElementCallback,"    public void setExitSharedElementCallback(SharedElementCallback listener) {
        super.setExitSharedElementCallback(listener);
    }"
24498,setEnterSharedElementCallback,"    public void setEnterSharedElementCallback(android.app.SharedElementCallback callback) {
        super.setEnterSharedElementCallback(callback);
    }"
24500,setContentView,"    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
    }"
24501,setContentView,"    public void setContentView(View view) {
        super.setContentView(view);
    }"
24502,setContentView,"    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
    }"
24503,sendStickyOrderedBroadcastAsUser,"    public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        super.sendStickyOrderedBroadcastAsUser(intent, user, resultReceiver, scheduler, initialCode, initialData,"
24504,sendStickyOrderedBroadcast,"    public void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler,
            int initialCode, String initialData, Bundle initialExtras) {
        super.sendStickyOrderedBroadcast(intent, resultReceiver, scheduler, initialCode, initialData, initialExtras);"
24505,sendStickyBroadcastAsUser,"    public void sendStickyBroadcastAsUser(Intent intent, UserHandle user) {
        super.sendStickyBroadcastAsUser(intent, user);
    }"
24506,sendStickyBroadcast,"    public void sendStickyBroadcast(Intent intent) {
        super.sendStickyBroadcast(intent);
    }"
24508,sendOrderedBroadcast,"    public void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        super.sendOrderedBroadcast(intent, receiverPermission, resultReceiver, scheduler, initialCode, initialData,"
24509,sendOrderedBroadcast,"    public void sendOrderedBroadcast(Intent intent, String receiverPermission) {
        super.sendOrderedBroadcast(intent, receiverPermission);
    }"
24510,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) {
        super.sendBroadcastAsUser(intent, user, receiverPermission);
    }"
24511,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user) {
        super.sendBroadcastAsUser(intent, user);
    }"
24512,sendBroadcast,"    public void sendBroadcast(Intent intent, String receiverPermission) {
        super.sendBroadcast(intent, receiverPermission);
    }"
24513,sendBroadcast,"    public void sendBroadcast(Intent intent) {
        super.sendBroadcast(intent);
    }"
24514,revokeUriPermission,"    public void revokeUriPermission(String targetPackage, Uri uri, int modeFlags) {
        super.revokeUriPermission(targetPackage, uri, modeFlags);
    }"
24515,revokeUriPermission,"    public void revokeUriPermission(Uri uri, int modeFlags) {
        super.revokeUriPermission(uri, modeFlags);
    }"
24516,requestVisibleBehind,"    public boolean requestVisibleBehind(boolean visible) {
        return super.requestVisibleBehind(visible);
    }"
24517,requestDragAndDropPermissions,"    public DragAndDropPermissions requestDragAndDropPermissions(DragEvent event) {
        return super.requestDragAndDropPermissions(event);
    }"
24518,reportFullyDrawn,"    public void reportFullyDrawn() {
        super.reportFullyDrawn();
    }"
24519,removeStickyBroadcastAsUser,"    public void removeStickyBroadcastAsUser(Intent intent, UserHandle user) {
        super.removeStickyBroadcastAsUser(intent, user);
    }"
24520,removeStickyBroadcast,"    public void removeStickyBroadcast(Intent intent) {
        super.removeStickyBroadcast(intent);
    }"
24521,releaseInstance,"    public boolean releaseInstance() {
        return super.releaseInstance();
    }"
24522,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler, int flags) {
        return super.registerReceiver(receiver, filter, broadcastPermission, scheduler, flags);"
24523,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler) {
        return super.registerReceiver(receiver, filter, broadcastPermission, scheduler);"
24524,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags) {
        return super.registerReceiver(receiver, filter, flags);
    }"
24525,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {
        return super.registerReceiver(receiver, filter);
    }"
24527,registerComponentCallbacks,"    public void registerComponentCallbacks(ComponentCallbacks callback) {
        super.registerComponentCallbacks(callback);
    }"
24528,recreate,"    public void recreate() {
        super.recreate();
    }"
24529,putExtraData,"    public void putExtraData(ExtraData extraData) {
        super.putExtraData(extraData);
    }"
24531,peekWallpaper,"    public Drawable peekWallpaper() {
        return super.peekWallpaper();
    }"
24532,overridePendingTransition,"    public void overridePendingTransition(int enterAnim, int exitAnim) {
        super.overridePendingTransition(enterAnim, exitAnim);
    }"
24533,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory,
            DatabaseErrorHandler errorHandler) {
        return super.openOrCreateDatabase(name, mode, factory, errorHandler);"
24534,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory) {
        return super.openOrCreateDatabase(name, mode, factory);
    }"
24535,openOptionsMenu,"    public void openOptionsMenu() {
        super.openOptionsMenu();
    }"
24536,openFileOutput,"    public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException {
        return super.openFileOutput(name, mode);
    }"
24537,openFileInput,"    public FileInputStream openFileInput(String name) throws FileNotFoundException {
        return super.openFileInput(name);
    }"
24538,openContextMenu,"    public void openContextMenu(View view) {
        super.openContextMenu(view);
    }"
24539,onWindowStartingSupportActionMode,"    public ActionMode onWindowStartingSupportActionMode(@NonNull Callback callback) {
        return super.onWindowStartingSupportActionMode(callback);
    }"
24540,onWindowStartingActionMode,"    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback, int type) {
        return super.onWindowStartingActionMode(callback, type);
    }"
24541,onWindowStartingActionMode,"    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback) {
        return super.onWindowStartingActionMode(callback);
    }"
24542,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
    }"
24543,onWindowAttributesChanged,"    public void onWindowAttributesChanged(WindowManager.LayoutParams params) {
        super.onWindowAttributesChanged(params);
    }"
24544,onVisibleBehindCanceled,"    public void onVisibleBehindCanceled() {
        super.onVisibleBehindCanceled();
    }"
24545,onUserInteraction,"    public void onUserInteraction() {
        super.onUserInteraction();
    }"
24546,onTrimMemory,"    public void onTrimMemory(int level) {
        super.onTrimMemory(level);
    }"
24547,onTrackballEvent,"    public boolean onTrackballEvent(MotionEvent event) {
        return super.onTrackballEvent(event);
    }"
24548,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        return super.onTouchEvent(event);
    }"
24549,onSupportNavigateUp,"    public boolean onSupportNavigateUp() {
        return super.onSupportNavigateUp();
    }"
24550,onSupportContentChanged,"    public void onSupportContentChanged() {
        super.onSupportContentChanged();
    }"
24551,onSupportActionModeStarted,"    public void onSupportActionModeStarted(@NonNull ActionMode mode) {
        super.onSupportActionModeStarted(mode);
    }"
24552,onSupportActionModeFinished,"    public void onSupportActionModeFinished(@NonNull ActionMode mode) {
        super.onSupportActionModeFinished(mode);
    }"
24553,onStateNotSaved,"    public void onStateNotSaved() {
        super.onStateNotSaved();
    }"
24554,onSearchRequested,"    public boolean onSearchRequested() {
        return super.onSearchRequested();
    }"
24555,onSearchRequested,"    public boolean onSearchRequested(@Nullable SearchEvent searchEvent) {
        return super.onSearchRequested(searchEvent);
    }"
24556,onRetainCustomNonConfigurationInstance,"    public Object onRetainCustomNonConfigurationInstance() {
        return super.onRetainCustomNonConfigurationInstance();
    }"
24557,onProvideReferrer,"    public Uri onProvideReferrer() {
        return super.onProvideReferrer();
    }"
24558,onProvideKeyboardShortcuts,"    public void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {
        super.onProvideKeyboardShortcuts(data, menu, deviceId);
    }"
24559,onProvideAssistData,"    public void onProvideAssistData(Bundle data) {
        super.onProvideAssistData(data);
    }"
24560,onProvideAssistContent,"    public void onProvideAssistContent(AssistContent outContent) {
        super.onProvideAssistContent(outContent);
    }"
24561,onPrepareSupportNavigateUpTaskStack,"    public void onPrepareSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        super.onPrepareSupportNavigateUpTaskStack(builder);
    }"
24562,onPreparePanel,"    public boolean onPreparePanel(int featureId, View view, Menu menu) {
        return super.onPreparePanel(featureId, view, menu);
    }"
24563,onPrepareOptionsMenu,"    public boolean onPrepareOptionsMenu(Menu menu) {
        return super.onPrepareOptionsMenu(menu);
    }"
24564,onPrepareNavigateUpTaskStack,"    public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        super.onPrepareNavigateUpTaskStack(builder);
    }"
24565,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig);
    }"
24567,onPanelClosed,"    public void onPanelClosed(int featureId, Menu menu) {
        super.onPanelClosed(featureId, menu);
    }"
24570,onNavigateUpFromChild,"    public boolean onNavigateUpFromChild(Activity child) {
        return super.onNavigateUpFromChild(child);
    }"
24571,onNavigateUp,"    public boolean onNavigateUp() {
        return super.onNavigateUp();
    }"
24572,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig) {
        super.onMultiWindowModeChanged(isInMultiWindowMode, newConfig);
    }"
24574,onMenuOpened,"    public boolean onMenuOpened(int featureId, Menu menu) {
        return super.onMenuOpened(featureId, menu);
    }"
24576,onLocalVoiceInteractionStopped,"    public void onLocalVoiceInteractionStopped() {
        super.onLocalVoiceInteractionStopped();
    }"
24577,onLocalVoiceInteractionStarted,"    public void onLocalVoiceInteractionStarted() {
        super.onLocalVoiceInteractionStarted();
    }"
24578,onKeyUp,"    public boolean onKeyUp(int keyCode, KeyEvent event) {
        return super.onKeyUp(keyCode, event);
    }"
24579,onKeyShortcut,"    public boolean onKeyShortcut(int keyCode, KeyEvent event) {
        return super.onKeyShortcut(keyCode, event);
    }"
24580,onKeyMultiple,"    public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) {
        return super.onKeyMultiple(keyCode, repeatCount, event);
    }"
24581,onKeyLongPress,"    public boolean onKeyLongPress(int keyCode, KeyEvent event) {
        return super.onKeyLongPress(keyCode, event);
    }"
24582,onKeyDown,"    public boolean onKeyDown(int keyCode, KeyEvent event) {
        return super.onKeyDown(keyCode, event);
    }"
24583,onGenericMotionEvent,"    public boolean onGenericMotionEvent(MotionEvent event) {
        return super.onGenericMotionEvent(event);
    }"
24584,onEnterAnimationComplete,"    public void onEnterAnimationComplete() {
        super.onEnterAnimationComplete();
    }"
24585,onDetachedFromWindow,"    public void onDetachedFromWindow() {
        super.onDetachedFromWindow();
    }"
24586,onCreateThumbnail,"    public boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas) {
        return super.onCreateThumbnail(outBitmap, canvas);
    }"
24587,onCreateSupportNavigateUpTaskStack,"    public void onCreateSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        super.onCreateSupportNavigateUpTaskStack(builder);
    }"
24588,onCreatePanelView,"    public View onCreatePanelView(int featureId) {
        return super.onCreatePanelView(featureId);
    }"
24589,onCreatePanelMenu,"    public boolean onCreatePanelMenu(int featureId, Menu menu) {
        return super.onCreatePanelMenu(featureId, menu);
    }"
24591,onCreateNavigateUpTaskStack,"    public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        super.onCreateNavigateUpTaskStack(builder);
    }"
24592,onCreateDescription,"    public CharSequence onCreateDescription() {
        return super.onCreateDescription();
    }"
24594,onContextMenuClosed,"    public void onContextMenuClosed(Menu menu) {
        super.onContextMenuClosed(menu);
    }"
24596,onContentChanged,"    public void onContentChanged() {
        super.onContentChanged();
    }"
24598,onBackPressed,"    public void onBackPressed() {
        super.onBackPressed();
    }"
24599,onAttachedToWindow,"    public void onAttachedToWindow() {
        super.onAttachedToWindow();
    }"
24600,onAttachFragment,"    public void onAttachFragment(android.app.Fragment fragment) {
        super.onAttachFragment(fragment);
    }"
24601,onAttachFragment,"    public void onAttachFragment(Fragment fragment) {
        super.onAttachFragment(fragment);
    }"
24602,onActivityReenter,"    public void onActivityReenter(int resultCode, Intent data) {
        super.onActivityReenter(resultCode, data);
    }"
24603,onActionModeStarted,"    public void onActionModeStarted(android.view.ActionMode mode) {
        super.onActionModeStarted(mode);
    }"
24604,onActionModeFinished,"    public void onActionModeFinished(android.view.ActionMode mode) {
        super.onActionModeFinished(mode);
    }"
24605,navigateUpToFromChild,"    public boolean navigateUpToFromChild(Activity child, Intent upIntent) {
        return super.navigateUpToFromChild(child, upIntent);
    }"
24606,navigateUpTo,"    public boolean navigateUpTo(Intent upIntent) {
        return super.navigateUpTo(upIntent);
    }"
24607,moveTaskToBack,"    public boolean moveTaskToBack(boolean nonRoot) {
        return super.moveTaskToBack(nonRoot);
    }"
24608,moveSharedPreferencesFrom,"    public boolean moveSharedPreferencesFrom(Context sourceContext, String name) {
        return super.moveSharedPreferencesFrom(sourceContext, name);
    }"
24609,moveDatabaseFrom,"    public boolean moveDatabaseFrom(Context sourceContext, String name) {
        return super.moveDatabaseFrom(sourceContext, name);
    }"
24610,isVoiceInteractionRoot,"    public boolean isVoiceInteractionRoot() {
        return super.isVoiceInteractionRoot();
    }"
24611,isVoiceInteraction,"    public boolean isVoiceInteraction() {
        return super.isVoiceInteraction();
    }"
24612,isTaskRoot,"    public boolean isTaskRoot() {
        return super.isTaskRoot();
    }"
24613,isRestricted,"    public boolean isRestricted() {
        return super.isRestricted();
    }"
24614,isLocalVoiceInteractionSupported,"    public boolean isLocalVoiceInteractionSupported() {
        return super.isLocalVoiceInteractionSupported();
    }"
24615,isInPictureInPictureMode,"    public boolean isInPictureInPictureMode() {
        return super.isInPictureInPictureMode();
    }"
24616,isInMultiWindowMode,"    public boolean isInMultiWindowMode() {
        return super.isInMultiWindowMode();
    }"
24617,setImmersive,"    public void setImmersive(boolean i) {
        super.setImmersive(i);
    }"
24618,isImmersive,"    public boolean isImmersive() {
        return super.isImmersive();
    }"
24619,isFinishing,"    public boolean isFinishing() {
        return super.isFinishing();
    }"
24620,isDeviceProtectedStorage,"    public boolean isDeviceProtectedStorage() {
        return super.isDeviceProtectedStorage();
    }"
24621,isDestroyed,"    public boolean isDestroyed() {
        return super.isDestroyed();
    }"
24622,isChangingConfigurations,"    public boolean isChangingConfigurations() {
        return super.isChangingConfigurations();
    }"
24623,isActivityTransitionRunning,"    public boolean isActivityTransitionRunning() {
        return super.isActivityTransitionRunning();
    }"
24624,invalidateOptionsMenu,"    public void invalidateOptionsMenu() {
        super.invalidateOptionsMenu();
    }"
24625,hasWindowFocus,"    public boolean hasWindowFocus() {
        return super.hasWindowFocus();
    }"
24626,grantUriPermission,"    public void grantUriPermission(String toPackage, Uri uri, int modeFlags) {
        super.grantUriPermission(toPackage, uri, modeFlags);
    }"
24627,getWindowManager,"    public WindowManager getWindowManager() {
        return super.getWindowManager();
    }"
24628,getWindow,"    public Window getWindow() {
        return super.getWindow();
    }"
24629,getWallpaperDesiredMinimumWidth,"    public int getWallpaperDesiredMinimumWidth() {
        return super.getWallpaperDesiredMinimumWidth();
    }"
24630,getWallpaperDesiredMinimumHeight,"    public int getWallpaperDesiredMinimumHeight() {
        return super.getWallpaperDesiredMinimumHeight();
    }"
24631,setWallpaper,"    public void setWallpaper(InputStream data) throws IOException {
        super.setWallpaper(data);
    }"
24632,getWallpaper,"    public Drawable getWallpaper() {
        return super.getWallpaper();
    }"
24633,getVoiceInteractor,"    public VoiceInteractor getVoiceInteractor() {
        return super.getVoiceInteractor();
    }"
24635,setTheme,"    public void setTheme(int resid) {
        super.setTheme(resid);
    }"
24636,getTheme,"    public Theme getTheme() {
        return super.getTheme();
    }"
24637,getTaskId,"    public int getTaskId() {
        return super.getTaskId();
    }"
24638,getSystemServiceName,"    public String getSystemServiceName(Class<?> serviceClass) {
        return super.getSystemServiceName(serviceClass);
    }"
24639,getSystemService,"    public Object getSystemService(@NonNull String name) {
        return super.getSystemService(name);
    }"
24640,getSupportParentActivityIntent,"    public Intent getSupportParentActivityIntent() {
        return super.getSupportParentActivityIntent();
    }"
24641,getSupportLoaderManager,"    public LoaderManager getSupportLoaderManager() {
        return super.getSupportLoaderManager();
    }"
24642,getSupportFragmentManager,"    public FragmentManager getSupportFragmentManager() {
        return super.getSupportFragmentManager();
    }"
24643,setSupportActionBar,"    public void setSupportActionBar(@Nullable Toolbar toolbar) {
        super.setSupportActionBar(toolbar);
    }"
24644,getSupportActionBar,"    public ActionBar getSupportActionBar() {
        return super.getSupportActionBar();
    }"
24645,getSharedPreferences,"    public SharedPreferences getSharedPreferences(String name, int mode) {
        return super.getSharedPreferences(name, mode);
    }"
24646,getResources,"    public Resources getResources() {
        return super.getResources();
    }"
24647,setRequestedOrientation,"    public void setRequestedOrientation(int requestedOrientation) {
        super.setRequestedOrientation(requestedOrientation);
    }"
24648,getRequestedOrientation,"    public int getRequestedOrientation() {
        return super.getRequestedOrientation();
    }"
24649,getReferrer,"    public Uri getReferrer() {
        return super.getReferrer();
    }"
24650,getPreferences,"    public SharedPreferences getPreferences(int mode) {
        return super.getPreferences(mode);
    }"
24651,getParentActivityIntent,"    public Intent getParentActivityIntent() {
        return super.getParentActivityIntent();
    }"
24652,getPackageResourcePath,"    public String getPackageResourcePath() {
        return super.getPackageResourcePath();
    }"
24653,getPackageName,"    public String getPackageName() {
        return super.getPackageName();
    }"
24654,getPackageManager,"    public PackageManager getPackageManager() {
        return super.getPackageManager();
    }"
24655,getPackageCodePath,"    public String getPackageCodePath() {
        return super.getPackageCodePath();
    }"
24656,getObbDirs,"    public File[] getObbDirs() {
        return super.getObbDirs();
    }"
24657,getObbDir,"    public File getObbDir() {
        return super.getObbDir();
    }"
24658,getNoBackupFilesDir,"    public File getNoBackupFilesDir() {
        return super.getNoBackupFilesDir();
    }"
24659,getMenuInflater,"    public MenuInflater getMenuInflater() {
        return super.getMenuInflater();
    }"
24660,getMaxNumPictureInPictureActions,"    public int getMaxNumPictureInPictureActions() {
        return super.getMaxNumPictureInPictureActions();
    }"
24661,getMainLooper,"    public Looper getMainLooper() {
        return super.getMainLooper();
    }"
24662,getMainExecutor,"    public Executor getMainExecutor() {
        return super.getMainExecutor();
    }"
24663,getLocalClassName,"    public String getLocalClassName() {
        return super.getLocalClassName();
    }"
24664,getLoaderManager,"    public android.app.LoaderManager getLoaderManager() {
        return super.getLoaderManager();
    }"
24666,getLayoutInflater,"    public LayoutInflater getLayoutInflater() {
        return super.getLayoutInflater();
    }"
24667,getLastNonConfigurationInstance,"    public Object getLastNonConfigurationInstance() {
        return super.getLastNonConfigurationInstance();
    }"
24668,getLastCustomNonConfigurationInstance,"    public Object getLastCustomNonConfigurationInstance() {
        return super.getLastCustomNonConfigurationInstance();
    }"
24669,setIntent,"    public void setIntent(Intent newIntent) {
        super.setIntent(newIntent);
    }"
24670,getIntent,"    public Intent getIntent() {
        return super.getIntent();
    }"
24671,getFragmentManager,"    public android.app.FragmentManager getFragmentManager() {
        return super.getFragmentManager();
    }"
24672,getFilesDir,"    public File getFilesDir() {
        return super.getFilesDir();
    }"
24673,getFileStreamPath,"    public File getFileStreamPath(String name) {
        return super.getFileStreamPath(name);
    }"
24674,getExtraData,"    public <T extends ExtraData> T getExtraData(Class<T> extraDataClass) {
        return super.getExtraData(extraDataClass);
    }"
24675,getExternalMediaDirs,"    public File[] getExternalMediaDirs() {
        return super.getExternalMediaDirs();
    }"
24676,getExternalFilesDirs,"    public File[] getExternalFilesDirs(String type) {
        return super.getExternalFilesDirs(type);
    }"
24677,getExternalFilesDir,"    public File getExternalFilesDir(String type) {
        return super.getExternalFilesDir(type);
    }"
24678,getExternalCacheDirs,"    public File[] getExternalCacheDirs() {
        return super.getExternalCacheDirs();
    }"
24679,getExternalCacheDir,"    public File getExternalCacheDir() {
        return super.getExternalCacheDir();
    }"
24680,getDrawerToggleDelegate,"    public Delegate getDrawerToggleDelegate() {
        return super.getDrawerToggleDelegate();
    }"
24681,getDir,"    public File getDir(String name, int mode) {
        return super.getDir(name, mode);
    }"
24682,getDelegate,"    public AppCompatDelegate getDelegate() {
        return super.getDelegate();
    }"
24683,getDatabasePath,"    public File getDatabasePath(String name) {
        return super.getDatabasePath(name);
    }"
24684,getDataDir,"    public File getDataDir() {
        return super.getDataDir();
    }"
24685,getCurrentFocus,"    public View getCurrentFocus() {
        return super.getCurrentFocus();
    }"
24686,setContentTransitionManager,"    public void setContentTransitionManager(TransitionManager tm) {
        super.setContentTransitionManager(tm);
    }"
24687,getContentTransitionManager,"    public TransitionManager getContentTransitionManager() {
        return super.getContentTransitionManager();
    }"
24688,getContentScene,"    public Scene getContentScene() {
        return super.getContentScene();
    }"
24689,getContentResolver,"    public ContentResolver getContentResolver() {
        return super.getContentResolver();
    }"
24690,getComponentName,"    public ComponentName getComponentName() {
        return super.getComponentName();
    }"
24691,getCodeCacheDir,"    public File getCodeCacheDir() {
        return super.getCodeCacheDir();
    }"
24692,getClassLoader,"    public ClassLoader getClassLoader() {
        return super.getClassLoader();
    }"
24693,getChangingConfigurations,"    public int getChangingConfigurations() {
        return super.getChangingConfigurations();
    }"
24694,getCallingPackage,"    public String getCallingPackage() {
        return super.getCallingPackage();
    }"
24695,getCallingActivity,"    public ComponentName getCallingActivity() {
        return super.getCallingActivity();
    }"
24696,getCacheDir,"    public File getCacheDir() {
        return super.getCacheDir();
    }"
24697,getBaseContext,"    public Context getBaseContext() {
        return super.getBaseContext();
    }"
24698,getAssets,"    public AssetManager getAssets() {
        return super.getAssets();
    }"
24699,getApplicationInfo,"    public ApplicationInfo getApplicationInfo() {
        return super.getApplicationInfo();
    }"
24700,getApplicationContext,"    public Context getApplicationContext() {
        return super.getApplicationContext();
    }"
24701,setActionBar,"    public void setActionBar(@Nullable android.widget.Toolbar toolbar) {
        super.setActionBar(toolbar);
    }"
24702,getActionBar,"    public android.app.ActionBar getActionBar() {
        return super.getActionBar();
    }"
24703,finishFromChild,"    public void finishFromChild(Activity child) {
        super.finishFromChild(child);
    }"
24704,finishAndRemoveTask,"    public void finishAndRemoveTask() {
        super.finishAndRemoveTask();
    }"
24705,finishAfterTransition,"    public void finishAfterTransition() {
        super.finishAfterTransition();
    }"
24706,finishAffinity,"    public void finishAffinity() {
        super.finishAffinity();
    }"
24707,finishActivityFromChild,"    public void finishActivityFromChild(@NonNull Activity child, int requestCode) {
        super.finishActivityFromChild(child, requestCode);
    }"
24708,finishActivity,"    public void finishActivity(int requestCode) {
        super.finishActivity(requestCode);
    }"
24709,finish,"    public void finish() {
        super.finish();
    }"
24710,findViewById,"    public <T extends View> T findViewById(int id) {
        return super.findViewById(id);
    }"
24711,fileList,"    public String[] fileList() {
        return super.fileList();
    }"
24712,enterPictureInPictureMode,"    public boolean enterPictureInPictureMode(@NonNull PictureInPictureParams params) {
        return super.enterPictureInPictureMode(params);
    }"
24713,enterPictureInPictureMode,"    public void enterPictureInPictureMode() {
        super.enterPictureInPictureMode();
    }"
24714,enforceUriPermission,"    public void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags, String message) {
        super.enforceUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags, message);"
24715,enforceUriPermission,"    public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) {
        super.enforceUriPermission(uri, pid, uid, modeFlags, message);
    }"
24716,enforcePermission,"    public void enforcePermission(String permission, int pid, int uid, String message) {
        super.enforcePermission(permission, pid, uid, message);
    }"
24717,enforceCallingUriPermission,"    public void enforceCallingUriPermission(Uri uri, int modeFlags, String message) {
        super.enforceCallingUriPermission(uri, modeFlags, message);
    }"
24718,enforceCallingPermission,"    public void enforceCallingPermission(String permission, String message) {
        super.enforceCallingPermission(permission, message);
    }"
24719,enforceCallingOrSelfUriPermission,"    public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) {
        super.enforceCallingOrSelfUriPermission(uri, modeFlags, message);
    }"
24720,enforceCallingOrSelfPermission,"    public void enforceCallingOrSelfPermission(String permission, String message) {
        super.enforceCallingOrSelfPermission(permission, message);
    }"
24722,dispatchTrackballEvent,"    public boolean dispatchTrackballEvent(MotionEvent ev) {
        return super.dispatchTrackballEvent(ev);
    }"
24723,dispatchTouchEvent,"    public boolean dispatchTouchEvent(MotionEvent ev) {
        return super.dispatchTouchEvent(ev);
    }"
24724,dispatchPopulateAccessibilityEvent,"    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {
        return super.dispatchPopulateAccessibilityEvent(event);
    }"
24725,dispatchKeyShortcutEvent,"    public boolean dispatchKeyShortcutEvent(KeyEvent event) {
        return super.dispatchKeyShortcutEvent(event);
    }"
24726,dispatchKeyEvent,"    public boolean dispatchKeyEvent(KeyEvent event) {
        return super.dispatchKeyEvent(event);
    }"
24727,dispatchGenericMotionEvent,"    public boolean dispatchGenericMotionEvent(MotionEvent ev) {
        return super.dispatchGenericMotionEvent(ev);
    }"
24728,deleteSharedPreferences,"    public boolean deleteSharedPreferences(String name) {
        return super.deleteSharedPreferences(name);
    }"
24729,deleteFile,"    public boolean deleteFile(String name) {
        return super.deleteFile(name);
    }"
24730,deleteDatabase,"    public boolean deleteDatabase(String name) {
        return super.deleteDatabase(name);
    }"
24731,databaseList,"    public String[] databaseList() {
        return super.databaseList();
    }"
24732,createPendingResult,"    public PendingIntent createPendingResult(int requestCode, @NonNull Intent data, int flags) {
        return super.createPendingResult(requestCode, data, flags);
    }"
24733,createPackageContext,"    public Context createPackageContext(String packageName, int flags) throws NameNotFoundException {
        return super.createPackageContext(packageName, flags);
    }"
24734,createDisplayContext,"    public Context createDisplayContext(Display display) {
        return super.createDisplayContext(display);
    }"
24735,createDeviceProtectedStorageContext,"    public Context createDeviceProtectedStorageContext() {
        return super.createDeviceProtectedStorageContext();
    }"
24736,createContextForSplit,"    public Context createContextForSplit(String splitName) throws NameNotFoundException {
        return super.createContextForSplit(splitName);
    }"
24737,createConfigurationContext,"    public Context createConfigurationContext(Configuration overrideConfiguration) {
        return super.createConfigurationContext(overrideConfiguration);
    }"
24738,closeOptionsMenu,"    public void closeOptionsMenu() {
        super.closeOptionsMenu();
    }"
24739,closeContextMenu,"    public void closeContextMenu() {
        super.closeContextMenu();
    }"
24740,clearWallpaper,"    public void clearWallpaper() throws IOException {
        super.clearWallpaper();
    }"
24741,checkUriPermission,"    public int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags) {
        return super.checkUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags);"
24742,checkUriPermission,"    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags) {
        return super.checkUriPermission(uri, pid, uid, modeFlags);
    }"
24743,checkSelfPermission,"    public int checkSelfPermission(String permission) {
        return super.checkSelfPermission(permission);
    }"
24744,checkPermission,"    public int checkPermission(String permission, int pid, int uid) {
        return super.checkPermission(permission, pid, uid);
    }"
24745,checkCallingUriPermission,"    public int checkCallingUriPermission(Uri uri, int modeFlags) {
        return super.checkCallingUriPermission(uri, modeFlags);
    }"
24746,checkCallingPermission,"    public int checkCallingPermission(String permission) {
        return super.checkCallingPermission(permission);
    }"
24747,checkCallingOrSelfUriPermission,"    public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags) {
        return super.checkCallingOrSelfUriPermission(uri, modeFlags);
    }"
24748,checkCallingOrSelfPermission,"    public int checkCallingOrSelfPermission(String permission) {
        return super.checkCallingOrSelfPermission(permission);
    }"
24749,bindService,"    public boolean bindService(Intent service, ServiceConnection conn, int flags) {
        return super.bindService(service, conn, flags);
    }"
24750,applyOverrideConfiguration,"    public void applyOverrideConfiguration(Configuration overrideConfiguration) {
        super.applyOverrideConfiguration(overrideConfiguration);
    }"
24751,addContentView,"    public void addContentView(View view, LayoutParams params) {
        super.addContentView(view, params);
    }"
24754,onSaveInstanceState,"    public void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {
        super.onSaveInstanceState(outState, outPersistentState);
    }"
24755,onSaveInstanceState,"    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
    }"
24756,onStop,"    protected void onStop() {
        super.onStop();
    }"
24757,onPause,"    protected void onPause() {
        super.onPause();
    }"
24758,onNewIntent,"    protected void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
    }"
24759,onPostResume,"    protected void onPostResume() {
        super.onPostResume();
    }"
24760,onResume,"    protected void onResume() {
        super.onResume();
    }"
24761,onRestart,"    protected void onRestart() {
        super.onRestart();
    }"
24762,onPostCreate,"    public void onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        super.onPostCreate(savedInstanceState, persistentState);
    }"
24763,onPostCreate,"    protected void onPostCreate(@Nullable Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);
    }"
24764,onRestoreInstanceState,"    public void onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState) {
        super.onRestoreInstanceState(savedInstanceState, persistentState);
    }"
24765,onRestoreInstanceState,"    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
    }"
24766,onActivityResult,"    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
    }"
24767,onStart,"    protected void onStart() {
        super.onStart();
    }"
24768,onCreateView,"    public View onCreateView(String name, Context context, AttributeSet attrs) {
        return super.onCreateView(name, context, attrs);
    }"
24769,onCreateView,"    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
        return super.onCreateView(parent, name, context, attrs);
    }"
24770,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        super.onCreate(savedInstanceState, persistentState);
    }"
24771,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }"
24772,onResume,"    public void onResume() {
        super.onResume();
        Log.v(TAG, ""#2 onResume()"");
    }"
24773,onResume,"    public void onResume() {
        super.onResume();
        Log.v(TAG, ""#1 onResume()"");
    }"
24774,unregisterReceiver,"    void unregisterReceiver(final CallVoid1<BroadcastReceiver> superCall, BroadcastReceiver receiver) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24776,unregisterComponentCallbacks,"    void unregisterComponentCallbacks(final CallVoid1<ComponentCallbacks> superCall, ComponentCallbacks callback) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24777,unbindService,"    void unbindService(final CallVoid1<ServiceConnection> superCall, ServiceConnection conn) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24778,triggerSearch,"    void triggerSearch(final CallVoid2<String, Bundle> superCall, String query, @Nullable Bundle appSearchData) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24779,takeKeyEvents,"    void takeKeyEvents(final CallVoid1<Boolean> superCall, boolean get) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24780,supportStartPostponedEnterTransition,"    void supportStartPostponedEnterTransition(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24781,supportShouldUpRecreateTask,"    boolean supportShouldUpRecreateTask(final CallFun1<Boolean, Intent> superCall, @NonNull Intent targetIntent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24782,supportRequestWindowFeature,"    boolean supportRequestWindowFeature(final CallFun1<Boolean, Integer> superCall, int featureId) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24783,supportPostponeEnterTransition,"    void supportPostponeEnterTransition(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24784,supportNavigateUpTo,"    void supportNavigateUpTo(final CallVoid1<Intent> superCall, @NonNull Intent upIntent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24785,supportInvalidateOptionsMenu,"    void supportInvalidateOptionsMenu(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24786,supportFinishAfterTransition,"    void supportFinishAfterTransition(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24787,superDispatchKeyEvent,"    boolean superDispatchKeyEvent(final CallFun1<Boolean, KeyEvent> superCall, KeyEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24788,stopService,"    boolean stopService(final CallFun1<Boolean, Intent> superCall, Intent name) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24789,stopManagingCursor,"    void stopManagingCursor(final CallVoid1<Cursor> superCall, Cursor c) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24790,stopLockTask,"    void stopLockTask(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24791,stopLocalVoiceInteraction,"    void stopLocalVoiceInteraction(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24792,startSupportActionMode,"    ActionMode startSupportActionMode(final CallFun1<ActionMode, Callback> superCall, @NonNull Callback callback) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24793,startService,"    ComponentName startService(final CallFun1<ComponentName, Intent> superCall, Intent service) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24794,startSearch,"    void startSearch(final CallVoid4<String, Boolean, Bundle, Boolean> superCall, @Nullable String initialQuery,
            boolean selectInitialQuery, @Nullable Bundle appSearchData, boolean globalSearch) {
        synchronized (mSuperListeners) {"
24796,startNextMatchingActivity,"    boolean startNextMatchingActivity(final CallFun2<Boolean, Intent, Bundle> superCall, @NonNull Intent intent,
            @Nullable Bundle options) {
        synchronized (mSuperListeners) {"
24797,startNextMatchingActivity,"    boolean startNextMatchingActivity(final CallFun1<Boolean, Intent> superCall, @NonNull Intent intent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24798,startManagingCursor,"    void startManagingCursor(final CallVoid1<Cursor> superCall, Cursor c) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24799,startLockTask,"    void startLockTask(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24800,startLocalVoiceInteraction,"    void startLocalVoiceInteraction(final CallVoid1<Bundle> superCall, Bundle privateOptions) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24801,startIntentSenderFromFragment,"    void startIntentSenderFromFragment(
            final CallVoid8<Fragment, IntentSender, Integer, Intent, Integer, Integer, Integer, Bundle> superCall,
            Fragment fragment, IntentSender intent, int requestCode, @Nullable Intent fillInIntent, int flagsMask,"
24802,startIntentSenderFromChild,"    void startIntentSenderFromChild(
            final CallVoid8<Activity, IntentSender, Integer, Intent, Integer, Integer, Integer, Bundle> superCall,
            Activity child, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues,"
24803,startIntentSenderFromChild,"    void startIntentSenderFromChild(
            final CallVoid7<Activity, IntentSender, Integer, Intent, Integer, Integer, Integer> superCall,
            Activity child, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues,"
24805,startIntentSenderForResult,"    void startIntentSenderForResult(
            final CallVoid6<IntentSender, Integer, Intent, Integer, Integer, Integer> superCall, IntentSender intent,
            int requestCode, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)"
24806,startIntentSender,"    void startIntentSender(final CallVoid6<IntentSender, Intent, Integer, Integer, Integer, Bundle> superCall,
            IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags,
            Bundle options) throws SendIntentException {"
24807,startIntentSender,"    void startIntentSender(final CallVoid5<IntentSender, Intent, Integer, Integer, Integer> superCall,
            IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)
            throws SendIntentException {"
24808,startInstrumentation,"    boolean startInstrumentation(final CallFun3<Boolean, ComponentName, String, Bundle> superCall,
            ComponentName className, String profileFile, Bundle arguments) {
        synchronized (mSuperListeners) {"
24809,startForegroundService,"    ComponentName startForegroundService(final CallFun1<ComponentName, Intent> superCall, Intent service) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24810,startActivityIfNeeded,"    boolean startActivityIfNeeded(final CallFun3<Boolean, Intent, Integer, Bundle> superCall, @NonNull Intent intent,
            int requestCode, @Nullable Bundle options) {
        synchronized (mSuperListeners) {"
24811,startActivityIfNeeded,"    boolean startActivityIfNeeded(final CallFun2<Boolean, Intent, Integer> superCall, @NonNull Intent intent,
            int requestCode) {
        synchronized (mSuperListeners) {"
24812,startActivityFromFragment,"    void startActivityFromFragment(final CallVoid4<android.app.Fragment, Intent, Integer, Bundle> superCall,
            @NonNull android.app.Fragment fragment, Intent intent, int requestCode, @Nullable Bundle options) {
        synchronized (mSuperListeners) {"
24813,startActivityFromFragment,"    void startActivityFromFragment(final CallVoid3<android.app.Fragment, Intent, Integer> superCall,
            @NonNull android.app.Fragment fragment, Intent intent, int requestCode) {
        synchronized (mSuperListeners) {"
24814,startActivityFromFragment,"    void startActivityFromFragment(final CallVoid4<Fragment, Intent, Integer, Bundle> superCall, Fragment fragment,
            Intent intent, int requestCode, @Nullable Bundle options) {
        synchronized (mSuperListeners) {"
24815,startActivityFromFragment,"    void startActivityFromFragment(final CallVoid3<Fragment, Intent, Integer> superCall, Fragment fragment,
            Intent intent, int requestCode) {
        synchronized (mSuperListeners) {"
24816,startActivityFromChild,"    void startActivityFromChild(final CallVoid4<Activity, Intent, Integer, Bundle> superCall, @NonNull Activity child,
            Intent intent, int requestCode, @Nullable Bundle options) {
        synchronized (mSuperListeners) {"
24817,startActivityFromChild,"    void startActivityFromChild(final CallVoid3<Activity, Intent, Integer> superCall, @NonNull Activity child,
            Intent intent, int requestCode) {
        synchronized (mSuperListeners) {"
24822,startActivities,"    void startActivities(final CallVoid2<Intent[], Bundle> superCall, Intent[] intents, @Nullable Bundle options) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24823,startActivities,"    void startActivities(final CallVoid1<Intent[]> superCall, Intent[] intents) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24824,startActionMode,"    android.view.ActionMode startActionMode(
            final CallFun2<android.view.ActionMode, android.view.ActionMode.Callback, Integer> superCall,
            android.view.ActionMode.Callback callback, int type) {"
24825,startActionMode,"    android.view.ActionMode startActionMode(
            final CallFun1<android.view.ActionMode, android.view.ActionMode.Callback> superCall,
            android.view.ActionMode.Callback callback) {"
24826,showLockTaskEscapeMessage,"    void showLockTaskEscapeMessage(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24827,showAssist,"    boolean showAssist(final CallFun1<Boolean, Bundle> superCall, Bundle args) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24828,shouldUpRecreateTask,"    boolean shouldUpRecreateTask(final CallFun1<Boolean, Intent> superCall, Intent targetIntent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24830,setWallpaper,"    void setWallpaper(final CallVoid1<Bitmap> superCall, Bitmap bitmap) throws IOException {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24831,setWallpaper,"    void setWallpaper(final CallVoid1<InputStream> superCall, InputStream data) throws IOException {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24832,setVrModeEnabled,"    void setVrModeEnabled(final CallVoid2<Boolean, ComponentName> superCall, boolean enabled,
            @NonNull ComponentName requestedComponent) throws NameNotFoundException {
        synchronized (mSuperListeners) {"
24833,setVisible,"    void setVisible(final CallVoid1<Boolean> superCall, boolean visible) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24834,setTurnScreenOn,"    void setTurnScreenOn(final CallVoid1<Boolean> superCall, boolean turnScreenOn) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24835,setTitleColor,"    void setTitleColor(final CallVoid1<Integer> superCall, int textColor) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24836,setTitle,"    void setTitle(final CallVoid1<Integer> superCall, int titleId) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24837,setTitle,"    void setTitle(final CallVoid1<CharSequence> superCall, CharSequence title) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24838,setTheme,"    void setTheme(final CallVoid1<Integer> superCall, int resid) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24839,setTaskDescription,"    void setTaskDescription(final CallVoid1<TaskDescription> superCall, TaskDescription taskDescription) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24840,setSupportProgressBarVisibility,"    void setSupportProgressBarVisibility(final CallVoid1<Boolean> superCall, boolean visible) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24841,setSupportProgressBarIndeterminateVisibility,"    void setSupportProgressBarIndeterminateVisibility(final CallVoid1<Boolean> superCall, boolean visible) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24842,setSupportProgressBarIndeterminate,"    void setSupportProgressBarIndeterminate(final CallVoid1<Boolean> superCall, boolean indeterminate) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24843,setSupportProgress,"    void setSupportProgress(final CallVoid1<Integer> superCall, int progress) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24844,setSupportActionBar,"    void setSupportActionBar(final CallVoid1<Toolbar> superCall, @Nullable Toolbar toolbar) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24845,setShowWhenLocked,"    void setShowWhenLocked(final CallVoid1<Boolean> superCall, boolean showWhenLocked) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24846,setRequestedOrientation,"    void setRequestedOrientation(final CallVoid1<Integer> superCall, int requestedOrientation) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24847,setPictureInPictureParams,"    void setPictureInPictureParams(final CallVoid1<PictureInPictureParams> superCall,
            @NonNull PictureInPictureParams params) {
        synchronized (mSuperListeners) {"
24848,setIntent,"    void setIntent(final CallVoid1<Intent> superCall, Intent newIntent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24849,setImmersive,"    void setImmersive(final CallVoid1<Boolean> superCall, boolean i) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24850,setFinishOnTouchOutside,"    void setFinishOnTouchOutside(final CallVoid1<Boolean> superCall, boolean finish) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24851,setExitSharedElementCallback,"    void setExitSharedElementCallback(final CallVoid1<android.app.SharedElementCallback> superCall,
            android.app.SharedElementCallback callback) {
        synchronized (mSuperListeners) {"
24852,setExitSharedElementCallback,"    void setExitSharedElementCallback(final CallVoid1<SharedElementCallback> superCall,
            SharedElementCallback listener) {
        synchronized (mSuperListeners) {"
24853,setEnterSharedElementCallback,"    void setEnterSharedElementCallback(final CallVoid1<android.app.SharedElementCallback> superCall,
            android.app.SharedElementCallback callback) {
        synchronized (mSuperListeners) {"
24855,setContentView,"    void setContentView(final CallVoid2<View, LayoutParams> superCall, View view, LayoutParams params) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24856,setContentView,"    void setContentView(final CallVoid1<View> superCall, View view) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24857,setContentView,"    void setContentView(final CallVoid1<Integer> superCall, int layoutResID) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24858,setContentTransitionManager,"    void setContentTransitionManager(final CallVoid1<TransitionManager> superCall, TransitionManager tm) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24859,setActionBar,"    void setActionBar(final CallVoid1<android.widget.Toolbar> superCall, @Nullable android.widget.Toolbar toolbar) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24860,sendStickyOrderedBroadcastAsUser,"    void sendStickyOrderedBroadcastAsUser(
            final CallVoid7<Intent, UserHandle, BroadcastReceiver, Handler, Integer, String, Bundle> superCall,
            Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode,"
24861,sendStickyOrderedBroadcast,"    void sendStickyOrderedBroadcast(
            final CallVoid6<Intent, BroadcastReceiver, Handler, Integer, String, Bundle> superCall, Intent intent,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData,"
24862,sendStickyBroadcastAsUser,"    void sendStickyBroadcastAsUser(final CallVoid2<Intent, UserHandle> superCall, Intent intent, UserHandle user) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24863,sendStickyBroadcast,"    void sendStickyBroadcast(final CallVoid1<Intent> superCall, Intent intent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24864,sendOrderedBroadcastAsUser,"    void sendOrderedBroadcastAsUser(
            final CallVoid8<Intent, UserHandle, String, BroadcastReceiver, Handler, Integer, String, Bundle> superCall,
            Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver,"
24865,sendOrderedBroadcast,"    void sendOrderedBroadcast(
            final CallVoid7<Intent, String, BroadcastReceiver, Handler, Integer, String, Bundle> superCall,
            Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler,"
24866,sendOrderedBroadcast,"    void sendOrderedBroadcast(final CallVoid2<Intent, String> superCall, Intent intent, String receiverPermission) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24867,sendBroadcastAsUser,"    void sendBroadcastAsUser(final CallVoid3<Intent, UserHandle, String> superCall, Intent intent, UserHandle user,
            String receiverPermission) {
        synchronized (mSuperListeners) {"
24868,sendBroadcastAsUser,"    void sendBroadcastAsUser(final CallVoid2<Intent, UserHandle> superCall, Intent intent, UserHandle user) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24869,sendBroadcast,"    void sendBroadcast(final CallVoid2<Intent, String> superCall, Intent intent, String receiverPermission) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24870,sendBroadcast,"    void sendBroadcast(final CallVoid1<Intent> superCall, Intent intent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24871,revokeUriPermission,"    void revokeUriPermission(final CallVoid3<String, Uri, Integer> superCall, String targetPackage, Uri uri,
            int modeFlags) {
        synchronized (mSuperListeners) {"
24872,revokeUriPermission,"    void revokeUriPermission(final CallVoid2<Uri, Integer> superCall, Uri uri, int modeFlags) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24873,requestVisibleBehind,"    boolean requestVisibleBehind(final CallFun1<Boolean, Boolean> superCall, boolean visible) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24874,requestDragAndDropPermissions,"    DragAndDropPermissions requestDragAndDropPermissions(final CallFun1<DragAndDropPermissions, DragEvent> superCall,
            DragEvent event) {
        synchronized (mSuperListeners) {"
24875,reportFullyDrawn,"    void reportFullyDrawn(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24876,removeStickyBroadcastAsUser,"    void removeStickyBroadcastAsUser(final CallVoid2<Intent, UserHandle> superCall, Intent intent, UserHandle user) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24877,removeStickyBroadcast,"    void removeStickyBroadcast(final CallVoid1<Intent> superCall, Intent intent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24878,releaseInstance,"    boolean releaseInstance(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24879,registerReceiver,"    Intent registerReceiver(
            final CallFun5<Intent, BroadcastReceiver, IntentFilter, String, Handler, Integer> superCall,
            BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler,"
24880,registerReceiver,"    Intent registerReceiver(final CallFun4<Intent, BroadcastReceiver, IntentFilter, String, Handler> superCall,
            BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler) {
        synchronized (mSuperListeners) {"
24881,registerReceiver,"    Intent registerReceiver(final CallFun3<Intent, BroadcastReceiver, IntentFilter, Integer> superCall,
            BroadcastReceiver receiver, IntentFilter filter, int flags) {
        synchronized (mSuperListeners) {"
24882,registerReceiver,"    Intent registerReceiver(final CallFun2<Intent, BroadcastReceiver, IntentFilter> superCall,
            BroadcastReceiver receiver, IntentFilter filter) {
        synchronized (mSuperListeners) {"
24884,registerComponentCallbacks,"    void registerComponentCallbacks(final CallVoid1<ComponentCallbacks> superCall, ComponentCallbacks callback) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24885,recreate,"    void recreate(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24886,putExtraData,"    void putExtraData(final CallVoid1<SupportActivity.ExtraData> superCall, SupportActivity.ExtraData extraData) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24888,peekWallpaper,"    Drawable peekWallpaper(final CallFun0<Drawable> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24889,overridePendingTransition,"    void overridePendingTransition(final CallVoid2<Integer, Integer> superCall, int enterAnim, int exitAnim) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24890,openOrCreateDatabase,"    SQLiteDatabase openOrCreateDatabase(
            final CallFun4<SQLiteDatabase, String, Integer, CursorFactory, DatabaseErrorHandler> superCall,
            String name, int mode, CursorFactory factory, DatabaseErrorHandler errorHandler) {"
24891,openOrCreateDatabase,"    SQLiteDatabase openOrCreateDatabase(final CallFun3<SQLiteDatabase, String, Integer, CursorFactory> superCall,
            String name, int mode, CursorFactory factory) {
        synchronized (mSuperListeners) {"
24892,openOptionsMenu,"    void openOptionsMenu(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24893,openFileOutput,"    FileOutputStream openFileOutput(final CallFun2<FileOutputStream, String, Integer> superCall, String name,
            int mode) throws FileNotFoundException {
        synchronized (mSuperListeners) {"
24894,openFileInput,"    FileInputStream openFileInput(final CallFun1<FileInputStream, String> superCall, String name)
            throws FileNotFoundException {
        synchronized (mSuperListeners) {"
24895,openContextMenu,"    void openContextMenu(final CallVoid1<View> superCall, View view) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24896,onWindowStartingSupportActionMode,"    ActionMode onWindowStartingSupportActionMode(final CallFun1<ActionMode, Callback> superCall,
            @NonNull Callback callback) {
        synchronized (mSuperListeners) {"
24897,onWindowStartingActionMode,"    android.view.ActionMode onWindowStartingActionMode(
            final CallFun2<android.view.ActionMode, android.view.ActionMode.Callback, Integer> superCall,
            android.view.ActionMode.Callback callback, int type) {"
24898,onWindowStartingActionMode,"    android.view.ActionMode onWindowStartingActionMode(
            final CallFun1<android.view.ActionMode, android.view.ActionMode.Callback> superCall,
            android.view.ActionMode.Callback callback) {"
24899,onWindowFocusChanged,"    void onWindowFocusChanged(final CallVoid1<Boolean> superCall, boolean hasFocus) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24900,onWindowAttributesChanged,"    void onWindowAttributesChanged(final CallVoid1<WindowManager.LayoutParams> superCall,
            WindowManager.LayoutParams params) {
        synchronized (mSuperListeners) {"
24901,onVisibleBehindCanceled,"    void onVisibleBehindCanceled(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24902,onUserLeaveHint,"    void onUserLeaveHint(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24903,onUserInteraction,"    void onUserInteraction(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24904,onTrimMemory,"    void onTrimMemory(final CallVoid1<Integer> superCall, int level) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24905,onTrackballEvent,"    boolean onTrackballEvent(final CallFun1<Boolean, MotionEvent> superCall, MotionEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24906,onTouchEvent,"    boolean onTouchEvent(final CallFun1<Boolean, MotionEvent> superCall, MotionEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24907,onTitleChanged,"    void onTitleChanged(final CallVoid2<CharSequence, Integer> superCall, CharSequence title, int color) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24908,onSupportNavigateUp,"    boolean onSupportNavigateUp(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24909,onSupportContentChanged,"    void onSupportContentChanged(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24910,onSupportActionModeStarted,"    void onSupportActionModeStarted(final CallVoid1<ActionMode> superCall, @NonNull ActionMode mode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24911,onSupportActionModeFinished,"    void onSupportActionModeFinished(final CallVoid1<ActionMode> superCall, @NonNull ActionMode mode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24913,onStateNotSaved,"    void onStateNotSaved(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24915,onSearchRequested,"    boolean onSearchRequested(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24916,onSearchRequested,"    boolean onSearchRequested(final CallFun1<Boolean, SearchEvent> superCall, @Nullable SearchEvent searchEvent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24917,onSaveInstanceState,"    void onSaveInstanceState(final CallVoid2<Bundle, PersistableBundle> superCall, Bundle outState,
            PersistableBundle outPersistentState) {
        synchronized (mSuperListeners) {"
24918,onSaveInstanceState,"    void onSaveInstanceState(final CallVoid1<Bundle> superCall, Bundle outState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24919,onResumeFragments,"    void onResumeFragments(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24921,onRestoreInstanceState,"    void onRestoreInstanceState(final CallVoid2<Bundle, PersistableBundle> superCall, Bundle savedInstanceState,
            PersistableBundle persistentState) {
        synchronized (mSuperListeners) {"
24922,onRestoreInstanceState,"    void onRestoreInstanceState(final CallVoid1<Bundle> superCall, Bundle savedInstanceState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24923,onRestart,"    void onRestart(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24925,onProvideReferrer,"    Uri onProvideReferrer(final CallFun0<Uri> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24926,onProvideKeyboardShortcuts,"    void onProvideKeyboardShortcuts(final CallVoid3<List<KeyboardShortcutGroup>, Menu, Integer> superCall,
            List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {
        synchronized (mSuperListeners) {"
24927,onProvideAssistData,"    void onProvideAssistData(final CallVoid1<Bundle> superCall, Bundle data) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24928,onProvideAssistContent,"    void onProvideAssistContent(final CallVoid1<AssistContent> superCall, AssistContent outContent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24929,onPrepareSupportNavigateUpTaskStack,"    void onPrepareSupportNavigateUpTaskStack(final CallVoid1<TaskStackBuilder> superCall,
            @NonNull TaskStackBuilder builder) {
        synchronized (mSuperListeners) {"
24930,onPreparePanel,"    boolean onPreparePanel(final CallFun3<Boolean, Integer, View, Menu> superCall, int featureId, View view,
            Menu menu) {
        synchronized (mSuperListeners) {"
24931,onPrepareOptionsPanel,"    boolean onPrepareOptionsPanel(final CallFun2<Boolean, View, Menu> superCall, View view, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24932,onPrepareOptionsMenu,"    boolean onPrepareOptionsMenu(final CallFun1<Boolean, Menu> superCall, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24933,onPrepareNavigateUpTaskStack,"    void onPrepareNavigateUpTaskStack(final CallVoid1<android.app.TaskStackBuilder> superCall,
            android.app.TaskStackBuilder builder) {
        synchronized (mSuperListeners) {"
24934,onPrepareDialog,"    void onPrepareDialog(final CallVoid3<Integer, Dialog, Bundle> superCall, int id, Dialog dialog, Bundle args) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24935,onPrepareDialog,"    void onPrepareDialog(final CallVoid2<Integer, Dialog> superCall, int id, Dialog dialog) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24936,onPostResume,"    void onPostResume(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24937,onPostCreate,"    void onPostCreate(final CallVoid2<Bundle, PersistableBundle> superCall, @Nullable Bundle savedInstanceState,
            @Nullable PersistableBundle persistentState) {
        synchronized (mSuperListeners) {"
24938,onPostCreate,"    void onPostCreate(final CallVoid1<Bundle> superCall, @Nullable Bundle savedInstanceState) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24939,onPictureInPictureModeChanged,"    void onPictureInPictureModeChanged(final CallVoid2<Boolean, Configuration> superCall,
            boolean isInPictureInPictureMode, Configuration newConfig) {
        synchronized (mSuperListeners) {"
24942,onPanelClosed,"    void onPanelClosed(final CallVoid2<Integer, Menu> superCall, int featureId, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24945,onNewIntent,"    void onNewIntent(final CallVoid1<Intent> superCall, Intent intent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24946,onNavigateUpFromChild,"    boolean onNavigateUpFromChild(final CallFun1<Boolean, Activity> superCall, Activity child) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24947,onNavigateUp,"    boolean onNavigateUp(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24948,onMultiWindowModeChanged,"    void onMultiWindowModeChanged(final CallVoid2<Boolean, Configuration> superCall, boolean isInMultiWindowMode,
            Configuration newConfig) {
        synchronized (mSuperListeners) {"
24950,onMenuOpened,"    boolean onMenuOpened(final CallFun2<Boolean, Integer, Menu> superCall, int featureId, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24952,onLocalVoiceInteractionStopped,"    void onLocalVoiceInteractionStopped(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24953,onLocalVoiceInteractionStarted,"    void onLocalVoiceInteractionStarted(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24954,onKeyUp,"    boolean onKeyUp(final CallFun2<Boolean, Integer, KeyEvent> superCall, int keyCode, KeyEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24955,onKeyShortcut,"    boolean onKeyShortcut(final CallFun2<Boolean, Integer, KeyEvent> superCall, int keyCode, KeyEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24956,onKeyMultiple,"    boolean onKeyMultiple(final CallFun3<Boolean, Integer, Integer, KeyEvent> superCall, int keyCode, int repeatCount,
            KeyEvent event) {
        synchronized (mSuperListeners) {"
24957,onKeyLongPress,"    boolean onKeyLongPress(final CallFun2<Boolean, Integer, KeyEvent> superCall, int keyCode, KeyEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24958,onKeyDown,"    boolean onKeyDown(final CallFun2<Boolean, Integer, KeyEvent> superCall, int keyCode, KeyEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24959,onGenericMotionEvent,"    boolean onGenericMotionEvent(final CallFun1<Boolean, MotionEvent> superCall, MotionEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24960,onEnterAnimationComplete,"    void onEnterAnimationComplete(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24961,onDetachedFromWindow,"    void onDetachedFromWindow(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24963,onCreateView,"    View onCreateView(final CallFun3<View, String, Context, AttributeSet> superCall, String name, Context context,
            AttributeSet attrs) {
        synchronized (mSuperListeners) {"
24964,onCreateView,"    View onCreateView(final CallFun4<View, View, String, Context, AttributeSet> superCall, View parent, String name,
            Context context, AttributeSet attrs) {
        synchronized (mSuperListeners) {"
24965,onCreateThumbnail,"    boolean onCreateThumbnail(final CallFun2<Boolean, Bitmap, Canvas> superCall, Bitmap outBitmap, Canvas canvas) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24966,onCreateSupportNavigateUpTaskStack,"    void onCreateSupportNavigateUpTaskStack(final CallVoid1<TaskStackBuilder> superCall,
            @NonNull TaskStackBuilder builder) {
        synchronized (mSuperListeners) {"
24967,onCreatePanelView,"    View onCreatePanelView(final CallFun1<View, Integer> superCall, int featureId) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24968,onCreatePanelMenu,"    boolean onCreatePanelMenu(final CallFun2<Boolean, Integer, Menu> superCall, int featureId, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24969,onCreateOptionsMenu,"    boolean onCreateOptionsMenu(final CallFun1<Boolean, Menu> superCall, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24970,onCreateNavigateUpTaskStack,"    void onCreateNavigateUpTaskStack(final CallVoid1<android.app.TaskStackBuilder> superCall,
            android.app.TaskStackBuilder builder) {
        synchronized (mSuperListeners) {"
24971,onCreateDialog,"    Dialog onCreateDialog(final CallFun2<Dialog, Integer, Bundle> superCall, int id, Bundle args) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24972,onCreateDialog,"    Dialog onCreateDialog(final CallFun1<Dialog, Integer> superCall, int id) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24973,onCreateDescription,"    CharSequence onCreateDescription(final CallFun0<CharSequence> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24975,onCreate,"    void onCreate(final CallVoid2<Bundle, PersistableBundle> superCall, @Nullable Bundle savedInstanceState,
            @Nullable PersistableBundle persistentState) {
        synchronized (mSuperListeners) {"
24977,onContextMenuClosed,"    void onContextMenuClosed(final CallVoid1<Menu> superCall, Menu menu) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24979,onContentChanged,"    void onContentChanged(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24981,onChildTitleChanged,"    void onChildTitleChanged(final CallVoid2<Activity, CharSequence> superCall, Activity childActivity,
            CharSequence title) {
        synchronized (mSuperListeners) {"
24982,onBackPressed,"    void onBackPressed(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24983,onAttachedToWindow,"    void onAttachedToWindow(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24984,onAttachFragment,"    void onAttachFragment(final CallVoid1<android.app.Fragment> superCall, android.app.Fragment fragment) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24985,onAttachFragment,"    void onAttachFragment(final CallVoid1<Fragment> superCall, Fragment fragment) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24986,onApplyThemeResource,"    void onApplyThemeResource(final CallVoid3<Theme, Integer, Boolean> superCall, Theme theme, int resid,
            boolean first) {
        synchronized (mSuperListeners) {"
24987,onActivityResult,"    void onActivityResult(final CallVoid3<Integer, Integer, Intent> superCall, int requestCode, int resultCode,
            @Nullable Intent data) {
        synchronized (mSuperListeners) {"
24988,onActivityReenter,"    void onActivityReenter(final CallVoid2<Integer, Intent> superCall, int resultCode, Intent data) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24989,onActionModeStarted,"    void onActionModeStarted(final CallVoid1<android.view.ActionMode> superCall, android.view.ActionMode mode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24990,onActionModeFinished,"    void onActionModeFinished(final CallVoid1<android.view.ActionMode> superCall, android.view.ActionMode mode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24991,navigateUpToFromChild,"    boolean navigateUpToFromChild(final CallFun2<Boolean, Activity, Intent> superCall, Activity child,
            Intent upIntent) {
        synchronized (mSuperListeners) {"
24992,navigateUpTo,"    boolean navigateUpTo(final CallFun1<Boolean, Intent> superCall, Intent upIntent) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24993,moveTaskToBack,"    boolean moveTaskToBack(final CallFun1<Boolean, Boolean> superCall, boolean nonRoot) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24994,moveSharedPreferencesFrom,"    boolean moveSharedPreferencesFrom(final CallFun2<Boolean, Context, String> superCall, Context sourceContext,
            String name) {
        synchronized (mSuperListeners) {"
24995,moveDatabaseFrom,"    boolean moveDatabaseFrom(final CallFun2<Boolean, Context, String> superCall, Context sourceContext, String name) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24996,isVoiceInteractionRoot,"    boolean isVoiceInteractionRoot(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24997,isVoiceInteraction,"    boolean isVoiceInteraction(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24998,isTaskRoot,"    boolean isTaskRoot(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
24999,isRestricted,"    boolean isRestricted(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25000,isLocalVoiceInteractionSupported,"    boolean isLocalVoiceInteractionSupported(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25001,isInPictureInPictureMode,"    boolean isInPictureInPictureMode(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25002,isInMultiWindowMode,"    boolean isInMultiWindowMode(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25003,isImmersive,"    boolean isImmersive(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25004,isFinishing,"    boolean isFinishing(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25005,isDeviceProtectedStorage,"    boolean isDeviceProtectedStorage(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25006,isDestroyed,"    boolean isDestroyed(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25007,isChangingConfigurations,"    boolean isChangingConfigurations(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25008,isActivityTransitionRunning,"    boolean isActivityTransitionRunning(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25009,invalidateOptionsMenu,"    void invalidateOptionsMenu(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25010,hasWindowFocus,"    boolean hasWindowFocus(final CallFun0<Boolean> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25011,grantUriPermission,"    void grantUriPermission(final CallVoid3<String, Uri, Integer> superCall, String toPackage, Uri uri,
            int modeFlags) {
        synchronized (mSuperListeners) {"
25012,getWindowManager,"    WindowManager getWindowManager(final CallFun0<WindowManager> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25013,getWindow,"    Window getWindow(final CallFun0<Window> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25014,getWallpaperDesiredMinimumWidth,"    int getWallpaperDesiredMinimumWidth(final CallFun0<Integer> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25015,getWallpaperDesiredMinimumHeight,"    int getWallpaperDesiredMinimumHeight(final CallFun0<Integer> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25016,getWallpaper,"    Drawable getWallpaper(final CallFun0<Drawable> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25017,getVoiceInteractor,"    VoiceInteractor getVoiceInteractor(final CallFun0<VoiceInteractor> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25019,getTheme,"    Theme getTheme(final CallFun0<Theme> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25020,getTaskId,"    int getTaskId(final CallFun0<Integer> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25021,getSystemServiceName,"    String getSystemServiceName(final CallFun1<String, Class<?>> superCall, Class<?> serviceClass) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25022,getSystemService,"    Object getSystemService(final CallFun1<Object, String> superCall, @NonNull String name) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25023,getSupportParentActivityIntent,"    Intent getSupportParentActivityIntent(final CallFun0<Intent> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25024,getSupportLoaderManager,"    LoaderManager getSupportLoaderManager(final CallFun0<LoaderManager> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25025,getSupportFragmentManager,"    FragmentManager getSupportFragmentManager(final CallFun0<FragmentManager> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25026,getSupportActionBar,"    ActionBar getSupportActionBar(final CallFun0<ActionBar> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25027,getSharedPreferences,"    SharedPreferences getSharedPreferences(final CallFun2<SharedPreferences, String, Integer> superCall, String name,
            int mode) {
        synchronized (mSuperListeners) {"
25028,getResources,"    Resources getResources(final CallFun0<Resources> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25029,getRequestedOrientation,"    int getRequestedOrientation(final CallFun0<Integer> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25030,getReferrer,"    Uri getReferrer(final CallFun0<Uri> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25031,getPreferences,"    SharedPreferences getPreferences(final CallFun1<SharedPreferences, Integer> superCall, int mode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25032,getParentActivityIntent,"    Intent getParentActivityIntent(final CallFun0<Intent> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25033,getPackageResourcePath,"    String getPackageResourcePath(final CallFun0<String> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25034,getPackageName,"    String getPackageName(final CallFun0<String> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25035,getPackageManager,"    PackageManager getPackageManager(final CallFun0<PackageManager> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25036,getPackageCodePath,"    String getPackageCodePath(final CallFun0<String> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25037,getObbDirs,"    File[] getObbDirs(final CallFun0<File[]> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25038,getObbDir,"    File getObbDir(final CallFun0<File> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25039,getNoBackupFilesDir,"    File getNoBackupFilesDir(final CallFun0<File> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25040,getMenuInflater,"    MenuInflater getMenuInflater(final CallFun0<MenuInflater> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25041,getMaxNumPictureInPictureActions,"    int getMaxNumPictureInPictureActions(final CallFun0<Integer> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25042,getMainLooper,"    Looper getMainLooper(final CallFun0<Looper> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25043,getMainExecutor,"    Executor getMainExecutor(final CallFun0<Executor> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25044,getLocalClassName,"    String getLocalClassName(final CallFun0<String> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25045,getLoaderManager,"    android.app.LoaderManager getLoaderManager(final CallFun0<android.app.LoaderManager> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25046,getLifecycle,"    Lifecycle getLifecycle(final CallFun0<Lifecycle> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25047,getLayoutInflater,"    LayoutInflater getLayoutInflater(final CallFun0<LayoutInflater> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25048,getIntent,"    Intent getIntent(final CallFun0<Intent> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25049,getFragmentManager,"    android.app.FragmentManager getFragmentManager(final CallFun0<android.app.FragmentManager> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25050,getFilesDir,"    File getFilesDir(final CallFun0<File> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25051,getFileStreamPath,"    File getFileStreamPath(final CallFun1<File, String> superCall, String name) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25052,getExtraData,"    <T extends SupportActivity.ExtraData> T getExtraData(final CallFun1<T, Class<T>> superCall,
            Class<T> extraDataClass) {
        synchronized (mSuperListeners) {"
25053,getExternalMediaDirs,"    File[] getExternalMediaDirs(final CallFun0<File[]> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25054,getExternalFilesDirs,"    File[] getExternalFilesDirs(final CallFun1<File[], String> superCall, String type) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25055,getExternalFilesDir,"    File getExternalFilesDir(final CallFun1<File, String> superCall, String type) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25056,getExternalCacheDirs,"    File[] getExternalCacheDirs(final CallFun0<File[]> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25057,getExternalCacheDir,"    File getExternalCacheDir(final CallFun0<File> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25058,getDrawerToggleDelegate,"    Delegate getDrawerToggleDelegate(final CallFun0<Delegate> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25059,getDir,"    File getDir(final CallFun2<File, String, Integer> superCall, String name, int mode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25060,getDelegate,"    AppCompatDelegate getDelegate(final CallFun0<AppCompatDelegate> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25061,getDatabasePath,"    File getDatabasePath(final CallFun1<File, String> superCall, String name) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25062,getDataDir,"    File getDataDir(final CallFun0<File> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25063,getCurrentFocus,"    View getCurrentFocus(final CallFun0<View> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25064,getContentTransitionManager,"    TransitionManager getContentTransitionManager(final CallFun0<TransitionManager> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25065,getContentScene,"    Scene getContentScene(final CallFun0<Scene> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25066,getContentResolver,"    ContentResolver getContentResolver(final CallFun0<ContentResolver> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25067,getComponentName,"    ComponentName getComponentName(final CallFun0<ComponentName> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25068,getCodeCacheDir,"    File getCodeCacheDir(final CallFun0<File> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25069,getClassLoader,"    ClassLoader getClassLoader(final CallFun0<ClassLoader> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25070,getChangingConfigurations,"    int getChangingConfigurations(final CallFun0<Integer> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25071,getCallingPackage,"    String getCallingPackage(final CallFun0<String> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25072,getCallingActivity,"    ComponentName getCallingActivity(final CallFun0<ComponentName> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25073,getCacheDir,"    File getCacheDir(final CallFun0<File> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25074,getBaseContext,"    Context getBaseContext(final CallFun0<Context> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25075,getAssets,"    AssetManager getAssets(final CallFun0<AssetManager> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25076,getApplicationInfo,"    ApplicationInfo getApplicationInfo(final CallFun0<ApplicationInfo> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25077,getApplicationContext,"    Context getApplicationContext(final CallFun0<Context> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25078,getActionBar,"    android.app.ActionBar getActionBar(final CallFun0<android.app.ActionBar> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25079,finishFromChild,"    void finishFromChild(final CallVoid1<Activity> superCall, Activity child) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25080,finishAndRemoveTask,"    void finishAndRemoveTask(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25081,finishAfterTransition,"    void finishAfterTransition(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25082,finishAffinity,"    void finishAffinity(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25083,finishActivityFromChild,"    void finishActivityFromChild(final CallVoid2<Activity, Integer> superCall, @NonNull Activity child,
            int requestCode) {
        synchronized (mSuperListeners) {"
25084,finishActivity,"    void finishActivity(final CallVoid1<Integer> superCall, int requestCode) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25085,finish,"    void finish(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25086,findViewById,"    <T extends View> T findViewById(final CallFun1<T, Integer> superCall, int id) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25087,fileList,"    String[] fileList(final CallFun0<String[]> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25088,enterPictureInPictureMode,"    boolean enterPictureInPictureMode(final CallFun1<Boolean, PictureInPictureParams> superCall,
            @NonNull PictureInPictureParams params) {
        synchronized (mSuperListeners) {"
25089,enterPictureInPictureMode,"    void enterPictureInPictureMode(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25090,enforceUriPermission,"    void enforceUriPermission(final CallVoid7<Uri, String, String, Integer, Integer, Integer, String> superCall,
            Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message) {
        synchronized (mSuperListeners) {"
25091,enforceUriPermission,"    void enforceUriPermission(final CallVoid5<Uri, Integer, Integer, Integer, String> superCall, Uri uri, int pid,
            int uid, int modeFlags, String message) {
        synchronized (mSuperListeners) {"
25092,enforcePermission,"    void enforcePermission(final CallVoid4<String, Integer, Integer, String> superCall, String permission, int pid,
            int uid, String message) {
        synchronized (mSuperListeners) {"
25093,enforceCallingUriPermission,"    void enforceCallingUriPermission(final CallVoid3<Uri, Integer, String> superCall, Uri uri, int modeFlags,
            String message) {
        synchronized (mSuperListeners) {"
25094,enforceCallingPermission,"    void enforceCallingPermission(final CallVoid2<String, String> superCall, String permission, String message) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25095,enforceCallingOrSelfUriPermission,"    void enforceCallingOrSelfUriPermission(final CallVoid3<Uri, Integer, String> superCall, Uri uri, int modeFlags,
            String message) {
        synchronized (mSuperListeners) {"
25096,enforceCallingOrSelfPermission,"    void enforceCallingOrSelfPermission(final CallVoid2<String, String> superCall, String permission,
            String message) {
        synchronized (mSuperListeners) {"
25098,dispatchTrackballEvent,"    boolean dispatchTrackballEvent(final CallFun1<Boolean, MotionEvent> superCall, MotionEvent ev) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25099,dispatchTouchEvent,"    boolean dispatchTouchEvent(final CallFun1<Boolean, MotionEvent> superCall, MotionEvent ev) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25100,dispatchPopulateAccessibilityEvent,"    boolean dispatchPopulateAccessibilityEvent(final CallFun1<Boolean, AccessibilityEvent> superCall,
            AccessibilityEvent event) {
        synchronized (mSuperListeners) {"
25101,dispatchKeyShortcutEvent,"    boolean dispatchKeyShortcutEvent(final CallFun1<Boolean, KeyEvent> superCall, KeyEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25102,dispatchKeyEvent,"    boolean dispatchKeyEvent(final CallFun1<Boolean, KeyEvent> superCall, KeyEvent event) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25103,dispatchGenericMotionEvent,"    boolean dispatchGenericMotionEvent(final CallFun1<Boolean, MotionEvent> superCall, MotionEvent ev) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25104,deleteSharedPreferences,"    boolean deleteSharedPreferences(final CallFun1<Boolean, String> superCall, String name) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25105,deleteFile,"    boolean deleteFile(final CallFun1<Boolean, String> superCall, String name) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25106,deleteDatabase,"    boolean deleteDatabase(final CallFun1<Boolean, String> superCall, String name) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25107,databaseList,"    String[] databaseList(final CallFun0<String[]> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25108,createPendingResult,"    PendingIntent createPendingResult(final CallFun3<PendingIntent, Integer, Intent, Integer> superCall,
            int requestCode, @NonNull Intent data, int flags) {
        synchronized (mSuperListeners) {"
25109,createPackageContext,"    Context createPackageContext(final CallFun2<Context, String, Integer> superCall, String packageName, int flags)
            throws NameNotFoundException {
        synchronized (mSuperListeners) {"
25110,createDisplayContext,"    Context createDisplayContext(final CallFun1<Context, Display> superCall, Display display) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25111,createDeviceProtectedStorageContext,"    Context createDeviceProtectedStorageContext(final CallFun0<Context> superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25112,createContextForSplit,"    Context createContextForSplit(final CallFun1<Context, String> superCall, String splitName)
            throws NameNotFoundException {
        synchronized (mSuperListeners) {"
25113,createConfigurationContext,"    Context createConfigurationContext(final CallFun1<Context, Configuration> superCall,
            Configuration overrideConfiguration) {
        synchronized (mSuperListeners) {"
25114,closeOptionsMenu,"    void closeOptionsMenu(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25115,closeContextMenu,"    void closeContextMenu(final CallVoid0 superCall) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25116,clearWallpaper,"    void clearWallpaper(final CallVoid0 superCall) throws IOException {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25117,checkUriPermission,"    int checkUriPermission(final CallFun6<Integer, Uri, String, String, Integer, Integer, Integer> superCall, Uri uri,
            String readPermission, String writePermission, int pid, int uid, int modeFlags) {
        synchronized (mSuperListeners) {"
25118,checkUriPermission,"    int checkUriPermission(final CallFun4<Integer, Uri, Integer, Integer, Integer> superCall, Uri uri, int pid,
            int uid, int modeFlags) {
        synchronized (mSuperListeners) {"
25119,checkSelfPermission,"    int checkSelfPermission(final CallFun1<Integer, String> superCall, String permission) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25120,checkPermission,"    int checkPermission(final CallFun3<Integer, String, Integer, Integer> superCall, String permission, int pid,
            int uid) {
        synchronized (mSuperListeners) {"
25121,checkCallingUriPermission,"    int checkCallingUriPermission(final CallFun2<Integer, Uri, Integer> superCall, Uri uri, int modeFlags) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25122,checkCallingPermission,"    int checkCallingPermission(final CallFun1<Integer, String> superCall, String permission) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25123,checkCallingOrSelfUriPermission,"    int checkCallingOrSelfUriPermission(final CallFun2<Integer, Uri, Integer> superCall, Uri uri, int modeFlags) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25124,checkCallingOrSelfPermission,"    int checkCallingOrSelfPermission(final CallFun1<Integer, String> superCall, String permission) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25125,bindService,"    boolean bindService(final CallFun3<Boolean, Intent, ServiceConnection, Integer> superCall, Intent service,
            ServiceConnection conn, int flags) {
        synchronized (mSuperListeners) {"
25126,attachBaseContext,"    void attachBaseContext(final CallVoid1<Context> superCall, Context newBase) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25127,applyOverrideConfiguration,"    void applyOverrideConfiguration(final CallVoid1<Configuration> superCall, Configuration overrideConfiguration) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25128,addContentView,"    void addContentView(final CallVoid2<View, LayoutParams> superCall, View view, LayoutParams params) {
        synchronized (mSuperListeners) {
            mSuperListeners.push(superCall);"
25129,unregisterReceiver,"    public void unregisterReceiver(BroadcastReceiver receiver) {
        verifyMethodCalledFromDelegate(""unregisterReceiver(BroadcastReceiver)"");
        ((CallVoid1<BroadcastReceiver>) mSuperListeners.pop()).call(receiver);
    }"
25131,unregisterComponentCallbacks,"    public void unregisterComponentCallbacks(ComponentCallbacks callback) {
        verifyMethodCalledFromDelegate(""unregisterComponentCallbacks(ComponentCallbacks)"");
        ((CallVoid1<ComponentCallbacks>) mSuperListeners.pop()).call(callback);
    }"
25132,unbindService,"    public void unbindService(ServiceConnection conn) {
        verifyMethodCalledFromDelegate(""unbindService(ServiceConnection)"");
        ((CallVoid1<ServiceConnection>) mSuperListeners.pop()).call(conn);
    }"
25133,triggerSearch,"    public void triggerSearch(String query, @Nullable Bundle appSearchData) {
        verifyMethodCalledFromDelegate(""triggerSearch(String, Bundle)"");
        ((CallVoid2<String, Bundle>) mSuperListeners.pop()).call(query, appSearchData);
    }"
25134,takeKeyEvents,"    public void takeKeyEvents(boolean get) {
        verifyMethodCalledFromDelegate(""takeKeyEvents(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(get);
    }"
25135,supportStartPostponedEnterTransition,"    public void supportStartPostponedEnterTransition() {
        verifyMethodCalledFromDelegate(""supportStartPostponedEnterTransition()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25136,supportShouldUpRecreateTask,"    public boolean supportShouldUpRecreateTask(@NonNull Intent targetIntent) {
        verifyMethodCalledFromDelegate(""supportShouldUpRecreateTask(Intent)"");
        return ((CallFun1<Boolean, Intent>) mSuperListeners.pop()).call(targetIntent);
    }"
25137,supportRequestWindowFeature,"    public boolean supportRequestWindowFeature(int featureId) {
        verifyMethodCalledFromDelegate(""supportRequestWindowFeature(Integer)"");
        return ((CallFun1<Boolean, Integer>) mSuperListeners.pop()).call(featureId);
    }"
25138,supportPostponeEnterTransition,"    public void supportPostponeEnterTransition() {
        verifyMethodCalledFromDelegate(""supportPostponeEnterTransition()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25139,supportNavigateUpTo,"    public void supportNavigateUpTo(@NonNull Intent upIntent) {
        verifyMethodCalledFromDelegate(""supportNavigateUpTo(Intent)"");
        ((CallVoid1<Intent>) mSuperListeners.pop()).call(upIntent);
    }"
25140,supportInvalidateOptionsMenu,"    public void supportInvalidateOptionsMenu() {
        verifyMethodCalledFromDelegate(""supportInvalidateOptionsMenu()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25141,supportFinishAfterTransition,"    public void supportFinishAfterTransition() {
        verifyMethodCalledFromDelegate(""supportFinishAfterTransition()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25142,superDispatchKeyEvent,"    public boolean superDispatchKeyEvent(KeyEvent event) {
        verifyMethodCalledFromDelegate(""superDispatchKeyEvent(KeyEvent)"");
        return ((CallFun1<Boolean, KeyEvent>) mSuperListeners.pop()).call(event);
    }"
25143,stopService,"    public boolean stopService(Intent name) {
        verifyMethodCalledFromDelegate(""stopService(Intent)"");
        return ((CallFun1<Boolean, Intent>) mSuperListeners.pop()).call(name);
    }"
25144,stopManagingCursor,"    public void stopManagingCursor(Cursor c) {
        verifyMethodCalledFromDelegate(""stopManagingCursor(Cursor)"");
        ((CallVoid1<Cursor>) mSuperListeners.pop()).call(c);
    }"
25145,stopLockTask,"    public void stopLockTask() {
        verifyMethodCalledFromDelegate(""stopLockTask()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25146,stopLocalVoiceInteraction,"    public void stopLocalVoiceInteraction() {
        verifyMethodCalledFromDelegate(""stopLocalVoiceInteraction()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25147,startSupportActionMode,"    public ActionMode startSupportActionMode(@NonNull Callback callback) {
        verifyMethodCalledFromDelegate(""startSupportActionMode(Callback)"");
        return ((CallFun1<ActionMode, Callback>) mSuperListeners.pop()).call(callback);
    }"
25148,startService,"    public ComponentName startService(Intent service) {
        verifyMethodCalledFromDelegate(""startService(Intent)"");
        return ((CallFun1<ComponentName, Intent>) mSuperListeners.pop()).call(service);
    }"
25149,startSearch,"    public void startSearch(@Nullable String initialQuery, boolean selectInitialQuery, @Nullable Bundle appSearchData,
            boolean globalSearch) {
        verifyMethodCalledFromDelegate(""startSearch(String, Boolean, Bundle, Boolean)"");
        ((CallVoid4<String, Boolean, Bundle, Boolean>) mSuperListeners.pop())"
25151,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent, @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startNextMatchingActivity(Intent, Bundle)"");
        return ((CallFun2<Boolean, Intent, Bundle>) mSuperListeners.pop()).call(intent, options);
    }"
25152,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent) {
        verifyMethodCalledFromDelegate(""startNextMatchingActivity(Intent)"");
        return ((CallFun1<Boolean, Intent>) mSuperListeners.pop()).call(intent);
    }"
25153,startManagingCursor,"    public void startManagingCursor(Cursor c) {
        verifyMethodCalledFromDelegate(""startManagingCursor(Cursor)"");
        ((CallVoid1<Cursor>) mSuperListeners.pop()).call(c);
    }"
25154,startLockTask,"    public void startLockTask() {
        verifyMethodCalledFromDelegate(""startLockTask()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25155,startLocalVoiceInteraction,"    public void startLocalVoiceInteraction(Bundle privateOptions) {
        verifyMethodCalledFromDelegate(""startLocalVoiceInteraction(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(privateOptions);
    }"
25156,startIntentSenderFromFragment,"    public void startIntentSenderFromFragment(Fragment fragment, IntentSender intent, int requestCode,
            @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)
            throws SendIntentException {
        verifyMethodCalledFromDelegate("
25157,startIntentSenderFromChild,"    public void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags, @Nullable Bundle options) throws SendIntentException {
        verifyMethodCalledFromDelegate(
                ""startIntentSenderFromChild(Activity, IntentSender, Integer, Intent, Integer, Integer, Integer, Bundle)"");"
25158,startIntentSenderFromChild,"    public void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        verifyMethodCalledFromDelegate(
                ""startIntentSenderFromChild(Activity, IntentSender, Integer, Intent, Integer, Integer, Integer)"");"
25160,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        verifyMethodCalledFromDelegate(
                ""startIntentSenderForResult(IntentSender, Integer, Intent, Integer, Integer, Integer)"");"
25161,startIntentSender,"    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags, Bundle options) throws SendIntentException {
        verifyMethodCalledFromDelegate(""startIntentSender(IntentSender, Intent, Integer, Integer, Integer, Bundle)"");
        ((CallVoid6<IntentSender, Intent, Integer, Integer, Integer, Bundle>) mSuperListeners.pop())"
25162,startIntentSender,"    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags) throws SendIntentException {
        verifyMethodCalledFromDelegate(""startIntentSender(IntentSender, Intent, Integer, Integer, Integer)"");
        ((CallVoid5<IntentSender, Intent, Integer, Integer, Integer>) mSuperListeners.pop())"
25163,startInstrumentation,"    public boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments) {
        verifyMethodCalledFromDelegate(""startInstrumentation(ComponentName, String, Bundle)"");
        return ((CallFun3<Boolean, ComponentName, String, Bundle>) mSuperListeners.pop())
                .call(className, profileFile, arguments);"
25164,startForegroundService,"    public ComponentName startForegroundService(Intent service) {
        verifyMethodCalledFromDelegate(""startForegroundService(Intent)"");
        return ((CallFun1<ComponentName, Intent>) mSuperListeners.pop()).call(service);
    }"
25165,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode, @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startActivityIfNeeded(Intent, Integer, Bundle)"");
        return ((CallFun3<Boolean, Intent, Integer, Bundle>) mSuperListeners.pop())
                .call(intent, requestCode, options);"
25166,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode) {
        verifyMethodCalledFromDelegate(""startActivityIfNeeded(Intent, Integer)"");
        return ((CallFun2<Boolean, Intent, Integer>) mSuperListeners.pop()).call(intent, requestCode);
    }"
25167,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startActivityFromFragment(android.app.Fragment, Intent, Integer, Bundle)"");
        ((CallVoid4<android.app.Fragment, Intent, Integer, Bundle>) mSuperListeners.pop())"
25168,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode) {
        verifyMethodCalledFromDelegate(""startActivityFromFragment(android.app.Fragment, Intent, Integer)"");
        ((CallVoid3<android.app.Fragment, Intent, Integer>) mSuperListeners.pop())
                .call(fragment, intent, requestCode);"
25169,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startActivityFromFragment(Fragment, Intent, Integer, Bundle)"");
        ((CallVoid4<Fragment, Intent, Integer, Bundle>) mSuperListeners.pop())"
25170,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode) {
        verifyMethodCalledFromDelegate(""startActivityFromFragment(Fragment, Intent, Integer)"");
        ((CallVoid3<Fragment, Intent, Integer>) mSuperListeners.pop()).call(fragment, intent, requestCode);
    }"
25171,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode,
            @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startActivityFromChild(Activity, Intent, Integer, Bundle)"");
        ((CallVoid4<Activity, Intent, Integer, Bundle>) mSuperListeners.pop())"
25172,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode) {
        verifyMethodCalledFromDelegate(""startActivityFromChild(Activity, Intent, Integer)"");
        ((CallVoid3<Activity, Intent, Integer>) mSuperListeners.pop()).call(child, intent, requestCode);
    }"
25177,startActivities,"    public void startActivities(Intent[] intents, @Nullable Bundle options) {
        verifyMethodCalledFromDelegate(""startActivities(Intent[], Bundle)"");
        ((CallVoid2<Intent[], Bundle>) mSuperListeners.pop()).call(intents, options);
    }"
25178,startActivities,"    public void startActivities(Intent[] intents) {
        verifyMethodCalledFromDelegate(""startActivities(Intent[])"");
        ((CallVoid1<Intent[]>) mSuperListeners.pop()).call(intents);
    }"
25179,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback, int type) {
        verifyMethodCalledFromDelegate(""startActionMode(android.view.ActionMode.Callback, Integer)"");
        return ((CallFun2<android.view.ActionMode, android.view.ActionMode.Callback, Integer>) mSuperListeners.pop())
                .call(callback, type);"
25180,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback) {
        verifyMethodCalledFromDelegate(""startActionMode(android.view.ActionMode.Callback)"");
        return ((CallFun1<android.view.ActionMode, android.view.ActionMode.Callback>) mSuperListeners.pop())
                .call(callback);"
25181,showLockTaskEscapeMessage,"    public void showLockTaskEscapeMessage() {
        verifyMethodCalledFromDelegate(""showLockTaskEscapeMessage()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25182,showAssist,"    public boolean showAssist(Bundle args) {
        verifyMethodCalledFromDelegate(""showAssist(Bundle)"");
        return ((CallFun1<Boolean, Bundle>) mSuperListeners.pop()).call(args);
    }"
25183,shouldUpRecreateTask,"    public boolean shouldUpRecreateTask(Intent targetIntent) {
        verifyMethodCalledFromDelegate(""shouldUpRecreateTask(Intent)"");
        return ((CallFun1<Boolean, Intent>) mSuperListeners.pop()).call(targetIntent);
    }"
25185,setWallpaper,"    public void setWallpaper(InputStream data) throws IOException {
        verifyMethodCalledFromDelegate(""setWallpaper(InputStream)"");
        ((CallVoid1<InputStream>) mSuperListeners.pop()).call(data);
    }"
25186,setVrModeEnabled,"    public void setVrModeEnabled(boolean enabled, @NonNull ComponentName requestedComponent)
            throws NameNotFoundException {
        verifyMethodCalledFromDelegate(""setVrModeEnabled(Boolean, ComponentName)"");
        ((CallVoid2<Boolean, ComponentName>) mSuperListeners.pop()).call(enabled, requestedComponent);"
25187,setVisible,"    public void setVisible(boolean visible) {
        verifyMethodCalledFromDelegate(""setVisible(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(visible);
    }"
25188,setTurnScreenOn,"    public void setTurnScreenOn(boolean turnScreenOn) {
        verifyMethodCalledFromDelegate(""setTurnScreenOn(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(turnScreenOn);
    }"
25189,setTitleColor,"    public void setTitleColor(int textColor) {
        verifyMethodCalledFromDelegate(""setTitleColor(Integer)"");
        ((CallVoid1<Integer>) mSuperListeners.pop()).call(textColor);
    }"
25190,setTitle,"    public void setTitle(int titleId) {
        verifyMethodCalledFromDelegate(""setTitle(Integer)"");
        ((CallVoid1<Integer>) mSuperListeners.pop()).call(titleId);
    }"
25191,setTitle,"    public void setTitle(CharSequence title) {
        verifyMethodCalledFromDelegate(""setTitle(CharSequence)"");
        ((CallVoid1<CharSequence>) mSuperListeners.pop()).call(title);
    }"
25192,setTaskDescription,"    public void setTaskDescription(TaskDescription taskDescription) {
        verifyMethodCalledFromDelegate(""setTaskDescription(TaskDescription)"");
        ((CallVoid1<TaskDescription>) mSuperListeners.pop()).call(taskDescription);
    }"
25193,setSupportProgressBarVisibility,"    public void setSupportProgressBarVisibility(boolean visible) {
        verifyMethodCalledFromDelegate(""setSupportProgressBarVisibility(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(visible);
    }"
25194,setSupportProgressBarIndeterminateVisibility,"    public void setSupportProgressBarIndeterminateVisibility(boolean visible) {
        verifyMethodCalledFromDelegate(""setSupportProgressBarIndeterminateVisibility(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(visible);
    }"
25195,setSupportProgressBarIndeterminate,"    public void setSupportProgressBarIndeterminate(boolean indeterminate) {
        verifyMethodCalledFromDelegate(""setSupportProgressBarIndeterminate(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(indeterminate);
    }"
25196,setSupportProgress,"    public void setSupportProgress(int progress) {
        verifyMethodCalledFromDelegate(""setSupportProgress(Integer)"");
        ((CallVoid1<Integer>) mSuperListeners.pop()).call(progress);
    }"
25197,setShowWhenLocked,"    public void setShowWhenLocked(boolean showWhenLocked) {
        verifyMethodCalledFromDelegate(""setShowWhenLocked(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(showWhenLocked);
    }"
25198,setPictureInPictureParams,"    public void setPictureInPictureParams(@NonNull PictureInPictureParams params) {
        verifyMethodCalledFromDelegate(""setPictureInPictureParams(PictureInPictureParams)"");
        ((CallVoid1<PictureInPictureParams>) mSuperListeners.pop()).call(params);
    }"
25199,setFinishOnTouchOutside,"    public void setFinishOnTouchOutside(boolean finish) {
        verifyMethodCalledFromDelegate(""setFinishOnTouchOutside(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(finish);
    }"
25200,setExitSharedElementCallback,"    public void setExitSharedElementCallback(android.app.SharedElementCallback callback) {
        verifyMethodCalledFromDelegate(""setExitSharedElementCallback(android.app.SharedElementCallback)"");
        ((CallVoid1<android.app.SharedElementCallback>) mSuperListeners.pop()).call(callback);
    }"
25201,setExitSharedElementCallback,"    public void setExitSharedElementCallback(SharedElementCallback listener) {
        verifyMethodCalledFromDelegate(""setExitSharedElementCallback(SharedElementCallback)"");
        ((CallVoid1<SharedElementCallback>) mSuperListeners.pop()).call(listener);
    }"
25202,setEnterSharedElementCallback,"    public void setEnterSharedElementCallback(android.app.SharedElementCallback callback) {
        verifyMethodCalledFromDelegate(""setEnterSharedElementCallback(android.app.SharedElementCallback)"");
        ((CallVoid1<android.app.SharedElementCallback>) mSuperListeners.pop()).call(callback);
    }"
25204,setContentView,"    public void setContentView(View view, LayoutParams params) {
        verifyMethodCalledFromDelegate(""setContentView(View, LayoutParams)"");
        ((CallVoid2<View, LayoutParams>) mSuperListeners.pop()).call(view, params);
    }"
25205,setContentView,"    public void setContentView(View view) {
        verifyMethodCalledFromDelegate(""setContentView(View)"");
        ((CallVoid1<View>) mSuperListeners.pop()).call(view);
    }"
25206,setContentView,"    public void setContentView(int layoutResID) {
        verifyMethodCalledFromDelegate(""setContentView(Integer)"");
        ((CallVoid1<Integer>) mSuperListeners.pop()).call(layoutResID);
    }"
25207,sendStickyOrderedBroadcastAsUser,"    public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        verifyMethodCalledFromDelegate(
                ""sendStickyOrderedBroadcastAsUser(Intent, UserHandle, BroadcastReceiver, Handler, Integer, String, Bundle)"");"
25208,sendStickyOrderedBroadcast,"    public void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler,
            int initialCode, String initialData, Bundle initialExtras) {
        verifyMethodCalledFromDelegate(
                ""sendStickyOrderedBroadcast(Intent, BroadcastReceiver, Handler, Integer, String, Bundle)"");"
25209,sendStickyBroadcastAsUser,"    public void sendStickyBroadcastAsUser(Intent intent, UserHandle user) {
        verifyMethodCalledFromDelegate(""sendStickyBroadcastAsUser(Intent, UserHandle)"");
        ((CallVoid2<Intent, UserHandle>) mSuperListeners.pop()).call(intent, user);
    }"
25210,sendStickyBroadcast,"    public void sendStickyBroadcast(Intent intent) {
        verifyMethodCalledFromDelegate(""sendStickyBroadcast(Intent)"");
        ((CallVoid1<Intent>) mSuperListeners.pop()).call(intent);
    }"
25211,sendOrderedBroadcastAsUser,"    public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData,
            Bundle initialExtras) {
        verifyMethodCalledFromDelegate("
25212,sendOrderedBroadcast,"    public void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        verifyMethodCalledFromDelegate(
                ""sendOrderedBroadcast(Intent, String, BroadcastReceiver, Handler, Integer, String, Bundle)"");"
25213,sendOrderedBroadcast,"    public void sendOrderedBroadcast(Intent intent, String receiverPermission) {
        verifyMethodCalledFromDelegate(""sendOrderedBroadcast(Intent, String)"");
        ((CallVoid2<Intent, String>) mSuperListeners.pop()).call(intent, receiverPermission);
    }"
25214,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) {
        verifyMethodCalledFromDelegate(""sendBroadcastAsUser(Intent, UserHandle, String)"");
        ((CallVoid3<Intent, UserHandle, String>) mSuperListeners.pop()).call(intent, user, receiverPermission);
    }"
25215,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user) {
        verifyMethodCalledFromDelegate(""sendBroadcastAsUser(Intent, UserHandle)"");
        ((CallVoid2<Intent, UserHandle>) mSuperListeners.pop()).call(intent, user);
    }"
25216,sendBroadcast,"    public void sendBroadcast(Intent intent, String receiverPermission) {
        verifyMethodCalledFromDelegate(""sendBroadcast(Intent, String)"");
        ((CallVoid2<Intent, String>) mSuperListeners.pop()).call(intent, receiverPermission);
    }"
25217,sendBroadcast,"    public void sendBroadcast(Intent intent) {
        verifyMethodCalledFromDelegate(""sendBroadcast(Intent)"");
        ((CallVoid1<Intent>) mSuperListeners.pop()).call(intent);
    }"
25218,revokeUriPermission,"    public void revokeUriPermission(String targetPackage, Uri uri, int modeFlags) {
        verifyMethodCalledFromDelegate(""revokeUriPermission(String, Uri, Integer)"");
        ((CallVoid3<String, Uri, Integer>) mSuperListeners.pop()).call(targetPackage, uri, modeFlags);
    }"
25219,revokeUriPermission,"    public void revokeUriPermission(Uri uri, int modeFlags) {
        verifyMethodCalledFromDelegate(""revokeUriPermission(Uri, Integer)"");
        ((CallVoid2<Uri, Integer>) mSuperListeners.pop()).call(uri, modeFlags);
    }"
25220,requestVisibleBehind,"    public boolean requestVisibleBehind(boolean visible) {
        verifyMethodCalledFromDelegate(""requestVisibleBehind(Boolean)"");
        return ((CallFun1<Boolean, Boolean>) mSuperListeners.pop()).call(visible);
    }"
25221,requestDragAndDropPermissions,"    public DragAndDropPermissions requestDragAndDropPermissions(DragEvent event) {
        verifyMethodCalledFromDelegate(""requestDragAndDropPermissions(DragEvent)"");
        return ((CallFun1<DragAndDropPermissions, DragEvent>) mSuperListeners.pop()).call(event);
    }"
25222,reportFullyDrawn,"    public void reportFullyDrawn() {
        verifyMethodCalledFromDelegate(""reportFullyDrawn()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25223,removeStickyBroadcastAsUser,"    public void removeStickyBroadcastAsUser(Intent intent, UserHandle user) {
        verifyMethodCalledFromDelegate(""removeStickyBroadcastAsUser(Intent, UserHandle)"");
        ((CallVoid2<Intent, UserHandle>) mSuperListeners.pop()).call(intent, user);
    }"
25224,removeStickyBroadcast,"    public void removeStickyBroadcast(Intent intent) {
        verifyMethodCalledFromDelegate(""removeStickyBroadcast(Intent)"");
        ((CallVoid1<Intent>) mSuperListeners.pop()).call(intent);
    }"
25225,releaseInstance,"    public boolean releaseInstance() {
        verifyMethodCalledFromDelegate(""releaseInstance()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25226,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler, int flags) {
        verifyMethodCalledFromDelegate(""registerReceiver(BroadcastReceiver, IntentFilter, String, Handler, Integer)"");
        return ((CallFun5<Intent, BroadcastReceiver, IntentFilter, String, Handler, Integer>) mSuperListeners.pop())"
25227,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler) {
        verifyMethodCalledFromDelegate(""registerReceiver(BroadcastReceiver, IntentFilter, String, Handler)"");
        return ((CallFun4<Intent, BroadcastReceiver, IntentFilter, String, Handler>) mSuperListeners.pop())"
25228,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags) {
        verifyMethodCalledFromDelegate(""registerReceiver(BroadcastReceiver, IntentFilter, Integer)"");
        return ((CallFun3<Intent, BroadcastReceiver, IntentFilter, Integer>) mSuperListeners.pop())
                .call(receiver, filter, flags);"
25229,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {
        verifyMethodCalledFromDelegate(""registerReceiver(BroadcastReceiver, IntentFilter)"");
        return ((CallFun2<Intent, BroadcastReceiver, IntentFilter>) mSuperListeners.pop()).call(receiver, filter);
    }"
25231,registerComponentCallbacks,"    public void registerComponentCallbacks(ComponentCallbacks callback) {
        verifyMethodCalledFromDelegate(""registerComponentCallbacks(ComponentCallbacks)"");
        ((CallVoid1<ComponentCallbacks>) mSuperListeners.pop()).call(callback);
    }"
25232,recreate,"    public void recreate() {
        verifyMethodCalledFromDelegate(""recreate()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25233,putExtraData,"    public void putExtraData(ExtraData extraData) {
        verifyMethodCalledFromDelegate(""putExtraData(SupportActivity.ExtraData)"");
        ((CallVoid1<SupportActivity.ExtraData>) mSuperListeners.pop()).call(extraData);
    }"
25235,peekWallpaper,"    public Drawable peekWallpaper() {
        verifyMethodCalledFromDelegate(""peekWallpaper()"");
        return ((CallFun0<Drawable>) mSuperListeners.pop()).call();
    }"
25236,overridePendingTransition,"    public void overridePendingTransition(int enterAnim, int exitAnim) {
        verifyMethodCalledFromDelegate(""overridePendingTransition(Integer, Integer)"");
        ((CallVoid2<Integer, Integer>) mSuperListeners.pop()).call(enterAnim, exitAnim);
    }"
25237,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory,
            DatabaseErrorHandler errorHandler) {
        verifyMethodCalledFromDelegate(""openOrCreateDatabase(String, Integer, CursorFactory, DatabaseErrorHandler)"");
        return ((CallFun4<SQLiteDatabase, String, Integer, CursorFactory, DatabaseErrorHandler>) mSuperListeners"
25238,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory) {
        verifyMethodCalledFromDelegate(""openOrCreateDatabase(String, Integer, CursorFactory)"");
        return ((CallFun3<SQLiteDatabase, String, Integer, CursorFactory>) mSuperListeners.pop())
                .call(name, mode, factory);"
25239,openOptionsMenu,"    public void openOptionsMenu() {
        verifyMethodCalledFromDelegate(""openOptionsMenu()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25240,openFileOutput,"    public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException {
        verifyMethodCalledFromDelegate(""openFileOutput(String, Integer)"");
        return ((CallFun2<FileOutputStream, String, Integer>) mSuperListeners.pop()).call(name, mode);
    }"
25241,openFileInput,"    public FileInputStream openFileInput(String name) throws FileNotFoundException {
        verifyMethodCalledFromDelegate(""openFileInput(String)"");
        return ((CallFun1<FileInputStream, String>) mSuperListeners.pop()).call(name);
    }"
25242,openContextMenu,"    public void openContextMenu(View view) {
        verifyMethodCalledFromDelegate(""openContextMenu(View)"");
        ((CallVoid1<View>) mSuperListeners.pop()).call(view);
    }"
25243,onWindowStartingSupportActionMode,"    public ActionMode onWindowStartingSupportActionMode(@NonNull Callback callback) {
        verifyMethodCalledFromDelegate(""onWindowStartingSupportActionMode(Callback)"");
        return ((CallFun1<ActionMode, Callback>) mSuperListeners.pop()).call(callback);
    }"
25244,onWindowStartingActionMode,"    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback, int type) {
        verifyMethodCalledFromDelegate(""onWindowStartingActionMode(android.view.ActionMode.Callback, Integer)"");
        return ((CallFun2<android.view.ActionMode, android.view.ActionMode.Callback, Integer>) mSuperListeners.pop())
                .call(callback, type);"
25245,onWindowStartingActionMode,"    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback) {
        verifyMethodCalledFromDelegate(""onWindowStartingActionMode(android.view.ActionMode.Callback)"");
        return ((CallFun1<android.view.ActionMode, android.view.ActionMode.Callback>) mSuperListeners.pop())
                .call(callback);"
25246,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        verifyMethodCalledFromDelegate(""onWindowFocusChanged(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(hasFocus);
    }"
25247,onWindowAttributesChanged,"    public void onWindowAttributesChanged(WindowManager.LayoutParams params) {
        verifyMethodCalledFromDelegate(""onWindowAttributesChanged(WindowManager.LayoutParams)"");
        ((CallVoid1<WindowManager.LayoutParams>) mSuperListeners.pop()).call(params);
    }"
25248,onVisibleBehindCanceled,"    public void onVisibleBehindCanceled() {
        verifyMethodCalledFromDelegate(""onVisibleBehindCanceled()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25249,onUserLeaveHint,"    public void onUserLeaveHint() {
        verifyMethodCalledFromDelegate(""onUserLeaveHint()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25250,onUserInteraction,"    public void onUserInteraction() {
        verifyMethodCalledFromDelegate(""onUserInteraction()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25251,onTrimMemory,"    public void onTrimMemory(int level) {
        verifyMethodCalledFromDelegate(""onTrimMemory(Integer)"");
        ((CallVoid1<Integer>) mSuperListeners.pop()).call(level);
    }"
25252,onTrackballEvent,"    public boolean onTrackballEvent(MotionEvent event) {
        verifyMethodCalledFromDelegate(""onTrackballEvent(MotionEvent)"");
        return ((CallFun1<Boolean, MotionEvent>) mSuperListeners.pop()).call(event);
    }"
25253,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        verifyMethodCalledFromDelegate(""onTouchEvent(MotionEvent)"");
        return ((CallFun1<Boolean, MotionEvent>) mSuperListeners.pop()).call(event);
    }"
25254,onTitleChanged,"    public void onTitleChanged(CharSequence title, int color) {
        verifyMethodCalledFromDelegate(""onTitleChanged(CharSequence, Integer)"");
        ((CallVoid2<CharSequence, Integer>) mSuperListeners.pop()).call(title, color);
    }"
25255,onSupportNavigateUp,"    public boolean onSupportNavigateUp() {
        verifyMethodCalledFromDelegate(""onSupportNavigateUp()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25256,onSupportContentChanged,"    public void onSupportContentChanged() {
        verifyMethodCalledFromDelegate(""onSupportContentChanged()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25257,onSupportActionModeStarted,"    public void onSupportActionModeStarted(@NonNull ActionMode mode) {
        verifyMethodCalledFromDelegate(""onSupportActionModeStarted(ActionMode)"");
        ((CallVoid1<ActionMode>) mSuperListeners.pop()).call(mode);
    }"
25258,onSupportActionModeFinished,"    public void onSupportActionModeFinished(@NonNull ActionMode mode) {
        verifyMethodCalledFromDelegate(""onSupportActionModeFinished(ActionMode)"");
        ((CallVoid1<ActionMode>) mSuperListeners.pop()).call(mode);
    }"
25260,onStateNotSaved,"    public void onStateNotSaved() {
        verifyMethodCalledFromDelegate(""onStateNotSaved()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25262,onSearchRequested,"    public boolean onSearchRequested() {
        verifyMethodCalledFromDelegate(""onSearchRequested()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25263,onSearchRequested,"    public boolean onSearchRequested(@Nullable SearchEvent searchEvent) {
        verifyMethodCalledFromDelegate(""onSearchRequested(SearchEvent)"");
        return ((CallFun1<Boolean, SearchEvent>) mSuperListeners.pop()).call(searchEvent);
    }"
25264,onSaveInstanceState,"    public void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {
        verifyMethodCalledFromDelegate(""onSaveInstanceState(Bundle, PersistableBundle)"");
        ((CallVoid2<Bundle, PersistableBundle>) mSuperListeners.pop()).call(outState, outPersistentState);
    }"
25265,onSaveInstanceState,"    public void onSaveInstanceState(Bundle outState) {
        verifyMethodCalledFromDelegate(""onSaveInstanceState(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(outState);
    }"
25266,onRetainNonConfigurationInstance,"    public CompositeNonConfigurationInstance onRetainNonConfigurationInstance() {
        return null;
    }"
25267,onResumeFragments,"    public void onResumeFragments() {
        verifyMethodCalledFromDelegate(""onResumeFragments()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25269,onRestoreInstanceState,"    public void onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState) {
        verifyMethodCalledFromDelegate(""onRestoreInstanceState(Bundle, PersistableBundle)"");
        ((CallVoid2<Bundle, PersistableBundle>) mSuperListeners.pop()).call(savedInstanceState, persistentState);
    }"
25270,onRestoreInstanceState,"    public void onRestoreInstanceState(Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onRestoreInstanceState(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(savedInstanceState);
    }"
25271,onRestart,"    public void onRestart() {
        verifyMethodCalledFromDelegate(""onRestart()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25273,onProvideReferrer,"    public Uri onProvideReferrer() {
        verifyMethodCalledFromDelegate(""onProvideReferrer()"");
        return ((CallFun0<Uri>) mSuperListeners.pop()).call();
    }"
25274,onProvideKeyboardShortcuts,"    public void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {
        verifyMethodCalledFromDelegate(""onProvideKeyboardShortcuts(List<KeyboardShortcutGroup>, Menu, Integer)"");
        ((CallVoid3<List<KeyboardShortcutGroup>, Menu, Integer>) mSuperListeners.pop()).call(data, menu, deviceId);
    }"
25275,onProvideAssistData,"    public void onProvideAssistData(Bundle data) {
        verifyMethodCalledFromDelegate(""onProvideAssistData(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(data);
    }"
25276,onProvideAssistContent,"    public void onProvideAssistContent(AssistContent outContent) {
        verifyMethodCalledFromDelegate(""onProvideAssistContent(AssistContent)"");
        ((CallVoid1<AssistContent>) mSuperListeners.pop()).call(outContent);
    }"
25277,onPrepareSupportNavigateUpTaskStack,"    public void onPrepareSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        verifyMethodCalledFromDelegate(""onPrepareSupportNavigateUpTaskStack(TaskStackBuilder)"");
        ((CallVoid1<TaskStackBuilder>) mSuperListeners.pop()).call(builder);
    }"
25278,onPreparePanel,"    public boolean onPreparePanel(int featureId, View view, Menu menu) {
        verifyMethodCalledFromDelegate(""onPreparePanel(Integer, View, Menu)"");
        return ((CallFun3<Boolean, Integer, View, Menu>) mSuperListeners.pop()).call(featureId, view, menu);
    }"
25279,onPrepareOptionsPanel,"    public boolean onPrepareOptionsPanel(View view, Menu menu) {
        verifyMethodCalledFromDelegate(""onPrepareOptionsPanel(View, Menu)"");
        return ((CallFun2<Boolean, View, Menu>) mSuperListeners.pop()).call(view, menu);
    }"
25280,onPrepareOptionsMenu,"    public boolean onPrepareOptionsMenu(Menu menu) {
        verifyMethodCalledFromDelegate(""onPrepareOptionsMenu(Menu)"");
        return ((CallFun1<Boolean, Menu>) mSuperListeners.pop()).call(menu);
    }"
25281,onPrepareNavigateUpTaskStack,"    public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        verifyMethodCalledFromDelegate(""onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)"");
        ((CallVoid1<android.app.TaskStackBuilder>) mSuperListeners.pop()).call(builder);
    }"
25282,onPrepareDialog,"    public void onPrepareDialog(int id, Dialog dialog, Bundle args) {
        verifyMethodCalledFromDelegate(""onPrepareDialog(Integer, Dialog, Bundle)"");
        ((CallVoid3<Integer, Dialog, Bundle>) mSuperListeners.pop()).call(id, dialog, args);
    }"
25283,onPrepareDialog,"    public void onPrepareDialog(int id, Dialog dialog) {
        verifyMethodCalledFromDelegate(""onPrepareDialog(Integer, Dialog)"");
        ((CallVoid2<Integer, Dialog>) mSuperListeners.pop()).call(id, dialog);
    }"
25284,onPostResume,"    public void onPostResume() {
        verifyMethodCalledFromDelegate(""onPostResume()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25285,onPostCreate,"    public void onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        verifyMethodCalledFromDelegate(""onPostCreate(Bundle, PersistableBundle)"");
        ((CallVoid2<Bundle, PersistableBundle>) mSuperListeners.pop()).call(savedInstanceState, persistentState);
    }"
25286,onPostCreate,"    public void onPostCreate(@Nullable Bundle savedInstanceState) {
        verifyMethodCalledFromDelegate(""onPostCreate(Bundle)"");
        ((CallVoid1<Bundle>) mSuperListeners.pop()).call(savedInstanceState);
    }"
25287,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {
        verifyMethodCalledFromDelegate(""onPictureInPictureModeChanged(Boolean, Configuration)"");
        ((CallVoid2<Boolean, Configuration>) mSuperListeners.pop()).call(isInPictureInPictureMode, newConfig);
    }"
25290,onPanelClosed,"    public void onPanelClosed(int featureId, Menu menu) {
        verifyMethodCalledFromDelegate(""onPanelClosed(Integer, Menu)"");
        ((CallVoid2<Integer, Menu>) mSuperListeners.pop()).call(featureId, menu);
    }"
25293,onNewIntent,"    public void onNewIntent(Intent intent) {
        verifyMethodCalledFromDelegate(""onNewIntent(Intent)"");
        ((CallVoid1<Intent>) mSuperListeners.pop()).call(intent);
    }"
25294,onNavigateUpFromChild,"    public boolean onNavigateUpFromChild(Activity child) {
        verifyMethodCalledFromDelegate(""onNavigateUpFromChild(Activity)"");
        return ((CallFun1<Boolean, Activity>) mSuperListeners.pop()).call(child);
    }"
25295,onNavigateUp,"    public boolean onNavigateUp() {
        verifyMethodCalledFromDelegate(""onNavigateUp()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25296,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig) {
        verifyMethodCalledFromDelegate(""onMultiWindowModeChanged(Boolean, Configuration)"");
        ((CallVoid2<Boolean, Configuration>) mSuperListeners.pop()).call(isInMultiWindowMode, newConfig);
    }"
25298,onMenuOpened,"    public boolean onMenuOpened(int featureId, Menu menu) {
        verifyMethodCalledFromDelegate(""onMenuOpened(Integer, Menu)"");
        return ((CallFun2<Boolean, Integer, Menu>) mSuperListeners.pop()).call(featureId, menu);
    }"
25300,onLocalVoiceInteractionStopped,"    public void onLocalVoiceInteractionStopped() {
        verifyMethodCalledFromDelegate(""onLocalVoiceInteractionStopped()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25301,onLocalVoiceInteractionStarted,"    public void onLocalVoiceInteractionStarted() {
        verifyMethodCalledFromDelegate(""onLocalVoiceInteractionStarted()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25302,onKeyUp,"    public boolean onKeyUp(int keyCode, KeyEvent event) {
        verifyMethodCalledFromDelegate(""onKeyUp(Integer, KeyEvent)"");
        return ((CallFun2<Boolean, Integer, KeyEvent>) mSuperListeners.pop()).call(keyCode, event);
    }"
25303,onKeyShortcut,"    public boolean onKeyShortcut(int keyCode, KeyEvent event) {
        verifyMethodCalledFromDelegate(""onKeyShortcut(Integer, KeyEvent)"");
        return ((CallFun2<Boolean, Integer, KeyEvent>) mSuperListeners.pop()).call(keyCode, event);
    }"
25304,onKeyMultiple,"    public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) {
        verifyMethodCalledFromDelegate(""onKeyMultiple(Integer, Integer, KeyEvent)"");
        return ((CallFun3<Boolean, Integer, Integer, KeyEvent>) mSuperListeners.pop())
                .call(keyCode, repeatCount, event);"
25305,onKeyLongPress,"    public boolean onKeyLongPress(int keyCode, KeyEvent event) {
        verifyMethodCalledFromDelegate(""onKeyLongPress(Integer, KeyEvent)"");
        return ((CallFun2<Boolean, Integer, KeyEvent>) mSuperListeners.pop()).call(keyCode, event);
    }"
25306,onKeyDown,"    public boolean onKeyDown(int keyCode, KeyEvent event) {
        verifyMethodCalledFromDelegate(""onKeyDown(Integer, KeyEvent)"");
        return ((CallFun2<Boolean, Integer, KeyEvent>) mSuperListeners.pop()).call(keyCode, event);
    }"
25307,onGenericMotionEvent,"    public boolean onGenericMotionEvent(MotionEvent event) {
        verifyMethodCalledFromDelegate(""onGenericMotionEvent(MotionEvent)"");
        return ((CallFun1<Boolean, MotionEvent>) mSuperListeners.pop()).call(event);
    }"
25308,onEnterAnimationComplete,"    public void onEnterAnimationComplete() {
        verifyMethodCalledFromDelegate(""onEnterAnimationComplete()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25309,onDetachedFromWindow,"    public void onDetachedFromWindow() {
        verifyMethodCalledFromDelegate(""onDetachedFromWindow()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25311,onCreateView,"    public View onCreateView(String name, Context context, AttributeSet attrs) {
        verifyMethodCalledFromDelegate(""onCreateView(String, Context, AttributeSet)"");
        return ((CallFun3<View, String, Context, AttributeSet>) mSuperListeners.pop()).call(name, context, attrs);
    }"
25312,onCreateView,"    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
        verifyMethodCalledFromDelegate(""onCreateView(View, String, Context, AttributeSet)"");
        return ((CallFun4<View, View, String, Context, AttributeSet>) mSuperListeners.pop())
                .call(parent, name, context, attrs);"
25313,onCreateThumbnail,"    public boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas) {
        verifyMethodCalledFromDelegate(""onCreateThumbnail(Bitmap, Canvas)"");
        return ((CallFun2<Boolean, Bitmap, Canvas>) mSuperListeners.pop()).call(outBitmap, canvas);
    }"
25314,onCreateSupportNavigateUpTaskStack,"    public void onCreateSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        verifyMethodCalledFromDelegate(""onCreateSupportNavigateUpTaskStack(TaskStackBuilder)"");
        ((CallVoid1<TaskStackBuilder>) mSuperListeners.pop()).call(builder);
    }"
25315,onCreatePanelView,"    public View onCreatePanelView(int featureId) {
        verifyMethodCalledFromDelegate(""onCreatePanelView(Integer)"");
        return ((CallFun1<View, Integer>) mSuperListeners.pop()).call(featureId);
    }"
25316,onCreatePanelMenu,"    public boolean onCreatePanelMenu(int featureId, Menu menu) {
        verifyMethodCalledFromDelegate(""onCreatePanelMenu(Integer, Menu)"");
        return ((CallFun2<Boolean, Integer, Menu>) mSuperListeners.pop()).call(featureId, menu);
    }"
25317,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        verifyMethodCalledFromDelegate(""onCreateOptionsMenu(Menu)"");
        return ((CallFun1<Boolean, Menu>) mSuperListeners.pop()).call(menu);
    }"
25318,onCreateNavigateUpTaskStack,"    public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        verifyMethodCalledFromDelegate(""onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)"");
        ((CallVoid1<android.app.TaskStackBuilder>) mSuperListeners.pop()).call(builder);
    }"
25319,onCreateDialog,"    public Dialog onCreateDialog(int id, Bundle args) {
        verifyMethodCalledFromDelegate(""onCreateDialog(Integer, Bundle)"");
        return ((CallFun2<Dialog, Integer, Bundle>) mSuperListeners.pop()).call(id, args);
    }"
25320,onCreateDialog,"    public Dialog onCreateDialog(int id) {
        verifyMethodCalledFromDelegate(""onCreateDialog(Integer)"");
        return ((CallFun1<Dialog, Integer>) mSuperListeners.pop()).call(id);
    }"
25321,onCreateDescription,"    public CharSequence onCreateDescription() {
        verifyMethodCalledFromDelegate(""onCreateDescription()"");
        return ((CallFun0<CharSequence>) mSuperListeners.pop()).call();
    }"
25323,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        verifyMethodCalledFromDelegate(""onCreate(Bundle, PersistableBundle)"");
        ((CallVoid2<Bundle, PersistableBundle>) mSuperListeners.pop()).call(savedInstanceState, persistentState);
    }"
25325,onContextMenuClosed,"    public void onContextMenuClosed(Menu menu) {
        verifyMethodCalledFromDelegate(""onContextMenuClosed(Menu)"");
        ((CallVoid1<Menu>) mSuperListeners.pop()).call(menu);
    }"
25327,onContentChanged,"    public void onContentChanged() {
        verifyMethodCalledFromDelegate(""onContentChanged()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25329,onChildTitleChanged,"    public void onChildTitleChanged(Activity childActivity, CharSequence title) {
        verifyMethodCalledFromDelegate(""onChildTitleChanged(Activity, CharSequence)"");
        ((CallVoid2<Activity, CharSequence>) mSuperListeners.pop()).call(childActivity, title);
    }"
25330,onBackPressed,"    public void onBackPressed() {
        verifyMethodCalledFromDelegate(""onBackPressed()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25331,onAttachedToWindow,"    public void onAttachedToWindow() {
        verifyMethodCalledFromDelegate(""onAttachedToWindow()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25332,onAttachFragment,"    public void onAttachFragment(android.app.Fragment fragment) {
        verifyMethodCalledFromDelegate(""onAttachFragment(android.app.Fragment)"");
        ((CallVoid1<android.app.Fragment>) mSuperListeners.pop()).call(fragment);
    }"
25333,onAttachFragment,"    public void onAttachFragment(Fragment fragment) {
        verifyMethodCalledFromDelegate(""onAttachFragment(Fragment)"");
        ((CallVoid1<Fragment>) mSuperListeners.pop()).call(fragment);
    }"
25334,onApplyThemeResource,"    public void onApplyThemeResource(Theme theme, int resid, boolean first) {
        verifyMethodCalledFromDelegate(""onApplyThemeResource(Theme, Integer, Boolean)"");
        ((CallVoid3<Theme, Integer, Boolean>) mSuperListeners.pop()).call(theme, resid, first);
    }"
25335,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        verifyMethodCalledFromDelegate(""onActivityResult(Integer, Integer, Intent)"");
        ((CallVoid3<Integer, Integer, Intent>) mSuperListeners.pop()).call(requestCode, resultCode, data);
    }"
25336,onActivityReenter,"    public void onActivityReenter(int resultCode, Intent data) {
        verifyMethodCalledFromDelegate(""onActivityReenter(Integer, Intent)"");
        ((CallVoid2<Integer, Intent>) mSuperListeners.pop()).call(resultCode, data);
    }"
25337,onActionModeStarted,"    public void onActionModeStarted(android.view.ActionMode mode) {
        verifyMethodCalledFromDelegate(""onActionModeStarted(android.view.ActionMode)"");
        ((CallVoid1<android.view.ActionMode>) mSuperListeners.pop()).call(mode);
    }"
25338,onActionModeFinished,"    public void onActionModeFinished(android.view.ActionMode mode) {
        verifyMethodCalledFromDelegate(""onActionModeFinished(android.view.ActionMode)"");
        ((CallVoid1<android.view.ActionMode>) mSuperListeners.pop()).call(mode);
    }"
25339,navigateUpToFromChild,"    public boolean navigateUpToFromChild(Activity child, Intent upIntent) {
        verifyMethodCalledFromDelegate(""navigateUpToFromChild(Activity, Intent)"");
        return ((CallFun2<Boolean, Activity, Intent>) mSuperListeners.pop()).call(child, upIntent);
    }"
25340,navigateUpTo,"    public boolean navigateUpTo(Intent upIntent) {
        verifyMethodCalledFromDelegate(""navigateUpTo(Intent)"");
        return ((CallFun1<Boolean, Intent>) mSuperListeners.pop()).call(upIntent);
    }"
25341,moveTaskToBack,"    public boolean moveTaskToBack(boolean nonRoot) {
        verifyMethodCalledFromDelegate(""moveTaskToBack(Boolean)"");
        return ((CallFun1<Boolean, Boolean>) mSuperListeners.pop()).call(nonRoot);
    }"
25342,moveSharedPreferencesFrom,"    public boolean moveSharedPreferencesFrom(Context sourceContext, String name) {
        verifyMethodCalledFromDelegate(""moveSharedPreferencesFrom(Context, String)"");
        return ((CallFun2<Boolean, Context, String>) mSuperListeners.pop()).call(sourceContext, name);
    }"
25343,moveDatabaseFrom,"    public boolean moveDatabaseFrom(Context sourceContext, String name) {
        verifyMethodCalledFromDelegate(""moveDatabaseFrom(Context, String)"");
        return ((CallFun2<Boolean, Context, String>) mSuperListeners.pop()).call(sourceContext, name);
    }"
25344,isVoiceInteractionRoot,"    public boolean isVoiceInteractionRoot() {
        verifyMethodCalledFromDelegate(""isVoiceInteractionRoot()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25345,isVoiceInteraction,"    public boolean isVoiceInteraction() {
        verifyMethodCalledFromDelegate(""isVoiceInteraction()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25346,isTaskRoot,"    public boolean isTaskRoot() {
        verifyMethodCalledFromDelegate(""isTaskRoot()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25347,isRestricted,"    public boolean isRestricted() {
        verifyMethodCalledFromDelegate(""isRestricted()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25348,isLocalVoiceInteractionSupported,"    public boolean isLocalVoiceInteractionSupported() {
        verifyMethodCalledFromDelegate(""isLocalVoiceInteractionSupported()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25349,isInPictureInPictureMode,"    public boolean isInPictureInPictureMode() {
        verifyMethodCalledFromDelegate(""isInPictureInPictureMode()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25350,isInMultiWindowMode,"    public boolean isInMultiWindowMode() {
        verifyMethodCalledFromDelegate(""isInMultiWindowMode()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25351,setImmersive,"    public void setImmersive(boolean i) {
        verifyMethodCalledFromDelegate(""setImmersive(Boolean)"");
        ((CallVoid1<Boolean>) mSuperListeners.pop()).call(i);
    }"
25352,isImmersive,"    public boolean isImmersive() {
        verifyMethodCalledFromDelegate(""isImmersive()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25353,isFinishing,"    public boolean isFinishing() {
        verifyMethodCalledFromDelegate(""isFinishing()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25354,isDeviceProtectedStorage,"    public boolean isDeviceProtectedStorage() {
        verifyMethodCalledFromDelegate(""isDeviceProtectedStorage()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25355,isDestroyed,"    public boolean isDestroyed() {
        verifyMethodCalledFromDelegate(""isDestroyed()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25356,isChangingConfigurations,"    public boolean isChangingConfigurations() {
        verifyMethodCalledFromDelegate(""isChangingConfigurations()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25357,isActivityTransitionRunning,"    public boolean isActivityTransitionRunning() {
        verifyMethodCalledFromDelegate(""isActivityTransitionRunning()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25358,invalidateOptionsMenu,"    public void invalidateOptionsMenu() {
        verifyMethodCalledFromDelegate(""invalidateOptionsMenu()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25359,hasWindowFocus,"    public boolean hasWindowFocus() {
        verifyMethodCalledFromDelegate(""hasWindowFocus()"");
        return ((CallFun0<Boolean>) mSuperListeners.pop()).call();
    }"
25360,grantUriPermission,"    public void grantUriPermission(String toPackage, Uri uri, int modeFlags) {
        verifyMethodCalledFromDelegate(""grantUriPermission(String, Uri, Integer)"");
        ((CallVoid3<String, Uri, Integer>) mSuperListeners.pop()).call(toPackage, uri, modeFlags);
    }"
25361,getWindowManager,"    public WindowManager getWindowManager() {
        verifyMethodCalledFromDelegate(""getWindowManager()"");
        return ((CallFun0<WindowManager>) mSuperListeners.pop()).call();
    }"
25362,getWindow,"    public Window getWindow() {
        verifyMethodCalledFromDelegate(""getWindow()"");
        return ((CallFun0<Window>) mSuperListeners.pop()).call();
    }"
25363,getWallpaperDesiredMinimumWidth,"    public int getWallpaperDesiredMinimumWidth() {
        verifyMethodCalledFromDelegate(""getWallpaperDesiredMinimumWidth()"");
        return ((CallFun0<Integer>) mSuperListeners.pop()).call();
    }"
25364,getWallpaperDesiredMinimumHeight,"    public int getWallpaperDesiredMinimumHeight() {
        verifyMethodCalledFromDelegate(""getWallpaperDesiredMinimumHeight()"");
        return ((CallFun0<Integer>) mSuperListeners.pop()).call();
    }"
25365,setWallpaper,"    public void setWallpaper(Bitmap bitmap) throws IOException {
        verifyMethodCalledFromDelegate(""setWallpaper(Bitmap)"");
        ((CallVoid1<Bitmap>) mSuperListeners.pop()).call(bitmap);
    }"
25366,getWallpaper,"    public Drawable getWallpaper() {
        verifyMethodCalledFromDelegate(""getWallpaper()"");
        return ((CallFun0<Drawable>) mSuperListeners.pop()).call();
    }"
25367,getVoiceInteractor,"    public VoiceInteractor getVoiceInteractor() {
        verifyMethodCalledFromDelegate(""getVoiceInteractor()"");
        return ((CallFun0<VoiceInteractor>) mSuperListeners.pop()).call();
    }"
25369,setTheme,"    public void setTheme(int resid) {
        verifyMethodCalledFromDelegate(""setTheme(Integer)"");
        ((CallVoid1<Integer>) mSuperListeners.pop()).call(resid);
    }"
25370,getTheme,"    public Theme getTheme() {
        verifyMethodCalledFromDelegate(""getTheme()"");
        return ((CallFun0<Theme>) mSuperListeners.pop()).call();
    }"
25371,getTaskId,"    public int getTaskId() {
        verifyMethodCalledFromDelegate(""getTaskId()"");
        return ((CallFun0<Integer>) mSuperListeners.pop()).call();
    }"
25372,getSystemServiceName,"    public String getSystemServiceName(Class<?> serviceClass) {
        verifyMethodCalledFromDelegate(""getSystemServiceName(Class<?>)"");
        return ((CallFun1<String, Class<?>>) mSuperListeners.pop()).call(serviceClass);
    }"
25373,getSystemService,"    public Object getSystemService(@NonNull String name) {
        verifyMethodCalledFromDelegate(""getSystemService(String)"");
        return ((CallFun1<Object, String>) mSuperListeners.pop()).call(name);
    }"
25374,getSupportParentActivityIntent,"    public Intent getSupportParentActivityIntent() {
        verifyMethodCalledFromDelegate(""getSupportParentActivityIntent()"");
        return ((CallFun0<Intent>) mSuperListeners.pop()).call();
    }"
25375,getSupportLoaderManager,"    public LoaderManager getSupportLoaderManager() {
        verifyMethodCalledFromDelegate(""getSupportLoaderManager()"");
        return ((CallFun0<LoaderManager>) mSuperListeners.pop()).call();
    }"
25376,getSupportFragmentManager,"    public FragmentManager getSupportFragmentManager() {
        verifyMethodCalledFromDelegate(""getSupportFragmentManager()"");
        return ((CallFun0<FragmentManager>) mSuperListeners.pop()).call();
    }"
25377,setSupportActionBar,"    public void setSupportActionBar(@Nullable Toolbar toolbar) {
        verifyMethodCalledFromDelegate(""setSupportActionBar(Toolbar)"");
        ((CallVoid1<Toolbar>) mSuperListeners.pop()).call(toolbar);
    }"
25378,getSupportActionBar,"    public ActionBar getSupportActionBar() {
        verifyMethodCalledFromDelegate(""getSupportActionBar()"");
        return ((CallFun0<ActionBar>) mSuperListeners.pop()).call();
    }"
25379,getSharedPreferences,"    public SharedPreferences getSharedPreferences(String name, int mode) {
        verifyMethodCalledFromDelegate(""getSharedPreferences(String, Integer)"");
        return ((CallFun2<SharedPreferences, String, Integer>) mSuperListeners.pop()).call(name, mode);
    }"
25380,getResources,"    public Resources getResources() {
        verifyMethodCalledFromDelegate(""getResources()"");
        return ((CallFun0<Resources>) mSuperListeners.pop()).call();
    }"
25381,setRequestedOrientation,"    public void setRequestedOrientation(int requestedOrientation) {
        verifyMethodCalledFromDelegate(""setRequestedOrientation(Integer)"");
        ((CallVoid1<Integer>) mSuperListeners.pop()).call(requestedOrientation);
    }"
25382,getRequestedOrientation,"    public int getRequestedOrientation() {
        verifyMethodCalledFromDelegate(""getRequestedOrientation()"");
        return ((CallFun0<Integer>) mSuperListeners.pop()).call();
    }"
25383,getReferrer,"    public Uri getReferrer() {
        verifyMethodCalledFromDelegate(""getReferrer()"");
        return ((CallFun0<Uri>) mSuperListeners.pop()).call();
    }"
25384,getPreferences,"    public SharedPreferences getPreferences(int mode) {
        verifyMethodCalledFromDelegate(""getPreferences(Integer)"");
        return ((CallFun1<SharedPreferences, Integer>) mSuperListeners.pop()).call(mode);
    }"
25385,getParentActivityIntent,"    public Intent getParentActivityIntent() {
        verifyMethodCalledFromDelegate(""getParentActivityIntent()"");
        return ((CallFun0<Intent>) mSuperListeners.pop()).call();
    }"
25386,getPackageResourcePath,"    public String getPackageResourcePath() {
        verifyMethodCalledFromDelegate(""getPackageResourcePath()"");
        return ((CallFun0<String>) mSuperListeners.pop()).call();
    }"
25387,getPackageName,"    public String getPackageName() {
        verifyMethodCalledFromDelegate(""getPackageName()"");
        return ((CallFun0<String>) mSuperListeners.pop()).call();
    }"
25388,getPackageManager,"    public PackageManager getPackageManager() {
        verifyMethodCalledFromDelegate(""getPackageManager()"");
        return ((CallFun0<PackageManager>) mSuperListeners.pop()).call();
    }"
25389,getPackageCodePath,"    public String getPackageCodePath() {
        verifyMethodCalledFromDelegate(""getPackageCodePath()"");
        return ((CallFun0<String>) mSuperListeners.pop()).call();
    }"
25390,getObbDirs,"    public File[] getObbDirs() {
        verifyMethodCalledFromDelegate(""getObbDirs()"");
        return ((CallFun0<File[]>) mSuperListeners.pop()).call();
    }"
25391,getObbDir,"    public File getObbDir() {
        verifyMethodCalledFromDelegate(""getObbDir()"");
        return ((CallFun0<File>) mSuperListeners.pop()).call();
    }"
25392,getNoBackupFilesDir,"    public File getNoBackupFilesDir() {
        verifyMethodCalledFromDelegate(""getNoBackupFilesDir()"");
        return ((CallFun0<File>) mSuperListeners.pop()).call();
    }"
25393,getMenuInflater,"    public MenuInflater getMenuInflater() {
        verifyMethodCalledFromDelegate(""getMenuInflater()"");
        return ((CallFun0<MenuInflater>) mSuperListeners.pop()).call();
    }"
25394,getMaxNumPictureInPictureActions,"    public int getMaxNumPictureInPictureActions() {
        verifyMethodCalledFromDelegate(""getMaxNumPictureInPictureActions()"");
        return ((CallFun0<Integer>) mSuperListeners.pop()).call();
    }"
25395,getMainLooper,"    public Looper getMainLooper() {
        verifyMethodCalledFromDelegate(""getMainLooper()"");
        return ((CallFun0<Looper>) mSuperListeners.pop()).call();
    }"
25396,getMainExecutor,"    public Executor getMainExecutor() {
        verifyMethodCalledFromDelegate(""getMainExecutor()"");
        return ((CallFun0<Executor>) mSuperListeners.pop()).call();
    }"
25397,getLocalClassName,"    public String getLocalClassName() {
        verifyMethodCalledFromDelegate(""getLocalClassName()"");
        return ((CallFun0<String>) mSuperListeners.pop()).call();
    }"
25398,getLoaderManager,"    public android.app.LoaderManager getLoaderManager() {
        verifyMethodCalledFromDelegate(""getLoaderManager()"");
        return ((CallFun0<android.app.LoaderManager>) mSuperListeners.pop()).call();
    }"
25399,getLifecycle,"    public Lifecycle getLifecycle() {
        verifyMethodCalledFromDelegate(""getLifecycle()"");
        return ((CallFun0<Lifecycle>) mSuperListeners.pop()).call();
    }"
25400,getLayoutInflater,"    public LayoutInflater getLayoutInflater() {
        verifyMethodCalledFromDelegate(""getLayoutInflater()"");
        return ((CallFun0<LayoutInflater>) mSuperListeners.pop()).call();
    }"
25401,getLastNonConfigurationInstance,"    public Object getLastNonConfigurationInstance(final String key) {
        return getCompositeDelegate().getLastNonConfigurationInstance(key);
    }"
25402,setIntent,"    public void setIntent(Intent newIntent) {
        verifyMethodCalledFromDelegate(""setIntent(Intent)"");
        ((CallVoid1<Intent>) mSuperListeners.pop()).call(newIntent);
    }"
25403,getIntent,"    public Intent getIntent() {
        verifyMethodCalledFromDelegate(""getIntent()"");
        return ((CallFun0<Intent>) mSuperListeners.pop()).call();
    }"
25404,getFragmentManager,"    public android.app.FragmentManager getFragmentManager() {
        verifyMethodCalledFromDelegate(""getFragmentManager()"");
        return ((CallFun0<android.app.FragmentManager>) mSuperListeners.pop()).call();
    }"
25405,getFilesDir,"    public File getFilesDir() {
        verifyMethodCalledFromDelegate(""getFilesDir()"");
        return ((CallFun0<File>) mSuperListeners.pop()).call();
    }"
25406,getFileStreamPath,"    public File getFileStreamPath(String name) {
        verifyMethodCalledFromDelegate(""getFileStreamPath(String)"");
        return ((CallFun1<File, String>) mSuperListeners.pop()).call(name);
    }"
25407,getExtraData,"    public <T extends SupportActivity.ExtraData> T getExtraData(Class<T> extraDataClass) {
        verifyMethodCalledFromDelegate(""getExtraData(Class<T>)"");
        return ((CallFun1<T, Class<T>>) mSuperListeners.pop()).call(extraDataClass);
    }"
25408,getExternalMediaDirs,"    public File[] getExternalMediaDirs() {
        verifyMethodCalledFromDelegate(""getExternalMediaDirs()"");
        return ((CallFun0<File[]>) mSuperListeners.pop()).call();
    }"
25409,getExternalFilesDirs,"    public File[] getExternalFilesDirs(String type) {
        verifyMethodCalledFromDelegate(""getExternalFilesDirs(String)"");
        return ((CallFun1<File[], String>) mSuperListeners.pop()).call(type);
    }"
25410,getExternalFilesDir,"    public File getExternalFilesDir(String type) {
        verifyMethodCalledFromDelegate(""getExternalFilesDir(String)"");
        return ((CallFun1<File, String>) mSuperListeners.pop()).call(type);
    }"
25411,getExternalCacheDirs,"    public File[] getExternalCacheDirs() {
        verifyMethodCalledFromDelegate(""getExternalCacheDirs()"");
        return ((CallFun0<File[]>) mSuperListeners.pop()).call();
    }"
25412,getExternalCacheDir,"    public File getExternalCacheDir() {
        verifyMethodCalledFromDelegate(""getExternalCacheDir()"");
        return ((CallFun0<File>) mSuperListeners.pop()).call();
    }"
25413,getDrawerToggleDelegate,"    public Delegate getDrawerToggleDelegate() {
        verifyMethodCalledFromDelegate(""getDrawerToggleDelegate()"");
        return ((CallFun0<Delegate>) mSuperListeners.pop()).call();
    }"
25414,getDir,"    public File getDir(String name, int mode) {
        verifyMethodCalledFromDelegate(""getDir(String, Integer)"");
        return ((CallFun2<File, String, Integer>) mSuperListeners.pop()).call(name, mode);
    }"
25415,getDelegate,"    public AppCompatDelegate getDelegate() {
        verifyMethodCalledFromDelegate(""getDelegate()"");
        return ((CallFun0<AppCompatDelegate>) mSuperListeners.pop()).call();
    }"
25416,getDatabasePath,"    public File getDatabasePath(String name) {
        verifyMethodCalledFromDelegate(""getDatabasePath(String)"");
        return ((CallFun1<File, String>) mSuperListeners.pop()).call(name);
    }"
25417,getDataDir,"    public File getDataDir() {
        verifyMethodCalledFromDelegate(""getDataDir()"");
        return ((CallFun0<File>) mSuperListeners.pop()).call();
    }"
25418,getCurrentFocus,"    public View getCurrentFocus() {
        verifyMethodCalledFromDelegate(""getCurrentFocus()"");
        return ((CallFun0<View>) mSuperListeners.pop()).call();
    }"
25419,setContentTransitionManager,"    public void setContentTransitionManager(TransitionManager tm) {
        verifyMethodCalledFromDelegate(""setContentTransitionManager(TransitionManager)"");
        ((CallVoid1<TransitionManager>) mSuperListeners.pop()).call(tm);
    }"
25420,getContentTransitionManager,"    public TransitionManager getContentTransitionManager() {
        verifyMethodCalledFromDelegate(""getContentTransitionManager()"");
        return ((CallFun0<TransitionManager>) mSuperListeners.pop()).call();
    }"
25421,getContentScene,"    public Scene getContentScene() {
        verifyMethodCalledFromDelegate(""getContentScene()"");
        return ((CallFun0<Scene>) mSuperListeners.pop()).call();
    }"
25422,getContentResolver,"    public ContentResolver getContentResolver() {
        verifyMethodCalledFromDelegate(""getContentResolver()"");
        return ((CallFun0<ContentResolver>) mSuperListeners.pop()).call();
    }"
25423,getComponentName,"    public ComponentName getComponentName() {
        verifyMethodCalledFromDelegate(""getComponentName()"");
        return ((CallFun0<ComponentName>) mSuperListeners.pop()).call();
    }"
25424,getCodeCacheDir,"    public File getCodeCacheDir() {
        verifyMethodCalledFromDelegate(""getCodeCacheDir()"");
        return ((CallFun0<File>) mSuperListeners.pop()).call();
    }"
25425,getClassLoader,"    public ClassLoader getClassLoader() {
        verifyMethodCalledFromDelegate(""getClassLoader()"");
        return ((CallFun0<ClassLoader>) mSuperListeners.pop()).call();
    }"
25426,getChangingConfigurations,"    public int getChangingConfigurations() {
        verifyMethodCalledFromDelegate(""getChangingConfigurations()"");
        return ((CallFun0<Integer>) mSuperListeners.pop()).call();
    }"
25427,getCallingPackage,"    public String getCallingPackage() {
        verifyMethodCalledFromDelegate(""getCallingPackage()"");
        return ((CallFun0<String>) mSuperListeners.pop()).call();
    }"
25428,getCallingActivity,"    public ComponentName getCallingActivity() {
        verifyMethodCalledFromDelegate(""getCallingActivity()"");
        return ((CallFun0<ComponentName>) mSuperListeners.pop()).call();
    }"
25429,getCacheDir,"    public File getCacheDir() {
        verifyMethodCalledFromDelegate(""getCacheDir()"");
        return ((CallFun0<File>) mSuperListeners.pop()).call();
    }"
25430,getBaseContext,"    public Context getBaseContext() {
        verifyMethodCalledFromDelegate(""getBaseContext()"");
        return ((CallFun0<Context>) mSuperListeners.pop()).call();
    }"
25431,getAssets,"    public AssetManager getAssets() {
        verifyMethodCalledFromDelegate(""getAssets()"");
        return ((CallFun0<AssetManager>) mSuperListeners.pop()).call();
    }"
25432,getApplicationInfo,"    public ApplicationInfo getApplicationInfo() {
        verifyMethodCalledFromDelegate(""getApplicationInfo()"");
        return ((CallFun0<ApplicationInfo>) mSuperListeners.pop()).call();
    }"
25433,getApplicationContext,"    public Context getApplicationContext() {
        verifyMethodCalledFromDelegate(""getApplicationContext()"");
        return ((CallFun0<Context>) mSuperListeners.pop()).call();
    }"
25434,getActivity,"    public Activity getActivity() {
        return (Activity) getOriginal();
    }"
25435,setActionBar,"    public void setActionBar(@Nullable android.widget.Toolbar toolbar) {
        verifyMethodCalledFromDelegate(""setActionBar(android.widget.Toolbar)"");
        ((CallVoid1<android.widget.Toolbar>) mSuperListeners.pop()).call(toolbar);
    }"
25436,getActionBar,"    public android.app.ActionBar getActionBar() {
        verifyMethodCalledFromDelegate(""getActionBar()"");
        return ((CallFun0<android.app.ActionBar>) mSuperListeners.pop()).call();
    }"
25437,finishFromChild,"    public void finishFromChild(Activity child) {
        verifyMethodCalledFromDelegate(""finishFromChild(Activity)"");
        ((CallVoid1<Activity>) mSuperListeners.pop()).call(child);
    }"
25438,finishAndRemoveTask,"    public void finishAndRemoveTask() {
        verifyMethodCalledFromDelegate(""finishAndRemoveTask()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25439,finishAfterTransition,"    public void finishAfterTransition() {
        verifyMethodCalledFromDelegate(""finishAfterTransition()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25440,finishAffinity,"    public void finishAffinity() {
        verifyMethodCalledFromDelegate(""finishAffinity()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25441,finishActivityFromChild,"    public void finishActivityFromChild(@NonNull Activity child, int requestCode) {
        verifyMethodCalledFromDelegate(""finishActivityFromChild(Activity, Integer)"");
        ((CallVoid2<Activity, Integer>) mSuperListeners.pop()).call(child, requestCode);
    }"
25442,finishActivity,"    public void finishActivity(int requestCode) {
        verifyMethodCalledFromDelegate(""finishActivity(Integer)"");
        ((CallVoid1<Integer>) mSuperListeners.pop()).call(requestCode);
    }"
25443,finish,"    public void finish() {
        verifyMethodCalledFromDelegate(""finish()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25444,findViewById,"    public <T extends View> T findViewById(int id) {
        verifyMethodCalledFromDelegate(""findViewById(Integer)"");
        return ((CallFun1<T, Integer>) mSuperListeners.pop()).call(id);
    }"
25445,fileList,"    public String[] fileList() {
        verifyMethodCalledFromDelegate(""fileList()"");
        return ((CallFun0<String[]>) mSuperListeners.pop()).call();
    }"
25446,enterPictureInPictureMode,"    public boolean enterPictureInPictureMode(@NonNull PictureInPictureParams params) {
        verifyMethodCalledFromDelegate(""enterPictureInPictureMode(PictureInPictureParams)"");
        return ((CallFun1<Boolean, PictureInPictureParams>) mSuperListeners.pop()).call(params);
    }"
25447,enterPictureInPictureMode,"    public void enterPictureInPictureMode() {
        verifyMethodCalledFromDelegate(""enterPictureInPictureMode()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25448,enforceUriPermission,"    public void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags, String message) {
        verifyMethodCalledFromDelegate(
                ""enforceUriPermission(Uri, String, String, Integer, Integer, Integer, String)"");"
25449,enforceUriPermission,"    public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) {
        verifyMethodCalledFromDelegate(""enforceUriPermission(Uri, Integer, Integer, Integer, String)"");
        ((CallVoid5<Uri, Integer, Integer, Integer, String>) mSuperListeners.pop())
                .call(uri, pid, uid, modeFlags, message);"
25450,enforcePermission,"    public void enforcePermission(String permission, int pid, int uid, String message) {
        verifyMethodCalledFromDelegate(""enforcePermission(String, Integer, Integer, String)"");
        ((CallVoid4<String, Integer, Integer, String>) mSuperListeners.pop()).call(permission, pid, uid, message);
    }"
25451,enforceCallingUriPermission,"    public void enforceCallingUriPermission(Uri uri, int modeFlags, String message) {
        verifyMethodCalledFromDelegate(""enforceCallingUriPermission(Uri, Integer, String)"");
        ((CallVoid3<Uri, Integer, String>) mSuperListeners.pop()).call(uri, modeFlags, message);
    }"
25452,enforceCallingPermission,"    public void enforceCallingPermission(String permission, String message) {
        verifyMethodCalledFromDelegate(""enforceCallingPermission(String, String)"");
        ((CallVoid2<String, String>) mSuperListeners.pop()).call(permission, message);
    }"
25453,enforceCallingOrSelfUriPermission,"    public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) {
        verifyMethodCalledFromDelegate(""enforceCallingOrSelfUriPermission(Uri, Integer, String)"");
        ((CallVoid3<Uri, Integer, String>) mSuperListeners.pop()).call(uri, modeFlags, message);
    }"
25454,enforceCallingOrSelfPermission,"    public void enforceCallingOrSelfPermission(String permission, String message) {
        verifyMethodCalledFromDelegate(""enforceCallingOrSelfPermission(String, String)"");
        ((CallVoid2<String, String>) mSuperListeners.pop()).call(permission, message);
    }"
25456,dispatchTrackballEvent,"    public boolean dispatchTrackballEvent(MotionEvent ev) {
        verifyMethodCalledFromDelegate(""dispatchTrackballEvent(MotionEvent)"");
        return ((CallFun1<Boolean, MotionEvent>) mSuperListeners.pop()).call(ev);
    }"
25457,dispatchTouchEvent,"    public boolean dispatchTouchEvent(MotionEvent ev) {
        verifyMethodCalledFromDelegate(""dispatchTouchEvent(MotionEvent)"");
        return ((CallFun1<Boolean, MotionEvent>) mSuperListeners.pop()).call(ev);
    }"
25458,dispatchPopulateAccessibilityEvent,"    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {
        verifyMethodCalledFromDelegate(""dispatchPopulateAccessibilityEvent(AccessibilityEvent)"");
        return ((CallFun1<Boolean, AccessibilityEvent>) mSuperListeners.pop()).call(event);
    }"
25459,dispatchKeyShortcutEvent,"    public boolean dispatchKeyShortcutEvent(KeyEvent event) {
        verifyMethodCalledFromDelegate(""dispatchKeyShortcutEvent(KeyEvent)"");
        return ((CallFun1<Boolean, KeyEvent>) mSuperListeners.pop()).call(event);
    }"
25460,dispatchKeyEvent,"    public boolean dispatchKeyEvent(KeyEvent event) {
        verifyMethodCalledFromDelegate(""dispatchKeyEvent(KeyEvent)"");
        return ((CallFun1<Boolean, KeyEvent>) mSuperListeners.pop()).call(event);
    }"
25461,dispatchGenericMotionEvent,"    public boolean dispatchGenericMotionEvent(MotionEvent ev) {
        verifyMethodCalledFromDelegate(""dispatchGenericMotionEvent(MotionEvent)"");
        return ((CallFun1<Boolean, MotionEvent>) mSuperListeners.pop()).call(ev);
    }"
25462,deleteSharedPreferences,"    public boolean deleteSharedPreferences(String name) {
        verifyMethodCalledFromDelegate(""deleteSharedPreferences(String)"");
        return ((CallFun1<Boolean, String>) mSuperListeners.pop()).call(name);
    }"
25463,deleteFile,"    public boolean deleteFile(String name) {
        verifyMethodCalledFromDelegate(""deleteFile(String)"");
        return ((CallFun1<Boolean, String>) mSuperListeners.pop()).call(name);
    }"
25464,deleteDatabase,"    public boolean deleteDatabase(String name) {
        verifyMethodCalledFromDelegate(""deleteDatabase(String)"");
        return ((CallFun1<Boolean, String>) mSuperListeners.pop()).call(name);
    }"
25465,databaseList,"    public String[] databaseList() {
        verifyMethodCalledFromDelegate(""databaseList()"");
        return ((CallFun0<String[]>) mSuperListeners.pop()).call();
    }"
25466,createPendingResult,"    public PendingIntent createPendingResult(int requestCode, @NonNull Intent data, int flags) {
        verifyMethodCalledFromDelegate(""createPendingResult(Integer, Intent, Integer)"");
        return ((CallFun3<PendingIntent, Integer, Intent, Integer>) mSuperListeners.pop())
                .call(requestCode, data, flags);"
25467,createPackageContext,"    public Context createPackageContext(String packageName, int flags) throws NameNotFoundException {
        verifyMethodCalledFromDelegate(""createPackageContext(String, Integer)"");
        return ((CallFun2<Context, String, Integer>) mSuperListeners.pop()).call(packageName, flags);
    }"
25468,createDisplayContext,"    public Context createDisplayContext(Display display) {
        verifyMethodCalledFromDelegate(""createDisplayContext(Display)"");
        return ((CallFun1<Context, Display>) mSuperListeners.pop()).call(display);
    }"
25469,createDeviceProtectedStorageContext,"    public Context createDeviceProtectedStorageContext() {
        verifyMethodCalledFromDelegate(""createDeviceProtectedStorageContext()"");
        return ((CallFun0<Context>) mSuperListeners.pop()).call();
    }"
25470,createContextForSplit,"    public Context createContextForSplit(String splitName) throws NameNotFoundException {
        verifyMethodCalledFromDelegate(""createContextForSplit(String)"");
        return ((CallFun1<Context, String>) mSuperListeners.pop()).call(splitName);
    }"
25471,createConfigurationContext,"    public Context createConfigurationContext(Configuration overrideConfiguration) {
        verifyMethodCalledFromDelegate(""createConfigurationContext(Configuration)"");
        return ((CallFun1<Context, Configuration>) mSuperListeners.pop()).call(overrideConfiguration);
    }"
25472,closeOptionsMenu,"    public void closeOptionsMenu() {
        verifyMethodCalledFromDelegate(""closeOptionsMenu()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25473,closeContextMenu,"    public void closeContextMenu() {
        verifyMethodCalledFromDelegate(""closeContextMenu()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25474,clearWallpaper,"    public void clearWallpaper() throws IOException {
        verifyMethodCalledFromDelegate(""clearWallpaper()"");
        ((CallVoid0) mSuperListeners.pop()).call();
    }"
25475,checkUriPermission,"    public int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags) {
        verifyMethodCalledFromDelegate(""checkUriPermission(Uri, String, String, Integer, Integer, Integer)"");
        return ((CallFun6<Integer, Uri, String, String, Integer, Integer, Integer>) mSuperListeners.pop())"
25476,checkUriPermission,"    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags) {
        verifyMethodCalledFromDelegate(""checkUriPermission(Uri, Integer, Integer, Integer)"");
        return ((CallFun4<Integer, Uri, Integer, Integer, Integer>) mSuperListeners.pop())
                .call(uri, pid, uid, modeFlags);"
25477,checkSelfPermission,"    public int checkSelfPermission(String permission) {
        verifyMethodCalledFromDelegate(""checkSelfPermission(String)"");
        return ((CallFun1<Integer, String>) mSuperListeners.pop()).call(permission);
    }"
25478,checkPermission,"    public int checkPermission(String permission, int pid, int uid) {
        verifyMethodCalledFromDelegate(""checkPermission(String, Integer, Integer)"");
        return ((CallFun3<Integer, String, Integer, Integer>) mSuperListeners.pop()).call(permission, pid, uid);
    }"
25479,checkCallingUriPermission,"    public int checkCallingUriPermission(Uri uri, int modeFlags) {
        verifyMethodCalledFromDelegate(""checkCallingUriPermission(Uri, Integer)"");
        return ((CallFun2<Integer, Uri, Integer>) mSuperListeners.pop()).call(uri, modeFlags);
    }"
25480,checkCallingPermission,"    public int checkCallingPermission(String permission) {
        verifyMethodCalledFromDelegate(""checkCallingPermission(String)"");
        return ((CallFun1<Integer, String>) mSuperListeners.pop()).call(permission);
    }"
25481,checkCallingOrSelfUriPermission,"    public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags) {
        verifyMethodCalledFromDelegate(""checkCallingOrSelfUriPermission(Uri, Integer)"");
        return ((CallFun2<Integer, Uri, Integer>) mSuperListeners.pop()).call(uri, modeFlags);
    }"
25482,checkCallingOrSelfPermission,"    public int checkCallingOrSelfPermission(String permission) {
        verifyMethodCalledFromDelegate(""checkCallingOrSelfPermission(String)"");
        return ((CallFun1<Integer, String>) mSuperListeners.pop()).call(permission);
    }"
25483,bindService,"    public boolean bindService(Intent service, ServiceConnection conn, int flags) {
        verifyMethodCalledFromDelegate(""bindService(Intent, ServiceConnection, Integer)"");
        return ((CallFun3<Boolean, Intent, ServiceConnection, Integer>) mSuperListeners.pop())
                .call(service, conn, flags);"
25484,attachBaseContext,"    public void attachBaseContext(Context newBase) {
        verifyMethodCalledFromDelegate(""attachBaseContext(Context)"");
        ((CallVoid1<Context>) mSuperListeners.pop()).call(newBase);
    }"
25485,applyOverrideConfiguration,"    public void applyOverrideConfiguration(Configuration overrideConfiguration) {
        verifyMethodCalledFromDelegate(""applyOverrideConfiguration(Configuration)"");
        ((CallVoid1<Configuration>) mSuperListeners.pop()).call(overrideConfiguration);
    }"
25486,addContentView,"    public void addContentView(View view, LayoutParams params) {
        verifyMethodCalledFromDelegate(""addContentView(View, LayoutParams)"");
        ((CallVoid2<View, LayoutParams>) mSuperListeners.pop()).call(view, params);
    }"
25487,onContextItemSelected,"            public boolean onContextItemSelected(final MenuItem item) {
                return false;
            }"
25490,onKeyDown,"            public boolean onKeyDown(final int keyCode, final KeyEvent event) {
                return super.onKeyDown(25, event);
            }"
25493,testSingleEvent,"    public void testSingleEvent() throws Exception {

        final ActivityPlugin a = spy(new ActivityPlugin());

        final CompositeActivity activity = mock(CompositeActivity.class);
        final ActivityDelegate delegate = new ActivityDelegate(activity);

        delegate.addPlugin(a);

        final KeyEvent event = mock(KeyEvent.class);"
25494,testNoPlugins,"    public void testNoPlugins() throws Exception {

        final CompositeActivity activity = mock(CompositeActivity.class);
        final ActivityDelegate delegate = new ActivityDelegate(activity);

        final KeyEvent event = mock(KeyEvent.class);
        delegate.onKeyDown(1, event);"
25495,onPause,"            public void onPause() {
                beforeCSuper.call();
                super.onPause();
                afterCSuper.call();
            }"
25496,onPause,"            public void onPause() {
                beforeBSuper.call();
                super.onPause();
                afterBSuper.call();
            }"
25504,onKeyDown,"            public boolean onKeyDown(final int keyCode, final KeyEvent event) {
                return true;
            }"
25507,call,"            public void call(final BroadcastReceiver receiver) {
                if (iterator.hasPrevious()) {
                    iterator.previous().unregisterReceiver(this, receiver);"
25508,unregisterReceiver,"    public void unregisterReceiver(BroadcastReceiver receiver) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_unregisterReceiver(receiver);
            return;
        }
"
25511,call,"            public void call(final ComponentCallbacks callback) {
                if (iterator.hasPrevious()) {
                    iterator.previous().unregisterComponentCallbacks(this, callback);"
25512,unregisterComponentCallbacks,"    public void unregisterComponentCallbacks(ComponentCallbacks callback) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_unregisterComponentCallbacks(callback);
            return;
        }
"
25513,call,"            public void call(final ServiceConnection conn) {
                if (iterator.hasPrevious()) {
                    iterator.previous().unbindService(this, conn);"
25514,unbindService,"    public void unbindService(ServiceConnection conn) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_unbindService(conn);
            return;
        }
"
25515,call,"            public void call(final String query, final Bundle appSearchData) {
                if (iterator.hasPrevious()) {
                    iterator.previous().triggerSearch(this, query, appSearchData);"
25516,triggerSearch,"    public void triggerSearch(String query, @Nullable Bundle appSearchData) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_triggerSearch(query, appSearchData);
            return;
        }
"
25517,call,"            public void call(final Boolean get) {
                if (iterator.hasPrevious()) {
                    iterator.previous().takeKeyEvents(this, get);"
25518,takeKeyEvents,"    public void takeKeyEvents(boolean get) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_takeKeyEvents(get);
            return;
        }
"
25519,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().supportStartPostponedEnterTransition(this);"
25520,supportStartPostponedEnterTransition,"    public void supportStartPostponedEnterTransition() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_supportStartPostponedEnterTransition();
            return;
        }
"
25521,call,"            public Boolean call(final Intent targetIntent) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().supportShouldUpRecreateTask(this, targetIntent);"
25522,supportShouldUpRecreateTask,"    public boolean supportShouldUpRecreateTask(@NonNull Intent targetIntent) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_supportShouldUpRecreateTask(targetIntent);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25523,call,"            public Boolean call(final Integer featureId) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().supportRequestWindowFeature(this, featureId);"
25524,supportRequestWindowFeature,"    public boolean supportRequestWindowFeature(int featureId) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_supportRequestWindowFeature(featureId);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25525,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().supportPostponeEnterTransition(this);"
25526,supportPostponeEnterTransition,"    public void supportPostponeEnterTransition() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_supportPostponeEnterTransition();
            return;
        }
"
25527,call,"            public void call(final Intent upIntent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().supportNavigateUpTo(this, upIntent);"
25528,supportNavigateUpTo,"    public void supportNavigateUpTo(@NonNull Intent upIntent) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_supportNavigateUpTo(upIntent);
            return;
        }
"
25529,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().supportInvalidateOptionsMenu(this);"
25530,supportInvalidateOptionsMenu,"    public void supportInvalidateOptionsMenu() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_supportInvalidateOptionsMenu();
            return;
        }
"
25531,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().supportFinishAfterTransition(this);"
25532,supportFinishAfterTransition,"    public void supportFinishAfterTransition() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_supportFinishAfterTransition();
            return;
        }
"
25533,call,"            public Boolean call(final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().superDispatchKeyEvent(this, event);"
25534,superDispatchKeyEvent,"    public boolean superDispatchKeyEvent(KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_superDispatchKeyEvent(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25535,call,"            public Boolean call(final Intent name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().stopService(this, name);"
25536,stopService,"    public boolean stopService(Intent name) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_stopService(name);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25537,call,"            public void call(final Cursor c) {
                if (iterator.hasPrevious()) {
                    iterator.previous().stopManagingCursor(this, c);"
25538,stopManagingCursor,"    public void stopManagingCursor(Cursor c) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_stopManagingCursor(c);
            return;
        }
"
25539,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().stopLockTask(this);"
25540,stopLockTask,"    public void stopLockTask() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_stopLockTask();
            return;
        }
"
25541,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().stopLocalVoiceInteraction(this);"
25542,stopLocalVoiceInteraction,"    public void stopLocalVoiceInteraction() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_stopLocalVoiceInteraction();
            return;
        }
"
25543,call,"            public ActionMode call(final Callback callback) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startSupportActionMode(this, callback);"
25544,startSupportActionMode,"    public ActionMode startSupportActionMode(@NonNull Callback callback) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startSupportActionMode(callback);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25545,call,"            public ComponentName call(final Intent service) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startService(this, service);"
25546,startService,"    public ComponentName startService(Intent service) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startService(service);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25547,call,"            public void call(final String initialQuery, final Boolean selectInitialQuery, final Bundle appSearchData,
                    final Boolean globalSearch) {
                if (iterator.hasPrevious()) {"
25548,startSearch,"    public void startSearch(@Nullable String initialQuery, boolean selectInitialQuery, @Nullable Bundle appSearchData,
            boolean globalSearch) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startSearch(initialQuery, selectInitialQuery, appSearchData, globalSearch);
            return;
        }"
25551,call,"            public Boolean call(final Intent intent, final Bundle options) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startNextMatchingActivity(this, intent, options);"
25552,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent, @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startNextMatchingActivity(intent, options);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25553,call,"            public Boolean call(final Intent intent) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startNextMatchingActivity(this, intent);"
25554,startNextMatchingActivity,"    public boolean startNextMatchingActivity(@NonNull Intent intent) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startNextMatchingActivity(intent);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25555,call,"            public void call(final Cursor c) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startManagingCursor(this, c);"
25556,startManagingCursor,"    public void startManagingCursor(Cursor c) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startManagingCursor(c);
            return;
        }
"
25557,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().startLockTask(this);"
25558,startLockTask,"    public void startLockTask() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startLockTask();
            return;
        }
"
25559,call,"            public void call(final Bundle privateOptions) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startLocalVoiceInteraction(this, privateOptions);"
25560,startLocalVoiceInteraction,"    public void startLocalVoiceInteraction(Bundle privateOptions) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startLocalVoiceInteraction(privateOptions);
            return;
        }
"
25561,call,"            public void call(final Fragment fragment, final IntentSender intent, final Integer requestCode,
                    final Intent fillInIntent, final Integer flagsMask, final Integer flagsValues,
                    final Integer extraFlags, final Bundle options) {"
25562,startIntentSenderFromFragment,"    public void startIntentSenderFromFragment(Fragment fragment, IntentSender intent, int requestCode,
            @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)
            throws SendIntentException {
        if (mPlugins.isEmpty()) {
            try {
                getOriginal()"
25563,call,"            public void call(final Activity child, final IntentSender intent, final Integer requestCode,
                    final Intent fillInIntent, final Integer flagsMask, final Integer flagsValues,
                    final Integer extraFlags, final Bundle options) {"
25565,call,"            public void call(final Activity child, final IntentSender intent, final Integer requestCode,
                    final Intent fillInIntent, final Integer flagsMask, final Integer flagsValues,
                    final Integer extraFlags) {"
25566,startIntentSenderFromChild,"    public void startIntentSenderFromChild(Activity child, IntentSender intent, int requestCode, Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        if (mPlugins.isEmpty()) {
            try {
                getOriginal().super_startIntentSenderFromChild(child, intent, requestCode, fillInIntent, flagsMask,
                        flagsValues, extraFlags);"
25569,call,"            public void call(final IntentSender intent, final Integer requestCode, final Intent fillInIntent,
                    final Integer flagsMask, final Integer flagsValues, final Integer extraFlags) {
                if (iterator.hasPrevious()) {"
25570,startIntentSenderForResult,"    public void startIntentSenderForResult(IntentSender intent, int requestCode, @Nullable Intent fillInIntent,
            int flagsMask, int flagsValues, int extraFlags) throws SendIntentException {
        if (mPlugins.isEmpty()) {
            try {
                getOriginal()
                        .super_startIntentSenderForResult(intent, requestCode, fillInIntent, flagsMask, flagsValues,"
25571,call,"            public void call(final IntentSender intent, final Intent fillInIntent, final Integer flagsMask,
                    final Integer flagsValues, final Integer extraFlags, final Bundle options) {
                if (iterator.hasPrevious()) {"
25572,startIntentSender,"    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags, Bundle options) throws SendIntentException {
        if (mPlugins.isEmpty()) {
            try {
                getOriginal()
                        .super_startIntentSender(intent, fillInIntent, flagsMask, flagsValues, extraFlags, options);"
25573,call,"            public void call(final IntentSender intent, final Intent fillInIntent, final Integer flagsMask,
                    final Integer flagsValues, final Integer extraFlags) {
                if (iterator.hasPrevious()) {"
25574,startIntentSender,"    public void startIntentSender(IntentSender intent, @Nullable Intent fillInIntent, int flagsMask, int flagsValues,
            int extraFlags) throws SendIntentException {
        if (mPlugins.isEmpty()) {
            try {
                getOriginal().super_startIntentSender(intent, fillInIntent, flagsMask, flagsValues, extraFlags);
            } catch (SendIntentException e) {"
25575,call,"            public Boolean call(final ComponentName className, final String profileFile, final Bundle arguments) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startInstrumentation(this, className, profileFile, arguments);"
25576,startInstrumentation,"    public boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startInstrumentation(className, profileFile, arguments);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25577,call,"            public ComponentName call(final Intent service) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startForegroundService(this, service);"
25578,startForegroundService,"    public ComponentName startForegroundService(Intent service) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startForegroundService(service);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25579,call,"            public Boolean call(final Intent intent, final Integer requestCode, final Bundle options) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startActivityIfNeeded(this, intent, requestCode, options);"
25580,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode, @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startActivityIfNeeded(intent, requestCode, options);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25581,call,"            public Boolean call(final Intent intent, final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startActivityIfNeeded(this, intent, requestCode);"
25582,startActivityIfNeeded,"    public boolean startActivityIfNeeded(@NonNull Intent intent, int requestCode) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startActivityIfNeeded(intent, requestCode);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25583,call,"            public void call(final android.app.Fragment fragment, final Intent intent, final Integer requestCode,
                    final Bundle options) {
                if (iterator.hasPrevious()) {"
25584,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityFromFragment(fragment, intent, requestCode, options);
            return;
        }"
25585,call,"            public void call(final android.app.Fragment fragment, final Intent intent, final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivityFromFragment(this, fragment, intent, requestCode);"
25586,startActivityFromFragment,"    public void startActivityFromFragment(@NonNull android.app.Fragment fragment, Intent intent, int requestCode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityFromFragment(fragment, intent, requestCode);
            return;
        }
"
25587,call,"            public void call(final Fragment fragment, final Intent intent, final Integer requestCode,
                    final Bundle options) {
                if (iterator.hasPrevious()) {"
25588,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode,
            @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityFromFragment(fragment, intent, requestCode, options);
            return;
        }"
25589,call,"            public void call(final Fragment fragment, final Intent intent, final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivityFromFragment(this, fragment, intent, requestCode);"
25590,startActivityFromFragment,"    public void startActivityFromFragment(Fragment fragment, Intent intent, int requestCode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityFromFragment(fragment, intent, requestCode);
            return;
        }
"
25591,call,"            public void call(final Activity child, final Intent intent, final Integer requestCode,
                    final Bundle options) {
                if (iterator.hasPrevious()) {"
25592,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode,
            @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityFromChild(child, intent, requestCode, options);
            return;
        }"
25593,call,"            public void call(final Activity child, final Intent intent, final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivityFromChild(this, child, intent, requestCode);"
25594,startActivityFromChild,"    public void startActivityFromChild(@NonNull Activity child, Intent intent, int requestCode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivityFromChild(child, intent, requestCode);
            return;
        }
"
25603,call,"            public void call(final Intent[] intents, final Bundle options) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivities(this, intents, options);"
25604,startActivities,"    public void startActivities(Intent[] intents, @Nullable Bundle options) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivities(intents, options);
            return;
        }
"
25605,call,"            public void call(final Intent[] intents) {
                if (iterator.hasPrevious()) {
                    iterator.previous().startActivities(this, intents);"
25606,startActivities,"    public void startActivities(Intent[] intents) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_startActivities(intents);
            return;
        }
"
25607,call,"            public android.view.ActionMode call(final android.view.ActionMode.Callback callback, final Integer type) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startActionMode(this, callback, type);"
25608,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback, int type) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startActionMode(callback, type);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25609,call,"            public android.view.ActionMode call(final android.view.ActionMode.Callback callback) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().startActionMode(this, callback);"
25610,startActionMode,"    public android.view.ActionMode startActionMode(android.view.ActionMode.Callback callback) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_startActionMode(callback);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25611,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().showLockTaskEscapeMessage(this);"
25612,showLockTaskEscapeMessage,"    public void showLockTaskEscapeMessage() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_showLockTaskEscapeMessage();
            return;
        }
"
25613,call,"            public Boolean call(final Bundle args) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().showAssist(this, args);"
25614,showAssist,"    public boolean showAssist(Bundle args) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_showAssist(args);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25615,call,"            public Boolean call(final Intent targetIntent) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().shouldUpRecreateTask(this, targetIntent);"
25616,shouldUpRecreateTask,"    public boolean shouldUpRecreateTask(Intent targetIntent) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_shouldUpRecreateTask(targetIntent);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25618,shouldShowRequestPermissionRationale,"    public boolean shouldShowRequestPermissionRationale(@NonNull String permission) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_shouldShowRequestPermissionRationale(permission);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25619,call,"            public void call(final InputStream data) {
                if (iterator.hasPrevious()) {
                    try {"
25620,setWallpaper,"    public void setWallpaper(InputStream data) throws IOException {
        if (mPlugins.isEmpty()) {
            try {
                getOriginal().super_setWallpaper(data);
            } catch (IOException e) {
                throw new SuppressedException(e);"
25621,call,"            public void call(final Boolean enabled, final ComponentName requestedComponent) {
                if (iterator.hasPrevious()) {
                    try {"
25622,setVrModeEnabled,"    public void setVrModeEnabled(boolean enabled, @NonNull ComponentName requestedComponent)
            throws NameNotFoundException {
        if (mPlugins.isEmpty()) {
            try {
                getOriginal().super_setVrModeEnabled(enabled, requestedComponent);
            } catch (NameNotFoundException e) {"
25623,call,"            public void call(final Boolean visible) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setVisible(this, visible);"
25624,setVisible,"    public void setVisible(boolean visible) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setVisible(visible);
            return;
        }
"
25625,call,"            public void call(final Boolean turnScreenOn) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setTurnScreenOn(this, turnScreenOn);"
25626,setTurnScreenOn,"    public void setTurnScreenOn(boolean turnScreenOn) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setTurnScreenOn(turnScreenOn);
            return;
        }
"
25627,call,"            public void call(final Integer textColor) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setTitleColor(this, textColor);"
25628,setTitleColor,"    public void setTitleColor(int textColor) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setTitleColor(textColor);
            return;
        }
"
25629,call,"            public void call(final Integer titleId) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setTitle(this, titleId);"
25630,setTitle,"    public void setTitle(int titleId) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setTitle(titleId);
            return;
        }
"
25631,call,"            public void call(final CharSequence title) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setTitle(this, title);"
25632,setTitle,"    public void setTitle(CharSequence title) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setTitle(title);
            return;
        }
"
25633,call,"            public void call(final TaskDescription taskDescription) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setTaskDescription(this, taskDescription);"
25634,setTaskDescription,"    public void setTaskDescription(TaskDescription taskDescription) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setTaskDescription(taskDescription);
            return;
        }
"
25635,call,"            public void call(final Boolean visible) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setSupportProgressBarVisibility(this, visible);"
25636,setSupportProgressBarVisibility,"    public void setSupportProgressBarVisibility(boolean visible) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setSupportProgressBarVisibility(visible);
            return;
        }
"
25637,call,"            public void call(final Boolean visible) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setSupportProgressBarIndeterminateVisibility(this, visible);"
25638,setSupportProgressBarIndeterminateVisibility,"    public void setSupportProgressBarIndeterminateVisibility(boolean visible) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setSupportProgressBarIndeterminateVisibility(visible);
            return;
        }
"
25639,call,"            public void call(final Boolean indeterminate) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setSupportProgressBarIndeterminate(this, indeterminate);"
25640,setSupportProgressBarIndeterminate,"    public void setSupportProgressBarIndeterminate(boolean indeterminate) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setSupportProgressBarIndeterminate(indeterminate);
            return;
        }
"
25641,call,"            public void call(final Integer progress) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setSupportProgress(this, progress);"
25642,setSupportProgress,"    public void setSupportProgress(int progress) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setSupportProgress(progress);
            return;
        }
"
25643,call,"            public void call(final Boolean showWhenLocked) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setShowWhenLocked(this, showWhenLocked);"
25644,setShowWhenLocked,"    public void setShowWhenLocked(boolean showWhenLocked) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setShowWhenLocked(showWhenLocked);
            return;
        }
"
25645,call,"            public void call(final PictureInPictureParams params) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setPictureInPictureParams(this, params);"
25646,setPictureInPictureParams,"    public void setPictureInPictureParams(@NonNull PictureInPictureParams params) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setPictureInPictureParams(params);
            return;
        }
"
25647,call,"            public void call(final Boolean finish) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setFinishOnTouchOutside(this, finish);"
25648,setFinishOnTouchOutside,"    public void setFinishOnTouchOutside(boolean finish) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setFinishOnTouchOutside(finish);
            return;
        }
"
25649,call,"            public void call(final android.app.SharedElementCallback callback) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setExitSharedElementCallback(this, callback);"
25650,setExitSharedElementCallback,"    public void setExitSharedElementCallback(android.app.SharedElementCallback callback) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setExitSharedElementCallback(callback);
            return;
        }
"
25651,call,"            public void call(final SharedElementCallback listener) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setExitSharedElementCallback(this, listener);"
25652,setExitSharedElementCallback,"    public void setExitSharedElementCallback(SharedElementCallback listener) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setExitSharedElementCallback(listener);
            return;
        }
"
25653,call,"            public void call(final android.app.SharedElementCallback callback) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setEnterSharedElementCallback(this, callback);"
25654,setEnterSharedElementCallback,"    public void setEnterSharedElementCallback(android.app.SharedElementCallback callback) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setEnterSharedElementCallback(callback);
            return;
        }
"
25657,call,"            public void call(final View view, final LayoutParams params) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setContentView(this, view, params);"
25658,setContentView,"    public void setContentView(View view, LayoutParams params) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setContentView(view, params);
            return;
        }
"
25659,call,"            public void call(final View view) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setContentView(this, view);"
25660,setContentView,"    public void setContentView(View view) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setContentView(view);
            return;
        }
"
25661,call,"            public void call(final Integer layoutResID) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setContentView(this, layoutResID);"
25662,setContentView,"    public void setContentView(int layoutResID) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setContentView(layoutResID);
            return;
        }
"
25663,call,"            public void call(final Intent intent, final UserHandle user, final BroadcastReceiver resultReceiver,
                    final Handler scheduler, final Integer initialCode, final String initialData,
                    final Bundle initialExtras) {"
25664,sendStickyOrderedBroadcastAsUser,"    public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_sendStickyOrderedBroadcastAsUser(intent, user, resultReceiver, scheduler, initialCode,
                    initialData, initialExtras);
            return;"
25665,call,"            public void call(final Intent intent, final BroadcastReceiver resultReceiver, final Handler scheduler,
                    final Integer initialCode, final String initialData, final Bundle initialExtras) {
                if (iterator.hasPrevious()) {"
25666,sendStickyOrderedBroadcast,"    public void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler,
            int initialCode, String initialData, Bundle initialExtras) {
        if (mPlugins.isEmpty()) {
            getOriginal()
                    .super_sendStickyOrderedBroadcast(intent, resultReceiver, scheduler, initialCode, initialData,
                            initialExtras);"
25667,call,"            public void call(final Intent intent, final UserHandle user) {
                if (iterator.hasPrevious()) {
                    iterator.previous().sendStickyBroadcastAsUser(this, intent, user);"
25668,sendStickyBroadcastAsUser,"    public void sendStickyBroadcastAsUser(Intent intent, UserHandle user) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_sendStickyBroadcastAsUser(intent, user);
            return;
        }
"
25669,call,"            public void call(final Intent intent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().sendStickyBroadcast(this, intent);"
25670,sendStickyBroadcast,"    public void sendStickyBroadcast(Intent intent) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_sendStickyBroadcast(intent);
            return;
        }
"
25671,call,"            public void call(final Intent intent, final UserHandle user, final String receiverPermission,
                    final BroadcastReceiver resultReceiver, final Handler scheduler, final Integer initialCode,
                    final String initialData, final Bundle initialExtras) {"
25672,sendOrderedBroadcastAsUser,"    public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission,
            BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData,
            Bundle initialExtras) {
        if (mPlugins.isEmpty()) {
            getOriginal()
                    .super_sendOrderedBroadcastAsUser(intent, user, receiverPermission, resultReceiver, scheduler,"
25673,call,"            public void call(final Intent intent, final String receiverPermission,
                    final BroadcastReceiver resultReceiver, final Handler scheduler, final Integer initialCode,
                    final String initialData, final Bundle initialExtras) {"
25674,sendOrderedBroadcast,"    public void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver,
            Handler scheduler, int initialCode, String initialData, Bundle initialExtras) {
        if (mPlugins.isEmpty()) {
            getOriginal()
                    .super_sendOrderedBroadcast(intent, receiverPermission, resultReceiver, scheduler, initialCode,
                            initialData, initialExtras);"
25675,call,"            public void call(final Intent intent, final String receiverPermission) {
                if (iterator.hasPrevious()) {
                    iterator.previous().sendOrderedBroadcast(this, intent, receiverPermission);"
25676,sendOrderedBroadcast,"    public void sendOrderedBroadcast(Intent intent, String receiverPermission) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_sendOrderedBroadcast(intent, receiverPermission);
            return;
        }
"
25677,call,"            public void call(final Intent intent, final UserHandle user, final String receiverPermission) {
                if (iterator.hasPrevious()) {
                    iterator.previous().sendBroadcastAsUser(this, intent, user, receiverPermission);"
25678,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_sendBroadcastAsUser(intent, user, receiverPermission);
            return;
        }
"
25679,call,"            public void call(final Intent intent, final UserHandle user) {
                if (iterator.hasPrevious()) {
                    iterator.previous().sendBroadcastAsUser(this, intent, user);"
25680,sendBroadcastAsUser,"    public void sendBroadcastAsUser(Intent intent, UserHandle user) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_sendBroadcastAsUser(intent, user);
            return;
        }
"
25681,call,"            public void call(final Intent intent, final String receiverPermission) {
                if (iterator.hasPrevious()) {
                    iterator.previous().sendBroadcast(this, intent, receiverPermission);"
25682,sendBroadcast,"    public void sendBroadcast(Intent intent, String receiverPermission) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_sendBroadcast(intent, receiverPermission);
            return;
        }
"
25683,call,"            public void call(final Intent intent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().sendBroadcast(this, intent);"
25684,sendBroadcast,"    public void sendBroadcast(Intent intent) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_sendBroadcast(intent);
            return;
        }
"
25685,call,"            public void call(final String targetPackage, final Uri uri, final Integer modeFlags) {
                if (iterator.hasPrevious()) {
                    iterator.previous().revokeUriPermission(this, targetPackage, uri, modeFlags);"
25686,revokeUriPermission,"    public void revokeUriPermission(String targetPackage, Uri uri, int modeFlags) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_revokeUriPermission(targetPackage, uri, modeFlags);
            return;
        }
"
25687,call,"            public void call(final Uri uri, final Integer modeFlags) {
                if (iterator.hasPrevious()) {
                    iterator.previous().revokeUriPermission(this, uri, modeFlags);"
25688,revokeUriPermission,"    public void revokeUriPermission(Uri uri, int modeFlags) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_revokeUriPermission(uri, modeFlags);
            return;
        }
"
25689,call,"            public Boolean call(final Boolean visible) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().requestVisibleBehind(this, visible);"
25690,requestVisibleBehind,"    public boolean requestVisibleBehind(boolean visible) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_requestVisibleBehind(visible);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25691,call,"            public DragAndDropPermissions call(final DragEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().requestDragAndDropPermissions(this, event);"
25692,requestDragAndDropPermissions,"    public DragAndDropPermissions requestDragAndDropPermissions(DragEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_requestDragAndDropPermissions(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25693,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().reportFullyDrawn(this);"
25694,reportFullyDrawn,"    public void reportFullyDrawn() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_reportFullyDrawn();
            return;
        }
"
25695,call,"            public void call(final Intent intent, final UserHandle user) {
                if (iterator.hasPrevious()) {
                    iterator.previous().removeStickyBroadcastAsUser(this, intent, user);"
25696,removeStickyBroadcastAsUser,"    public void removeStickyBroadcastAsUser(Intent intent, UserHandle user) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_removeStickyBroadcastAsUser(intent, user);
            return;
        }
"
25697,call,"            public void call(final Intent intent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().removeStickyBroadcast(this, intent);"
25698,removeStickyBroadcast,"    public void removeStickyBroadcast(Intent intent) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_removeStickyBroadcast(intent);
            return;
        }
"
25699,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().releaseInstance(this);"
25700,releaseInstance,"    public boolean releaseInstance() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_releaseInstance();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25701,call,"            public Intent call(final BroadcastReceiver receiver, final IntentFilter filter,
                    final String broadcastPermission, final Handler scheduler, final Integer flags) {
                if (iterator.hasPrevious()) {"
25702,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler, int flags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_registerReceiver(receiver, filter, broadcastPermission, scheduler, flags);
        }
"
25703,call,"            public Intent call(final BroadcastReceiver receiver, final IntentFilter filter,
                    final String broadcastPermission, final Handler scheduler) {
                if (iterator.hasPrevious()) {"
25704,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission,
            Handler scheduler) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_registerReceiver(receiver, filter, broadcastPermission, scheduler);
        }
"
25705,call,"            public Intent call(final BroadcastReceiver receiver, final IntentFilter filter, final Integer flags) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().registerReceiver(this, receiver, filter, flags);"
25706,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_registerReceiver(receiver, filter, flags);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25707,call,"            public Intent call(final BroadcastReceiver receiver, final IntentFilter filter) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().registerReceiver(this, receiver, filter);"
25708,registerReceiver,"    public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_registerReceiver(receiver, filter);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25711,call,"            public void call(final ComponentCallbacks callback) {
                if (iterator.hasPrevious()) {
                    iterator.previous().registerComponentCallbacks(this, callback);"
25712,registerComponentCallbacks,"    public void registerComponentCallbacks(ComponentCallbacks callback) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_registerComponentCallbacks(callback);
            return;
        }
"
25713,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().recreate(this);"
25714,recreate,"    public void recreate() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_recreate();
            return;
        }
"
25715,call,"            public void call(final SupportActivity.ExtraData extraData) {
                if (iterator.hasPrevious()) {
                    iterator.previous().putExtraData(this, extraData);"
25716,putExtraData,"    public void putExtraData(ExtraData extraData) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_putExtraData(extraData);
            return;
        }
"
25719,call,"            public Drawable call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().peekWallpaper(this);"
25720,peekWallpaper,"    public Drawable peekWallpaper() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_peekWallpaper();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25721,call,"            public void call(final Integer enterAnim, final Integer exitAnim) {
                if (iterator.hasPrevious()) {
                    iterator.previous().overridePendingTransition(this, enterAnim, exitAnim);"
25722,overridePendingTransition,"    public void overridePendingTransition(int enterAnim, int exitAnim) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_overridePendingTransition(enterAnim, exitAnim);
            return;
        }
"
25723,call,"            public SQLiteDatabase call(final String name, final Integer mode, final CursorFactory factory,
                    final DatabaseErrorHandler errorHandler) {
                if (iterator.hasPrevious()) {"
25724,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory,
            DatabaseErrorHandler errorHandler) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_openOrCreateDatabase(name, mode, factory, errorHandler);
        }
"
25725,call,"            public SQLiteDatabase call(final String name, final Integer mode, final CursorFactory factory) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().openOrCreateDatabase(this, name, mode, factory);"
25726,openOrCreateDatabase,"    public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_openOrCreateDatabase(name, mode, factory);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25727,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().openOptionsMenu(this);"
25728,openOptionsMenu,"    public void openOptionsMenu() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_openOptionsMenu();
            return;
        }
"
25729,call,"            public FileOutputStream call(final String name, final Integer mode) {
                if (iterator.hasPrevious()) {
                    try {"
25730,openFileOutput,"    public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException {
        if (mPlugins.isEmpty()) {
            try {
                return getOriginal().super_openFileOutput(name, mode);
            } catch (FileNotFoundException e) {
                throw new SuppressedException(e);"
25731,call,"            public FileInputStream call(final String name) {
                if (iterator.hasPrevious()) {
                    try {"
25732,openFileInput,"    public FileInputStream openFileInput(String name) throws FileNotFoundException {
        if (mPlugins.isEmpty()) {
            try {
                return getOriginal().super_openFileInput(name);
            } catch (FileNotFoundException e) {
                throw new SuppressedException(e);"
25733,call,"            public void call(final View view) {
                if (iterator.hasPrevious()) {
                    iterator.previous().openContextMenu(this, view);"
25734,openContextMenu,"    public void openContextMenu(View view) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_openContextMenu(view);
            return;
        }
"
25735,call,"            public ActionMode call(final Callback callback) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onWindowStartingSupportActionMode(this, callback);"
25736,onWindowStartingSupportActionMode,"    public ActionMode onWindowStartingSupportActionMode(@NonNull Callback callback) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onWindowStartingSupportActionMode(callback);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25737,call,"            public android.view.ActionMode call(final android.view.ActionMode.Callback callback, final Integer type) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onWindowStartingActionMode(this, callback, type);"
25738,onWindowStartingActionMode,"    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback, int type) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onWindowStartingActionMode(callback, type);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25739,call,"            public android.view.ActionMode call(final android.view.ActionMode.Callback callback) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onWindowStartingActionMode(this, callback);"
25740,onWindowStartingActionMode,"    public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback callback) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onWindowStartingActionMode(callback);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25741,call,"            public void call(final Boolean hasFocus) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onWindowFocusChanged(this, hasFocus);"
25742,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onWindowFocusChanged(hasFocus);
            return;
        }
"
25743,call,"            public void call(final WindowManager.LayoutParams params) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onWindowAttributesChanged(this, params);"
25744,onWindowAttributesChanged,"    public void onWindowAttributesChanged(WindowManager.LayoutParams params) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onWindowAttributesChanged(params);
            return;
        }
"
25745,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onVisibleBehindCanceled(this);"
25746,onVisibleBehindCanceled,"    public void onVisibleBehindCanceled() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onVisibleBehindCanceled();
            return;
        }
"
25747,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onUserLeaveHint(this);"
25748,onUserLeaveHint,"    public void onUserLeaveHint() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onUserLeaveHint();
            return;
        }
"
25749,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onUserInteraction(this);"
25750,onUserInteraction,"    public void onUserInteraction() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onUserInteraction();
            return;
        }
"
25751,call,"            public void call(final Integer level) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onTrimMemory(this, level);"
25752,onTrimMemory,"    public void onTrimMemory(int level) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onTrimMemory(level);
            return;
        }
"
25753,call,"            public Boolean call(final MotionEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onTrackballEvent(this, event);"
25754,onTrackballEvent,"    public boolean onTrackballEvent(MotionEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onTrackballEvent(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25755,call,"            public Boolean call(final MotionEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onTouchEvent(this, event);"
25756,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onTouchEvent(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25757,call,"            public void call(final CharSequence title, final Integer color) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onTitleChanged(this, title, color);"
25758,onTitleChanged,"    public void onTitleChanged(CharSequence title, int color) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onTitleChanged(title, color);
            return;
        }
"
25759,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onSupportNavigateUp(this);"
25760,onSupportNavigateUp,"    public boolean onSupportNavigateUp() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onSupportNavigateUp();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25761,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onSupportContentChanged(this);"
25762,onSupportContentChanged,"    public void onSupportContentChanged() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onSupportContentChanged();
            return;
        }
"
25763,call,"            public void call(final ActionMode mode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onSupportActionModeStarted(this, mode);"
25764,onSupportActionModeStarted,"    public void onSupportActionModeStarted(@NonNull ActionMode mode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onSupportActionModeStarted(mode);
            return;
        }
"
25765,call,"            public void call(final ActionMode mode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onSupportActionModeFinished(this, mode);"
25766,onSupportActionModeFinished,"    public void onSupportActionModeFinished(@NonNull ActionMode mode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onSupportActionModeFinished(mode);
            return;
        }
"
25769,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onStateNotSaved(this);"
25770,onStateNotSaved,"    public void onStateNotSaved() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onStateNotSaved();
            return;
        }
"
25773,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onSearchRequested(this);"
25774,onSearchRequested,"    public boolean onSearchRequested() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onSearchRequested();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25775,call,"            public Boolean call(final SearchEvent searchEvent) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onSearchRequested(this, searchEvent);"
25776,onSearchRequested,"    public boolean onSearchRequested(@Nullable SearchEvent searchEvent) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onSearchRequested(searchEvent);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25777,call,"            public void call(final Bundle outState, final PersistableBundle outPersistentState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onSaveInstanceState(this, outState, outPersistentState);"
25778,onSaveInstanceState,"    public void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onSaveInstanceState(outState, outPersistentState);
            return;
        }
"
25780,onSaveInstanceState,"    public void onSaveInstanceState(Bundle outState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onSaveInstanceState(outState);
            return;
        }
"
25781,onRetainNonConfigurationInstance,"    public Object onRetainNonConfigurationInstance() {
        final NonConfigurationInstanceWrapper all = new NonConfigurationInstanceWrapper(
                getOriginal().onRetainCompositeCustomNonConfigurationInstance());
        for (final ActivityPlugin plugin : mPlugins) {
            final CompositeNonConfigurationInstance pluginNci = plugin"
25782,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onResumeFragments(this);"
25783,onResumeFragments,"    public void onResumeFragments() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onResumeFragments();
            return;
        }
"
25786,call,"            public void call(final Bundle savedInstanceState, final PersistableBundle persistentState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onRestoreInstanceState(this, savedInstanceState, persistentState);"
25787,onRestoreInstanceState,"    public void onRestoreInstanceState(Bundle savedInstanceState, PersistableBundle persistentState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onRestoreInstanceState(savedInstanceState, persistentState);
            return;
        }
"
25788,call,"            public void call(final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onRestoreInstanceState(this, savedInstanceState);"
25789,onRestoreInstanceState,"    public void onRestoreInstanceState(Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onRestoreInstanceState(savedInstanceState);
            return;
        }
"
25790,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onRestart(this);"
25791,onRestart,"    public void onRestart() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onRestart();
            return;
        }
"
25794,call,"            public Uri call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onProvideReferrer(this);"
25795,onProvideReferrer,"    public Uri onProvideReferrer() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onProvideReferrer();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25796,call,"            public void call(final List<KeyboardShortcutGroup> data, final Menu menu, final Integer deviceId) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onProvideKeyboardShortcuts(this, data, menu, deviceId);"
25797,onProvideKeyboardShortcuts,"    public void onProvideKeyboardShortcuts(List<KeyboardShortcutGroup> data, Menu menu, int deviceId) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onProvideKeyboardShortcuts(data, menu, deviceId);
            return;
        }
"
25798,call,"            public void call(final Bundle data) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onProvideAssistData(this, data);"
25799,onProvideAssistData,"    public void onProvideAssistData(Bundle data) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onProvideAssistData(data);
            return;
        }
"
25800,call,"            public void call(final AssistContent outContent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onProvideAssistContent(this, outContent);"
25801,onProvideAssistContent,"    public void onProvideAssistContent(AssistContent outContent) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onProvideAssistContent(outContent);
            return;
        }
"
25802,call,"            public void call(final TaskStackBuilder builder) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPrepareSupportNavigateUpTaskStack(this, builder);"
25803,onPrepareSupportNavigateUpTaskStack,"    public void onPrepareSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPrepareSupportNavigateUpTaskStack(builder);
            return;
        }
"
25804,call,"            public Boolean call(final Integer featureId, final View view, final Menu menu) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onPreparePanel(this, featureId, view, menu);"
25805,onPreparePanel,"    public boolean onPreparePanel(int featureId, View view, Menu menu) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onPreparePanel(featureId, view, menu);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25806,call,"            public Boolean call(final View view, final Menu menu) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onPrepareOptionsPanel(this, view, menu);"
25807,onPrepareOptionsPanel,"    public boolean onPrepareOptionsPanel(View view, Menu menu) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onPrepareOptionsPanel(view, menu);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25808,call,"            public Boolean call(final Menu menu) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onPrepareOptionsMenu(this, menu);"
25809,onPrepareOptionsMenu,"    public boolean onPrepareOptionsMenu(Menu menu) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onPrepareOptionsMenu(menu);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25810,call,"            public void call(final android.app.TaskStackBuilder builder) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPrepareNavigateUpTaskStack(this, builder);"
25811,onPrepareNavigateUpTaskStack,"    public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPrepareNavigateUpTaskStack(builder);
            return;
        }
"
25812,call,"            public void call(final Integer id, final Dialog dialog, final Bundle args) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPrepareDialog(this, id, dialog, args);"
25813,onPrepareDialog,"    public void onPrepareDialog(int id, Dialog dialog, Bundle args) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPrepareDialog(id, dialog, args);
            return;
        }
"
25814,call,"            public void call(final Integer id, final Dialog dialog) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPrepareDialog(this, id, dialog);"
25815,onPrepareDialog,"    public void onPrepareDialog(int id, Dialog dialog) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPrepareDialog(id, dialog);
            return;
        }
"
25816,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPostResume(this);"
25817,onPostResume,"    public void onPostResume() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPostResume();
            return;
        }
"
25818,call,"            public void call(final Bundle savedInstanceState, final PersistableBundle persistentState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPostCreate(this, savedInstanceState, persistentState);"
25819,onPostCreate,"    public void onPostCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPostCreate(savedInstanceState, persistentState);
            return;
        }
"
25820,call,"            public void call(final Bundle savedInstanceState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPostCreate(this, savedInstanceState);"
25821,onPostCreate,"    public void onPostCreate(@Nullable Bundle savedInstanceState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPostCreate(savedInstanceState);
            return;
        }
"
25822,call,"            public void call(final Boolean isInPictureInPictureMode, final Configuration newConfig) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPictureInPictureModeChanged(this, isInPictureInPictureMode, newConfig);"
25823,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig);
            return;
        }
"
25828,call,"            public void call(final Integer featureId, final Menu menu) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onPanelClosed(this, featureId, menu);"
25829,onPanelClosed,"    public void onPanelClosed(int featureId, Menu menu) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onPanelClosed(featureId, menu);
            return;
        }
"
25833,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onOptionsItemSelected(item);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25834,call,"            public void call(final Intent intent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onNewIntent(this, intent);"
25835,onNewIntent,"    public void onNewIntent(Intent intent) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onNewIntent(intent);
            return;
        }
"
25836,call,"            public Boolean call(final Activity child) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onNavigateUpFromChild(this, child);"
25837,onNavigateUpFromChild,"    public boolean onNavigateUpFromChild(Activity child) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onNavigateUpFromChild(child);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25838,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onNavigateUp(this);"
25839,onNavigateUp,"    public boolean onNavigateUp() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onNavigateUp();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25840,call,"            public void call(final Boolean isInMultiWindowMode, final Configuration newConfig) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onMultiWindowModeChanged(this, isInMultiWindowMode, newConfig);"
25841,onMultiWindowModeChanged,"    public void onMultiWindowModeChanged(boolean isInMultiWindowMode, Configuration newConfig) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onMultiWindowModeChanged(isInMultiWindowMode, newConfig);
            return;
        }
"
25844,call,"            public Boolean call(final Integer featureId, final Menu menu) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onMenuOpened(this, featureId, menu);"
25845,onMenuOpened,"    public boolean onMenuOpened(int featureId, Menu menu) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onMenuOpened(featureId, menu);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25848,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onLocalVoiceInteractionStopped(this);"
25849,onLocalVoiceInteractionStopped,"    public void onLocalVoiceInteractionStopped() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onLocalVoiceInteractionStopped();
            return;
        }
"
25850,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onLocalVoiceInteractionStarted(this);"
25851,onLocalVoiceInteractionStarted,"    public void onLocalVoiceInteractionStarted() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onLocalVoiceInteractionStarted();
            return;
        }
"
25852,call,"            public Boolean call(final Integer keyCode, final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onKeyUp(this, keyCode, event);"
25853,onKeyUp,"    public boolean onKeyUp(int keyCode, KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onKeyUp(keyCode, event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25854,call,"            public Boolean call(final Integer keyCode, final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onKeyShortcut(this, keyCode, event);"
25855,onKeyShortcut,"    public boolean onKeyShortcut(int keyCode, KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onKeyShortcut(keyCode, event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25856,call,"            public Boolean call(final Integer keyCode, final Integer repeatCount, final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onKeyMultiple(this, keyCode, repeatCount, event);"
25857,onKeyMultiple,"    public boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onKeyMultiple(keyCode, repeatCount, event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25858,call,"            public Boolean call(final Integer keyCode, final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onKeyLongPress(this, keyCode, event);"
25859,onKeyLongPress,"    public boolean onKeyLongPress(int keyCode, KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onKeyLongPress(keyCode, event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25860,call,"            public Boolean call(final Integer keyCode, final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onKeyDown(this, keyCode, event);"
25861,onKeyDown,"    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onKeyDown(keyCode, event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25862,call,"            public Boolean call(final MotionEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onGenericMotionEvent(this, event);"
25863,onGenericMotionEvent,"    public boolean onGenericMotionEvent(MotionEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onGenericMotionEvent(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25864,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onEnterAnimationComplete(this);"
25865,onEnterAnimationComplete,"    public void onEnterAnimationComplete() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onEnterAnimationComplete();
            return;
        }
"
25866,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onDetachedFromWindow(this);"
25867,onDetachedFromWindow,"    public void onDetachedFromWindow() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onDetachedFromWindow();
            return;
        }
"
25870,call,"            public View call(final String name, final Context context, final AttributeSet attrs) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateView(this, name, context, attrs);"
25871,onCreateView,"    public View onCreateView(String name, Context context, AttributeSet attrs) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateView(name, context, attrs);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25872,call,"            public View call(final View parent, final String name, final Context context, final AttributeSet attrs) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateView(this, parent, name, context, attrs);"
25873,onCreateView,"    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateView(parent, name, context, attrs);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25874,call,"            public Boolean call(final Bitmap outBitmap, final Canvas canvas) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateThumbnail(this, outBitmap, canvas);"
25875,onCreateThumbnail,"    public boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateThumbnail(outBitmap, canvas);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25876,call,"            public void call(final TaskStackBuilder builder) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onCreateSupportNavigateUpTaskStack(this, builder);"
25877,onCreateSupportNavigateUpTaskStack,"    public void onCreateSupportNavigateUpTaskStack(@NonNull TaskStackBuilder builder) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onCreateSupportNavigateUpTaskStack(builder);
            return;
        }
"
25878,call,"            public View call(final Integer featureId) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreatePanelView(this, featureId);"
25879,onCreatePanelView,"    public View onCreatePanelView(int featureId) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreatePanelView(featureId);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25880,call,"            public Boolean call(final Integer featureId, final Menu menu) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreatePanelMenu(this, featureId, menu);"
25881,onCreatePanelMenu,"    public boolean onCreatePanelMenu(int featureId, Menu menu) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreatePanelMenu(featureId, menu);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25882,call,"            public Boolean call(final Menu menu) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateOptionsMenu(this, menu);"
25883,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateOptionsMenu(menu);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25884,call,"            public void call(final android.app.TaskStackBuilder builder) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onCreateNavigateUpTaskStack(this, builder);"
25885,onCreateNavigateUpTaskStack,"    public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder builder) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onCreateNavigateUpTaskStack(builder);
            return;
        }
"
25886,call,"            public Dialog call(final Integer id, final Bundle args) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateDialog(this, id, args);"
25887,onCreateDialog,"    public Dialog onCreateDialog(int id, Bundle args) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateDialog(id, args);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25888,call,"            public Dialog call(final Integer id) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateDialog(this, id);"
25889,onCreateDialog,"    public Dialog onCreateDialog(int id) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateDialog(id);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25890,call,"            public CharSequence call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().onCreateDescription(this);"
25891,onCreateDescription,"    public CharSequence onCreateDescription() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onCreateDescription();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25894,call,"            public void call(final Bundle savedInstanceState, final PersistableBundle persistentState) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onCreate(this, savedInstanceState, persistentState);"
25895,onCreate,"    public void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onCreate(savedInstanceState, persistentState);
            return;
        }
"
25898,call,"            public void call(final Menu menu) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onContextMenuClosed(this, menu);"
25899,onContextMenuClosed,"    public void onContextMenuClosed(Menu menu) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onContextMenuClosed(menu);
            return;
        }
"
25901,onContextItemSelected,"    public boolean onContextItemSelected(MenuItem item) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_onContextItemSelected(item);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25902,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onContentChanged(this);"
25903,onContentChanged,"    public void onContentChanged() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onContentChanged();
            return;
        }
"
25906,call,"            public void call(final Activity childActivity, final CharSequence title) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onChildTitleChanged(this, childActivity, title);"
25907,onChildTitleChanged,"    public void onChildTitleChanged(Activity childActivity, CharSequence title) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onChildTitleChanged(childActivity, title);
            return;
        }
"
25908,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onBackPressed(this);"
25909,onBackPressed,"    public void onBackPressed() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onBackPressed();
            return;
        }
"
25910,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().onAttachedToWindow(this);"
25911,onAttachedToWindow,"    public void onAttachedToWindow() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onAttachedToWindow();
            return;
        }
"
25912,call,"            public void call(final android.app.Fragment fragment) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onAttachFragment(this, fragment);"
25913,onAttachFragment,"    public void onAttachFragment(android.app.Fragment fragment) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onAttachFragment(fragment);
            return;
        }
"
25914,call,"            public void call(final Fragment fragment) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onAttachFragment(this, fragment);"
25915,onAttachFragment,"    public void onAttachFragment(Fragment fragment) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onAttachFragment(fragment);
            return;
        }
"
25916,call,"            public void call(final Theme theme, final Integer resid, final Boolean first) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onApplyThemeResource(this, theme, resid, first);"
25917,onApplyThemeResource,"    public void onApplyThemeResource(Theme theme, int resid, boolean first) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onApplyThemeResource(theme, resid, first);
            return;
        }
"
25919,onActivityResult,"    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onActivityResult(requestCode, resultCode, data);
            return;
        }
"
25920,call,"            public void call(final Integer resultCode, final Intent data) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onActivityReenter(this, resultCode, data);"
25921,onActivityReenter,"    public void onActivityReenter(int resultCode, Intent data) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onActivityReenter(resultCode, data);
            return;
        }
"
25922,call,"            public void call(final android.view.ActionMode mode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onActionModeStarted(this, mode);"
25923,onActionModeStarted,"    public void onActionModeStarted(android.view.ActionMode mode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onActionModeStarted(mode);
            return;
        }
"
25924,call,"            public void call(final android.view.ActionMode mode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().onActionModeFinished(this, mode);"
25925,onActionModeFinished,"    public void onActionModeFinished(android.view.ActionMode mode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_onActionModeFinished(mode);
            return;
        }
"
25926,call,"            public Boolean call(final Activity child, final Intent upIntent) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().navigateUpToFromChild(this, child, upIntent);"
25927,navigateUpToFromChild,"    public boolean navigateUpToFromChild(Activity child, Intent upIntent) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_navigateUpToFromChild(child, upIntent);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25928,call,"            public Boolean call(final Intent upIntent) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().navigateUpTo(this, upIntent);"
25929,navigateUpTo,"    public boolean navigateUpTo(Intent upIntent) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_navigateUpTo(upIntent);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25930,call,"            public Boolean call(final Boolean nonRoot) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().moveTaskToBack(this, nonRoot);"
25931,moveTaskToBack,"    public boolean moveTaskToBack(boolean nonRoot) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_moveTaskToBack(nonRoot);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25932,call,"            public Boolean call(final Context sourceContext, final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().moveSharedPreferencesFrom(this, sourceContext, name);"
25933,moveSharedPreferencesFrom,"    public boolean moveSharedPreferencesFrom(Context sourceContext, String name) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_moveSharedPreferencesFrom(sourceContext, name);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25934,call,"            public Boolean call(final Context sourceContext, final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().moveDatabaseFrom(this, sourceContext, name);"
25935,moveDatabaseFrom,"    public boolean moveDatabaseFrom(Context sourceContext, String name) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_moveDatabaseFrom(sourceContext, name);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25936,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isVoiceInteractionRoot(this);"
25937,isVoiceInteractionRoot,"    public boolean isVoiceInteractionRoot() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isVoiceInteractionRoot();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25938,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isVoiceInteraction(this);"
25939,isVoiceInteraction,"    public boolean isVoiceInteraction() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isVoiceInteraction();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25940,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isTaskRoot(this);"
25941,isTaskRoot,"    public boolean isTaskRoot() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isTaskRoot();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25942,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isRestricted(this);"
25943,isRestricted,"    public boolean isRestricted() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isRestricted();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25944,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isLocalVoiceInteractionSupported(this);"
25945,isLocalVoiceInteractionSupported,"    public boolean isLocalVoiceInteractionSupported() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isLocalVoiceInteractionSupported();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25946,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isInPictureInPictureMode(this);"
25947,isInPictureInPictureMode,"    public boolean isInPictureInPictureMode() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isInPictureInPictureMode();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25948,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isInMultiWindowMode(this);"
25949,isInMultiWindowMode,"    public boolean isInMultiWindowMode() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isInMultiWindowMode();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25950,call,"            public void call(final Boolean i) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setImmersive(this, i);"
25951,setImmersive,"    public void setImmersive(boolean i) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setImmersive(i);
            return;
        }
"
25952,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isImmersive(this);"
25953,isImmersive,"    public boolean isImmersive() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isImmersive();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25954,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isFinishing(this);"
25955,isFinishing,"    public boolean isFinishing() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isFinishing();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25956,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isDeviceProtectedStorage(this);"
25957,isDeviceProtectedStorage,"    public boolean isDeviceProtectedStorage() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isDeviceProtectedStorage();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25958,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isDestroyed(this);"
25959,isDestroyed,"    public boolean isDestroyed() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isDestroyed();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25960,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isChangingConfigurations(this);"
25961,isChangingConfigurations,"    public boolean isChangingConfigurations() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isChangingConfigurations();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25962,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().isActivityTransitionRunning(this);"
25963,isActivityTransitionRunning,"    public boolean isActivityTransitionRunning() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_isActivityTransitionRunning();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25964,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().invalidateOptionsMenu(this);"
25965,invalidateOptionsMenu,"    public void invalidateOptionsMenu() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_invalidateOptionsMenu();
            return;
        }
"
25966,call,"            public Boolean call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().hasWindowFocus(this);"
25967,hasWindowFocus,"    public boolean hasWindowFocus() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_hasWindowFocus();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25968,call,"            public void call(final String toPackage, final Uri uri, final Integer modeFlags) {
                if (iterator.hasPrevious()) {
                    iterator.previous().grantUriPermission(this, toPackage, uri, modeFlags);"
25969,grantUriPermission,"    public void grantUriPermission(String toPackage, Uri uri, int modeFlags) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_grantUriPermission(toPackage, uri, modeFlags);
            return;
        }
"
25970,call,"            public WindowManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getWindowManager(this);"
25971,getWindowManager,"    public WindowManager getWindowManager() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getWindowManager();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25972,call,"            public Window call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getWindow(this);"
25973,getWindow,"    public Window getWindow() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getWindow();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25974,call,"            public Integer call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getWallpaperDesiredMinimumWidth(this);"
25975,getWallpaperDesiredMinimumWidth,"    public int getWallpaperDesiredMinimumWidth() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getWallpaperDesiredMinimumWidth();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25976,call,"            public Integer call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getWallpaperDesiredMinimumHeight(this);"
25977,getWallpaperDesiredMinimumHeight,"    public int getWallpaperDesiredMinimumHeight() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getWallpaperDesiredMinimumHeight();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25978,call,"            public void call(final Bitmap bitmap) {
                if (iterator.hasPrevious()) {
                    try {"
25979,setWallpaper,"    public void setWallpaper(Bitmap bitmap) throws IOException {
        if (mPlugins.isEmpty()) {
            try {
                getOriginal().super_setWallpaper(bitmap);
            } catch (IOException e) {
                throw new SuppressedException(e);"
25980,call,"            public Drawable call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getWallpaper(this);"
25981,getWallpaper,"    public Drawable getWallpaper() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getWallpaper();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25982,call,"            public VoiceInteractor call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getVoiceInteractor(this);"
25983,getVoiceInteractor,"    public VoiceInteractor getVoiceInteractor() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getVoiceInteractor();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25985,getViewModelStore,"    public ViewModelStore getViewModelStore() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getViewModelStore();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25986,call,"            public void call(final Integer resid) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setTheme(this, resid);"
25987,setTheme,"    public void setTheme(int resid) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setTheme(resid);
            return;
        }
"
25988,call,"            public Theme call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getTheme(this);"
25989,getTheme,"    public Theme getTheme() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getTheme();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25990,call,"            public Integer call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getTaskId(this);"
25991,getTaskId,"    public int getTaskId() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getTaskId();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25992,call,"            public String call(final Class<?> serviceClass) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSystemServiceName(this, serviceClass);"
25993,getSystemServiceName,"    public String getSystemServiceName(Class<?> serviceClass) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getSystemServiceName(serviceClass);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25994,call,"            public Object call(final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSystemService(this, name);"
25995,getSystemService,"    public Object getSystemService(@NonNull String name) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getSystemService(name);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25996,call,"            public Intent call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSupportParentActivityIntent(this);"
25997,getSupportParentActivityIntent,"    public Intent getSupportParentActivityIntent() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getSupportParentActivityIntent();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
25998,call,"            public LoaderManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSupportLoaderManager(this);"
25999,getSupportLoaderManager,"    public LoaderManager getSupportLoaderManager() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getSupportLoaderManager();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26000,call,"            public FragmentManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSupportFragmentManager(this);"
26001,getSupportFragmentManager,"    public FragmentManager getSupportFragmentManager() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getSupportFragmentManager();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26002,call,"            public void call(final Toolbar toolbar) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setSupportActionBar(this, toolbar);"
26003,setSupportActionBar,"    public void setSupportActionBar(@Nullable Toolbar toolbar) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setSupportActionBar(toolbar);
            return;
        }
"
26004,call,"            public ActionBar call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSupportActionBar(this);"
26005,getSupportActionBar,"    public ActionBar getSupportActionBar() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getSupportActionBar();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26006,call,"            public SharedPreferences call(final String name, final Integer mode) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getSharedPreferences(this, name, mode);"
26007,getSharedPreferences,"    public SharedPreferences getSharedPreferences(String name, int mode) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getSharedPreferences(name, mode);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26008,call,"            public Resources call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getResources(this);"
26009,getResources,"    public Resources getResources() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getResources();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26010,call,"            public void call(final Integer requestedOrientation) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setRequestedOrientation(this, requestedOrientation);"
26011,setRequestedOrientation,"    public void setRequestedOrientation(int requestedOrientation) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setRequestedOrientation(requestedOrientation);
            return;
        }
"
26012,call,"            public Integer call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getRequestedOrientation(this);"
26013,getRequestedOrientation,"    public int getRequestedOrientation() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getRequestedOrientation();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26014,call,"            public Uri call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getReferrer(this);"
26015,getReferrer,"    public Uri getReferrer() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getReferrer();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26016,call,"            public SharedPreferences call(final Integer mode) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getPreferences(this, mode);"
26017,getPreferences,"    public SharedPreferences getPreferences(int mode) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getPreferences(mode);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26018,call,"            public Intent call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getParentActivityIntent(this);"
26019,getParentActivityIntent,"    public Intent getParentActivityIntent() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getParentActivityIntent();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26020,call,"            public String call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getPackageResourcePath(this);"
26021,getPackageResourcePath,"    public String getPackageResourcePath() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getPackageResourcePath();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26022,call,"            public String call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getPackageName(this);"
26023,getPackageName,"    public String getPackageName() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getPackageName();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26024,call,"            public PackageManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getPackageManager(this);"
26025,getPackageManager,"    public PackageManager getPackageManager() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getPackageManager();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26026,call,"            public String call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getPackageCodePath(this);"
26027,getPackageCodePath,"    public String getPackageCodePath() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getPackageCodePath();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26028,call,"            public File[] call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getObbDirs(this);"
26029,getObbDirs,"    public File[] getObbDirs() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getObbDirs();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26030,call,"            public File call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getObbDir(this);"
26031,getObbDir,"    public File getObbDir() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getObbDir();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26032,call,"            public File call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getNoBackupFilesDir(this);"
26033,getNoBackupFilesDir,"    public File getNoBackupFilesDir() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getNoBackupFilesDir();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26034,call,"            public MenuInflater call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getMenuInflater(this);"
26035,getMenuInflater,"    public MenuInflater getMenuInflater() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getMenuInflater();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26036,call,"            public Integer call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getMaxNumPictureInPictureActions(this);"
26037,getMaxNumPictureInPictureActions,"    public int getMaxNumPictureInPictureActions() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getMaxNumPictureInPictureActions();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26038,call,"            public Looper call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getMainLooper(this);"
26039,getMainLooper,"    public Looper getMainLooper() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getMainLooper();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26040,call,"            public Executor call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getMainExecutor(this);"
26041,getMainExecutor,"    public Executor getMainExecutor() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getMainExecutor();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26042,call,"            public String call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getLocalClassName(this);"
26043,getLocalClassName,"    public String getLocalClassName() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getLocalClassName();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26044,call,"            public android.app.LoaderManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getLoaderManager(this);"
26045,getLoaderManager,"    public android.app.LoaderManager getLoaderManager() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getLoaderManager();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26046,call,"            public Lifecycle call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getLifecycle(this);"
26047,getLifecycle,"    public Lifecycle getLifecycle() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getLifecycle();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26048,call,"            public LayoutInflater call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getLayoutInflater(this);"
26049,getLayoutInflater,"    public LayoutInflater getLayoutInflater() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getLayoutInflater();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26050,getLastNonConfigurationInstance,"    public Object getLastNonConfigurationInstance(final String key) {
        final Object nci = getOriginal().getLastCustomNonConfigurationInstance();
        if (nci instanceof NonConfigurationInstanceWrapper) {
            final NonConfigurationInstanceWrapper all = (NonConfigurationInstanceWrapper) nci;
            return all.getPluginNonConfigurationInstance(key);"
26051,getLastCompositeCustomNonConfigurationInstance,"    public Object getLastCompositeCustomNonConfigurationInstance() {
        final Object nci = getOriginal().getLastCustomNonConfigurationInstance();
        if (nci instanceof NonConfigurationInstanceWrapper) {
            final NonConfigurationInstanceWrapper all = (NonConfigurationInstanceWrapper) nci;
            return all.getSuperNonConfigurationInstance();"
26052,call,"            public void call(final Intent newIntent) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setIntent(this, newIntent);"
26053,setIntent,"    public void setIntent(Intent newIntent) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setIntent(newIntent);
            return;
        }
"
26054,call,"            public Intent call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getIntent(this);"
26055,getIntent,"    public Intent getIntent() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getIntent();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26056,call,"            public android.app.FragmentManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getFragmentManager(this);"
26057,getFragmentManager,"    public android.app.FragmentManager getFragmentManager() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getFragmentManager();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26058,call,"            public File call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getFilesDir(this);"
26059,getFilesDir,"    public File getFilesDir() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getFilesDir();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26060,call,"            public File call(final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getFileStreamPath(this, name);"
26061,getFileStreamPath,"    public File getFileStreamPath(String name) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getFileStreamPath(name);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26062,call,"            public T call(final Class<T> extraDataClass) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getExtraData(this, extraDataClass);"
26063,getExtraData,"    public <T extends SupportActivity.ExtraData> T getExtraData(Class<T> extraDataClass) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getExtraData(extraDataClass);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26064,call,"            public File[] call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getExternalMediaDirs(this);"
26065,getExternalMediaDirs,"    public File[] getExternalMediaDirs() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getExternalMediaDirs();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26066,call,"            public File[] call(final String type) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getExternalFilesDirs(this, type);"
26067,getExternalFilesDirs,"    public File[] getExternalFilesDirs(String type) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getExternalFilesDirs(type);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26068,call,"            public File call(final String type) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getExternalFilesDir(this, type);"
26069,getExternalFilesDir,"    public File getExternalFilesDir(String type) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getExternalFilesDir(type);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26070,call,"            public File[] call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getExternalCacheDirs(this);"
26071,getExternalCacheDirs,"    public File[] getExternalCacheDirs() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getExternalCacheDirs();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26072,call,"            public File call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getExternalCacheDir(this);"
26073,getExternalCacheDir,"    public File getExternalCacheDir() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getExternalCacheDir();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26074,call,"            public Delegate call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getDrawerToggleDelegate(this);"
26075,getDrawerToggleDelegate,"    public Delegate getDrawerToggleDelegate() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getDrawerToggleDelegate();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26076,call,"            public File call(final String name, final Integer mode) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getDir(this, name, mode);"
26077,getDir,"    public File getDir(String name, int mode) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getDir(name, mode);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26078,call,"            public AppCompatDelegate call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getDelegate(this);"
26079,getDelegate,"    public AppCompatDelegate getDelegate() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getDelegate();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26080,call,"            public File call(final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getDatabasePath(this, name);"
26081,getDatabasePath,"    public File getDatabasePath(String name) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getDatabasePath(name);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26082,call,"            public File call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getDataDir(this);"
26083,getDataDir,"    public File getDataDir() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getDataDir();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26084,call,"            public View call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getCurrentFocus(this);"
26085,getCurrentFocus,"    public View getCurrentFocus() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getCurrentFocus();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26086,call,"            public void call(final TransitionManager tm) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setContentTransitionManager(this, tm);"
26087,setContentTransitionManager,"    public void setContentTransitionManager(TransitionManager tm) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setContentTransitionManager(tm);
            return;
        }
"
26088,call,"            public TransitionManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getContentTransitionManager(this);"
26089,getContentTransitionManager,"    public TransitionManager getContentTransitionManager() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getContentTransitionManager();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26090,call,"            public Scene call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getContentScene(this);"
26091,getContentScene,"    public Scene getContentScene() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getContentScene();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26092,call,"            public ContentResolver call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getContentResolver(this);"
26093,getContentResolver,"    public ContentResolver getContentResolver() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getContentResolver();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26094,call,"            public ComponentName call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getComponentName(this);"
26095,getComponentName,"    public ComponentName getComponentName() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getComponentName();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26096,call,"            public File call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getCodeCacheDir(this);"
26097,getCodeCacheDir,"    public File getCodeCacheDir() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getCodeCacheDir();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26098,call,"            public ClassLoader call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getClassLoader(this);"
26099,getClassLoader,"    public ClassLoader getClassLoader() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getClassLoader();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26100,call,"            public Integer call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getChangingConfigurations(this);"
26101,getChangingConfigurations,"    public int getChangingConfigurations() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getChangingConfigurations();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26102,call,"            public String call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getCallingPackage(this);"
26103,getCallingPackage,"    public String getCallingPackage() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getCallingPackage();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26104,call,"            public ComponentName call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getCallingActivity(this);"
26105,getCallingActivity,"    public ComponentName getCallingActivity() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getCallingActivity();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26106,call,"            public File call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getCacheDir(this);"
26107,getCacheDir,"    public File getCacheDir() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getCacheDir();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26108,call,"            public Context call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getBaseContext(this);"
26109,getBaseContext,"    public Context getBaseContext() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getBaseContext();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26110,call,"            public AssetManager call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getAssets(this);"
26111,getAssets,"    public AssetManager getAssets() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getAssets();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26112,call,"            public ApplicationInfo call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getApplicationInfo(this);"
26113,getApplicationInfo,"    public ApplicationInfo getApplicationInfo() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getApplicationInfo();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26114,call,"            public Context call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getApplicationContext(this);"
26115,getApplicationContext,"    public Context getApplicationContext() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getApplicationContext();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26116,call,"            public void call(final android.widget.Toolbar toolbar) {
                if (iterator.hasPrevious()) {
                    iterator.previous().setActionBar(this, toolbar);"
26117,setActionBar,"    public void setActionBar(@Nullable android.widget.Toolbar toolbar) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_setActionBar(toolbar);
            return;
        }
"
26118,call,"            public android.app.ActionBar call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().getActionBar(this);"
26119,getActionBar,"    public android.app.ActionBar getActionBar() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_getActionBar();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26120,call,"            public void call(final Activity child) {
                if (iterator.hasPrevious()) {
                    iterator.previous().finishFromChild(this, child);"
26121,finishFromChild,"    public void finishFromChild(Activity child) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_finishFromChild(child);
            return;
        }
"
26122,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().finishAndRemoveTask(this);"
26123,finishAndRemoveTask,"    public void finishAndRemoveTask() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_finishAndRemoveTask();
            return;
        }
"
26124,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().finishAfterTransition(this);"
26125,finishAfterTransition,"    public void finishAfterTransition() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_finishAfterTransition();
            return;
        }
"
26126,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().finishAffinity(this);"
26127,finishAffinity,"    public void finishAffinity() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_finishAffinity();
            return;
        }
"
26128,call,"            public void call(final Activity child, final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().finishActivityFromChild(this, child, requestCode);"
26129,finishActivityFromChild,"    public void finishActivityFromChild(@NonNull Activity child, int requestCode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_finishActivityFromChild(child, requestCode);
            return;
        }
"
26130,call,"            public void call(final Integer requestCode) {
                if (iterator.hasPrevious()) {
                    iterator.previous().finishActivity(this, requestCode);"
26131,finishActivity,"    public void finishActivity(int requestCode) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_finishActivity(requestCode);
            return;
        }
"
26132,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().finish(this);"
26133,finish,"    public void finish() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_finish();
            return;
        }
"
26134,call,"            public T call(final Integer id) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().findViewById(this, id);"
26135,findViewById,"    public <T extends View> T findViewById(int id) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_findViewById(id);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26136,call,"            public String[] call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().fileList(this);"
26137,fileList,"    public String[] fileList() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_fileList();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26138,call,"            public Boolean call(final PictureInPictureParams params) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().enterPictureInPictureMode(this, params);"
26139,enterPictureInPictureMode,"    public boolean enterPictureInPictureMode(@NonNull PictureInPictureParams params) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_enterPictureInPictureMode(params);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26140,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().enterPictureInPictureMode(this);"
26141,enterPictureInPictureMode,"    public void enterPictureInPictureMode() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_enterPictureInPictureMode();
            return;
        }
"
26142,call,"            public void call(final Uri uri, final String readPermission, final String writePermission,
                    final Integer pid, final Integer uid, final Integer modeFlags, final String message) {
                if (iterator.hasPrevious()) {"
26143,enforceUriPermission,"    public void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags, String message) {
        if (mPlugins.isEmpty()) {
            getOriginal()
                    .super_enforceUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags, message);
            return;"
26144,call,"            public void call(final Uri uri, final Integer pid, final Integer uid, final Integer modeFlags,
                    final String message) {
                if (iterator.hasPrevious()) {"
26145,enforceUriPermission,"    public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_enforceUriPermission(uri, pid, uid, modeFlags, message);
            return;
        }
"
26146,call,"            public void call(final String permission, final Integer pid, final Integer uid, final String message) {
                if (iterator.hasPrevious()) {
                    iterator.previous().enforcePermission(this, permission, pid, uid, message);"
26147,enforcePermission,"    public void enforcePermission(String permission, int pid, int uid, String message) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_enforcePermission(permission, pid, uid, message);
            return;
        }
"
26148,call,"            public void call(final Uri uri, final Integer modeFlags, final String message) {
                if (iterator.hasPrevious()) {
                    iterator.previous().enforceCallingUriPermission(this, uri, modeFlags, message);"
26149,enforceCallingUriPermission,"    public void enforceCallingUriPermission(Uri uri, int modeFlags, String message) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_enforceCallingUriPermission(uri, modeFlags, message);
            return;
        }
"
26150,call,"            public void call(final String permission, final String message) {
                if (iterator.hasPrevious()) {
                    iterator.previous().enforceCallingPermission(this, permission, message);"
26151,enforceCallingPermission,"    public void enforceCallingPermission(String permission, String message) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_enforceCallingPermission(permission, message);
            return;
        }
"
26152,call,"            public void call(final Uri uri, final Integer modeFlags, final String message) {
                if (iterator.hasPrevious()) {
                    iterator.previous().enforceCallingOrSelfUriPermission(this, uri, modeFlags, message);"
26153,enforceCallingOrSelfUriPermission,"    public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_enforceCallingOrSelfUriPermission(uri, modeFlags, message);
            return;
        }
"
26154,call,"            public void call(final String permission, final String message) {
                if (iterator.hasPrevious()) {
                    iterator.previous().enforceCallingOrSelfPermission(this, permission, message);"
26155,enforceCallingOrSelfPermission,"    public void enforceCallingOrSelfPermission(String permission, String message) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_enforceCallingOrSelfPermission(permission, message);
            return;
        }
"
26158,call,"            public Boolean call(final MotionEvent ev) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().dispatchTrackballEvent(this, ev);"
26159,dispatchTrackballEvent,"    public boolean dispatchTrackballEvent(MotionEvent ev) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_dispatchTrackballEvent(ev);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26160,call,"            public Boolean call(final MotionEvent ev) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().dispatchTouchEvent(this, ev);"
26161,dispatchTouchEvent,"    public boolean dispatchTouchEvent(MotionEvent ev) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_dispatchTouchEvent(ev);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26162,call,"            public Boolean call(final AccessibilityEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().dispatchPopulateAccessibilityEvent(this, event);"
26163,dispatchPopulateAccessibilityEvent,"    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_dispatchPopulateAccessibilityEvent(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26164,call,"            public Boolean call(final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().dispatchKeyShortcutEvent(this, event);"
26165,dispatchKeyShortcutEvent,"    public boolean dispatchKeyShortcutEvent(KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_dispatchKeyShortcutEvent(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26166,call,"            public Boolean call(final KeyEvent event) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().dispatchKeyEvent(this, event);"
26167,dispatchKeyEvent,"    public boolean dispatchKeyEvent(KeyEvent event) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_dispatchKeyEvent(event);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26168,call,"            public Boolean call(final MotionEvent ev) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().dispatchGenericMotionEvent(this, ev);"
26169,dispatchGenericMotionEvent,"    public boolean dispatchGenericMotionEvent(MotionEvent ev) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_dispatchGenericMotionEvent(ev);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26170,call,"            public Boolean call(final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().deleteSharedPreferences(this, name);"
26171,deleteSharedPreferences,"    public boolean deleteSharedPreferences(String name) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_deleteSharedPreferences(name);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26172,call,"            public Boolean call(final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().deleteFile(this, name);"
26173,deleteFile,"    public boolean deleteFile(String name) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_deleteFile(name);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26174,call,"            public Boolean call(final String name) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().deleteDatabase(this, name);"
26175,deleteDatabase,"    public boolean deleteDatabase(String name) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_deleteDatabase(name);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26176,call,"            public String[] call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().databaseList(this);"
26177,databaseList,"    public String[] databaseList() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_databaseList();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26178,call,"            public PendingIntent call(final Integer requestCode, final Intent data, final Integer flags) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().createPendingResult(this, requestCode, data, flags);"
26179,createPendingResult,"    public PendingIntent createPendingResult(int requestCode, @NonNull Intent data, int flags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_createPendingResult(requestCode, data, flags);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26180,call,"            public Context call(final String packageName, final Integer flags) {
                if (iterator.hasPrevious()) {
                    try {"
26181,createPackageContext,"    public Context createPackageContext(String packageName, int flags) throws NameNotFoundException {
        if (mPlugins.isEmpty()) {
            try {
                return getOriginal().super_createPackageContext(packageName, flags);
            } catch (NameNotFoundException e) {
                throw new SuppressedException(e);"
26182,call,"            public Context call(final Display display) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().createDisplayContext(this, display);"
26183,createDisplayContext,"    public Context createDisplayContext(Display display) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_createDisplayContext(display);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26184,call,"            public Context call() {
                if (iterator.hasPrevious()) {
                    return iterator.previous().createDeviceProtectedStorageContext(this);"
26185,createDeviceProtectedStorageContext,"    public Context createDeviceProtectedStorageContext() {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_createDeviceProtectedStorageContext();
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26186,call,"            public Context call(final String splitName) {
                if (iterator.hasPrevious()) {
                    try {"
26187,createContextForSplit,"    public Context createContextForSplit(String splitName) throws NameNotFoundException {
        if (mPlugins.isEmpty()) {
            try {
                return getOriginal().super_createContextForSplit(splitName);
            } catch (NameNotFoundException e) {
                throw new SuppressedException(e);"
26188,call,"            public Context call(final Configuration overrideConfiguration) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().createConfigurationContext(this, overrideConfiguration);"
26189,createConfigurationContext,"    public Context createConfigurationContext(Configuration overrideConfiguration) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_createConfigurationContext(overrideConfiguration);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26190,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().closeOptionsMenu(this);"
26191,closeOptionsMenu,"    public void closeOptionsMenu() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_closeOptionsMenu();
            return;
        }
"
26192,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    iterator.previous().closeContextMenu(this);"
26193,closeContextMenu,"    public void closeContextMenu() {
        if (mPlugins.isEmpty()) {
            getOriginal().super_closeContextMenu();
            return;
        }
"
26194,call,"            public void call() {
                if (iterator.hasPrevious()) {
                    try {"
26195,clearWallpaper,"    public void clearWallpaper() throws IOException {
        if (mPlugins.isEmpty()) {
            try {
                getOriginal().super_clearWallpaper();
            } catch (IOException e) {
                throw new SuppressedException(e);"
26196,call,"            public Integer call(final Uri uri, final String readPermission, final String writePermission,
                    final Integer pid, final Integer uid, final Integer modeFlags) {
                if (iterator.hasPrevious()) {"
26197,checkUriPermission,"    public int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid,
            int modeFlags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkUriPermission(uri, readPermission, writePermission, pid, uid, modeFlags);
        }
"
26198,call,"            public Integer call(final Uri uri, final Integer pid, final Integer uid, final Integer modeFlags) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().checkUriPermission(this, uri, pid, uid, modeFlags);"
26199,checkUriPermission,"    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkUriPermission(uri, pid, uid, modeFlags);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26200,call,"            public Integer call(final String permission) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().checkSelfPermission(this, permission);"
26201,checkSelfPermission,"    public int checkSelfPermission(String permission) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkSelfPermission(permission);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26202,call,"            public Integer call(final String permission, final Integer pid, final Integer uid) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().checkPermission(this, permission, pid, uid);"
26203,checkPermission,"    public int checkPermission(String permission, int pid, int uid) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkPermission(permission, pid, uid);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26204,call,"            public Integer call(final Uri uri, final Integer modeFlags) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().checkCallingUriPermission(this, uri, modeFlags);"
26205,checkCallingUriPermission,"    public int checkCallingUriPermission(Uri uri, int modeFlags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkCallingUriPermission(uri, modeFlags);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26206,call,"            public Integer call(final String permission) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().checkCallingPermission(this, permission);"
26207,checkCallingPermission,"    public int checkCallingPermission(String permission) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkCallingPermission(permission);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26208,call,"            public Integer call(final Uri uri, final Integer modeFlags) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().checkCallingOrSelfUriPermission(this, uri, modeFlags);"
26209,checkCallingOrSelfUriPermission,"    public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkCallingOrSelfUriPermission(uri, modeFlags);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26210,call,"            public Integer call(final String permission) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().checkCallingOrSelfPermission(this, permission);"
26211,checkCallingOrSelfPermission,"    public int checkCallingOrSelfPermission(String permission) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_checkCallingOrSelfPermission(permission);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26212,call,"            public Boolean call(final Intent service, final ServiceConnection conn, final Integer flags) {
                if (iterator.hasPrevious()) {
                    return iterator.previous().bindService(this, service, conn, flags);"
26213,bindService,"    public boolean bindService(Intent service, ServiceConnection conn, int flags) {
        if (mPlugins.isEmpty()) {
            return getOriginal().super_bindService(service, conn, flags);
        }

        final ListIterator<ActivityPlugin> iterator = mPlugins.listIterator(mPlugins.size());"
26214,call,"            public void call(final Context newBase) {
                if (iterator.hasPrevious()) {
                    iterator.previous().attachBaseContext(this, newBase);"
26215,attachBaseContext,"    public void attachBaseContext(Context newBase) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_attachBaseContext(newBase);
            return;
        }
"
26216,call,"            public void call(final Configuration overrideConfiguration) {
                if (iterator.hasPrevious()) {
                    iterator.previous().applyOverrideConfiguration(this, overrideConfiguration);"
26217,applyOverrideConfiguration,"    public void applyOverrideConfiguration(Configuration overrideConfiguration) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_applyOverrideConfiguration(overrideConfiguration);
            return;
        }
"
26218,call,"            public void call(final View view, final LayoutParams params) {
                if (iterator.hasPrevious()) {
                    iterator.previous().addContentView(this, view, params);"
26219,addContentView,"    public void addContentView(View view, LayoutParams params) {
        if (mPlugins.isEmpty()) {
            getOriginal().super_addContentView(view, params);
            return;
        }
"
26221,remove,"	public void remove(int id) {
		this.datas.remove(id);
		this.fireTableRowsDeleted(id, id);
	}"
26222,run,"							public void run() {
								if (ret.equals(""1"")) {
									datas.get(rowIndex).setElementAt(newdata, col);"
26224,run,"									public void run() {
										if (ret.equals(""1"")) {
											datas.get(rowIndex).setElementAt(newdata, col);"
26226,setValueAt,"	public void setValueAt(Object aValue, final int rowIndex, int columnIndex) {
		if(columnIndex==1)
		{"
26227,addRow,"	public void addRow(Vector<String> vector) {
		this.datas.add(vector);
		this.fireTableRowsInserted(vector.size()-1, vector.size()-1);
	}"
26233,setEdit,"	public void setEdit(boolean isEdit) {
		this.isEdit = isEdit;
	}"
26234,isEdit,"	public boolean isEdit() {
		return isEdit;
	}"
26235,setFilemanagerpanel,"	public void setFilemanagerpanel(FileManagerPanel filemanagerpanel) {
		this.filemanagerpanel = filemanagerpanel;
	}"
26236,getFilemanagerpanel,"	public FileManagerPanel getFilemanagerpanel() {
		return filemanagerpanel;
	}"
26237,getId,"	private int getId(String id) {
		int i = 0;
		for (Vector<String> data : this.datas) {
			if (data.get(0).equals(id)) {
				return i;"
26238,remove,"	public void remove(String id) {
		try {
			int row = this.getId(id);"
26239,update,"	public void update(String id, Vector<String> vector) {
		this.datas.set(this.getId(id), vector);
		this.fireTableDataChanged();
	}"
26240,addRow,"	public void addRow(Vector<String> vector) {
		this.datas.add(vector);
		this.fireTableRowsInserted(datas.size()-1,datas.size()-1);
	}"
26252,isCellEditable,"	public boolean isCellEditable(int row, int column) {
		if(column == 0)
		{"
26253,getColumnClass,"	public Class getColumnClass(int columnIndex) {
		if (this.getRowCount() == 0) {
			return super.getColumnClass(columnIndex);"
26254,onClick,"    public void onClick(View v) {
        if (v == mStartBtn) {
            mProgressView.startAnim();"
26257,onStopTrackingTouch,"            public void onStopTrackingTouch(SeekBar seekBar) {
                float factor = seekBar.getProgress() / 100f;
                mProgressView.setRadius(factor);
            }"
26259,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
"
26261,getInterpolation,"    public float getInterpolation(float input) {
        if ((input *= 2) < 1.0f) {
            return 0.5f * input * input * input;
        }
        input -= 2;"
26262,setRadius,"    public void setRadius(float factor) {

        stopAnim();

        calPoints(factor);"
26263,setDuration,"    public void setDuration(long duration) {

        mDuration = duration;"
26264,setInterpolator,"    public void setInterpolator(TimeInterpolator interpolator) {

        mInterpolator = interpolator;"
26265,stopAnim,"    public void stopAnim() {

        mStartAnim = false;"
26266,reset,"    public void reset() {

        stopAnim();

        mPlayTime = 0;"
26267,startAnim,"    public void startAnim() {

        mPlayTime = mPlayTime % mDuration;

        mStartTime = AnimationUtils.currentAnimationTimeMillis() - mPlayTime;
"
26268,getItemFactor,"    private float getItemFactor(int index, float factor) {

        float itemFactor = (factor - 0.66f / POINT_NUM * index) * 3;

        if (itemFactor < 0f) {"
26269,getFactor,"    private float getFactor() {

        if (mStartAnim) {

            mPlayTime = AnimationUtils.currentAnimationTimeMillis() - mStartTime;"
26270,calPoints,"    private void calPoints(float factor) {

        int radius = (int) (mViewSize / 3 * factor);

        mPointRadius = radius / 12;"
26271,onDraw,"    protected void onDraw(Canvas canvas) {

        canvas.save();

        canvas.translate(mCenter.x, mCenter.y);



        float factor = getFactor();
"
26272,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {

        int defaultSize = getResources().getDimensionPixelSize(R.dimen.default_circle_view_size);

        int width = getDefaultSize(defaultSize, widthMeasureSpec);

        int height = getDefaultSize(defaultSize, heightMeasureSpec);

        mViewSize = Math.min(width, height);"
26273,init,"    private void init(AttributeSet attrs, int defStyle) {

        mArcPoint = new ArcPoint[POINT_NUM];



        mPaint = new Paint();

        mPaint.setAntiAlias(true);

        mPaint.setStyle(Paint.Style.FILL);
"
26275,onActionMove,"        void onActionMove(boolean isExpanded, TouchManager touchManager);
        void onBeginDragging();"
26276,onActionCancel,"        void onActionCancel(boolean isExpanded);
        void onActionMove(boolean isExpanded, TouchManager touchManager);"
26277,onActionUp,"        void onActionUp(boolean isExpanded);
        void onActionCancel(boolean isExpanded);"
26278,onActionDown,"        void onActionDown();
        void onActionUp(boolean isExpanded);"
26279,setMaxHeight,"    public void setMaxHeight(int maxHeight) {
        this.mThreshold = maxHeight;
    }"
26280,setInterceptEnabled,"    public void setInterceptEnabled(boolean interceptEnabled) {
        this.mInterceptEnabled = interceptEnabled;
    }"
26281,getMotionX,"    public int getMotionX() {
        return mMotionX;
    }"
26283,onFeedInterceptEvent,"    public boolean onFeedInterceptEvent(MotionEvent event){
        int action = event.getAction();
        switch ( action & MotionEvent.ACTION_MASK  ) {
            case MotionEvent.ACTION_DOWN:
                setActivePointerId(event, 0);"
26284,motionY2TopOffset,"    private int motionY2TopOffset(float y){
        float original = y - mTouchDownActor;
        float basic = original * 0.6f;
        if ( basic > mThreshold){
            basic = mThreshold + (basic - mThreshold) * 0.3f;
        }"
26285,motionY2TouchDown,"    private float motionY2TouchDown(float y){
        float diff;
        if ( mTopOffset < 0 ){
            diff = 0;
        } else if( mTopOffset > mThreshold){"
26286,event2Point,"    public PointF event2Point(MotionEvent event){
        mTmpPoint.set(event.getX(),event.getY());
        return mTmpPoint;
    }"
26287,isBeginDragging,"    public boolean isBeginDragging() {
        return mBeginDragging;
    }"
26288,getTopOffset,"    public int getTopOffset() {
        return mTopOffset;
    }"
26289,setTopOffset,"    private void setTopOffset(float y) {
        mTopOffset = motionY2TopOffset(y);
    }"
26290,calTargetTopOffset,"    public int calTargetTopOffset(int currentTop, int offset){
        int target;
        if ( currentTop <= sThreshold2 ) {
            if ( offset < 0 ){
                target = 0 - currentTop;"
26291,calTargetTopOffset,"    public int calTargetTopOffset(int currentTop){
        return calTargetTopOffset(currentTop,getTopOffset());
    }"
26292,calExpandProgress,"    public float calExpandProgress(int currentTop){
        return currentTop * 1.0f / mThreshold;
    }"
26293,endDrag,"    public void endDrag(){
        mBeginDragging = false;
    }"
26294,setTouchSlop,"    public void setTouchSlop(int touchSlop) {
        this.mTouchSlop = touchSlop;
    }"
26295,getCurrentMotionEventY,"    private float getCurrentMotionEventY(MotionEvent ev) {
        final int index = MotionEventCompat.findPointerIndex(ev, mActivePointerId);
        if (index < 0) {
            return -1;
        }"
26296,resetActivePointerId,"    private void resetActivePointerId(){
        mActivePointerId = INVALID_POINTER;
    }"
26297,setActivePointerId,"    private void setActivePointerId(MotionEvent event, int defaultId){
        mActivePointerId = MotionEventCompat.getPointerId(event, defaultId);
        final float initialDownY = getCurrentMotionEventY(event);
        if ( initialDownY == -1 ) return;
        if ( mBeginDragging ){
            mTouchDownActor = motionY2TouchDown(initialDownY);"
26299,dispatchNestedPreFling,"    public boolean dispatchNestedPreFling(float velocityX, float velocityY) {
        return mScrollingChildHelper.dispatchNestedPreFling(velocityX, velocityY);
    }"
26300,dispatchNestedFling,"    public boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed) {
        return mScrollingChildHelper.dispatchNestedFling(velocityX, velocityY, consumed);
    }"
26301,dispatchNestedPreScroll,"    public boolean dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow) {
        return mScrollingChildHelper.dispatchNestedPreScroll(dx, dy, consumed, offsetInWindow);
    }"
26302,dispatchNestedScroll,"    public boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed,
                                        int dyUnconsumed, int[] offsetInWindow) {
        return mScrollingChildHelper.dispatchNestedScroll(dxConsumed, dyConsumed,"
26303,hasNestedScrollingParent,"    public boolean hasNestedScrollingParent() {
        return mScrollingChildHelper.hasNestedScrollingParent();
    }"
26304,stopNestedScroll,"    public void stopNestedScroll() {
        mScrollingChildHelper.stopNestedScroll();
    }"
26305,startNestedScroll,"    public boolean startNestedScroll(int axes) {
        return mScrollingChildHelper.startNestedScroll(axes);
    }"
26306,isNestedScrollingEnabled,"    public boolean isNestedScrollingEnabled() {
        return mScrollingChildHelper.isNestedScrollingEnabled();
"
26307,setNestedScrollingEnabled,"    public void setNestedScrollingEnabled(boolean enabled) {
        mScrollingChildHelper.setNestedScrollingEnabled(enabled);
    }"
26308,inside,"    private boolean inside(View view, float x, float y ){
        if ( view.getLeft() <= x && view.getRight() >= x && view.getTop() <= y && view.getBottom() >= y )
            return true;"
26309,canChildDragDownTraversal,"    private boolean canChildDragDownTraversal(View view, float x, float y){
        if ( !inside(view, x, y) ) return false;
        if ( ViewCompat.canScrollVertically(view,-1) ) return true;
        boolean canDragDown;
        if ( view instanceof ViewGroup ){
            ViewGroup vp = (ViewGroup) view;
            int count = vp.getChildCount();"
26310,canChildDragDown,"    public boolean canChildDragDown(PointF pointF){
        return canChildDragDownTraversal(this, pointF.x, pointF.y);
    }"
26311,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        measureChildren(widthMeasureSpec,heightMeasureSpec);
    }"
26312,onLayout,"    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        for ( int i = 0 ; i < getChildCount() ; i++ ){
            getChildAt(i).layout(l,t,r,b);"
26313,wrap,"    public static ViewGroup wrap(View view){
        Context context = view.getContext();
        TouchAlwaysTrueLayout wrapper = new TouchAlwaysTrueLayout(context);
        wrapper.addView(view, LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT);
        return wrapper;
    }"
26314,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        final int action = event.getAction();

        MotionEvent vtev = MotionEvent.obtain(event);
        if (action == MotionEvent.ACTION_DOWN) {
            mNestedYOffset = 0;
        }
        vtev.offsetLocation(0, mNestedYOffset);"
26315,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()){
            case android.R.id.home:
                this.finish(); return true;"
26316,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ActionBar actionBar = getSupportActionBar();
        if ( actionBar != null ) actionBar.setDisplayHomeAsUpEnabled(true);
    }"
26317,onItemSelected,"                    public void onItemSelected(int index) {
                        Toast.makeText(ScrollViewActivity.this, ""onItemSelected:"" + index, Toast.LENGTH_SHORT).show();
                    }"
26318,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_scrollview);

        ChromeLikeSwipeLayout chromeLikeSwipeLayout = (ChromeLikeSwipeLayout) findViewById(R.id.chrome_like_swipe_layout);
        ChromeLikeSwipeLayout.makeConfig()"
26319,getItemCount,"        public int getItemCount() {
            return 40;
        }"
26320,onBindViewHolder,"        public void onBindViewHolder(VH holder, int position) {
"
26321,onCreateViewHolder,"        public VH onCreateViewHolder(ViewGroup parent, int viewType) {
            LayoutInflater  layoutInflater = LayoutInflater.from(parent.getContext());
            View v = layoutInflater.inflate(R.layout.list_item,parent,false);
            return new VH(v);
        }"
26322,onItemSelected,"                    public void onItemSelected(int index) {
                        Toast.makeText(RecyclerViewActivity.this, ""onItemSelected:"" + index, Toast.LENGTH_SHORT).show();
                    }"
26325,onBindViewHolder,"        public void onBindViewHolder(VH holder, int position) {
            holder.bind(position);
        }"
26326,onCreateViewHolder,"        public VH onCreateViewHolder(ViewGroup parent, int viewType) {
            LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
            View v = layoutInflater.inflate(R.layout.list_item,parent,false);
            return new VH(v);
        }"
26327,bind,"        public void bind(int position){
            ((TextView)itemView).setText(""item:"" + position);
        }"
26328,onItemSelected,"                    public void onItemSelected(int index) {
                        Toast.makeText(NestedRecyclerViewActivity.this, ""onItemSelected:"" + index, Toast.LENGTH_SHORT).show();
                    }"
26330,OnDisabledExampleClicked,"    public void OnDisabledExampleClicked(View view) {
        Intent i = new Intent(this, DisabledExampleActivity.class);
        startActivity(i);
    }"
26331,OnCustomViewWithHeightClicked,"    public void OnCustomViewWithHeightClicked(View view) {
        Intent i = new Intent(this,CustomHeightListViewActivity.class);
        startActivity(i);
    }"
26332,OnNestedRecyclerViewClicked,"    public void OnNestedRecyclerViewClicked(View view) {
        Intent i = new Intent(this,NestedRecyclerViewActivity.class);
        startActivity(i);
    }"
26333,OnRecyclerViewClicked,"    public void OnRecyclerViewClicked(View view) {
        Intent i = new Intent(this,RecyclerViewActivity.class);
        startActivity(i);
    }"
26334,OnLinearLayoutClicked,"    public void OnLinearLayoutClicked(View view) {
        Intent i = new Intent(this,LinearLayoutActivity.class);
        startActivity(i);
    }"
26335,OnScrollViewClicked,"    public void OnScrollViewClicked(View view) {
        Intent i = new Intent(this,ScrollViewActivity.class);
        startActivity(i);
    }"
26336,OnListViewClicked,"    public void OnListViewClicked(View view) {
        Intent i = new Intent(this,ListViewActivity.class);
        startActivity(i);
    }"
26337,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity);
    }"
26338,getView,"        public View getView(int position, View convertView, ViewGroup parent) {
            if ( convertView == null ){
                LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
                convertView = layoutInflater.inflate(R.layout.list_item,parent,false);"
26339,getItemId,"        public long getItemId(int position) {
            return 0;
        }"
26340,getItem,"        public Object getItem(int position) {
            return null;
        }"
26341,getCount,"        public int getCount() {
            return 40;
        }"
26342,onItemSelected,"                    public void onItemSelected(int index) {
                        Toast.makeText(ListViewActivity.this, ""onItemSelected:"" + index, Toast.LENGTH_SHORT).show();
                    }"
26343,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_listview);

        ChromeLikeSwipeLayout chromeLikeSwipeLayout = (ChromeLikeSwipeLayout) findViewById(R.id.chrome_like_swipe_layout);
        ChromeLikeSwipeLayout.makeConfig()
                .addIcon(R.drawable.selector_icon_add)
                .addIcon(R.drawable.selector_icon_refresh)"
26344,onItemSelected,"                    public void onItemSelected(int index) {
                        Toast.makeText(LinearLayoutActivity.this, ""onItemSelected:"" + index, Toast.LENGTH_SHORT).show();
                    }"
26345,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_linearlayout);

        ChromeLikeSwipeLayout chromeLikeSwipeLayout = (ChromeLikeSwipeLayout) findViewById(R.id.chrome_like_swipe_layout);
        ChromeLikeSwipeLayout.makeConfig()"
26350,onResume,"    protected void onResume() {
        super.onResume();
        chromeLikeSwipeLayout.setEnabled(false);
    }"
26351,onItemSelected,"                    public void onItemSelected(int index) {
                        Toast.makeText(DisabledExampleActivity.this, ""onItemSelected:"" + index, Toast.LENGTH_SHORT).show();
                    }"
26357,onItemSelected,"                    public void onItemSelected(int index) {
                        Toast.makeText(CustomHeightListViewActivity.this, ""onItemSelected:"" + index, Toast.LENGTH_SHORT).show();
                    }"
26359,onNestedPreFling,"    public boolean onNestedPreFling(View target, float velocityX, float velocityY) {
        return false;
    }"
26360,onNestedFling,"    public boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed) {
        return false;
    }"
26361,onNestedPreScroll,"    public void onNestedPreScroll(View target, int dx, int dy, int[] consumed) {
        this.dispatchNestedPreScroll(dx,dy,consumed,offsets);
    }"
26362,onNestedScroll,"    public void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {
        boolean result = this.dispatchNestedScroll(dxConsumed,dyConsumed,dxUnconsumed,dyUnconsumed,offsets);
        if ( result ){
            boolean consumed = (offsets[1] + dyUnconsumed) == 0 && dyUnconsumed != 0;"
26363,onStartNestedScroll,"    public boolean onStartNestedScroll(View child, View target, int nestedScrollAxes) {
        boolean result = this.startNestedScroll(nestedScrollAxes);
        if ( result ) mTouchManager.setInterceptEnabled(false);
        return true;
    }"
26364,onStopNestedScroll,"    public void onStopNestedScroll(View target) {
        mScrollingParentHelper.onStopNestedScroll(target);
    }"
26365,getNestedScrollAxes,"    public int getNestedScrollAxes() {
        return mScrollingParentHelper.getNestedScrollAxes();
    }"
26366,onNestedScrollAccepted,"    public void onNestedScrollAccepted(View child, View target, int axes) {
        mScrollingParentHelper.onNestedScrollAccepted(child, target, axes);
    }"
26369,dispatchNestedPreScroll,"    public boolean dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow) {
        boolean result = mScrollingChildHelper.dispatchNestedPreScroll(dx, dy, consumed, offsetInWindow);
        return result;
    }"
26370,dispatchNestedScroll,"    public boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed,
                                        int dyUnconsumed, int[] offsetInWindow) {
        boolean result = mScrollingChildHelper.dispatchNestedScroll(dxConsumed, dyConsumed,
                dxUnconsumed, dyUnconsumed, offsetInWindow);"
26376,isIdle,"        public boolean isIdle(){
            return  mStatus == STATUS_IDLE;
        }"
26377,isRestoring,"        public boolean isRestoring(){
            return mStatus == STATUS_RESTORE;
        }"
26378,isBusying,"        public boolean isBusying(){
            return mStatus == STATUS_BUSY;
        }"
26379,isChanged,"        public boolean isChanged(){
            return  mStatus == STATUS_CHANGED;
        }"
26380,toChanged,"        public void toChanged(){
            mStatus = STATUS_CHANGED;
        }"
26381,toRestore,"        public void toRestore(){
            mStatus = STATUS_RESTORE;
        }"
26382,toBusy,"        public void toBusy(){
            mStatus = STATUS_BUSY;
        }"
26383,toIdle,"        public void toIdle(){
            mStatus = STATUS_IDLE;
        }"
26385,dp2px,"    public static int dp2px(float valueInDp) {
        final float scale = Resources.getSystem().getDisplayMetrics().density;
        return (int) (valueInDp * scale + 0.5f);
    }"
26386,setTo,"        public void setTo(ChromeLikeSwipeLayout chromeLikeSwipeLayout){
            chromeLikeSwipeLayout.setConfig(this);
        }"
26387,setMaxHeight,"        public Config setMaxHeight(int maxHeight) {
            this.maxHeight = maxHeight;
            return this;
        }"
26388,gummyDuration,"        public Config gummyDuration(int duration){
            this.mGummyDuration = duration;
            return this;
        }"
26389,rippleDuration,"        public Config rippleDuration(int duration){
            this.mRippleDuration = duration;
            return this;
        }"
26390,collapseDuration,"        public Config collapseDuration(int duration){
            this.mCollapseDuration = duration;
            return this;
        }"
26391,gap,"        public Config gap(int gap){
            this.mGap = gap;
            return this;
        }"
26392,radius,"        public Config radius(int radius){
            this.mRadius = radius;
            return this;
        }"
26393,listenItemSelected,"        public Config listenItemSelected(IOnItemSelectedListener listener){
            this.mOnItemSelectedListener = listener;
            return this;
        }"
26394,circleColor,"        public Config circleColor(@ColorInt int color){
            this.mCircleColor = color;
            return this;
        }"
26395,backgroundColor,"        public Config backgroundColor(@ColorInt int color){
            this.mBackgroundColor = color;
            return this;
        }"
26396,background,"        public Config background(@DrawableRes int backgroundResId){
            this.mBackgroundResId = backgroundResId;
            return this;
        }"
26397,addIcon,"        public Config addIcon(@DrawableRes int drawableResId){
            if ( mIcons == null ) mIcons = new LinkedList<>();
            mIcons.add(drawableResId);
            return this;
        }"
26398,makeConfig,"    public static Config makeConfig(){
        return new Config();
    }"
26399,onExpandView,"        void onExpandView(float fraction, boolean isFromCancel);
    }"
26400,onBeginDragging,"    public void onBeginDragging() {
        mStatusManager.toChanged();
    }"
26401,onActionMove,"    public void onActionMove(boolean isExpanded, TouchManager touchManager) {
        mChromeLikeLayout.onActionMove(isExpanded, touchManager);
        ensureTarget();
        View child = mTarget;
        int currentTop = child.getTop();
        if ( mTouchManager.isBeginDragging() ) {
            if ( !isExpanded )"
26402,onActionCancel,"    public void onActionCancel(boolean isExpanded) {
        mChromeLikeLayout.onActionUpOrCancel(isExpanded);
    }"
26403,onActionUp,"    public void onActionUp(boolean isExpanded) {
        executeAction(isExpanded);
        mChromeLikeLayout.onActionUpOrCancel(isExpanded);
    }"
26404,onActionDown,"    public void onActionDown() {
        mChromeLikeLayout.onActionDown();
    }"
26405,removeAllOnExpandViewListener,"    public void removeAllOnExpandViewListener(){
        mExpandListeners.clear();
    }"
26406,removeOnExpandViewListener,"    public void removeOnExpandViewListener(IOnExpandViewListener listener){
        mExpandListeners.remove(listener);
    }"
26407,addOnExpandViewListener,"    public void addOnExpandViewListener(IOnExpandViewListener listener){
        mExpandListeners.add(listener);
    }"
26408,notifyOnExpandListeners,"    public void notifyOnExpandListeners(float fraction, boolean isFromCancel){
        fraction = fraction < 1 ? fraction : 1;
        for ( IOnExpandViewListener listener : mExpandListeners )
            listener.onExpandView(fraction,isFromCancel);"
26410,setCollapseDuration,"    private void setCollapseDuration(int collapseDuration) {
        this.mCollapseDuration = collapseDuration;
    }"
26412,canChildDragDown,"    private boolean canChildDragDown(PointF pointF){
        ensureTarget();
        if ( mTarget instanceof TouchAlwaysTrueLayout )
            return ((TouchAlwaysTrueLayout) mTarget).canChildDragDown(pointF);"
26414,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        if (mTarget == null) {
            ensureTarget();
        }
        if (mTarget == null) {
            return;
        }
        final int width = getMeasuredWidth() - getPaddingLeft() - getPaddingRight();"
26416,addView,"    public void addView(View child, int index, LayoutParams params) {

        boolean touchAlwaysTrue = child instanceof ScrollView
                || child instanceof AbsListView
                || child instanceof ScrollingView"
26417,onAnimationEnd,"            public void onAnimationEnd(Animation animation) {
                mAnimationStarted = false;
                mStatusManager.toIdle();
            }"
26418,applyTransformation,"            protected void applyTransformation(float interpolatedTime, Transformation t) {
                float step = (to - from) * interpolatedTime + from;
                int top =  mTarget.getTop();
                notifyOnExpandListeners( mTouchManager.calExpandProgress(top) ,isFromCancel);
                childOffsetTopAndBottom( mTouchManager.calTargetTopOffset(top, Math.round(step)) );
            }"
26420,launchResetAnim,"    private void launchResetAnim(){
        boolean isFromCancel = !mStatusManager.isRestoring();
        launchResetAnim(isFromCancel);
    }"
26421,executeAction,"    private void executeAction(boolean isExpanded) {
        if ( isExpanded ){
            mStatusManager.toBusy();"
26422,childOffsetTopAndBottom,"    private void childOffsetTopAndBottom(int target){
        mTarget.offsetTopAndBottom( target );
        mChromeLikeLayout.offsetTopAndBottom( target );
        requestLayout();
    }"
26423,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        return mTouchManager.onFeedTouchEvent(event);
    }"
26425,setEnabled,"    public void setEnabled(boolean enabled) {
        mEnabled = enabled;
    }"
26426,onRippleAnimFinished,"            public void onRippleAnimFinished(int index) {
                mStatusManager.toRestore();
                if ( !mAnimationStarted ) launchResetAnim();
                mTouchManager.endDrag();
                if ( mOnItemSelectedListener != null )
                    mOnItemSelectedListener.onItemSelected(index);"
26427,init,"    private void init() {
        final ViewConfiguration configuration = ViewConfiguration.get(getContext());
        mTouchManager.setTouchSlop((int) (configuration.getScaledTouchSlop() * 1.1f));

        mChromeLikeLayout = new ChromeLikeLayout(getContext());
        mChromeLikeLayout.setRippleListener(new ChromeLikeLayout.IOnRippleListener() {
            @Override
            public void onRippleAnimFinished(int index) {"
26428,evaluate,"        public static Float evaluate(float fraction, Number startValue, Number endValue) {
            float startFloat = startValue.floatValue();
            return startFloat + fraction * (endValue.floatValue() - startFloat);
        }"
26430,setDuration,"        public void setDuration(int duration) {
            this.mDuration = duration;
        }"
26431,onAnimationEnd,"        public void onAnimationEnd(Animation animation) {
            if (mAnimationStarted){
                mTouchHelper.resetToReady(mAnimFromX);"
26432,onAnimationStart,"        public void onAnimationStart(Animation animation) {
"
26433,isAnimationStarted,"        public boolean isAnimationStarted() {
            return mAnimationStarted;
        }"
26434,applyTransformation,"                protected void applyTransformation(float interpolatedTime, Transformation t) {
                    onAnimationUpdate(interpolatedTime);
                }"
26436,onAnimationUpdate,"        public void onAnimationUpdate(float interpolation) {
            Float currentX = FloatEvaluator.evaluate(interpolation,mAnimFromX,mAnimToX);
            mTranslate = FloatEvaluator.evaluate(interpolation, mAnimFromTranslate, mAnimToTranslate);
            updatePath(currentX, mAnimToX, mRadius, true);
        }"
26438,onAnimationEnd,"        public void onAnimationEnd(Animation animation) {
            mAnimationStarted = false;
            if ( !mEventDispatched && mRippleListener != null ){
                mRippleListener.onRippleAnimFinished(mCurrentFlag);"
26442,onAnimationUpdate,"        public void onAnimationUpdate(float interpolation) {
            int currentRadius = FloatEvaluator.evaluate(interpolation,mAnimFromRadius,mAnimToRadius).intValue();
            updatePath(0, 0, currentRadius, true);
            updateAlpha(1-interpolation);
        }"
26443,reset,"        public void reset(){
            mInit = false;
            mPrev = 0;
        }"
26444,absOverflow,"        public boolean absOverflow(float value){
            if (!mInit){
                mPrev = value;
                mInit = true;"
26445,checkAbsOverflow,"        private boolean checkAbsOverflow(float now){
            if (Math.abs(now - mPrev) > mThreshold) return true;
            else return false;"
26446,testRightEdge,"        public void testRightEdge() {
            if ( mMovingCurrentX > mMovingPrevX )
                mMovingPrevX = mMovingCurrentX;"
26447,testLeftEdge,"        public void testLeftEdge() {
            if ( mMovingCurrentX < mMovingPrevX )
                mMovingPrevX = mMovingCurrentX;"
26448,reset,"        public void reset(){
            mStatus = STATUS_NONE;
            mReadyPrevX = 0;
            mMovingPrevX = 0;
        }"
26449,resetToReady,"        public void resetToReady(float animFromX){
            mStatus = STATUS_READY;
            mReadyPrevX = animFromX;
        }"
26450,getCurrentX,"        public float getCurrentX(){
            return mMovingCurrentX;
        }"
26451,getPrevX,"        public float getPrevX(){
            return mMovingPrevX;
        }"
26453,isExpanded,"        public boolean isExpanded(){
            return mStatus > STATUS_NONE;
        }"
26454,isMoving,"        public boolean isMoving(){
            return mStatus == STATUS_MOVING;
        }"
26455,onRippleAnimFinished,"        void onRippleAnimFinished(int index);
    }"
26456,setGap,"    public void setGap(int gap) {
        this.mGap = gap;
    }"
26457,setCircleColor,"    public void setCircleColor(int circleColor) {
        mPaint.setColor(circleColor);
    }"
26458,setRippleListener,"    public void setRippleListener(IOnRippleListener mRippleListener) {
        this.mRippleListener = mRippleListener;
    }"
26459,offsetFraction,"    private float offsetFraction(float fraction, float factor){
        float result = (fraction - factor) / (1 - factor);
        result = result > 0 ? result : 0;
        return result;
    }"
26460,iconOffsetFraction,"    private float iconOffsetFraction( float fraction ){
        return offsetFraction(fraction, sFactorScaleIcon);
    }"
26461,circleOffsetFraction,"    private float circleOffsetFraction( float fraction ){
        return offsetFraction(fraction, sFactorScaleCircle);
    }"
26462,onExpandView,"    public void onExpandView(float fraction, boolean isFromCancel) {
        float circleFraction = circleOffsetFraction(fraction);
        if (isFromCancel) updateAlpha(circleFraction);
        updatePath(0,0,Math.round(mRadius*circleFraction),true);
        updateIconScale(fraction);
    }"
26463,points2Degrees,"    private static float points2Degrees(float x1, float y1, float x2, float y2){
        double angle = Math.atan2(y2-y1,x2-x1);
        return (float) Math.toDegrees(angle);
    }"
26464,flag2TargetTranslate,"    private int flag2TargetTranslate(){
        int startXOffset = getCircleStartX();
        return startXOffset + getItemWidth() * mCurrentFlag;
    }"
26465,distance,"    private static float distance(float x1,float y1, float x2, float y2){
        return (float) Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    }"
26466,onDraw,"    protected void onDraw(Canvas canvas) {
        if ( getChildCount() == 0 ) return;
        int centerY = getMeasuredHeight() >> 1;

        canvas.save();
        canvas.translate(mTranslate, centerY);
        canvas.rotate(mDegrees);
        canvas.drawPath(mPath, mPaint);
        canvas.restore();"
26467,prevOfCurrentFlag,"    private int prevOfCurrentFlag(){
        int tmp = mCurrentFlag;
        tmp--;
        return Math.max(tmp,0);
    }"
26468,nextOfCurrentFlag,"    private int nextOfCurrentFlag(){
        int tmp = mCurrentFlag;
        tmp++;
        return Math.min(tmp,getChildCount()-1);
    }"
26469,updateCurrentFlag,"    private void updateCurrentFlag(int flag){
        mCurrentFlag = flag;
        boolean isPressed;
        for (int i = 0; i < getChildCount(); i++ ){
            View view = getChildAt(i);"
26470,updateIconScale,"    private void updateIconScale( float fraction ){
        float iconFraction = iconOffsetFraction(fraction);
        for (int i = 0 ; i < getChildCount(); i++ ){
            View v = getChildAt(i);"
26472,updatePath,"    private void updatePath(float currentX, float prevX, int radius, boolean animate){
        updatePath(currentX,0,prevX,0,radius,animate);
    }"
26473,updateAlpha,"    private void updateAlpha( float alpha ){
        mPaint.setAlpha(Math.round(255 * alpha));
    }"
26474,reset,"    private void reset(){
        onExpandView(0,false);
        updateAlpha(1);
        updateCurrentFlag((getChildCount() - 1) >> 1);
        mTranslate = flag2TargetTranslate();
    }"
26475,onActionUpOrCancel,"    public void onActionUpOrCancel(boolean isExpanded){
        if ( getChildCount() == 0 ) return;
        if ( !mTouchHelper.isExpanded() ) return;
        mTouchHelper.reset();

        if ( isExpanded ){"
26477,onActionDown,"    public void onActionDown(){
        reset();
    }"
26478,setRadius,"    public void setRadius(int radius) {
        this.mRadius = radius;
    }"
26479,setGummyDuration,"    public void setGummyDuration(int duration){
        mGummyAnimatorHelper.setDuration(duration);
    }"
26480,setRippleDuration,"    public void setRippleDuration(int duration){
        mRippleAnimatorHelper.setDuration(duration);
    }"
26481,setIcons,"    public void setIcons(List<Integer> drawables){
        this.removeAllViews();
        for ( int res : drawables ){
            View v = new View(getContext());"
26483,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        measureChildren(getMeasuredWidth(),getMeasuredHeight());
    }"
26484,onLayout,"    protected void onLayout(boolean changed, int l, int t, int r, int b) {

        int startXOffset = getCircleStartX();
        int startYOffset = (b - t);
"
26485,getCircleStartX,"    private int getCircleStartX(){
        int contentWidth = getItemWidth();
        int totalWidth = getMeasuredWidth();
        int totalContextWidth = contentWidth * (getChildCount() - 1);
        return (totalWidth - totalContextWidth) >> 1;
    }"
26486,getMovingThreshold,"    private float getMovingThreshold() {
        return getItemWidth() * sThreshold;
    }"
26487,getItemWidth,"    private int getItemWidth(){
        return mRadius*2 + mGap;
    }"
26488,onAnimationRepeat,"    public void onAnimationRepeat(Animation animation) {
"
26489,onAnimationEnd,"    public void onAnimationEnd(Animation animation) {
"
26490,onAnimationStart,"    public void onAnimationStart(Animation animation) {
"
26492,yypushback,"  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);
"
26493,zzScanError,"  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {"
26494,yylength,"  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }"
26495,yycharat,"  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }"
26496,yytext,"  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }"
26497,yybegin,"  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }"
26498,yystate,"  public final int yystate() {
    return zzLexicalState;
  }"
26499,yyatEOF,"  public final boolean yyatEOF() {
    return zzAtEOF;
  }"
26500,yyResetPosition,"  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }"
26501,yyreset,"  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];"
26504,zzCMap,"  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }"
26505,zzCanGrow,"  private boolean zzCanGrow() {
    return true;
  }"
26506,zzMaxBufferLen,"  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }"
26507,yystart,"	final int yystart() {
		return zzStartRead;
	}"
26508,yybuffer,"	final char [] yybuffer() {
		return zzBuffer;
	}"
26509,yychar,"	public final int yychar()
	{
	    return Math.toIntExact(yychar);"
26511,zzUnpackAttribute,"  private static int [] zzUnpackAttribute() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }"
26513,zzUnpacktrans,"  private static int [] zzUnpacktrans() {
    int [] result = new int[4859];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }"
26515,zzUnpackRowMap,"  private static int [] zzUnpackRowMap() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }"
26517,zzUnpackAction,"  private static int [] zzUnpackAction() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }"
26519,zzUnpackcmap_blocks,"  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }"
26521,zzUnpackcmap_top,"  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }"
26522,onClick,"            public void onClick(View v) {
                if(captchaInput.getText().toString().equals(captchaImageView.getCaptchaCode())){
                    Toast.makeText(MainActivity.this, ""Matched"", Toast.LENGTH_SHORT).show();"
26523,onClick,"            public void onClick(View v) {
                captchaImageView.regenerate();
            }"
26525,onDouble,"    public void onDouble(Double aDouble) {
        Toast.makeText(this, ""Double: "" + aDouble, Toast.LENGTH_SHORT).show();
    }"
26526,onShort,"    public void onShort(Short aShort) {
        Toast.makeText(this, ""Short: "" + aShort, Toast.LENGTH_SHORT).show();
    }"
26527,onLong,"    public void onLong(Long aLong) {
        Toast.makeText(this, ""Long: "" + aLong, Toast.LENGTH_SHORT).show();
    }"
26528,onFloat,"    public void onFloat(Float aFloat) {
        Toast.makeText(this, ""Float: "" + aFloat, Toast.LENGTH_SHORT).show();
    }"
26529,onInteger,"    public void onInteger(Integer integer) {
        Toast.makeText(this, ""Integer: "" + integer, Toast.LENGTH_SHORT).show();
    }"
26530,onString,"    public void onString(String stringReceived) {
        Toast.makeText(this, ""String: "" + stringReceived, Toast.LENGTH_SHORT).show();
    }"
26531,onCustomObject,"    public void onCustomObject(CustomObject customObject) {
        Toast.makeText(this, ""Object: "" + customObject.getName(), Toast.LENGTH_SHORT).show();
    }"
26532,onClick,"            public void onClick(View v) {
                List<Object> messages = Arrays.<Object>asList(editTextToSend.getText().toString(), 1, 1L, 1.0f, 1.0, (short) 1);
                Object random = messages.get(rand.nextInt(messages.size()));
                EventBus.getDefault(v.getContext()).post(random);
            }"
26537,onDestroy,"    protected void onDestroy() {
        EventBus.getDefault(this).unregister(this);
        super.onDestroy();
    }"
26539,newArray,"        public CustomObject[] newArray(int size) {
            return new CustomObject[size];
        }"
26540,createFromParcel,"        public CustomObject createFromParcel(Parcel in) {
            return new CustomObject(in);
        }"
26541,toString,"    public String toString() {
        return ""CustomObject{"" +
                ""name='"" + name + '\'' +"
26542,writeToParcel,"    public void writeToParcel(Parcel dest, int flags) {
        dest.writeString(name);
    }"
26546,onTerminate,"    public void onTerminate() {
        super.onTerminate();
        Beta.unInit();
    }"
26547,registerActivityLifecycleCallback,"    public void registerActivityLifecycleCallback(
            Application.ActivityLifecycleCallbacks callbacks) {
        getApplication().registerActivityLifecycleCallbacks(callbacks);"
26554,onDownloadReceived,"            public void onDownloadReceived(long savedLength, long totalLength) {
                Toast.makeText(getApplication(),
                        String.format(Locale.getDefault(), ""%s %d%%"","
26557,getInstance,"    public static NativeCrashJni getInstance(){
        if (nativeCrashJni==null){
            nativeCrashJni = new NativeCrashJni();
            Log.d(""TEST"",""nativeCrashJni null"");
        }"
26559,stringFromJNI,"    public native String stringFromJNI();
    public native void createNativeCrash();"
26560,onBackPressed,"    public void onBackPressed() {
        super.onBackPressed();
        Log.e(""MainActivity"", ""onBackPressed"");

        Beta.unInit();"
26561,getCurrentVersion,"    public String getCurrentVersion(Context context) {
        try {
            PackageInfo packageInfo =
                    context.getPackageManager().getPackageInfo(this.getPackageName(),"
26563,testToast,"    public void testToast() {
        Toast.makeText(this, LoadBugClass.getBugString(), Toast.LENGTH_SHORT).show();
    }"
26565,getBugString,"    public static String getBugString() {
        BugClass bugClass = new BugClass();
        return bugClass.bug();
    }"
26569,onClick,"                public void onClick(View v) {
                    helper4.dismissBubblePopupWindow();
                }"
26570,onClick,"                public void onClick(View v) {
                    helper3.dismissBubblePopupWindow();
                }"
26571,onClick,"                public void onClick(View v) {
                    helper2.dismissBubblePopupWindow();
                }"
26572,onClick,"                public void onClick(View v) {
                    helper1.dismissBubblePopupWindow();
                }"
26573,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        if(hasFocus && !inited){
            inited = true;"
26574,onClick,"            public void onClick(View v) {
                helper4.show();
                Toast.makeText(MainActivity3.this,""button 4"",Toast.LENGTH_SHORT).show();
            }"
26575,onClick,"            public void onClick(View v) {
                helper3.show();
            }"
26576,onClick,"            public void onClick(View v) {
                helper2.show();
            }"
26577,onClick,"            public void onClick(View v) {
                helper1.show();
            }"
26578,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_helper);

        bt1 = (Button) findViewById(R.id.bt);
        bt1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                helper1.show();
            }
        });
"
26581,onClick,"            public void onClick(View v) {
                Toast.makeText(MainActivity2.this,""cancel"",Toast.LENGTH_SHORT).show();
            }"
26582,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        LeBubbleTitleTextView bubbleTitleTextView = (LeBubbleTitleTextView) findViewById(R.id.ltt1);
        bubbleTitleTextView.getCancelImage().setOnClickListener(new View.OnClickListener() {
            @Override"
26590,onClick,"            public void onClick(View v) {
                helper4.show();
            }"
26595,onScrolled,"            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                super.onScrolled(recyclerView, dx, dy);
                mScrollerY += dy;
                if (Math.abs(mScrollerY) > 1000) {
                    mBlurredView.setBlurredTop(100);
                    mAlpha = 100;"
26596,onScrollStateChanged,"            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
                super.onScrollStateChanged(recyclerView, newState);
            }"
26598,getItemViewType,"    public int getItemViewType(int position) {
        if (position == 0) {
            return TYPE_HEADER;"
26599,getItemCount,"    public int getItemCount() {
        return ITEM_COUNT;
    }"
26600,onBindViewHolder,"    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
"
26601,onCreateViewHolder,"    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        if (viewType == TYPE_HEADER) {
            return new HeaderHolder(LayoutInflater.from(context).inflate(R.layout.recyclerview_header, parent, false));
        }"
26602,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, WeatherActivity.class));
            }"
26603,onClick,"            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, BlurredViewBasicActivity.class));
            }"
26604,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main_activity);

        mBasicBtn = (Button) findViewById(R.id.basic_blur_btn);
        mWeatherBtn = (Button) findViewById(R.id.weather_blur_btn);

        mBasicBtn.setOnClickListener(new View.OnClickListener() {"
26607,onProgressChanged,"            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                mBlurredView.setBlurredLevel(progress);
                mProgressTv.setText(String.valueOf(progress));
            }"
26608,setSeekBar,"    private void setSeekBar() {
        mSeekBar.setMax(100);
        mSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override"
26612,onBlurComplete,"                    public void onBlurComplete() {
                        Intent intent = new Intent(MainActivity.this, BlurredActivity.class);
                        intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);

                        startActivity(intent);"
26613,onClick,"			public void onClick(View v) {

				BlurBehind.getInstance().execute(MainActivity.this, new OnBlurCompleteListener() {"
26614,onCreate,"	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_main);

		final Button dummyButton = (Button) findViewById(R.id.dummy_button);"
26615,onCreate,"	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_blurred);
"
26616,onPostExecute,"        protected void onPostExecute(Void aVoid) {
            super.onPostExecute(aVoid);

            decorView.destroyDrawingCache();
            decorView.setDrawingCacheEnabled(false);

            activity = null;
"
26617,doInBackground,"        protected Void doInBackground(Void... params) {
            Bitmap blurredBitmap = Blur.apply(activity, image, CONSTANT_BLUR_RADIUS);
            mImageCache.put(KEY_CACHE_BLURRED_BACKGROUND_IMAGE, blurredBitmap);

            return null;"
26618,onPreExecute,"        protected void onPreExecute() {
            super.onPreExecute();

            decorView = activity.getWindow().getDecorView();
            decorView.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_LOW);
            decorView.setDrawingCacheEnabled(true);
            decorView.buildDrawingCache();
"
26619,setBackground,"    public void setBackground(Activity activity) {
        if (mImageCache.size() != 0) {
            BitmapDrawable bd = new BitmapDrawable(activity.getResources(), mImageCache.get(KEY_CACHE_BLURRED_BACKGROUND_IMAGE));"
26620,withFilterColor,"    public BlurBehind withFilterColor(int filterColor) {
        this.mFilterColor = filterColor;
        return this;
    }"
26621,withAlpha,"    public BlurBehind withAlpha(int alpha) {
        this.mAlpha = alpha;
        return this;
    }"
26622,execute,"    public void execute(Activity activity, OnBlurCompleteListener onBlurCompleteListener) {
        if (mState.equals(State.READY)) {
            mState = State.EXECUTING;"
26623,getInstance,"    public static BlurBehind getInstance() {
        if (mInstance == null) {
            mInstance = new BlurBehind();
        }"
26627,loadImage,"    public void loadImage(ImageView imageView, Object obj, Context context) {
        Glide.with(context).load(obj).into(imageView);
    }"
26628,setStrokeColor,"    public void setStrokeColor(int strokeColor) {
        color_stroke = strokeColor;
        mRoundStrokePaint.setColor(strokeColor);
    }"
26629,setTouchColor,"    public void setTouchColor(int touchColor) {
        color_touch = touchColor;
        mTouchPaint.setColor(touchColor);
    }"
26630,setBezRoundColor,"    public void setBezRoundColor(int roundcolor) {
        color_bez = roundcolor;
        mBezPaint.setColor(roundcolor);
    }"
26631,setRoundCount,"    public void setRoundCount(int count) {
        this.default_round_count = count;
        initCountPos();
    }"
26632,setRadius,"    public void setRadius(int radius) {
        this.mRadius = radius;
        init();
    }"
26633,setAnimDuration,"    public void setAnimDuration(int time) {
        time_animator = time;
    }"
26634,onPageScrollStateChanged,"    public void onPageScrollStateChanged(int state) {
    }"
26635,onPageSelected,"    public void onPageSelected(int position) {
    }"
26637,range0Until1,"    private float range0Until1(float minValue, float maxValue) {
        return (animatedValue - minValue) / (maxValue - minValue);
    }"
26640,onAnimationUpdate,"                public void onAnimationUpdate(ValueAnimator animation) {
                    animatedTouchValue = (float) animation.getAnimatedValue();
                    if (animatedTouchValue == mRadius * 1.5f) {
                        isTouchAniming = false;"
26642,onAnimationRepeat,"                public void onAnimationRepeat(Animator animator) {
                }"
26643,onAnimationCancel,"                public void onAnimationCancel(Animator animator) {
                    isAniming = false;
                    curPos = nextPos;
                    if (mViewPage != null) {
                        mViewPage.setTouchable(true);"
26644,onAnimationEnd,"                public void onAnimationEnd(Animator animator) {
                    isAniming = false;
                    curPos = nextPos;
                    if (mViewPage != null) {
                        mViewPage.setTouchable(true);"
26645,onAnimationStart,"                public void onAnimationStart(Animator animator) {
                    isAniming = true;
                    if (mViewPage != null) {
                        mViewPage.setTouchable(false);"
26646,onAnimationUpdate,"                public void onAnimationUpdate(ValueAnimator animation) {
                    isAniming = true;
                    animatedValue = (float) animation.getAnimatedValue();
                    invalidate();
"
26647,startAnimator,"    public void startAnimator() {
        if (animatorStart != null) {
            if (animatorStart.isRunning()) {"
26648,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                float x = event.getX();"
26649,initCountPos,"    private void initCountPos() {
        bezPos = new float[default_round_count];
        xPivotPos = new float[default_round_count];
        for (int i = 0; i < default_round_count; i++) {
            bezPos[i] = mWidth / (default_round_count + 1) * (i + 1);"
26650,attach2ViewPage,"    public void attach2ViewPage(BezierViewPager vPage) {
        vPage.addOnPageChangeListener(this);
        this.mViewPage = vPage;
        if (CardPagerAdapter.class.isInstance(vPage.getAdapter())) {
            this.default_round_count = vPage.getAdapter().getCount();"
26652,onSizeChanged,"    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);

        mWidth = w;
        mHeight = h;
        initCountPos();"
26653,onMeasure,"    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        if (DEFAULT_WIDTH == 0) {
            WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
            DEFAULT_WIDTH = wm.getDefaultDisplay().getWidth();
        }
"
26655,setLoop,"    public void setLoop(boolean loop) {
        mLoop = loop;
    }"
26656,setTangent,"    public void setTangent(boolean tangent) {
        mTangent = tangent;
    }"
26657,setRate,"    public void setRate(int rate) {
        mRate = rate;
    }"
26658,getOrderStr,"    public String getOrderStr() {
        return ORDER_STRS[getOrder() - 1];
    }"
26659,setOrder,"    public void setOrder(int order) {
        if (getOrder() == order) {
            return;
        }
        stop();
        int size = getOrder() - order;"
26660,getOrder,"    public int getOrder() {
        return mControlPoints.size() - 1;
    }"
26661,delPoint,"    public boolean delPoint() {
        if (isReady()) {
            int size = mControlPoints.size();
            if (size <= 2) {"
26662,addPoint,"    public boolean addPoint() {
        if (isReady()) {
            int size = mControlPoints.size();
            if (size >= MAX_COUNT + 1) {"
26663,stop,"    public void stop() {
        if (isRunning()) {
            mHandler.removeMessages(HANDLER_WHAT);"
26664,start,"    public void start() {
        if (isReady()) {
            mBezierPoint = null;"
26665,isStop,"    private boolean isStop() {
        return (mState & STATE_STOP) == STATE_STOP;
    }"
26666,isTouchable,"    private boolean isTouchable() {
        return (mState & STATE_TOUCH) == STATE_TOUCH;
    }"
26667,isRunning,"    private boolean isRunning() {
        return (mState & STATE_RUNNING) == STATE_RUNNING;
    }"
26668,isReady,"    private boolean isReady() {
        return (mState & STATE_READY) == STATE_READY;
    }"
26669,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        if (!isTouchable()) {
            return true;
        }
        switch (event.getAction()) {"
26670,onDraw,"    protected void onDraw(Canvas canvas) {
        if (isRunning() && !isTouchable()) {
            if (mBezierPoint == null) {
                mBezierPath.reset();"
26671,onLayout,"    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
        super.onLayout(changed, left, top, right, bottom);
        if (mWidth == 0 || mHeight == 0) {
            mWidth = getWidth();"
26672,isLegalFingerRegion,"    private boolean isLegalFingerRegion(float x, float y) {
        if (mCurPoint != null) {
            RectF rectF = new RectF(mCurPoint.x - (FINGER_RECT_SIZE >> 1),
                    mCurPoint.y - (FINGER_RECT_SIZE >> 1), mCurPoint"
26673,getLegalControlPoint,"    private PointF getLegalControlPoint(float x, float y) {
        RectF rectF = new RectF();
        for (PointF point : mControlPoints) {
            rectF.set(point.x - REGION_WIDTH, point.y - REGION_WIDTH, point.x + REGION_WIDTH,
                    point.y + REGION_WIDTH);"
26674,isLegalTouchRegion,"    private boolean isLegalTouchRegion(float x, float y) {
        if (x <= REGION_WIDTH || x >= mWidth - REGION_WIDTH || y <= REGION_WIDTH || y >= mHeight - REGION_WIDTH) {
            return false;
        }
        RectF rectF = new RectF();
        for (PointF point : mControlPoints) {"
26675,deCasteljauY,"    private float deCasteljauY(int i, int j, float t) {
        if (i == 1) {
            return (1 - t) * mControlPoints.get(j).y + t * mControlPoints.get(j + 1).y;
        }"
26676,deCasteljauX,"    private float deCasteljauX(int i, int j, float t) {
        if (i == 1) {
            return (1 - t) * mControlPoints.get(j).x + t * mControlPoints.get(j + 1).x;
        }"
26680,handleMessage,"        public void handleMessage(Message msg) {
            if (msg.what == HANDLER_WHAT) {
                mR += mRate;"
26681,testFromValueThrowException,"    public void testFromValueThrowException() {
        ValidationStyle.fromValue(4);
    }"
26682,testFromValueToTextInputLayout,"    public void testFromValueToTextInputLayout() {
        assertEquals(ValidationStyle.TEXT_INPUT_LAYOUT, ValidationStyle.fromValue(3));
    }"
26683,testFromValueToUnderlabel,"    public void testFromValueToUnderlabel() {
        assertEquals(ValidationStyle.UNDERLABEL, ValidationStyle.fromValue(2));
    }"
26684,testFromValueToColoration,"    public void testFromValueToColoration() {
        assertEquals(ValidationStyle.COLORATION, ValidationStyle.fromValue(1));
    }"
26685,testFromValueToBasic,"    public void testFromValueToBasic() {
        assertEquals(ValidationStyle.BASIC, ValidationStyle.fromValue(0));
    }"
26686,fromValue,"    public static ValidationStyle fromValue(int value) {
        switch (value) {
            case 0:"
26687,value,"    public int value() {
        return mValue;
    }"
26688,testResetCustomError,"    public void testResetCustomError() {
        mValidationHolderCustomTypeWithSomeSortOfView.resetCustomError();
        verify(mMockCustomErrorReset, times(1)).reset(mValidationHolderCustomTypeWithSomeSortOfView);
    }"
26692,testGetView,"    public void testGetView() {
        assertEquals(mMockView, mValidationHolderCustomTypeWithSomeSortOfView.getView());
    }"
26696,testGetEditTextFromEditText,"    public void testGetEditTextFromEditText() {
        assertEquals(mMockEditText, mValidationHolderRegexTypeWithEditText.getEditText());
        assertEquals(mMockEditText, mValidationHolderRangeTypeWithEditText.getEditText());
        assertEquals(mMockConfirmationEditText, mValidationHolderConfirmationTypeWithEditText.getEditText());
        assertEquals(mMockEditText, mValidationHolderSimpleCustomTypeWithEditText.getEditText());
    }"
26698,testGetConfirmationTextFromTextInputLayoutThrowsException,"    public void testGetConfirmationTextFromTextInputLayoutThrowsException() {
        when(mMockConfirmationTextInputLayout.getEditText()).thenReturn(null);
        mValidationHolderConfirmationTypeWithTextInputLayout.getConfirmationText();
    }"
26700,testGetConfirmationTextFromEditText,"    public void testGetConfirmationTextFromEditText() {
        String text = ""OK"";
        Editable mockEditable = mock(Editable.class);
        when(mMockConfirmationEditText.getText()).thenReturn(mockEditable);
        when(mockEditable.toString()).thenReturn(text);
        assertEquals(text, mValidationHolderConfirmationTypeWithEditText.getConfirmationText());
    }"
26702,testGetTextFromTextInputLayoutThrowsException,"    public void testGetTextFromTextInputLayoutThrowsException() {
        when(mMockTextInputLayout.getEditText()).thenReturn(null);
        mValidationHolderRegexTypeWithTextInputLayout.getText();
    }"
26706,testIsSomeSortOfViewTrue,"    public void testIsSomeSortOfViewTrue() {
        assertTrue(mValidationHolderCustomTypeWithSomeSortOfView.isSomeSortOfView());
    }"
26708,testIsTextInputLayoutViewTrue,"    public void testIsTextInputLayoutViewTrue() {
        assertTrue(mValidationHolderRegexTypeWithTextInputLayout.isTextInputLayoutView());
        assertTrue(mValidationHolderRangeTypeWithTextInputLayout.isTextInputLayoutView());
        assertTrue(mValidationHolderConfirmationTypeWithTextInputLayout.isTextInputLayoutView());
        assertTrue(mValidationHolderSimpleCustomTypeWithTextInputLayout.isTextInputLayoutView());
    }"
26710,testIsEditTextViewTrue,"    public void testIsEditTextViewTrue() {
        assertTrue(mValidationHolderRegexTypeWithEditText.isEditTextView());
        assertTrue(mValidationHolderRangeTypeWithEditText.isEditTextView());
        assertTrue(mValidationHolderConfirmationTypeWithEditText.isEditTextView());
        assertTrue(mValidationHolderSimpleCustomTypeWithEditText.isEditTextView());
    }"
26712,testIsCustomTypeTrue,"    public void testIsCustomTypeTrue() {
        assertTrue(mValidationHolderCustomTypeWithSomeSortOfView.isCustomType());
    }"
26714,testIsSimpleCustomTypeTrue,"    public void testIsSimpleCustomTypeTrue() {
        assertTrue(mValidationHolderSimpleCustomTypeWithEditText.isSimpleCustomType());
        assertTrue(mValidationHolderSimpleCustomTypeWithTextInputLayout.isSimpleCustomType());
    }"
26716,testIsConfirmationTypeTrue,"    public void testIsConfirmationTypeTrue() {
        assertTrue(mValidationHolderConfirmationTypeWithEditText.isConfirmationType());
        assertTrue(mValidationHolderConfirmationTypeWithTextInputLayout.isConfirmationType());
    }"
26718,testIsRangeTypeTrue,"    public void testIsRangeTypeTrue() {
        assertTrue(mValidationHolderRangeTypeWithEditText.isRangeType());
        assertTrue(mValidationHolderRangeTypeWithTextInputLayout.isRangeType());
    }"
26720,testIsRegexTypeTrue,"    public void testIsRegexTypeTrue() {
        assertTrue(mValidationHolderRegexTypeWithEditText.isRegexType());
        assertTrue(mValidationHolderRegexTypeWithTextInputLayout.isRegexType());
    }"
26722,resetCustomError,"    public void resetCustomError() {
        mCustomErrorReset.reset(this);
    }"
26723,isVisible,"    public boolean isVisible() {
        return isEditTextView() && getEditText().getVisibility() == View.VISIBLE
                || isTextInputLayoutView() && getTextInputLayout().getVisibility() == View.VISIBLE"
26724,getView,"    public View getView() {
        if (isSomeSortOfView()) {
            return mView;"
26725,getTextInputLayout,"    public TextInputLayout getTextInputLayout() {
        if (isTextInputLayoutView()) {
            return isConfirmationType() ? mConfirmationTextInputLayout : mTextInputLayout;"
26726,getEditText,"    public EditText getEditText() {
        if (isEditTextView()) {
            return isConfirmationType() ? mConfirmationEditText : mEditText;"
26727,getConfirmationText,"    public String getConfirmationText() {
        if (mConfirmationEditText != null) {
            return mConfirmationEditText.getText().toString();"
26728,getText,"    public String getText() {
        if (mEditText != null) {
            return mEditText.getText().toString();"
26729,getErrMsg,"    public String getErrMsg() {
        return mErrMsg;
    }"
26730,getCustomValidationCallback,"    public CustomValidationCallback getCustomValidationCallback() {
        return mCustomValidationCallback;
    }"
26731,getCustomValidation,"    public CustomValidation getCustomValidation() {
        return mCustomValidation;
    }"
26732,getSimpleCustomValidation,"    public SimpleCustomValidation getSimpleCustomValidation() {
        return mSimpleCustomValidation;
    }"
26733,getNumericRange,"    public NumericRange getNumericRange() {
        return mNumericRange;
    }"
26734,getPattern,"    public Pattern getPattern() {
        return mPattern;
    }"
26735,isSomeSortOfView,"    public boolean isSomeSortOfView() {
        return mView != null;
    }"
26736,isTextInputLayoutView,"    public boolean isTextInputLayoutView() {
        return mTextInputLayout != null;
    }"
26737,isEditTextView,"    public boolean isEditTextView() {
        return mEditText != null;
    }"
26738,isCustomType,"    public boolean isCustomType() {
        return mCustomValidation != null;
    }"
26739,isSimpleCustomType,"    public boolean isSimpleCustomType() {
        return mSimpleCustomValidation != null;
    }"
26740,isConfirmationType,"    public boolean isConfirmationType() {
        return mConfirmationEditText != null || mConfirmationTextInputLayout != null;
    }"
26741,isRangeType,"    public boolean isRangeType() {
        return mNumericRange != null;
    }"
26742,isRegexType,"    public boolean isRegexType() {
        return mPattern != null;
    }"
26743,testClear,"    public void testClear() throws Exception {
        mSpiedAwesomeValidationBasicStyle.clear();
        verify(mSpiedBasicValidator, times(1)).halt();
    }"
26744,testValidate,"    public void testValidate() {
        mSpiedAwesomeValidationBasicStyle.validate();
        verify(mSpiedBasicValidator, times(1)).trigger();
        assertEquals(mSpiedBasicValidator.trigger(), mSpiedAwesomeValidationBasicStyle.validate());
    }"
26745,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndConfirmationThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndConfirmationThrowsException() {
        mSpiedAwesomeValidationBasicStyle.addValidation(mock(TextInputLayout.class), mock(TextInputLayout.class), PowerMockito.mock(String.class));
    }"
26746,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRangeThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRangeThrowsException() {
        mSpiedAwesomeValidationUnderlabelStyle.addValidation(mock(TextInputLayout.class), PowerMockito.mock(Range.class), PowerMockito.mock(String.class));
    }"
26747,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndPatternThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndPatternThrowsException() {
        mSpiedAwesomeValidationColorationStyle.addValidation(mock(TextInputLayout.class), PowerMockito.mock(Pattern.class), PowerMockito.mock(String.class));
    }"
26748,testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRegexThrowsException,"    public void testAddValidationForNonTextInputLayoutValidatorWithTextInputLayoutAndRegexThrowsException() {
        mSpiedAwesomeValidationBasicStyle.addValidation(mock(TextInputLayout.class), PowerMockito.mock(String.class), PowerMockito.mock(String.class));
    }"
26749,testAddValidationForTextInputLayoutValidatorWithEditTextAndConfirmationThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndConfirmationThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), mock(EditText.class), PowerMockito.mock(String.class));
    }"
26750,testAddValidationForTextInputLayoutValidatorWithEditTextAndRangeThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndRangeThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), PowerMockito.mock(Range.class), PowerMockito.mock(String.class));
    }"
26751,testAddValidationForTextInputLayoutValidatorWithEditTextAndPatternThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndPatternThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), PowerMockito.mock(Pattern.class), PowerMockito.mock(String.class));
    }"
26752,testAddValidationForTextInputLayoutValidatorWithEditTextAndRegexThrowsException,"    public void testAddValidationForTextInputLayoutValidatorWithEditTextAndRegexThrowsException() {
        mSpiedAwesomeValidationTextInputLayoutStyle.addValidation(mock(EditText.class), PowerMockito.mock(String.class), PowerMockito.mock(String.class));
    }"
26754,testSetTextInputLayoutErrorTextAppearanceForNonTextInputLayoutStyle,"    public void testSetTextInputLayoutErrorTextAppearanceForNonTextInputLayoutStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setTextInputLayoutErrorTextAppearance(mStyleResId);
    }"
26755,testSetTextInputLayoutErrorTextAppearanceForTextInputLayoutStyle,"    public void testSetTextInputLayoutErrorTextAppearanceForTextInputLayoutStyle() throws Exception {
        mSpiedAwesomeValidationTextInputLayoutStyle.setTextInputLayoutErrorTextAppearance(mStyleResId);
        verify(mSpiedTextInputLayoutValidator, times(1)).setErrorTextAppearance(mStyleResId);
    }"
26756,testSetUnderlabelColorByResourceForNonUnderlabelStyle,"    public void testSetUnderlabelColorByResourceForNonUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setUnderlabelColorByResource(mColorResId);
    }"
26758,testSetUnderlabelColorForNonUnderlabelStyle,"    public void testSetUnderlabelColorForNonUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setUnderlabelColor(mColor);
    }"
26759,testSetUnderlabelColorForUnderlabelStyle,"    public void testSetUnderlabelColorForUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationUnderlabelStyle.setUnderlabelColor(mColor);
        verify(mSpiedUnderlabelValidator, times(1)).setColor(mColor);
    }"
26760,testSetColorForNonColorationStyle,"    public void testSetColorForNonColorationStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setColor(mColor);
    }"
26761,testSetColorForColorationStyle,"    public void testSetColorForColorationStyle() throws Exception {
        mSpiedAwesomeValidationColorationStyle.setColor(mColor);
        verify(mSpiedColorationValidator, times(1)).setColor(mColor);
    }"
26762,testSetContextForNonUnderlabelStyle,"    public void testSetContextForNonUnderlabelStyle() throws Exception {
        mSpiedAwesomeValidationBasicStyle.setContext(mMockContext);
    }"
26763,testSetContextForUnderlabelStyle,"    public void testSetContextForUnderlabelStyle() throws Exception {
        PowerMockito.mockStatic(ContextCompat.class);
        PowerMockito.when(ContextCompat.getColor(eq(mMockContext), anyInt())).thenReturn(mColor);
        mSpiedAwesomeValidationUnderlabelStyle.setContext(mMockContext);
        verify(mSpiedUnderlabelValidator, times(1)).setContext(mMockContext);
    }"
26764,testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithUnderlabelStyle,"    public void testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithUnderlabelStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
26765,testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithColorationStyle,"    public void testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithColorationStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
26766,testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithBasicStyle,"    public void testCheckIsNotTextInputLayoutValidatorWithoutExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
26767,testCheckIsNotTextInputLayoutValidatorThrowsExceptionWithTextInputLayoutStyle,"    public void testCheckIsNotTextInputLayoutValidatorThrowsExceptionWithTextInputLayoutStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsNotTextInputLayoutValidator"");
    }"
26768,testCheckIsTextInputLayoutValidatorWithoutException,"    public void testCheckIsTextInputLayoutValidatorWithoutException() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsTextInputLayoutValidator"");
    }"
26769,testCheckIsTextInputLayoutValidatorThrowsExceptionWithUnderlabelStyle,"    public void testCheckIsTextInputLayoutValidatorThrowsExceptionWithUnderlabelStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsTextInputLayoutValidator"");
    }"
26770,testCheckIsTextInputLayoutValidatorThrowsExceptionWithColorationStyle,"    public void testCheckIsTextInputLayoutValidatorThrowsExceptionWithColorationStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsTextInputLayoutValidator"");
    }"
26771,testCheckIsTextInputLayoutValidatorThrowsExceptionWithBasicStyle,"    public void testCheckIsTextInputLayoutValidatorThrowsExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsTextInputLayoutValidator"");
    }"
26772,testCheckIsUnderlabelValidatorWithoutException,"    public void testCheckIsUnderlabelValidatorWithoutException() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsUnderlabelValidator"");
    }"
26773,testCheckIsUnderlabelValidatorThrowsExceptionWithTextInputLayoutStyle,"    public void testCheckIsUnderlabelValidatorThrowsExceptionWithTextInputLayoutStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsUnderlabelValidator"");
    }"
26774,testCheckIsUnderlabelValidatorThrowsExceptionWithColorationStyle,"    public void testCheckIsUnderlabelValidatorThrowsExceptionWithColorationStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsUnderlabelValidator"");
    }"
26775,testCheckIsUnderlabelValidatorThrowsExceptionWithBasicStyle,"    public void testCheckIsUnderlabelValidatorThrowsExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsUnderlabelValidator"");
    }"
26776,testCheckIsColorationValidatorWithoutException,"    public void testCheckIsColorationValidatorWithoutException() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationColorationStyle, ""checkIsColorationValidator"");
    }"
26777,testCheckIsColorationValidatorThrowsExceptionWithTextInputLayoutStyle,"    public void testCheckIsColorationValidatorThrowsExceptionWithTextInputLayoutStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationTextInputLayoutStyle, ""checkIsColorationValidator"");
    }"
26778,testCheckIsColorationValidatorThrowsExceptionWithUnderlabelStyle,"    public void testCheckIsColorationValidatorThrowsExceptionWithUnderlabelStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationUnderlabelStyle, ""checkIsColorationValidator"");
    }"
26779,testCheckIsColorationValidatorThrowsExceptionWithBasicStyle,"    public void testCheckIsColorationValidatorThrowsExceptionWithBasicStyle() throws Exception {
        Whitebox.invokeMethod(mSpiedAwesomeValidationBasicStyle, ""checkIsColorationValidator"");
    }"
26780,testAwesomeValidationConstructTextInputLayoutValidatorStyle,"    public void testAwesomeValidationConstructTextInputLayoutValidatorStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationTextInputLayoutStyle, ""mValidator"") instanceof TextInputLayoutValidator);
    }"
26781,testAwesomeValidationConstructUnderlabelValidatorStyle,"    public void testAwesomeValidationConstructUnderlabelValidatorStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationUnderlabelStyle, ""mValidator"") instanceof UnderlabelValidator);
    }"
26782,testAwesomeValidationConstructColorationStyle,"    public void testAwesomeValidationConstructColorationStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationColorationStyle, ""mValidator"") instanceof ColorationValidator);
    }"
26783,testAwesomeValidationConstructBasicStyle,"    public void testAwesomeValidationConstructBasicStyle() {
        assertTrue(Whitebox.getInternalState(mSpiedAwesomeValidationBasicStyle, ""mValidator"") instanceof BasicValidator);
    }"
26787,compare,"        public boolean compare(ValidationHolder validationHolder) {
            return false;
        }"
26788,compare,"        public boolean compare(String input) {
            return false;
        }"
26789,clear,"    public void clear() {
        mValidator.halt();
    }"
26790,validate,"    public boolean validate() {
        return mValidator.trigger();
    }"
26791,addValidation,"    public void addValidation(Activity activity, int viewId, CustomValidation customValidation, CustomValidationCallback customValidationCallback, CustomErrorReset customErrorReset, int errMsgId) {
        mValidator.set(activity, viewId, customValidation, customValidationCallback, customErrorReset, errMsgId);
    }"
26792,addValidation,"    public void addValidation(View view, CustomValidation customValidation, CustomValidationCallback customValidationCallback, CustomErrorReset customErrorReset, String errMsg) {
        mValidator.set(view, customValidation, customValidationCallback, customErrorReset, errMsg);
    }"
26793,addValidation,"    public void addValidation(Activity activity, int viewId, SimpleCustomValidation simpleCustomValidation, int errMsgId) {
        mValidator.set(activity, viewId, simpleCustomValidation, errMsgId);
    }"
26794,addValidation,"    public void addValidation(TextInputLayout textInputLayout, SimpleCustomValidation simpleCustomValidation, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, simpleCustomValidation, errMsg);
    }"
26795,addValidation,"    public void addValidation(EditText editText, SimpleCustomValidation simpleCustomValidation, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, simpleCustomValidation, errMsg);
    }"
26796,addValidation,"    public void addValidation(Activity activity, int confirmationViewId, int viewId, int errMsgId) {
        mValidator.set(activity, confirmationViewId, viewId, errMsgId);
    }"
26797,addValidation,"    public void addValidation(TextInputLayout confirmationTextInputLayout, TextInputLayout textInputLayout, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(confirmationTextInputLayout, textInputLayout, errMsg);
    }"
26798,addValidation,"    public void addValidation(EditText confirmationEditText, EditText editText, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(confirmationEditText, editText, errMsg);
    }"
26799,addValidation,"    public void addValidation(Activity activity, int viewId, Range range, int errMsgId) {
        mValidator.set(activity, viewId, new NumericRange(range), errMsgId);
    }"
26800,addValidation,"    public void addValidation(TextInputLayout textInputLayout, Range range, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, new NumericRange(range), errMsg);
    }"
26801,addValidation,"    public void addValidation(EditText editText, Range range, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, new NumericRange(range), errMsg);
    }"
26802,addValidation,"    public void addValidation(Activity activity, int viewId, Pattern pattern, int errMsgId) {
        mValidator.set(activity, viewId, pattern, errMsgId);
    }"
26803,addValidation,"    public void addValidation(TextInputLayout textInputLayout, Pattern pattern, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, pattern, errMsg);
    }"
26804,addValidation,"    public void addValidation(EditText editText, Pattern pattern, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, pattern, errMsg);
    }"
26805,addValidation,"    public void addValidation(Activity activity, int viewId, String regex, int errMsgId) {
        mValidator.set(activity, viewId, regex, errMsgId);
    }"
26806,addValidation,"    public void addValidation(TextInputLayout textInputLayout, String regex, String errMsg) {
        checkIsTextInputLayoutValidator();
        mValidator.set(textInputLayout, regex, errMsg);
    }"
26807,addValidation,"    public void addValidation(EditText editText, String regex, String errMsg) {
        checkIsNotTextInputLayoutValidator();
        mValidator.set(editText, regex, errMsg);
    }"
26808,setTextInputLayoutErrorTextAppearance,"    public void setTextInputLayoutErrorTextAppearance(int styleId)
    {
        checkIsTextInputLayoutValidator();
        ((TextInputLayoutValidator) mValidator).setErrorTextAppearance(styleId);"
26809,setUnderlabelColorByResource,"    public void setUnderlabelColorByResource(int colorResId) {
        checkIsUnderlabelValidator();
        ((UnderlabelValidator) mValidator).setColorByResource(colorResId);
    }"
26810,setUnderlabelColor,"    public void setUnderlabelColor(int colorValue) {
        checkIsUnderlabelValidator();
        ((UnderlabelValidator) mValidator).setColor(colorValue);
    }"
26811,setColor,"    public void setColor(int color) {
        checkIsColorationValidator();
        ((ColorationValidator) mValidator).setColor(color);
    }"
26812,setContext,"    public void setContext(Context context) {
        checkIsUnderlabelValidator();
        ((UnderlabelValidator) mValidator).setContext(context);
    }"
26813,checkIsNotTextInputLayoutValidator,"    private void checkIsNotTextInputLayoutValidator() {
        if (mValidator instanceof TextInputLayoutValidator) {
            throw new UnsupportedOperationException(""Not supported by TextInputLayoutValidator."");"
26814,checkIsTextInputLayoutValidator,"    private void checkIsTextInputLayoutValidator() {
        if (!(mValidator instanceof TextInputLayoutValidator)) {
            throw new UnsupportedOperationException(""Only supported by TextInputLayoutValidator."");"
26815,checkIsUnderlabelValidator,"    private void checkIsUnderlabelValidator() {
        if (!(mValidator instanceof UnderlabelValidator)) {
            throw new UnsupportedOperationException(""Only supported by UnderlabelValidator."");"
26816,checkIsColorationValidator,"    private void checkIsColorationValidator() {
        if (!(mValidator instanceof ColorationValidator)) {
            throw new UnsupportedOperationException(""Only supported by ColorationValidator."");"
26817,disableAutoFocusOnFirstFailure,"    public static void disableAutoFocusOnFirstFailure() {
        autoFocusOnFirstFailure = false;
    }"
26818,isAutoFocusOnFirstFailureEnabled,"    public static boolean isAutoFocusOnFirstFailureEnabled() {
        return autoFocusOnFirstFailure;
    }"
26819,getPageTitle,"    public CharSequence getPageTitle(int position) {
        return ""Tab"" + position;
    }"
26820,getCount,"    public int getCount() {
        return 4;
    }"
26821,getItem,"    public Fragment getItem(int position) {
        return ItemFragment.newInstance();
    }"
26822,springCallback,"            public void springCallback(int offset) {
                int radius = 20 * (240 - offset > 0 ? 240 - offset : 0) / 240;
                realtimeBlurView.setBlurRadius(radius);
            }"
26824,onClick,"            public void onClick(View view) {
                Snackbar.make(view, ""Replace with your own action"", Snackbar.LENGTH_LONG)
                        .setAction(""Action"", null).show();"
26825,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_spring_app_bar_layout);
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        FloatingActionButton fab = findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {"
26827,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_normal_app_bar_layout);
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        FloatingActionButton fab = findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {"
26828,toString,"        public String toString() {
            return super.toString() + "" '"" + mContentView.getText() + ""'"";
        }"
26829,getItemCount,"    public int getItemCount() {
        return mValues.size();
    }"
26830,onBindViewHolder,"    public void onBindViewHolder(final ViewHolder holder, int position) {
        holder.mItem = mValues.get(position);
        holder.mIdView.setText(mValues.get(position).id);
        holder.mContentView.setText(mValues.get(position).content);
    }"
26831,onCreateViewHolder,"    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext())
                .inflate(R.layout.fragment_item, parent, false);
        return new ViewHolder(view);"
26832,onSpringTabAppBarLayoutClick,"    public void onSpringTabAppBarLayoutClick(View view) {
        startActivity(new Intent(this, SpringAppBarLayoutWithTabActivity.class));
    }"
26833,onSpringAppBarLayoutClick,"    public void onSpringAppBarLayoutClick(View view) {
        startActivity(new Intent(this, SpringAppBarLayoutActivity.class));
    }"
26834,onNormalAppBarLayoutClick,"    public void onNormalAppBarLayoutClick(View view) {
        startActivity(new Intent(this, NormalAppBarLayoutActivity.class));
    }"
26837,newInstance,"    public static ItemFragment newInstance() {
        ItemFragment fragment = new ItemFragment();
        Bundle args = new Bundle();
        fragment.setArguments(args);
        return fragment;
    }"
26838,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {

        int id = item.getItemId();
        if (id == R.id.action_recyclerView) {
            if (mSweetSheet2.isShow()) {
                mSweetSheet2.dismiss();
            }"
26839,onBackPressed,"    public void onBackPressed() {

        if (mSweetSheet.isShow() || mSweetSheet2.isShow()) {"
26841,onItemClick,"            public boolean onItemClick(int position, MenuEntity menuEntity1) {

                Toast.makeText(MainActivity.this, menuEntity1.title + ""  "" + position, Toast.LENGTH_SHORT).show();
                return true;"
26845,onClick,"            public void onClick(View v) {
                mSweetSheet3.dismiss();
            }"
26846,setupCustomView,"    private void setupCustomView() {



        mSweetSheet3 = new SweetSheet(rl);
        CustomDelegate customDelegate = new CustomDelegate(true,
                CustomDelegate.AnimationType.DuangLayoutAnimation);
        View view = LayoutInflater.from(this).inflate(R.layout.layout_custom_view, null, false);"
26847,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_main);

        rl = (RelativeLayout) findViewById(R.id.rl);
        setupViewpager();
        setupRecyclerView();"
26848,getCount,"    public int getCount() {
        return PAGE_COUNT;
    }"
26849,getPageTitle,"    public CharSequence getPageTitle(int position) {
        return titles[position];
    }"
26851,onClick,"                         public void onClick(View view)
                              {
                                 
                                   Toast.makeText(this,""Hey you Have done this!!"",Toast.LENGTH_LONG).show();
                                   
                                   Intent intent=new Intent(this,YourNewActivity.class);"
26852,Item1,"           public void Item1(View view)
             {
               Button button2=findViewById(R.id.button2);
               button2.setOnClickListener(new OnClickListener()"
26853,onClick,"                         public void onClick(View view)
                              {
                                 "
26854,Item1,"         public void Item1(View view)
             {
               Button button1 =findViewById(R.id.button1);
               button1.setOnClickListener(new OnClickListener()"
26855,onCreateOptionsMenu,"             public boolean onCreateOptionsMenu(Menu menu) {

        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;"
26856,onCreate,"       public void onCreate(Bundle bundle)
         {
            super.onCreate(bundle);
            setContentView(R.layout.ToolbarMaterial);
            
            mTopToolbar = (Toolbar) findViewById(R.id.my_toolbar);"
26857,setIndicatorColors,"        void setIndicatorColors(int... colors) {
            mIndicatorColors = colors;
        }"
26858,getIndicatorColor,"        public final int getIndicatorColor(int position) {
            return mIndicatorColors[position % mIndicatorColors.length];
        }"
26859,blendColors,"    private static int blendColors(int color1, int color2, float ratio) {
        final float inverseRation = 1f - ratio;
        float r = (Color.red(color1) * ratio) + (Color.red(color2) * inverseRation);
        float g = (Color.green(color1) * ratio) + (Color.green(color2) * inverseRation);
        float b = (Color.blue(color1) * ratio) + (Color.blue(color2) * inverseRation);
        return Color.rgb((int) r, (int) g, (int) b);
    }"
26860,setColorAlpha,"    private static int setColorAlpha(int color, byte alpha) {
        return Color.argb(alpha, Color.red(color), Color.green(color), Color.blue(color));
    }"
26861,onDraw,"    protected void onDraw(Canvas canvas) {
        final int height = getHeight();
        final int childCount = getChildCount();
        final SlidingTabLayout.TabColorizer tabColorizer = mCustomTabColorizer != null
                ? mCustomTabColorizer
                : mDefaultTabColorizer;
"
26862,onViewPagerPageChanged,"    void onViewPagerPageChanged(int position, float positionOffset) {
        mSelectedPosition = position;
        mSelectionOffset = positionOffset;
        invalidate();
    }"
26864,setCustomTabColorizer,"    void setCustomTabColorizer(SlidingTabLayout.TabColorizer customTabColorizer) {
        mCustomTabColorizer = customTabColorizer;
        invalidate();
    }"
26865,onClick,"        public void onClick(View v) {
            for (int i = 0; i < mTabStrip.getChildCount(); i++) {
                if (v == mTabStrip.getChildAt(i)) {"
26866,onPageSelected,"        public void onPageSelected(int position) {
            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {
                mTabStrip.onViewPagerPageChanged(position, 0f);
                scrollToTab(position, 0);
            }"
26867,onPageScrollStateChanged,"        public void onPageScrollStateChanged(int state) {
            mScrollState = state;

            if (mViewPagerPageChangeListener != null) {"
26868,onPageScrolled,"        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
            int tabStripChildCount = mTabStrip.getChildCount();
            if ((tabStripChildCount == 0) || (position < 0) || (position >= tabStripChildCount)) {
                return;
            }

            mTabStrip.onViewPagerPageChanged(position, positionOffset);

            View selectedTitle = mTabStrip.getChildAt(position);"
26869,scrollToTab,"    private void scrollToTab(int tabIndex, int positionOffset) {
        final int tabStripChildCount = mTabStrip.getChildCount();
        if (tabStripChildCount == 0 || tabIndex < 0 || tabIndex >= tabStripChildCount) {
            return;
        }
"
26870,onAttachedToWindow,"    protected void onAttachedToWindow() {
        super.onAttachedToWindow();

        if (mViewPager != null) {"
26871,setContentDescription,"    public void setContentDescription(int i, String desc) {
        mContentDescriptions.put(i, desc);
    }"
26872,populateTabStrip,"    private void populateTabStrip() {
        final PagerAdapter adapter = mViewPager.getAdapter();
        final OnClickListener tabClickListener = new TabClickListener();

        for (int i = 0; i < adapter.getCount(); i++) {"
26874,setViewPager,"    public void setViewPager(ViewPager viewPager) {
        mTabStrip.removeAllViews();

        mViewPager = viewPager;
        if (viewPager != null) {"
26875,setCustomTabView,"    public void setCustomTabView(int layoutResId, int textViewId) {
        mTabViewLayoutId = layoutResId;
        mTabViewTextViewId = textViewId;
    }"
26876,setOnPageChangeListener,"    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {
        mViewPagerPageChangeListener = listener;
    }"
26877,setSelectedIndicatorColors,"    public void setSelectedIndicatorColors(int... colors) {
        mTabStrip.setSelectedIndicatorColors(colors);
    }"
26878,setDistributeEvenly,"    public void setDistributeEvenly(boolean distributeEvenly) {
        mDistributeEvenly = distributeEvenly;
    }"
26879,setCustomTabColorizer,"    public void setCustomTabColorizer(TabColorizer tabColorizer) {
        mTabStrip.setCustomTabColorizer(tabColorizer);
    }"
26882,newInstance,"    public static SampleFragment newInstance(int position) {
        SampleFragment f = new SampleFragment();
        Bundle b = new Bundle();
        b.putInt(ARG_POSITION, position);
        f.setArguments(b);
        return f;
    }"
26883,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        drawerToggle.onConfigurationChanged(newConfig);
    }"
26884,onPostCreate,"    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);
        drawerToggle.syncState();
    }"
26885,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {

        if (drawerToggle.onOptionsItemSelected(item)) {
            return true;
        }"
26886,onItemClick,"            public void onItemClick(AdapterView<?> parent, View view,
                                    int position, long id) {
                switch (position) {"
26887,getIndicatorColor,"            public int getIndicatorColor(int position) {
                return Color.WHITE;
            }"
26889,setBackgroundColor,"    public void setBackgroundColor(int color) {
        super.setBackgroundColor(getResources().getColor(android.R.color.transparent));
        this.backgroundColor = color;
    }"
26891,drawFirstAnimation,"    private void drawFirstAnimation(Canvas canvas) {
        if (radius1 < getWidth() / 2) {
            Paint paint = new Paint();"
26892,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (!firstAnimationOver)
            drawFirstAnimation(canvas);
        if (cont > 0)
            drawSecondAnimation(canvas);"
26895,dpToPx,"    public int dpToPx(float dp, Resources resources) {
        float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, resources.getDisplayMetrics());
        return (int) px;
    }"
26896,getTextView,"    public TextView getTextView() {
        return null;
    }"
26898,setDrawableIcon,"    public void setDrawableIcon(Drawable drawableIcon) {
        this.drawableIcon = drawableIcon;
        try {
            icon.setBackground(drawableIcon);"
26899,getDrawableIcon,"    public Drawable getDrawableIcon() {
        return drawableIcon;
    }"
26900,setIcon,"    public void setIcon(ImageView icon) {
        this.icon = icon;
    }"
26901,getIcon,"    public ImageView getIcon() {
        return icon;
    }"
26903,onDraw,"    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        if (x != -1) {
            Rect src = new Rect(0, 0, getWidth(), getHeight());
            Rect dst = new Rect(dpToPx(1, getResources()), dpToPx(2, getResources()), getWidth() - dpToPx(1, getResources()), getHeight() - dpToPx(2, getResources()));"
26904,setDefaultProperties,"    protected void setDefaultProperties() {
        rippleSpeed = dpToPx(2, getResources());
        rippleSize = dpToPx(5, getResources());
        super.minWidth = sizeRadius * 2;
        super.minHeight = sizeRadius * 2;
        super.background = R.drawable.fab;
        super.setDefaultProperties();
    }"
26905,getRippleSpeed,"    public float getRippleSpeed() {
        return this.rippleSpeed;
    }"
26906,setRippleSpeed,"    public void setRippleSpeed(float rippleSpeed) {
        this.rippleSpeed = rippleSpeed;
    }"
26908,setBackgroundColor,"    public void setBackgroundColor(int color) {
        this.backgroundColor = color;
        LayerDrawable layer = (LayerDrawable) getBackground();
        GradientDrawable shape = (GradientDrawable) layer.findDrawableByLayerId(R.id.shape_bacground);
        shape.setColor(backgroundColor);
    }"
26909,setOnClickListener,"    public void setOnClickListener(OnClickListener l) {
        onClickListener = l;
    }"
26910,makePressColor,"    protected int makePressColor() {
        int r = (this.backgroundColor >> 16) & 0xFF;
        int g = (this.backgroundColor >> 8) & 0xFF;
        int b = (this.backgroundColor >> 0) & 0xFF;
        r = (r - 30 < 0) ? 0 : r - 30;
        g = (g - 30 < 0) ? 0 : g - 30;
        b = (b - 30 < 0) ? 0 : b - 30;
        return Color.rgb(r, g, b);
    }"
26912,onFocusChanged,"    protected void onFocusChanged(boolean gainFocus, int direction,
                                  Rect previouslyFocusedRect) {
        if (!gainFocus) {"
26913,onTouchEvent,"    public boolean onTouchEvent(MotionEvent event) {
        isLastTouch = true;
        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            radius = getHeight() / rippleSize;
            x = event.getX();"
26915,setDefaultProperties,"    protected void setDefaultProperties() {
        setMinimumHeight(dpToPx(minHeight, getResources()));
        setMinimumWidth(dpToPx(minWidth, getResources()));
        setBackgroundResource(background);
        setBackgroundColor(backgroundColor);
    }"
26916,startDocument,"		public void startDocument() throws SAXException {			
			this.mFriends.clear();
			this.mOnlineFriends.clear();
			this.mUnreadMessages.clear();
			super.startDocument();
		}"
26917,startElement,"		public void startElement(String uri, String localName, String name,
				Attributes attributes) throws SAXException 
		{				
			if (localName == ""friend"")"
26919,onServiceDisconnected,"		public void onServiceDisconnected(ComponentName className) {          
			imService = null;
			Toast.makeText(UnApprovedFriendList.this, R.string.local_service_stopped,
					Toast.LENGTH_SHORT).show();"
26920,onServiceConnected,"		public void onServiceConnected(ComponentName className, IBinder service) {          
			imService = ((IMService.IMBinder)service).getService();      
"
26921,onResume,"	protected void onResume() 
	{
		super.onResume();
		bindService(new Intent(UnApprovedFriendList.this, IMService.class), mConnection , Context.BIND_AUTO_CREATE);"
26922,onPause,"	protected void onPause() 
	{
		unbindService(mConnection);
		super.onPause();"
26923,run,"					public void run() {
						if ( approvedFriendNames.length() > 0 || 
							 discardedFriendNames.length() > 0 "
26924,onMenuItemSelected,"	public boolean onMenuItemSelected(int featureId, MenuItem item) 
	{		

		switch(item.getItemId()) "
26925,onCreateOptionsMenu,"	public boolean onCreateOptionsMenu(Menu menu) {		
		boolean result = super.onCreateOptionsMenu(menu);		

		menu.add(0, APPROVE_SELECTED_FRIENDS_ID, 0, R.string.approve_selected_friends);				
		"
26926,onCreate,"	protected void onCreate(Bundle savedInstanceState) {
		
		super.onCreate(savedInstanceState);
		
		Bundle extras = getIntent().getExtras();
		
		String names = extras.getString(FriendInfo.FRIEND_LIST);
		
		friendUsernames = names.split("","");
		"
26928,onResume,"	protected void onResume() {
		bindService(new Intent(SignUp.this, IMService.class), mConnection , Context.BIND_AUTO_CREATE);
		   
		super.onResume();"
26930,onClick,"					public void onClick(DialogInterface dialog, int whichButton) {
						finish();
					}"
26935,onCreateDialog,"	protected Dialog onCreateDialog(int id) 
	{    	
		  	"
26936,onClick,"				public void onClick(View arg0) 
				{						
					finish();					"
26937,run,"												public void run() {
													if (result.equals(SERVER_RES_RES_SIGN_UP_SUCCESFULL)) {
														Toast.makeText(getApplicationContext(),R.string.signup_successfull, Toast.LENGTH_LONG).show();"
26938,run,"										public void run() {
											result = imService.signUpUser(usernameText.getText().toString(), 
													passwordText.getText().toString(), 
													eMailText.getText().toString());"
26939,onClick,"				public void onClick(View arg0) 
				{						
					if (usernameText.length() > 0 &&		"
26943,onDestroy,"	protected void onDestroy() {
	    super.onDestroy();
	    if (localstoragehandler != null) {
	    	localstoragehandler.close();
	    }"
26944,appendToMessageHistory,"	public  void appendToMessageHistory(String username, String message) {
		Log.e(""IM_MSG"",""Messaging:appendToMessageHistory: ""+message);
		if (username != null && message != null) {
			messageHistoryText.append(username + "":\n"");								"
26945,onReceive,"		public void onReceive(Context context, Intent intent) 
		{		
			Bundle extra = intent.getExtras();
			String username = extra.getString(MessageInfo.USERID);			
			String message = extra.getString(MessageInfo.MESSAGETEXT);
			"
26946,onResume,"	protected void onResume() 
	{		
		super.onResume();
		bindService(new Intent(Messaging.this, IMService.class), mConnection , Context.BIND_AUTO_CREATE);
				
		IntentFilter i = new IntentFilter();
		i.addAction(IMService.TAKE_MESSAGE);
		"
26947,onPause,"	protected void onPause() {
		super.onPause();
		unregisterReceiver(messageReceiver);
		unbindService(mConnection);
		
		FriendController.setActiveFriend(null);"
26949,onCreateDialog,"	protected Dialog onCreateDialog(int id) {
		int message = -1;
		switch (id)
		{
		case MESSAGE_CANNOT_BE_SENT:"
26950,cancelNotification,"	public static void cancelNotification(Context ctx, int notifyId) {
		String ns = Context.NOTIFICATION_SERVICE;
		NotificationManager nMgr = (NotificationManager) ctx.getSystemService(ns);
		nMgr.cancel(notifyId);
	}"
26951,onKey,"			public boolean onKey(View v, int keyCode, KeyEvent event) 
			{
				if (keyCode == 66){
					sendMessageButton.performClick();"
26952,run,"										public void run() {
											
									        Toast.makeText(getApplicationContext(),R.string.message_cannot_be_sent, Toast.LENGTH_LONG).show();"
26953,run,"						public void run() {
							try {
								if (imService.sendMessage(imService.getUsername(), friend.userName, message.toString()) == null)"
26954,onClick,"			public void onClick(View arg0) {
				message = messageText.getText();
				if (message.length()>0) 
				{		"
26956,onServiceDisconnected,"        public void onServiceDisconnected(ComponentName className) {
        	imService = null;
            Toast.makeText(Messaging.this, R.string.local_service_stopped,
                    Toast.LENGTH_SHORT).show();"
26957,onServiceConnected,"		public void onServiceConnected(ComponentName className, IBinder service) {          
            imService = ((IMService.IMBinder)service).getService();
        }"
26958,getMessagesInfo,"	public static MessageInfo[] getMessagesInfo() {
		return messagesInfo;
	}"
26959,getMessageInfo,"	public static MessageInfo getMessageInfo(String username) 
	{
		MessageInfo result = null;
		if (messagesInfo != null) 
		{"
26960,checkMessage,"	public static MessageInfo checkMessage(String username)
	{
		MessageInfo result = null;
		if (messagesInfo != null) 
		{"
26961,setMessagesInfo,"	public static void setMessagesInfo(MessageInfo[] messageInfo)
	{
		MessageController.messagesInfo = messageInfo;"
26962,onMenuItemSelected,"	public boolean onMenuItemSelected(int featureId, MenuItem item) {
	    
		switch(item.getItemId()) 
	    {"
26963,onCreateOptionsMenu,"	public boolean onCreateOptionsMenu(Menu menu) {		
		boolean result = super.onCreateOptionsMenu(menu);
		
		 menu.add(0, SIGN_UP_ID, 0, R.string.sign_up);
		 menu.add(0, EXIT_APP_ID, 0, R.string.exit_application);
"
26964,onResume,"	protected void onResume() 
	{		
		bindService(new Intent(Login.this, IMService.class), mConnection , Context.BIND_AUTO_CREATE);
	    		"
26967,onCreateDialog,"    protected Dialog onCreateDialog(int id) 
    {    	
    	int message = -1;    	
    	switch (id) 
    	{"
26968,onClick,"			public void onClick(View arg0) 
			{					
				imService.exit();
				finish();"
26970,run,"									public void run() {	
										Toast.makeText(getApplicationContext(),R.string.make_sure_username_and_password_correct, Toast.LENGTH_LONG).show();
"
26971,run,"						public void run() {
							String result = null;
							try {
								result = imService.authenticateUser(usernameText.getText().toString(), passwordText.getText().toString());
							} catch (UnsupportedEncodingException e) {"
26972,onClick,"			public void onClick(View arg0) 
			{					
				if (imService == null) {"
26976,get,"	public Cursor get(String sender, String receiver) {

					

			SQLiteDatabase db = getWritableDatabase();"
26977,insert,"	public void insert(String sender, String receiver, String message){

		long rowId = -1;
"
26979,onCreate,"	public void onCreate(SQLiteDatabase db) {

		db.execSQL(TABLE_MESSAGE_CREATE);"
26980,updateData,"	public void updateData(MessageInfo[] messages, FriendInfo[] friends, FriendInfo[] unApprovedFriends, String userKey);
"
26982,exit,"	public void exit();
	public int getListeningPort();"
26983,stopListening,"	public void stopListening();
	public void exit();"
26984,startListening,"	public int startListening(int port);
	public void stopListening();"
26985,sendHttpRequest,"	public String sendHttpRequest(String params);
	public int startListening(int port);"
26986,sendFriendsReqsResponse,"	public String sendFriendsReqsResponse(String approvedFriendNames,
			String discardedFriendNames);"
26987,addNewFriendRequest,"	public String addNewFriendRequest(String friendUsername);
	public String sendFriendsReqsResponse(String approvedFriendNames,"
26988,signUpUser,"	public String signUpUser(String usernameText, String passwordText, String email);
	public String addNewFriendRequest(String friendUsername);"
26989,exit,"	public void exit();
	public String signUpUser(String usernameText, String passwordText, String email);"
26990,getLastRawFriendList,"	public String getLastRawFriendList();
	public void exit();"
26991,isUserAuthenticated,"	public boolean isUserAuthenticated();
	public String getLastRawFriendList();"
26992,isNetworkConnected,"	public boolean isNetworkConnected();
	public boolean isUserAuthenticated();"
26994,authenticateUser,"	public String authenticateUser(String usernameText, String passwordText) throws UnsupportedEncodingException; 
	public void messageReceived(String username, String message);"
26995,sendMessage,"	public String sendMessage(String username,String tousername, String message) throws UnsupportedEncodingException;
	public String authenticateUser(String usernameText, String passwordText) throws UnsupportedEncodingException; "
26996,getUsername,"	public String getUsername();
	public String sendMessage(String username,String tousername, String message) throws UnsupportedEncodingException;"
26997,onActivityResult,"	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		
		super.onActivityResult(requestCode, resultCode, data);"
26999,onCreateOptionsMenu,"	public boolean onCreateOptionsMenu(Menu menu) {		
		boolean result = super.onCreateOptionsMenu(menu);		

		menu.add(0, ADD_NEW_FRIEND_ID, 0, R.string.add_new_friend);
		
		menu.add(0, EXIT_APP_ID, 0, R.string.exit_application);		"
27000,onResume,"	protected void onResume() 
	{
			
		super.onResume();
		bindService(new Intent(FriendList.this, IMService.class), mConnection , Context.BIND_AUTO_CREATE);

		IntentFilter i = new IntentFilter();"
27001,onPause,"	protected void onPause() 
	{
		unregisterReceiver(messageReceiver);		
		unbindService(mConnection);
		super.onPause();"
27002,onListItemClick,"	protected void onListItemClick(ListView l, View v, int position, long id) {

		super.onListItemClick(l, v, position, id);		

		Intent i = new Intent(this, Messaging.class);
		FriendInfo friend = friendAdapter.getItem(position);
		i.putExtra(FriendInfo.USERNAME, friend.userName);
		i.putExtra(FriendInfo.PORT, friend.port);
		i.putExtra(FriendInfo.IP, friend.ip);		"
27003,updateData,"	public void updateData(FriendInfo[] friends, FriendInfo[] unApprovedFriends)
	{
		if (friends != null) {
			friendAdapter.setFriendList(friends);	"
27004,onCreate,"	protected void onCreate(Bundle savedInstanceState) 
	{		
		super.onCreate(savedInstanceState);

        setContentView(R.layout.list_screen);"
27005,onServiceDisconnected,"		public void onServiceDisconnected(ComponentName className) {          
			imService = null;
			Toast.makeText(FriendList.this, R.string.local_service_stopped,
					Toast.LENGTH_SHORT).show();"
27007,onReceive,"		public void onReceive(Context context, Intent intent) {
			
			Log.i(""Broadcast receiver "", ""received a message"");
			Bundle extra = intent.getExtras();
			if (extra != null)"
27009,getItemId,"		public long getItemId(int position) {

			return 0;"
27010,getItem,"		public FriendInfo getItem(int position) {			

			return friends[position];"
27011,getCount,"		public int getCount() {		

			return friends.length;"
27012,setFriendList,"		public void setFriendList(FriendInfo[] friends)
		{
			this.friends = friends;"
27013,getUnapprovedFriendsInfo,"	public static FriendInfo[] getUnapprovedFriendsInfo() {
		return unapprovedFriendsInfo;
	}"
27014,getFriendsInfo,"	public static FriendInfo[] getFriendsInfo() {
		return friendsInfo;
	}"
27015,setUnapprovedFriendsInfo,"	public static void setUnapprovedFriendsInfo(FriendInfo[] unapprovedFriends) {
		unapprovedFriendsInfo = unapprovedFriends;		
	}"
27016,getFriendInfo,"	public static FriendInfo getFriendInfo(String username) 
	{
		FriendInfo result = null;
		if (friendsInfo != null) 
		{"
27017,getActiveFriend,"	public static String getActiveFriend()
	{
		return activeFriend;"
27018,setActiveFriend,"	public static void setActiveFriend(String friendName){
		activeFriend = friendName;
	}"
27019,checkFriend,"	public static FriendInfo checkFriend(String username, String userKey)
	{
		FriendInfo result = null;
		if (friendsInfo != null) 
		{"
27020,setFriendsInfo,"	public static void setFriendsInfo(FriendInfo[] friendInfo)
	{
		FriendController.friendsInfo = friendInfo;"
27024,onCreateDialog,"    protected Dialog onCreateDialog(int id) {
        AlertDialog.Builder builder = new AlertDialog.Builder(AddFriend.this);
        if (id == TYPE_FRIEND_USERNAME) {
            builder.setTitle(R.string.add_new_friend)
                   .setMessage(R.string.type_friend_username)"
27025,onServiceDisconnected,"        public void onServiceDisconnected(ComponentName className) {
            if (mImService != null) {
                mImService = null;
            }"
27026,onServiceConnected,"        public void onServiceConnected(ComponentName className, IBinder service) {
            mImService = ((IMService.IMBinder)service).getService();
        }"
27027,onClick,"    public void onClick(View view) {
        if (view == mCancelButton) {
            finish();"
27028,onPause,"    protected void onPause() {
        super.onPause();

        if (mConnection != null) {"
27029,onResume,"    protected void onResume() {
        super.onResume();

        Intent intent = new Intent(this, IMService.class);
        if (mConnection != null) {"
27030,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.add_new_friend);
        setTitle(getString(R.string.add_new_friend));

        mAddFriendButton = (Button)findViewById(R.id.addFriend);
        mCancelButton = (Button)findViewById(R.id.cancel);
        mFriendUserNameText = (EditText)findViewById(R.id.newFriendUsername);
"
27032,insertAfter,"        public void insertAfter(@NonNull ChainedRef candidate) {
            lock.lock();
            try {
                if (this.next != null) {"
27033,remove,"        public WeakRunnable remove() {
            lock.lock();
            try {
                if (prev != null) {
                    prev.next = next;"
27034,run,"        public void run() {
            final Runnable delegate = mDelegate.get();
            final ChainedRef reference = mReference.get();
            if (reference != null) {
                reference.remove();
            }"
27037,getLooper,"    public final Looper getLooper() {
        return mExec.getLooper();
    }"
27038,hasMessages,"    public final boolean hasMessages(int what, Object object) {
        return mExec.hasMessages(what, object);
    }"
27039,hasMessages,"    public final boolean hasMessages(int what) {
        return mExec.hasMessages(what);
    }"
27040,removeCallbacksAndMessages,"    public final void removeCallbacksAndMessages(Object token) {
        mExec.removeCallbacksAndMessages(token);
    }"
27041,removeMessages,"    public final void removeMessages(int what, Object object) {
        mExec.removeMessages(what, object);
    }"
27042,removeMessages,"    public final void removeMessages(int what) {
        mExec.removeMessages(what);
    }"
27043,sendMessageAtFrontOfQueue,"    public final boolean sendMessageAtFrontOfQueue(Message msg) {
        return mExec.sendMessageAtFrontOfQueue(msg);
    }"
27044,sendMessageAtTime,"    public boolean sendMessageAtTime(Message msg, long uptimeMillis) {
        return mExec.sendMessageAtTime(msg, uptimeMillis);
    }"
27045,sendMessageDelayed,"    public final boolean sendMessageDelayed(Message msg, long delayMillis) {
        return mExec.sendMessageDelayed(msg, delayMillis);
    }"
27046,sendEmptyMessageAtTime,"    public final boolean sendEmptyMessageAtTime(int what, long uptimeMillis) {
        return mExec.sendEmptyMessageAtTime(what, uptimeMillis);
    }"
27047,sendEmptyMessageDelayed,"    public final boolean sendEmptyMessageDelayed(int what, long delayMillis) {
        return mExec.sendEmptyMessageDelayed(what, delayMillis);
    }"
27048,sendEmptyMessage,"    public final boolean sendEmptyMessage(int what) {
        return mExec.sendEmptyMessage(what);
    }"
27049,sendMessage,"    public final boolean sendMessage(Message msg) {
        return mExec.sendMessage(msg);
    }"
27050,removeCallbacks,"    public final void removeCallbacks(Runnable r, Object token) {
        final WeakRunnable runnable = mRunnables.remove(r);
        if (runnable != null) {
            mExec.removeCallbacks(runnable, token);"
27051,removeCallbacks,"    public final void removeCallbacks(Runnable r) {
        final WeakRunnable runnable = mRunnables.remove(r);
        if (runnable != null) {
            mExec.removeCallbacks(runnable);"
27052,postAtFrontOfQueue,"    public final boolean postAtFrontOfQueue(Runnable r) {
        return mExec.postAtFrontOfQueue(wrapRunnable(r));
    }"
27053,postDelayed,"    public final boolean postDelayed(Runnable r, long delayMillis) {
        return mExec.postDelayed(wrapRunnable(r), delayMillis);
    }"
27054,postAtTime,"    public final boolean postAtTime(Runnable r, Object token, long uptimeMillis) {
        return mExec.postAtTime(wrapRunnable(r), token, uptimeMillis);
    }"
27055,postAtTime,"    public final boolean postAtTime(@NonNull Runnable r, long uptimeMillis) {
        return mExec.postAtTime(wrapRunnable(r), uptimeMillis);
    }"
27056,post,"    public final boolean post(@NonNull Runnable r) {
        return mExec.post(wrapRunnable(r));
    }"
27058,animateOut,"    abstract void animateOut(long duration, AnimatorListener animatorListener);
"
27063,writeToParcel,"		public void writeToParcel(Parcel dest, int flags) {
			super.writeToParcel(dest, flags);
			dest.writeString(message);
		}"
27064,onRestoreInstanceState,"	public void onRestoreInstanceState(Parcelable state) {
		if (!(state instanceof SavedState)) {
			super.onRestoreInstanceState(state);
			return;
		}
"
27065,onSaveInstanceState,"	public Parcelable onSaveInstanceState() {
		Parcelable superState = super.onSaveInstanceState();
		SavedState ss = new SavedState(superState);
		ss.message = mMessage.getText().toString();
		return ss;
	}"
27066,setOnUndoClickListener,"	void setOnUndoClickListener(OnClickListener onClickListener) {
		mButton.setOnClickListener(onClickListener);
	}"
27067,setUndoColor,"    void setUndoColor(int color) {
        mButton.setTextColor(color);
    }"
27068,setButtonLabel,"    void setButtonLabel(int buttonLabelResId) {
        mButton.setText(buttonLabelResId);
    }"
27069,setMessage,"	void setMessage(CharSequence message) {
		mMessage.setText(message);
	}"
27070,onFinishInflate,"	protected void onFinishInflate() {
		super.onFinishInflate();
		
		mMessage = (TextView) findViewById(R.id.message);
		mButton = (TextView) findViewById(R.id.button);"
27071,show,"        public void show(boolean shouldAnimate) {
            create().show(shouldAnimate);
        }"
27072,show,"        public void show() {
            show(true);
        }"
27074,setAlignParentBottom,"        public Builder setAlignParentBottom(boolean alignParentBottom) {
            mAlignParentBottom = alignParentBottom;
            return this;
        }"
27075,setUndoColorResId,"        public Builder setUndoColorResId(int undoColorResId) {
            mUndoColor = mWindow.getContext().getResources().getColor(undoColorResId);
            return this;
        }"
27076,setUndoColor,"        public Builder setUndoColor(int undoColor) {
            mUndoColor = undoColor;
            return this;
        }"
27077,setStyle,"        public Builder setStyle(Style style) {
            mStyle = style;
            return this;
        }"
27078,setUseEnglishLocale,"        public Builder setUseEnglishLocale(boolean useEnglishLocale) {
            mUseEnglishLocale = useEnglishLocale;
            return this;
        }"
27079,setAnimationDuration,"        public Builder setAnimationDuration(int animationDuration) {
            mAnimationDuration = animationDuration;
            return this;
        }"
27080,setDuration,"        public Builder setDuration(int duration) {
            mDuration = duration;
            return this;
        }"
27081,setUndoToken,"        public Builder setUndoToken(Parcelable undoToken) {
            mUndoToken = undoToken;
            return this;
        }"
27082,setListener,"        public Builder setListener(Listener undoListener) {
            mUndoListener = undoListener;
            return this;
        }"
27083,setMessage,"        public Builder setMessage(CharSequence message) {
            mUndoMessage = message;
            return this;
        }"
27084,setMessage,"        public Builder setMessage(int messageResId) {
            mUndoMessage = mWindow.getContext().getString(messageResId);
            return this;
        }"
27086,safelyNotifyOnUndo,"    protected void safelyNotifyOnUndo() {
        if (mUndoListener != null) {
            mUndoListener.onUndo(mUndoToken);"
27087,safelyNotifyOnHide,"    protected void safelyNotifyOnHide() {
        if (mUndoListener != null) {
            mUndoListener.onHide();"
27088,onUndo,"    protected void onUndo() {
        hide(true);
        safelyNotifyOnUndo();
    }"
27089,onHide,"    protected void onHide() {
        hide(true);
        safelyNotifyOnHide();
        mUndoListener = null;
    }"
27090,onAnimationEnd,"            public void onAnimationEnd() {
                mView.setVisibility(View.GONE);
                mUndoMessage = null;
                mUndoToken = null;
            }"
27091,animateOut,"    protected void animateOut() {
        mViewCompat.animateOut(mAnimationDuration, new ViewCompat.AnimatorListener() {
            @Override"
27092,animateIn,"    protected void animateIn() {
        mViewCompat.animateIn(mAnimationDuration);
    }"
27093,isVisible,"    public boolean isVisible() {
        return mView.getVisibility() == View.VISIBLE;
    }"
27094,hide,"    public void hide(boolean shouldAnimate) {
        mHandler.removeCallbacks(mHideRunnable);

        if (shouldAnimate) {"
27096,removeMargins,"    private static void removeMargins(View view) {
        ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) view.getLayoutParams();
        layoutParams.leftMargin = layoutParams.topMargin = layoutParams.rightMargin = layoutParams.bottomMargin = 0;
        view.setLayoutParams(layoutParams);
    }"
27097,isAlignBottomPossible,"    private boolean isAlignBottomPossible() {
        return mContext.getResources().getBoolean(R.bool.is_align_bottom_possible);
    }"
27098,isLollipopStyle,"    private boolean isLollipopStyle(Style style) {
        return style == Style.LOLLIPOP || (style == Style.DEFAULT && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP);
    }"
27099,show,"    public void show(boolean shouldAnimate) {
        mView.setMessage(mUndoMessage);
        mView.setButtonLabel(mUseEnglishLocale ? R.string.undo_english : R.string.undo);
        if (isLollipopStyle(mStyle)) {
            mView.setUndoColor(mUndoColor);
            if (mAlignParentBottom && isAlignBottomPossible()) {
                removeMargins(mView);
            }
        }"
27101,setAlignParentBottom,"    public void setAlignParentBottom(boolean alignParentBottom) {
        mAlignParentBottom = alignParentBottom;
    }"
27102,setUndoColorResId,"    public void setUndoColorResId(int colorResId) {
        mUndoColor = mContext.getResources().getColor(colorResId);
    }"
27103,setUndoColor,"    public void setUndoColor(int color) {
        mUndoColor = color;
    }"
27104,setUseEnglishLocale,"    public void setUseEnglishLocale(boolean useEnglishLocale) {
        mUseEnglishLocale = useEnglishLocale;
    }"
27105,setAnimationDuration,"    public void setAnimationDuration(int animationDuration) {
        mAnimationDuration = animationDuration;
    }"
27106,setDuration,"    public void setDuration(int duration) {
        mDuration = duration;
    }"
27107,setUndoToken,"    public void setUndoToken(Parcelable undoToken) {
        mUndoToken = undoToken;
    }"
27108,setListener,"    public void setListener(Listener undoListener) {
        mUndoListener = undoListener;
    }"
27109,setMessage,"    public void setMessage(int messageResId) {
        mUndoMessage = mContext.getString(messageResId);
    }"
27110,setMessage,"    public void setMessage(CharSequence message) {
        mUndoMessage = message;
    }"
27111,onClick,"        public void onClick(View v) {
            onUndo();
        }"
27112,run,"        public void run() {
            onHide();
        }"
27115,getLayoutResId,"        int getLayoutResId() {
            return mLayoutResId;
        }"
27116,onMeasure,"	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		int measuredWidth = MeasureSpec.getSize(widthMeasureSpec);
		if (mMaxWidth > 0 && mMaxWidth < measuredWidth) {
			int measureMode = MeasureSpec.getMode(widthMeasureSpec);
			widthMeasureSpec = MeasureSpec.makeMeasureSpec(mMaxWidth, measureMode);"
27117,init,"	private void init(AttributeSet attrs) {
		if (attrs != null) {
			TypedArray a = getContext().obtainStyledAttributes(attrs, new int[] { android.R.attr.maxWidth });"
27118,setSlideTarget,"    public void setSlideTarget(final int slideTarget) {
        if (mSlideTarget != slideTarget) {
            mSlideTarget = slideTarget;"
27119,getSlideTarget,"    public int getSlideTarget() {
        return mSlideTarget;
    }"
27120,getDrawerCallbacks,"    public IDrawerCallbacks getDrawerCallbacks() {
        return mDrawerCallbacks;
    }"
27121,setDrawerCallbacks,"    public void setDrawerCallbacks(final IDrawerCallbacks callbacks) {
        mDrawerCallbacks = callbacks;
    }"
27122,isDrawerMoving,"    public boolean isDrawerMoving() {
        return mDrawerMoving;
    }"
27123,isDrawerOpened,"    public boolean isDrawerOpened() {
        return mDrawerOpened;
    }"
27124,closeDrawer,"    public void closeDrawer() {
        closeDrawer(true);
    }"
27125,run,"                            public void run() {
                                mDrawerCallbacks.onDrawerClosed();
                            }"
27126,run,"            public void run() {
                final boolean scrolling = mScroller.computeScrollOffset();
                mDecorContent.offsetLeftAndRight(mScroller.getCurrX() - mDecorOffsetX);
                mDecorOffsetX = mScroller.getCurrX();
                postInvalidate();

                if (!scrolling) {"
27127,closeDrawer,"    public void closeDrawer(final boolean animate) {
        if(mDrawerMoving){
            mScrollerHandler.removeCallbacks(mDrawCloseRunnable);
            mScrollerHandler.removeCallbacks(mDrawOpenRunnable);
        } else if (!mDrawerOpened) {
            return;
        }
"
27128,openDrawer,"    public void openDrawer() {
        openDrawer(true);
    }"
27129,run,"                            public void run() {
                                mDrawerCallbacks.onDrawerOpened();
                            }"
27131,openDrawer,"    public void openDrawer(final boolean animate) {
        if(mDrawerMoving){
            mScrollerHandler.removeCallbacks(mDrawCloseRunnable);
            mScrollerHandler.removeCallbacks(mDrawOpenRunnable);
        }

        if (mDrawerOpened) {
            return;
        }
"
27132,toggleDrawer,"    public void toggleDrawer() {
        toggleDrawer(true);
    }"
27133,toggleDrawer,"    public void toggleDrawer(final boolean animate) {
        if (!mDrawerOpened) {
            openDrawer(animate);"
27134,isDrawerEnabled,"    public boolean isDrawerEnabled() {
        return mDrawerEnabled;
    }"
27135,setDrawerEnabled,"    public void setDrawerEnabled(final boolean enabled) {
        mDrawerEnabled = enabled;
    }"
27136,getDrawerMaxWidth,"    public int getDrawerMaxWidth() {
        return mDrawerMaxWidth;
    }"
27137,setDrawerMaxWidth,"    public void setDrawerMaxWidth(final int maxWidth) {
        mDrawerMaxWidth = maxWidth;
    }"
27138,getTouchTargetWidth,"    public int getTouchTargetWidth() {
        return mTouchTargetWidth;
    }"
27139,setTouchTargetWidth,"    public void setTouchTargetWidth(final int width) {
        mTouchTargetWidth = width;
    }"
27140,getDecorContentBackgroundColor,"    public int getDecorContentBackgroundColor() {
        return mDecorContentBackgroundColor;
    }"
27141,setDecorContentBackgroundColor,"    public void setDecorContentBackgroundColor(final int color) {
        mDecorContentBackgroundColor = color;
    }"
27142,dispatchDraw,"    protected void dispatchDraw(Canvas canvas) {
        super.dispatchDraw(canvas);

        if (mDrawerOpened || mDrawerMoving) {"
27145,onLayout,"    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
        Rect windowRect = new Rect();
        mDecorView.getWindowVisibleDisplayFrame(windowRect);

        if (mSlideTarget == SLIDE_TARGET_WINDOW) {
            mDrawerContent.layout(left, top + windowRect.top, right, bottom);
            mDecorContent.layout(mDecorContent.getLeft(), mDecorContent.getTop(),"
27146,onClick,"            public void onClick(View view) {
            }"
27148,getInterpolation,"        public float getInterpolation(float v) {
            return (float) (Math.pow((double) v - 1.0, 5.0) + 1.0f);
        }"
27152,toast,"    public static void toast(CharSequence cs) {
        Toast.makeText(TouchHelperApp.getAppContext(), cs, Toast.LENGTH_SHORT).show();
    }"
27153,getTraceStackInString,"    static public String getTraceStackInString(Throwable e) {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        if(e != null) {
            e.printStackTrace(pw);
        }"
27154,printNodeStack,"    static public void printNodeStack(AccessibilityNodeInfo node) {
        Log.d(TAG, ""Show Node information: "");
        String indent = """";
        while (node != null) {
            Log.d(TAG, indent + ""class = "" + node.getClassName() + "" id = ""  +node.getWindowId() + "" label = "" + node.getText());"
27157,onClick,"            public void onClick(View v) {
                windowManager.removeViewImmediate(viewTarget);
                windowManager.removeViewImmediate(viewCustomization);
                windowManager.removeViewImmediate(imageTarget);
                isShow = false;
            }"
27161,onClick,"            public void onClick(View v) {
                Button button = (Button) v;
                if (targetParams.alpha == 0) {
                    positionDescription.packageName = currentPackageName;"
27162,onFocusChange,"                            public void onFocusChange(View v, boolean hasFocus) {
                                if (hasFocus) {
                                    widgetDescription.position = temRect;"
27163,onClick,"                            public void onClick(View v) {
                                v.requestFocus();
                            }"
27164,compare,"                        public int compare(AccessibilityNodeInfo a, AccessibilityNodeInfo b) {
                            Rect rectA = new Rect();
                            Rect rectB = new Rect();
                            a.getBoundsInScreen(rectA);
                            b.getBoundsInScreen(rectB);
                            return rectB.width() * rectB.height() - rectA.width() * rectA.height();
                        }"
27165,onClick,"            public void onClick(View v) {
                Button button = (Button) v;
                if (outlineParams.alpha == 0) {
                    AccessibilityNodeInfo root = service.getRootInActiveWindow();"
27166,onTouch,"            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        btAddPosition.setEnabled(true);"
27167,onTouch,"            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        x = Math.round(event.getRawX());"
27170,stopSkipAdProcessInner,"    private void stopSkipAdProcessInner() {
        skipAdRunning = false;
        skipAdByActivityPosition = false;
        skipAdByActivityWidget = false;
        skipAdByKeyword = false;
        setTargetedWidgets = null;
    }"
27171,stopSkipAdProcess,"    private void stopSkipAdProcess() {
        if (BuildConfig.DEBUG) {
            Log.d(TAG, ""Stop Skip-ad process"");
        }
        stopSkipAdProcessInner();"
27172,startSkipAdProcess,"    private void startSkipAdProcess() {
        if (BuildConfig.DEBUG) {
            Log.d(TAG, ""Start Skip-ad process"");
        }
        skipAdRunning = true;
        skipAdByActivityPosition = true;
        skipAdByActivityWidget = true;
        skipAdByKeyword = true;
        setTargetedWidgets = null;
        clickedWidgets.clear();
"
27173,click,"    private boolean click(int X, int Y, long start_time, long duration) {
        Path path = new Path();
        path.moveTo(X, Y);
        GestureDescription.Builder builder = new GestureDescription.Builder()
                .addStroke(new GestureDescription.StrokeDescription(path, start_time, duration));
        return service.dispatchGesture(builder.build(), null, null);"
27174,dumpChildNodes,"    private void dumpChildNodes(AccessibilityNodeInfo root, List<AccessibilityNodeInfo> list, StringBuilder dumpString, String indent) {
        if(root == null) return;
        list.add(root);
        dumpString.append(indent + Utilities.describeAccessibilityNode(root) + ""\n"");

        for (int n = 0; n < root.getChildCount(); n++) {"
27175,dumpRootNode,"    private String dumpRootNode(AccessibilityNodeInfo root) {
        ArrayList<AccessibilityNodeInfo> nodeList = new ArrayList<>();
        StringBuilder dumpString = new StringBuilder();
        dumpChildNodes(root, nodeList, dumpString, """");
        return dumpString.toString();
    }"
27176,findAllNode,"    private void findAllNode(List<AccessibilityNodeInfo> roots, List<AccessibilityNodeInfo> list, String indent) {
        ArrayList<AccessibilityNodeInfo> childrenList = new ArrayList<>();
        for (AccessibilityNodeInfo e : roots) {
            if (e == null) continue;
            list.add(e);"
27177,showAllChildren,"    private void showAllChildren(AccessibilityNodeInfo root){
        ArrayList<AccessibilityNodeInfo> roots = new ArrayList<>();
        roots.add(root);
        ArrayList<AccessibilityNodeInfo> nodeList = new ArrayList<>();
        findAllNode(roots, nodeList, """");
    }"
27181,onUnbind,"    public void onUnbind(Intent intent) {
        try {
            service.unregisterReceiver(userPresentReceiver);"
27182,run,"                                public void run() {
                                    if (num < PACKAGE_POSITION_CLICK_RETRY) {
                                        if(currentActivityName.equals(packagePositionDescription.activityName)) {"
27187,isServiceRunning,"    public static boolean isServiceRunning() {
        final TouchHelperService service = sServiceRef != null ? sServiceRef.get() : null;
        return service != null && service.serviceImpl != null;
    }"
27188,dispatchAction,"    public static boolean dispatchAction(int action) {
        final TouchHelperService service = sServiceRef != null ? sServiceRef.get() : null;
        if (service == null || service.serviceImpl == null) {
            return false;
        }
        service.serviceImpl.receiverHandler.sendEmptyMessage(action);"
27189,onUnbind,"    public boolean onUnbind(Intent intent) {
        if (serviceImpl != null) {
            serviceImpl.onUnbind(intent);
            serviceImpl = null;
        }"
27191,onAccessibilityEvent,"    public void onAccessibilityEvent(AccessibilityEvent event) {
        if (serviceImpl != null) {
            serviceImpl.onAccessibilityEvent(event);"
27192,onServiceConnected,"    protected void onServiceConnected() {
        super.onServiceConnected();
        sServiceRef = new WeakReference<>(this);
        if (serviceImpl == null) {
            serviceImpl = new TouchHelperServiceImpl(this);
        }"
27194,updateMultiSelectListPreferenceEntries,"    void updateMultiSelectListPreferenceEntries(MultiSelectListPreference preference, Set<String> keys){
        if(preference == null || keys == null)
            return;
        CharSequence[] entries = keys.toArray(new CharSequence[keys.size()]);
        preference.setEntries(entries);
        preference.setEntryValues(entries);
        preference.setValues(keys);"
27196,onPreferenceClick,"                public boolean onPreferenceClick(Preference preference) {
                    FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
                    ManagePackageWidgetsDialogFragment newFragment = new ManagePackageWidgetsDialogFragment();
                    newFragment.show(fragmentManager, ""dialog"");
                    return true;
                }"
27199,compareTo,"                    public int compareTo(Object o) {
                        AppInformation other = (AppInformation) o;

                        if(this.isChecked && !other.isChecked) {"
27201,onClick,"                            public void onClick(View view) {
                                dialog.dismiss();
                            }"
27202,onItemClick,"                        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                            CheckBox item = ((ViewHolder) view.getTag()).checkBox;
                            AppInformation app = listApp.get(position);
                            app.isChecked = !app.isChecked;
                            item.setChecked(app.isChecked);
                        }"
27204,getItemId,"                        public long getItemId(int position) {
                            return position;
                        }"
27205,getItem,"                        public Object getItem(int position) {
                            return listApp.get(position);
                        }"
27206,getCount,"                        public int getCount() {
                            return listApp.size();
                        }"
27209,onPreferenceChange,"                public boolean onPreferenceChange(Preference preference, Object newValue) {
                    try {
                        int value = (int) newValue;
                        mSetting.setSkipAdDuration(value);"
27210,onPreferenceChange,"                public boolean onPreferenceChange(Preference preference, Object newValue) {
                    Boolean value = (Boolean) newValue;
                    mSetting.setSkipAdNotification(value);

                    return true;"
27213,onCreatePreferences,"    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {
        setPreferencesFromResource(R.xml.touch_helper_preference, rootKey);

        mSetting = Settings.getInstance();

        initPreferences();

        winManager = (WindowManager) getActivity().getSystemService(WINDOW_SERVICE);"
27215,getPackagePositions,"    public Map<String, PackagePositionDescription> getPackagePositions() { return mapPackagePositions; }
    public void setPackagePositions(Map<String, PackagePositionDescription> map) {
        mapPackagePositions = map;"
27216,setPackageWidgetsInString,"    public boolean setPackageWidgetsInString(String value) {
        if (value != null) {
            try {
                Type type = new TypeToken<TreeMap<String, Set<PackageWidgetDescription>>>() {"
27217,getPackageWidgetsInString,"    public String getPackageWidgetsInString() {
        String json = mJson.toJson(mapPackageWidgets);
        return json;
    }"
27219,getPackageWidgets,"    public Map<String, Set<PackageWidgetDescription>> getPackageWidgets() { return mapPackageWidgets; }
    public void setPackageWidgets(Map<String, Set<PackageWidgetDescription>> map) {
        mapPackageWidgets = map;"
27220,setKeyWordList,"    public void setKeyWordList(String text) {
        String keys[] = text.split("" "");
        listKeyWords.clear();
        listKeyWords.addAll(Arrays.asList(keys));
        String json = mJson.toJson(listKeyWords);
        mEditor.putString(KEY_WORDS_LIST, json);
        mEditor.apply();
    }"
27221,getKeyWordsAsString,"    public String getKeyWordsAsString() { return String.join("" "", listKeyWords); }
    public void setKeyWordList(String text) {
        String keys[] = text.split("" "");"
27222,getKeyWordList,"    public List<String> getKeyWordList() { return listKeyWords; }
    public String getKeyWordsAsString() { return String.join("" "", listKeyWords); }
    public void setKeyWordList(String text) {"
27224,getWhitelistPackages,"    public Set<String> getWhitelistPackages() {
        return setWhiteListPackages;
    }"
27225,setSkipAdDuration,"    public void setSkipAdDuration(int iSkipAdDuration) {
        if (this.iSkipAdDuration != iSkipAdDuration) {
            this.iSkipAdDuration = iSkipAdDuration;"
27226,getSkipAdDuration,"    public int getSkipAdDuration() {
        return iSkipAdDuration;
    }"
27227,setSkipAdNotification,"    public void setSkipAdNotification(boolean bSkipAdNotification) {
        if (this.bSkipAdNotification != bSkipAdNotification) {
            this.bSkipAdNotification = bSkipAdNotification;"
27228,isSkipAdNotification,"    public boolean isSkipAdNotification() {
        return bSkipAdNotification;
    }"
27230,getInstance,"    public static Settings getInstance() {
        return ourInstance;
    }"
27231,hashCode,"    public int hashCode() {
        return Objects.hash(position);
    }"
27232,equals,"    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (this == obj) return true;
        if (!(obj instanceof PackageWidgetDescription)) return false;
        PackageWidgetDescription widget = (PackageWidgetDescription) obj;
        return position.equals(widget.position);
    }"
27237,onClick,"                public void onClick(View view) {
                    ClipboardManager clipboard = (ClipboardManager) getActivity().getSystemService(Context.CLIPBOARD_SERVICE);
                    ClipData clipData = clipboard.getPrimaryClip();
                    if(clipData != null && clipData.getItemCount() > 0) {
                        String pasteData = clipData.getItemAt(0).getText().toString();"
27239,onClick,"                public void onClick(View view) {
                    editRules.setText(originalRules);
                }"
27242,getPowerOptimization,"    public MutableLiveData<Boolean> getPowerOptimization() {
        return mPowerOptimization;
    }"
27243,getAccessibilityPermission,"    public MutableLiveData<Boolean> getAccessibilityPermission() {
        return mAccessibilityPermission;
    }"
27244,getAppPermission,"    public MutableLiveData<Boolean> getAppPermission() {
        return mAppPermission;
    }"
27245,getText,"    public LiveData<String> getText() {
        return mText;
    }"
27247,onResume,"    public void onResume() {
        checkServiceStatus();
        super.onResume();
    }"
27249,onClick,"            public void onClick(View v) {
                Intent intent_abs = new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);
                intent_abs.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                startActivity(intent_abs);
            }"
27250,onChanged,"            public void onChanged(Boolean aBoolean) {
                if(aBoolean) {
                    imagePowerPermission.setImageDrawable(drawableYes);"
27251,onChanged,"            public void onChanged(Boolean aBoolean) {
                if(aBoolean) {
                    imageAccessibilityPermission.setImageDrawable(drawableYes);"
27255,onResume,"    protected void onResume() {
        super.onResume();

        Drawable drawable = mCpuAniImageView.getDrawable();
        if (drawable instanceof Animatable) {
            ((Animatable) drawable).start();
        }
"
27256,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        mStatusTextView = (TextView) findViewById(R.id.status_text_view);"
27257,getItemCount,"        public int getItemCount() {
            return sStringList.length;
        }"
27258,onBindViewHolder,"        public void onBindViewHolder(ViewHolder holder, int position) {
            holder.mTextView.setText(sStringList[position]);
        }"
27259,onCreateViewHolder,"        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            LayoutInflater inflater = LayoutInflater.from(parent.getContext());
            View view = inflater.inflate(R.layout.list_item, null);
            return new ViewHolder(view);
        }"
27260,show,"    public static void show(Context context, int dayNightMode) {
        new BottomSheetDialogView(context, dayNightMode);
    }"
27261,onClick,"            public void onClick(View v) {
                for (IPositiveButtonDialogListener listener : getPositiveButtonDialogListeners()) {
                    listener.onPositiveButtonClicked(mRequestCode);
                }"
27263,getTheme,"    public int getTheme() {
        return R.style.JayneHatDialogTheme;
    }"
27264,show,"    public static void show(FragmentActivity activity) {
        new JayneHatDialogFragment().show(activity.getSupportFragmentManager(), TAG);
    }"
27266,onOptionsItemSelected,"    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.theme_change:
                if (isDarkTheme()) {"
27267,onCreateOptionsMenu,"    public boolean onCreateOptionsMenu(Menu menu) {
        super.onCreateOptionsMenu(menu);
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main, menu);

        if (isDarkTheme()) {
            menu.findItem(R.id.theme_change).setTitle(""Use Light Theme"");"
27268,onPositiveButtonClicked,"    public void onPositiveButtonClicked(int resultCode, Date date) {
        String text = """";
        if (resultCode == REQUEST_DATE_PICKER) {
            text = ""Date "";
        } else if (resultCode == REQUEST_TIME_PICKER) {
            text = ""Time "";"
27269,onNegativeButtonClicked,"    public void onNegativeButtonClicked(int resultCode, Date date) {
        String text = """";
        if (resultCode == REQUEST_DATE_PICKER) {
            text = ""Date "";
        } else if (resultCode == REQUEST_TIME_PICKER) {
            text = ""Time "";"
27270,onNeutralButtonClicked,"    public void onNeutralButtonClicked(int requestCode) {
        if (requestCode == REQUEST_SIMPLE_DIALOG) {
            Toast.makeText(c, ""Neutral button clicked"", Toast.LENGTH_SHORT).show();"
27271,onNegativeButtonClicked,"    public void onNegativeButtonClicked(int requestCode) {
        if (requestCode == REQUEST_SIMPLE_DIALOG) {
            Toast.makeText(c, ""Negative button clicked"", Toast.LENGTH_SHORT).show();"
27272,onPositiveButtonClicked,"    public void onPositiveButtonClicked(int requestCode) {
        if (requestCode == REQUEST_SIMPLE_DIALOG) {
            Toast.makeText(c, ""Positive button clicked"", Toast.LENGTH_SHORT).show();"
27273,onCancelled,"    public void onCancelled(int requestCode) {
        switch (requestCode) {
            case REQUEST_SIMPLE_DIALOG:"
27274,onListItemsSelected,"    public void onListItemsSelected(CharSequence[] values, int[] selectedPositions, int requestCode) {
        if (requestCode == REQUEST_LIST_MULTIPLE) {
            StringBuilder sb = new StringBuilder();"
27275,onListItemSelected,"    public void onListItemSelected(CharSequence value, int number, int requestCode) {
        if (requestCode == REQUEST_LIST_SIMPLE || requestCode == REQUEST_LIST_SINGLE) {
            Toast.makeText(c, ""Selected: "" + value, Toast.LENGTH_SHORT).show();"
27276,onClick,"            public void onClick(View v) {
                DatePickerDialogFragment
                        .createBuilder(DemoActivity.this, getSupportFragmentManager())"
27277,onClick,"            public void onClick(View v) {
                TimePickerDialogFragment
                        .createBuilder(DemoActivity.this, getSupportFragmentManager())"
27278,onClick,"            public void onClick(View v) {
                JayneHatDialogFragment.show(c);
            }"
27279,onClick,"            public void onClick(View v) {
                ListDialogFragment
                        .createBuilder(c, getSupportFragmentManager())"
27282,onClick,"            public void onClick(View v) {
                ProgressDialogFragment.createBuilder(c, getSupportFragmentManager())
                        .setMessage(""Mal: I\'m just waiting to see if I pass out. Long story."")"
27283,onClick,"            public void onClick(View v) {
                SimpleDialogFragment.createBuilder(c, getSupportFragmentManager()).setMessage(""How will you decide?"")
                        .setPositiveButtonText(""Time for some thrillin' heroics!"").setNegativeButtonText(""Misbehave"")"
27284,onClick,"                    public void onClick(View v) {
                        SimpleDialogFragment.createBuilder(c, getSupportFragmentManager())
                                .setTitle(""Do you like this quote?"")"
27285,onClick,"            public void onClick(View v) {
                SimpleDialogFragment.createBuilder(c, getSupportFragmentManager())
                        .setTitle(""More Firefly quotes:"").setMessage"
27286,onClick,"            public void onClick(View v) {
                SimpleDialogFragment.createBuilder(c, getSupportFragmentManager())
                        .setMessage(""Love. Can know all the math in the \'verse but take a boat in the air that you don\'t "" +"
27288,onRestoreInstanceState,"        protected void onRestoreInstanceState(Parcelable state) {
            super.onRestoreInstanceState(StateSaver.restoreInstanceState(this, state));
        }"
27289,onSaveInstanceState,"        protected Parcelable onSaveInstanceState() {
            return StateSaver.saveInstanceState(this, super.onSaveInstanceState());
        }"
27290,onRestoreInstanceState,"    protected void onRestoreInstanceState(Parcelable state) {
        super.onRestoreInstanceState(StateSaver.restoreInstanceState(this, state));
    }"
27291,onSaveInstanceState,"    protected Parcelable onSaveInstanceState() {
        return StateSaver.saveInstanceState(this, super.onSaveInstanceState());
    }"
27292,setParcelableArrayList,"    public void setParcelableArrayList(ArrayList<? extends TestTypes.ParcelableImpl> parcelableArrayList) {
        mParcelableArrayList = parcelableArrayList;
    }"
27293,getParcelableArrayList,"    public ArrayList<? extends TestTypes.ParcelableImpl> getParcelableArrayList() {
        return mParcelableArrayList;
    }"
27294,setIntegerObj,"    public void setIntegerObj(Integer integerObj) {
        mIntegerObj = integerObj;
    }"
27295,getIntegerObj,"    public Integer getIntegerObj() {
        return mIntegerObj;
    }"
27296,setInt,"    public void setInt(int anInt) {
        mInt = anInt;
    }"
27297,getInt,"    public int getInt() {
        return mInt;
    }"
27298,setTest,"    public void setTest(int test) {
        this.test = test;
    }"
27299,getTest,"    public int getTest() {
        return test;
    }"
27300,newArray,"            public ParcelableImpl[] newArray(int size) {
                return new ParcelableImpl[size];
            }"
27301,createFromParcel,"            public ParcelableImpl createFromParcel(Parcel in) {
                return new ParcelableImpl(in);
            }"
27302,describeContents,"        public int describeContents() {
            return 0;
        }"
27303,writeToParcel,"        public void writeToParcel(Parcel dest, int flags) {
            dest.writeInt(mInt);
        }"
27304,hashCode,"        public int hashCode() {
            return mInt;
        }"
27305,equals,"        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            ParcelableImpl that = (ParcelableImpl) o;
"
27306,isB,"    public boolean isB() {
        return mInner2 == Inner.B && mParcelable2.mInt == 2 && mInnerList.get(0) == Inner.B && mParcelableList.get(0).mInt == 2;
    }"
27307,isA,"    public boolean isA() {
        return mInner2 == Inner.A && mParcelable2.mInt == 1 && mInnerList.get(0) == Inner.A && mParcelableList.get(0).mInt == 1;
    }"
27308,setToB,"    public void setToB() {
        mInner2 = Inner.B;
        mParcelable2 = new ParcelableImpl(2);
        mInnerList = new ArrayList<>(Collections.singletonList(Inner.B));
        mParcelableList = new ArrayList<>(Collections.singletonList(new ParcelableImpl(2)));
    }"
27309,setToA,"    public void setToA() {
        mInner2 = Inner.A;
        mParcelable2 = new ParcelableImpl(1);
        mInnerList = new ArrayList<>(Collections.singletonList(Inner.A));
        mParcelableList = new ArrayList<>(Collections.singletonList(new ParcelableImpl(1)));
    }"
27310,isValue,"    public boolean isValue(int value) {
        return mParcelableArrayImpl1[0].isValue(value) && mParcelableArrayImpl2[0].isValue(value) && mParcelableArrayImpl3[0].isValue(value);
    }"
27311,setToValue,"    public void setToValue(int value) {
        mParcelableArrayImpl1 = new TestTypes.ParcelableImpl[]{new TestTypes.ParcelableImpl(value)};
        mParcelableArrayImpl2 = new TestTypes.ParcelableImpl[]{new TestTypes.ParcelableImpl(value)};
        mParcelableArrayImpl3 = new TestTypes.ParcelableImpl[]{new TestTypes.ParcelableImpl(value)};
    }"
27312,setParcelableArrayImpl2,"    public void setParcelableArrayImpl2(TestTypes.ParcelableImpl[] parcelableArrayImpl2) {
        mParcelableArrayImpl2 = parcelableArrayImpl2;
    }"
27313,getParcelableArrayImpl2,"    public TestTypes.ParcelableImpl[] getParcelableArrayImpl2() {
        return mParcelableArrayImpl2;
    }"
27314,setParcelableList,"    public void setParcelableList(List<TestTypes.ParcelableImpl> parcelableList) {
        this.parcelableList = parcelableList;
    }"
27315,getParcelableList,"    public List<TestTypes.ParcelableImpl> getParcelableList() {
        return parcelableList;
    }"
27316,setEmptyList,"    public void setEmptyList(List<Integer> emptyList) {
        this.emptyList = emptyList;
    }"
27317,getEmptyList,"    public List<Integer> getEmptyList() {
        return emptyList;
    }"
27318,setStringList,"    public void setStringList(List<String> stringList) {
        this.stringList = stringList;
    }"
27319,getStringList,"    public List<String> getStringList() {
        return stringList;
    }"
27320,setGenericSerializable,"    public void setGenericSerializable(GenericSerializable<String> genericSerializable) {
        mGenericSerializable = genericSerializable;
    }"
27321,getGenericSerializable,"    public GenericSerializable<String> getGenericSerializable() {
        return mGenericSerializable;
    }"
27322,setJavaEnum1,"    public void setJavaEnum1(JavaEnum javaEnum1) {
        mJavaEnum1 = javaEnum1;
    }"
27323,getJavaEnum1,"    public JavaEnum getJavaEnum1() {
        return mJavaEnum1;
    }"
27324,get,"        public Data get(@NonNull String key, @NonNull Bundle bundle) {
            if (bundle.containsKey(key + ""1"")) {
                Data data = new Data();"
27325,put,"        public void put(@NonNull String key, @NonNull Data value, @NonNull Bundle bundle) {
            bundle.putInt(key + ""1"", value.int1);
            bundle.putInt(key + ""2"", value.int2);
        }"
27326,setDataRefl,"    public void setDataRefl(Data data) {
        mDataReflOtherName = data;
    }"
27327,getDataRefl,"    public Data getDataRefl() {
        return mDataReflOtherName;
    }"
27328,setData2,"    public void setData2(Data data2) {
        mData2 = data2;
    }"
27329,getData2,"    public Data getData2() {
        return mData2;
    }"
27330,onCreate,"    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        StateSaver.restoreInstanceState(this, savedInstanceState);
    }"
27331,createSavedInstance,"    private <T> T createSavedInstance(Class<T> clazz) {
        try {
            T instance = clazz.newInstance();"
27332,testNested,"    public void testNested() {
        TestNested.Inner1.InnerInner1 object1 = createSavedInstance(TestNested.Inner1.InnerInner1.class);
        TestNested.Inner2.InnerInner1 object2 = createSavedInstance(TestNested.Inner2.InnerInner1.class);

        object1.test = 5;
        object2.test = 5;

        StateSaver.restoreInstanceState(object1, mBundle);
        StateSaver.restoreInstanceState(object2, mBundle);
"
27335,setUp,"    public void setUp() {
        mBundle = new Bundle();
    }"
27336,setValue,"    public void setValue(T value) {
        mValue = value;
    }"
27337,getValue,"    public T getValue() {
        return mValue;
    }"
27350,testProperty,"    public void testProperty() {
        TestProperty object = createSavedInstance(TestProperty.class);
        object.setTest(5);

        StateSaver.restoreInstanceState(object, mBundle);
"
27351,testSimple,"    public void testSimple() {
        TestSimple object = createSavedInstance(TestSimple.class);
        object.field = 5;

        StateSaver.restoreInstanceState(object, mBundle);
"
27353,get,"    public List<String> get(@NonNull String key, @NonNull Bundle bundle) {
        return bundle.getStringArrayList(key);
    }"
27354,put,"    public void put(@NonNull String key, @NonNull List<String> value, @NonNull Bundle bundle) {
        ArrayList<String> arrayList = value instanceof ArrayList ? (ArrayList<String>) value : new ArrayList<>(value);
        bundle.putStringArrayList(key, arrayList);
    }"
27355,get,"    public List<? extends Parcelable> get(@NonNull String key, @NonNull Bundle bundle) {
        return bundle.getParcelableArrayList(key);
    }"
27356,put,"    public void put(@NonNull String key, @NonNull List<? extends Parcelable> value, @NonNull Bundle bundle) {
        ArrayList<? extends Parcelable> arrayList = value instanceof ArrayList ? (ArrayList<? extends Parcelable>) value : new ArrayList<>(value);
        bundle.putParcelableArrayList(key, arrayList);
    }"
27357,get,"    public List<Integer> get(@NonNull String key, @NonNull Bundle bundle) {
        return bundle.getIntegerArrayList(key);
    }"
27358,put,"    public void put(@NonNull String key, @NonNull List<Integer> value, @NonNull Bundle bundle) {
        ArrayList<Integer> arrayList = value instanceof ArrayList ? (ArrayList<Integer>) value : new ArrayList<>(value);
        bundle.putIntegerArrayList(key, arrayList);
    }"
27359,get,"    public List<CharSequence> get(@NonNull String key, @NonNull Bundle bundle) {
        return bundle.getCharSequenceArrayList(key);
    }"
27360,put,"    public void put(@NonNull String key, @NonNull List<CharSequence> value, @NonNull Bundle bundle) {
        ArrayList<CharSequence> arrayList = value instanceof ArrayList ? (ArrayList<CharSequence>) value : new ArrayList<>(value);
        bundle.putCharSequenceArrayList(key, arrayList);
    }"
27361,getViewHeight,"	public static int getViewHeight(){
		return ViewHeight;
	}"
27362,getViewWidth,"	public static int getViewWidth(){
		return ViewWidth;
	}"
27363,directionChange,"	private void directionChange(){
		switch(direction){
		case Left:"
27364,onLayout,"	protected void onLayout(boolean changed, int l, int t, int r, int b) {
		super.onLayout(changed, l, t, r, b);
		View parent = (View) getParent();
		int halfParentW = (int) (parent.getWidth()*0.5);
		int center = (int) (l + (this.getWidth()*0.5));
		if(center<=halfParentW){
			direction = Direction.Left;
		}"
27365,onEditorAction,"	public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
		setStatus(Status.Normal);
		return true;
	}"
27366,setStatus,"	public void setStatus(Status status){
		switch(status){
		case Normal:"
27367,initEvents,"	protected void initEvents(){
		etPictureTagLabel.setOnEditorActionListener(this);
	}"
27368,init,"	protected void init(){
		imm = (InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);
		directionChange();
	}"
27369,initViews,"	protected void initViews(){
		LayoutInflater.from(context).inflate(R.layout.picturetagview, this,true);
		tvPictureTagLabel = (TextView) findViewById(R.id.tvPictureTagLabel);
		etPictureTagLabel = (EditText) findViewById(R.id.etPictureTagLabel);
		loTag = findViewById(R.id.loTag);
	}"
27372,addItem,"	private void addItem(int x,int y){
		View view = null;
		RelativeLayout.LayoutParams params=new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
		if(x>getWidth()*0.5){
			params.leftMargin = x - PictureTagView.getViewWidth();
			view = new PictureTagView(getContext(),Direction.Right);
		}
		else{"
27373,onTouch,"	public boolean onTouch(View v, MotionEvent event) {
		switch (event.getAction()) {
		case MotionEvent.ACTION_DOWN:
			touchView = null;"
27374,init,"	private void init(){
		this.setOnTouchListener(this);
	}"
27375,onCreate,"	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		this.setContentView(R.layout.act_main);
	}"
27376,onClick,"        public void onClick(View view) {
            startActivity(new Intent(view.getContext(), MainActivity.class));
            finish();
        }"
27377,onSkipToPrevious,"        public void onSkipToPrevious() {
            super.onSkipToPrevious();
            movieView.startVideo();
            if (indexInPlaylist > 0) {
                indexInPlaylist--;"
27378,onSkipToNext,"        public void onSkipToNext() {
            super.onSkipToNext();
            movieView.startVideo();
            if (indexInPlaylist < PLAYLIST_SIZE) {
                indexInPlaylist++;"
27379,onPause,"        public void onPause() {
            super.onPause();
            movieView.pause();
        }"
27380,onPlay,"        public void onPlay() {
            super.onPlay();
            movieView.play();
        }"
27381,updatePlaybackState,"    private void updatePlaybackState(
            @PlaybackStateCompat.State int state, long playbackActions, int position, int mediaId) {
        PlaybackStateCompat.Builder builder =
                new PlaybackStateCompat.Builder()"
27382,updatePlaybackState,"    private void updatePlaybackState(
            @PlaybackStateCompat.State int state, int position, int mediaId) {
        long actions = mSession.getController().getPlaybackState().getActions();
        updatePlaybackState(state, actions, position, mediaId);"
27383,adjustFullScreen,"    private void adjustFullScreen(Configuration config) {
        final View decorView = getWindow().getDecorView();
        if (config.orientation == Configuration.ORIENTATION_LANDSCAPE) {
            decorView.setSystemUiVisibility("
27385,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(
            boolean isInPictureInPictureMode, Configuration configuration) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode, configuration);
        if (!isInPictureInPictureMode) {"
27386,onWindowFocusChanged,"    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        if (hasFocus) {
            adjustFullScreen(getResources().getConfiguration());"
27387,onConfigurationChanged,"    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        adjustFullScreen(newConfig);
    }"
27391,onStart,"    protected void onStart() {
        super.onStart();
        initializeMediaSession();
    }"
27396,onClick,"                public void onClick(View view) {
                    switch (view.getId()) {
                        case R.id.pip:"
27397,onClick,"        public void onClick(View view) {
            startActivity(new Intent(view.getContext(), MediaSessionPlaybackActivity.class));
            finish();
        }"
27400,onReceive,"                        public void onReceive(Context context, Intent intent) {
                            if (intent == null
                                    || !ACTION_MEDIA_CONTROL.equals(intent.getAction())) {
                                return;
                            }"
27401,onPictureInPictureModeChanged,"    public void onPictureInPictureModeChanged(
            boolean isInPictureInPictureMode, Configuration configuration) {
        super.onPictureInPictureModeChanged(isInPictureInPictureMode, configuration);
        if (isInPictureInPictureMode) {"
27412,reset,"    void reset() {
        mLock.lock();
        mWait = false;
        mNotify = false;
        mLock.unlock();
    }"
27413,doWait,"    void doWait() {
        mLock.lock();
        boolean unlock = false;
        try {
            if (mNotify) {"
27414,doNotify,"    void doNotify() {
        mLock.lock();
        try {
            mNotify = true;"
27415,getViewPosition,"    private static void getViewPosition(View view, Point p) {
        p.x += view.getLeft();
        p.y += view.getTop();
        if (view.getParent() != null && view.getParent() instanceof View) {
            getViewPosition((View) view.getParent(), p);"
27416,getViewRect,"    static Rect getViewRect(View view) {
        Point p = new Point(0, 0);
        getViewPosition(view, p);
        return new Rect(p.x, p.y, p.x + view.getWidth(), p.y + view.getHeight());
    }"
27417,run,"            public void run() {
                try {
                    v.clearFocus();"
27418,getDrawingCache,"    static Bitmap getDrawingCache(final View v) {
        final WaitNotify waitNotify = new WaitNotify();
        final BitmapHolder bmpHolder = new BitmapHolder();
        new Handler(Looper.getMainLooper()).post(new Runnable() {
            @Override
            public void run() {
                try {"
27419,removeEmpty,"    private static void removeEmpty() {
        Reference<? extends ReusableVec> ref;
        while ((ref = mQueue.poll()) != null) {
            mCache.remove(ref);"
27420,getAndReset,"    public static ReusableVec getAndReset(int length) {
        ReusableVec v = get(length);
        for (int i = 0; i < v.getData().length; ++i) {
            v.setValue(i, 0);
        }"
27421,get,"    public static ReusableVec get(int length) {
        try {
            sLock.lock();"
27422,equals,"    public boolean equals(Object obj) {
        if (obj == null || !(obj instanceof Vec)) {
            return false;
        }
        Vec v = (Vec) obj;
        if (v.getData().length != getData().length) {
            return false;"
27423,toString,"    public String toString() {
        StringBuilder sb = new StringBuilder();
        for (float f : mData) {
            sb.append(String.format(""%f,"", f));
        }
        if (sb.length() > 0) {"
27424,setUpdateTimes,"    void setUpdateTimes(int times) {
        mUpdateTimes.set(times);
    }"
27425,getUpdateTimes,"    public int getUpdateTimes() {
        return mUpdateTimes.get();
    }"
27426,value,"    public float value(int index) {
        return mData[index];
    }"
27427,setValue,"    public void setValue(int index, float value) {
        mData[index] = value;
        mUpdateTimes.addAndGet(1);
    }"
27428,setSize,"    public void setSize(float w, float h) {
        mData[0] = w;
        mData[1] = h;
        mUpdateTimes.addAndGet(1);
    }"
27429,height,"    public float height() {
        return mData[1];
    }"
27430,width,"    public float width() {
        return mData[0];
    }"
27431,setRGBA,"    public void setRGBA(float r, float g, float b, float a) {
        mData[0] = r;
        mData[1] = g;
        mData[2] = b;
        mData[3] = a;
        mUpdateTimes.addAndGet(1);
    }"
27432,a,"    public void a(float a) {
        mData[3] = a;
        mUpdateTimes.addAndGet(1);
    }"
27433,b,"    public void b(float b) {
        mData[2] = b;
        mUpdateTimes.addAndGet(1);
    }"
27434,g,"    public void g(float g) {
        mData[1] = g;
        mUpdateTimes.addAndGet(1);
    }"
27435,r,"    public void r(float r) {
        mData[0] = r;
        mUpdateTimes.addAndGet(1);
    }"
27436,a,"    public float a() {
        return mData[3];
    }"
27437,b,"    public float b() {
        return mData[2];
    }"
27438,g,"    public float g() {
        return mData[1];
    }"
27439,r,"    public float r() {
        return mData[0];
    }"
27440,setXYZ,"    public void setXYZ(float value) {
        setXYZ(value, value, value);
    }"
27441,setXYZ,"    public void setXYZ(float x, float y, float z) {
        mData[0] = x;
        mData[1] = y;
        mData[2] = z;
        mUpdateTimes.addAndGet(1);
    }"
27442,setXY,"    public void setXY(float x, float y) {
        mData[0] = x;
        mData[1] = y;
        mUpdateTimes.addAndGet(1);
    }"
27443,z,"    public void z(float z) {
        mData[2] = z;
        mUpdateTimes.addAndGet(1);
    }"
27444,y,"    public void y(float y) {
        mData[1] = y;
        mUpdateTimes.addAndGet(1);
    }"
27445,x,"    public void x(float x) {
        mData[0] = x;
        mUpdateTimes.addAndGet(1);
    }"
27446,z,"    public float z() {
        return mData[2];
    }"
27447,y,"    public float y() {
        return mData[1];
    }"
27448,x,"    public float x() {
        return mData[0];
    }"
27449,sub,"    public void sub(float x, float y, float z) {
        add(-x, -y, -z);
    }"
27450,sub,"    public void sub(Vec v) {
        for (int i = 0; i < mData.length; ++i) {
            if (i > v.getData().length - 1) {
                break;"
27451,add,"    public void add(float x, float y, float z) {
        mData[0] = x() + x;
        mData[1] = y() + y;
        mData[2] = z() + z;
        mUpdateTimes.addAndGet(1);
    }"
27452,add,"    public void add(Vec v) {
        for (int i = 0; i < mData.length; ++i) {
            if (i > v.getData().length - 1) {
                break;"
27453,copy,"    public void copy(Vec v) {
        for (int i = 0; i < mData.length; ++i) {
            if (i > v.getData().length - 1) {
                break;"
27454,getData,"    public float[] getData() {
        return mData;
    }"
27455,getColor,"    public int getColor() {
        return ((int)(a() * 255)) << 24 |
                ((int)(r() * 255)) << 16 |"
27457,equals,"    public boolean equals(Object obj) {
        if (obj == null || !(obj instanceof Texture)) {
            return false;
        }
        Texture t = (Texture) obj;
        if (mBmp == null) {"
27458,prepareTexCoord,"    void prepareTexCoord() {
        try {
            mBufferLock.lock();"
27459,drawModel,"    protected void drawModel() {
        if (mDrawGrid) {
            GLES20.glDrawElements(GLES20.GL_LINE_STRIP, mIndices.length, GLES20.GL_UNSIGNED_SHORT, mIndicesBuffer);"
27460,runOnDraw,"    void runOnDraw() {
        if (!mIsMulti) {
            super.runOnDraw();"
27461,setProgram,"    void setProgram(Program program) {
        super.setProgram(program);
        mTexCoordBuffer.setProgram(program);
    }"
27462,setColor,"    void setColor(int row, int col, Vec color) {
        int i = row * mColLineCount + col;
        setColor(i, color.r(), color.g(), color.b(), color.a());
    }"
27463,setPosition,"    void setPosition(int row, int col, Vec pos) {
        int i = row * mColLineCount + col;
        setPosition(i, pos.x(), pos.y(), pos.z());
    }"
27464,updatePositionUseOffset,"    void updatePositionUseOffset() {
        Vec vec = new Vec(3);
        for (int r = 0; r < getRowLineCount(); ++r) {
            for (int c = 0; c < getColLineCount(); ++c) {
                getPosition(r, c, vec);"
27465,getPositionExcludeOffset,"    public void getPositionExcludeOffset(int row, int col, Vec out) {
        out.setXYZ(
                getWidth() / (mColLineCount - 1) * col - getWidth() / 2,"
27466,getPosition,"    public void getPosition(int row, int col, Vec out) {
        out.setXYZ(
                getWidth() / (mColLineCount - 1) * col - getWidth() / 2 + mOffset.x(),"
27467,getRowLineCount,"    public int getRowLineCount() {
        return mRowLineCount;
    }"
27468,getColLineCount,"    public int getColLineCount() {
        return mColLineCount;
    }"
27469,getHeight,"    public float getHeight() {
        return mHeight;
    }"
27470,getWidth,"    public float getWidth() {
        return mWidth;
    }"
27472,drawGrid,"    void drawGrid(boolean drawGrid) {
        mDrawGrid = drawGrid;
    }"
27473,update,"    void update(int colCount, int rowCount, float width, float height) {
        mColLineCount = colCount;
        mRowLineCount = rowCount;
        mWidth = width;
        mHeight = height;
        init();
    }"
27474,setOffset,"    void setOffset(float x, float y, float z) {
        mOffset.setXYZ(x, y, z);
    }"
27475,getOffset,"    void getOffset(Vec offset) {
        offset.copy(mOffset);
    }"
27476,unlock,"    void unlock() {
        t.set(null);
    }"
27477,lock,"    void lock() {
        while (!t.compareAndSet(null, this));
    }"
27478,runOnDrawSize,"    int runOnDrawSize() {
        return mRunOnDraw.size();
    }"
27479,clearRunOnDraw,"    void clearRunOnDraw() {
        mRunOnDraw.clear();
    }"
27480,runOnDraw,"    void runOnDraw() {
        Runnable r;
        while ((r = mRunOnDraw.poll()) != null) {
            r.run();"
27481,addRunOnDraw,"    void addRunOnDraw(Runnable runnable) {
        mRunOnDraw.offer(runnable);
    }"
27482,free,"    public void free() {
        mIsFree = true;
    }"
27483,use,"    void use() {
        mIsFree = false;
    }"
27484,isFree,"    boolean isFree() {
        return mIsFree;
    }"
27485,isGLThread,"    boolean isGLThread() {
        return Thread.currentThread().getId() == mGLThreadId;
    }"
27486,isDeleted,"    boolean isDeleted() {
        return mDeleted;
    }"
27487,delete,"    void delete() {
        if (isGLThread()) {
            GLES20.glDeleteProgram(handle);
            GLUtil.checkGlError(""glDeleteProgram"");"
27488,use,"    void use() {
        GLES20.glUseProgram(handle);
        GLUtil.checkGlError(""glUseProgram"");
    }"
27489,restore,"    public void restore() {
        super.restore();
        mPosition.refresh();
    }"
27490,runOnDraw,"    protected void runOnDraw() {
        super.runOnDraw();
        mPosition.runOnDraw();
    }"
27491,setIndex,"    void setIndex(int index) {
        super.setIndex(index);
        mPosition.name(String.format(""u_l%d_pos_or_dir"", index));
    }"
27492,setProgram,"    void setProgram(Program program) {
        super.setProgram(program);
        mPosition.setProgram(program);
    }"
27493,getPosition,"    public Vec getPosition() {
        return mPosition.value();
    }"
27494,setPosition,"    public void setPosition(Vec pos) {
        mPosition.value().copy(pos);
        mPosition.refresh();
    }"
27495,setPosition,"    public void setPosition(float x, float y, float z) {
        mPosition.value().setXYZ(x, y, z);
        mPosition.refresh();
    }"
27496,scaleM,"    static void scaleM(float[] matrixData, float x, float y, float z) {
        Matrix.scaleM(matrixData, 0, x, y, z);
    }"
27497,translateM,"    static void translateM(float[] matrixData, float x, float y, float z) {
        Matrix.translateM(matrixData, 0, x, y, z);
    }"
27498,rotateM,"    static void rotateM(float[] matrixData, float x, float y, float z, float a) {
        Matrix.rotateM(matrixData, 0, a, x, y, z);
    }"
27499,reset,"    static void reset(float[] matrixData) {
        Matrix.setIdentityM(matrixData, 0);
    }"
27500,updateMVPMatrix,"    private void updateMVPMatrix() {
        Matrix.multiplyMM(mMVPMatrix.value(), 0, mVMatrix, 0, mModelMatrix.value(), 0);
        Matrix.multiplyMM(mMVPMatrix.value(), 0, mPMatrix, 0, mMVPMatrix.value(), 0);
        mMVPMatrix.refresh();
    }"
27501,runOnDraw,"    protected void runOnDraw() {
        super.runOnDraw();
        mMVPMatrix.runOnDraw();
        mModelMatrix.runOnDraw();
        mCameraLocation.runOnDraw();
    }"
27502,frustumM,"    void frustumM(float width, float height, float near, float far) {
        Matrix.frustumM(mPMatrix, 0, -width / 2, width / 2, -height / 2, height / 2, near, far);
        updateMVPMatrix();
    }"
27503,setLookAtM,"    void setLookAtM(float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ) {
        mCameraLocation.value().setXYZ(eyeX, eyeY, eyeZ);
        mCameraLocation.refresh();
        Matrix.setLookAtM(mVMatrix, 0, eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
        updateMVPMatrix();
    }"
27504,setModelMatrix,"    void setModelMatrix(float[] modelMatrix) {
        System.arraycopy(modelMatrix, 0, mModelMatrix.value(), 0, modelMatrix.length);
        updateMVPMatrix();
        mModelMatrix.refresh();
    }"
27505,setProgram,"    void setProgram(Program program) {
        mMVPMatrix.setProgram(program);
        mModelMatrix.setProgram(program);
        mCameraLocation.setProgram(program);
    }"
27508,activeAllGroup,"    private static void activeAllGroup() {
        try {
            sLock.lock();"
27509,getNewGroup,"    static MagicUpdaterGroup getNewGroup() {
        activeAllGroup();
        try {
            sLock.lock();"
27510,getGroup,"    static MagicUpdaterGroup getGroup(int group) {
        activeAllGroup();
        try {
            sLock.lock();"
27512,needUpdate,"        boolean needUpdate();
        void run();"
27513,isStopped,"        boolean isStopped();
        boolean needUpdate();"
27514,run,"    private boolean run() {
        try {
            mLock.lock();"
27515,update,"    void update() {
        mLastUpdateTime = System.currentTimeMillis();
        mWaitNotify.doNotify();
    }"
27517,start,"    void start() {
        update();
        if (mIsRunning) {
            return;
        }
        mIsRunning = true;"
27518,addRunnable,"    void addRunnable(MagicUpdaterRunnable runnable) {
        try {
            mLock.lock();"
27519,doStartedAndStopped,"    static void doStartedAndStopped(MagicUpdater updater) {
        if (updater == null) {
            return;
        }
        if (updater.isFirstTimeCheckStarted()) {"
27520,prepareUpdater,"    static boolean prepareUpdater(MagicUpdater updater) {
        if (updater == null) {
            return true;
        }
        if (updater.isReadyToUpdate()) {"
27521,run,"                public void run() {
                    for (MagicUpdaterListener l : mListeners) {
                        if (l != null) {"
27522,doStarted,"    private void doStarted() {
        notifyChanged();
        didStart();
        if (mListeners.size() > 0) {
            mHandler.post(new Runnable() {"
27523,doWillStart,"    private void doWillStart() {
        mWaitNotify.reset();
        notifyChanged();
        willStart();
    }"
27525,doStopped,"    private void doStopped() {
        didStop();
        if (mListeners.size() > 0) {
            mHandler.post(new Runnable() {"
27526,run,"    private void run() {
        setState(STATE_RUNNING);
    }"
27527,waitUpdate,"    private void waitUpdate() {
        mWaitNotify.doWait();
    }"
27532,stop,"    public void stop() {
        setState(STATE_STOPPED);
    }"
27533,run,"            public void run() {
                mStateLock.lock();
                try {
                    mUpdaterGroup.addRunnable(mRunnable);
                    if (isStopped()) {"
27534,start,"    void start() {
        mIsFirstTimeCheckStarted = true;
        mIsFirstTimeCheckStopped = true;
        mStateLock.lock();
        try {
            if (mState != STATE_NONE && mState != STATE_STOPPED) {
                return;"
27535,setState,"    private void setState(int state) {
        mStateLock.lock();
        mState = state;
        mStateLock.unlock();
        notifyChanged();
    }"
27536,getState,"    private int getState() {
        return mState;
    }"
27537,isFirstTimeCheckStopped,"    private boolean isFirstTimeCheckStopped() {
        if (mIsFirstTimeCheckStopped) {
            mIsFirstTimeCheckStopped = false;
            return true;"
27538,isFirstTimeCheckStarted,"    private boolean isFirstTimeCheckStarted() {
        if (mIsFirstTimeCheckStarted) {
            mIsFirstTimeCheckStarted = false;
            return true;"
27539,isStopped,"    boolean isStopped() {
        return mState == STATE_STOPPED;
    }"
27540,isRunning,"    private boolean isRunning() {
        return mState == STATE_RUNNING;
    }"
27541,isReadyToUpdate,"    private boolean isReadyToUpdate() {
        return mState == STATE_READY;
    }"
27542,isStarting,"    private boolean isStarting() {
        return mState == STATE_STARTING;
    }"
27543,notifyChanged,"    protected void notifyChanged() {
        mNeedUpdate.set(true);
        mUpdaterGroup.update();
    }"
27544,removeListener,"    public void removeListener(MagicUpdaterListener listener) {
        if (mListeners.contains(listener)) {
            mListeners.remove(listener);"
27545,addListener,"    public void addListener(MagicUpdaterListener listener) {
        if (!mListeners.contains(listener)) {
            mListeners.add(listener);"
27546,setGroup,"    public void setGroup(int group) {
        mUpdaterGroup = MagicUpdaterGroup.getGroup(group);
    }"
27547,run,"        public void run() {
            if (isRunning()) {
                mNeedUpdate.set(false);"
27548,needUpdate,"        public boolean needUpdate() {
            return mNeedUpdate.get();
        }"
27549,isStopped,"        public boolean isStopped() {
            return MagicUpdater.this.isStopped();
        }"
27550,unlock,"    public static void unlock() {
        sLock.unlock();
    }"
27551,lock,"    public static void lock() {
        sLock.lock();
    }"
27552,run,"                public void run() {
                    if (!mHasNewScene) {
                        MagicSurfaceView.super.setVisibility(visibility);"
27553,setVisibility,"    public void setVisibility(final int visibility) {
        if (visibility == VISIBLE) {
            super.setVisibility(VISIBLE);"
27554,onPause,"    public void onPause() {
        super.onPause();
        mHasNewScene = false;
    }"
27555,onDestroy,"    public void onDestroy() {
        onPause();
        release();
        mRenderer = null;
    }"
27556,release,"    public void release() {
        mRenderer.release();
    }"
27557,render,"    public void render(MagicScene magicScene) {
        mHasNewScene = true;
        mRenderer.render(magicScene);
        if (getVisibility() != VISIBLE) {
            setVisibility(VISIBLE);"
27559,surfaceDestroyed,"            public void surfaceDestroyed(SurfaceHolder holder) {
                mRenderer.onDestroy();
                mHasNewScene = false;
            }"
27560,surfaceChanged,"            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
            }"
27561,run,"                    public void run() {
                        if (mRenderer.getScene() == null) {
                            onPause();"
27562,surfaceCreated,"            public void surfaceCreated(SurfaceHolder holder) {
                postDelayed(new Runnable() {
                    @Override"
27563,init,"    private void init() {
        setEGLContextClientVersion(2);
        setEGLConfigChooser(8, 8, 8, 8, 24, 0);
        getHolder().setFormat(PixelFormat.TRANSLUCENT);
        setZOrderOnTop(true);
        setRenderer(mRenderer);
        setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);
        getHolder().addCallback(new SurfaceHolder.Callback() {
            @Override"
27564,updateEnd,"    protected abstract void updateEnd(MagicSurface surface);
"
27565,updatePosition,"    protected abstract void updatePosition(MagicSurface surface, int r, int c, Vec outPos, Vec outColor);
"
27566,updateBegin,"    protected abstract void updateBegin(MagicSurface surface);
"
27567,didStop,"    protected abstract void didStop(MagicSurface surface);
"
27568,didStart,"    protected abstract void didStart(MagicSurface surface);
"
27569,willStart,"    protected abstract void willStart(MagicSurface surface);
"
27571,didStop,"    void didStop() {
        didStop(mSurface);
    }"
27572,didStart,"    void didStart() {
        didStart(mSurface);
    }"
27573,willStart,"    void willStart() {
        mSurface.getModel().updatePositionUseOffset();
        willStart(mSurface);
    }"
27574,updateMatrix,"    protected abstract void updateMatrix(MagicSurface surface, Vec offset, float[] matrix);
}"
27580,willStart,"    void willStart() {
        willStart(mSurface);
    }"
27581,updateMatrix,"    void updateMatrix(float[] matrix) {
        ReusableVec offset = VecPool.get(3);
        try {
            mSurface.getModel().getOffset(offset);"
27582,getMatrix,"    float[] getMatrix() {
        return mSurface.getModel().getMatrix();
    }"
27583,doUpdaterStartedAndStopped,"    protected void doUpdaterStartedAndStopped() {
        MagicUpdater.doStartedAndStopped(mModelUpdater);
        MagicUpdater.doStartedAndStopped(mMatrixUpdater);
    }"
27584,drawModel,"    protected void drawModel(MatrixManager matrixManager) {
        mModel.draw();
    }"
27585,runOnDraw,"    protected boolean runOnDraw(MatrixManager matrixManager) {
        if (mModelUpdater != null) {
            mModelUpdater.runOnDraw();
        }
        if (mMatrixUpdater != null) {
            mMatrixUpdater.runOnDraw();"
27586,stop,"    void stop() {
        if (mModelUpdater != null) {
            mModelUpdater.stop();
        }"
27587,release,"    synchronized void release() {
        super.release();
        mModel = null;
    }"
27588,restore,"    void restore() {
        if (mModelUpdater != null && mModelUpdater.isStopped()) {
            mModelUpdater.start();
        }
        if (mMatrixUpdater != null && mMatrixUpdater.isStopped()) {"
27589,updateModel,"    protected void updateModel(Vec size, Vec offset) {
        mModel = new SurfaceModel(mColLineCount, mRowLineCount, size.width(), size.height());
        mModel.drawGrid(mDrawGrid);
        mModel.setOffset(offset.x(), offset.y(), offset.z());
    }"
27590,setProgram,"    void setProgram(Program program) {
        mModel.setProgram(program);
        super.setProgram(program);
    }"
27591,drawGrid,"    public MagicSurface drawGrid(boolean drawGrid) {
        mDrawGrid = drawGrid;
        if (mModel != null) {
            mModel.drawGrid(mDrawGrid);
        }"
27592,setGrid,"    public MagicSurface setGrid(int rowLineCount, int colLineCount) {
        mRowLineCount = rowLineCount;
        mColLineCount = colLineCount;
        if (mModel != null) {
            mModel.update(colLineCount, rowLineCount, mModel.getWidth(), mModel.getHeight());
        }"
27593,setMatrixUpdater,"    public MagicSurface setMatrixUpdater(MagicSurfaceMatrixUpdater updater) {
        this.mMatrixUpdater = updater;
        if (mMatrixUpdater != null) {
            mMatrixUpdater.mSurface = this;
        }"
27594,setModelUpdater,"    public MagicSurface setModelUpdater(MagicSurfaceModelUpdater updater) {
        this.mModelUpdater = updater;
        if (mModelUpdater != null) {
            mModelUpdater.mSurface = this;
        }"
27595,getModel,"    public SurfaceModel getModel() {
        return mModel;
    }"
27596,update,"    protected abstract void update(MagicScene scene, Vec outAmbientColor);
}"
27597,didStop,"    protected abstract void didStop(MagicScene scene);
"
27598,didStart,"    protected abstract void didStart(MagicScene scene);
"
27599,willStart,"    protected abstract void willStart(MagicScene scene);
"
27600,update,"    void update() {
        try {
            update(mScene, mScene.mAmbientColor.value());"
27601,didStop,"    void didStop() {
        didStop(mScene);
    }"
27602,didStart,"    void didStart() {
        didStart(mScene);
    }"
27603,willStart,"    void willStart() {
        willStart(mScene);
    }"
27604,append,"    private void append(StringBuilder sb, String format, Object... params) {
        sb.append(String.format(Locale.US, format, params));
    }"
27606,createFragmentShaderParams,"    private String createFragmentShaderParams() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < mScene.mSurfaces.size(); ++i) {
            append(sb, ""uniform bool u_surface%d_;"", i);
            append(sb, ""uniform sampler2D u_s%d_t_body;"", i);
            for (int n = 0; n < mScene.mSurfaces.get(i).mTextures.size(); ++n) {
                append(sb, ""uniform sampler2D u_s%d_t%d;"", i, n);"
27609,createVertexShaderMain,"    private String createVertexShaderMain() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < mScene.mSurfaces.size(); ++i) {
            if (i > 0) {
                sb.append("" else "");"
27610,createVertexShaderParams,"    private String createVertexShaderParams() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < mScene.mSurfaces.size(); ++i) {
            append(sb, ""uniform bool u_surface%d_;"", i);
            append(sb, ""uniform float u_s%d_shininess;"", i);
            sb.append("""");"
27612,build,"    public MagicScene build() {
        final String v = buildVertexShaderSource();
        final String f = buildFragmentShaderSource();
        mScene.init(v, f);
        return mScene;
    }"
27613,setUpdater,"    public MagicSceneBuilder setUpdater(MagicSceneUpdater updater) {
        mScene.setUpdater(updater);
        return this;
    }"
27614,ambientColor,"    public MagicSceneBuilder ambientColor(int color) {
        mScene.setAmbientColor(color);
        return this;
    }"
27615,addSurfaces,"    public MagicSceneBuilder addSurfaces(MagicBaseSurface... objects) {
        if (objects == null) {
            return this;
        }
        for (MagicBaseSurface s : objects) {"
27616,addLights,"    public MagicSceneBuilder addLights(Light... lights) {
        if (lights == null) {
            return this;
        }
        mScene.mLights.addAll(Arrays.asList(lights));"
27617,updateCamera,"    private void updateCamera() {
        mMatrixManager.setLookAtM(
                mCameraPosition.x(), mCameraPosition.y(), mCameraPosition.z(),"
27618,getTextureCount,"    private int getTextureCount() {
        int c = 0;
        for (MagicBaseSurface<?> s : mSurfaces) {
            c += (1 + s.mTextures.size());
        }"
27619,initTexture,"    private void initTexture(Texture texture, int id) {
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, id);
        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, texture.mBmp, 0);
        texture.mId = id;
        GLUtil.initTexParams();
    }"
27620,draw,"    void draw() {
        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
        if (mSurfaces != null) {
            for (MagicBaseSurface<?> s : mSurfaces) {
                s.draw(mMatrixManager);"
27621,updateFrustum,"    void updateFrustum() {
        Rect r = getSceneViewRect();
        float w = r.right - r.left;
        float h = r.bottom - r.top;
        GLES20.glViewport(0, 0, (int) w, (int) h);
        GLUtil.checkGlError(""glViewport"");
        float ratio = w / h;
        if (ratio > 1) {
            w = 1;
            h = 1 / ratio;
        } else {
            w = ratio;
            h = 1;"
27622,getSceneViewRect,"    Rect getSceneViewRect() {
        if (mSceneViewRect == null) {
            mSceneViewRect = ViewUtil.getViewRect(mSurfaceView);
        }"
27623,release,"    void release() {
        stop();
        for (MagicBaseSurface<?> s : mSurfaces) {
            s.release();"
27624,stop,"    void stop() {
        if (mSurfaces != null) {
            for (MagicBaseSurface<?> s : mSurfaces) {
                s.stop();
            }"
27625,restore,"    void restore() {
        init(mVertexShader, mFragmentShader);
        init();
        mAmbientColor.refresh();
        if (mLights != null) {
            for (Light l : mLights) {
                l.restore();"
27626,runOnDraw,"    protected void runOnDraw() {
        super.runOnDraw();
        init();
        if (isReady()) {
            if (mUpdater != null) {"
27627,init,"    private void init() {
        if (!mInited && isPrepared()) {
            mProgram = new Program(mVertexShader, mFragmentShader);"
27628,run,"            public void run() {
                prepare();
            }"
27629,init,"    void init(String vertexShader, String fragmentShader) {
        mVertexShader = vertexShader;
        mFragmentShader = fragmentShader;
        mInited = false;
        addRunOnDraw(new Runnable() {
            @Override"
27630,isPrepared,"    private boolean isPrepared() {
        if (!mIsPrepared) {
            boolean prepared = true;
            for (MagicBaseSurface<?> s : mSurfaces) {
                if (!s.isPrepared()) {"
27631,prepare,"    private boolean prepare() {
        if (isPrepared()) {
            return true;
        }
        if (mIsPreparing) {
            return false;
        }"
27632,isReady,"    boolean isReady() {
        return isPrepared() && mInited;
    }"
27633,setLookAtM,"    void setLookAtM(float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ) {
        mCameraPosition.setXYZ(eyeX, eyeY, eyeZ);
        mCameraCenter.setXYZ(centerX, centerY, centerZ);
        mCameraUp.setXYZ(upX, upY, upZ);
        updateCamera();
    }"
27634,setUpdater,"    void setUpdater(MagicSceneUpdater updater) {
        mUpdater = updater;
        mUpdater.mScene = this;
    }"
27635,setAmbientColor,"    void setAmbientColor(int color) {
        mAmbientColor.value().setColor(color);
        mAmbientColor.refresh();
    }"
27636,setCameraZ,"    public void setCameraZ(float cameraZ) {
        if (cameraZ < NEAR) {
            throw new IllegalArgumentException(""cameraZ required greater than 0.1"");
        }
        mCameraZ = cameraZ;
        if (mCameraPosition.y() != cameraZ && mCameraPosition.x() == 0 && mCameraPosition.y() == 0) {"
27637,getCameraPos,"    public void getCameraPos(Vec outPos) {
        outPos.copy(mCameraPosition);
    }"
27638,getPosition,"    public void getPosition(float ratioX, float ratioY, Vec out) {
        out.setXYZ(
                -mSceneSize.width() / 2 + mSceneSize.width() * ratioX,"
27639,getSurface,"    public <T extends MagicBaseSurface> T getSurface(int index) {
        if (index < 0 || index > mSurfaces.size() - 1) {
            return null;
        }"
27640,getLight,"    public <T extends Light> T getLight(int index) {
        if (index < 0 || index > mLights.size() - 1) {
            return null;
        }"
27641,getHeight,"    public float getHeight() {
        return mSceneSize.height();
    }"
27642,getWidth,"    public float getWidth() {
        return mSceneSize.width();
    }"
27643,releaseScene,"    private void releaseScene() {
        if (mScene != null) {
            mScene.release();"
27644,release,"    void release() {
        mReleased = true;
        mNeedRestore = false;
        if (mOnDestroyed) {
            releaseScene();"
27645,onDestroy,"    void onDestroy() {
        mOnDestroyed = true;
        if (mScene != null) {
            mScene.stop();
        }"
27646,onDrawFrame,"    public void onDrawFrame(GL10 gl) {
        try {
            MagicSurfaceViewLock.lock();"
27647,runOnDraw,"    private void runOnDraw() {
        if (mScene != null) {
            mScene.runOnDraw();"
27648,onSurfaceChanged,"    public void onSurfaceChanged(GL10 gl, int width, int height) {
        if (mScene != null && mScene.isReady()) {
            mScene.updateFrustum();"
27649,onSurfaceCreated,"    public void onSurfaceCreated(GL10 gl, EGLConfig config) {
        mReleased = false;
        mOnDestroyed = false;
    }"
27650,getScene,"    MagicScene getScene() {
        return mScene;
    }"
27651,render,"    void render(final MagicScene scene) {
        if (mScene != null) {
            mScene.release();
        }"
27652,updateEnd,"    protected abstract void updateEnd(MagicMultiSurface surface);
}"
27653,update,"    protected abstract void update(MagicMultiSurface surface, int r, int c, float[] matrix, Vec offset, Vec color);
"
27654,updateBegin,"    protected abstract void updateBegin(MagicMultiSurface surface);
"
27655,didStop,"    protected abstract void didStop(MagicMultiSurface surface);
"
27656,didStart,"    protected abstract void didStart(MagicMultiSurface surface);
"
27657,willStart,"    protected abstract void willStart(MagicMultiSurface surface);
"
27658,scale,"    protected void scale(float[] matrix, Vec vec) {
        MatrixManager.scaleM(matrix, vec.x(), vec.y(), vec.z());
    }"
27659,translate,"    protected void translate(float[] matrix, Vec vec) {
        MatrixManager.translateM(matrix, vec.x(), vec.y(), vec.z());
    }"
27660,rotate,"    protected void rotate(float[] matrix, Vec vec, float angle) {
        MatrixManager.rotateM(matrix, vec.x(), vec.y(), vec.z(), angle);
    }"
27661,reset,"    protected void reset(float[] matrix) {
        MatrixManager.reset(matrix);
    }"
27662,unlock,"    void unlock() {
        mLock.unlock();
    }"
27664,update,"    void update() {
        updateBegin(mSurface);
        mLock.lock();
        try {
            for (int r = 0; r < mSurface.getRows(); ++r) {
                for (int c = 0; c < mSurface.getCols(); ++c) {"
27668,doUpdaterStartedAndStopped,"    protected void doUpdaterStartedAndStopped() {
        MagicUpdater.doStartedAndStopped(mUpdater);
    }"
27669,drawModel,"    protected void drawModel(MatrixManager matrixManager) {
        if (mUpdater != null) {
            mUpdater.lock();
        }"
27670,runOnDraw,"    protected boolean runOnDraw(MatrixManager matrixManager) {
        if (mUpdater != null) {
            mUpdater.runOnDraw();
        }
        if (MagicUpdater.prepareUpdater(mUpdater)) {"
27671,release,"    synchronized void release() {
        super.release();
        mModels = null;
        mDrawModel = null;
    }"
27672,restore,"    void restore() {
        if (mUpdater != null && mUpdater.isStopped()) {
            mUpdater.start();
        }"
27673,stop,"    void stop() {
        if (mUpdater != null) {
            mUpdater.stop();"
27674,updateModel,"    protected void updateModel(Vec size, Vec offset) {
        float w = size.width() / mCols;
        float h = size.height() / mRows;
        float halfW = size.width() / 2;
        float halfH = size.height() / 2;
        mDrawModel = new SurfaceModel(2, 2, w, h);
        for (int r = 0; r < mRows; ++r) {
            for (int c = 0; c < mCols; ++c) {"
27675,setProgram,"    void setProgram(Program program) {
        mDrawModel.setProgram(program);
        for (SurfaceModel m : mModels) {
            m.setProgram(program);
        }"
27676,getModel,"    SurfaceModel getModel(int r, int c) {
        return mModels[r * mCols + c];
    }"
27677,getCols,"    public int getCols() {
        return mCols;
    }"
27678,getRows,"    public int getRows() {
        return mRows;
    }"
27679,setUpdater,"    public MagicMultiSurface setUpdater(MagicMultiSurfaceUpdater updater) {
        updater.mSurface = this;
        this.mUpdater = updater;
        return this;
    }"
27680,init,"    private void init(int rows, int cols) {
        if (rows < 1 || cols < 1) {
            throw new IllegalArgumentException();
        }
        mRows = rows;
        mCols = cols;"
27683,update,"    void update() {
        updateMatrix(mMatrix);
        try {
            mLock.lock();"
27685,updateMatrix,"    abstract void updateMatrix(float[] matrix);
"
27690,initTextures,"    private void initTextures(Bitmap... bitmaps) {
        if (bitmaps == null) {
            return;
        }"
27691,updateModel,"    protected abstract void updateModel(Vec size, Vec offset);
"
27693,doUpdaterStartedAndStopped,"    protected abstract void doUpdaterStartedAndStopped();
"
27694,drawModel,"    protected abstract void drawModel(MatrixManager matrixManager);
"
27695,draw,"    void draw(MatrixManager matrixManager) {
        if (checkRunOnDraw(matrixManager)) {
            if (isVisible()) {"
27696,runOnDraw,"    protected abstract boolean runOnDraw(MatrixManager matrixManager);
"
27697,checkRunOnDraw,"    private boolean checkRunOnDraw(MatrixManager matrixManager) {
        mBody.runOnDraw();
        mShininess.runOnDraw();
        if (mTextures != null) {
            for (GLParameter<Texture> t : mTextures) {
                t.runOnDraw();"
27698,release,"    synchronized void release() {
        if (mReleased) {
            return;
        }
        if (mBody.value().mBmp != null) {
            mBody.value().mBmp.recycle();"
27700,restore,"    void restore() {
        mBody.refresh();
        mIsCurrent.refresh();
        mShininess.refresh();
        if (mTextures != null) {
            for (GLParameter<Texture> t : mTextures) {"
27701,setIndex,"    void setIndex(int index, int textureIndex) {
        mIsCurrent.name(String.format(""u_surface%d_"", index));
        mShininess.name(String.format(""u_s%d_shininess"", index));
        mBody.name(String.format(""u_s%d_t_body"", index));
        mBody.value().mIndex = textureIndex;
        if (mTextures != null) {
            for (int i = 0; i < mTextures.size(); ++i) {"
27702,run,"                public void run() {
                    mBmpBody = ViewUtil.getDrawingCache(mView);
                    mBody.value().mBmp = mBmpBody;
                    mIsPrepared = true;
                    mIsPreparing = false;
                }"
27703,prepare,"    void prepare() {
        if (mIsPrepared || mIsPreparing) {
            return;
        }
        mIsPreparing = true;
        if (mIsView) {
            mViewRect = ViewUtil.getViewRect(mView);
            mViewRect.left = mViewRect.left - mScene.getSceneViewRect().left;"
27704,isPrepared,"    boolean isPrepared() {
        return mIsPrepared;
    }"
27705,getPositionExcludeOffset,"    public void getPositionExcludeOffset(float ratioX, float ratioY, Vec outPos) {
        outPos.setXYZ(
                ratioX * mSize.width() - mSize.width() / 2,"
27706,getPosition,"    public void getPosition(float ratioX, float ratioY, Vec outPos) {
        outPos.setXYZ(
                ratioX * mSize.width() - mSize.width() / 2 + mOffset.x(),"
27707,getHeight,"    public float getHeight() {
        return mSize.height();
    }"
27708,getWidth,"    public float getWidth() {
        return mSize.width();
    }"
27709,isVisible,"    public boolean isVisible() {
        return mVisible;
    }"
27710,setEnableBlend,"    public T setEnableBlend(boolean enableBlend) {
        this.mEnableBlend = enableBlend;
        return (T) this;
    }"
27711,setEnableDepthTest,"    public T setEnableDepthTest(boolean enableDepthTest) {
        this.mEnableDepthTest = enableDepthTest;
        return (T) this;
    }"
27712,setVisible,"    public T setVisible(boolean visible) {
        this.mVisible = visible;
        return (T) this;
    }"
27713,setShininess,"    public T setShininess(float shininess) {
        mShininess.value(shininess);
        return (T) this;
    }"
27714,getScene,"    public MagicScene getScene() {
        return mScene;
    }"
27715,setProgram,"    void setProgram(Program program) {
        mBody.setProgram(program);
        mShininess.setProgram(program);
        mIsCurrent.setProgram(program);
        for (GLParameter<Texture> t : mTextures) {
            t.setProgram(program);"
27716,runOnDraw,"    protected void runOnDraw() {
        super.runOnDraw();
        mEnable.runOnDraw();
        mColor.runOnDraw();
        mIsPointLight.runOnDraw();
    }"
27717,restore,"    void restore() {
        mEnable.refresh();
        mColor.refresh();
        mIsPointLight.refresh();
    }"
27718,isEnable,"    public boolean isEnable() {
        return mEnable.value();
    }"
27719,setEnable,"    public void setEnable(boolean enable) {
        this.mEnable.value(enable);
    }"
27720,getColor,"    public Vec getColor() {
        return mColor.value();
    }"
27721,setColor,"    public void setColor(float r, float g, float b, float a) {
        mColor.value().setRGBA(r, g, b, a);
        mColor.refresh();
    }"
27722,setColor,"    public void setColor(Vec color) {
        mColor.value().copy(color);
        mColor.refresh();
    }"
27723,setColor,"    public void setColor(int color) {
        mColor.value().setColor(color);
        mColor.refresh();
    }"
27724,setIndex,"    void setIndex(int index) {
        mEnable.name(String.format(""u_light%d_"", index));
        mColor.name(String.format(""u_l%d_color"", index));
        mIsPointLight.name(String.format(""u_l%d_is_point_light"", index));
    }"
27725,setProgram,"    void setProgram(Program program) {
        mIsPointLight.setProgram(program);
        mColor.setProgram(program);
        mEnable.setProgram(program);
    }"
27727,checkGlError,"    static void checkGlError(String op) {
        int error;
        while ((error = GLES20.glGetError()) != GLES20.GL_NO_ERROR) {
            throw new RuntimeException(op + "": glError "" + error);"
27728,loadShader,"    static int loadShader(int shaderType, String source) {
        int shader = GLES20.glCreateShader(shaderType);
        if (shader != 0) {
            GLES20.glShaderSource(shader, source);
            GLES20.glCompileShader(shader);"
27729,updateProgram,"    static void updateProgram(int program, String vertexSource, String fragmentSource) {
        int vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, vertexSource);
        if (vertexShader == 0) {
            return;
        }
        int pixelShader = loadShader(GLES20.GL_FRAGMENT_SHADER, fragmentSource);
        if (pixelShader == 0) {"
27730,createProgram,"    static int createProgram(String vertexSource, String fragmentSource) {
        int program = GLES20.glCreateProgram();
        updateProgram(program, vertexSource, fragmentSource);
        return program;
    }"
27731,updateTextureValue,"    private void updateTextureValue(Texture texture) {
        GLES20.glActiveTexture(texture.mIndex);
        GLUtil.checkGlError(""glActiveTexture"");
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, texture.mId);
        GLES20.glUniform1i(handle(), texture.mIndex - GLES20.GL_TEXTURE0);
    }"
27732,updateFloatValue,"    private void updateFloatValue(float... value) {
        switch (value.length) {
            case 1:"
27733,updateBooleanValue,"    private void updateBooleanValue(boolean value) {
        GLES20.glUniform1i(handle(), value ? 1 : 0);
    }"
27734,updateValue,"    protected void updateValue() {
        if (mValue instanceof Float) {
            updateFloatValue((Float) mValue);"
27735,handle,"    protected int handle() {
        if (mHandle == 0) {
            mHandle = GLES20.glGetUniformLocation(mProgram.handle, mName);
        }"
27738,refresh,"    void refresh() {
        if (mProgram != null && !mProgram.isDeleted() && mProgram.isGLThread()) {
            updateValue();"
27739,setProgram,"    void setProgram(Program program) {
        mProgram = program;
    }"
27740,value,"    GLParameter<T> value(T value) {
        mValue = value;
        refresh();
        return this;
    }"
27742,name,"    GLParameter<T> name(String name) {
        mName = name;
        return this;
    }"
27743,name,"    String name() {
        return mName;
    }"
27744,run,"        public void run() {
            updateValue();
        }"
27745,updateValue,"    protected void updateValue() {
        if (mValue == null) {
            return;
        }"
27746,runOnDraw,"    protected void runOnDraw() {
        updateValue();
    }"
27747,handle,"    protected int handle() {
        if (mHandle == 0) {
            mHandle = GLES20.glGetAttribLocation(mProgram.handle, mName);
        }"
27748,restore,"    public void restore() {
        super.restore();
        mDirection.refresh();
    }"
27749,runOnDraw,"    protected void runOnDraw() {
        super.runOnDraw();
        mDirection.runOnDraw();
    }"
27750,setIndex,"    void setIndex(int index) {
        super.setIndex(index);
        mDirection.name(String.format(""u_l%d_pos_or_dir"", index));
    }"
27751,setProgram,"    void setProgram(Program program) {
        super.setProgram(program);
        mDirection.setProgram(program);
    }"
27752,getDirection,"    public Vec getDirection() {
        return mDirection.value();
    }"
27753,setDirection,"    public void setDirection(Vec dir) {
        mDirection.value().copy(dir);
        mDirection.refresh();
    }"
27754,setDirection,"    public void setDirection(float x, float y, float z) {
        mDirection.value().setXYZ(x, y, z);
        mDirection.refresh();
    }"
27755,normalize,"    private void normalize(Vec normal) {
        float length = (float) Math.sqrt(Math.pow(normal.x(), 2) + Math.pow(normal.y(), 2) + Math.pow(normal.z(), 2));
        normal.setXYZ(
                normal.x() / length,"
27756,getNormal,"    private void getNormal(Vec vec1, Vec vec2, Vec out) {
        out.setXYZ(
                vec1.y() * vec2.z() - vec1.z() * vec2.y(),"
27757,getVec,"    private void getVec(float[] points, int start1, int start2, Vec out) {
        out.setXYZ(
                points[start2] - points[start1],"
27758,getNormal,"    private void getNormal(float[] points, int start1, int start2, int start3, Vec out) {
        ReusableVec vec1 = VecPool.get(3);
        ReusableVec vec2 = VecPool.get(3);
        getVec(points, start1, start2, vec1);
        getVec(points, start1, start3, vec2);
        getNormal(vec1, vec2, out);
        vec1.free();
        vec2.free();
    }"
27759,checkIndices,"    private boolean checkIndices(short index0, short index1, short index2) {
        return  index0 != index1 &&
                index0 != index2 &&"
27760,attachModelNormalData,"    private void attachModelNormalData(Vec surfaceNormal, int i) {
        for (int j = i; j < i + 3; ++j) {
            short index = mIndices[j];"
27761,setNormal,"    void setNormal(int i, float x, float y, float z) {
        mNormals[i * 3] = x;
        mNormals[i * 3 + 1] = y;
        mNormals[i * 3 + 2] = z;
    }"
27762,setColor,"    void setColor(int i, float r, float g, float b, float a) {
        mColors[i * 4] = r;
        mColors[i * 4 + 1] = g;
        mColors[i * 4 + 2] = b;
        mColors[i * 4 + 3] = a;
    }"
27763,setPosition,"    void setPosition(int i, float x, float y, float z) {
        mPositions[i * 3] = x;
        mPositions[i * 3 + 1] = y;
        mPositions[i * 3 + 2] = z;
    }"
27764,updateModelNormal,"    public void updateModelNormal() {
        if (mNormals == null) {
            mNormals = new float[mPositions.length];
        }
        ReusableVec surfaceNormal = VecPool.get(3);
        boolean normalState = false;
        for (int i = 0; i < mIndices.length - 2; ++i) {
            short index = mIndices[i];"
27765,prepareNormals,"    void prepareNormals() {
        try {
            mBufferLock.lock();"
27766,prepareColors,"    void prepareColors() {
        try {
            mBufferLock.lock();"
27767,preparePositions,"    void preparePositions() {
        try {
            mBufferLock.lock();"
27768,prepareIndices,"    void prepareIndices() {
        try {
            mBufferLock.lock();"
27769,drawModel,"    protected void drawModel() {
        GLES20.glDrawElements(GLES20.GL_TRIANGLE_STRIP, mIndices.length, GLES20.GL_UNSIGNED_SHORT, mIndicesBuffer);
    }"
27771,runOnDraw,"    void runOnDraw() {
        super.runOnDraw();
        mPositionsBuffer.runOnDraw();
        mNormalsBuffer.runOnDraw();
        mColorsBuffer.runOnDraw();
    }"
27772,getMatrix,"    float[] getMatrix() {
        return mMatrix;
    }"
27773,setProgram,"    void setProgram(Program program) {
        mPositionsBuffer.setProgram(program);
        mNormalsBuffer.setProgram(program);
        mColorsBuffer.setProgram(program);
    }"
27774,destroyCompleted,"    public void destroyCompleted() {
        dispatcher.dispatch(TodoActions.TODO_DESTROY_COMPLETED);
    }"
27775,toggleCompleteAll,"    public void toggleCompleteAll() {
        dispatcher.dispatch(TodoActions.TODO_TOGGLE_COMPLETE_ALL);
    }"
27776,toggleComplete,"    public void toggleComplete(Todo todo) {
        long id = todo.getId();
        String actionType = todo.isComplete() ? TodoActions.TODO_UNDO_COMPLETE : TodoActions.TODO_COMPLETE;

        dispatcher.dispatch("
27777,undoDestroy,"    public void undoDestroy() {
        dispatcher.dispatch(
                TodoActions.TODO_UNDO_DESTROY"
27778,destroy,"    public void destroy(long id) {
        dispatcher.dispatch(
                TodoActions.TODO_DESTROY,"
27779,create,"    public void create(String text) {
        dispatcher.dispatch(
                TodoActions.TODO_CREATE,"
27780,get,"    public static ActionsCreator get(Dispatcher dispatcher) {
        if (instance == null) {
            instance = new ActionsCreator(dispatcher);
        }"
27781,build,"        public Action build() {
            if (type == null || type.isEmpty()) {
                throw new IllegalArgumentException(""At least one key is required."");
            }"
27782,bundle,"        public Builder bundle(String key, Object value) {
            if (key == null) {
                throw new IllegalArgumentException(""Key may not be null."");
            }

            if (value == null) {"
27783,with,"        Builder with(String type) {
            if (type == null) {
                throw new IllegalArgumentException(""Type may not be null."");
            }
            this.type = type;
            this.data = new HashMap<>();"
27784,getData,"    public HashMap getData() {
        return data;
    }"
27786,type,"    public static Builder type(String type) {
        return new Builder().with(type);
    }"
27787,getComponentName,"    public String getComponentName() {
        return ""ProjectSettingsComponent"";
    }"
27788,disposeComponent,"    public void disposeComponent() {
        super.disposeComponent();
        this.controllerFactory = null;
    }"
27789,initComponent,"    public void initComponent() {
        super.initComponent();
        final IconApplication iconApplication = ApplicationManager.getApplication().getComponent(IconApplication.class);
        this.controllerFactory = iconApplication.getControllerFactory();
    }"
27790,projectOpened,"    public void projectOpened() {
        this.controllerFactory.setProject(myProject);
    }"
27791,getControllerFactory,"    public IControllerFactory getControllerFactory() {
        return controllerFactory;
    }"
27792,disposeComponent,"    public void disposeComponent() {
        controllerFactory.tearDown();
        controllerFactory = null;
    }"
27794,initComponent,"    public void initComponent() {
        IconPack androidIcons = null;
        IconPack materialIcons = null;
        try {
            final InputStream bundledIconPackPropertiesFile = ResourceLoader.getBundledResourceStream(""icon_packs.properties"");
            final Properties bundledIconPackProperties = new Properties();"
27795,getComponentName,"    public String getComponentName() {
        return getClass().getName();
    }"
27796,addData,"    public void addData(PictureTypeEntity entity) {
        mListData.add(entity);
"
27797,getItemCount,"    public int getItemCount() {
        return mListData.size();
    }"
27798,onBindViewHolder,"    public void onBindViewHolder(@NonNull Holder holder, int position) {
        holder.textView.setText(mListData.get(position).typeName);
    }"
27799,onCreateViewHolder,"    public Holder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = mLayoutInflater.inflate(android.R.layout.simple_list_item_1, parent, false);
        TextView textView = view.findViewById(android.R.id.text1);
        textView.setTextColor(Color.BLACK);
        textView.setGravity(Gravity.CENTER);
        Holder holder = new Holder(textView);
        return holder;
    }"
27800,removeRunnable,"    private void removeRunnable() {
        if (handler != null) {
            handler.removeCallbacks(runnable);
        }
        handler = null;"
27801,convert,"            protected void convert(BaseViewHolder helper, FunItem item) {
                helper.setText(android.R.id.text1, item.name());
            }"
27804,onPageSelected,"                            public void onPageSelected(Context context, ImageView imageView, String url, int position) {
                                Glide.with(context).load(url).into(imageView);
                            }"
27807,convert,"                    protected void convert(BaseViewHolder helper, MySectionEntity item) {
                        TextView textView = helper.getView(android.R.id.text1);
                        textView.setText(item.t.typeName);
                        textView.setTextColor(Color.BLACK);
                        textView.setGravity(Gravity.CENTER);
                    }"
27808,convertHead,"                    protected void convertHead(BaseViewHolder helper, MySectionEntity item) {
                        helper.setText(R.id.textView2, item.header)
                                .setTextColor(R.id.textView2, Color.BLACK);"
27809,getSpanSize,"                    public int getSpanSize(int position) {
                        return 2;
                    }"
27811,onTimerFinish,"                            public void onTimerFinish() {
                                Toast.makeText(MainActivity.this, ""onTimerFinish"", Toast.LENGTH_SHORT).show();
                            }"
27812,onClick,"                            public boolean onClick(View v) {
                                dialogFragment.dialogDismiss();
                                return true;
                            }"
27813,onConfig,"                            public void onConfig(ProgressParams params) {
                                params.indeterminateColor = Color.parseColor(""#E9AD44"");
                            }"
27814,run,"                    public void run() {
                        progress++;
                        if (progress >= max) {
                            MainActivity.this.runOnUiThread(() -> {"
27815,onItemClick,"    public void onItemClick(BaseQuickAdapter adapter, View view, int position) {
        FunItem funItem = (FunItem) adapter.getItem(position);
        switch (funItem) {
            case fragment:"
27816,onResponse,"                public void onResponse(@NotNull Call call, @NotNull Response response) {
                    if (circleDialog != null) {
                        circleDialog.dismiss();
                    }"
27817,onFailure,"                public void onFailure(@NotNull Call call, @NotNull IOException e) {
                    if (circleDialog != null) {
                        circleDialog.dismiss();
                    }"
27819,onViewCreated,"        public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
            super.onViewCreated(view, savedInstanceState);
            textView = view.findViewById(R.id.textView);
            view.findViewById(R.id.button).setOnClickListener(v -> {
                circleDialog = new CircleDialog.Builder()"
27821,onCreate,"        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
        }"
27822,newInstance,"        public static BlankFragment newInstance() {
            BlankFragment fragment = new BlankFragment();
            Bundle args = new Bundle();
            fragment.setArguments(args);
            return fragment;
        }"
27823,onCreate,"    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.aty_fgt);
    }"
27825,onActivityCreated,"    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        View view = getView();
        view.findViewById(R.id.but_cancle).setOnClickListener(this);
        view.findViewById(R.id.logout_ok).setOnClickListener(this);
        view.findViewById(R.id.logout_cancel).setOnClickListener(this);
    }"
27826,createView,"    public View createView(Context context, LayoutInflater inflater, ViewGroup container) {
        return inflater.inflate(R.layout.dialog_logout, container, false);
    }"
27827,getInstance,"    public static DialogLogout getInstance() {
        DialogLogout dialogFragment = new DialogLogout();
        dialogFragment.setCancelable(false);
        dialogFragment.setCanceledOnTouchOutside(false);
        dialogFragment.bottomFull();
        return dialogFragment;
    }"
27828,createView,"    public View createView(Context context, LayoutInflater inflater, ViewGroup container) {
        return inflater.inflate(R.layout.dialog_login, container, false);
    }"
27829,getInstance,"    public static DialogLogin getInstance() {
        DialogLogin dialogFragment = new DialogLogin();
        dialogFragment.setRadius(10);
        dialogFragment.setBackgroundColor(CircleColor.DIALOG_BACKGROUND);
        return dialogFragment;
    }"
27832,updateMessageDigest,"    public void updateMessageDigest(MessageDigest messageDigest, int len) throws IOException {
        int data;
        int bytesRead = 0;
        while (bytesRead < len && (data = read()) != -1) {
            messageDigest.update((byte) data);"
27833,updateMessageDigest,"    public void updateMessageDigest(MessageDigest messageDigest) throws IOException {
        int data;
        while ((data = read()) != -1) {
            messageDigest.update((byte) data);"
27834,toString,"    public String toString() {
        return mBuffer.toString();
    }"
27837,append,"    public Writer append(char c) {
        mBuffer.append(c);
        return this;
    }"
27838,append,"    public Writer append(CharSequence csq, int start, int end) {
        CharSequence cs = (csq == null ? ""null"" : csq);
        write(cs.subSequence(start, end).toString());
        return this;
    }"
27839,append,"    public Writer append(CharSequence csq) {
        if (csq == null) {
            write(""null"");
        } else {"
27840,write,"    public void write(String str, int off, int len) {
        mBuffer.append(str, off, off + len);
    }"
27841,write,"    public void write(String str) {
        mBuffer.append(str);
    }"
27842,write,"    public void write(char[] cs, int off, int len) throws IOException {
        if ((off < 0) || (off > cs.length) || (len < 0) ||
            ((off + len) > cs.length) || ((off + len) < 0)) {
            throw new IndexOutOfBoundsException();"
27843,write,"    public void write(char[] cs) throws IOException {
        mBuffer.append(cs, 0, cs.length);
    }"
27844,write,"    public void write(int c) {
        mBuffer.append((char) c);
    }"
27845,toParameterizedType,"    public static ParameterizedType toParameterizedType(Type type) {
        ParameterizedType result = null;
        if (type instanceof ParameterizedType) {
            result = (ParameterizedType) type;
        } else if (type instanceof Class) {"
27846,getClass,"    public static Class<?> getClass(Type type) {
        if (null != type) {
            if (type instanceof Class) {
                return (Class<?>) type;"
27847,getTypeArguments,"    public static Type[] getTypeArguments(Type type) {
        if (null == type) {
            return null;
        }
"
27848,getTypeArgument,"    public static Type getTypeArgument(Type type, int index) {
        final Type[] typeArguments = getTypeArguments(type);
        if (null != typeArguments && typeArguments.length > index) {
            return typeArguments[index];
        }"
27849,getTypeArgument,"    public static Type getTypeArgument(Type type) {
        return getTypeArgument(type, 0);
    }"
27850,isUnknow,"    public static boolean isUnknow(Type type) {
        return null == type || type instanceof TypeVariable;
    }"
27851,flattenHierarchy,"    public static Set<Class<?>> flattenHierarchy(Class<?> concreteClass) {
        Set<Class<?>> classes = new HashSet<>();
        classes.add(concreteClass);
        while (concreteClass != null && !concreteClass.equals(Object.class)) {
            Class<?>[] interfaces = concreteClass.getInterfaces();
            if (interfaces != null) {"
27852,getDeclaredFields,"    public static List<Field> getDeclaredFields(Class clazz) {
        if (clazz == null) {
            throw new IllegalArgumentException(""clazz param can not be null"");
        }
        List<Class> classes = new ArrayList<>();
        while (clazz != null && clazz != Object.class) {
            classes.add(clazz);
            clazz = clazz.getSuperclass();"
27855,findActualTypeArguments,"    public static List<Type> findActualTypeArguments(Type type) {
        List<Type> list = new ArrayList();
        if (type instanceof ParameterizedType) {
            Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();
            for (Type actualTypeArgument : actualTypeArguments) {"
27856,findTargetInterfaceRecursive,"    public static ParameterizedType findTargetInterfaceRecursive(Class source, Class target) {
        while (source != null && !source.equals(Object.class)) {
            ParameterizedType directTargetInterface = findDirectTargetInterface(source, target);
            if (directTargetInterface != null) {"
27858,getGenericParamType,"    public static List<Type> getGenericParamType(Class source, Class target) {
        Type directTargetInterface = findDirectTargetInterface(source, target);
        if (directTargetInterface != null) {
            return findActualTypeArguments(directTargetInterface);"
27859,toString,"    public String toString() {
        return this.type.toString();
    }"
27860,getType,"    public Type getType() {
        return this.type;
    }"
27861,toPendingString,"        String toPendingString() {
            return callable.toString();
        }"
27862,afterRanInterruptibly,"        void afterRanInterruptibly(V result, Throwable error) {
            if (error == null) {
                TrustedListenableFutureTask.this.set(result);"
27863,runInterruptibly,"        V runInterruptibly() throws Exception {
            return callable.call();
        }"
27864,isDone,"        final boolean isDone() {
            return TrustedListenableFutureTask.this.isDone();
        }"
27865,pendingToString,"    protected String pendingToString() {
        InterruptibleTask localTask = task;
        if (localTask != null) {
            return ""task=["" + localTask + ""]"";
        }"
27866,afterDone,"    protected void afterDone() {
        super.afterDone();

        if (wasInterrupted()) {
            InterruptibleTask localTask = task;"
27867,run,"    public void run() {
        InterruptibleTask localTask = task;
        if (localTask != null) {
            localTask.run();
        }"
27868,create,"    static <V> TrustedListenableFutureTask<V> create(Runnable runnable, V result) {
        return new TrustedListenableFutureTask<V>(Executors.callable(runnable, result));
    }"
27869,create,"    static <V> TrustedListenableFutureTask<V> create(Callable<V> callable) {
        return new TrustedListenableFutureTask<V>(callable);
    }"
27870,afterDone,"    protected void afterDone() {
        maybePropagateCancellationTo(delegateRef);

        Future<?> localTimer = timer;
        if (localTimer != null) {
            localTimer.cancel(false);
        }"
27871,pendingToString,"    protected String pendingToString() {
        ListenableFuture<? extends V> localInputFuture = delegateRef;
        ScheduledFuture<?> localTimer = timer;
        if (localInputFuture != null) {
            String message = ""inputFuture=["" + localInputFuture + ""]"";
            if (localTimer != null) {"
27872,fillInStackTrace,"        public synchronized Throwable fillInStackTrace() {
            setStackTrace(new StackTraceElement[0]);
            return this;
        }"
27874,create,"    public static <V> ListenableFuture<V> create(
            ListenableFuture<V> delegate,
            long time,
            TimeUnit unit,
            ScheduledExecutorService scheduledExecutor) {
        TimeoutFuture<V> result = new TimeoutFuture<>(delegate);
        Fire<V> fire = new Fire<>(result);"
27875,execute,"    static void execute(ThrowableAction action) throws RuntimeException {
        try {
            action.execute();"
27877,createThreadFactory,"    private static ThreadFactory createThreadFactory(String name) {
        return new NamedThreadFactory(""AGEI-"" + name, false, (t, e) -> LOGGER.error(t.getName() + "" e"", e));
    }"
27878,scheduledExecutorService,"    public static ScheduledExecutorService scheduledExecutorService() {
        return executor;
    }"
27879,createExecutor,"    public static ExecutorService createExecutor(String name,
                                                 int corePoolSize,
                                                 int maxPoolSize,
                                                 BlockingQueue<Runnable> workQueue) {"
27881,parseFromInstant,"    private TemporalAccessor parseFromInstant(Instant instant, ZoneId zoneId) {
        if (Instant.class.equals(this.targetType)) {
            return instant;
        }
        zoneId = zoneId == null ? ZoneId.systemDefault() : zoneId;

        TemporalAccessor result = null;"
27882,parseFromZonedDateTime,"    private TemporalAccessor parseFromZonedDateTime(ZonedDateTime zonedDateTime) {
        if (Instant.class.equals(this.targetType)) {
            return DateUtils.toInstant(zonedDateTime);
        }
        if (LocalDateTime.class.equals(this.targetType)) {
            return zonedDateTime.toLocalDateTime();
        }
        if (LocalDate.class.equals(this.targetType)) {
            return zonedDateTime.toLocalDate();"
27883,parseFromLocalDateTime,"    private TemporalAccessor parseFromLocalDateTime(LocalDateTime localDateTime) {
        if (Instant.class.equals(this.targetType)) {
            return DateUtils.toInstant(localDateTime);
        }
        if (LocalDate.class.equals(this.targetType)) {
            return localDateTime.toLocalDate();
        }
        if (LocalTime.class.equals(this.targetType)) {
            return localDateTime.toLocalTime();"
27884,parseFromTemporalAccessor,"    private TemporalAccessor parseFromTemporalAccessor(TemporalAccessor temporalAccessor) {
        TemporalAccessor result = null;
        if (temporalAccessor instanceof LocalDateTime) {
            result = parseFromLocalDateTime((LocalDateTime) temporalAccessor);
        } else if (temporalAccessor instanceof ZonedDateTime) {
            result = parseFromZonedDateTime((ZonedDateTime) temporalAccessor);"
27885,parseFromLong,"    private TemporalAccessor parseFromLong(Long time) {
        return parseFromInstant(Instant.ofEpochMilli(time), null);
    }"
27886,parseFromCharSequence,"    private TemporalAccessor parseFromCharSequence(CharSequence value) {
        final Instant instant;
        ZoneId zoneId;
        if (null != this.format) {
            final DateTimeFormatter formatter = DateTimeFormatter.ofPattern(this.format);
            instant = formatter.parse(value, Instant::from);"
27887,convertInternal,"    protected TemporalAccessor convertInternal(Object value) {
        if (value instanceof Long) {
            return parseFromLong((Long) value);"
27888,setFormat,"    public void setFormat(String format) {
        this.format = format;
    }"
27890,isNew,"    public static Boolean isNew(String code) {
        return NEW.code.equals(code);
    }"
27891,isFinalStatus,"    public static Boolean isFinalStatus(String code) {
        return isFinished(code) || isError(code);
    }"
27892,isError,"    public static Boolean isError(String code) {
        return ERROR.code.equals(code);
    }"
27893,isFinished,"    public static Boolean isFinished(String code) {
        return FINISHED.code.equals(code);
    }"
27894,of,"    public static TaskStatus of(String code) {
        if (code == null) {
            return null;
        }"
27897,of,"    public static TaskSpecificationStatus of(String code) {
        if (code == null) {
            return null;
        }"
27900,getMainTaskId,"    public static String getMainTaskId(String subTaskId) {
        int endIndex = subTaskId.lastIndexOf(""_"");
        return subTaskId.substring(0, endIndex);
    }"
27901,genSubTaskId,"    public static String genSubTaskId(String mainTaskId, Integer subTaskNo) {
        return mainTaskId + ""_"" + subTaskNo;
    }"
27902,genMainTaskId,"    public static String genMainTaskId() {
        String date = DateUtils.format(new Date(), DateUtils.PURE_DATETIME_FORMAT);
        String uuid = UUID.randomUUID().toString();
        return date + ""-"" + uuid.split(""-"")[0];
    }"
27907,of,"    public static SubTaskStatus of(String code) {
        if (code == null) {
            return null;
        }"
27910,format,"    void format() {
        logger.info(StringUtils.format(""{},{}"", 1, 2));
        logger.info((StringUtils.format(""{},{}"", ArrayUtils.of(1, 2))));
    }"
27911,lenientToString,"    private static String lenientToString(Object o) {
        try {
            return String.valueOf(o);"
27913,padMiddle,"    public static String padMiddle(int maxLength, String start, String end, char padChar) {
        int leftLength = start.length();
        int rightLength = end.length();
        int textLength = leftLength + rightLength;
        if (maxLength <= textLength) {
            return start + end;
        }
        int padLength = maxLength - rightLength;"
27914,padEnd,"    public static String padEnd(String string, int minLength, char padChar) {
        if (string == null) {
            throw new UtilException(""string is null"");
        }

        if (string.length() >= minLength) {
            return string;
        }"
27915,padStart,"    public static String padStart(String string, int minLength, char padChar) {
        if (string == null) {
            throw new UtilException(""string is null"");
        }

        if (string.length() >= minLength) {
            return string;
        }"
27916,removeAll,"    public static String removeAll(CharSequence str, char... chars) {
        if (null == str || ArrayUtils.isEmpty(chars)) {
            return str(str);
        }
        final int len = str.length();
        if (0 == len) {
            return str(str);
        }
        final StringBuilder builder = new StringBuilder(len);"
27917,startWith,"    public static boolean startWith(CharSequence str, CharSequence prefix, boolean isIgnoreCase) {
        if (null == str || null == prefix) {
            return null == str && null == prefix;
        }"
27918,startWithIgnoreCase,"    public static boolean startWithIgnoreCase(CharSequence str, CharSequence prefix) {
        return startWith(str, prefix, true);
    }"
27919,endsWith,"    private static boolean endsWith(final CharSequence str, final CharSequence suffix, final boolean ignoreCase) {
        if (null == str || null == suffix) {
            return null == str && null == suffix;
        }"
27920,endsWithIgnoreCase,"    public static boolean endsWithIgnoreCase(final CharSequence str, final CharSequence suffix) {
        return endsWith(str, suffix, true);
    }"
27921,subBefore,"    public static String subBefore(CharSequence string, char separator, boolean isLastSeparator) {
        if (isEmpty(string)) {
            return null == string ? null : string.toString();
        }

        final String str = string.toString();
        final int pos = isLastSeparator ? str.lastIndexOf(separator) : str.indexOf(separator);
        if (INDEX_NOT_FOUND == pos) {"
27922,stripAll,"    public static String[] stripAll(String[] strs, String stripChars) {
        int strsLen;
        if (strs == null || (strsLen = strs.length) == 0) {
            return strs;
        }
        String[] newArr = new String[strsLen];
        for (int i = 0; i < strsLen; i++) {"
27923,stripAll,"    public static String[] stripAll(String[] strs) {
        return stripAll(strs, null);
    }"
27924,stripEnd,"    public static String stripEnd(String str, String stripChars) {
        int end;
        if (str == null || (end = str.length()) == 0) {
            return str;
        }
"
27925,stripStart,"    public static String stripStart(String str, String stripChars) {
        int strLen;
        if (str == null || (strLen = str.length()) == 0) {
            return str;
        }
        int start = 0;
        if (stripChars == null) {"
27926,strip,"    public static String strip(String str, String stripChars) {
        if (isEmpty(str)) {
            return str;
        }
        str = stripStart(str, stripChars);"
27927,stripToEmpty,"    public static String stripToEmpty(String str) {
        return str == null ? EMPTY : strip(str, null);
    }"
27928,stripToNull,"    public static String stripToNull(String str) {
        if (str == null) {
            return null;
        }
        str = strip(str, null);"
27929,strip,"    public static String strip(String str) {
        return strip(str, null);
    }"
27930,trimToEmpty,"    public static String trimToEmpty(String str) {
        return str == null ? EMPTY : str.trim();
    }"
27931,trimToNull,"    public static String trimToNull(String str) {
        String ts = trim(str);
        return isEmpty(ts) ? null : ts;
    }"
27933,trim,"    public static String trim(CharSequence str) {
        return (null == str) ? null : trim(str, 0);
    }"
27934,camelToSplitName,"    public static String camelToSplitName(String camelName, String split) {
        if (isEmpty(camelName)) {
            return camelName;
        }
        StringBuilder buf = null;
        for (int i = 0; i < camelName.length(); i++) {"
27935,toString,"    public static String toString(Throwable e) {
        UnsafeStringWriter w = new UnsafeStringWriter();
        PrintWriter p = new PrintWriter(w);
        p.print(e.getClass().getName());
        if (e.getMessage() != null) {
            p.print("": "" + e.getMessage());
        }
        p.println();"
27936,contains,"    public static boolean contains(CharSequence str1, CharSequence str2) {
        if (null == str1 || null == str2) {
            return false;
        }"
27938,str,"    public static String str(CharSequence cs) {
        return null == cs ? null : cs.toString();
    }"
27939,sub,"    public static String sub(CharSequence str, int fromIndex, int toIndex) {
        if (isEmpty(str)) {
            return str(str);
        }
        int len = str.length();

        if (fromIndex < 0) {
            fromIndex = len + fromIndex;
            if (fromIndex < 0) {"
27940,subPre,"    public static String subPre(CharSequence string, int toIndex) {
        return sub(string, 0, toIndex);
    }"
27941,toJsonStr,"    private static String toJsonStr(Object obj) {
        if (obj instanceof String) {
            return (String) obj;
        }"
27943,isBlank,"    public static boolean isBlank(CharSequence cs) {
        int strLen;
        if (cs != null && (strLen = cs.length()) != 0) {
            for (int i = 0; i < strLen; ++i) {"
27944,isNotBlank,"    public static boolean isNotBlank(CharSequence cs) {
        return !isBlank(cs);
    }"
27945,isEmpty,"    public static boolean isEmpty(CharSequence str) {
        return str == null || str.length() == 0;
    }"
27946,isNotEmpty,"    public static boolean isNotEmpty(CharSequence str) {
        return !isEmpty(str);
    }"
27947,convertInternal,"    protected String convertInternal(Object value) {
        return convertToStr(value);
    }"
27948,isSuccessAndPageNotEmpty,"    public boolean isSuccessAndPageNotEmpty() {
        Page page = (Page) data;
        return success && !page.isEmpty();
    }"
27949,isSuccessAndNotNull,"    public boolean isSuccessAndNotNull() {
        return success && data != null;
    }"
27950,faled,"    public static <T> Result<T> faled(String code, String msg, T data) {
        Result<T> result = new Result<T>(false);
        result.setCode(code);
        result.setMsg(msg);
        result.setData(data);
        return result;
    }"
27951,faled,"    public static <T> Result<T> faled(String code, String msg) {
        Result<T> result = new Result<T>(false);
        result.setCode(code);
        result.setMsg(msg);
        return result;
    }"
27952,faled,"    public static <T> Result<T> faled(Throwable e) {
        Result<T> result = new Result<T>(false);
        if (e instanceof AbstractStandardException) {
            result.setCode(((AbstractStandardException) e).getCode());
            result.setMsg(StringUtils.isBlank(e.getMessage()) ? ""no message"" : e.getMessage());"
27953,faled,"    public static <T> Result<T> faled(Throwable e, T data) {
        Result<T> faled = faled(e);
        faled.setData(data);
        return faled;
    }"
27954,success,"    public static <T> Result<T> success(T data) {
        Result<T> result = new Result<>(true);
        result.setData(data);
        return result;
    }"
27955,setAccessible,"    public static <T extends AccessibleObject> T setAccessible(T accessibleObject) {
        if (null != accessibleObject && false == accessibleObject.isAccessible()) {
            accessibleObject.setAccessible(true);
        }"
27956,newInstanceIfPossible,"    public static <T> T newInstanceIfPossible(Class<T> beanClass) {
        if (beanClass == null) {
            throw new NullPointerException(""beanClass is null"");
        }

        try {
            return newInstance(beanClass);
        } catch (Throwable e) {"
27957,newInstance,"    public static <T> T newInstance(Class<T> clazz, Object... params) throws UtilException {
        if (ArrayUtils.isEmpty(params)) {
            final Constructor<T> constructor = getConstructor(clazz);
            try {
                return constructor.newInstance();
            } catch (Throwable e) {
                throw new UtilException(StringUtils.format(""Instance class [{}] error!"", clazz), e);"
27958,newInstance,"    public static <T> T newInstance(String clazz) throws UtilException {
        try {
            return (T) Class.forName(clazz).newInstance();"
27959,getMethodsDirectly,"    public static Method[] getMethodsDirectly(Class<?> beanClass, boolean withSuperClassMethods) throws SecurityException {
        if (beanClass == null) {
            throw new UtilException(""beanClass is null"");
        }

        Method[] allMethods = null;
        Class<?> searchType = beanClass;
        Method[] declaredMethods;"
27960,getMethods,"    public static Method[] getMethods(Class<?> beanClass) throws SecurityException {
        Method[] allMethods = METHODS_CACHE.get(beanClass);
        if (null != allMethods) {
            return allMethods;
        }
"
27961,getMethods,"    public static Method[] getMethods(Class<?> clazz, Filter<Method> filter) throws SecurityException {
        if (null == clazz) {
            return null;
        }"
27962,getMethodNames,"    public static Set<String> getMethodNames(Class<?> clazz) throws SecurityException {
        final HashSet<String> methodSet = new HashSet<>();
        final Method[] methods = getMethods(clazz);
        for (Method method : methods) {
            methodSet.add(method.getName());
        }"
27963,getMethod,"    public static Method getMethod(Class<?> clazz, boolean ignoreCase, String methodName, Class<?>... paramTypes) throws SecurityException {
        if (null == clazz || StringUtils.isBlank(methodName)) {
            return null;
        }

        final Method[] methods = getMethods(clazz);"
27964,getMethod,"    public static Method getMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) throws SecurityException {
        return getMethod(clazz, false, methodName, paramTypes);
    }"
27965,getMethodIgnoreCase,"    public static Method getMethodIgnoreCase(Class<?> clazz, String methodName, Class<?>... paramTypes) throws SecurityException {
        return getMethod(clazz, true, methodName, paramTypes);
    }"
27966,getMethodOfObj,"    public static Method getMethodOfObj(Object obj, String methodName, Object... args) throws SecurityException {
        if (null == obj || StringUtils.isBlank(methodName)) {
            return null;
        }"
27967,getPublicMethod,"    public static Method getPublicMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) throws SecurityException {
        try {
            return clazz.getMethod(methodName, paramTypes);"
27968,getPublicMethods,"    public static List<Method> getPublicMethods(Class<?> clazz, String... excludeMethodNames) {
        final HashSet<String> excludeMethodNameSet = CollectionUtils.newHashSet(excludeMethodNames);
        return getPublicMethods(clazz, method -> !excludeMethodNameSet.contains(method.getName()));
    }"
27969,getPublicMethods,"    public static List<Method> getPublicMethods(Class<?> clazz, Method... excludeMethods) {
        final HashSet<Method> excludeMethodSet = CollectionUtils.newHashSet(excludeMethods);
        return getPublicMethods(clazz, method -> !excludeMethodSet.contains(method));
    }"
27970,getPublicMethods,"    public static List<Method> getPublicMethods(Class<?> clazz, Filter<Method> filter) {
        if (null == clazz) {
            return null;
        }

        final Method[] methods = getPublicMethods(clazz);
        List<Method> methodList;"
27971,getPublicMethods,"    public static Method[] getPublicMethods(Class<?> clazz) {
        return null == clazz ? null : clazz.getMethods();
    }"
27972,getPublicMethodNames,"    public static Set<String> getPublicMethodNames(Class<?> clazz) {
        final HashSet<String> methodSet = new HashSet<>();
        final Method[] methodArray = getPublicMethods(clazz);
        if (ArrayUtils.isNotEmpty(methodArray)) {
            for (Method method : methodArray) {
                methodSet.add(method.getName());"
27973,setFieldValue,"    public static void setFieldValue(Object obj, Field field, Object value) throws UtilException {
        if (field == null) {
            throw new UtilException(""field is null"");
        }

        final Class<?> fieldType = field.getType();
        if (null != value) {"
27974,getConstructorsDirectly,"    public static Constructor<?>[] getConstructorsDirectly(Class<?> beanClass) throws SecurityException {
        if (beanClass == null) {
            throw new UtilException(""beanClass is null"");
        }"
27975,getConstructors,"    public static <T> Constructor<T>[] getConstructors(Class<T> beanClass) throws SecurityException {
        if (beanClass == null) {
            throw new UtilException(""beanClass is null"");
        }
        Constructor<?>[] constructors = CONSTRUCTORS_CACHE.get(beanClass);
        if (null != constructors) {
            return (Constructor<T>[]) constructors;"
27976,getConstructor,"    public static <T> Constructor<T> getConstructor(Class<T> clazz, Class<?>... parameterTypes) {
        if (null == clazz) {
            return null;
        }

        final Constructor<?>[] constructors = getConstructors(clazz);
        Class<?>[] pts;"
27977,isPrimitive,"    public static boolean isPrimitive(Class<?> cls) {
        return cls.isPrimitive() || cls == String.class || cls == Boolean.class || cls == Character.class
                || Number.class.isAssignableFrom(cls) || Date.class.isAssignableFrom(cls);"
27978,isPrimitives,"    public static boolean isPrimitives(Class<?> cls) {
        if (cls.isArray()) {
            return isPrimitive(cls.getComponentType());
        }"
27979,compareTo,"    default int compareTo(Prioritized that) {
        return compare(this.getPriority(), that.getPriority());
    }"
27980,getPriority,"    default int getPriority() {
        return NORMAL_PRIORITY;
    }"
27981,getTargetType,"    public Class<Object> getTargetType() {
        return (Class<Object>) this.targetType;
    }"
27982,convertToStr,"    protected String convertToStr(Object value) {
        return StringUtils.trim(super.convertToStr(value));
    }"
27983,convertInternal,"    protected Object convertInternal(Object value) {
        try {
            if (byte.class == this.targetType) {
                if (value instanceof Number) {"
27984,test,"    default boolean test(T input) {
        return apply(input);
    }"
27987,getRowOffset,"    public Integer getRowOffset() {
        return (pageIndex - 1) * pageSize;
    }"
27988,isEmpty,"    public boolean isEmpty() {
        return rows == null || rows.isEmpty();
    }"
27989,build,"    public static <T> Page<T> build(PageQuery query, Long totalItem, List<T> rows) {
        return new Page<T>()
                .setPageSize(query.getPageSize())"
27990,empty,"    public static <T> Page<T> empty(PageQuery query) {
        return new Page<T>()
                .setPageSize(query.getPageSize())"
27991,getTotalPage,"    public Integer getTotalPage() {
        return (int) (this.totalItem / (this.pageSize) + (this.totalItem % (this.pageSize) == 0 ? 0 : 1));
    }"
27995,createBigDecimal,"    public static BigDecimal createBigDecimal(String str) {
        if (str == null) {
            return null;"
27996,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(String value, int scale, RoundingMode roundingMode) {
        return value == null ? BigDecimal.ZERO : toScaledBigDecimal(createBigDecimal(value), scale, roundingMode);
    }"
27997,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(String value) {
        return toScaledBigDecimal(value, INTEGER_TWO, RoundingMode.HALF_EVEN);
    }"
27998,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(Double value, int scale, RoundingMode roundingMode) {
        return value == null ? BigDecimal.ZERO : toScaledBigDecimal(BigDecimal.valueOf(value), scale, roundingMode);
    }"
27999,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(Double value) {
        return toScaledBigDecimal(value, INTEGER_TWO, RoundingMode.HALF_EVEN);
    }"
28000,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(Float value, int scale, RoundingMode roundingMode) {
        return value == null ? BigDecimal.ZERO : toScaledBigDecimal(BigDecimal.valueOf((double) value), scale,
            roundingMode);"
28001,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(Float value) {
        return toScaledBigDecimal(value, INTEGER_TWO, RoundingMode.HALF_EVEN);
    }"
28002,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(BigDecimal value, int scale, RoundingMode roundingMode) {
        return value == null ? BigDecimal.ZERO : value.setScale(scale,
            roundingMode == null ? RoundingMode.HALF_EVEN : roundingMode);"
28003,toScaledBigDecimal,"    public static BigDecimal toScaledBigDecimal(BigDecimal value) {
        return toScaledBigDecimal(value, INTEGER_TWO, RoundingMode.HALF_EVEN);
    }"
28004,toShort,"    public static short toShort(String str, short defaultValue) {
        if (str == null) {
            return defaultValue;"
28005,toShort,"    public static short toShort(String str) {
        return toShort(str, (short) 0);
    }"
28006,toByte,"    public static byte toByte(String str, byte defaultValue) {
        if (str == null) {
            return defaultValue;"
28007,toByte,"    public static byte toByte(String str) {
        return toByte(str, (byte) 0);
    }"
28008,toDouble,"    public static double toDouble(BigDecimal value, double defaultValue) {
        return value == null ? defaultValue : value.doubleValue();
    }"
28009,toDouble,"    public static double toDouble(BigDecimal value) {
        return toDouble(value, 0.0D);
    }"
28010,toDouble,"    public static double toDouble(String str, double defaultValue) {
        if (str == null) {
            return defaultValue;"
28011,toDouble,"    public static double toDouble(String str) {
        return toDouble(str, 0.0D);
    }"
28012,toFloat,"    public static float toFloat(String str, float defaultValue) {
        if (str == null) {
            return defaultValue;"
28013,toFloat,"    public static float toFloat(String str) {
        return toFloat(str, 0.0F);
    }"
28014,toLong,"    public static long toLong(String str, long defaultValue) {
        if (str == null) {
            return defaultValue;"
28015,toLong,"    public static long toLong(String str) {
        return toLong(str, 0L);
    }"
28016,toInt,"    public static int toInt(String str, int defaultValue) {
        if (str == null) {
            return defaultValue;"
28017,toInt,"    public static int toInt(String str) {
        return toInt(str, 0);
    }"
28018,isDecimal,"    public static boolean isDecimal(Object cs) {
        if (cs == null || cs.toString().length() == 0) {
            return false;"
28020,parseNumber,"    public static Number parseNumber(String numberStr) {
        numberStr = removeNumberFlag(numberStr);
        try {
            return NumberFormat.getInstance().parse(numberStr);"
28022,getTargetType,"    public Class<Number> getTargetType() {
        return (Class<Number>) this.targetType;
    }"
28024,toBigInteger,"    private BigInteger toBigInteger(Object value) {
        if (value instanceof Long) {
            return BigInteger.valueOf((Long) value);
        } else if (value instanceof Boolean) {
            return BigInteger.valueOf((boolean) value ? 1 : 0);
        }"
28025,toBigDecimal,"    private BigDecimal toBigDecimal(Object value) {
        if (value instanceof Long) {
            return new BigDecimal((Long) value);
        } else if (value instanceof Integer) {
            return new BigDecimal((Integer) value);
        } else if (value instanceof BigInteger) {"
28026,convertInternal,"    protected Number convertInternal(Object value) {
        final Class<?> targetType = this.targetType;
        if (Byte.class == targetType) {
            if (value instanceof Number) {
                return ((Number) value).byteValue();"
28027,getLogger,"    public Logger getLogger(String name) {
        return new NopLogger(name);
    }"
28028,error,"    public void error(String message, Object... args) {
        System.out.println(getFixPrefix(ERROR) + StringUtils.format(message, args));
    }"
28029,error,"    public void error(Throwable t) {
        System.out.println(getFixPrefix(ERROR));
        System.out.println(ExceptionUtils.stackOf(t));
    }"
28030,error,"    public void error(String message) {
        System.out.println(getFixPrefix(ERROR) + message);
    }"
28031,error,"    public void error(String message, Throwable t) {
        System.out.println(getFixPrefix(ERROR) + message);
        System.out.println(ExceptionUtils.stackOf(t));
    }"
28032,warn,"    public void warn(String message, Object... args) {
        System.out.println(getFixPrefix(WARN) + StringUtils.format(message, args));
    }"
28033,warn,"    public void warn(String message) {
        System.out.println(getFixPrefix(WARN) + message);
    }"
28034,warn,"    public void warn(String message, Throwable t) {
        System.out.println(getFixPrefix(WARN) + message);
        System.out.println(ExceptionUtils.stackOf(t));
    }"
28035,info,"    public void info(String message, Object... args) {
        System.out.println(getFixPrefix(INFO) + StringUtils.format(message, args));
    }"
28036,info,"    public void info(String message) {
        System.out.println(getFixPrefix(INFO) + message);
    }"
28037,info,"    public void info(String message, Throwable t) {
        System.out.println(getFixPrefix(INFO) + message);
        System.out.println(ExceptionUtils.stackOf(t));
    }"
28038,debug,"    public void debug(String message, Object... args) {
        System.out.println(getFixPrefix(DEBUG) + StringUtils.format(message, args));
    }"
28039,debug,"    public void debug(String message) {
        System.out.println(getFixPrefix(DEBUG) + message);
    }"
28040,debug,"    public void debug(String message, Throwable t) {
        System.out.println(getFixPrefix(DEBUG) + message);
        System.out.println(ExceptionUtils.stackOf(t));
    }"
28041,getFixPrefix,"    private String getFixPrefix(String tag) {
        return ""NopLogger "" + tag + "" - "" + name + "" - "" + new Date() + "" - "";
    }"
28042,isPortAvailable,"    public static boolean isPortAvailable(int port) {
        Socket socket;
        String host = ""localhost"";
        try {
            socket = new Socket(host, port);"
28043,getHostName,"    public static String getHostName() {
        try {
            return InetAddress.getLocalHost().getCanonicalHostName();"
28044,getNetworkInterfaces,"    public static Collection<NetworkInterface> getNetworkInterfaces() {
        Enumeration<NetworkInterface> networkInterfaces;
        try {
            networkInterfaces = NetworkInterface.getNetworkInterfaces();
        } catch (SocketException e) {"
28045,getNetworkInterface,"    public static NetworkInterface getNetworkInterface(String name) {
        Enumeration<NetworkInterface> networkInterfaces;
        try {
            networkInterfaces = NetworkInterface.getNetworkInterfaces();
        } catch (SocketException e) {
            return null;
        }"
28046,localAddressList,"    public static LinkedHashSet<InetAddress> localAddressList(Filter<InetAddress> addressFilter) {
        Enumeration<NetworkInterface> networkInterfaces;
        try {
            networkInterfaces = NetworkInterface.getNetworkInterfaces();
        } catch (SocketException e) {
            throw new UtilException(e.getMessage(), e);
        }
"
28047,toIpList,"    public static LinkedHashSet<String> toIpList(Set<InetAddress> addressList) {
        final LinkedHashSet<String> ipSet = new LinkedHashSet<>();
        for (InetAddress address : addressList) {
            ipSet.add(address.getHostAddress());
        }"
28048,localIps,"    public static LinkedHashSet<String> localIps() {
        final LinkedHashSet<InetAddress> localAddressList = localAddressList(null);
        return toIpList(localAddressList);
    }"
28050,getInstanceIpWithCache,"    public static String getInstanceIpWithCache() {
        if (Objects.isNull(currentIp)) {
            synchronized (NetUtils.class) {
                if (Objects.isNull(currentIp)) {"
28051,getInstanceIp,"    public static String getInstanceIp() {
        InetAddress localhost = getLocalhost();
        if (null != localhost) {
            return localhost.getHostAddress();
        }"
28052,isLocalhost,"    public static boolean isLocalhost(String ip) {
        return ""127.0.0.1"".equals(ip)
                || ""0:0:0:0:0:0:0:1"".equals(ip)"
28053,getThreadGroup,"    public ThreadGroup getThreadGroup() {
        return mGroup;
    }"
28054,newThread,"    public Thread newThread(Runnable runnable) {
        String name = mPrefix + mThreadNum.getAndIncrement();
        Thread ret = new Thread(mGroup, runnable, name, 0);
        ret.setDaemon(mDaemon);
        return ret;
    }"
28055,outPrintln,"    private static void outPrintln(PrintStream out, String msg) {
        out.println(Calendar.getInstance().getTime().toString() + "" "" + CLASS_INFO + "" "" + msg);
    }"
28056,println,"    private static void println(PrintStream out, String msg) {
        out.println(Calendar.getInstance().getTime().toString() + "" "" + CLASS_INFO + "" "" + msg);
    }"
28057,warn,"    public static void warn(String msg, Throwable t) {
        if (quietMode) {
            return;
        }
"
28058,warn,"    public static void warn(String msg) {
        if (quietMode) {
            return;
        }"
28059,error,"    public static void error(String msg, Throwable t) {
        if (quietMode) {
            return;
        }
"
28060,error,"    public static void error(String msg) {
        if (quietMode) {
            return;
        }"
28061,info,"    public static void info(String msg, Throwable t) {
        if (infoEnabled && !quietMode) {
            println(System.out, INFO_PREFIX + msg);"
28062,info,"    public static void info(String msg) {
        if (infoEnabled && !quietMode) {
            println(System.out, INFO_PREFIX + msg);"
28063,debug,"    public static void debug(String msg, Throwable t) {
        if (debugEnabled && !quietMode) {
            println(System.out, DEBUG_PREFIX + msg);"
28064,debug,"    public static void debug(String msg) {
        if (debugEnabled && !quietMode) {
            println(System.out, DEBUG_PREFIX + msg);"
28065,setInternalInfoing,"    static public void setInternalInfoing(boolean enabled) {
        infoEnabled = enabled;
    }"
28066,setInternalDebugging,"    static public void setInternalDebugging(boolean enabled) {
        debugEnabled = enabled;
    }"
28067,setQuietMode,"    public static void setQuietMode(boolean quietMode) {
        LogLog.quietMode = quietMode;
    }"
28068,isDebugEnabled,"    default boolean isDebugEnabled() {
        return false;
    }"
28069,error,"    void error(String message, Object... args);
"
28073,warn,"    void warn(String message, Object... args);
"
28076,info,"    void info(String message, Object... args);
"
28079,debug,"    void debug(String message, Object... args);
"
28082,getLogger,"    public Logger getLogger(String name) {
        return new LogbackLogger(loggerContext.getLogger(name));
    }"
28083,error,"    public void error(String message, Object... args) {
        logger.error(message, args);
    }"
28084,error,"    public void error(Throwable t) {
        logger.error("""", t);
    }"
28085,error,"    public void error(String message) {
        logger.error(message);
    }"
28086,error,"    public void error(String message, Throwable t) {
        logger.error(message, t);
    }"
28087,warn,"    public void warn(String message, Object... args) {
        logger.warn(message, args);
    }"
28088,warn,"    public void warn(String message) {
        logger.warn(message);
    }"
28089,warn,"    public void warn(String message, Throwable t) {
        logger.warn(message, t);
    }"
28090,info,"    public void info(String message, Object... args) {
        logger.info(message, args);
    }"
28091,info,"    public void info(String message) {
        logger.info(message);
    }"
28092,info,"    public void info(String message, Throwable t) {
        logger.info(message, t);
    }"
28093,debug,"    public void debug(String message, Object... args) {
        logger.debug(message, args);
    }"
28094,debug,"    public void debug(String message) {
        logger.debug(message);
    }"
28095,debug,"    public void debug(String message, Throwable t) {
        logger.debug(message, t);
    }"
28096,getLogger,"    public Logger getLogger(String name) {
        return new Log4jLogger(repository.getLogger(name));
    }"
28097,formatString,"    private static String formatString(String message, Object... args) {
        StringBuilder builder = new StringBuilder();
        int argsIndex = 0;
        for (int index = 0; index < message.length(); index++) {
            if (message.charAt(index) == '{') {
                if ((index + 1) < message.length() && message.charAt(index + 1) == '}' && argsIndex < args.length) {"
28098,error,"    public void error(String message, Object... args) {
        String msg = formatString(message, args);
        if (args != null) {
            if (args[args.length - 1] instanceof Throwable) {
                logger.error(msg, (Throwable) args[args.length - 1]);"
28099,error,"    public void error(Throwable t) {
        logger.error(t);
    }"
28102,warn,"    public void warn(String message, Object... args) {
        String msg = formatString(message, args);
        if (args != null) {
            if (args[args.length - 1] instanceof Throwable) {
                logger.warn(msg, (Throwable) args[args.length - 1]);"
28105,info,"    public void info(String message, Object... args) {
        String msg = formatString(message, args);
        if (args != null) {
            if (args[args.length - 1] instanceof Throwable) {
                logger.info(msg, (Throwable) args[args.length - 1]);"
28108,debug,"    public void debug(String message, Object... args) {
        String msg = formatString(message, args);
        if (args != null) {
            if (args[args.length - 1] instanceof Throwable) {
                logger.debug(msg, (Throwable) args[args.length - 1]);"
28111,addJar,"        public void addJar(URL url) {
            this.addURL(url);
        }"
28112,getLogger,"    public Logger getLogger(String name) {
        return new Log4j2Logger(LOG_CONTEXT.getLogger(name));
    }"
28126,computeArrayListCapacity,"    static int computeArrayListCapacity(int arraySize) {
        return Ints.saturatedCast(5L + arraySize + (arraySize / 10));
    }"
28127,cast,"    static <T> Collection<T> cast(Iterable<T> iterable) {
        return (Collection<T>) iterable;
    }"
28128,newArrayList,"    public static <E> ArrayList<E> newArrayList(Iterator<? extends E> elements) {
        ArrayList<E> list = newArrayList();
        if (elements == null) {
            return list;
        }
        while (elements.hasNext()) {"
28129,newArrayList,"    public static <E> ArrayList<E> newArrayList(Iterable<? extends E> elements) {
        if (elements == null) {
            throw new IllegalArgumentException(""elements is null"");
        }"
28130,newArrayListWithCapacity,"    public static <E> ArrayList<E> newArrayListWithCapacity(int initialArraySize) {
        return new ArrayList<>(initialArraySize);
    }"
28132,newArrayList,"    public static <E> ArrayList<E> newArrayList() {
        return new ArrayList<>();
    }"
28133,averageAssign,"    public static <T> List<List<T>> averageAssign(List<T> source, int n) {
        List<List<T>> result = new ArrayList<>();
        int remaider = source.size() % n;
        int number = source.size() / n;
        int offset = 0;
        for (int i = 0; i < n; i++) {
            List<T> value;
            if (remaider > 0) {"
28134,invokeAll,"    <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit) throws InterruptedException;
}"
28135,invokeAll,"    <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) throws InterruptedException;
"
28136,submit,"    <T> ListenableFuture<T> submit(Runnable task, T result);
"
28137,submit,"    ListenableFuture<?> submit(Runnable task);
"
28138,submit,"    <T> ListenableFuture<T> submit(Callable<T> task);
"
28139,execute,"    public final void execute(Runnable command) {
      delegate.execute(command);
    }"
28140,shutdownNow,"    public final List<Runnable> shutdownNow() {
      return delegate.shutdownNow();
    }"
28141,shutdown,"    public final void shutdown() {
      delegate.shutdown();
    }"
28142,isTerminated,"    public final boolean isTerminated() {
      return delegate.isTerminated();
    }"
28143,isShutdown,"    public final boolean isShutdown() {
      return delegate.isShutdown();
    }"
28144,awaitTermination,"    public final boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {
      return delegate.awaitTermination(timeout, unit);
    }"
28145,addListener,"    void addListener(Runnable listener, Executor executor);
}"
28146,main,"    public static void main(String[] args) {
        Map<String, Object> props = new HashMap<>();
        props.put(""x.a"", ""1"");
        props.put(""x.b"", ""2"");
        props.put(""x.n.a"", ""2"");
        props.put(""x.n.b"", ""2"");

        String jsonStringFromKv = getJsonStringFromKv(props);
        System.out.println(jsonStringFromKv);"
28147,deepMerge,"    private static Map deepMerge(Map original, Map newMap) {
        for (Object key : newMap.keySet()) {
            if (newMap.get(key) instanceof Map && original.get(key) instanceof Map) {
                Map originalChild = (Map) original.get(key);"
28148,getJsonCur,"    private static JSONObject getJsonCur(String key, Object value) {
        JSONObject jsonObject = new JSONObject();
        String[] split = key.split(""\\."");
        if (split.length == 1) {
            jsonObject.put(key, value);
            return jsonObject;
        }
        int firstIndexOfDot = key.indexOf(""."");
        String restKey = key.substring(firstIndexOfDot + 1);

        JSONObject jsonCur = getJsonCur(restKey, value);"
28149,getJsonStringFromKv,"    public static String getJsonStringFromKv(Map<String, Object> properties) {
        Map jsonObject = new HashMap();

        for (Map.Entry<String, Object> entry : properties.entrySet()) {
            String key = entry.getKey();"
28151,getObjectFromKv,"    public static <T> T getObjectFromKv(Map<String, Object> properties, String keyPrefix, Class<T> clazz) {
        String jsonStringFromKv = getJsonStringFromKv(properties, keyPrefix);

        T object = JSON.parseObject(jsonStringFromKv, clazz);
"
28152,merge,"    public static String merge(String oldJson, String newJson) {
        JSONObject oldJsonObj = JSON.parseObject(oldJson);
        if (oldJsonObj == null) {
            oldJsonObj = new JSONObject();
        }
        JSONObject newJsonObj = JSON.parseObject(newJson);
        if (newJsonObj == null) {
            return oldJsonObj.toJSONString();"
28153,toArrayObject,"    public static <T> List<T> toArrayObject(String jsonString, Class<T> clazz) {
        return JSON.parseArray(jsonString, clazz);
    }"
28154,toMap,"    public static Map toMap(String jsonString) {
        return JSON.parseObject(jsonString);
    }"
28155,toMap,"    public static Map toMap(Object object) {
        return JSON.parseObject(toJsonString(object));
    }"
28156,toObject,"    public static <T> T toObject(Map jsonString, Class<T> clazz) {
        return JSON.parseObject(toJsonString(jsonString), clazz);
    }"
28157,toObject,"    public static <T> T toObject(String jsonString, Class<T> clazz) {
        return JSON.parseObject(jsonString, clazz);
    }"
28158,toJsonString,"    public static String toJsonString(Object object) {
        return JSON.toJSONString(object);
    }"
28159,isJson,"    public static boolean isJson(String jsonString) {
        return JSON.isValid(jsonString);
    }"
28160,closeQuietly,"    public static void closeQuietly(final Closeable c) {
        if (c != null) {
            try {"
28161,toByteArray,"    public static byte[] toByteArray(final InputStream input) throws IOException {
        final ByteArrayOutputStream output = new ByteArrayOutputStream();
        copy(input, output);
        return output.toByteArray();
    }"
28162,readFully,"    public static void readFully(ReadableByteChannel channel, ByteBuffer b) throws IOException {
        final int expectedLength = b.remaining();
        int read = 0;
        while (read < expectedLength) {
            int readNow = channel.read(b);
            if (readNow <= 0) {"
28163,readFully,"    public static int readFully(final InputStream input, final byte[] b, final int offset, final int len)
            throws IOException {
        if (len < 0 || offset < 0 || len + offset > b.length) {
            throw new IndexOutOfBoundsException();
        }
        int count = 0, x = 0;"
28164,readFully,"    public static int readFully(final InputStream input, final byte[] b) throws IOException {
        return readFully(input, b, 0, b.length);
    }"
28165,skip,"    public static long skip(final InputStream input, long numToSkip) throws IOException {
        final long available = numToSkip;
        while (numToSkip > 0) {
            final long skipped = input.skip(numToSkip);
            if (skipped == 0) {
                break;"
28166,copy,"    public static long copy(final InputStream input, final OutputStream output, final int buffersize) throws IOException {
        if (buffersize < 1) {
            throw new IllegalArgumentException(""buffersize must be bigger than 0"");
        }
        final byte[] buffer = new byte[buffersize];
        int n = 0;
        long count = 0;
        while (-1 != (n = input.read(buffer))) {"
28167,copy,"    public static long copy(final InputStream input, final OutputStream output) throws IOException {
        return copy(input, output, COPY_BUF_SIZE);
    }"
28168,tryParse,"    public static Integer tryParse(String string, int radix) {
        long result = Long.parseLong(string);
        if (result != (int)result) {
            return null;"
28169,tryParse,"    public static Integer tryParse(String string) {
        return tryParse(string, 10);
    }"
28170,toIntArray,"        int[] toIntArray() {
            return Arrays.copyOfRange(array, start, end);
        }"
28171,toString,"        public String toString() {
            StringBuilder builder = new StringBuilder(size() * 5);
            builder.append('[').append(array[start]);
            for (int i = start + 1; i < end; i++) {
                builder.append("", "").append(array[i]);
            }"
28172,hashCode,"        public int hashCode() {
            int result = 1;
            for (int i = start; i < end; i++) {
                result = 31 * result + Ints.hashCode(array[i]);
            }"
28173,equals,"        public boolean equals(Object object) {
            if (object == this) {
                return true;
            }
            if (object instanceof IntArrayAsList) {"
28174,subList,"        public List<Integer> subList(int fromIndex, int toIndex) {
            int size = size();
            if (fromIndex == toIndex) {
                return Collections.emptyList();
            }"
28179,spliterator,"        public Spliterator.OfInt spliterator() {
            return Spliterators.spliterator(array, start, end, 0);
        }"
28180,get,"        public Integer get(int index) {
            return array[start + index];
        }"
28181,isEmpty,"        public boolean isEmpty() {
            return false;
        }"
28182,size,"        public int size() {
            return end - start;
        }"
28183,asList,"    public static List<Integer> asList(int... backingArray) {
        if (backingArray.length == 0) {
            return Collections.emptyList();
        }"
28184,toArray,"    public static int[] toArray(Collection<? extends Number> collection) {
        if (collection instanceof IntArrayAsList) {
            return ((IntArrayAsList)collection).toIntArray();
        }

        Object[] boxedArray = collection.toArray();
        int len = boxedArray.length;
        int[] array = new int[len];"
28185,reverse,"    public static void reverse(int[] array, int fromIndex, int toIndex) {
        if (array == null) {
            throw new IllegalArgumentException(""array is null"");
        }"
28186,reverse,"    public static void reverse(int[] array) {
        if (array == null) {
            throw new IllegalArgumentException(""array is null"");
        }"
28187,sortDescending,"    public static void sortDescending(int[] array, int fromIndex, int toIndex) {
        if (array == null) {
            throw new IllegalArgumentException(""array is null"");
        }
        if (fromIndex > toIndex) {
            throw new IllegalArgumentException(StringUtils.format(""fromIndex({}) > toIndex({})"", fromIndex, toIndex));"
28188,sortDescending,"    public static void sortDescending(int[] array) {
        if (array == null) {
            throw new IllegalArgumentException(""array is null"");
        }"
28189,toString,"        public String toString() {
            return ""Ints.lexicographicalComparator()"";
        }"
28190,compare,"        public int compare(int[] left, int[] right) {
            int minLength = Math.min(left.length, right.length);
            for (int i = 0; i < minLength; i++) {
                int result = Ints.compare(left[i], right[i]);
                if (result != 0) {"
28191,lexicographicalComparator,"    public static Comparator<int[]> lexicographicalComparator() {
        return LexicographicalComparator.INSTANCE;
    }"
28192,join,"    public static String join(String separator, int... array) {
        if (separator == null) {
            throw new IllegalArgumentException(""separator is null"");
        }
        if (array.length == 0) {
            return """";
        }
"
28193,ensureCapacity,"    public static int[] ensureCapacity(int[] array, int minLength, int padding) {
        if (minLength < 0) {
            throw new IllegalArgumentException(""Invalid minLength: "" + minLength);
        }
        if (padding < 0) {"
28194,stringConverter,"    public static Converter<String, Integer> stringConverter() {
        return IntConverter.INSTANCE;
    }"
28195,readResolve,"        private Object readResolve() {
            return INSTANCE;
        }"
28196,toString,"        public String toString() {
            return ""Ints.stringConverter()"";
        }"
28197,doBackward,"        protected String doBackward(Integer value) {
            return value.toString();
        }"
28198,doForward,"        protected Integer doForward(String value) {
            return Integer.decode(value);
        }"
28199,fromBytes,"    public static int fromBytes(byte b1, byte b2, byte b3, byte b4) {
        return b1 << 24 | (b2 & 0xFF) << 16 | (b3 & 0xFF) << 8 | (b4 & 0xFF);
    }"
28200,fromByteArray,"    public static int fromByteArray(byte[] bytes) {
        if (bytes.length < BYTES) {
            throw new IllegalArgumentException(StringUtils.format(""array too small: %s < %"", bytes.length, BYTES));
        }"
28201,toByteArray,"    public static byte[] toByteArray(int value) {
        return new byte[] {
            (byte)(value >> 24), (byte)(value >> 16), (byte)(value >> 8), (byte)value"
28202,concat,"    public static int[] concat(int[]... arrays) {
        int length = 0;
        for (int[] array : arrays) {
            length += array.length;
        }
        int[] result = new int[length];
        int pos = 0;
        for (int[] array : arrays) {"
28203,constrainToRange,"    public static int constrainToRange(int value, int min, int max) {
        if (min > max) {
            throw new IllegalArgumentException(
                String.format(""min (%s) must be less than or equal to max (%s)"", min, max));"
28204,max,"    public static int max(int... array) {
        if (array == null) {
            throw new IllegalArgumentException(""array is null"");
        }
        if (array.length <= 0) {
            throw new IllegalArgumentException(""array.length <= 0"");
        }"
28205,min,"    public static int min(int... array) {
        if (array == null) {
            throw new IllegalArgumentException(""array is null"");
        }
        if (array.length <= 0) {
            throw new IllegalArgumentException(""array.length <= 0"");
        }"
28206,lastIndexOf,"    private static int lastIndexOf(int[] array, int target, int start, int end) {
        for (int i = end - 1; i >= start; i--) {
            if (array[i] == target) {
                return i;"
28207,lastIndexOf,"    public static int lastIndexOf(int[] array, int target) {
        return lastIndexOf(array, target, 0, array.length);
    }"
28208,indexOf,"    public static int indexOf(int[] array, int[] target) {
        if (array == null) {
            throw new IllegalArgumentException(""array is null"");
        }
        if (target == null) {
            throw new IllegalArgumentException(""target is null"");
        }"
28209,indexOf,"    private static int indexOf(int[] array, int target, int start, int end) {
        for (int i = start; i < end; i++) {
            if (array[i] == target) {
                return i;"
28210,indexOf,"    public static int indexOf(int[] array, int target) {
        return indexOf(array, target, 0, array.length);
    }"
28211,contains,"    public static boolean contains(int[] array, int target) {
        for (int value : array) {
            if (value == target) {
                return true;"
28212,compare,"    public static int compare(int a, int b) {
        return (a < b) ? -1 : ((a > b) ? 1 : 0);
    }"
28213,saturatedCast,"    public static int saturatedCast(long value) {
        if (value > Integer.MAX_VALUE) {
            return Integer.MAX_VALUE;
        }
        if (value < Integer.MIN_VALUE) {"
28214,checkedCast,"    public static int checkedCast(long value) {
        int result = (int)value;
        if (value != result) {
            throw new IllegalArgumentException(""Out of range: "" + value);
        }"
28215,hashCode,"    public static int hashCode(int value) {
        return value;
    }"
28217,toString,"    public final String toString() {
        Runnable state = get();
        final String result;
        if (state == DONE) {
            result = ""running=[DONE]"";
        } else if (state == INTERRUPTING) {"
28219,afterRanInterruptibly,"    abstract void afterRanInterruptibly(T result, Throwable error);
"
28220,runInterruptibly,"    abstract T runInterruptibly() throws Exception;
"
28224,tryInternalFastPathGetFailure,"    public static Throwable tryInternalFastPathGetFailure(InternalFutureFailureAccess future) {
        return future.tryInternalFastPathGetFailure();
    }"
28225,tryInternalFastPathGetFailure,"    protected abstract Throwable tryInternalFastPathGetFailure();
}"
28226,valueOf,"        public static Series valueOf(HttpStatus status) {
            return valueOf(status.value);
        }"
28227,valueOf,"        public static Series valueOf(int status) {
            int seriesCode = status / 100;
            for (Series series : values()) {
                if (series.value == seriesCode) {
                    return series;"
28228,value,"        public int value() {
            return this.value;
        }"
28229,resolve,"    public static HttpStatus resolve(int statusCode) {
        for (HttpStatus status : values()) {
            if (status.value == statusCode) {
                return status;"
28230,valueOf,"    public static HttpStatus valueOf(int statusCode) {
        HttpStatus status = resolve(statusCode);
        if (status == null) {
            throw new IllegalArgumentException(""No matching constant for ["" + statusCode + ""]"");
        }"
28231,toString,"    public String toString() {
        return Integer.toString(this.value);
    }"
28232,series,"    public Series series() {
        return Series.valueOf(this);
    }"
28233,isError,"    public boolean isError() {
        return is4xxClientError() || is5xxServerError();
    }"
28234,is5xxServerError,"    public boolean is5xxServerError() {
        return Series.SERVER_ERROR.equals(series());
    }"
28235,is4xxClientError,"    public boolean is4xxClientError() {
        return Series.CLIENT_ERROR.equals(series());
    }"
28236,is3xxRedirection,"    public boolean is3xxRedirection() {
        return Series.REDIRECTION.equals(series());
    }"
28237,is2xxSuccessful,"    public boolean is2xxSuccessful() {
        return Series.SUCCESSFUL.equals(series());
    }"
28238,is1xxInformational,"    public boolean is1xxInformational() {
        return Series.INFORMATIONAL.equals(series());
    }"
28239,getReasonPhrase,"    public String getReasonPhrase() {
        return this.reasonPhrase;
    }"
28240,value,"    public int value() {
        return this.value;
    }"
28241,get,"    public T get() {
        return value;
    }"
28242,set,"    public void set(T value) {
        this.value = value;
    }"
28244,addCallback,"    public static <V> void addCallback(
            final ListenableFuture<V> future,
            final FutureCallback<? super V> callback,"
28245,withTimeout,"    public static <V> ListenableFuture<V> withTimeout(
            ListenableFuture<V> delegate,
            long time,
            TimeUnit unit,"
28250,get,"    public V get(long timeout, TimeUnit unit)
            throws InterruptedException, ExecutionException, TimeoutException {
        return delegate.get(timeout, unit);"
28251,get,"    public V get() throws InterruptedException, ExecutionException {
        return delegate.get();
    }"
28252,isDone,"    public boolean isDone() {
        return delegate.isDone();
    }"
28253,isCancelled,"    public boolean isCancelled() {
        return delegate.isCancelled();
    }"
28254,cancel,"    public boolean cancel(boolean mayInterruptIfRunning) {
        return delegate.cancel(mayInterruptIfRunning);
    }"
28255,addListener,"    public void addListener(Runnable listener, Executor executor) {
        delegate.addListener(listener, executor);
    }"
28256,cancel,"        public final boolean cancel(boolean mayInterruptIfRunning) {
            return super.cancel(mayInterruptIfRunning);
        }"
28257,addListener,"        public final void addListener(Runnable listener, Executor executor) {
            super.addListener(listener, executor);
        }"
28258,isCancelled,"        public final boolean isCancelled() {
            return super.isCancelled();
        }"
28259,isDone,"        public final boolean isDone() {
            return super.isDone();
        }"
28260,get,"        public final V get(long timeout, TimeUnit unit)
                throws InterruptedException, ExecutionException, TimeoutException {
            return super.get(timeout, unit);"
28261,get,"        public final V get() throws InterruptedException, ExecutionException {
            return super.get();
        }"
28263,merge,"    public static String merge(String oldFeature, String newFeature) {
        JSONObject oldFeatureObject = JSON.parseObject(oldFeature);
        if (oldFeatureObject == null) {
            return newFeature;
        }
        JSONObject newFeatureObject = JSON.parseObject(newFeature);
        if (newFeatureObject == null) {
            return oldFeature;"
28264,putFeature,"    public static <T> String putFeature(String feature, FeatureKey<T> key, T info) {
        JSONObject object = JSON.parseObject(feature);
        if (object == null) {
            object = new JSONObject();
        }
        if (key.getLength() > 0 && info instanceof String) {
            if (((String) info).length() > key.getLength()) {"
28265,exists,"    public static <T> boolean exists(String feature, FeatureKey<T> key) {
        JSONObject object = JSON.parseObject(feature);
        if (object == null) {
            return false;
        }"
28266,getFeature,"    public static <T> T getFeature(String feature, FeatureKey<T> key) {
        JSONObject object = JSON.parseObject(feature);
        if (object == null) {
            return null;
        }"
28269,getFeatureJson,"    default JSONObject getFeatureJson() {
        String features = getFeature();
        JSONObject jsonObject = JSON.parseObject(features);
        if (jsonObject == null) {
            jsonObject = new JSONObject();
        }"
28270,getFeature,"    default String getFeature(String key) {
        String features = getFeature();
        JSONObject jsonObject = JSON.parseObject(features);
        if (jsonObject == null) {
            return null;
        }"
28271,removeFeature,"    default void removeFeature(String key) {
        JSONObject jsonObject = JSON.parseObject(getFeature());
        if (jsonObject == null) {
            return;
        }
        jsonObject.remove(key);"
28272,addFeature,"    default void addFeature(String key, String value) {
        if (StringUtils.isEmpty(value)) {
            return;
        }
        JSONObject jsonObject = JSON.parseObject(getFeature());
        if (jsonObject == null) {
            jsonObject = new JSONObject();"
28273,addFeatures,"    default void addFeatures(Map<String, String> map) {
        if (map == null || map.isEmpty()) {
            return;
        }
        JSONObject jsonObject = JSON.parseObject(getFeature());
        if (jsonObject == null) {
            jsonObject = new JSONObject();"
28274,create,"    public static <T> FeatureKey<T> create(String key, Class<T> clazz, int length) {
        return keysMap.computeIfAbsent(key, k -> new FeatureKey(k, clazz, length));
    }"
28275,create,"    public static <T> FeatureKey<T> create(String key, Class<T> clazz) {
        return keysMap.computeIfAbsent(key, k -> new FeatureKey(k, clazz));
    }"
28276,getLength,"    public int getLength() {
        return length;
    }"
28277,getClazz,"    public Class<T> getClazz() {
        return clazz;
    }"
28278,getKey,"    public String getKey() {
        return key;
    }"
28280,updateMessageDigest,"		public void updateMessageDigest(MessageDigest messageDigest) {
			updateMessageDigest(messageDigest, available());
		}"
28281,available,"		public int available() {
			return (this.fastByteArrayOutputStream.size() - this.totalBytesRead);
		}"
28282,skip,"		public long skip(long n) throws IOException {
			if (n > Integer.MAX_VALUE) {
				throw new IllegalArgumentException(""n exceeds maximum ("" + Integer.MAX_VALUE + ""): "" + n);
			}
			else if (n == 0) {"
28283,read,"		public int read(byte[] b, int off, int len) {
			if (b == null) {
				throw new NullPointerException();"
28284,read,"		public int read(byte[] b) {
			return read(b, 0, b.length);
		}"
28286,nextPowerOf2,"	private static int nextPowerOf2(int val) {
		val--;
		val = (val >> 1) | val;
		val = (val >> 2) | val;
		val = (val >> 4) | val;
		val = (val >> 8) | val;
		val = (val >> 16) | val;
		val++;
		return val;
	}"
28287,addBuffer,"	private void addBuffer(int minCapacity) {
		if (this.buffers.peekLast() != null) {
			this.alreadyBufferedSize += this.index;
			this.index = 0;
		}
		if (this.nextBlockSize < minCapacity) {"
28288,resize,"	public void resize(int targetCapacity) {
		Assert.isTrue(targetCapacity >= size(), ""New capacity must not be smaller than current size"");
		if (this.buffers.peekFirst() == null) {
			this.nextBlockSize = targetCapacity - size();"
28289,writeTo,"	public void writeTo(OutputStream out) throws IOException {
		Iterator<byte[]> it = this.buffers.iterator();
		while (it.hasNext()) {
			byte[] bytes = it.next();"
28290,getInputStream,"	public InputStream getInputStream() {
		return new FastByteArrayInputStream(this);
	}"
28291,reset,"	public void reset() {
		this.buffers.clear();
		this.nextBlockSize = this.initialBlockSize;
		this.closed = false;
		this.index = 0;
		this.alreadyBufferedSize = 0;
	}"
28292,toByteArray,"	public byte[] toByteArray() {
		byte[] bytesUnsafe = toByteArrayUnsafe();
		byte[] ret = new byte[bytesUnsafe.length];
		System.arraycopy(bytesUnsafe, 0, ret, 0, bytesUnsafe.length);
		return ret;
	}"
28293,toByteArrayUnsafe,"	public byte[] toByteArrayUnsafe() {
		int totalSize = size();
		if (totalSize == 0) {
			return new byte[0];
		}
		resize(totalSize);"
28294,size,"	public int size() {
		return (this.alreadyBufferedSize + this.index);
	}"
28295,toString,"	public String toString() {
		return new String(toByteArrayUnsafe());
	}"
28296,close,"	public void close() {
		this.closed = true;
	}"
28297,write,"	public void write(byte[] data, int offset, int length) throws IOException {
		if (data == null) {
			throw new NullPointerException();"
28298,write,"	public void write(int datum) throws IOException {
		if (this.closed) {
			throw new IOException(""Stream closed"");"
28299,getMessage,"    public static String getMessage(Throwable e) {
        if (null == e) {
            return StringUtils.NULL;
        }"
28301,throwException,"    public static <E extends Throwable> void throwException(Throwable t) throws E {
        throw (E) t;
    }"
28302,toString,"    public String toString() {
        return ""MoreExecutors.directExecutor()"";
    }"
28303,execute,"    public void execute(Runnable command) {
        command.run();
    }"
28306,toString,"    public String toString() {
        final StringBuilder sb = new StringBuilder(""DelayedElement{"");
        sb.append(""delay="").append(delay);
        sb.append("", expire="").append(expire);
        sb.append("", msg='"").append(data).append('\'');
        sb.append("", now="").append(now);
        sb.append('}');
        return sb.toString();
    }"
28307,compareTo,"    public int compareTo(Delayed o) {
        return (int)(this.getDelay(TimeUnit.MILLISECONDS) - o.getDelay(TimeUnit.MILLISECONDS));
    }"
28308,getDelay,"    public long getDelay(TimeUnit unit) {
        return unit.convert(this.expire - System.currentTimeMillis(), TimeUnit.MILLISECONDS);
    }"
28309,format,"    public static String format(Date date, DateFormat format) {
        if (null == format || null == date) {
            return null;
        }"
28310,parseDateTime,"    public static Date parseDateTime(CharSequence dateString) {
        return parse(dateString, NORM_DATETIME_FORMAT);
    }"
28311,parseDate,"    public static Date parseDate(CharSequence dateString) {
        return parse(dateString, NORM_DATE_FORMAT);
    }"
28312,parse,"    public static Date parse(CharSequence dateStr, String format) {
        SimpleDateFormat fmt = new SimpleDateFormat(format);
        return parse(dateStr, fmt);
    }"
28313,parse,"    private static Date parse(CharSequence dateStr, DateFormat dateFormat) {
        if (StringUtils.isBlank(dateStr)) {
            throw new UtilException(""dataStr is blank"");
        }"
28315,toInstant,"    public static Instant toInstant(TemporalAccessor temporalAccessor) {
        if (null == temporalAccessor) {
            return null;
        }

        Instant result;"
28316,date,"    public static Date date(TemporalAccessor temporalAccessor) {
        Instant instant = toInstant(temporalAccessor);
        return new Date(instant.toEpochMilli());
    }"
28321,convert,"    public <T> T convert(Type type, Object value) throws ConvertException {
        return convert(type, value, null);
    }"
28322,convert,"    public <T> T convert(Type type, Object value, T defaultValue) throws ConvertException {
        return convert(type, value, defaultValue, true);
    }"
28324,getCustomConverter,"    public <T> Converter<T> getCustomConverter(Type type) {
        return (null == customConverterMap) ? null : (Converter<T>) customConverterMap.get(type);
    }"
28325,getDefaultConverter,"    public <T> Converter<T> getDefaultConverter(Type type) {
        return (null == defaultConverterMap) ? null : (Converter<T>) defaultConverterMap.get(type);
    }"
28326,getConverter,"    public <T> Converter<T> getConverter(Type type, boolean isCustomFirst) {
        Converter<T> converter;
        if (isCustomFirst) {
            converter = this.getCustomConverter(type);
            if (null == converter) {"
28327,putCustom,"    public ConverterRegistry putCustom(Type type, Converter<?> converter) {
        if (null == customConverterMap) {
            synchronized (this) {
                if (null == customConverterMap) {
                    customConverterMap = new ConcurrentHashMap<>();"
28328,putCustom,"    public ConverterRegistry putCustom(Type type, Class<? extends Converter<?>> converterClass) {
        return putCustom(type, ReflectUtils.newInstance(converterClass));
    }"
28329,getInstance,"    public static ConverterRegistry getInstance() {
        return SingletonHolder.instance;
    }"
28334,shortToBytes,"    public static byte[] shortToBytes(short shortValue) {
        byte[] b = new byte[2];
        b[1] = (byte) (shortValue & 0xff);
        b[0] = (byte) ((shortValue >> 8) & 0xff);
        return b;
    }"
28335,bytesToShort,"    public static short bytesToShort(byte[] bytes) {
        return (short) (bytes[1] & 0xff | (bytes[0] & 0xff) << 8);
    }"
28337,intToByte,"    public static byte intToByte(int intValue) {
        return (byte) intValue;
    }"
28338,unWrap,"    public static Class<?> unWrap(Class<?> clazz) {
        return BasicType.unWrap(clazz);
    }"
28339,wrap,"    public static Class<?> wrap(Class<?> clazz) {
        return BasicType.wrap(clazz);
    }"
28340,toDBC,"    public static String toDBC(String text, Set<Character> notConvertSet) {
        if (StringUtils.isBlank(text)) {
            return text;
        }
        final char[] c = text.toCharArray();
        for (int i = 0; i < c.length; i++) {"
28341,toDBC,"    public static String toDBC(String input) {
        return toDBC(input, null);
    }"
28343,toSBC,"    public static String toSBC(String input) {
        return toSBC(input, null);
    }"
28344,convertQuietly,"    public static <T> T convertQuietly(Type type, Object value, T defaultValue) {
        try {
            return convert(type, value, defaultValue);"
28345,convertQuietly,"    public static <T> T convertQuietly(Type type, Object value) {
        return convertQuietly(type, value, null);
    }"
28346,convert,"    public static <T> T convert(Type type, Object value, T defaultValue) throws ConvertException {
        return ConverterRegistry.getInstance().convert(type, value, defaultValue);
    }"
28347,convert,"    public static <T> T convert(Class<T> type, Object value, T defaultValue) throws ConvertException {
        return convert((Type) type, value, defaultValue);
    }"
28348,convert,"    public static <T> T convert(Type type, Object value) throws ConvertException {
        return convert(type, value, null);
    }"
28349,convert,"    public static <T> T convert(TypeReference<T> reference, Object value) throws ConvertException {
        return convert(reference.getType(), value, null);
    }"
28350,convert,"    public static <T> T convert(Class<T> type, Object value) throws ConvertException {
        return convert((Type) type, value);
    }"
28351,toList,"    public static List<?> toList(Object value) {
        return convert(List.class, value);
    }"
28352,toDate,"    public static Date toDate(Object value) {
        return toDate(value, null);
    }"
28353,toInstant,"    public static Date toInstant(Object value, Date defaultValue) {
        return convertQuietly(Instant.class, value, defaultValue);
    }"
28354,toLocalDateTime,"    public static LocalDateTime toLocalDateTime(Object value) {
        return toLocalDateTime(value, null);
    }"
28355,toLocalDateTime,"    public static LocalDateTime toLocalDateTime(Object value, LocalDateTime defaultValue) {
        return convertQuietly(LocalDateTime.class, value, defaultValue);
    }"
28356,toDate,"    public static Date toDate(Object value, Date defaultValue) {
        return convertQuietly(Date.class, value, defaultValue);
    }"
28357,toBigDecimal,"    public static BigDecimal toBigDecimal(Object value) {
        return toBigDecimal(value, null);
    }"
28358,toBigDecimal,"    public static BigDecimal toBigDecimal(Object value, BigDecimal defaultValue) {
        return convertQuietly(BigDecimal.class, value, defaultValue);
    }"
28359,toBigInteger,"    public static BigInteger toBigInteger(Object value) {
        return toBigInteger(value, null);
    }"
28360,toBigInteger,"    public static BigInteger toBigInteger(Object value, BigInteger defaultValue) {
        return convertQuietly(BigInteger.class, value, defaultValue);
    }"
28361,toBooleanArray,"    public static Boolean[] toBooleanArray(Object value) {
        return convert(Boolean[].class, value);
    }"
28362,toBool,"    public static Boolean toBool(Object value) {
        return toBool(value, null);
    }"
28363,toBool,"    public static Boolean toBool(Object value, Boolean defaultValue) {
        return convertQuietly(Boolean.class, value, defaultValue);
    }"
28364,toFloatArray,"    public static Float[] toFloatArray(Object value) {
        return convert(Float[].class, value);
    }"
28365,toFloat,"    public static Float toFloat(Object value) {
        return toFloat(value, null);
    }"
28366,toFloat,"    public static Float toFloat(Object value, Float defaultValue) {
        return convertQuietly(Float.class, value, defaultValue);
    }"
28367,toDoubleArray,"    public static Double[] toDoubleArray(Object value) {
        return convert(Double[].class, value);
    }"
28368,toDouble,"    public static Double toDouble(Object value) {
        return toDouble(value, null);
    }"
28369,toDouble,"    public static Double toDouble(Object value, Double defaultValue) {
        return convertQuietly(Double.class, value, defaultValue);
    }"
28370,toLongArray,"    public static Long[] toLongArray(Object value) {
        return convert(Long[].class, value);
    }"
28371,toLong,"    public static Long toLong(Object value) {
        return toLong(value, null);
    }"
28372,toLong,"    public static Long toLong(Object value, Long defaultValue) {
        return convertQuietly(Long.class, value, defaultValue);
    }"
28373,toIntArray,"    public static Integer[] toIntArray(Object value) {
        return convert(Integer[].class, value);
    }"
28374,toInt,"    public static Integer toInt(Object value) {
        return toInt(value, null);
    }"
28375,toInt,"    public static Integer toInt(Object value, Integer defaultValue) {
        return convertQuietly(Integer.class, value, defaultValue);
    }"
28376,toNumberArray,"    public static Number[] toNumberArray(Object value) {
        return convert(Number[].class, value);
    }"
28377,toNumber,"    public static Number toNumber(Object value) {
        return toNumber(value, null);
    }"
28378,toNumber,"    public static Number toNumber(Object value, Number defaultValue) {
        return convertQuietly(Number.class, value, defaultValue);
    }"
28379,toShortArray,"    public static Short[] toShortArray(Object value) {
        return convert(Short[].class, value);
    }"
28380,toShort,"    public static Short toShort(Object value) {
        return toShort(value, null);
    }"
28381,toShort,"    public static Short toShort(Object value, Short defaultValue) {
        return convertQuietly(Short.class, value, defaultValue);
    }"
28382,toPrimitiveByteArray,"    public static byte[] toPrimitiveByteArray(Object value) {
        return convert(byte[].class, value);
    }"
28383,toByteArray,"    public static Byte[] toByteArray(Object value) {
        return convert(Byte[].class, value);
    }"
28384,toByte,"    public static Byte toByte(Object value) {
        return toByte(value, null);
    }"
28385,toByte,"    public static Byte toByte(Object value, Byte defaultValue) {
        return convertQuietly(Byte.class, value, defaultValue);
    }"
28386,toCharArray,"    public static Character[] toCharArray(Object value) {
        return convert(Character[].class, value);
    }"
28387,toChar,"    public static Character toChar(Object value) {
        return toChar(value, null);
    }"
28388,toChar,"    public static Character toChar(Object value, Character defaultValue) {
        return convertQuietly(Character.class, value, defaultValue);
    }"
28389,toStrArray,"    public static String[] toStrArray(Object value) {
        return convert(String[].class, value);
    }"
28390,toStr,"    public static String toStr(Object value) {
        return toStr(value, null);
    }"
28391,toStr,"    public static String toStr(Object value, String defaultValue) {
        return convertQuietly(String.class, value, defaultValue);
    }"
28392,getPid,"    public static int getPid() {
        if (PID < 0) {
            try {
                RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();"
28393,checkFileNameExist,"    private static boolean checkFileNameExist(String fileName) {
        File file = new File(fileName);
        return file.exists();
    }"
28395,loadProperties,"    public static Properties loadProperties(String fileName, boolean allowMultiFile) {
        return loadProperties(fileName, allowMultiFile, false);
    }"
28396,loadProperties,"    public static Properties loadProperties(String fileName) {
        return loadProperties(fileName, false, false);
    }"
28397,getSystemProperty,"    public static String getSystemProperty(String key) {
        String value = System.getenv(key);
        if (StringUtils.isEmpty(value)) {
            value = System.getProperty(key);
        }"
28398,getProperty,"    public static String getProperty(String key, String defaultValue) {
        String value = System.getProperty(key);
        if (value != null && value.length() > 0) {
            return value;
        }
        Properties properties = getProperties();"
28399,getProperty,"    public static String getProperty(String key) {
        return getProperty(key, null);
    }"
28400,addProperties,"    public static void addProperties(Properties properties) {
        if (properties != null) {
            getProperties().putAll(properties);"
28401,setProperties,"    public static void setProperties(Properties properties) {
        PROPERTIES = properties;
    }"
28402,getProperties,"    public static Properties getProperties() {
        if (PROPERTIES == null) {
            synchronized (ConfigUtils.class) {
                if (PROPERTIES == null) {"
28403,replaceProperty,"    public static String replaceProperty(String expression, Map<String, String> params) {
        if (expression == null || expression.length() == 0 || expression.indexOf('$') < 0) {
            return expression;
        }
        Matcher matcher = VARIABLE_PATTERN.matcher(expression);
        StringBuffer sb = new StringBuffer();
        while (matcher.find()) {
            String key = matcher.group(1);"
28404,isDefault,"    public static boolean isDefault(String value) {
        return ""true"".equalsIgnoreCase(value)
                || ""default"".equalsIgnoreCase(value);"
28405,isEmpty,"    public static boolean isEmpty(String value) {
        return StringUtils.isEmpty(value)
                || ""false"".equalsIgnoreCase(value)"
28406,isNotEmpty,"    public static boolean isNotEmpty(String value) {
        return !isEmpty(value);
    }"
28407,set,"    public static <T> HashSet<T> set(boolean isSorted, T... ts) {
        if (null == ts) {
            return isSorted ? new LinkedHashSet<>() : new HashSet<>();
        }
        int initialCapacity = Math.max((int) (ts.length / .75f) + 1, 16);
        final HashSet<T> set = isSorted ? new LinkedHashSet<>(initialCapacity) : new HashSet<>(initialCapacity);
        Collections.addAll(set, ts);"
28408,newHashSet,"    public static <T> HashSet<T> newHashSet(T... ts) {
        return set(false, ts);
    }"
28409,list,"    public static <T> List<T> list(boolean isLinked, T... values) {
        if (ArrayUtils.isEmpty(values)) {
            return list(isLinked);
        }
        final List<T> arrayList = isLinked ? new LinkedList<>() : new ArrayList<>(values.length);
        Collections.addAll(arrayList, values);"
28410,toList,"    public static <T> ArrayList<T> toList(T... values) {
        return (ArrayList<T>) list(false, values);
    }"
28411,newArrayList,"    public static <T> ArrayList<T> newArrayList(T... values) {
        return toList(values);
    }"
28412,addAll,"    public static <T> Collection<T> addAll(Collection<T> collection, Enumeration<T> enumeration) {
        if (null != collection && null != enumeration) {
            while (enumeration.hasMoreElements()) {
                collection.add(enumeration.nextElement());"
28413,get,"    public static <T> T get(Collection<T> collection, int index) {
        if (null == collection) {
            return null;
        }

        final int size = collection.size();
        if (0 == size) {
            return null;
        }"
28414,isNotEmpty,"    public static boolean isNotEmpty(Enumeration<?> enumeration) {
        return null != enumeration && enumeration.hasMoreElements();
    }"
28415,isEmpty,"    public static boolean isEmpty(Collection<?> collection) {
        return collection == null || collection.isEmpty();
    }"
28416,isNotEmpty,"    public static boolean isNotEmpty(Collection<?> collection) {
        return !isEmpty(collection);
    }"
28417,toString,"    public static String toString(Throwable e) {
        StringWriter w = new StringWriter();
        PrintWriter p = new PrintWriter(w);
        p.print(e.getClass().getName() + "": "");
        if (e.getMessage() != null) {
            p.print(e.getMessage() + ""\n"");
        }
        p.println();"
28418,toURI,"    public static URI toURI(String name) {
        try {
            return new URI(name);"
28421,forName,"    public static Class<?> forName(String[] packages, String className) {
        try {
            return classForName(className);"
28422,forNameWithCallerClassLoader,"    public static Class<?> forNameWithCallerClassLoader(String name, Class<?> caller)
        throws ClassNotFoundException {
        return forName(name, caller.getClassLoader());"
28423,forName,"    public static Class<?> forName(String name) throws ClassNotFoundException {
        return forName(name, getClassLoader());
    }"
28424,getClassLoader,"    public static ClassLoader getClassLoader() {
        return getClassLoader(ClassUtils.class);
    }"
28426,getCallerClassLoader,"    public static ClassLoader getCallerClassLoader(Class<?> caller) {
        return caller.getClassLoader();
    }"
28427,getDefaultValues,"    public static Object[] getDefaultValues(Class<?>... classes) {
        final Object[] values = new Object[classes.length];
        for (int i = 0; i < classes.length; i++) {
            values[i] = getDefaultValue(classes[i]);
        }"
28428,getDefaultValue,"    public static Object getDefaultValue(Class<?> clazz) {
        if (clazz.isPrimitive()) {
            if (long.class == clazz) {
                return 0L;"
28429,isJavaLanguageInterface,"    public static boolean isJavaLanguageInterface(Class<?> ifc) {
        return javaLanguageInterfaces.contains(ifc);
    }"
28430,registerCommonClasses,"    private static void registerCommonClasses(Class<?>... commonClasses) {
        for (Class<?> clazz : commonClasses) {
            commonClassCache.put(clazz.getName(), clazz);"
28431,getPackage,"    public static String getPackage(Class<?> clazz) {
        if (clazz == null) {
            return StringUtils.EMPTY;
        }
        final String className = clazz.getName();
        int packageEndIndex = className.lastIndexOf(CharUtils.DOT);
        if (packageEndIndex == -1) {"
28432,getTypeArgument,"    public static Class<?> getTypeArgument(Class<?> clazz, int index) {
        final Type argumentType = TypeUtils.getTypeArgument(clazz, index);
        if (argumentType instanceof Class) {
            return (Class<?>) argumentType;
        }"
28433,getTypeArgument,"    public static Class<?> getTypeArgument(Class<?> clazz) {
        return getTypeArgument(clazz, 0);
    }"
28434,isEnum,"    public static boolean isEnum(Class<?> clazz) {
        return null != clazz && clazz.isEnum();
    }"
28435,isNormalClass,"    public static boolean isNormalClass(Class<?> clazz) {
        return null != clazz
            && false == clazz.isInterface()"
28436,isAbstract,"    public static boolean isAbstract(Class<?> clazz) {
        return Modifier.isAbstract(clazz.getModifiers());
    }"
28437,setAccessible,"    public static Method setAccessible(Method method) {
        if (null != method && !method.isAccessible()) {
            method.setAccessible(true);
        }"
28438,isStatic,"    public static boolean isStatic(Method method) {
        if (method == null) {
            throw new IllegalArgumentException(""Method to provided is null."");
        }"
28439,isNotPublic,"    public static boolean isNotPublic(Method method) {
        return !isPublic(method);
    }"
28440,isNotPublic,"    public static boolean isNotPublic(Class<?> clazz) {
        return !isPublic(clazz);
    }"
28441,isPublic,"    public static boolean isPublic(Method method) {
        if (null == method) {
            throw new NullPointerException(""method is null"");
        }"
28442,isPublic,"    public static boolean isPublic(Class<?> clazz) {
        if (null == clazz) {
            throw new NullPointerException(""Class to provided is null."");
        }"
28443,isAssignable,"    public static boolean isAssignable(Class<?> targetType, Class<?> sourceType) {
        if (null == targetType || null == sourceType) {
            return false;
        }
"
28444,isSimpleValueType,"    public static boolean isSimpleValueType(Class<?> clazz) {
        return isBasicType(clazz)
            || clazz.isEnum()"
28445,isSimpleTypeOrArray,"    public static boolean isSimpleTypeOrArray(Class<?> clazz) {
        if (null == clazz) {
            return false;
        }"
28446,isBasicType,"    public static boolean isBasicType(Class<?> clazz) {
        if (null == clazz) {
            return false;
        }"
28447,isPrimitiveWrapper,"    public static boolean isPrimitiveWrapper(Class<?> clazz) {
        if (null == clazz) {
            return false;
        }"
28449,getDeclaredFields,"    public static Field[] getDeclaredFields(Class<?> clazz) {
        if (null == clazz) {
            return null;
        }"
28450,getDeclaredField,"    public static Field getDeclaredField(Class<?> clazz, String fieldName) {
        if (null == clazz || StringUtils.isBlank(fieldName)) {
            return null;
        }
        try {"
28451,getDeclaredMethod,"    public static Method getDeclaredMethod(Class<?> clazz, String methodName, Class<?>... parameterTypes) {
        return ReflectUtils.getMethod(clazz, methodName, parameterTypes);
    }"
28452,getDeclaredMethodOfObj,"    public static Method getDeclaredMethodOfObj(Object obj, String methodName, Object... args) {
        return getDeclaredMethod(obj.getClass(), methodName, getClasses(args));
    }"
28453,getDeclaredMethods,"    public static Method[] getDeclaredMethods(Class<?> clazz) {
        return ReflectUtils.getMethods(clazz);
    }"
28454,getDeclaredMethodNames,"    public static Set<String> getDeclaredMethodNames(Class<?> clazz) {
        return ReflectUtils.getMethodNames(clazz);
    }"
28455,getPublicMethod,"    public static Method getPublicMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {
        return ReflectUtils.getPublicMethod(clazz, methodName, paramTypes);
    }"
28456,getPublicMethods,"    public static List<Method> getPublicMethods(Class<?> clazz, String... excludeMethodNames) {
        return ReflectUtils.getPublicMethods(clazz, excludeMethodNames);
    }"
28457,getPublicMethods,"    public static List<Method> getPublicMethods(Class<?> clazz, Method... excludeMethods) {
        return ReflectUtils.getPublicMethods(clazz, excludeMethods);
    }"
28458,getPublicMethods,"    public static List<Method> getPublicMethods(Class<?> clazz, Filter<Method> filter) {
        return ReflectUtils.getPublicMethods(clazz, filter);
    }"
28459,getPublicMethods,"    public static Method[] getPublicMethods(Class<?> clazz) {
        return ReflectUtils.getPublicMethods(clazz);
    }"
28460,getPublicMethodNames,"    public static Set<String> getPublicMethodNames(Class<?> clazz) {
        return ReflectUtils.getPublicMethodNames(clazz);
    }"
28461,getClasses,"    public static Class<?>[] getClasses(Object... objects) {
        Class<?>[] classes = new Class<?>[objects.length];
        Object obj;
        for (int i = 0; i < objects.length; i++) {
            obj = objects[i];
            classes[i] = (null == obj) ? Object.class : obj.getClass();"
28462,getSimpleClassName,"    public static String getSimpleClassName(String qualifiedName) {
        if (null == qualifiedName) {
            return null;
        }
"
28463,getClassName,"    public static String getClassName(Class<?> clazz, boolean isSimple) {
        if (null == clazz) {
            return null;
        }"
28464,getClassName,"    public static String getClassName(Object obj, boolean isSimple) {
        if (null == obj) {
            return null;
        }
        final Class<?> clazz = obj.getClass();"
28465,isTopLevelClass,"    public static boolean isTopLevelClass(Class<?> clazz) {
        if (null == clazz) {
            return false;
        }"
28466,getEnclosingClass,"    public static Class<?> getEnclosingClass(Class<?> clazz) {
        return null == clazz ? null : clazz.getEnclosingClass();
    }"
28467,getClass,"    public static <T> Class<T> getClass(T obj) {
        return ((null == obj) ? null : (Class<T>) obj.getClass());
    }"
28468,arrayForName,"    private static Class<?> arrayForName(String className) throws ClassNotFoundException {
        return Class.forName(className.endsWith(""[]"")
            ? ""[L"" + className.substring(0, className.length() - 2) + "";"""
28469,classForName,"    public static Class<?> classForName(String className) throws ClassNotFoundException {
        switch (className) {
            case ""boolean"":
                return boolean.class;"
28470,toString,"    public static String toString(char c) {
        return c < ASCII_LENGTH ? CACHE[c] : String.valueOf(c);
    }"
28472,isBlankChar,"    public static boolean isBlankChar(int c) {
        return Character.isWhitespace(c) || Character.isSpaceChar(c) || c == '\ufeff' || c == '\u202a';
    }"
28473,isBlankChar,"    public static boolean isBlankChar(char c) {
        return isBlankChar((int) c);
    }"
28474,convertInternal,"    protected Character convertInternal(Object value) {
        if (value == null) {
            return null;
        }
"
28475,getUninterruptibly,"    public static <V> V getUninterruptibly(Future<V> future) throws ExecutionException {
        boolean interrupted = false;
        try {
            while (true) {"
28476,getDone,"    public static <V> V getDone(Future<V> future) throws ExecutionException {
        /*
         * We throw IllegalStateException, since the call could succeed later. Perhaps we ""should"" throw
         * IllegalArgumentException, since the call could succeed with a different argument. Those"
28477,run,"    public void run() {
        if (future instanceof InternalFutureFailureAccess) {
            Throwable failure =
                    InternalFutures.tryInternalFastPathGetFailure((InternalFutureFailureAccess) future);
            if (failure != null) {
                callback.onFailure(failure);"
28480,isBoolean,"    public static boolean isBoolean(Class<?> clazz) {
        return (clazz == Boolean.class || clazz == boolean.class);
    }"
28481,xor,"    public static boolean xor(boolean... array) {
        if (ArrayUtils.isEmpty(array)) {
            throw new IllegalArgumentException(""The Array must not be empty"");
        }

        boolean result = false;"
28482,or,"    public static boolean or(boolean... array) {
        if (ArrayUtils.isEmpty(array)) {
            throw new IllegalArgumentException(""The Array must not be empty !"");
        }
        for (final boolean element : array) {"
28483,and,"    public static boolean and(boolean... array) {
        if (ArrayUtils.isEmpty(array)) {
            throw new IllegalArgumentException(""The Array must not be empty !"");
        }
        for (final boolean element : array) {"
28484,toString,"    public static String toString(boolean bool, String trueString, String falseString) {
        return bool ? trueString : falseString;
    }"
28485,toStringYesNo,"    public static String toStringYesNo(boolean bool) {
        return toString(bool, ""yes"", ""no"");
    }"
28486,toStringOnOff,"    public static String toStringOnOff(boolean bool) {
        return toString(bool, ""on"", ""off"");
    }"
28487,toStringTrueFalse,"    public static String toStringTrueFalse(boolean bool) {
        return toString(bool, ""true"", ""false"");
    }"
28488,toDoubleObj,"    public static Double toDoubleObj(boolean value) {
        return toDouble(value);
    }"
28489,toDouble,"    public static double toDouble(boolean value) {
        return toInt(value);
    }"
28490,toFloatObj,"    public static Float toFloatObj(boolean value) {
        return toFloat(value);
    }"
28491,toFloat,"    public static float toFloat(boolean value) {
        return (float) toInt(value);
    }"
28492,toShortObj,"    public static Short toShortObj(boolean value) {
        return toShort(value);
    }"
28493,toShort,"    public static short toShort(boolean value) {
        return (short) toInt(value);
    }"
28494,toLongObj,"    public static Long toLongObj(boolean value) {
        return toLong(value);
    }"
28495,toLong,"    public static long toLong(boolean value) {
        return toInt(value);
    }"
28496,toByteObj,"    public static Byte toByteObj(boolean value) {
        return toByte(value);
    }"
28497,toByte,"    public static byte toByte(boolean value) {
        return (byte) toInt(value);
    }"
28498,toCharacter,"    public static Character toCharacter(boolean value) {
        return toChar(value);
    }"
28499,toChar,"    public static char toChar(boolean value) {
        return (char) toInt(value);
    }"
28500,toInteger,"    public static Integer toInteger(boolean value) {
        return toInt(value);
    }"
28501,toInt,"    public static int toInt(boolean value) {
        return value ? 1 : 0;
    }"
28502,toBoolean,"    public static boolean toBoolean(String valueStr) {
        if (StringUtils.isNotBlank(valueStr)) {
            valueStr = valueStr.trim().toLowerCase();
            return ArrayUtils.contains(TRUE_ARRAY, valueStr);"
28503,negate,"    public static boolean negate(boolean bool) {
        return !bool;
    }"
28504,isFalse,"    public static boolean isFalse(Boolean bool) {
        return Boolean.FALSE.equals(bool);
    }"
28505,isTrue,"    public static boolean isTrue(Boolean bool) {
        return Boolean.TRUE.equals(bool);
    }"
28506,negate,"    public static Boolean negate(Boolean bool) {
        if (bool == null) {
            return null;
        }"
28507,convertInternal,"    protected Boolean convertInternal(Object value) {
        if (null == value) {
            return Boolean.FALSE;
        }
        if (Boolean.class == value.getClass()) {
            return (Boolean) value;"
28508,rejectedExecution,"    public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {
        try {
            /**"
28509,parseMessage,"    public String parseMessage(Object... params) {
        return StringUtils.format(messageTemplate, params);
    }"
28510,cloneProp,"    public static <T> T cloneProp(Object object, Class<T> targetClass) {
        final String jsonString = JSON.toJSONString(object);
        final Object o = JSON.parseObject(jsonString, targetClass);
        return (T) o;
    }"
28511,cloneProp,"    public static <T> T cloneProp(T object) {
        final String jsonString = JSON.toJSONString(object);
        final Object o = JSON.parseObject(jsonString, object.getClass());
        return (T) o;
    }"
28512,getBeans,"    public static <T> List<T> getBeans(ListableBeanFactory beanFactory, String[] beanNames, Class<T> beanType) {

        if (ArrayUtils.isEmpty(beanNames)) {
            return Collections.emptyList();
        }

        String[] allBeanNames = beanNamesForTypeIncludingAncestors(beanFactory, beanType);"
28513,getOptionalBean,"    public static <T> T getOptionalBean(ListableBeanFactory beanFactory, String beanName, Class<T> beanType) {

        if (StringUtils.isBlank(beanName)) {
            return null;
        }
"
28514,unWrap,"    public static Class<?> unWrap(Class<?> clazz) {
        if (null == clazz || clazz.isPrimitive()) {
            return clazz;
        }
        Class<?> result = WRAPPER_PRIMITIVE_MAP.get(clazz);"
28515,wrap,"    public static Class<?> wrap(Class<?> clazz) {
        if (null == clazz || !clazz.isPrimitive()) {
            return clazz;
        }
        Class<?> result = PRIMITIVE_WRAPPER_MAP.get(clazz);"
28516,justUnauthorized,"    public static void justUnauthorized(BizCode bizCode, Object... userMessageParams) {
        throw new UnauthorizedException(bizCode, null, userMessageParams);
    }"
28517,justUnauthorized,"    public static void justUnauthorized(BizCode bizCode) {
        throw new UnauthorizedException(bizCode, null);
    }"
28518,justUnauthorized,"    public static void justUnauthorized(String message, BizCode bizCode) {
        throw new UnauthorizedException(message, bizCode, null);
    }"
28519,justUnauthorized,"    public static void justUnauthorized(String message) {
        throw new UnauthorizedException(message);
    }"
28520,authorized,"    public static void authorized(boolean expression, BizCode bizCode, Object... userMessageParams) {
        if (!expression) {
            justUnauthorized(bizCode, userMessageParams);"
28521,authorized,"    public static void authorized(boolean expression, BizCode bizCode) {
        if (!expression) {
            justUnauthorized(bizCode);"
28522,authorized,"    public static void authorized(boolean expression, String message, BizCode bizCode) {
        if (!expression) {
            justUnauthorized(message, bizCode);"
28523,authorized,"    public static void authorized(boolean expression, String message) {
        if (!expression) {
            justUnauthorized(message);"
28524,justFailed,"    public static void justFailed(BizCode bizCode, Object... userMessageParams) {
        throw new StandardBusinessException(bizCode, null, userMessageParams);
    }"
28525,justFailed,"    public static void justFailed(BizCode bizCode) {
        throw new StandardBusinessException(bizCode, null);
    }"
28526,justFailed,"    public static void justFailed(String message, BizCode bizCode) {
        throw new StandardBusinessException(message, bizCode, null);
    }"
28527,justFailed,"    public static void justFailed(String message) {
        throw new StandardBusinessException(message);
    }"
28528,pass,"    public static void pass(boolean expression, BizCode bizCode, Object... userMessageParams) {
        if (!expression) {
            justFailed(bizCode, userMessageParams);"
28529,pass,"    public static void pass(boolean expression, BizCode bizCode) {
        if (!expression) {
            justFailed(bizCode);"
28530,pass,"    public static void pass(boolean expression, String message, BizCode bizCode) {
        if (!expression) {
            justFailed(message, bizCode);"
28531,pass,"    public static void pass(boolean expression, String message) {
        if (!expression) {
            justFailed(message);"
28532,justNotFound,"    public static void justNotFound(BizCode bizCode, Object... userMessageParams) {
        throw new NotFoundException(bizCode, null, userMessageParams);
    }"
28533,justNotFound,"    public static void justNotFound(BizCode bizCode) {
        throw new NotFoundException(bizCode, null);
    }"
28534,justNotFound,"    public static void justNotFound(String message, BizCode bizCode) {
        throw new NotFoundException(message, bizCode, null);
    }"
28535,justNotFound,"    public static void justNotFound(String message) {
        throw new NotFoundException(message);
    }"
28536,found,"    public static void found(boolean expression, BizCode bizCode, Object... userMessageParams) {
        if (!expression) {
            justNotFound(bizCode, userMessageParams);"
28537,found,"    public static void found(boolean expression, BizCode bizCode) {
        if (!expression) {
            justNotFound(bizCode);"
28538,found,"    public static void found(boolean expression, String message, BizCode bizCode) {
        if (!expression) {
            justNotFound(message, bizCode);"
28539,found,"    public static void found(boolean expression, String message) {
        if (!expression) {
            justNotFound(message);"
28540,justInvalidParam,"    public static void justInvalidParam(BizCode bizCode, Object... userMessageParams) {
        throw new InvalidParamException(bizCode, null, userMessageParams);
    }"
28541,justInvalidParam,"    public static void justInvalidParam(BizCode bizCode) {
        throw new InvalidParamException(bizCode, null);
    }"
28542,justInvalidParam,"    public static void justInvalidParam(String message, BizCode bizCode) {
        throw new InvalidParamException(message, bizCode, null);
    }"
28543,justInvalidParam,"    public static void justInvalidParam(String message) {
        throw new InvalidParamException(message);
    }"
28544,validParam,"    public static void validParam(boolean expression, BizCode bizCode, Object... userMessageParams) {
        if (!expression) {
            justInvalidParam(bizCode, userMessageParams);"
28545,validParam,"    public static void validParam(boolean expression, BizCode bizCode) {
        if (!expression) {
            justInvalidParam(bizCode);"
28546,validParam,"    public static void validParam(boolean expression, String message, BizCode bizCode) {
        if (!expression) {
            justInvalidParam(message, bizCode);"
28547,validParam,"    public static void validParam(boolean expression, String message) {
        if (!expression) {
            justInvalidParam(message);"
28548,justDenied,"    public static void justDenied(BizCode bizCode, Object... userMessageParams) {
        throw new AccessDeniedException(bizCode, null, userMessageParams);
    }"
28549,justDenied,"    public static void justDenied(BizCode bizCode) {
        throw new AccessDeniedException(bizCode, null);
    }"
28550,justDenied,"    public static void justDenied(String message, BizCode bizCode) {
        throw new AccessDeniedException(message, bizCode, null);
    }"
28551,justDenied,"    public static void justDenied(String message) {
        throw new AccessDeniedException(message);
    }"
28552,allowed,"    public static void allowed(boolean expression, BizCode bizCode, Object... userMessageParams) {
        if (!expression) {
            justDenied(bizCode, userMessageParams);"
28553,allowed,"    public static void allowed(boolean expression, BizCode bizCode) {
        if (!expression) {
            justDenied(bizCode);"
28554,allowed,"    public static void allowed(boolean expression, String message, BizCode bizCode) {
        if (!expression) {
            justDenied(message, bizCode);"
28555,allowed,"    public static void allowed(boolean expression, String message) {
        if (!expression) {
            justDenied(message);"
28556,toString,"    public static String toString(Object obj) {
        if (null == obj) {
            return null;
        }
"
28557,indexOf,"    public static <T> int indexOf(T[] array, Object value) {
        if (null != array) {
            for (int i = 0; i < array.length; i++) {
                if (Objects.equals(value, array[i])) {"
28558,contains,"    public static <T> boolean contains(T[] array, T value) {
        return indexOf(array, value) > INDEX_NOT_FOUND;
    }"
28559,indexOf,"    public static int indexOf(char[] array, char value) {
        if (null != array) {
            for (int i = 0; i < array.length; i++) {
                if (value == array[i]) {"
28560,contains,"    public static boolean contains(char[] array, char value) {
        return indexOf(array, value) > INDEX_NOT_FOUND;
    }"
28561,length,"    public static int length(Object array) {
        if (null == array) {
            return 0;
        }"
28562,insert,"    public static <T> Object insert(Object array, int index, T... newElements) {
        if (isEmpty(newElements)) {
            return array;
        }
        if (isEmpty(array)) {
            return newElements;
        }

        final int len = length(array);
        if (index < 0) {
            index = (index % len) + len;"
28563,insert,"    public static <T> T[] insert(T[] buffer, int index, T... newElements) {
        return (T[]) insert((Object) buffer, index, newElements);
    }"
28564,append,"    public static <T> T[] append(T[] buffer, T... newElements) {
        if (isEmpty(buffer)) {
            return newElements;
        }"
28565,filter,"    public static <T> T[] filter(T[] array, Filter<T> filter) {
        if (null == filter) {
            return array;
        }

        final ArrayList<T> list = new ArrayList<>(array.length);
        for (T t : array) {"
28566,newArray,"    public static <T> T[] newArray(Class<?> componentType, int newSize) {
        return (T[]) Array.newInstance(componentType, newSize);
    }"
28567,of,"    public static <T> T[] of(T... values) {
        return values;
    }"
28568,notHasNull,"    public static <T> boolean notHasNull(T... array) {
        return !hasNull(array);
    }"
28569,hasNull,"    public static <T> boolean hasNull(T... array) {
        if (isNotEmpty(array)) {
            for (T element : array) {
                if (null == element) {"
28570,isNotEmpty,"    public static boolean isNotEmpty(final Object[] array) {
        return !isEmpty(array);
    }"
28571,isEmpty,"    public static boolean isEmpty(Object array) {
        if (null == array) {
            return true;
        } else if (isArray(array)) {"
28572,isArray,"    public static boolean isArray(Object obj) {
        if (null == obj) {
            return false;
        }"
28573,resolveException,"    private void resolveException(Throwable e) {
        Throwable throwable = causeOf(e);
        if (throwable instanceof AbstractStandardException) {
            this.code = ((AbstractStandardException) e).getCode();"
28574,getMessage,"    private static String getMessage(String existMessage, Throwable e, BizCode bizCode, Object... params) {
        Throwable throwable = causeOf(e);

        String messagePrefix = StringUtils.isBlank(existMessage) ? """" : existMessage + ""; "";

        if (throwable instanceof AbstractStandardException) {
            if (StringUtils.isBlank(throwable.getMessage())) {"
28575,causeOf,"    public static Throwable causeOf(Throwable e) {
        int count = 0;
        Throwable exception = e;
        while (exception != null && count++ < 50) {
            if (exception instanceof AbstractStandardException) {
                return exception;"
28576,submit,"    public <T> ListenableFuture<T> submit(Callable<T> task) {
        return (ListenableFuture<T>) super.submit(task);
    }"
28577,submit,"    public <T> ListenableFuture<T> submit(Runnable task, T result) {
        return (ListenableFuture<T>) super.submit(task, result);
    }"
28578,submit,"    public ListenableFuture<?> submit(Runnable task) {
        return (ListenableFuture<?>) super.submit(task);
    }"
28579,newTaskFor,"    protected final <T> RunnableFuture<T> newTaskFor(Callable<T> callable) {
        return TrustedListenableFutureTask.create(callable);
    }"
28580,newTaskFor,"    protected final <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {
        return TrustedListenableFutureTask.create(runnable, value);
    }"
28581,cancellationExceptionWithCause,"    private static CancellationException cancellationExceptionWithCause(
            String message, Throwable cause) {
        CancellationException exception = new CancellationException(message);
        exception.initCause(cause);
        return exception;"
28582,casValue,"        boolean casValue(AbstractFuture<?> future, Object expect, Object update) {
            synchronized (future) {
                if (future.value == expect) {"
28583,casListeners,"        boolean casListeners(AbstractFuture<?> future, Listener expect, Listener update) {
            synchronized (future) {
                if (future.listeners == expect) {"
28584,casWaiters,"        boolean casWaiters(AbstractFuture<?> future, Waiter expect, Waiter update) {
            synchronized (future) {
                if (future.waiters == expect) {"
28585,putNext,"        void putNext(Waiter waiter, Waiter newValue) {
            waiter.next = newValue;
        }"
28586,putThread,"        void putThread(Waiter waiter, Thread newValue) {
            waiter.thread = newValue;
        }"
28587,casValue,"        boolean casValue(AbstractFuture<?> future, Object expect, Object update) {
            return valueUpdater.compareAndSet(future, expect, update);
        }"
28588,casListeners,"        boolean casListeners(AbstractFuture<?> future, Listener expect, Listener update) {
            return listenersUpdater.compareAndSet(future, expect, update);
        }"
28589,casWaiters,"        boolean casWaiters(AbstractFuture<?> future, Waiter expect, Waiter update) {
            return waitersUpdater.compareAndSet(future, expect, update);
        }"
28590,putNext,"        void putNext(Waiter waiter, Waiter newValue) {
            waiterNextUpdater.lazySet(waiter, newValue);
        }"
28591,putThread,"        void putThread(Waiter waiter, Thread newValue) {
            waiterThreadUpdater.lazySet(waiter, newValue);
        }"
28592,casValue,"        abstract boolean casValue(AbstractFuture<?> future, Object expect, Object update);
    }"
28593,casListeners,"        abstract boolean casListeners(AbstractFuture<?> future, Listener expect, Listener update);
"
28594,casWaiters,"        abstract boolean casWaiters(AbstractFuture<?> future, Waiter expect, Waiter update);
"
28595,putNext,"        abstract void putNext(Waiter waiter, Waiter newValue);
"
28596,putThread,"        abstract void putThread(Waiter waiter, Thread newValue);
"
28597,executeListener,"    private static void executeListener(Runnable runnable, Executor executor) {
        try {
            executor.execute(runnable);"
28599,addDoneString,"    private void addDoneString(StringBuilder builder) {
        try {
            V value = getUninterruptibly(this);"
28602,toString,"    public String toString() {
        StringBuilder builder = new StringBuilder().append(super.toString()).append(""[status="");
        if (isCancelled()) {
            builder.append(""CANCELLED"");
        } else if (isDone()) {"
28603,clearListeners,"    private Listener clearListeners(Listener onto) {

        Listener head;
        do {
            head = listeners;
        } while (!ATOMIC_HELPER.casListeners(this, head, Listener.TOMBSTONE));
        Listener reversedList = onto;"
28604,releaseWaiters,"    private void releaseWaiters() {
        Waiter head;
        do {
            head = waiters;
        } while (!ATOMIC_HELPER.casWaiters(this, head, Waiter.TOMBSTONE));"
28605,maybePropagateCancellationTo,"    final void maybePropagateCancellationTo(Future<?> related) {
        if (related != null & isCancelled()) {
            related.cancel(wasInterrupted());"
28606,tryInternalFastPathGetFailure,"    protected final Throwable tryInternalFastPathGetFailure() {
        if (this instanceof Trusted) {
            Object obj = value;
            if (obj instanceof Failure) {"
28608,complete,"    private static void complete(AbstractFuture<?> future) {
        Listener next = null;
        outer:
        while (true) {"
28609,getUninterruptibly,"    private static <V> V getUninterruptibly(Future<V> future) throws ExecutionException {
        boolean interrupted = false;
        try {
            while (true) {"
28610,getFutureValue,"    private static Object getFutureValue(ListenableFuture<?> future) {
        if (future instanceof Trusted) {
            Object v = ((AbstractFuture<?>) future).value;
            if (v instanceof Cancellation) {
                Cancellation c = (Cancellation) v;
                if (c.wasInterrupted) {
                    v ="
28611,setFuture,"    protected boolean setFuture(ListenableFuture<? extends V> future) {
        Object localValue = value;
        if (localValue == null) {
            if (future.isDone()) {
                Object value = getFutureValue(future);
                if (ATOMIC_HELPER.casValue(this, null, value)) {"
28612,setException,"    protected boolean setException(Throwable throwable) {
        Object valueToSet = new Failure(throwable);
        if (ATOMIC_HELPER.casValue(this, null, valueToSet)) {
            complete(this);
            return true;"
28613,set,"    protected boolean set(V value) {
        Object valueToSet = value == null ? NULL : value;
        if (ATOMIC_HELPER.casValue(this, null, valueToSet)) {
            complete(this);
            return true;"
28614,addListener,"    public void addListener(Runnable listener, Executor executor) {
        if (!isDone()) {
            Listener oldHead = listeners;
            if (oldHead != Listener.TOMBSTONE) {"
28615,wasInterrupted,"    protected final boolean wasInterrupted() {
        final Object localValue = value;
        return (localValue instanceof Cancellation) && ((Cancellation) localValue).wasInterrupted;
    }"
28617,cancel,"    public boolean cancel(boolean mayInterruptIfRunning) {
        Object localValue = value;
        boolean rValue = false;
        if (localValue == null | localValue instanceof SetFuture) {
            Object valueToSet =
                    GENERATE_CANCELLATION_CAUSES"
28618,isCancelled,"    public boolean isCancelled() {
        final Object localValue = value;
        return localValue instanceof Cancellation;
    }"
28619,isDone,"    public boolean isDone() {
        final Object localValue = value;
        return localValue != null & !(localValue instanceof SetFuture);
    }"
28621,get,"    public V get() throws InterruptedException, ExecutionException {
        if (Thread.interrupted()) {
            throw new InterruptedException();
        }
        Object localValue = value;
        if (localValue != null & !(localValue instanceof SetFuture)) {
            return getDoneValue(localValue);
        }"
28626,unpark,"        void unpark() {

            Thread w = thread;
            if (w != null) {"
28627,setNext,"        void setNext(Waiter next) {
            ATOMIC_HELPER.putNext(this, next);
        }"
28628,getTargetType,"    public Class<T> getTargetType() {
        return (Class<T>) ClassUtils.getTypeArgument(getClass());
    }"
28629,convertToStr,"    protected String convertToStr(Object value) {
        if (null == value) {
            return null;
        }
        if (value instanceof CharSequence) {"
28630,convertInternal,"    protected abstract T convertInternal(Object value);
"
28632,convertQuietly,"    public T convertQuietly(Object value, T defaultValue) {
        try {
            return convert(value, defaultValue);"
